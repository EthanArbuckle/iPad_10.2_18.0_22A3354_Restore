uint64_t sub_854BC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _BYTE v9[32];
  _QWORD v10[2];

  v2 = type metadata accessor for ButtonViewModel.Content(319);
  if (v3 <= 0x3F)
  {
    v4 = type metadata accessor for ButtonViewModel.ActionKind(319);
    if (v5 > 0x3F)
    {
      return v4;
    }
    else
    {
      swift_getTupleTypeLayout2(v9, *(_QWORD *)(v2 - 8) + 64, *(_QWORD *)(v4 - 8) + 64);
      v10[0] = v9;
      sub_86B90(319);
      v2 = v6;
      if (v7 <= 0x3F)
      {
        v10[1] = *(_QWORD *)(v6 - 8) + 64;
        swift_initStructMetadata(a1, 0, 2, v10, a1 + 32);
        return 0;
      }
    }
  }
  return v2;
}

uint64_t *sub_8557C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  id v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = type metadata accessor for ButtonViewModel.Content(0);
    switch(swift_getEnumCaseMultiPayload(a2, v7))
    {
      case 0u:
        v8 = type metadata accessor for LocalizerRequest(0);
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
        v9 = a1;
        v10 = v7;
        v11 = 0;
        goto LABEL_11;
      case 1u:
        v13 = a2[1];
        *a1 = *a2;
        a1[1] = v13;
        swift_bridgeObjectRetain(v13);
        v9 = a1;
        v10 = v7;
        v11 = 1;
        goto LABEL_11;
      case 2u:
        v14 = a2[1];
        *a1 = *a2;
        a1[1] = v14;
        v15 = (void *)a2[2];
        a1[2] = (uint64_t)v15;
        swift_bridgeObjectRetain(v14);
        v16 = v15;
        v17 = *(int *)(sub_5440(&qword_2621A8) + 64);
        v18 = (char *)a1 + v17;
        v19 = (char *)a2 + v17;
        v20 = type metadata accessor for LocalizerRequest(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v18, v19, v20);
        v9 = a1;
        v10 = v7;
        v11 = 2;
        goto LABEL_11;
      case 3u:
        v21 = a2[1];
        *a1 = *a2;
        a1[1] = v21;
        swift_bridgeObjectRetain(v21);
        v22 = *(int *)(sub_5440(&qword_2621B0) + 48);
        v23 = (char *)a1 + v22;
        v24 = (char *)a2 + v22;
        v25 = type metadata accessor for LocalizerRequest(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 16))(v23, v24, v25);
        v9 = a1;
        v10 = v7;
        v11 = 3;
        goto LABEL_11;
      case 4u:
        v26 = type metadata accessor for LocalizerRequest(0);
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v26 - 8) + 16))(a1, a2, v26);
        v27 = *(int *)(sub_5440(&qword_2621B8) + 48);
        v28 = (uint64_t *)((char *)a1 + v27);
        v29 = (uint64_t *)((char *)a2 + v27);
        v30 = v29[1];
        *v28 = *v29;
        v28[1] = v30;
        swift_bridgeObjectRetain(v30);
        v9 = a1;
        v10 = v7;
        v11 = 4;
        goto LABEL_11;
      case 5u:
        v31 = type metadata accessor for LocalizerRequest(0);
        v32 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v31 - 8) + 16);
        v32(a1, a2, v31);
        v33 = sub_5440(&qword_2621C0);
        v32((uint64_t *)((char *)a1 + *(int *)(v33 + 48)), (uint64_t *)((char *)a2 + *(int *)(v33 + 48)), v31);
        v9 = a1;
        v10 = v7;
        v11 = 5;
LABEL_11:
        swift_storeEnumTagMultiPayload(v9, v10, v11);
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
        break;
    }
    v34 = *(int *)(sub_5440(qword_2621C8) + 48);
    v35 = (char *)a1 + v34;
    v36 = (char *)a2 + v34;
    v37 = type metadata accessor for ButtonViewModel.ActionKind(0);
    if (swift_getEnumCaseMultiPayload(v36, v37) == 1)
    {
      v38 = type metadata accessor for URL(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v38 - 8) + 16))(v35, v36, v38);
      v39 = v35;
      v40 = v37;
      v41 = 1;
    }
    else
    {
      v42 = *((_QWORD *)v36 + 3);
      if (v42)
      {
        v43 = *((_QWORD *)v36 + 4);
        *((_QWORD *)v35 + 3) = v42;
        *((_QWORD *)v35 + 4) = v43;
        (**(void (***)(char *, char *))(v42 - 8))(v35, v36);
      }
      else
      {
        v44 = *((_OWORD *)v36 + 1);
        *(_OWORD *)v35 = *(_OWORD *)v36;
        *((_OWORD *)v35 + 1) = v44;
        *((_QWORD *)v35 + 4) = *((_QWORD *)v36 + 4);
      }
      v39 = v35;
      v40 = v37;
      v41 = 0;
    }
    swift_storeEnumTagMultiPayload(v39, v40, v41);
    v45 = *(int *)(a3 + 36);
    v46 = (char *)a1 + v45;
    v47 = (char *)a2 + v45;
    v48 = sub_5440(&qword_262198);
    v49 = *(_QWORD *)(v48 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v49 + 48))(v47, 1, v48))
    {
      v50 = sub_5440(&qword_262190);
      memcpy(v46, v47, *(_QWORD *)(*(_QWORD *)(v50 - 8) + 64));
    }
    else
    {
      v51 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v51 - 8) + 16))(v46, v47, v51);
      v52 = *(int *)(v48 + 48);
      v53 = *(_OWORD *)&v47[v52 + 24];
      *(_OWORD *)&v46[v52 + 24] = v53;
      (**(void (***)(void))(v53 - 8))();
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v49 + 56))(v46, 0, 1, v48);
    }
  }
  return a1;
}

uint64_t sub_85944(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;

  v4 = type metadata accessor for ButtonViewModel.Content(0);
  switch(swift_getEnumCaseMultiPayload(a1, v4))
  {
    case 0u:
      v5 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
      break;
    case 1u:
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
      break;
    case 2u:
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));

      v6 = *(int *)(sub_5440(&qword_2621A8) + 64);
      goto LABEL_6;
    case 3u:
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
      v6 = *(int *)(sub_5440(&qword_2621B0) + 48);
LABEL_6:
      v7 = a1 + v6;
      v8 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
      break;
    case 4u:
      v9 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(a1, v9);
      v10 = sub_5440(&qword_2621B8);
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(v10 + 48) + 8));
      break;
    case 5u:
      v11 = type metadata accessor for LocalizerRequest(0);
      v12 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8);
      v12(a1, v11);
      v13 = sub_5440(&qword_2621C0);
      v12(a1 + *(int *)(v13 + 48), v11);
      break;
    default:
      break;
  }
  v14 = (_QWORD *)(a1 + *(int *)(sub_5440(qword_2621C8) + 48));
  v15 = type metadata accessor for ButtonViewModel.ActionKind(0);
  if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
  {
    v16 = type metadata accessor for URL(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v14, v16);
  }
  else if (v14[3])
  {
    _s7BooksUI13AnyPagedFrameVwxx_0(v14);
  }
  v17 = a1 + *(int *)(a2 + 36);
  v18 = sub_5440(&qword_262198);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 48))(v17, 1, v18);
  if (!(_DWORD)result)
  {
    v20 = type metadata accessor for LocalizerRequest(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(v17, v20);
    return _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)(v17 + *(int *)(v18 + 48)));
  }
  return result;
}

_QWORD *sub_85B70(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(_QWORD *, _QWORD *, uint64_t);
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;

  v6 = type metadata accessor for ButtonViewModel.Content(0);
  switch(swift_getEnumCaseMultiPayload(a2, v6))
  {
    case 0u:
      v7 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = v6;
      v10 = 0;
      goto LABEL_9;
    case 1u:
      v11 = a2[1];
      *a1 = *a2;
      a1[1] = v11;
      swift_bridgeObjectRetain(v11);
      v8 = a1;
      v9 = v6;
      v10 = 1;
      goto LABEL_9;
    case 2u:
      v12 = a2[1];
      *a1 = *a2;
      a1[1] = v12;
      v13 = (void *)a2[2];
      a1[2] = v13;
      swift_bridgeObjectRetain(v12);
      v14 = v13;
      v15 = *(int *)(sub_5440(&qword_2621A8) + 64);
      v16 = (char *)a1 + v15;
      v17 = (char *)a2 + v15;
      v18 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
      v8 = a1;
      v9 = v6;
      v10 = 2;
      goto LABEL_9;
    case 3u:
      v19 = a2[1];
      *a1 = *a2;
      a1[1] = v19;
      swift_bridgeObjectRetain(v19);
      v20 = *(int *)(sub_5440(&qword_2621B0) + 48);
      v21 = (char *)a1 + v20;
      v22 = (char *)a2 + v20;
      v23 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v21, v22, v23);
      v8 = a1;
      v9 = v6;
      v10 = 3;
      goto LABEL_9;
    case 4u:
      v24 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v24 - 8) + 16))(a1, a2, v24);
      v25 = *(int *)(sub_5440(&qword_2621B8) + 48);
      v26 = (_QWORD *)((char *)a1 + v25);
      v27 = (_QWORD *)((char *)a2 + v25);
      v28 = v27[1];
      *v26 = *v27;
      v26[1] = v28;
      swift_bridgeObjectRetain(v28);
      v8 = a1;
      v9 = v6;
      v10 = 4;
      goto LABEL_9;
    case 5u:
      v29 = type metadata accessor for LocalizerRequest(0);
      v30 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v29 - 8) + 16);
      v30(a1, a2, v29);
      v31 = sub_5440(&qword_2621C0);
      v30((_QWORD *)((char *)a1 + *(int *)(v31 + 48)), (_QWORD *)((char *)a2 + *(int *)(v31 + 48)), v29);
      v8 = a1;
      v9 = v6;
      v10 = 5;
LABEL_9:
      swift_storeEnumTagMultiPayload(v8, v9, v10);
      break;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
      break;
  }
  v32 = *(int *)(sub_5440(qword_2621C8) + 48);
  v33 = (char *)a1 + v32;
  v34 = (char *)a2 + v32;
  v35 = type metadata accessor for ButtonViewModel.ActionKind(0);
  if (swift_getEnumCaseMultiPayload(v34, v35) == 1)
  {
    v36 = type metadata accessor for URL(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v36 - 8) + 16))(v33, v34, v36);
    v37 = v33;
    v38 = v35;
    v39 = 1;
  }
  else
  {
    v40 = *((_QWORD *)v34 + 3);
    if (v40)
    {
      v41 = *((_QWORD *)v34 + 4);
      *((_QWORD *)v33 + 3) = v40;
      *((_QWORD *)v33 + 4) = v41;
      (**(void (***)(char *, char *))(v40 - 8))(v33, v34);
    }
    else
    {
      v42 = *((_OWORD *)v34 + 1);
      *(_OWORD *)v33 = *(_OWORD *)v34;
      *((_OWORD *)v33 + 1) = v42;
      *((_QWORD *)v33 + 4) = *((_QWORD *)v34 + 4);
    }
    v37 = v33;
    v38 = v35;
    v39 = 0;
  }
  swift_storeEnumTagMultiPayload(v37, v38, v39);
  v43 = *(int *)(a3 + 36);
  v44 = (char *)a1 + v43;
  v45 = (char *)a2 + v43;
  v46 = sub_5440(&qword_262198);
  v47 = *(_QWORD *)(v46 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v47 + 48))(v45, 1, v46))
  {
    v48 = sub_5440(&qword_262190);
    memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
  }
  else
  {
    v49 = type metadata accessor for LocalizerRequest(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v49 - 8) + 16))(v44, v45, v49);
    v50 = *(int *)(v46 + 48);
    v51 = *(_OWORD *)&v45[v50 + 24];
    *(_OWORD *)&v44[v50 + 24] = v51;
    (**(void (***)(void))(v51 - 8))();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v47 + 56))(v44, 0, 1, v46);
  }
  return a1;
}

_QWORD *sub_85F0C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(_QWORD *, _QWORD *, uint64_t);
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t (*v45)(char *, uint64_t, uint64_t);
  int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;

  if (a1 != a2)
  {
    sub_224DC((uint64_t)a1, type metadata accessor for ButtonViewModel.Content);
    v6 = type metadata accessor for ButtonViewModel.Content(0);
    switch(swift_getEnumCaseMultiPayload(a2, v6))
    {
      case 0u:
        v7 = type metadata accessor for LocalizerRequest(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
        swift_storeEnumTagMultiPayload(a1, v6, 0);
        break;
      case 1u:
        *a1 = *a2;
        v8 = a2[1];
        a1[1] = v8;
        swift_bridgeObjectRetain(v8);
        swift_storeEnumTagMultiPayload(a1, v6, 1);
        break;
      case 2u:
        *a1 = *a2;
        v9 = a2[1];
        a1[1] = v9;
        v10 = (void *)a2[2];
        a1[2] = v10;
        swift_bridgeObjectRetain(v9);
        v11 = v10;
        v12 = *(int *)(sub_5440(&qword_2621A8) + 64);
        v13 = (char *)a1 + v12;
        v14 = (char *)a2 + v12;
        v15 = type metadata accessor for LocalizerRequest(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
        swift_storeEnumTagMultiPayload(a1, v6, 2);
        break;
      case 3u:
        *a1 = *a2;
        v16 = a2[1];
        a1[1] = v16;
        swift_bridgeObjectRetain(v16);
        v17 = *(int *)(sub_5440(&qword_2621B0) + 48);
        v18 = (char *)a1 + v17;
        v19 = (char *)a2 + v17;
        v20 = type metadata accessor for LocalizerRequest(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v18, v19, v20);
        swift_storeEnumTagMultiPayload(a1, v6, 3);
        break;
      case 4u:
        v21 = type metadata accessor for LocalizerRequest(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(a1, a2, v21);
        v22 = *(int *)(sub_5440(&qword_2621B8) + 48);
        v23 = (_QWORD *)((char *)a1 + v22);
        v24 = (_QWORD *)((char *)a2 + v22);
        *v23 = *v24;
        v25 = v24[1];
        v23[1] = v25;
        swift_bridgeObjectRetain(v25);
        swift_storeEnumTagMultiPayload(a1, v6, 4);
        break;
      case 5u:
        v26 = type metadata accessor for LocalizerRequest(0);
        v27 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v26 - 8) + 16);
        v27(a1, a2, v26);
        v28 = sub_5440(&qword_2621C0);
        v27((_QWORD *)((char *)a1 + *(int *)(v28 + 48)), (_QWORD *)((char *)a2 + *(int *)(v28 + 48)), v26);
        swift_storeEnumTagMultiPayload(a1, v6, 5);
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
        break;
    }
    v29 = *(int *)(sub_5440(qword_2621C8) + 48);
    v30 = (char *)a1 + v29;
    v31 = (char *)a2 + v29;
    sub_224DC((uint64_t)a1 + v29, type metadata accessor for ButtonViewModel.ActionKind);
    v32 = type metadata accessor for ButtonViewModel.ActionKind(0);
    if (swift_getEnumCaseMultiPayload(v31, v32) == 1)
    {
      v33 = type metadata accessor for URL(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v33 - 8) + 16))(v30, v31, v33);
      v34 = v30;
      v35 = v32;
      v36 = 1;
    }
    else
    {
      v37 = *((_QWORD *)v31 + 3);
      if (v37)
      {
        *((_QWORD *)v30 + 3) = v37;
        *((_QWORD *)v30 + 4) = *((_QWORD *)v31 + 4);
        (**(void (***)(char *, char *))(v37 - 8))(v30, v31);
      }
      else
      {
        v38 = *(_OWORD *)v31;
        v39 = *((_OWORD *)v31 + 1);
        *((_QWORD *)v30 + 4) = *((_QWORD *)v31 + 4);
        *(_OWORD *)v30 = v38;
        *((_OWORD *)v30 + 1) = v39;
      }
      v34 = v30;
      v35 = v32;
      v36 = 0;
    }
    swift_storeEnumTagMultiPayload(v34, v35, v36);
  }
  v40 = *(int *)(a3 + 36);
  v41 = (char *)a1 + v40;
  v42 = (char *)a2 + v40;
  v43 = sub_5440(&qword_262198);
  v44 = *(_QWORD *)(v43 - 8);
  v45 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v44 + 48);
  v46 = v45(v41, 1, v43);
  v47 = v45(v42, 1, v43);
  if (!v46)
  {
    if (!v47)
    {
      v54 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v54 - 8) + 24))(v41, v42, v54);
      sub_142F8(&v41[*(int *)(v43 + 48)], &v42[*(int *)(v43 + 48)]);
      return a1;
    }
    sub_B414((uint64_t)v41, &qword_262198);
    goto LABEL_22;
  }
  if (v47)
  {
LABEL_22:
    v52 = sub_5440(&qword_262190);
    memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
    return a1;
  }
  v48 = type metadata accessor for LocalizerRequest(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v48 - 8) + 16))(v41, v42, v48);
  v49 = *(int *)(v43 + 48);
  v50 = &v41[v49];
  v51 = *(_QWORD *)&v42[v49 + 24];
  *((_QWORD *)v50 + 3) = v51;
  *((_QWORD *)v50 + 4) = *(_QWORD *)&v42[v49 + 32];
  (**(void (***)(void))(v51 - 8))();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v44 + 56))(v41, 0, 1, v43);
  return a1;
}

_QWORD *sub_86374(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(_QWORD *, _QWORD *, uint64_t);
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  __int128 v39;

  v6 = type metadata accessor for ButtonViewModel.Content(0);
  switch(swift_getEnumCaseMultiPayload(a2, v6))
  {
    case 0u:
      v7 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      v8 = a1;
      v9 = v6;
      v10 = 0;
      goto LABEL_8;
    case 2u:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      a1[2] = a2[2];
      v11 = *(int *)(sub_5440(&qword_2621A8) + 64);
      v12 = (char *)a1 + v11;
      v13 = (char *)a2 + v11;
      v14 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
      v8 = a1;
      v9 = v6;
      v10 = 2;
      goto LABEL_8;
    case 3u:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      v15 = *(int *)(sub_5440(&qword_2621B0) + 48);
      v16 = (char *)a1 + v15;
      v17 = (char *)a2 + v15;
      v18 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v16, v17, v18);
      v8 = a1;
      v9 = v6;
      v10 = 3;
      goto LABEL_8;
    case 4u:
      v19 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(a1, a2, v19);
      v20 = sub_5440(&qword_2621B8);
      *(_OWORD *)((char *)a1 + *(int *)(v20 + 48)) = *(_OWORD *)((char *)a2 + *(int *)(v20 + 48));
      v8 = a1;
      v9 = v6;
      v10 = 4;
      goto LABEL_8;
    case 5u:
      v21 = type metadata accessor for LocalizerRequest(0);
      v22 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v21 - 8) + 32);
      v22(a1, a2, v21);
      v23 = sub_5440(&qword_2621C0);
      v22((_QWORD *)((char *)a1 + *(int *)(v23 + 48)), (_QWORD *)((char *)a2 + *(int *)(v23 + 48)), v21);
      v8 = a1;
      v9 = v6;
      v10 = 5;
LABEL_8:
      swift_storeEnumTagMultiPayload(v8, v9, v10);
      break;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
      break;
  }
  v24 = *(int *)(sub_5440(qword_2621C8) + 48);
  v25 = (char *)a1 + v24;
  v26 = (char *)a2 + v24;
  v27 = type metadata accessor for ButtonViewModel.ActionKind(0);
  if (swift_getEnumCaseMultiPayload(v26, v27) == 1)
  {
    v28 = type metadata accessor for URL(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v28 - 8) + 32))(v25, v26, v28);
    swift_storeEnumTagMultiPayload(v25, v27, 1);
  }
  else
  {
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
  }
  v29 = *(int *)(a3 + 36);
  v30 = (char *)a1 + v29;
  v31 = (char *)a2 + v29;
  v32 = sub_5440(&qword_262198);
  v33 = *(_QWORD *)(v32 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v31, 1, v32))
  {
    v34 = sub_5440(&qword_262190);
    memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
  }
  else
  {
    v35 = type metadata accessor for LocalizerRequest(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v35 - 8) + 32))(v30, v31, v35);
    v36 = *(int *)(v32 + 48);
    v37 = &v30[v36];
    v38 = &v31[v36];
    v39 = *((_OWORD *)v38 + 1);
    *(_OWORD *)v37 = *(_OWORD *)v38;
    *((_OWORD *)v37 + 1) = v39;
    *((_QWORD *)v37 + 4) = *((_QWORD *)v38 + 4);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v33 + 56))(v30, 0, 1, v32);
  }
  return a1;
}

_QWORD *sub_866A4(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(_QWORD *, _QWORD *, uint64_t);
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v34)(char *, uint64_t, uint64_t);
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  __int128 v48;

  if (a1 != a2)
  {
    sub_224DC((uint64_t)a1, type metadata accessor for ButtonViewModel.Content);
    v6 = type metadata accessor for ButtonViewModel.Content(0);
    switch(swift_getEnumCaseMultiPayload(a2, v6))
    {
      case 0u:
        v7 = type metadata accessor for LocalizerRequest(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
        v8 = a1;
        v9 = v6;
        v10 = 0;
        goto LABEL_9;
      case 2u:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        a1[2] = a2[2];
        v11 = *(int *)(sub_5440(&qword_2621A8) + 64);
        v12 = (char *)a1 + v11;
        v13 = (char *)a2 + v11;
        v14 = type metadata accessor for LocalizerRequest(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
        v8 = a1;
        v9 = v6;
        v10 = 2;
        goto LABEL_9;
      case 3u:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        v15 = *(int *)(sub_5440(&qword_2621B0) + 48);
        v16 = (char *)a1 + v15;
        v17 = (char *)a2 + v15;
        v18 = type metadata accessor for LocalizerRequest(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v16, v17, v18);
        v8 = a1;
        v9 = v6;
        v10 = 3;
        goto LABEL_9;
      case 4u:
        v19 = type metadata accessor for LocalizerRequest(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(a1, a2, v19);
        v20 = sub_5440(&qword_2621B8);
        *(_OWORD *)((char *)a1 + *(int *)(v20 + 48)) = *(_OWORD *)((char *)a2 + *(int *)(v20 + 48));
        v8 = a1;
        v9 = v6;
        v10 = 4;
        goto LABEL_9;
      case 5u:
        v21 = type metadata accessor for LocalizerRequest(0);
        v22 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v21 - 8) + 32);
        v22(a1, a2, v21);
        v23 = sub_5440(&qword_2621C0);
        v22((_QWORD *)((char *)a1 + *(int *)(v23 + 48)), (_QWORD *)((char *)a2 + *(int *)(v23 + 48)), v21);
        v8 = a1;
        v9 = v6;
        v10 = 5;
LABEL_9:
        swift_storeEnumTagMultiPayload(v8, v9, v10);
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
        break;
    }
    v24 = *(int *)(sub_5440(qword_2621C8) + 48);
    v25 = (char *)a1 + v24;
    v26 = (char *)a2 + v24;
    sub_224DC((uint64_t)a1 + v24, type metadata accessor for ButtonViewModel.ActionKind);
    v27 = type metadata accessor for ButtonViewModel.ActionKind(0);
    if (swift_getEnumCaseMultiPayload(v26, v27) == 1)
    {
      v28 = type metadata accessor for URL(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v28 - 8) + 32))(v25, v26, v28);
      swift_storeEnumTagMultiPayload(v25, v27, 1);
    }
    else
    {
      memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    }
  }
  v29 = *(int *)(a3 + 36);
  v30 = (char *)a1 + v29;
  v31 = (char *)a2 + v29;
  v32 = sub_5440(&qword_262198);
  v33 = *(_QWORD *)(v32 - 8);
  v34 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v33 + 48);
  v35 = v34(v30, 1, v32);
  v36 = v34(v31, 1, v32);
  if (!v35)
  {
    if (!v36)
    {
      v44 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v44 - 8) + 40))(v30, v31, v44);
      v45 = *(int *)(v32 + 48);
      v46 = &v30[v45];
      v47 = &v31[v45];
      _s7BooksUI13AnyPagedFrameVwxx_0(v46);
      v48 = *((_OWORD *)v47 + 1);
      *(_OWORD *)v46 = *(_OWORD *)v47;
      *((_OWORD *)v46 + 1) = v48;
      *((_QWORD *)v46 + 4) = *((_QWORD *)v47 + 4);
      return a1;
    }
    sub_B414((uint64_t)v30, &qword_262198);
    goto LABEL_18;
  }
  if (v36)
  {
LABEL_18:
    v42 = sub_5440(&qword_262190);
    memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
    return a1;
  }
  v37 = type metadata accessor for LocalizerRequest(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v37 - 8) + 32))(v30, v31, v37);
  v38 = *(int *)(v32 + 48);
  v39 = &v30[v38];
  v40 = &v31[v38];
  v41 = *((_OWORD *)v40 + 1);
  *(_OWORD *)v39 = *(_OWORD *)v40;
  *((_OWORD *)v39 + 1) = v41;
  *((_QWORD *)v39 + 4) = *((_QWORD *)v40 + 4);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v33 + 56))(v30, 0, 1, v32);
  return a1;
}

uint64_t sub_86A78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_86A84);
}

uint64_t sub_86A84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v6 = sub_5440(qword_2621C8);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v8 = sub_5440(&qword_262190);
    v10 = a1 + *(int *)(a3 + 36);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t sub_86B00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_86B0C);
}

uint64_t sub_86B0C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v8 = sub_5440(qword_2621C8);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v10 = sub_5440(&qword_262190);
    v12 = a1 + *(int *)(a4 + 36);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_86B90(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_2622D0)
  {
    v2 = sub_7EF8(&qword_262198);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_2622D0);
  }
}

uint64_t sub_86BE8(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t TupleTypeMetadata3;
  uint64_t v4;
  uint64_t WitnessTable;
  uint64_t v6;
  uint64_t v7;

  v1 = *a1;
  v2 = sub_7EF8(&qword_2621A0);
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3(255, v1, v2, &type metadata for Spacer, 0, 0);
  v4 = type metadata accessor for TupleView(255, TupleTypeMetadata3);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v4);
  v6 = type metadata accessor for VStack(255, v4, WitnessTable);
  v7 = type metadata accessor for ModifiedContent(255, v6, &type metadata for _PaddingLayout);
  swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v6);
  return swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v7);
}

unint64_t sub_86CB4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2622F8;
  if (!qword_2622F8)
  {
    v1 = sub_7EF8(&qword_2621A0);
    sub_86D18();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_2622F8);
  }
  return result;
}

unint64_t sub_86D18()
{
  unint64_t result;
  uint64_t v1;

  result = qword_262300;
  if (!qword_262300)
  {
    v1 = sub_7EF8(&qword_2622F0);
    sub_7FD8(&qword_262308, &qword_2622D8, (uint64_t)&protocol conformance descriptor for VStack<A>);
    sub_86D9C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_262300);
  }
  return result;
}

unint64_t sub_86D9C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_262310;
  if (!qword_262310)
  {
    v1 = sub_7EF8(&qword_2622E8);
    sub_6FD0(&qword_2618B0, type metadata accessor for ButtonView, (uint64_t)&protocol conformance descriptor for ButtonView);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_262310);
  }
  return result;
}

uint64_t sub_86E30()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(sub_5440(&qword_262198) - 8) + 80);
  return sub_82CC0(v0 + ((v1 + 16) & ~v1));
}

uint64_t sub_86EA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = sub_5440(&qword_262198);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  v7 = v0 + v4;
  v8 = type metadata accessor for LocalizerRequest(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)(v7 + *(int *)(v1 + 48)));
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_86F2C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(sub_5440(&qword_262198) - 8) + 80);
  return sub_82E54(a1, v2 + ((v5 + 16) & ~v5), a2);
}

double sub_86F7C@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double result;

  *(_QWORD *)&result = sub_87044(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, (uint64_t)type metadata accessor for CoverView, (void (*)(uint64_t, uint64_t, uint64_t))sub_1E428, &qword_25F698).n128_u64[0];
  return result;
}

double sub_86FE0@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double result;

  *(_QWORD *)&result = sub_87044(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, (uint64_t)&qword_25F668, (void (*)(uint64_t, uint64_t, uint64_t))sub_B3D0, &qword_25F670).n128_u64[0];
  return result;
}

__n128 sub_87044@<Q0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, void (*a17)(uint64_t, uint64_t, uint64_t), uint64_t *a18)
{
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t, uint64_t);
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  double v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  double v34;
  double v35;
  double v36;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __n128 result;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  double v49;
  double v50;
  double v51;
  double v52;
  _OWORD v53[7];

  v19 = a9;
  v20 = a17;
  v21 = a18;
  v22 = a15;
  v23 = a14;
  v24 = a12;
  v25 = a10;
  v26 = a2 & 1;
  v27 = a1;
  if ((_DWORD)v26)
    v27 = -INFINITY;
  v28 = a4 & 1;
  v29 = a3;
  if ((_DWORD)v28)
    v29 = v27;
  v30 = a6 & 1;
  v31 = a8 & 1;
  v32 = a5;
  if ((a6 & 1) != 0)
    v32 = v29;
  if (v27 > v29 || v29 > v32)
    goto LABEL_22;
  v34 = a7;
  if ((_DWORD)v31)
    v34 = -INFINITY;
  v35 = a10;
  if ((a11 & 1) != 0)
    v35 = v34;
  v36 = a12;
  if ((a13 & 1) != 0)
    v36 = v35;
  if (v34 > v35 || v35 > v36)
  {
LABEL_22:
    v51 = a5;
    v52 = a7;
    v49 = a1;
    v50 = a3;
    v47 = v28;
    v48 = v26;
    v46 = v31;
    v39 = static os_log_type_t.fault.getter(*(_QWORD *)&a1);
    v40 = (void *)static Log.runtimeIssuesLog.getter();
    v41 = v39;
    v19 = a9;
    os_log(_:dso:log:_:_:)(v41, &dword_0, v40, "Contradictory frame constraints specified.", 42, 2, &_swiftEmptyArrayStorage);

    v31 = v46;
    v28 = v47;
    v26 = v48;
    v23 = a14;
    v22 = a15;
    v24 = a12;
    v25 = a10;
    a1 = v49;
    a3 = v50;
    a5 = v51;
    a7 = v52;
    v21 = a18;
    v20 = a17;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v53, *(_QWORD *)&a1, v26, *(_QWORD *)&a3, v28, *(_QWORD *)&a5, v30, *(_QWORD *)&a7, v31, *(_QWORD *)&v25, a11 & 1, *(_QWORD *)&v24, a13 & 1, v23, v22);
  v20(v18, v19, a16);
  v42 = v19 + *(int *)(sub_5440(v21) + 36);
  v43 = v53[5];
  *(_OWORD *)(v42 + 64) = v53[4];
  *(_OWORD *)(v42 + 80) = v43;
  *(_OWORD *)(v42 + 96) = v53[6];
  v44 = v53[1];
  *(_OWORD *)v42 = v53[0];
  *(_OWORD *)(v42 + 16) = v44;
  result = (__n128)v53[3];
  *(_OWORD *)(v42 + 32) = v53[2];
  *(__n128 *)(v42 + 48) = result;
  return result;
}

double sub_87220@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double result;

  *(_QWORD *)&result = sub_87044(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, (uint64_t)&qword_25FD08, (void (*)(uint64_t, uint64_t, uint64_t))sub_B3D0, &qword_25FD10).n128_u64[0];
  return result;
}

uint64_t sub_87284@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19)
{
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  double v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  double v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  double v34;
  double v36;
  double v37;
  double v38;
  uint64_t v40;
  void *v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  unsigned int v46;
  unsigned int v47;
  double v48;
  double v49;
  double v50;
  double v51;
  _OWORD v52[7];

  v20 = a19;
  v21 = a18;
  v22 = a17;
  v24 = a14;
  v23 = a15;
  v25 = a12;
  v26 = a10;
  v27 = a2 & 1;
  v28 = a1;
  if ((_DWORD)v27)
    v28 = -INFINITY;
  v29 = a4 & 1;
  v30 = a3;
  if ((_DWORD)v29)
    v30 = v28;
  v31 = a6 & 1;
  v32 = a8 & 1;
  v33 = a13 & 1;
  v34 = a5;
  if ((a6 & 1) != 0)
    v34 = v30;
  if (v28 > v30 || v30 > v34)
    goto LABEL_22;
  v36 = a7;
  if ((a8 & 1) != 0)
    v36 = -INFINITY;
  v37 = a10;
  if ((a11 & 1) != 0)
    v37 = v36;
  v38 = a12;
  if ((a13 & 1) != 0)
    v38 = v37;
  if (v36 > v37 || v37 > v38)
  {
LABEL_22:
    v50 = a7;
    v51 = a5;
    v48 = a1;
    v49 = a3;
    v47 = v27;
    v46 = v29;
    v40 = static os_log_type_t.fault.getter(*(_QWORD *)&a1);
    v41 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)(v40, &dword_0, v41, "Contradictory frame constraints specified.", 42, 2, &_swiftEmptyArrayStorage);

    v33 = a13 & 1;
    v29 = v46;
    v24 = a14;
    v23 = a15;
    v27 = v47;
    v26 = a10;
    v25 = a12;
    a1 = v48;
    a3 = v49;
    a7 = v50;
    a5 = v51;
    v21 = a18;
    v20 = a19;
    v22 = a17;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v52, *(_QWORD *)&a1, v27, *(_QWORD *)&a3, v29, *(_QWORD *)&a5, v31, *(_QWORD *)&a7, v32, *(_QWORD *)&v26, a11 & 1, *(_QWORD *)&v25, v33, v24, v23);
  *(_QWORD *)a9 = a16;
  *(_QWORD *)(a9 + 8) = v22;
  *(_BYTE *)(a9 + 16) = v21 & 1;
  *(_QWORD *)(a9 + 24) = v20;
  v42 = v52[5];
  *(_OWORD *)(a9 + 96) = v52[4];
  *(_OWORD *)(a9 + 112) = v42;
  *(_OWORD *)(a9 + 128) = v52[6];
  v43 = v52[1];
  *(_OWORD *)(a9 + 32) = v52[0];
  *(_OWORD *)(a9 + 48) = v43;
  v44 = v52[3];
  *(_OWORD *)(a9 + 64) = v52[2];
  *(_OWORD *)(a9 + 80) = v44;
  sub_34B1C(a16, v22, v21 & 1);
  return swift_bridgeObjectRetain(v20);
}

double sub_87464@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double result;

  *(_QWORD *)&result = sub_87044(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, (uint64_t)&unk_260348, (void (*)(uint64_t, uint64_t, uint64_t))sub_B3D0, &qword_260350).n128_u64[0];
  return result;
}

uint64_t sub_874C8@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v18;
  uint64_t v19;
  double v20;
  double v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  double v29;
  double v31;
  double v32;
  double v33;
  uint64_t v35;
  void *v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  unsigned int v41;
  double v42;
  double v43;
  double v44;
  double v45;
  _OWORD v46[7];

  v18 = a16;
  v19 = a15;
  v20 = a12;
  v21 = a10;
  v22 = a2 & 1;
  v23 = a1;
  if ((_DWORD)v22)
    v23 = -INFINITY;
  v24 = a4 & 1;
  v25 = a3;
  if ((a4 & 1) != 0)
    v25 = v23;
  v26 = a6 & 1;
  v27 = a8 & 1;
  v28 = a11 & 1;
  v29 = a5;
  if ((a6 & 1) != 0)
    v29 = v25;
  if (v23 > v25 || v25 > v29)
    goto LABEL_22;
  v31 = a7;
  if ((a8 & 1) != 0)
    v31 = -INFINITY;
  v32 = a10;
  if ((a11 & 1) != 0)
    v32 = v31;
  v33 = a12;
  if ((a13 & 1) != 0)
    v33 = v32;
  if (v31 > v32 || v32 > v33)
  {
LABEL_22:
    v45 = a7;
    v43 = a3;
    v44 = a5;
    v42 = a1;
    v41 = v22;
    v35 = static os_log_type_t.fault.getter();
    v36 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)(v35, &dword_0, v36, "Contradictory frame constraints specified.", 42, 2, &_swiftEmptyArrayStorage);

    v28 = a11 & 1;
    v19 = a15;
    v22 = v41;
    v21 = a10;
    v20 = a12;
    a1 = v42;
    a3 = v43;
    a5 = v44;
    a7 = v45;
    v18 = a16;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v46, *(_QWORD *)&a1, v22, *(_QWORD *)&a3, v24, *(_QWORD *)&a5, v26, *(_QWORD *)&a7, v27, *(_QWORD *)&v21, v28, *(_QWORD *)&v20, a13 & 1, a14, v19);
  *(_QWORD *)a9 = v18;
  *(_QWORD *)(a9 + 8) = a17;
  v37 = v46[5];
  *(_OWORD *)(a9 + 80) = v46[4];
  *(_OWORD *)(a9 + 96) = v37;
  *(_OWORD *)(a9 + 112) = v46[6];
  v38 = v46[1];
  *(_OWORD *)(a9 + 16) = v46[0];
  *(_OWORD *)(a9 + 32) = v38;
  v39 = v46[3];
  *(_OWORD *)(a9 + 48) = v46[2];
  *(_OWORD *)(a9 + 64) = v39;
  return swift_retain(a17);
}

double sub_87674@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double result;

  *(_QWORD *)&result = sub_87044(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, (uint64_t)&unk_260D08, (void (*)(uint64_t, uint64_t, uint64_t))sub_B3D0, &qword_2628B0).n128_u64[0];
  return result;
}

double sub_876D8@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double result;

  *(_QWORD *)&result = sub_87044(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, (uint64_t)&unk_260D78, (void (*)(uint64_t, uint64_t, uint64_t))sub_B3D0, &qword_260D80).n128_u64[0];
  return result;
}

double sub_8773C@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double result;

  *(_QWORD *)&result = sub_87044(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, (uint64_t)&unk_260D30, (void (*)(uint64_t, uint64_t, uint64_t))sub_B3D0, &qword_260D38).n128_u64[0];
  return result;
}

uint64_t sub_877A0@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, __int16 a18)
{
  __int16 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  double v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  double v33;
  double v34;
  double v35;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  unsigned int v44;
  double v45;
  double v46;
  double v47;
  double v48;
  _OWORD v49[7];

  v19 = a18;
  v20 = a16;
  v22 = a14;
  v21 = a15;
  v23 = a12;
  v24 = a10;
  v25 = a2 & 1;
  v26 = a1;
  if ((_DWORD)v25)
    v26 = -INFINITY;
  v27 = a4 & 1;
  v28 = a3;
  if ((a4 & 1) != 0)
    v28 = v26;
  v29 = a6 & 1;
  v30 = a8 & 1;
  v31 = a5;
  if ((a6 & 1) != 0)
    v31 = v28;
  if (v26 > v28 || v28 > v31)
    goto LABEL_22;
  v33 = a7;
  if ((a8 & 1) != 0)
    v33 = -INFINITY;
  v34 = a10;
  if ((a11 & 1) != 0)
    v34 = v33;
  v35 = a12;
  if ((a13 & 1) != 0)
    v35 = v34;
  if (v33 > v34 || v34 > v35)
  {
LABEL_22:
    v47 = a5;
    v48 = a7;
    v45 = a1;
    v46 = a3;
    v44 = v25;
    v37 = static os_log_type_t.fault.getter();
    v38 = (void *)static Log.runtimeIssuesLog.getter();
    v39 = v37;
    v20 = a16;
    os_log(_:dso:log:_:_:)(v39, &dword_0, v38, "Contradictory frame constraints specified.", 42, 2, &_swiftEmptyArrayStorage);

    v22 = a14;
    v21 = a15;
    v25 = v44;
    v24 = a10;
    v23 = a12;
    a1 = v45;
    a3 = v46;
    a5 = v47;
    a7 = v48;
    v19 = a18;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v49, *(_QWORD *)&a1, v25, *(_QWORD *)&a3, v27, *(_QWORD *)&a5, v29, *(_QWORD *)&a7, v30, *(_QWORD *)&v24, a11 & 1, *(_QWORD *)&v23, a13 & 1, v22, v21);
  v40 = v49[2];
  *(_OWORD *)(a9 + 72) = v49[3];
  v41 = v49[5];
  *(_OWORD *)(a9 + 88) = v49[4];
  *(_OWORD *)(a9 + 104) = v41;
  *(_OWORD *)(a9 + 120) = v49[6];
  v42 = v49[1];
  *(_OWORD *)(a9 + 24) = v49[0];
  *(_OWORD *)(a9 + 40) = v42;
  *(_QWORD *)a9 = v20;
  *(_QWORD *)(a9 + 8) = a17;
  *(_BYTE *)(a9 + 16) = v19 & 1;
  *(_BYTE *)(a9 + 17) = HIBYTE(v19) & 1;
  *(_OWORD *)(a9 + 56) = v40;
  return swift_retain(v20);
}

__n128 sub_87974@<Q0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;
  uint64_t v17;
  double v18;
  double v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  double v28;
  double v29;
  double v30;
  uint64_t v32;
  void *v33;
  __int128 v34;
  __n128 result;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  unsigned int v42;
  double v43;
  double v44;
  double v45;
  double v46;
  _OWORD v47[7];

  v17 = a15;
  v18 = a12;
  v19 = a10;
  v20 = a2 & 1;
  v21 = a1;
  if ((_DWORD)v20)
    v21 = -INFINITY;
  v22 = a4 & 1;
  v23 = a3;
  if ((a4 & 1) != 0)
    v23 = v21;
  v24 = a6 & 1;
  v25 = a8 & 1;
  v26 = a5;
  if ((a6 & 1) != 0)
    v26 = v23;
  if (v21 > v23 || v23 > v26)
    goto LABEL_22;
  v28 = a7;
  if ((a8 & 1) != 0)
    v28 = -INFINITY;
  v29 = a10;
  if ((a11 & 1) != 0)
    v29 = v28;
  v30 = a12;
  if ((a13 & 1) != 0)
    v30 = v29;
  if (v28 > v29 || v29 > v30)
  {
LABEL_22:
    v46 = a7;
    v45 = a5;
    v43 = a3;
    v44 = a1;
    v42 = v20;
    v32 = static os_log_type_t.fault.getter();
    v33 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)(v32, &dword_0, v33, "Contradictory frame constraints specified.", 42, 2, &_swiftEmptyArrayStorage);

    v17 = a15;
    v20 = v42;
    v19 = a10;
    a3 = v43;
    a1 = v44;
    a5 = v45;
    v18 = a12;
    a7 = v46;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v47, *(_QWORD *)&a1, v20, *(_QWORD *)&a3, v22, *(_QWORD *)&a5, v24, *(_QWORD *)&a7, v25, *(_QWORD *)&v19, a11 & 1, *(_QWORD *)&v18, a13 & 1, a14, v17);
  v34 = *(_OWORD *)(v15 + 16);
  *(_OWORD *)a9 = *(_OWORD *)v15;
  *(_OWORD *)(a9 + 16) = v34;
  result = *(__n128 *)(v15 + 32);
  v36 = v47[4];
  v37 = v47[5];
  v38 = v47[2];
  *(_OWORD *)(a9 + 96) = v47[3];
  *(_OWORD *)(a9 + 112) = v36;
  v39 = v47[6];
  *(_OWORD *)(a9 + 128) = v37;
  *(_OWORD *)(a9 + 144) = v39;
  v40 = v47[0];
  v41 = v47[1];
  *(__n128 *)(a9 + 32) = result;
  *(_OWORD *)(a9 + 48) = v40;
  *(_OWORD *)(a9 + 64) = v41;
  *(_OWORD *)(a9 + 80) = v38;
  return result;
}

double sub_87B18@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double result;

  *(_QWORD *)&result = sub_87044(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, (uint64_t)&unk_262658, (void (*)(uint64_t, uint64_t, uint64_t))sub_B3D0, &qword_262660).n128_u64[0];
  return result;
}

uint64_t sub_87B7C@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v17;
  double v18;
  double v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  double v28;
  double v29;
  double v30;
  uint64_t v32;
  void *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  unsigned int v38;
  double v39;
  double v40;
  double v41;
  double v42;
  _OWORD v43[7];

  v17 = a15;
  v18 = a12;
  v19 = a10;
  v20 = a2 & 1;
  v21 = a1;
  if ((_DWORD)v20)
    v21 = -INFINITY;
  v22 = a4 & 1;
  v23 = a3;
  if ((a4 & 1) != 0)
    v23 = v21;
  v24 = a6 & 1;
  v25 = a8 & 1;
  v26 = a5;
  if ((a6 & 1) != 0)
    v26 = v23;
  if (v21 > v23 || v23 > v26)
    goto LABEL_22;
  v28 = a7;
  if ((a8 & 1) != 0)
    v28 = -INFINITY;
  v29 = a10;
  if ((a11 & 1) != 0)
    v29 = v28;
  v30 = a12;
  if ((a13 & 1) != 0)
    v30 = v29;
  if (v28 > v29 || v29 > v30)
  {
LABEL_22:
    v42 = a7;
    v40 = a1;
    v41 = a5;
    v39 = a3;
    v38 = v20;
    v32 = static os_log_type_t.fault.getter();
    v33 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)(v32, &dword_0, v33, "Contradictory frame constraints specified.", 42, 2, &_swiftEmptyArrayStorage);

    v17 = a15;
    v20 = v38;
    v19 = a10;
    a3 = v39;
    a1 = v40;
    a5 = v41;
    v18 = a12;
    a7 = v42;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v43, *(_QWORD *)&a1, v20, *(_QWORD *)&a3, v22, *(_QWORD *)&a5, v24, *(_QWORD *)&a7, v25, *(_QWORD *)&v19, a11 & 1, *(_QWORD *)&v18, a13 & 1, a14, v17);
  v34 = v43[2];
  *(_OWORD *)(a9 + 56) = v43[3];
  v35 = v43[5];
  *(_OWORD *)(a9 + 72) = v43[4];
  *(_OWORD *)(a9 + 88) = v35;
  *(_OWORD *)(a9 + 104) = v43[6];
  v36 = v43[1];
  *(_OWORD *)(a9 + 8) = v43[0];
  *(_OWORD *)(a9 + 24) = v36;
  *(_QWORD *)a9 = a16;
  *(_OWORD *)(a9 + 40) = v34;
  return swift_bridgeObjectRetain(a16);
}

double sub_87D24@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double result;

  *(_QWORD *)&result = sub_88090(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_262700, &qword_262708).n128_u64[0];
  return result;
}

double sub_87D7C@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double result;

  *(_QWORD *)&result = sub_87044(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, (uint64_t)type metadata accessor for BulletPointStack, (void (*)(uint64_t, uint64_t, uint64_t))sub_1E428, &qword_2626F8).n128_u64[0];
  return result;
}

double sub_87DE0@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double result;

  *(_QWORD *)&result = sub_87044(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, (uint64_t)type metadata accessor for SeriesEntityCardView.CardContents, (void (*)(uint64_t, uint64_t, uint64_t))sub_1E428, &qword_2626F0).n128_u64[0];
  return result;
}

double sub_87E44@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double result;

  *(_QWORD *)&result = sub_87044(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, (uint64_t)type metadata accessor for SeriesEntityCardView.TextLockupView, (void (*)(uint64_t, uint64_t, uint64_t))sub_1E428, &qword_262630).n128_u64[0];
  return result;
}

double sub_87EA8@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double result;

  *(_QWORD *)&result = sub_87044(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, (uint64_t)&unk_262638, (void (*)(uint64_t, uint64_t, uint64_t))sub_B3D0, &qword_262640).n128_u64[0];
  return result;
}

double sub_87F0C@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double result;

  *(_QWORD *)&result = sub_87044(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, (uint64_t)&unk_2628B8, (void (*)(uint64_t, uint64_t, uint64_t))sub_B3D0, &qword_2628C0).n128_u64[0];
  return result;
}

double sub_87F70@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double result;

  *(_QWORD *)&result = sub_87044(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, (uint64_t)&unk_262668, (void (*)(uint64_t, uint64_t, uint64_t))sub_B3D0, &qword_262670).n128_u64[0];
  return result;
}

double sub_87FD4@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double result;

  *(_QWORD *)&result = sub_87044(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, (uint64_t)&qword_262688, (void (*)(uint64_t, uint64_t, uint64_t))sub_B3D0, &qword_262690).n128_u64[0];
  return result;
}

double sub_88038@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double result;

  *(_QWORD *)&result = sub_88090(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_262678, &qword_262680).n128_u64[0];
  return result;
}

__n128 sub_88090@<Q0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15, uint64_t *a16, uint64_t *a17)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  double v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  double v32;
  double v33;
  double v34;
  uint64_t v36;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __n128 result;
  unsigned int v46;
  double v47;
  double v48;
  double v49;
  double v50;
  _OWORD v51[7];

  v18 = a9;
  v19 = a16;
  v21 = a14;
  v20 = a15;
  v22 = a12;
  v23 = a10;
  v24 = a2 & 1;
  v25 = a1;
  if ((_DWORD)v24)
    v25 = -INFINITY;
  v26 = a4 & 1;
  v27 = a3;
  if ((_DWORD)v26)
    v27 = v25;
  v28 = a6 & 1;
  v29 = a8 & 1;
  v30 = a5;
  if ((a6 & 1) != 0)
    v30 = v27;
  if (v25 > v27 || v27 > v30)
    goto LABEL_22;
  v32 = a7;
  if ((a8 & 1) != 0)
    v32 = -INFINITY;
  v33 = a10;
  if ((a11 & 1) != 0)
    v33 = v32;
  v34 = a12;
  if ((a13 & 1) != 0)
    v34 = v33;
  if (v32 > v33 || v33 > v34)
  {
LABEL_22:
    v49 = a7;
    v50 = a5;
    v47 = a1;
    v48 = a3;
    v46 = v24;
    v36 = v26;
    v38 = static os_log_type_t.fault.getter(*(_QWORD *)&a1);
    v39 = (void *)static Log.runtimeIssuesLog.getter();
    v40 = v38;
    v18 = a9;
    os_log(_:dso:log:_:_:)(v40, &dword_0, v39, "Contradictory frame constraints specified.", 42, 2, &_swiftEmptyArrayStorage);

    v26 = v36;
    v21 = a14;
    v20 = a15;
    v24 = v46;
    v23 = a10;
    v22 = a12;
    a1 = v47;
    a3 = v48;
    a7 = v49;
    a5 = v50;
    v19 = a16;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v51, *(_QWORD *)&a1, v24, *(_QWORD *)&a3, v26, *(_QWORD *)&a5, v28, *(_QWORD *)&a7, v29, *(_QWORD *)&v23, a11 & 1, *(_QWORD *)&v22, a13 & 1, v21, v20);
  v41 = sub_5440(v19);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 16))(v18, v17, v41);
  v42 = v18 + *(int *)(sub_5440(a17) + 36);
  v43 = v51[5];
  *(_OWORD *)(v42 + 64) = v51[4];
  *(_OWORD *)(v42 + 80) = v43;
  *(_OWORD *)(v42 + 96) = v51[6];
  v44 = v51[1];
  *(_OWORD *)v42 = v51[0];
  *(_OWORD *)(v42 + 16) = v44;
  result = (__n128)v51[3];
  *(_OWORD *)(v42 + 32) = v51[2];
  *(__n128 *)(v42 + 48) = result;
  return result;
}

double sub_8826C@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double result;

  *(_QWORD *)&result = sub_87044(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, (uint64_t)&unk_2626E0, (void (*)(uint64_t, uint64_t, uint64_t))sub_B3D0, &qword_2626E8).n128_u64[0];
  return result;
}

double sub_882D0@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double result;

  *(_QWORD *)&result = sub_87044(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, (uint64_t)&unk_262648, (void (*)(uint64_t, uint64_t, uint64_t))sub_B3D0, &qword_262650).n128_u64[0];
  return result;
}

double sub_88334@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double result;

  *(_QWORD *)&result = sub_87044(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, (uint64_t)&unk_2626D0, (void (*)(uint64_t, uint64_t, uint64_t))sub_B3D0, &qword_2626D8).n128_u64[0];
  return result;
}

double sub_88398@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double result;

  *(_QWORD *)&result = sub_87044(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, (uint64_t)type metadata accessor for SeriesQuickActionButtonView, (void (*)(uint64_t, uint64_t, uint64_t))sub_1E428, &qword_2626C8).n128_u64[0];
  return result;
}

double sub_883FC@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double result;

  *(_QWORD *)&result = sub_87044(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, (uint64_t)&unk_2626A8, (void (*)(uint64_t, uint64_t, uint64_t))sub_B3D0, &qword_2626B0).n128_u64[0];
  return result;
}

double sub_88460@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double result;

  *(_QWORD *)&result = sub_87044(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, (uint64_t)&unk_2626B8, (void (*)(uint64_t, uint64_t, uint64_t))sub_B3D0, &qword_2626C0).n128_u64[0];
  return result;
}

uint64_t sub_884C4@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, _OWORD *a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  _OWORD *v15;
  uint64_t v17;
  double v18;
  double v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  double v28;
  double v29;
  double v30;
  uint64_t v32;
  void *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  unsigned int v40;
  double v41;
  double v42;
  double v43;
  double v44;
  _OWORD v45[7];

  v17 = a15;
  v18 = a12;
  v19 = a10;
  v20 = a2 & 1;
  v21 = a1;
  if ((_DWORD)v20)
    v21 = -INFINITY;
  v22 = a4 & 1;
  v23 = a3;
  if ((a4 & 1) != 0)
    v23 = v21;
  v24 = a6 & 1;
  v25 = a8 & 1;
  v26 = a5;
  if ((a6 & 1) != 0)
    v26 = v23;
  if (v21 > v23 || v23 > v26)
    goto LABEL_22;
  v28 = a7;
  if ((a8 & 1) != 0)
    v28 = -INFINITY;
  v29 = a10;
  if ((a11 & 1) != 0)
    v29 = v28;
  v30 = a12;
  if ((a13 & 1) != 0)
    v30 = v29;
  if (v28 > v29 || v29 > v30)
  {
LABEL_22:
    v43 = a5;
    v44 = a7;
    v42 = a3;
    v41 = a1;
    v40 = v20;
    v32 = static os_log_type_t.fault.getter(*(_QWORD *)&a1);
    v33 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)(v32, &dword_0, v33, "Contradictory frame constraints specified.", 42, 2, _swiftEmptyArrayStorage);

    v17 = a15;
    v20 = v40;
    v19 = a10;
    a1 = v41;
    a3 = v42;
    v18 = a12;
    a5 = v43;
    a7 = v44;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v45, *(_QWORD *)&a1, v20, *(_QWORD *)&a3, v22, *(_QWORD *)&a5, v24, *(_QWORD *)&a7, v25, *(_QWORD *)&v19, a11 & 1, *(_QWORD *)&v18, a13 & 1, a14, v17);
  v34 = v15[3];
  a9[2] = v15[2];
  a9[3] = v34;
  a9[4] = v15[4];
  *(_OWORD *)((char *)a9 + 73) = *(_OWORD *)((char *)v15 + 73);
  v35 = v15[1];
  *a9 = *v15;
  a9[1] = v35;
  v36 = v45[5];
  a9[10] = v45[4];
  a9[11] = v36;
  a9[12] = v45[6];
  v37 = v45[1];
  a9[6] = v45[0];
  a9[7] = v37;
  v38 = v45[3];
  a9[8] = v45[2];
  a9[9] = v38;
  return sub_92B78((uint64_t)v15);
}

double sub_88678@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double result;

  *(_QWORD *)&result = sub_87044(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, (uint64_t)&unk_262698, (void (*)(uint64_t, uint64_t, uint64_t))sub_B3D0, &qword_2626A0).n128_u64[0];
  return result;
}

uint64_t BooksBorderlessButtonStyle.init(size:)@<X0>(char *a1@<X0>, _BYTE *a2@<X8>)
{
  char v3;
  int *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _BYTE *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t result;

  v3 = *a1;
  v4 = (int *)type metadata accessor for BooksBorderlessButtonStyle(0);
  v5 = &a2[v4[5]];
  *v5 = swift_getKeyPath(&unk_1E60B8);
  v6 = sub_5440(&qword_25FB20);
  swift_storeEnumTagMultiPayload(v5, v6, 0);
  v7 = &a2[v4[6]];
  *v7 = swift_getKeyPath(&unk_1E60F0);
  v8 = sub_5440(&qword_25F1E8);
  swift_storeEnumTagMultiPayload(v7, v8, 0);
  v9 = &a2[v4[7]];
  *v9 = swift_getKeyPath(&unk_1E6118);
  v10 = sub_5440(&qword_25F548);
  swift_storeEnumTagMultiPayload(v9, v10, 0);
  v11 = &a2[v4[8]];
  *v11 = swift_getKeyPath(&unk_1E6140);
  v12 = sub_5440(&qword_25E948);
  swift_storeEnumTagMultiPayload(v11, v12, 0);
  v13 = &a2[v4[9]];
  *(_QWORD *)v13 = swift_getKeyPath(&unk_1E6170);
  v13[8] = 0;
  v14 = &a2[v4[10]];
  *v14 = swift_getKeyPath(&unk_1E61A0);
  v15 = sub_5440(&qword_25F208);
  result = swift_storeEnumTagMultiPayload(v14, v15, 0);
  *a2 = v3;
  return result;
}

uint64_t type metadata accessor for BooksBorderlessButtonStyle(uint64_t a1)
{
  return sub_1FE90(a1, (uint64_t *)&unk_2625C8, (uint64_t)&nominal type descriptor for BooksBorderlessButtonStyle);
}

uint64_t BooksBorderedButtonStyle.makeBody(configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  int v27;
  int v28;
  unsigned __int8 v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v3 = v2;
  v38 = a2;
  v5 = sub_5440(&qword_262350);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v35 - v9;
  v11 = sub_5440(&qword_262358);
  __chkstk_darwin(v11);
  v13 = (char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_5440(&qword_262360);
  __chkstk_darwin(v14);
  v16 = (char *)&v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = v2 + *(int *)(type metadata accessor for BooksBorderedButtonStyle(0) + 32);
  v18 = type metadata accessor for ButtonViewModel(0);
  if (*(_BYTE *)(v17 + *(int *)(v18 + 28)) == 2)
  {
    sub_88CBC(v3, a1, (uint64_t)v16);
    v19 = &qword_262360;
    sub_B3D0((uint64_t)v16, (uint64_t)v13, &qword_262360);
    swift_storeEnumTagMultiPayload(v13, v11, 0);
    v20 = sub_8E564();
    v21 = sub_7FD8(&qword_262438, &qword_262350, (uint64_t)&protocol conformance descriptor for ViewThatFits<A>);
    _ConditionalContent<>.init(storage:)(v13, v14, v5, v20, v21);
    v22 = (uint64_t)v16;
  }
  else
  {
    v36 = v14;
    v37 = v5;
    v23 = static Axis.Set.horizontal.getter(v18);
    v24 = v23;
    v25 = static Axis.Set.vertical.getter(v23);
    v26 = Axis.Set.init(rawValue:)(0);
    v27 = Axis.Set.init(rawValue:)(v26);
    if (Axis.Set.init(rawValue:)(v27 & v24) != v24)
      v26 = Axis.Set.init(rawValue:)(v26 | v24);
    v28 = Axis.Set.init(rawValue:)(v26);
    v29 = Axis.Set.init(rawValue:)(v28 & v25);
    v30 = v36;
    if (v29 != v25)
      LOBYTE(v26) = Axis.Set.init(rawValue:)(v26 | v25);
    *v8 = v26;
    v31 = sub_5440(&qword_262440);
    sub_88B24(v3, a1, (uint64_t)&v8[*(int *)(v31 + 44)]);
    v19 = &qword_262350;
    sub_167A4((uint64_t)v8, (uint64_t)v10, &qword_262350);
    sub_B3D0((uint64_t)v10, (uint64_t)v13, &qword_262350);
    swift_storeEnumTagMultiPayload(v13, v11, 1);
    v32 = sub_8E564();
    v33 = sub_7FD8(&qword_262438, &qword_262350, (uint64_t)&protocol conformance descriptor for ViewThatFits<A>);
    _ConditionalContent<>.init(storage:)(v13, v30, v37, v32, v33);
    v22 = (uint64_t)v10;
  }
  return sub_B414(v22, v19);
}

uint64_t sub_88B24@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v20;

  v6 = sub_5440(&qword_262718);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v20 - v10;
  v12 = sub_5440(&qword_262360);
  v13 = __chkstk_darwin(v12);
  v15 = (char *)&v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v17 = (char *)&v20 - v16;
  sub_88CBC(a1, a2, (uint64_t)&v20 - v16);
  sub_8C6B4(a1, a2, (uint64_t)v11);
  sub_B3D0((uint64_t)v17, (uint64_t)v15, &qword_262360);
  sub_B3D0((uint64_t)v11, (uint64_t)v9, &qword_262718);
  sub_B3D0((uint64_t)v15, a3, &qword_262360);
  v18 = sub_5440(&qword_262720);
  sub_B3D0((uint64_t)v9, a3 + *(int *)(v18 + 48), &qword_262718);
  sub_B414((uint64_t)v11, &qword_262718);
  sub_B414((uint64_t)v17, &qword_262360);
  sub_B414((uint64_t)v9, &qword_262718);
  return sub_B414((uint64_t)v15, &qword_262360);
}

uint64_t sub_88CBC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  double v53;
  uint64_t v54;
  double v55;
  void (*v56)(uint64_t, uint64_t);
  uint64_t v57;
  double v58;
  double v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  double v70;
  uint64_t v71;
  double v72;
  void (*v73)(uint64_t, uint64_t);
  uint64_t v74;
  double v75;
  double v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _OWORD *v81;
  __int128 v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  double v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t *v106;
  uint64_t v107;
  char *v108;
  unint64_t v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v114;
  char *v115;
  char *v116;
  char *v117;
  char *v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  uint64_t v140;
  uint64_t *v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  _OWORD v147[3];

  v145 = a3;
  v5 = type metadata accessor for HoverEffect(0);
  v143 = *(_QWORD *)(v5 - 8);
  v144 = v5;
  __chkstk_darwin(v5);
  v142 = (char *)&v114 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_5440(&qword_2627D8);
  __chkstk_darwin(v7);
  v141 = (uint64_t *)((char *)&v114 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v137 = type metadata accessor for FloatingPointRoundingRule(0);
  v134 = *(_QWORD *)(v137 - 8);
  __chkstk_darwin(v137);
  v132 = (char *)&v114 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v126 = type metadata accessor for SizeConstants.Environment(0);
  __chkstk_darwin(v126);
  v120 = (uint64_t)&v114 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Font.TextStyle(0);
  v122 = *(_QWORD *)(v11 - 8);
  v12 = __chkstk_darwin(v11);
  v118 = (char *)&v114 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v12);
  v116 = (char *)&v114 - v15;
  v16 = __chkstk_darwin(v14);
  v117 = (char *)&v114 - v17;
  __chkstk_darwin(v16);
  v115 = (char *)&v114 - v18;
  v121 = sub_5440(&qword_262710);
  v19 = __chkstk_darwin(v121);
  v21 = (char *)&v114 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v23 = (char *)&v114 - v22;
  v24 = type metadata accessor for SizeConstants(0);
  v25 = __chkstk_darwin(v24);
  v27 = (char *)&v114 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __chkstk_darwin(v25);
  v30 = (char *)&v114 - v29;
  v31 = __chkstk_darwin(v28);
  v33 = (char *)&v114 - v32;
  __chkstk_darwin(v31);
  v35 = (char *)&v114 - v34;
  v36 = sub_5440(&qword_2623B8);
  __chkstk_darwin(v36);
  v38 = (char *)&v114 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v124 = sub_5440(&qword_2623A8);
  __chkstk_darwin(v124);
  v129 = (uint64_t)&v114 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  v123 = sub_5440(&qword_262398);
  __chkstk_darwin(v123);
  v119 = (char *)&v114 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  v127 = sub_5440(&qword_262388);
  __chkstk_darwin(v127);
  v131 = (uint64_t)&v114 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  v136 = sub_5440(&qword_262370);
  __chkstk_darwin(v136);
  v139 = (char *)&v114 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  v138 = sub_5440(&qword_2627E0);
  v135 = *(_QWORD *)(v138 - 8);
  __chkstk_darwin(v138);
  v133 = (char *)&v114 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  v125 = v38;
  v140 = a2;
  sub_897B8((uint64_t)v38);
  v44 = *(int *)(type metadata accessor for BooksBorderedButtonStyle(0) + 32);
  v146 = a1;
  v45 = a1 + v44;
  v128 = type metadata accessor for ButtonViewModel(0);
  v46 = *(int *)(v128 + 28);
  v130 = v45;
  if (*(_BYTE *)(v45 + v46) == 2)
  {
    sub_3168C((uint64_t)v35);
    v47 = v122;
    v48 = v115;
    (*(void (**)(char *, _QWORD, uint64_t))(v122 + 104))(v115, enum case for Font.TextStyle.subheadline(_:), v11);
    sub_1E428((uint64_t)v35, (uint64_t)v33, type metadata accessor for SizeConstants);
    v49 = (uint64_t)v117;
    (*(void (**)(char *, char *, uint64_t))(v47 + 16))(v117, v48, v11);
    sub_1E428((uint64_t)v33, (uint64_t)v23, type metadata accessor for SizeConstants);
    v50 = v120;
    sub_1E428((uint64_t)v33, v120, type metadata accessor for SizeConstants.Environment);
    v51 = v126;
    v52 = v50 + *(int *)(v126 + 24);
    v53 = sub_173CC(v49, v52);
    v54 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v54 - 8) + 8))(v52, v54);
    v55 = 1.0;
    if ((*(_QWORD *)&v53 & 0xFFFFFFFFFFFFFLL) == 0)
      v55 = v53;
    if ((~*(_QWORD *)&v53 & 0x7FF0000000000000) == 0)
      v53 = v55;
    sub_224DC((uint64_t)v33, type metadata accessor for SizeConstants);
    v56 = *(void (**)(uint64_t, uint64_t))(v47 + 8);
    v56(v49, v11);
    v57 = *(int *)(v121 + 36);
    *(double *)&v23[v57] = v53;
    v56((uint64_t)v48, v11);
    sub_224DC((uint64_t)v35, type metadata accessor for SizeConstants);
    v58 = KeyedEncodingContainer.encode<A>(_:forKey:)(*(double *)&v23[v57]) * 28.0;
    v59 = KeyedEncodingContainer.encode<A>(_:forKey:)(*(double *)&v23[*(int *)(v51 + 28)]);
    v60 = v134;
    v61 = (uint64_t)v132;
    v62 = v137;
    (*(void (**)(char *, _QWORD, uint64_t))(v134 + 104))(v132, enum case for FloatingPointRoundingRule.toNearestOrAwayFromZero(_:), v137);
    *(double *)v147 = v58;
    sub_13603C(v61, v59);
    v63 = *(_QWORD *)&v147[0];
  }
  else
  {
    sub_3168C((uint64_t)v30);
    v64 = v122;
    v65 = v116;
    (*(void (**)(char *, _QWORD, uint64_t))(v122 + 104))(v116, enum case for Font.TextStyle.subheadline(_:), v11);
    sub_1E428((uint64_t)v30, (uint64_t)v27, type metadata accessor for SizeConstants);
    v66 = (uint64_t)v118;
    (*(void (**)(char *, char *, uint64_t))(v64 + 16))(v118, v65, v11);
    sub_1E428((uint64_t)v27, (uint64_t)v21, type metadata accessor for SizeConstants);
    v67 = v120;
    sub_1E428((uint64_t)v27, v120, type metadata accessor for SizeConstants.Environment);
    v68 = v126;
    v69 = v67 + *(int *)(v126 + 24);
    v70 = sub_173CC(v66, v69);
    v71 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v71 - 8) + 8))(v69, v71);
    v72 = 1.0;
    if ((*(_QWORD *)&v70 & 0xFFFFFFFFFFFFFLL) == 0)
      v72 = v70;
    if ((~*(_QWORD *)&v70 & 0x7FF0000000000000) == 0)
      v70 = v72;
    sub_224DC((uint64_t)v27, type metadata accessor for SizeConstants);
    v73 = *(void (**)(uint64_t, uint64_t))(v64 + 8);
    v73(v66, v11);
    v74 = *(int *)(v121 + 36);
    *(double *)&v21[v74] = v70;
    v73((uint64_t)v65, v11);
    sub_224DC((uint64_t)v30, type metadata accessor for SizeConstants);
    v75 = KeyedEncodingContainer.encode<A>(_:forKey:)(*(double *)&v21[v74]) * 48.0;
    v76 = KeyedEncodingContainer.encode<A>(_:forKey:)(*(double *)&v21[*(int *)(v68 + 28)]);
    v60 = v134;
    v61 = (uint64_t)v132;
    v62 = v137;
    (*(void (**)(char *, _QWORD, uint64_t))(v134 + 104))(v132, enum case for FloatingPointRoundingRule.toNearestOrAwayFromZero(_:), v137);
    *(double *)v147 = v75;
    sub_13603C(v61, v76);
    v63 = *(_QWORD *)&v147[0];
    v23 = v21;
  }
  (*(void (**)(uint64_t, uint64_t))(v60 + 8))(v61, v62);
  sub_B414((uint64_t)v23, &qword_262710);
  v77 = _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0();
  _FrameLayout.init(width:height:alignment:)(v147, 0, 1, v63, 0, v77, v78);
  v79 = (uint64_t)v125;
  v80 = v129;
  sub_B3D0((uint64_t)v125, v129, &qword_2623B8);
  v81 = (_OWORD *)(v80 + *(int *)(v124 + 36));
  v82 = v147[1];
  *v81 = v147[0];
  v81[1] = v82;
  v81[2] = v147[2];
  sub_B414(v79, &qword_2623B8);
  v83 = _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0();
  v85 = v84;
  v86 = (uint64_t)v119;
  v87 = (uint64_t *)&v119[*(int *)(v123 + 36)];
  *v87 = _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0();
  v87[1] = v88;
  v89 = sub_5440(&qword_2627E8);
  v90 = v146;
  sub_8B000(v146, (uint64_t)v87 + *(int *)(v89 + 44));
  v91 = (uint64_t *)((char *)v87 + *(int *)(sub_5440(&qword_262418) + 36));
  *v91 = v83;
  v91[1] = v85;
  v92 = sub_167A4(v80, v86, &qword_2623A8);
  v93 = v140;
  if ((ButtonStyleConfiguration.isPressed.getter(v92) & 1) != 0)
    v94 = 0.6;
  else
    v94 = 1.0;
  v95 = v131;
  sub_B3D0(v86, v131, &qword_262398);
  *(double *)(v95 + *(int *)(v127 + 36)) = v94;
  v96 = sub_B414(v86, &qword_262398);
  v97 = static VerticalAlignment.center.getter(v96);
  v98 = (uint64_t)v141;
  *v141 = v97;
  *(_QWORD *)(v98 + 8) = 0;
  *(_BYTE *)(v98 + 16) = 1;
  v99 = sub_5440(&qword_2627F0);
  sub_8BAD8(v90, v93, v98 + *(int *)(v99 + 44));
  v100 = _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0();
  v102 = v101;
  v103 = v136;
  v104 = (uint64_t)v139;
  v105 = (uint64_t)&v139[*(int *)(v136 + 36)];
  sub_B3D0(v98, v105, &qword_2627D8);
  v106 = (uint64_t *)(v105 + *(int *)(sub_5440(&qword_262428) + 36));
  *v106 = v100;
  v106[1] = v102;
  sub_B3D0(v95, v104, &qword_262388);
  sub_B414(v98, &qword_2627D8);
  v107 = sub_B414(v95, &qword_262388);
  v108 = v142;
  if ((*(_BYTE *)(v130 + *(int *)(v128 + 36)) & 1) != 0)
    static HoverEffect.automatic.getter(v107);
  else
    static HoverEffect.lift.getter(v107);
  v109 = sub_8E634();
  v110 = sub_6FD0(&qword_262430, (uint64_t (*)(uint64_t))&type metadata accessor for HoverEffect, (uint64_t)&protocol conformance descriptor for HoverEffect);
  v111 = v133;
  v112 = v144;
  View.hoverEffect<A>(_:isEnabled:)(v108, 1, v103, v144, v109, v110);
  (*(void (**)(char *, uint64_t))(v143 + 8))(v108, v112);
  sub_B414(v104, &qword_262370);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v135 + 32))(v145, v111, v138);
}

uint64_t sub_897B8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t KeyPath;
  uint64_t *v80;
  uint64_t v81;
  void (*v82)(_QWORD);
  uint64_t v83;
  uint64_t v84;
  char v85;
  char v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  char v94;
  uint64_t v95;
  uint64_t v96;
  void (**v97)(char *, _QWORD, uint64_t);
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  double v106;
  uint64_t v107;
  double v108;
  void (*v109)(uint64_t, uint64_t);
  uint64_t v110;
  double v111;
  double v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _OWORD *v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t *v130;
  uint64_t v131;
  void (**v132)(char *, _QWORD, uint64_t);
  char *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  double v140;
  double v141;
  void (**v142)(char *, _QWORD, uint64_t);
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  double v147;
  uint64_t v148;
  double v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  double v153;
  uint64_t v154;
  double v155;
  double v156;
  double v157;
  double v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  char *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  double v174;
  double v175;
  void (*v176)(char *, uint64_t);
  uint64_t v177;
  double v178;
  double v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  _OWORD *v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  void (**v197)(char *, _QWORD, uint64_t);
  char *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  double v206;
  uint64_t v207;
  double v208;
  void (*v209)(uint64_t, uint64_t);
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  double v213;
  double v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  double v218;
  uint64_t v219;
  uint64_t v220;
  double v221;
  double v222;
  double v223;
  double v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  unint64_t v239;
  uint64_t v240;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  char *v251;
  char *v252;
  char *v253;
  char *v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  char *v260;
  char *v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  char *v267;
  char *v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  char *v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  void (*v278)(char *, char *, uint64_t);
  void (*v279)(_QWORD);
  uint64_t v280;
  void (**v281)(char *, _QWORD, uint64_t);
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  char *v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  int *v295;
  uint64_t v296;
  __int128 v297;
  __int128 v298;
  __int128 v299;
  __int128 v300;
  __int128 v301;
  __int128 v302;
  __int128 v303;

  v290 = a1;
  v288 = sub_5440(&qword_2627C0);
  __chkstk_darwin(v288);
  v289 = (uint64_t)&v242 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v273 = sub_5440(&qword_2627C8);
  __chkstk_darwin(v273);
  v274 = (uint64_t)&v242 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v294 = type metadata accessor for FloatingPointRoundingRule(0);
  v284 = *(_QWORD *)(v294 - 8);
  __chkstk_darwin(v294);
  v285 = (char *)&v242 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v270 = sub_5440(&qword_2627D0);
  __chkstk_darwin(v270);
  v271 = (uint64_t)&v242 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v293 = type metadata accessor for SizeConstants.Environment(0);
  __chkstk_darwin(v293);
  v291 = (uint64_t)&v242 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v283 = type metadata accessor for Font.TextStyle(0);
  v281 = *(void (***)(char *, _QWORD, uint64_t))(v283 - 8);
  v7 = __chkstk_darwin(v283);
  v268 = (char *)&v242 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v7);
  v267 = (char *)&v242 - v10;
  v11 = __chkstk_darwin(v9);
  v261 = (char *)&v242 - v12;
  v13 = __chkstk_darwin(v11);
  v260 = (char *)&v242 - v14;
  v15 = __chkstk_darwin(v13);
  v254 = (char *)&v242 - v16;
  v17 = __chkstk_darwin(v15);
  v253 = (char *)&v242 - v18;
  v19 = __chkstk_darwin(v17);
  v252 = (char *)&v242 - v20;
  __chkstk_darwin(v19);
  v251 = (char *)&v242 - v21;
  v292 = sub_5440(&qword_262710);
  v22 = __chkstk_darwin(v292);
  v266 = (uint64_t)&v242 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = __chkstk_darwin(v22);
  v259 = (uint64_t)&v242 - v25;
  v26 = __chkstk_darwin(v24);
  v250 = (uint64_t)&v242 - v27;
  __chkstk_darwin(v26);
  v247 = (uint64_t)&v242 - v28;
  v29 = type metadata accessor for SizeConstants(0);
  v30 = __chkstk_darwin(v29);
  v262 = (uint64_t)&v242 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = __chkstk_darwin(v30);
  v263 = (uint64_t)&v242 - v33;
  v34 = __chkstk_darwin(v32);
  v255 = (uint64_t)&v242 - v35;
  v36 = __chkstk_darwin(v34);
  v256 = (uint64_t)&v242 - v37;
  v38 = __chkstk_darwin(v36);
  v244 = (uint64_t)&v242 - v39;
  v40 = __chkstk_darwin(v38);
  v245 = (uint64_t)&v242 - v41;
  v42 = __chkstk_darwin(v40);
  v242 = (uint64_t)&v242 - v43;
  __chkstk_darwin(v42);
  v243 = (uint64_t)&v242 - v44;
  v280 = sub_5440(&qword_2623E8);
  v45 = __chkstk_darwin(v280);
  v278 = (void (*)(char *, char *, uint64_t))((char *)&v242 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0));
  v47 = __chkstk_darwin(v45);
  v269 = (uint64_t)&v242 - v48;
  __chkstk_darwin(v47);
  v249 = (uint64_t)&v242 - v49;
  v287 = sub_5440(&qword_2623D8);
  v50 = __chkstk_darwin(v287);
  v264 = (uint64_t)&v242 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = __chkstk_darwin(v50);
  v265 = (uint64_t)&v242 - v53;
  v54 = __chkstk_darwin(v52);
  v257 = (uint64_t)&v242 - v55;
  v56 = __chkstk_darwin(v54);
  v258 = (uint64_t)&v242 - v57;
  v58 = __chkstk_darwin(v56);
  v246 = (uint64_t)&v242 - v59;
  __chkstk_darwin(v58);
  v248 = (uint64_t)&v242 - v60;
  v286 = sub_5440(&qword_2623C8);
  __chkstk_darwin(v286);
  v272 = (char *)&v242 - ((v61 + 15) & 0xFFFFFFFFFFFFFFF0);
  v277 = type metadata accessor for BlendMode(0);
  v279 = *(void (**)(_QWORD))(v277 - 8);
  __chkstk_darwin(v277);
  v276 = (uint64_t)&v242 - ((v62 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = type metadata accessor for ButtonStyleConfiguration.Label(0);
  v64 = *(_QWORD *)(v63 - 8);
  __chkstk_darwin(v63);
  v66 = (char *)&v242 - ((v65 + 15) & 0xFFFFFFFFFFFFFFF0);
  v67 = sub_5440(&qword_262408);
  __chkstk_darwin(v67);
  v69 = (char *)&v242 - ((v68 + 15) & 0xFFFFFFFFFFFFFFF0);
  v275 = sub_5440(&qword_2623F8);
  v70 = __chkstk_darwin(v275);
  v296 = (uint64_t)&v242 - ((v71 + 15) & 0xFFFFFFFFFFFFFFF0);
  ButtonStyleConfiguration.label.getter(v70);
  v72 = type metadata accessor for BooksBorderedButtonStyle(0);
  v73 = *(int *)(v72 + 32);
  v282 = v1;
  v74 = v1 + v73;
  v295 = (int *)type metadata accessor for ButtonViewModel(0);
  if (*(_BYTE *)(v74 + v295[12]) == 1)
  {
    ButtonViewModel.theme.getter((uint64_t *)&v297);
    v75 = *((_QWORD *)&v297 + 1);
    v76 = v297;
    v77 = *((_QWORD *)&v298 + 1);
    v78 = v298;
  }
  else
  {
    ButtonViewModel.theme.getter((uint64_t *)&v297);
    v78 = *((_QWORD *)&v297 + 1);
    v75 = v297;
    v76 = *((_QWORD *)&v298 + 1);
    v77 = v298;
  }
  swift_release(v77);
  swift_release(v78);
  swift_release(v75);
  KeyPath = swift_getKeyPath(&unk_1E62E8);
  (*(void (**)(char *, char *, uint64_t))(v64 + 16))(v69, v66, v63);
  v80 = (uint64_t *)&v69[*(int *)(v67 + 36)];
  *v80 = KeyPath;
  v80[1] = v76;
  (*(void (**)(char *, uint64_t))(v64 + 8))(v66, v63);
  v81 = *(_QWORD *)(v74 + v295[10]);
  if (v81 == 1)
  {
    v83 = v282 + *(int *)(v72 + 28);
    v84 = *(_QWORD *)v83;
    v85 = *(_BYTE *)(v83 + 8);
    sub_F9E4(*(_QWORD *)v83, v85);
    v86 = sub_30DB4(v84, v85);
    sub_BE0C(v84, v85);
    v82 = v279;
    if ((v86 & 1) != 0)
    {
LABEL_8:
      v87 = v276;
      sub_31660(v276);
      v88 = v87;
      v89 = (uint64_t)v278;
      v90 = v277;
      goto LABEL_10;
    }
  }
  else
  {
    v82 = v279;
    if (v81 == 2)
      goto LABEL_8;
  }
  v88 = v276;
  v90 = v277;
  (*((void (**)(uint64_t, _QWORD, uint64_t))v82 + 13))(v276, enum case for BlendMode.normal(_:), v277);
  v89 = (uint64_t)v278;
LABEL_10:
  v91 = v296;
  (*((void (**)(uint64_t, uint64_t, uint64_t))v82 + 2))(v296 + *(int *)(v275 + 36), v88, v90);
  sub_B3D0((uint64_t)v69, v91, &qword_262408);
  (*((void (**)(uint64_t, uint64_t))v82 + 1))(v88, v90);
  v92 = sub_B414((uint64_t)v69, &qword_262408);
  v93 = *(unsigned __int8 *)(v74 + v295[7]);
  if (v93 == 2)
  {
    v94 = static Edge.Set.all.getter(v92);
    sub_B3D0(v296, v89, &qword_2623F8);
    v95 = v89 + *(int *)(v280 + 36);
    *(_BYTE *)v95 = v94;
    *(_OWORD *)(v95 + 8) = 0u;
    *(_OWORD *)(v95 + 24) = 0u;
    *(_BYTE *)(v95 + 40) = 1;
    v96 = v263;
    sub_3168C(v263);
    v97 = v281;
    v98 = v267;
    v99 = v283;
    v281[13](v267, enum case for Font.TextStyle.subheadline(_:), v283);
    v100 = v262;
    sub_1E428(v96, v262, type metadata accessor for SizeConstants);
    v101 = (uint64_t)v268;
    ((void (**)(char *, char *, uint64_t))v97)[2](v268, v98, v99);
    v102 = v266;
    sub_1E428(v100, v266, type metadata accessor for SizeConstants);
    v103 = v291;
    sub_1E428(v100, v291, type metadata accessor for SizeConstants.Environment);
    v104 = v293;
    v105 = v103 + *(int *)(v293 + 24);
    v106 = sub_173CC(v101, v105);
    v107 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v107 - 8) + 8))(v105, v107);
    v108 = 1.0;
    if ((*(_QWORD *)&v106 & 0xFFFFFFFFFFFFFLL) == 0)
      v108 = v106;
    if ((~*(_QWORD *)&v106 & 0x7FF0000000000000) == 0)
      v106 = v108;
    sub_224DC(v100, type metadata accessor for SizeConstants);
    v109 = (void (*)(uint64_t, uint64_t))v97[1];
    v109(v101, v99);
    v110 = *(int *)(v292 + 36);
    *(double *)(v102 + v110) = v106;
    v109((uint64_t)v98, v99);
    sub_224DC(v96, type metadata accessor for SizeConstants);
    v111 = KeyedEncodingContainer.encode<A>(_:forKey:)(*(double *)(v102 + v110)) * 80.0;
    v112 = KeyedEncodingContainer.encode<A>(_:forKey:)(*(double *)(v102 + *(int *)(v104 + 28)));
    v113 = v284;
    v114 = (uint64_t)v285;
    v115 = v294;
    (*(void (**)(char *, _QWORD, uint64_t))(v284 + 104))(v285, enum case for FloatingPointRoundingRule.toNearestOrAwayFromZero(_:), v294);
    *(double *)&v297 = v111;
    sub_13603C(v114, v112);
    v116 = v297;
    (*(void (**)(uint64_t, uint64_t))(v113 + 8))(v114, v115);
    sub_B414(v102, &qword_262710);
    v117 = _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0();
    _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(&v297, v116, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v117, v118);
    v119 = v264;
    sub_B3D0(v89, v264, &qword_2623E8);
    v120 = v287;
    v121 = (_OWORD *)(v119 + *(int *)(v287 + 36));
    v122 = v302;
    v121[4] = v301;
    v121[5] = v122;
    v121[6] = v303;
    v123 = v298;
    *v121 = v297;
    v121[1] = v123;
    v124 = v300;
    v121[2] = v299;
    v121[3] = v124;
    sub_B414(v89, &qword_2623E8);
    v125 = v265;
    sub_167A4(v119, v265, &qword_2623D8);
    v126 = v289;
    sub_B3D0(v125, v289, &qword_2623D8);
    swift_storeEnumTagMultiPayload(v126, v288, 1);
    v127 = sub_8E808();
    v128 = sub_3CC54(&qword_2623D0, &qword_2623D8, (void (*)(void))sub_8E88C);
    _ConditionalContent<>.init(storage:)(v126, v286, v120, v127, v128);
    v129 = v125;
    v130 = &qword_2623D8;
  }
  else
  {
    if ((v93 & 1) != 0)
    {
      v196 = v243;
      sub_3168C(v243);
      v197 = v281;
      v198 = v251;
      v199 = v283;
      v281[13](v251, enum case for Font.TextStyle.subheadline(_:), v283);
      v200 = v242;
      sub_1E428(v196, v242, type metadata accessor for SizeConstants);
      v201 = (uint64_t)v252;
      ((void (**)(char *, char *, uint64_t))v197)[2](v252, v198, v199);
      v202 = v247;
      sub_1E428(v200, v247, type metadata accessor for SizeConstants);
      v203 = v291;
      sub_1E428(v200, v291, type metadata accessor for SizeConstants.Environment);
      v204 = v293;
      v205 = v203 + *(int *)(v293 + 24);
      v206 = sub_173CC(v201, v205);
      v207 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v207 - 8) + 8))(v205, v207);
      v208 = 1.0;
      if ((*(_QWORD *)&v206 & 0xFFFFFFFFFFFFFLL) == 0)
        v208 = v206;
      if ((~*(_QWORD *)&v206 & 0x7FF0000000000000) == 0)
        v206 = v208;
      sub_224DC(v200, type metadata accessor for SizeConstants);
      v209 = (void (*)(uint64_t, uint64_t))v197[1];
      v209(v201, v199);
      v210 = *(int *)(v292 + 36);
      *(double *)(v202 + v210) = v206;
      v209((uint64_t)v198, v199);
      sub_224DC(v196, type metadata accessor for SizeConstants);
      v211 = v271;
      sub_1E428(v202, v271, type metadata accessor for SizeConstants.Environment);
      v212 = *(int *)(v270 + 36);
      *(_QWORD *)(v211 + v212) = *(_QWORD *)(v202 + v210);
      v194 = (uint64_t)v272;
      sub_B414(v202, &qword_262710);
      v213 = KeyedEncodingContainer.encode<A>(_:forKey:)(*(double *)(v211 + v212)) * 6.0;
      v214 = KeyedEncodingContainer.encode<A>(_:forKey:)(*(double *)(v211 + *(int *)(v204 + 28)));
      v215 = v284;
      v216 = (uint64_t)v285;
      v217 = v294;
      (*(void (**)(char *, _QWORD, uint64_t))(v284 + 104))(v285, enum case for FloatingPointRoundingRule.toNearestOrAwayFromZero(_:), v294);
      *(double *)&v297 = v213;
      sub_13603C(v216, v214);
      v218 = *(double *)&v297;
      (*(void (**)(uint64_t, uint64_t))(v215 + 8))(v216, v217);
      v219 = sub_B414(v211, &qword_2627D0);
      v220 = static Edge.Set.all.getter(v219);
      LOBYTE(v217) = v220;
      v224 = EdgeInsets.init(_all:)(v220, v218, v221, v222, v223);
      v226 = v225;
      v228 = v227;
      v230 = v229;
      v231 = v249;
      sub_B3D0(v296, v249, &qword_2623F8);
      v232 = v231 + *(int *)(v280 + 36);
      *(_BYTE *)v232 = v217;
      *(double *)(v232 + 8) = v224;
      *(_QWORD *)(v232 + 16) = v226;
      *(_QWORD *)(v232 + 24) = v228;
      *(_QWORD *)(v232 + 32) = v230;
      *(_BYTE *)(v232 + 40) = 0;
      v233 = _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0();
      v234 = v246;
      sub_87044(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v246, 0.0, 1, 0.0, 1, v233, v235, (uint64_t)&qword_2623E8, (void (*)(uint64_t, uint64_t, uint64_t))sub_B3D0, &qword_2623D8);
      sub_B414(v231, &qword_2623E8);
      v191 = v248;
      sub_167A4(v234, v248, &qword_2623D8);
      v236 = v274;
      sub_B3D0(v191, v274, &qword_2623D8);
      swift_storeEnumTagMultiPayload(v236, v273, 0);
      v193 = sub_3CC54(&qword_2623D0, &qword_2623D8, (void (*)(void))sub_8E88C);
      v195 = v236;
      v186 = v287;
    }
    else
    {
      LODWORD(v277) = static Edge.Set.horizontal.getter(v92);
      v131 = v245;
      sub_3168C(v245);
      LODWORD(v295) = enum case for Font.TextStyle.subheadline(_:);
      v132 = v281;
      v279 = (void (*)(_QWORD))v281[13];
      v133 = v253;
      v134 = v283;
      v279(v253);
      v135 = v244;
      sub_1E428(v131, v244, type metadata accessor for SizeConstants);
      v278 = (void (*)(char *, char *, uint64_t))v132[2];
      v136 = (uint64_t)v254;
      v278(v254, v133, v134);
      v137 = v250;
      sub_1E428(v135, v250, type metadata accessor for SizeConstants);
      v138 = v291;
      sub_1E428(v135, v291, type metadata accessor for SizeConstants.Environment);
      v139 = v138 + *(int *)(v293 + 24);
      v140 = sub_173CC(v136, v139);
      v276 = type metadata accessor for DynamicTypeSize(0);
      v275 = *(_QWORD *)(*(_QWORD *)(v276 - 8) + 8);
      ((void (*)(uint64_t, uint64_t))v275)(v139, v276);
      if ((*(_QWORD *)&v140 & 0xFFFFFFFFFFFFFLL) != 0)
        v141 = 1.0;
      else
        v141 = v140;
      if ((~*(_QWORD *)&v140 & 0x7FF0000000000000) == 0)
        v140 = v141;
      sub_224DC(v135, type metadata accessor for SizeConstants);
      v142 = (void (**)(char *, _QWORD, uint64_t))v132[1];
      v281 = v142;
      ((void (*)(uint64_t, uint64_t))v142)(v136, v134);
      v143 = *(int *)(v292 + 36);
      *(double *)(v137 + v143) = v140;
      ((void (*)(char *, uint64_t))v142)(v133, v134);
      sub_224DC(v131, type metadata accessor for SizeConstants);
      v144 = v271;
      sub_1E428(v137, v271, type metadata accessor for SizeConstants.Environment);
      v145 = *(_QWORD *)(v137 + v143);
      v146 = *(int *)(v270 + 36);
      *(_QWORD *)(v144 + v146) = v145;
      sub_B414(v137, &qword_262710);
      v147 = KeyedEncodingContainer.encode<A>(_:forKey:)(*(double *)(v144 + v146)) * 12.0;
      v148 = v293;
      v149 = KeyedEncodingContainer.encode<A>(_:forKey:)(*(double *)(v144 + *(int *)(v293 + 28)));
      LODWORD(v270) = enum case for FloatingPointRoundingRule.toNearestOrAwayFromZero(_:);
      v150 = v284;
      v268 = *(char **)(v284 + 104);
      v151 = (uint64_t)v285;
      v152 = v294;
      ((void (*)(char *))v268)(v285);
      *(double *)&v297 = v147;
      sub_13603C(v151, v149);
      v153 = *(double *)&v297;
      v284 = *(_QWORD *)(v150 + 8);
      ((void (*)(uint64_t, uint64_t))v284)(v151, v152);
      v154 = sub_B414(v144, &qword_2627D0);
      v158 = EdgeInsets.init(_all:)(v154, v153, v155, v156, v157);
      v160 = v159;
      v162 = v161;
      v164 = v163;
      v165 = v269;
      sub_B3D0(v296, v269, &qword_2623F8);
      v166 = v165 + *(int *)(v280 + 36);
      *(_BYTE *)v166 = v277;
      *(double *)(v166 + 8) = v158;
      *(_QWORD *)(v166 + 16) = v160;
      *(_QWORD *)(v166 + 24) = v162;
      *(_QWORD *)(v166 + 32) = v164;
      *(_BYTE *)(v166 + 40) = 0;
      v167 = v256;
      sub_3168C(v256);
      v168 = v260;
      ((void (*)(char *, _QWORD, uint64_t))v279)(v260, v295, v134);
      v169 = v255;
      sub_1E428(v167, v255, type metadata accessor for SizeConstants);
      v170 = (uint64_t)v261;
      v278(v261, v168, v134);
      v171 = v259;
      sub_1E428(v169, v259, type metadata accessor for SizeConstants);
      v172 = v291;
      sub_1E428(v169, v291, type metadata accessor for SizeConstants.Environment);
      v173 = v172 + *(int *)(v148 + 24);
      v174 = sub_173CC(v170, v173);
      ((void (*)(uint64_t, uint64_t))v275)(v173, v276);
      if ((*(_QWORD *)&v174 & 0xFFFFFFFFFFFFFLL) != 0)
        v175 = 1.0;
      else
        v175 = v174;
      if ((~*(_QWORD *)&v174 & 0x7FF0000000000000) == 0)
        v174 = v175;
      sub_224DC(v169, type metadata accessor for SizeConstants);
      v176 = (void (*)(char *, uint64_t))v281;
      ((void (*)(uint64_t, uint64_t))v281)(v170, v134);
      v177 = *(int *)(v292 + 36);
      *(double *)(v171 + v177) = v174;
      v176(v168, v134);
      sub_224DC(v167, type metadata accessor for SizeConstants);
      v178 = KeyedEncodingContainer.encode<A>(_:forKey:)(*(double *)(v171 + v177)) * 200.0;
      v179 = KeyedEncodingContainer.encode<A>(_:forKey:)(*(double *)(v171 + *(int *)(v148 + 28)));
      v180 = v294;
      ((void (*)(uint64_t, _QWORD, uint64_t))v268)(v151, v270, v294);
      *(double *)&v297 = v178;
      sub_13603C(v151, v179);
      v181 = v297;
      ((void (*)(uint64_t, uint64_t))v284)(v151, v180);
      sub_B414(v171, &qword_262710);
      v182 = _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0();
      _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(&v297, v181, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v182, v183);
      v184 = v269;
      v185 = v257;
      sub_B3D0(v269, v257, &qword_2623E8);
      v186 = v287;
      v187 = (_OWORD *)(v185 + *(int *)(v287 + 36));
      v188 = v302;
      v187[4] = v301;
      v187[5] = v188;
      v187[6] = v303;
      v189 = v298;
      *v187 = v297;
      v187[1] = v189;
      v190 = v300;
      v187[2] = v299;
      v187[3] = v190;
      sub_B414(v184, &qword_2623E8);
      v191 = v258;
      sub_167A4(v185, v258, &qword_2623D8);
      v192 = v274;
      sub_B3D0(v191, v274, &qword_2623D8);
      swift_storeEnumTagMultiPayload(v192, v273, 1);
      v193 = sub_3CC54(&qword_2623D0, &qword_2623D8, (void (*)(void))sub_8E88C);
      v194 = (uint64_t)v272;
      v195 = v192;
    }
    _ConditionalContent<>.init(storage:)(v195, v186, v186, v193, v193);
    v237 = v289;
    v238 = v288;
    sub_B414(v191, &qword_2623D8);
    sub_B3D0(v194, v237, &qword_2623C8);
    swift_storeEnumTagMultiPayload(v237, v238, 0);
    v239 = sub_8E808();
    v240 = sub_3CC54(&qword_2623D0, &qword_2623D8, (void (*)(void))sub_8E88C);
    _ConditionalContent<>.init(storage:)(v237, v286, v186, v239, v240);
    v129 = v194;
    v130 = &qword_2623C8;
  }
  sub_B414(v129, v130);
  return sub_B414(v296, &qword_2623F8);
}

uint64_t sub_8B000@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int *v43;
  double v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  BOOL v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD v97[2];
  uint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  char *v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;

  v109 = a2;
  v3 = type metadata accessor for Capsule(0);
  __chkstk_darwin(v3);
  v114 = (uint64_t)v97 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v102 = sub_5440(&qword_262868);
  __chkstk_darwin(v102);
  v6 = (char *)v97 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v117 = sub_5440(&qword_262870);
  v7 = __chkstk_darwin(v117);
  v100 = (char *)v97 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v104 = (uint64_t)v97 - v9;
  v116 = sub_5440(&qword_262878);
  __chkstk_darwin(v116);
  v108 = (uint64_t)v97 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for BlendMode(0);
  v110 = *(_QWORD *)(v11 - 8);
  v111 = v11;
  v12 = __chkstk_darwin(v11);
  v99 = (char *)v97 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v101 = (uint64_t)v97 - v14;
  v15 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v15);
  v17 = (double *)((char *)v97 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v18 = sub_5440(&qword_260860);
  __chkstk_darwin(v18);
  v113 = (uint64_t)v97 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v115 = sub_5440(&qword_2627A0);
  v20 = __chkstk_darwin(v115);
  v22 = (char *)v97 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v103 = (uint64_t)v97 - v23;
  v24 = sub_5440(&qword_262880);
  v25 = __chkstk_darwin(v24);
  v106 = (char *)v97 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  v105 = (char *)v97 - v27;
  v28 = sub_5440(&qword_2627A8);
  v29 = __chkstk_darwin(v28);
  v107 = (char *)v97 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v29);
  v32 = (char *)v97 - v31;
  v33 = type metadata accessor for BooksBorderedButtonStyle(0);
  v34 = *(int *)(v33 + 28);
  v118 = a1;
  v35 = a1 + v34;
  v36 = *(_QWORD *)v35;
  v98 = v35;
  v37 = *(_BYTE *)(v35 + 8);
  sub_F9E4(v36, v37);
  LOBYTE(a1) = sub_30DB4(v36, v37);
  sub_BE0C(v36, v37);
  v112 = v32;
  if ((a1 & 1) != 0)
  {
    v38 = sub_92BA0();
    _CALayerView.init(type:onUpdate:)(v38, KeyedEncodingContainer.encode<A>(_:forKey:), 0, v38);
    v39 = sub_5440(&qword_2627B0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 56))(v32, 0, 1, v39);
  }
  else
  {
    v40 = sub_5440(&qword_2627B0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 56))(v32, 1, 1, v40);
  }
  v41 = v118 + *(int *)(v33 + 32);
  v42 = type metadata accessor for ButtonViewModel(0);
  v43 = (int *)v42;
  if (*(_BYTE *)(v41 + *(int *)(v42 + 32)) == 1)
  {
    if (*(_BYTE *)(v41 + *(int *)(v42 + 28)) == 2)
      v44 = 5.0;
    else
      v44 = 12.0;
    v45 = (char *)v17 + *(int *)(v15 + 20);
    v46 = enum case for RoundedCornerStyle.continuous(_:);
    v47 = type metadata accessor for RoundedCornerStyle(0);
    v48 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 104))(v45, v46, v47);
    *v17 = v44;
    v17[1] = v44;
    if (*(_BYTE *)(v41 + v43[9]) == 1)
    {
      v49 = static Color.clear.getter(v48);
    }
    else
    {
      if (*(_BYTE *)(v41 + v43[12]) == 1)
      {
        ButtonViewModel.theme.getter(&v119);
        v55 = v119;
        v49 = v120;
        v56 = v121;
      }
      else
      {
        ButtonViewModel.theme.getter(&v119);
        v55 = v119;
        v56 = v120;
        v49 = v121;
      }
      swift_release(v122);
      swift_release(v56);
      swift_release(v55);
    }
    v59 = (uint64_t)v105;
    v60 = v113;
    sub_1E428((uint64_t)v17, v113, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
    *(_QWORD *)(v60 + *(int *)(v18 + 52)) = v49;
    *(_WORD *)(v60 + *(int *)(v18 + 56)) = 256;
    sub_224DC((uint64_t)v17, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
    v61 = *(_QWORD *)(v41 + v43[10]);
    if (v61 == 1)
    {
      v64 = *(_QWORD *)v98;
      v65 = *(_BYTE *)(v98 + 8);
      sub_F9E4(*(_QWORD *)v98, v65);
      v66 = sub_30DB4(v64, v65);
      sub_BE0C(v64, v65);
      v63 = v108;
      v62 = v101;
      if ((v66 & 1) != 0)
      {
        sub_31660(v101);
        goto LABEL_24;
      }
      v69 = v110;
      v67 = v111;
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v110 + 104))(v101, enum case for BlendMode.normal(_:), v111);
    }
    else
    {
      if (v61 == 2)
      {
        v62 = v101;
        sub_31660(v101);
        v63 = v108;
LABEL_24:
        v67 = v111;
        v68 = (uint64_t)v112;
        v69 = v110;
LABEL_37:
        v84 = v115;
        (*(void (**)(char *, uint64_t, uint64_t))(v69 + 16))(&v22[*(int *)(v115 + 36)], v62, v67);
        v85 = v113;
        sub_B3D0(v113, (uint64_t)v22, &qword_260860);
        (*(void (**)(uint64_t, uint64_t))(v69 + 8))(v62, v67);
        sub_B414(v85, &qword_260860);
        v86 = v103;
        sub_167A4((uint64_t)v22, v103, &qword_2627A0);
        sub_B3D0(v86, v63, &qword_2627A0);
        swift_storeEnumTagMultiPayload(v63, v116, 0);
        v87 = sub_92D7C(&qword_262888, &qword_2627A0, &qword_262890, &qword_260860);
        v88 = sub_92D7C(&qword_262898, &qword_262870, &qword_2628A0, &qword_262868);
        _ConditionalContent<>.init(storage:)(v63, v84, v117, v87, v88);
        sub_B414(v86, &qword_2627A0);
        v70 = (uint64_t)v106;
        v76 = (uint64_t)v107;
        v83 = v109;
        goto LABEL_40;
      }
      v69 = v110;
      v67 = v111;
      v62 = v101;
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v110 + 104))(v101, enum case for BlendMode.normal(_:), v111);
      v63 = v108;
    }
    v68 = (uint64_t)v112;
    goto LABEL_37;
  }
  v50 = enum case for RoundedCornerStyle.continuous(_:);
  v51 = type metadata accessor for RoundedCornerStyle(0);
  v52 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v51 - 8) + 104))(v114, v50, v51);
  v53 = *(_BYTE *)(v41 + v43[9]) == 1;
  v97[1] = v33;
  if (v53)
  {
    v54 = static Color.clear.getter(v52);
  }
  else
  {
    if (*(_BYTE *)(v41 + v43[12]) == 1)
    {
      ButtonViewModel.theme.getter(&v119);
      v57 = v119;
      v54 = v120;
      v58 = v121;
    }
    else
    {
      ButtonViewModel.theme.getter(&v119);
      v57 = v119;
      v58 = v120;
      v54 = v121;
    }
    swift_release(v122);
    swift_release(v58);
    swift_release(v57);
  }
  v70 = (uint64_t)v106;
  v71 = (uint64_t)v100;
  v72 = (uint64_t)v99;
  v73 = v114;
  sub_1E428(v114, (uint64_t)v6, (uint64_t (*)(_QWORD))&type metadata accessor for Capsule);
  v74 = v102;
  *(_QWORD *)&v6[*(int *)(v102 + 52)] = v54;
  *(_WORD *)&v6[*(int *)(v74 + 56)] = 256;
  sub_224DC(v73, (uint64_t (*)(_QWORD))&type metadata accessor for Capsule);
  v75 = *(_QWORD *)(v41 + v43[10]);
  if (v75 == 1)
  {
    v79 = *(_QWORD *)v98;
    v80 = *(_BYTE *)(v98 + 8);
    sub_F9E4(*(_QWORD *)v98, v80);
    v81 = sub_30DB4(v79, v80);
    sub_BE0C(v79, v80);
    v76 = (uint64_t)v107;
    v82 = (uint64_t)v6;
    v83 = v109;
    if ((v81 & 1) != 0)
    {
      sub_31660(v72);
      v78 = v110;
      v77 = v111;
    }
    else
    {
      v78 = v110;
      v77 = v111;
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v110 + 104))(v72, enum case for BlendMode.normal(_:), v111);
    }
  }
  else
  {
    if (v75 == 2)
    {
      sub_31660(v72);
      v76 = (uint64_t)v107;
      v78 = v110;
      v77 = v111;
    }
    else
    {
      v78 = v110;
      v77 = v111;
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v110 + 104))(v72, enum case for BlendMode.normal(_:), v111);
      v76 = (uint64_t)v107;
    }
    v82 = (uint64_t)v6;
    v83 = v109;
  }
  v89 = v117;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v78 + 16))(v71 + *(int *)(v117 + 36), v72, v77);
  sub_B3D0(v82, v71, &qword_262868);
  (*(void (**)(uint64_t, uint64_t))(v78 + 8))(v72, v77);
  sub_B414(v82, &qword_262868);
  v90 = v71;
  v91 = v104;
  sub_167A4(v90, v104, &qword_262870);
  v92 = v108;
  sub_B3D0(v91, v108, &qword_262870);
  swift_storeEnumTagMultiPayload(v92, v116, 1);
  v93 = sub_92D7C(&qword_262888, &qword_2627A0, &qword_262890, &qword_260860);
  v94 = sub_92D7C(&qword_262898, &qword_262870, &qword_2628A0, &qword_262868);
  v59 = (uint64_t)v105;
  _ConditionalContent<>.init(storage:)(v92, v115, v89, v93, v94);
  sub_B414(v91, &qword_262870);
  v68 = (uint64_t)v112;
LABEL_40:
  sub_B3D0(v68, v76, &qword_2627A8);
  sub_B3D0(v59, v70, &qword_262880);
  sub_B3D0(v76, v83, &qword_2627A8);
  v95 = sub_5440(&qword_2628A8);
  sub_B3D0(v70, v83 + *(int *)(v95 + 48), &qword_262880);
  sub_B414(v59, &qword_262880);
  sub_B414(v68, &qword_2627A8);
  sub_B414(v70, &qword_262880);
  return sub_B414(v76, &qword_2627A8);
}

uint64_t sub_8BAD8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int *v34;
  uint64_t v35;
  uint64_t v36;
  int *v37;
  double v38;
  double *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  __int128 v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  char v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char v93;
  char v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  double v99;
  uint64_t v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  double v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  char *v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  double *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  __int128 v148;
  __int128 v149;
  uint64_t v150;

  v142 = a2;
  v146 = a3;
  v4 = type metadata accessor for Capsule(0);
  __chkstk_darwin(v4);
  v131 = (char *)&v118 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_5440(&qword_2627F8);
  __chkstk_darwin(v6);
  v139 = (uint64_t)&v118 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v129 = sub_5440(&qword_262800);
  __chkstk_darwin(v129);
  v130 = (char *)&v118 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v141 = sub_5440(&qword_262808);
  v9 = __chkstk_darwin(v141);
  v132 = (uint64_t)&v118 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v133 = (uint64_t)&v118 - v11;
  v144 = sub_5440(&qword_262810);
  __chkstk_darwin(v144);
  v137 = (char *)&v118 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v136 = type metadata accessor for BlendMode(0);
  v140 = *(_QWORD *)(v136 - 8);
  v13 = __chkstk_darwin(v136);
  v134 = (uint64_t)&v118 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v135 = (uint64_t)&v118 - v15;
  v145 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v145);
  v143 = (double *)((char *)&v118 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v17 = sub_5440(&qword_262770);
  __chkstk_darwin(v17);
  v138 = (uint64_t)&v118 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v128 = sub_5440(&qword_262778);
  __chkstk_darwin(v128);
  v20 = (char *)&v118 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_5440(&qword_262780);
  v22 = __chkstk_darwin(v21);
  v24 = (char *)&v118 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v26 = (char *)&v118 - v25;
  v27 = sub_5440(&qword_262818);
  v28 = *(_QWORD *)(v27 - 8);
  __chkstk_darwin(v27);
  v30 = (char *)&v118 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = type metadata accessor for BooksBorderedButtonStyle(0);
  v32 = a1;
  v33 = a1 + *(int *)(v31 + 32);
  v34 = (int *)type metadata accessor for ButtonViewModel(0);
  v35 = v34[9];
  v147 = v33;
  if (*(_BYTE *)(v33 + v35) != 1)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v28 + 56))(v146, 1, 1, v27);
  v119 = v24;
  v120 = v20;
  v121 = v26;
  v122 = v31;
  v123 = v32;
  v124 = v30;
  v125 = v21;
  v126 = v28;
  v127 = v27;
  v36 = v147;
  v37 = v34;
  if (*(_BYTE *)(v147 + v34[8]) == 1)
  {
    if (*(_BYTE *)(v147 + v34[7]) == 2)
      v38 = 5.0;
    else
      v38 = 12.0;
    v39 = v143;
    v40 = (char *)v143 + *(int *)(v145 + 20);
    v41 = enum case for RoundedCornerStyle.continuous(_:);
    v42 = type metadata accessor for RoundedCornerStyle(0);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 104))(v40, v41, v42);
    *v39 = v38;
    v39[1] = v38;
    if (*(_BYTE *)(v36 + v37[12]) == 1)
    {
      ButtonViewModel.theme.getter((uint64_t *)&v148);
      v44 = *((_QWORD *)&v148 + 1);
      v43 = v148;
      v45 = v149;
    }
    else
    {
      ButtonViewModel.theme.getter((uint64_t *)&v148);
      v45 = *((_QWORD *)&v148 + 1);
      v43 = v148;
      v44 = v149;
    }
    swift_release(*((_QWORD *)&v149 + 1));
    swift_release(v45);
    swift_release(v43);
    v54 = v135;
    v53 = v136;
    v55 = v140;
    v56 = v138;
    StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)(&v148, 0, 0, &_swiftEmptyArrayStorage, 2.0, 10.0, 0.0);
    v57 = (uint64_t)v143;
    sub_1E428((uint64_t)v143, v56, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
    v58 = v56 + *(int *)(sub_5440(&qword_262788) + 36);
    v59 = v149;
    *(_OWORD *)v58 = v148;
    *(_OWORD *)(v58 + 16) = v59;
    *(_QWORD *)(v58 + 32) = v150;
    v60 = sub_5440(&qword_262790);
    *(_QWORD *)(v56 + *(int *)(v60 + 52)) = v44;
    *(_WORD *)(v56 + *(int *)(v60 + 56)) = 256;
    v61 = _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0();
    v63 = v62;
    v64 = (uint64_t *)(v56 + *(int *)(sub_5440(&qword_262798) + 36));
    *v64 = v61;
    v64[1] = v63;
    sub_224DC(v57, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
    v65 = *(_QWORD *)(v147 + v37[10]);
    if (v65 == 1)
    {
      v83 = v123 + *(int *)(v122 + 28);
      v84 = *(_QWORD *)v83;
      v85 = *(_BYTE *)(v83 + 8);
      sub_F9E4(*(_QWORD *)v83, v85);
      v86 = sub_30DB4(v84, v85);
      sub_BE0C(v84, v85);
      v78 = v146;
      v87 = (uint64_t)v137;
      v88 = v128;
      v54 = v135;
      if ((v86 & 1) != 0)
        sub_31660(v135);
      else
        (*(void (**)(uint64_t, _QWORD, uint64_t))(v55 + 104))(v135, enum case for BlendMode.normal(_:), v53);
      v89 = v125;
      v90 = (uint64_t)v120;
    }
    else
    {
      if (v65 == 2)
        sub_31660(v54);
      else
        (*(void (**)(uint64_t, _QWORD, uint64_t))(v55 + 104))(v54, enum case for BlendMode.normal(_:), v53);
      v78 = v146;
      v87 = (uint64_t)v137;
      v89 = v125;
      v90 = (uint64_t)v120;
      v88 = v128;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v55 + 16))(v90 + *(int *)(v88 + 36), v54, v53);
    v97 = v138;
    sub_B3D0(v138, v90, &qword_262770);
    (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v54, v53);
    v98 = sub_B414(v97, &qword_262770);
    if ((ButtonStyleConfiguration.isPressed.getter(v98) & 1) != 0)
      v99 = 0.6;
    else
      v99 = 1.0;
    v100 = (uint64_t)v119;
    sub_B3D0(v90, (uint64_t)v119, &qword_262778);
    *(double *)(v100 + *(int *)(v89 + 36)) = v99;
    sub_B414(v90, &qword_262778);
    v101 = &qword_262780;
    v102 = v100;
    v103 = (uint64_t)v121;
    sub_167A4(v102, (uint64_t)v121, &qword_262780);
    sub_B3D0(v103, v87, &qword_262780);
    swift_storeEnumTagMultiPayload(v87, v144, 0);
    v104 = sub_92BE4();
    v105 = sub_92C70();
    v106 = (uint64_t)v124;
    _ConditionalContent<>.init(storage:)(v87, v89, v141, v104, v105);
    v107 = v103;
  }
  else
  {
    v47 = enum case for RoundedCornerStyle.continuous(_:);
    v48 = type metadata accessor for RoundedCornerStyle(0);
    v49 = (uint64_t)v131;
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v48 - 8) + 104))(v131, v47, v48);
    if (*(_BYTE *)(v36 + v37[12]) == 1)
    {
      ButtonViewModel.theme.getter((uint64_t *)&v148);
      v51 = *((_QWORD *)&v148 + 1);
      v50 = v148;
      v52 = v149;
    }
    else
    {
      ButtonViewModel.theme.getter((uint64_t *)&v148);
      v52 = *((_QWORD *)&v148 + 1);
      v50 = v148;
      v51 = v149;
    }
    swift_release(*((_QWORD *)&v149 + 1));
    swift_release(v52);
    swift_release(v50);
    v66 = (uint64_t)v137;
    v67 = v123;
    v68 = v139;
    v69 = v134;
    StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)(&v148, 0, 0, &_swiftEmptyArrayStorage, 2.0, 10.0, 0.0);
    sub_1E428(v49, v68, (uint64_t (*)(_QWORD))&type metadata accessor for Capsule);
    v70 = v68 + *(int *)(sub_5440(&qword_262820) + 36);
    v71 = v149;
    *(_OWORD *)v70 = v148;
    *(_OWORD *)(v70 + 16) = v71;
    *(_QWORD *)(v70 + 32) = v150;
    v72 = sub_5440(&qword_262828);
    *(_QWORD *)(v68 + *(int *)(v72 + 52)) = v51;
    *(_WORD *)(v68 + *(int *)(v72 + 56)) = 256;
    v73 = _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0();
    v75 = v74;
    v76 = (uint64_t *)(v68 + *(int *)(sub_5440(&qword_262830) + 36));
    *v76 = v73;
    v76[1] = v75;
    sub_224DC(v49, (uint64_t (*)(_QWORD))&type metadata accessor for Capsule);
    v77 = *(_QWORD *)(v147 + v37[10]);
    if (v77 == 1)
    {
      v91 = v67 + *(int *)(v122 + 28);
      v92 = *(_QWORD *)v91;
      v93 = *(_BYTE *)(v91 + 8);
      sub_F9E4(*(_QWORD *)v91, v93);
      v94 = sub_30DB4(v92, v93);
      sub_BE0C(v92, v93);
      v78 = v146;
      v79 = v141;
      v82 = v136;
      v95 = (uint64_t)v130;
      v96 = v129;
      if ((v94 & 1) != 0)
      {
        v69 = v134;
        sub_31660(v134);
        v81 = v125;
        v80 = v140;
      }
      else
      {
        v80 = v140;
        v69 = v134;
        (*(void (**)(uint64_t, _QWORD, uint64_t))(v140 + 104))(v134, enum case for BlendMode.normal(_:), v136);
        v81 = v125;
      }
    }
    else
    {
      if (v77 == 2)
      {
        sub_31660(v69);
        v78 = v146;
        v80 = v140;
        v79 = v141;
        v81 = v125;
        v82 = v136;
      }
      else
      {
        v80 = v140;
        v82 = v136;
        (*(void (**)(uint64_t, _QWORD, uint64_t))(v140 + 104))(v69, enum case for BlendMode.normal(_:), v136);
        v78 = v146;
        v79 = v141;
        v81 = v125;
      }
      v95 = (uint64_t)v130;
      v96 = v129;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v80 + 16))(v95 + *(int *)(v96 + 36), v69, v82);
    v108 = v69;
    v109 = v139;
    sub_B3D0(v139, v95, &qword_2627F8);
    (*(void (**)(uint64_t, uint64_t))(v80 + 8))(v108, v82);
    v110 = sub_B414(v109, &qword_2627F8);
    if ((ButtonStyleConfiguration.isPressed.getter(v110) & 1) != 0)
      v111 = 0.6;
    else
      v111 = 1.0;
    v112 = v132;
    sub_B3D0(v95, v132, &qword_262800);
    *(double *)(v112 + *(int *)(v79 + 36)) = v111;
    sub_B414(v95, &qword_262800);
    v101 = &qword_262808;
    v113 = v133;
    sub_167A4(v112, v133, &qword_262808);
    sub_B3D0(v113, v66, &qword_262808);
    swift_storeEnumTagMultiPayload(v66, v144, 1);
    v114 = sub_92BE4();
    v115 = sub_92C70();
    v106 = (uint64_t)v124;
    _ConditionalContent<>.init(storage:)(v66, v81, v79, v114, v115);
    v107 = v113;
  }
  sub_B414(v107, v101);
  v116 = v126;
  v117 = v127;
  sub_167A4(v106, v78, &qword_262818);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v116 + 56))(v78, 0, 1, v117);
}

uint64_t sub_8C6B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  double v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;

  v49 = a2;
  v54 = a3;
  v4 = sub_5440(&qword_262728);
  __chkstk_darwin(v4);
  v6 = (char *)&v49 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v7);
  v9 = (_OWORD *)((char *)&v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = sub_5440(&qword_2623B8);
  __chkstk_darwin(v10);
  v12 = (char *)&v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_5440(&qword_262730);
  __chkstk_darwin(v13);
  v15 = (char *)&v49 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = sub_5440(&qword_262738);
  __chkstk_darwin(v50);
  v17 = (char *)&v49 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = sub_5440(&qword_262740);
  __chkstk_darwin(v51);
  v19 = (char *)&v49 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = sub_5440(&qword_262748);
  __chkstk_darwin(v53);
  v52 = (char *)&v49 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_897B8((uint64_t)v12);
  v21 = (char *)v9 + *(int *)(v7 + 20);
  v22 = enum case for RoundedCornerStyle.continuous(_:);
  v23 = type metadata accessor for RoundedCornerStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 104))(v21, v22, v23);
  __asm { FMOV            V0.2D, #25.0 }
  *v9 = _Q0;
  v29 = (uint64_t)&v15[*(int *)(v13 + 36)];
  sub_1E428((uint64_t)v9, v29, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  *(_WORD *)(v29 + *(int *)(sub_5440(&qword_25F700) + 36)) = 256;
  sub_B3D0((uint64_t)v12, (uint64_t)v15, &qword_2623B8);
  sub_224DC((uint64_t)v9, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  sub_B414((uint64_t)v12, &qword_2623B8);
  v30 = _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0();
  v32 = v31;
  v33 = (uint64_t *)&v17[*(int *)(v50 + 36)];
  *v33 = _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0();
  v33[1] = v34;
  v35 = sub_5440(&qword_262750);
  sub_8CAD0(a1, (uint64_t)v33 + *(int *)(v35 + 44));
  v36 = (uint64_t *)((char *)v33 + *(int *)(sub_5440(&qword_262758) + 36));
  *v36 = v30;
  v36[1] = v32;
  v37 = sub_167A4((uint64_t)v15, (uint64_t)v17, &qword_262730);
  v38 = v49;
  if ((ButtonStyleConfiguration.isPressed.getter(v37) & 1) != 0)
    v39 = 0.6;
  else
    v39 = 1.0;
  sub_B3D0((uint64_t)v17, (uint64_t)v19, &qword_262738);
  *(double *)&v19[*(int *)(v51 + 36)] = v39;
  v40 = sub_B414((uint64_t)v17, &qword_262738);
  *(_QWORD *)v6 = static VerticalAlignment.center.getter(v40);
  *((_QWORD *)v6 + 1) = 0;
  v6[16] = 1;
  v41 = sub_5440(&qword_262760);
  sub_8D044(a1, v38, (uint64_t)&v6[*(int *)(v41 + 44)]);
  v42 = _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0();
  v44 = v43;
  v45 = (uint64_t)v52;
  v46 = (uint64_t)&v52[*(int *)(v53 + 36)];
  sub_B3D0((uint64_t)v6, v46, &qword_262728);
  v47 = (uint64_t *)(v46 + *(int *)(sub_5440(&qword_262768) + 36));
  *v47 = v42;
  v47[1] = v44;
  sub_B3D0((uint64_t)v19, v45, &qword_262740);
  sub_B414((uint64_t)v6, &qword_262728);
  sub_B414((uint64_t)v19, &qword_262740);
  return sub_167A4(v45, v54, &qword_262748);
}

uint64_t sub_8CAD0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int *v29;
  double v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;

  v56 = a2;
  v55 = type metadata accessor for BlendMode(0);
  v53 = *(_QWORD *)(v55 - 8);
  __chkstk_darwin(v55);
  v52 = (uint64_t)&v50 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v4);
  v6 = (double *)((char *)&v50 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = sub_5440(&qword_260860);
  __chkstk_darwin(v7);
  v9 = (char *)&v50 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v57 = sub_5440(&qword_2627A0);
  v10 = __chkstk_darwin(v57);
  v54 = (char *)&v50 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v50 - v13;
  __chkstk_darwin(v12);
  v59 = (uint64_t)&v50 - v15;
  v16 = sub_5440(&qword_2627A8);
  v17 = __chkstk_darwin(v16);
  v58 = (uint64_t)&v50 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v20 = (char *)&v50 - v19;
  v60 = type metadata accessor for BooksBorderedButtonStyle(0);
  v61 = a1;
  v21 = a1 + *(int *)(v60 + 28);
  v22 = *(_QWORD *)v21;
  v23 = *(_BYTE *)(v21 + 8);
  sub_F9E4(*(_QWORD *)v21, v23);
  v24 = sub_30DB4(v22, v23);
  sub_BE0C(v22, v23);
  if ((v24 & 1) != 0)
  {
    v25 = sub_92BA0();
    _CALayerView.init(type:onUpdate:)(v25, KeyedEncodingContainer.encode<A>(_:forKey:), 0, v25);
    v26 = sub_5440(&qword_2627B0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v20, 0, 1, v26);
  }
  else
  {
    v27 = sub_5440(&qword_2627B0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v20, 1, 1, v27);
  }
  v28 = v61 + *(int *)(v60 + 32);
  v29 = (int *)type metadata accessor for ButtonViewModel(0);
  if (*(_BYTE *)(v28 + v29[7]) == 2)
    v30 = 5.0;
  else
    v30 = 12.0;
  v31 = (char *)v6 + *(int *)(v4 + 20);
  v32 = enum case for RoundedCornerStyle.continuous(_:);
  v33 = type metadata accessor for RoundedCornerStyle(0);
  v34 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 104))(v31, v32, v33);
  *v6 = v30;
  v6[1] = v30;
  if (*(_BYTE *)(v28 + v29[9]) == 1)
  {
    v35 = static Color.clear.getter(v34);
  }
  else
  {
    if (*(_BYTE *)(v28 + v29[12]) == 1)
    {
      ButtonViewModel.theme.getter(&v62);
      v35 = v63;
      v51 = v62;
      v36 = v64;
    }
    else
    {
      ButtonViewModel.theme.getter(&v62);
      v36 = v63;
      v51 = v62;
      v35 = v64;
    }
    swift_release(v65);
    swift_release(v36);
    swift_release(v51);
  }
  sub_1E428((uint64_t)v6, (uint64_t)v9, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  *(_QWORD *)&v9[*(int *)(v7 + 52)] = v35;
  *(_WORD *)&v9[*(int *)(v7 + 56)] = 256;
  sub_224DC((uint64_t)v6, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  v37 = *(_QWORD *)(v28 + v29[10]);
  if (v37 == 1)
  {
    v43 = *(_QWORD *)v21;
    v44 = *(_BYTE *)(v21 + 8);
    sub_F9E4(*(_QWORD *)v21, v44);
    v45 = sub_30DB4(v43, v44);
    sub_BE0C(v43, v44);
    v40 = v55;
    v39 = v56;
    v42 = v53;
    v41 = (uint64_t)v54;
    v38 = v52;
    if ((v45 & 1) != 0)
      sub_31660(v52);
    else
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v53 + 104))(v52, enum case for BlendMode.normal(_:), v55);
  }
  else
  {
    v38 = v52;
    if (v37 == 2)
    {
      sub_31660(v52);
      v40 = v55;
      v39 = v56;
      v42 = v53;
      v41 = (uint64_t)v54;
    }
    else
    {
      v42 = v53;
      v40 = v55;
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v53 + 104))(v52, enum case for BlendMode.normal(_:), v55);
      v39 = v56;
      v41 = (uint64_t)v54;
    }
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v42 + 16))(&v14[*(int *)(v57 + 36)], v38, v40);
  sub_B3D0((uint64_t)v9, (uint64_t)v14, &qword_260860);
  (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v38, v40);
  sub_B414((uint64_t)v9, &qword_260860);
  v46 = v59;
  sub_167A4((uint64_t)v14, v59, &qword_2627A0);
  v47 = v58;
  sub_B3D0((uint64_t)v20, v58, &qword_2627A8);
  sub_B3D0(v46, v41, &qword_2627A0);
  sub_B3D0(v47, v39, &qword_2627A8);
  v48 = sub_5440(&qword_2627B8);
  sub_B3D0(v41, v39 + *(int *)(v48 + 48), &qword_2627A0);
  sub_B414(v46, &qword_2627A0);
  sub_B414((uint64_t)v20, &qword_2627A8);
  sub_B414(v41, &qword_2627A0);
  return sub_B414(v47, &qword_2627A8);
}

uint64_t sub_8D044@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  double *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  double v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  double *v74;
  uint64_t v75;
  __int128 v76;
  __int128 v77;
  uint64_t v78;

  v71 = a2;
  v75 = a3;
  v68 = type metadata accessor for BlendMode(0);
  v70 = *(_QWORD *)(v68 - 8);
  __chkstk_darwin(v68);
  v72 = (uint64_t)&v60 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v73 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v73);
  v74 = (double *)((char *)&v60 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = sub_5440(&qword_262770);
  __chkstk_darwin(v6);
  v69 = (char *)&v60 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_5440(&qword_262778);
  __chkstk_darwin(v8);
  v10 = (char *)&v60 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_5440(&qword_262780);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v60 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v17 = (char *)&v60 - v16;
  v18 = type metadata accessor for BooksBorderedButtonStyle(0);
  v19 = a1;
  v20 = a1 + *(int *)(v18 + 32);
  v21 = type metadata accessor for ButtonViewModel(0);
  if (*(_BYTE *)(v20 + *(int *)(v21 + 36)) != 1)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 56))(v75, 1, 1, v11);
  v22 = v21;
  v67 = v18;
  v63 = v8;
  v60 = v19;
  v64 = v17;
  v65 = v15;
  v61 = v10;
  v66 = v12;
  v62 = v11;
  v23 = v20;
  if (*(_BYTE *)(v20 + *(int *)(v21 + 28)) == 2)
    v24 = 5.0;
  else
    v24 = 12.0;
  v25 = v74;
  v26 = (char *)v74 + *(int *)(v73 + 20);
  v27 = enum case for RoundedCornerStyle.continuous(_:);
  v28 = type metadata accessor for RoundedCornerStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 104))(v26, v27, v28);
  *v25 = v24;
  v25[1] = v24;
  v29 = v22;
  if (*(_BYTE *)(v23 + *(int *)(v22 + 48)) == 1)
  {
    ButtonViewModel.theme.getter((uint64_t *)&v76);
    v33 = *((_QWORD *)&v76 + 1);
    v31 = v76;
    v32 = v77;
  }
  else
  {
    ButtonViewModel.theme.getter((uint64_t *)&v76);
    v32 = *((_QWORD *)&v76 + 1);
    v31 = v76;
    v33 = v77;
  }
  swift_release(*((_QWORD *)&v77 + 1));
  swift_release(v32);
  swift_release(v31);
  v34 = (uint64_t)v61;
  v35 = (uint64_t)v69;
  v36 = v60;
  v37 = v67;
  StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)(&v76, 0, 0, &_swiftEmptyArrayStorage, 2.0, 10.0, 0.0);
  sub_1E428((uint64_t)v25, v35, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  v38 = v35 + *(int *)(sub_5440(&qword_262788) + 36);
  v39 = v77;
  *(_OWORD *)v38 = v76;
  *(_OWORD *)(v38 + 16) = v39;
  *(_QWORD *)(v38 + 32) = v78;
  v40 = sub_5440(&qword_262790);
  *(_QWORD *)(v35 + *(int *)(v40 + 52)) = v33;
  *(_WORD *)(v35 + *(int *)(v40 + 56)) = 256;
  v41 = _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0();
  v43 = v42;
  v44 = (uint64_t *)(v35 + *(int *)(sub_5440(&qword_262798) + 36));
  *v44 = v41;
  v44[1] = v43;
  sub_224DC((uint64_t)v25, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  v45 = *(_QWORD *)(v23 + *(int *)(v29 + 40));
  if (v45 == 1)
  {
    v50 = v36 + *(int *)(v37 + 28);
    v51 = *(_QWORD *)v50;
    v52 = *(_BYTE *)(v50 + 8);
    sub_F9E4(*(_QWORD *)v50, v52);
    v53 = sub_30DB4(v51, v52);
    sub_BE0C(v51, v52);
    v47 = v75;
    v48 = v70;
    v49 = v68;
    v54 = v62;
    if ((v53 & 1) != 0)
    {
      v46 = v72;
      sub_31660(v72);
    }
    else
    {
      v46 = v72;
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v70 + 104))(v72, enum case for BlendMode.normal(_:), v68);
    }
  }
  else
  {
    if (v45 == 2)
    {
      v46 = v72;
      sub_31660(v72);
      v47 = v75;
      v48 = v70;
      v49 = v68;
    }
    else
    {
      v48 = v70;
      v46 = v72;
      v49 = v68;
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v70 + 104))(v72, enum case for BlendMode.normal(_:), v68);
      v47 = v75;
    }
    v54 = v62;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v48 + 16))(v34 + *(int *)(v63 + 36), v46, v49);
  sub_B3D0(v35, v34, &qword_262770);
  (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v46, v49);
  v55 = sub_B414(v35, &qword_262770);
  if ((ButtonStyleConfiguration.isPressed.getter(v55) & 1) != 0)
    v56 = 0.6;
  else
    v56 = 1.0;
  v57 = (uint64_t)v65;
  sub_B3D0(v34, (uint64_t)v65, &qword_262778);
  *(double *)(v57 + *(int *)(v54 + 36)) = v56;
  sub_B414(v34, &qword_262778);
  v58 = v57;
  v59 = (uint64_t)v64;
  sub_167A4(v58, (uint64_t)v64, &qword_262780);
  sub_167A4(v59, v47, &qword_262780);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v66 + 56))(v47, 0, 1, v54);
}

uint64_t BooksBorderlessButtonStyle.makeBody(configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _BYTE *v2;
  _BYTE *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  double v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  __n128 v47;
  uint64_t KeyPath;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  _BYTE *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  void *v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  double v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  char v72;
  void (*v73)(char *, uint64_t);
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  char v81;
  int v82;
  double v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  int v128;

  v3 = v2;
  v125 = a2;
  v5 = type metadata accessor for AutomaticHoverEffect(0);
  v123 = *(_QWORD *)(v5 - 8);
  v124 = v5;
  __chkstk_darwin(v5);
  v122 = (char *)&v94 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for BlendMode(0);
  v120 = *(_QWORD *)(v7 - 8);
  v121 = v7;
  __chkstk_darwin(v7);
  v119 = (uint64_t)&v94 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v99 = type metadata accessor for ColorScheme(0);
  v98 = *(_QWORD *)(v99 - 8);
  v9 = __chkstk_darwin(v99);
  v97 = (char *)&v94 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v96 = (uint64_t)&v94 - v11;
  v12 = type metadata accessor for ColorConstants(0);
  __chkstk_darwin(v12);
  v95 = (uint64_t)&v94 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v126 = type metadata accessor for Font.Leading(0);
  v105 = *(_QWORD *)(v126 - 8);
  __chkstk_darwin(v126);
  v101 = (char *)&v94 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_5440(&qword_25FE08);
  __chkstk_darwin(v15);
  v17 = (char *)&v94 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for Font.TextStyle(0);
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v21 = (char *)&v94 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for FontConstants.Button(0);
  __chkstk_darwin(v22);
  v24 = (char *)&v94 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v104 = type metadata accessor for ButtonStyleConfiguration.Label(0);
  v103 = *(_QWORD *)(v104 - 8);
  __chkstk_darwin(v104);
  v26 = (char *)&v94 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v100 = sub_5440(&qword_262448);
  __chkstk_darwin(v100);
  v28 = (char *)&v94 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v107 = sub_5440(&qword_262450);
  __chkstk_darwin(v107);
  v102 = (uint64_t)&v94 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v106 = sub_5440(&qword_262458);
  __chkstk_darwin(v106);
  v110 = (uint64_t)&v94 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v109 = sub_5440(&qword_262460);
  __chkstk_darwin(v109);
  v111 = (uint64_t)&v94 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v108 = sub_5440(&qword_262468);
  __chkstk_darwin(v108);
  v112 = (char *)&v94 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v115 = sub_5440(&qword_262470);
  __chkstk_darwin(v115);
  v117 = (uint64_t)&v94 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v116 = sub_5440(&qword_262478);
  v114 = *(_QWORD *)(v116 - 8);
  v34 = __chkstk_darwin(v116);
  v113 = (char *)&v94 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v118 = a1;
  ButtonStyleConfiguration.label.getter(v34);
  v36 = type metadata accessor for BooksBorderlessButtonStyle(0);
  sub_32198((uint64_t)v24);
  (*(void (**)(char *, _QWORD, uint64_t))(v19 + 104))(v21, enum case for Font.TextStyle.subheadline(_:), v18);
  v37 = type metadata accessor for Font.Design(0);
  v38 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 56))(v17, 1, 1, v37);
  v39 = static Font.Weight.semibold.getter(v38);
  v40 = static Font.system(_:design:weight:)(v21, v17, *(_QWORD *)&v39, 0);
  sub_B414((uint64_t)v17, &qword_25FE08);
  v41 = v21;
  v42 = v36;
  (*(void (**)(char *, uint64_t))(v19 + 8))(v41, v18);
  v43 = v105;
  v44 = v101;
  v45 = v126;
  (*(void (**)(char *, _QWORD, uint64_t))(v105 + 104))(v101, enum case for Font.Leading.tight(_:), v126);
  v46 = Font.leading(_:)(v44, v40);
  v47 = swift_release(v40);
  (*(void (**)(char *, uint64_t, __n128))(v43 + 8))(v44, v45, v47);
  sub_224DC((uint64_t)v24, type metadata accessor for FontConstants.Button);
  KeyPath = swift_getKeyPath(&unk_1E61C8);
  v49 = v103;
  v50 = v104;
  (*(void (**)(char *, char *, uint64_t))(v103 + 16))(v28, v26, v104);
  v51 = (uint64_t *)&v28[*(int *)(v100 + 36)];
  *v51 = KeyPath;
  v51[1] = v46;
  (*(void (**)(char *, uint64_t))(v49 + 8))(v26, v50);
  v126 = v42;
  v52 = &v3[*(int *)(v42 + 36)];
  v53 = *(_QWORD *)v52;
  LOBYTE(v26) = v52[8];
  sub_F9E4(*(_QWORD *)v52, (char)v26);
  LOBYTE(v44) = sub_30DB4(v53, (char)v26);
  v54 = sub_BE0C(v53, (char)v26);
  if ((v44 & 1) != 0)
  {
    v55 = v95;
    _s7BooksUI18BuyButtonExternalsV6colorsAA14ColorConstantsVvg_0(v95);
    v56 = _s7BooksUI14ColorConstantsV14vibrantPrimary05SwiftB00C0Vvg_0();
    sub_224DC(v55, type metadata accessor for ColorConstants);
    v127 = v56;
    v57 = &type metadata for Color;
    v58 = &protocol witness table for Color;
    v59 = &v127;
  }
  else
  {
    v128 = static HierarchicalShapeStyle.tertiary.getter(v54);
    v57 = &type metadata for HierarchicalShapeStyle;
    v58 = &protocol witness table for HierarchicalShapeStyle;
    v59 = (uint64_t *)&v128;
  }
  v60 = AnyShapeStyle.init<A>(_:)(v59, v57, v58);
  v61 = v102;
  sub_B3D0((uint64_t)v28, v102, &qword_262448);
  *(_QWORD *)(v61 + *(int *)(v107 + 36)) = v60;
  v62 = sub_B414((uint64_t)v28, &qword_262448);
  v63 = static Edge.Set.all.getter(v62);
  v64 = v110;
  sub_B3D0(v61, v110, &qword_262450);
  v65 = v64 + *(int *)(v106 + 36);
  *(_BYTE *)v65 = v63;
  *(_OWORD *)(v65 + 8) = 0u;
  *(_OWORD *)(v65 + 24) = 0u;
  *(_BYTE *)(v65 + 40) = 1;
  v66 = sub_B414(v61, &qword_262450);
  v67 = 1.0;
  if ((ButtonStyleConfiguration.isPressed.getter(v66) & 1) != 0)
  {
    v68 = v96;
    sub_31378(v96);
    v69 = v98;
    v70 = v97;
    v71 = v99;
    (*(void (**)(char *, _QWORD, uint64_t))(v98 + 104))(v97, enum case for ColorScheme.dark(_:), v99);
    v72 = static ColorScheme.== infix(_:_:)(v68, v70);
    v73 = *(void (**)(char *, uint64_t))(v69 + 8);
    v73(v70, v71);
    v73((char *)v68, v71);
    if ((v72 & 1) != 0)
      v67 = 0.4;
    else
      v67 = 0.2;
  }
  v74 = v111;
  sub_B3D0(v64, v111, &qword_262458);
  *(double *)(v74 + *(int *)(v109 + 36)) = v67;
  sub_B414(v64, &qword_262458);
  v75 = v119;
  sub_31660(v119);
  v76 = (uint64_t)v112;
  v78 = v120;
  v77 = v121;
  (*(void (**)(char *, uint64_t, uint64_t))(v120 + 16))(&v112[*(int *)(v108 + 36)], v75, v121);
  sub_B3D0(v74, v76, &qword_262460);
  (*(void (**)(uint64_t, uint64_t))(v78 + 8))(v75, v77);
  sub_B414(v74, &qword_262460);
  v79 = sub_8DF9C();
  v81 = v80 & 1;
  v82 = *v3 & 1;
  if (v82)
    v83 = INFINITY;
  else
    v83 = 0.0;
  v84 = _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0();
  v85 = v117;
  sub_87044(*(double *)&v79, v81, 0.0, 1, v83, v82 ^ 1, 0.0, 1, v117, 0.0, 1, 0.0, 1, v84, v86, (uint64_t)&qword_262468, (void (*)(uint64_t, uint64_t, uint64_t))sub_B3D0, &qword_262470);
  v87 = sub_B414(v76, &qword_262468);
  v88 = v122;
  static CustomHoverEffect<>.automatic.getter(v87);
  v89 = sub_3CC54(&qword_262480, &qword_262470, (void (*)(void))sub_8E9E4);
  v90 = sub_6FD0((unint64_t *)&qword_25FDF0, (uint64_t (*)(uint64_t))&type metadata accessor for AutomaticHoverEffect, (uint64_t)&protocol conformance descriptor for AutomaticHoverEffect);
  v91 = v113;
  v92 = v124;
  View.hoverEffect<A>(_:isEnabled:)(v88, 1, v115, v124, v89, v90);
  (*(void (**)(char *, uint64_t))(v123 + 8))(v88, v92);
  sub_B414(v85, &qword_262470);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v114 + 32))(v125, v91, v116);
}

uint64_t sub_8DF9C()
{
  unsigned __int8 *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  double v34;
  uint64_t v35;
  double v36;
  void (*v37)(char *, uint64_t);
  uint64_t v38;
  double v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  double v47;
  uint64_t v48;
  double v49;
  void (*v50)(uint64_t, uint64_t);
  uint64_t v51;
  double v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  double v56;
  uint64_t v58;
  char *v59;
  char *v60;
  char *v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  double v67;

  v1 = type metadata accessor for FloatingPointRoundingRule(0);
  v64 = *(_QWORD *)(v1 - 8);
  v65 = v1;
  __chkstk_darwin(v1);
  v63 = (char *)&v58 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v66 = type metadata accessor for SizeConstants.Environment(0);
  __chkstk_darwin(v66);
  v4 = (char *)&v58 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Font.TextStyle(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v60 = (char *)&v58 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v7);
  v59 = (char *)&v58 - v10;
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v58 - v12;
  __chkstk_darwin(v11);
  v15 = (char *)&v58 - v14;
  v62 = sub_5440(&qword_262710);
  v16 = __chkstk_darwin(v62);
  v61 = (char *)&v58 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v19 = (char *)&v58 - v18;
  v20 = type metadata accessor for SizeConstants(0);
  v21 = __chkstk_darwin(v20);
  v23 = (char *)&v58 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = __chkstk_darwin(v21);
  v25 = __chkstk_darwin(v24);
  v27 = (char *)&v58 - v26;
  __chkstk_darwin(v25);
  v30 = (char *)&v58 - v29;
  v31 = *v0;
  if (v31 == 2)
  {
    type metadata accessor for BooksBorderlessButtonStyle(0);
    sub_3168C((uint64_t)v30);
    (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v15, enum case for Font.TextStyle.subheadline(_:), v5);
    sub_1E428((uint64_t)v30, (uint64_t)v27, type metadata accessor for SizeConstants);
    (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v13, v15, v5);
    sub_1E428((uint64_t)v27, (uint64_t)v19, type metadata accessor for SizeConstants);
    sub_1E428((uint64_t)v27, (uint64_t)v4, type metadata accessor for SizeConstants.Environment);
    v32 = v66;
    v33 = (uint64_t)&v4[*(int *)(v66 + 24)];
    v34 = sub_173CC((uint64_t)v13, v33);
    v35 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 8))(v33, v35);
    v36 = 1.0;
    if ((*(_QWORD *)&v34 & 0xFFFFFFFFFFFFFLL) == 0)
      v36 = v34;
    if ((~*(_QWORD *)&v34 & 0x7FF0000000000000) == 0)
      v34 = v36;
    sub_224DC((uint64_t)v27, type metadata accessor for SizeConstants);
    v37 = *(void (**)(char *, uint64_t))(v6 + 8);
    v37(v13, v5);
    v38 = *(int *)(v62 + 36);
    *(double *)&v19[v38] = v34;
    v37(v15, v5);
    sub_224DC((uint64_t)v30, type metadata accessor for SizeConstants);
    v39 = KeyedEncodingContainer.encode<A>(_:forKey:)(*(double *)&v19[v38]) * 80.0;
    v40 = *(int *)(v32 + 28);
  }
  else
  {
    v41 = v66;
    if ((v31 & 1) != 0)
    {
      v56 = 0.0;
      return *(_QWORD *)&v56;
    }
    v42 = v5;
    v43 = v28;
    type metadata accessor for BooksBorderlessButtonStyle(0);
    v58 = v43;
    sub_3168C(v43);
    v44 = v59;
    (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v59, enum case for Font.TextStyle.subheadline(_:), v42);
    sub_1E428(v43, (uint64_t)v23, type metadata accessor for SizeConstants);
    v45 = (uint64_t)v60;
    (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v60, v44, v42);
    v19 = v61;
    sub_1E428((uint64_t)v23, (uint64_t)v61, type metadata accessor for SizeConstants);
    sub_1E428((uint64_t)v23, (uint64_t)v4, type metadata accessor for SizeConstants.Environment);
    v46 = (uint64_t)&v4[*(int *)(v41 + 24)];
    v47 = sub_173CC(v45, v46);
    v48 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v48 - 8) + 8))(v46, v48);
    v49 = 1.0;
    if ((*(_QWORD *)&v47 & 0xFFFFFFFFFFFFFLL) == 0)
      v49 = v47;
    if ((~*(_QWORD *)&v47 & 0x7FF0000000000000) == 0)
      v47 = v49;
    sub_224DC((uint64_t)v23, type metadata accessor for SizeConstants);
    v50 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
    v50(v45, v42);
    v51 = *(int *)(v62 + 36);
    *(double *)&v19[v51] = v47;
    v50((uint64_t)v44, v42);
    sub_224DC(v58, type metadata accessor for SizeConstants);
    v39 = KeyedEncodingContainer.encode<A>(_:forKey:)(*(double *)&v19[v51]) * 200.0;
    v40 = *(int *)(v41 + 28);
  }
  v52 = KeyedEncodingContainer.encode<A>(_:forKey:)(*(double *)&v19[v40]);
  v53 = (uint64_t)v63;
  v54 = v64;
  v55 = v65;
  (*(void (**)(char *, _QWORD, uint64_t))(v64 + 104))(v63, enum case for FloatingPointRoundingRule.toNearestOrAwayFromZero(_:), v65);
  v67 = v39;
  sub_13603C(v53, v52);
  v56 = v67;
  (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v53, v55);
  sub_B414((uint64_t)v19, &qword_262710);
  return *(_QWORD *)&v56;
}

uint64_t sub_8E4FC@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.isEnabled.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_8E528(unsigned __int8 *a1)
{
  return EnvironmentValues.isEnabled.setter(*a1);
}

uint64_t type metadata accessor for BooksBorderedButtonStyle(uint64_t a1)
{
  return sub_1FE90(a1, qword_262520, (uint64_t)&nominal type descriptor for BooksBorderedButtonStyle);
}

unint64_t sub_8E564()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[4];

  result = qword_262368;
  if (!qword_262368)
  {
    v1 = sub_7EF8(&qword_262360);
    v2[0] = sub_7EF8(&qword_262370);
    v2[1] = type metadata accessor for HoverEffect(255);
    v2[2] = sub_8E634();
    v2[3] = sub_6FD0(&qword_262430, (uint64_t (*)(uint64_t))&type metadata accessor for HoverEffect, (uint64_t)&protocol conformance descriptor for HoverEffect);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.hoverEffect<A>(_:isEnabled:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> Group<A>, v1);
    atomic_store(result, (unint64_t *)&qword_262368);
  }
  return result;
}

unint64_t sub_8E634()
{
  unint64_t result;
  uint64_t v1;

  result = qword_262378;
  if (!qword_262378)
  {
    v1 = sub_7EF8(&qword_262370);
    sub_3CC54(&qword_262380, &qword_262388, (void (*)(void))sub_8E6D8);
    sub_7FD8(&qword_262420, &qword_262428, (uint64_t)&protocol conformance descriptor for _OverlayModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_262378);
  }
  return result;
}

unint64_t sub_8E6D8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_262390;
  if (!qword_262390)
  {
    v1 = sub_7EF8(&qword_262398);
    sub_3CC54(&qword_2623A0, &qword_2623A8, (void (*)(void))sub_8E77C);
    sub_7FD8(&qword_262410, &qword_262418, (uint64_t)&protocol conformance descriptor for _BackgroundModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_262390);
  }
  return result;
}

unint64_t sub_8E77C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2623B0;
  if (!qword_2623B0)
  {
    v1 = sub_7EF8(&qword_2623B8);
    sub_8E808();
    sub_3CC54(&qword_2623D0, &qword_2623D8, (void (*)(void))sub_8E88C);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_2623B0);
  }
  return result;
}

unint64_t sub_8E808()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2623C0;
  if (!qword_2623C0)
  {
    v1 = sub_7EF8(&qword_2623C8);
    sub_3CC54(&qword_2623D0, &qword_2623D8, (void (*)(void))sub_8E88C);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_2623C0);
  }
  return result;
}

uint64_t sub_8E88C()
{
  return sub_3CC54(&qword_2623E0, &qword_2623E8, (void (*)(void))sub_8E8B0);
}

unint64_t sub_8E8B0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2623F0;
  if (!qword_2623F0)
  {
    v1 = sub_7EF8(&qword_2623F8);
    sub_8E93C(&qword_262400, &qword_262408, (unint64_t *)&qword_25FD88, &qword_25FD90);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_2623F0);
  }
  return result;
}

uint64_t sub_8E93C(unint64_t *a1, uint64_t *a2, unint64_t *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v8 = sub_7EF8(a2);
    sub_6FD0((unint64_t *)&qword_25FD80, (uint64_t (*)(uint64_t))&type metadata accessor for ButtonStyleConfiguration.Label, (uint64_t)&protocol conformance descriptor for ButtonStyleConfiguration.Label);
    sub_7FD8(a3, a4, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v8);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_8E9E4()
{
  return sub_3CC54(&qword_262488, &qword_262468, (void (*)(void))sub_8EA08);
}

uint64_t sub_8EA08()
{
  return sub_3CC54(&qword_262490, &qword_262460, (void (*)(void))sub_8EA2C);
}

uint64_t sub_8EA2C()
{
  return sub_3CC54(&qword_262498, &qword_262458, (void (*)(void))sub_8EA50);
}

unint64_t sub_8EA50()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2624A0;
  if (!qword_2624A0)
  {
    v1 = sub_7EF8(&qword_262450);
    sub_8E93C(&qword_2624A8, &qword_262448, (unint64_t *)&qword_2600A8, &qword_2600B0);
    sub_7FD8(&qword_2624B0, &qword_2624B8, (uint64_t)&protocol conformance descriptor for _ForegroundStyleModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_2624A0);
  }
  return result;
}

uint64_t sub_8EAF4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &opaque type descriptor for <<opaque return type of BooksBorderedButtonStyle.makeBody(configuration:)>>, 1);
}

uint64_t sub_8EB04(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &opaque type descriptor for <<opaque return type of BooksBorderlessButtonStyle.makeBody(configuration:)>>, 1);
}

uint64_t *initializeBufferWithCopyOfBuffer for BooksBorderedButtonStyle(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  void (*v45)(char *, char *, uint64_t);
  int *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  id v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  void (*v89)(char *, char *, uint64_t);
  uint64_t v90;
  uint64_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  __int128 v98;
  uint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v17 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v17);
  }
  else
  {
    v7 = sub_5440(&qword_25F548);
    if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
    {
      *(_WORD *)a1 = *(_WORD *)a2;
      v8 = (int *)type metadata accessor for SizeConstants.Environment(0);
      v9 = v8[6];
      v10 = (char *)a1 + v9;
      v11 = (char *)a2 + v9;
      v12 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
      *(uint64_t *)((char *)a1 + v8[7]) = *(uint64_t *)((char *)a2 + v8[7]);
      v13 = v8[8];
      v14 = (char *)a1 + v13;
      v15 = (char *)a2 + v13;
      v14[2] = v15[2];
      *(_WORD *)v14 = *(_WORD *)v15;
      v16 = 1;
    }
    else
    {
      v18 = *a2;
      *a1 = *a2;
      swift_retain(v18);
      v16 = 0;
    }
    swift_storeEnumTagMultiPayload(a1, v7, v16);
    v19 = a3[5];
    v20 = (uint64_t *)((char *)a1 + v19);
    v21 = (uint64_t *)((char *)a2 + v19);
    v22 = sub_5440(&qword_25F208);
    if (swift_getEnumCaseMultiPayload(v21, v22) == 1)
    {
      v23 = type metadata accessor for BlendMode(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v20, v21, v23);
      v24 = v20;
      v25 = v22;
      v26 = 1;
    }
    else
    {
      v27 = *v21;
      *v20 = *v21;
      swift_retain(v27);
      v24 = v20;
      v25 = v22;
      v26 = 0;
    }
    swift_storeEnumTagMultiPayload(v24, v25, v26);
    v28 = a3[6];
    v29 = (uint64_t *)((char *)a1 + v28);
    v30 = (uint64_t *)((char *)a2 + v28);
    if (swift_getEnumCaseMultiPayload((char *)a2 + v28, v22) == 1)
    {
      v31 = type metadata accessor for BlendMode(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v31 - 8) + 16))(v29, v30, v31);
      v32 = v29;
      v33 = v22;
      v34 = 1;
    }
    else
    {
      v35 = *v30;
      *v29 = *v30;
      swift_retain(v35);
      v32 = v29;
      v33 = v22;
      v34 = 0;
    }
    swift_storeEnumTagMultiPayload(v32, v33, v34);
    v36 = a3[7];
    v37 = (char *)a1 + v36;
    v38 = (char *)a2 + v36;
    v39 = *(_QWORD *)v38;
    v40 = v38[8];
    sub_F9E4(*(_QWORD *)v38, v40);
    *(_QWORD *)v37 = v39;
    v37[8] = v40;
    v41 = a3[8];
    v42 = (char *)a1 + v41;
    v43 = (char *)a2 + v41;
    v44 = sub_5440(&qword_25FC38);
    v45 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v44 - 8) + 16);
    v45(v42, v43, v44);
    v46 = (int *)type metadata accessor for ButtonViewModel(0);
    v45(&v42[v46[5]], &v43[v46[5]], v44);
    v47 = v46[6];
    v48 = &v42[v47];
    v49 = &v43[v47];
    v50 = sub_5440(&qword_25F1E8);
    if (swift_getEnumCaseMultiPayload(v49, v50) == 1)
    {
      v51 = type metadata accessor for ColorScheme(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v51 - 8) + 16))(v48, v49, v51);
      v52 = 1;
    }
    else
    {
      v53 = *(_QWORD *)v49;
      *(_QWORD *)v48 = *(_QWORD *)v49;
      swift_retain(v53);
      v52 = 0;
    }
    swift_storeEnumTagMultiPayload(v48, v50, v52);
    v42[v46[7]] = v43[v46[7]];
    v42[v46[8]] = v43[v46[8]];
    v42[v46[9]] = v43[v46[9]];
    v54 = v46[10];
    v55 = &v42[v54];
    v56 = &v43[v54];
    v57 = *(_QWORD *)v56;
    if (*(_QWORD *)v56 >= 3uLL)
    {
      v59 = *((_QWORD *)v56 + 1);
      v60 = *((_QWORD *)v56 + 2);
      *(_QWORD *)v55 = v57;
      *((_QWORD *)v55 + 1) = v59;
      v61 = *((_QWORD *)v56 + 3);
      *((_QWORD *)v55 + 2) = v60;
      *((_QWORD *)v55 + 3) = v61;
      swift_retain(v57);
      swift_retain(v59);
      swift_retain(v60);
      swift_retain(v61);
    }
    else
    {
      v58 = *((_OWORD *)v56 + 1);
      *(_OWORD *)v55 = *(_OWORD *)v56;
      *((_OWORD *)v55 + 1) = v58;
    }
    v62 = v46[11];
    v63 = &v42[v62];
    v64 = &v43[v62];
    v65 = type metadata accessor for ButtonViewModel.Content(0);
    switch(swift_getEnumCaseMultiPayload(v64, v65))
    {
      case 0u:
        v66 = type metadata accessor for LocalizerRequest(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v66 - 8) + 16))(v63, v64, v66);
        v67 = v63;
        v68 = v65;
        v69 = 0;
        goto LABEL_26;
      case 1u:
        v70 = *((_QWORD *)v64 + 1);
        *(_QWORD *)v63 = *(_QWORD *)v64;
        *((_QWORD *)v63 + 1) = v70;
        swift_bridgeObjectRetain(v70);
        v67 = v63;
        v68 = v65;
        v69 = 1;
        goto LABEL_26;
      case 2u:
        v71 = *((_QWORD *)v64 + 1);
        *(_QWORD *)v63 = *(_QWORD *)v64;
        *((_QWORD *)v63 + 1) = v71;
        v72 = (void *)*((_QWORD *)v64 + 2);
        *((_QWORD *)v63 + 2) = v72;
        swift_bridgeObjectRetain(v71);
        v73 = v72;
        v74 = *(int *)(sub_5440(&qword_2621A8) + 64);
        v75 = &v63[v74];
        v76 = &v64[v74];
        v77 = type metadata accessor for LocalizerRequest(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v77 - 8) + 16))(v75, v76, v77);
        v67 = v63;
        v68 = v65;
        v69 = 2;
        goto LABEL_26;
      case 3u:
        v78 = *((_QWORD *)v64 + 1);
        *(_QWORD *)v63 = *(_QWORD *)v64;
        *((_QWORD *)v63 + 1) = v78;
        swift_bridgeObjectRetain(v78);
        v79 = *(int *)(sub_5440(&qword_2621B0) + 48);
        v80 = &v63[v79];
        v81 = &v64[v79];
        v82 = type metadata accessor for LocalizerRequest(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v82 - 8) + 16))(v80, v81, v82);
        v67 = v63;
        v68 = v65;
        v69 = 3;
        goto LABEL_26;
      case 4u:
        v83 = type metadata accessor for LocalizerRequest(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v83 - 8) + 16))(v63, v64, v83);
        v84 = *(int *)(sub_5440(&qword_2621B8) + 48);
        v85 = &v63[v84];
        v86 = &v64[v84];
        v87 = *((_QWORD *)v86 + 1);
        *(_QWORD *)v85 = *(_QWORD *)v86;
        *((_QWORD *)v85 + 1) = v87;
        swift_bridgeObjectRetain(v87);
        v67 = v63;
        v68 = v65;
        v69 = 4;
        goto LABEL_26;
      case 5u:
        v88 = type metadata accessor for LocalizerRequest(0);
        v89 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v88 - 8) + 16);
        v89(v63, v64, v88);
        v90 = sub_5440(&qword_2621C0);
        v89(&v63[*(int *)(v90 + 48)], &v64[*(int *)(v90 + 48)], v88);
        v67 = v63;
        v68 = v65;
        v69 = 5;
LABEL_26:
        swift_storeEnumTagMultiPayload(v67, v68, v69);
        break;
      default:
        memcpy(v63, v64, *(_QWORD *)(*(_QWORD *)(v65 - 8) + 64));
        break;
    }
    v42[v46[12]] = v43[v46[12]];
    v91 = v46[13];
    v92 = &v42[v91];
    v93 = &v43[v91];
    v94 = type metadata accessor for ButtonViewModel.ActionKind(0);
    if (swift_getEnumCaseMultiPayload(v93, v94) == 1)
    {
      v95 = type metadata accessor for URL(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v95 - 8) + 16))(v92, v93, v95);
      v96 = 1;
    }
    else
    {
      v96 = *((_QWORD *)v93 + 3);
      if (v96)
      {
        v97 = *((_QWORD *)v93 + 4);
        *((_QWORD *)v92 + 3) = v96;
        *((_QWORD *)v92 + 4) = v97;
        (**(void (***)(char *, char *))(v96 - 8))(v92, v93);
        v96 = 0;
      }
      else
      {
        v98 = *((_OWORD *)v93 + 1);
        *(_OWORD *)v92 = *(_OWORD *)v93;
        *((_OWORD *)v92 + 1) = v98;
        *((_QWORD *)v92 + 4) = *((_QWORD *)v93 + 4);
      }
    }
    swift_storeEnumTagMultiPayload(v92, v94, v96);
    v99 = v46[14];
    v100 = &v42[v99];
    v101 = &v43[v99];
    v102 = type metadata accessor for LocalizerRequest(0);
    v103 = *(_QWORD *)(v102 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v103 + 48))(v101, 1, v102))
    {
      v104 = sub_5440(&qword_25E0C8);
      memcpy(v100, v101, *(_QWORD *)(*(_QWORD *)(v104 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v103 + 16))(v100, v101, v102);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v103 + 56))(v100, 0, 1, v102);
    }
  }
  return a1;
}

uint64_t destroy for BooksBorderedButtonStyle(_QWORD *a1, int *a2)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  void (*v14)(char *, uint64_t);
  int *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t);
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t result;

  v4 = sub_5440(&qword_25F548);
  if (swift_getEnumCaseMultiPayload(a1, v4) == 1)
  {
    v5 = (char *)a1 + *(int *)(type metadata accessor for SizeConstants.Environment(0) + 24);
    v6 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  }
  else
  {
    swift_release(*a1);
  }
  v7 = (_QWORD *)((char *)a1 + a2[5]);
  v8 = sub_5440(&qword_25F208);
  if (swift_getEnumCaseMultiPayload(v7, v8) == 1)
  {
    v9 = type metadata accessor for BlendMode(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v7, v9);
  }
  else
  {
    swift_release(*v7);
  }
  v10 = (_QWORD *)((char *)a1 + a2[6]);
  if (swift_getEnumCaseMultiPayload(v10, v8) == 1)
  {
    v11 = type metadata accessor for BlendMode(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  }
  else
  {
    swift_release(*v10);
  }
  sub_BE0C(*(_QWORD *)((char *)a1 + a2[7]), *((_BYTE *)a1 + a2[7] + 8));
  v12 = (char *)a1 + a2[8];
  v13 = sub_5440(&qword_25FC38);
  v14 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v13 - 8) + 8);
  v14(v12, v13);
  v15 = (int *)type metadata accessor for ButtonViewModel(0);
  v14(&v12[v15[5]], v13);
  v16 = &v12[v15[6]];
  v17 = sub_5440(&qword_25F1E8);
  if (swift_getEnumCaseMultiPayload(v16, v17) == 1)
  {
    v18 = type metadata accessor for ColorScheme(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(v16, v18);
  }
  else
  {
    swift_release(*(_QWORD *)v16);
  }
  v19 = &v12[v15[10]];
  if (*(_QWORD *)v19 >= 3uLL)
  {
    swift_release(*(_QWORD *)v19);
    swift_release(*((_QWORD *)v19 + 1));
    swift_release(*((_QWORD *)v19 + 2));
    swift_release(*((_QWORD *)v19 + 3));
  }
  v20 = &v12[v15[11]];
  v21 = type metadata accessor for ButtonViewModel.Content(0);
  switch(swift_getEnumCaseMultiPayload(v20, v21))
  {
    case 0u:
      goto LABEL_20;
    case 1u:
      swift_bridgeObjectRelease(*((_QWORD *)v20 + 1));
      break;
    case 2u:
      swift_bridgeObjectRelease(*((_QWORD *)v20 + 1));

      v22 = *(int *)(sub_5440(&qword_2621A8) + 64);
      goto LABEL_19;
    case 3u:
      swift_bridgeObjectRelease(*((_QWORD *)v20 + 1));
      v22 = *(int *)(sub_5440(&qword_2621B0) + 48);
LABEL_19:
      v20 += v22;
LABEL_20:
      v23 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v23 - 8) + 8))(v20, v23);
      break;
    case 4u:
      v24 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v24 - 8) + 8))(v20, v24);
      v25 = sub_5440(&qword_2621B8);
      swift_bridgeObjectRelease(*(_QWORD *)&v20[*(int *)(v25 + 48) + 8]);
      break;
    case 5u:
      v26 = type metadata accessor for LocalizerRequest(0);
      v27 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v26 - 8) + 8);
      v27(v20, v26);
      v28 = sub_5440(&qword_2621C0);
      v27(&v20[*(int *)(v28 + 48)], v26);
      break;
    default:
      break;
  }
  v29 = &v12[v15[13]];
  v30 = type metadata accessor for ButtonViewModel.ActionKind(0);
  if (swift_getEnumCaseMultiPayload(v29, v30) == 1)
  {
    v31 = type metadata accessor for URL(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v31 - 8) + 8))(v29, v31);
  }
  else if (*((_QWORD *)v29 + 3))
  {
    _s7BooksUI13AnyPagedFrameVwxx_0(v29);
  }
  v32 = &v12[v15[14]];
  v33 = type metadata accessor for LocalizerRequest(0);
  v34 = *(_QWORD *)(v33 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v34 + 48))(v32, 1, v33);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(char *, uint64_t))(v34 + 8))(v32, v33);
  return result;
}

_WORD *initializeWithCopy for BooksBorderedButtonStyle(_WORD *a1, _WORD *a2, int *a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  void (*v43)(char *, char *, uint64_t);
  int *v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  id v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  void (*v87)(char *, char *, uint64_t);
  uint64_t v88;
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  __int128 v96;
  uint64_t v97;
  char *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;

  v6 = sub_5440(&qword_25F548);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    *a1 = *a2;
    v7 = (int *)type metadata accessor for SizeConstants.Environment(0);
    v8 = v7[6];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    *(_QWORD *)((char *)a1 + v7[7]) = *(_QWORD *)((char *)a2 + v7[7]);
    v12 = v7[8];
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    v13[2] = v14[2];
    *(_WORD *)v13 = *(_WORD *)v14;
    v15 = 1;
  }
  else
  {
    v16 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    swift_retain(v16);
    v15 = 0;
  }
  swift_storeEnumTagMultiPayload(a1, v6, v15);
  v17 = a3[5];
  v18 = (uint64_t *)((char *)a1 + v17);
  v19 = (uint64_t *)((char *)a2 + v17);
  v20 = sub_5440(&qword_25F208);
  if (swift_getEnumCaseMultiPayload(v19, v20) == 1)
  {
    v21 = type metadata accessor for BlendMode(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v18, v19, v21);
    v22 = v18;
    v23 = v20;
    v24 = 1;
  }
  else
  {
    v25 = *v19;
    *v18 = *v19;
    swift_retain(v25);
    v22 = v18;
    v23 = v20;
    v24 = 0;
  }
  swift_storeEnumTagMultiPayload(v22, v23, v24);
  v26 = a3[6];
  v27 = (uint64_t *)((char *)a1 + v26);
  v28 = (uint64_t *)((char *)a2 + v26);
  if (swift_getEnumCaseMultiPayload((char *)a2 + v26, v20) == 1)
  {
    v29 = type metadata accessor for BlendMode(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v29 - 8) + 16))(v27, v28, v29);
    v30 = v27;
    v31 = v20;
    v32 = 1;
  }
  else
  {
    v33 = *v28;
    *v27 = *v28;
    swift_retain(v33);
    v30 = v27;
    v31 = v20;
    v32 = 0;
  }
  swift_storeEnumTagMultiPayload(v30, v31, v32);
  v34 = a3[7];
  v35 = (char *)a1 + v34;
  v36 = (char *)a2 + v34;
  v37 = *(_QWORD *)v36;
  v38 = v36[8];
  sub_F9E4(*(_QWORD *)v36, v38);
  *(_QWORD *)v35 = v37;
  v35[8] = v38;
  v39 = a3[8];
  v40 = (char *)a1 + v39;
  v41 = (char *)a2 + v39;
  v42 = sub_5440(&qword_25FC38);
  v43 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v42 - 8) + 16);
  v43(v40, v41, v42);
  v44 = (int *)type metadata accessor for ButtonViewModel(0);
  v43(&v40[v44[5]], &v41[v44[5]], v42);
  v45 = v44[6];
  v46 = &v40[v45];
  v47 = &v41[v45];
  v48 = sub_5440(&qword_25F1E8);
  if (swift_getEnumCaseMultiPayload(v47, v48) == 1)
  {
    v49 = type metadata accessor for ColorScheme(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v49 - 8) + 16))(v46, v47, v49);
    v50 = 1;
  }
  else
  {
    v51 = *(_QWORD *)v47;
    *(_QWORD *)v46 = *(_QWORD *)v47;
    swift_retain(v51);
    v50 = 0;
  }
  swift_storeEnumTagMultiPayload(v46, v48, v50);
  v40[v44[7]] = v41[v44[7]];
  v40[v44[8]] = v41[v44[8]];
  v40[v44[9]] = v41[v44[9]];
  v52 = v44[10];
  v53 = &v40[v52];
  v54 = &v41[v52];
  v55 = *(_QWORD *)v54;
  if (*(_QWORD *)v54 >= 3uLL)
  {
    v57 = *((_QWORD *)v54 + 1);
    v58 = *((_QWORD *)v54 + 2);
    *(_QWORD *)v53 = v55;
    *((_QWORD *)v53 + 1) = v57;
    v59 = *((_QWORD *)v54 + 3);
    *((_QWORD *)v53 + 2) = v58;
    *((_QWORD *)v53 + 3) = v59;
    swift_retain(v55);
    swift_retain(v57);
    swift_retain(v58);
    swift_retain(v59);
  }
  else
  {
    v56 = *((_OWORD *)v54 + 1);
    *(_OWORD *)v53 = *(_OWORD *)v54;
    *((_OWORD *)v53 + 1) = v56;
  }
  v60 = v44[11];
  v61 = &v40[v60];
  v62 = &v41[v60];
  v63 = type metadata accessor for ButtonViewModel.Content(0);
  switch(swift_getEnumCaseMultiPayload(v62, v63))
  {
    case 0u:
      v64 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v64 - 8) + 16))(v61, v62, v64);
      v65 = v61;
      v66 = v63;
      v67 = 0;
      goto LABEL_24;
    case 1u:
      v68 = *((_QWORD *)v62 + 1);
      *(_QWORD *)v61 = *(_QWORD *)v62;
      *((_QWORD *)v61 + 1) = v68;
      swift_bridgeObjectRetain(v68);
      v65 = v61;
      v66 = v63;
      v67 = 1;
      goto LABEL_24;
    case 2u:
      v69 = *((_QWORD *)v62 + 1);
      *(_QWORD *)v61 = *(_QWORD *)v62;
      *((_QWORD *)v61 + 1) = v69;
      v70 = (void *)*((_QWORD *)v62 + 2);
      *((_QWORD *)v61 + 2) = v70;
      swift_bridgeObjectRetain(v69);
      v71 = v70;
      v72 = *(int *)(sub_5440(&qword_2621A8) + 64);
      v73 = &v61[v72];
      v74 = &v62[v72];
      v75 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v75 - 8) + 16))(v73, v74, v75);
      v65 = v61;
      v66 = v63;
      v67 = 2;
      goto LABEL_24;
    case 3u:
      v76 = *((_QWORD *)v62 + 1);
      *(_QWORD *)v61 = *(_QWORD *)v62;
      *((_QWORD *)v61 + 1) = v76;
      swift_bridgeObjectRetain(v76);
      v77 = *(int *)(sub_5440(&qword_2621B0) + 48);
      v78 = &v61[v77];
      v79 = &v62[v77];
      v80 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v80 - 8) + 16))(v78, v79, v80);
      v65 = v61;
      v66 = v63;
      v67 = 3;
      goto LABEL_24;
    case 4u:
      v81 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v81 - 8) + 16))(v61, v62, v81);
      v82 = *(int *)(sub_5440(&qword_2621B8) + 48);
      v83 = &v61[v82];
      v84 = &v62[v82];
      v85 = *((_QWORD *)v84 + 1);
      *(_QWORD *)v83 = *(_QWORD *)v84;
      *((_QWORD *)v83 + 1) = v85;
      swift_bridgeObjectRetain(v85);
      v65 = v61;
      v66 = v63;
      v67 = 4;
      goto LABEL_24;
    case 5u:
      v86 = type metadata accessor for LocalizerRequest(0);
      v87 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v86 - 8) + 16);
      v87(v61, v62, v86);
      v88 = sub_5440(&qword_2621C0);
      v87(&v61[*(int *)(v88 + 48)], &v62[*(int *)(v88 + 48)], v86);
      v65 = v61;
      v66 = v63;
      v67 = 5;
LABEL_24:
      swift_storeEnumTagMultiPayload(v65, v66, v67);
      break;
    default:
      memcpy(v61, v62, *(_QWORD *)(*(_QWORD *)(v63 - 8) + 64));
      break;
  }
  v40[v44[12]] = v41[v44[12]];
  v89 = v44[13];
  v90 = &v40[v89];
  v91 = &v41[v89];
  v92 = type metadata accessor for ButtonViewModel.ActionKind(0);
  if (swift_getEnumCaseMultiPayload(v91, v92) == 1)
  {
    v93 = type metadata accessor for URL(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v93 - 8) + 16))(v90, v91, v93);
    v94 = 1;
  }
  else
  {
    v94 = *((_QWORD *)v91 + 3);
    if (v94)
    {
      v95 = *((_QWORD *)v91 + 4);
      *((_QWORD *)v90 + 3) = v94;
      *((_QWORD *)v90 + 4) = v95;
      (**(void (***)(char *, char *))(v94 - 8))(v90, v91);
      v94 = 0;
    }
    else
    {
      v96 = *((_OWORD *)v91 + 1);
      *(_OWORD *)v90 = *(_OWORD *)v91;
      *((_OWORD *)v90 + 1) = v96;
      *((_QWORD *)v90 + 4) = *((_QWORD *)v91 + 4);
    }
  }
  swift_storeEnumTagMultiPayload(v90, v92, v94);
  v97 = v44[14];
  v98 = &v40[v97];
  v99 = &v41[v97];
  v100 = type metadata accessor for LocalizerRequest(0);
  v101 = *(_QWORD *)(v100 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v101 + 48))(v99, 1, v100))
  {
    v102 = sub_5440(&qword_25E0C8);
    memcpy(v98, v99, *(_QWORD *)(*(_QWORD *)(v102 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v101 + 16))(v98, v99, v100);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v101 + 56))(v98, 0, 1, v100);
  }
  return a1;
}

_BYTE *assignWithCopy for BooksBorderedButtonStyle(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  _BYTE *v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE *v37;
  _BYTE *v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  _BYTE *v44;
  _BYTE *v45;
  uint64_t v46;
  void (*v47)(_BYTE *, _BYTE *, uint64_t);
  int *v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _BYTE *v57;
  _BYTE *v58;
  unint64_t v59;
  unint64_t v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  id v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  void (*v99)(_QWORD *, _QWORD *, uint64_t);
  uint64_t v100;
  uint64_t v101;
  _BYTE *v102;
  _BYTE *v103;
  uint64_t v104;
  uint64_t v105;
  _BYTE *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  __int128 v110;
  __int128 v111;
  uint64_t v112;
  _BYTE *v113;
  _BYTE *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t (*v117)(_BYTE *, uint64_t, uint64_t);
  int v118;
  int v119;
  uint64_t v120;

  if (a1 != a2)
  {
    sub_B414((uint64_t)a1, &qword_25F548);
    v6 = sub_5440(&qword_25F548);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      v7 = (int *)type metadata accessor for SizeConstants.Environment(0);
      v8 = v7[6];
      v9 = &a1[v8];
      v10 = &a2[v8];
      v11 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
      *(_QWORD *)&a1[v7[7]] = *(_QWORD *)&a2[v7[7]];
      v12 = v7[8];
      v13 = &a1[v12];
      v14 = &a2[v12];
      v15 = v14[2];
      *(_WORD *)v13 = *(_WORD *)v14;
      v13[2] = v15;
      v16 = 1;
    }
    else
    {
      v17 = *(_QWORD *)a2;
      *(_QWORD *)a1 = *(_QWORD *)a2;
      swift_retain(v17);
      v16 = 0;
    }
    swift_storeEnumTagMultiPayload(a1, v6, v16);
    v18 = a3[5];
    v19 = (uint64_t *)&a1[v18];
    v20 = (uint64_t *)&a2[v18];
    sub_B414((uint64_t)&a1[v18], &qword_25F208);
    v21 = sub_5440(&qword_25F208);
    if (swift_getEnumCaseMultiPayload(v20, v21) == 1)
    {
      v22 = type metadata accessor for BlendMode(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v19, v20, v22);
      v23 = v19;
      v24 = v21;
      v25 = 1;
    }
    else
    {
      v26 = *v20;
      *v19 = *v20;
      swift_retain(v26);
      v23 = v19;
      v24 = v21;
      v25 = 0;
    }
    swift_storeEnumTagMultiPayload(v23, v24, v25);
    v27 = a3[6];
    v28 = (uint64_t *)&a1[v27];
    v29 = (uint64_t *)&a2[v27];
    sub_B414((uint64_t)&a1[v27], &qword_25F208);
    v30 = sub_5440(&qword_25F208);
    if (swift_getEnumCaseMultiPayload(v29, v30) == 1)
    {
      v31 = type metadata accessor for BlendMode(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v31 - 8) + 16))(v28, v29, v31);
      v32 = v28;
      v33 = v30;
      v34 = 1;
    }
    else
    {
      v35 = *v29;
      *v28 = *v29;
      swift_retain(v35);
      v32 = v28;
      v33 = v30;
      v34 = 0;
    }
    swift_storeEnumTagMultiPayload(v32, v33, v34);
  }
  v36 = a3[7];
  v37 = &a1[v36];
  v38 = &a2[v36];
  v39 = *(_QWORD *)v38;
  v40 = v38[8];
  sub_F9E4(*(_QWORD *)v38, v40);
  v41 = *(_QWORD *)v37;
  v42 = v37[8];
  *(_QWORD *)v37 = v39;
  v37[8] = v40;
  sub_BE0C(v41, v42);
  v43 = a3[8];
  v44 = &a1[v43];
  v45 = &a2[v43];
  v46 = sub_5440(&qword_25FC38);
  v47 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v46 - 8) + 24);
  v47(v44, v45, v46);
  v48 = (int *)type metadata accessor for ButtonViewModel(0);
  v47(&v44[v48[5]], &v45[v48[5]], v46);
  if (a1 != a2)
  {
    v49 = v48[6];
    v50 = (uint64_t *)&v44[v49];
    v51 = (uint64_t *)&v45[v49];
    sub_B414((uint64_t)&v44[v49], &qword_25F1E8);
    v52 = sub_5440(&qword_25F1E8);
    if (swift_getEnumCaseMultiPayload(v51, v52) == 1)
    {
      v53 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v53 - 8) + 16))(v50, v51, v53);
      v54 = 1;
    }
    else
    {
      v55 = *v51;
      *v50 = *v51;
      swift_retain(v55);
      v54 = 0;
    }
    swift_storeEnumTagMultiPayload(v50, v52, v54);
  }
  v44[v48[7]] = v45[v48[7]];
  v44[v48[8]] = v45[v48[8]];
  v44[v48[9]] = v45[v48[9]];
  v56 = v48[10];
  v57 = &v44[v56];
  v58 = &v45[v56];
  v59 = *(_QWORD *)&v44[v56];
  v60 = *(_QWORD *)&v45[v56];
  if (v59 >= 3)
  {
    if (v60 < 3)
    {
      sub_B414((uint64_t)&v44[v56], &qword_2624C0);
      v62 = *((_OWORD *)v58 + 1);
      *(_OWORD *)v57 = *(_OWORD *)v58;
      *((_OWORD *)v57 + 1) = v62;
      if (a1 == a2)
        goto LABEL_28;
      goto LABEL_25;
    }
    *(_QWORD *)v57 = v60;
    swift_retain(v60);
    swift_release(v59);
    v74 = *((_QWORD *)v58 + 1);
    v75 = *((_QWORD *)v57 + 1);
    *((_QWORD *)v57 + 1) = v74;
    swift_retain(v74);
    swift_release(v75);
    v76 = *((_QWORD *)v58 + 2);
    v77 = *((_QWORD *)v57 + 2);
    *((_QWORD *)v57 + 2) = v76;
    swift_retain(v76);
    swift_release(v77);
    v78 = *((_QWORD *)v58 + 3);
    v79 = *((_QWORD *)v57 + 3);
    *((_QWORD *)v57 + 3) = v78;
    swift_retain(v78);
    swift_release(v79);
    if (a1 != a2)
      goto LABEL_25;
LABEL_28:
    v44[v48[12]] = v45[v48[12]];
    goto LABEL_42;
  }
  if (v60 >= 3)
  {
    *(_QWORD *)v57 = v60;
    v63 = *((_QWORD *)v58 + 1);
    *((_QWORD *)v57 + 1) = v63;
    v64 = *((_QWORD *)v58 + 2);
    *((_QWORD *)v57 + 2) = v64;
    v65 = *((_QWORD *)v58 + 3);
    *((_QWORD *)v57 + 3) = v65;
    swift_retain(v60);
    swift_retain(v63);
    swift_retain(v64);
    swift_retain(v65);
    if (a1 != a2)
      goto LABEL_25;
    goto LABEL_28;
  }
  v61 = *((_OWORD *)v58 + 1);
  *(_OWORD *)v57 = *(_OWORD *)v58;
  *((_OWORD *)v57 + 1) = v61;
  if (a1 == a2)
    goto LABEL_28;
LABEL_25:
  v66 = v48[11];
  v67 = &v44[v66];
  v68 = &v45[v66];
  sub_224DC((uint64_t)&v44[v66], type metadata accessor for ButtonViewModel.Content);
  v69 = type metadata accessor for ButtonViewModel.Content(0);
  switch(swift_getEnumCaseMultiPayload(v68, v69))
  {
    case 0u:
      v70 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v70 - 8) + 16))(v67, v68, v70);
      v71 = v67;
      v72 = v69;
      v73 = 0;
      goto LABEL_34;
    case 1u:
      *v67 = *v68;
      v80 = v68[1];
      v67[1] = v80;
      swift_bridgeObjectRetain(v80);
      v71 = v67;
      v72 = v69;
      v73 = 1;
      goto LABEL_34;
    case 2u:
      *v67 = *v68;
      v81 = v68[1];
      v67[1] = v81;
      v82 = (void *)v68[2];
      v67[2] = v82;
      swift_bridgeObjectRetain(v81);
      v83 = v82;
      v84 = *(int *)(sub_5440(&qword_2621A8) + 64);
      v85 = (char *)v67 + v84;
      v86 = (char *)v68 + v84;
      v87 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v87 - 8) + 16))(v85, v86, v87);
      v71 = v67;
      v72 = v69;
      v73 = 2;
      goto LABEL_34;
    case 3u:
      *v67 = *v68;
      v88 = v68[1];
      v67[1] = v88;
      swift_bridgeObjectRetain(v88);
      v89 = *(int *)(sub_5440(&qword_2621B0) + 48);
      v90 = (char *)v67 + v89;
      v91 = (char *)v68 + v89;
      v92 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v92 - 8) + 16))(v90, v91, v92);
      v71 = v67;
      v72 = v69;
      v73 = 3;
      goto LABEL_34;
    case 4u:
      v93 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v93 - 8) + 16))(v67, v68, v93);
      v94 = *(int *)(sub_5440(&qword_2621B8) + 48);
      v95 = (_QWORD *)((char *)v67 + v94);
      v96 = (_QWORD *)((char *)v68 + v94);
      *v95 = *v96;
      v97 = v96[1];
      v95[1] = v97;
      swift_bridgeObjectRetain(v97);
      v71 = v67;
      v72 = v69;
      v73 = 4;
      goto LABEL_34;
    case 5u:
      v98 = type metadata accessor for LocalizerRequest(0);
      v99 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v98 - 8) + 16);
      v99(v67, v68, v98);
      v100 = sub_5440(&qword_2621C0);
      v99((_QWORD *)((char *)v67 + *(int *)(v100 + 48)), (_QWORD *)((char *)v68 + *(int *)(v100 + 48)), v98);
      v71 = v67;
      v72 = v69;
      v73 = 5;
LABEL_34:
      swift_storeEnumTagMultiPayload(v71, v72, v73);
      break;
    default:
      memcpy(v67, v68, *(_QWORD *)(*(_QWORD *)(v69 - 8) + 64));
      break;
  }
  v44[v48[12]] = v45[v48[12]];
  v101 = v48[13];
  v102 = &v44[v101];
  v103 = &v45[v101];
  sub_224DC((uint64_t)&v44[v101], type metadata accessor for ButtonViewModel.ActionKind);
  v104 = type metadata accessor for ButtonViewModel.ActionKind(0);
  if (swift_getEnumCaseMultiPayload(v103, v104) == 1)
  {
    v105 = type metadata accessor for URL(0);
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v105 - 8) + 16))(v102, v103, v105);
    v106 = v102;
    v107 = v104;
    v108 = 1;
  }
  else
  {
    v109 = *((_QWORD *)v103 + 3);
    if (v109)
    {
      *((_QWORD *)v102 + 3) = v109;
      *((_QWORD *)v102 + 4) = *((_QWORD *)v103 + 4);
      (**(void (***)(_BYTE *, _BYTE *))(v109 - 8))(v102, v103);
    }
    else
    {
      v110 = *(_OWORD *)v103;
      v111 = *((_OWORD *)v103 + 1);
      *((_QWORD *)v102 + 4) = *((_QWORD *)v103 + 4);
      *(_OWORD *)v102 = v110;
      *((_OWORD *)v102 + 1) = v111;
    }
    v106 = v102;
    v107 = v104;
    v108 = 0;
  }
  swift_storeEnumTagMultiPayload(v106, v107, v108);
LABEL_42:
  v112 = v48[14];
  v113 = &v44[v112];
  v114 = &v45[v112];
  v115 = type metadata accessor for LocalizerRequest(0);
  v116 = *(_QWORD *)(v115 - 8);
  v117 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v116 + 48);
  v118 = v117(v113, 1, v115);
  v119 = v117(v114, 1, v115);
  if (!v118)
  {
    if (!v119)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v116 + 24))(v113, v114, v115);
      return a1;
    }
    (*(void (**)(_BYTE *, uint64_t))(v116 + 8))(v113, v115);
    goto LABEL_47;
  }
  if (v119)
  {
LABEL_47:
    v120 = sub_5440(&qword_25E0C8);
    memcpy(v113, v114, *(_QWORD *)(*(_QWORD *)(v120 - 8) + 64));
    return a1;
  }
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v116 + 16))(v113, v114, v115);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v116 + 56))(v113, 0, 1, v115);
  return a1;
}

_WORD *initializeWithTake for BooksBorderedButtonStyle(_WORD *a1, _WORD *a2, int *a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  void (*v31)(char *, char *, uint64_t);
  int *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  __int128 v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void (*v61)(char *, char *, uint64_t);
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;

  v6 = sub_5440(&qword_25F548);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    *a1 = *a2;
    v7 = (int *)type metadata accessor for SizeConstants.Environment(0);
    v8 = v7[6];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
    *(_QWORD *)((char *)a1 + v7[7]) = *(_QWORD *)((char *)a2 + v7[7]);
    v12 = v7[8];
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    v13[2] = v14[2];
    *(_WORD *)v13 = *(_WORD *)v14;
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v15 = a3[5];
  v16 = (char *)a1 + v15;
  v17 = (char *)a2 + v15;
  v18 = sub_5440(&qword_25F208);
  if (swift_getEnumCaseMultiPayload(v17, v18) == 1)
  {
    v19 = type metadata accessor for BlendMode(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v16, v17, v19);
    swift_storeEnumTagMultiPayload(v16, v18, 1);
  }
  else
  {
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  v20 = a3[6];
  v21 = (char *)a1 + v20;
  v22 = (char *)a2 + v20;
  if (swift_getEnumCaseMultiPayload((char *)a2 + v20, v18) == 1)
  {
    v23 = type metadata accessor for BlendMode(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 32))(v21, v22, v23);
    swift_storeEnumTagMultiPayload(v21, v18, 1);
  }
  else
  {
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  v24 = a3[7];
  v25 = a3[8];
  v26 = (char *)a1 + v24;
  v27 = (char *)a2 + v24;
  *(_QWORD *)v26 = *(_QWORD *)v27;
  v26[8] = v27[8];
  v28 = (char *)a1 + v25;
  v29 = (char *)a2 + v25;
  v30 = sub_5440(&qword_25FC38);
  v31 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v30 - 8) + 32);
  v31(v28, v29, v30);
  v32 = (int *)type metadata accessor for ButtonViewModel(0);
  v31(&v28[v32[5]], &v29[v32[5]], v30);
  v33 = v32[6];
  v34 = &v28[v33];
  v35 = &v29[v33];
  v36 = sub_5440(&qword_25F1E8);
  if (swift_getEnumCaseMultiPayload(v35, v36) == 1)
  {
    v37 = type metadata accessor for ColorScheme(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v37 - 8) + 32))(v34, v35, v37);
    swift_storeEnumTagMultiPayload(v34, v36, 1);
  }
  else
  {
    memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
  }
  v28[v32[7]] = v29[v32[7]];
  v28[v32[8]] = v29[v32[8]];
  v28[v32[9]] = v29[v32[9]];
  v38 = v32[10];
  v39 = &v28[v38];
  v40 = &v29[v38];
  v41 = *((_OWORD *)v40 + 1);
  *(_OWORD *)v39 = *(_OWORD *)v40;
  *((_OWORD *)v39 + 1) = v41;
  v42 = v32[11];
  v43 = &v28[v42];
  v44 = &v29[v42];
  v45 = type metadata accessor for ButtonViewModel.Content(0);
  switch(swift_getEnumCaseMultiPayload(v44, v45))
  {
    case 0u:
      v46 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v46 - 8) + 32))(v43, v44, v46);
      v47 = v43;
      v48 = v45;
      v49 = 0;
      goto LABEL_20;
    case 2u:
      *(_OWORD *)v43 = *(_OWORD *)v44;
      *((_QWORD *)v43 + 2) = *((_QWORD *)v44 + 2);
      v50 = *(int *)(sub_5440(&qword_2621A8) + 64);
      v51 = &v43[v50];
      v52 = &v44[v50];
      v53 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v53 - 8) + 32))(v51, v52, v53);
      v47 = v43;
      v48 = v45;
      v49 = 2;
      goto LABEL_20;
    case 3u:
      *(_OWORD *)v43 = *(_OWORD *)v44;
      v54 = *(int *)(sub_5440(&qword_2621B0) + 48);
      v55 = &v43[v54];
      v56 = &v44[v54];
      v57 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v57 - 8) + 32))(v55, v56, v57);
      v47 = v43;
      v48 = v45;
      v49 = 3;
      goto LABEL_20;
    case 4u:
      v58 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v58 - 8) + 32))(v43, v44, v58);
      v59 = sub_5440(&qword_2621B8);
      *(_OWORD *)&v43[*(int *)(v59 + 48)] = *(_OWORD *)&v44[*(int *)(v59 + 48)];
      v47 = v43;
      v48 = v45;
      v49 = 4;
      goto LABEL_20;
    case 5u:
      v60 = type metadata accessor for LocalizerRequest(0);
      v61 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v60 - 8) + 32);
      v61(v43, v44, v60);
      v62 = sub_5440(&qword_2621C0);
      v61(&v43[*(int *)(v62 + 48)], &v44[*(int *)(v62 + 48)], v60);
      v47 = v43;
      v48 = v45;
      v49 = 5;
LABEL_20:
      swift_storeEnumTagMultiPayload(v47, v48, v49);
      break;
    default:
      memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
      break;
  }
  v28[v32[12]] = v29[v32[12]];
  v63 = v32[13];
  v64 = &v28[v63];
  v65 = &v29[v63];
  v66 = type metadata accessor for ButtonViewModel.ActionKind(0);
  if (swift_getEnumCaseMultiPayload(v65, v66) == 1)
  {
    v67 = type metadata accessor for URL(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v67 - 8) + 32))(v64, v65, v67);
    swift_storeEnumTagMultiPayload(v64, v66, 1);
  }
  else
  {
    memcpy(v64, v65, *(_QWORD *)(*(_QWORD *)(v66 - 8) + 64));
  }
  v68 = v32[14];
  v69 = &v28[v68];
  v70 = &v29[v68];
  v71 = type metadata accessor for LocalizerRequest(0);
  v72 = *(_QWORD *)(v71 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v72 + 48))(v70, 1, v71))
  {
    v73 = sub_5440(&qword_25E0C8);
    memcpy(v69, v70, *(_QWORD *)(*(_QWORD *)(v73 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v72 + 32))(v69, v70, v71);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v72 + 56))(v69, 0, 1, v71);
  }
  return a1;
}

_WORD *assignWithTake for BooksBorderedButtonStyle(_WORD *a1, _WORD *a2, int *a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  void (*v35)(char *, char *, uint64_t);
  int *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  unint64_t v45;
  __int128 v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void (*v69)(char *, char *, uint64_t);
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t (*v81)(char *, uint64_t, uint64_t);
  int v82;
  int v83;
  uint64_t v84;

  if (a1 != a2)
  {
    sub_B414((uint64_t)a1, &qword_25F548);
    v6 = sub_5440(&qword_25F548);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      *a1 = *a2;
      v7 = (int *)type metadata accessor for SizeConstants.Environment(0);
      v8 = v7[6];
      v9 = (char *)a1 + v8;
      v10 = (char *)a2 + v8;
      v11 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
      *(_QWORD *)((char *)a1 + v7[7]) = *(_QWORD *)((char *)a2 + v7[7]);
      v12 = v7[8];
      v13 = (char *)a1 + v12;
      v14 = (char *)a2 + v12;
      v13[2] = v14[2];
      *(_WORD *)v13 = *(_WORD *)v14;
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
    v15 = a3[5];
    v16 = (char *)a1 + v15;
    v17 = (char *)a2 + v15;
    sub_B414((uint64_t)a1 + v15, &qword_25F208);
    v18 = sub_5440(&qword_25F208);
    if (swift_getEnumCaseMultiPayload(v17, v18) == 1)
    {
      v19 = type metadata accessor for BlendMode(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v16, v17, v19);
      swift_storeEnumTagMultiPayload(v16, v18, 1);
    }
    else
    {
      memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    v20 = a3[6];
    v21 = (char *)a1 + v20;
    v22 = (char *)a2 + v20;
    sub_B414((uint64_t)a1 + v20, &qword_25F208);
    v23 = sub_5440(&qword_25F208);
    if (swift_getEnumCaseMultiPayload(v22, v23) == 1)
    {
      v24 = type metadata accessor for BlendMode(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 32))(v21, v22, v24);
      swift_storeEnumTagMultiPayload(v21, v23, 1);
    }
    else
    {
      memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    }
  }
  v25 = a3[7];
  v26 = (char *)a1 + v25;
  v27 = (char *)a2 + v25;
  v28 = *(_QWORD *)v27;
  LOBYTE(v27) = v27[8];
  v29 = *(_QWORD *)v26;
  v30 = v26[8];
  *(_QWORD *)v26 = v28;
  v26[8] = (char)v27;
  sub_BE0C(v29, v30);
  v31 = a3[8];
  v32 = (char *)a1 + v31;
  v33 = (char *)a2 + v31;
  v34 = sub_5440(&qword_25FC38);
  v35 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v34 - 8) + 40);
  v35(v32, v33, v34);
  v36 = (int *)type metadata accessor for ButtonViewModel(0);
  v35(&v32[v36[5]], &v33[v36[5]], v34);
  if (a1 != a2)
  {
    v37 = v36[6];
    v38 = &v32[v37];
    v39 = &v33[v37];
    sub_B414((uint64_t)&v32[v37], &qword_25F1E8);
    v40 = sub_5440(&qword_25F1E8);
    if (swift_getEnumCaseMultiPayload(v39, v40) == 1)
    {
      v41 = type metadata accessor for ColorScheme(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v41 - 8) + 32))(v38, v39, v41);
      swift_storeEnumTagMultiPayload(v38, v40, 1);
    }
    else
    {
      memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
    }
  }
  v32[v36[7]] = v33[v36[7]];
  v32[v36[8]] = v33[v36[8]];
  v32[v36[9]] = v33[v36[9]];
  v42 = v36[10];
  v43 = &v32[v42];
  v44 = &v33[v42];
  v45 = *(_QWORD *)&v32[v42];
  if (v45 >= 3)
  {
    if (*(_QWORD *)v44 >= 3uLL)
    {
      *(_QWORD *)v43 = *(_QWORD *)v44;
      swift_release(v45);
      v55 = *((_QWORD *)v43 + 1);
      *((_QWORD *)v43 + 1) = *((_QWORD *)v44 + 1);
      swift_release(v55);
      v56 = *((_QWORD *)v43 + 2);
      *((_QWORD *)v43 + 2) = *((_QWORD *)v44 + 2);
      swift_release(v56);
      v57 = *((_QWORD *)v43 + 3);
      *((_QWORD *)v43 + 3) = *((_QWORD *)v44 + 3);
      swift_release(v57);
      if (a1 != a2)
        goto LABEL_19;
LABEL_22:
      v32[v36[12]] = v33[v36[12]];
      goto LABEL_32;
    }
    sub_B414((uint64_t)v43, &qword_2624C0);
  }
  v46 = *((_OWORD *)v44 + 1);
  *(_OWORD *)v43 = *(_OWORD *)v44;
  *((_OWORD *)v43 + 1) = v46;
  if (a1 == a2)
    goto LABEL_22;
LABEL_19:
  v47 = v36[11];
  v48 = &v32[v47];
  v49 = &v33[v47];
  sub_224DC((uint64_t)&v32[v47], type metadata accessor for ButtonViewModel.Content);
  v50 = type metadata accessor for ButtonViewModel.Content(0);
  switch(swift_getEnumCaseMultiPayload(v49, v50))
  {
    case 0u:
      v51 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v51 - 8) + 32))(v48, v49, v51);
      v52 = v48;
      v53 = v50;
      v54 = 0;
      goto LABEL_28;
    case 2u:
      *(_OWORD *)v48 = *(_OWORD *)v49;
      *((_QWORD *)v48 + 2) = *((_QWORD *)v49 + 2);
      v58 = *(int *)(sub_5440(&qword_2621A8) + 64);
      v59 = &v48[v58];
      v60 = &v49[v58];
      v61 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v61 - 8) + 32))(v59, v60, v61);
      v52 = v48;
      v53 = v50;
      v54 = 2;
      goto LABEL_28;
    case 3u:
      *(_OWORD *)v48 = *(_OWORD *)v49;
      v62 = *(int *)(sub_5440(&qword_2621B0) + 48);
      v63 = &v48[v62];
      v64 = &v49[v62];
      v65 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v65 - 8) + 32))(v63, v64, v65);
      v52 = v48;
      v53 = v50;
      v54 = 3;
      goto LABEL_28;
    case 4u:
      v66 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v66 - 8) + 32))(v48, v49, v66);
      v67 = sub_5440(&qword_2621B8);
      *(_OWORD *)&v48[*(int *)(v67 + 48)] = *(_OWORD *)&v49[*(int *)(v67 + 48)];
      v52 = v48;
      v53 = v50;
      v54 = 4;
      goto LABEL_28;
    case 5u:
      v68 = type metadata accessor for LocalizerRequest(0);
      v69 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v68 - 8) + 32);
      v69(v48, v49, v68);
      v70 = sub_5440(&qword_2621C0);
      v69(&v48[*(int *)(v70 + 48)], &v49[*(int *)(v70 + 48)], v68);
      v52 = v48;
      v53 = v50;
      v54 = 5;
LABEL_28:
      swift_storeEnumTagMultiPayload(v52, v53, v54);
      break;
    default:
      memcpy(v48, v49, *(_QWORD *)(*(_QWORD *)(v50 - 8) + 64));
      break;
  }
  v32[v36[12]] = v33[v36[12]];
  v71 = v36[13];
  v72 = &v32[v71];
  v73 = &v33[v71];
  sub_224DC((uint64_t)&v32[v71], type metadata accessor for ButtonViewModel.ActionKind);
  v74 = type metadata accessor for ButtonViewModel.ActionKind(0);
  if (swift_getEnumCaseMultiPayload(v73, v74) == 1)
  {
    v75 = type metadata accessor for URL(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v75 - 8) + 32))(v72, v73, v75);
    swift_storeEnumTagMultiPayload(v72, v74, 1);
  }
  else
  {
    memcpy(v72, v73, *(_QWORD *)(*(_QWORD *)(v74 - 8) + 64));
  }
LABEL_32:
  v76 = v36[14];
  v77 = &v32[v76];
  v78 = &v33[v76];
  v79 = type metadata accessor for LocalizerRequest(0);
  v80 = *(_QWORD *)(v79 - 8);
  v81 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v80 + 48);
  v82 = v81(v77, 1, v79);
  v83 = v81(v78, 1, v79);
  if (!v82)
  {
    if (!v83)
    {
      (*(void (**)(char *, char *, uint64_t))(v80 + 40))(v77, v78, v79);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v80 + 8))(v77, v79);
    goto LABEL_37;
  }
  if (v83)
  {
LABEL_37:
    v84 = sub_5440(&qword_25E0C8);
    memcpy(v77, v78, *(_QWORD *)(*(_QWORD *)(v84 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v80 + 32))(v77, v78, v79);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v80 + 56))(v77, 0, 1, v79);
  return a1;
}

uint64_t getEnumTagSinglePayload for BooksBorderedButtonStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_91134);
}

uint64_t sub_91134(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;

  v6 = sub_5440(&qword_25F558);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = sub_5440(&qword_25F228);
  v10 = *(_QWORD *)(v9 - 8);
  if (*(_DWORD *)(v10 + 84) == (_DWORD)a2)
  {
    v11 = v9;
    v12 = a3[5];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1 + v12, a2, v11);
  }
  if ((_DWORD)a2 != 254)
  {
    v11 = type metadata accessor for ButtonViewModel(0);
    v10 = *(_QWORD *)(v11 - 8);
    v12 = a3[8];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1 + v12, a2, v11);
  }
  v13 = *(unsigned __int8 *)(a1 + a3[7] + 8);
  if (v13 > 1)
    return (v13 ^ 0xFF) + 1;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for BooksBorderedButtonStyle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_91210);
}

uint64_t sub_91210(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;

  v8 = sub_5440(&qword_25F558);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    result = sub_5440(&qword_25F228);
    v14 = *(_QWORD *)(result - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = result;
      v15 = a4[5];
    }
    else
    {
      if (a3 == 254)
      {
        *(_BYTE *)(a1 + a4[7] + 8) = -(char)a2;
        return result;
      }
      v10 = type metadata accessor for ButtonViewModel(0);
      v14 = *(_QWORD *)(v10 - 8);
      v15 = a4[8];
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_912E0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;

  sub_2ADCC(319, (unint64_t *)&qword_25F5C8, type metadata accessor for SizeConstants);
  if (v3 <= 0x3F)
  {
    v8 = *(_QWORD *)(v2 - 8) + 64;
    sub_2ADCC(319, (unint64_t *)&qword_25F2B0, (uint64_t (*)(uint64_t))&type metadata accessor for BlendMode);
    if (v5 <= 0x3F)
    {
      v9 = *(_QWORD *)(v4 - 8) + 64;
      v10 = v9;
      v11 = "\t";
      v6 = type metadata accessor for ButtonViewModel(319);
      if (v7 <= 0x3F)
      {
        v12 = *(_QWORD *)(v6 - 8) + 64;
        swift_initStructMetadata(a1, 256, 5, &v8, a1 + 16);
      }
    }
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for BooksBorderlessButtonStyle(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  _WORD *v8;
  _WORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _WORD *v27;
  _WORD *v28;
  uint64_t v29;
  int *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v17 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v17);
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    v7 = a3[5];
    v8 = (_WORD *)((char *)a1 + v7);
    v9 = (_WORD *)((char *)a2 + v7);
    v10 = sub_5440(&qword_25FB20);
    if (swift_getEnumCaseMultiPayload(v9, v10) == 1)
    {
      *v8 = *v9;
      v11 = type metadata accessor for FontConstants.Environment(0);
      v12 = *(int *)(v11 + 24);
      v13 = (char *)v8 + v12;
      v14 = (char *)v9 + v12;
      v15 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
      *(_QWORD *)((char *)v8 + *(int *)(v11 + 28)) = *(_QWORD *)((char *)v9 + *(int *)(v11 + 28));
      v16 = 1;
    }
    else
    {
      v18 = *(_QWORD *)v9;
      *(_QWORD *)v8 = *(_QWORD *)v9;
      swift_retain(v18);
      v16 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v10, v16);
    v19 = a3[6];
    v20 = (uint64_t *)((char *)v4 + v19);
    v21 = (uint64_t *)((char *)a2 + v19);
    v22 = sub_5440(&qword_25F1E8);
    if (swift_getEnumCaseMultiPayload(v21, v22) == 1)
    {
      v23 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v20, v21, v23);
      v24 = 1;
    }
    else
    {
      v25 = *v21;
      *v20 = *v21;
      swift_retain(v25);
      v24 = 0;
    }
    swift_storeEnumTagMultiPayload(v20, v22, v24);
    v26 = a3[7];
    v27 = (_WORD *)((char *)v4 + v26);
    v28 = (_WORD *)((char *)a2 + v26);
    v29 = sub_5440(&qword_25F548);
    if (swift_getEnumCaseMultiPayload(v28, v29) == 1)
    {
      *v27 = *v28;
      v30 = (int *)type metadata accessor for SizeConstants.Environment(0);
      v31 = v30[6];
      v32 = (char *)v27 + v31;
      v33 = (char *)v28 + v31;
      v34 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v34 - 8) + 16))(v32, v33, v34);
      *(_QWORD *)((char *)v27 + v30[7]) = *(_QWORD *)((char *)v28 + v30[7]);
      v35 = v30[8];
      v36 = (char *)v27 + v35;
      v37 = (char *)v28 + v35;
      v36[2] = v37[2];
      *(_WORD *)v36 = *(_WORD *)v37;
      v38 = 1;
    }
    else
    {
      v39 = *(_QWORD *)v28;
      *(_QWORD *)v27 = *(_QWORD *)v28;
      swift_retain(v39);
      v38 = 0;
    }
    swift_storeEnumTagMultiPayload(v27, v29, v38);
    v40 = a3[8];
    v41 = (uint64_t *)((char *)v4 + v40);
    v42 = (uint64_t *)((char *)a2 + v40);
    v43 = sub_5440(&qword_25E948);
    if (swift_getEnumCaseMultiPayload(v42, v43) == 1)
    {
      v44 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v44 - 8) + 16))(v41, v42, v44);
      v45 = 1;
    }
    else
    {
      v46 = *v42;
      *v41 = *v42;
      swift_retain(v46);
      v45 = 0;
    }
    swift_storeEnumTagMultiPayload(v41, v43, v45);
    v47 = a3[9];
    v48 = (char *)v4 + v47;
    v49 = (char *)a2 + v47;
    v50 = *(_QWORD *)v49;
    v51 = v49[8];
    sub_F9E4(*(_QWORD *)v49, v51);
    *(_QWORD *)v48 = v50;
    v48[8] = v51;
    v52 = a3[10];
    v53 = (uint64_t *)((char *)v4 + v52);
    v54 = (uint64_t *)((char *)a2 + v52);
    v55 = sub_5440(&qword_25F208);
    if (swift_getEnumCaseMultiPayload(v54, v55) == 1)
    {
      v56 = type metadata accessor for BlendMode(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v56 - 8) + 16))(v53, v54, v56);
      v57 = v53;
      v58 = v55;
      v59 = 1;
    }
    else
    {
      v60 = *v54;
      *v53 = *v54;
      swift_retain(v60);
      v57 = v53;
      v58 = v55;
      v59 = 0;
    }
    swift_storeEnumTagMultiPayload(v57, v58, v59);
  }
  return v4;
}

double destroy for BooksBorderlessButtonStyle(uint64_t a1, int *a2)
{
  _QWORD *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  double result;

  v4 = (_QWORD *)(a1 + a2[5]);
  v5 = sub_5440(&qword_25FB20);
  if (swift_getEnumCaseMultiPayload(v4, v5) == 1)
  {
    v6 = (char *)v4 + *(int *)(type metadata accessor for FontConstants.Environment(0) + 24);
    v7 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  }
  else
  {
    swift_release(*v4);
  }
  v8 = (_QWORD *)(a1 + a2[6]);
  v9 = sub_5440(&qword_25F1E8);
  if (swift_getEnumCaseMultiPayload(v8, v9) == 1)
  {
    v10 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v8, v10);
  }
  else
  {
    swift_release(*v8);
  }
  v11 = (_QWORD *)(a1 + a2[7]);
  v12 = sub_5440(&qword_25F548);
  if (swift_getEnumCaseMultiPayload(v11, v12) == 1)
  {
    v13 = (char *)v11 + *(int *)(type metadata accessor for SizeConstants.Environment(0) + 24);
    v14 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
  }
  else
  {
    swift_release(*v11);
  }
  v15 = (_QWORD *)(a1 + a2[8]);
  v16 = sub_5440(&qword_25E948);
  if (swift_getEnumCaseMultiPayload(v15, v16) == 1)
  {
    v17 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(v15, v17);
  }
  else
  {
    swift_release(*v15);
  }
  sub_BE0C(*(_QWORD *)(a1 + a2[9]), *(_BYTE *)(a1 + a2[9] + 8));
  v18 = (_QWORD *)(a1 + a2[10]);
  v19 = sub_5440(&qword_25F208);
  if (swift_getEnumCaseMultiPayload(v18, v19) == 1)
  {
    v20 = type metadata accessor for BlendMode(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(v18, v20);
  }
  else
  {
    *(_QWORD *)&result = swift_release(*v18).n128_u64[0];
  }
  return result;
}

_BYTE *initializeWithCopy for BooksBorderlessButtonStyle(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  _WORD *v7;
  _WORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _WORD *v25;
  _WORD *v26;
  uint64_t v27;
  int *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _BYTE *v46;
  _BYTE *v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  *a1 = *a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = sub_5440(&qword_25FB20);
  if (swift_getEnumCaseMultiPayload(v8, v9) == 1)
  {
    *v7 = *v8;
    v10 = type metadata accessor for FontConstants.Environment(0);
    v11 = *(int *)(v10 + 24);
    v12 = (char *)v7 + v11;
    v13 = (char *)v8 + v11;
    v14 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
    *(_QWORD *)((char *)v7 + *(int *)(v10 + 28)) = *(_QWORD *)((char *)v8 + *(int *)(v10 + 28));
    v15 = 1;
  }
  else
  {
    v16 = *(_QWORD *)v8;
    *(_QWORD *)v7 = *(_QWORD *)v8;
    swift_retain(v16);
    v15 = 0;
  }
  swift_storeEnumTagMultiPayload(v7, v9, v15);
  v17 = a3[6];
  v18 = (uint64_t *)&a1[v17];
  v19 = (uint64_t *)&a2[v17];
  v20 = sub_5440(&qword_25F1E8);
  if (swift_getEnumCaseMultiPayload(v19, v20) == 1)
  {
    v21 = type metadata accessor for ColorScheme(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v18, v19, v21);
    v22 = 1;
  }
  else
  {
    v23 = *v19;
    *v18 = *v19;
    swift_retain(v23);
    v22 = 0;
  }
  swift_storeEnumTagMultiPayload(v18, v20, v22);
  v24 = a3[7];
  v25 = &a1[v24];
  v26 = &a2[v24];
  v27 = sub_5440(&qword_25F548);
  if (swift_getEnumCaseMultiPayload(v26, v27) == 1)
  {
    *v25 = *v26;
    v28 = (int *)type metadata accessor for SizeConstants.Environment(0);
    v29 = v28[6];
    v30 = (char *)v25 + v29;
    v31 = (char *)v26 + v29;
    v32 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v32 - 8) + 16))(v30, v31, v32);
    *(_QWORD *)((char *)v25 + v28[7]) = *(_QWORD *)((char *)v26 + v28[7]);
    v33 = v28[8];
    v34 = (char *)v25 + v33;
    v35 = (char *)v26 + v33;
    v34[2] = v35[2];
    *(_WORD *)v34 = *(_WORD *)v35;
    v36 = 1;
  }
  else
  {
    v37 = *(_QWORD *)v26;
    *(_QWORD *)v25 = *(_QWORD *)v26;
    swift_retain(v37);
    v36 = 0;
  }
  swift_storeEnumTagMultiPayload(v25, v27, v36);
  v38 = a3[8];
  v39 = (uint64_t *)&a1[v38];
  v40 = (uint64_t *)&a2[v38];
  v41 = sub_5440(&qword_25E948);
  if (swift_getEnumCaseMultiPayload(v40, v41) == 1)
  {
    v42 = type metadata accessor for ColorScheme(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v42 - 8) + 16))(v39, v40, v42);
    v43 = 1;
  }
  else
  {
    v44 = *v40;
    *v39 = *v40;
    swift_retain(v44);
    v43 = 0;
  }
  swift_storeEnumTagMultiPayload(v39, v41, v43);
  v45 = a3[9];
  v46 = &a1[v45];
  v47 = &a2[v45];
  v48 = *(_QWORD *)v47;
  v49 = v47[8];
  sub_F9E4(*(_QWORD *)v47, v49);
  *(_QWORD *)v46 = v48;
  v46[8] = v49;
  v50 = a3[10];
  v51 = (uint64_t *)&a1[v50];
  v52 = (uint64_t *)&a2[v50];
  v53 = sub_5440(&qword_25F208);
  if (swift_getEnumCaseMultiPayload(v52, v53) == 1)
  {
    v54 = type metadata accessor for BlendMode(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v54 - 8) + 16))(v51, v52, v54);
    v55 = 1;
  }
  else
  {
    v56 = *v52;
    *v51 = *v52;
    swift_retain(v56);
    v55 = 0;
  }
  swift_storeEnumTagMultiPayload(v51, v53, v55);
  return a1;
}

_BYTE *assignWithCopy for BooksBorderlessButtonStyle(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  _BYTE *v26;
  uint64_t v27;
  int *v28;
  uint64_t v29;
  _BYTE *v30;
  _BYTE *v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  _BYTE *v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _BYTE *v47;
  _BYTE *v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  *a1 = *a2;
  if (a1 != a2)
  {
    v6 = a3[5];
    v7 = &a1[v6];
    v8 = &a2[v6];
    sub_B414((uint64_t)&a1[v6], &qword_25FB20);
    v9 = sub_5440(&qword_25FB20);
    if (swift_getEnumCaseMultiPayload(v8, v9) == 1)
    {
      *v7 = *v8;
      v7[1] = v8[1];
      v10 = type metadata accessor for FontConstants.Environment(0);
      v11 = *(int *)(v10 + 24);
      v12 = &v7[v11];
      v13 = &v8[v11];
      v14 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
      *(_QWORD *)&v7[*(int *)(v10 + 28)] = *(_QWORD *)&v8[*(int *)(v10 + 28)];
      v15 = 1;
    }
    else
    {
      v16 = *(_QWORD *)v8;
      *(_QWORD *)v7 = *(_QWORD *)v8;
      swift_retain(v16);
      v15 = 0;
    }
    swift_storeEnumTagMultiPayload(v7, v9, v15);
    v17 = a3[6];
    v18 = (uint64_t *)&a1[v17];
    v19 = (uint64_t *)&a2[v17];
    sub_B414((uint64_t)&a1[v17], &qword_25F1E8);
    v20 = sub_5440(&qword_25F1E8);
    if (swift_getEnumCaseMultiPayload(v19, v20) == 1)
    {
      v21 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v18, v19, v21);
      v22 = 1;
    }
    else
    {
      v23 = *v19;
      *v18 = *v19;
      swift_retain(v23);
      v22 = 0;
    }
    swift_storeEnumTagMultiPayload(v18, v20, v22);
    v24 = a3[7];
    v25 = &a1[v24];
    v26 = &a2[v24];
    sub_B414((uint64_t)&a1[v24], &qword_25F548);
    v27 = sub_5440(&qword_25F548);
    if (swift_getEnumCaseMultiPayload(v26, v27) == 1)
    {
      *v25 = *v26;
      v25[1] = v26[1];
      v28 = (int *)type metadata accessor for SizeConstants.Environment(0);
      v29 = v28[6];
      v30 = &v25[v29];
      v31 = &v26[v29];
      v32 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v32 - 8) + 16))(v30, v31, v32);
      *(_QWORD *)&v25[v28[7]] = *(_QWORD *)&v26[v28[7]];
      v33 = v28[8];
      v34 = &v25[v33];
      v35 = &v26[v33];
      v36 = v35[2];
      *(_WORD *)v34 = *(_WORD *)v35;
      v34[2] = v36;
      v37 = 1;
    }
    else
    {
      v38 = *(_QWORD *)v26;
      *(_QWORD *)v25 = *(_QWORD *)v26;
      swift_retain(v38);
      v37 = 0;
    }
    swift_storeEnumTagMultiPayload(v25, v27, v37);
    v39 = a3[8];
    v40 = (uint64_t *)&a1[v39];
    v41 = (uint64_t *)&a2[v39];
    sub_B414((uint64_t)&a1[v39], &qword_25E948);
    v42 = sub_5440(&qword_25E948);
    if (swift_getEnumCaseMultiPayload(v41, v42) == 1)
    {
      v43 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v43 - 8) + 16))(v40, v41, v43);
      v44 = 1;
    }
    else
    {
      v45 = *v41;
      *v40 = *v41;
      swift_retain(v45);
      v44 = 0;
    }
    swift_storeEnumTagMultiPayload(v40, v42, v44);
  }
  v46 = a3[9];
  v47 = &a1[v46];
  v48 = &a2[v46];
  v49 = *(_QWORD *)v48;
  v50 = v48[8];
  sub_F9E4(*(_QWORD *)v48, v50);
  v51 = *(_QWORD *)v47;
  v52 = v47[8];
  *(_QWORD *)v47 = v49;
  v47[8] = v50;
  sub_BE0C(v51, v52);
  if (a1 != a2)
  {
    v53 = a3[10];
    v54 = (uint64_t *)&a1[v53];
    v55 = (uint64_t *)&a2[v53];
    sub_B414((uint64_t)&a1[v53], &qword_25F208);
    v56 = sub_5440(&qword_25F208);
    if (swift_getEnumCaseMultiPayload(v55, v56) == 1)
    {
      v57 = type metadata accessor for BlendMode(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v57 - 8) + 16))(v54, v55, v57);
      v58 = 1;
    }
    else
    {
      v59 = *v55;
      *v54 = *v55;
      swift_retain(v59);
      v58 = 0;
    }
    swift_storeEnumTagMultiPayload(v54, v56, v58);
  }
  return a1;
}

_BYTE *initializeWithTake for BooksBorderlessButtonStyle(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  _WORD *v7;
  _WORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  _WORD *v22;
  uint64_t v23;
  int *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  _BYTE *v33;
  _BYTE *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE *v39;
  _BYTE *v40;
  _BYTE *v41;
  _BYTE *v42;
  uint64_t v43;
  uint64_t v44;

  *a1 = *a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = sub_5440(&qword_25FB20);
  if (swift_getEnumCaseMultiPayload(v8, v9) == 1)
  {
    *v7 = *v8;
    v10 = type metadata accessor for FontConstants.Environment(0);
    v11 = *(int *)(v10 + 24);
    v12 = (char *)v7 + v11;
    v13 = (char *)v8 + v11;
    v14 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
    *(_QWORD *)((char *)v7 + *(int *)(v10 + 28)) = *(_QWORD *)((char *)v8 + *(int *)(v10 + 28));
    swift_storeEnumTagMultiPayload(v7, v9, 1);
  }
  else
  {
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  v15 = a3[6];
  v16 = &a1[v15];
  v17 = &a2[v15];
  v18 = sub_5440(&qword_25F1E8);
  if (swift_getEnumCaseMultiPayload(v17, v18) == 1)
  {
    v19 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v16, v17, v19);
    swift_storeEnumTagMultiPayload(v16, v18, 1);
  }
  else
  {
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  v20 = a3[7];
  v21 = &a1[v20];
  v22 = &a2[v20];
  v23 = sub_5440(&qword_25F548);
  if (swift_getEnumCaseMultiPayload(v22, v23) == 1)
  {
    *v21 = *v22;
    v24 = (int *)type metadata accessor for SizeConstants.Environment(0);
    v25 = v24[6];
    v26 = (char *)v21 + v25;
    v27 = (char *)v22 + v25;
    v28 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v28 - 8) + 32))(v26, v27, v28);
    *(_QWORD *)((char *)v21 + v24[7]) = *(_QWORD *)((char *)v22 + v24[7]);
    v29 = v24[8];
    v30 = (char *)v21 + v29;
    v31 = (char *)v22 + v29;
    v30[2] = v31[2];
    *(_WORD *)v30 = *(_WORD *)v31;
    swift_storeEnumTagMultiPayload(v21, v23, 1);
  }
  else
  {
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
  }
  v32 = a3[8];
  v33 = &a1[v32];
  v34 = &a2[v32];
  v35 = sub_5440(&qword_25E948);
  if (swift_getEnumCaseMultiPayload(v34, v35) == 1)
  {
    v36 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v36 - 8) + 32))(v33, v34, v36);
    swift_storeEnumTagMultiPayload(v33, v35, 1);
  }
  else
  {
    memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
  }
  v37 = a3[9];
  v38 = a3[10];
  v39 = &a1[v37];
  v40 = &a2[v37];
  *(_QWORD *)v39 = *(_QWORD *)v40;
  v39[8] = v40[8];
  v41 = &a1[v38];
  v42 = &a2[v38];
  v43 = sub_5440(&qword_25F208);
  if (swift_getEnumCaseMultiPayload(v42, v43) == 1)
  {
    v44 = type metadata accessor for BlendMode(0);
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v44 - 8) + 32))(v41, v42, v44);
    swift_storeEnumTagMultiPayload(v41, v43, 1);
  }
  else
  {
    memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
  }
  return a1;
}

_BYTE *assignWithTake for BooksBorderlessButtonStyle(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  _WORD *v7;
  _WORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  _WORD *v22;
  uint64_t v23;
  int *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  _BYTE *v33;
  _BYTE *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE *v38;
  _BYTE *v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  _BYTE *v44;
  _BYTE *v45;
  uint64_t v46;
  uint64_t v47;

  *a1 = *a2;
  if (a1 != a2)
  {
    v6 = a3[5];
    v7 = &a1[v6];
    v8 = &a2[v6];
    sub_B414((uint64_t)&a1[v6], &qword_25FB20);
    v9 = sub_5440(&qword_25FB20);
    if (swift_getEnumCaseMultiPayload(v8, v9) == 1)
    {
      *v7 = *v8;
      v10 = type metadata accessor for FontConstants.Environment(0);
      v11 = *(int *)(v10 + 24);
      v12 = (char *)v7 + v11;
      v13 = (char *)v8 + v11;
      v14 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
      *(_QWORD *)((char *)v7 + *(int *)(v10 + 28)) = *(_QWORD *)((char *)v8 + *(int *)(v10 + 28));
      swift_storeEnumTagMultiPayload(v7, v9, 1);
    }
    else
    {
      memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    v15 = a3[6];
    v16 = &a1[v15];
    v17 = &a2[v15];
    sub_B414((uint64_t)&a1[v15], &qword_25F1E8);
    v18 = sub_5440(&qword_25F1E8);
    if (swift_getEnumCaseMultiPayload(v17, v18) == 1)
    {
      v19 = type metadata accessor for ColorScheme(0);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v16, v17, v19);
      swift_storeEnumTagMultiPayload(v16, v18, 1);
    }
    else
    {
      memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    v20 = a3[7];
    v21 = &a1[v20];
    v22 = &a2[v20];
    sub_B414((uint64_t)&a1[v20], &qword_25F548);
    v23 = sub_5440(&qword_25F548);
    if (swift_getEnumCaseMultiPayload(v22, v23) == 1)
    {
      *v21 = *v22;
      v24 = (int *)type metadata accessor for SizeConstants.Environment(0);
      v25 = v24[6];
      v26 = (char *)v21 + v25;
      v27 = (char *)v22 + v25;
      v28 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v28 - 8) + 32))(v26, v27, v28);
      *(_QWORD *)((char *)v21 + v24[7]) = *(_QWORD *)((char *)v22 + v24[7]);
      v29 = v24[8];
      v30 = (char *)v21 + v29;
      v31 = (char *)v22 + v29;
      v30[2] = v31[2];
      *(_WORD *)v30 = *(_WORD *)v31;
      swift_storeEnumTagMultiPayload(v21, v23, 1);
    }
    else
    {
      memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    }
    v32 = a3[8];
    v33 = &a1[v32];
    v34 = &a2[v32];
    sub_B414((uint64_t)&a1[v32], &qword_25E948);
    v35 = sub_5440(&qword_25E948);
    if (swift_getEnumCaseMultiPayload(v34, v35) == 1)
    {
      v36 = type metadata accessor for ColorScheme(0);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v36 - 8) + 32))(v33, v34, v36);
      swift_storeEnumTagMultiPayload(v33, v35, 1);
    }
    else
    {
      memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
    }
  }
  v37 = a3[9];
  v38 = &a1[v37];
  v39 = &a2[v37];
  v40 = *(_QWORD *)v39;
  LOBYTE(v39) = v39[8];
  v41 = *(_QWORD *)v38;
  v42 = v38[8];
  *(_QWORD *)v38 = v40;
  v38[8] = (_BYTE)v39;
  sub_BE0C(v41, v42);
  if (a1 != a2)
  {
    v43 = a3[10];
    v44 = &a1[v43];
    v45 = &a2[v43];
    sub_B414((uint64_t)&a1[v43], &qword_25F208);
    v46 = sub_5440(&qword_25F208);
    if (swift_getEnumCaseMultiPayload(v45, v46) == 1)
    {
      v47 = type metadata accessor for BlendMode(0);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v47 - 8) + 32))(v44, v45, v47);
      swift_storeEnumTagMultiPayload(v44, v46, 1);
    }
    else
    {
      memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for BooksBorderlessButtonStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_926C0);
}

uint64_t sub_926C0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;

  v6 = sub_5440(&qword_262568);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = a3[5];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v10 = sub_5440(&qword_25F210);
  v7 = *(_QWORD *)(v10 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v10;
    v9 = a3[6];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v11 = sub_5440(&qword_25F558);
  v7 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v9 = a3[7];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v12 = sub_5440(&qword_25EAE8);
  v7 = *(_QWORD *)(v12 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v12;
    v9 = a3[8];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  if ((_DWORD)a2 != 254)
  {
    v8 = sub_5440(&qword_25F228);
    v7 = *(_QWORD *)(v8 - 8);
    v9 = a3[10];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v13 = *(unsigned __int8 *)(a1 + a3[9] + 8);
  if (v13 > 1)
    return (v13 ^ 0xFF) + 1;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for BooksBorderlessButtonStyle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_927EC);
}

uint64_t sub_927EC(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;

  v8 = sub_5440(&qword_262568);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = a4[5];
  }
  else
  {
    v12 = sub_5440(&qword_25F210);
    v9 = *(_QWORD *)(v12 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v12;
      v11 = a4[6];
    }
    else
    {
      v13 = sub_5440(&qword_25F558);
      v9 = *(_QWORD *)(v13 - 8);
      if (*(_DWORD *)(v9 + 84) == a3)
      {
        v10 = v13;
        v11 = a4[7];
      }
      else
      {
        result = sub_5440(&qword_25EAE8);
        v9 = *(_QWORD *)(result - 8);
        if (*(_DWORD *)(v9 + 84) == a3)
        {
          v10 = result;
          v11 = a4[8];
        }
        else
        {
          if (a3 == 254)
          {
            *(_BYTE *)(a1 + a4[9] + 8) = -(char)a2;
            return result;
          }
          v10 = sub_5440(&qword_25F228);
          v9 = *(_QWORD *)(v10 - 8);
          v11 = a4[10];
        }
      }
    }
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
}

void sub_9290C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD v12[7];

  v12[0] = &unk_1E62D0;
  sub_2ADCC(319, (unint64_t *)&qword_2625D8, type metadata accessor for FontConstants.Button);
  if (v3 <= 0x3F)
  {
    v12[1] = *(_QWORD *)(v2 - 8) + 64;
    sub_2ADCC(319, (unint64_t *)&qword_25F298, type metadata accessor for ColorConstants);
    if (v5 <= 0x3F)
    {
      v12[2] = *(_QWORD *)(v4 - 8) + 64;
      sub_2ADCC(319, (unint64_t *)&qword_25F5C8, type metadata accessor for SizeConstants);
      if (v7 <= 0x3F)
      {
        v12[3] = *(_QWORD *)(v6 - 8) + 64;
        sub_2ADCC(319, (unint64_t *)&qword_25EB58, (uint64_t (*)(uint64_t))&type metadata accessor for ColorScheme);
        if (v9 <= 0x3F)
        {
          v12[4] = *(_QWORD *)(v8 - 8) + 64;
          v12[5] = "\t";
          sub_2ADCC(319, (unint64_t *)&qword_25F2B0, (uint64_t (*)(uint64_t))&type metadata accessor for BlendMode);
          if (v11 <= 0x3F)
          {
            v12[6] = *(_QWORD *)(v10 - 8) + 64;
            swift_initStructMetadata(a1, 256, 7, v12, a1 + 16);
          }
        }
      }
    }
  }
}

unint64_t sub_92A4C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_262620;
  if (!qword_262620)
  {
    v1 = sub_7EF8(&qword_262628);
    sub_8E564();
    sub_7FD8(&qword_262438, &qword_262350, (uint64_t)&protocol conformance descriptor for ViewThatFits<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_262620);
  }
  return result;
}

uint64_t sub_92AD0()
{
  _QWORD v1[4];

  v1[0] = sub_7EF8(&qword_262470);
  v1[1] = type metadata accessor for AutomaticHoverEffect(255);
  v1[2] = sub_3CC54(&qword_262480, &qword_262470, (void (*)(void))sub_8E9E4);
  v1[3] = sub_6FD0((unint64_t *)&qword_25FDF0, (uint64_t (*)(uint64_t))&type metadata accessor for AutomaticHoverEffect, (uint64_t)&protocol conformance descriptor for AutomaticHoverEffect);
  return swift_getOpaqueTypeConformance2(v1, &opaque type descriptor for <<opaque return type of View.hoverEffect<A>(_:isEnabled:)>>, 1);
}

uint64_t sub_92B78(uint64_t a1)
{
  swift_retain(*(_QWORD *)(a1 + 40));
  return a1;
}

unint64_t sub_92BA0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_261978;
  if (!qword_261978)
  {
    v1 = objc_opt_self(CABackdropLayer);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_261978);
  }
  return result;
}

unint64_t sub_92BE4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_262838;
  if (!qword_262838)
  {
    v1 = sub_7EF8(&qword_262780);
    sub_92CFC(&qword_262840, &qword_262778, &qword_262848, &qword_262770);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_262838);
  }
  return result;
}

unint64_t sub_92C70()
{
  unint64_t result;
  uint64_t v1;

  result = qword_262850;
  if (!qword_262850)
  {
    v1 = sub_7EF8(&qword_262808);
    sub_92CFC(&qword_262858, &qword_262800, &qword_262860, &qword_2627F8);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_262850);
  }
  return result;
}

uint64_t sub_92CFC(unint64_t *a1, uint64_t *a2, unint64_t *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v8 = sub_7EF8(a2);
    sub_7FD8(a3, a4, (uint64_t)&protocol conformance descriptor for StrokeShapeView<A, B, C>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v8);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_92D7C(unint64_t *a1, uint64_t *a2, unint64_t *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v8 = sub_7EF8(a2);
    sub_7FD8(a3, a4, (uint64_t)&protocol conformance descriptor for _ShapeView<A, B>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v8);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t ActionContextFieldProvider.addExpensiveMetricsFields(into:using:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[13] = a1;
  v2[14] = a2;
  v3 = sub_5440((uint64_t *)&unk_2628E8);
  v2[15] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[16] = v4;
  v2[17] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_92E60, 0, 0);
}

uint64_t sub_92E60()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = *(_QWORD *)(v0 + 128);
  v1 = *(_QWORD *)(v0 + 136);
  v3 = *(_QWORD *)(v0 + 120);
  static MetricsFieldsContext.Property<A>.pageFields.getter();
  v4 = sub_5440(&qword_25DF98);
  MetricsFieldsContext.subscript.getter(v1, v4);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v5 = *(_QWORD *)(v0 + 96);
  if (v5)
  {
    if (*(_QWORD *)(v5 + 16) && (v6 = sub_9F7C(0x6570795465676170, 0xE800000000000000), (v7 & 1) != 0))
    {
      sub_93194(*(_QWORD *)(v5 + 56) + 32 * v6, v0 + 16);
    }
    else
    {
      *(_OWORD *)(v0 + 16) = 0u;
      *(_OWORD *)(v0 + 32) = 0u;
    }
    swift_bridgeObjectRelease(v5);
    if (*(_QWORD *)(v0 + 40))
    {
      if ((swift_dynamicCast(v0 + 80, v0 + 16, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) != 0)
      {
        v8 = *(_QWORD *)(v0 + 104);
        v9 = *(_QWORD *)(v0 + 80);
        v10 = *(_QWORD *)(v0 + 88);
        *(_QWORD *)(v0 + 72) = &type metadata for String;
        *(_QWORD *)(v0 + 48) = v9;
        *(_QWORD *)(v0 + 56) = v10;
        v11 = *(_QWORD *)(v8 + 24);
        v12 = *(_QWORD *)(v8 + 32);
        sub_1244C(v8, v11);
        dispatch thunk of MetricsFieldsBuilder.addValue(_:forField:)(v0 + 48, 0x6F436E6F69746361, 0xED0000747865746ELL, v11, v12);
        _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)(v0 + 48));
      }
    }
    else
    {
      sub_93154(v0 + 16);
    }
  }
  swift_task_dealloc(*(_QWORD *)(v0 + 136));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_92FFC()
{
  return MetricsFieldsProvider.addTimeSensitiveMetricsFields(into:using:)();
}

uint64_t sub_93010(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc(dword_2628E4);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_108B0;
  return ActionContextFieldProvider.addExpensiveMetricsFields(into:using:)(a1, a2);
}

uint64_t sub_93068()
{
  return MetricsFieldsProvider.addMetricsFields(into:using:)();
}

uint64_t sub_9307C()
{
  uint64_t v0;

  v0 = type metadata accessor for MetricsFieldInclusionRequest(0);
  sub_73A0(v0, qword_2628C8);
  sub_7120(v0, (uint64_t)qword_2628C8);
  return MetricsFieldInclusionRequest.init(rawValue:)(0x6F436E6F69746361, 0xED0000747865746ELL);
}

uint64_t static MetricsFieldInclusionRequest.actionContext.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_25DBE0 != -1)
    swift_once(&qword_25DBE0, sub_9307C);
  v2 = type metadata accessor for MetricsFieldInclusionRequest(0);
  v3 = sub_7120(v2, (uint64_t)qword_2628C8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t sub_93154(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_5440(&qword_25E0C0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_93194(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

ValueMetadata *type metadata accessor for ActionContextFieldProvider()
{
  return &type metadata for ActionContextFieldProvider;
}

uint64_t sub_931E4(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v7;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a2, a1, &protocol requirements base descriptor for SynchronousNativeIntentImplementation, &associated type descriptor for SynchronousNativeIntentImplementation.Intent);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a2, a1, AssociatedTypeWitness, &protocol requirements base descriptor for SynchronousNativeIntentImplementation, &associated conformance descriptor for SynchronousNativeIntentImplementation.SynchronousNativeIntentImplementation.Intent: SynchronousNativeIntentModel);
  dispatch thunk of static IntentModel.kind.getter(&v7, AssociatedTypeWitness, *(_QWORD *)(AssociatedConformanceWitness + 8));
  return v7;
}

uint64_t dispatch thunk of SynchronousNativeIntentImplementation.performSync(_:objectGraph:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 32))();
}

uint64_t PageUpdateInstruction.ShelfHeaderFooterUpdateDescriptor.model.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_BD00(v1, a1);
}

uint64_t CodeAnyComponentModel.wrappedValue.setter(__int128 *a1)
{
  _QWORD *v1;

  _s7BooksUI13AnyPagedFrameVwxx_0(v1);
  return sub_AC68(a1, (uint64_t)v1);
}

uint64_t CodeAnyComponentModel.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD v3[2];

  v3[0] = 0;
  v3[1] = 0xE000000000000000;
  v1 = sub_5440(&qword_25ED60);
  _print_unlocked<A, B>(_:_:)(v0, v3, v1, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  return v3[0];
}

uint64_t CodeAnyComponentModel.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  ValueMetadata *v7;
  uint64_t v8;
  __int128 v9;
  __int128 v11[2];
  _OWORD v12[2];
  uint64_t v13;

  v5 = a1[3];
  v6 = a1[4];
  sub_5480(a1, v5);
  v7 = Decoder.componentKindTable.getter(v5, v6);
  Decoder.decodeComponentModel<A>(using:)(v5, (uint64_t)v7, v6, v8, (uint64_t)v11);
  if (!v2)
  {
    sub_AC68(v11, (uint64_t)v12);
    v9 = v12[1];
    *(_OWORD *)a2 = v12[0];
    *(_OWORD *)(a2 + 16) = v9;
    *(_QWORD *)(a2 + 32) = v13;
  }
  return _s7BooksUI13AnyPagedFrameVwxx_0(a1);
}

uint64_t Decoder.decodeComponentModel()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  ValueMetadata *v6;
  uint64_t v7;

  v6 = Decoder.componentKindTable.getter(a1, a2);
  return Decoder.decodeComponentModel<A>(using:)(a1, (uint64_t)v6, a2, v7, a3);
}

uint64_t sub_93414@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v9[2];
  _OWORD v10[2];
  uint64_t v11;

  v5 = a1[3];
  v6 = a1[4];
  sub_5480(a1, v5);
  Decoder.decodeComponentModel()(v5, v6, (uint64_t)v9);
  if (!v2)
  {
    sub_AC68(v9, (uint64_t)v10);
    v7 = v10[1];
    *(_OWORD *)a2 = v10[0];
    *(_OWORD *)(a2 + 16) = v7;
    *(_QWORD *)(a2 + 32) = v11;
  }
  return _s7BooksUI13AnyPagedFrameVwxx_0(a1);
}

ValueMetadata *Decoder.componentKindTable.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  ValueMetadata *v6;
  ValueMetadata *v8;

  v2 = dispatch thunk of Decoder.userInfo.getter(a1, a2);
  if (qword_25DBF0 != -1)
    swift_once(&qword_25DBF0, sub_93B70);
  v3 = sub_5440(&qword_262918);
  v4 = sub_7120(v3, (uint64_t)qword_262900);
  v5 = sub_5440(&qword_262920);
  Dictionary<>.subscript.getter(&v8, v4, v2, v5);
  swift_bridgeObjectRelease(v2);
  v6 = v8;
  if (!v8)
  {
    v6 = &type metadata for EmptyComponentKindTable;
    sub_93BE8();
  }
  return v6;
}

uint64_t Decoder.decodeComponentModel<A>(using:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t WitnessTable;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t MetatypeMetadata;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[3];
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v25 = a4;
  v33 = sub_5440(&qword_262930);
  v10 = *(_QWORD *)(v33 - 8);
  __chkstk_darwin(v33);
  v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  dispatch thunk of Decoder.singleValueContainer()(v30, a1, a3);
  v26 = a2;
  if (v5)
  {
    v16 = dispatch thunk of Decoder.userInfo.getter(a1, a3);
    static JSONContext.Property<A>.initFailureObserver.getter();
    v17 = sub_5440(&qword_262938);
    Dictionary<>.subscript.getter(v30, v12, v16, v17);
    swift_bridgeObjectRelease(v16);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v33);
    sub_93C2C((uint64_t)v30, (uint64_t)&v27);
    v18 = v28;
    if (v28)
    {
      v19 = v29;
      sub_5480(&v27, v28);
      MetatypeMetadata = swift_getMetatypeMetadata(v26);
      dispatch thunk of JSONInitFailureObserver.tryingToInitialize(_:didFailWith:)(MetatypeMetadata, v5, v18, v19);
      v21 = _s7BooksUI13AnyPagedFrameVwxx_0(&v27);
    }
    else
    {
      v21 = sub_93C74((uint64_t)&v27);
    }
    swift_willThrow(v21);
    return sub_93C74((uint64_t)v30);
  }
  else
  {
    v23 = a5;
    v13 = v31;
    v24 = v32;
    sub_5480(v30, v31);
    v14 = type metadata accessor for CodeByKind(0, a2, *(_QWORD *)(v25 + 8));
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for CodeByKind<A>, v14);
    dispatch thunk of SingleValueDecodingContainer.decode<A>(_:)(&v27, v14, v14, WitnessTable, v13, v24);
    sub_AC68(&v27, v23);
    return _s7BooksUI13AnyPagedFrameVwxx_0(v30);
  }
}

unint64_t sub_93764()
{
  unint64_t result;

  result = sub_952C((uint64_t)&_swiftEmptyArrayStorage);
  qword_2628F8 = result;
  return result;
}

uint64_t sub_93788()
{
  if (qword_25DBE8 != -1)
    swift_once(&qword_25DBE8, sub_93764);
  return swift_bridgeObjectRetain(qword_2628F8);
}

unint64_t sub_937C8()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  if (qword_25DBE8 != -1)
    swift_once(&qword_25DBE8, sub_93764);
  v0 = qword_2628F8;
  v1 = swift_bridgeObjectRetain(qword_2628F8);
  v2 = sub_93E44(v1);
  swift_bridgeObjectRelease(v0);
  return v2;
}

_QWORD *sub_9382C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  return sub_93840(a1, a2, a3);
}

_QWORD *sub_93840@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  Swift::String v37;
  void *object;
  Swift::String v39;
  uint64_t v40;
  __int128 v41;
  _BYTE v42[40];
  uint64_t v43;
  unint64_t v44;
  __int128 v45;
  uint64_t v46;

  v7 = type metadata accessor for JSONContext(0);
  __chkstk_darwin(v7);
  v9 = &v42[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v10 = type metadata accessor for JSONObject(0);
  __chkstk_darwin(v10);
  v12 = &v42[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v13 = sub_93DA4(a1, a1, (uint64_t)&protocol descriptor for ComponentModel, (uint64_t)&protocol descriptor for Decodable);
  if (v13)
  {
    v16 = v13;
    v17 = v14;
    v18 = v15;
    sub_BD00((uint64_t)a2, (uint64_t)v42);
    *(_QWORD *)&v45 = v16;
    *((_QWORD *)&v45 + 1) = v17;
    v46 = v18;
    sub_C404(&v43);
    dispatch thunk of Decodable.init(from:)(v42, v16, v18);
    if (v3)
      return sub_93E10(&v43);
LABEL_7:
    v41 = v45;
    v28 = v45;
    v29 = sub_5480(&v43, v45);
    *(_OWORD *)(a3 + 24) = v41;
    v30 = sub_C404((_QWORD *)a3);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v28 - 8) + 16))(v30, v29, v28);
    return (_QWORD *)_s7BooksUI13AnyPagedFrameVwxx_0(&v43);
  }
  v20 = sub_93DA4(a1, a1, (uint64_t)&protocol descriptor for ComponentModel, (uint64_t)&protocol descriptor for ExpressibleByJSON);
  if (v20)
  {
    v23 = v20;
    v24 = v21;
    v25 = v22;
    sub_BD00((uint64_t)a2, (uint64_t)v42);
    result = (_QWORD *)JSONObject.init(from:)(v42);
    if (v3)
      return result;
    v26 = a2[3];
    *(_QWORD *)&v41 = a2[4];
    sub_5480(a2, v26);
    v27 = dispatch thunk of Decoder.userInfo.getter(v26, v41);
    JSONContext.init(userInfo:)(v27);
    *(_QWORD *)&v45 = v23;
    *((_QWORD *)&v45 + 1) = v24;
    v46 = v25;
    sub_C404(&v43);
    dispatch thunk of ExpressibleByJSON.init(deserializing:using:)(v12, v9, v23, v25);
    goto LABEL_7;
  }
  v31 = type metadata accessor for DecodingError(0);
  swift_allocError(v31, &protocol witness table for DecodingError, 0, 0);
  v33 = v32;
  sub_5440(&qword_25F8F8);
  *v33 = a1;
  v34 = a2[3];
  v35 = a2[4];
  sub_5480(a2, v34);
  v36 = dispatch thunk of Decoder.codingPath.getter(v34, v35);
  v43 = 0;
  v44 = 0xE000000000000000;
  _StringGuts.grow(_:)(21);
  swift_bridgeObjectRelease(v44);
  v43 = 60;
  v44 = 0xE100000000000000;
  v37._countAndFlagsBits = _typeName(_:qualified:)(a1, 0);
  object = v37._object;
  String.append(_:)(v37);
  swift_bridgeObjectRelease(object);
  v39._object = (void *)0x80000000001FB270;
  v39._countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v39);
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)(v36, v43, v44, 0);
  v40 = (*(uint64_t (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v31 - 8) + 104))(v33, enum case for DecodingError.typeMismatch(_:), v31);
  return (_QWORD *)swift_willThrow(v40);
}

uint64_t sub_93B70()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_5440(&qword_262918);
  sub_73A0(v0, qword_262900);
  sub_7120(v0, (uint64_t)qword_262900);
  v1 = sub_5440(&qword_262920);
  return JSONContext.Property.init(_:)(0xD000000000000023, 0x80000000001FB290, v1);
}

unint64_t sub_93BE8()
{
  unint64_t result;

  result = qword_262928;
  if (!qword_262928)
  {
    result = swift_getWitnessTable(&unk_1E64A0, &type metadata for EmptyComponentKindTable);
    atomic_store(result, (unint64_t *)&qword_262928);
  }
  return result;
}

uint64_t sub_93C2C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_5440(&qword_262940);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_93C74(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_5440(&qword_262940);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t static JSONContext.Property<A>.booksComponentKindTable.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_25DBF0 != -1)
    swift_once(&qword_25DBF0, sub_93B70);
  v2 = sub_5440(&qword_262918);
  v3 = sub_7120(v2, (uint64_t)qword_262900);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t destroy for CodeAnyComponentModel(_QWORD *a1)
{
  return _s7BooksUI13AnyPagedFrameVwxx_0(a1);
}

ValueMetadata *type metadata accessor for CodeAnyComponentModel()
{
  return &type metadata for CodeAnyComponentModel;
}

ValueMetadata *type metadata accessor for EmptyComponentKindTable()
{
  return &type metadata for EmptyComponentKindTable;
}

unint64_t sub_93D60()
{
  unint64_t result;

  result = qword_262948;
  if (!qword_262948)
  {
    result = swift_getWitnessTable(&unk_1E6458, &type metadata for EmptyComponentKindTable);
    atomic_store(result, (unint64_t *)&qword_262948);
  }
  return result;
}

uint64_t sub_93DA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  result = swift_conformsToProtocol2(a2, a3);
  if (result)
  {
    if (swift_conformsToProtocol2(a2, a4))
      return a1;
    else
      return 0;
  }
  return result;
}

_QWORD *sub_93E10(_QWORD *result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result[3] - 8);
  if ((*(_DWORD *)(v1 + 80) & 0x20000) != 0)
    return (_QWORD *)swift_slowDealloc(*result, *(_QWORD *)(v1 + 64)+ ((*(_DWORD *)(v1 + 80) + 16) & ~(unint64_t)*(_DWORD *)(v1 + 80)), *(_DWORD *)(v1 + 80) | 7);
  return result;
}

unint64_t sub_93E44(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t result;
  int64_t i;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  int64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t *v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  unint64_t v37;
  __int128 v38;
  uint64_t v39;

  v1 = a1;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    sub_5440(&qword_262950);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  }
  else
  {
    v3 = &_swiftEmptyDictionarySingleton;
  }
  v36 = v1 + 64;
  v4 = -1 << *(_BYTE *)(v1 + 32);
  if (-v4 < 64)
    v5 = ~(-1 << -(char)v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(v1 + 64);
  v35 = (unint64_t)(63 - v4) >> 6;
  result = swift_bridgeObjectRetain(v1);
  i = 0;
  v9 = (uint64_t *)&unk_262958;
  v10 = (uint64_t *)&unk_262960;
  if (v6)
    goto LABEL_10;
LABEL_11:
  v18 = i + 1;
  if (__OFADD__(i, 1))
    goto LABEL_36;
  if (v18 >= v35)
    goto LABEL_33;
  v19 = *(_QWORD *)(v36 + 8 * v18);
  v20 = i + 1;
  if (!v19)
  {
    v20 = i + 2;
    if (i + 2 >= v35)
      goto LABEL_33;
    v19 = *(_QWORD *)(v36 + 8 * v20);
    if (!v19)
    {
      v20 = i + 3;
      if (i + 3 >= v35)
        goto LABEL_33;
      v19 = *(_QWORD *)(v36 + 8 * v20);
      if (!v19)
      {
        v20 = i + 4;
        if (i + 4 >= v35)
          goto LABEL_33;
        v19 = *(_QWORD *)(v36 + 8 * v20);
        if (!v19)
        {
          v20 = i + 5;
          if (i + 5 >= v35)
            goto LABEL_33;
          v19 = *(_QWORD *)(v36 + 8 * v20);
          if (!v19)
          {
            v20 = i + 6;
            if (i + 6 >= v35)
              goto LABEL_33;
            v19 = *(_QWORD *)(v36 + 8 * v20);
            v21 = i + 6;
            if (!v19)
            {
              while (1)
              {
                v20 = v21 + 1;
                if (__OFADD__(v21, 1))
                  goto LABEL_37;
                if (v20 >= v35)
                  break;
                v19 = *(_QWORD *)(v36 + 8 * v20);
                ++v21;
                if (v19)
                  goto LABEL_27;
              }
LABEL_33:
              sub_94160(v1);
              return (unint64_t)v3;
            }
          }
        }
      }
    }
  }
LABEL_27:
  v6 = (v19 - 1) & v19;
  v17 = __clz(__rbit64(v19)) + (v20 << 6);
  for (i = v20; ; v17 = v16 | (i << 6))
  {
    v22 = 16 * v17;
    v23 = (uint64_t *)(*(_QWORD *)(v1 + 48) + 16 * v17);
    v25 = *v23;
    v24 = v23[1];
    v38 = *(_OWORD *)(*(_QWORD *)(v1 + 56) + v22);
    swift_bridgeObjectRetain(v24);
    v26 = sub_5440(v9);
    v27 = sub_5440(v10);
    swift_dynamicCast(&v39, &v38, v26, v27, 7);
    v28 = v39;
    result = sub_1B94CC(v25, v24);
    v29 = result;
    if ((v30 & 1) != 0)
    {
      v37 = v6;
      v11 = v1;
      v12 = i;
      v13 = v10;
      v14 = v9;
      v15 = (uint64_t *)(v3[6] + 16 * result);
      result = swift_bridgeObjectRelease(v15[1]);
      *v15 = v25;
      v15[1] = v24;
      v9 = v14;
      v10 = v13;
      i = v12;
      v1 = v11;
      v6 = v37;
      *(_QWORD *)(v3[7] + 8 * v29) = v28;
      if (!v37)
        goto LABEL_11;
      goto LABEL_10;
    }
    if (v3[2] >= v3[3])
      break;
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v31 = (uint64_t *)(v3[6] + 16 * result);
    *v31 = v25;
    v31[1] = v24;
    *(_QWORD *)(v3[7] + 8 * result) = v28;
    v32 = v3[2];
    v33 = __OFADD__(v32, 1);
    v34 = v32 + 1;
    if (v33)
      goto LABEL_35;
    v3[2] = v34;
    if (!v6)
      goto LABEL_11;
LABEL_10:
    v16 = __clz(__rbit64(v6));
    v6 &= v6 - 1;
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_94160(uint64_t a1)
{
  return swift_release(a1 & 0x7FFFFFFFFFFFFFFFLL);
}

uint64_t ToolbarActionMenu.name.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for ToolbarActionMenu(0);
  return sub_B3D0(v1 + *(int *)(v3 + 20), a1, &qword_25E0C8);
}

uint64_t type metadata accessor for ToolbarActionMenu(uint64_t a1)
{
  return sub_1FE90(a1, qword_262A60, (uint64_t)&nominal type descriptor for ToolbarActionMenu);
}

uint64_t ToolbarActionMenu.items.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = type metadata accessor for ToolbarActionMenu(0);
  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + *(int *)(v1 + 24)));
}

uint64_t (*ToolbarActionMenu.preSelectionActionProvider.getter())()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for ToolbarActionMenu(0) + 28));
  v2 = *v1;
  v3 = v1[1];
  if (*v1)
  {
    v4 = swift_allocObject(&unk_24ED08, 32, 7);
    *(_QWORD *)(v4 + 16) = v2;
    *(_QWORD *)(v4 + 24) = v3;
    v5 = sub_942D8;
  }
  else
  {
    v5 = 0;
  }
  sub_64644(v2, v3);
  return v5;
}

uint64_t sub_94254(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v2 = *a1;
  v3 = a1[1];
  v4 = (uint64_t *)(a2 + *(int *)(type metadata accessor for ToolbarActionMenu(0) + 28));
  v5 = *v4;
  v6 = v4[1];
  sub_64644(v2, v3);
  result = sub_64654(v5, v6);
  *v4 = v2;
  v4[1] = v3;
  return result;
}

uint64_t sub_942B4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_942D8()
{
  uint64_t v0;
  uint64_t v2;

  (*(void (**)(uint64_t *__return_ptr))(v0 + 16))(&v2);
  return v2;
}

uint64_t ToolbarActionMenu.preSelectionActionProvider.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t (*v6)@<X0>(uint64_t *@<X8>);
  uint64_t *v7;
  uint64_t result;

  if (a1)
  {
    v5 = swift_allocObject(&unk_24ED30, 32, 7);
    *(_QWORD *)(v5 + 16) = a1;
    *(_QWORD *)(v5 + 24) = a2;
    v6 = sub_94380;
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = (uint64_t *)(v2 + *(int *)(type metadata accessor for ToolbarActionMenu(0) + 28));
  result = sub_64654(*v7, v7[1]);
  *v7 = (uint64_t)v6;
  v7[1] = v5;
  return result;
}

uint64_t sub_94380@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = (*(uint64_t (**)(void))(v1 + 16))();
  *a1 = result;
  return result;
}

uint64_t (*ToolbarActionMenu.preSelectionActionProvider.modify(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();

  *(_QWORD *)(a1 + 16) = v1;
  v3 = *(int *)(type metadata accessor for ToolbarActionMenu(0) + 28);
  *(_DWORD *)(a1 + 24) = v3;
  v4 = (uint64_t *)(v1 + v3);
  v5 = *v4;
  v6 = v4[1];
  if (*v4)
  {
    v7 = swift_allocObject(&unk_24EDA8, 32, 7);
    *(_QWORD *)(v7 + 16) = v5;
    *(_QWORD *)(v7 + 24) = v6;
    v8 = sub_99EB0;
  }
  else
  {
    v8 = 0;
    v7 = 0;
  }
  *(_QWORD *)a1 = v8;
  *(_QWORD *)(a1 + 8) = v7;
  sub_64644(v5, v6);
  return sub_94434;
}

uint64_t sub_94434(uint64_t a1, char a2)
{
  uint64_t (*v3)@<X0>(uint64_t *@<X8>);
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)@<X0>(uint64_t *@<X8>);
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t *v13;

  v3 = *(uint64_t (**)@<X0>(uint64_t *@<X8>))a1;
  if ((a2 & 1) != 0)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v3)
    {
      v5 = swift_allocObject(&unk_24ED58, 32, 7);
      *(_QWORD *)(v5 + 16) = v3;
      *(_QWORD *)(v5 + 24) = v4;
      v6 = sub_99EF0;
    }
    else
    {
      v6 = 0;
      v5 = 0;
    }
    v9 = (uint64_t *)(*(_QWORD *)(a1 + 16) + *(int *)(a1 + 24));
    v10 = *v9;
    v11 = v9[1];
    sub_64644((uint64_t)v3, v4);
    sub_64654(v10, v11);
    *v9 = (uint64_t)v6;
    v9[1] = v5;
    return sub_64654((uint64_t)v3, v4);
  }
  else
  {
    if (v3)
    {
      v7 = *(_QWORD *)(a1 + 8);
      v8 = swift_allocObject(&unk_24ED80, 32, 7);
      *(_QWORD *)(v8 + 16) = v3;
      *(_QWORD *)(v8 + 24) = v7;
      v3 = sub_99EF0;
    }
    else
    {
      v8 = 0;
    }
    v13 = (uint64_t *)(*(_QWORD *)(a1 + 16) + *(int *)(a1 + 24));
    result = sub_64654(*v13, v13[1]);
    *v13 = (uint64_t)v3;
    v13[1] = v8;
  }
  return result;
}

uint64_t (*ToolbarActionMenu.postSelectionActionProvider.getter())()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for ToolbarActionMenu(0) + 32));
  v2 = *v1;
  v3 = v1[1];
  if (*v1)
  {
    v4 = swift_allocObject(&unk_24EDD0, 32, 7);
    *(_QWORD *)(v4 + 16) = v2;
    *(_QWORD *)(v4 + 24) = v3;
    v5 = sub_99EB0;
  }
  else
  {
    v5 = 0;
  }
  sub_64644(v2, v3);
  return v5;
}

uint64_t sub_945BC(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v2 = *a1;
  v3 = a1[1];
  v4 = (uint64_t *)(a2 + *(int *)(type metadata accessor for ToolbarActionMenu(0) + 32));
  v5 = *v4;
  v6 = v4[1];
  sub_64644(v2, v3);
  result = sub_64654(v5, v6);
  *v4 = v2;
  v4[1] = v3;
  return result;
}

uint64_t ToolbarActionMenu.postSelectionActionProvider.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t (*v6)@<X0>(uint64_t *@<X8>);
  uint64_t *v7;
  uint64_t result;

  if (a1)
  {
    v5 = swift_allocObject(&unk_24EDF8, 32, 7);
    *(_QWORD *)(v5 + 16) = a1;
    *(_QWORD *)(v5 + 24) = a2;
    v6 = sub_99EF0;
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = (uint64_t *)(v2 + *(int *)(type metadata accessor for ToolbarActionMenu(0) + 32));
  result = sub_64654(*v7, v7[1]);
  *v7 = (uint64_t)v6;
  v7[1] = v5;
  return result;
}

uint64_t (*ToolbarActionMenu.postSelectionActionProvider.modify(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();

  *(_QWORD *)(a1 + 16) = v1;
  v3 = *(int *)(type metadata accessor for ToolbarActionMenu(0) + 32);
  *(_DWORD *)(a1 + 24) = v3;
  v4 = (uint64_t *)(v1 + v3);
  v5 = *v4;
  v6 = v4[1];
  if (*v4)
  {
    v7 = swift_allocObject(&unk_24EE70, 32, 7);
    *(_QWORD *)(v7 + 16) = v5;
    *(_QWORD *)(v7 + 24) = v6;
    v8 = sub_99EB0;
  }
  else
  {
    v8 = 0;
    v7 = 0;
  }
  *(_QWORD *)a1 = v8;
  *(_QWORD *)(a1 + 8) = v7;
  sub_64644(v5, v6);
  return sub_94720;
}

uint64_t sub_94720(uint64_t a1, char a2)
{
  uint64_t (*v3)@<X0>(uint64_t *@<X8>);
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)@<X0>(uint64_t *@<X8>);
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t *v13;

  v3 = *(uint64_t (**)@<X0>(uint64_t *@<X8>))a1;
  if ((a2 & 1) != 0)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v3)
    {
      v5 = swift_allocObject(&unk_24EE20, 32, 7);
      *(_QWORD *)(v5 + 16) = v3;
      *(_QWORD *)(v5 + 24) = v4;
      v6 = sub_99EF0;
    }
    else
    {
      v6 = 0;
      v5 = 0;
    }
    v9 = (uint64_t *)(*(_QWORD *)(a1 + 16) + *(int *)(a1 + 24));
    v10 = *v9;
    v11 = v9[1];
    sub_64644((uint64_t)v3, v4);
    sub_64654(v10, v11);
    *v9 = (uint64_t)v6;
    v9[1] = v5;
    return sub_64654((uint64_t)v3, v4);
  }
  else
  {
    if (v3)
    {
      v7 = *(_QWORD *)(a1 + 8);
      v8 = swift_allocObject(&unk_24EE48, 32, 7);
      *(_QWORD *)(v8 + 16) = v3;
      *(_QWORD *)(v8 + 24) = v7;
      v3 = sub_99EF0;
    }
    else
    {
      v8 = 0;
    }
    v13 = (uint64_t *)(*(_QWORD *)(a1 + 16) + *(int *)(a1 + 24));
    result = sub_64654(*v13, v13[1]);
    *v13 = (uint64_t)v3;
    v13[1] = v8;
  }
  return result;
}

uint64_t ToolbarActionMenu.init(id:name:items:preSelectionActionProvider:postSelectionActionProvider:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t (*a7)@<X0>(uint64_t *@<X8>)@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>)
{
  int *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t (*v20)@<X0>(uint64_t *@<X8>);
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)@<X0>(uint64_t *@<X8>);
  uint64_t v24;

  v16 = (int *)type metadata accessor for ToolbarActionMenu(0);
  v17 = (_QWORD *)((char *)a9 + v16[7]);
  *v17 = 0;
  v17[1] = 0;
  v18 = (_QWORD *)((char *)a9 + v16[8]);
  *v18 = 0;
  v18[1] = 0;
  *a9 = a1;
  a9[1] = a2;
  sub_B3D0(a3, (uint64_t)a9 + v16[5], &qword_25E0C8);
  *(_QWORD *)((char *)a9 + v16[6]) = a4;
  if (a5)
  {
    v19 = swift_allocObject(&unk_24EEC0, 32, 7);
    *(_QWORD *)(v19 + 16) = a5;
    *(_QWORD *)(v19 + 24) = a6;
    v20 = sub_99EF0;
  }
  else
  {
    v20 = 0;
    v19 = 0;
  }
  v21 = *v17;
  v22 = v17[1];
  sub_64644(a5, a6);
  sub_64654(v21, v22);
  *v17 = (uint64_t)v20;
  v17[1] = v19;
  v23 = a7;
  if (a7)
  {
    v24 = swift_allocObject(&unk_24EE98, 32, 7);
    *(_QWORD *)(v24 + 16) = a7;
    *(_QWORD *)(v24 + 24) = a8;
    v23 = sub_99EF0;
  }
  else
  {
    v24 = 0;
  }
  sub_64654(*v18, v18[1]);
  sub_64654(a5, a6);
  *v18 = (uint64_t)v23;
  v18[1] = v24;
  return sub_B414(a3, &qword_25E0C8);
}

uint64_t ToolbarActionMenu.contentView.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;

  v1 = type metadata accessor for ToolbarActionMenu(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 64);
  v4 = *(_QWORD *)(v0 + *(int *)(__chkstk_darwin(v1) + 24));
  v15 = v4;
  sub_1E428(v0, (uint64_t)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for ToolbarActionMenu);
  v5 = *(unsigned __int8 *)(v2 + 80);
  v6 = (v5 + 16) & ~v5;
  v7 = swift_allocObject(&unk_24EEE8, v6 + v3, v5 | 7);
  sub_21C88((uint64_t)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), v7 + v6, type metadata accessor for ToolbarActionMenu);
  swift_bridgeObjectRetain(v4);
  v8 = sub_5440(&qword_262968);
  v9 = sub_5440(&qword_262970);
  v10 = sub_7FD8(&qword_262978, &qword_262968, (uint64_t)&protocol conformance descriptor for [A]);
  v11 = sub_9574C();
  v12 = sub_6FD0(&qword_2629B0, type metadata accessor for ToolbarActionMenuItem, (uint64_t)&protocol conformance descriptor for ToolbarActionMenuItem);
  return ForEach<>.init(_:content:)(&v15, sub_95700, v7, v8, &type metadata for String, v9, v10, v11, v12);
}

uint64_t sub_94AF8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  void (**v29)(char *, uint64_t, uint64_t (*)());
  uint64_t v30;
  uint64_t v31;
  unsigned __int8 *v32;
  uint64_t (*v33)(_QWORD);
  int EnumCaseMultiPayload;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  int *v38;
  char v39;
  char v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned __int8 *v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t (*v67)();
  uint64_t v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int *v74;
  char *v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t (*v87)();
  int *v88;
  char *v89;
  uint64_t v90;
  uint64_t (**v91)();
  uint64_t (**v92)();
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  void (**v111)(char *, uint64_t, uint64_t (*)());
  uint64_t (*v112)();
  uint64_t v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  __int128 v121[2];
  __int128 v122[2];
  _BYTE v123[16];

  v101 = a2;
  v120 = a3;
  v112 = (uint64_t (*)())type metadata accessor for LocalizerRequest(0);
  v111 = (void (**)(char *, uint64_t, uint64_t (*)()))*((_QWORD *)v112 - 1);
  __chkstk_darwin(v112);
  v106 = (char *)&v101 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v119 = type metadata accessor for ToolbarActionButtonMenuItem(0);
  v5 = __chkstk_darwin(v119);
  v7 = (char *)&v101 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v108 = (uint64_t)&v101 - v8;
  v9 = sub_5440(&qword_25E0C8);
  v10 = __chkstk_darwin(v9);
  v105 = (uint64_t)&v101 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v107 = (uint64_t)&v101 - v12;
  v114 = type metadata accessor for ToolbarActionShareLinkMenuItem(0);
  __chkstk_darwin(v114);
  v14 = (char *)&v101 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v104 = type metadata accessor for URL(0);
  v103 = *(_QWORD *)(v104 - 8);
  __chkstk_darwin(v104);
  v102 = (char *)&v101 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v116 = sub_5440(&qword_262C38);
  __chkstk_darwin(v116);
  v118 = (uint64_t)&v101 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v110 = sub_5440(&qword_262C40);
  __chkstk_darwin(v110);
  v113 = (uint64_t)&v101 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v117 = sub_5440(&qword_262990);
  __chkstk_darwin(v117);
  v115 = (char *)&v101 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = (int *)type metadata accessor for ToolbarActionMenuItem(0);
  __chkstk_darwin(v19);
  v21 = (char *)&v101 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v109 = type metadata accessor for ToolbarActionToggleMenuItem(0);
  v22 = __chkstk_darwin(v109);
  v24 = (char *)&v101 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = __chkstk_darwin(v22);
  v27 = (char *)&v101 - v26;
  __chkstk_darwin(v25);
  v29 = (void (**)(char *, uint64_t, uint64_t (*)()))((char *)&v101 - v28);
  v30 = type metadata accessor for ToolbarActionMenuItemButtonType(0);
  __chkstk_darwin(v30);
  v32 = (unsigned __int8 *)&v101 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1E428(a1 + v19[9], (uint64_t)v32, v33);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v32, v30);
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      v35 = v103;
      v36 = v102;
      v37 = v104;
      (*(void (**)(char *, unsigned __int8 *, uint64_t))(v103 + 32))(v102, v32, v104);
      v38 = (int *)v114;
      v111[2](&v14[*(int *)(v114 + 20)], a1 + v19[5], v112);
      v39 = *(_BYTE *)(a1 + v19[7]);
      v40 = *(_BYTE *)(a1 + v19[8]);
      v41 = v36;
      (*(void (**)(char *, char *, uint64_t))(v35 + 16))(&v14[v38[8]], v36, v37);
      v42 = type metadata accessor for ProfileRestrictions(0);
      v43 = sub_6FD0((unint64_t *)&qword_26AF00, type metadata accessor for ProfileRestrictions, (uint64_t)&protocol conformance descriptor for ProfileRestrictions);
      *(_QWORD *)v14 = EnvironmentObject.init()(v42, v43);
      *((_QWORD *)v14 + 1) = v44;
      v14[v38[6]] = v39;
      v14[v38[7]] = v40;
      v45 = v113;
      sub_1E428((uint64_t)v14, v113, type metadata accessor for ToolbarActionShareLinkMenuItem);
      swift_storeEnumTagMultiPayload(v45, v110, 1);
      v46 = sub_6FD0(&qword_262998, type metadata accessor for ToolbarActionToggleMenuItem, (uint64_t)&protocol conformance descriptor for ToolbarActionToggleMenuItem);
      v47 = sub_6FD0(&qword_2629A0, type metadata accessor for ToolbarActionShareLinkMenuItem, (uint64_t)&protocol conformance descriptor for ToolbarActionShareLinkMenuItem);
      v48 = (uint64_t)v115;
      _ConditionalContent<>.init(storage:)(v45, v109, v38, v46, v47);
      v49 = v118;
      sub_B3D0(v48, v118, &qword_262990);
      swift_storeEnumTagMultiPayload(v49, v116, 0);
      v50 = sub_957D0();
      v51 = sub_6FD0(&qword_2629A8, type metadata accessor for ToolbarActionButtonMenuItem, (uint64_t)&protocol conformance descriptor for ToolbarActionButtonMenuItem);
      _ConditionalContent<>.init(storage:)(v49, v117, v119, v50, v51);
      sub_B414(v48, &qword_262990);
      sub_224DC((uint64_t)v14, type metadata accessor for ToolbarActionShareLinkMenuItem);
      return (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v41, v37);
    }
    else
    {
      v59 = sub_5440(&qword_262AA8);
      v60 = &v32[*(int *)(v59 + 48)];
      v62 = *(char **)v60;
      v61 = *((_QWORD *)v60 + 1);
      v115 = v62;
      v114 = v61;
      v63 = (uint64_t)&v32[*(int *)(v59 + 64)];
      v64 = v107;
      sub_167A4((uint64_t)v32, v107, &qword_25E0C8);
      sub_167A4(v63, (uint64_t)v123, &qword_25F910);
      v65 = (uint64_t)v111;
      v66 = (uint64_t)v106;
      v67 = v112;
      v111[2](v106, a1 + v19[5], v112);
      v68 = v19[6];
      v69 = *(_BYTE *)(a1 + v19[7]);
      LODWORD(v113) = *(unsigned __int8 *)(a1 + v19[8]);
      sub_958C8(a1 + v68, (uint64_t)v121);
      sub_AC68(v121, (uint64_t)v122);
      v70 = v105;
      sub_B3D0(v64, v105, &qword_25E0C8);
      sub_B3D0((uint64_t)v123, (uint64_t)v121, &qword_25F910);
      v71 = type metadata accessor for ProfileRestrictions(0);
      v72 = sub_6FD0((unint64_t *)&qword_26AF00, type metadata accessor for ProfileRestrictions, (uint64_t)&protocol conformance descriptor for ProfileRestrictions);
      *(_QWORD *)v7 = EnvironmentObject.init()(v71, v72);
      *((_QWORD *)v7 + 1) = v73;
      *((_QWORD *)v7 + 2) = swift_getKeyPath(&unk_1E69A8);
      v7[56] = 0;
      v74 = (int *)v119;
      v75 = &v7[*(int *)(v119 + 24)];
      *(_QWORD *)v75 = swift_getKeyPath(&unk_1E69D8);
      v76 = sub_5440(&qword_25FAE0);
      swift_storeEnumTagMultiPayload(v75, v76, 0);
      (*(void (**)(char *, uint64_t, uint64_t (*)()))(v65 + 32))(&v7[v74[7]], v66, v67);
      v7[v74[8]] = v69;
      v7[v74[9]] = v113;
      sub_AC68(v122, (uint64_t)&v7[v74[10]]);
      sub_167A4(v70, (uint64_t)&v7[v74[11]], &qword_25E0C8);
      v77 = &v7[v74[12]];
      v78 = v114;
      *(_QWORD *)v77 = v115;
      *((_QWORD *)v77 + 1) = v78;
      sub_167A4((uint64_t)v121, (uint64_t)&v7[v74[13]], &qword_25F910);
      v79 = v108;
      sub_21C88((uint64_t)v7, v108, type metadata accessor for ToolbarActionButtonMenuItem);
      v80 = v118;
      sub_1E428(v79, v118, type metadata accessor for ToolbarActionButtonMenuItem);
      swift_storeEnumTagMultiPayload(v80, v116, 1);
      v81 = sub_957D0();
      v82 = sub_6FD0(&qword_2629A8, type metadata accessor for ToolbarActionButtonMenuItem, (uint64_t)&protocol conformance descriptor for ToolbarActionButtonMenuItem);
      _ConditionalContent<>.init(storage:)(v80, v117, v74, v81, v82);
      sub_224DC(v79, type metadata accessor for ToolbarActionButtonMenuItem);
      sub_B414((uint64_t)v123, &qword_25F910);
      return sub_B414(v64, &qword_25E0C8);
    }
  }
  else
  {
    v111 = v29;
    LODWORD(v107) = *v32;
    sub_1E428(a1, (uint64_t)v21, type metadata accessor for ToolbarActionMenuItem);
    v53 = type metadata accessor for ToolbarActionMenu(0);
    v54 = v101;
    v55 = (uint64_t *)(v101 + *(int *)(v53 + 28));
    v56 = *v55;
    v57 = v55[1];
    if (*v55)
    {
      v58 = swift_allocObject(&unk_24F118, 32, 7);
      *(_QWORD *)(v58 + 16) = v56;
      *(_QWORD *)(v58 + 24) = v57;
      v112 = sub_99EB0;
    }
    else
    {
      v112 = 0;
      v58 = 0;
    }
    v83 = (uint64_t *)(v54 + *(int *)(v53 + 32));
    v84 = *v83;
    v85 = v83[1];
    v108 = v57;
    v106 = (char *)v85;
    if (v84)
    {
      v86 = swift_allocObject(&unk_24F0F0, 32, 7);
      *(_QWORD *)(v86 + 16) = v84;
      *(_QWORD *)(v86 + 24) = v85;
      v87 = sub_99EB0;
    }
    else
    {
      v87 = 0;
      v86 = 0;
    }
    *(_QWORD *)v24 = swift_getKeyPath(&unk_1E69A8);
    v24[40] = 0;
    v88 = (int *)v109;
    v89 = &v24[*(int *)(v109 + 20)];
    *(_QWORD *)v89 = swift_getKeyPath(&unk_1E69D8);
    v90 = sub_5440(&qword_25FAE0);
    swift_storeEnumTagMultiPayload(v89, v90, 0);
    sub_21C88((uint64_t)v21, (uint64_t)&v24[v88[6]], type metadata accessor for ToolbarActionMenuItem);
    v24[v88[7]] = v107;
    v91 = (uint64_t (**)())&v24[v88[8]];
    *v91 = v112;
    v91[1] = (uint64_t (*)())v58;
    v92 = (uint64_t (**)())&v24[v88[9]];
    *v92 = v87;
    v92[1] = (uint64_t (*)())v86;
    sub_21C88((uint64_t)v24, (uint64_t)v27, type metadata accessor for ToolbarActionToggleMenuItem);
    v93 = (uint64_t)v111;
    sub_21C88((uint64_t)v27, (uint64_t)v111, type metadata accessor for ToolbarActionToggleMenuItem);
    v94 = v113;
    sub_1E428(v93, v113, type metadata accessor for ToolbarActionToggleMenuItem);
    swift_storeEnumTagMultiPayload(v94, v110, 0);
    sub_64644(v56, v108);
    sub_64644(v84, (uint64_t)v106);
    v95 = sub_6FD0(&qword_262998, type metadata accessor for ToolbarActionToggleMenuItem, (uint64_t)&protocol conformance descriptor for ToolbarActionToggleMenuItem);
    v96 = sub_6FD0(&qword_2629A0, type metadata accessor for ToolbarActionShareLinkMenuItem, (uint64_t)&protocol conformance descriptor for ToolbarActionShareLinkMenuItem);
    v97 = (uint64_t)v115;
    _ConditionalContent<>.init(storage:)(v94, v88, v114, v95, v96);
    v98 = v118;
    sub_B3D0(v97, v118, &qword_262990);
    swift_storeEnumTagMultiPayload(v98, v116, 0);
    v99 = sub_957D0();
    v100 = sub_6FD0(&qword_2629A8, type metadata accessor for ToolbarActionButtonMenuItem, (uint64_t)&protocol conformance descriptor for ToolbarActionButtonMenuItem);
    _ConditionalContent<>.init(storage:)(v98, v117, v119, v99, v100);
    sub_B414(v97, &qword_262990);
    return sub_224DC(v93, type metadata accessor for ToolbarActionToggleMenuItem);
  }
}

uint64_t sub_95614()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;

  v1 = (int *)type metadata accessor for ToolbarActionMenu(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v0 + v4;
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + 8));
  v7 = v0 + v4 + v1[5];
  v8 = type metadata accessor for LocalizerRequest(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8))
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[6]));
  v10 = (_QWORD *)(v6 + v1[7]);
  if (*v10)
    swift_release(v10[1]);
  v11 = (_QWORD *)(v6 + v1[8]);
  if (*v11)
    swift_release(v11[1]);
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_95700@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ToolbarActionMenu(0) - 8) + 80);
  return sub_94AF8(a1, v2 + ((v5 + 16) & ~v5), a2);
}

unint64_t sub_9574C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_262980;
  if (!qword_262980)
  {
    v1 = sub_7EF8(&qword_262970);
    sub_957D0();
    sub_6FD0(&qword_2629A8, type metadata accessor for ToolbarActionButtonMenuItem, (uint64_t)&protocol conformance descriptor for ToolbarActionButtonMenuItem);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_262980);
  }
  return result;
}

unint64_t sub_957D0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_262988;
  if (!qword_262988)
  {
    v1 = sub_7EF8(&qword_262990);
    sub_6FD0(&qword_262998, type metadata accessor for ToolbarActionToggleMenuItem, (uint64_t)&protocol conformance descriptor for ToolbarActionToggleMenuItem);
    sub_6FD0(&qword_2629A0, type metadata accessor for ToolbarActionShareLinkMenuItem, (uint64_t)&protocol conformance descriptor for ToolbarActionShareLinkMenuItem);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_262988);
  }
  return result;
}

uint64_t type metadata accessor for ToolbarActionMenuItem(uint64_t a1)
{
  return sub_1FE90(a1, qword_262B08, (uint64_t)&nominal type descriptor for ToolbarActionMenuItem);
}

uint64_t ToolbarActionMenuItem.action.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  __int128 v5[2];

  v3 = type metadata accessor for ToolbarActionMenuItem(0);
  sub_958C8(v1 + *(int *)(v3 + 24), (uint64_t)v5);
  return sub_AC68(v5, a1);
}

uint64_t sub_958C8(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for AnyPagedFrame(a2, a1);
  return a2;
}

uint64_t sub_95904(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_9592C + 4 * byte_1E64D0[a1]))(25705, 0xE200000000000000);
}

uint64_t sub_9592C()
{
  return 1701667182;
}

uint64_t sub_9593C()
{
  return 0x736D657469;
}

unint64_t sub_95950()
{
  return 0xD00000000000001ALL;
}

unint64_t sub_9596C()
{
  return 0xD00000000000001BLL;
}

uint64_t sub_95994()
{
  unsigned __int8 *v0;

  return sub_95904(*v0);
}

uint64_t sub_9599C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_99A5C(a1, a2);
  *a3 = result;
  return result;
}

void sub_959C0(_BYTE *a1@<X8>)
{
  *a1 = 5;
}

uint64_t sub_959CC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_95E38();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_959F4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_95E38();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t ToolbarActionMenu.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t *v31;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t v38;
  __int128 v39;
  char v40;

  v33 = a2;
  v3 = sub_5440(&qword_25E0C8);
  __chkstk_darwin(v3);
  v34 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = sub_5440(&qword_2629B8);
  v5 = *(_QWORD *)(v35 - 8);
  __chkstk_darwin(v35);
  v7 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for ToolbarActionMenu(0);
  v9 = __chkstk_darwin(v8);
  v11 = (uint64_t *)((char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = (_QWORD *)((char *)v11 + *(int *)(v9 + 28));
  *v12 = 0;
  v12[1] = 0;
  v36 = v12;
  v13 = (_QWORD *)((char *)v11 + *(int *)(v9 + 32));
  *v13 = 0;
  v13[1] = 0;
  v37 = v13;
  v15 = a1[3];
  v14 = a1[4];
  sub_5480(a1, v15);
  v16 = sub_95E38();
  v17 = v38;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ToolbarActionMenu.CodingKeys, &type metadata for ToolbarActionMenu.CodingKeys, v16, v15, v14);
  if (v17)
  {
    _s7BooksUI13AnyPagedFrameVwxx_0(a1);
    v20 = v37;
    sub_64654(*v36, v36[1]);
    return sub_64654(*v20, v20[1]);
  }
  else
  {
    v18 = (uint64_t)v34;
    LOBYTE(v39) = 0;
    v19 = v7;
    v21 = (uint64_t)v11;
    *v11 = KeyedDecodingContainer.decode(_:forKey:)(&v39, v35);
    v11[1] = v22;
    v23 = type metadata accessor for LocalizerRequest(0);
    LOBYTE(v39) = 1;
    v24 = sub_6FD0(&qword_2629C8, (uint64_t (*)(uint64_t))&type metadata accessor for LocalizerRequest, (uint64_t)&protocol conformance descriptor for LocalizerRequest);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v23, &v39, v35, v23, v24);
    sub_167A4(v18, (uint64_t)v11 + *(int *)(v8 + 20), &qword_25E0C8);
    v25 = sub_5440(&qword_262968);
    v40 = 2;
    v26 = sub_95E7C();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v39, v25, &v40, v35, v25, v26);
    *(_QWORD *)((char *)v11 + *(int *)(v8 + 24)) = v39;
    v27 = sub_5440(&qword_2629E0);
    v40 = 3;
    v28 = sub_7FD8(&qword_2629E8, &qword_2629E0, (uint64_t)&protocol conformance descriptor for NotDecoded<A>);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v39, v27, &v40, v35, v27, v28);
    v29 = v35;
    *(_OWORD *)v36 = v39;
    v40 = 4;
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v39, v27, &v40, v29, v27, v28);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v19, v35);
    v30 = v39;
    v31 = v37;
    sub_64654(*v37, v37[1]);
    *(_OWORD *)v31 = v30;
    sub_1E428(v21, v33, type metadata accessor for ToolbarActionMenu);
    _s7BooksUI13AnyPagedFrameVwxx_0(a1);
    return sub_224DC(v21, type metadata accessor for ToolbarActionMenu);
  }
}

unint64_t sub_95E38()
{
  unint64_t result;

  result = qword_2629C0;
  if (!qword_2629C0)
  {
    result = swift_getWitnessTable(&unk_1E6958, &type metadata for ToolbarActionMenu.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2629C0);
  }
  return result;
}

unint64_t sub_95E7C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2629D0;
  if (!qword_2629D0)
  {
    v1 = sub_7EF8(&qword_262968);
    sub_6FD0(&qword_2629D8, type metadata accessor for ToolbarActionMenuItem, (uint64_t)&protocol conformance descriptor for ToolbarActionMenuItem);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_2629D0);
  }
  return result;
}

uint64_t sub_95EF8@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;

  v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  return swift_bridgeObjectRetain(v2);
}

uint64_t sub_95F04@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return ToolbarActionMenu.init(from:)(a1, a2);
}

uint64_t static ToolbarActionMenuItem.== infix(_:_:)(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *a1;
  v5 = a1[1];
  v6 = a2[1];
  if (v4 == *a2 && v5 == v6)
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *a2, v6, 0);
}

uint64_t ToolbarActionMenuItem.name.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ToolbarActionMenuItem(0) + 20);
  v4 = type metadata accessor for LocalizerRequest(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t sub_95F90@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  __int128 v6[2];

  v4 = type metadata accessor for ToolbarActionMenuItem(0);
  sub_958C8(a1 + *(int *)(v4 + 24), (uint64_t)v6);
  return sub_AC68(v6, a2);
}

uint64_t sub_95FDC(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  __int128 v5[2];

  sub_BD00(a1, (uint64_t)v5);
  v3 = (_QWORD *)(a2 + *(int *)(type metadata accessor for ToolbarActionMenuItem(0) + 24));
  _s7BooksUI13AnyPagedFrameVwxx_0(v3);
  return sub_AC68(v5, (uint64_t)v3);
}

uint64_t ToolbarActionMenuItem.action.setter(__int128 *a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)(v1 + *(int *)(type metadata accessor for ToolbarActionMenuItem(0) + 24));
  _s7BooksUI13AnyPagedFrameVwxx_0(v3);
  return sub_AC68(a1, (uint64_t)v3);
}

double (*ToolbarActionMenuItem.action.modify())(double)
{
  type metadata accessor for ToolbarActionMenuItem(0);
  return KeyedEncodingContainer.encode<A>(_:forKey:);
}

uint64_t ToolbarActionMenuItem.isEnabled.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for ToolbarActionMenuItem(0) + 28));
}

uint64_t ToolbarActionMenuItem.isExplicit.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for ToolbarActionMenuItem(0) + 32));
}

uint64_t ToolbarActionMenuItem.buttonType.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for ToolbarActionMenuItem(0);
  return sub_1E428(v1 + *(int *)(v3 + 36), a1, type metadata accessor for ToolbarActionMenuItemButtonType);
}

uint64_t type metadata accessor for ToolbarActionMenuItemButtonType(uint64_t a1)
{
  return sub_1FE90(a1, qword_262BC0, (uint64_t)&nominal type descriptor for ToolbarActionMenuItemButtonType);
}

uint64_t ToolbarActionMenuItem.init(id:name:action:isEnabled:isExplicit:buttonType:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, char a5@<W4>, int a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  int *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;

  v26 = a7;
  v27 = a8;
  HIDWORD(v25) = a6;
  v13 = (int *)type metadata accessor for ToolbarActionMenuItem(0);
  v14 = __chkstk_darwin(v13);
  v16 = (uint64_t *)((char *)&v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  *v16 = a1;
  v16[1] = a2;
  v17 = (char *)v16 + *(int *)(v14 + 20);
  v18 = type metadata accessor for LocalizerRequest(0);
  v19 = *(_QWORD *)(v18 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v17, a3, v18);
  v21 = a4[3];
  v20 = a4[4];
  v22 = sub_5480(a4, v21);
  v29 = v21;
  v30 = *(_QWORD *)(v20 + 8);
  v23 = sub_C404(&v28);
  (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v23, v22, v21);
  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(a3, v18);
  sub_AC68(&v28, (uint64_t)v16 + v13[6]);
  *((_BYTE *)v16 + v13[7]) = a5;
  *((_BYTE *)v16 + v13[8]) = BYTE4(v25);
  sub_21C88(v26, (uint64_t)v16 + v13[9], type metadata accessor for ToolbarActionMenuItemButtonType);
  sub_21C88((uint64_t)v16, v27, type metadata accessor for ToolbarActionMenuItem);
  return _s7BooksUI13AnyPagedFrameVwxx_0(a4);
}

uint64_t sub_96288()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_962AC + 4 * byte_1E64D5[*v0]))(25705, 0xE200000000000000);
}

uint64_t sub_962AC()
{
  return 1701667182;
}

uint64_t sub_962BC()
{
  return 0x6E6F69746361;
}

uint64_t sub_962D0()
{
  return 0x656C62616E457369;
}

uint64_t sub_962EC()
{
  return 0x63696C7078457369;
}

uint64_t sub_9630C()
{
  return 0x79546E6F74747562;
}

uint64_t sub_96328@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_99C3C(a1, a2);
  *a3 = result;
  return result;
}

void sub_9634C(_BYTE *a1@<X8>)
{
  *a1 = 6;
}

uint64_t sub_96358(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_9698C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_96380(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_9698C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t ToolbarActionMenuItem.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int *v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  __int128 v28;
  char v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD v33[2];
  char *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  _QWORD *v42;
  _OWORD v43[2];
  uint64_t v44;
  char v45;

  v35 = a2;
  v36 = type metadata accessor for ToolbarActionMenuItemButtonType(0);
  __chkstk_darwin(v36);
  v37 = (_QWORD *)((char *)v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v4 = type metadata accessor for LocalizerRequest(0);
  v38 = *(_QWORD *)(v4 - 8);
  v39 = v4;
  __chkstk_darwin(v4);
  v6 = (_QWORD *)((char *)v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v40 = sub_5440(&qword_2629F0);
  v7 = *(_QWORD *)(v40 - 8);
  __chkstk_darwin(v40);
  v9 = (char *)v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (int *)type metadata accessor for ToolbarActionMenuItem(0);
  __chkstk_darwin(v10);
  v12 = (char *)v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1[3];
  v13 = a1[4];
  sub_5480(a1, v14);
  v15 = sub_9698C();
  v41 = v9;
  v16 = v42;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ToolbarActionMenuItem.CodingKeys, &type metadata for ToolbarActionMenuItem.CodingKeys, v15, v14, v13);
  if (v16)
    return _s7BooksUI13AnyPagedFrameVwxx_0(a1);
  v17 = v7;
  v42 = a1;
  v18 = v38;
  v19 = v39;
  LOBYTE(v43[0]) = 0;
  v20 = v40;
  *(_QWORD *)v12 = KeyedDecodingContainer.decode(_:forKey:)(v43, v40);
  *((_QWORD *)v12 + 1) = v21;
  v34 = v12;
  LOBYTE(v43[0]) = 1;
  v22 = sub_6FD0(&qword_2629C8, (uint64_t (*)(uint64_t))&type metadata accessor for LocalizerRequest, (uint64_t)&protocol conformance descriptor for LocalizerRequest);
  KeyedDecodingContainer.decode<A>(_:forKey:)(v6, v19, v43, v20, v19, v22);
  v23 = v20;
  v24 = v10;
  (*(void (**)(char *, _QWORD *, uint64_t))(v18 + 32))(&v34[v10[5]], v6, v19);
  v45 = 2;
  v25 = sub_30268();
  KeyedDecodingContainer.decode<A>(_:forKey:)(v43, &type metadata for CodeAnyActionModel, &v45, v23, &type metadata for CodeAnyActionModel, v25);
  v26 = (uint64_t)v34;
  v27 = &v34[v10[6]];
  v28 = v43[1];
  *(_OWORD *)v27 = v43[0];
  *((_OWORD *)v27 + 1) = v28;
  *((_QWORD *)v27 + 4) = v44;
  LOBYTE(v43[0]) = 3;
  *(_BYTE *)(v26 + v10[7]) = KeyedDecodingContainer.decode(_:forKey:)(v43, v40) & 1;
  LOBYTE(v43[0]) = 4;
  v29 = KeyedDecodingContainer.decode(_:forKey:)(v43, v40);
  v33[1] = 0;
  *(_BYTE *)(v26 + v10[8]) = v29 & 1;
  LOBYTE(v43[0]) = 5;
  v30 = sub_6FD0(&qword_262A00, type metadata accessor for ToolbarActionMenuItemButtonType, (uint64_t)&protocol conformance descriptor for ToolbarActionMenuItemButtonType);
  v31 = v37;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v37, v36, v43, v40, v36, v30);
  (*(void (**)(char *, uint64_t))(v17 + 8))(v41, v40);
  sub_21C88((uint64_t)v31, v26 + v24[9], type metadata accessor for ToolbarActionMenuItemButtonType);
  sub_1E428(v26, v35, type metadata accessor for ToolbarActionMenuItem);
  _s7BooksUI13AnyPagedFrameVwxx_0(v42);
  return sub_224DC(v26, type metadata accessor for ToolbarActionMenuItem);
}

uint64_t sub_967E8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return ToolbarActionMenuItem.init(from:)(a1, a2);
}

void ToolbarItemType.id.getter()
{
  uint64_t v0;
  _BYTE v1[208];

  sub_969D0(v0, (uint64_t)v1);
  __asm { BR              X10 }
}

uint64_t sub_96834()
{
  uint64_t v1;

  sub_96A04((uint64_t)&v1);
  return 0x4D747865746E6F63;
}

void sub_96968(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  ToolbarItemType.id.getter();
  *a1 = v2;
  a1[1] = v3;
}

unint64_t sub_9698C()
{
  unint64_t result;

  result = qword_2629F8;
  if (!qword_2629F8)
  {
    result = swift_getWitnessTable(&unk_1E6908, &type metadata for ToolbarActionMenuItem.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2629F8);
  }
  return result;
}

uint64_t sub_969D0(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for ToolbarItemType(a2, a1);
  return a2;
}

uint64_t sub_96A04(uint64_t a1)
{
  destroy for ToolbarItemType(a1);
  return a1;
}

uint64_t sub_96A30@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = (uint64_t *)(a1 + *(int *)(type metadata accessor for ToolbarActionMenu(0) + 28));
  v4 = *v3;
  v5 = v3[1];
  *a2 = *v3;
  a2[1] = v5;
  return sub_64644(v4, v5);
}

uint64_t sub_96A6C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = (uint64_t *)(a1 + *(int *)(type metadata accessor for ToolbarActionMenu(0) + 32));
  v4 = *v3;
  v5 = v3[1];
  *a2 = *v3;
  a2[1] = v5;
  return sub_64644(v4, v5);
}

uint64_t *initializeBufferWithCopyOfBuffer for ToolbarActionMenu(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v15);
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for LocalizerRequest(0);
    v12 = *(_QWORD *)(v11 - 8);
    v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
    swift_bridgeObjectRetain(v7);
    if (v13(v10, 1, v11))
    {
      v14 = sub_5440(&qword_25E0C8);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
    v16 = a3[6];
    v17 = a3[7];
    v18 = *(uint64_t *)((char *)a2 + v16);
    *(uint64_t *)((char *)v4 + v16) = v18;
    v19 = (uint64_t *)((char *)v4 + v17);
    v20 = (char *)a2 + v17;
    v21 = *(uint64_t *)((char *)a2 + v17);
    swift_bridgeObjectRetain(v18);
    if (v21)
    {
      v22 = *((_QWORD *)v20 + 1);
      *v19 = v21;
      v19[1] = v22;
      swift_retain(v22);
    }
    else
    {
      *(_OWORD *)v19 = *(_OWORD *)v20;
    }
    v23 = a3[8];
    v24 = (uint64_t *)((char *)v4 + v23);
    v25 = (uint64_t *)((char *)a2 + v23);
    if (*v25)
    {
      v26 = v25[1];
      *v24 = *v25;
      v24[1] = v26;
      swift_retain(v26);
    }
    else
    {
      *(_OWORD *)v24 = *(_OWORD *)v25;
    }
  }
  return v4;
}

uint64_t destroy for ToolbarActionMenu(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  _QWORD *v8;
  _QWORD *v9;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  v4 = a1 + a2[5];
  v5 = type metadata accessor for LocalizerRequest(0);
  v6 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  result = swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[6]));
  v8 = (_QWORD *)(a1 + a2[7]);
  if (*v8)
    result = swift_release(v8[1]);
  v9 = (_QWORD *)(a1 + a2[8]);
  if (*v9)
    return swift_release(v9[1]);
  return result;
}

_QWORD *initializeWithCopy for ToolbarActionMenu(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(char *, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for LocalizerRequest(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  swift_bridgeObjectRetain(v6);
  if (v12(v9, 1, v10))
  {
    v13 = sub_5440(&qword_25E0C8);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  v14 = a3[6];
  v15 = a3[7];
  v16 = *(_QWORD *)((char *)a2 + v14);
  *(_QWORD *)((char *)a1 + v14) = v16;
  v17 = (_QWORD *)((char *)a1 + v15);
  v18 = (char *)a2 + v15;
  v19 = *(_QWORD *)((char *)a2 + v15);
  swift_bridgeObjectRetain(v16);
  if (v19)
  {
    v20 = *((_QWORD *)v18 + 1);
    *v17 = v19;
    v17[1] = v20;
    swift_retain(v20);
  }
  else
  {
    *(_OWORD *)v17 = *(_OWORD *)v18;
  }
  v21 = a3[8];
  v22 = (_QWORD *)((char *)a1 + v21);
  v23 = (_QWORD *)((char *)a2 + v21);
  if (*v23)
  {
    v24 = v23[1];
    *v22 = *v23;
    v22[1] = v24;
    swift_retain(v24);
  }
  else
  {
    *(_OWORD *)v22 = *(_OWORD *)v23;
  }
  return a1;
}

_QWORD *assignWithCopy for ToolbarActionMenu(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(char *, uint64_t, uint64_t);
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  *a1 = *a2;
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = a3[5];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for LocalizerRequest(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48);
  v14 = v13(v9, 1, v11);
  v15 = v13(v10, 1, v11);
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v15)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v9, v11);
LABEL_6:
    v16 = sub_5440(&qword_25E0C8);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 24))(v9, v10, v11);
LABEL_7:
  v17 = a3[6];
  v18 = *(_QWORD *)((char *)a2 + v17);
  v19 = *(_QWORD *)((char *)a1 + v17);
  *(_QWORD *)((char *)a1 + v17) = v18;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRelease(v19);
  v20 = a3[7];
  v21 = (_QWORD *)((char *)a1 + v20);
  v22 = (char *)a2 + v20;
  v23 = *(_QWORD *)((char *)a1 + v20);
  v24 = *(_QWORD *)((char *)a2 + v20);
  if (v23)
  {
    if (v24)
    {
      v25 = *((_QWORD *)v22 + 1);
      v26 = v21[1];
      *v21 = v24;
      v21[1] = v25;
      swift_retain(v25);
      swift_release(v26);
      goto LABEL_14;
    }
    swift_release(v21[1]);
  }
  else if (v24)
  {
    v27 = *((_QWORD *)v22 + 1);
    *v21 = v24;
    v21[1] = v27;
    swift_retain(v27);
    goto LABEL_14;
  }
  *(_OWORD *)v21 = *(_OWORD *)v22;
LABEL_14:
  v28 = a3[8];
  v29 = (_QWORD *)((char *)a1 + v28);
  v30 = (_QWORD *)((char *)a2 + v28);
  v31 = *(_QWORD *)((char *)a1 + v28);
  v32 = *v30;
  if (!v31)
  {
    if (v32)
    {
      v35 = v30[1];
      *v29 = v32;
      v29[1] = v35;
      swift_retain(v35);
      return a1;
    }
LABEL_20:
    *(_OWORD *)v29 = *(_OWORD *)v30;
    return a1;
  }
  if (!v32)
  {
    swift_release(v29[1]);
    goto LABEL_20;
  }
  v33 = v30[1];
  v34 = v29[1];
  *v29 = v32;
  v29[1] = v33;
  swift_retain(v33);
  swift_release(v34);
  return a1;
}

_OWORD *initializeWithTake for ToolbarActionMenu(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for LocalizerRequest(0);
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    v11 = sub_5440(&qword_25E0C8);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  v12 = a3[7];
  *(_QWORD *)((char *)a1 + a3[6]) = *(_QWORD *)((char *)a2 + a3[6]);
  *(_OWORD *)((char *)a1 + v12) = *(_OWORD *)((char *)a2 + v12);
  *(_OWORD *)((char *)a1 + a3[8]) = *(_OWORD *)((char *)a2 + a3[8]);
  return a1;
}

_QWORD *assignWithTake for ToolbarActionMenu(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(char *, uint64_t, uint64_t);
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v6 = a2[1];
  v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = a3[5];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for LocalizerRequest(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48);
  v14 = v13(v9, 1, v11);
  v15 = v13(v10, 1, v11);
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v9, v10, v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v15)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v9, v11);
LABEL_6:
    v16 = sub_5440(&qword_25E0C8);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 40))(v9, v10, v11);
LABEL_7:
  v17 = a3[6];
  v18 = *(_QWORD *)((char *)a1 + v17);
  *(_QWORD *)((char *)a1 + v17) = *(_QWORD *)((char *)a2 + v17);
  swift_bridgeObjectRelease(v18);
  v19 = a3[7];
  v20 = (_QWORD *)((char *)a1 + v19);
  v21 = (char *)a2 + v19;
  v22 = *(_QWORD *)((char *)a1 + v19);
  v23 = *(_QWORD *)((char *)a2 + v19);
  if (v22)
  {
    if (v23)
    {
      v24 = *((_QWORD *)v21 + 1);
      v25 = v20[1];
      *v20 = v23;
      v20[1] = v24;
      swift_release(v25);
      goto LABEL_14;
    }
    swift_release(v20[1]);
  }
  else if (v23)
  {
    v26 = *((_QWORD *)v21 + 1);
    *v20 = v23;
    v20[1] = v26;
    goto LABEL_14;
  }
  *(_OWORD *)v20 = *(_OWORD *)v21;
LABEL_14:
  v27 = a3[8];
  v28 = (_QWORD *)((char *)a1 + v27);
  v29 = (_QWORD *)((char *)a2 + v27);
  v30 = *(_QWORD *)((char *)a1 + v27);
  v31 = *v29;
  if (!v30)
  {
    if (v31)
    {
      v34 = v29[1];
      *v28 = v31;
      v28[1] = v34;
      return a1;
    }
LABEL_20:
    *(_OWORD *)v28 = *(_OWORD *)v29;
    return a1;
  }
  if (!v31)
  {
    swift_release(v28[1]);
    goto LABEL_20;
  }
  v32 = v29[1];
  v33 = v28[1];
  *v28 = v31;
  v28[1] = v32;
  swift_release(v33);
  return a1;
}

uint64_t getEnumTagSinglePayload for ToolbarActionMenu(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_972F0);
}

uint64_t sub_972F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_5440(&qword_25E0C8);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for ToolbarActionMenu(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_9737C);
}

uint64_t sub_9737C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = sub_5440(&qword_25E0C8);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 20), a2, a2, v7);
  }
  return result;
}

void sub_973F4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[5];

  v4[0] = &unk_1E6698;
  sub_97480(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(v2 - 8) + 64;
    v4[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[3] = &unk_1E66B0;
    v4[4] = &unk_1E66B0;
    swift_initStructMetadata(a1, 256, 5, v4, a1 + 16);
  }
}

void sub_97480(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_261BA0)
  {
    v2 = type metadata accessor for LocalizerRequest(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_261BA0);
  }
}

_QWORD *initializeBufferWithCopyOfBuffer for ToolbarActionMenuItem(_QWORD *a1, _QWORD *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  int EnumCaseMultiPayload;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v26 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v26 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v26);
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for LocalizerRequest(0);
    v12 = *(_QWORD *)(v11 - 8);
    v13 = *(void (**)(char *, char *, uint64_t))(v12 + 16);
    swift_bridgeObjectRetain(v7);
    v13(v9, v10, v11);
    v14 = a3[6];
    v15 = *(_OWORD *)((char *)a2 + v14 + 24);
    *(_OWORD *)((char *)v4 + v14 + 24) = v15;
    (**(void (***)(void))(v15 - 8))();
    v16 = a3[8];
    *((_BYTE *)v4 + a3[7]) = *((_BYTE *)a2 + a3[7]);
    *((_BYTE *)v4 + v16) = *((_BYTE *)a2 + v16);
    v17 = a3[9];
    v18 = (char *)v4 + v17;
    v19 = (char *)a2 + v17;
    v20 = type metadata accessor for ToolbarActionMenuItemButtonType(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v19, v20);
    if (EnumCaseMultiPayload == 2)
    {
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v19, 1, v11))
      {
        v27 = sub_5440(&qword_25E0C8);
        memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
      }
      else
      {
        v13(v18, v19, v11);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v18, 0, 1, v11);
      }
      v28 = sub_5440(&qword_262AA8);
      v29 = *(int *)(v28 + 48);
      v30 = &v18[v29];
      v31 = &v19[v29];
      v33 = *(_QWORD *)v31;
      v32 = *((_QWORD *)v31 + 1);
      *(_QWORD *)v30 = v33;
      *((_QWORD *)v30 + 1) = v32;
      v34 = *(int *)(v28 + 64);
      v35 = &v18[v34];
      v36 = &v19[v34];
      v37 = *((_QWORD *)v36 + 3);
      swift_bridgeObjectRetain(v32);
      if (v37)
      {
        v38 = *((_QWORD *)v36 + 4);
        *((_QWORD *)v35 + 3) = v37;
        *((_QWORD *)v35 + 4) = v38;
        (**(void (***)(char *, char *, uint64_t))(v37 - 8))(v35, v36, v37);
      }
      else
      {
        v39 = *((_OWORD *)v36 + 1);
        *(_OWORD *)v35 = *(_OWORD *)v36;
        *((_OWORD *)v35 + 1) = v39;
        *((_QWORD *)v35 + 4) = *((_QWORD *)v36 + 4);
      }
      v23 = v18;
      v24 = v20;
      v25 = 2;
      goto LABEL_14;
    }
    if (EnumCaseMultiPayload == 1)
    {
      v22 = type metadata accessor for URL(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v18, v19, v22);
      v23 = v18;
      v24 = v20;
      v25 = 1;
LABEL_14:
      swift_storeEnumTagMultiPayload(v23, v24, v25);
      return v4;
    }
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
  }
  return v4;
}

_QWORD *destroy for ToolbarActionMenuItem(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  _QWORD *result;
  uint64_t v11;
  uint64_t v12;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  v4 = a1 + a2[5];
  v5 = type metadata accessor for LocalizerRequest(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v7(v4, v5);
  _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)(a1 + a2[6]));
  v8 = a1 + a2[9];
  v9 = type metadata accessor for ToolbarActionMenuItemButtonType(0);
  result = (_QWORD *)swift_getEnumCaseMultiPayload(v8, v9);
  if ((_DWORD)result == 2)
  {
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v8, 1, v5))
      v7(v8, v5);
    v12 = sub_5440(&qword_262AA8);
    swift_bridgeObjectRelease(*(_QWORD *)(v8 + *(int *)(v12 + 48) + 8));
    result = (_QWORD *)(v8 + *(int *)(v12 + 64));
    if (result[3])
      return (_QWORD *)_s7BooksUI13AnyPagedFrameVwxx_0(result);
  }
  else if ((_DWORD)result == 1)
  {
    v11 = type metadata accessor for URL(0);
    return (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v8, v11);
  }
  return result;
}

_QWORD *initializeWithCopy for ToolbarActionMenuItem(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  int EnumCaseMultiPayload;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for LocalizerRequest(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(void (**)(char *, char *, uint64_t))(v11 + 16);
  swift_bridgeObjectRetain(v6);
  v12(v8, v9, v10);
  v13 = a3[6];
  v14 = *(_OWORD *)((char *)a2 + v13 + 24);
  *(_OWORD *)((char *)a1 + v13 + 24) = v14;
  (**(void (***)(void))(v14 - 8))();
  v15 = a3[8];
  *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
  *((_BYTE *)a1 + v15) = *((_BYTE *)a2 + v15);
  v16 = a3[9];
  v17 = (char *)a1 + v16;
  v18 = (char *)a2 + v16;
  v19 = type metadata accessor for ToolbarActionMenuItemButtonType(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v18, v19);
  if (EnumCaseMultiPayload == 2)
  {
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v18, 1, v10))
    {
      v25 = sub_5440(&qword_25E0C8);
      memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    }
    else
    {
      v12(v17, v18, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v17, 0, 1, v10);
    }
    v26 = sub_5440(&qword_262AA8);
    v27 = *(int *)(v26 + 48);
    v28 = &v17[v27];
    v29 = &v18[v27];
    v31 = *(_QWORD *)v29;
    v30 = *((_QWORD *)v29 + 1);
    *(_QWORD *)v28 = v31;
    *((_QWORD *)v28 + 1) = v30;
    v32 = *(int *)(v26 + 64);
    v33 = &v17[v32];
    v34 = &v18[v32];
    v35 = *((_QWORD *)v34 + 3);
    swift_bridgeObjectRetain(v30);
    if (v35)
    {
      v36 = *((_QWORD *)v34 + 4);
      *((_QWORD *)v33 + 3) = v35;
      *((_QWORD *)v33 + 4) = v36;
      (**(void (***)(char *, char *, uint64_t))(v35 - 8))(v33, v34, v35);
    }
    else
    {
      v37 = *((_OWORD *)v34 + 1);
      *(_OWORD *)v33 = *(_OWORD *)v34;
      *((_OWORD *)v33 + 1) = v37;
      *((_QWORD *)v33 + 4) = *((_QWORD *)v34 + 4);
    }
    v22 = v17;
    v23 = v19;
    v24 = 2;
    goto LABEL_12;
  }
  if (EnumCaseMultiPayload == 1)
  {
    v21 = type metadata accessor for URL(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v17, v18, v21);
    v22 = v17;
    v23 = v19;
    v24 = 1;
LABEL_12:
    swift_storeEnumTagMultiPayload(v22, v23, v24);
    return a1;
  }
  memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  return a1;
}

_QWORD *assignWithCopy for ToolbarActionMenuItem(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  int EnumCaseMultiPayload;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;

  *a1 = *a2;
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = a3[5];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for LocalizerRequest(0);
  v12 = *(_QWORD *)(v11 - 8);
  (*(void (**)(char *, char *, uint64_t))(v12 + 24))(v9, v10, v11);
  sub_142F8((_QWORD *)((char *)a1 + a3[6]), (_QWORD *)((char *)a2 + a3[6]));
  *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  if (a1 != a2)
  {
    v13 = a3[9];
    v14 = (char *)a1 + v13;
    v15 = (char *)a2 + v13;
    sub_224DC((uint64_t)a1 + v13, type metadata accessor for ToolbarActionMenuItemButtonType);
    v16 = type metadata accessor for ToolbarActionMenuItemButtonType(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v15, v16);
    if (EnumCaseMultiPayload == 2)
    {
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v15, 1, v11))
      {
        v22 = sub_5440(&qword_25E0C8);
        memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v14, v15, v11);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v14, 0, 1, v11);
      }
      v23 = sub_5440(&qword_262AA8);
      v24 = *(int *)(v23 + 48);
      v25 = &v14[v24];
      v26 = &v15[v24];
      *(_QWORD *)v25 = *(_QWORD *)v26;
      v27 = *((_QWORD *)v26 + 1);
      *((_QWORD *)v25 + 1) = v27;
      v28 = *(int *)(v23 + 64);
      v29 = &v14[v28];
      v30 = &v15[v28];
      v31 = *((_QWORD *)v30 + 3);
      swift_bridgeObjectRetain(v27);
      if (v31)
      {
        *((_QWORD *)v29 + 3) = v31;
        *((_QWORD *)v29 + 4) = *((_QWORD *)v30 + 4);
        (**(void (***)(char *, char *, uint64_t))(v31 - 8))(v29, v30, v31);
      }
      else
      {
        v32 = *(_OWORD *)v30;
        v33 = *((_OWORD *)v30 + 1);
        *((_QWORD *)v29 + 4) = *((_QWORD *)v30 + 4);
        *(_OWORD *)v29 = v32;
        *((_OWORD *)v29 + 1) = v33;
      }
      v19 = v14;
      v20 = v16;
      v21 = 2;
      goto LABEL_13;
    }
    if (EnumCaseMultiPayload == 1)
    {
      v18 = type metadata accessor for URL(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v14, v15, v18);
      v19 = v14;
      v20 = v16;
      v21 = 1;
LABEL_13:
      swift_storeEnumTagMultiPayload(v19, v20, v21);
      return a1;
    }
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  return a1;
}

_OWORD *initializeWithTake for ToolbarActionMenuItem(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  int EnumCaseMultiPayload;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  __int128 v32;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for LocalizerRequest(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
  v11(v7, v8, v9);
  v12 = a3[6];
  v13 = a3[7];
  v14 = (char *)a1 + v12;
  v15 = (char *)a2 + v12;
  v16 = *(_OWORD *)v15;
  v17 = *((_OWORD *)v15 + 1);
  *((_QWORD *)v14 + 4) = *((_QWORD *)v15 + 4);
  *(_OWORD *)v14 = v16;
  *((_OWORD *)v14 + 1) = v17;
  *((_BYTE *)a1 + v13) = *((_BYTE *)a2 + v13);
  v18 = a3[9];
  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  v19 = (char *)a1 + v18;
  v20 = (char *)a2 + v18;
  v21 = type metadata accessor for ToolbarActionMenuItemButtonType(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v20, v21);
  if (EnumCaseMultiPayload == 2)
  {
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v20, 1, v9))
    {
      v27 = sub_5440(&qword_25E0C8);
      memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    }
    else
    {
      v11(v19, v20, v9);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v19, 0, 1, v9);
    }
    v28 = sub_5440(&qword_262AA8);
    *(_OWORD *)&v19[*(int *)(v28 + 48)] = *(_OWORD *)&v20[*(int *)(v28 + 48)];
    v29 = *(int *)(v28 + 64);
    v30 = &v19[v29];
    v31 = &v20[v29];
    *((_QWORD *)v30 + 4) = *((_QWORD *)v31 + 4);
    v32 = *((_OWORD *)v31 + 1);
    *(_OWORD *)v30 = *(_OWORD *)v31;
    *((_OWORD *)v30 + 1) = v32;
    v24 = v19;
    v25 = v21;
    v26 = 2;
    goto LABEL_9;
  }
  if (EnumCaseMultiPayload == 1)
  {
    v23 = type metadata accessor for URL(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 32))(v19, v20, v23);
    v24 = v19;
    v25 = v21;
    v26 = 1;
LABEL_9:
    swift_storeEnumTagMultiPayload(v24, v25, v26);
    return a1;
  }
  memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
  return a1;
}

_QWORD *assignWithTake for ToolbarActionMenuItem(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  int EnumCaseMultiPayload;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  __int128 v32;

  v6 = a2[1];
  v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = a3[5];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for LocalizerRequest(0);
  v12 = *(_QWORD *)(v11 - 8);
  (*(void (**)(char *, char *, uint64_t))(v12 + 40))(v9, v10, v11);
  v13 = a3[6];
  v14 = (char *)a1 + v13;
  v15 = (char *)a2 + v13;
  _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)((char *)a1 + v13));
  v16 = *((_OWORD *)v15 + 1);
  *(_OWORD *)v14 = *(_OWORD *)v15;
  *((_OWORD *)v14 + 1) = v16;
  *((_QWORD *)v14 + 4) = *((_QWORD *)v15 + 4);
  v17 = a3[8];
  *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
  *((_BYTE *)a1 + v17) = *((_BYTE *)a2 + v17);
  if (a1 != a2)
  {
    v18 = a3[9];
    v19 = (char *)a1 + v18;
    v20 = (char *)a2 + v18;
    sub_224DC((uint64_t)a1 + v18, type metadata accessor for ToolbarActionMenuItemButtonType);
    v21 = type metadata accessor for ToolbarActionMenuItemButtonType(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v20, v21);
    if (EnumCaseMultiPayload == 2)
    {
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v20, 1, v11))
      {
        v27 = sub_5440(&qword_25E0C8);
        memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v19, v20, v11);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v19, 0, 1, v11);
      }
      v28 = sub_5440(&qword_262AA8);
      *(_OWORD *)&v19[*(int *)(v28 + 48)] = *(_OWORD *)&v20[*(int *)(v28 + 48)];
      v29 = *(int *)(v28 + 64);
      v30 = &v19[v29];
      v31 = &v20[v29];
      *((_QWORD *)v30 + 4) = *((_QWORD *)v31 + 4);
      v32 = *((_OWORD *)v31 + 1);
      *(_OWORD *)v30 = *(_OWORD *)v31;
      *((_OWORD *)v30 + 1) = v32;
      v24 = v19;
      v25 = v21;
      v26 = 2;
      goto LABEL_10;
    }
    if (EnumCaseMultiPayload == 1)
    {
      v23 = type metadata accessor for URL(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 32))(v19, v20, v23);
      v24 = v19;
      v25 = v21;
      v26 = 1;
LABEL_10:
      swift_storeEnumTagMultiPayload(v24, v25, v26);
      return a1;
    }
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for ToolbarActionMenuItem(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_98078);
}

uint64_t sub_98078(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for LocalizerRequest(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 20);
    }
    else
    {
      v10 = type metadata accessor for ToolbarActionMenuItemButtonType(0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 36);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for ToolbarActionMenuItem(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_98124);
}

uint64_t sub_98124(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for LocalizerRequest(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 20);
    }
    else
    {
      v10 = type metadata accessor for ToolbarActionMenuItemButtonType(0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 36);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

uint64_t sub_981C0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[6];

  v5[0] = &unk_1E6698;
  result = type metadata accessor for LocalizerRequest(319);
  if (v3 <= 0x3F)
  {
    v5[1] = *(_QWORD *)(result - 8) + 64;
    v5[2] = "(";
    v5[3] = &unk_1E6700;
    v5[4] = &unk_1E6700;
    result = type metadata accessor for ToolbarActionMenuItemButtonType(319);
    if (v4 <= 0x3F)
    {
      v5[5] = *(_QWORD *)(result - 8) + 64;
      swift_initStructMetadata(a1, 256, 6, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for ToolbarActionMenuItemButtonType(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  int EnumCaseMultiPayload;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain(v13);
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 2)
    {
      v14 = type metadata accessor for LocalizerRequest(0);
      v15 = *(_QWORD *)(v14 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v15 + 48))(a2, 1, v14))
      {
        v16 = sub_5440(&qword_25E0C8);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v15 + 16))(a1, a2, v14);
        (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v15 + 56))(a1, 0, 1, v14);
      }
      v17 = sub_5440(&qword_262AA8);
      v18 = *(int *)(v17 + 48);
      v19 = (uint64_t *)((char *)a1 + v18);
      v20 = (uint64_t *)((char *)a2 + v18);
      v22 = *v20;
      v21 = v20[1];
      *v19 = v22;
      v19[1] = v21;
      v23 = *(int *)(v17 + 64);
      v24 = (char *)a1 + v23;
      v25 = (char *)a2 + v23;
      v26 = *((_QWORD *)v25 + 3);
      swift_bridgeObjectRetain(v21);
      if (v26)
      {
        v27 = *((_QWORD *)v25 + 4);
        *((_QWORD *)v24 + 3) = v26;
        *((_QWORD *)v24 + 4) = v27;
        (**(void (***)(char *, char *, uint64_t))(v26 - 8))(v24, v25, v26);
      }
      else
      {
        v28 = *((_OWORD *)v25 + 1);
        *(_OWORD *)v24 = *(_OWORD *)v25;
        *((_OWORD *)v24 + 1) = v28;
        *((_QWORD *)v24 + 4) = *((_QWORD *)v25 + 4);
      }
      v10 = a1;
      v11 = a3;
      v12 = 2;
      goto LABEL_14;
    }
    if (EnumCaseMultiPayload == 1)
    {
      v9 = type metadata accessor for URL(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a1, a2, v9);
      v10 = a1;
      v11 = a3;
      v12 = 1;
LABEL_14:
      swift_storeEnumTagMultiPayload(v10, v11, v12);
      return a1;
    }
    memcpy(a1, a2, *(_QWORD *)(v5 + 64));
  }
  return a1;
}

_QWORD *destroy for ToolbarActionMenuItemButtonType(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = (_QWORD *)swift_getEnumCaseMultiPayload(a1, a2);
  if ((_DWORD)result == 2)
  {
    v5 = type metadata accessor for LocalizerRequest(0);
    v6 = *(_QWORD *)(v5 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, 1, v5))
      (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    v7 = sub_5440(&qword_262AA8);
    swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(v7 + 48) + 8));
    result = (_QWORD *)(a1 + *(int *)(v7 + 64));
    if (result[3])
      return (_QWORD *)_s7BooksUI13AnyPagedFrameVwxx_0(result);
  }
  else if ((_DWORD)result == 1)
  {
    v4 = type metadata accessor for URL(0);
    return (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  }
  return result;
}

char *initializeWithCopy for ToolbarActionMenuItemButtonType(char *a1, char *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  if (EnumCaseMultiPayload == 2)
  {
    v11 = type metadata accessor for LocalizerRequest(0);
    v12 = *(_QWORD *)(v11 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(a2, 1, v11))
    {
      v13 = sub_5440(&qword_25E0C8);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(a1, a2, v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(a1, 0, 1, v11);
    }
    v14 = sub_5440(&qword_262AA8);
    v15 = *(int *)(v14 + 48);
    v16 = &a1[v15];
    v17 = &a2[v15];
    v19 = *(_QWORD *)v17;
    v18 = *((_QWORD *)v17 + 1);
    *(_QWORD *)v16 = v19;
    *((_QWORD *)v16 + 1) = v18;
    v20 = *(int *)(v14 + 64);
    v21 = &a1[v20];
    v22 = &a2[v20];
    v23 = *((_QWORD *)v22 + 3);
    swift_bridgeObjectRetain(v18);
    if (v23)
    {
      v24 = *((_QWORD *)v22 + 4);
      *((_QWORD *)v21 + 3) = v23;
      *((_QWORD *)v21 + 4) = v24;
      (**(void (***)(char *, char *, uint64_t))(v23 - 8))(v21, v22, v23);
    }
    else
    {
      v25 = *((_OWORD *)v22 + 1);
      *(_OWORD *)v21 = *(_OWORD *)v22;
      *((_OWORD *)v21 + 1) = v25;
      *((_QWORD *)v21 + 4) = *((_QWORD *)v22 + 4);
    }
    v8 = a1;
    v9 = a3;
    v10 = 2;
    goto LABEL_12;
  }
  if (EnumCaseMultiPayload == 1)
  {
    v7 = type metadata accessor for URL(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a1;
    v9 = a3;
    v10 = 1;
LABEL_12:
    swift_storeEnumTagMultiPayload(v8, v9, v10);
    return a1;
  }
  memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  return a1;
}

char *assignWithCopy for ToolbarActionMenuItemButtonType(char *a1, char *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;

  if (a1 != a2)
  {
    sub_224DC((uint64_t)a1, type metadata accessor for ToolbarActionMenuItemButtonType);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 2)
    {
      v11 = type metadata accessor for LocalizerRequest(0);
      v12 = *(_QWORD *)(v11 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(a2, 1, v11))
      {
        v13 = sub_5440(&qword_25E0C8);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v12 + 16))(a1, a2, v11);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(a1, 0, 1, v11);
      }
      v14 = sub_5440(&qword_262AA8);
      v15 = *(int *)(v14 + 48);
      v16 = &a1[v15];
      v17 = &a2[v15];
      *(_QWORD *)v16 = *(_QWORD *)v17;
      v18 = *((_QWORD *)v17 + 1);
      *((_QWORD *)v16 + 1) = v18;
      v19 = *(int *)(v14 + 64);
      v20 = &a1[v19];
      v21 = &a2[v19];
      v22 = *((_QWORD *)v21 + 3);
      swift_bridgeObjectRetain(v18);
      if (v22)
      {
        *((_QWORD *)v20 + 3) = v22;
        *((_QWORD *)v20 + 4) = *((_QWORD *)v21 + 4);
        (**(void (***)(char *, char *, uint64_t))(v22 - 8))(v20, v21, v22);
      }
      else
      {
        v23 = *(_OWORD *)v21;
        v24 = *((_OWORD *)v21 + 1);
        *((_QWORD *)v20 + 4) = *((_QWORD *)v21 + 4);
        *(_OWORD *)v20 = v23;
        *((_OWORD *)v20 + 1) = v24;
      }
      v8 = a1;
      v9 = a3;
      v10 = 2;
      goto LABEL_13;
    }
    if (EnumCaseMultiPayload == 1)
    {
      v7 = type metadata accessor for URL(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = a3;
      v10 = 1;
LABEL_13:
      swift_storeEnumTagMultiPayload(v8, v9, v10);
      return a1;
    }
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

char *initializeWithTake for ToolbarActionMenuItemButtonType(char *a1, char *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  __int128 v18;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  if (EnumCaseMultiPayload == 2)
  {
    v11 = type metadata accessor for LocalizerRequest(0);
    v12 = *(_QWORD *)(v11 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(a2, 1, v11))
    {
      v13 = sub_5440(&qword_25E0C8);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 32))(a1, a2, v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(a1, 0, 1, v11);
    }
    v14 = sub_5440(&qword_262AA8);
    *(_OWORD *)&a1[*(int *)(v14 + 48)] = *(_OWORD *)&a2[*(int *)(v14 + 48)];
    v15 = *(int *)(v14 + 64);
    v16 = &a1[v15];
    v17 = &a2[v15];
    *((_QWORD *)v16 + 4) = *((_QWORD *)v17 + 4);
    v18 = *((_OWORD *)v17 + 1);
    *(_OWORD *)v16 = *(_OWORD *)v17;
    *((_OWORD *)v16 + 1) = v18;
    v8 = a1;
    v9 = a3;
    v10 = 2;
    goto LABEL_9;
  }
  if (EnumCaseMultiPayload == 1)
  {
    v7 = type metadata accessor for URL(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    v8 = a1;
    v9 = a3;
    v10 = 1;
LABEL_9:
    swift_storeEnumTagMultiPayload(v8, v9, v10);
    return a1;
  }
  memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  return a1;
}

char *assignWithTake for ToolbarActionMenuItemButtonType(char *a1, char *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  __int128 v18;

  if (a1 != a2)
  {
    sub_224DC((uint64_t)a1, type metadata accessor for ToolbarActionMenuItemButtonType);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 2)
    {
      v11 = type metadata accessor for LocalizerRequest(0);
      v12 = *(_QWORD *)(v11 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(a2, 1, v11))
      {
        v13 = sub_5440(&qword_25E0C8);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v12 + 32))(a1, a2, v11);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(a1, 0, 1, v11);
      }
      v14 = sub_5440(&qword_262AA8);
      *(_OWORD *)&a1[*(int *)(v14 + 48)] = *(_OWORD *)&a2[*(int *)(v14 + 48)];
      v15 = *(int *)(v14 + 64);
      v16 = &a1[v15];
      v17 = &a2[v15];
      *((_QWORD *)v16 + 4) = *((_QWORD *)v17 + 4);
      v18 = *((_OWORD *)v17 + 1);
      *(_OWORD *)v16 = *(_OWORD *)v17;
      *((_OWORD *)v16 + 1) = v18;
      v8 = a1;
      v9 = a3;
      v10 = 2;
      goto LABEL_10;
    }
    if (EnumCaseMultiPayload == 1)
    {
      v7 = type metadata accessor for URL(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      v8 = a1;
      v9 = a3;
      v10 = 1;
LABEL_10:
      swift_storeEnumTagMultiPayload(v8, v9, v10);
      return a1;
    }
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

void sub_98B0C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _BYTE v6[32];
  _QWORD v7[3];

  v7[0] = &unk_1E6700;
  v2 = type metadata accessor for URL(319);
  if (v3 <= 0x3F)
  {
    v7[1] = *(_QWORD *)(v2 - 8) + 64;
    sub_97480(319);
    if (v5 <= 0x3F)
    {
      swift_getTupleTypeLayout3(v6, *(_QWORD *)(v4 - 8) + 64, &unk_1E66B0, "(");
      v7[2] = v6;
      swift_initEnumMetadataMultiPayload(a1, 256, 3, v7);
    }
  }
}

void destroy for ToolbarItemType(uint64_t a1)
{
  int v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(unsigned __int8 *)(a1 + 201);
  while (2)
  {
    switch(v2)
    {
      case 0:
        v4 = *(_QWORD *)(a1 + 8);
        goto LABEL_14;
      case 1:
        swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
        _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)(a1 + 16));
        swift_release(*(_QWORD *)(a1 + 56));
        return;
      case 2:
        swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
        v3 = (_QWORD *)(a1 + 16);
        goto LABEL_8;
      case 3:
      case 5:
        v3 = (_QWORD *)(a1 + 8);
LABEL_8:
        _s7BooksUI13AnyPagedFrameVwxx_0(v3);
        break;
      case 4:
        if (!*(_BYTE *)(a1 + 56))
          _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)a1);
        swift_bridgeObjectRelease(*(_QWORD *)(a1 + 104));
        v5 = *(_QWORD *)(a1 + 120);
        if (v5)
        {
          swift_bridgeObjectRelease(v5);
          swift_bridgeObjectRelease(*(_QWORD *)(a1 + 136));
          swift_bridgeObjectRelease(*(_QWORD *)(a1 + 160));
        }
        swift_bridgeObjectRelease(*(_QWORD *)(a1 + 176));
        v4 = *(_QWORD *)(a1 + 192);
LABEL_14:
        swift_bridgeObjectRelease(v4);
        break;
      default:
        v2 = *(_DWORD *)a1 + 6;
        continue;
    }
    break;
  }
}

uint64_t initializeWithCopy for ToolbarItemType(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t);
  char v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;

  v4 = *(unsigned __int8 *)(a2 + 201);
  while (2)
  {
    switch(v4)
    {
      case 0:
        *(_BYTE *)a1 = *(_BYTE *)a2;
        v5 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a1 + 8) = v5;
        *(_BYTE *)(a1 + 201) = 0;
        goto LABEL_17;
      case 1:
        v6 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_QWORD *)(a1 + 8) = v6;
        v7 = *(_OWORD *)(a2 + 40);
        *(_OWORD *)(a1 + 40) = v7;
        v8 = v7;
        v9 = **(void (***)(uint64_t, uint64_t, uint64_t))(v7 - 8);
        swift_bridgeObjectRetain(v6);
        v9(a1 + 16, a2 + 16, v8);
        v10 = *(_QWORD *)(a2 + 56);
        *(_QWORD *)(a1 + 56) = v10;
        *(_BYTE *)(a1 + 201) = 1;
        swift_retain(v10);
        return a1;
      case 2:
        v11 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_QWORD *)(a1 + 8) = v11;
        v12 = a2 + 16;
        v13 = *(_OWORD *)(a2 + 40);
        *(_OWORD *)(a1 + 40) = v13;
        v14 = v13;
        v15 = **(void (***)(uint64_t, uint64_t, uint64_t))(v13 - 8);
        swift_bridgeObjectRetain(v11);
        v15(a1 + 16, v12, v14);
        v16 = 2;
        goto LABEL_11;
      case 3:
        *(_QWORD *)a1 = *(_QWORD *)a2;
        v17 = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 32) = v17;
        (**(void (***)(uint64_t, uint64_t))(v17 - 8))(a1 + 8, a2 + 8);
        v16 = 3;
        goto LABEL_11;
      case 4:
        if (*(_BYTE *)(a2 + 56))
        {
          v18 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_OWORD *)(a1 + 16) = v18;
          *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
          *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
        }
        else
        {
          v20 = *(_OWORD *)(a2 + 24);
          *(_OWORD *)(a1 + 24) = v20;
          (**(void (***)(uint64_t, uint64_t))(v20 - 8))(a1, a2);
          *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
          *(_BYTE *)(a1 + 56) = 0;
        }
        *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
        *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
        *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
        v21 = *(_QWORD *)(a2 + 104);
        *(_QWORD *)(a1 + 104) = v21;
        v22 = *(_QWORD *)(a2 + 120);
        swift_bridgeObjectRetain(v21);
        if (v22)
        {
          *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
          *(_QWORD *)(a1 + 120) = v22;
          v23 = *(_QWORD *)(a2 + 136);
          *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
          *(_QWORD *)(a1 + 136) = v23;
          *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
          v24 = *(_QWORD *)(a2 + 160);
          *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
          *(_QWORD *)(a1 + 160) = v24;
          swift_bridgeObjectRetain(v22);
          swift_bridgeObjectRetain(v23);
          swift_bridgeObjectRetain(v24);
        }
        else
        {
          v25 = *(_OWORD *)(a2 + 128);
          *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
          *(_OWORD *)(a1 + 128) = v25;
          *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
          *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
        }
        v26 = *(_QWORD *)(a2 + 176);
        *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
        *(_QWORD *)(a1 + 176) = v26;
        v27 = *(_QWORD *)(a2 + 192);
        *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
        *(_QWORD *)(a1 + 192) = v27;
        *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
        *(_BYTE *)(a1 + 201) = 4;
        swift_bridgeObjectRetain(v26);
        v5 = v27;
LABEL_17:
        swift_bridgeObjectRetain(v5);
        break;
      case 5:
        *(_BYTE *)a1 = *(_BYTE *)a2;
        v19 = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 32) = v19;
        (**(void (***)(uint64_t, uint64_t))(v19 - 8))(a1 + 8, a2 + 8);
        v16 = 5;
LABEL_11:
        *(_BYTE *)(a1 + 201) = v16;
        break;
      default:
        v4 = *(_DWORD *)a2 + 6;
        continue;
    }
    return a1;
  }
}

uint64_t assignWithCopy for ToolbarItemType(uint64_t a1, __int128 *a2)
{
  int v4;
  _QWORD *v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  __int128 *v16;
  uint64_t v17;
  void (*v18)(uint64_t, __int128 *, uint64_t);
  char v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;

  if ((__int128 *)a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 201);
    while (2)
    {
      switch(v4)
      {
        case 0:
          v6 = *(_QWORD *)(a1 + 8);
          goto LABEL_15;
        case 1:
          swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
          _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)(a1 + 16));
          v7 = swift_release(*(_QWORD *)(a1 + 56));
          break;
        case 2:
          swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
          v5 = (_QWORD *)(a1 + 16);
          goto LABEL_9;
        case 3:
        case 5:
          v5 = (_QWORD *)(a1 + 8);
LABEL_9:
          _s7BooksUI13AnyPagedFrameVwxx_0(v5);
          break;
        case 4:
          if (!*(_BYTE *)(a1 + 56))
            _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)a1);
          swift_bridgeObjectRelease(*(_QWORD *)(a1 + 104));
          v8 = *(_QWORD *)(a1 + 120);
          if (v8)
          {
            swift_bridgeObjectRelease(v8);
            swift_bridgeObjectRelease(*(_QWORD *)(a1 + 136));
            swift_bridgeObjectRelease(*(_QWORD *)(a1 + 160));
          }
          swift_bridgeObjectRelease(*(_QWORD *)(a1 + 176));
          v6 = *(_QWORD *)(a1 + 192);
LABEL_15:
          swift_bridgeObjectRelease(v6);
          break;
        default:
          v4 = *(_DWORD *)a1 + 6;
          continue;
      }
      break;
    }
    v9 = *((unsigned __int8 *)a2 + 201);
    while (2)
    {
      switch(v9)
      {
        case 0:
          *(_BYTE *)a1 = *(_BYTE *)a2;
          v10 = *((_QWORD *)a2 + 1);
          *(_QWORD *)(a1 + 8) = v10;
          *(_BYTE *)(a1 + 201) = 0;
          goto LABEL_32;
        case 1:
          *(_QWORD *)a1 = *(_QWORD *)a2;
          v11 = *((_QWORD *)a2 + 1);
          *(_QWORD *)(a1 + 8) = v11;
          v12 = *((_QWORD *)a2 + 5);
          *(_QWORD *)(a1 + 40) = v12;
          *(_QWORD *)(a1 + 48) = *((_QWORD *)a2 + 6);
          v13 = **(void (***)(uint64_t, uint64_t, uint64_t))(v12 - 8);
          swift_bridgeObjectRetain(v11);
          v13(a1 + 16, (uint64_t)(a2 + 1), v12);
          v14 = *((_QWORD *)a2 + 7);
          *(_QWORD *)(a1 + 56) = v14;
          *(_BYTE *)(a1 + 201) = 1;
          swift_retain(v14);
          return a1;
        case 2:
          *(_QWORD *)a1 = *(_QWORD *)a2;
          v15 = *((_QWORD *)a2 + 1);
          *(_QWORD *)(a1 + 8) = v15;
          v16 = a2 + 1;
          v17 = *((_QWORD *)a2 + 5);
          *(_QWORD *)(a1 + 40) = v17;
          *(_QWORD *)(a1 + 48) = *((_QWORD *)a2 + 6);
          v18 = **(void (***)(uint64_t, __int128 *, uint64_t))(v17 - 8);
          swift_bridgeObjectRetain(v15);
          v18(a1 + 16, v16, v17);
          v19 = 2;
          goto LABEL_26;
        case 3:
          *(_QWORD *)a1 = *(_QWORD *)a2;
          v20 = *((_QWORD *)a2 + 4);
          *(_QWORD *)(a1 + 32) = v20;
          *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
          (**(void (***)(uint64_t, uint64_t, __n128))(v20 - 8))(a1 + 8, (uint64_t)a2 + 8, v7);
          v19 = 3;
          goto LABEL_26;
        case 4:
          if (*((_BYTE *)a2 + 56))
          {
            v21 = *a2;
            v22 = a2[1];
            v23 = a2[2];
            *(_OWORD *)(a1 + 41) = *(__int128 *)((char *)a2 + 41);
            *(_OWORD *)(a1 + 16) = v22;
            *(_OWORD *)(a1 + 32) = v23;
            *(_OWORD *)a1 = v21;
          }
          else
          {
            v25 = *((_QWORD *)a2 + 3);
            *(_QWORD *)(a1 + 24) = v25;
            *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
            (**(void (***)(uint64_t, __int128 *, __n128))(v25 - 8))(a1, a2, v7);
            *(_OWORD *)(a1 + 40) = *(__int128 *)((char *)a2 + 40);
            *(_BYTE *)(a1 + 56) = 0;
          }
          *(_OWORD *)(a1 + 64) = a2[4];
          *(_BYTE *)(a1 + 80) = *((_BYTE *)a2 + 80);
          *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 11);
          *(_QWORD *)(a1 + 96) = *((_QWORD *)a2 + 12);
          v26 = *((_QWORD *)a2 + 13);
          *(_QWORD *)(a1 + 104) = v26;
          v27 = *((_QWORD *)a2 + 15);
          swift_bridgeObjectRetain(v26);
          if (v27)
          {
            *(_QWORD *)(a1 + 112) = *((_QWORD *)a2 + 14);
            v28 = *((_QWORD *)a2 + 15);
            *(_QWORD *)(a1 + 120) = v28;
            *(_QWORD *)(a1 + 128) = *((_QWORD *)a2 + 16);
            v29 = *((_QWORD *)a2 + 17);
            *(_QWORD *)(a1 + 136) = v29;
            *(_BYTE *)(a1 + 144) = *((_BYTE *)a2 + 144);
            *(_QWORD *)(a1 + 152) = *((_QWORD *)a2 + 19);
            v30 = *((_QWORD *)a2 + 20);
            *(_QWORD *)(a1 + 160) = v30;
            swift_bridgeObjectRetain(v28);
            swift_bridgeObjectRetain(v29);
            swift_bridgeObjectRetain(v30);
          }
          else
          {
            v31 = a2[7];
            v32 = a2[8];
            v33 = a2[9];
            *(_QWORD *)(a1 + 160) = *((_QWORD *)a2 + 20);
            *(_OWORD *)(a1 + 128) = v32;
            *(_OWORD *)(a1 + 144) = v33;
            *(_OWORD *)(a1 + 112) = v31;
          }
          *(_QWORD *)(a1 + 168) = *((_QWORD *)a2 + 21);
          v34 = *((_QWORD *)a2 + 22);
          *(_QWORD *)(a1 + 176) = v34;
          *(_QWORD *)(a1 + 184) = *((_QWORD *)a2 + 23);
          v35 = *((_QWORD *)a2 + 24);
          *(_QWORD *)(a1 + 192) = v35;
          *(_BYTE *)(a1 + 200) = *((_BYTE *)a2 + 200);
          *(_BYTE *)(a1 + 201) = 4;
          swift_bridgeObjectRetain(v34);
          v10 = v35;
LABEL_32:
          swift_bridgeObjectRetain(v10);
          break;
        case 5:
          *(_BYTE *)a1 = *(_BYTE *)a2;
          v24 = *((_QWORD *)a2 + 4);
          *(_QWORD *)(a1 + 32) = v24;
          *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
          (**(void (***)(uint64_t, uint64_t, __n128))(v24 - 8))(a1 + 8, (uint64_t)a2 + 8, v7);
          v19 = 5;
LABEL_26:
          *(_BYTE *)(a1 + 201) = v19;
          break;
        default:
          v9 = *(_DWORD *)a2 + 6;
          continue;
      }
      break;
    }
  }
  return a1;
}

__n128 initializeWithTake for ToolbarItemType(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  __int128 v9;
  __int128 v10;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v2 = *(_OWORD *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  v5 = *(_OWORD *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v7;
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 96) = v6;
  result = *(__n128 *)(a2 + 144);
  v9 = *(_OWORD *)(a2 + 160);
  v10 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 186) = *(_OWORD *)(a2 + 186);
  *(_OWORD *)(a1 + 160) = v9;
  *(_OWORD *)(a1 + 176) = v10;
  *(__n128 *)(a1 + 144) = result;
  return result;
}

uint64_t assignWithTake for ToolbarItemType(uint64_t a1, uint64_t a2)
{
  int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  char v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;

  if (a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 201);
    while (2)
    {
      switch(v4)
      {
        case 0:
          v6 = *(_QWORD *)(a1 + 8);
          goto LABEL_15;
        case 1:
          swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
          _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)(a1 + 16));
          swift_release(*(_QWORD *)(a1 + 56));
          break;
        case 2:
          swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
          v5 = (_QWORD *)(a1 + 16);
          goto LABEL_9;
        case 3:
        case 5:
          v5 = (_QWORD *)(a1 + 8);
LABEL_9:
          _s7BooksUI13AnyPagedFrameVwxx_0(v5);
          break;
        case 4:
          if (!*(_BYTE *)(a1 + 56))
            _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)a1);
          swift_bridgeObjectRelease(*(_QWORD *)(a1 + 104));
          v7 = *(_QWORD *)(a1 + 120);
          if (v7)
          {
            swift_bridgeObjectRelease(v7);
            swift_bridgeObjectRelease(*(_QWORD *)(a1 + 136));
            swift_bridgeObjectRelease(*(_QWORD *)(a1 + 160));
          }
          swift_bridgeObjectRelease(*(_QWORD *)(a1 + 176));
          v6 = *(_QWORD *)(a1 + 192);
LABEL_15:
          swift_bridgeObjectRelease(v6);
          break;
        default:
          v4 = *(_DWORD *)a1 + 6;
          continue;
      }
      break;
    }
    v8 = *(unsigned __int8 *)(a2 + 201);
    while (2)
    {
      switch(v8)
      {
        case 0:
          v9 = 0;
          *(_OWORD *)a1 = *(_OWORD *)a2;
          break;
        case 1:
          v10 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_OWORD *)(a1 + 16) = v10;
          v11 = *(_OWORD *)(a2 + 48);
          *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
          *(_OWORD *)(a1 + 48) = v11;
          v9 = 1;
          break;
        case 2:
          v12 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_OWORD *)(a1 + 16) = v12;
          *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
          *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
          v9 = 2;
          break;
        case 3:
          v13 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_OWORD *)(a1 + 16) = v13;
          *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
          v9 = 3;
          break;
        case 4:
          v14 = *(_OWORD *)(a2 + 176);
          *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
          *(_OWORD *)(a1 + 176) = v14;
          *(_OWORD *)(a1 + 185) = *(_OWORD *)(a2 + 185);
          v15 = *(_OWORD *)(a2 + 112);
          *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
          *(_OWORD *)(a1 + 112) = v15;
          v16 = *(_OWORD *)(a2 + 144);
          *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
          *(_OWORD *)(a1 + 144) = v16;
          v17 = *(_OWORD *)(a2 + 48);
          *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
          *(_OWORD *)(a1 + 48) = v17;
          v18 = *(_OWORD *)(a2 + 80);
          *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
          *(_OWORD *)(a1 + 80) = v18;
          v19 = *(_OWORD *)(a2 + 16);
          v9 = 4;
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_OWORD *)(a1 + 16) = v19;
          break;
        case 5:
          v20 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_OWORD *)(a1 + 16) = v20;
          *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
          v9 = 5;
          break;
        default:
          v8 = *(_DWORD *)a2 + 6;
          continue;
      }
      break;
    }
    *(_BYTE *)(a1 + 201) = v9;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for ToolbarItemType(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xFB && *(_BYTE *)(a1 + 202))
    return (*(_DWORD *)a1 + 251);
  v3 = *(unsigned __int8 *)(a1 + 201);
  if (v3 >= 6)
    return (v3 ^ 0xFF) + 1;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for ToolbarItemType(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFA)
  {
    *(_OWORD *)(result + 186) = 0u;
    *(_OWORD *)(result + 160) = 0u;
    *(_OWORD *)(result + 176) = 0u;
    *(_OWORD *)(result + 128) = 0u;
    *(_OWORD *)(result + 144) = 0u;
    *(_OWORD *)(result + 96) = 0u;
    *(_OWORD *)(result + 112) = 0u;
    *(_OWORD *)(result + 64) = 0u;
    *(_OWORD *)(result + 80) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 251;
    if (a3 >= 0xFB)
      *(_BYTE *)(result + 202) = 1;
  }
  else
  {
    if (a3 >= 0xFB)
      *(_BYTE *)(result + 202) = 0;
    if (a2)
      *(_BYTE *)(result + 201) = -(char)a2;
  }
  return result;
}

uint64_t sub_99524(uint64_t a1)
{
  uint64_t result;

  result = *(unsigned __int8 *)(a1 + 201);
  if (result >= 6)
    return (*(_DWORD *)a1 + 6);
  return result;
}

uint64_t sub_99540(uint64_t result, unsigned int a2)
{
  if (a2 > 5)
  {
    *(_OWORD *)(result + 185) = 0u;
    *(_OWORD *)(result + 160) = 0u;
    *(_OWORD *)(result + 176) = 0u;
    *(_OWORD *)(result + 128) = 0u;
    *(_OWORD *)(result + 144) = 0u;
    *(_OWORD *)(result + 96) = 0u;
    *(_OWORD *)(result + 112) = 0u;
    *(_OWORD *)(result + 64) = 0u;
    *(_OWORD *)(result + 80) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 6;
    LOBYTE(a2) = 6;
  }
  *(_BYTE *)(result + 201) = a2;
  return result;
}

ValueMetadata *type metadata accessor for ToolbarItemType()
{
  return &type metadata for ToolbarItemType;
}

unint64_t sub_99590()
{
  unint64_t result;
  uint64_t v1;

  result = qword_262BF8;
  if (!qword_262BF8)
  {
    v1 = sub_7EF8(&qword_262C00);
    sub_9574C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v1);
    atomic_store(result, (unint64_t *)&qword_262BF8);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for LibraryAssetState.Ownership(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFB)
    goto LABEL_17;
  if (a2 + 5 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 5) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 5;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 5;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 5;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 6;
  v8 = v6 - 6;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ToolbarActionMenuItem.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_996D0 + 4 * byte_1E650A[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_99704 + 4 * byte_1E6505[v4]))();
}

uint64_t sub_99704(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_9970C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x99714);
  return result;
}

uint64_t sub_99720(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x99728);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_9972C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_99734(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ToolbarActionMenuItem.CodingKeys()
{
  return &type metadata for ToolbarActionMenuItem.CodingKeys;
}

uint64_t getEnumTagSinglePayload for ToolbarActionMenu.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFC)
    goto LABEL_17;
  if (a2 + 4 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 4) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 4;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 4;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 4;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 5;
  v8 = v6 - 5;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ToolbarActionMenu.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_9982C + 4 * byte_1E6514[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_99860 + 4 * byte_1E650F[v4]))();
}

uint64_t sub_99860(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_99868(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x99870);
  return result;
}

uint64_t sub_9987C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x99884);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_99888(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_99890(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ToolbarActionMenu.CodingKeys()
{
  return &type metadata for ToolbarActionMenu.CodingKeys;
}

unint64_t sub_998B0()
{
  unint64_t result;

  result = qword_262C08;
  if (!qword_262C08)
  {
    result = swift_getWitnessTable(&unk_1E6828, &type metadata for ToolbarActionMenu.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_262C08);
  }
  return result;
}

unint64_t sub_998F8()
{
  unint64_t result;

  result = qword_262C10;
  if (!qword_262C10)
  {
    result = swift_getWitnessTable(&unk_1E68E0, &type metadata for ToolbarActionMenuItem.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_262C10);
  }
  return result;
}

unint64_t sub_99940()
{
  unint64_t result;

  result = qword_262C18;
  if (!qword_262C18)
  {
    result = swift_getWitnessTable(&unk_1E6850, &type metadata for ToolbarActionMenuItem.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_262C18);
  }
  return result;
}

unint64_t sub_99988()
{
  unint64_t result;

  result = qword_262C20;
  if (!qword_262C20)
  {
    result = swift_getWitnessTable(&unk_1E6878, &type metadata for ToolbarActionMenuItem.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_262C20);
  }
  return result;
}

unint64_t sub_999D0()
{
  unint64_t result;

  result = qword_262C28;
  if (!qword_262C28)
  {
    result = swift_getWitnessTable(&unk_1E6798, &type metadata for ToolbarActionMenu.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_262C28);
  }
  return result;
}

unint64_t sub_99A18()
{
  unint64_t result;

  result = qword_262C30;
  if (!qword_262C30)
  {
    result = swift_getWitnessTable(&unk_1E67C0, &type metadata for ToolbarActionMenu.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_262C30);
  }
  return result;
}

uint64_t sub_99A5C(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char v10;

  if (a1 == 25705 && a2 == 0xE200000000000000)
  {
    v5 = 0xE200000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(25705, 0xE200000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 1701667182 && a2 == 0xE400000000000000)
  {
    v7 = 0xE400000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1701667182, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x736D657469 && a2 == 0xE500000000000000)
  {
    v8 = 0xE500000000000000;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x736D657469, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0xD00000000000001ALL)
  {
    v9 = 0x80000000001FB2C0;
    if (a2 == 0x80000000001FB2C0)
      goto LABEL_25;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001ALL, 0x80000000001FB2C0, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
LABEL_25:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if (a1 == 0xD00000000000001BLL && a2 == 0x80000000001FB2E0)
  {
    swift_bridgeObjectRelease(0x80000000001FB2E0);
    return 4;
  }
  else
  {
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001BLL, 0x80000000001FB2E0, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v10 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

uint64_t sub_99C3C(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char v11;

  if (a1 == 25705 && a2 == 0xE200000000000000)
  {
    v5 = 0xE200000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(25705, 0xE200000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 1701667182 && a2 == 0xE400000000000000)
  {
    v7 = 0xE400000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1701667182, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x6E6F69746361 && a2 == 0xE600000000000000)
  {
    v8 = 0xE600000000000000;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F69746361, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x656C62616E457369 && a2 == 0xE900000000000064)
  {
    v9 = 0xE900000000000064;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656C62616E457369, 0xE900000000000064, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_26;
  }
  if (a1 == 0x63696C7078457369 && a2 == 0xEA00000000007469)
  {
    v10 = 0xEA00000000007469;
LABEL_32:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x63696C7078457369, 0xEA00000000007469, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_32;
  }
  if (a1 == 0x79546E6F74747562 && a2 == 0xEA00000000006570)
  {
    swift_bridgeObjectRelease(0xEA00000000006570);
    return 5;
  }
  else
  {
    v11 = _stringCompareWithSmolCheck(_:_:expecting:)(0x79546E6F74747562, 0xEA00000000006570, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v11 & 1) != 0)
      return 5;
    else
      return 6;
  }
}

uint64_t Localizer.string(forKey:with:defaultValue:macDefaultValue:comment:using:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v15;

  swift_bridgeObjectRetain(a2);
  v15 = dispatch thunk of Localizer.string(forKey:with:defaultValue:using:)(a1, a2, a3, a4, a8, a9, a10);
  swift_bridgeObjectRelease(a2);
  return v15;
}

uint64_t Localizer.string(withCount:forKey:with:defaultValue:defaultOneValue:macDefaultValue:macDefaultOneValue:comment:using:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  return sub_99FB8(a1, a2, a3, a4, a5, a6, a7, a8, a11, a12, a13);
}

uint64_t Localizer.decimal(forNumber:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return dispatch thunk of Localizer.decimal(forNumber:minimumFractionDigits:maximumFractionDigits:in:)(a1, 0, 1, 0, 1, a2, a3, a4);
}

uint64_t sub_99FB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v25 = a11;
  v26 = a10;
  v17 = type metadata accessor for LocalizerDefaultValue(0);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v20 = (char *)&v24 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 == 1)
    v21 = a6;
  else
    v21 = a5;
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))((char *)&v24 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0), v21, v17);
  swift_bridgeObjectRetain(a3);
  v22 = dispatch thunk of Localizer.string(withCount:forKey:with:defaultValue:using:)(a1, a2, a3, a4, v20, a9, v26, v25);
  swift_bridgeObjectRelease(a3);
  (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
  return v22;
}

uint64_t Color.init(hexString:)(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v12;
  unint64_t v13;
  char v14;
  uint64_t v15;
  unint64_t v16;
  double v17;
  double v18;
  double v19;
  double v21;
  __n128 v23;
  __n128 v24;
  uint64_t v25;
  unsigned __int8 *v26;
  int v27;
  unsigned __int8 v28;
  BOOL v29;
  uint64_t v30;
  unsigned __int8 *v31;
  int v32;
  unsigned __int8 v33;
  unsigned __int8 *v34;
  int v35;
  unsigned __int8 v36;
  char v37;
  char v38;
  _QWORD v40[3];

  v4 = type metadata accessor for Color.RGBColorSpace(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v40[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = String.count.getter(a1, a2);
  if (result != 6)
  {
    result = String.count.getter(a1, a2);
    if (result != 8)
      goto LABEL_62;
  }
  v9 = HIBYTE(a2) & 0xF;
  v10 = a1 & 0xFFFFFFFFFFFFLL;
  if (!((a2 & 0x2000000000000000) != 0 ? HIBYTE(a2) & 0xF : a1 & 0xFFFFFFFFFFFFLL))
    goto LABEL_62;
  if ((a2 & 0x1000000000000000) != 0)
  {
    swift_bridgeObjectRetain(a2);
    v13 = (unint64_t)sub_9A4EC(a1, a2, 16);
    v38 = v37;
    swift_bridgeObjectRelease(a2);
    if ((v38 & 1) == 0)
      goto LABEL_12;
    goto LABEL_62;
  }
  if ((a2 & 0x2000000000000000) == 0)
  {
    if ((a1 & 0x1000000000000000) != 0)
      v12 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
    else
      v12 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(a1, a2);
    v13 = (unint64_t)sub_9A60C(v12, v10, 16);
    if ((v14 & 1) == 0)
    {
LABEL_12:
      v15 = String.count.getter(a1, a2);
      swift_bridgeObjectRelease(a2);
      v16 = v13 >> 8;
      if (v15 == 8)
        v17 = (double)v13 / 255.0;
      else
        v17 = 1.0;
      if (v15 != 8)
        LODWORD(v16) = v13;
      v18 = (double)BYTE2(v16) / 255.0;
      v19 = (double)BYTE1(v16) / 255.0;
      if (v18 <= 1.0 && v19 <= 1.0)
      {
        v21 = (double)v16 / 255.0;
        if (v21 <= 1.0 && v17 <= 1.0)
        {
          v23 = ((__n128 (*)(char *, _QWORD, uint64_t))*(_QWORD *)(v5 + 104))(v7, enum case for Color.RGBColorSpace.sRGB(_:), v4);
          v23.n128_f64[0] = v18;
          v24.n128_f64[0] = v21;
          return Color.init(_:red:green:blue:opacity:)(v7, v23, v19, v24, v17);
        }
      }
      return 0;
    }
LABEL_62:
    swift_bridgeObjectRelease(a2);
    return 0;
  }
  v40[0] = a1;
  v40[1] = a2 & 0xFFFFFFFFFFFFFFLL;
  if (a1 == 43)
  {
    if (v9)
    {
      v30 = v9 - 1;
      if (v30)
      {
        v13 = 0;
        v31 = (unsigned __int8 *)v40 + 1;
        while (1)
        {
          v32 = *v31;
          v33 = v32 - 48;
          if ((v32 - 48) >= 0xA)
          {
            if ((v32 - 65) < 6)
            {
              v33 = v32 - 55;
            }
            else
            {
              if ((v32 - 97) > 5)
                goto LABEL_62;
              v33 = v32 - 87;
            }
          }
          if (v13 >> 60)
            break;
          v13 = 16 * v13 + v33;
          ++v31;
          if (!--v30)
            goto LABEL_12;
        }
      }
      goto LABEL_62;
    }
  }
  else
  {
    if (a1 != 45)
    {
      if (v9)
      {
        v13 = 0;
        v34 = (unsigned __int8 *)v40;
        while (1)
        {
          v35 = *v34;
          v36 = v35 - 48;
          if ((v35 - 48) >= 0xA)
          {
            if ((v35 - 65) < 6)
            {
              v36 = v35 - 55;
            }
            else
            {
              if ((v35 - 97) > 5)
                goto LABEL_62;
              v36 = v35 - 87;
            }
          }
          if (v13 >> 60)
            break;
          v13 = 16 * v13 + v36;
          ++v34;
          if (!--v9)
            goto LABEL_12;
        }
      }
      goto LABEL_62;
    }
    if (v9)
    {
      v25 = v9 - 1;
      if (v25)
      {
        v13 = 0;
        v26 = (unsigned __int8 *)v40 + 1;
        while (1)
        {
          v27 = *v26;
          v28 = v27 - 48;
          if ((v27 - 48) >= 0xA)
          {
            if ((v27 - 65) < 6)
            {
              v28 = v27 - 55;
            }
            else
            {
              if ((v27 - 97) > 5)
                goto LABEL_62;
              v28 = v27 - 87;
            }
          }
          if (v13 >> 60)
            break;
          v29 = 16 * v13 >= v28;
          v13 = 16 * v13 - v28;
          if (!v29)
            break;
          ++v26;
          if (!--v25)
            goto LABEL_12;
        }
      }
      goto LABEL_62;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

double Color.rgbaComponents.getter(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  unsigned int v4;
  double result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;

  v8 = 0;
  v9 = 0.0;
  v6 = 0;
  v7 = 0;
  sub_9A5D0();
  v2 = swift_retain(a1);
  v3 = (void *)UIColor.init(_:)(v2);
  v4 = objc_msgSend(v3, "getRed:green:blue:alpha:", &v9, &v8, &v7, &v6);

  result = 0.0;
  if (v4)
    return v9;
  return result;
}

unsigned __int8 *sub_9A4EC(uint64_t a1, uint64_t a2, int64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned __int8 *v12;
  uint64_t v14;
  uint64_t v15;

  v14 = a1;
  v15 = a2;
  swift_bridgeObjectRetain(a2);
  v4 = String.init<A>(_:)(&v14, &type metadata for String, &protocol witness table for String, &protocol witness table for String);
  v6 = v4;
  v7 = v5;
  if ((v5 & 0x1000000000000000) == 0)
  {
    if ((v5 & 0x2000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    v9 = HIBYTE(v7) & 0xF;
    v14 = v6;
    v15 = v7 & 0xFFFFFFFFFFFFFFLL;
    v8 = (unsigned __int8 *)&v14;
    goto LABEL_7;
  }
  v6 = sub_1DB45C(v4, v5);
  v11 = v10;
  swift_bridgeObjectRelease(v7);
  v7 = v11;
  if ((v11 & 0x2000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if ((v6 & 0x1000000000000000) != 0)
  {
    v8 = (unsigned __int8 *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v9 = v6 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v8 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v6, v7);
  }
LABEL_7:
  v12 = sub_9A60C(v8, v9, a3);
  swift_bridgeObjectRelease(v7);
  return v12;
}

unint64_t sub_9A5D0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_262C48;
  if (!qword_262C48)
  {
    v1 = objc_opt_self(UIColor);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_262C48);
  }
  return result;
}

unsigned __int8 *sub_9A60C(unsigned __int8 *result, uint64_t a2, int64_t a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  unint64_t v9;
  unsigned __int8 *i;
  unsigned int v11;
  char v12;
  uint64_t v13;
  unint64_t v14;
  unsigned __int8 v15;
  BOOL v16;
  uint64_t v17;
  unsigned __int8 v18;
  unsigned __int8 v19;
  unsigned __int8 v20;
  unsigned __int8 *v21;
  unsigned int v22;
  char v23;
  unint64_t v24;
  unsigned __int8 v25;
  unsigned __int8 v26;
  unsigned __int8 v27;
  unsigned __int8 v28;
  unint64_t v29;
  unsigned int v30;
  char v31;
  unint64_t v32;
  unsigned __int8 v33;

  v3 = a2;
  v4 = *result;
  if (v4 != 43)
  {
    if (v4 == 45)
    {
      if (a2 >= 1)
      {
        v5 = a2 - 1;
        if (a2 != 1)
        {
          v6 = a3 + 48;
          v7 = a3 + 55;
          v8 = a3 + 87;
          if (a3 > 10)
          {
            v6 = 58;
          }
          else
          {
            v8 = 97;
            v7 = 65;
          }
          if (result)
          {
            v9 = 0;
            for (i = result + 1; ; ++i)
            {
              v11 = *i;
              if (v11 < 0x30 || v11 >= v6)
              {
                if (v11 < 0x41 || v11 >= v7)
                {
                  v13 = 0;
                  if (v11 < 0x61 || v11 >= v8)
                    return (unsigned __int8 *)v13;
                  v12 = -87;
                }
                else
                {
                  v12 = -55;
                }
              }
              else
              {
                v12 = -48;
              }
              if (!is_mul_ok(v9, a3))
                return 0;
              v14 = v9 * a3;
              v15 = v11 + v12;
              v16 = v14 >= v15;
              v9 = v14 - v15;
              if (!v16)
                return 0;
              if (!--v5)
                return (unsigned __int8 *)v9;
            }
          }
          return 0;
        }
        return 0;
      }
      __break(1u);
      goto LABEL_67;
    }
    if (a2)
    {
      v26 = a3 + 48;
      v27 = a3 + 55;
      v28 = a3 + 87;
      if (a3 > 10)
      {
        v26 = 58;
      }
      else
      {
        v28 = 97;
        v27 = 65;
      }
      if (result)
      {
        v29 = 0;
        do
        {
          v30 = *result;
          if (v30 < 0x30 || v30 >= v26)
          {
            if (v30 < 0x41 || v30 >= v27)
            {
              v13 = 0;
              if (v30 < 0x61 || v30 >= v28)
                return (unsigned __int8 *)v13;
              v31 = -87;
            }
            else
            {
              v31 = -55;
            }
          }
          else
          {
            v31 = -48;
          }
          if (!is_mul_ok(v29, a3))
            return 0;
          v32 = v29 * a3;
          v33 = v30 + v31;
          v16 = __CFADD__(v32, v33);
          v29 = v32 + v33;
          if (v16)
            return 0;
          ++result;
          --v3;
        }
        while (v3);
        return (unsigned __int8 *)v29;
      }
      return 0;
    }
    return 0;
  }
  if (a2 < 1)
  {
LABEL_67:
    __break(1u);
    return result;
  }
  v17 = a2 - 1;
  if (a2 == 1)
    return 0;
  v18 = a3 + 48;
  v19 = a3 + 55;
  v20 = a3 + 87;
  if (a3 > 10)
  {
    v18 = 58;
  }
  else
  {
    v20 = 97;
    v19 = 65;
  }
  if (!result)
    return 0;
  v9 = 0;
  v21 = result + 1;
  do
  {
    v22 = *v21;
    if (v22 < 0x30 || v22 >= v18)
    {
      if (v22 < 0x41 || v22 >= v19)
      {
        v13 = 0;
        if (v22 < 0x61 || v22 >= v20)
          return (unsigned __int8 *)v13;
        v23 = -87;
      }
      else
      {
        v23 = -55;
      }
    }
    else
    {
      v23 = -48;
    }
    if (!is_mul_ok(v9, a3))
      return 0;
    v24 = v9 * a3;
    v25 = v22 + v23;
    v16 = __CFADD__(v24, v25);
    v9 = v24 + v25;
    if (v16)
      return 0;
    ++v21;
    --v17;
  }
  while (v17);
  return (unsigned __int8 *)v9;
}

uint64_t sub_9A888@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1E428(a1, a2, type metadata accessor for SizeConstants.Environment);
}

void sub_9A8A8()
{
  qword_288CF8 = 0x4000000000000000;
}

uint64_t VerticalMasonryCoverGridViewModel.init(assets:gridWidth:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>, double a3@<D0>)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *i;
  double v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t result;

  v4 = a1;
  if (*(_QWORD *)(a1 + 16) < 0x16EuLL)
  {
    i = (_QWORD *)a1;
    goto LABEL_9;
  }
  v6 = type metadata accessor for __ContiguousArrayStorageBase(0);
  v7 = swift_unknownObjectRetain_n(v4, 2);
  v8 = (_QWORD *)swift_dynamicCastClass(v7, v6);
  if (!v8)
  {
    swift_bridgeObjectRelease(v4);
    v8 = &_swiftEmptyArrayStorage;
  }
  v9 = v8[2];
  swift_release(v8);
  a1 = v4;
  if (v9 != 365)
    goto LABEL_18;
  i = (_QWORD *)swift_dynamicCastClass(v4, v6);
  a1 = swift_bridgeObjectRelease(v4);
  if (i)
    goto LABEL_9;
  for (i = &_swiftEmptyArrayStorage; ; i = sub_AB788(v4, v4 + 32, 0, 0x2DBuLL))
  {
    a1 = swift_bridgeObjectRelease(v4);
LABEL_9:
    v11 = sqrt((double)(uint64_t)i[2]);
    if ((~*(_QWORD *)&v11 & 0x7FF0000000000000) == 0)
    {
      __break(1u);
LABEL_15:
      __break(1u);
LABEL_16:
      __break(1u);
      goto LABEL_17;
    }
    if (v11 <= -9.22337204e18)
      goto LABEL_15;
    if (v11 >= 9.22337204e18)
      goto LABEL_16;
    v4 = (uint64_t)v11 + 1;
    if (!__OFADD__((uint64_t)v11, 1))
      break;
LABEL_17:
    __break(1u);
LABEL_18:
    swift_bridgeObjectRelease(a1);
  }
  v12 = sub_9F254((uint64_t)i, (uint64_t)v11 + 1, a3);
  swift_bridgeObjectRelease(i);
  v13 = sub_9F430((uint64_t)v12, v4);
  result = swift_bridgeObjectRelease(v12);
  *a2 = v13;
  return result;
}

uint64_t sub_9AA24@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t KeyPath;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v6 = sub_5440(&qword_262658);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *a1;
  *(_QWORD *)v9 = static HorizontalAlignment.center.getter(v7);
  *((_QWORD *)v9 + 1) = 0;
  v9[16] = 0;
  result = sub_5440(&qword_262E90);
  if ((v10 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v10 < *(_QWORD *)(a2 + 16))
  {
    v12 = *(_QWORD *)(a2 + 8 * v10 + 32);
    v21 = v12;
    KeyPath = swift_getKeyPath(&unk_1E6D50);
    swift_bridgeObjectRetain(v12);
    v14 = sub_5440(&qword_262E98);
    v15 = sub_5440(&qword_262EA0);
    v16 = sub_7FD8(&qword_262EA8, &qword_262E98, (uint64_t)&protocol conformance descriptor for [A]);
    v17 = sub_A3F18();
    ForEach<>.init(_:id:content:)(&v21, KeyPath, sub_9ABD8, 0, v14, v15, v16, &protocol witness table for String, v17);
    v18 = _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0();
    sub_87B18(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, a3, 0.0, 1, 0.0, 1, v18, v19);
    return sub_B414((uint64_t)v9, &qword_262658);
  }
  __break(1u);
  return result;
}

uint64_t sub_9ABD8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  double v31;
  uint64_t v32;
  char v33;
  double v34;
  double v35;
  double v36;
  double v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v51;
  char v52;
  _QWORD v53[2];
  _OWORD v54[10];
  uint64_t v55;

  v51 = a2;
  v3 = (int *)type metadata accessor for CoverView(0);
  __chkstk_darwin(v3);
  v5 = (char *)&v51 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_5440(&qword_262ED0);
  __chkstk_darwin(v6);
  v8 = (char *)&v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_5440(&qword_262EC0);
  __chkstk_darwin(v9);
  v11 = (char *)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_51C90(a1, (uint64_t)v54);
  *(_QWORD *)v5 = swift_getKeyPath(&unk_1E6D70);
  v5[40] = 0;
  *((_QWORD *)v5 + 6) = swift_getKeyPath(&unk_1E6D98);
  v5[56] = 0;
  v12 = &v5[v3[6]];
  *(_QWORD *)v12 = swift_getKeyPath(&unk_1E6DC8);
  v13 = sub_5440(&qword_25F1E8);
  swift_storeEnumTagMultiPayload(v12, v13, 0);
  v14 = &v5[v3[7]];
  *(_QWORD *)v14 = swift_getKeyPath(&unk_1E6DF0);
  v15 = sub_5440(&qword_25F758);
  swift_storeEnumTagMultiPayload(v14, v15, 0);
  v16 = &v5[v3[8]];
  v17 = type metadata accessor for ProfileRestrictions(0);
  v18 = sub_6FD0((unint64_t *)&qword_26AF00, type metadata accessor for ProfileRestrictions, (uint64_t)&protocol conformance descriptor for ProfileRestrictions);
  *(_QWORD *)v16 = EnvironmentObject.init()(v17, v18);
  *((_QWORD *)v16 + 1) = v19;
  v20 = &v5[v3[9]];
  v52 = 1;
  State.init(wrappedValue:)(v53, &v52, &type metadata for Bool);
  v21 = v53[1];
  *v20 = v53[0];
  *((_QWORD *)v20 + 1) = v21;
  v22 = &v5[v3[10]];
  v23 = v54[7];
  v24 = v54[9];
  *((_OWORD *)v22 + 8) = v54[8];
  *((_OWORD *)v22 + 9) = v24;
  *((_QWORD *)v22 + 20) = v55;
  v25 = v54[5];
  *((_OWORD *)v22 + 4) = v54[4];
  *((_OWORD *)v22 + 5) = v25;
  *((_OWORD *)v22 + 6) = v54[6];
  *((_OWORD *)v22 + 7) = v23;
  v26 = v54[1];
  *(_OWORD *)v22 = v54[0];
  *((_OWORD *)v22 + 1) = v26;
  v27 = v54[3];
  *((_OWORD *)v22 + 2) = v54[2];
  *((_OWORD *)v22 + 3) = v27;
  v5[v3[11]] = 0;
  v28 = *(_QWORD *)(a1 + 88);
  sub_1E428((uint64_t)v5, (uint64_t)v8, type metadata accessor for CoverView);
  v29 = &v8[*(int *)(v6 + 36)];
  *(_QWORD *)v29 = v28;
  *((_WORD *)v29 + 4) = 0;
  v30 = sub_224DC((uint64_t)v5, type metadata accessor for CoverView);
  if (qword_25DBF8 != -1)
    v30 = swift_once(&qword_25DBF8, sub_9A8A8);
  v31 = *(double *)&qword_288CF8;
  v32 = static Edge.Set.all.getter(v30);
  v33 = v32;
  v37 = EdgeInsets.init(_all:)(v32, v31, v34, v35, v36);
  v39 = v38;
  v41 = v40;
  v43 = v42;
  sub_B3D0((uint64_t)v8, (uint64_t)v11, &qword_262ED0);
  v44 = &v11[*(int *)(v9 + 36)];
  *v44 = v33;
  *((double *)v44 + 1) = v37;
  *((_QWORD *)v44 + 2) = v39;
  *((_QWORD *)v44 + 3) = v41;
  *((_QWORD *)v44 + 4) = v43;
  v44[40] = 0;
  sub_B414((uint64_t)v8, &qword_262ED0);
  v45 = CoverViewModel.axLabel.getter();
  v47 = v46;
  *(_QWORD *)&v54[0] = v45;
  *((_QWORD *)&v54[0] + 1) = v46;
  v48 = sub_A3FB4(&qword_262EB8, &qword_262EC0, (void (*)(void))sub_A4020);
  v49 = sub_C57C();
  View.accessibilityLabel<A>(_:)(v54, v9, &type metadata for String, v48, v49);
  swift_bridgeObjectRelease(v47);
  return sub_B414((uint64_t)v11, &qword_262EC0);
}

uint64_t sub_9AF94@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t KeyPath;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD v13[2];

  v4 = *v2;
  *(_QWORD *)a2 = static VerticalAlignment.top.getter(a1);
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 0;
  sub_5440(&qword_262E60);
  v5 = *(_QWORD *)(v4 + 16);
  v13[0] = 0;
  v13[1] = v5;
  KeyPath = swift_getKeyPath(&unk_1E6D38);
  v7 = swift_allocObject(&unk_24F4B8, 24, 7);
  *(_QWORD *)(v7 + 16) = v4;
  swift_bridgeObjectRetain(v4);
  v8 = sub_5440(&qword_262E68);
  v9 = sub_5440(&qword_262660);
  v10 = sub_A3DE4();
  v11 = sub_A3E94();
  return ForEach<>.init(_:id:content:)(v13, KeyPath, sub_A3DDC, v7, v8, v9, v10, &protocol witness table for Int, v11);
}

void sub_9B088()
{
  qword_288D00 = 0x4030000000000000;
}

uint64_t SharableAssetViewModel.init(assets:timeRead:booksFinished:localizedYear:size:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>, double a8@<D0>, double a9@<D1>)
{
  uint64_t result;
  uint64_t v19;
  uint64_t v20;

  if (qword_25DC00 != -1)
    swift_once(&qword_25DC00, sub_9B088);
  result = VerticalMasonryCoverGridViewModel.init(assets:gridWidth:)(a1, &v20, a8 - *(double *)&qword_288D00);
  v19 = v20;
  *(_QWORD *)a7 = a5;
  *(_QWORD *)(a7 + 8) = a6;
  *(double *)(a7 + 16) = a8;
  *(double *)(a7 + 24) = a9;
  *(_QWORD *)(a7 + 32) = v19;
  *(_QWORD *)(a7 + 40) = a2;
  *(_BYTE *)(a7 + 48) = a3 & 1;
  *(_QWORD *)(a7 + 56) = a4;
  return result;
}

uint64_t sub_9B158()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  Swift::String v22;
  Swift::String v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t ObjCClassFromMetadata;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v1 = v0;
  v2 = type metadata accessor for Locale(0);
  v28 = *(_QWORD *)(v2 - 8);
  v29 = v2;
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v7 = (char *)&v28 - v6;
  v8 = type metadata accessor for String.LocalizationValue(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v28 - v13;
  v15 = type metadata accessor for String.LocalizationValue.StringInterpolation(0);
  result = __chkstk_darwin(v15);
  v18 = (char *)&v28 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = 0;
  if ((*(_BYTE *)(v1 + 48) & 1) != 0)
    return v19;
  v20 = *(double *)(v1 + 40) / 60.0;
  if ((~*(_QWORD *)&v20 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (v20 <= -9.22337204e18)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (v20 < 9.22337204e18)
  {
    v21 = (uint64_t)v20;
    String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)(8, 1);
    v22._countAndFlagsBits = 0;
    v22._object = (void *)0xE000000000000000;
    String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v22);
    v30 = v21;
    String.LocalizationValue.StringInterpolation.appendInterpolation<A>(_:specifier:)(&v30, 1684827173, 0xE400000000000000, &type metadata for Int, &protocol witness table for Int);
    v23._countAndFlagsBits = 0x736574756E696D0ALL;
    v23._object = (void *)0xE800000000000000;
    String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v23);
    v24 = String.LocalizationValue.init(stringInterpolation:)(v18);
    static Locale.current.getter(v24);
    (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v12, v14, v8);
    v25 = type metadata accessor for BundleFinder();
    ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v25);
    v27 = objc_msgSend((id)objc_opt_self(NSBundle), "bundleForClass:", ObjCClassFromMetadata);
    static Locale.current.getter(v27);
    v19 = String.init(localized:defaultValue:table:bundle:locale:comment:)("YIR_Books_Summary_Frame_Num_Minutes_Read", 40, 2, v12, 0, 0, v27, v5, "Year in Review: Sharable Asset: Minutes read title", 50, 2);
    (*(void (**)(char *, uint64_t))(v28 + 8))(v7, v29);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v8);
    return v19;
  }
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_9B418(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t ObjCClassFromMetadata;
  id v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v27 = a3;
  v28 = a4;
  v6 = type metadata accessor for Locale(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v26 - v11;
  v13 = type metadata accessor for String.LocalizationValue(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v19 = (char *)&v26 - v18;
  v20 = String.LocalizationValue.init(stringLiteral:)(a1, a2);
  static Locale.current.getter(v20);
  (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v17, v19, v13);
  v21 = type metadata accessor for BundleFinder();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v21);
  v23 = objc_msgSend((id)objc_opt_self(NSBundle), "bundleForClass:", ObjCClassFromMetadata);
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v10, v12, v6);
  v24 = String.init(localized:table:bundle:locale:comment:)(v17, 0, 0, v23, v10, v27, v28, 2);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v6);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v19, v13);
  return v24;
}

uint64_t sub_9B5D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  Swift::String v18;
  Swift::String v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t ObjCClassFromMetadata;
  id v23;
  uint64_t v24;
  __int16 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v28 = type metadata accessor for Locale(0);
  v1 = *(_QWORD *)(v28 - 8);
  v2 = __chkstk_darwin(v28);
  v4 = (char *)&v27 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  v6 = (char *)&v27 - v5;
  v7 = type metadata accessor for String.LocalizationValue(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v27 - v12;
  v14 = type metadata accessor for String.LocalizationValue.StringInterpolation(0);
  __chkstk_darwin(v14);
  v16 = (char *)&v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *(_QWORD *)(v0 + 56);
  String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)(6, 1);
  v18._countAndFlagsBits = 0;
  v18._object = (void *)0xE000000000000000;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v18);
  v29 = v17;
  String.LocalizationValue.StringInterpolation.appendInterpolation<A>(_:specifier:)(&v29, 1684827173, 0xE400000000000000, &type metadata for Int, &protocol witness table for Int);
  v19._countAndFlagsBits = 0x736B6F6F620ALL;
  v19._object = (void *)0xE600000000000000;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v19);
  v20 = String.LocalizationValue.init(stringInterpolation:)(v16);
  static Locale.current.getter(v20);
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v11, v13, v7);
  v21 = type metadata accessor for BundleFinder();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v21);
  v23 = objc_msgSend((id)objc_opt_self(NSBundle), "bundleForClass:", ObjCClassFromMetadata);
  static Locale.current.getter(v23);
  v26 = 2;
  v24 = String.init(localized:defaultValue:table:bundle:locale:comment:)("YIR_Books_Summary_Frame_Num_Books_Finished", 42, 2, v11, 0, 0, v23, v4, "Year in Review: Sharable Asset: Total books read title", 54, v26);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v6, v28);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v7);
  return v24;
}

uint64_t ShareableAsset.init(model:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t result;

  v3 = *a1;
  v4 = a1[1];
  v5 = a1[2];
  v6 = a1[3];
  v7 = a1[4];
  v8 = a1[5];
  v9 = *((_BYTE *)a1 + 48);
  v10 = a1[7];
  v11 = (_QWORD *)(a2 + *(int *)(type metadata accessor for ShareableAsset(0) + 20));
  *v11 = swift_getKeyPath(&unk_1E6A90);
  v12 = sub_5440(&qword_25F200);
  result = swift_storeEnumTagMultiPayload(v11, v12, 0);
  *(_QWORD *)a2 = v3;
  *(_QWORD *)(a2 + 8) = v4;
  *(_QWORD *)(a2 + 16) = v5;
  *(_QWORD *)(a2 + 24) = v6;
  *(_QWORD *)(a2 + 32) = v7;
  *(_QWORD *)(a2 + 40) = v8;
  *(_BYTE *)(a2 + 48) = v9;
  *(_QWORD *)(a2 + 56) = v10;
  return result;
}

uint64_t ShareableAsset.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t KeyPath;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v30 = a1;
  v2 = type metadata accessor for DynamicTypeSize(0);
  v28 = *(_QWORD *)(v2 - 8);
  v29 = v2;
  __chkstk_darwin(v2);
  v4 = (char *)&v27 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for ColorScheme(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for SizeConstants.Spacing(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_5440(&qword_262C50);
  __chkstk_darwin(v12);
  v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_5440(&qword_262C58);
  __chkstk_darwin(v15);
  v17 = (char *)&v27 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ShareableAsset(0);
  _s7BooksUI35ListItemEditionsDescriptorExternalsV7spacingAA13SizeConstantsV7SpacingVvg_0((uint64_t)v11);
  v18 = sub_224DC((uint64_t)v11, type metadata accessor for SizeConstants.Spacing);
  *(_QWORD *)v14 = static HorizontalAlignment.center.getter(v18);
  *((_QWORD *)v14 + 1) = 0x4030000000000000;
  v14[16] = 0;
  v19 = sub_5440(&qword_262C60);
  sub_9BB70(v1, (uint64_t)&v14[*(int *)(v19 + 44)]);
  KeyPath = swift_getKeyPath(&unk_1E6AC8);
  (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v8, enum case for ColorScheme.dark(_:), v5);
  v21 = (uint64_t *)&v17[*(int *)(v15 + 36)];
  v22 = sub_5440(&qword_25EE58);
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))((char *)v21 + *(int *)(v22 + 28), v8, v5);
  *v21 = KeyPath;
  sub_B3D0((uint64_t)v14, (uint64_t)v17, &qword_262C50);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  sub_B414((uint64_t)v14, &qword_262C50);
  v24 = v28;
  v23 = v29;
  (*(void (**)(char *, _QWORD, uint64_t))(v28 + 104))(v4, enum case for DynamicTypeSize.large(_:), v29);
  v25 = sub_9F884();
  View.dynamicTypeSize(_:)(v4, v15, v25);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v4, v23);
  return sub_B414((uint64_t)v17, &qword_262C58);
}

uint64_t sub_9BB70@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  int v42;
  _QWORD v43[2];
  unsigned __int8 v44;
  uint64_t v45;
  unsigned __int8 v46;
  uint64_t v47;
  unsigned __int8 v48;
  uint64_t v49;
  unsigned __int8 v50;
  uint64_t v51;
  unsigned __int8 v52;
  uint64_t v53;
  unsigned __int8 v54;
  uint64_t v55;
  uint64_t v56;

  v4 = type metadata accessor for SizeConstants.Spacing(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_5440(&qword_262EF8);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v29 - v11;
  v13 = a1[4];
  v14 = swift_bridgeObjectRetain(v13);
  v15 = static Alignment.top.getter(v14);
  sub_87B7C(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v43, 0.0, 1, INFINITY, 0, v15, v16, v13);
  v17 = swift_bridgeObjectRelease(v13);
  v19 = v43[0];
  v18 = v43[1];
  v42 = v44;
  v41 = v45;
  v40 = v46;
  v39 = v47;
  v38 = v48;
  v37 = v49;
  v36 = v50;
  v35 = v51;
  v34 = v52;
  v33 = v53;
  v32 = v54;
  v31 = v55;
  v30 = v56;
  v20 = static Alignment.leading.getter(v17);
  v22 = v21;
  type metadata accessor for ShareableAsset(0);
  _s7BooksUI35ListItemEditionsDescriptorExternalsV7spacingAA13SizeConstantsV7SpacingVvg_0((uint64_t)v6);
  sub_224DC((uint64_t)v6, type metadata accessor for SizeConstants.Spacing);
  *(_QWORD *)v12 = v20;
  *((_QWORD *)v12 + 1) = v22;
  *((_QWORD *)v12 + 2) = 0x4028000000000000;
  v12[24] = 0;
  *((_QWORD *)v12 + 4) = 0;
  v12[40] = 1;
  v23 = sub_5440(&qword_262F00);
  v24 = &v12[*(int *)(v23 + 44)];
  *(_QWORD *)v24 = static VerticalAlignment.top.getter(v23);
  v24[8] = 0;
  v25 = sub_5440(&qword_262F08);
  sub_9BEA0(a1, (uint64_t)&v24[*(int *)(v25 + 36)]);
  sub_B3D0((uint64_t)v12, (uint64_t)v10, &qword_262EF8);
  *(_QWORD *)a2 = v19;
  *(_QWORD *)(a2 + 8) = v18;
  *(_BYTE *)(a2 + 16) = v42;
  *(_QWORD *)(a2 + 24) = v41;
  *(_BYTE *)(a2 + 32) = v40;
  *(_QWORD *)(a2 + 40) = v39;
  *(_BYTE *)(a2 + 48) = v38;
  *(_QWORD *)(a2 + 56) = v37;
  *(_BYTE *)(a2 + 64) = v36;
  *(_QWORD *)(a2 + 72) = v35;
  *(_BYTE *)(a2 + 80) = v34;
  *(_QWORD *)(a2 + 88) = v33;
  *(_BYTE *)(a2 + 96) = v32;
  v26 = v30;
  *(_QWORD *)(a2 + 104) = v31;
  *(_QWORD *)(a2 + 112) = v26;
  v27 = sub_5440(&qword_262F10);
  sub_B3D0((uint64_t)v10, a2 + *(int *)(v27 + 48), &qword_262EF8);
  swift_bridgeObjectRetain(v19);
  sub_B414((uint64_t)v12, &qword_262EF8);
  sub_B414((uint64_t)v10, &qword_262EF8);
  return swift_bridgeObjectRelease(v19);
}

uint64_t sub_9BEA0@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  char *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t *v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t *v49;
  char *v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  char *v70;
  char *v71;
  char *v72;
  char *v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t *v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t *v79;
  char *v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  void (*v88)(char *, char *, uint64_t);
  uint64_t v89;
  uint64_t v90;
  void (*v91)(char *, uint64_t);
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  char *v100;
  char *v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char v114;
  uint64_t v115;

  v99 = a2;
  v3 = type metadata accessor for AccessibilityChildBehavior(0);
  v103 = *(_QWORD *)(v3 - 8);
  v104 = v3;
  __chkstk_darwin(v3);
  v102 = (char *)&v93 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_5440(&qword_25FE08);
  __chkstk_darwin(v5);
  v100 = (char *)&v93 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (int *)type metadata accessor for TextLockup(0);
  __chkstk_darwin(v7);
  v9 = (uint64_t *)((char *)&v93 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = sub_5440(&qword_262F18);
  v106 = *(_QWORD *)(v10 - 8);
  v107 = v10;
  v11 = __chkstk_darwin(v10);
  v98 = (char *)&v93 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v101 = (char *)&v93 - v13;
  v14 = sub_5440(&qword_262F20);
  v15 = __chkstk_darwin(v14);
  v97 = (uint64_t)&v93 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v105 = (uint64_t)&v93 - v17;
  v18 = *a1;
  v19 = a1[1];
  v20 = a1[2];
  v21 = a1[3];
  v22 = a1[4];
  v23 = a1[5];
  v24 = *((_BYTE *)a1 + 48);
  v25 = a1[7];
  v108 = *a1;
  v109 = v19;
  v110 = v20;
  v111 = v21;
  v112 = v22;
  v113 = v23;
  v114 = v24;
  v115 = v25;
  v26 = sub_9B158();
  if (v27)
  {
    v28 = v27;
    v29 = v26;
    v96 = sub_9B418(0x20736574756E694DLL, 0xEC00000064616552, (uint64_t)"Year in Review: Summarized frame's shareable asset label for the total number of minutes read in the year", 105);
    v95 = v30;
    v31 = type metadata accessor for Font.Design(0);
    v32 = (uint64_t)v100;
    v33 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v100, 1, 1, v31);
    v94 = static HorizontalAlignment.leading.getter(v33);
    v34 = static Alignment.leading.getter(v94);
    v36 = v35;
    *v9 = swift_getKeyPath(&unk_1E6DC8);
    v37 = sub_5440(&qword_25F1E8);
    swift_storeEnumTagMultiPayload(v9, v37, 0);
    v38 = (_QWORD *)((char *)v9 + v7[5]);
    *v38 = swift_getKeyPath(&unk_1E6E18);
    v39 = sub_5440(&qword_25F208);
    swift_storeEnumTagMultiPayload(v38, v39, 0);
    v40 = (char *)v9 + v7[6];
    *(_QWORD *)v40 = swift_getKeyPath(&unk_1E6E40);
    v40[8] = 0;
    v41 = (char *)v9 + v7[7];
    *(_QWORD *)v41 = swift_getKeyPath(&unk_1E6E68);
    v41[8] = 0;
    v42 = (char *)v9 + v7[8];
    *(_QWORD *)v42 = swift_getKeyPath(&unk_1E6E90);
    v42[8] = 0;
    v43 = (char *)v9 + v7[9];
    *(_QWORD *)v43 = swift_getKeyPath(&unk_1E6EC0);
    v43[8] = 0;
    *((_BYTE *)v9 + v7[10]) = 1;
    v44 = (_QWORD *)((char *)v9 + v7[11]);
    v45 = v95;
    *v44 = v96;
    v44[1] = v45;
    v46 = (_QWORD *)((char *)v9 + v7[12]);
    *v46 = v29;
    v46[1] = v28;
    v46[2] = 0;
    v47 = (_QWORD *)((char *)v9 + v7[13]);
    *v47 = 0;
    v47[1] = 0;
    v48 = sub_167A4(v32, (uint64_t)v9 + v7[14], &qword_25FE08);
    *(_QWORD *)((char *)v9 + v7[15]) = v94;
    v49 = (_QWORD *)((char *)v9 + v7[16]);
    *v49 = v34;
    v49[1] = v36;
    *((_BYTE *)v9 + v7[17]) = 0;
    v50 = v102;
    static AccessibilityChildBehavior.combine.getter(v48);
    v51 = sub_6FD0((unint64_t *)&qword_262EE8, type metadata accessor for TextLockup, (uint64_t)&unk_1F26B8);
    v52 = v101;
    View.accessibilityElement(children:)(v50, v7, v51);
    (*(void (**)(char *, uint64_t))(v103 + 8))(v50, v104);
    sub_224DC((uint64_t)v9, type metadata accessor for TextLockup);
    v54 = v105;
    v53 = v106;
    v55 = v107;
    (*(void (**)(uint64_t, char *, uint64_t))(v106 + 32))(v105, v52, v107);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v53 + 56))(v54, 0, 1, v55);
    v18 = *a1;
    v19 = a1[1];
    v20 = a1[2];
    v21 = a1[3];
    v22 = a1[4];
    v23 = a1[5];
    v24 = *((_BYTE *)a1 + 48);
    v25 = a1[7];
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v106 + 56))(v105, 1, 1, v107);
  }
  v96 = sub_9B418(0xD000000000000010, 0x80000000001FB5C0, (uint64_t)"Year in Review: Summarized frame's shareable asset label for the total number of books/audiobooks read in the year", 114);
  v95 = v56;
  v108 = v18;
  v109 = v19;
  v110 = v20;
  v111 = v21;
  v112 = v22;
  v113 = v23;
  v114 = v24;
  v115 = v25;
  v57 = sub_9B5D4();
  v59 = v58;
  v60 = type metadata accessor for Font.Design(0);
  v61 = (uint64_t)v100;
  v62 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v60 - 8) + 56))(v100, 1, 1, v60);
  v63 = static HorizontalAlignment.leading.getter(v62);
  v64 = static Alignment.leading.getter(v63);
  v66 = v65;
  *v9 = swift_getKeyPath(&unk_1E6DC8);
  v67 = sub_5440(&qword_25F1E8);
  swift_storeEnumTagMultiPayload(v9, v67, 0);
  v68 = (_QWORD *)((char *)v9 + v7[5]);
  *v68 = swift_getKeyPath(&unk_1E6E18);
  v69 = sub_5440(&qword_25F208);
  swift_storeEnumTagMultiPayload(v68, v69, 0);
  v70 = (char *)v9 + v7[6];
  *(_QWORD *)v70 = swift_getKeyPath(&unk_1E6E40);
  v70[8] = 0;
  v71 = (char *)v9 + v7[7];
  *(_QWORD *)v71 = swift_getKeyPath(&unk_1E6E68);
  v71[8] = 0;
  v72 = (char *)v9 + v7[8];
  *(_QWORD *)v72 = swift_getKeyPath(&unk_1E6E90);
  v72[8] = 0;
  v73 = (char *)v9 + v7[9];
  *(_QWORD *)v73 = swift_getKeyPath(&unk_1E6EC0);
  v73[8] = 0;
  *((_BYTE *)v9 + v7[10]) = 1;
  v74 = (_QWORD *)((char *)v9 + v7[11]);
  v75 = v95;
  *v74 = v96;
  v74[1] = v75;
  v76 = (_QWORD *)((char *)v9 + v7[12]);
  *v76 = v57;
  v76[1] = v59;
  v76[2] = 0;
  v77 = (_QWORD *)((char *)v9 + v7[13]);
  *v77 = 0;
  v77[1] = 0;
  v78 = sub_167A4(v61, (uint64_t)v9 + v7[14], &qword_25FE08);
  *(_QWORD *)((char *)v9 + v7[15]) = v63;
  v79 = (_QWORD *)((char *)v9 + v7[16]);
  *v79 = v64;
  v79[1] = v66;
  *((_BYTE *)v9 + v7[17]) = 0;
  v80 = v102;
  static AccessibilityChildBehavior.combine.getter(v78);
  v81 = sub_6FD0((unint64_t *)&qword_262EE8, type metadata accessor for TextLockup, (uint64_t)&unk_1F26B8);
  v82 = v98;
  View.accessibilityElement(children:)(v80, v7, v81);
  (*(void (**)(char *, uint64_t))(v103 + 8))(v80, v104);
  sub_224DC((uint64_t)v9, type metadata accessor for TextLockup);
  v84 = v106;
  v83 = v107;
  v85 = v101;
  (*(void (**)(char *, char *, uint64_t))(v106 + 32))(v101, v82, v107);
  v86 = v105;
  v87 = v97;
  sub_B3D0(v105, v97, &qword_262F20);
  v88 = *(void (**)(char *, char *, uint64_t))(v84 + 16);
  v88(v82, v85, v83);
  v89 = v99;
  sub_B3D0(v87, v99, &qword_262F20);
  v90 = sub_5440(&qword_262F28);
  v88((char *)(v89 + *(int *)(v90 + 48)), v82, v83);
  v91 = *(void (**)(char *, uint64_t))(v84 + 8);
  v91(v85, v83);
  sub_B414(v86, &qword_262F20);
  v91(v82, v83);
  return sub_B414(v87, &qword_262F20);
}

uint64_t SummaryFrameViewModel.init(sharableAssetViewModel:exposureData:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;

  v5 = *a1;
  v6 = a1[1];
  v7 = a1[2];
  v8 = a1[3];
  v9 = a1[4];
  v10 = a1[5];
  v11 = *((_BYTE *)a1 + 48);
  v12 = a1[7];
  v13 = type metadata accessor for SummaryFrameViewModel(0);
  v14 = (_QWORD *)(a3 + *(int *)(v13 + 24));
  *v14 = 0xD000000000000013;
  v14[1] = 0x80000000001F9710;
  *(_QWORD *)a3 = v5;
  *(_QWORD *)(a3 + 8) = v6;
  *(_QWORD *)(a3 + 16) = v7;
  *(_QWORD *)(a3 + 24) = v8;
  *(_QWORD *)(a3 + 32) = v9;
  *(_QWORD *)(a3 + 40) = v10;
  *(_BYTE *)(a3 + 48) = v11;
  *(_QWORD *)(a3 + 56) = v12;
  v15 = a3 + *(int *)(v13 + 20);
  v16 = type metadata accessor for YIRSourceData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v15, a2, v16);
}

uint64_t sub_9C6E4()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t ObjCClassFromMetadata;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE v28[16];

  v1 = type metadata accessor for Locale(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = __chkstk_darwin(v1);
  v5 = &v28[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v3);
  v7 = &v28[-v6];
  v8 = type metadata accessor for String.LocalizationValue(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = &v28[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v10);
  v14 = &v28[-v13];
  v15 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000011, 0x80000000001FB390);
  static Locale.current.getter(v15);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v9 + 16))(v12, v14, v8);
  v16 = type metadata accessor for BundleFinder();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v16);
  v18 = objc_msgSend((id)objc_opt_self(NSBundle), "bundleForClass:", ObjCClassFromMetadata);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v2 + 16))(v5, v7, v1);
  v19 = String.init(localized:table:bundle:locale:comment:)(v12, 0, 0, v18, v5, "Year of review + Year in Review feature name - appears in share sheet preview title", 83, 2);
  v21 = v20;
  (*(void (**)(_BYTE *, uint64_t))(v2 + 8))(v7, v1);
  (*(void (**)(_BYTE *, uint64_t))(v9 + 8))(v14, v8);
  v22 = sub_5440(&qword_25E310);
  v23 = swift_allocObject(v22, 72, 7);
  *(_OWORD *)(v23 + 16) = xmmword_1E0B70;
  v25 = *v0;
  v24 = v0[1];
  *(_QWORD *)(v23 + 56) = &type metadata for String;
  *(_QWORD *)(v23 + 64) = sub_578F0();
  *(_QWORD *)(v23 + 32) = v25;
  *(_QWORD *)(v23 + 40) = v24;
  swift_bridgeObjectRetain(v24);
  v26 = static String.localizedStringWithFormat(_:_:)(v19, v21, v23);
  swift_bridgeObjectRelease(v21);
  swift_bridgeObjectRelease(v23);
  return v26;
}

uint64_t WelcomeFrame.background.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1E428(v1, a1, type metadata accessor for PageBackground);
}

uint64_t SummaryFrame.exposureData.getter@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v2 + *(int *)(a1 + 56);
  v5 = v4 + *(int *)(type metadata accessor for SummaryFrameViewModel(0) + 20);
  v6 = type metadata accessor for YIRSourceData(0);
  a2[3] = v6;
  a2[4] = sub_6FD0(&qword_25EFF0, (uint64_t (*)(uint64_t))&type metadata accessor for YIRSourceData, (uint64_t)&protocol conformance descriptor for YIRSourceData);
  a2[5] = sub_6FD0(&qword_25EFF8, (uint64_t (*)(uint64_t))&type metadata accessor for YIRSourceData, (uint64_t)&protocol conformance descriptor for YIRSourceData);
  v7 = sub_C404(a2);
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(v7, v5, v6);
}

uint64_t SummaryFrame.init(model:shareableImage:sharableItem:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, char *a8@<X8>)
{
  char *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v14 = &a8[*(int *)(sub_5440(&qword_25E930) + 48)];
  v15 = objc_msgSend((id)objc_opt_self(UIColor), "secondarySystemBackgroundColor");
  *(_QWORD *)a8 = Color.init(uiColor:)(v15);
  v16 = enum case for ColorScheme.light(_:);
  v17 = type metadata accessor for ColorScheme(0);
  v18 = *(_QWORD *)(v17 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 104))(v14, v16, v17);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v14, 0, 1, v17);
  v19 = type metadata accessor for PageBackground(0);
  swift_storeEnumTagMultiPayload(a8, v19, 0);
  v32 = a4;
  v33 = a5;
  v34 = a6;
  v35 = a7;
  v20 = (int *)type metadata accessor for SummaryFrame(0, (uint64_t)&v32);
  v21 = &a8[v20[13]];
  *(_QWORD *)v21 = swift_getKeyPath(&unk_1E6A90);
  v22 = sub_5440(&qword_25F200);
  v23 = swift_storeEnumTagMultiPayload(v21, v22, 0);
  *(_QWORD *)&a8[v20[17]] = 0x402C000000000000;
  v24 = v20[18];
  v25 = static Color.black.getter(v23);
  v26 = Color.opacity(_:)(0.3);
  swift_release(v25);
  *(_QWORD *)&a8[v24] = v26;
  *(_QWORD *)&a8[v20[19]] = 0x4034000000000000;
  *(_QWORD *)&a8[v20[20]] = 0;
  *(_QWORD *)&a8[v20[21]] = 0x4020000000000000;
  v27 = &a8[v20[22]];
  v36 = 0;
  State.init(wrappedValue:)(&v32, &v36, &type metadata for CGFloat);
  v28 = v33;
  *(_QWORD *)v27 = v32;
  *((_QWORD *)v27 + 1) = v28;
  sub_9F940(a1, (uint64_t)&a8[v20[14]]);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 32))(&a8[v20[15]], a2, a4);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 32))(&a8[v20[16]], a3, a5);
}

double sub_9CBFC()
{
  uint64_t v0;
  double v2;

  v0 = sub_5440(&qword_25F3D8);
  State.wrappedValue.getter(&v2, v0);
  return v2;
}

uint64_t sub_9CC50(uint64_t a1, double a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[3];

  v3 = (uint64_t *)(v2 + *(int *)(a1 + 88));
  v4 = *v3;
  v5 = v3[1];
  *(double *)v8 = a2;
  v8[1] = v4;
  v8[2] = v5;
  v6 = sub_5440(&qword_25F3D8);
  return State.wrappedValue.setter(v8, v6);
}

uint64_t SummaryFrame.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t WitnessTable;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t OpaqueTypeMetadata2;
  uint64_t OpaqueTypeConformance2;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t TupleTypeMetadata3;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void (*v67)(char *, uint64_t);
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD v83[14];
  uint64_t v84;
  void *v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  void *v89;
  void *v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  void *v94;
  uint64_t v95;
  void *v96;
  uint64_t v97;
  void *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  void *v102;

  v81 = a2;
  v3 = type metadata accessor for ColorScheme(0);
  v79 = *(_QWORD *)(v3 - 8);
  v80 = v3;
  __chkstk_darwin(v3);
  v78 = (char *)&v69 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for SizeConstants.Spacing(0);
  __chkstk_darwin(v5);
  v76 = (uint64_t)&v69 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v73 = type metadata accessor for TextLockup(255);
  v7 = *(_QWORD *)(a1 + 16);
  v82 = a1;
  v75 = v7;
  v8 = type metadata accessor for ModifiedContent(255, v7, &type metadata for _FrameLayout);
  v9 = sub_7EF8(&qword_25F700);
  v10 = type metadata accessor for ModifiedContent(255, v8, v9);
  v11 = type metadata accessor for ModifiedContent(255, v10, &type metadata for _ShadowEffect);
  v12 = type metadata accessor for ModifiedContent(255, v11, &type metadata for _ScaleEffect);
  v13 = type metadata accessor for ModifiedContent(255, v12, &type metadata for _FrameLayout);
  type metadata accessor for CGSize(255);
  v15 = v14;
  v74 = *(_QWORD *)(a1 + 32);
  v101 = v74;
  v102 = &protocol witness table for _FrameLayout;
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v8);
  v17 = sub_7FD8(&qword_25F6F8, &qword_25F700, (uint64_t)&protocol conformance descriptor for _ClipEffect<A>);
  v99 = WitnessTable;
  v100 = v17;
  v97 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v10);
  v98 = &protocol witness table for _ShadowEffect;
  v95 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v11);
  v96 = &protocol witness table for _ScaleEffect;
  v93 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v12);
  v94 = &protocol witness table for _FrameLayout;
  v18 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v13);
  v19 = sub_6FD0(&qword_25E308, (uint64_t (*)(uint64_t))type metadata accessor for CGSize, (uint64_t)&protocol conformance descriptor for CGSize);
  v84 = v13;
  v85 = v15;
  v86 = (void *)v18;
  v87 = v19;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(255, &v84, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 0);
  v84 = v13;
  v85 = v15;
  v86 = (void *)v18;
  v87 = v19;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v84, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
  v70 = type metadata accessor for GeometryReader(255, OpaqueTypeMetadata2, OpaqueTypeConformance2);
  v22 = v82;
  v72 = *(_QWORD *)(v82 + 24);
  v23 = type metadata accessor for CollectionOfOne(255, v72);
  v24 = sub_7EF8(&qword_262708);
  v25 = swift_getWitnessTable(&protocol conformance descriptor for CollectionOfOne<A>, v23);
  v26 = sub_9F984();
  v71 = *(_QWORD *)(v22 + 40);
  v84 = v23;
  v85 = &type metadata for Never;
  v86 = &type metadata for Never;
  v87 = v24;
  v88 = v25;
  v89 = &protocol witness table for Never;
  v90 = &protocol witness table for Never;
  v91 = v26;
  v92 = v71;
  v27 = type metadata accessor for ShareLink(255, &v84);
  v28 = type metadata accessor for BorderedProminentButtonStyle(255);
  v29 = swift_getWitnessTable(&protocol conformance descriptor for ShareLink<A, B, C, D>, v27);
  v30 = sub_6FD0(&qword_262CA0, (uint64_t (*)(uint64_t))&type metadata accessor for BorderedProminentButtonStyle, (uint64_t)&protocol conformance descriptor for BorderedProminentButtonStyle);
  v84 = v27;
  v85 = (void *)v28;
  v86 = (void *)v29;
  v87 = v30;
  v31 = swift_getOpaqueTypeMetadata2(255, &v84, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 0);
  v32 = sub_7EF8(&qword_262CA8);
  v33 = type metadata accessor for ModifiedContent(255, v31, v32);
  v34 = sub_7EF8(&qword_25FD90);
  v35 = type metadata accessor for ModifiedContent(255, v33, v34);
  v36 = sub_7EF8(&qword_25F2F8);
  v84 = v27;
  v85 = (void *)v28;
  v86 = (void *)v29;
  v87 = v30;
  v37 = swift_getOpaqueTypeConformance2(&v84, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
  v38 = sub_7FD8(&qword_262CB0, &qword_262CA8, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
  v83[12] = v37;
  v83[13] = v38;
  v39 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v33);
  v40 = sub_7FD8((unint64_t *)&qword_25FD88, &qword_25FD90, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
  v83[10] = v39;
  v83[11] = v40;
  v41 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v35);
  v42 = sub_7FD8(&qword_25F458, &qword_25F2F8, (uint64_t)&protocol conformance descriptor for PartialRangeThrough<A>);
  v84 = v35;
  v85 = (void *)v36;
  v86 = (void *)v41;
  v87 = v42;
  v43 = swift_getOpaqueTypeMetadata2(255, &v84, &opaque type descriptor for <<opaque return type of View.dynamicTypeSize<A>(_:)>>, 0);
  v44 = type metadata accessor for ModifiedContent(255, v43, &type metadata for _FrameLayout);
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3(255, v73, v70, v44, 0, 0);
  v46 = type metadata accessor for TupleView(255, TupleTypeMetadata3);
  v47 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v46);
  v48 = type metadata accessor for VStack(0, v46, v47);
  v70 = *(_QWORD *)(v48 - 8);
  __chkstk_darwin(v48);
  v50 = (char *)&v69 - v49;
  v51 = sub_7EF8(&qword_25EE58);
  v52 = type metadata accessor for ModifiedContent(0, v48, v51);
  v73 = *(_QWORD *)(v52 - 8);
  v53 = __chkstk_darwin(v52);
  v55 = (char *)&v69 - ((v54 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v53);
  v69 = (uint64_t)&v69 - v56;
  v58 = v76;
  v57 = v77;
  _s7BooksUI35ListItemEditionsDescriptorExternalsV7spacingAA13SizeConstantsV7SpacingVvg_0(v76);
  v59 = sub_224DC(v58, type metadata accessor for SizeConstants.Spacing);
  v83[2] = v75;
  v83[3] = v72;
  v83[4] = v74;
  v83[5] = v71;
  v83[6] = v57;
  v60 = static HorizontalAlignment.center.getter(v59);
  VStack.init(alignment:spacing:content:)(v60, 0x4040000000000000, 0, sub_9FAD4, v83, v46, v47);
  v62 = v78;
  v61 = v79;
  v63 = v80;
  (*(void (**)(char *, _QWORD, uint64_t))(v79 + 104))(v78, enum case for ColorScheme.light(_:), v80);
  v64 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v48);
  View.colorScheme(_:)(v62, v48, v64);
  (*(void (**)(char *, uint64_t))(v61 + 8))(v62, v63);
  (*(void (**)(char *, uint64_t))(v70 + 8))(v50, v48);
  v65 = sub_7FD8((unint64_t *)&qword_25EE78, &qword_25EE58, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
  v83[8] = v64;
  v83[9] = v65;
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v52);
  v66 = v69;
  sub_10F80((uint64_t)v55, v52, v69);
  v67 = *(void (**)(char *, uint64_t))(v73 + 8);
  v67(v55, v52);
  sub_C5C0(v66, v52, v81);
  return ((uint64_t (*)(uint64_t, uint64_t))v67)(v66, v52);
}

uint64_t sub_9D398@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, void *a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t WitnessTable;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t OpaqueTypeMetadata2;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t OpaqueTypeConformance2;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  int *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  int *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  char *v69;
  char *v70;
  char *v71;
  char *v72;
  _QWORD *v73;
  _QWORD *v74;
  int *v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t *v83;
  uint64_t v84;
  unint64_t v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  _QWORD *v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  __n128 v108;
  uint64_t v109;
  char *v110;
  uint64_t *v111;
  id v112;
  char *v113;
  char *v114;
  uint64_t v115;
  char *v116;
  char *v117;
  uint64_t *v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  __n128 v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t result;
  void *v135;
  char *v136;
  char *v137;
  uint64_t v138;
  uint64_t *v139;
  unint64_t v140;
  double v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  void (*v153)(uint64_t, uint64_t);
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  uint64_t v158;
  uint64_t v159;
  char *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  char *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  int *v175;
  _QWORD *v176;
  char *v177;
  uint64_t *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  char *v185;
  char *v186;
  uint64_t v187;
  char *v188;
  unint64_t v189;
  char *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  char *v196;
  char *v197;
  uint64_t v198;
  char *v199;
  uint64_t v200;
  uint64_t v201;
  char *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t *v206;
  uint64_t v207;
  void *v208;
  unint64_t v209;
  _QWORD v210[11];
  _QWORD v211[3];
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  void *v215;
  uint64_t v216;
  void *v217;
  uint64_t v218;
  void *v219;
  uint64_t v220;
  void *v221;
  uint64_t v222;
  uint64_t v223;
  void *v224;
  void *v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t *v233;
  void *v234;
  unint64_t v235;
  uint64_t v236;
  void *v237;
  void *v238;
  unint64_t v239;
  unint64_t v240;

  v208 = a4;
  v209 = a5;
  v206 = a3;
  v207 = a2;
  v205 = a1;
  v171 = a6;
  v203 = sub_5440(&qword_25F2F8);
  __chkstk_darwin(v203);
  v202 = (char *)&v158 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ButtonBorderShape(0);
  v200 = *(_QWORD *)(v9 - 8);
  v201 = v9;
  __chkstk_darwin(v9);
  v199 = (char *)&v158 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for BorderedProminentButtonStyle(0);
  v198 = *(_QWORD *)(v11 - 8);
  v12 = (uint64_t *)v11;
  __chkstk_darwin(v11);
  v197 = (char *)&v158 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_5440(&qword_262ED8);
  v15 = __chkstk_darwin(v14);
  v196 = (char *)&v158 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v192 = *(a3 - 1);
  __chkstk_darwin(v15);
  v190 = (char *)&v158 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for CollectionOfOne(255, a3);
  v19 = sub_7EF8(&qword_262708);
  v191 = v19;
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for CollectionOfOne<A>, v18);
  v189 = sub_9F984();
  v232 = v18;
  v233 = (uint64_t *)&type metadata for Never;
  v234 = &type metadata for Never;
  v235 = v19;
  v236 = WitnessTable;
  v237 = &protocol witness table for Never;
  v238 = &protocol witness table for Never;
  v239 = v189;
  v240 = a5;
  v21 = type metadata accessor for ShareLink(0, &v232);
  v195 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  v188 = (char *)&v158 - v22;
  v23 = swift_getWitnessTable(&protocol conformance descriptor for ShareLink<A, B, C, D>, v21);
  v24 = sub_6FD0(&qword_262CA0, (uint64_t (*)(uint64_t))&type metadata accessor for BorderedProminentButtonStyle, (uint64_t)&protocol conformance descriptor for BorderedProminentButtonStyle);
  v232 = v21;
  v233 = v12;
  v178 = v12;
  v179 = v21;
  v234 = (void *)v23;
  v235 = v24;
  v180 = v24;
  v181 = v23;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(0, &v232, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 0);
  v194 = *(_QWORD *)(OpaqueTypeMetadata2 - 8);
  v187 = OpaqueTypeMetadata2;
  __chkstk_darwin(OpaqueTypeMetadata2);
  v185 = (char *)&v158 - v26;
  v27 = sub_7EF8(&qword_262CA8);
  v28 = type metadata accessor for ModifiedContent(0, OpaqueTypeMetadata2, v27);
  v193 = *(_QWORD *)(v28 - 8);
  __chkstk_darwin(v28);
  v186 = (char *)&v158 - v29;
  v30 = sub_7EF8(&qword_25FD90);
  v184 = v28;
  v31 = type metadata accessor for ModifiedContent(0, v28, v30);
  v166 = *(_QWORD *)(v31 - 8);
  __chkstk_darwin(v31);
  v177 = (char *)&v158 - v32;
  v232 = v21;
  v233 = v12;
  v234 = (void *)v23;
  v235 = v24;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v232, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
  v182 = OpaqueTypeConformance2;
  v34 = sub_7FD8(&qword_262CB0, &qword_262CA8, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
  v230 = OpaqueTypeConformance2;
  v231 = v34;
  v35 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v28);
  v183 = v35;
  v36 = sub_7FD8((unint64_t *)&qword_25FD88, &qword_25FD90, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
  v228 = v35;
  v229 = v36;
  v37 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v31);
  v38 = sub_7FD8(&qword_25F458, &qword_25F2F8, (uint64_t)&protocol conformance descriptor for PartialRangeThrough<A>);
  v168 = v31;
  v232 = v31;
  v233 = (uint64_t *)v203;
  v161 = v37;
  v234 = (void *)v37;
  v235 = v38;
  v159 = v38;
  v39 = swift_getOpaqueTypeMetadata2(0, &v232, &opaque type descriptor for <<opaque return type of View.dynamicTypeSize<A>(_:)>>, 0);
  v162 = *(_QWORD *)(v39 - 8);
  __chkstk_darwin(v39);
  v160 = (char *)&v158 - v40;
  v163 = v41;
  v170 = type metadata accessor for ModifiedContent(0, v41, &type metadata for _FrameLayout);
  v165 = *(_QWORD *)(v170 - 8);
  v42 = __chkstk_darwin(v170);
  v169 = (char *)&v158 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v42);
  v167 = (uint64_t)&v158 - v44;
  v232 = v207;
  v233 = v206;
  v234 = v208;
  v235 = v209;
  v204 = type metadata accessor for SummaryFrame(0, (uint64_t)&v232);
  v45 = *(_QWORD *)(v204 - 8);
  v46 = *(_QWORD *)(v45 + 64);
  __chkstk_darwin(v204);
  v48 = (char *)&v158 - v47;
  v49 = sub_5440(&qword_25FE08);
  __chkstk_darwin(v49);
  v51 = (char *)&v158 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = (int *)type metadata accessor for TextLockup(0);
  v53 = __chkstk_darwin(v52);
  v164 = (uint64_t)&v158 - ((v54 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v53);
  v56 = (uint64_t *)((char *)&v158 - v55);
  v57 = sub_9B418(0xD000000000000012, 0x80000000001FB490, (uint64_t)"Year in Review: Summarized frame title", 38);
  v175 = v58;
  v176 = (_QWORD *)v57;
  v59 = sub_9B418(0x1000000000000041, 0x80000000001FB410, (uint64_t)"Year in Review: Summarized frame subtitle", 41);
  v173 = v60;
  v174 = v59;
  v61 = type metadata accessor for Font.Design(0);
  v62 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v61 - 8) + 56))(v51, 1, 1, v61);
  v172 = static HorizontalAlignment.center.getter(v62);
  v63 = _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0();
  v65 = v64;
  *v56 = swift_getKeyPath(&unk_1E6DC8);
  v66 = sub_5440(&qword_25F1E8);
  swift_storeEnumTagMultiPayload(v56, v66, 0);
  v67 = (_QWORD *)((char *)v56 + v52[5]);
  *v67 = swift_getKeyPath(&unk_1E6E18);
  v68 = sub_5440(&qword_25F208);
  swift_storeEnumTagMultiPayload(v67, v68, 0);
  v69 = (char *)v56 + v52[6];
  *(_QWORD *)v69 = swift_getKeyPath(&unk_1E6E40);
  v69[8] = 0;
  v70 = (char *)v56 + v52[7];
  *(_QWORD *)v70 = swift_getKeyPath(&unk_1E6E68);
  v70[8] = 0;
  v71 = (char *)v56 + v52[8];
  *(_QWORD *)v71 = swift_getKeyPath(&unk_1E6E90);
  v71[8] = 0;
  v72 = (char *)v56 + v52[9];
  *(_QWORD *)v72 = swift_getKeyPath(&unk_1E6EC0);
  v72[8] = 0;
  *((_BYTE *)v56 + v52[10]) = 2;
  v73 = (_QWORD *)((char *)v56 + v52[11]);
  *v73 = 0;
  v73[1] = 0;
  v74 = (_QWORD *)((char *)v56 + v52[12]);
  v75 = v175;
  *v74 = v176;
  v74[1] = v75;
  v74[2] = 0;
  v76 = (_QWORD *)((char *)v56 + v52[13]);
  v77 = v173;
  *v76 = v174;
  v76[1] = v77;
  sub_167A4((uint64_t)v51, (uint64_t)v56 + v52[14], &qword_25FE08);
  *(_QWORD *)((char *)v56 + v52[15]) = v172;
  v78 = (_QWORD *)((char *)v56 + v52[16]);
  *v78 = v63;
  v78[1] = v65;
  v175 = v52;
  v176 = v56;
  *((_BYTE *)v56 + v52[17]) = 1;
  v79 = v204;
  (*(void (**)(char *, uint64_t, uint64_t))(v45 + 16))(v48, v205, v204);
  v80 = *(unsigned __int8 *)(v45 + 80);
  v81 = (v80 + 48) & ~v80;
  v82 = (char *)swift_allocObject(&unk_24F4E0, v81 + v46, v80 | 7);
  v83 = v206;
  v84 = v207;
  *((_QWORD *)v82 + 2) = v207;
  *((_QWORD *)v82 + 3) = v83;
  v86 = v208;
  v85 = v209;
  *((_QWORD *)v82 + 4) = v208;
  *((_QWORD *)v82 + 5) = v85;
  (*(void (**)(char *, char *, uint64_t))(v45 + 32))(&v82[v81], v48, v79);
  v87 = type metadata accessor for ModifiedContent(255, v84, &type metadata for _FrameLayout);
  v88 = sub_7EF8(&qword_25F700);
  v89 = type metadata accessor for ModifiedContent(255, v87, v88);
  v90 = type metadata accessor for ModifiedContent(255, v89, &type metadata for _ShadowEffect);
  v91 = type metadata accessor for ModifiedContent(255, v90, &type metadata for _ScaleEffect);
  v92 = type metadata accessor for ModifiedContent(255, v91, &type metadata for _FrameLayout);
  type metadata accessor for CGSize(255);
  v94 = v93;
  v224 = v86;
  v225 = &protocol witness table for _FrameLayout;
  v95 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v87);
  v96 = sub_7FD8(&qword_25F6F8, &qword_25F700, (uint64_t)&protocol conformance descriptor for _ClipEffect<A>);
  v222 = v95;
  v223 = v96;
  v220 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v89);
  v221 = &protocol witness table for _ShadowEffect;
  v218 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v90);
  v219 = &protocol witness table for _ScaleEffect;
  v216 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v91);
  v217 = &protocol witness table for _FrameLayout;
  v97 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v92);
  v98 = sub_6FD0(&qword_25E308, (uint64_t (*)(uint64_t))type metadata accessor for CGSize, (uint64_t)&protocol conformance descriptor for CGSize);
  v232 = v92;
  v233 = v94;
  v234 = (void *)v97;
  v235 = v98;
  v99 = swift_getOpaqueTypeMetadata2(0, &v232, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 0);
  v232 = v92;
  v233 = v94;
  v234 = (void *)v97;
  v235 = v98;
  v100 = v205;
  v101 = swift_getOpaqueTypeConformance2(&v232, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
  v102 = GeometryReader.init(content:)(sub_A40E0, v82, v99, v101);
  v104 = v103;
  v232 = v102;
  v233 = v103;
  v105 = v177;
  v106 = type metadata accessor for GeometryReader(0, v99, v101);
  v107 = swift_getWitnessTable(&protocol conformance descriptor for GeometryReader<A>, v106);
  v174 = v106;
  sub_10F80((uint64_t)&v232, v106, (uint64_t)&v226);
  v108 = swift_release(v104);
  v109 = v204;
  v110 = v190;
  v111 = v206;
  (*(void (**)(char *, uint64_t, uint64_t *, __n128))(v192 + 16))(v190, v100 + *(int *)(v204 + 64), v206, v108);
  v112 = sub_9EBEC(v109);
  v235 = sub_A4168();
  v232 = (uint64_t)v112;
  v113 = v196;
  SharePreview<>.init(metadata:)(&v232);
  v210[2] = v207;
  v210[3] = v111;
  v210[4] = v208;
  v210[5] = v209;
  v210[6] = v100;
  v157 = v113;
  v114 = v188;
  v115 = ShareLink.init<A>(item:subject:message:preview:label:)(v110, 0, 0, 0, 0, 0, 0, 0, 0, v157, sub_A41A4, v210, &type metadata for Never, &type metadata for Never, v191, v111, &protocol witness table for Never, &protocol witness table for Never, v189,
           v209);
  v116 = v197;
  BorderedProminentButtonStyle.init()(v115);
  v117 = v185;
  v118 = v178;
  v119 = v179;
  View.buttonStyle<A>(_:)(v116, v179, v178, v181, v180);
  (*(void (**)(char *, uint64_t *))(v198 + 8))(v116, v118);
  v120 = (*(uint64_t (**)(char *, uint64_t))(v195 + 8))(v114, v119);
  v121 = v199;
  static ButtonBorderShape.roundedRectangle.getter(v120);
  v123 = v186;
  v122 = v187;
  View.buttonBorderShape(_:)(v121, v187, v182);
  (*(void (**)(char *, uint64_t))(v200 + 8))(v121, v201);
  v124 = (*(uint64_t (**)(char *, uint64_t))(v194 + 8))(v117, v122);
  v125 = static Color.black.getter(v124);
  v126 = v105;
  v127 = v184;
  View.tint(_:)(v125, v184, v183);
  v128 = swift_release(v125);
  (*(void (**)(char *, uint64_t, __n128))(v193 + 8))(v123, v127, v128);
  v129 = enum case for DynamicTypeSize.xxxLarge(_:);
  v130 = type metadata accessor for DynamicTypeSize(0);
  v131 = v202;
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v130 - 8) + 104))(v202, v129, v130);
  v132 = (uint64_t)v131;
  v133 = sub_6FD0(&qword_25F450, (uint64_t (*)(uint64_t))&type metadata accessor for DynamicTypeSize, (uint64_t)&protocol conformance descriptor for DynamicTypeSize);
  result = dispatch thunk of static Equatable.== infix(_:_:)(v131, v131, v130, v133);
  if ((result & 1) != 0)
  {
    v209 = v107;
    v136 = v160;
    v135 = (void *)v161;
    v137 = v131;
    v138 = v168;
    v139 = (uint64_t *)v203;
    v140 = v159;
    View.dynamicTypeSize<A>(_:)(v137, v168, v203, v161, v159);
    sub_B414(v132, &qword_25F2F8);
    (*(void (**)(char *, uint64_t))(v166 + 8))(v126, v138);
    v141 = sub_9CBFC();
    v142 = _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0();
    v144 = v143;
    v232 = v138;
    v233 = v139;
    v234 = v135;
    v235 = v140;
    v145 = swift_getOpaqueTypeConformance2(&v232, &opaque type descriptor for <<opaque return type of View.dynamicTypeSize<A>(_:)>>, 1);
    v146 = (uint64_t)v169;
    v147 = v142;
    v148 = v163;
    View.frame(width:height:alignment:)(*(_QWORD *)&v141, 0, 0, 1, v147, v144, v163, v145);
    (*(void (**)(char *, uint64_t))(v162 + 8))(v136, v148);
    v214 = v145;
    v215 = &protocol witness table for _FrameLayout;
    v149 = v170;
    v150 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v170);
    v151 = v167;
    sub_10F80(v146, v149, v167);
    v152 = v165;
    v153 = *(void (**)(_QWORD, _QWORD))(v165 + 8);
    v153(v146, v149);
    v154 = (uint64_t)v176;
    v155 = v164;
    sub_1E428((uint64_t)v176, v164, type metadata accessor for TextLockup);
    v156 = v227;
    v212 = v226;
    v213 = v227;
    v232 = v155;
    v233 = &v212;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v152 + 16))(v146, v151, v149);
    v234 = (void *)v146;
    swift_retain(v156);
    v211[0] = v175;
    v211[1] = v174;
    v211[2] = v149;
    v210[8] = sub_6FD0((unint64_t *)&qword_262EE8, type metadata accessor for TextLockup, (uint64_t)&unk_1F26B8);
    v210[9] = v209;
    v210[10] = v150;
    sub_DAC78(&v232, 3uLL, (uint64_t)v211);
    v153(v151, v149);
    swift_release(v227);
    sub_224DC(v154, type metadata accessor for TextLockup);
    v153(v146, v149);
    swift_release(v213);
    return sub_224DC(v155, type metadata accessor for TextLockup);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_9E20C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, double a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t WitnessTable;
  uint64_t v30;
  double v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  double v53;
  double v54;
  double v55;
  uint64_t v56;
  double v57;
  char *v58;
  uint64_t v59;
  double v60;
  uint64_t v61;
  double v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  double v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  double v89;
  uint64_t v90;
  uint64_t v91;
  __n128 v92;
  uint64_t v93;
  uint64_t v94;
  void (*v95)(uint64_t, uint64_t);
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t OpaqueTypeMetadata2;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  double v135;
  uint64_t v136;
  void *v137;
  uint64_t v138;
  void *v139;
  uint64_t v140;
  void *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  void *v145;
  double v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;

  v131 = a6;
  v130 = a4;
  v121 = a1;
  v132 = a7;
  v128 = type metadata accessor for GeometryProxy(0);
  v127 = *(_QWORD *)(v128 - 8);
  v129 = *(_QWORD *)(v127 + 64);
  __chkstk_darwin(v128);
  v126 = (char *)&v97 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v146 = a3;
  v147 = a4;
  v135 = a3;
  v148 = a5;
  v149 = a6;
  v133 = a5;
  v13 = (int *)type metadata accessor for SummaryFrame(0, (uint64_t)&v146);
  v124 = *((_QWORD *)v13 - 1);
  v125 = *(_QWORD *)(v124 + 64);
  __chkstk_darwin(v13);
  v123 = (char *)&v97 - v14;
  v107 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v107);
  v16 = (uint64_t *)((char *)&v97 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  v17 = type metadata accessor for ModifiedContent(0, *(_QWORD *)&a3, &type metadata for _FrameLayout);
  v112 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v102 = (char *)&v97 - v18;
  v19 = sub_7EF8(&qword_25F700);
  v20 = type metadata accessor for ModifiedContent(0, v17, v19);
  v113 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20);
  v105 = (char *)&v97 - v21;
  v99 = v20;
  v22 = type metadata accessor for ModifiedContent(0, v20, &type metadata for _ShadowEffect);
  v117 = *(_QWORD *)(v22 - 8);
  __chkstk_darwin(v22);
  v106 = (char *)&v97 - v23;
  v101 = v22;
  v24 = type metadata accessor for ModifiedContent(0, v22, &type metadata for _ScaleEffect);
  v120 = *(_QWORD *)(v24 - 8);
  __chkstk_darwin(v24);
  v108 = (char *)&v97 - v25;
  v104 = v24;
  *(double *)&v134 = COERCE_DOUBLE(type metadata accessor for ModifiedContent(0, v24, &type metadata for _FrameLayout));
  v122 = *(_QWORD *)(v134 - 8);
  __chkstk_darwin(v134);
  v111 = (char *)&v97 - v26;
  type metadata accessor for CGSize(255);
  v28 = v27;
  v110 = v27;
  v144 = a5;
  v145 = &protocol witness table for _FrameLayout;
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v17);
  v97 = WitnessTable;
  v30 = sub_7FD8(&qword_25F6F8, &qword_25F700, (uint64_t)&protocol conformance descriptor for _ClipEffect<A>);
  v142 = WitnessTable;
  v143 = v30;
  v98 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v20);
  v140 = v98;
  v141 = &protocol witness table for _ShadowEffect;
  v100 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v22);
  v138 = v100;
  v139 = &protocol witness table for _ScaleEffect;
  v103 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v24);
  v136 = v103;
  v137 = &protocol witness table for _FrameLayout;
  v31 = *(double *)&v134;
  v32 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v134);
  v115 = v32;
  v114 = sub_6FD0(&qword_25E308, (uint64_t (*)(uint64_t))type metadata accessor for CGSize, (uint64_t)&protocol conformance descriptor for CGSize);
  v146 = v31;
  v147 = v28;
  v148 = v32;
  v149 = v114;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(0, &v146, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 0);
  v119 = *(_QWORD *)(OpaqueTypeMetadata2 - 8);
  v33 = __chkstk_darwin(OpaqueTypeMetadata2);
  v109 = (char *)&v97 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v33);
  v116 = (uint64_t)&v97 - v35;
  v36 = a2 + v13[14];
  v38 = *(_QWORD *)(v36 + 16);
  v37 = *(_QWORD *)(v36 + 24);
  v39 = _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0();
  v40 = v102;
  View.frame(width:height:alignment:)(v38, 0, v37, 0, v39, v41, *(_QWORD *)&v135, v133);
  v42 = *(_QWORD *)(a2 + v13[17]);
  v43 = v107;
  v44 = (char *)v16 + *(int *)(v107 + 20);
  v45 = enum case for RoundedCornerStyle.continuous(_:);
  v46 = type metadata accessor for RoundedCornerStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 104))(v44, v45, v46);
  *v16 = v42;
  v16[1] = v42;
  v47 = sub_6FD0(&qword_262EF0, (uint64_t (*)(uint64_t))&type metadata accessor for RoundedRectangle, (uint64_t)&protocol conformance descriptor for RoundedRectangle);
  v48 = v105;
  View.clipShape<A>(_:style:)(v16, 256, v17, v43, v97, v47);
  sub_224DC((uint64_t)v16, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  (*(void (**)(char *, uint64_t))(v112 + 8))(v40, v17);
  v49 = v106;
  v50 = v99;
  View.shadow(color:radius:x:y:)(*(_QWORD *)(a2 + v13[18]), v99, v98, *(double *)(a2 + v13[19]), *(double *)(a2 + v13[20]), *(double *)(a2 + v13[21]));
  v51 = (*(uint64_t (**)(char *, uint64_t))(v113 + 8))(v48, v50);
  v52 = v121;
  v53 = GeometryProxy.size.getter(v51);
  v55 = sub_9EAEC((uint64_t)v13, v53, v54);
  v57 = static UnitPoint.center.getter(v56);
  v58 = v108;
  v59 = v101;
  View.scaleEffect(_:anchor:)(v101, v100, v55, v57, v60);
  v61 = (*(uint64_t (**)(char *, uint64_t))(v117 + 8))(v49, v59);
  v62 = GeometryProxy.size.getter(v61);
  GeometryProxy.size.getter(v63);
  v65 = v64;
  v66 = _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0();
  v67 = v111;
  v68 = v62;
  v69 = v104;
  View.frame(width:height:alignment:)(*(_QWORD *)&v68, 0, v65, 0, v66, v70, v104, v103);
  v71 = (*(uint64_t (**)(char *, uint64_t))(v120 + 8))(v58, v69);
  v146 = GeometryProxy.size.getter(v71);
  v147 = v72;
  v73 = v124;
  v74 = v123;
  (*(void (**)(char *, uint64_t, int *))(v124 + 16))(v123, a2, v13);
  v75 = v127;
  v76 = v126;
  v77 = v128;
  (*(void (**)(char *, uint64_t, uint64_t))(v127 + 16))(v126, v52, v128);
  v78 = *(unsigned __int8 *)(v73 + 80);
  v79 = v73;
  v80 = (v78 + 48) & ~v78;
  v81 = *(unsigned __int8 *)(v75 + 80);
  v82 = v75;
  v83 = (v125 + v81 + v80) & ~v81;
  v84 = (char *)swift_allocObject(&unk_24F530, v83 + v129, v78 | v81 | 7);
  v85 = v130;
  *((double *)v84 + 2) = v135;
  *((_QWORD *)v84 + 3) = v85;
  v86 = v131;
  *((_QWORD *)v84 + 4) = v133;
  *((_QWORD *)v84 + 5) = v86;
  (*(void (**)(char *, char *, int *))(v79 + 32))(&v84[v80], v74, v13);
  (*(void (**)(char *, char *, uint64_t))(v82 + 32))(&v84[v83], v76, v77);
  v87 = swift_checkMetadataState(0, v110);
  v88 = (uint64_t)v109;
  v89 = *(double *)&v134;
  v90 = v115;
  v91 = v114;
  View.onChange<A>(of:initial:_:)(&v146, 1, sub_A4740, v84, v134, v87, v115, v114);
  v92 = swift_release(v84);
  (*(void (**)(char *, double, __n128))(v122 + 8))(v67, COERCE_DOUBLE(*(_QWORD *)&v89), v92);
  v146 = v89;
  v147 = v87;
  v148 = v90;
  v149 = v91;
  swift_getOpaqueTypeConformance2(&v146, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
  v93 = v116;
  v94 = OpaqueTypeMetadata2;
  sub_10F80(v88, OpaqueTypeMetadata2, v116);
  v95 = *(void (**)(uint64_t, uint64_t))(v119 + 8);
  v95(v88, v94);
  sub_C5C0(v93, v94, v132);
  return ((uint64_t (*)(uint64_t, uint64_t))v95)(v93, v94);
}

double sub_9EAEC(uint64_t a1, double a2, double a3)
{
  uint64_t v3;
  uint64_t v5;
  double v6;
  double v7;
  double v8;

  v5 = v3 + *(int *)(a1 + 56);
  v7 = *(double *)(v5 + 16);
  v6 = *(double *)(v5 + 24);
  v8 = a3 / v6;
  if (CGSize.scaled(_:)(a3 / v6, v7, v6) >= a2)
    return a2 / CGSize.aspectRatio.getter(v7, v6) / v6;
  return v8;
}

uint64_t sub_9EB50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  double v11;
  double v12;
  double v13;
  uint64_t v14;
  double v15;
  _QWORD v17[4];

  v11 = GeometryProxy.size.getter(a1);
  v13 = v12;
  v17[0] = a3;
  v17[1] = a4;
  v17[2] = a5;
  v17[3] = a6;
  v14 = type metadata accessor for SummaryFrame(0, (uint64_t)v17);
  v15 = sub_9EAEC(v14, v11, v13);
  return sub_9CC50(v14, v15 * *(double *)(a1 + *(int *)(v14 + 56) + 16));
}

id sub_9EBEC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  NSString v10;
  uint64_t v11;
  uint64_t v12;
  NSString v13;
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  __int128 v22;

  v2 = v1;
  v4 = *(_QWORD *)(a1 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  __chkstk_darwin(a1);
  v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = objc_msgSend(objc_allocWithZone((Class)LPLinkMetadata), "init");
  sub_9C6E4();
  v9 = v8;
  v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v9);
  objc_msgSend(v7, "setTitle:", v10);

  sub_9B418(0x6F4220656C707041, 0xEB00000000736B6FLL, (uint64_t)"Apple Books app name - appears in Year in Review share sheet preview summary", 76);
  v12 = v11;
  v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v12);
  objc_msgSend(v7, "setSummary:", v13);

  v14 = objc_msgSend(objc_allocWithZone((Class)LPImageProperties), "init");
  objc_msgSend(v14, "setType:", 1);
  v15 = objc_msgSend(objc_allocWithZone((Class)NSItemProvider), "init");
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v2, a1);
  v16 = *(unsigned __int8 *)(v4 + 80);
  v17 = (v16 + 48) & ~v16;
  v18 = swift_allocObject(&unk_24F508, v17 + v5, v16 | 7);
  *(_QWORD *)(v18 + 16) = *(_QWORD *)(a1 + 16);
  v22 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v18 + 24) = v22;
  v19 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(v18 + 40) = v19;
  (*(void (**)(uint64_t, char *, uint64_t))(v4 + 32))(v18 + v17, v6, a1);
  NSItemProvider.register<A>(_:)(sub_A4408, v18, v22, v19);
  swift_release(v18);
  v20 = objc_msgSend(objc_allocWithZone((Class)LPImage), "initWithItemProvider:properties:placeholderImage:", v15, v14, 0);
  objc_msgSend(v7, "setImage:", v20);

  return v7;
}

uint64_t sub_9EE24@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t KeyPath;
  char *v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  double v41;
  double v42;
  double v43;
  double v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  double v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  double v59;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;

  v64 = a3;
  v68 = a6;
  v10 = type metadata accessor for SizeConstants.Spacing(0);
  __chkstk_darwin(v10);
  v62 = (uint64_t)&v61 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_5440(&qword_25E3D0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v61 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = sub_5440(&qword_262C98);
  __chkstk_darwin(v61);
  v17 = (char *)&v61 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = sub_5440(&qword_262C80);
  __chkstk_darwin(v65);
  v19 = (char *)&v61 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_5440(&qword_262700);
  v66 = *(_QWORD *)(v20 - 8);
  v67 = v20;
  __chkstk_darwin(v20);
  v22 = (char *)&v61 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = sub_5440(&qword_262708);
  __chkstk_darwin(v23);
  v63 = (uint64_t)&v61 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = a2;
  v70 = v64;
  v71 = a4;
  v72 = a5;
  v25 = *(int *)(type metadata accessor for SummaryFrame(0, (uint64_t)&v69) + 56);
  v69 = sub_9B418(0x6572616853, 0xE500000000000000, (uint64_t)"Share button string in the year summarized frame.", 49);
  v70 = v26;
  v27 = *(int *)(type metadata accessor for SummaryFrameViewModel(0) + 24);
  v64 = a1;
  v28 = (uint64_t *)(a1 + v27 + v25);
  v29 = *v28;
  v30 = v28[1];
  v31 = sub_C57C();
  swift_bridgeObjectRetain(v30);
  Label<>.init<A>(_:systemImage:)(&v69, v29, v30, &type metadata for String, v31);
  KeyPath = swift_getKeyPath(&unk_1E6EF0);
  (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v17, v15, v12);
  v33 = &v17[*(int *)(v61 + 36)];
  *(_QWORD *)v33 = KeyPath;
  *((_QWORD *)v33 + 1) = 1;
  v33[16] = 0;
  v34 = (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  v35 = static Edge.Set.vertical.getter(v34);
  v36 = Edge.Set.init(rawValue:)(0);
  v37 = v36;
  v38 = Edge.Set.init(rawValue:)(v36);
  if (Edge.Set.init(rawValue:)(v38 & v35) != v35)
    LOBYTE(v37) = Edge.Set.init(rawValue:)(v37 | v35);
  v39 = v62;
  _s7BooksUI35ListItemEditionsDescriptorExternalsV7spacingAA13SizeConstantsV7SpacingVvg_0(v62);
  v40 = sub_224DC(v39, type metadata accessor for SizeConstants.Spacing);
  v44 = EdgeInsets.init(_all:)(v40, 8.0, v41, v42, v43);
  v46 = v45;
  v48 = v47;
  v50 = v49;
  sub_B3D0((uint64_t)v17, (uint64_t)v19, &qword_262C98);
  v51 = v65;
  v52 = &v19[*(int *)(v65 + 36)];
  *v52 = v37;
  *((double *)v52 + 1) = v44;
  *((_QWORD *)v52 + 2) = v46;
  *((_QWORD *)v52 + 3) = v48;
  *((_QWORD *)v52 + 4) = v50;
  v52[40] = 0;
  v53 = sub_B414((uint64_t)v17, &qword_262C98);
  v54 = static Font.Weight.semibold.getter(v53);
  v55 = sub_A3FB4(&qword_262C88, &qword_262C80, (void (*)(void))sub_9FA38);
  View.fontWeight(_:)(*(_QWORD *)&v54, 0, v51, v55);
  sub_B414((uint64_t)v19, &qword_262C80);
  v56 = _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0();
  v57 = v63;
  v59 = sub_87D24(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v63, 0.0, 1, 0.0, 1, v56, v58);
  (*(void (**)(char *, uint64_t, double))(v66 + 8))(v22, v67, v59);
  return sub_167A4(v57, v68, &qword_262708);
}

_QWORD *sub_9F254(uint64_t a1, uint64_t a2, double a3)
{
  int64_t v6;
  _QWORD *v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _BYTE v25[40];
  double v26;
  double v27;
  char v28;
  _QWORD v29[3];
  uint64_t v30;
  uint64_t v31;
  _OWORD v32[10];
  uint64_t v33;
  _QWORD *v34;

  if (qword_25DBF8 != -1)
    swift_once(&qword_25DBF8, sub_9A8A8);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = &_swiftEmptyArrayStorage;
  if (v6)
  {
    v8 = a3 / (double)a2 * 1.5 - (*(double *)&qword_288CF8 + *(double *)&qword_288CF8);
    v34 = &_swiftEmptyArrayStorage;
    sub_20F60(0, v6, 0);
    v9 = a1 + 32;
    v7 = &_swiftEmptyArrayStorage;
    do
    {
      sub_BD00(v9, (uint64_t)v29);
      sub_BD00((uint64_t)v29, (uint64_t)v25);
      v10 = v30;
      v11 = v31;
      sub_5480(v29, v30);
      v12 = AssetInfo.coverAspectRatio.getter(v10, v11);
      v26 = v8;
      v27 = v8 / v12;
      v28 = 0;
      CoverViewModel.init(style:)((uint64_t)v25, (uint64_t)v32);
      _s7BooksUI13AnyPagedFrameVwxx_0(v29);
      if ((swift_isUniquelyReferenced_nonNull_native(v7) & 1) == 0)
      {
        sub_20F60(0, v7[2] + 1, 1);
        v7 = v34;
      }
      v14 = v7[2];
      v13 = v7[3];
      if (v14 >= v13 >> 1)
      {
        sub_20F60(v13 > 1, v14 + 1, 1);
        v7 = v34;
      }
      v7[2] = v14 + 1;
      v15 = (char *)&v7[21 * v14];
      v16 = v32[0];
      v17 = v32[2];
      *((_OWORD *)v15 + 3) = v32[1];
      *((_OWORD *)v15 + 4) = v17;
      *((_OWORD *)v15 + 2) = v16;
      v18 = v32[3];
      v19 = v32[4];
      v20 = v32[6];
      *((_OWORD *)v15 + 7) = v32[5];
      *((_OWORD *)v15 + 8) = v20;
      *((_OWORD *)v15 + 5) = v18;
      *((_OWORD *)v15 + 6) = v19;
      v21 = v32[7];
      v22 = v32[8];
      v23 = v32[9];
      *((_QWORD *)v15 + 24) = v33;
      *((_OWORD *)v15 + 10) = v22;
      *((_OWORD *)v15 + 11) = v23;
      *((_OWORD *)v15 + 9) = v21;
      v9 += 40;
      --v6;
    }
    while (v6);
  }
  return v7;
}

uint64_t sub_9F430(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  _QWORD *v11;
  uint64_t i;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  double *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  unint64_t v23;
  char *v24;
  char *v25;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t result;
  uint64_t v41;
  uint64_t v42;
  _OWORD v43[5];
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  double *v50;
  _BYTE v51[176];

  if (a2 < 0)
    goto LABEL_54;
  v4 = &_swiftEmptyArrayStorage;
  if (a2)
  {
    v5 = sub_5440(&qword_262E98);
    v6 = (char *)static Array._allocateBufferUninitialized(minimumCapacity:)(a2, v5);
    v7 = v6;
    *((_QWORD *)v6 + 2) = a2;
    *((_QWORD *)v6 + 4) = &_swiftEmptyArrayStorage;
    if (a2 != 1)
      memset_pattern16(v6 + 40, &off_24F550, 8 * a2 - 8);
    v8 = *(_QWORD *)(a1 + 16);
    if (!v8)
      return (uint64_t)v7;
  }
  else
  {
    v7 = (char *)&_swiftEmptyArrayStorage;
    v8 = *(_QWORD *)(a1 + 16);
    if (!v8)
      return (uint64_t)v7;
  }
  v41 = a1;
  v42 = a1 + 32;
  swift_bridgeObjectRetain(a1);
  v9 = 0;
  while (1)
  {
    sub_51C90(v42 + 168 * v9, (uint64_t)v51);
    v10 = *((_QWORD *)v7 + 2);
    if (v10)
    {
      v11 = v4;
      v50 = (double *)v4;
      swift_bridgeObjectRetain(v7);
      sub_20F7C(0, v10, 0);
      for (i = 0; i != v10; ++i)
      {
        v13 = *(_QWORD *)&v7[8 * i + 32];
        v14 = *(_QWORD *)(v13 + 16);
        if (v14)
        {
          v15 = v13 + 32;
          swift_bridgeObjectRetain(*(_QWORD *)&v7[8 * i + 32]);
          v16 = 0.0;
          do
          {
            sub_51C90(v15, (uint64_t)v43);
            v16 = v16 + 1.0 / *((double *)&v44 + 1);
            sub_22488((uint64_t)v43);
            v15 += 168;
            --v14;
          }
          while (v14);
          swift_bridgeObjectRelease(v13);
        }
        else
        {
          v16 = 0.0;
        }
        v17 = v50;
        if ((swift_isUniquelyReferenced_nonNull_native(v50) & 1) == 0)
        {
          sub_20F7C(0, *((_QWORD *)v17 + 2) + 1, 1);
          v17 = v50;
        }
        v19 = *((_QWORD *)v17 + 2);
        v18 = *((_QWORD *)v17 + 3);
        if (v19 >= v18 >> 1)
        {
          sub_20F7C(v18 > 1, v19 + 1, 1);
          v17 = v50;
        }
        *((_QWORD *)v17 + 2) = v19 + 1;
        v17[v19 + 4] = v16;
      }
      swift_bridgeObjectRelease(v7);
      v4 = v11;
      v20 = *((_QWORD *)v17 + 2);
      if (!v20)
      {
LABEL_9:
        sub_22488((uint64_t)v51);
        swift_bridgeObjectRelease(v17);
        goto LABEL_10;
      }
    }
    else
    {
      v17 = (double *)v4;
      v20 = v4[2];
      if (!v20)
        goto LABEL_9;
    }
    if (v20 == 1)
      goto LABEL_32;
    v21 = 0;
    v22 = v17[4];
    do
    {
      if (v17[v21 + 5] < v22)
        v22 = v17[v21 + 5];
      ++v21;
    }
    while (v20 - 1 != v21);
    if (v17[4] == v22)
    {
LABEL_32:
      v23 = 0;
    }
    else
    {
      v38 = 5;
      while (1)
      {
        v23 = v38 - 4;
        if (v17[v38] == v22)
          break;
        v39 = v38 - 3;
        if (__OFADD__(v23, 1))
        {
          __break(1u);
          goto LABEL_52;
        }
        ++v38;
        if (v39 == v20)
        {
          swift_bridgeObjectRelease(v17);
          goto LABEL_41;
        }
      }
    }
    swift_bridgeObjectRelease(v17);
    sub_51C90((uint64_t)v51, (uint64_t)v43);
    if ((swift_isUniquelyReferenced_nonNull_native(v7) & 1) != 0)
    {
      if ((v23 & 0x8000000000000000) != 0)
        break;
      goto LABEL_35;
    }
    v7 = sub_1AEC38((uint64_t)v7);
    if ((v23 & 0x8000000000000000) != 0)
      break;
LABEL_35:
    if (v23 >= *((_QWORD *)v7 + 2))
      goto LABEL_53;
    v24 = v7 + 32;
    v25 = *(char **)&v7[8 * v23 + 32];
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v25);
    *(_QWORD *)&v7[8 * v23 + 32] = v25;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v25 = sub_AAB5C(0, *((_QWORD *)v25 + 2) + 1, 1, v25);
      *(_QWORD *)&v24[8 * v23] = v25;
    }
    v28 = *((_QWORD *)v25 + 2);
    v27 = *((_QWORD *)v25 + 3);
    if (v28 >= v27 >> 1)
    {
      v25 = sub_AAB5C((char *)(v27 > 1), v28 + 1, 1, v25);
      *(_QWORD *)&v24[8 * v23] = v25;
    }
    *((_QWORD *)v25 + 2) = v28 + 1;
    v29 = &v25[168 * v28];
    v30 = v43[0];
    v31 = v43[2];
    *((_OWORD *)v29 + 3) = v43[1];
    *((_OWORD *)v29 + 4) = v31;
    *((_OWORD *)v29 + 2) = v30;
    v32 = v43[3];
    v33 = v43[4];
    v34 = v45;
    *((_OWORD *)v29 + 7) = v44;
    *((_OWORD *)v29 + 8) = v34;
    *((_OWORD *)v29 + 5) = v32;
    *((_OWORD *)v29 + 6) = v33;
    v35 = v46;
    v36 = v47;
    v37 = v48;
    *((_QWORD *)v29 + 24) = v49;
    *((_OWORD *)v29 + 10) = v36;
    *((_OWORD *)v29 + 11) = v37;
    *((_OWORD *)v29 + 9) = v35;
LABEL_41:
    sub_22488((uint64_t)v51);
LABEL_10:
    if (++v9 == v8)
    {
      swift_bridgeObjectRelease(v41);
      return (uint64_t)v7;
    }
  }
LABEL_52:
  __break(1u);
LABEL_53:
  __break(1u);
LABEL_54:
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
  __break(1u);
  return result;
}

uint64_t type metadata accessor for ShareableAsset(uint64_t a1)
{
  return sub_1FE90(a1, qword_262D10, (uint64_t)&nominal type descriptor for ShareableAsset);
}

uint64_t sub_9F85C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1E428(a1, a2, type metadata accessor for SizeConstants.Environment);
}

unint64_t sub_9F884()
{
  unint64_t result;
  uint64_t v1;

  result = qword_262C68;
  if (!qword_262C68)
  {
    v1 = sub_7EF8(&qword_262C58);
    sub_7FD8(&qword_262C70, &qword_262C50, (uint64_t)&protocol conformance descriptor for VStack<A>);
    sub_7FD8((unint64_t *)&qword_25EE78, &qword_25EE58, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_262C68);
  }
  return result;
}

uint64_t type metadata accessor for SummaryFrameViewModel(uint64_t a1)
{
  return sub_1FE90(a1, qword_262DA0, (uint64_t)&nominal type descriptor for SummaryFrameViewModel);
}

uint64_t type metadata accessor for SummaryFrame(uint64_t a1, uint64_t a2)
{
  return swift_getGenericMetadata(a1, a2, &nominal type descriptor for SummaryFrame);
}

uint64_t sub_9F940(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SummaryFrameViewModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_9F984()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_262C78;
  if (!qword_262C78)
  {
    v1 = sub_7EF8(&qword_262708);
    v2[0] = sub_7EF8(&qword_262C80);
    v2[1] = sub_A3FB4(&qword_262C88, &qword_262C80, (void (*)(void))sub_9FA38);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.fontWeight(_:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_262C78);
  }
  return result;
}

unint64_t sub_9FA38()
{
  unint64_t result;
  uint64_t v1;

  result = qword_262C90;
  if (!qword_262C90)
  {
    v1 = sub_7EF8(&qword_262C98);
    sub_7FD8(&qword_25E3E0, &qword_25E3D0, (uint64_t)&protocol conformance descriptor for Label<A, B>);
    sub_7FD8(&qword_260960, &qword_260968, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_262C90);
  }
  return result;
}

uint64_t sub_9FAD4()
{
  return sub_649D0((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_9D398);
}

uint64_t sub_9FAE0(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &opaque type descriptor for <<opaque return type of ShareableAsset.body>>, 1);
}

uint64_t sub_9FAF0(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = swift_getWitnessTable(&protocol conformance descriptor for SummaryFrame<A, B>, a2);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_9FB1C(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = swift_getWitnessTable(&protocol conformance descriptor for SummaryFrame<A, B>, a2);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_9FB48(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  _OWORD v4[2];

  v2 = *(_OWORD *)(a2 + 32);
  v4[0] = *(_OWORD *)(a2 + 16);
  v4[1] = v2;
  return swift_getOpaqueTypeConformance2(v4, &opaque type descriptor for <<opaque return type of SummaryFrame.body>>, 1);
}

ValueMetadata *type metadata accessor for VerticalMasonryCoverGridViewModel()
{
  return &type metadata for VerticalMasonryCoverGridViewModel;
}

uint64_t destroy for SharableAssetViewModel(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 32));
}

uint64_t initializeWithCopy for SharableAssetViewModel(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 32);
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v5;
  *(_QWORD *)(a1 + 40) = v4;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v5);
  return a1;
}

uint64_t assignWithCopy for SharableAssetViewModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  return a1;
}

uint64_t assignWithTake for SharableAssetViewModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease(v6);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  return a1;
}

uint64_t getEnumTagSinglePayload for SharableAssetViewModel(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 64))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SharableAssetViewModel(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 64) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SharableAssetViewModel()
{
  return &type metadata for SharableAssetViewModel;
}

uint64_t initializeBufferWithCopyOfBuffer for ShareableAsset(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _WORD *v9;
  _WORD *v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  _WORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v23 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v23 + ((v4 + 16) & ~(unint64_t)v4);
    swift_retain(v23);
  }
  else
  {
    v5 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v5;
    *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
    v7 = a2[4];
    v6 = a2[5];
    *(_QWORD *)(a1 + 32) = v7;
    *(_QWORD *)(a1 + 40) = v6;
    *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
    v8 = *(int *)(a3 + 20);
    v9 = (_WORD *)((char *)a2 + v8);
    v10 = (_WORD *)(a1 + v8);
    *(_QWORD *)(a1 + 56) = a2[7];
    swift_bridgeObjectRetain(v5);
    swift_bridgeObjectRetain(v7);
    v11 = sub_5440(&qword_25F200);
    if (swift_getEnumCaseMultiPayload(v9, v11) == 1)
    {
      *v10 = *v9;
      v12 = (int *)type metadata accessor for SizeConstants.Environment(0);
      v13 = v12[6];
      v14 = (char *)v10 + v13;
      v15 = (char *)v9 + v13;
      v16 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v14, v15, v16);
      *(_QWORD *)((char *)v10 + v12[7]) = *(_QWORD *)((char *)v9 + v12[7]);
      v17 = v12[8];
      v18 = (char *)v10 + v17;
      v19 = (char *)v9 + v17;
      v18[2] = v19[2];
      *(_WORD *)v18 = *(_WORD *)v19;
      v20 = v10;
      v21 = v11;
      v22 = 1;
    }
    else
    {
      v24 = *(_QWORD *)v9;
      *(_QWORD *)v10 = *(_QWORD *)v9;
      swift_retain(v24);
      v20 = v10;
      v21 = v11;
      v22 = 0;
    }
    swift_storeEnumTagMultiPayload(v20, v21, v22);
  }
  return a1;
}

double destroy for ShareableAsset(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  double result;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 32));
  v4 = (_QWORD *)(a1 + *(int *)(a2 + 20));
  v5 = sub_5440(&qword_25F200);
  if (swift_getEnumCaseMultiPayload(v4, v5) == 1)
  {
    v6 = (char *)v4 + *(int *)(type metadata accessor for SizeConstants.Environment(0) + 24);
    v7 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  }
  else
  {
    *(_QWORD *)&result = swift_release(*v4).n128_u64[0];
  }
  return result;
}

uint64_t initializeWithCopy for ShareableAsset(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _WORD *v8;
  _WORD *v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v5;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v7 = *(int *)(a3 + 20);
  v8 = (_WORD *)(a2 + v7);
  v9 = (_WORD *)(a1 + v7);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v6);
  v10 = sub_5440(&qword_25F200);
  if (swift_getEnumCaseMultiPayload(v8, v10) == 1)
  {
    *v9 = *v8;
    v11 = (int *)type metadata accessor for SizeConstants.Environment(0);
    v12 = v11[6];
    v13 = (char *)v9 + v12;
    v14 = (char *)v8 + v12;
    v15 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
    *(_QWORD *)((char *)v9 + v11[7]) = *(_QWORD *)((char *)v8 + v11[7]);
    v16 = v11[8];
    v17 = (char *)v9 + v16;
    v18 = (char *)v8 + v16;
    v17[2] = v18[2];
    *(_WORD *)v17 = *(_WORD *)v18;
    v19 = 1;
  }
  else
  {
    v20 = *(_QWORD *)v8;
    *(_QWORD *)v9 = *(_QWORD *)v8;
    swift_retain(v20);
    v19 = 0;
  }
  swift_storeEnumTagMultiPayload(v9, v10, v19);
  return a1;
}

uint64_t assignWithCopy for ShareableAsset(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  _BYTE *v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  _BYTE *v22;
  char v23;
  uint64_t v24;
  uint64_t v25;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  v10 = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v10;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  if (a1 != a2)
  {
    v11 = *(int *)(a3 + 20);
    v12 = (_BYTE *)(a1 + v11);
    v13 = (_BYTE *)(a2 + v11);
    sub_B414(a1 + v11, &qword_25F200);
    v14 = sub_5440(&qword_25F200);
    if (swift_getEnumCaseMultiPayload(v13, v14) == 1)
    {
      *v12 = *v13;
      v12[1] = v13[1];
      v15 = (int *)type metadata accessor for SizeConstants.Environment(0);
      v16 = v15[6];
      v17 = &v12[v16];
      v18 = &v13[v16];
      v19 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v17, v18, v19);
      *(_QWORD *)&v12[v15[7]] = *(_QWORD *)&v13[v15[7]];
      v20 = v15[8];
      v21 = &v12[v20];
      v22 = &v13[v20];
      v23 = v22[2];
      *(_WORD *)v21 = *(_WORD *)v22;
      v21[2] = v23;
      v24 = 1;
    }
    else
    {
      v25 = *(_QWORD *)v13;
      *(_QWORD *)v12 = *(_QWORD *)v13;
      swift_retain(v25);
      v24 = 0;
    }
    swift_storeEnumTagMultiPayload(v12, v14, v24);
  }
  return a1;
}

_OWORD *initializeWithTake for ShareableAsset(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  _WORD *v7;
  _WORD *v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  v6 = *(int *)(a3 + 20);
  v7 = (_WORD *)((char *)a1 + v6);
  v8 = (_WORD *)((char *)a2 + v6);
  v9 = sub_5440(&qword_25F200);
  if (swift_getEnumCaseMultiPayload(v8, v9) == 1)
  {
    *v7 = *v8;
    v10 = (int *)type metadata accessor for SizeConstants.Environment(0);
    v11 = v10[6];
    v12 = (char *)v7 + v11;
    v13 = (char *)v8 + v11;
    v14 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
    *(_QWORD *)((char *)v7 + v10[7]) = *(_QWORD *)((char *)v8 + v10[7]);
    v15 = v10[8];
    v16 = (char *)v7 + v15;
    v17 = (char *)v8 + v15;
    v16[2] = v17[2];
    *(_WORD *)v16 = *(_WORD *)v17;
    swift_storeEnumTagMultiPayload(v7, v9, 1);
  }
  else
  {
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  return a1;
}

uint64_t assignWithTake for ShareableAsset(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _WORD *v10;
  _WORD *v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;

  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease(v7);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease(v8);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  if (a1 != a2)
  {
    v9 = *(int *)(a3 + 20);
    v10 = (_WORD *)(a1 + v9);
    v11 = (_WORD *)(a2 + v9);
    sub_B414(a1 + v9, &qword_25F200);
    v12 = sub_5440(&qword_25F200);
    if (swift_getEnumCaseMultiPayload(v11, v12) == 1)
    {
      *v10 = *v11;
      v13 = (int *)type metadata accessor for SizeConstants.Environment(0);
      v14 = v13[6];
      v15 = (char *)v10 + v14;
      v16 = (char *)v11 + v14;
      v17 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v15, v16, v17);
      *(_QWORD *)((char *)v10 + v13[7]) = *(_QWORD *)((char *)v11 + v13[7]);
      v18 = v13[8];
      v19 = (char *)v10 + v18;
      v20 = (char *)v11 + v18;
      v19[2] = v20[2];
      *(_WORD *)v19 = *(_WORD *)v20;
      swift_storeEnumTagMultiPayload(v10, v12, 1);
    }
    else
    {
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for ShareableAsset(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_A049C);
}

uint64_t sub_A049C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_5440(&qword_25F220);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for ShareableAsset(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_A0528);
}

uint64_t sub_A0528(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = sub_5440(&qword_25F220);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 20), a2, a2, v7);
  }
  return result;
}

void sub_A05A0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = "@";
  sub_A0614(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(v2 - 8) + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
  }
}

void sub_A0614(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_25F2A8)
  {
    v2 = type metadata accessor for SizeConstants.Spacing(255);
    v3 = type metadata accessor for Environment.Content(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_25F2A8);
  }
}

_QWORD *initializeBufferWithCopyOfBuffer for SummaryFrameViewModel(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v20 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v20);
  }
  else
  {
    v7 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v7;
    v8 = *((_OWORD *)a2 + 1);
    v10 = a2[4];
    v9 = a2[5];
    *(_QWORD *)(a1 + 32) = v10;
    *(_QWORD *)(a1 + 40) = v9;
    *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
    *(_QWORD *)(a1 + 56) = a2[7];
    v11 = *(int *)(a3 + 20);
    v12 = a1 + v11;
    v13 = (uint64_t)a2 + v11;
    *(_OWORD *)(a1 + 16) = v8;
    v14 = type metadata accessor for YIRSourceData(0);
    v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v10);
    v15(v12, v13, v14);
    v16 = *(int *)(a3 + 24);
    v17 = (_QWORD *)((char *)v4 + v16);
    v18 = (uint64_t *)((char *)a2 + v16);
    v19 = v18[1];
    *v17 = *v18;
    v17[1] = v19;
    swift_bridgeObjectRetain(v19);
  }
  return v4;
}

uint64_t destroy for SummaryFrameViewModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 32));
  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for YIRSourceData(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(a2 + 24) + 8));
}

uint64_t initializeWithCopy for SummaryFrameViewModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  v7 = *(_OWORD *)(a2 + 16);
  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v9;
  *(_QWORD *)(a1 + 40) = v8;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v10 = *(int *)(a3 + 20);
  v11 = a1 + v10;
  v12 = a2 + v10;
  *(_OWORD *)(a1 + 16) = v7;
  v13 = type metadata accessor for YIRSourceData(0);
  v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v9);
  v14(v11, v12, v13);
  v15 = *(int *)(a3 + 24);
  v16 = (_QWORD *)(a1 + v15);
  v17 = (_QWORD *)(a2 + v15);
  v18 = v17[1];
  *v16 = *v17;
  v16[1] = v18;
  swift_bridgeObjectRetain(v18);
  return a1;
}

uint64_t assignWithCopy for SummaryFrameViewModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  v10 = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v10;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v11 = *(int *)(a3 + 20);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = type metadata accessor for YIRSourceData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  v15 = *(int *)(a3 + 24);
  v16 = (_QWORD *)(a1 + v15);
  v17 = (_QWORD *)(a2 + v15);
  *v16 = *v17;
  v18 = v17[1];
  v19 = v16[1];
  v16[1] = v18;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRelease(v19);
  return a1;
}

_OWORD *initializeWithTake for SummaryFrameViewModel(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  v8 = *(int *)(a3 + 20);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for YIRSourceData(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
  *(_OWORD *)((char *)a1 + *(int *)(a3 + 24)) = *(_OWORD *)((char *)a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t assignWithTake for SummaryFrameViewModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease(v7);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease(v8);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v9 = *(int *)(a3 + 20);
  v10 = a1 + v9;
  v11 = a2 + v9;
  v12 = type metadata accessor for YIRSourceData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 40))(v10, v11, v12);
  v13 = *(int *)(a3 + 24);
  v14 = (_QWORD *)(a1 + v13);
  v15 = (uint64_t *)(a2 + v13);
  v17 = *v15;
  v16 = v15[1];
  v18 = v14[1];
  *v14 = v17;
  v14[1] = v16;
  swift_bridgeObjectRelease(v18);
  return a1;
}

uint64_t getEnumTagSinglePayload for SummaryFrameViewModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_A0AC8);
}

uint64_t sub_A0AC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for YIRSourceData(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for SummaryFrameViewModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_A0B50);
}

uint64_t sub_A0B50(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for YIRSourceData(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 20), a2, a2, v7);
  }
  return result;
}

uint64_t sub_A0BC4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = "@";
  result = type metadata accessor for YIRSourceData(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    v4[2] = &unk_1E6C68;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
    return 0;
  }
  return result;
}

void sub_A0C40(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD v12[11];

  v2 = type metadata accessor for PageBackground(319);
  if (v3 <= 0x3F)
  {
    v12[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_A0614(319);
    if (v5 <= 0x3F)
    {
      v12[1] = *(_QWORD *)(v4 - 8) + 64;
      v6 = type metadata accessor for SummaryFrameViewModel(319);
      if (v7 <= 0x3F)
      {
        v12[2] = *(_QWORD *)(v6 - 8) + 64;
        v8 = swift_checkMetadataState(319, *(_QWORD *)(a1 + 16));
        if (v9 <= 0x3F)
        {
          v12[3] = *(_QWORD *)(v8 - 8) + 64;
          v10 = swift_checkMetadataState(319, *(_QWORD *)(a1 + 24));
          if (v11 <= 0x3F)
          {
            v12[4] = *(_QWORD *)(v10 - 8) + 64;
            v12[5] = (char *)&value witness table for Builtin.Int64 + 64;
            v12[6] = (char *)&value witness table for Builtin.NativeObject + 64;
            v12[7] = (char *)&value witness table for Builtin.Int64 + 64;
            v12[8] = (char *)&value witness table for Builtin.Int64 + 64;
            v12[9] = (char *)&value witness table for Builtin.Int64 + 64;
            v12[10] = &unk_1E6C90;
            swift_initStructMetadata(a1, 0, 11, v12, a1 + 48);
          }
        }
      }
    }
  }
}

uint64_t sub_A0D4C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  void *v33;
  const void *v34;
  unsigned int (*v35)(const void *, uint64_t, uint64_t);
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  __int16 v54;
  char v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  void (*v64)(unint64_t, unint64_t, uint64_t);
  _QWORD *v65;
  _QWORD *v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  void (*v70)(unint64_t, unint64_t, uint64_t);
  unint64_t v71;
  _QWORD *v72;
  _QWORD *v73;
  _QWORD *v74;
  uint64_t *v75;
  uint64_t v76;
  _QWORD *v77;
  _QWORD *v78;
  _QWORD *v79;
  _QWORD *v80;
  _QWORD *v81;
  _QWORD *v82;
  _QWORD *v83;
  _QWORD *v84;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  size_t __n;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;

  v101 = type metadata accessor for ColorScheme(0);
  v6 = *(_QWORD *)(v101 - 8);
  v7 = *(_DWORD *)(v6 + 80);
  if (*(_DWORD *)(v6 + 84))
    v8 = *(_QWORD *)(v6 + 64);
  else
    v8 = *(_QWORD *)(v6 + 64) + 1;
  __n = v8;
  v9 = ((v7 + 8) & ~(unint64_t)v7) + v8;
  if (v9 <= 0xA8)
    v10 = 168;
  else
    v10 = v9;
  v11 = type metadata accessor for DynamicTypeSize(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_DWORD *)(v12 + 80);
  v14 = v13;
  v102 = v13 + 2;
  v103 = v12;
  v104 = *(_QWORD *)(v12 + 64) + 7;
  v105 = v11;
  v15 = ((v104 + ((v14 + 2) & ~v14)) & 0xFFFFFFFFFFFFFFF8) + 11;
  if (v15 <= 8)
    v15 = 8;
  v106 = v15;
  v16 = type metadata accessor for YIRSourceData(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(_DWORD *)(v17 + 80);
  v20 = *(_QWORD *)(a3 + 16);
  v19 = *(_QWORD *)(a3 + 24);
  v21 = *(_QWORD *)(v20 - 8);
  v22 = *(_DWORD *)(v21 + 80);
  v23 = *(_QWORD *)(v19 - 8);
  v24 = *(_DWORD *)(v23 + 80);
  v25 = v13 | (unint64_t)v7 | v18 | v22 | v24;
  if (v25 > 7
    || ((v13 | v7 | *(_DWORD *)(v17 + 80) | *(_DWORD *)(v21 + 80) | *(_DWORD *)(v23 + 80)) & 0x100000) != 0
    || (v26 = *(_QWORD *)(v17 + 64) + 7,
        ((((((((((((*(_QWORD *)(v23 + 64)
                  + 7
                  + ((*(_QWORD *)(v21 + 64)
                    + v24
                    + ((((v26 + ((v18 + 64) & ~v18)) & 0xFFFFFFFFFFFFFFF8)
                      + v22
                      + 16
                      + ((v106
                        + (v18 | 7)
                        + 1
                        + ((v10 + (v13 | 7) + 1) & ~(v13 | 7))) & ~(v18 | 7))) & ~v22)) & ~v24)) & 0xFFFFFFFFFFFFFFF8)
                + 15) & 0xFFFFFFFFFFFFFFF8)
              + 15) & 0xFFFFFFFFFFFFFFF8)
            + 15) & 0xFFFFFFFFFFFFFFF8)
          + 15) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8)
      + 16 > 0x18))
  {
    v29 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v29 + ((v25 & 0xF8 ^ 0x1F8) & (v25 + 16));
  }
  else
  {
    v27 = *((unsigned __int8 *)a2 + v10);
    v97 = *(_QWORD *)(v19 - 8);
    if (v27 >= 2)
    {
      if (v10 <= 3)
        v28 = v10;
      else
        v28 = 4;
      __asm { BR              X13 }
    }
    v87 = ~(v13 | 7);
    v98 = v20;
    v99 = v19;
    v95 = v16;
    v96 = *(_QWORD *)(v20 - 8);
    v93 = *(_QWORD *)(v23 + 64) + 7;
    v94 = *(_QWORD *)(v16 - 8);
    v91 = ((v26 + ((v18 + 64) & ~v18)) & 0xFFFFFFFFFFFFFFF8) + v22 + 16;
    v92 = *(_QWORD *)(v21 + 64) + v24;
    v89 = v18 + 64;
    v90 = *(_QWORD *)(v17 + 64) + 7;
    v88 = v106 + (v18 | 7) + 1;
    if (v27 == 1)
    {
      v30 = v18 | 7;
      if (*((_BYTE *)a2 + 56))
      {
        v31 = *((_OWORD *)a2 + 1);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v31;
        *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
        *(_OWORD *)(a1 + 41) = *(_OWORD *)((char *)a2 + 41);
      }
      else
      {
        v36 = *(_OWORD *)(a2 + 3);
        *(_OWORD *)(a1 + 24) = v36;
        (**(void (***)(uint64_t, uint64_t *))(v36 - 8))(a1, a2);
        *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 5);
        *(_BYTE *)(a1 + 56) = 0;
      }
      *(_OWORD *)(a1 + 64) = *((_OWORD *)a2 + 4);
      *(_BYTE *)(a1 + 80) = *((_BYTE *)a2 + 80);
      *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 11);
      v37 = a2[13];
      *(_QWORD *)(a1 + 104) = v37;
      v38 = a2[15];
      swift_bridgeObjectRetain(v37);
      if (v38)
      {
        *(_QWORD *)(a1 + 112) = a2[14];
        *(_QWORD *)(a1 + 120) = v38;
        v39 = a2[17];
        *(_QWORD *)(a1 + 128) = a2[16];
        *(_QWORD *)(a1 + 136) = v39;
        *(_BYTE *)(a1 + 144) = *((_BYTE *)a2 + 144);
        v40 = a2[20];
        *(_QWORD *)(a1 + 152) = a2[19];
        *(_QWORD *)(a1 + 160) = v40;
        swift_bridgeObjectRetain(v38);
        swift_bridgeObjectRetain(v39);
        swift_bridgeObjectRetain(v40);
      }
      else
      {
        v42 = *((_OWORD *)a2 + 8);
        *(_OWORD *)(a1 + 112) = *((_OWORD *)a2 + 7);
        *(_OWORD *)(a1 + 128) = v42;
        *(_OWORD *)(a1 + 144) = *((_OWORD *)a2 + 9);
        *(_QWORD *)(a1 + 160) = a2[20];
      }
      v41 = v10 + (v14 | 7) + 1;
      *(_BYTE *)(a1 + v10) = 1;
    }
    else
    {
      v86 = *(_DWORD *)(v21 + 80);
      v32 = *a2;
      *(_QWORD *)a1 = *a2;
      v33 = (void *)((a1 + v7 + 8) & ~(unint64_t)v7);
      v34 = (const void *)(((unint64_t)a2 + v7 + 8) & ~(unint64_t)v7);
      v35 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48);
      swift_retain(v32);
      if (v35(v34, 1, v101))
      {
        memcpy(v33, v34, __n);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(v33, v34, v101);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v33, 0, 1, v101);
      }
      v22 = v86;
      v30 = v18 | 7;
      *(_BYTE *)(a1 + v10) = 0;
      v41 = v10 + (v14 | 7) + 1;
    }
    v43 = (v41 + a1) & v87;
    v44 = ((unint64_t)a2 + v41) & v87;
    v45 = v106;
    v46 = *(unsigned __int8 *)(v44 + v106);
    if (v46 >= 2)
    {
      if (v106 <= 3)
        v47 = v106;
      else
        v47 = 4;
      __asm { BR              X12 }
    }
    v48 = ~v30;
    v49 = ~v18;
    v50 = ~v22;
    v51 = ~v24;
    if (v46 == 1)
    {
      *(_BYTE *)v43 = *(_BYTE *)v44;
      *(_BYTE *)(v43 | 1) = *(_BYTE *)(v44 | 1);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v103 + 16))((v102 + v43) & ~v14, (v102 + v44) & ~v14, v105);
      v45 = v106;
      v52 = (v104 + ((v102 + v43) & ~v14)) & 0xFFFFFFFFFFFFFFF8;
      v53 = (v104 + ((v102 + v44) & ~v14)) & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v52 = *(_QWORD *)v53;
      v54 = *(_WORD *)(v53 + 8);
      *(_BYTE *)(v52 + 10) = *(_BYTE *)(v53 + 10);
      *(_WORD *)(v52 + 8) = v54;
      v55 = 1;
    }
    else
    {
      v56 = *(_QWORD *)v44;
      *(_QWORD *)v43 = *(_QWORD *)v44;
      swift_retain(v56);
      v55 = 0;
    }
    *(_BYTE *)(v43 + v45) = v55;
    v57 = (v88 + v43) & v48;
    v58 = (v88 + v44) & v48;
    *(_QWORD *)v57 = *(_QWORD *)v58;
    v59 = *(_QWORD *)(v58 + 8);
    *(_QWORD *)(v57 + 8) = v59;
    *(_OWORD *)(v57 + 16) = *(_OWORD *)(v58 + 16);
    v60 = *(_QWORD *)(v58 + 32);
    *(_QWORD *)(v57 + 32) = v60;
    v61 = *(_QWORD *)(v58 + 40);
    *(_BYTE *)(v57 + 48) = *(_BYTE *)(v58 + 48);
    *(_QWORD *)(v57 + 40) = v61;
    *(_QWORD *)(v57 + 56) = *(_QWORD *)(v58 + 56);
    v62 = (v89 + v57) & v49;
    v63 = (v89 + v58) & v49;
    v64 = *(void (**)(unint64_t, unint64_t, uint64_t))(v94 + 16);
    swift_bridgeObjectRetain(v59);
    swift_bridgeObjectRetain(v60);
    v64(v62, v63, v95);
    v65 = (_QWORD *)((v90 + v62) & 0xFFFFFFFFFFFFFFF8);
    v66 = (_QWORD *)((v90 + v63) & 0xFFFFFFFFFFFFFFF8);
    *v65 = *v66;
    v67 = v66[1];
    v65[1] = v67;
    v68 = (v91 + v57) & v50;
    v69 = (v91 + v58) & v50;
    v70 = *(void (**)(unint64_t, unint64_t, uint64_t))(v96 + 16);
    swift_bridgeObjectRetain(v67);
    v70(v68, v69, v98);
    v71 = (v92 + v68) & v51;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v97 + 16))(v71, (v92 + v69) & v51, v99);
    v72 = (_QWORD *)((v93 + v71) & 0xFFFFFFFFFFFFF8);
    v73 = (_QWORD *)((v93 + ((v92 + v69) & v51)) & 0xFFFFFFFFFFFFF8);
    *v72 = *v73;
    v74 = (_QWORD *)(((unint64_t)v72 + 15) & 0xFFFFFFFFFFFFF8);
    v75 = (uint64_t *)(((unint64_t)v73 + 15) & 0xFFFFFFFFFFFFF8);
    v76 = *v75;
    *v74 = *v75;
    v77 = (_QWORD *)(((unint64_t)v74 + 15) & 0xFFFFFFFFFFFFF8);
    v78 = (_QWORD *)(((unint64_t)v75 + 15) & 0xFFFFFFFFFFFFF8);
    *v77 = *v78;
    v79 = (_QWORD *)(((unint64_t)v77 + 15) & 0xFFFFFFFFFFFFF8);
    v80 = (_QWORD *)(((unint64_t)v78 + 15) & 0xFFFFFFFFFFFFF8);
    *v79 = *v80;
    v81 = (_QWORD *)(((unint64_t)v79 + 15) & 0xFFFFFFFFFFFFF8);
    v82 = (_QWORD *)(((unint64_t)v80 + 15) & 0xFFFFFFFFFFFFF8);
    *v81 = *v82;
    v83 = (_QWORD *)(((unint64_t)v81 + 15) & 0xFFFFFFFFFFFFFFF8);
    v84 = (_QWORD *)(((unint64_t)v82 + 15) & 0xFFFFFFFFFFFFFFF8);
    *v83 = *v84;
    v29 = v84[1];
    v83[1] = v29;
    swift_retain(v76);
  }
  swift_retain(v29);
  return a1;
}

double sub_A144C(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  double result;

  v4 = type metadata accessor for ColorScheme(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  if (*(_DWORD *)(v5 + 84))
    v7 = *(_QWORD *)(v5 + 64);
  else
    v7 = *(_QWORD *)(v5 + 64) + 1;
  if (v7 + ((v6 + 8) & (unint64_t)~v6) <= 0xA8)
    v8 = 168;
  else
    v8 = v7 + ((v6 + 8) & ~v6);
  v9 = *((unsigned __int8 *)a1 + v8);
  if (v9 >= 2)
  {
    if (v8 <= 3)
      v10 = v8;
    else
      v10 = 4;
    __asm { BR              X12 }
  }
  if (v9 == 1)
  {
    if (!*((_BYTE *)a1 + 56))
      _s7BooksUI13AnyPagedFrameVwxx_0(a1);
    swift_bridgeObjectRelease(a1[13]);
    v11 = a1[15];
    if (v11)
    {
      swift_bridgeObjectRelease(v11);
      swift_bridgeObjectRelease(a1[17]);
      swift_bridgeObjectRelease(a1[20]);
    }
  }
  else
  {
    v12 = swift_release(*a1);
    v13 = ((unint64_t)a1 + v6 + 8) & ~v6;
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t, __n128))(v5 + 48))(v13, 1, v4, v12))
      (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v13, v4);
  }
  v14 = type metadata accessor for DynamicTypeSize(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(unsigned __int8 *)(v15 + 80);
  v17 = ((unint64_t)a1 + v8 + (v16 | 7) + 1) & ~(v16 | 7);
  if (((*(_QWORD *)(v15 + 64) + ((v16 + 2) & ~v16) + 7) & 0xFFFFFFFFFFFFFFF8) + 11 <= 8)
    v18 = 8;
  else
    v18 = ((*(_QWORD *)(v15 + 64) + ((v16 + 2) & ~v16) + 7) & 0xFFFFFFFFFFFFFFF8) + 11;
  v19 = *(unsigned __int8 *)(v17 + v18);
  if (v19 >= 2)
  {
    if (v18 <= 3)
      v20 = v18;
    else
      v20 = 4;
    __asm { BR              X15 }
  }
  if (v19 == 1)
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))((v16 + 2 + v17) & ~v16, v14);
  else
    swift_release(*(_QWORD *)v17);
  v21 = type metadata accessor for YIRSourceData(0);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = *(unsigned __int8 *)(v22 + 80);
  v24 = ((v17 | 1) + v18 + (v23 | 7)) & ~(v23 | 7);
  swift_bridgeObjectRelease(*(_QWORD *)((char *)&dword_8 + v24));
  swift_bridgeObjectRelease(*(_QWORD *)(v24 + 32));
  (*(void (**)(uint64_t, uint64_t))(v22 + 8))((v23 + 64 + v24) & ~v23, v21);
  v25 = *(_QWORD *)(v22 + 64) + 7;
  swift_bridgeObjectRelease(*(_QWORD *)((char *)&dword_8 + ((v25 + ((v23 + 64 + v24) & ~v23)) & 0xFFFFFFFFFFFFF8)));
  v26 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v27 = (v24 + ((v25 + ((v23 + 64) & ~v23)) & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(v26 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80);
  (*(void (**)(unint64_t))(v26 + 8))(v27);
  v28 = *(_QWORD *)(v26 + 64);
  v29 = *(_QWORD *)(*(_QWORD *)(a2 + 24) - 8);
  v30 = (v27 + v28 + *(unsigned __int8 *)(v29 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80);
  (*(void (**)(unint64_t))(v29 + 8))(v30);
  v31 = ((*(_QWORD *)(v29 + 64) + v30 + 7) & 0xFFFFFFFFFFFFFFF8) + 15;
  v32 = (v31 & 0xFFFFFFFFFFFFFFF8) + 15;
  swift_release(*(_QWORD *)(v31 & 0xFFFFFFFFFFFFFFF8));
  *(_QWORD *)&result = swift_release(*(_QWORD *)((char *)&dword_8
                                               + (((((((v32 & 0xFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFF8)
                                                 + 15) & 0xFFFFFFFFFFFFF8))).n128_u64[0];
  return result;
}

uint64_t sub_A17BC(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  void *v20;
  const void *v21;
  unsigned int (*v22)(const void *, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  __int16 v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  void (*v52)(uint64_t, uint64_t, uint64_t);
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  void (*v63)(unint64_t, unint64_t, uint64_t);
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  _QWORD *v72;
  _QWORD *v73;
  uint64_t *v74;
  uint64_t v75;
  _QWORD *v76;
  _QWORD *v77;
  _QWORD *v78;
  _QWORD *v79;
  _QWORD *v80;
  _QWORD *v81;
  _QWORD *v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v87;

  v5 = type metadata accessor for ColorScheme(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  if (*(_DWORD *)(v6 + 84))
    v8 = *(_QWORD *)(v6 + 64);
  else
    v8 = *(_QWORD *)(v6 + 64) + 1;
  if (((v7 + 8) & ~v7) + v8 <= 0xA8)
    v9 = 168;
  else
    v9 = ((v7 + 8) & ~v7) + v8;
  v10 = *((unsigned __int8 *)a2 + v9);
  if (v10 >= 2)
  {
    if (v9 <= 3)
      v11 = v9;
    else
      v11 = 4;
    __asm { BR              X13 }
  }
  if (v10 == 1)
  {
    if (*((_BYTE *)a2 + 56))
    {
      v12 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v12;
      *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
      *(_OWORD *)(a1 + 41) = *(_OWORD *)((char *)a2 + 41);
    }
    else
    {
      v13 = *(_OWORD *)(a2 + 3);
      *(_OWORD *)(a1 + 24) = v13;
      (**(void (***)(uint64_t, uint64_t *))(v13 - 8))(a1, a2);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 5);
      *(_BYTE *)(a1 + 56) = 0;
    }
    *(_OWORD *)(a1 + 64) = *((_OWORD *)a2 + 4);
    *(_BYTE *)(a1 + 80) = *((_BYTE *)a2 + 80);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 11);
    v14 = a2[13];
    *(_QWORD *)(a1 + 104) = v14;
    v15 = a2[15];
    swift_bridgeObjectRetain(v14);
    if (v15)
    {
      *(_QWORD *)(a1 + 112) = a2[14];
      *(_QWORD *)(a1 + 120) = v15;
      v16 = a2[17];
      *(_QWORD *)(a1 + 128) = a2[16];
      *(_QWORD *)(a1 + 136) = v16;
      *(_BYTE *)(a1 + 144) = *((_BYTE *)a2 + 144);
      v17 = a2[20];
      *(_QWORD *)(a1 + 152) = a2[19];
      *(_QWORD *)(a1 + 160) = v17;
      swift_bridgeObjectRetain(v15);
      swift_bridgeObjectRetain(v16);
      swift_bridgeObjectRetain(v17);
    }
    else
    {
      v18 = *((_OWORD *)a2 + 8);
      *(_OWORD *)(a1 + 112) = *((_OWORD *)a2 + 7);
      *(_OWORD *)(a1 + 128) = v18;
      *(_OWORD *)(a1 + 144) = *((_OWORD *)a2 + 9);
      *(_QWORD *)(a1 + 160) = a2[20];
    }
    *(_BYTE *)(a1 + v9) = 1;
  }
  else
  {
    v19 = *a2;
    *(_QWORD *)a1 = *a2;
    v20 = (void *)((a1 + v7 + 8) & ~v7);
    v21 = (const void *)(((unint64_t)a2 + v7 + 8) & ~v7);
    v22 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48);
    swift_retain(v19);
    if (v22(v21, 1, v5))
    {
      memcpy(v20, v21, v8);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(v20, v21, v5);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v20, 0, 1, v5);
    }
    *(_BYTE *)(a1 + v9) = 0;
  }
  v23 = type metadata accessor for DynamicTypeSize(0);
  v24 = *(_QWORD *)(v23 - 8);
  v25 = *(unsigned __int8 *)(v24 + 80);
  v26 = v9 + (v25 | 7) + 1;
  v27 = (v26 + a1) & ~(v25 | 7);
  v28 = ((unint64_t)a2 + v26) & ~(v25 | 7);
  v29 = v25 + 2;
  v30 = *(_QWORD *)(v24 + 64) + 7;
  if (((v30 + ((v25 + 2) & ~v25)) & 0xFFFFFFFFFFFFFFF8) + 11 <= 8)
    v31 = 8;
  else
    v31 = ((v30 + ((v25 + 2) & ~v25)) & 0xFFFFFFFFFFFFFFF8) + 11;
  v32 = *(unsigned __int8 *)(v28 + v31);
  if (v32 >= 2)
  {
    if (v31 <= 3)
      v33 = v31;
    else
      v33 = 4;
    __asm { BR              X15 }
  }
  v87 = a1;
  if (v32 == 1)
  {
    v34 = ~v25;
    *(_BYTE *)v27 = *(_BYTE *)v28;
    *(_BYTE *)(v27 | 1) = *(_BYTE *)(v28 | 1);
    v35 = (v29 + v27) & v34;
    v36 = (v29 + v28) & v34;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 16))(v35, v36, v23);
    v37 = (v30 + v35) & 0xFFFFFFFFFFFFFFF8;
    v38 = (v30 + v36) & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v37 = *(_QWORD *)v38;
    v39 = *(_WORD *)(v38 + 8);
    *(_BYTE *)(v37 + 10) = *(_BYTE *)(v38 + 10);
    *(_WORD *)(v37 + 8) = v39;
    v40 = 1;
  }
  else
  {
    v41 = *(_QWORD *)v28;
    *(_QWORD *)v27 = *(_QWORD *)v28;
    swift_retain(v41);
    v40 = 0;
  }
  *(_BYTE *)(v27 + v31) = v40;
  v42 = type metadata accessor for YIRSourceData(0);
  v43 = *(_QWORD *)(v42 - 8);
  v44 = *(unsigned __int8 *)(v43 + 80);
  v45 = v31 + (v44 | 7) + 1;
  v46 = (v45 + v27) & ~(v44 | 7);
  v47 = (v45 + v28) & ~(v44 | 7);
  *(_QWORD *)v46 = *(_QWORD *)v47;
  v48 = *(_QWORD *)((char *)&dword_8 + v47);
  *(_QWORD *)(v46 + 8) = v48;
  *(_OWORD *)(v46 + 16) = *(_OWORD *)((char *)&dword_10 + v47);
  v49 = *(_QWORD *)((char *)&stru_20.cmd + v47);
  *(_QWORD *)(v46 + 32) = v49;
  v50 = stru_20.segname[v47 + 8];
  *(_QWORD *)(v46 + 40) = *(_QWORD *)&stru_20.segname[v47];
  *(_BYTE *)(v46 + 48) = v50;
  *(_QWORD *)(v46 + 56) = *(_QWORD *)&stru_20.segname[v47 + 16];
  v51 = (v44 + 64 + v47) & ~v44;
  v52 = *(void (**)(uint64_t, uint64_t, uint64_t))(v43 + 16);
  swift_bridgeObjectRetain(v48);
  swift_bridgeObjectRetain(v49);
  v52((v44 + 64 + v46) & ~v44, v51, v42);
  v53 = *(_QWORD *)(v43 + 64) + 7;
  v54 = (_QWORD *)((v53 + ((v44 + 64 + v46) & ~v44)) & 0xFFFFFFFFFFFFFFF8);
  v55 = (_QWORD *)((v53 + v51) & 0xFFFFFFFFFFFFFFF8);
  *v54 = *v55;
  v56 = v55[1];
  v54[1] = v56;
  v57 = *(_QWORD *)(a3 + 16);
  v58 = *(_QWORD *)(v57 - 8);
  v59 = *(unsigned __int8 *)(v58 + 80);
  v60 = ((v53 + ((v44 + 64) & ~v44)) & 0xFFFFFFFFFFFFFFF8) + v59 + 16;
  v61 = (v60 + v46) & ~v59;
  v62 = (v60 + v47) & ~v59;
  v63 = *(void (**)(unint64_t, unint64_t, uint64_t))(v58 + 16);
  swift_bridgeObjectRetain(v56);
  v63(v61, v62, v57);
  v64 = *(_QWORD *)(v58 + 64);
  v65 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v66 = *(unsigned __int8 *)(v65 + 80);
  v67 = v64 + v66;
  v68 = (v67 + v61) & ~v66;
  v69 = (v67 + v62) & ~v66;
  (*(void (**)(unint64_t, unint64_t))(v65 + 16))(v68, v69);
  v70 = *(_QWORD *)(v65 + 64) + 7;
  v71 = (_QWORD *)((v70 + v68) & 0xFFFFFFFFFFFFFFF8);
  v72 = (_QWORD *)((v70 + v69) & 0xFFFFFFFFFFFFFFF8);
  *v71 = *v72;
  v73 = (_QWORD *)(((unint64_t)v71 + 15) & 0xFFFFFFFFFFFFF8);
  v74 = (uint64_t *)(((unint64_t)v72 + 15) & 0xFFFFFFFFFFFFFFF8);
  v75 = *v74;
  *v73 = *v74;
  v76 = (_QWORD *)(((unint64_t)v73 + 15) & 0xFFFFFFFFFFFFFFF8);
  v77 = (_QWORD *)(((unint64_t)v74 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v76 = *v77;
  v78 = (_QWORD *)(((unint64_t)v76 + 15) & 0xFFFFFFFFFFFFF8);
  v79 = (_QWORD *)(((unint64_t)v77 + 15) & 0xFFFFFFFFFFFFF8);
  *v78 = *v79;
  v80 = (_QWORD *)(((unint64_t)v78 + 15) & 0xFFFFFFFFFFFFF8);
  v81 = (_QWORD *)(((unint64_t)v79 + 15) & 0xFFFFFFFFFFFFF8);
  *v80 = *v81;
  v82 = (_QWORD *)(((unint64_t)v80 + 15) & 0xFFFFFFFFFFFFFFF8);
  v83 = (_QWORD *)(((unint64_t)v81 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v82 = *v83;
  v84 = v83[1];
  v82[1] = v84;
  swift_retain(v75);
  swift_retain(v84);
  return v87;
}

__int128 *sub_A1D78(__int128 *a1, __int128 *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  unsigned int v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  char v29;
  uint64_t v30;
  void *v31;
  const void *v32;
  unsigned int (*v33)(const void *, uint64_t, uint64_t);
  uint64_t v34;
  unint64_t v35;
  int v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  __n128 v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  __int16 v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  _QWORD *v102;
  _QWORD *v103;
  _QWORD *v104;
  _QWORD *v105;
  _QWORD *v106;
  _QWORD *v107;
  uint64_t v108;
  uint64_t v109;

  if (a1 != a2)
  {
    v5 = type metadata accessor for ColorScheme(0);
    v6 = *(_QWORD *)(v5 - 8);
    v7 = *(unsigned __int8 *)(v6 + 80);
    if (*(_DWORD *)(v6 + 84))
      v8 = *(_QWORD *)(v6 + 64);
    else
      v8 = *(_QWORD *)(v6 + 64) + 1;
    if (((v7 + 8) & ~v7) + v8 <= 0xA8)
      v9 = 168;
    else
      v9 = ((v7 + 8) & ~v7) + v8;
    v10 = *((unsigned __int8 *)a1 + v9);
    if (v10 >= 2)
    {
      if (v9 <= 3)
        v11 = v9;
      else
        v11 = 4;
      __asm { BR              X12 }
    }
    v12 = ~v7;
    if (v10 == 1)
    {
      if (!*((_BYTE *)a1 + 56))
        _s7BooksUI13AnyPagedFrameVwxx_0(a1);
      swift_bridgeObjectRelease(*((_QWORD *)a1 + 13));
      v13 = *((_QWORD *)a1 + 15);
      if (v13)
      {
        swift_bridgeObjectRelease(v13);
        swift_bridgeObjectRelease(*((_QWORD *)a1 + 17));
        swift_bridgeObjectRelease(*((_QWORD *)a1 + 20));
      }
    }
    else
    {
      v14 = swift_release(*(_QWORD *)a1);
      if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t, __n128))(v6 + 48))(((unint64_t)a1 + v7 + 8) & v12, 1, v5, v14))(*(void (**)(unint64_t, uint64_t))(v6 + 8))(((unint64_t)a1 + v7 + 8) & v12, v5);
    }
    v15 = *((unsigned __int8 *)a2 + v9);
    if (v15 >= 2)
    {
      if (v9 <= 3)
        v16 = v9;
      else
        v16 = 4;
      __asm { BR              X12 }
    }
    if (v15 == 1)
    {
      if (*((_BYTE *)a2 + 56))
      {
        v17 = *a2;
        v18 = a2[1];
        v19 = a2[2];
        *(__int128 *)((char *)a1 + 41) = *(__int128 *)((char *)a2 + 41);
        a1[1] = v18;
        a1[2] = v19;
        *a1 = v17;
      }
      else
      {
        v20 = *((_QWORD *)a2 + 3);
        *((_QWORD *)a1 + 3) = v20;
        *((_QWORD *)a1 + 4) = *((_QWORD *)a2 + 4);
        (**(void (***)(__int128 *, __int128 *))(v20 - 8))(a1, a2);
        *(__int128 *)((char *)a1 + 40) = *(__int128 *)((char *)a2 + 40);
        *((_BYTE *)a1 + 56) = 0;
      }
      a1[4] = a2[4];
      *((_BYTE *)a1 + 80) = *((_BYTE *)a2 + 80);
      *((_QWORD *)a1 + 11) = *((_QWORD *)a2 + 11);
      *((_QWORD *)a1 + 12) = *((_QWORD *)a2 + 12);
      v21 = *((_QWORD *)a2 + 13);
      *((_QWORD *)a1 + 13) = v21;
      v22 = *((_QWORD *)a2 + 15);
      swift_bridgeObjectRetain(v21);
      if (v22)
      {
        *((_QWORD *)a1 + 14) = *((_QWORD *)a2 + 14);
        v23 = *((_QWORD *)a2 + 15);
        *((_QWORD *)a1 + 15) = v23;
        *((_QWORD *)a1 + 16) = *((_QWORD *)a2 + 16);
        v24 = *((_QWORD *)a2 + 17);
        *((_QWORD *)a1 + 17) = v24;
        *((_BYTE *)a1 + 144) = *((_BYTE *)a2 + 144);
        *((_QWORD *)a1 + 19) = *((_QWORD *)a2 + 19);
        v25 = *((_QWORD *)a2 + 20);
        *((_QWORD *)a1 + 20) = v25;
        swift_bridgeObjectRetain(v23);
        swift_bridgeObjectRetain(v24);
        swift_bridgeObjectRetain(v25);
      }
      else
      {
        v26 = a2[7];
        v27 = a2[8];
        v28 = a2[9];
        *((_QWORD *)a1 + 20) = *((_QWORD *)a2 + 20);
        a1[8] = v27;
        a1[9] = v28;
        a1[7] = v26;
      }
      v29 = 1;
    }
    else
    {
      v30 = *(_QWORD *)a2;
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v31 = (void *)(((unint64_t)a1 + v7 + 8) & v12);
      v32 = (const void *)(((unint64_t)a2 + v7 + 8) & v12);
      v33 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48);
      swift_retain(v30);
      if (v33(v32, 1, v5))
      {
        memcpy(v31, v32, v8);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(v31, v32, v5);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v31, 0, 1, v5);
      }
      v29 = 0;
    }
    *((_BYTE *)a1 + v9) = v29;
  }
  v34 = *(_QWORD *)(type metadata accessor for ColorScheme(0) - 8);
  v35 = (*(unsigned __int8 *)(v34 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v34 + 80);
  v36 = *(_DWORD *)(v34 + 84);
  v37 = *(_QWORD *)(v34 + 64);
  if (!v36)
    ++v37;
  v38 = v37 + v35;
  if (v38 <= 0xA8)
    v39 = 168;
  else
    v39 = v38;
  v40 = type metadata accessor for DynamicTypeSize(0);
  v41 = *(_QWORD *)(v40 - 8);
  v42 = *(unsigned __int8 *)(v41 + 80);
  v43 = v39 + (v42 | 7) + 1;
  v44 = ((unint64_t)a1 + v43) & ~(v42 | 7);
  v45 = ((unint64_t)a2 + v43) & ~(v42 | 7);
  if (v44 == v45)
  {
    v49 = *(_QWORD *)(v41 + 64);
    v48 = (v42 + 2) & ~v42;
  }
  else
  {
    v46 = v40;
    v47 = v42 + 2;
    v48 = (v42 + 2) & ~v42;
    v49 = *(_QWORD *)(v41 + 64);
    if (((v49 + v48 + 7) & 0xFFFFFFFFFFFFFFF8) + 11 <= 8)
      v50 = 8;
    else
      v50 = ((v49 + v48 + 7) & 0xFFFFFFFFFFFFFFF8) + 11;
    v51 = *(unsigned __int8 *)(v44 + v50);
    if (v51 >= 2)
    {
      if (v50 <= 3)
        v52 = v50;
      else
        v52 = 4;
      __asm { BR              X13 }
    }
    v53 = ~v42;
    if (v51 == 1)
      (*(void (**)(uint64_t, uint64_t))(v41 + 8))((v47 + v44) & v53, v40);
    else
      v54 = swift_release(*(_QWORD *)v44);
    v55 = *(unsigned __int8 *)(v45 + v50);
    if (v55 >= 2)
    {
      if (v50 <= 3)
        v56 = v50;
      else
        v56 = 4;
      __asm { BR              X12 }
    }
    if (v55 == 1)
    {
      *(_BYTE *)v44 = *(_BYTE *)v45;
      *(_BYTE *)(v44 | 1) = *(_BYTE *)(v45 | 1);
      v57 = v46;
      v58 = v48;
      v59 = (v47 + v44) & v53;
      v60 = (v47 + v45) & v53;
      (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v41 + 16))(v59, v60, v57, v54);
      v61 = v59 + v49;
      v48 = v58;
      v62 = (v61 + 7) & 0xFFFFFFFFFFFFFFF8;
      v63 = (v60 + v49 + 7) & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v62 = *(_QWORD *)v63;
      v64 = *(_WORD *)(v63 + 8);
      *(_BYTE *)(v62 + 10) = *(_BYTE *)(v63 + 10);
      *(_WORD *)(v62 + 8) = v64;
      *(_BYTE *)(v44 + v50) = 1;
    }
    else
    {
      v65 = *(_QWORD *)v45;
      *(_QWORD *)v44 = *(_QWORD *)v45;
      *(_BYTE *)(v44 + v50) = 0;
      swift_retain(v65);
    }
  }
  if (((v48 + v49 + 7) & 0xFFFFFFFFFFFFFFF8) + 11 <= 8)
    v66 = 8;
  else
    v66 = ((v48 + v49 + 7) & 0xFFFFFFFFFFFFFFF8) + 11;
  v67 = type metadata accessor for YIRSourceData(0);
  v68 = *(_QWORD *)(v67 - 8);
  v69 = *(unsigned __int8 *)(v68 + 80);
  v70 = v66 + (v69 | 7) + 1;
  v71 = (v70 + v44) & ~(v69 | 7);
  v72 = (v70 + v45) & ~(v69 | 7);
  *(_QWORD *)v71 = *(_QWORD *)v72;
  v73 = *(_QWORD *)((char *)&dword_8 + v72);
  v74 = *(_QWORD *)(v71 + 8);
  *(_QWORD *)(v71 + 8) = v73;
  swift_bridgeObjectRetain(v73);
  swift_bridgeObjectRelease(v74);
  *(_QWORD *)(v71 + 16) = *(_QWORD *)(v72 + 16);
  *(_QWORD *)(v71 + 24) = *(_QWORD *)(v72 + 24);
  v75 = *(_QWORD *)(v72 + 32);
  v76 = *(_QWORD *)(v71 + 32);
  *(_QWORD *)(v71 + 32) = v75;
  swift_bridgeObjectRetain(v75);
  swift_bridgeObjectRelease(v76);
  v77 = *(_QWORD *)(v72 + 40);
  *(_BYTE *)(v71 + 48) = *(_BYTE *)(v72 + 48);
  *(_QWORD *)(v71 + 40) = v77;
  *(_QWORD *)(v71 + 56) = *(_QWORD *)(v72 + 56);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v68 + 24))((v69 + 64 + v71) & ~v69, (v69 + 64 + v72) & ~v69, v67);
  v78 = *(_QWORD *)(v68 + 64) + 7;
  v79 = (_QWORD *)((v78 + ((v69 + 64 + v71) & ~v69)) & 0xFFFFFFFFFFFFFFF8);
  v80 = (_QWORD *)((v78 + ((v69 + 64 + v72) & ~v69)) & 0xFFFFFFFFFFFFFFF8);
  *v79 = *v80;
  v81 = v80[1];
  v82 = v79[1];
  v79[1] = v81;
  swift_bridgeObjectRetain(v81);
  swift_bridgeObjectRelease(v82);
  v83 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v84 = *(unsigned __int8 *)(v83 + 80);
  v85 = ((v78 + ((v69 + 64) & ~v69)) & 0xFFFFFFFFFFFFFFF8) + v84 + 16;
  v86 = (v85 + v71) & ~v84;
  v87 = (v85 + v72) & ~v84;
  (*(void (**)(unint64_t, unint64_t))(v83 + 24))(v86, v87);
  v88 = *(_QWORD *)(v83 + 64);
  v89 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v90 = *(unsigned __int8 *)(v89 + 80);
  v91 = v88 + v90;
  v92 = (v91 + v86) & ~v90;
  v93 = (v91 + v87) & ~v90;
  (*(void (**)(unint64_t, unint64_t))(v89 + 24))(v92, v93);
  v94 = *(_QWORD *)(v89 + 64) + 7;
  v95 = (v94 + v92) & 0xFFFFFFFFFFFFFFF8;
  v96 = (v94 + v93) & 0xFFFFFFFFFFFFFFF8;
  v97 = *(_QWORD *)v96;
  v96 += 15;
  *(_QWORD *)v95 = v97;
  v95 += 15;
  v99 = (v96 & 0xFFFFFFFFFFFFFFF8) + 15;
  v98 = *(_QWORD *)(v96 & 0xFFFFFFFFFFFFFFF8);
  v100 = *(_QWORD *)(v95 & 0xFFFFFFFFFFFFFFF8);
  *(_QWORD *)(v95 & 0xFFFFFFFFFFFFFFF8) = v98;
  v101 = (v95 & 0xFFFFFFFFFFFFFFF8) + 15;
  swift_retain(v98);
  swift_release(v100);
  *(_QWORD *)(v101 & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(v99 & 0xFFFFFFFFFFFFF8);
  v102 = (_QWORD *)(((v101 & 0xFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFF8);
  v103 = (_QWORD *)(((v99 & 0xFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFF8);
  *v102 = *v103;
  v104 = (_QWORD *)(((unint64_t)v102 + 15) & 0xFFFFFFFFFFFFF8);
  v105 = (_QWORD *)(((unint64_t)v103 + 15) & 0xFFFFFFFFFFFFF8);
  *v104 = *v105;
  v106 = (_QWORD *)(((unint64_t)v104 + 15) & 0xFFFFFFFFFFFFFFF8);
  v107 = (_QWORD *)(((unint64_t)v105 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v106 = *v107;
  v108 = v106[1];
  v109 = v107[1];
  v106[1] = v109;
  swift_retain(v109);
  swift_release(v108);
  return a1;
}

uint64_t sub_A25C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  size_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  void *v18;
  const void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  __int16 v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _OWORD *v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  _QWORD *v61;
  _QWORD *v62;
  _QWORD *v63;
  _QWORD *v64;
  _QWORD *v65;
  _QWORD *v66;
  _QWORD *v67;
  _QWORD *v68;

  v6 = type metadata accessor for ColorScheme(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  if (*(_DWORD *)(v7 + 84))
    v9 = *(_QWORD *)(v7 + 64);
  else
    v9 = *(_QWORD *)(v7 + 64) + 1;
  if (((v8 + 8) & ~v8) + v9 <= 0xA8)
    v10 = 168;
  else
    v10 = ((v8 + 8) & ~v8) + v9;
  v11 = *(unsigned __int8 *)(a2 + v10);
  if (v11 >= 2)
  {
    if (v10 <= 3)
      v12 = v10;
    else
      v12 = 4;
    __asm { BR              X13 }
  }
  if (v11 == 1)
  {
    v13 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v13;
    *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
    v14 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v14;
    v15 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v15;
    v16 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v16;
    v17 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v17;
    *(_BYTE *)(a1 + v10) = 1;
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    v18 = (void *)((a1 + v8 + 8) & ~v8);
    v19 = (const void *)((a2 + v8 + 8) & ~v8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(v19, 1, v6))
    {
      memcpy(v18, v19, v9);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(v18, v19, v6);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v18, 0, 1, v6);
    }
    *(_BYTE *)(a1 + v10) = 0;
  }
  v20 = type metadata accessor for DynamicTypeSize(0);
  v21 = *(_QWORD *)(v20 - 8);
  v22 = *(unsigned __int8 *)(v21 + 80);
  v23 = v10 + (v22 | 7) + 1;
  v24 = (v23 + a1) & ~(v22 | 7);
  v25 = (v23 + a2) & ~(v22 | 7);
  v26 = v22 + 2;
  v27 = *(_QWORD *)(v21 + 64) + 7;
  if (((v27 + ((v22 + 2) & ~v22)) & 0xFFFFFFFFFFFFFFF8) + 11 <= 8)
    v28 = 8;
  else
    v28 = ((v27 + ((v22 + 2) & ~v22)) & 0xFFFFFFFFFFFFFFF8) + 11;
  v29 = *(unsigned __int8 *)(v25 + v28);
  if (v29 >= 2)
  {
    if (v28 <= 3)
      v30 = v28;
    else
      v30 = 4;
    __asm { BR              X15 }
  }
  if (v29 == 1)
  {
    v31 = ~v22;
    *(_BYTE *)v24 = *(_BYTE *)v25;
    *(_BYTE *)(v24 | 1) = *(_BYTE *)(v25 | 1);
    v32 = (v26 + v24) & v31;
    v33 = (v26 + v25) & v31;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 32))(v32, v33, v20);
    v34 = (v27 + v32) & 0xFFFFFFFFFFFFFFF8;
    v35 = (v27 + v33) & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v34 = *(_QWORD *)v35;
    v36 = *(_WORD *)(v35 + 8);
    *(_BYTE *)(v34 + 10) = *(_BYTE *)(v35 + 10);
    *(_WORD *)(v34 + 8) = v36;
    v37 = 1;
  }
  else
  {
    v37 = 0;
    *(_QWORD *)v24 = *(_QWORD *)v25;
  }
  *(_BYTE *)(v24 + v28) = v37;
  v38 = type metadata accessor for YIRSourceData(0);
  v39 = *(_QWORD *)(v38 - 8);
  v40 = *(unsigned __int8 *)(v39 + 80);
  v41 = v28 + (v40 | 7) + 1;
  v42 = (_OWORD *)((v41 + v24) & ~(v40 | 7));
  v43 = (v41 + v25) & ~(v40 | 7);
  v44 = *(_OWORD *)&stru_20.segname[v43 + 8];
  v46 = *(_OWORD *)v43;
  v45 = *(_OWORD *)((char *)&dword_10 + v43);
  v42[2] = *(_OWORD *)((char *)&stru_20.cmd + v43);
  v42[3] = v44;
  *v42 = v46;
  v42[1] = v45;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v39 + 32))(((unint64_t)v42 + v40 + 64) & ~v40, (v40 + 64 + v43) & ~v40, v38);
  v47 = *(_QWORD *)(v39 + 64) + 7;
  *(_OWORD *)((v47 + (((unint64_t)v42 + v40 + 64) & ~v40)) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)((v47 + ((v40 + 64 + v43) & ~v40)) & 0xFFFFFFFFFFFFF8);
  v48 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v49 = *(unsigned __int8 *)(v48 + 80);
  v50 = ((v47 + ((v40 + 64) & ~v40)) & 0xFFFFFFFFFFFFFFF8) + v49 + 16;
  v51 = ((unint64_t)v42 + v50) & ~v49;
  v52 = (v50 + v43) & ~v49;
  (*(void (**)(unint64_t, unint64_t))(v48 + 32))(v51, v52);
  v53 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v54 = *(unsigned __int8 *)(v53 + 80);
  v55 = *(_QWORD *)(v48 + 64) + v54;
  v56 = (v55 + v51) & ~v54;
  v57 = (v55 + v52) & ~v54;
  (*(void (**)(unint64_t, unint64_t))(v53 + 32))(v56, v57);
  v58 = *(_QWORD *)(v53 + 64) + 7;
  v59 = (_QWORD *)((v58 + v56) & 0xFFFFFFFFFFFFFFF8);
  v60 = (_QWORD *)((v58 + v57) & 0xFFFFFFFFFFFFFFF8);
  *v59 = *v60;
  v61 = (_QWORD *)(((unint64_t)v59 + 15) & 0xFFFFFFFFFFFFF8);
  v62 = (_QWORD *)(((unint64_t)v60 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v61 = *v62;
  v63 = (_QWORD *)(((unint64_t)v61 + 15) & 0xFFFFFFFFFFFFFFF8);
  v64 = (_QWORD *)(((unint64_t)v62 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v63 = *v64;
  v65 = (_QWORD *)(((unint64_t)v63 + 15) & 0xFFFFFFFFFFFFF8);
  v66 = (_QWORD *)(((unint64_t)v64 + 15) & 0xFFFFFFFFFFFFF8);
  *v65 = *v66;
  v67 = (_QWORD *)(((unint64_t)v65 + 15) & 0xFFFFFFFFFFFFF8);
  v68 = (_QWORD *)(((unint64_t)v66 + 15) & 0xFFFFFFFFFFFFF8);
  *v67 = *v68;
  *(_OWORD *)(((unint64_t)v67 + 15) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v68 + 15) & 0xFFFFFFFFFFFFF8);
  return a1;
}

_QWORD *sub_A2A6C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  unsigned int v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  char v22;
  void *v23;
  const void *v24;
  uint64_t v25;
  unint64_t v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  __n128 v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  __int16 v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  _QWORD *v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  _QWORD *v88;
  _QWORD *v89;
  _QWORD *v90;
  _QWORD *v91;
  _QWORD *v92;
  _QWORD *v93;
  uint64_t v94;

  if (a1 != (_QWORD *)a2)
  {
    v5 = type metadata accessor for ColorScheme(0);
    v6 = *(_QWORD *)(v5 - 8);
    v7 = *(unsigned __int8 *)(v6 + 80);
    if (*(_DWORD *)(v6 + 84))
      v8 = *(_QWORD *)(v6 + 64);
    else
      v8 = *(_QWORD *)(v6 + 64) + 1;
    if (((v7 + 8) & ~v7) + v8 <= 0xA8)
      v9 = 168;
    else
      v9 = ((v7 + 8) & ~v7) + v8;
    v10 = *((unsigned __int8 *)a1 + v9);
    if (v10 >= 2)
    {
      if (v9 <= 3)
        v11 = v9;
      else
        v11 = 4;
      __asm { BR              X12 }
    }
    v12 = ~v7;
    if (v10 == 1)
    {
      if (!*((_BYTE *)a1 + 56))
        _s7BooksUI13AnyPagedFrameVwxx_0(a1);
      swift_bridgeObjectRelease(a1[13]);
      v13 = a1[15];
      if (v13)
      {
        swift_bridgeObjectRelease(v13);
        swift_bridgeObjectRelease(a1[17]);
        swift_bridgeObjectRelease(a1[20]);
      }
    }
    else
    {
      v14 = swift_release(*a1);
      if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t, __n128))(v6 + 48))(((unint64_t)a1 + v7 + 8) & v12, 1, v5, v14))(*(void (**)(unint64_t, uint64_t))(v6 + 8))(((unint64_t)a1 + v7 + 8) & v12, v5);
    }
    v15 = *(unsigned __int8 *)(a2 + v9);
    if (v15 >= 2)
    {
      if (v9 <= 3)
        v16 = v9;
      else
        v16 = 4;
      __asm { BR              X12 }
    }
    if (v15 == 1)
    {
      v17 = *(_OWORD *)(a2 + 144);
      *((_OWORD *)a1 + 8) = *(_OWORD *)(a2 + 128);
      *((_OWORD *)a1 + 9) = v17;
      a1[20] = *(_QWORD *)(a2 + 160);
      v18 = *(_OWORD *)(a2 + 80);
      *((_OWORD *)a1 + 4) = *(_OWORD *)(a2 + 64);
      *((_OWORD *)a1 + 5) = v18;
      v19 = *(_OWORD *)(a2 + 112);
      *((_OWORD *)a1 + 6) = *(_OWORD *)(a2 + 96);
      *((_OWORD *)a1 + 7) = v19;
      v20 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_OWORD *)a1 + 1) = v20;
      v21 = *(_OWORD *)(a2 + 48);
      v22 = 1;
      *((_OWORD *)a1 + 2) = *(_OWORD *)(a2 + 32);
      *((_OWORD *)a1 + 3) = v21;
    }
    else
    {
      *a1 = *(_QWORD *)a2;
      v23 = (void *)(((unint64_t)a1 + v7 + 8) & v12);
      v24 = (const void *)((a2 + v7 + 8) & v12);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(v24, 1, v5))
      {
        memcpy(v23, v24, v8);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v6 + 32))(v23, v24, v5);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v23, 0, 1, v5);
      }
      v22 = 0;
    }
    *((_BYTE *)a1 + v9) = v22;
  }
  v25 = *(_QWORD *)(type metadata accessor for ColorScheme(0) - 8);
  v26 = (*(unsigned __int8 *)(v25 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80);
  v27 = *(_DWORD *)(v25 + 84);
  v28 = *(_QWORD *)(v25 + 64);
  if (!v27)
    ++v28;
  v29 = v28 + v26;
  if (v29 <= 0xA8)
    v30 = 168;
  else
    v30 = v29;
  v31 = type metadata accessor for DynamicTypeSize(0);
  v32 = *(_QWORD *)(v31 - 8);
  v33 = *(unsigned __int8 *)(v32 + 80);
  v34 = v30 + (v33 | 7) + 1;
  v35 = ((unint64_t)a1 + v34) & ~(v33 | 7);
  v36 = (v34 + a2) & ~(v33 | 7);
  if (v35 == v36)
  {
    v40 = *(_QWORD *)(v32 + 64);
    v39 = (v33 + 2) & ~v33;
  }
  else
  {
    v37 = v31;
    v38 = v33 + 2;
    v39 = (v33 + 2) & ~v33;
    v40 = *(_QWORD *)(v32 + 64);
    if (((v40 + v39 + 7) & 0xFFFFFFFFFFFFFFF8) + 11 <= 8)
      v41 = 8;
    else
      v41 = ((v40 + v39 + 7) & 0xFFFFFFFFFFFFFFF8) + 11;
    v42 = *(unsigned __int8 *)(v35 + v41);
    if (v42 >= 2)
    {
      if (v41 <= 3)
        v43 = v41;
      else
        v43 = 4;
      __asm { BR              X13 }
    }
    v44 = ~v33;
    if (v42 == 1)
      (*(void (**)(uint64_t, uint64_t))(v32 + 8))((v38 + v35) & v44, v31);
    else
      v45 = swift_release(*(_QWORD *)v35);
    v46 = *(unsigned __int8 *)(v36 + v41);
    if (v46 >= 2)
    {
      if (v41 <= 3)
        v47 = v41;
      else
        v47 = 4;
      __asm { BR              X12 }
    }
    if (v46 == 1)
    {
      *(_BYTE *)v35 = *(_BYTE *)v36;
      *(_BYTE *)(v35 | 1) = *(_BYTE *)(v36 | 1);
      v48 = v37;
      v49 = v39;
      v50 = (v38 + v35) & v44;
      v51 = (v38 + v36) & v44;
      (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v32 + 32))(v50, v51, v48, v45);
      v52 = v50 + v40;
      v39 = v49;
      v53 = (v52 + 7) & 0xFFFFFFFFFFFFFFF8;
      v54 = (v51 + v40 + 7) & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v53 = *(_QWORD *)v54;
      v55 = *(_WORD *)(v54 + 8);
      *(_BYTE *)(v53 + 10) = *(_BYTE *)(v54 + 10);
      *(_WORD *)(v53 + 8) = v55;
      *(_BYTE *)(v35 + v41) = 1;
    }
    else
    {
      *(_QWORD *)v35 = *(_QWORD *)v36;
      *(_BYTE *)(v35 + v41) = 0;
    }
  }
  if (((v39 + v40 + 7) & 0xFFFFFFFFFFFFFFF8) + 11 <= 8)
    v56 = 8;
  else
    v56 = ((v39 + v40 + 7) & 0xFFFFFFFFFFFFFFF8) + 11;
  v57 = type metadata accessor for YIRSourceData(0);
  v58 = *(_QWORD *)(v57 - 8);
  v59 = *(unsigned __int8 *)(v58 + 80);
  v60 = v56 + (v59 | 7) + 1;
  v61 = (v60 + v35) & ~(v59 | 7);
  v62 = (v60 + v36) & ~(v59 | 7);
  *(_QWORD *)v61 = *(_QWORD *)v62;
  v63 = *(_QWORD *)(v61 + 8);
  *(_QWORD *)(v61 + 8) = *(_QWORD *)((char *)&dword_8 + v62);
  swift_bridgeObjectRelease(v63);
  *(_QWORD *)(v61 + 16) = *(_QWORD *)(v62 + 16);
  *(_QWORD *)(v61 + 24) = *(_QWORD *)(v62 + 24);
  v64 = *(_QWORD *)(v61 + 32);
  *(_QWORD *)(v61 + 32) = *(_QWORD *)(v62 + 32);
  swift_bridgeObjectRelease(v64);
  v65 = *(_QWORD *)(v62 + 40);
  *(_BYTE *)(v61 + 48) = *(_BYTE *)(v62 + 48);
  *(_QWORD *)(v61 + 40) = v65;
  *(_QWORD *)(v61 + 56) = *(_QWORD *)(v62 + 56);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v58 + 40))((v59 + 64 + v61) & ~v59, (v59 + 64 + v62) & ~v59, v57);
  v66 = *(_QWORD *)(v58 + 64) + 7;
  v67 = (_QWORD *)((v66 + ((v59 + 64 + v61) & ~v59)) & 0xFFFFFFFFFFFFFFF8);
  v68 = (_QWORD *)((v66 + ((v59 + 64 + v62) & ~v59)) & 0xFFFFFFFFFFFFFFF8);
  *v67 = *v68;
  v69 = v67[1];
  v67[1] = v68[1];
  swift_bridgeObjectRelease(v69);
  v70 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v71 = *(unsigned __int8 *)(v70 + 80);
  v72 = ((v66 + ((v59 + 64) & ~v59)) & 0xFFFFFFFFFFFFFFF8) + v71 + 16;
  v73 = (v72 + v61) & ~v71;
  v74 = (v72 + v62) & ~v71;
  (*(void (**)(unint64_t, unint64_t))(v70 + 40))(v73, v74);
  v75 = *(_QWORD *)(v70 + 64);
  v76 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v77 = *(unsigned __int8 *)(v76 + 80);
  v78 = v75 + v77;
  v79 = (v78 + v73) & ~v77;
  v80 = (v78 + v74) & ~v77;
  (*(void (**)(unint64_t, unint64_t))(v76 + 40))(v79, v80);
  v81 = *(_QWORD *)(v76 + 64) + 7;
  v82 = (v81 + v79) & 0xFFFFFFFFFFFFFFF8;
  v83 = (_QWORD *)((v81 + v80) & 0xFFFFFFFFFFFFFFF8);
  *(_QWORD *)v82 = *v83;
  v82 += 15;
  v84 = ((unint64_t)v83 + 15) & 0xFFFFFFFFFFFFFFF8;
  v85 = *(_QWORD *)v84;
  v84 += 15;
  v86 = *(_QWORD *)(v82 & 0xFFFFFFFFFFFFFFF8);
  *(_QWORD *)(v82 & 0xFFFFFFFFFFFFFFF8) = v85;
  v87 = (v82 & 0xFFFFFFFFFFFFFFF8) + 15;
  swift_release(v86);
  *(_QWORD *)(v87 & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(v84 & 0xFFFFFFFFFFFFF8);
  v88 = (_QWORD *)(((v87 & 0xFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFF8);
  v89 = (_QWORD *)(((v84 & 0xFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFF8);
  *v88 = *v89;
  v90 = (_QWORD *)(((unint64_t)v88 + 15) & 0xFFFFFFFFFFFFF8);
  v91 = (_QWORD *)(((unint64_t)v89 + 15) & 0xFFFFFFFFFFFFF8);
  *v90 = *v91;
  v92 = (_QWORD *)(((unint64_t)v90 + 15) & 0xFFFFFFFFFFFFFFF8);
  v93 = (_QWORD *)(((unint64_t)v91 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v92 = *v93;
  v94 = v92[1];
  v92[1] = v93[1];
  swift_release(v94);
  return a1;
}

uint64_t sub_A31C4(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t result;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;

  v6 = *(_QWORD *)(type metadata accessor for ColorScheme(0) - 8);
  v7 = (*(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v8 = *(_DWORD *)(v6 + 84);
  v9 = *(_QWORD *)(v6 + 64);
  v10 = *(_QWORD *)(type metadata accessor for DynamicTypeSize(0) - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = ((*(_QWORD *)(v10 + 64) + ((v11 + 2) & ~v11) + 7) & 0xFFFFFFFFFFFFFFF8) + 11;
  if (v12 <= 8)
    v13 = 8;
  else
    v13 = v12;
  v14 = type metadata accessor for YIRSourceData(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(unsigned int *)(v15 + 84);
  if (v16 <= 0x7FFFFFFF)
    v17 = 0x7FFFFFFF;
  else
    v17 = *(_DWORD *)(v15 + 84);
  v19 = *(_QWORD *)(a3 + 16);
  v18 = *(_QWORD *)(a3 + 24);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = *(_DWORD *)(v20 + 84);
  if (v21 <= v17)
    v22 = v17;
  else
    v22 = *(_DWORD *)(v20 + 84);
  v23 = *(_QWORD *)(v18 - 8);
  v24 = *(_DWORD *)(v23 + 84);
  if (v24 <= v22)
    v25 = v22;
  else
    v25 = *(_DWORD *)(v23 + 84);
  if (v8)
    v26 = v9;
  else
    v26 = v9 + 1;
  v27 = v26 + v7;
  if (v27 <= 0xA8)
    v27 = 168;
  if (!a2)
    return 0;
  v28 = v27 + (v11 | 7) + 1;
  result = *(unsigned __int8 *)(v15 + 80);
  v30 = result | 7;
  v31 = v13 + (result | 7) + 1;
  if (v25 >= a2)
  {
    v32 = v31 + ((v28 + a1) & ~(v11 | 7));
    v33 = v32 & ~v30;
    if (v17 == v25)
    {
      if ((v16 & 0x80000000) != 0)
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))((result + 64 + v33) & ~result, v16, v14);
      v34 = *(_QWORD *)((char *)&dword_8 + (v32 & ~v30));
    }
    else
    {
      v35 = (v33
           + *(unsigned __int8 *)(v20 + 80)
           + ((*(_QWORD *)(v15 + 64) + ((result + 64) & ~result) + 7) & 0xFFFFFFFFFFFFFFF8)
           + 16) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80);
      if (v21 == v25)
        return (*(uint64_t (**)(unint64_t, _QWORD, uint64_t))(v20 + 48))(v35, *(unsigned int *)(v20 + 84), v19);
      v36 = (*(_QWORD *)(v20 + 64) + *(unsigned __int8 *)(v23 + 80) + v35) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80);
      if (v24 >= v22)
        return (*(uint64_t (**)(unint64_t, _QWORD, uint64_t))(v23 + 48))(v36, *(unsigned int *)(v23 + 84), v18);
      v34 = *(_QWORD *)((((*(_QWORD *)(v23 + 64) + 7 + v36) & 0xFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFF8);
    }
    if (v34 >= 0xFFFFFFFF)
      LODWORD(v34) = -1;
    return (v34 + 1);
  }
  return result;
}

void sub_A34F0(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  int v28;
  unsigned int v29;

  v8 = *(_QWORD *)(type metadata accessor for ColorScheme(0) - 8);
  v9 = (*(unsigned __int8 *)(v8 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v10 = *(_DWORD *)(v8 + 84);
  v11 = *(_QWORD *)(v8 + 64);
  v12 = *(_QWORD *)(type metadata accessor for DynamicTypeSize(0) - 8);
  v13 = *(unsigned __int8 *)(v12 + 80);
  v14 = ((*(_QWORD *)(v12 + 64) + ((v13 + 2) & ~v13) + 7) & 0xFFFFFFFFFFFFFFF8) + 11;
  if (v14 <= 8)
    v15 = 8;
  else
    v15 = v14;
  v16 = *(_QWORD *)(type metadata accessor for YIRSourceData(0) - 8);
  if (*(_DWORD *)(v16 + 84) <= 0x7FFFFFFFu)
    v17 = 0x7FFFFFFF;
  else
    v17 = *(_DWORD *)(v16 + 84);
  v18 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v18 + 84) <= v17)
    v19 = v17;
  else
    v19 = *(_DWORD *)(v18 + 84);
  v20 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v20 + 84) <= v19)
    v21 = v19;
  else
    v21 = *(_DWORD *)(v20 + 84);
  if (v10)
    v22 = v11;
  else
    v22 = v11 + 1;
  v23 = v22 + v9;
  if (v23 <= 0xA8)
    v23 = 168;
  v24 = *(unsigned __int8 *)(v16 + 80);
  if (v21 >= a3)
  {
    v28 = 0;
    if (a2 <= v21)
      goto LABEL_31;
  }
  else
  {
    v25 = a3 - v21;
    if (((((((((((((*(_DWORD *)(v20 + 64)
                   + 7
                   + ((*(_DWORD *)(v18 + 64)
                     + *(unsigned __int8 *)(v20 + 80)
                     + ((((*(_DWORD *)(v16 + 64) + (((_DWORD)v24 + 64) & ~(_DWORD)v24) + 7) & 0xFFFFFFF8)
                       + 16
                       + *(unsigned __int8 *)(v18 + 80)
                       + (((_DWORD)v15
                         + (v24 | 7)
                         + 1
                         + (((_DWORD)v23 + (v13 | 7) + 1) & ~(v13 | 7))) & ~(v24 | 7))) & ~*(unsigned __int8 *)(v18 + 80))) & ~*(unsigned __int8 *)(v20 + 80))) & 0xFFFFFFF8)
                 + 15) & 0xFFFFFFF8)
               + 15) & 0xFFFFFFF8)
             + 15) & 0xFFFFFFF8)
           + 15) & 0xFFFFFFF8)
         + 15) & 0xFFFFFFF8) == 0xFFFFFFF0)
      v26 = v25 + 1;
    else
      v26 = 2;
    if (v26 >= 0x10000)
      v27 = 4;
    else
      v27 = 2;
    if (v26 < 0x100)
      v27 = 1;
    if (v26 >= 2)
      v28 = v27;
    else
      v28 = 0;
    if (a2 <= v21)
LABEL_31:
      __asm { BR              X25 }
  }
  if (((((((((((((*(_DWORD *)(v20 + 64)
                 + 7
                 + ((*(_DWORD *)(v18 + 64)
                   + *(unsigned __int8 *)(v20 + 80)
                   + ((((*(_DWORD *)(v16 + 64) + (((_DWORD)v24 + 64) & ~(_DWORD)v24) + 7) & 0xFFFFFFF8)
                     + 16
                     + *(unsigned __int8 *)(v18 + 80)
                     + (((_DWORD)v15
                       + (v24 | 7)
                       + 1
                       + (((_DWORD)v23 + (v13 | 7) + 1) & ~(v13 | 7))) & ~(v24 | 7))) & ~*(unsigned __int8 *)(v18 + 80))) & ~*(unsigned __int8 *)(v20 + 80))) & 0xFFFFFFF8)
               + 15) & 0xFFFFFFF8)
             + 15) & 0xFFFFFFF8)
           + 15) & 0xFFFFFFF8)
         + 15) & 0xFFFFFFF8)
       + 15) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    v29 = ~v21 + a2;
    bzero(a1, ((((((((((((*(_QWORD *)(v20 + 64)+ 7+ ((*(_QWORD *)(v18 + 64)+ *(unsigned __int8 *)(v20 + 80)+ ((((*(_QWORD *)(v16 + 64) + ((v24 + 64) & ~v24) + 7) & 0xFFFFFFFFFFFFFFF8)+ 16+ *(unsigned __int8 *)(v18 + 80)+ ((v15 + (v24 | 7) + 1 + ((v23 + (v13 | 7) + 1) & ~(v13 | 7))) & ~(v24 | 7))) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80))) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80))) & 0xFFFFFFFFFFFFFFF8)+ 15) & 0xFFFFFFFFFFFFFFF8)+ 15) & 0xFFFFFFFFFFFFFFF8)+ 15) & 0xFFFFFFFFFFFFFFF8)+ 15) & 0xFFFFFFFFFFFFFFF8)+ 15) & 0xFFFFFFFFFFFFFFF8)+ 16);
    *a1 = v29;
  }
  __asm { BR              X10 }
}

void sub_A3744()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0xA3864);
}

void sub_A374C()
{
  int v0;
  uint64_t v1;
  uint64_t v2;

  *(_DWORD *)(v1 + v2) = 0;
  if (v0)
    JUMPOUT(0xA3754);
  JUMPOUT(0xA3864);
}

void sub_A37A8()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0xA3864);
}

void sub_A37B0()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0xA3864);
}

void sub_A37B8(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_WORD *)(v10 + v11) = 0;
  if (v9)
  {
    v5 = (a5 + ((a2 + v10) & v13)) & v12;
    if (v8 != v7)
    {
      if (v6 == v7)
        JUMPOUT(0xA381CLL);
      JUMPOUT(0xA37C4);
    }
    if (a3 < 0)
      JUMPOUT(0xA37F4);
    if (v9 < 0)
      JUMPOUT(0xA383CLL);
    *(_QWORD *)(v5 + 8) = (v9 - 1);
  }
  JUMPOUT(0xA3864);
}

uint64_t sub_A3888()
{
  _QWORD v1[2];

  v1[0] = sub_7EF8(&qword_262C58);
  v1[1] = sub_9F884();
  return swift_getOpaqueTypeConformance2(v1, &opaque type descriptor for <<opaque return type of View.dynamicTypeSize(_:)>>, 1);
}

uint64_t sub_A38D4(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t OpaqueTypeMetadata2;
  uint64_t OpaqueTypeConformance2;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t TupleTypeMetadata3;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  void *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  void *v58;
  uint64_t WitnessTable;
  uint64_t v60;
  uint64_t v61;
  void *v62;

  v1 = *a1;
  v40 = a1[1];
  v2 = a1[2];
  v42 = a1[3];
  v43 = type metadata accessor for TextLockup(255);
  v3 = type metadata accessor for ModifiedContent(255, v1, &type metadata for _FrameLayout);
  v4 = sub_7EF8(&qword_25F700);
  v5 = type metadata accessor for ModifiedContent(255, v3, v4);
  v6 = type metadata accessor for ModifiedContent(255, v5, &type metadata for _ShadowEffect);
  v7 = type metadata accessor for ModifiedContent(255, v6, &type metadata for _ScaleEffect);
  v8 = type metadata accessor for ModifiedContent(255, v7, &type metadata for _FrameLayout);
  type metadata accessor for CGSize(255);
  v10 = v9;
  v61 = v2;
  v62 = &protocol witness table for _FrameLayout;
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v3);
  v60 = sub_7FD8(&qword_25F6F8, &qword_25F700, (uint64_t)&protocol conformance descriptor for _ClipEffect<A>);
  v57 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v5);
  v58 = &protocol witness table for _ShadowEffect;
  v55 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v6);
  v56 = &protocol witness table for _ScaleEffect;
  v53 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v7);
  v54 = &protocol witness table for _FrameLayout;
  v11 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v8);
  v12 = sub_6FD0(&qword_25E308, (uint64_t (*)(uint64_t))type metadata accessor for CGSize, (uint64_t)&protocol conformance descriptor for CGSize);
  v44 = v8;
  v45 = v10;
  v46 = (void *)v11;
  v47 = v12;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(255, &v44, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 0);
  v44 = v8;
  v45 = v10;
  v46 = (void *)v11;
  v47 = v12;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v44, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
  v41 = type metadata accessor for GeometryReader(255, OpaqueTypeMetadata2, OpaqueTypeConformance2);
  v15 = type metadata accessor for CollectionOfOne(255, v40);
  v16 = sub_7EF8(&qword_262708);
  v17 = swift_getWitnessTable(&protocol conformance descriptor for CollectionOfOne<A>, v15);
  v18 = sub_9F984();
  v44 = v15;
  v45 = &type metadata for Never;
  v46 = &type metadata for Never;
  v47 = v16;
  v48 = v17;
  v49 = &protocol witness table for Never;
  v50 = &protocol witness table for Never;
  v51 = v18;
  v52 = v42;
  v19 = type metadata accessor for ShareLink(255, &v44);
  v20 = type metadata accessor for BorderedProminentButtonStyle(255);
  v21 = swift_getWitnessTable(&protocol conformance descriptor for ShareLink<A, B, C, D>, v19);
  v22 = sub_6FD0(&qword_262CA0, (uint64_t (*)(uint64_t))&type metadata accessor for BorderedProminentButtonStyle, (uint64_t)&protocol conformance descriptor for BorderedProminentButtonStyle);
  v44 = v19;
  v45 = (void *)v20;
  v46 = (void *)v21;
  v47 = v22;
  v23 = swift_getOpaqueTypeMetadata2(255, &v44, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 0);
  v24 = sub_7EF8(&qword_262CA8);
  v25 = type metadata accessor for ModifiedContent(255, v23, v24);
  v26 = sub_7EF8(&qword_25FD90);
  v27 = type metadata accessor for ModifiedContent(255, v25, v26);
  v28 = sub_7EF8(&qword_25F2F8);
  v44 = v19;
  v45 = (void *)v20;
  v46 = (void *)v21;
  v47 = v22;
  swift_getOpaqueTypeConformance2(&v44, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
  sub_7FD8(&qword_262CB0, &qword_262CA8, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v25);
  sub_7FD8((unint64_t *)&qword_25FD88, &qword_25FD90, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
  v29 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v27);
  v30 = sub_7FD8(&qword_25F458, &qword_25F2F8, (uint64_t)&protocol conformance descriptor for PartialRangeThrough<A>);
  v44 = v27;
  v45 = (void *)v28;
  v46 = (void *)v29;
  v47 = v30;
  v31 = swift_getOpaqueTypeMetadata2(255, &v44, &opaque type descriptor for <<opaque return type of View.dynamicTypeSize<A>(_:)>>, 0);
  v32 = type metadata accessor for ModifiedContent(255, v31, &type metadata for _FrameLayout);
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3(255, v43, v41, v32, 0, 0);
  v34 = type metadata accessor for TupleView(255, TupleTypeMetadata3);
  v35 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v34);
  v36 = type metadata accessor for VStack(255, v34, v35);
  v37 = sub_7EF8(&qword_25EE58);
  v38 = type metadata accessor for ModifiedContent(255, v36, v37);
  swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v36);
  sub_7FD8((unint64_t *)&qword_25EE78, &qword_25EE58, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
  return swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v38);
}

ValueMetadata *type metadata accessor for VerticalMasonryCoverGrid()
{
  return &type metadata for VerticalMasonryCoverGrid;
}

uint64_t sub_A3DA8(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_22C2C8, 1);
}

uint64_t sub_A3DB8()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_A3DDC@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_9AA24(a1, *(_QWORD *)(v2 + 16), a2);
}

unint64_t sub_A3DE4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_262E70;
  if (!qword_262E70)
  {
    v1 = sub_7EF8(&qword_262E68);
    sub_A3E50();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> Range<A>, v1);
    atomic_store(result, (unint64_t *)&qword_262E70);
  }
  return result;
}

unint64_t sub_A3E50()
{
  unint64_t result;

  result = qword_262E78;
  if (!qword_262E78)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Int, &type metadata for Int);
    atomic_store(result, (unint64_t *)&qword_262E78);
  }
  return result;
}

unint64_t sub_A3E94()
{
  unint64_t result;
  uint64_t v1;

  result = qword_262E80;
  if (!qword_262E80)
  {
    v1 = sub_7EF8(&qword_262660);
    sub_7FD8(&qword_262E88, &qword_262658, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_262E80);
  }
  return result;
}

unint64_t sub_A3F18()
{
  unint64_t result;
  uint64_t v1;

  result = qword_262EB0;
  if (!qword_262EB0)
  {
    v1 = sub_7EF8(&qword_262EA0);
    sub_A3FB4(&qword_262EB8, &qword_262EC0, (void (*)(void))sub_A4020);
    sub_6FD0((unint64_t *)&qword_25EEA0, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_262EB0);
  }
  return result;
}

uint64_t sub_A3FB4(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_7EF8(a2);
    a3();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v6);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_A4020()
{
  unint64_t result;
  uint64_t v1;

  result = qword_262EC8;
  if (!qword_262EC8)
  {
    v1 = sub_7EF8(&qword_262ED0);
    sub_6FD0(&qword_25F6C0, type metadata accessor for CoverView, (uint64_t)&protocol conformance descriptor for CoverView);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_262EC8);
  }
  return result;
}

uint64_t sub_A40E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  double v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[4];

  v6 = v2[3];
  v7 = v2[4];
  v8 = v2[5];
  v11[0] = v2[2];
  v5 = *(double *)v11;
  v11[1] = v6;
  v11[2] = v7;
  v11[3] = v8;
  v9 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for SummaryFrame(0, (uint64_t)v11) - 8) + 80);
  return sub_9E20C(a1, (uint64_t)v2 + ((v9 + 48) & ~v9), v5, v6, v7, v8, a2);
}

unint64_t sub_A4168()
{
  unint64_t result;
  uint64_t v1;

  result = qword_262EE0;
  if (!qword_262EE0)
  {
    v1 = objc_opt_self(LPLinkMetadata);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_262EE0);
  }
  return result;
}

uint64_t sub_A41A4()
{
  return sub_649D0((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_9EE24);
}

uint64_t sub_A41BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 40);
  v26 = v1;
  v25 = *(_OWORD *)(v0 + 24);
  v27 = v25;
  v28 = v2;
  v3 = (int *)type metadata accessor for SummaryFrame(0, (uint64_t)&v26);
  v4 = *((_QWORD *)v3 - 1);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = (v5 + 48) & ~v5;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = v0 + v6;
  v9 = type metadata accessor for PageBackground(0);
  if (swift_getEnumCaseMultiPayload(v0 + v6, v9) == 1)
  {
    if (!*(_BYTE *)(v8 + 56))
      _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)(v0 + v6));
    swift_bridgeObjectRelease(*(_QWORD *)(v8 + 104));
    v10 = *(_QWORD *)(v8 + 120);
    if (v10)
    {
      swift_bridgeObjectRelease(v10);
      swift_bridgeObjectRelease(*(_QWORD *)(v8 + 136));
      swift_bridgeObjectRelease(*(_QWORD *)(v8 + 160));
    }
  }
  else
  {
    swift_release(*(_QWORD *)v8);
    v11 = v8 + *(int *)(sub_5440(&qword_25E930) + 48);
    v12 = type metadata accessor for ColorScheme(0);
    v13 = *(_QWORD *)(v12 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
      (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v11, v12);
  }
  v14 = (_QWORD *)(v8 + v3[13]);
  v15 = sub_5440(&qword_25F200);
  if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
  {
    v16 = (char *)v14 + *(int *)(type metadata accessor for SizeConstants.Environment(0) + 24);
    v17 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(v16, v17);
  }
  else
  {
    swift_release(*v14);
  }
  v18 = v5 | 7;
  v19 = v6 + v7;
  v20 = v8 + v3[14];
  swift_bridgeObjectRelease(*(_QWORD *)(v20 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v20 + 32));
  v21 = type metadata accessor for SummaryFrameViewModel(0);
  v22 = v20 + *(int *)(v21 + 20);
  v23 = type metadata accessor for YIRSourceData(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 8))(v22, v23);
  swift_bridgeObjectRelease(*(_QWORD *)(v20 + *(int *)(v21 + 24) + 8));
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v8 + v3[15], v1);
  (*(void (**)(uint64_t))(*(_QWORD *)(v25 - 8) + 8))(v8 + v3[16]);
  swift_release(*(_QWORD *)(v8 + v3[18]));
  swift_release(*(_QWORD *)(v8 + v3[22] + 8));
  return swift_deallocObject(v0, v19, v18);
}

uint64_t sub_A4408@<X0>(uint64_t a1@<X8>)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *((_QWORD *)v1 + 3);
  v5 = *((_QWORD *)v1 + 4);
  v6 = *((_QWORD *)v1 + 5);
  v11 = *((_QWORD *)v1 + 2);
  v4 = v11;
  v12 = v3;
  v13 = v5;
  v14 = v6;
  v7 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for SummaryFrame(0, (uint64_t)&v11) - 8) + 80);
  v8 = (v7 + 48) & ~v7;
  v11 = v4;
  v12 = v3;
  v13 = v5;
  v14 = v6;
  v9 = type metadata accessor for SummaryFrame(0, (uint64_t)&v11);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, &v1[*(int *)(v9 + 64) + v8], v3);
}

uint64_t sub_A44A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 40);
  v32 = v1;
  v30 = *(_OWORD *)(v0 + 24);
  v33 = v30;
  v34 = v2;
  v3 = (int *)type metadata accessor for SummaryFrame(0, (uint64_t)&v32);
  v4 = *((_QWORD *)v3 - 1);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = (v5 + 48) & ~v5;
  v28 = *(_QWORD *)(v4 + 64);
  v31 = type metadata accessor for GeometryProxy(0);
  v7 = *(_QWORD *)(v31 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v29 = v7;
  v27 = *(_QWORD *)(v7 + 64);
  v9 = v0 + v6;
  v10 = type metadata accessor for PageBackground(0);
  if (swift_getEnumCaseMultiPayload(v0 + v6, v10) == 1)
  {
    if (!*(_BYTE *)(v9 + 56))
      _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)(v0 + v6));
    swift_bridgeObjectRelease(*(_QWORD *)(v9 + 104));
    v11 = *(_QWORD *)(v9 + 120);
    if (v11)
    {
      swift_bridgeObjectRelease(v11);
      swift_bridgeObjectRelease(*(_QWORD *)(v9 + 136));
      swift_bridgeObjectRelease(*(_QWORD *)(v9 + 160));
    }
  }
  else
  {
    swift_release(*(_QWORD *)v9);
    v12 = v9 + *(int *)(sub_5440(&qword_25E930) + 48);
    v13 = type metadata accessor for ColorScheme(0);
    v14 = *(_QWORD *)(v13 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
      (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v12, v13);
  }
  v15 = (_QWORD *)(v9 + v3[13]);
  v16 = sub_5440(&qword_25F200);
  if (swift_getEnumCaseMultiPayload(v15, v16) == 1)
  {
    v17 = (char *)v15 + *(int *)(type metadata accessor for SizeConstants.Environment(0) + 24);
    v18 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(v17, v18);
  }
  else
  {
    swift_release(*v15);
  }
  v19 = v5 | v8 | 7;
  v20 = (v6 + v28 + v8) & ~v8;
  v21 = v9 + v3[14];
  swift_bridgeObjectRelease(*(_QWORD *)(v21 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v21 + 32));
  v22 = type metadata accessor for SummaryFrameViewModel(0);
  v23 = v21 + *(int *)(v22 + 20);
  v24 = type metadata accessor for YIRSourceData(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 8))(v23, v24);
  swift_bridgeObjectRelease(*(_QWORD *)(v21 + *(int *)(v22 + 24) + 8));
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v9 + v3[15], v1);
  (*(void (**)(uint64_t))(*(_QWORD *)(v30 - 8) + 8))(v9 + v3[16]);
  swift_release(*(_QWORD *)(v9 + v3[18]));
  v25 = swift_release(*(_QWORD *)(v9 + v3[22] + 8));
  (*(void (**)(uint64_t, uint64_t, __n128))(v29 + 8))(v0 + v20, v31, v25);
  return swift_deallocObject(v0, v20 + v27, v19);
}

uint64_t sub_A4740()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[4];

  v2 = v0[3];
  v3 = v0[4];
  v4 = v0[5];
  v10[0] = v0[2];
  v1 = v10[0];
  v10[1] = v2;
  v10[2] = v3;
  v10[3] = v4;
  v5 = *(_QWORD *)(type metadata accessor for SummaryFrame(0, (uint64_t)v10) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for GeometryProxy(0) - 8) + 80);
  return sub_9EB50((uint64_t)v0 + v6, (uint64_t)v0 + ((v6 + v7 + v8) & ~v8), v1, v2, v3, v4);
}

uint64_t sub_A47DC()
{
  return sub_7FD8(&qword_262F30, &qword_262F38, (uint64_t)&protocol conformance descriptor for HStack<A>);
}

uint64_t View.useDarkColorSchemeWhenInVibrantContext(isEnabled:)(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v12;

  v6 = type metadata accessor for UseDarkColorSchemeWhenInVibrantContextViewModifier(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v8 = swift_getKeyPath(&unk_1E6F20);
  v8[8] = 0;
  v9 = &v8[*(int *)(v6 + 20)];
  *(_QWORD *)v9 = swift_getKeyPath(&unk_1E6F48);
  v10 = sub_5440(&qword_25E948);
  swift_storeEnumTagMultiPayload(v9, v10, 0);
  v8[*(int *)(v6 + 24)] = a1;
  View.modifier<A>(_:)(v8, a2, v6, a3);
  return sub_4F144((uint64_t)v8);
}

uint64_t type metadata accessor for UseDarkColorSchemeWhenInVibrantContextViewModifier(uint64_t a1)
{
  uint64_t result;

  result = qword_262F98;
  if (!qword_262F98)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for UseDarkColorSchemeWhenInVibrantContextViewModifier);
  return result;
}

uint64_t sub_A4940(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *a1;
  v2 = type metadata accessor for UseDarkColorSchemeWhenInVibrantContextViewModifier(255);
  v3 = type metadata accessor for ModifiedContent(255, v1, v2);
  sub_A499C();
  return swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v3);
}

unint64_t sub_A499C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_260A10;
  if (!qword_260A10)
  {
    v1 = type metadata accessor for UseDarkColorSchemeWhenInVibrantContextViewModifier(255);
    result = swift_getWitnessTable(&unk_1E6FE8, v1);
    atomic_store(result, (unint64_t *)&qword_260A10);
  }
  return result;
}

unint64_t sub_A49E4(unint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = v15 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain(v15);
  }
  else
  {
    v7 = *(_QWORD *)a2;
    v8 = *(_BYTE *)(a2 + 8);
    sub_F9E4(*(_QWORD *)a2, v8);
    *(_QWORD *)a1 = v7;
    *(_BYTE *)(a1 + 8) = v8;
    v9 = *(int *)(a3 + 20);
    v10 = (uint64_t *)(a1 + v9);
    v11 = (uint64_t *)(a2 + v9);
    v12 = sub_5440(&qword_25E948);
    if (swift_getEnumCaseMultiPayload(v11, v12) == 1)
    {
      v13 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v10, v11, v13);
      v14 = 1;
    }
    else
    {
      v16 = *v11;
      *v10 = *v11;
      swift_retain(v16);
      v14 = 0;
    }
    swift_storeEnumTagMultiPayload(v10, v12, v14);
    *(_BYTE *)(a1 + *(int *)(a3 + 24)) = *(_BYTE *)(a2 + *(int *)(a3 + 24));
  }
  return a1;
}

double sub_A4AE4(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  double result;

  sub_BE0C(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
  v4 = (_QWORD *)(a1 + *(int *)(a2 + 20));
  v5 = sub_5440(&qword_25E948);
  if (swift_getEnumCaseMultiPayload(v4, v5) == 1)
  {
    v6 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v4, v6);
  }
  else
  {
    *(_QWORD *)&result = swift_release(*v4).n128_u64[0];
  }
  return result;
}

uint64_t sub_A4B60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = *(_QWORD *)a2;
  v7 = *(_BYTE *)(a2 + 8);
  sub_F9E4(*(_QWORD *)a2, v7);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  v8 = *(int *)(a3 + 20);
  v9 = (uint64_t *)(a1 + v8);
  v10 = (uint64_t *)(a2 + v8);
  v11 = sub_5440(&qword_25E948);
  if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
  {
    v12 = type metadata accessor for ColorScheme(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v9, v10, v12);
    v13 = 1;
  }
  else
  {
    v14 = *v10;
    *v9 = *v10;
    swift_retain(v14);
    v13 = 0;
  }
  swift_storeEnumTagMultiPayload(v9, v11, v13);
  *(_BYTE *)(a1 + *(int *)(a3 + 24)) = *(_BYTE *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_A4C34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = *(_QWORD *)a2;
  v7 = *(_BYTE *)(a2 + 8);
  sub_F9E4(*(_QWORD *)a2, v7);
  v8 = *(_QWORD *)a1;
  v9 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  sub_BE0C(v8, v9);
  if (a1 != a2)
  {
    v10 = *(int *)(a3 + 20);
    v11 = (uint64_t *)(a1 + v10);
    v12 = (uint64_t *)(a2 + v10);
    sub_A4D24(a1 + v10);
    v13 = sub_5440(&qword_25E948);
    if (swift_getEnumCaseMultiPayload(v12, v13) == 1)
    {
      v14 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v11, v12, v14);
      v15 = 1;
    }
    else
    {
      v16 = *v12;
      *v11 = *v12;
      swift_retain(v16);
      v15 = 0;
    }
    swift_storeEnumTagMultiPayload(v11, v13, v15);
  }
  *(_BYTE *)(a1 + *(int *)(a3 + 24)) = *(_BYTE *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_A4D24(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_5440(&qword_25E948);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_A4D64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = *(int *)(a3 + 20);
  v7 = (void *)(a1 + v6);
  v8 = (const void *)(a2 + v6);
  v9 = sub_5440(&qword_25E948);
  if (swift_getEnumCaseMultiPayload(v8, v9) == 1)
  {
    v10 = type metadata accessor for ColorScheme(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v7, v8, v10);
    swift_storeEnumTagMultiPayload(v7, v9, 1);
  }
  else
  {
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  *(_BYTE *)(a1 + *(int *)(a3 + 24)) = *(_BYTE *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_A4E30(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  void *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;

  v6 = *a2;
  v7 = *((_BYTE *)a2 + 8);
  v8 = *(_QWORD *)a1;
  v9 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  sub_BE0C(v8, v9);
  if ((uint64_t *)a1 != a2)
  {
    v10 = *(int *)(a3 + 20);
    v11 = (void *)(a1 + v10);
    v12 = (char *)a2 + v10;
    sub_A4D24(a1 + v10);
    v13 = sub_5440(&qword_25E948);
    if (swift_getEnumCaseMultiPayload(v12, v13) == 1)
    {
      v14 = type metadata accessor for ColorScheme(0);
      (*(void (**)(void *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v11, v12, v14);
      swift_storeEnumTagMultiPayload(v11, v13, 1);
    }
    else
    {
      memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
  }
  *(_BYTE *)(a1 + *(int *)(a3 + 24)) = *((_BYTE *)a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_A4F18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_A4F24);
}

uint64_t sub_A4F24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4;
  uint64_t v8;

  if ((_DWORD)a2 == 254)
  {
    v4 = *(unsigned __int8 *)(a1 + 8);
    if (v4 > 1)
      return (v4 ^ 0xFF) + 1;
    else
      return 0;
  }
  else
  {
    v8 = sub_5440(&qword_25EAE8);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t sub_A4F9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_A4FA8);
}

uint64_t sub_A4FA8(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 254)
  {
    *(_BYTE *)(result + 8) = -(char)a2;
  }
  else
  {
    v7 = sub_5440(&qword_25EAE8);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 20), a2, a2, v7);
  }
  return result;
}

void sub_A501C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = "\t";
  sub_40964(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(v2 - 8) + 64;
    v4[2] = &unk_1E6FD0;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
  }
}

uint64_t sub_A5098(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_22C374, 1);
}

uint64_t sub_A50A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t KeyPath;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v5 = type metadata accessor for UseDarkColorSchemeWhenInVibrantContextViewModifier(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = type metadata accessor for ColorScheme(0);
  v8 = *(_QWORD *)(v27 - 8);
  __chkstk_darwin(v27);
  v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_5440(&qword_262FD8);
  __chkstk_darwin(v11);
  v13 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(unsigned __int8 *)(v2 + *(int *)(v5 + 24));
  sub_4F100(v2, (uint64_t)v7);
  v28 = a1;
  if (v14 != 1)
  {
    sub_4F144((uint64_t)v7);
    v19 = v27;
    goto LABEL_5;
  }
  v26 = a2;
  v15 = *(_QWORD *)v7;
  v16 = v7[8];
  sub_F9E4(*(_QWORD *)v7, v16);
  v17 = sub_30DB4(v15, v16);
  v18 = v15;
  a2 = v26;
  sub_BE0C(v18, v16);
  sub_4F144((uint64_t)v7);
  v19 = v27;
  if ((v17 & 1) == 0)
  {
LABEL_5:
    sub_31378((uint64_t)v10);
    goto LABEL_6;
  }
  (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v10, enum case for ColorScheme.dark(_:), v27);
LABEL_6:
  KeyPath = swift_getKeyPath(&unk_1E7038);
  v21 = (uint64_t *)&v13[*(int *)(v11 + 36)];
  v22 = sub_5440(&qword_25EE58);
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))((char *)v21 + *(int *)(v22 + 28), v10, v19);
  *v21 = KeyPath;
  v23 = sub_5440(&qword_262FE0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v13, v28, v23);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v19);
  return sub_A52E8((uint64_t)v13, a2);
}

uint64_t sub_A52C4(uint64_t a1)
{
  return EnvironmentValues.colorScheme.getter(a1);
}

uint64_t sub_A52E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_5440(&qword_262FD8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_A5334()
{
  unint64_t result;
  uint64_t v1;

  result = qword_262FE8;
  if (!qword_262FE8)
  {
    v1 = sub_7EF8(&qword_262FD8);
    sub_7FD8(&qword_262FF0, &qword_262FE0, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
    sub_7FD8((unint64_t *)&qword_25EE78, &qword_25EE58, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_262FE8);
  }
  return result;
}

uint64_t FlatCoverView.init(assetInfo:intrinsicSize:cornerRadius:)@<X0>(__int128 *a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t result;
  double *v17;

  *(_QWORD *)a2 = swift_getKeyPath(&unk_1E7068);
  *(_BYTE *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = swift_getKeyPath(&unk_1E7090);
  *(_BYTE *)(a2 + 56) = 0;
  v10 = type metadata accessor for ProfileRestrictions(0);
  v11 = sub_6FD0((unint64_t *)&qword_26AF00, type metadata accessor for ProfileRestrictions, (uint64_t)&protocol conformance descriptor for ProfileRestrictions);
  *(_QWORD *)(a2 + 64) = EnvironmentObject.init()(v10, v11);
  *(_QWORD *)(a2 + 72) = v12;
  v13 = (int *)type metadata accessor for FlatCoverView(0);
  v14 = (_QWORD *)(a2 + v13[7]);
  *v14 = swift_getKeyPath(&unk_1E70C0);
  v15 = sub_5440(&qword_25F1E8);
  swift_storeEnumTagMultiPayload(v14, v15, 0);
  result = sub_AC68(a1, a2 + v13[8]);
  v17 = (double *)(a2 + v13[9]);
  *v17 = a3;
  v17[1] = a4;
  *(double *)(a2 + v13[10]) = a5;
  return result;
}

void FlatCoverView.body.getter(void (**a1)(void *a1@<X0>, uint64_t a2@<X8>)@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(void *@<X0>, uint64_t@<X8>);
  void (*v16)(void *@<X0>, uint64_t@<X8>);
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[2];

  v3 = type metadata accessor for FlatCoverView(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  __chkstk_darwin(v3);
  v6 = sub_A5638();
  sub_1E428(v1, (uint64_t)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for FlatCoverView);
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = (v7 + 16) & ~v7;
  v9 = swift_allocObject(&unk_24F630, v8 + v5, v7 | 7);
  sub_A6138((uint64_t)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v9 + v8);
  v10 = type metadata accessor for ImageResourceLoader(0);
  v11 = swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
  *(_QWORD *)(v11 + 16) = 0;
  v12 = sub_5440(&qword_2600E0);
  v13 = swift_allocObject(v12, 32, 7);
  *(_DWORD *)(v13 + 28) = 0;
  *(_QWORD *)(v13 + 16) = 0;
  *(_BYTE *)(v13 + 24) = 0;
  *(_QWORD *)(v11 + 24) = v13;
  v14 = swift_retain(v9);
  ObservationRegistrar.init()(v14);
  v18 = v11;
  State.init(wrappedValue:)(v19, &v18, v10);
  swift_release(v9);
  v15 = (void (*)(void *@<X0>, uint64_t@<X8>))v19[0];
  v16 = (void (*)(void *@<X0>, uint64_t@<X8>))v19[1];
  *a1 = sub_A617C;
  a1[1] = (void (*)(void *@<X0>, uint64_t@<X8>))v9;
  a1[2] = (void (*)(void *@<X0>, uint64_t@<X8>))v6;
  a1[3] = v15;
  a1[4] = v16;
}

uint64_t sub_A5638()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double *v19;
  double v20;
  double v21;
  uint64_t v22;
  char v23;
  double v24;
  uint64_t v25;
  _WORD v28[2];
  _QWORD v29[2];
  BOOL v30;
  _QWORD v31[3];
  uint64_t v32;
  uint64_t v33;

  v1 = v0;
  v2 = type metadata accessor for FlatCoverView(0);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v28[-2] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = (_QWORD *)(v0 + *(int *)(v3 + 32));
  v7 = v6[3];
  v8 = v6[4];
  sub_5480(v6, v7);
  v9 = AssetInfo.coverURLString.getter(v7, v8);
  v11 = v10;
  sub_1E428(v1, (uint64_t)v5, type metadata accessor for FlatCoverView);
  if (v11)
  {
    v12 = v11;
  }
  else
  {
    v13 = &v5[*(int *)(v2 + 32)];
    v14 = *((_QWORD *)v13 + 3);
    v15 = *((_QWORD *)v13 + 4);
    sub_5480(v13, v14);
    v9 = ContentInfo.id.getter(v14, *(_QWORD *)(v15 + 8));
    v12 = v16;
  }
  sub_224DC((uint64_t)v5, type metadata accessor for FlatCoverView);
  sub_315E0((uint64_t)v31);
  v17 = v32;
  v18 = v33;
  sub_5480(v31, v32);
  v29[0] = v9;
  v29[1] = v12;
  v30 = v11 != 0;
  v19 = (double *)(v1 + *(int *)(v2 + 36));
  v20 = *v19;
  v21 = v19[1];
  v22 = *(_QWORD *)(v1 + 48);
  v23 = *(_BYTE *)(v1 + 56);
  sub_F9E4(v22, v23);
  v24 = sub_30784(v22, v23);
  sub_BE0C(v22, v23);
  sub_A5BAC(v28);
  v25 = (*(uint64_t (**)(_QWORD *, _WORD *, uint64_t, uint64_t, double, double, double))(v18 + 16))(v29, v28, v17, v18, v20, v21, v24);
  sub_224D4(v9, v12);
  _s7BooksUI13AnyPagedFrameVwxx_0(v31);
  return v25;
}

void sub_A5818(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  double v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  _BYTE v41[12];
  int v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned __int8 v52;
  uint64_t v53;
  unsigned __int8 v54;
  uint64_t v55;
  uint64_t v56;

  v49 = a3;
  v5 = sub_5440(&qword_2630B0);
  __chkstk_darwin(v5);
  v7 = (uint64_t *)&v41[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = sub_5440(&qword_25F700);
  __chkstk_darwin(v8);
  v10 = &v41[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v11);
  v13 = &v41[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v50 = sub_5440(&qword_2630B8);
  v14 = __chkstk_darwin(v50);
  v16 = &v41[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v17 = __chkstk_darwin(v14);
  v19 = &v41[-v18];
  if (a1)
  {
    v20 = *(double *)(a2 + *(int *)(type metadata accessor for FlatCoverView(0) + 40));
    v21 = a1;
    UIImage.cornerRadius(_:)(v20);
    v23 = Image.init(uiImage:)(v22);
    *v7 = v23;
    swift_storeEnumTagMultiPayload(v7, v5, 0);
    v24 = sub_A6BDC();
    swift_retain(v23);
    _ConditionalContent<>.init(storage:)(v7, &type metadata for Image, v50, &protocol witness table for Image, v24);
    swift_release(v23);

  }
  else
  {
    v47 = static Color.gray.getter(v17);
    v25 = type metadata accessor for FlatCoverView(0);
    v26 = (uint64_t *)(a2 + *(int *)(v25 + 36));
    v46 = v8;
    v48 = v5;
    v28 = *v26;
    v27 = v26[1];
    v29 = _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0();
    _FrameLayout.init(width:height:alignment:)(&v51, v28, 0, v27, 0, v29, v30);
    v45 = v51;
    v44 = v52;
    v43 = v53;
    v42 = v54;
    v31 = *(_QWORD *)(a2 + *(int *)(v25 + 40));
    v32 = v55;
    v33 = v56;
    v34 = (char *)v13 + *(int *)(v11 + 20);
    v35 = enum case for RoundedCornerStyle.continuous(_:);
    v36 = type metadata accessor for RoundedCornerStyle(0);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 104))(v34, v35, v36);
    *v13 = v31;
    v13[1] = v31;
    sub_1E428((uint64_t)v13, (uint64_t)v10, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
    *(_WORD *)&v10[*(int *)(v46 + 36)] = 256;
    v37 = v50;
    sub_B3D0((uint64_t)v10, (uint64_t)&v16[*(int *)(v50 + 36)], &qword_25F700);
    v38 = v47;
    *(_QWORD *)v16 = v47;
    *((_WORD *)v16 + 4) = 256;
    *((_QWORD *)v16 + 2) = v45;
    v16[24] = v44;
    *((_QWORD *)v16 + 4) = v43;
    v16[40] = v42;
    *((_QWORD *)v16 + 6) = v32;
    *((_QWORD *)v16 + 7) = v33;
    v39 = v38;
    swift_retain(v38);
    sub_B414((uint64_t)v10, &qword_25F700);
    sub_224DC((uint64_t)v13, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
    swift_release(v39);
    sub_A6B94((uint64_t)v16, (uint64_t)v19);
    sub_B3D0((uint64_t)v19, (uint64_t)v7, &qword_2630B8);
    swift_storeEnumTagMultiPayload(v7, v48, 1);
    v40 = sub_A6BDC();
    _ConditionalContent<>.init(storage:)(v7, &type metadata for Image, v37, &protocol witness table for Image, v40);
    sub_B414((uint64_t)v19, &qword_2630B8);
  }
}

uint64_t sub_A5BAC@<X0>(_WORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  void *v16;
  unsigned int v17;
  uint64_t KeyPath;
  uint64_t v19;
  id v20;
  uint64_t result;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char v28;
  void (*v29)(char *, uint64_t);
  char v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t (*v39)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v40;
  char v41;
  int v42;
  _WORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  _WORD *v51;
  _QWORD v52[5];

  v2 = v1;
  v51 = a1;
  v3 = sub_5440(&qword_2630E8);
  __chkstk_darwin(v3);
  v48 = (char *)&v47 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for ColorScheme(0);
  v50 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v49 = (char *)&v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for ColorConstants.Environment(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for ColorConstants(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v47 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for FlatCoverView(0);
  __chkstk_darwin(v13);
  v15 = (char *)&v47 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(void **)(v1 + 64);
  if (v16)
  {
    v17 = 16710908;
    KeyPath = swift_getKeyPath(&unk_1E71C0);
    v19 = swift_getKeyPath(&unk_1E71E8);
    v20 = v16;
    static Published.subscript.getter(v52, v20, KeyPath, v19);

    swift_release(KeyPath);
    swift_release(v19);
    LOBYTE(v20) = v52[0];
    sub_1E428(v2, (uint64_t)v15, type metadata accessor for FlatCoverView);
    if ((v20 & 1) != 0)
    {
      result = sub_224DC((uint64_t)v15, type metadata accessor for FlatCoverView);
    }
    else
    {
      v22 = &v15[*(int *)(v13 + 32)];
      v23 = *((_QWORD *)v22 + 3);
      v24 = *((_QWORD *)v22 + 4);
      sub_5480(v22, v23);
      LOBYTE(v23) = AssetInfo.isExplicit.getter(v23, v24);
      result = sub_224DC((uint64_t)v15, type metadata accessor for FlatCoverView);
      if ((v23 & 1) != 0)
      {
        _s7BooksUI18BuyButtonExternalsV6colorsAA14ColorConstantsVvg_0((uint64_t)v12);
        sub_1E428((uint64_t)v12, (uint64_t)v9, type metadata accessor for ColorConstants.Environment);
        v26 = v49;
        v25 = v50;
        (*(void (**)(char *, _QWORD, uint64_t))(v50 + 104))(v49, enum case for ColorScheme.dark(_:), v5);
        v27 = sub_6FD0((unint64_t *)&qword_25FD60, (uint64_t (*)(uint64_t))&type metadata accessor for ColorScheme, (uint64_t)&protocol conformance descriptor for ColorScheme);
        v28 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v26, v5, v27);
        v29 = *(void (**)(char *, uint64_t))(v25 + 8);
        v29(v26, v5);
        v29(v9, v5);
        sub_224DC((uint64_t)v12, type metadata accessor for ColorConstants);
        v30 = v28 ^ 1;
        v31 = (_QWORD *)(v2 + *(int *)(v13 + 32));
        v32 = v31[3];
        v33 = v31[4];
        sub_5480(v31, v32);
        result = dispatch thunk of AssetInfo.assetType.getter(v32, v33);
        if ((_BYTE)result)
        {
          if (result == 1)
          {
            sub_BD00((uint64_t)v31, (uint64_t)v52);
            v34 = sub_5440(&qword_262040);
            v35 = type metadata accessor for BookInfo(0);
            v36 = (uint64_t)v48;
            v37 = swift_dynamicCast(v48, v52, v34, v35, 6);
            v38 = *(_QWORD *)(v35 - 8);
            v39 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v38 + 56);
            if (v37)
            {
              v40 = v39(v36, 0, 1, v35);
              v41 = BookInfo.isRTL.getter(v40);
              result = (*(uint64_t (**)(uint64_t, uint64_t))(v38 + 8))(v36, v35);
            }
            else
            {
              v39(v36, 1, 1, v35);
              result = sub_B414(v36, &qword_2630E8);
              v41 = 0;
            }
            if ((v28 & 1) != 0)
              v42 = 0x10000;
            else
              v42 = 65792;
            v17 = v42 & 0xFFFFFFFE | v41 & 1;
          }
          else
          {
            v17 = v30 & 1 | 0xFF800000;
          }
        }
        else
        {
          v17 = (v30 & 1 | 0x10100) + 4128768;
        }
      }
    }
    v43 = v51;
    *v51 = v17;
    *((_BYTE *)v43 + 2) = BYTE2(v17);
  }
  else
  {
    v44 = *(_QWORD *)(v1 + 72);
    v45 = type metadata accessor for ProfileRestrictions(0);
    v46 = sub_6FD0((unint64_t *)&qword_26AF00, type metadata accessor for ProfileRestrictions, (uint64_t)&protocol conformance descriptor for ProfileRestrictions);
    result = EnvironmentObject.error()(0, v44, v45, v46);
    __break(1u);
  }
  return result;
}

uint64_t type metadata accessor for FlatCoverView(uint64_t a1)
{
  uint64_t result;

  result = qword_263050;
  if (!qword_263050)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for FlatCoverView);
  return result;
}

uint64_t sub_A6044()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v1 = type metadata accessor for FlatCoverView(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v0 + v4;
  if ((*(_BYTE *)(v0 + v4 + 40) & 1) != 0)
    _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)(v0 + v4));
  else
    swift_release(*(_QWORD *)v6);
  sub_BE0C(*(_QWORD *)(v6 + 48), *(_BYTE *)(v6 + 56));

  v7 = (_QWORD *)(v6 + *(int *)(v1 + 28));
  v8 = sub_5440(&qword_25F1E8);
  if (swift_getEnumCaseMultiPayload(v7, v8) == 1)
  {
    v9 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v7, v9);
  }
  else
  {
    swift_release(*v7);
  }
  _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)(v6 + *(int *)(v1 + 32)));
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_A6138(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for FlatCoverView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_A617C(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for FlatCoverView(0) - 8) + 80);
  sub_A5818(a1, v2 + ((v5 + 16) & ~v5), a2);
}

uint64_t sub_A61C8(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &opaque type descriptor for <<opaque return type of FlatCoverView.body>>, 1);
}

uint64_t initializeBufferWithCopyOfBuffer for FlatCoverView(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v4;
  int v5;
  char v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v9 = *a2;
    *(_QWORD *)v4 = *a2;
    v4 = v9 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain(v9);
  }
  else
  {
    v7 = *((_BYTE *)a2 + 40);
    if ((v7 & 1) != 0)
    {
      v8 = *(_OWORD *)(a2 + 3);
      *(_OWORD *)(a1 + 24) = v8;
      (**(void (***)(uint64_t, uint64_t *))(v8 - 8))(a1, a2);
    }
    else
    {
      v10 = *a2;
      *(_QWORD *)v4 = *a2;
      swift_retain(v10);
    }
    *(_BYTE *)(v4 + 40) = v7;
    v11 = a2[6];
    v12 = *((_BYTE *)a2 + 56);
    sub_F9E4(v11, v12);
    *(_QWORD *)(v4 + 48) = v11;
    *(_BYTE *)(v4 + 56) = v12;
    v13 = (void *)a2[8];
    v14 = a2[9];
    *(_QWORD *)(v4 + 64) = v13;
    *(_QWORD *)(v4 + 72) = v14;
    v15 = a3[7];
    v16 = (uint64_t *)(v4 + v15);
    v17 = (uint64_t *)((char *)a2 + v15);
    v18 = v13;
    v19 = sub_5440(&qword_25F1E8);
    if (swift_getEnumCaseMultiPayload(v17, v19) == 1)
    {
      v20 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v16, v17, v20);
      v21 = 1;
    }
    else
    {
      v22 = *v17;
      *v16 = *v17;
      swift_retain(v22);
      v21 = 0;
    }
    swift_storeEnumTagMultiPayload(v16, v19, v21);
    v23 = a3[8];
    v24 = *(_OWORD *)((char *)a2 + v23 + 24);
    *(_OWORD *)(v4 + v23 + 24) = v24;
    (**(void (***)(void))(v24 - 8))();
    v25 = a3[10];
    *(_OWORD *)(v4 + a3[9]) = *(_OWORD *)((char *)a2 + a3[9]);
    *(_QWORD *)(v4 + v25) = *(uint64_t *)((char *)a2 + v25);
  }
  return v4;
}

uint64_t destroy for FlatCoverView(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  if ((a1[5] & 1) != 0)
    _s7BooksUI13AnyPagedFrameVwxx_0(a1);
  else
    swift_release(*a1);
  sub_BE0C(a1[6], *((_BYTE *)a1 + 56));

  v4 = (_QWORD *)((char *)a1 + *(int *)(a2 + 28));
  v5 = sub_5440(&qword_25F1E8);
  if (swift_getEnumCaseMultiPayload(v4, v5) == 1)
  {
    v6 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v4, v6);
  }
  else
  {
    swift_release(*v4);
  }
  return _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)((char *)a1 + *(int *)(a2 + 32)));
}

uint64_t initializeWithCopy for FlatCoverView(uint64_t a1, uint64_t *a2, int *a3)
{
  char v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;

  v6 = *((_BYTE *)a2 + 40);
  if ((v6 & 1) != 0)
  {
    v7 = *(_OWORD *)(a2 + 3);
    *(_OWORD *)(a1 + 24) = v7;
    (**(void (***)(uint64_t, uint64_t *))(v7 - 8))(a1, a2);
  }
  else
  {
    v8 = *a2;
    *(_QWORD *)a1 = *a2;
    swift_retain(v8);
  }
  *(_BYTE *)(a1 + 40) = v6;
  v9 = a2[6];
  v10 = *((_BYTE *)a2 + 56);
  sub_F9E4(v9, v10);
  *(_QWORD *)(a1 + 48) = v9;
  *(_BYTE *)(a1 + 56) = v10;
  v11 = (void *)a2[8];
  v12 = a2[9];
  *(_QWORD *)(a1 + 64) = v11;
  *(_QWORD *)(a1 + 72) = v12;
  v13 = a3[7];
  v14 = (uint64_t *)(a1 + v13);
  v15 = (uint64_t *)((char *)a2 + v13);
  v16 = v11;
  v17 = sub_5440(&qword_25F1E8);
  if (swift_getEnumCaseMultiPayload(v15, v17) == 1)
  {
    v18 = type metadata accessor for ColorScheme(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v14, v15, v18);
    v19 = 1;
  }
  else
  {
    v20 = *v15;
    *v14 = *v15;
    swift_retain(v20);
    v19 = 0;
  }
  swift_storeEnumTagMultiPayload(v14, v17, v19);
  v21 = a3[8];
  v22 = *(_OWORD *)((char *)a2 + v21 + 24);
  *(_OWORD *)(a1 + v21 + 24) = v22;
  (**(void (***)(void))(v22 - 8))();
  v23 = a3[10];
  *(_OWORD *)(a1 + a3[9]) = *(_OWORD *)((char *)a2 + a3[9]);
  *(_QWORD *)(a1 + v23) = *(uint64_t *)((char *)a2 + v23);
  return a1;
}

uint64_t assignWithCopy for FlatCoverView(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  void *v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;

  if ((uint64_t *)a1 != a2)
  {
    sub_B414(a1, &qword_25EAE0);
    if ((a2[5] & 1) != 0)
    {
      v6 = a2[3];
      *(_QWORD *)(a1 + 24) = v6;
      *(_QWORD *)(a1 + 32) = a2[4];
      (**(void (***)(uint64_t, uint64_t *))(v6 - 8))(a1, a2);
      *(_BYTE *)(a1 + 40) = 1;
    }
    else
    {
      v7 = *a2;
      *(_QWORD *)a1 = *a2;
      *(_BYTE *)(a1 + 40) = 0;
      swift_retain(v7);
    }
  }
  v8 = a2[6];
  v9 = *((_BYTE *)a2 + 56);
  sub_F9E4(v8, v9);
  v10 = *(_QWORD *)(a1 + 48);
  v11 = *(_BYTE *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = v8;
  *(_BYTE *)(a1 + 56) = v9;
  sub_BE0C(v10, v11);
  v12 = *(void **)(a1 + 64);
  v13 = (void *)a2[8];
  *(_QWORD *)(a1 + 64) = v13;
  v14 = v13;

  *(_QWORD *)(a1 + 72) = a2[9];
  if ((uint64_t *)a1 != a2)
  {
    v15 = a3[7];
    v16 = (uint64_t *)(a1 + v15);
    v17 = (uint64_t *)((char *)a2 + v15);
    sub_B414(a1 + v15, &qword_25F1E8);
    v18 = sub_5440(&qword_25F1E8);
    if (swift_getEnumCaseMultiPayload(v17, v18) == 1)
    {
      v19 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v16, v17, v19);
      v20 = 1;
    }
    else
    {
      v21 = *v17;
      *v16 = *v17;
      swift_retain(v21);
      v20 = 0;
    }
    swift_storeEnumTagMultiPayload(v16, v18, v20);
  }
  sub_142F8((_QWORD *)(a1 + a3[8]), (uint64_t *)((char *)a2 + a3[8]));
  v22 = a3[9];
  v23 = (_QWORD *)(a1 + v22);
  v24 = (uint64_t *)((char *)a2 + v22);
  *v23 = *v24;
  v23[1] = v24[1];
  *(_QWORD *)(a1 + a3[10]) = *(uint64_t *)((char *)a2 + a3[10]);
  return a1;
}

uint64_t initializeWithTake for FlatCoverView(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 *v15;
  __int128 v16;
  __int128 v17;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v7 = a3[7];
  v8 = (void *)(a1 + v7);
  v9 = (const void *)(a2 + v7);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  v10 = sub_5440(&qword_25F1E8);
  if (swift_getEnumCaseMultiPayload(v9, v10) == 1)
  {
    v11 = type metadata accessor for ColorScheme(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v8, v9, v11);
    swift_storeEnumTagMultiPayload(v8, v10, 1);
  }
  else
  {
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  v12 = a3[8];
  v13 = a3[9];
  v14 = a1 + v12;
  v15 = (__int128 *)(a2 + v12);
  v16 = *v15;
  v17 = v15[1];
  *(_QWORD *)(v14 + 32) = *((_QWORD *)v15 + 4);
  *(_OWORD *)v14 = v16;
  *(_OWORD *)(v14 + 16) = v17;
  *(_OWORD *)(a1 + v13) = *(_OWORD *)(a2 + v13);
  *(_QWORD *)(a1 + a3[10]) = *(_QWORD *)(a2 + a3[10]);
  return a1;
}

uint64_t assignWithTake for FlatCoverView(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  char v7;
  uint64_t v8;
  char v9;
  void *v10;
  uint64_t v11;
  void *v12;
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;

  if (a1 != a2)
  {
    sub_B414(a1, &qword_25EAE0);
    v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v6;
    *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  }
  v7 = *(_BYTE *)(a2 + 56);
  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_BYTE *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = v7;
  sub_BE0C(v8, v9);
  v10 = *(void **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);

  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  if (a1 != a2)
  {
    v11 = a3[7];
    v12 = (void *)(a1 + v11);
    v13 = (const void *)(a2 + v11);
    sub_B414(a1 + v11, &qword_25F1E8);
    v14 = sub_5440(&qword_25F1E8);
    if (swift_getEnumCaseMultiPayload(v13, v14) == 1)
    {
      v15 = type metadata accessor for ColorScheme(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v12, v13, v15);
      swift_storeEnumTagMultiPayload(v12, v14, 1);
    }
    else
    {
      memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
  }
  v16 = a3[8];
  v17 = a1 + v16;
  v18 = a2 + v16;
  _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)(a1 + v16));
  v19 = *(_OWORD *)(v18 + 16);
  *(_OWORD *)v17 = *(_OWORD *)v18;
  *(_OWORD *)(v17 + 16) = v19;
  *(_QWORD *)(v17 + 32) = *(_QWORD *)(v18 + 32);
  v20 = a3[10];
  *(_OWORD *)(a1 + a3[9]) = *(_OWORD *)(a2 + a3[9]);
  *(_QWORD *)(a1 + v20) = *(_QWORD *)(a2 + v20);
  return a1;
}

uint64_t getEnumTagSinglePayload for FlatCoverView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_A6954);
}

uint64_t sub_A6954(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = sub_5440(&qword_25F210);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 28), a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 32) + 24);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for FlatCoverView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_A69E8);
}

uint64_t sub_A69E8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_5440(&qword_25F210);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + *(int *)(a4 + 28), a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 32) + 24) = (a2 - 1);
  return result;
}

void sub_A6A6C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[7];

  v4[0] = ")";
  v4[1] = L"\t";
  v4[2] = &unk_1E7178;
  sub_A6B14(319);
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(v2 - 8) + 64;
    v4[4] = &unk_1E7190;
    v4[5] = &unk_1E71A8;
    v4[6] = (char *)&value witness table for Builtin.Int64 + 64;
    swift_initStructMetadata(a1, 256, 7, v4, a1 + 16);
  }
}

void sub_A6B14(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_25F298)
  {
    v2 = type metadata accessor for ColorConstants(255);
    v3 = type metadata accessor for Environment.Content(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_25F298);
  }
}

uint64_t sub_A6B68()
{
  return sub_7FD8(&qword_2630A0, &qword_2630A8, (uint64_t)&protocol conformance descriptor for AsyncResourceImage<A>);
}

uint64_t sub_A6B94(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_5440(&qword_2630B8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_A6BDC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2630C0;
  if (!qword_2630C0)
  {
    v1 = sub_7EF8(&qword_2630B8);
    sub_A6C60();
    sub_7FD8(&qword_25F6F8, &qword_25F700, (uint64_t)&protocol conformance descriptor for _ClipEffect<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_2630C0);
  }
  return result;
}

unint64_t sub_A6C60()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2630C8;
  if (!qword_2630C8)
  {
    v1 = sub_7EF8(&qword_2630D0);
    sub_7FD8(&qword_2630D8, &qword_2630E0, (uint64_t)&protocol conformance descriptor for _ShapeView<A, B>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_2630C8);
  }
  return result;
}

uint64_t sub_A6CEC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  unsigned int (*v21)(char *, uint64_t, uint64_t);
  char *v22;
  void (*v23)(char *, char *, uint64_t);
  uint64_t v24;
  char *v25;
  char *v26;
  void (*v27)(char *, uint64_t);
  void (*v29)(char *, char *, uint64_t);
  char *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  void (*v35)(char *, uint64_t);
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;

  v3 = sub_5440(&qword_25E778);
  v4 = __chkstk_darwin(v3);
  v6 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v36 - v7;
  v9 = type metadata accessor for DynamicTypeSize(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v38 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v11);
  v37 = (char *)&v36 - v14;
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v36 - v16;
  __chkstk_darwin(v15);
  v19 = (char *)&v36 - v18;
  v20 = type metadata accessor for RestrictedDynamicTypeSizeViewModifier(0);
  sub_31CB4(a1);
  v39 = v1;
  sub_A7758(v1, (uint64_t)v8);
  v21 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
  if (v21(v8, 1, v9) == 1)
  {
    sub_B414((uint64_t)v8, &qword_25E778);
  }
  else
  {
    v22 = v8;
    v23 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
    v23(v19, v22, v9);
    v24 = sub_6FD0(&qword_25FE98, (uint64_t (*)(uint64_t))&type metadata accessor for DynamicTypeSize, (uint64_t)&protocol conformance descriptor for DynamicTypeSize);
    if ((dispatch thunk of static Comparable.>= infix(_:_:)(a1, v19, v9, v24) & 1) != 0)
    {
      v25 = v17;
      v26 = (char *)a1;
    }
    else
    {
      v25 = v17;
      v26 = v19;
    }
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v25, v26, v9);
    v27 = *(void (**)(char *, uint64_t))(v10 + 8);
    v27(v19, v9);
    v27((char *)a1, v9);
    v23((char *)a1, v17, v9);
  }
  sub_A7758(v39 + *(int *)(v20 + 20), (uint64_t)v6);
  if (v21(v6, 1, v9) == 1)
    return sub_B414((uint64_t)v6, &qword_25E778);
  v29 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
  v30 = v37;
  v29(v37, v6, v9);
  v31 = sub_6FD0(&qword_25FE98, (uint64_t (*)(uint64_t))&type metadata accessor for DynamicTypeSize, (uint64_t)&protocol conformance descriptor for DynamicTypeSize);
  if ((dispatch thunk of static Comparable.< infix(_:_:)(a1, v30, v9, v31) & 1) != 0)
  {
    v32 = v38;
    v33 = v38;
    v34 = a1;
  }
  else
  {
    v32 = v38;
    v33 = v38;
    v34 = (uint64_t)v30;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v33, v34, v9);
  v35 = *(void (**)(char *, uint64_t))(v10 + 8);
  v35(v30, v9);
  v35((char *)a1, v9);
  return ((uint64_t (*)(uint64_t, char *, uint64_t))v29)(a1, v32, v9);
}

uint64_t sub_A6FF8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v3 = type metadata accessor for EnvironmentValues(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_5440(&qword_25E778);
  __chkstk_darwin(v7);
  v9 = (uint64_t *)((char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = sub_A89E8();
  EnvironmentValues.subscript.getter(v9, &type metadata for OriginalDynamicTypeSizeKey, &type metadata for OriginalDynamicTypeSizeKey, v10);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v1, v3);
  v11 = type metadata accessor for DynamicTypeSize(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v12 + 48))(v9, 1, v11);
  if ((_DWORD)v13 == 1)
  {
    EnvironmentValues.dynamicTypeSize.getter(v13);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    return sub_B414((uint64_t)v9, &qword_25E778);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    return (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t))(v12 + 32))(a1, v9, v11);
  }
}

uint64_t sub_A7150@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v4 = type metadata accessor for EnvironmentValues(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_5440(&qword_25E778);
  __chkstk_darwin(v8);
  v10 = (uint64_t *)((char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = sub_A89E8();
  EnvironmentValues.subscript.getter(v10, &type metadata for OriginalDynamicTypeSizeKey, &type metadata for OriginalDynamicTypeSizeKey, v11);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  v12 = type metadata accessor for DynamicTypeSize(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v13 + 48))(v10, 1, v12);
  if ((_DWORD)v14 == 1)
  {
    EnvironmentValues.dynamicTypeSize.getter(v14);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    return sub_B414((uint64_t)v10, &qword_25E778);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    return (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t))(v13 + 32))(a2, v10, v12);
  }
}

uint64_t sub_A72AC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void (*v9)(char *, uint64_t, uint64_t);
  unint64_t v10;
  uint64_t v12;

  v2 = sub_5440(&qword_25E778);
  __chkstk_darwin(v2);
  v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DynamicTypeSize(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v9(v8, a1, v5);
  v9(v4, (uint64_t)v8, v5);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v4, 0, 1, v5);
  v10 = sub_A89E8();
  EnvironmentValues.subscript.setter(v4, &type metadata for OriginalDynamicTypeSizeKey, &type metadata for OriginalDynamicTypeSizeKey, v10);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_A73C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t KeyPath;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, uint64_t);
  unint64_t v15;
  _QWORD v17[2];

  v17[1] = a2;
  v3 = type metadata accessor for DynamicTypeSize(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_5440(&qword_2631B0);
  __chkstk_darwin(v7);
  v9 = (char *)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  KeyPath = swift_getKeyPath(&unk_1E7210);
  sub_31CB4((uint64_t)v6);
  v11 = (uint64_t *)&v9[*(int *)(v7 + 36)];
  v12 = sub_5440(&qword_2631B8);
  (*(void (**)(char *, char *, uint64_t))(v4 + 16))((char *)v11 + *(int *)(v12 + 28), v6, v3);
  *v11 = KeyPath;
  v13 = sub_5440(&qword_2631C0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v9, a1, v13);
  v14 = *(void (**)(char *, uint64_t))(v4 + 8);
  v14(v6, v3);
  sub_A6CEC((uint64_t)v6);
  v15 = sub_A894C();
  View.dynamicTypeSize(_:)(v6, v7, v15);
  v14(v6, v3);
  return sub_B414((uint64_t)v9, &qword_2631B0);
}

uint64_t View.restrictedDynamicTypeSize(min:max:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v25;

  v25 = a4;
  v7 = sub_5440(&qword_25E778);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v25 - v11;
  v13 = type metadata accessor for RestrictedDynamicTypeSizeViewModifier(0);
  v14 = __chkstk_darwin(v13);
  v16 = (char *)&v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v18 = (char *)&v25 - v17;
  sub_A7758(a1, (uint64_t)v12);
  sub_A7758(a2, (uint64_t)v10);
  v19 = type metadata accessor for DynamicTypeSize(0);
  v20 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56);
  v20(v16, 1, 1, v19);
  v21 = (uint64_t)&v16[*(int *)(v13 + 20)];
  v20((char *)v21, 1, 1, v19);
  v22 = &v16[*(int *)(v13 + 24)];
  *(_QWORD *)v22 = swift_getKeyPath(&unk_1E7210);
  v23 = sub_5440(&qword_25FAA8);
  swift_storeEnumTagMultiPayload(v22, v23, 0);
  sub_A77A8((uint64_t)v12, (uint64_t)v16);
  sub_A77A8((uint64_t)v10, v21);
  sub_A77F0((uint64_t)v16, (uint64_t)v18);
  View.modifier<A>(_:)(v18, a3, v13, v25);
  return sub_A7834((uint64_t)v18);
}

uint64_t type metadata accessor for RestrictedDynamicTypeSizeViewModifier(uint64_t a1)
{
  uint64_t result;

  result = qword_263168;
  if (!qword_263168)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for RestrictedDynamicTypeSizeViewModifier);
  return result;
}

uint64_t sub_A7758(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_5440(&qword_25E778);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_A77A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_5440(&qword_25E778);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_A77F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for RestrictedDynamicTypeSizeViewModifier(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_A7834(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for RestrictedDynamicTypeSizeViewModifier(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t View.nonAXDynamicTypeSize()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v22;

  v22 = a2;
  v3 = sub_5440(&qword_25E778);
  v4 = __chkstk_darwin(v3);
  v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v22 - v7;
  v9 = type metadata accessor for RestrictedDynamicTypeSizeViewModifier(0);
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v22 - v13;
  v15 = type metadata accessor for DynamicTypeSize(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56);
  v17(v8, 1, 1, v15);
  (*(void (**)(char *, _QWORD, uint64_t))(v16 + 104))(v6, enum case for DynamicTypeSize.xxxLarge(_:), v15);
  v17(v6, 0, 1, v15);
  v17(v12, 1, 1, v15);
  v18 = (uint64_t)&v12[*(int *)(v9 + 20)];
  v17((char *)v18, 1, 1, v15);
  v19 = &v12[*(int *)(v9 + 24)];
  *(_QWORD *)v19 = swift_getKeyPath(&unk_1E7210);
  v20 = sub_5440(&qword_25FAA8);
  swift_storeEnumTagMultiPayload(v19, v20, 0);
  sub_A77A8((uint64_t)v8, (uint64_t)v12);
  sub_A77A8((uint64_t)v6, v18);
  sub_A77F0((uint64_t)v12, (uint64_t)v14);
  View.modifier<A>(_:)(v14, a1, v9, v22);
  return sub_A7834((uint64_t)v14);
}

uint64_t View.unrestrictedDynamicTypeSize()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  void (*v16)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v21;

  v21 = a2;
  v3 = sub_5440(&qword_25E778);
  v4 = __chkstk_darwin(v3);
  v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v21 - v7;
  v9 = type metadata accessor for RestrictedDynamicTypeSizeViewModifier(0);
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v21 - v13;
  v15 = type metadata accessor for DynamicTypeSize(0);
  v16 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56);
  v16(v8, 1, 1, v15);
  v16(v6, 1, 1, v15);
  v16(v12, 1, 1, v15);
  v17 = (uint64_t)&v12[*(int *)(v9 + 20)];
  v16((char *)v17, 1, 1, v15);
  v18 = &v12[*(int *)(v9 + 24)];
  *(_QWORD *)v18 = swift_getKeyPath(&unk_1E7210);
  v19 = sub_5440(&qword_25FAA8);
  swift_storeEnumTagMultiPayload(v18, v19, 0);
  sub_A77A8((uint64_t)v8, (uint64_t)v12);
  sub_A77A8((uint64_t)v6, v17);
  sub_A77F0((uint64_t)v12, (uint64_t)v14);
  View.modifier<A>(_:)(v14, a1, v9, v21);
  return sub_A7834((uint64_t)v14);
}

uint64_t sub_A7C3C(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *a1;
  v2 = type metadata accessor for RestrictedDynamicTypeSizeViewModifier(255);
  v3 = type metadata accessor for ModifiedContent(255, v1, v2);
  sub_6FD0((unint64_t *)&qword_263108, type metadata accessor for RestrictedDynamicTypeSizeViewModifier, (uint64_t)&unk_1E7268);
  return swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v3);
}

uint64_t *sub_A7CBC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  unsigned int (*v9)(uint64_t *, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v11);
  }
  else
  {
    v7 = type metadata accessor for DynamicTypeSize(0);
    v8 = *(_QWORD *)(v7 - 8);
    v9 = *(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48);
    if (v9(a2, 1, v7))
    {
      v10 = sub_5440(&qword_25E778);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    v12 = *(int *)(a3 + 20);
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    if (v9((uint64_t *)((char *)a2 + v12), 1, v7))
    {
      v15 = sub_5440(&qword_25E778);
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v13, v14, v7);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v13, 0, 1, v7);
    }
    v16 = *(int *)(a3 + 24);
    v17 = (uint64_t *)((char *)a1 + v16);
    v18 = (uint64_t *)((char *)a2 + v16);
    v19 = sub_5440(&qword_25FAA8);
    if (swift_getEnumCaseMultiPayload(v18, v19) == 1)
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(v17, v18, v7);
      v20 = v17;
      v21 = v19;
      v22 = 1;
    }
    else
    {
      v23 = *v18;
      *v17 = *v18;
      swift_retain(v23);
      v20 = v17;
      v21 = v19;
      v22 = 0;
    }
    swift_storeEnumTagMultiPayload(v20, v21, v22);
  }
  return a1;
}

double sub_A7E80(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  double result;

  v4 = type metadata accessor for DynamicTypeSize(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (!v6(a1, 1, v4))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  v7 = a1 + *(int *)(a2 + 20);
  if (!v6(v7, 1, v4))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v7, v4);
  v8 = (_QWORD *)(a1 + *(int *)(a2 + 24));
  v9 = sub_5440(&qword_25FAA8);
  if (swift_getEnumCaseMultiPayload(v8, v9) == 1)
    (*(void (**)(_QWORD *, uint64_t))(v5 + 8))(v8, v4);
  else
    *(_QWORD *)&result = swift_release(*v8).n128_u64[0];
  return result;
}

char *sub_A7F60(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int (*v8)(char *, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v6 = type metadata accessor for DynamicTypeSize(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  if (v8(a2, 1, v6))
  {
    v9 = sub_5440(&qword_25E778);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v10 = *(int *)(a3 + 20);
  v11 = &a1[v10];
  v12 = &a2[v10];
  if (v8(&a2[v10], 1, v6))
  {
    v13 = sub_5440(&qword_25E778);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v11, v12, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v11, 0, 1, v6);
  }
  v14 = *(int *)(a3 + 24);
  v15 = &a1[v14];
  v16 = &a2[v14];
  v17 = sub_5440(&qword_25FAA8);
  if (swift_getEnumCaseMultiPayload(v16, v17) == 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v15, v16, v6);
    v18 = v15;
    v19 = v17;
    v20 = 1;
  }
  else
  {
    v21 = *(_QWORD *)v16;
    *(_QWORD *)v15 = *(_QWORD *)v16;
    swift_retain(v21);
    v18 = v15;
    v19 = v17;
    v20 = 0;
  }
  swift_storeEnumTagMultiPayload(v18, v19, v20);
  return a1;
}

char *sub_A80F8(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v6 = type metadata accessor for DynamicTypeSize(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    v11 = sub_5440(&qword_25E778);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
LABEL_7:
  v12 = *(int *)(a3 + 20);
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = v8(&a1[v12], 1, v6);
  v16 = v8(v14, 1, v6);
  if (v15)
  {
    if (!v16)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v13, v14, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v13, 0, 1, v6);
      if (a1 == a2)
        return a1;
      goto LABEL_14;
    }
LABEL_13:
    v17 = sub_5440(&qword_25E778);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    if (a1 == a2)
      return a1;
    goto LABEL_14;
  }
  if (v16)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v13, v6);
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 24))(v13, v14, v6);
  if (a1 == a2)
    return a1;
LABEL_14:
  v18 = *(int *)(a3 + 24);
  v19 = &a1[v18];
  v20 = &a2[v18];
  sub_B414((uint64_t)&a1[v18], &qword_25FAA8);
  v21 = sub_5440(&qword_25FAA8);
  if (swift_getEnumCaseMultiPayload(v20, v21) == 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v19, v20, v6);
    v22 = v19;
    v23 = v21;
    v24 = 1;
  }
  else
  {
    v25 = *(_QWORD *)v20;
    *(_QWORD *)v19 = *(_QWORD *)v20;
    swift_retain(v25);
    v22 = v19;
    v23 = v21;
    v24 = 0;
  }
  swift_storeEnumTagMultiPayload(v22, v23, v24);
  return a1;
}

char *sub_A8348(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int (*v8)(char *, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;

  v6 = type metadata accessor for DynamicTypeSize(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  if (v8(a2, 1, v6))
  {
    v9 = sub_5440(&qword_25E778);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v10 = *(int *)(a3 + 20);
  v11 = &a1[v10];
  v12 = &a2[v10];
  if (v8(&a2[v10], 1, v6))
  {
    v13 = sub_5440(&qword_25E778);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v11, v12, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v11, 0, 1, v6);
  }
  v14 = *(int *)(a3 + 24);
  v15 = &a1[v14];
  v16 = &a2[v14];
  v17 = sub_5440(&qword_25FAA8);
  if (swift_getEnumCaseMultiPayload(v16, v17) == 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v15, v16, v6);
    swift_storeEnumTagMultiPayload(v15, v17, 1);
  }
  else
  {
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  return a1;
}

char *sub_A84DC(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;

  v6 = type metadata accessor for DynamicTypeSize(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    v11 = sub_5440(&qword_25E778);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
LABEL_7:
  v12 = *(int *)(a3 + 20);
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = v8(&a1[v12], 1, v6);
  v16 = v8(v14, 1, v6);
  if (v15)
  {
    if (!v16)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v13, v14, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v13, 0, 1, v6);
      if (a1 == a2)
        return a1;
      goto LABEL_14;
    }
LABEL_13:
    v17 = sub_5440(&qword_25E778);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    if (a1 == a2)
      return a1;
    goto LABEL_14;
  }
  if (v16)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v13, v6);
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 40))(v13, v14, v6);
  if (a1 == a2)
    return a1;
LABEL_14:
  v18 = *(int *)(a3 + 24);
  v19 = &a1[v18];
  v20 = &a2[v18];
  sub_B414((uint64_t)&a1[v18], &qword_25FAA8);
  v21 = sub_5440(&qword_25FAA8);
  if (swift_getEnumCaseMultiPayload(v20, v21) == 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v19, v20, v6);
    swift_storeEnumTagMultiPayload(v19, v21, 1);
  }
  else
  {
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
  }
  return a1;
}

uint64_t sub_A8728(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_A8734);
}

uint64_t sub_A8734(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v6 = sub_5440(&qword_25E778);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v8 = sub_5440(&qword_260E40);
    v10 = a1 + *(int *)(a3 + 24);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t sub_A87B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_A87BC);
}

uint64_t sub_A87BC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v8 = sub_5440(&qword_25E778);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v10 = sub_5440(&qword_260E40);
    v12 = a1 + *(int *)(a4 + 24);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_A8840(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[3];

  sub_A88E4(319, (unint64_t *)&qword_263178, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    v6[1] = v6[0];
    sub_A88E4(319, (unint64_t *)&qword_260EB0, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
    if (v5 <= 0x3F)
    {
      v6[2] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 256, 3, v6, a1 + 16);
    }
  }
}

void sub_A88E4(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = type metadata accessor for DynamicTypeSize(255);
    v7 = a3(a1, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t sub_A893C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_22C53C, 1);
}

unint64_t sub_A894C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2631C8;
  if (!qword_2631C8)
  {
    v1 = sub_7EF8(&qword_2631B0);
    sub_7FD8(&qword_2631D0, &qword_2631C0, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
    sub_7FD8(&qword_2631D8, &qword_2631B8, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_2631C8);
  }
  return result;
}

unint64_t sub_A89E8()
{
  unint64_t result;

  result = qword_2631E0;
  if (!qword_2631E0)
  {
    result = swift_getWitnessTable(&unk_1E72DC, &type metadata for OriginalDynamicTypeSizeKey);
    atomic_store(result, (unint64_t *)&qword_2631E0);
  }
  return result;
}

ValueMetadata *type metadata accessor for OriginalDynamicTypeSizeKey()
{
  return &type metadata for OriginalDynamicTypeSizeKey;
}

uint64_t sub_A8A3C()
{
  _QWORD v1[2];

  v1[0] = sub_7EF8(&qword_2631B0);
  v1[1] = sub_A894C();
  return swift_getOpaqueTypeConformance2(v1, &opaque type descriptor for <<opaque return type of View.dynamicTypeSize(_:)>>, 1);
}

uint64_t sub_A8A88()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = sub_5440(&qword_25E778);
  sub_73A0(v0, qword_2630F0);
  v1 = sub_7120(v0, (uint64_t)qword_2630F0);
  v2 = type metadata accessor for DynamicTypeSize(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
}

uint64_t sub_A8AF0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_25DC08 != -1)
    swift_once(&qword_25DC08, sub_A8A88);
  v2 = sub_5440(&qword_25E778);
  v3 = sub_7120(v2, (uint64_t)qword_2630F0);
  return sub_A7758(v3, a1);
}

uint64_t sub_A8B50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8;

  v8 = sub_A8BA0();
  return static EnvironmentKey<>._valuesEqual(_:_:)(a1, a2, a3, a4, v8);
}

unint64_t sub_A8BA0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2631E8;
  if (!qword_2631E8)
  {
    v1 = sub_7EF8(&qword_25E778);
    sub_6FD0(&qword_25F450, (uint64_t (*)(uint64_t))&type metadata accessor for DynamicTypeSize, (uint64_t)&protocol conformance descriptor for DynamicTypeSize);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_2631E8);
  }
  return result;
}

uint64_t ListItemMetadataTitleWithSubtitle.init(title:subtitle:size:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char *a5@<X4>, uint64_t a6@<X8>)
{
  char v6;

  v6 = *a5;
  *(_QWORD *)a6 = result;
  *(_QWORD *)(a6 + 8) = a2;
  *(_QWORD *)(a6 + 16) = a3;
  *(_QWORD *)(a6 + 24) = a4;
  *(_BYTE *)(a6 + 32) = v6;
  return result;
}

void ListItemMetadataTitleWithSubtitle.size.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 32);
}

_BYTE *ListItemMetadataTitleWithSubtitle.size.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 32) = *result;
  return result;
}

uint64_t ListItemMetadataTitleWithSubtitle.title(localizer:)()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain(v0[1]);
  return v1;
}

uint64_t ListItemMetadataTitleWithSubtitle.subtitle(localizer:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 24);
  if (v1)
    v2 = *(_QWORD *)(v0 + 16);
  else
    v2 = 0;
  swift_bridgeObjectRetain(v1);
  return v2;
}

uint64_t sub_A8CE0()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x656C746974627573;
  if (*v0 != 1)
    v1 = 1702521203;
  if (*v0)
    return v1;
  else
    return 0x656C746974;
}

uint64_t sub_A8D30@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_A951C(a1, a2);
  *a3 = result;
  return result;
}

void sub_A8D54(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

uint64_t sub_A8D60(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_A8FDC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_A8D88(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_A8FDC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t ListItemMetadataTitleWithSubtitle.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;

  v5 = sub_5440(&qword_2631F0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_5480(a1, v9);
  v11 = sub_A8FDC();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ListItemMetadataTitleWithSubtitle.CodingKeys, &type metadata for ListItemMetadataTitleWithSubtitle.CodingKeys, v11, v9, v10);
  if (v2)
  {
    _s7BooksUI13AnyPagedFrameVwxx_0(a1);
    v21 = 0;
  }
  else
  {
    BYTE2(v25) = 0;
    v12 = KeyedDecodingContainer.decode(_:forKey:)((char *)&v25 + 2, v5);
    v15 = v14;
    v23 = v12;
    BYTE1(v25) = 1;
    swift_bridgeObjectRetain(v14);
    v16 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)((char *)&v25 + 1, v5);
    v18 = v17;
    v22 = v16;
    v24 = 2;
    v19 = sub_A9020();
    swift_bridgeObjectRetain(v18);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v25, &type metadata for ListItemMetadata.TitleLockupSize, &v24, v5, &type metadata for ListItemMetadata.TitleLockupSize, v19);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v20 = v25;
    *(_QWORD *)a2 = v23;
    *(_QWORD *)(a2 + 8) = v15;
    *(_QWORD *)(a2 + 16) = v22;
    *(_QWORD *)(a2 + 24) = v18;
    *(_BYTE *)(a2 + 32) = v20;
    _s7BooksUI13AnyPagedFrameVwxx_0(a1);
    swift_bridgeObjectRelease(v18);
    v21 = v15;
  }
  return swift_bridgeObjectRelease(v21);
}

unint64_t sub_A8FDC()
{
  unint64_t result;

  result = qword_2631F8;
  if (!qword_2631F8)
  {
    result = swift_getWitnessTable(&unk_1E74A8, &type metadata for ListItemMetadataTitleWithSubtitle.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2631F8);
  }
  return result;
}

unint64_t sub_A9020()
{
  unint64_t result;

  result = qword_263200;
  if (!qword_263200)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ListItemMetadata.TitleLockupSize, &type metadata for ListItemMetadata.TitleLockupSize);
    atomic_store(result, (unint64_t *)&qword_263200);
  }
  return result;
}

unint64_t sub_A9064(uint64_t a1)
{
  unint64_t result;

  result = sub_A9088();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_A9088()
{
  unint64_t result;

  result = qword_263208;
  if (!qword_263208)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ListItemMetadataTitleWithSubtitle, &type metadata for ListItemMetadataTitleWithSubtitle);
    atomic_store(result, (unint64_t *)&qword_263208);
  }
  return result;
}

unint64_t sub_A90CC(uint64_t a1)
{
  unint64_t result;

  result = sub_A90F0();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_A90F0()
{
  unint64_t result;

  result = qword_263210;
  if (!qword_263210)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ListItemMetadataTitleWithSubtitle, &type metadata for ListItemMetadataTitleWithSubtitle);
    atomic_store(result, (unint64_t *)&qword_263210);
  }
  return result;
}

uint64_t sub_A9134@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return ListItemMetadataTitleWithSubtitle.init(from:)(a1, a2);
}

unint64_t sub_A9148(uint64_t a1)
{
  unint64_t result;

  result = sub_A916C();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_A916C()
{
  unint64_t result;

  result = qword_263218;
  if (!qword_263218)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ListItemMetadataTitleWithSubtitle, &type metadata for ListItemMetadataTitleWithSubtitle);
    atomic_store(result, (unint64_t *)&qword_263218);
  }
  return result;
}

uint64_t destroy for ListItemMetadataTitleWithSubtitle(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
}

uint64_t initializeWithCopy for ListItemMetadataTitleWithSubtitle(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

uint64_t assignWithCopy for ListItemMetadataTitleWithSubtitle(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

uint64_t assignWithTake for ListItemMetadataTitleWithSubtitle(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for ListItemMetadataTitleWithSubtitle(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 33))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ListItemMetadataTitleWithSubtitle(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 33) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ListItemMetadataTitleWithSubtitle()
{
  return &type metadata for ListItemMetadataTitleWithSubtitle;
}

uint64_t storeEnumTagSinglePayload for ListItemMetadataTitleWithSubtitle.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_A93C4 + 4 * byte_1E7325[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_A93F8 + 4 * byte_1E7320[v4]))();
}

uint64_t sub_A93F8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_A9400(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0xA9408);
  return result;
}

uint64_t sub_A9414(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0xA941CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_A9420(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_A9428(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ListItemMetadataTitleWithSubtitle.CodingKeys()
{
  return &type metadata for ListItemMetadataTitleWithSubtitle.CodingKeys;
}

unint64_t sub_A9448()
{
  unint64_t result;

  result = qword_263220;
  if (!qword_263220)
  {
    result = swift_getWitnessTable(&unk_1E7480, &type metadata for ListItemMetadataTitleWithSubtitle.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_263220);
  }
  return result;
}

unint64_t sub_A9490()
{
  unint64_t result;

  result = qword_263228;
  if (!qword_263228)
  {
    result = swift_getWitnessTable(&unk_1E73F0, &type metadata for ListItemMetadataTitleWithSubtitle.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_263228);
  }
  return result;
}

unint64_t sub_A94D8()
{
  unint64_t result;

  result = qword_263230;
  if (!qword_263230)
  {
    result = swift_getWitnessTable(&unk_1E7418, &type metadata for ListItemMetadataTitleWithSubtitle.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_263230);
  }
  return result;
}

uint64_t sub_A951C(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  char v8;

  if (a1 == 0x656C746974 && a2 == 0xE500000000000000)
  {
    v5 = 0xE500000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656C746974, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x656C746974627573 && a2 == 0xE800000000000000)
  {
    v7 = 0xE800000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656C746974627573, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 1702521203 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease(0xE400000000000000);
    return 2;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(1702521203, 0xE400000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

void SeriesHeaderCoverStackLayout.init(covers:pageWidth:heroWidthScale:)(uint64_t a1@<X0>, char *a2@<X1>, char **a3@<X8>, double a4@<D0>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  double *v13;
  uint64_t v14;
  double v15;
  double v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  double v37;
  double v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  char *v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  char **v57;
  uint64_t v58;
  uint64_t *v59;
  char **v60;
  __int128 *v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  _BYTE v65[32];
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  uint64_t v76;
  _BYTE v77[88];
  uint64_t v78;
  _OWORD v79[11];
  __int128 v80;
  __int128 v81;
  __int128 v82;
  uint64_t v83;
  unint64_t v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  uint64_t v95;

  v7 = *a2;
  if (*(_QWORD *)(a1 + 16) >= 5uLL)
    v8 = 5;
  else
    v8 = *(_QWORD *)(a1 + 16);
  v9 = type metadata accessor for __ContiguousArrayStorageBase(0);
  v10 = swift_unknownObjectRetain_n(a1, 2);
  v11 = (_QWORD *)swift_dynamicCastClass(v10, v9);
  if (!v11)
  {
    swift_bridgeObjectRelease(a1);
    v11 = &_swiftEmptyArrayStorage;
  }
  v12 = v11[2];
  swift_release(v11);
  if (v12 == v8)
  {
    v13 = (double *)swift_dynamicCastClass(a1, v9);
    if (!v13)
    {
      swift_bridgeObjectRelease(a1);
      v13 = (double *)&_swiftEmptyArrayStorage;
    }
  }
  else
  {
    swift_bridgeObjectRelease(a1);
    v13 = (double *)sub_AB588(a1, a1 + 32, 0, (2 * v8) | 1);
  }
  swift_bridgeObjectRelease(a1);
  if (*((_QWORD *)v13 + 2))
  {
    v59 = &v58;
    v60 = a3;
    v14 = (uint64_t)(v13 + 4);
    v15 = v13[15];
    v16 = dbl_1E7690[v7] * a4;
    v17 = *((_QWORD *)v13 + 2);
    swift_retain(v13);
    if (v17)
    {
      v18 = 0;
      v61 = &v66;
      v19 = (char *)&_swiftEmptyArrayStorage;
      v62 = xmmword_1E7500;
      v20 = (uint64_t)(v13 + 4);
      do
      {
        sub_51C90(v20, (uint64_t)v79 + 8);
        v84 = v18;
        v93 = *(_OWORD *)((char *)&v79[8] + 8);
        v94 = *(_OWORD *)((char *)&v79[9] + 8);
        v95 = *((_QWORD *)&v79[10] + 1);
        v89 = *(_OWORD *)((char *)&v79[4] + 8);
        v90 = *(_OWORD *)((char *)&v79[5] + 8);
        v91 = *(_OWORD *)((char *)&v79[6] + 8);
        v92 = *(_OWORD *)((char *)&v79[7] + 8);
        v85 = *(_OWORD *)((char *)v79 + 8);
        v86 = *(_OWORD *)((char *)&v79[1] + 8);
        v87 = *(_OWORD *)((char *)&v79[2] + 8);
        v88 = *(_OWORD *)((char *)&v79[3] + 8);
        sub_51C90((uint64_t)&v85, (uint64_t)v77);
        v21 = *((_QWORD *)v13 + 2);
        *(_OWORD *)&v65[8] = v62;
        *(_QWORD *)&v65[24] = 0x3FE4834834834834;
        if (v18 > 4)
        {
          sub_22488((uint64_t)v77);
          memset(v79, 0, sizeof(v79));
          v80 = 0u;
          v81 = 0u;
          v82 = 0u;
          v83 = 0;
        }
        else
        {
          LOBYTE(v63) = v18;
          sub_51C90((uint64_t)v77, (uint64_t)v61);
          v22 = v78;
          sub_22488((uint64_t)v77);
          *((_QWORD *)&v63 + 1) = v22;
          *(double *)&v64 = v15;
          *((double *)&v64 + 1) = v16;
          *(_QWORD *)v65 = v21;
          sub_AB718((uint64_t)&v63, (uint64_t)v79);
          sub_AB754((uint64_t)&v63);
        }
        sub_B414((uint64_t)&v84, &qword_263238);
        if (*((_QWORD *)&v79[10] + 1))
        {
          v74 = v81;
          v75 = v82;
          v76 = v83;
          v70 = v79[8];
          v71 = v79[9];
          v72 = v79[10];
          v73 = v80;
          v66 = v79[4];
          v67 = v79[5];
          v68 = v79[6];
          v69 = v79[7];
          v63 = v79[0];
          v64 = v79[1];
          *(_OWORD *)v65 = v79[2];
          *(_OWORD *)&v65[16] = v79[3];
          if ((swift_isUniquelyReferenced_nonNull_native(v19) & 1) == 0)
            v19 = sub_AAA34(0, *((_QWORD *)v19 + 2) + 1, 1, v19);
          v24 = *((_QWORD *)v19 + 2);
          v23 = *((_QWORD *)v19 + 3);
          if (v24 >= v23 >> 1)
            v19 = sub_AAA34((char *)(v23 > 1), v24 + 1, 1, v19);
          *((_QWORD *)v19 + 2) = v24 + 1;
          v25 = &v19[232 * v24];
          v26 = v63;
          v27 = *(_OWORD *)v65;
          *((_OWORD *)v25 + 3) = v64;
          *((_OWORD *)v25 + 4) = v27;
          *((_OWORD *)v25 + 2) = v26;
          v28 = *(_OWORD *)&v65[16];
          v29 = v66;
          v30 = v68;
          *((_OWORD *)v25 + 7) = v67;
          *((_OWORD *)v25 + 8) = v30;
          *((_OWORD *)v25 + 5) = v28;
          *((_OWORD *)v25 + 6) = v29;
          v31 = v69;
          v32 = v70;
          v33 = v72;
          *((_OWORD *)v25 + 11) = v71;
          *((_OWORD *)v25 + 12) = v33;
          *((_OWORD *)v25 + 9) = v31;
          *((_OWORD *)v25 + 10) = v32;
          v34 = v73;
          v35 = v74;
          v36 = v75;
          *((_QWORD *)v25 + 32) = v76;
          *((_OWORD *)v25 + 14) = v35;
          *((_OWORD *)v25 + 15) = v36;
          *((_OWORD *)v25 + 13) = v34;
        }
        else
        {
          sub_B414((uint64_t)v79, &qword_263240);
        }
        ++v18;
        v20 += 168;
      }
      while (v17 != v18);
    }
    else
    {
      v19 = (char *)&_swiftEmptyArrayStorage;
    }
    swift_release(v13);
    v37 = v15 * v16 + sub_ABA10((uint64_t)v19);
    v38 = v37 + sub_ABAFC((uint64_t)v19);
    if (v38 <= a4)
    {
      swift_release(v13);
    }
    else
    {
      swift_bridgeObjectRelease(v19);
      v59 = &v58;
      v16 = v16 * (a4 / v38);
      v39 = *((_QWORD *)v13 + 2);
      swift_retain(v13);
      if (v39)
      {
        v40 = 0;
        v61 = &v66;
        v19 = (char *)&_swiftEmptyArrayStorage;
        v62 = xmmword_1E7500;
        do
        {
          sub_51C90(v14, (uint64_t)v79 + 8);
          v84 = v40;
          v93 = *(_OWORD *)((char *)&v79[8] + 8);
          v94 = *(_OWORD *)((char *)&v79[9] + 8);
          v95 = *((_QWORD *)&v79[10] + 1);
          v89 = *(_OWORD *)((char *)&v79[4] + 8);
          v90 = *(_OWORD *)((char *)&v79[5] + 8);
          v91 = *(_OWORD *)((char *)&v79[6] + 8);
          v92 = *(_OWORD *)((char *)&v79[7] + 8);
          v85 = *(_OWORD *)((char *)v79 + 8);
          v86 = *(_OWORD *)((char *)&v79[1] + 8);
          v87 = *(_OWORD *)((char *)&v79[2] + 8);
          v88 = *(_OWORD *)((char *)&v79[3] + 8);
          sub_51C90((uint64_t)&v85, (uint64_t)v77);
          v41 = *((_QWORD *)v13 + 2);
          *(_OWORD *)&v65[8] = v62;
          *(_QWORD *)&v65[24] = 0x3FE4834834834834;
          if (v40 > 4)
          {
            sub_22488((uint64_t)v77);
            memset(v79, 0, sizeof(v79));
            v80 = 0u;
            v81 = 0u;
            v82 = 0u;
            v83 = 0;
          }
          else
          {
            LOBYTE(v63) = v40;
            sub_51C90((uint64_t)v77, (uint64_t)v61);
            v42 = v78;
            sub_22488((uint64_t)v77);
            *((_QWORD *)&v63 + 1) = v42;
            *(double *)&v64 = v15;
            *((double *)&v64 + 1) = v16;
            *(_QWORD *)v65 = v41;
            sub_AB718((uint64_t)&v63, (uint64_t)v79);
            sub_AB754((uint64_t)&v63);
          }
          sub_B414((uint64_t)&v84, &qword_263238);
          if (*((_QWORD *)&v79[10] + 1))
          {
            v74 = v81;
            v75 = v82;
            v76 = v83;
            v70 = v79[8];
            v71 = v79[9];
            v72 = v79[10];
            v73 = v80;
            v66 = v79[4];
            v67 = v79[5];
            v68 = v79[6];
            v69 = v79[7];
            v63 = v79[0];
            v64 = v79[1];
            *(_OWORD *)v65 = v79[2];
            *(_OWORD *)&v65[16] = v79[3];
            if ((swift_isUniquelyReferenced_nonNull_native(v19) & 1) == 0)
              v19 = sub_AAA34(0, *((_QWORD *)v19 + 2) + 1, 1, v19);
            v44 = *((_QWORD *)v19 + 2);
            v43 = *((_QWORD *)v19 + 3);
            if (v44 >= v43 >> 1)
              v19 = sub_AAA34((char *)(v43 > 1), v44 + 1, 1, v19);
            *((_QWORD *)v19 + 2) = v44 + 1;
            v45 = &v19[232 * v44];
            v46 = v63;
            v47 = *(_OWORD *)v65;
            *((_OWORD *)v45 + 3) = v64;
            *((_OWORD *)v45 + 4) = v47;
            *((_OWORD *)v45 + 2) = v46;
            v48 = *(_OWORD *)&v65[16];
            v49 = v66;
            v50 = v68;
            *((_OWORD *)v45 + 7) = v67;
            *((_OWORD *)v45 + 8) = v50;
            *((_OWORD *)v45 + 5) = v48;
            *((_OWORD *)v45 + 6) = v49;
            v51 = v69;
            v52 = v70;
            v53 = v72;
            *((_OWORD *)v45 + 11) = v71;
            *((_OWORD *)v45 + 12) = v53;
            *((_OWORD *)v45 + 9) = v51;
            *((_OWORD *)v45 + 10) = v52;
            v54 = v73;
            v55 = v74;
            v56 = v75;
            *((_QWORD *)v45 + 32) = v76;
            *((_OWORD *)v45 + 14) = v55;
            *((_OWORD *)v45 + 15) = v56;
            *((_OWORD *)v45 + 13) = v54;
          }
          else
          {
            sub_B414((uint64_t)v79, &qword_263240);
          }
          ++v40;
          v14 += 168;
        }
        while (v39 != v40);
      }
      else
      {
        v19 = (char *)&_swiftEmptyArrayStorage;
      }
      swift_release_n(v13, 2);
    }
    v57 = v60;
    *v60 = v19;
    *((double *)v57 + 1) = v16;
    *((double *)v57 + 2) = v15;
  }
  else
  {
    swift_release(v13);
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
}

void SeriesHeaderCoverStackLayout.HeroWidthScale.init(rawValue:)(char *a1@<X8>, double a2@<D0>)
{
  char v2;

  if (a2 == 0.27)
  {
    *a1 = 0;
  }
  else if (a2 == 0.51)
  {
    *a1 = 1;
  }
  else if (a2 == 0.78)
  {
    *a1 = 2;
  }
  else
  {
    if (a2 == 1.0)
      v2 = 3;
    else
      v2 = 4;
    *a1 = v2;
  }
}

double SeriesHeaderCoverStackLayout.HeroWidthScale.rawValue.getter()
{
  char *v0;

  return dbl_1E7690[*v0];
}

BOOL sub_A9D58(char *a1, char *a2)
{
  return dbl_1E7690[*a1] == dbl_1E7690[*a2];
}

Swift::Int sub_A9D7C()
{
  char *v0;

  return sub_125DFC(0, *v0);
}

void sub_A9D88()
{
  char *v0;

  Hasher._combine(_:)(qword_1E7670[*v0]);
}

Swift::Int sub_A9DBC(uint64_t a1)
{
  char *v1;

  return sub_125DFC(a1, *v1);
}

void sub_A9DC4(double *a1@<X0>, char *a2@<X8>)
{
  SeriesHeaderCoverStackLayout.HeroWidthScale.init(rawValue:)(a2, *a1);
}

double sub_A9DCC@<D0>(double *a1@<X8>)
{
  char *v1;
  double result;

  result = dbl_1E7690[*v1];
  *a1 = result;
  return result;
}

uint64_t SeriesHeaderCoverStackLayout.axIsSeries.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  _BYTE v18[64];
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v1 = *v0;
  if (*(_QWORD *)(*v0 + 16) < 2uLL)
    return 0;
  sub_AB718(v1 + 32, (uint64_t)v18);
  v2 = v20;
  v3 = v21;
  v4 = v22;
  v5 = v23;
  v6 = v24;
  v7 = v25;
  v8 = v26;
  sub_ABBF4(v20, v21, v22, v23, v24, v25, v26);
  sub_22488((uint64_t)&v19);
  if (!v3)
    return 0;
  v9 = *(_QWORD *)(v1 + 16);
  if (v9)
  {
    v10 = (uint64_t *)(v1 + 256);
    while (1)
    {
      v11 = *(v10 - 5);
      if (!v11 || v8 == 0)
        break;
      v13 = *v10;
      if (!*v10
        || ((v14 = *(v10 - 1), v14 == v7) ? (v15 = v13 == v8) : (v15 = 0),
            !v15 && (_stringCompareWithSmolCheck(_:_:expecting:)(v14, v13, v7, v8, 0) & 1) == 0))
      {
        v16 = 0;
        goto LABEL_21;
      }
      v10 += 29;
      if (!--v9)
        goto LABEL_18;
    }
    v16 = 0;
    if (v11)
      v8 = 0;
  }
  else
  {
LABEL_18:
    v16 = 1;
  }
LABEL_21:
  sub_ABC30(v2, v3, v4, v5, v6, v7, v8);
  return v16;
}

uint64_t SeriesHeaderCoverStackLayout.axLabel.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE v23[64];
  _QWORD v24[15];
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v1 = *v0;
  if (*(_QWORD *)(*v0 + 16) < 2uLL)
    return 0;
  sub_AB718(v1 + 32, (uint64_t)v23);
  v3 = v24[14];
  v2 = v25;
  v5 = v26;
  v4 = v27;
  v7 = v28;
  v6 = v29;
  v8 = v30;
  swift_bridgeObjectRetain(v1);
  sub_ABBF4(v3, v2, v5, v4, v7, v6, v8);
  sub_22488((uint64_t)v24);
  if (!v2)
  {
LABEL_21:
    swift_bridgeObjectRelease(v1);
    return 0;
  }
  v9 = *(_QWORD *)(v1 + 16);
  if (v9)
  {
    v10 = (uint64_t *)(v1 + 256);
    while (1)
    {
      if (!*(v10 - 5))
      {
LABEL_14:
        v14 = v3;
        v15 = v2;
        v16 = v5;
        v17 = v4;
        v18 = v7;
        v19 = v6;
        v20 = v8;
        goto LABEL_20;
      }
      if (!v8)
        break;
      v11 = *v10;
      if (!*v10)
        goto LABEL_14;
      v12 = *(v10 - 1);
      v13 = v12 == v6 && v11 == v8;
      if (!v13 && (_stringCompareWithSmolCheck(_:_:expecting:)(v12, v11, v6, v8, 0) & 1) == 0)
        goto LABEL_14;
      v10 += 29;
      if (!--v9)
        goto LABEL_15;
    }
    v14 = v3;
    v15 = v2;
    v16 = v5;
    v17 = v4;
    v18 = v7;
    v19 = v6;
    v20 = 0;
LABEL_20:
    sub_ABC30(v14, v15, v16, v17, v18, v19, v20);
    goto LABEL_21;
  }
LABEL_15:
  sub_ABC30(v3, v2, v5, v4, v7, v6, v8);
  swift_bridgeObjectRelease(v1);
  sub_AB718(v1 + 32, (uint64_t)v23);
  v21 = 0;
  if (v25 && v30)
  {
    v21 = v29;
    swift_bridgeObjectRetain(v30);
  }
  sub_22488((uint64_t)v24);
  return v21;
}

double SeriesHeaderCoverStackLayout.intrinsicSize.getter()
{
  double *v0;
  double v1;
  double v2;
  uint64_t v3;
  double v4;
  uint64_t v5;
  double v6;

  v1 = *v0;
  v2 = v0[1] * v0[2];
  v3 = swift_bridgeObjectRetain(*(_QWORD *)v0);
  v4 = v2 + sub_ABA10(v3);
  v5 = swift_bridgeObjectRetain(*(_QWORD *)&v1);
  v6 = sub_ABAFC(v5);
  swift_bridgeObjectRelease_n(*(_QWORD *)&v1, 2);
  return v4 + v6;
}

double SeriesHeaderCoverStackLayout.centeringOffset.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  double v3;
  double v4;

  v1 = *v0;
  v2 = swift_bridgeObjectRetain(*v0);
  v3 = sub_ABA10(v2);
  v4 = sub_ABAFC(v1);
  swift_bridgeObjectRelease(v1);
  return (v3 - v4) * 0.5;
}

BOOL static SeriesHeaderCoverStackLayout.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  double v2;
  double v3;
  double v4;
  double v5;
  char v6;
  _BOOL8 result;

  v3 = *(double *)(a1 + 8);
  v2 = *(double *)(a1 + 16);
  v5 = *(double *)(a2 + 8);
  v4 = *(double *)(a2 + 16);
  v6 = sub_AA200(*(_QWORD *)a1, *(_QWORD *)a2);
  result = 0;
  if ((v6 & 1) != 0 && v3 == v5)
    return v2 == v4;
  return result;
}

uint64_t sub_AA200(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t result;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53[8];
  double v54;
  double v55;
  double v56;
  uint64_t v57;
  double v58;
  double v59;
  double v60;
  double v61[10];
  char v62;
  double v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73[8];
  double v74;
  double v75;
  double v76;
  uint64_t v77;
  double v78;
  double v79;
  double v80;
  double v81[10];
  char v82;
  double v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 == *(_QWORD *)(a2 + 16))
  {
    if (!v2 || a1 == a2)
      return 1;
    v3 = a1 + 32;
    for (i = a2 + 32; ; i += 232)
    {
      sub_AB718(v3, (uint64_t)v73);
      sub_AB718(i, (uint64_t)v53);
      if (v73[0] != v53[0]
        || v74 != v54
        || v75 != v55
        || v76 != v56
        || v77 != v57
        || v78 != v58
        || v79 != v59
        || v80 != v60
        || (_s7BooksUI14CoverViewModelV5StyleO2eeoiySbAE_AEtFZ_0((uint64_t)v81, (uint64_t)v61) & 1) == 0
        || v81[8] != v61[8]
        || v81[9] != v61[9]
        || v82 != v62
        || v83 != v63)
      {
        break;
      }
      if ((v84 != v64 || v85 != v65) && (_stringCompareWithSmolCheck(_:_:expecting:)(v84, v85, v64, v65, 0) & 1) == 0)
        break;
      v5 = v86;
      v6 = v87;
      v7 = v88;
      v8 = v89;
      v9 = v90;
      v10 = v91;
      v11 = v92;
      v12 = v66;
      v13 = v67;
      v14 = v68;
      v15 = v69;
      v17 = v70;
      v16 = v71;
      v18 = v72;
      if (v87)
      {
        if (!v67)
        {
          v45 = v91;
          v36 = v92;
          v51 = v71;
          v52 = v72;
          v37 = v90;
          v38 = v68;
          v39 = v69;
          swift_bridgeObjectRetain(v87);
          swift_bridgeObjectRetain(v8);
          swift_bridgeObjectRetain(v36);
          v15 = v39;
          v14 = v38;
          v9 = v37;
          v16 = v51;
          v18 = v52;
          v11 = v36;
          v10 = v45;
          v13 = 0;
LABEL_45:
          v43 = v9;
          v44 = v11;
          v46 = v10;
          v50 = v14;
          v40 = v15;
          v41 = v16;
          v42 = v18;
          sub_ABBF4(v12, v13, v14, v15, v17, v16, v18);
          sub_ABC30(v5, v6, v7, v8, v43, v46, v44);
          sub_ABC30(v12, v13, v50, v40, v17, v41, v42);
          break;
        }
        if (v86 != v66 || v87 != v67)
        {
          v19 = v92;
          v48 = v89;
          v49 = v68;
          v47 = v69;
          v20 = v88;
          v21 = v70;
          v22 = v90;
          v23 = v91;
          v24 = v72;
          v25 = v71;
          v26 = _stringCompareWithSmolCheck(_:_:expecting:)(v86, v87, v66, v67, 0);
          v14 = v49;
          LODWORD(v9) = v22;
          LODWORD(v17) = v21;
          v7 = v20;
          v15 = v47;
          v8 = v48;
          v16 = v25;
          v18 = v24;
          v11 = v19;
          v10 = v23;
          if ((v26 & 1) == 0)
            break;
        }
        if (v7 == v14 && v8 == v15)
        {
          if (((v17 ^ v9) & 1) != 0)
            break;
        }
        else
        {
          v27 = v7;
          v28 = v11;
          v29 = v8;
          v30 = v17;
          v31 = v9;
          v32 = v10;
          v33 = v18;
          v34 = v16;
          if ((_stringCompareWithSmolCheck(_:_:expecting:)(v27, v29, v14, v15, 0) & 1) == 0)
            break;
          v16 = v34;
          v18 = v33;
          v11 = v28;
          v10 = v32;
          if (((v30 ^ v31) & 1) != 0)
            break;
        }
        if (v11)
        {
          if (!v18
            || (v10 != v16 || v11 != v18)
            && (_stringCompareWithSmolCheck(_:_:expecting:)(v10, v11, v16, v18, 0) & 1) == 0)
          {
            break;
          }
        }
        else if (v18)
        {
          break;
        }
      }
      else if (v67)
      {
        goto LABEL_45;
      }
      sub_AB754((uint64_t)v53);
      sub_AB754((uint64_t)v73);
      v3 += 232;
      result = 1;
      if (!--v2)
        return result;
    }
    sub_AB754((uint64_t)v53);
    sub_AB754((uint64_t)v73);
  }
  return 0;
}

uint64_t sub_AA5C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53[8];
  uint64_t v54;
  double v55;
  double v56;
  double v57;
  double v58[10];
  char v59;
  double v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70[8];
  uint64_t v71;
  double v72;
  double v73;
  double v74;
  double v75[10];
  char v76;
  double v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 == *(_QWORD *)(a2 + 16))
  {
    if (!v2 || a1 == a2)
      return 1;
    v3 = a1 + 32;
    for (i = a2 + 32; ; i += 208)
    {
      sub_AC770(v3, (uint64_t)v70);
      sub_AC770(i, (uint64_t)v53);
      if (v70[0] != v53[0]
        || v71 != v54
        || v72 != v55
        || v73 != v56
        || v74 != v57
        || (_s7BooksUI14CoverViewModelV5StyleO2eeoiySbAE_AEtFZ_0((uint64_t)v75, (uint64_t)v58) & 1) == 0
        || v75[8] != v58[8]
        || v75[9] != v58[9]
        || v76 != v59
        || v77 != v60)
      {
        break;
      }
      if ((v78 != v61 || v79 != v62) && (_stringCompareWithSmolCheck(_:_:expecting:)(v78, v79, v61, v62, 0) & 1) == 0)
        break;
      v6 = v80;
      v7 = v81;
      v8 = v82;
      v9 = v83;
      v10 = v84;
      v11 = v85;
      v12 = v86;
      v13 = v63;
      v14 = v64;
      v15 = v65;
      v16 = v66;
      v18 = v67;
      v17 = v68;
      v19 = v69;
      if (v81)
      {
        if (!v64)
        {
          v45 = v85;
          v36 = v86;
          v51 = v68;
          v52 = v69;
          v37 = v84;
          v38 = v65;
          v39 = v66;
          swift_bridgeObjectRetain(v81);
          swift_bridgeObjectRetain(v9);
          swift_bridgeObjectRetain(v36);
          v16 = v39;
          v15 = v38;
          v10 = v37;
          v17 = v51;
          v19 = v52;
          v12 = v36;
          v11 = v45;
          v14 = 0;
LABEL_41:
          v43 = v10;
          v44 = v12;
          v46 = v11;
          v50 = v15;
          v40 = v16;
          v41 = v17;
          v42 = v19;
          sub_ABBF4(v13, v14, v15, v16, v18, v17, v19);
          sub_ABC30(v6, v7, v8, v9, v43, v46, v44);
          sub_ABC30(v13, v14, v50, v40, v18, v41, v42);
          break;
        }
        if (v80 != v63 || v81 != v64)
        {
          v20 = v86;
          v48 = v83;
          v49 = v65;
          v47 = v66;
          v21 = v82;
          v22 = v67;
          v23 = v84;
          v24 = v85;
          v25 = v69;
          v26 = v68;
          v27 = _stringCompareWithSmolCheck(_:_:expecting:)(v80, v81, v63, v64, 0);
          v15 = v49;
          LODWORD(v10) = v23;
          LODWORD(v18) = v22;
          v8 = v21;
          v16 = v47;
          v9 = v48;
          v17 = v26;
          v19 = v25;
          v12 = v20;
          v11 = v24;
          if ((v27 & 1) == 0)
            break;
        }
        if (v8 == v15 && v9 == v16)
        {
          if (((v18 ^ v10) & 1) != 0)
            break;
        }
        else
        {
          v28 = v8;
          v29 = v12;
          v30 = v9;
          v31 = v18;
          v32 = v10;
          v33 = v11;
          v34 = v19;
          v35 = v17;
          if ((_stringCompareWithSmolCheck(_:_:expecting:)(v28, v30, v15, v16, 0) & 1) == 0)
            break;
          v17 = v35;
          v19 = v34;
          v12 = v29;
          v11 = v33;
          if (((v31 ^ v32) & 1) != 0)
            break;
        }
        if (v12)
        {
          if (!v19
            || (v11 != v17 || v12 != v19)
            && (_stringCompareWithSmolCheck(_:_:expecting:)(v11, v12, v17, v19, 0) & 1) == 0)
          {
            break;
          }
        }
        else if (v19)
        {
          break;
        }
      }
      else if (v64)
      {
        goto LABEL_41;
      }
      sub_AC7AC((uint64_t)v53);
      sub_AC7AC((uint64_t)v70);
      v3 += 208;
      result = 1;
      if (!--v2)
        return result;
    }
    sub_AC7AC((uint64_t)v53);
    sub_AC7AC((uint64_t)v70);
  }
  return 0;
}

uint64_t sub_AA954(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  char v10;
  uint64_t result;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *i;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;

  v2 = a1[2];
  if (v2 != a2[2])
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  v5 = a1[4];
  v6 = a1[5];
  v7 = a2[4];
  v8 = a2[5];
  v9 = v5 == v7 && v6 == v8;
  if (v9 || (v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v6, v7, v8, 0), result = 0, (v10 & 1) != 0))
  {
    v12 = v2 - 1;
    if (!v12)
      return 1;
    v13 = a1 + 7;
    for (i = a2 + 7; ; i += 2)
    {
      v15 = *(v13 - 1);
      v16 = *v13;
      v17 = *(i - 1);
      v18 = *i;
      v19 = v15 == v17 && v16 == v18;
      if (!v19 && (_stringCompareWithSmolCheck(_:_:expecting:)(v15, v16, v17, v18, 0) & 1) == 0)
        break;
      v13 += 2;
      if (!--v12)
        return 1;
    }
    return 0;
  }
  return result;
}

uint64_t sub_AAA20(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_AB004(a1, a2, a3, a4, &qword_2632A8, type metadata accessor for AverageMonthlyReadingFrameViewModel.MonthAverage);
}

char *sub_AAA34(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *((_QWORD *)a4 + 3);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *((_QWORD *)a4 + 2);
    if (v7 <= v8)
      v9 = *((_QWORD *)a4 + 2);
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_5440(&qword_2632E0);
      v11 = (char *)swift_allocObject(v10, 232 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      *((_QWORD *)v11 + 2) = v8;
      *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 232);
      v13 = v11 + 32;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[232 * v8 + 32])
          memmove(v13, a4 + 32, 232 * v8);
        *((_QWORD *)a4 + 2) = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = (char *)&_swiftEmptyArrayStorage;
      v13 = (char *)&_swiftEmptyArrayStorage + 32;
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_AB920(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

char *sub_AAB5C(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *((_QWORD *)a4 + 3);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *((_QWORD *)a4 + 2);
    if (v7 <= v8)
      v9 = *((_QWORD *)a4 + 2);
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_5440(&qword_25ED90);
      v11 = (char *)swift_allocObject(v10, 168 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      *((_QWORD *)v11 + 2) = v8;
      *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 168);
      v13 = v11 + 32;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[168 * v8 + 32])
          memmove(v13, a4 + 32, 168 * v8);
        *((_QWORD *)a4 + 2) = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = (char *)&_swiftEmptyArrayStorage;
      v13 = (char *)&_swiftEmptyArrayStorage + 32;
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_ABF94(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

char *sub_AAC88(char *a1, int64_t a2, char a3, char *a4)
{
  return sub_AB470(a1, a2, a3, a4, &qword_2632D8, &qword_262E98);
}

char *sub_AAC9C(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *((_QWORD *)a4 + 3);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *((_QWORD *)a4 + 2);
    if (v7 <= v8)
      v9 = *((_QWORD *)a4 + 2);
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_5440(&qword_25ED50);
      v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 17;
      *((_QWORD *)v11 + 2) = v8;
      *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
      v14 = v11 + 32;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = (char *)&_swiftEmptyArrayStorage;
      v14 = (char *)&_swiftEmptyArrayStorage + 32;
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[16 * v8 + 32])
          memmove(v14, a4 + 32, 16 * v8);
        *((_QWORD *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    sub_AC084(0, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_AADA8(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_5440(&qword_2632C8);
      v11 = (_QWORD *)swift_allocObject(v10, 176 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 176);
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[22 * v8 + 4])
          memmove(v13, a4 + 4, 176 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_AC264(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_AAED0(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_5440(&qword_25ED68);
      v11 = (_QWORD *)swift_allocObject(v10, 40 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 40);
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[5 * v8 + 4])
          memmove(v13, a4 + 4, 40 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_AC354(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t sub_AAFF0(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_AB004(a1, a2, a3, a4, &qword_2632C0, (uint64_t (*)(_QWORD))&type metadata accessor for PageMetrics.Instruction);
}

uint64_t sub_AB004(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t (*a6)(_QWORD))
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  size_t v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = *(_QWORD *)(a4 + 24);
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
LABEL_29:
        result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Division by zero", 16, 2, "Swift/IntegerTypes.swift", 24, 2, 14377, 0);
LABEL_31:
        __break(1u);
        return result;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = *(_QWORD *)(a4 + 16);
  if (v10 <= v11)
    v12 = *(_QWORD *)(a4 + 16);
  else
    v12 = v10;
  if (!v12)
  {
    v18 = &_swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v13 = sub_5440(a5);
  v14 = *(_QWORD *)(a6(0) - 8);
  v15 = *(_QWORD *)(v14 + 72);
  v16 = *(unsigned __int8 *)(v14 + 80);
  v17 = (v16 + 32) & ~v16;
  v18 = (_QWORD *)swift_allocObject(v13, v17 + v15 * v12, v16 | 7);
  v19 = j__malloc_size(v18);
  if (!v15)
    goto LABEL_29;
  if (v19 - v17 == 0x8000000000000000 && v15 == -1)
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Division results in an overflow", 31, 2, "Swift/IntegerTypes.swift", 24, 2, 14384, 0);
    goto LABEL_31;
  }
  v18[2] = v11;
  v18[3] = 2 * ((uint64_t)(v19 - v17) / v15);
LABEL_19:
  v21 = a6(0);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = (*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
  v24 = (unint64_t)v18 + v23;
  if ((a1 & 1) != 0)
  {
    v25 = a4 + v23;
    if ((unint64_t)v18 < a4 || v24 >= v25 + *(_QWORD *)(v22 + 72) * v11)
    {
      swift_arrayInitWithTakeFrontToBack((char *)v18 + v23, v25, v11, v21);
    }
    else if (v18 != (_QWORD *)a4)
    {
      swift_arrayInitWithTakeBackToFront((char *)v18 + v23);
    }
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_AC564(0, v11, v24, a4, a6);
  }
  swift_bridgeObjectRelease(a4);
  return (uint64_t)v18;
}

_QWORD *sub_AB210(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_5440(&qword_2632B8);
      v11 = (_QWORD *)swift_allocObject(v10, 208 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 208);
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[26 * v8 + 4])
          memmove(v13, a4 + 4, 208 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_AC174(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_AB338(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_5440(&qword_2632B0);
      v11 = (_QWORD *)swift_allocObject(v10, 24 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 24);
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[3 * v8 + 4])
          memmove(v13, a4 + 4, 24 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_AC67C(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

char *sub_AB45C(char *a1, int64_t a2, char a3, char *a4)
{
  return sub_AB470(a1, a2, a3, a4, &qword_25ED48, &qword_25DF98);
}

char *sub_AB470(char *result, int64_t a2, char a3, char *a4, uint64_t *a5, uint64_t *a6)
{
  char v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int64_t v15;
  uint64_t v16;
  char *v17;

  v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    v10 = a2;
    goto LABEL_8;
  }
  v9 = *((_QWORD *)a4 + 3);
  v10 = v9 >> 1;
  if ((uint64_t)(v9 >> 1) >= a2)
    goto LABEL_8;
  if (v10 + 0x4000000000000000 >= 0)
  {
    v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v10 = a2;
LABEL_8:
    v11 = *((_QWORD *)a4 + 2);
    if (v10 <= v11)
      v12 = *((_QWORD *)a4 + 2);
    else
      v12 = v10;
    if (v12)
    {
      v13 = sub_5440(a5);
      v14 = (char *)swift_allocObject(v13, 8 * v12 + 32, 7);
      v15 = j__malloc_size(v14);
      v16 = v15 - 32;
      if (v15 < 32)
        v16 = v15 - 25;
      *((_QWORD *)v14 + 2) = v11;
      *((_QWORD *)v14 + 3) = 2 * (v16 >> 3);
      v17 = v14 + 32;
      if ((v8 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v14 = (char *)&_swiftEmptyArrayStorage;
      v17 = (char *)&_swiftEmptyArrayStorage + 32;
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v14 != a4 || v17 >= &a4[8 * v11 + 32])
          memmove(v17, a4 + 32, 8 * v11);
        *((_QWORD *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    sub_AC460(0, v11, (unint64_t)v17, (uint64_t)a4, a6);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v14;
  }
  __break(1u);
  return result;
}

_QWORD *sub_AB588(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v8;
  _QWORD *v9;
  size_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *result;

  v4 = a4 >> 1;
  v5 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
    goto LABEL_16;
  if (!v5)
    return &_swiftEmptyArrayStorage;
  if (v5 > 0)
  {
    v8 = sub_5440(&qword_25ED90);
    v9 = (_QWORD *)swift_allocObject(v8, 168 * v5 + 32, 7);
    v10 = j__malloc_size(v9);
    v9[2] = v5;
    v9[3] = 2 * ((uint64_t)(v10 - 32) / 168);
    if (v4 != a3)
      goto LABEL_5;
    goto LABEL_15;
  }
  v9 = &_swiftEmptyArrayStorage;
  if (v4 == a3)
  {
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
LABEL_5:
  if (v5 < 0)
  {
LABEL_17:
    result = (_QWORD *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_18;
  }
  v11 = (unint64_t)(v9 + 4);
  v12 = a2 + 168 * a3;
  if (v12 >= (unint64_t)&v9[21 * v5 + 4] || v11 >= v12 + 168 * v5)
  {
    swift_arrayInitWithCopy(v11);
    return v9;
  }
  result = (_QWORD *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_18:
  __break(1u);
  return result;
}

uint64_t sub_AB718(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for SeriesHeaderCoverStackCoverLayout(a2, a1);
  return a2;
}

uint64_t sub_AB754(uint64_t a1)
{
  destroy for SeriesHeaderCoverStackCoverLayout(a1);
  return a1;
}

_QWORD *sub_AB788(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v8;
  _QWORD *v9;
  size_t v10;
  unint64_t v11;
  _QWORD *result;

  v4 = a4 >> 1;
  v5 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
    goto LABEL_16;
  if (!v5)
    return &_swiftEmptyArrayStorage;
  if (v5 > 0)
  {
    v8 = sub_5440(&qword_2632D0);
    v9 = (_QWORD *)swift_allocObject(v8, 40 * v5 + 32, 7);
    v10 = j__malloc_size(v9);
    v9[2] = v5;
    v9[3] = 2 * ((uint64_t)(v10 - 32) / 40);
    if (v4 != a3)
      goto LABEL_5;
    goto LABEL_15;
  }
  v9 = &_swiftEmptyArrayStorage;
  if (v4 == a3)
  {
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
LABEL_5:
  if (v5 < 0)
  {
LABEL_17:
    result = (_QWORD *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_18;
  }
  v11 = a2 + 40 * a3;
  if (v11 >= (unint64_t)&v9[5 * v5 + 4] || (unint64_t)(v9 + 4) >= v11 + 40 * v5)
  {
    sub_5440(&qword_262040);
    swift_arrayInitWithCopy(v9 + 4);
    return v9;
  }
  result = (_QWORD *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_18:
  __break(1u);
  return result;
}

uint64_t sub_AB920(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v5 = a4 + 232 * a1 + 32;
  v6 = a3 + 232 * v4;
  if (v5 >= v6 || v5 + 232 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v6;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

double sub_ABA10(uint64_t a1)
{
  unint64_t v1;
  double v2;
  double v3;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1 <= 1)
  {
    v19 = 0;
    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    v13 = 0u;
    v14 = 0u;
    v11 = 0u;
    v12 = 0u;
    v9 = 0u;
    v10 = 0u;
    v7 = 0u;
    v8 = 0u;
    v5 = 0u;
    v6 = 0u;
    goto LABEL_7;
  }
  sub_AB718(a1 + 232 * (v1 & 0x7FFFFFFFFFFFFFFELL) - 200, (uint64_t)&v5);
  if (!*((_QWORD *)&v15 + 1))
  {
LABEL_7:
    sub_B414((uint64_t)&v5, &qword_263240);
    return 0.0;
  }
  v2 = *((double *)&v6 + 1) * *((double *)&v8 + 1);
  if (v5 - 1 < 2)
  {
    v3 = v2 * 0.25;
  }
  else if (v5 - 3 >= 2)
  {
    v3 = 0.0;
  }
  else
  {
    v3 = v2 * 0.45;
  }
  sub_AB754((uint64_t)&v5);
  return v3;
}

double sub_ABAFC(uint64_t a1)
{
  unint64_t v1;
  double v2;
  double v3;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1 <= ((v1 & 1) == 0))
  {
    v19 = 0;
    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    v13 = 0u;
    v14 = 0u;
    v11 = 0u;
    v12 = 0u;
    v9 = 0u;
    v10 = 0u;
    v7 = 0u;
    v8 = 0u;
    v5 = 0u;
    v6 = 0u;
    goto LABEL_7;
  }
  sub_AB718(a1 + 232 * ((v1 | 0xFFFFFFFFFFFFFFFELL) + v1) + 32, (uint64_t)&v5);
  if (!*((_QWORD *)&v15 + 1))
  {
LABEL_7:
    sub_B414((uint64_t)&v5, &qword_263240);
    return 0.0;
  }
  v2 = *((double *)&v6 + 1) * *((double *)&v8 + 1);
  if (v5 - 1 < 2)
  {
    v3 = v2 * 0.25;
  }
  else if (v5 - 3 >= 2)
  {
    v3 = 0.0;
  }
  else
  {
    v3 = v2 * 0.45;
  }
  sub_AB754((uint64_t)&v5);
  return v3;
}

uint64_t sub_ABBF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRetain(a7);
    swift_bridgeObjectRetain(a2);
    return swift_bridgeObjectRetain(a4);
  }
  return result;
}

uint64_t sub_ABC30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(a4);
    return swift_bridgeObjectRelease(a7);
  }
  return result;
}

unint64_t sub_ABC70()
{
  unint64_t result;

  result = qword_263248;
  if (!qword_263248)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for SeriesHeaderCoverStackLayout.HeroWidthScale, &type metadata for SeriesHeaderCoverStackLayout.HeroWidthScale);
    atomic_store(result, (unint64_t *)&qword_263248);
  }
  return result;
}

unint64_t sub_ABCB8()
{
  unint64_t result;

  result = qword_263250;
  if (!qword_263250)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for SeriesHeaderCoverStackCoverLayout, &type metadata for SeriesHeaderCoverStackCoverLayout);
    atomic_store(result, (unint64_t *)&qword_263250);
  }
  return result;
}

unint64_t sub_ABCFC(uint64_t a1)
{
  unint64_t result;

  result = sub_ABD20();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_ABD20()
{
  unint64_t result;

  result = qword_2632A0;
  if (!qword_2632A0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for SeriesHeaderCoverStackLayout, &type metadata for SeriesHeaderCoverStackLayout);
    atomic_store(result, (unint64_t *)&qword_2632A0);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for SeriesHeaderCoverStackLayout(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a2;
  *(_QWORD *)a1 = *a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 1);
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t destroy for SeriesHeaderCoverStackLayout(_QWORD *a1)
{
  return swift_bridgeObjectRelease(*a1);
}

uint64_t *assignWithCopy for SeriesHeaderCoverStackLayout(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[1] = a2[1];
  a1[2] = a2[2];
  return a1;
}

uint64_t *assignWithTake for SeriesHeaderCoverStackLayout(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v4);
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
  return a1;
}

uint64_t getEnumTagSinglePayload for SeriesHeaderCoverStackLayout(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SeriesHeaderCoverStackLayout(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SeriesHeaderCoverStackLayout()
{
  return &type metadata for SeriesHeaderCoverStackLayout;
}

uint64_t storeEnumTagSinglePayload for SeriesHeaderCoverStackLayout.HeroWidthScale(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_ABF14 + 4 * byte_1E7535[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_ABF48 + 4 * byte_1E7530[v4]))();
}

uint64_t sub_ABF48(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_ABF50(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0xABF58);
  return result;
}

uint64_t sub_ABF64(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0xABF6CLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_ABF70(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_ABF78(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SeriesHeaderCoverStackLayout.HeroWidthScale()
{
  return &type metadata for SeriesHeaderCoverStackLayout.HeroWidthScale;
}

uint64_t sub_ABF94(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v5 = a4 + 168 * a1 + 32;
  v6 = a3 + 168 * v4;
  if (v5 >= v6 || v5 + 168 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v6;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_AC084(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy(a3);
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_AC174(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v5 = a4 + 208 * a1 + 32;
  v6 = a3 + 208 * v4;
  if (v5 >= v6 || v5 + 208 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v6;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_AC264(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v5 = a4 + 176 * a1 + 32;
  v6 = a3 + 176 * v4;
  if (v5 >= v6 || v5 + 176 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v6;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_AC354(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v6 = a4 + 40 * a1 + 32;
  v7 = a3 + 40 * v4;
  if (v6 >= v7 || v6 + 40 * v4 <= a3)
  {
    sub_5440(&qword_25E848);
    swift_arrayInitWithCopy(a3);
    return v7;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_AC460(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  unint64_t v7;
  unint64_t v8;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v5 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v7 = a4 + 8 * a1 + 32;
    v8 = a3 + 8 * v5;
    if (v7 >= v8 || v7 + 8 * v5 <= a3)
    {
      sub_5440(a5);
      swift_arrayInitWithCopy(a3);
      return v8;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_AC564(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v5 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v9 = *(_QWORD *)(a5(0) - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = *(_QWORD *)(v9 + 72);
  v12 = a4 + ((v10 + 32) & ~v10) + v11 * a1;
  v13 = v11 * v5;
  v14 = a3 + v13;
  v15 = v12 + v13;
  if (v12 >= v14 || v15 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v14;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_AC67C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v5 = a4 + 24 * a1 + 32;
  v6 = a3 + 24 * v4;
  if (v5 >= v6 || v5 + 24 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v6;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_AC770(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for SeriesCardCoverStackCoverLayout(a2, a1);
  return a2;
}

uint64_t sub_AC7AC(uint64_t a1)
{
  destroy for SeriesCardCoverStackCoverLayout(a1);
  return a1;
}

uint64_t sub_AC7E4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    v4 = 0;
    v5 = (uint64_t *)(a1 + 32);
    do
    {
      v7 = *v5++;
      v6 = v7;
      if ((v7 & ~v4) == 0)
        v6 = 0;
      v4 |= v6;
      --v3;
    }
    while (v3);
  }
  else
  {
    v4 = 0;
  }
  result = swift_bridgeObjectRelease(a1);
  *a2 = v4;
  return result;
}

void static ListItemViewModel.perfHacks.getter(_QWORD *a1@<X8>)
{
  id v2;
  NSString v3;
  id v4;

  if (qword_25DC10 != -1)
    swift_once(&qword_25DC10, sub_AD7D8);
  if (byte_2632E8 == 1)
  {
    v2 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
    v3 = String._bridgeToObjectiveC()();
    v4 = objc_msgSend(v2, "integerForKey:", v3);

  }
  else
  {
    v4 = 0;
  }
  *a1 = v4;
}

__n128 ListItemViewModel.init(layout:number:thumbnailModel:metadataModel:accessoryModel:assetInfo:cardInfo:origin:)@<Q0>(void *__src@<X4>, char *a2@<X0>, uint64_t a3@<X1>, char a4@<W2>, __int128 *a5@<X3>, uint64_t a6@<X5>, __int128 *a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __n128 result;
  __int128 v24;

  v14 = a9 + 376;
  *(_OWORD *)(a9 + 376) = 0u;
  *(_OWORD *)(a9 + 392) = 0u;
  v15 = *a5;
  *(_OWORD *)(a9 + 40) = a5[1];
  v16 = a5[3];
  *(_OWORD *)(a9 + 56) = a5[2];
  *(_OWORD *)(a9 + 72) = v16;
  v17 = *a2;
  *(_QWORD *)(a9 + 408) = 0;
  *(_BYTE *)a9 = v17;
  *(_QWORD *)(a9 + 8) = a3;
  *(_BYTE *)(a9 + 16) = a4 & 1;
  *(_WORD *)(a9 + 88) = *((_WORD *)a5 + 32);
  *(_OWORD *)(a9 + 24) = v15;
  memcpy((void *)(a9 + 96), __src, 0x118uLL);
  sub_6B2A0(a6, v14);
  sub_AC68(a7, a9 + 416);
  v18 = type metadata accessor for ListItemViewModel(0);
  sub_167A4(a8, a9 + *(int *)(v18 + 40), &qword_2618C8);
  v19 = a9 + *(int *)(v18 + 44);
  v20 = *(_OWORD *)(a10 + 112);
  *(_OWORD *)(v19 + 96) = *(_OWORD *)(a10 + 96);
  *(_OWORD *)(v19 + 112) = v20;
  *(_OWORD *)(v19 + 128) = *(_OWORD *)(a10 + 128);
  *(_BYTE *)(v19 + 144) = *(_BYTE *)(a10 + 144);
  v21 = *(_OWORD *)(a10 + 48);
  *(_OWORD *)(v19 + 32) = *(_OWORD *)(a10 + 32);
  *(_OWORD *)(v19 + 48) = v21;
  v22 = *(_OWORD *)(a10 + 80);
  *(_OWORD *)(v19 + 64) = *(_OWORD *)(a10 + 64);
  *(_OWORD *)(v19 + 80) = v22;
  result = *(__n128 *)a10;
  v24 = *(_OWORD *)(a10 + 16);
  *(_OWORD *)v19 = *(_OWORD *)a10;
  *(_OWORD *)(v19 + 16) = v24;
  return result;
}

uint64_t sub_ACA08()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x656E6961746E6F63;
  if (*v0 != 1)
    v1 = 1819042164;
  if (*v0)
    return v1;
  else
    return 0x72616C75676572;
}

uint64_t sub_ACA60@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_B0F10(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_ACA84(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_AD8B8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_ACAAC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_AD8B8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t static DecodeDefault.Providers.EmptyString.defaultValue.getter()
{
  return 0;
}

void sub_ACAE0(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_ACAEC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_AD940();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_ACB14(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_AD940();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_ACB3C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_AD984();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_ACB64(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_AD984();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_ACB8C@<X0>(uint64_t a1@<X1>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = swift_bridgeObjectRelease(a1);
  *a2 = 1;
  return result;
}

uint64_t sub_ACBB8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_AD8FC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_ACBE0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_AD8FC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t ListItemViewModel.Layout.init(from:)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  unint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _BYTE *v47;
  char *v48;
  char *v49;
  _QWORD *v50;
  char v51;
  char v52;
  char v53;

  v47 = a2;
  v46 = sub_5440(&qword_2632F0);
  v43 = *(_QWORD *)(v46 - 8);
  __chkstk_darwin(v46);
  v49 = (char *)&v39 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_5440(&qword_2632F8);
  v44 = *(_QWORD *)(v4 - 8);
  v45 = v4;
  __chkstk_darwin(v4);
  v48 = (char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = sub_5440(&qword_263300);
  v6 = *(_QWORD *)(v42 - 8);
  __chkstk_darwin(v42);
  v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_5440(&qword_263308);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = a1[3];
  v14 = a1[4];
  sub_5480(a1, v13);
  v15 = sub_AD8B8();
  v16 = v50;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ListItemViewModel.Layout.CodingKeys, &type metadata for ListItemViewModel.Layout.CodingKeys, v15, v13, v14);
  if (v16)
    goto LABEL_7;
  v40 = v6;
  v41 = v10;
  v17 = v48;
  v18 = v49;
  v50 = a1;
  v19 = v12;
  v20 = KeyedDecodingContainer.allKeys.getter(v9);
  v21 = v20;
  v22 = v9;
  if (*(_QWORD *)(v20 + 16) != 1)
  {
    v28 = type metadata accessor for DecodingError(0);
    swift_allocError(v28, &protocol witness table for DecodingError, 0, 0);
    v30 = v29;
    sub_5440(&qword_25F8F8);
    *v30 = &type metadata for ListItemViewModel.Layout;
    v31 = KeyedDecodingContainer.codingPath.getter(v9);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)(v31, 0xD00000000000002BLL, 0x80000000001FB7C0, 0);
    v32 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v28 - 8) + 104))(v30, enum case for DecodingError.typeMismatch(_:), v28);
    swift_willThrow(v32);
    swift_bridgeObjectRelease(v21);
    (*(void (**)(char *, uint64_t))(v41 + 8))(v19, v9);
    a1 = v50;
LABEL_7:
    v33 = a1;
    return _s7BooksUI13AnyPagedFrameVwxx_0(v33);
  }
  v23 = *(unsigned __int8 *)(v20 + 32);
  if (*(_BYTE *)(v20 + 32))
  {
    if (v23 == 1)
    {
      v52 = 1;
      v24 = sub_AD940();
      v25 = v9;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for ListItemViewModel.Layout.ContainedCodingKeys, &v52, v9, &type metadata for ListItemViewModel.Layout.ContainedCodingKeys, v24);
      v26 = v47;
      v27 = v41;
      (*(void (**)(char *, uint64_t))(v44 + 8))(v17, v45);
      swift_bridgeObjectRelease(v21);
      (*(void (**)(char *, uint64_t))(v27 + 8))(v19, v25);
    }
    else
    {
      v53 = 2;
      v36 = sub_AD8FC();
      v37 = v18;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for ListItemViewModel.Layout.TallCodingKeys, &v53, v22, &type metadata for ListItemViewModel.Layout.TallCodingKeys, v36);
      v26 = v47;
      v38 = v41;
      (*(void (**)(char *, uint64_t))(v43 + 8))(v37, v46);
      swift_bridgeObjectRelease(v21);
      (*(void (**)(char *, uint64_t))(v38 + 8))(v19, v22);
    }
  }
  else
  {
    v51 = 0;
    v35 = sub_AD984();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for ListItemViewModel.Layout.RegularCodingKeys, &v51, v9, &type metadata for ListItemViewModel.Layout.RegularCodingKeys, v35);
    (*(void (**)(char *, uint64_t))(v40 + 8))(v8, v42);
    swift_bridgeObjectRelease(v21);
    (*(void (**)(char *, uint64_t))(v41 + 8))(v19, v9);
    v26 = v47;
  }
  *v26 = v23;
  v33 = v50;
  return _s7BooksUI13AnyPagedFrameVwxx_0(v33);
}

uint64_t sub_AD04C@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return ListItemViewModel.Layout.init(from:)(a1, a2);
}

void ShelfGridPaddleButtonView.direction.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

_BYTE *ListItemViewModel.layout.setter(_BYTE *result)
{
  _BYTE *v1;

  *v1 = *result;
  return result;
}

uint64_t ListItemViewModel.number.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t ListItemViewModel.number.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 8) = result;
  *(_BYTE *)(v2 + 16) = a2 & 1;
  return result;
}

uint64_t (*ListItemViewModel.number.modify())()
{
  return KeyedEncodingContainer.encode<A>(_:forKey:);
}

uint64_t ListItemViewModel.thumbnailModel.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_2F4C8(v1 + 24, a1);
}

uint64_t ListItemViewModel.thumbnailModel.setter(uint64_t a1)
{
  uint64_t v1;

  return sub_AD9C8(a1, v1 + 24);
}

uint64_t (*ListItemViewModel.thumbnailModel.modify())()
{
  return KeyedEncodingContainer.encode<A>(_:forKey:);
}

uint64_t ListItemViewModel.metadataModel.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_ADA04(v1 + 96, a1);
}

uint64_t ListItemViewModel.metadataModel.setter(uint64_t a1)
{
  uint64_t v1;

  return sub_ADA40(a1, v1 + 96);
}

uint64_t ListItemViewModel.accessoryModel.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_B3D0(v1 + 376, a1, &qword_2618D8);
}

uint64_t ListItemViewModel.accessoryModel.setter(uint64_t a1)
{
  uint64_t v1;

  return sub_6B2A0(a1, v1 + 376);
}

uint64_t (*ListItemViewModel.accessoryModel.modify())()
{
  return KeyedEncodingContainer.encode<A>(_:forKey:);
}

uint64_t ListItemViewModel.assetInfo.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_BD00(v1 + 416, a1);
}

uint64_t ListItemViewModel.cardInfo.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for ListItemViewModel(0);
  return sub_B3D0(v1 + *(int *)(v3 + 40), a1, &qword_2618C8);
}

_QWORD *ListItemViewModel.origin.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _OWORD v16[2];
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  char v24;

  v3 = v1 + *(int *)(type metadata accessor for ListItemViewModel(0) + 44);
  v4 = *(_OWORD *)(v3 + 112);
  v5 = *(_OWORD *)(v3 + 80);
  v21 = *(_OWORD *)(v3 + 96);
  v22 = v4;
  v6 = *(_OWORD *)(v3 + 112);
  v23 = *(_OWORD *)(v3 + 128);
  v7 = *(_OWORD *)(v3 + 48);
  v9 = *(_OWORD *)(v3 + 16);
  v17 = *(_OWORD *)(v3 + 32);
  v8 = v17;
  v18 = v7;
  v10 = *(_OWORD *)(v3 + 48);
  v11 = *(_OWORD *)(v3 + 80);
  v19 = *(_OWORD *)(v3 + 64);
  v12 = v19;
  v20 = v11;
  v13 = *(_OWORD *)(v3 + 16);
  v16[0] = *(_OWORD *)v3;
  v14 = v16[0];
  v16[1] = v13;
  *(_OWORD *)(a1 + 96) = v21;
  *(_OWORD *)(a1 + 112) = v6;
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(v3 + 128);
  *(_OWORD *)(a1 + 32) = v8;
  *(_OWORD *)(a1 + 48) = v10;
  *(_OWORD *)(a1 + 64) = v12;
  *(_OWORD *)(a1 + 80) = v5;
  v24 = *(_BYTE *)(v3 + 144);
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(v3 + 144);
  *(_OWORD *)a1 = v14;
  *(_OWORD *)(a1 + 16) = v9;
  return sub_5D30(v16);
}

uint64_t ListItemViewModel.assetID.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[55];
  v2 = v0[56];
  sub_5480(v0 + 52, v1);
  return ContentInfo.id.getter(v1, *(_QWORD *)(v2 + 8));
}

uint64_t ListItemViewModel.title.getter()
{
  return sub_AD254((uint64_t (*)(uint64_t, uint64_t))&AssetInfo.title.getter);
}

uint64_t ListItemViewModel.author.getter()
{
  return sub_AD254((uint64_t (*)(uint64_t, uint64_t))&AssetInfo.author.getter);
}

uint64_t sub_AD254(uint64_t (*a1)(uint64_t, uint64_t))
{
  _QWORD *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = v1 + 52;
  v5 = v1[55];
  v4 = v1[56];
  sub_5480(v3, v5);
  return a1(v5, v4);
}

uint64_t ListItemViewModel.isAudiobook.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE v9[40];

  v1 = sub_5440(&qword_262038);
  __chkstk_darwin(v1);
  v3 = &v9[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  sub_BD00(v0 + 416, (uint64_t)v9);
  v4 = sub_5440(&qword_262040);
  v5 = type metadata accessor for AudiobookInfo(0);
  v6 = swift_dynamicCast(v3, v9, v4, v5, 6);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v3, v6 ^ 1, 1, v5);
  sub_B414((uint64_t)v3, &qword_262038);
  return v6;
}

uint64_t ListItemViewModel.isSG.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t (*v8)(_BYTE *, uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  char v10;
  _BYTE v13[40];

  v1 = sub_5440(&qword_262038);
  __chkstk_darwin(v1);
  v3 = &v13[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  sub_BD00(v0 + 416, (uint64_t)v13);
  v4 = sub_5440(&qword_262040);
  v5 = type metadata accessor for AudiobookInfo(0);
  v6 = swift_dynamicCast(v3, v13, v4, v5, 6);
  v7 = *(_QWORD *)(v5 - 8);
  v8 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v7 + 56);
  if (v6)
  {
    v9 = v8(v3, 0, 1, v5);
    v10 = AudiobookInfo.isSG.getter(v9);
    (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(v3, v5);
  }
  else
  {
    v8(v3, 1, 1, v5);
    sub_B414((uint64_t)v3, &qword_262038);
    v10 = 0;
  }
  return v10 & 1;
}

uint64_t ListItemViewModel.isPurchased.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t AssociatedConformanceWitness;
  _QWORD v14[5];

  v1 = v0[55];
  v2 = v0[56];
  sub_5480(v0 + 52, v1);
  v3 = *(_QWORD *)(v2 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v3, v1, &protocol requirements base descriptor for ContentInfo, &associated type descriptor for ContentInfo.LibraryType);
  v5 = type metadata accessor for Optional(0, AssociatedTypeWitness);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v14[-1] - v7;
  ContentInfo.libraryData.getter(v1, v3);
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v8, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    return 2;
  }
  else
  {
    v14[3] = AssociatedTypeWitness;
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v2, v1, AssociatedTypeWitness, &protocol requirements base descriptor for AssetInfo, &associated conformance descriptor for AssetInfo.ContentInfo.LibraryType: LibraryAssetInfo);
    v14[4] = AssociatedConformanceWitness;
    sub_C404(v14);
    (*(void (**)(void))(v9 + 32))();
    v10 = dispatch thunk of LibraryAssetInfo.isPurchased.getter(AssociatedTypeWitness, AssociatedConformanceWitness) & 1;
    _s7BooksUI13AnyPagedFrameVwxx_0(v14);
  }
  return v10;
}

uint64_t ShelfGridItemColumnSpan.Context.offset.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

void static ListItemViewModel.PerfHacks.hideBuyButton.getter(_QWORD *a1@<X8>)
{
  *a1 = 1;
}

void static ListItemViewModel.PerfHacks.hideDetails.getter(_QWORD *a1@<X8>)
{
  *a1 = 2;
}

void static ListItemViewModel.PerfHacks.hideCover.getter(_QWORD *a1@<X8>)
{
  *a1 = 4;
}

void static ListItemViewModel.PerfHacks.ignoreCoverImage.getter(_QWORD *a1@<X8>)
{
  *a1 = 8;
}

void static ListItemViewModel.PerfHacks.hideDetailsRatingData.getter(_QWORD *a1@<X8>)
{
  *a1 = 16;
}

void static ListItemViewModel.PerfHacks.ignoreAssetState.getter(_QWORD *a1@<X8>)
{
  *a1 = 32;
}

void static ListItemViewModel.PerfHacks.skipCacheGeometry.getter(_QWORD *a1@<X8>)
{
  *a1 = 64;
}

void static ListItemViewModel.PerfHacks.disableSwiftUIList.getter(_QWORD *a1@<X8>)
{
  *a1 = 128;
}

_QWORD *sub_AD644@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

_QWORD *sub_AD650@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 | *result;
  return result;
}

_QWORD *sub_AD664@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 & *result;
  return result;
}

_QWORD *sub_AD678@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 ^ *result;
  return result;
}

BOOL sub_AD68C(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = *v2 & *a2;
  if (v4 != *a2)
    *v2 |= v3;
  *a1 = v3;
  return v4 != v3;
}

_QWORD *sub_AD6BC@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;

  v3 = *v2 & *result;
  if (v3)
    *v2 &= ~*result;
  *(_QWORD *)a2 = v3;
  *(_BYTE *)(a2 + 8) = v3 == 0;
  return result;
}

uint64_t *sub_AD6E8@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *result;
  v4 = *v2;
  *v2 |= *result;
  v5 = v4 & v3;
  *(_QWORD *)a2 = v5;
  *(_BYTE *)(a2 + 8) = v5 == 0;
  return result;
}

_QWORD *sub_AD70C(_QWORD *result)
{
  _QWORD *v1;

  *v1 |= *result;
  return result;
}

_QWORD *sub_AD720(_QWORD *result)
{
  _QWORD *v1;

  *v1 &= *result;
  return result;
}

_QWORD *sub_AD734(_QWORD *result)
{
  _QWORD *v1;

  *v1 ^= *result;
  return result;
}

_QWORD *sub_AD748@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_AD75C(_QWORD *a1)
{
  _QWORD *v1;

  return (*v1 & ~*a1) == 0;
}

BOOL sub_AD770(_QWORD *a1)
{
  _QWORD *v1;

  return (*v1 & *a1) == 0;
}

BOOL sub_AD784(_QWORD *a1)
{
  _QWORD *v1;

  return (*a1 & ~*v1) == 0;
}

BOOL sub_AD798()
{
  _QWORD *v0;

  return *v0 == 0;
}

uint64_t sub_AD7A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return SetAlgebra.init<A>(_:)(a1, a4, a2, a5, a3);
}

_QWORD *sub_AD7C0(_QWORD *result)
{
  _QWORD *v1;

  *v1 &= ~*result;
  return result;
}

void sub_AD7D8()
{
  id v0;
  NSString v1;
  id v2;
  BOOL v3;

  if ((static Capabilities.isInternalBuild.getter() & 1) != 0)
  {
    v0 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
    v1 = String._bridgeToObjectiveC()();
    v2 = objc_msgSend(v0, "integerForKey:", v1);

    v3 = v2 != 0;
  }
  else
  {
    v3 = 0;
  }
  byte_2632E8 = v3;
}

uint64_t type metadata accessor for ListItemViewModel(uint64_t a1)
{
  uint64_t result;

  result = qword_263410;
  if (!qword_263410)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ListItemViewModel);
  return result;
}

unint64_t sub_AD8B8()
{
  unint64_t result;

  result = qword_263310;
  if (!qword_263310)
  {
    result = swift_getWitnessTable(&unk_1E7CFC, &type metadata for ListItemViewModel.Layout.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_263310);
  }
  return result;
}

unint64_t sub_AD8FC()
{
  unint64_t result;

  result = qword_263318;
  if (!qword_263318)
  {
    result = swift_getWitnessTable(&unk_1E7CAC, &type metadata for ListItemViewModel.Layout.TallCodingKeys);
    atomic_store(result, (unint64_t *)&qword_263318);
  }
  return result;
}

unint64_t sub_AD940()
{
  unint64_t result;

  result = qword_263320;
  if (!qword_263320)
  {
    result = swift_getWitnessTable(&unk_1E7C5C, &type metadata for ListItemViewModel.Layout.ContainedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_263320);
  }
  return result;
}

unint64_t sub_AD984()
{
  unint64_t result;

  result = qword_263328;
  if (!qword_263328)
  {
    result = swift_getWitnessTable(&unk_1E7C0C, &type metadata for ListItemViewModel.Layout.RegularCodingKeys);
    atomic_store(result, (unint64_t *)&qword_263328);
  }
  return result;
}

uint64_t sub_AD9C8(uint64_t a1, uint64_t a2)
{
  assignWithTake for ListItemThumbnailViewModel(a2, a1);
  return a2;
}

uint64_t sub_ADA04(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for ListItemMetadata(a2, a1);
  return a2;
}

uint64_t sub_ADA40(uint64_t a1, uint64_t a2)
{
  assignWithTake for ListItemMetadata(a2, a1);
  return a2;
}

void ListItemViewModel.unscaledDividerInset(isCompact:isAX:)(char a1, char a2)
{
  char v2;

  if ((a1 & 1) == 0 || (a2 & 1) == 0)
  {
    v2 = a1 & 1;
    ListItemThumbnailViewModel.unscaledThumbnailSize(isCompact:)(a1 & 1);
    ListItemThumbnailViewModel.unscaledTrailingPadding(isCompact:)(v2);
  }
}

uint64_t ListItemViewModel.actionForListItem()@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  Swift::String v49;
  void *v50;
  void (*v51)(char *, uint64_t, uint64_t);
  char *v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  _QWORD *v71;
  int *v72;
  _QWORD *v73;
  _QWORD *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  void (*v82)(char *, uint64_t);
  char *v83;
  char *v84;
  uint64_t v86;
  uint64_t v87;
  Swift::String v88;
  void *object;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  _QWORD *v114;
  _QWORD *v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  char *v119;
  int *v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  char *v133;
  uint64_t v134;
  char *v135;
  _QWORD *v136;
  uint64_t v137;
  uint64_t v138;
  __int128 v139;
  ValueMetadata *v140;
  _UNKNOWN **v141;
  _OWORD v142[2];
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  char v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  _OWORD v162[11];
  char v163;
  unsigned __int8 v164[17];

  v2 = v1;
  v136 = a1;
  v120 = (int *)type metadata accessor for FlowAction(0);
  __chkstk_darwin(v120);
  v119 = (char *)&v116 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for LinkActionType(0);
  v130 = *(_QWORD *)(v4 - 8);
  v131 = v4;
  __chkstk_darwin(v4);
  v132 = (char *)&v116 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for ClickData.TargetType(0);
  v127 = *(_QWORD *)(v6 - 8);
  v128 = v6;
  __chkstk_darwin(v6);
  v129 = (char *)&v116 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_5440(&qword_25E828);
  __chkstk_darwin(v8);
  v135 = (char *)&v116 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v117 = type metadata accessor for AssetAction.Kind(0);
  __chkstk_darwin(v117);
  v118 = (char *)&v116 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for UUID(0);
  v122 = *(_QWORD *)(v11 - 8);
  v123 = v11;
  __chkstk_darwin(v11);
  v121 = (char *)&v116 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_5440(&qword_2618C8);
  __chkstk_darwin(v13);
  v116 = (uint64_t)&v116 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_5440(&qword_268370);
  __chkstk_darwin(v15);
  v17 = (char *)&v116 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v134 = type metadata accessor for ActionMetrics(0);
  v137 = *(_QWORD *)(v134 - 8);
  v18 = __chkstk_darwin(v134);
  v133 = (char *)&v116 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v138 = (uint64_t)&v116 - v20;
  v21 = ListItemViewModel.isPurchased.getter();
  v22 = (_QWORD *)(v1 + 416);
  v23 = *(_QWORD *)(v1 + 440);
  v24 = *(_QWORD *)(v2 + 448);
  sub_5480(v22, v23);
  v124 = ContentInfo.id.getter(v23, *(_QWORD *)(v24 + 8));
  v125 = v25;
  v164[0] = 4;
  LODWORD(v126) = v21;
  v26 = v21 & 1;
  if ((v21 & 1) != 0)
    v27 = 20;
  else
    v27 = 18;
  v163 = v27;
  v28 = sub_5440(&qword_25DF90);
  v29 = swift_allocObject(v28, 80, 7);
  *(_OWORD *)(v29 + 16) = xmmword_1E0B70;
  *(_QWORD *)(v29 + 32) = 0x5050557369;
  *(_QWORD *)(v29 + 40) = 0xE500000000000000;
  v30 = *(_QWORD *)(v2 + 440);
  v31 = *(_QWORD *)(v2 + 448);
  sub_5480(v22, v30);
  v32 = AssetInfo.supportsUnifiedProductPage.getter(v30, v31);
  *(_QWORD *)(v29 + 72) = &type metadata for Bool;
  *(_BYTE *)(v29 + 48) = v32 & 1;
  v33 = sub_8FA0(v29);
  v34 = 0;
  v35 = 0;
  if (!v26)
  {
    v36 = *(_QWORD *)(v2 + 440);
    v37 = *(_QWORD *)(v2 + 448);
    sub_5480(v22, v36);
    AssetInfo.sharableURL.getter(v36, v37);
    v38 = type metadata accessor for URL(0);
    v39 = *(_QWORD *)(v38 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48))(v17, 1, v38) == 1)
    {
      sub_B414((uint64_t)v17, &qword_268370);
      v34 = 0;
      v35 = 0;
    }
    else
    {
      v34 = URL.absoluteString.getter();
      v35 = v40;
      (*(void (**)(char *, uint64_t))(v39 + 8))(v17, v38);
    }
  }
  sub_BD00((uint64_t)v22, (uint64_t)&v151);
  v41 = *(_QWORD *)(v2 + 440);
  v42 = *(_QWORD *)(v2 + 448);
  sub_5480(v22, v41);
  v43 = AssetInfo.title.getter(v41, v42);
  sub_7D1B4(&v151, v43, v44, 0, (uint64_t)v162);
  v159 = v162[8];
  v160 = v162[9];
  v161 = v162[10];
  v155 = v162[4];
  v156 = v162[5];
  v157 = v162[6];
  v158 = v162[7];
  v151 = v162[0];
  v152 = v162[1];
  v153 = v162[2];
  v154 = v162[3];
  v45 = v138;
  v46 = v125;
  static Metrics.createClickMetrics(targetId:targetType:actionType:actionDetails:actionUrl:location:)(v124, v125, v164, &v163, v33, v34, v35, &v151, v138);
  swift_bridgeObjectRelease(v46);
  swift_bridgeObjectRelease(v33);
  swift_bridgeObjectRelease(v35);
  sub_7E498(v162);
  if ((v126 & 1) != 0)
  {
    *(_QWORD *)&v151 = 0;
    *((_QWORD *)&v151 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(32);
    swift_bridgeObjectRelease(*((_QWORD *)&v151 + 1));
    *(_QWORD *)&v151 = 0xD00000000000001ELL;
    *((_QWORD *)&v151 + 1) = 0x80000000001FB810;
    v86 = *(_QWORD *)(v2 + 440);
    v87 = *(_QWORD *)(v2 + 448);
    sub_5480(v22, v86);
    v88._countAndFlagsBits = ContentInfo.id.getter(v86, *(_QWORD *)(v87 + 8));
    object = v88._object;
    String.append(_:)(v88);
    swift_bridgeObjectRelease(object);
    v125 = *((_QWORD *)&v151 + 1);
    v126 = v151;
    v90 = *(_QWORD *)(v2 + 440);
    v91 = *(_QWORD *)(v2 + 448);
    sub_5480(v22, v90);
    v124 = ContentInfo.id.getter(v90, *(_QWORD *)(v91 + 8));
    v120 = (int *)v92;
    v93 = type metadata accessor for ListItemViewModel(0);
    v94 = v116;
    sub_B3D0(v2 + *(int *)(v93 + 40), v116, &qword_2618C8);
    v95 = type metadata accessor for CardInfo(0);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v95 - 8) + 48))(v94, 1, v95) == 1)
    {
      sub_B414(v94, &qword_2618C8);
      v119 = 0;
      v116 = 0;
    }
    else
    {
      v96 = v94 + *(int *)(v95 + 20);
      v97 = v121;
      v98 = v122;
      v99 = v123;
      (*(void (**)(char *, uint64_t, uint64_t))(v122 + 16))(v121, v96, v123);
      v100 = sub_AF1B0(v94);
      v119 = (char *)UUID.uuidString.getter(v100);
      v116 = v101;
      (*(void (**)(char *, uint64_t))(v98 + 8))(v97, v99);
    }
    v102 = *(_QWORD *)(v2 + 440);
    v103 = *(_QWORD *)(v2 + 448);
    sub_5480(v22, v102);
    LOBYTE(v102) = AssetInfo.isExplicit.getter(v102, v103);
    v105 = v137;
    v104 = v138;
    v107 = (uint64_t)v133;
    v106 = v134;
    (*(void (**)(char *, uint64_t, uint64_t))(v137 + 16))(v133, v138, v134);
    v108 = (uint64_t)v118;
    swift_storeEnumTagMultiPayload(v118, v117, 11);
    v109 = v129;
    (*(void (**)(char *, _QWORD, uint64_t))(v127 + 104))(v129, enum case for ClickData.TargetType.navigate(_:), v128);
    v110 = v132;
    (*(void (**)(char *, _QWORD, uint64_t))(v130 + 104))(v132, enum case for LinkActionType.click(_:), v131);
    v111 = (uint64_t)v135;
    ClickData.init(with:linkActionType:index:url:)(v109, v110, 0, 0, 0);
    v112 = type metadata accessor for ClickData(0);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v112 - 8) + 56))(v111, 0, 1, v112);
    v113 = type metadata accessor for AssetAction(0);
    v114 = v136;
    v136[3] = v113;
    v114[4] = sub_6FD0(&qword_263340, type metadata accessor for AssetAction, (uint64_t)&protocol conformance descriptor for AssetAction);
    v115 = sub_C404(v114);
    AssetAction.init(id:assetID:instanceID:isExplicit:actionMetrics:kind:clickData:)(v126, v125, v124, (uint64_t)v120, (uint64_t)v119, v116, v102 & 1, v107, (uint64_t)v115, v108, v111);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v105 + 8))(v104, v106);
  }
  else
  {
    *(_QWORD *)&v151 = 0;
    *((_QWORD *)&v151 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(31);
    swift_bridgeObjectRelease(*((_QWORD *)&v151 + 1));
    *(_QWORD *)&v151 = 0xD00000000000001DLL;
    *((_QWORD *)&v151 + 1) = 0x80000000001FB7F0;
    v47 = *(_QWORD *)(v2 + 440);
    v48 = *(_QWORD *)(v2 + 448);
    sub_5480(v22, v47);
    v49._countAndFlagsBits = ContentInfo.id.getter(v47, *(_QWORD *)(v48 + 8));
    v50 = v49._object;
    String.append(_:)(v49);
    swift_bridgeObjectRelease(v50);
    v125 = *((_QWORD *)&v151 + 1);
    v126 = v151;
    v51 = *(void (**)(char *, uint64_t, uint64_t))(v137 + 16);
    v52 = v133;
    v53 = v134;
    v51(v133, v45, v134);
    v54 = v129;
    (*(void (**)(char *, _QWORD, uint64_t))(v127 + 104))(v129, enum case for ClickData.TargetType.navigate(_:), v128);
    v55 = v132;
    (*(void (**)(char *, _QWORD, uint64_t))(v130 + 104))(v132, enum case for LinkActionType.click(_:), v131);
    v56 = (uint64_t)v135;
    ClickData.init(with:linkActionType:index:url:)(v54, v55, 0, 0, 0);
    v57 = type metadata accessor for ClickData(0);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v57 - 8) + 56))(v56, 0, 1, v57);
    v58 = *(_QWORD *)(v2 + 440);
    v59 = *(_QWORD *)(v2 + 448);
    sub_5480(v22, v58);
    v60 = ContentInfo.id.getter(v58, *(_QWORD *)(v59 + 8));
    v140 = &type metadata for FlowAction.NewCardSetDestination;
    v141 = &protocol witness table for FlowAction.NewCardSetDestination;
    *(_QWORD *)&v139 = v60;
    *((_QWORD *)&v139 + 1) = v61;
    v62 = v2 + *(int *)(type metadata accessor for ListItemViewModel(0) + 44);
    v63 = *(_OWORD *)(v62 + 112);
    v64 = *(_OWORD *)(v62 + 80);
    v147 = *(_OWORD *)(v62 + 96);
    v148 = v63;
    v65 = *(_OWORD *)(v62 + 112);
    v149 = *(_OWORD *)(v62 + 128);
    v66 = *(_OWORD *)(v62 + 48);
    v67 = *(_OWORD *)(v62 + 16);
    v143 = *(_OWORD *)(v62 + 32);
    v144 = v66;
    v68 = *(_OWORD *)(v62 + 48);
    v69 = *(_OWORD *)(v62 + 80);
    v145 = *(_OWORD *)(v62 + 64);
    v146 = v69;
    v70 = *(_OWORD *)(v62 + 16);
    v142[0] = *(_OWORD *)v62;
    v142[1] = v70;
    v157 = v147;
    v158 = v65;
    v159 = *(_OWORD *)(v62 + 128);
    v153 = v143;
    v154 = v68;
    v155 = v145;
    v156 = v64;
    v150 = *(_BYTE *)(v62 + 144);
    LOBYTE(v160) = *(_BYTE *)(v62 + 144);
    v151 = v142[0];
    v152 = v67;
    KeyedEncodingContainer.encode<A>(_:forKey:)(*(double *)&v159);
    v71 = v136;
    v72 = v120;
    v136[3] = v120;
    v71[4] = sub_6FD0((unint64_t *)&qword_263330, type metadata accessor for FlowAction, (uint64_t)&protocol conformance descriptor for FlowAction);
    v73 = sub_C404(v71);
    v74 = sub_5D30(v142);
    v75 = v121;
    v76 = UUID.init()(v74);
    UUID.uuidString.getter(v76);
    v78 = v77;
    (*(void (**)(char *, uint64_t))(v122 + 8))(v75, v123);
    swift_bridgeObjectRelease(v78);
    v79 = v72[11];
    v80 = v119;
    v119[v79] = 0;
    v81 = v125;
    *(_QWORD *)v80 = v126;
    *((_QWORD *)v80 + 1) = v81;
    v51(&v80[v72[5]], (uint64_t)v52, v53);
    sub_B3D0(v56, (uint64_t)&v80[v72[6]], &qword_25E828);
    sub_AC68(&v139, (uint64_t)&v80[v72[7]]);
    sub_B414(v56, &qword_25E828);
    v82 = *(void (**)(char *, uint64_t))(v137 + 8);
    v82(v52, v53);
    sub_167A4((uint64_t)&v151, (uint64_t)&v80[v72[8]], &qword_263338);
    v83 = &v80[v72[9]];
    *(_QWORD *)v83 = 0;
    *((_QWORD *)v83 + 1) = 0;
    v84 = &v80[v72[10]];
    strcpy(v84, "cardsPresent");
    v84[13] = 0;
    *((_WORD *)v84 + 7) = -5120;
    v80[v79] = 0;
    sub_AF16C((uint64_t)v80, (uint64_t)v73);
    return ((uint64_t (*)(uint64_t, uint64_t))v82)(v138, v53);
  }
}

uint64_t ListItemViewModel.contentData(with:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  void (*v38)(char *, uint64_t, uint64_t, uint64_t);
  unsigned int *v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  Swift::String v44;
  void *object;
  Swift::String_optional v46;
  uint64_t countAndFlagsBits;
  uint64_t v48;
  uint64_t v49;
  Swift::String v50;
  void *v51;
  Swift::String_optional v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  unsigned int *v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  void (*v69)(char *, uint64_t, uint64_t);
  char *v70;
  uint64_t v71;
  char *v72;
  unint64_t v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  void *v80;
  unsigned __int8 v81;
  void *v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  void *v87;
  id v88;
  uint64_t v89;
  __int16 v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  void *v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  char *v105;
  uint64_t v106;
  char *v107;
  _BYTE v108[48];

  v3 = v2;
  v100 = a2;
  v5 = sub_5440(&qword_263348);
  __chkstk_darwin(v5);
  v99 = (char *)&v92 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_5440(&qword_263350);
  __chkstk_darwin(v7);
  v103 = (char *)&v92 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for SeriesOrdering(0);
  v10 = *(_QWORD *)(v9 - 8);
  v101 = v9;
  v102 = v10;
  __chkstk_darwin(v9);
  v12 = (char *)&v92 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_5440(&qword_263358);
  __chkstk_darwin(v13);
  v104 = (char *)&v92 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_5440(&qword_263360);
  __chkstk_darwin(v15);
  v107 = (char *)&v92 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_5440(&qword_263368);
  __chkstk_darwin(v17);
  v106 = (uint64_t)&v92 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_5440(&qword_262038);
  __chkstk_darwin(v19);
  v21 = (char *)&v92 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for ContentType(0);
  v23 = *(_QWORD *)(v22 - 8);
  __chkstk_darwin(v22);
  v105 = (char *)&v92 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = type metadata accessor for BooksFeatureFlag(0);
  v26 = *(_QWORD *)(v25 - 8);
  __chkstk_darwin(v25);
  v28 = (char *)&v92 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD, uint64_t))(v26 + 104))(v28, enum case for BooksFeatureFlag.unifiedProductPage(_:), v25);
  v29 = sub_6FD0(&qword_263370, (uint64_t (*)(uint64_t))&type metadata accessor for BooksFeatureFlag, (uint64_t)&protocol conformance descriptor for BooksFeatureFlag);
  v30 = sub_AF1EC();
  v96 = RawRepresentable<>.isEnabled.getter(v25, v29, v30);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v28, v25);
  v31 = v3[55];
  v32 = v3[56];
  sub_5480(v3 + 52, v31);
  v33 = ContentInfo.id.getter(v31, *(_QWORD *)(v32 + 8));
  v97 = v34;
  v98 = v33;
  sub_BD00((uint64_t)(v3 + 52), (uint64_t)v108);
  v35 = sub_5440(&qword_262040);
  v36 = type metadata accessor for AudiobookInfo(0);
  v37 = swift_dynamicCast(v21, v108, v35, v36, 6);
  v38 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 56);
  if (v37)
  {
    v38(v21, 0, 1, v36);
    sub_B414((uint64_t)v21, &qword_262038);
    v39 = (unsigned int *)&enum case for ContentType.audiobook(_:);
  }
  else
  {
    v38(v21, 1, 1, v36);
    sub_B414((uint64_t)v21, &qword_262038);
    v39 = (unsigned int *)&enum case for ContentType.book(_:);
  }
  (*(void (**)(char *, _QWORD, uint64_t))(v23 + 104))(v105, *v39, v22);
  v40 = (void *)0xE000000000000000;
  v41 = (uint64_t)v103;
  if (a1)
  {
    v42 = v3[55];
    v43 = v3[56];
    sub_5480(v3 + 52, v42);
    v44._countAndFlagsBits = ContentInfo.id.getter(v42, *(_QWORD *)(v43 + 8));
    object = v44._object;
    v46 = BATracker.contentPrivateID(for:)(v44);
    swift_bridgeObjectRelease(object);
    if (v46.value._object)
      countAndFlagsBits = v46.value._countAndFlagsBits;
    else
      countAndFlagsBits = 0;
    v94 = countAndFlagsBits;
    if (v46.value._object)
      v40 = v46.value._object;
    v48 = v3[55];
    v49 = v3[56];
    sub_5480(v3 + 52, v48);
    v50._countAndFlagsBits = ContentInfo.id.getter(v48, *(_QWORD *)(v49 + 8));
    v51 = v50._object;
    v52 = BATracker.contentUserID(for:)(v50);
    v53 = v52.value._countAndFlagsBits;
    swift_bridgeObjectRelease(v51);
    v93 = (unint64_t)v40;
    if (v52.value._object)
    {
      v95 = v52.value._object;
      v54 = v104;
      goto LABEL_14;
    }
  }
  else
  {
    v93 = 0xE000000000000000;
    v94 = 0;
  }
  v54 = v104;
  swift_bridgeObjectRelease(0);
  v53 = 0;
  v95 = (void *)0xE000000000000000;
LABEL_14:
  v55 = v106;
  sub_AED78(v106);
  v56 = type metadata accessor for ContentAcquisitionType(0);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v56 - 8) + 56))(v55, 0, 1, v56);
  v57 = enum case for ContentSubType.unknown(_:);
  v58 = type metadata accessor for ContentSubType(0);
  v59 = *(_QWORD *)(v58 - 8);
  v60 = v107;
  (*(void (**)(char *, uint64_t, uint64_t))(v59 + 104))(v107, v57, v58);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v59 + 56))(v60, 0, 1, v58);
  v61 = v3[55];
  v62 = v3[56];
  sub_5480(v3 + 52, v61);
  AssetInfo.seriesOrdering.getter(v61, v62);
  v63 = v101;
  v64 = (*(uint64_t (**)(char *, uint64_t))(v102 + 88))(v12, v101);
  if (v64 == enum case for SeriesOrdering.nonSeries(_:))
  {
    v65 = (unsigned int *)&enum case for SeriesType.nonSeries(_:);
LABEL_18:
    v67 = *v65;
    v68 = type metadata accessor for SeriesType(0);
    v69 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v68 - 8) + 104);
    v70 = v54;
    v71 = v67;
LABEL_19:
    v69(v70, v71, v68);
    goto LABEL_20;
  }
  v66 = v64;
  if (v64 == enum case for SeriesOrdering.orderedSeries(_:))
  {
    v65 = (unsigned int *)&enum case for SeriesType.ordered(_:);
    goto LABEL_18;
  }
  v84 = enum case for SeriesOrdering.unorderedSeries(_:);
  v68 = type metadata accessor for SeriesType(0);
  v69 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v68 - 8) + 104);
  if (v66 == v84)
  {
    v71 = enum case for SeriesType.unOrdered(_:);
    v70 = v54;
    goto LABEL_19;
  }
  v69(v54, enum case for SeriesType.nonSeries(_:), v68);
  (*(void (**)(char *, uint64_t))(v102 + 8))(v12, v63);
LABEL_20:
  v72 = v99;
  v73 = v93;
  v74 = v96;
  type metadata accessor for SeriesType(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v68 - 8) + 56))(v54, 0, 1, v68);
  sub_AEF80(v41);
  v75 = type metadata accessor for ProductionType(0);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v75 - 8) + 56))(v41, 0, 1, v75);
  v76 = type metadata accessor for MangaFlag(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v76 - 8) + 56))(v72, 1, 1, v76);
  if ((v74 & 1) != 0)
  {
    v77 = v3[55];
    v78 = v3[56];
    sub_5480(v3 + 52, v77);
    v79 = (void *)ContentInfo.storeData.getter(v77, *(_QWORD *)(v78 + 8));
    if (v79)
    {
      v80 = v79;
      v81 = objc_msgSend(v79, "supportsUnifiedProductPage");

    }
    else
    {
      v81 = 0;
    }
    v85 = v3[55];
    v86 = v3[56];
    sub_5480(v3 + 52, v85);
    v87 = (void *)ContentInfo.storeData.getter(v85, *(_QWORD *)(v86 + 8));
    v82 = v87;
    if (v87)
    {
      v88 = objc_msgSend(v87, "editionKind");

      if (v88)
      {
        v82 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)(v88);
        v83 = v89;

LABEL_33:
        v41 = (uint64_t)v103;
        goto LABEL_34;
      }
      v82 = 0;
    }
    v83 = 0;
    goto LABEL_33;
  }
  v82 = 0;
  v83 = 0;
  v81 = 2;
LABEL_34:
  v108[0] = 1;
  HIBYTE(v91) = 2;
  LOBYTE(v91) = v81;
  return ContentData.init(contentID:contentType:contentPrivateID:contentUserID:contentAcquisitionType:contentSubType:contentLength:supplementalContentCount:seriesType:productionType:mangaFlag:isUnified:isAccoladedContent:contentKind:)(v98, v97, v105, v94, v73, v53, v95, v106, v107, 0x100000000, 0x100000000, v104, v41, v72, v91, v82, v83);
}

uint64_t sub_AED78@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  unsigned int *v19;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t AssociatedConformanceWitness;
  _QWORD v26[3];
  uint64_t v27;
  uint64_t v28;

  v3 = v1[55];
  v4 = v1[56];
  sub_5480(v1 + 52, v3);
  v5 = *(_QWORD *)(v4 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v5, v3, &protocol requirements base descriptor for ContentInfo, &associated type descriptor for ContentInfo.LibraryType);
  v7 = type metadata accessor for Optional(0, AssociatedTypeWitness);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v23 - v9;
  ContentInfo.libraryData.getter(v3, v5);
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v10, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
LABEL_8:
    v21 = enum case for ContentAcquisitionType.unknown(_:);
    v22 = type metadata accessor for ContentAcquisitionType(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 104))(a1, v21, v22);
  }
  v24 = AssociatedTypeWitness;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v4, v3, AssociatedTypeWitness, &protocol requirements base descriptor for AssetInfo, &associated conformance descriptor for AssetInfo.ContentInfo.LibraryType: LibraryAssetInfo);
  v12 = sub_C404(&v23);
  (*(void (**)(_QWORD *, char *, uint64_t))(v11 + 32))(v12, v10, AssociatedTypeWitness);
  sub_AC68(&v23, (uint64_t)v26);
  v13 = v27;
  v14 = v28;
  sub_5480(v26, v27);
  if ((dispatch thunk of LibraryAssetInfo.isPurchased.getter(v13, v14) & 1) == 0)
  {
    _s7BooksUI13AnyPagedFrameVwxx_0(v26);
    goto LABEL_8;
  }
  v15 = v27;
  v16 = v28;
  sub_5480(v26, v27);
  v17 = dispatch thunk of LibraryAssetInfo.isSideloaded.getter(v15, v16);
  v18 = type metadata accessor for ContentAcquisitionType(0);
  v19 = (unsigned int *)&enum case for ContentAcquisitionType.nonStoreBought(_:);
  if ((v17 & 1) == 0)
    v19 = (unsigned int *)&enum case for ContentAcquisitionType.storeBought(_:);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v18 - 8) + 104))(a1, *v19, v18);
  return _s7BooksUI13AnyPagedFrameVwxx_0(v26);
}

uint64_t sub_AEF80@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  void (*v14)(_BYTE *, uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  char v16;
  unsigned int *v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE v22[40];

  v3 = sub_5440(&qword_262038);
  v4 = __chkstk_darwin(v3);
  v6 = &v22[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v4);
  v8 = &v22[-v7 - 8];
  v9 = v1 + 416;
  sub_BD00(v1 + 416, (uint64_t)v22);
  v10 = sub_5440(&qword_262040);
  v11 = type metadata accessor for AudiobookInfo(0);
  v12 = swift_dynamicCast(v8, v22, v10, v11, 6);
  v13 = *(_QWORD *)(v11 - 8);
  v14 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v13 + 56);
  if (!v12)
  {
    v14(v8, 1, 1, v11);
    sub_B414((uint64_t)v8, &qword_262038);
    v17 = (unsigned int *)&enum case for ProductionType.unknown(_:);
    goto LABEL_8;
  }
  v14(v8, 0, 1, v11);
  sub_B414((uint64_t)v8, &qword_262038);
  sub_BD00(v9, (uint64_t)v22);
  if ((swift_dynamicCast(v6, v22, v10, v11, 6) & 1) == 0)
  {
    v14(v6, 1, 1, v11);
    sub_B414((uint64_t)v6, &qword_262038);
    goto LABEL_7;
  }
  v15 = ((uint64_t (*)(_BYTE *, _QWORD, uint64_t, uint64_t))v14)(v6, 0, 1, v11);
  v16 = AudiobookInfo.isSG.getter(v15);
  (*(void (**)(_BYTE *, uint64_t))(v13 + 8))(v6, v11);
  if ((v16 & 1) == 0)
  {
LABEL_7:
    v17 = (unsigned int *)&enum case for ProductionType.nonSGProduction(_:);
    goto LABEL_8;
  }
  v17 = (unsigned int *)&enum case for ProductionType.sgProduction(_:);
LABEL_8:
  v18 = *v17;
  v19 = type metadata accessor for ProductionType(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 104))(a1, v18, v19);
}

uint64_t sub_AF16C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for FlowAction(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_AF1B0(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for CardInfo(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_AF1EC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_263378;
  if (!qword_263378)
  {
    v1 = sub_7EF8(&qword_263380);
    result = swift_getWitnessTable(&protocol conformance descriptor for StaticFeatureFlagsKey<A>, v1);
    atomic_store(result, (unint64_t *)&qword_263378);
  }
  return result;
}

unint64_t sub_AF23C()
{
  unint64_t result;

  result = qword_263388;
  if (!qword_263388)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ListItemViewModel.Layout, &type metadata for ListItemViewModel.Layout);
    atomic_store(result, (unint64_t *)&qword_263388);
  }
  return result;
}

unint64_t sub_AF280(uint64_t a1)
{
  unint64_t result;

  result = sub_AF2A4();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_AF2A4()
{
  unint64_t result;

  result = qword_263390;
  if (!qword_263390)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ListItemViewModel.Layout, &type metadata for ListItemViewModel.Layout);
    atomic_store(result, (unint64_t *)&qword_263390);
  }
  return result;
}

unint64_t sub_AF2EC()
{
  unint64_t result;

  result = qword_263398;
  if (!qword_263398)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ListItemViewModel.PerfHacks, &type metadata for ListItemViewModel.PerfHacks);
    atomic_store(result, (unint64_t *)&qword_263398);
  }
  return result;
}

unint64_t sub_AF334()
{
  unint64_t result;

  result = qword_2633A0;
  if (!qword_2633A0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ListItemViewModel.PerfHacks, &type metadata for ListItemViewModel.PerfHacks);
    atomic_store(result, (unint64_t *)&qword_2633A0);
  }
  return result;
}

unint64_t sub_AF37C()
{
  unint64_t result;

  result = qword_2633A8;
  if (!qword_2633A8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ListItemViewModel.PerfHacks, &type metadata for ListItemViewModel.PerfHacks);
    atomic_store(result, (unint64_t *)&qword_2633A8);
  }
  return result;
}

unint64_t sub_AF3C4()
{
  unint64_t result;

  result = qword_2633B0;
  if (!qword_2633B0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ListItemViewModel.PerfHacks, &type metadata for ListItemViewModel.PerfHacks);
    atomic_store(result, (unint64_t *)&qword_2633B0);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for ListItemViewModel(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  char v7;
  __int128 v8;
  _BYTE *v9;
  _BYTE *v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  _OWORD *v17;
  _OWORD *v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  _OWORD *v22;
  _OWORD *v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  _OWORD *v27;
  _OWORD *v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  _OWORD *v32;
  _OWORD *v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  _OWORD *v37;
  _OWORD *v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  _OWORD *v42;
  _OWORD *v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  _OWORD *v47;
  _OWORD *v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(char *, char *, uint64_t);
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v79;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *a2;
    *(_QWORD *)v4 = *a2;
    v4 = v11 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain(v11);
  }
  else
  {
    v6 = a3;
    *(_BYTE *)a1 = *(_BYTE *)a2;
    *(_QWORD *)(a1 + 8) = a2[1];
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    v7 = *((_BYTE *)a2 + 89);
    v8 = *((_OWORD *)a2 + 3);
    *(_OWORD *)(a1 + 48) = v8;
    (**(void (***)(uint64_t, uint64_t))(v8 - 8))(a1 + 24, (uint64_t)(a2 + 3));
    v9 = (_BYTE *)(v4 + 64);
    v10 = a2 + 8;
    if ((v7 & 1) != 0)
    {
      *v9 = *v10;
    }
    else
    {
      *(_QWORD *)v9 = *(_QWORD *)v10;
      *(_BYTE *)(v4 + 72) = *((_BYTE *)a2 + 72);
      *(_QWORD *)(v4 + 80) = a2[10];
      *(_BYTE *)(v4 + 88) = *((_BYTE *)a2 + 88);
    }
    *(_BYTE *)(v4 + 89) = v7;
    v12 = (_OWORD *)(v4 + 96);
    v13 = a2 + 12;
    v14 = a2[15];
    if (v14)
    {
      v15 = a2[16];
      *(_QWORD *)(v4 + 120) = v14;
      *(_QWORD *)(v4 + 128) = v15;
      (**(void (***)(_OWORD *, _OWORD *))(v14 - 8))(v12, v13);
    }
    else
    {
      v16 = *((_OWORD *)a2 + 7);
      *v12 = *v13;
      *(_OWORD *)(v4 + 112) = v16;
      *(_QWORD *)(v4 + 128) = a2[16];
    }
    v17 = (_OWORD *)(v4 + 136);
    v18 = a2 + 17;
    v19 = a2[20];
    if (v19)
    {
      v20 = a2[21];
      *(_QWORD *)(v4 + 160) = v19;
      *(_QWORD *)(v4 + 168) = v20;
      (**(void (***)(_OWORD *, _OWORD *))(v19 - 8))(v17, v18);
    }
    else
    {
      v21 = *(_OWORD *)(a2 + 19);
      *v17 = *v18;
      *(_OWORD *)(v4 + 152) = v21;
      *(_QWORD *)(v4 + 168) = a2[21];
    }
    v22 = (_OWORD *)(v4 + 176);
    v23 = a2 + 22;
    v24 = a2[25];
    if (v24)
    {
      v25 = a2[26];
      *(_QWORD *)(v4 + 200) = v24;
      *(_QWORD *)(v4 + 208) = v25;
      (**(void (***)(_OWORD *, _OWORD *))(v24 - 8))(v22, v23);
    }
    else
    {
      v26 = *((_OWORD *)a2 + 12);
      *v22 = *v23;
      *(_OWORD *)(v4 + 192) = v26;
      *(_QWORD *)(v4 + 208) = a2[26];
    }
    v27 = (_OWORD *)(v4 + 216);
    v28 = a2 + 27;
    v29 = a2[30];
    if (v29)
    {
      v30 = a2[31];
      *(_QWORD *)(v4 + 240) = v29;
      *(_QWORD *)(v4 + 248) = v30;
      (**(void (***)(_OWORD *, _OWORD *))(v29 - 8))(v27, v28);
    }
    else
    {
      v31 = *(_OWORD *)(a2 + 29);
      *v27 = *v28;
      *(_OWORD *)(v4 + 232) = v31;
      *(_QWORD *)(v4 + 248) = a2[31];
    }
    v32 = (_OWORD *)(v4 + 256);
    v33 = a2 + 32;
    v34 = a2[35];
    if (v34)
    {
      v35 = a2[36];
      *(_QWORD *)(v4 + 280) = v34;
      *(_QWORD *)(v4 + 288) = v35;
      (**(void (***)(_OWORD *, _OWORD *))(v34 - 8))(v32, v33);
    }
    else
    {
      v36 = *((_OWORD *)a2 + 17);
      *v32 = *v33;
      *(_OWORD *)(v4 + 272) = v36;
      *(_QWORD *)(v4 + 288) = a2[36];
    }
    v37 = (_OWORD *)(v4 + 296);
    v38 = a2 + 37;
    v39 = a2[40];
    if (v39)
    {
      v40 = a2[41];
      *(_QWORD *)(v4 + 320) = v39;
      *(_QWORD *)(v4 + 328) = v40;
      (**(void (***)(_OWORD *, _OWORD *))(v39 - 8))(v37, v38);
    }
    else
    {
      v41 = *(_OWORD *)(a2 + 39);
      *v37 = *v38;
      *(_OWORD *)(v4 + 312) = v41;
      *(_QWORD *)(v4 + 328) = a2[41];
    }
    v42 = (_OWORD *)(v4 + 336);
    v43 = a2 + 42;
    v44 = a2[45];
    if (v44)
    {
      v45 = a2[46];
      *(_QWORD *)(v4 + 360) = v44;
      *(_QWORD *)(v4 + 368) = v45;
      (**(void (***)(_OWORD *, _OWORD *))(v44 - 8))(v42, v43);
    }
    else
    {
      v46 = *((_OWORD *)a2 + 22);
      *v42 = *v43;
      *(_OWORD *)(v4 + 352) = v46;
      *(_QWORD *)(v4 + 368) = a2[46];
    }
    v47 = (_OWORD *)(v4 + 376);
    v48 = a2 + 47;
    v49 = a2[50];
    if (v49)
    {
      v50 = a2[51];
      *(_QWORD *)(v4 + 400) = v49;
      *(_QWORD *)(v4 + 408) = v50;
      (**(void (***)(_OWORD *, _OWORD *))(v49 - 8))(v47, v48);
    }
    else
    {
      v51 = *(_OWORD *)(a2 + 49);
      *v47 = *v48;
      *(_OWORD *)(v4 + 392) = v51;
      *(_QWORD *)(v4 + 408) = a2[51];
    }
    v52 = a2[55];
    v53 = a2[56];
    *(_QWORD *)(v4 + 440) = v52;
    *(_QWORD *)(v4 + 448) = v53;
    (**(void (***)(uint64_t, uint64_t))(v52 - 8))(v4 + 416, (uint64_t)(a2 + 52));
    v54 = *(int *)(v6 + 40);
    v55 = (uint64_t *)(v4 + v54);
    v56 = (uint64_t *)((char *)a2 + v54);
    v57 = type metadata accessor for CardInfo(0);
    v58 = *(_QWORD *)(v57 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v58 + 48))(v56, 1, v57))
    {
      v59 = sub_5440(&qword_2618C8);
      memcpy(v55, v56, *(_QWORD *)(*(_QWORD *)(v59 - 8) + 64));
    }
    else
    {
      v60 = *v56;
      *v55 = *v56;
      v61 = *(int *)(v57 + 20);
      v62 = (char *)v55 + v61;
      v79 = (char *)v56 + v61;
      v63 = type metadata accessor for UUID(0);
      v64 = v6;
      v65 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v63 - 8) + 16);
      swift_bridgeObjectRetain(v60);
      v65(v62, v79, v63);
      v6 = v64;
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v58 + 56))(v55, 0, 1, v57);
    }
    v66 = *(int *)(v6 + 44);
    v67 = v4 + v66;
    v68 = (uint64_t)a2 + v66;
    v69 = *(_QWORD *)(v68 + 8);
    *(_QWORD *)v67 = *(_QWORD *)v68;
    *(_QWORD *)(v67 + 8) = v69;
    v70 = *(_QWORD *)(v68 + 24);
    *(_QWORD *)(v67 + 16) = *(_QWORD *)(v68 + 16);
    *(_QWORD *)(v67 + 24) = v70;
    v71 = *(_QWORD *)(v68 + 40);
    *(_QWORD *)(v67 + 32) = *(_QWORD *)(v68 + 32);
    *(_QWORD *)(v67 + 40) = v71;
    v72 = *(_QWORD *)(v68 + 56);
    *(_QWORD *)(v67 + 48) = *(_QWORD *)(v68 + 48);
    *(_QWORD *)(v67 + 56) = v72;
    v73 = *(_QWORD *)(v68 + 72);
    *(_QWORD *)(v67 + 64) = *(_QWORD *)(v68 + 64);
    *(_QWORD *)(v67 + 72) = v73;
    v74 = *(_QWORD *)(v68 + 88);
    *(_QWORD *)(v67 + 80) = *(_QWORD *)(v68 + 80);
    *(_QWORD *)(v67 + 88) = v74;
    v75 = *(_QWORD *)(v68 + 104);
    *(_QWORD *)(v67 + 96) = *(_QWORD *)(v68 + 96);
    *(_QWORD *)(v67 + 104) = v75;
    v76 = *(_QWORD *)(v68 + 120);
    *(_QWORD *)(v67 + 112) = *(_QWORD *)(v68 + 112);
    *(_QWORD *)(v67 + 120) = v76;
    v77 = *(_QWORD *)(v68 + 136);
    *(_QWORD *)(v67 + 128) = *(_QWORD *)(v68 + 128);
    *(_QWORD *)(v67 + 136) = v77;
    *(_BYTE *)(v67 + 144) = *(_BYTE *)(v68 + 144);
    swift_bridgeObjectRetain(v69);
    swift_bridgeObjectRetain(v70);
    swift_bridgeObjectRetain(v71);
    swift_bridgeObjectRetain(v72);
    swift_bridgeObjectRetain(v73);
    swift_bridgeObjectRetain(v74);
    swift_bridgeObjectRetain(v75);
    swift_bridgeObjectRetain(v76);
    swift_bridgeObjectRetain(v77);
  }
  return v4;
}

uint64_t destroy for ListItemViewModel(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _QWORD *v8;

  _s7BooksUI13AnyPagedFrameVwxx_0(a1 + 3);
  if (a1[15])
    _s7BooksUI13AnyPagedFrameVwxx_0(a1 + 12);
  if (a1[20])
    _s7BooksUI13AnyPagedFrameVwxx_0(a1 + 17);
  if (a1[25])
    _s7BooksUI13AnyPagedFrameVwxx_0(a1 + 22);
  if (a1[30])
    _s7BooksUI13AnyPagedFrameVwxx_0(a1 + 27);
  if (a1[35])
    _s7BooksUI13AnyPagedFrameVwxx_0(a1 + 32);
  if (a1[40])
    _s7BooksUI13AnyPagedFrameVwxx_0(a1 + 37);
  if (a1[45])
    _s7BooksUI13AnyPagedFrameVwxx_0(a1 + 42);
  if (a1[50])
    _s7BooksUI13AnyPagedFrameVwxx_0(a1 + 47);
  _s7BooksUI13AnyPagedFrameVwxx_0(a1 + 52);
  v4 = (_QWORD *)((char *)a1 + *(int *)(a2 + 40));
  v5 = type metadata accessor for CardInfo(0);
  if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, 1, v5))
  {
    swift_bridgeObjectRelease(*v4);
    v6 = (char *)v4 + *(int *)(v5 + 20);
    v7 = type metadata accessor for UUID(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  }
  v8 = (_QWORD *)((char *)a1 + *(int *)(a2 + 44));
  swift_bridgeObjectRelease(v8[1]);
  swift_bridgeObjectRelease(v8[3]);
  swift_bridgeObjectRelease(v8[5]);
  swift_bridgeObjectRelease(v8[7]);
  swift_bridgeObjectRelease(v8[9]);
  swift_bridgeObjectRelease(v8[11]);
  swift_bridgeObjectRelease(v8[13]);
  swift_bridgeObjectRelease(v8[15]);
  return swift_bridgeObjectRelease(v8[17]);
}

uint64_t initializeWithCopy for ListItemViewModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6;
  __int128 v7;
  _BYTE *v8;
  _BYTE *v9;
  _OWORD *v10;
  _OWORD *v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  _OWORD *v15;
  _OWORD *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  _OWORD *v20;
  _OWORD *v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  _OWORD *v25;
  _OWORD *v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  _OWORD *v30;
  _OWORD *v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  _OWORD *v35;
  _OWORD *v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  _OWORD *v40;
  _OWORD *v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  _OWORD *v45;
  _OWORD *v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  void (*v63)(char *, char *, uint64_t);
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v77;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v6 = *(_BYTE *)(a2 + 89);
  v7 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 48) = v7;
  (**(void (***)(uint64_t, uint64_t))(v7 - 8))(a1 + 24, a2 + 24);
  v8 = (_BYTE *)(a1 + 64);
  v9 = (_BYTE *)(a2 + 64);
  if ((v6 & 1) != 0)
  {
    *v8 = *v9;
  }
  else
  {
    *(_QWORD *)v8 = *(_QWORD *)v9;
    *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  }
  *(_BYTE *)(a1 + 89) = v6;
  v10 = (_OWORD *)(a1 + 96);
  v11 = (_OWORD *)(a2 + 96);
  v12 = *(_QWORD *)(a2 + 120);
  if (v12)
  {
    v13 = *(_QWORD *)(a2 + 128);
    *(_QWORD *)(a1 + 120) = v12;
    *(_QWORD *)(a1 + 128) = v13;
    (**(void (***)(_OWORD *, _OWORD *))(v12 - 8))(v10, v11);
  }
  else
  {
    v14 = *(_OWORD *)(a2 + 112);
    *v10 = *v11;
    *(_OWORD *)(a1 + 112) = v14;
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  }
  v15 = (_OWORD *)(a1 + 136);
  v16 = (_OWORD *)(a2 + 136);
  v17 = *(_QWORD *)(a2 + 160);
  if (v17)
  {
    v18 = *(_QWORD *)(a2 + 168);
    *(_QWORD *)(a1 + 160) = v17;
    *(_QWORD *)(a1 + 168) = v18;
    (**(void (***)(_OWORD *, _OWORD *))(v17 - 8))(v15, v16);
  }
  else
  {
    v19 = *(_OWORD *)(a2 + 152);
    *v15 = *v16;
    *(_OWORD *)(a1 + 152) = v19;
    *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  }
  v20 = (_OWORD *)(a1 + 176);
  v21 = (_OWORD *)(a2 + 176);
  v22 = *(_QWORD *)(a2 + 200);
  if (v22)
  {
    v23 = *(_QWORD *)(a2 + 208);
    *(_QWORD *)(a1 + 200) = v22;
    *(_QWORD *)(a1 + 208) = v23;
    (**(void (***)(_OWORD *, _OWORD *))(v22 - 8))(v20, v21);
  }
  else
  {
    v24 = *(_OWORD *)(a2 + 192);
    *v20 = *v21;
    *(_OWORD *)(a1 + 192) = v24;
    *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  }
  v25 = (_OWORD *)(a1 + 216);
  v26 = (_OWORD *)(a2 + 216);
  v27 = *(_QWORD *)(a2 + 240);
  if (v27)
  {
    v28 = *(_QWORD *)(a2 + 248);
    *(_QWORD *)(a1 + 240) = v27;
    *(_QWORD *)(a1 + 248) = v28;
    (**(void (***)(_OWORD *, _OWORD *))(v27 - 8))(v25, v26);
  }
  else
  {
    v29 = *(_OWORD *)(a2 + 232);
    *v25 = *v26;
    *(_OWORD *)(a1 + 232) = v29;
    *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
  }
  v30 = (_OWORD *)(a1 + 256);
  v31 = (_OWORD *)(a2 + 256);
  v32 = *(_QWORD *)(a2 + 280);
  if (v32)
  {
    v33 = *(_QWORD *)(a2 + 288);
    *(_QWORD *)(a1 + 280) = v32;
    *(_QWORD *)(a1 + 288) = v33;
    (**(void (***)(_OWORD *, _OWORD *))(v32 - 8))(v30, v31);
  }
  else
  {
    v34 = *(_OWORD *)(a2 + 272);
    *v30 = *v31;
    *(_OWORD *)(a1 + 272) = v34;
    *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
  }
  v35 = (_OWORD *)(a1 + 296);
  v36 = (_OWORD *)(a2 + 296);
  v37 = *(_QWORD *)(a2 + 320);
  if (v37)
  {
    v38 = *(_QWORD *)(a2 + 328);
    *(_QWORD *)(a1 + 320) = v37;
    *(_QWORD *)(a1 + 328) = v38;
    (**(void (***)(_OWORD *, _OWORD *))(v37 - 8))(v35, v36);
  }
  else
  {
    v39 = *(_OWORD *)(a2 + 312);
    *v35 = *v36;
    *(_OWORD *)(a1 + 312) = v39;
    *(_QWORD *)(a1 + 328) = *(_QWORD *)(a2 + 328);
  }
  v40 = (_OWORD *)(a1 + 336);
  v41 = (_OWORD *)(a2 + 336);
  v42 = *(_QWORD *)(a2 + 360);
  if (v42)
  {
    v43 = *(_QWORD *)(a2 + 368);
    *(_QWORD *)(a1 + 360) = v42;
    *(_QWORD *)(a1 + 368) = v43;
    (**(void (***)(_OWORD *, _OWORD *))(v42 - 8))(v40, v41);
  }
  else
  {
    v44 = *(_OWORD *)(a2 + 352);
    *v40 = *v41;
    *(_OWORD *)(a1 + 352) = v44;
    *(_QWORD *)(a1 + 368) = *(_QWORD *)(a2 + 368);
  }
  v45 = (_OWORD *)(a1 + 376);
  v46 = (_OWORD *)(a2 + 376);
  v47 = *(_QWORD *)(a2 + 400);
  if (v47)
  {
    v48 = *(_QWORD *)(a2 + 408);
    *(_QWORD *)(a1 + 400) = v47;
    *(_QWORD *)(a1 + 408) = v48;
    (**(void (***)(_OWORD *, _OWORD *))(v47 - 8))(v45, v46);
  }
  else
  {
    v49 = *(_OWORD *)(a2 + 392);
    *v45 = *v46;
    *(_OWORD *)(a1 + 392) = v49;
    *(_QWORD *)(a1 + 408) = *(_QWORD *)(a2 + 408);
  }
  v50 = *(_QWORD *)(a2 + 440);
  v51 = *(_QWORD *)(a2 + 448);
  *(_QWORD *)(a1 + 440) = v50;
  *(_QWORD *)(a1 + 448) = v51;
  (**(void (***)(uint64_t, uint64_t))(v50 - 8))(a1 + 416, a2 + 416);
  v52 = *(int *)(a3 + 40);
  v53 = (uint64_t *)(a1 + v52);
  v54 = (uint64_t *)(a2 + v52);
  v55 = type metadata accessor for CardInfo(0);
  v56 = *(_QWORD *)(v55 - 8);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v56 + 48))(v54, 1, v55))
  {
    v57 = sub_5440(&qword_2618C8);
    memcpy(v53, v54, *(_QWORD *)(*(_QWORD *)(v57 - 8) + 64));
  }
  else
  {
    v58 = *v54;
    *v53 = *v54;
    v59 = *(int *)(v55 + 20);
    v60 = (char *)v53 + v59;
    v77 = (char *)v54 + v59;
    v61 = type metadata accessor for UUID(0);
    v62 = a3;
    v63 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v61 - 8) + 16);
    swift_bridgeObjectRetain(v58);
    v63(v60, v77, v61);
    a3 = v62;
    (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v56 + 56))(v53, 0, 1, v55);
  }
  v64 = *(int *)(a3 + 44);
  v65 = a1 + v64;
  v66 = a2 + v64;
  v67 = *(_QWORD *)(v66 + 8);
  *(_QWORD *)v65 = *(_QWORD *)v66;
  *(_QWORD *)(v65 + 8) = v67;
  v68 = *(_QWORD *)(v66 + 24);
  *(_QWORD *)(v65 + 16) = *(_QWORD *)(v66 + 16);
  *(_QWORD *)(v65 + 24) = v68;
  v69 = *(_QWORD *)(v66 + 40);
  *(_QWORD *)(v65 + 32) = *(_QWORD *)(v66 + 32);
  *(_QWORD *)(v65 + 40) = v69;
  v70 = *(_QWORD *)(v66 + 56);
  *(_QWORD *)(v65 + 48) = *(_QWORD *)(v66 + 48);
  *(_QWORD *)(v65 + 56) = v70;
  v71 = *(_QWORD *)(v66 + 72);
  *(_QWORD *)(v65 + 64) = *(_QWORD *)(v66 + 64);
  *(_QWORD *)(v65 + 72) = v71;
  v72 = *(_QWORD *)(v66 + 88);
  *(_QWORD *)(v65 + 80) = *(_QWORD *)(v66 + 80);
  *(_QWORD *)(v65 + 88) = v72;
  v73 = *(_QWORD *)(v66 + 104);
  *(_QWORD *)(v65 + 96) = *(_QWORD *)(v66 + 96);
  *(_QWORD *)(v65 + 104) = v73;
  v74 = *(_QWORD *)(v66 + 120);
  *(_QWORD *)(v65 + 112) = *(_QWORD *)(v66 + 112);
  *(_QWORD *)(v65 + 120) = v74;
  v75 = *(_QWORD *)(v66 + 136);
  *(_QWORD *)(v65 + 128) = *(_QWORD *)(v66 + 128);
  *(_QWORD *)(v65 + 136) = v75;
  *(_BYTE *)(v65 + 144) = *(_BYTE *)(v66 + 144);
  swift_bridgeObjectRetain(v67);
  swift_bridgeObjectRetain(v68);
  swift_bridgeObjectRetain(v69);
  swift_bridgeObjectRetain(v70);
  swift_bridgeObjectRetain(v71);
  swift_bridgeObjectRetain(v72);
  swift_bridgeObjectRetain(v73);
  swift_bridgeObjectRetain(v74);
  swift_bridgeObjectRetain(v75);
  return a1;
}

uint64_t assignWithCopy for ListItemViewModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  _BYTE *v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t (*v42)(uint64_t *, uint64_t, uint64_t);
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(char *, char *, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  char *v80;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v6;
  if (a1 != a2)
  {
    sub_2EFF0((_QWORD *)(a1 + 24));
    v7 = *(_BYTE *)(a2 + 89);
    v8 = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 48) = v8;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    (**(void (***)(uint64_t, uint64_t))(v8 - 8))(a1 + 24, a2 + 24);
    v9 = (_BYTE *)(a1 + 64);
    v10 = (_BYTE *)(a2 + 64);
    if ((v7 & 1) != 0)
    {
      *v9 = *v10;
    }
    else
    {
      v11 = *(_QWORD *)v10;
      *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
      *(_QWORD *)v9 = v11;
      v12 = *(_QWORD *)(a2 + 80);
      *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
      *(_QWORD *)(a1 + 80) = v12;
    }
    *(_BYTE *)(a1 + 89) = v7;
  }
  v13 = *(_QWORD *)(a2 + 120);
  if (*(_QWORD *)(a1 + 120))
  {
    if (v13)
    {
      sub_142F8((_QWORD *)(a1 + 96), (_QWORD *)(a2 + 96));
      goto LABEL_13;
    }
    _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)(a1 + 96));
  }
  else if (v13)
  {
    *(_QWORD *)(a1 + 120) = v13;
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
    (**(void (***)(uint64_t, uint64_t))(v13 - 8))(a1 + 96, a2 + 96);
    goto LABEL_13;
  }
  v14 = *(_OWORD *)(a2 + 96);
  v15 = *(_OWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 96) = v14;
  *(_OWORD *)(a1 + 112) = v15;
LABEL_13:
  v16 = *(_QWORD *)(a2 + 160);
  if (*(_QWORD *)(a1 + 160))
  {
    if (v16)
    {
      sub_142F8((_QWORD *)(a1 + 136), (_QWORD *)(a2 + 136));
      goto LABEL_20;
    }
    _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)(a1 + 136));
  }
  else if (v16)
  {
    *(_QWORD *)(a1 + 160) = v16;
    *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
    (**(void (***)(uint64_t, uint64_t))(v16 - 8))(a1 + 136, a2 + 136);
    goto LABEL_20;
  }
  v17 = *(_OWORD *)(a2 + 136);
  v18 = *(_OWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 136) = v17;
  *(_OWORD *)(a1 + 152) = v18;
LABEL_20:
  v19 = *(_QWORD *)(a2 + 200);
  if (*(_QWORD *)(a1 + 200))
  {
    if (v19)
    {
      sub_142F8((_QWORD *)(a1 + 176), (_QWORD *)(a2 + 176));
      goto LABEL_27;
    }
    _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)(a1 + 176));
  }
  else if (v19)
  {
    *(_QWORD *)(a1 + 200) = v19;
    *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
    (**(void (***)(uint64_t, uint64_t))(v19 - 8))(a1 + 176, a2 + 176);
    goto LABEL_27;
  }
  v20 = *(_OWORD *)(a2 + 176);
  v21 = *(_OWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 176) = v20;
  *(_OWORD *)(a1 + 192) = v21;
LABEL_27:
  v22 = *(_QWORD *)(a2 + 240);
  if (*(_QWORD *)(a1 + 240))
  {
    if (v22)
    {
      sub_142F8((_QWORD *)(a1 + 216), (_QWORD *)(a2 + 216));
      goto LABEL_34;
    }
    _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)(a1 + 216));
  }
  else if (v22)
  {
    *(_QWORD *)(a1 + 240) = v22;
    *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
    (**(void (***)(uint64_t, uint64_t))(v22 - 8))(a1 + 216, a2 + 216);
    goto LABEL_34;
  }
  v23 = *(_OWORD *)(a2 + 216);
  v24 = *(_OWORD *)(a2 + 232);
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
  *(_OWORD *)(a1 + 216) = v23;
  *(_OWORD *)(a1 + 232) = v24;
LABEL_34:
  v25 = *(_QWORD *)(a2 + 280);
  if (*(_QWORD *)(a1 + 280))
  {
    if (v25)
    {
      sub_142F8((_QWORD *)(a1 + 256), (_QWORD *)(a2 + 256));
      goto LABEL_41;
    }
    _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)(a1 + 256));
  }
  else if (v25)
  {
    *(_QWORD *)(a1 + 280) = v25;
    *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
    (**(void (***)(uint64_t, uint64_t))(v25 - 8))(a1 + 256, a2 + 256);
    goto LABEL_41;
  }
  v26 = *(_OWORD *)(a2 + 256);
  v27 = *(_OWORD *)(a2 + 272);
  *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
  *(_OWORD *)(a1 + 256) = v26;
  *(_OWORD *)(a1 + 272) = v27;
LABEL_41:
  v28 = *(_QWORD *)(a2 + 320);
  if (*(_QWORD *)(a1 + 320))
  {
    if (v28)
    {
      sub_142F8((_QWORD *)(a1 + 296), (_QWORD *)(a2 + 296));
      goto LABEL_48;
    }
    _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)(a1 + 296));
  }
  else if (v28)
  {
    *(_QWORD *)(a1 + 320) = v28;
    *(_QWORD *)(a1 + 328) = *(_QWORD *)(a2 + 328);
    (**(void (***)(uint64_t, uint64_t))(v28 - 8))(a1 + 296, a2 + 296);
    goto LABEL_48;
  }
  v29 = *(_OWORD *)(a2 + 296);
  v30 = *(_OWORD *)(a2 + 312);
  *(_QWORD *)(a1 + 328) = *(_QWORD *)(a2 + 328);
  *(_OWORD *)(a1 + 296) = v29;
  *(_OWORD *)(a1 + 312) = v30;
LABEL_48:
  v31 = *(_QWORD *)(a2 + 360);
  if (*(_QWORD *)(a1 + 360))
  {
    if (v31)
    {
      sub_142F8((_QWORD *)(a1 + 336), (_QWORD *)(a2 + 336));
      goto LABEL_55;
    }
    _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)(a1 + 336));
  }
  else if (v31)
  {
    *(_QWORD *)(a1 + 360) = v31;
    *(_QWORD *)(a1 + 368) = *(_QWORD *)(a2 + 368);
    (**(void (***)(uint64_t, uint64_t))(v31 - 8))(a1 + 336, a2 + 336);
    goto LABEL_55;
  }
  v32 = *(_OWORD *)(a2 + 336);
  v33 = *(_OWORD *)(a2 + 352);
  *(_QWORD *)(a1 + 368) = *(_QWORD *)(a2 + 368);
  *(_OWORD *)(a1 + 336) = v32;
  *(_OWORD *)(a1 + 352) = v33;
LABEL_55:
  v34 = *(_QWORD *)(a2 + 400);
  if (*(_QWORD *)(a1 + 400))
  {
    if (v34)
    {
      sub_142F8((_QWORD *)(a1 + 376), (_QWORD *)(a2 + 376));
      goto LABEL_62;
    }
    _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)(a1 + 376));
  }
  else if (v34)
  {
    *(_QWORD *)(a1 + 400) = v34;
    *(_QWORD *)(a1 + 408) = *(_QWORD *)(a2 + 408);
    (**(void (***)(uint64_t, uint64_t))(v34 - 8))(a1 + 376, a2 + 376);
    goto LABEL_62;
  }
  v35 = *(_OWORD *)(a2 + 376);
  v36 = *(_OWORD *)(a2 + 392);
  *(_QWORD *)(a1 + 408) = *(_QWORD *)(a2 + 408);
  *(_OWORD *)(a1 + 376) = v35;
  *(_OWORD *)(a1 + 392) = v36;
LABEL_62:
  sub_142F8((_QWORD *)(a1 + 416), (_QWORD *)(a2 + 416));
  v37 = *(int *)(a3 + 40);
  v38 = (uint64_t *)(a1 + v37);
  v39 = (uint64_t *)(a2 + v37);
  v40 = type metadata accessor for CardInfo(0);
  v41 = *(_QWORD *)(v40 - 8);
  v42 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v41 + 48);
  v43 = v42(v38, 1, v40);
  v44 = v42(v39, 1, v40);
  if (!v43)
  {
    if (!v44)
    {
      v74 = *v39;
      v75 = *v38;
      *v38 = *v39;
      swift_bridgeObjectRetain(v74);
      swift_bridgeObjectRelease(v75);
      v76 = *(int *)(v40 + 20);
      v77 = (char *)v38 + v76;
      v78 = (char *)v39 + v76;
      v79 = type metadata accessor for UUID(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v79 - 8) + 24))(v77, v78, v79);
      goto LABEL_68;
    }
    sub_AF1B0((uint64_t)v38);
    goto LABEL_67;
  }
  if (v44)
  {
LABEL_67:
    v51 = sub_5440(&qword_2618C8);
    memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v51 - 8) + 64));
    goto LABEL_68;
  }
  v45 = *v39;
  *v38 = *v39;
  v46 = *(int *)(v40 + 20);
  v47 = (char *)v38 + v46;
  v80 = (char *)v39 + v46;
  v48 = type metadata accessor for UUID(0);
  v49 = a3;
  v50 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v48 - 8) + 16);
  swift_bridgeObjectRetain(v45);
  v50(v47, v80, v48);
  a3 = v49;
  (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v41 + 56))(v38, 0, 1, v40);
LABEL_68:
  v52 = *(int *)(a3 + 44);
  v53 = a1 + v52;
  v54 = a2 + v52;
  *(_QWORD *)v53 = *(_QWORD *)(a2 + v52);
  v55 = *(_QWORD *)(a2 + v52 + 8);
  v56 = *(_QWORD *)(a1 + v52 + 8);
  *(_QWORD *)(v53 + 8) = v55;
  swift_bridgeObjectRetain(v55);
  swift_bridgeObjectRelease(v56);
  *(_QWORD *)(v53 + 16) = *(_QWORD *)(v54 + 16);
  v57 = *(_QWORD *)(v54 + 24);
  v58 = *(_QWORD *)(v53 + 24);
  *(_QWORD *)(v53 + 24) = v57;
  swift_bridgeObjectRetain(v57);
  swift_bridgeObjectRelease(v58);
  *(_QWORD *)(v53 + 32) = *(_QWORD *)(v54 + 32);
  v59 = *(_QWORD *)(v54 + 40);
  v60 = *(_QWORD *)(v53 + 40);
  *(_QWORD *)(v53 + 40) = v59;
  swift_bridgeObjectRetain(v59);
  swift_bridgeObjectRelease(v60);
  *(_QWORD *)(v53 + 48) = *(_QWORD *)(v54 + 48);
  v61 = *(_QWORD *)(v54 + 56);
  v62 = *(_QWORD *)(v53 + 56);
  *(_QWORD *)(v53 + 56) = v61;
  swift_bridgeObjectRetain(v61);
  swift_bridgeObjectRelease(v62);
  *(_QWORD *)(v53 + 64) = *(_QWORD *)(v54 + 64);
  v63 = *(_QWORD *)(v54 + 72);
  v64 = *(_QWORD *)(v53 + 72);
  *(_QWORD *)(v53 + 72) = v63;
  swift_bridgeObjectRetain(v63);
  swift_bridgeObjectRelease(v64);
  *(_QWORD *)(v53 + 80) = *(_QWORD *)(v54 + 80);
  v65 = *(_QWORD *)(v54 + 88);
  v66 = *(_QWORD *)(v53 + 88);
  *(_QWORD *)(v53 + 88) = v65;
  swift_bridgeObjectRetain(v65);
  swift_bridgeObjectRelease(v66);
  *(_QWORD *)(v53 + 96) = *(_QWORD *)(v54 + 96);
  v67 = *(_QWORD *)(v54 + 104);
  v68 = *(_QWORD *)(v53 + 104);
  *(_QWORD *)(v53 + 104) = v67;
  swift_bridgeObjectRetain(v67);
  swift_bridgeObjectRelease(v68);
  *(_QWORD *)(v53 + 112) = *(_QWORD *)(v54 + 112);
  v69 = *(_QWORD *)(v54 + 120);
  v70 = *(_QWORD *)(v53 + 120);
  *(_QWORD *)(v53 + 120) = v69;
  swift_bridgeObjectRetain(v69);
  swift_bridgeObjectRelease(v70);
  *(_QWORD *)(v53 + 128) = *(_QWORD *)(v54 + 128);
  v71 = *(_QWORD *)(v54 + 136);
  v72 = *(_QWORD *)(v53 + 136);
  *(_QWORD *)(v53 + 136) = v71;
  swift_bridgeObjectRetain(v71);
  swift_bridgeObjectRelease(v72);
  *(_BYTE *)(v53 + 144) = *(_BYTE *)(v54 + 144);
  return a1;
}

uint64_t initializeWithTake for ListItemViewModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_WORD *)(a1 + 88) = *(_WORD *)(a2 + 88);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  memcpy((void *)(a1 + 96), (const void *)(a2 + 96), 0x118uLL);
  v6 = *(_OWORD *)(a2 + 392);
  *(_OWORD *)(a1 + 376) = *(_OWORD *)(a2 + 376);
  *(_OWORD *)(a1 + 392) = v6;
  *(_QWORD *)(a1 + 408) = *(_QWORD *)(a2 + 408);
  v7 = *(_OWORD *)(a2 + 416);
  v8 = *(_OWORD *)(a2 + 432);
  *(_QWORD *)(a1 + 448) = *(_QWORD *)(a2 + 448);
  v9 = *(int *)(a3 + 40);
  v10 = (_QWORD *)(a1 + v9);
  v11 = (_QWORD *)(a2 + v9);
  *(_OWORD *)(a1 + 416) = v7;
  *(_OWORD *)(a1 + 432) = v8;
  v12 = type metadata accessor for CardInfo(0);
  v13 = *(_QWORD *)(v12 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
  {
    v14 = sub_5440(&qword_2618C8);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    *v10 = *v11;
    v15 = *(int *)(v12 + 20);
    v16 = (char *)v10 + v15;
    v17 = (char *)v11 + v15;
    v18 = type metadata accessor for UUID(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v16, v17, v18);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  }
  v19 = *(int *)(a3 + 44);
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = *(_OWORD *)(v21 + 112);
  *(_OWORD *)(v20 + 96) = *(_OWORD *)(v21 + 96);
  *(_OWORD *)(v20 + 112) = v22;
  *(_OWORD *)(v20 + 128) = *(_OWORD *)(v21 + 128);
  *(_BYTE *)(v20 + 144) = *(_BYTE *)(v21 + 144);
  v23 = *(_OWORD *)(v21 + 48);
  *(_OWORD *)(v20 + 32) = *(_OWORD *)(v21 + 32);
  *(_OWORD *)(v20 + 48) = v23;
  v24 = *(_OWORD *)(v21 + 80);
  *(_OWORD *)(v20 + 64) = *(_OWORD *)(v21 + 64);
  *(_OWORD *)(v20 + 80) = v24;
  v25 = *(_OWORD *)(v21 + 16);
  *(_OWORD *)v20 = *(_OWORD *)v21;
  *(_OWORD *)(v20 + 16) = v25;
  return a1;
}

uint64_t assignWithTake for ListItemViewModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t *, uint64_t, uint64_t);
  int v21;
  int v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  if (a1 != a2)
  {
    sub_2EFF0((_QWORD *)(a1 + 24));
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(_WORD *)(a1 + 88) = *(_WORD *)(a2 + 88);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  }
  if (*(_QWORD *)(a1 + 120))
    _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)(a1 + 96));
  v6 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v6;
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  if (*(_QWORD *)(a1 + 160))
    _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)(a1 + 136));
  v7 = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = v7;
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  if (*(_QWORD *)(a1 + 200))
    _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)(a1 + 176));
  v8 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 192) = v8;
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  if (*(_QWORD *)(a1 + 240))
    _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)(a1 + 216));
  v9 = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(a1 + 232) = v9;
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
  if (*(_QWORD *)(a1 + 280))
    _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)(a1 + 256));
  v10 = *(_OWORD *)(a2 + 272);
  *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
  *(_OWORD *)(a1 + 272) = v10;
  *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
  if (*(_QWORD *)(a1 + 320))
    _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)(a1 + 296));
  v11 = *(_OWORD *)(a2 + 312);
  *(_OWORD *)(a1 + 296) = *(_OWORD *)(a2 + 296);
  *(_OWORD *)(a1 + 312) = v11;
  *(_QWORD *)(a1 + 328) = *(_QWORD *)(a2 + 328);
  if (*(_QWORD *)(a1 + 360))
    _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)(a1 + 336));
  v12 = *(_OWORD *)(a2 + 352);
  *(_OWORD *)(a1 + 336) = *(_OWORD *)(a2 + 336);
  *(_OWORD *)(a1 + 352) = v12;
  *(_QWORD *)(a1 + 368) = *(_QWORD *)(a2 + 368);
  if (*(_QWORD *)(a1 + 400))
    _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)(a1 + 376));
  v13 = *(_OWORD *)(a2 + 392);
  *(_OWORD *)(a1 + 376) = *(_OWORD *)(a2 + 376);
  *(_OWORD *)(a1 + 392) = v13;
  *(_QWORD *)(a1 + 408) = *(_QWORD *)(a2 + 408);
  _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)(a1 + 416));
  v14 = *(_OWORD *)(a2 + 432);
  *(_OWORD *)(a1 + 416) = *(_OWORD *)(a2 + 416);
  *(_OWORD *)(a1 + 432) = v14;
  *(_QWORD *)(a1 + 448) = *(_QWORD *)(a2 + 448);
  v15 = *(int *)(a3 + 40);
  v16 = (uint64_t *)(a1 + v15);
  v17 = (uint64_t *)(a2 + v15);
  v18 = type metadata accessor for CardInfo(0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v19 + 48);
  v21 = v20(v16, 1, v18);
  v22 = v20(v17, 1, v18);
  if (!v21)
  {
    if (!v22)
    {
      v50 = *v16;
      *v16 = *v17;
      swift_bridgeObjectRelease(v50);
      v51 = *(int *)(v18 + 20);
      v52 = (char *)v16 + v51;
      v53 = (char *)v17 + v51;
      v54 = type metadata accessor for UUID(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v54 - 8) + 40))(v52, v53, v54);
      goto LABEL_25;
    }
    sub_AF1B0((uint64_t)v16);
    goto LABEL_24;
  }
  if (v22)
  {
LABEL_24:
    v27 = sub_5440(&qword_2618C8);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    goto LABEL_25;
  }
  *v16 = *v17;
  v23 = *(int *)(v18 + 20);
  v24 = (char *)v16 + v23;
  v25 = (char *)v17 + v23;
  v26 = type metadata accessor for UUID(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v26 - 8) + 32))(v24, v25, v26);
  (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
LABEL_25:
  v28 = *(int *)(a3 + 44);
  v29 = a1 + v28;
  v30 = a2 + v28;
  v31 = *(_QWORD *)(v30 + 8);
  v32 = *(_QWORD *)(a1 + v28 + 8);
  *(_QWORD *)v29 = *(_QWORD *)v30;
  *(_QWORD *)(v29 + 8) = v31;
  swift_bridgeObjectRelease(v32);
  v33 = *(_QWORD *)(v30 + 24);
  v34 = *(_QWORD *)(v29 + 24);
  *(_QWORD *)(v29 + 16) = *(_QWORD *)(v30 + 16);
  *(_QWORD *)(v29 + 24) = v33;
  swift_bridgeObjectRelease(v34);
  v35 = *(_QWORD *)(v30 + 40);
  v36 = *(_QWORD *)(v29 + 40);
  *(_QWORD *)(v29 + 32) = *(_QWORD *)(v30 + 32);
  *(_QWORD *)(v29 + 40) = v35;
  swift_bridgeObjectRelease(v36);
  v37 = *(_QWORD *)(v30 + 56);
  v38 = *(_QWORD *)(v29 + 56);
  *(_QWORD *)(v29 + 48) = *(_QWORD *)(v30 + 48);
  *(_QWORD *)(v29 + 56) = v37;
  swift_bridgeObjectRelease(v38);
  v39 = *(_QWORD *)(v30 + 72);
  v40 = *(_QWORD *)(v29 + 72);
  *(_QWORD *)(v29 + 64) = *(_QWORD *)(v30 + 64);
  *(_QWORD *)(v29 + 72) = v39;
  swift_bridgeObjectRelease(v40);
  v41 = *(_QWORD *)(v30 + 88);
  v42 = *(_QWORD *)(v29 + 88);
  *(_QWORD *)(v29 + 80) = *(_QWORD *)(v30 + 80);
  *(_QWORD *)(v29 + 88) = v41;
  swift_bridgeObjectRelease(v42);
  v43 = *(_QWORD *)(v30 + 104);
  v44 = *(_QWORD *)(v29 + 104);
  *(_QWORD *)(v29 + 96) = *(_QWORD *)(v30 + 96);
  *(_QWORD *)(v29 + 104) = v43;
  swift_bridgeObjectRelease(v44);
  v45 = *(_QWORD *)(v30 + 120);
  v46 = *(_QWORD *)(v29 + 120);
  *(_QWORD *)(v29 + 112) = *(_QWORD *)(v30 + 112);
  *(_QWORD *)(v29 + 120) = v45;
  swift_bridgeObjectRelease(v46);
  v47 = *(_QWORD *)(v30 + 136);
  v48 = *(_QWORD *)(v29 + 136);
  *(_QWORD *)(v29 + 128) = *(_QWORD *)(v30 + 128);
  *(_QWORD *)(v29 + 136) = v47;
  swift_bridgeObjectRelease(v48);
  *(_BYTE *)(v29 + 144) = *(_BYTE *)(v30 + 144);
  return a1;
}

uint64_t getEnumTagSinglePayload for ListItemViewModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_B0960);
}

uint64_t sub_B0960(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 440);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_5440(&qword_2618C8);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 40), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for ListItemViewModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_B09EC);
}

uint64_t sub_B09EC(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 440) = (a2 - 1);
  }
  else
  {
    v7 = sub_5440(&qword_2618C8);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 40), a2, a2, v7);
  }
  return result;
}

void sub_B0A64(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[8];

  v4[0] = &unk_1E7948;
  v4[1] = &unk_1E7960;
  v4[2] = &unk_1E7978;
  v4[3] = &unk_1E7990;
  v4[4] = &unk_1E79A8;
  v4[5] = &unk_1E79C0;
  sub_B0B10(319);
  if (v3 <= 0x3F)
  {
    v4[6] = *(_QWORD *)(v2 - 8) + 64;
    v4[7] = &unk_1E79D8;
    swift_initStructMetadata(a1, 256, 8, v4, a1 + 16);
  }
}

void sub_B0B10(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_263420)
  {
    v2 = type metadata accessor for CardInfo(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_263420);
  }
}

ValueMetadata *type metadata accessor for ListItemViewModel.Layout()
{
  return &type metadata for ListItemViewModel.Layout;
}

ValueMetadata *type metadata accessor for ListItemViewModel.PerfHacks()
{
  return &type metadata for ListItemViewModel.PerfHacks;
}

uint64_t _s7BooksUI17ListItemViewModelV6LayoutOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_B0BD8 + 4 * byte_1E76B5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_B0C0C + 4 * byte_1E76B0[v4]))();
}

uint64_t sub_B0C0C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_B0C14(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0xB0C1CLL);
  return result;
}

uint64_t sub_B0C28(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0xB0C30);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_B0C34(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_B0C3C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ListItemViewModel.Layout.CodingKeys()
{
  return &type metadata for ListItemViewModel.Layout.CodingKeys;
}

ValueMetadata *type metadata accessor for ListItemViewModel.Layout.RegularCodingKeys()
{
  return &type metadata for ListItemViewModel.Layout.RegularCodingKeys;
}

ValueMetadata *type metadata accessor for ListItemViewModel.Layout.ContainedCodingKeys()
{
  return &type metadata for ListItemViewModel.Layout.ContainedCodingKeys;
}

ValueMetadata *type metadata accessor for ListItemViewModel.Layout.TallCodingKeys()
{
  return &type metadata for ListItemViewModel.Layout.TallCodingKeys;
}

unint64_t sub_B0C8C()
{
  unint64_t result;

  result = qword_263468;
  if (!qword_263468)
  {
    result = swift_getWitnessTable(&unk_1E7BE4, &type metadata for ListItemViewModel.Layout.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_263468);
  }
  return result;
}

unint64_t sub_B0CD4()
{
  unint64_t result;

  result = qword_263470;
  if (!qword_263470)
  {
    result = swift_getWitnessTable(&unk_1E7B04, &type metadata for ListItemViewModel.Layout.RegularCodingKeys);
    atomic_store(result, (unint64_t *)&qword_263470);
  }
  return result;
}

unint64_t sub_B0D1C()
{
  unint64_t result;

  result = qword_263478;
  if (!qword_263478)
  {
    result = swift_getWitnessTable(&unk_1E7B2C, &type metadata for ListItemViewModel.Layout.RegularCodingKeys);
    atomic_store(result, (unint64_t *)&qword_263478);
  }
  return result;
}

unint64_t sub_B0D64()
{
  unint64_t result;

  result = qword_263480;
  if (!qword_263480)
  {
    result = swift_getWitnessTable(&unk_1E7AB4, &type metadata for ListItemViewModel.Layout.ContainedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_263480);
  }
  return result;
}

unint64_t sub_B0DAC()
{
  unint64_t result;

  result = qword_263488;
  if (!qword_263488)
  {
    result = swift_getWitnessTable(&unk_1E7ADC, &type metadata for ListItemViewModel.Layout.ContainedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_263488);
  }
  return result;
}

unint64_t sub_B0DF4()
{
  unint64_t result;

  result = qword_263490;
  if (!qword_263490)
  {
    result = swift_getWitnessTable(&unk_1E7A64, &type metadata for ListItemViewModel.Layout.TallCodingKeys);
    atomic_store(result, (unint64_t *)&qword_263490);
  }
  return result;
}

unint64_t sub_B0E3C()
{
  unint64_t result;

  result = qword_263498;
  if (!qword_263498)
  {
    result = swift_getWitnessTable(&unk_1E7A8C, &type metadata for ListItemViewModel.Layout.TallCodingKeys);
    atomic_store(result, (unint64_t *)&qword_263498);
  }
  return result;
}

unint64_t sub_B0E84()
{
  unint64_t result;

  result = qword_2634A0;
  if (!qword_2634A0)
  {
    result = swift_getWitnessTable(&unk_1E7B54, &type metadata for ListItemViewModel.Layout.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2634A0);
  }
  return result;
}

unint64_t sub_B0ECC()
{
  unint64_t result;

  result = qword_2634A8;
  if (!qword_2634A8)
  {
    result = swift_getWitnessTable(&unk_1E7B7C, &type metadata for ListItemViewModel.Layout.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2634A8);
  }
  return result;
}

uint64_t sub_B0F10(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  char v8;

  if (a1 == 0x72616C75676572 && a2 == 0xE700000000000000)
  {
    v5 = 0xE700000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x72616C75676572, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x656E6961746E6F63 && a2 == 0xE900000000000064)
  {
    v7 = 0xE900000000000064;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656E6961746E6F63, 0xE900000000000064, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 1819042164 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease(0xE400000000000000);
    return 2;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(1819042164, 0xE400000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t PageUpdateAction.actionMetrics.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for ActionMetrics(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t BooksAlertAction.title.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for BooksAlertAction(0) + 20));
  v2 = *v1;
  swift_bridgeObjectRetain(v1[1]);
  return v2;
}

uint64_t type metadata accessor for BooksAlertAction(uint64_t a1)
{
  return sub_1FE90(a1, qword_263578, (uint64_t)&nominal type descriptor for BooksAlertAction);
}

uint64_t BooksAlertAction.message.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for BooksAlertAction(0) + 24));
  v2 = *v1;
  swift_bridgeObjectRetain(v1[1]);
  return v2;
}

uint64_t BooksAlertAction.buttons.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = type metadata accessor for BooksAlertAction(0);
  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + *(int *)(v1 + 28)));
}

uint64_t BooksAlertAction.dialogData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for BooksAlertAction(0) + 32);
  v4 = type metadata accessor for DialogData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

_QWORD *BooksAlertAction.actionOrigin.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _OWORD v16[2];
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  char v24;

  v3 = v1 + *(int *)(type metadata accessor for BooksAlertAction(0) + 36);
  v4 = *(_OWORD *)(v3 + 112);
  v5 = *(_OWORD *)(v3 + 80);
  v21 = *(_OWORD *)(v3 + 96);
  v22 = v4;
  v6 = *(_OWORD *)(v3 + 112);
  v23 = *(_OWORD *)(v3 + 128);
  v7 = *(_OWORD *)(v3 + 48);
  v9 = *(_OWORD *)(v3 + 16);
  v17 = *(_OWORD *)(v3 + 32);
  v8 = v17;
  v18 = v7;
  v10 = *(_OWORD *)(v3 + 48);
  v11 = *(_OWORD *)(v3 + 80);
  v19 = *(_OWORD *)(v3 + 64);
  v12 = v19;
  v20 = v11;
  v13 = *(_OWORD *)(v3 + 16);
  v16[0] = *(_OWORD *)v3;
  v14 = v16[0];
  v16[1] = v13;
  *(_OWORD *)(a1 + 96) = v21;
  *(_OWORD *)(a1 + 112) = v6;
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(v3 + 128);
  *(_OWORD *)(a1 + 32) = v8;
  *(_OWORD *)(a1 + 48) = v10;
  *(_OWORD *)(a1 + 64) = v12;
  *(_OWORD *)(a1 + 80) = v5;
  v24 = *(_BYTE *)(v3 + 144);
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(v3 + 144);
  *(_OWORD *)a1 = v14;
  *(_OWORD *)(a1 + 16) = v9;
  return sub_5D30(v16);
}

double BooksAlertAction.init(actionMetrics:title:message:buttons:dialogType:actionOrigin:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, __int128 *a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  int *v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  double result;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  char v53;

  v42 = a6;
  v41 = a5;
  v39 = a4;
  v38 = a3;
  v37 = a2;
  v13 = type metadata accessor for DialogType(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = type metadata accessor for DialogData(0);
  v40 = *(_QWORD *)(v43 - 8);
  __chkstk_darwin(v43);
  v18 = (char *)&v36 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = a8[7];
  v50 = a8[6];
  v51 = v19;
  v52 = a8[8];
  v53 = *((_BYTE *)a8 + 144);
  v20 = a8[3];
  v46 = a8[2];
  v47 = v20;
  v21 = a8[5];
  v48 = a8[4];
  v49 = v21;
  v22 = a8[1];
  v44 = *a8;
  v45 = v22;
  v23 = type metadata accessor for ActionMetrics(0);
  v24 = *(_QWORD *)(v23 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 16))(a9, a1, v23);
  v25 = (int *)type metadata accessor for BooksAlertAction(0);
  v26 = (_QWORD *)(a9 + v25[5]);
  v27 = v38;
  *v26 = v37;
  v26[1] = v27;
  v28 = (_QWORD *)(a9 + v25[6]);
  v29 = v41;
  *v28 = v39;
  v28[1] = v29;
  *(_QWORD *)(a9 + v25[7]) = v42;
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, a7, v13);
  DialogData.init(dialogType:)(v16);
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(a7, v13);
  (*(void (**)(uint64_t, uint64_t))(v24 + 8))(a1, v23);
  (*(void (**)(uint64_t, char *, uint64_t))(v40 + 32))(a9 + v25[8], v18, v43);
  v30 = a9 + v25[9];
  v31 = v51;
  *(_OWORD *)(v30 + 96) = v50;
  *(_OWORD *)(v30 + 112) = v31;
  *(_OWORD *)(v30 + 128) = v52;
  *(_BYTE *)(v30 + 144) = v53;
  v32 = v47;
  *(_OWORD *)(v30 + 32) = v46;
  *(_OWORD *)(v30 + 48) = v32;
  v33 = v49;
  *(_OWORD *)(v30 + 64) = v48;
  *(_OWORD *)(v30 + 80) = v33;
  result = *(double *)&v44;
  v35 = v45;
  *(_OWORD *)v30 = v44;
  *(_OWORD *)(v30 + 16) = v35;
  return result;
}

uint64_t sub_B1458()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_B1494 + 4 * byte_1E7D50[*v0]))(0x654D6E6F69746361, 0xED00007363697274);
}

uint64_t sub_B1494()
{
  return 0x656C746974;
}

uint64_t sub_B14A8()
{
  return 0x6567617373656DLL;
}

uint64_t sub_B14C0()
{
  return 0x736E6F74747562;
}

uint64_t sub_B14D8()
{
  return 0x6144676F6C616964;
}

uint64_t sub_B14F4()
{
  return 0x724F6E6F69746361;
}

uint64_t sub_B1514@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_B3C08(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_B1538(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_B1B10();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_B1560(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_B1B10();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t BooksAlertAction.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  char *v44;
  uint64_t v45;
  _QWORD *v46;
  _OWORD v47[9];
  char v48;
  char v49;

  v38 = a2;
  v40 = type metadata accessor for DialogData(0);
  v41 = *(_QWORD *)(v40 - 8);
  __chkstk_darwin(v40);
  v39 = (uint64_t *)((char *)&v37 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v42 = type metadata accessor for ActionMetrics(0);
  v4 = *(_QWORD *)(v42 - 8);
  __chkstk_darwin(v42);
  v43 = (uint64_t *)((char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v45 = sub_5440(&qword_2634B0);
  v6 = *(_QWORD *)(v45 - 8);
  __chkstk_darwin(v45);
  v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (int *)type metadata accessor for BooksAlertAction(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = a1[3];
  v12 = a1[4];
  sub_5480(a1, v13);
  v14 = sub_B1B10();
  v44 = v8;
  v15 = v46;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for BooksAlertAction.CodingKeys, &type metadata for BooksAlertAction.CodingKeys, v14, v13, v12);
  if (v15)
    return _s7BooksUI13AnyPagedFrameVwxx_0(a1);
  v46 = a1;
  v16 = (uint64_t)v11;
  v17 = v41;
  LOBYTE(v47[0]) = 0;
  v18 = sub_6FD0(&qword_2634C0, (uint64_t (*)(uint64_t))&type metadata accessor for ActionMetrics, (uint64_t)&protocol conformance descriptor for ActionMetrics);
  v19 = v42;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v43, v42, v47, v45, v42, v18);
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(v4 + 32))(v16, v43, v19);
  LOBYTE(v47[0]) = 1;
  v20 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v47, v45);
  v21 = (uint64_t *)(v16 + v9[5]);
  *v21 = v20;
  v21[1] = v22;
  LOBYTE(v47[0]) = 2;
  v23 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v47, v45);
  v24 = (uint64_t *)(v16 + v9[6]);
  *v24 = v23;
  v24[1] = v25;
  v26 = sub_5440(&qword_2634C8);
  v49 = 3;
  v27 = sub_B1B54();
  KeyedDecodingContainer.decode<A>(_:forKey:)(v47, v26, &v49, v45, v26, v27);
  v43 = 0;
  *(_QWORD *)(v16 + v9[7]) = *(_QWORD *)&v47[0];
  LOBYTE(v47[0]) = 4;
  v28 = sub_6FD0(&qword_2634E0, (uint64_t (*)(uint64_t))&type metadata accessor for DialogData, (uint64_t)&protocol conformance descriptor for DialogData);
  v29 = v40;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v39, v40, v47, v45, v40, v28);
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(v17 + 32))(v16 + v9[8], v39, v29);
  v49 = 5;
  v30 = sub_B1BE4();
  KeyedDecodingContainer.decode<A>(_:forKey:)(v47, &type metadata for ActionOrigin, &v49, v45, &type metadata for ActionOrigin, v30);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v44, v45);
  v31 = v16 + v9[9];
  v32 = v47[7];
  *(_OWORD *)(v31 + 96) = v47[6];
  *(_OWORD *)(v31 + 112) = v32;
  *(_OWORD *)(v31 + 128) = v47[8];
  *(_BYTE *)(v31 + 144) = v48;
  v33 = v47[3];
  *(_OWORD *)(v31 + 32) = v47[2];
  *(_OWORD *)(v31 + 48) = v33;
  v34 = v47[5];
  *(_OWORD *)(v31 + 64) = v47[4];
  *(_OWORD *)(v31 + 80) = v34;
  v35 = v47[1];
  *(_OWORD *)v31 = v47[0];
  *(_OWORD *)(v31 + 16) = v35;
  sub_1E428(v16, v38, type metadata accessor for BooksAlertAction);
  _s7BooksUI13AnyPagedFrameVwxx_0(v46);
  return sub_224DC(v16, type metadata accessor for BooksAlertAction);
}

unint64_t sub_B1B10()
{
  unint64_t result;

  result = qword_2634B8;
  if (!qword_2634B8)
  {
    result = swift_getWitnessTable(&unk_1E8158, &type metadata for BooksAlertAction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2634B8);
  }
  return result;
}

unint64_t sub_B1B54()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2634D0;
  if (!qword_2634D0)
  {
    v1 = sub_7EF8(&qword_2634C8);
    sub_6FD0(&qword_2634D8, type metadata accessor for BooksAlertAction.Button, (uint64_t)&protocol conformance descriptor for BooksAlertAction.Button);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_2634D0);
  }
  return result;
}

uint64_t type metadata accessor for BooksAlertAction.Button(uint64_t a1)
{
  return sub_1FE90(a1, qword_263618, (uint64_t)&nominal type descriptor for BooksAlertAction.Button);
}

unint64_t sub_B1BE4()
{
  unint64_t result;

  result = qword_2634E8;
  if (!qword_2634E8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ActionOrigin, &type metadata for ActionOrigin);
    atomic_store(result, (unint64_t *)&qword_2634E8);
  }
  return result;
}

uint64_t sub_B1C28@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return BooksAlertAction.init(from:)(a1, a2);
}

uint64_t BooksAlertAction.Button.action.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  _BYTE v4[40];

  sub_B1C78(v1 + 32, (uint64_t)v4);
  return sub_B1CB4((uint64_t)v4, a1);
}

uint64_t sub_B1C78(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for _CodeAnyActionModel_OrNil(a2, a1);
  return a2;
}

uint64_t sub_B1CB4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_5440(&qword_25E820);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t BooksAlertAction.Button.action.setter(uint64_t a1)
{
  uint64_t v1;

  return sub_3004C(a1, v1 + 32);
}

uint64_t BooksAlertAction.Button.dialogActionData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for BooksAlertAction.Button(0) + 28);
  v4 = type metadata accessor for DialogActionData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t BooksAlertAction.Button.init(title:role:action:dialogActionType:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  _BYTE v30[40];
  _OWORD v31[2];
  uint64_t v32;

  v26 = a4;
  v13 = type metadata accessor for DialogActionData(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = 0;
  memset(v31, 0, sizeof(v31));
  sub_300A0((uint64_t)v31, (uint64_t)v30);
  v29 = 0;
  v27 = 0u;
  v28 = 0u;
  sub_3004C((uint64_t)v30, (uint64_t)&v27);
  v17 = v28;
  *(_OWORD *)(a7 + 32) = v27;
  *(_OWORD *)(a7 + 48) = v17;
  *(_QWORD *)(a7 + 64) = v29;
  sub_B1ED8((uint64_t)v31);
  *(_QWORD *)a7 = a1;
  *(_QWORD *)(a7 + 8) = a2;
  sub_300A0(a5, (uint64_t)v31);
  sub_302AC((_QWORD *)(a7 + 32));
  sub_300A0((uint64_t)v31, (uint64_t)v30);
  v29 = 0;
  v27 = 0u;
  v28 = 0u;
  sub_3004C((uint64_t)v30, (uint64_t)&v27);
  v18 = v28;
  *(_OWORD *)(a7 + 32) = v27;
  *(_OWORD *)(a7 + 48) = v18;
  *(_QWORD *)(a7 + 64) = v29;
  v19 = sub_B1ED8((uint64_t)v31);
  v20 = v26;
  *(_QWORD *)(a7 + 16) = a3;
  *(_QWORD *)(a7 + 24) = v20;
  v21 = DialogActionType.rawValue.getter(v19);
  DialogActionData.init(dialogActionType:)(v21);
  v22 = type metadata accessor for DialogActionType(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 8))(a6, v22);
  sub_B1ED8(a5);
  v23 = type metadata accessor for BooksAlertAction.Button(0);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v14 + 32))(a7 + *(int *)(v23 + 28), v16, v13);
}

uint64_t sub_B1ED8(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_5440(&qword_25E820);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_B1F18()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_B1F44 + 4 * byte_1E7D56[*v0]))(0x656C746974, 0xE500000000000000);
}

uint64_t sub_B1F44()
{
  return 1701605234;
}

uint64_t sub_B1F54()
{
  return 0x6E6F69746361;
}

unint64_t sub_B1F68()
{
  return 0xD000000000000010;
}

uint64_t sub_B1F84@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_B3EC8(a1, a2);
  *a3 = result;
  return result;
}

void sub_B1FA8(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

uint64_t sub_B1FB4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_B23A0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_B1FDC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_B23A0();
  return CodingKey.debugDescription.getter(a1, v2);
}

_QWORD *BooksAlertAction.Button.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  char *v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  _BYTE v39[40];
  _OWORD v40[2];
  uint64_t v41;
  _QWORD *v42;

  v30 = a2;
  v3 = type metadata accessor for DialogActionData(0);
  v31 = *(_QWORD *)(v3 - 8);
  v32 = v3;
  __chkstk_darwin(v3);
  v5 = (uint64_t *)((char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v33 = sub_5440(&qword_2634F0);
  v6 = *(_QWORD *)(v33 - 8);
  __chkstk_darwin(v33);
  v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for BooksAlertAction.Button(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = v11 + 32;
  v41 = 0;
  memset(v40, 0, sizeof(v40));
  sub_300A0((uint64_t)v40, (uint64_t)v39);
  v38 = 0;
  v36 = 0u;
  v37 = 0u;
  sub_3004C((uint64_t)v39, (uint64_t)&v36);
  v12 = v37;
  *((_OWORD *)v11 + 2) = v36;
  *((_OWORD *)v11 + 3) = v12;
  *((_QWORD *)v11 + 8) = v38;
  sub_B1ED8((uint64_t)v40);
  v13 = a1[3];
  v14 = a1[4];
  v34 = a1;
  sub_5480(a1, v13);
  v15 = sub_B23A0();
  v16 = v42;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for BooksAlertAction.Button.CodingKeys, &type metadata for BooksAlertAction.Button.CodingKeys, v15, v13, v14);
  if (v16)
  {
    v21 = v35;
    _s7BooksUI13AnyPagedFrameVwxx_0(v34);
    return sub_302AC(v21);
  }
  else
  {
    v29 = v9;
    v17 = v6;
    v42 = v5;
    v19 = v31;
    v18 = v32;
    LOBYTE(v40[0]) = 0;
    v20 = v33;
    *(_QWORD *)v11 = KeyedDecodingContainer.decode(_:forKey:)(v40, v33);
    *((_QWORD *)v11 + 1) = v22;
    v39[0] = 1;
    v23 = sub_B23E4();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&type metadata for BooksAlertAction.ButtonRole, v39, v20, &type metadata for BooksAlertAction.ButtonRole, v23);
    *((_OWORD *)v11 + 1) = v40[0];
    v39[0] = 2;
    v24 = sub_B2428();
    v28 = 0;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v40, &type metadata for _CodeAnyActionModel_OrNil, v39, v20, &type metadata for _CodeAnyActionModel_OrNil, v24);
    sub_B246C((uint64_t)v40, (uint64_t)v35);
    LOBYTE(v40[0]) = 3;
    v25 = sub_6FD0(&qword_263510, (uint64_t (*)(uint64_t))&type metadata accessor for DialogActionData, (uint64_t)&protocol conformance descriptor for DialogActionData);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v42, v18, v40, v20, v18, v25);
    (*(void (**)(char *, uint64_t))(v17 + 8))(v8, v20);
    v26 = v34;
    (*(void (**)(char *, _QWORD *, uint64_t))(v19 + 32))(&v11[*(int *)(v29 + 28)], v42, v18);
    sub_1E428((uint64_t)v11, v30, type metadata accessor for BooksAlertAction.Button);
    _s7BooksUI13AnyPagedFrameVwxx_0(v26);
    return (_QWORD *)sub_224DC((uint64_t)v11, type metadata accessor for BooksAlertAction.Button);
  }
}

unint64_t sub_B23A0()
{
  unint64_t result;

  result = qword_2634F8;
  if (!qword_2634F8)
  {
    result = swift_getWitnessTable(&unk_1E8108, &type metadata for BooksAlertAction.Button.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2634F8);
  }
  return result;
}

unint64_t sub_B23E4()
{
  unint64_t result;

  result = qword_263500;
  if (!qword_263500)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for BooksAlertAction.ButtonRole, &type metadata for BooksAlertAction.ButtonRole);
    atomic_store(result, (unint64_t *)&qword_263500);
  }
  return result;
}

unint64_t sub_B2428()
{
  unint64_t result;

  result = qword_263508;
  if (!qword_263508)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for _CodeAnyActionModel_OrNil, &type metadata for _CodeAnyActionModel_OrNil);
    atomic_store(result, (unint64_t *)&qword_263508);
  }
  return result;
}

uint64_t sub_B246C(uint64_t a1, uint64_t a2)
{
  assignWithTake for _CodeAnyActionModel_OrNil(a2, a1);
  return a2;
}

_QWORD *sub_B24A8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return BooksAlertAction.Button.init(from:)(a1, a2);
}

uint64_t static BooksAlertAction.ButtonRole.cancel.getter()
{
  return 0x6C65636E6163;
}

uint64_t static BooksAlertAction.ButtonRole.destructive.getter()
{
  return 0x7463757274736564;
}

uint64_t BooksAlertAction.ButtonRole.rawValue.getter(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRetain(a2);
  return a1;
}

_QWORD *sub_B2520@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = result[1];
  *a2 = *result;
  a2[1] = v2;
  return result;
}

unint64_t sub_B2530()
{
  unint64_t result;

  result = qword_263518;
  if (!qword_263518)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for BooksAlertAction.ButtonRole, &type metadata for BooksAlertAction.ButtonRole);
    atomic_store(result, (unint64_t *)&qword_263518);
  }
  return result;
}

Swift::Int sub_B2574()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[9];

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)(v4, 0);
  swift_bridgeObjectRetain(v2);
  String.hash(into:)(v4, v1, v2);
  swift_bridgeObjectRelease(v2);
  return Hasher._finalize()();
}

uint64_t sub_B25CC(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v4 = *v1;
  v3 = v1[1];
  swift_bridgeObjectRetain(v3);
  String.hash(into:)(a1, v4, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_B2610(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[9];

  v2 = *v1;
  v3 = v1[1];
  Hasher.init(_seed:)(v5, a1);
  swift_bridgeObjectRetain(v3);
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_B2664(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_B405C();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_B26C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _BYTE v4[40];

  sub_B1C78(a1 + 32, (uint64_t)v4);
  return sub_B1CB4((uint64_t)v4, a2);
}

uint64_t sub_B26FC(uint64_t a1, uint64_t a2)
{
  _BYTE v4[40];

  sub_300A0(a1, (uint64_t)v4);
  return sub_3004C((uint64_t)v4, a2 + 32);
}

uint64_t *initializeBufferWithCopyOfBuffer for BooksAlertAction(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  void (*v22)(char *, char *, uint64_t);
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v35 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v35 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v35);
  }
  else
  {
    v7 = type metadata accessor for ActionMetrics(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = a3[6];
    v10 = (uint64_t *)((char *)a1 + v8);
    v11 = (uint64_t *)((char *)a2 + v8);
    v12 = v11[1];
    *v10 = *v11;
    v10[1] = v12;
    v13 = (uint64_t *)((char *)a1 + v9);
    v14 = (uint64_t *)((char *)a2 + v9);
    v15 = v14[1];
    *v13 = *v14;
    v13[1] = v15;
    v16 = a3[7];
    v17 = a3[8];
    v18 = *(uint64_t *)((char *)a2 + v16);
    *(uint64_t *)((char *)a1 + v16) = v18;
    v19 = (char *)a1 + v17;
    v20 = (char *)a2 + v17;
    v21 = type metadata accessor for DialogData(0);
    v22 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 16);
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRetain(v15);
    swift_bridgeObjectRetain(v18);
    v22(v19, v20, v21);
    v23 = a3[9];
    v24 = (char *)a1 + v23;
    v25 = (char *)a2 + v23;
    v26 = *((_QWORD *)v25 + 1);
    *(_QWORD *)v24 = *(_QWORD *)v25;
    *((_QWORD *)v24 + 1) = v26;
    v27 = *((_QWORD *)v25 + 3);
    *((_QWORD *)v24 + 2) = *((_QWORD *)v25 + 2);
    *((_QWORD *)v24 + 3) = v27;
    v28 = *((_QWORD *)v25 + 5);
    *((_QWORD *)v24 + 4) = *((_QWORD *)v25 + 4);
    *((_QWORD *)v24 + 5) = v28;
    v29 = *((_QWORD *)v25 + 7);
    *((_QWORD *)v24 + 6) = *((_QWORD *)v25 + 6);
    *((_QWORD *)v24 + 7) = v29;
    v30 = *((_QWORD *)v25 + 9);
    *((_QWORD *)v24 + 8) = *((_QWORD *)v25 + 8);
    *((_QWORD *)v24 + 9) = v30;
    v31 = *((_QWORD *)v25 + 11);
    *((_QWORD *)v24 + 10) = *((_QWORD *)v25 + 10);
    *((_QWORD *)v24 + 11) = v31;
    v32 = *((_QWORD *)v25 + 13);
    *((_QWORD *)v24 + 12) = *((_QWORD *)v25 + 12);
    *((_QWORD *)v24 + 13) = v32;
    v33 = *((_QWORD *)v25 + 15);
    *((_QWORD *)v24 + 14) = *((_QWORD *)v25 + 14);
    *((_QWORD *)v24 + 15) = v33;
    v34 = *((_QWORD *)v25 + 17);
    *((_QWORD *)v24 + 16) = *((_QWORD *)v25 + 16);
    *((_QWORD *)v24 + 17) = v34;
    v24[144] = v25[144];
    swift_bridgeObjectRetain(v26);
    swift_bridgeObjectRetain(v27);
    swift_bridgeObjectRetain(v28);
    swift_bridgeObjectRetain(v29);
    swift_bridgeObjectRetain(v30);
    swift_bridgeObjectRetain(v31);
    swift_bridgeObjectRetain(v32);
    swift_bridgeObjectRetain(v33);
    swift_bridgeObjectRetain(v34);
  }
  return a1;
}

uint64_t destroy for BooksAlertAction(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = type metadata accessor for ActionMetrics(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[5] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[7]));
  v5 = a1 + a2[8];
  v6 = type metadata accessor for DialogData(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = (_QWORD *)(a1 + a2[9]);
  swift_bridgeObjectRelease(v7[1]);
  swift_bridgeObjectRelease(v7[3]);
  swift_bridgeObjectRelease(v7[5]);
  swift_bridgeObjectRelease(v7[7]);
  swift_bridgeObjectRelease(v7[9]);
  swift_bridgeObjectRelease(v7[11]);
  swift_bridgeObjectRelease(v7[13]);
  swift_bridgeObjectRelease(v7[15]);
  return swift_bridgeObjectRelease(v7[17]);
}

uint64_t initializeWithCopy for BooksAlertAction(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v6 = type metadata accessor for ActionMetrics(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = (_QWORD *)(a1 + v7);
  v10 = (_QWORD *)(a2 + v7);
  v11 = v10[1];
  *v9 = *v10;
  v9[1] = v11;
  v12 = (_QWORD *)(a1 + v8);
  v13 = (_QWORD *)(a2 + v8);
  v14 = v13[1];
  *v12 = *v13;
  v12[1] = v14;
  v15 = a3[7];
  v16 = a3[8];
  v17 = *(_QWORD *)(a2 + v15);
  *(_QWORD *)(a1 + v15) = v17;
  v18 = a1 + v16;
  v19 = a2 + v16;
  v20 = type metadata accessor for DialogData(0);
  v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 16);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRetain(v17);
  v21(v18, v19, v20);
  v22 = a3[9];
  v23 = a1 + v22;
  v24 = a2 + v22;
  v25 = *(_QWORD *)(v24 + 8);
  *(_QWORD *)v23 = *(_QWORD *)v24;
  *(_QWORD *)(v23 + 8) = v25;
  v26 = *(_QWORD *)(v24 + 24);
  *(_QWORD *)(v23 + 16) = *(_QWORD *)(v24 + 16);
  *(_QWORD *)(v23 + 24) = v26;
  v27 = *(_QWORD *)(v24 + 40);
  *(_QWORD *)(v23 + 32) = *(_QWORD *)(v24 + 32);
  *(_QWORD *)(v23 + 40) = v27;
  v28 = *(_QWORD *)(v24 + 56);
  *(_QWORD *)(v23 + 48) = *(_QWORD *)(v24 + 48);
  *(_QWORD *)(v23 + 56) = v28;
  v29 = *(_QWORD *)(v24 + 72);
  *(_QWORD *)(v23 + 64) = *(_QWORD *)(v24 + 64);
  *(_QWORD *)(v23 + 72) = v29;
  v30 = *(_QWORD *)(v24 + 88);
  *(_QWORD *)(v23 + 80) = *(_QWORD *)(v24 + 80);
  *(_QWORD *)(v23 + 88) = v30;
  v31 = *(_QWORD *)(v24 + 104);
  *(_QWORD *)(v23 + 96) = *(_QWORD *)(v24 + 96);
  *(_QWORD *)(v23 + 104) = v31;
  v32 = *(_QWORD *)(v24 + 120);
  *(_QWORD *)(v23 + 112) = *(_QWORD *)(v24 + 112);
  *(_QWORD *)(v23 + 120) = v32;
  v33 = *(_QWORD *)(v24 + 136);
  *(_QWORD *)(v23 + 128) = *(_QWORD *)(v24 + 128);
  *(_QWORD *)(v23 + 136) = v33;
  *(_BYTE *)(v23 + 144) = *(_BYTE *)(v24 + 144);
  swift_bridgeObjectRetain(v25);
  swift_bridgeObjectRetain(v26);
  swift_bridgeObjectRetain(v27);
  swift_bridgeObjectRetain(v28);
  swift_bridgeObjectRetain(v29);
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRetain(v31);
  swift_bridgeObjectRetain(v32);
  swift_bridgeObjectRetain(v33);
  return a1;
}

uint64_t assignWithCopy for BooksAlertAction(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v6 = type metadata accessor for ActionMetrics(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  *v8 = *v9;
  v10 = v9[1];
  v11 = v8[1];
  v8[1] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  v12 = a3[6];
  v13 = (_QWORD *)(a1 + v12);
  v14 = (_QWORD *)(a2 + v12);
  *v13 = *v14;
  v15 = v14[1];
  v16 = v13[1];
  v13[1] = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16);
  v17 = a3[7];
  v18 = *(_QWORD *)(a2 + v17);
  v19 = *(_QWORD *)(a1 + v17);
  *(_QWORD *)(a1 + v17) = v18;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRelease(v19);
  v20 = a3[8];
  v21 = a1 + v20;
  v22 = a2 + v20;
  v23 = type metadata accessor for DialogData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 24))(v21, v22, v23);
  v24 = a3[9];
  v25 = a1 + v24;
  v26 = a2 + v24;
  *(_QWORD *)v25 = *(_QWORD *)(a2 + v24);
  v27 = *(_QWORD *)(a2 + v24 + 8);
  v28 = *(_QWORD *)(a1 + v24 + 8);
  *(_QWORD *)(v25 + 8) = v27;
  swift_bridgeObjectRetain(v27);
  swift_bridgeObjectRelease(v28);
  *(_QWORD *)(v25 + 16) = *(_QWORD *)(v26 + 16);
  v29 = *(_QWORD *)(v26 + 24);
  v30 = *(_QWORD *)(v25 + 24);
  *(_QWORD *)(v25 + 24) = v29;
  swift_bridgeObjectRetain(v29);
  swift_bridgeObjectRelease(v30);
  *(_QWORD *)(v25 + 32) = *(_QWORD *)(v26 + 32);
  v31 = *(_QWORD *)(v26 + 40);
  v32 = *(_QWORD *)(v25 + 40);
  *(_QWORD *)(v25 + 40) = v31;
  swift_bridgeObjectRetain(v31);
  swift_bridgeObjectRelease(v32);
  *(_QWORD *)(v25 + 48) = *(_QWORD *)(v26 + 48);
  v33 = *(_QWORD *)(v26 + 56);
  v34 = *(_QWORD *)(v25 + 56);
  *(_QWORD *)(v25 + 56) = v33;
  swift_bridgeObjectRetain(v33);
  swift_bridgeObjectRelease(v34);
  *(_QWORD *)(v25 + 64) = *(_QWORD *)(v26 + 64);
  v35 = *(_QWORD *)(v26 + 72);
  v36 = *(_QWORD *)(v25 + 72);
  *(_QWORD *)(v25 + 72) = v35;
  swift_bridgeObjectRetain(v35);
  swift_bridgeObjectRelease(v36);
  *(_QWORD *)(v25 + 80) = *(_QWORD *)(v26 + 80);
  v37 = *(_QWORD *)(v26 + 88);
  v38 = *(_QWORD *)(v25 + 88);
  *(_QWORD *)(v25 + 88) = v37;
  swift_bridgeObjectRetain(v37);
  swift_bridgeObjectRelease(v38);
  *(_QWORD *)(v25 + 96) = *(_QWORD *)(v26 + 96);
  v39 = *(_QWORD *)(v26 + 104);
  v40 = *(_QWORD *)(v25 + 104);
  *(_QWORD *)(v25 + 104) = v39;
  swift_bridgeObjectRetain(v39);
  swift_bridgeObjectRelease(v40);
  *(_QWORD *)(v25 + 112) = *(_QWORD *)(v26 + 112);
  v41 = *(_QWORD *)(v26 + 120);
  v42 = *(_QWORD *)(v25 + 120);
  *(_QWORD *)(v25 + 120) = v41;
  swift_bridgeObjectRetain(v41);
  swift_bridgeObjectRelease(v42);
  *(_QWORD *)(v25 + 128) = *(_QWORD *)(v26 + 128);
  v43 = *(_QWORD *)(v26 + 136);
  v44 = *(_QWORD *)(v25 + 136);
  *(_QWORD *)(v25 + 136) = v43;
  swift_bridgeObjectRetain(v43);
  swift_bridgeObjectRelease(v44);
  *(_BYTE *)(v25 + 144) = *(_BYTE *)(v26 + 144);
  return a1;
}

uint64_t initializeWithTake for BooksAlertAction(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;

  v6 = type metadata accessor for ActionMetrics(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  v8 = a3[8];
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for DialogData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
  v12 = a3[9];
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = *(_OWORD *)(v14 + 112);
  *(_OWORD *)(v13 + 96) = *(_OWORD *)(v14 + 96);
  *(_OWORD *)(v13 + 112) = v15;
  *(_OWORD *)(v13 + 128) = *(_OWORD *)(v14 + 128);
  *(_BYTE *)(v13 + 144) = *(_BYTE *)(v14 + 144);
  v16 = *(_OWORD *)(v14 + 48);
  *(_OWORD *)(v13 + 32) = *(_OWORD *)(v14 + 32);
  *(_OWORD *)(v13 + 48) = v16;
  v17 = *(_OWORD *)(v14 + 80);
  *(_OWORD *)(v13 + 64) = *(_OWORD *)(v14 + 64);
  *(_OWORD *)(v13 + 80) = v17;
  v18 = *(_OWORD *)(v14 + 16);
  *(_OWORD *)v13 = *(_OWORD *)v14;
  *(_OWORD *)(v13 + 16) = v18;
  return a1;
}

uint64_t assignWithTake for BooksAlertAction(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v6 = type metadata accessor for ActionMetrics(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = (_QWORD *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v11 = *v9;
  v10 = v9[1];
  v12 = v8[1];
  *v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease(v12);
  v13 = a3[6];
  v14 = (_QWORD *)(a1 + v13);
  v15 = (uint64_t *)(a2 + v13);
  v17 = *v15;
  v16 = v15[1];
  v18 = v14[1];
  *v14 = v17;
  v14[1] = v16;
  swift_bridgeObjectRelease(v18);
  v19 = a3[7];
  v20 = *(_QWORD *)(a1 + v19);
  *(_QWORD *)(a1 + v19) = *(_QWORD *)(a2 + v19);
  swift_bridgeObjectRelease(v20);
  v21 = a3[8];
  v22 = a1 + v21;
  v23 = a2 + v21;
  v24 = type metadata accessor for DialogData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 40))(v22, v23, v24);
  v25 = a3[9];
  v26 = a1 + v25;
  v27 = a2 + v25;
  v28 = *(_QWORD *)(v27 + 8);
  v29 = *(_QWORD *)(a1 + v25 + 8);
  *(_QWORD *)v26 = *(_QWORD *)v27;
  *(_QWORD *)(v26 + 8) = v28;
  swift_bridgeObjectRelease(v29);
  v30 = *(_QWORD *)(v27 + 24);
  v31 = *(_QWORD *)(v26 + 24);
  *(_QWORD *)(v26 + 16) = *(_QWORD *)(v27 + 16);
  *(_QWORD *)(v26 + 24) = v30;
  swift_bridgeObjectRelease(v31);
  v32 = *(_QWORD *)(v27 + 40);
  v33 = *(_QWORD *)(v26 + 40);
  *(_QWORD *)(v26 + 32) = *(_QWORD *)(v27 + 32);
  *(_QWORD *)(v26 + 40) = v32;
  swift_bridgeObjectRelease(v33);
  v34 = *(_QWORD *)(v27 + 56);
  v35 = *(_QWORD *)(v26 + 56);
  *(_QWORD *)(v26 + 48) = *(_QWORD *)(v27 + 48);
  *(_QWORD *)(v26 + 56) = v34;
  swift_bridgeObjectRelease(v35);
  v36 = *(_QWORD *)(v27 + 72);
  v37 = *(_QWORD *)(v26 + 72);
  *(_QWORD *)(v26 + 64) = *(_QWORD *)(v27 + 64);
  *(_QWORD *)(v26 + 72) = v36;
  swift_bridgeObjectRelease(v37);
  v38 = *(_QWORD *)(v27 + 88);
  v39 = *(_QWORD *)(v26 + 88);
  *(_QWORD *)(v26 + 80) = *(_QWORD *)(v27 + 80);
  *(_QWORD *)(v26 + 88) = v38;
  swift_bridgeObjectRelease(v39);
  v40 = *(_QWORD *)(v27 + 104);
  v41 = *(_QWORD *)(v26 + 104);
  *(_QWORD *)(v26 + 96) = *(_QWORD *)(v27 + 96);
  *(_QWORD *)(v26 + 104) = v40;
  swift_bridgeObjectRelease(v41);
  v42 = *(_QWORD *)(v27 + 120);
  v43 = *(_QWORD *)(v26 + 120);
  *(_QWORD *)(v26 + 112) = *(_QWORD *)(v27 + 112);
  *(_QWORD *)(v26 + 120) = v42;
  swift_bridgeObjectRelease(v43);
  v44 = *(_QWORD *)(v27 + 136);
  v45 = *(_QWORD *)(v26 + 136);
  *(_QWORD *)(v26 + 128) = *(_QWORD *)(v27 + 128);
  *(_QWORD *)(v26 + 136) = v44;
  swift_bridgeObjectRelease(v45);
  *(_BYTE *)(v26 + 144) = *(_BYTE *)(v27 + 144);
  return a1;
}

uint64_t getEnumTagSinglePayload for BooksAlertAction(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_B2FC0);
}

uint64_t sub_B2FC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  unint64_t v11;

  v6 = type metadata accessor for ActionMetrics(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v8 = type metadata accessor for DialogData(0);
    v10 = a1 + *(int *)(a3 + 32);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
    return v9(v10, a2, v8);
  }
  v11 = *(_QWORD *)(a1 + *(int *)(a3 + 28));
  if (v11 >= 0xFFFFFFFF)
    LODWORD(v11) = -1;
  return (v11 + 1);
}

uint64_t storeEnumTagSinglePayload for BooksAlertAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_B3074);
}

uint64_t sub_B3074(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  result = type metadata accessor for ActionMetrics(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(_QWORD *)(a1 + *(int *)(a4 + 28)) = (a2 - 1);
      return result;
    }
    v10 = type metadata accessor for DialogData(0);
    v12 = a1 + *(int *)(a4 + 32);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t sub_B3118(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[6];

  result = type metadata accessor for ActionMetrics(319);
  if (v3 <= 0x3F)
  {
    v5[0] = *(_QWORD *)(result - 8) + 64;
    v5[1] = &unk_1E7F18;
    v5[2] = &unk_1E7F18;
    v5[3] = (char *)&value witness table for Builtin.BridgeObject + 64;
    result = type metadata accessor for DialogData(319);
    if (v4 <= 0x3F)
    {
      v5[4] = *(_QWORD *)(result - 8) + 64;
      v5[5] = &unk_1E7F30;
      swift_initStructMetadata(a1, 256, 6, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for BooksAlertAction.Button(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v12 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain(v12);
  }
  else
  {
    v7 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v7;
    v8 = a2[3];
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_QWORD *)(a1 + 24) = v8;
    v9 = a2 + 4;
    v10 = a2[7];
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    if (v10)
    {
      v11 = a2[8];
      *(_QWORD *)(a1 + 56) = v10;
      *(_QWORD *)(a1 + 64) = v11;
      (**(void (***)(uint64_t, uint64_t, uint64_t))(v10 - 8))(a1 + 32, (uint64_t)(a2 + 4), v10);
    }
    else
    {
      v13 = *((_OWORD *)a2 + 3);
      *(_OWORD *)(a1 + 32) = *v9;
      *(_OWORD *)(a1 + 48) = v13;
      *(_QWORD *)(a1 + 64) = a2[8];
    }
    v14 = *(int *)(a3 + 28);
    v15 = a1 + v14;
    v16 = (uint64_t)a2 + v14;
    v17 = type metadata accessor for DialogActionData(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v15, v16, v17);
  }
  return a1;
}

uint64_t destroy for BooksAlertAction.Button(_QWORD *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;

  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  if (a1[7])
    _s7BooksUI13AnyPagedFrameVwxx_0(a1 + 4);
  v4 = (char *)a1 + *(int *)(a2 + 28);
  v5 = type metadata accessor for DialogActionData(0);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t initializeWithCopy for BooksAlertAction.Button(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;

  v6 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v6;
  v7 = a2[3];
  *(_QWORD *)(a1 + 16) = a2[2];
  *(_QWORD *)(a1 + 24) = v7;
  v8 = a2 + 4;
  v9 = a2[7];
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  if (v9)
  {
    v10 = a2[8];
    *(_QWORD *)(a1 + 56) = v9;
    *(_QWORD *)(a1 + 64) = v10;
    (**(void (***)(uint64_t, _QWORD *, uint64_t))(v9 - 8))(a1 + 32, v8, v9);
  }
  else
  {
    v11 = *((_OWORD *)v8 + 1);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)v8;
    *(_OWORD *)(a1 + 48) = v11;
    *(_QWORD *)(a1 + 64) = v8[4];
  }
  v12 = *(int *)(a3 + 28);
  v13 = a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = type metadata accessor for DialogActionData(0);
  (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
  return a1;
}

uint64_t assignWithCopy for BooksAlertAction.Button(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  v10 = *(_QWORD *)(a2 + 56);
  if (!*(_QWORD *)(a1 + 56))
  {
    if (v10)
    {
      *(_QWORD *)(a1 + 56) = v10;
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      (**(void (***)(uint64_t, uint64_t))(v10 - 8))(a1 + 32, a2 + 32);
      goto LABEL_8;
    }
LABEL_7:
    v11 = *(_OWORD *)(a2 + 32);
    v12 = *(_OWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 32) = v11;
    *(_OWORD *)(a1 + 48) = v12;
    goto LABEL_8;
  }
  if (!v10)
  {
    _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)(a1 + 32));
    goto LABEL_7;
  }
  sub_142F8((_QWORD *)(a1 + 32), (_QWORD *)(a2 + 32));
LABEL_8:
  v13 = *(int *)(a3 + 28);
  v14 = a1 + v13;
  v15 = a2 + v13;
  v16 = type metadata accessor for DialogActionData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 24))(v14, v15, v16);
  return a1;
}

uint64_t initializeWithTake for BooksAlertAction.Button(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v5;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v6 = *(int *)(a3 + 28);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for DialogActionData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  return a1;
}

uint64_t assignWithTake for BooksAlertAction.Button(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v8;
  swift_bridgeObjectRelease(v9);
  if (*(_QWORD *)(a1 + 56))
    _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)(a1 + 32));
  v10 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v10;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v11 = *(int *)(a3 + 28);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = type metadata accessor for DialogActionData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  return a1;
}

uint64_t getEnumTagSinglePayload for BooksAlertAction.Button(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_B3604);
}

uint64_t sub_B3604(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for DialogActionData(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 28), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for BooksAlertAction.Button(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_B368C);
}

uint64_t sub_B368C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for DialogActionData(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 28), a2, a2, v7);
  }
  return result;
}

uint64_t sub_B3700(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = &unk_1E7F50;
  v4[1] = &unk_1E7F18;
  v4[2] = &unk_1E7F68;
  result = type metadata accessor for DialogActionData(319);
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 4, v4, a1 + 16);
    return 0;
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for BooksAlertAction.ButtonRole(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t destroy for LibraryAssetState(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
}

_QWORD *assignWithCopy for BooksAlertAction.ButtonRole(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = *a2;
  v3 = a2[1];
  v4 = a1[1];
  a1[1] = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

_QWORD *assignWithTake for BooksAlertAction.ButtonRole(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  v4 = a1[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for BooksAlertAction.ButtonRole(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for BooksAlertAction.ButtonRole(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for BooksAlertAction.ButtonRole()
{
  return &type metadata for BooksAlertAction.ButtonRole;
}

uint64_t storeEnumTagSinglePayload for BooksAlertAction.Button.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_B390C + 4 * byte_1E7D5F[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_B3940 + 4 * byte_1E7D5A[v4]))();
}

uint64_t sub_B3940(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_B3948(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0xB3950);
  return result;
}

uint64_t sub_B395C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0xB3964);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_B3968(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_B3970(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BooksAlertAction.Button.CodingKeys()
{
  return &type metadata for BooksAlertAction.Button.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for BooksAlertAction.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_B39D8 + 4 * byte_1E7D69[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_B3A0C + 4 * byte_1E7D64[v4]))();
}

uint64_t sub_B3A0C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_B3A14(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0xB3A1CLL);
  return result;
}

uint64_t sub_B3A28(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0xB3A30);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_B3A34(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_B3A3C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BooksAlertAction.CodingKeys()
{
  return &type metadata for BooksAlertAction.CodingKeys;
}

unint64_t sub_B3A5C()
{
  unint64_t result;

  result = qword_263658;
  if (!qword_263658)
  {
    result = swift_getWitnessTable(&unk_1E8028, &type metadata for BooksAlertAction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_263658);
  }
  return result;
}

unint64_t sub_B3AA4()
{
  unint64_t result;

  result = qword_263660;
  if (!qword_263660)
  {
    result = swift_getWitnessTable(&unk_1E80E0, &type metadata for BooksAlertAction.Button.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_263660);
  }
  return result;
}

unint64_t sub_B3AEC()
{
  unint64_t result;

  result = qword_263668;
  if (!qword_263668)
  {
    result = swift_getWitnessTable(&unk_1E8050, &type metadata for BooksAlertAction.Button.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_263668);
  }
  return result;
}

unint64_t sub_B3B34()
{
  unint64_t result;

  result = qword_263670;
  if (!qword_263670)
  {
    result = swift_getWitnessTable(&unk_1E8078, &type metadata for BooksAlertAction.Button.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_263670);
  }
  return result;
}

unint64_t sub_B3B7C()
{
  unint64_t result;

  result = qword_263678;
  if (!qword_263678)
  {
    result = swift_getWitnessTable(&unk_1E7F98, &type metadata for BooksAlertAction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_263678);
  }
  return result;
}

unint64_t sub_B3BC4()
{
  unint64_t result;

  result = qword_263680;
  if (!qword_263680)
  {
    result = swift_getWitnessTable(&unk_1E7FC0, &type metadata for BooksAlertAction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_263680);
  }
  return result;
}

uint64_t sub_B3C08(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char v11;

  if (a1 == 0x654D6E6F69746361 && a2 == 0xED00007363697274)
  {
    v5 = 0xED00007363697274;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x654D6E6F69746361, 0xED00007363697274, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x656C746974 && a2 == 0xE500000000000000)
  {
    v7 = 0xE500000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656C746974, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x6567617373656DLL && a2 == 0xE700000000000000)
  {
    v8 = 0xE700000000000000;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6567617373656DLL, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x736E6F74747562 && a2 == 0xE700000000000000)
  {
    v9 = 0xE700000000000000;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x736E6F74747562, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_26;
  }
  if (a1 == 0x6144676F6C616964 && a2 == 0xEA00000000006174)
  {
    v10 = 0xEA00000000006174;
LABEL_32:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6144676F6C616964, 0xEA00000000006174, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_32;
  }
  if (a1 == 0x724F6E6F69746361 && a2 == 0xEC0000006E696769)
  {
    swift_bridgeObjectRelease(0xEC0000006E696769);
    return 5;
  }
  else
  {
    v11 = _stringCompareWithSmolCheck(_:_:expecting:)(0x724F6E6F69746361, 0xEC0000006E696769, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v11 & 1) != 0)
      return 5;
    else
      return 6;
  }
}

uint64_t sub_B3EC8(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  char v9;

  if (a1 == 0x656C746974 && a2 == 0xE500000000000000)
  {
    v5 = 0xE500000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656C746974, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 1701605234 && a2 == 0xE400000000000000)
  {
    v7 = 0xE400000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1701605234, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x6E6F69746361 && a2 == 0xE600000000000000)
  {
    v8 = 0xE600000000000000;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F69746361, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0xD000000000000010 && a2 == 0x80000000001FB830)
  {
    swift_bridgeObjectRelease(0x80000000001FB830);
    return 3;
  }
  else
  {
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x80000000001FB830, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v9 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

unint64_t sub_B405C()
{
  unint64_t result;

  result = qword_263688;
  if (!qword_263688)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for BooksAlertAction.ButtonRole, &type metadata for BooksAlertAction.ButtonRole);
    atomic_store(result, (unint64_t *)&qword_263688);
  }
  return result;
}

uint64_t SeriesQuickActionButtonViewModel.init(style:seriesInfo:seriesData:)@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  sub_21C88(a1, a4, type metadata accessor for SeriesQuickActionButtonViewModel.Style);
  v7 = type metadata accessor for SeriesQuickActionButtonViewModel(0);
  v8 = a4 + *(int *)(v7 + 20);
  v9 = type metadata accessor for SeriesData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v8, a3, v9);
  return sub_AC68(a2, a4 + *(int *)(v7 + 24));
}

uint64_t type metadata accessor for SeriesQuickActionButtonViewModel.Style(uint64_t a1)
{
  return sub_1FE90(a1, qword_2637A0, (uint64_t)&nominal type descriptor for SeriesQuickActionButtonViewModel.Style);
}

uint64_t type metadata accessor for SeriesQuickActionButtonViewModel(uint64_t a1)
{
  return sub_1FE90(a1, qword_2636F0, (uint64_t)&nominal type descriptor for SeriesQuickActionButtonViewModel);
}

uint64_t static SeriesQuickActionButtonViewModel.actionModelForOpenProductPage(for:cardInfo:seriesTitle:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t (*v44)(char *, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  _QWORD *v55;
  char *v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  __int128 v74;
  uint64_t v75;
  _UNKNOWN **v76;
  __int128 v77;
  uint64_t v78;
  uint64_t v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  uint64_t v86;
  uint64_t v87;
  char v88;

  v69 = a4;
  v64 = a3;
  v72 = a2;
  v63 = a1;
  v73 = a5;
  v71 = type metadata accessor for UUID(0);
  v70 = *(_QWORD *)(v71 - 8);
  __chkstk_darwin(v71);
  v65 = (char *)&v57 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = (int *)type metadata accessor for FlowAction(0);
  __chkstk_darwin(v6);
  v8 = (uint64_t *)((char *)&v57 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v62 = type metadata accessor for LinkActionType(0);
  v61 = *(_QWORD *)(v62 - 8);
  __chkstk_darwin(v62);
  v10 = (char *)&v57 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = type metadata accessor for ClickData.TargetType(0);
  v59 = *(_QWORD *)(v60 - 8);
  __chkstk_darwin(v60);
  v12 = (char *)&v57 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_5440(&qword_25E828);
  __chkstk_darwin(v13);
  v68 = (char *)&v57 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v67 = type metadata accessor for ActionMetrics(0);
  v66 = *(_QWORD *)(v67 - 8);
  __chkstk_darwin(v67);
  v16 = (char *)&v57 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_5440(&qword_2618C8);
  __chkstk_darwin(v17);
  v19 = (char *)&v57 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for CardInfo(0);
  v21 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20);
  v23 = (char *)&v57 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_B3D0(v72, (uint64_t)v19, &qword_2618C8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20) == 1)
  {
    v24 = sub_B414((uint64_t)v19, &qword_2618C8);
    static ActionMetrics.notInstrumented.getter(v24);
    v25 = type metadata accessor for EmptyAction(0);
    v26 = v73;
    v73[3] = v25;
    v26[4] = &protocol witness table for EmptyAction;
    sub_C404(v26);
    return EmptyAction.init(actionMetrics:)(v16);
  }
  else
  {
    v57 = v23;
    sub_21C88((uint64_t)v19, (uint64_t)v23, type metadata accessor for CardInfo);
    v28 = v63[3];
    v29 = v63[4];
    sub_5480(v63, v28);
    v30 = ContentInfo.id.getter(v28, *(_QWORD *)(v29 + 8));
    v72 = v31;
    v58 = v16;
    static ActionMetrics.notInstrumented.getter(v30);
    (*(void (**)(char *, _QWORD, uint64_t))(v59 + 104))(v12, enum case for ClickData.TargetType.navigate(_:), v60);
    (*(void (**)(char *, _QWORD, uint64_t))(v61 + 104))(v10, enum case for LinkActionType.click(_:), v62);
    v32 = (uint64_t)v68;
    ClickData.init(with:linkActionType:index:url:)(v12, v10, 0, 0, 0);
    v33 = type metadata accessor for ClickData(0);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56))(v32, 0, 1, v33);
    v75 = type metadata accessor for FlowAction.NewSingleCardDestination(0);
    v76 = &protocol witness table for FlowAction.NewSingleCardDestination;
    v34 = sub_C404(&v74);
    sub_B54C0((uint64_t)v23, (uint64_t)v34);
    v77 = xmmword_1E81B0;
    v35 = v69;
    v78 = v64;
    v79 = v69;
    v80 = 0u;
    v81 = 0u;
    v82 = 0u;
    v83 = 0u;
    v84 = 0u;
    v85 = 0u;
    v86 = v30;
    v87 = v72;
    v88 = 3;
    KeyedEncodingContainer.encode<A>(_:forKey:)(0.0);
    v36 = v73;
    v73[3] = v6;
    v36[4] = sub_B5504();
    v37 = sub_C404(v36);
    v38 = swift_bridgeObjectRetain(v35);
    v39 = v65;
    v40 = UUID.init()(v38);
    v41 = UUID.uuidString.getter(v40);
    v43 = v42;
    v44 = *(uint64_t (**)(char *, uint64_t))(v70 + 8);
    v45 = v71;
    v46 = v44(v39, v71);
    *v8 = v41;
    v8[1] = v43;
    v47 = v6[11];
    *((_BYTE *)v8 + v47) = 0;
    v48 = UUID.init()(v46);
    v49 = UUID.uuidString.getter(v48);
    v51 = v50;
    v44(v39, v45);
    swift_bridgeObjectRelease(v8[1]);
    *v8 = v49;
    v8[1] = v51;
    v52 = v66;
    v53 = v58;
    v54 = v67;
    (*(void (**)(char *, char *, uint64_t))(v66 + 16))((char *)v8 + v6[5], v58, v67);
    sub_B3D0(v32, (uint64_t)v8 + v6[6], &qword_25E828);
    sub_AC68(&v74, (uint64_t)v8 + v6[7]);
    sub_B414(v32, &qword_25E828);
    (*(void (**)(char *, uint64_t))(v52 + 8))(v53, v54);
    sub_B554C((uint64_t)&v77, (uint64_t)v8 + v6[8]);
    v55 = (uint64_t *)((char *)v8 + v6[9]);
    *v55 = 0;
    v55[1] = 0;
    v56 = (char *)v8 + v6[10];
    strcpy(v56, "cardsPresent");
    v56[13] = 0;
    *((_WORD *)v56 + 7) = -5120;
    *((_BYTE *)v8 + v47) = 0;
    sub_21C88((uint64_t)v8, (uint64_t)v37, type metadata accessor for FlowAction);
    return sub_224DC((uint64_t)v57, type metadata accessor for CardInfo);
  }
}

uint64_t static SeriesQuickActionButtonViewModel.impressionMetricsForSamples(for:in:with:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  __int128 v36;
  uint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char v50;
  _QWORD v51[3];
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  _OWORD v55[2];

  v8 = type metadata accessor for ScalarDictionary(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for UUID(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for ImpressionMetrics.ID(0);
  __chkstk_darwin(v15);
  v17 = (char *)&v44 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_QWORD *)(a2 + 8) && *(_BYTE *)(a2 + 16) == 5)
  {
    v48 = v10;
    v49 = a4;
    v18 = a1[3];
    v19 = a1[4];
    sub_5480(a1, v18);
    v47 = AssetInfo.author.getter(v18, v19);
    v46 = v20;
    v22 = a1[3];
    v21 = a1[4];
    sub_5480(a1, v22);
    v45 = ContentInfo.id.getter(v22, *(_QWORD *)(v21 + 8));
    v44 = v23;
    LOBYTE(v55[0]) = 0;
    v50 = 5;
    v25 = a1[3];
    v24 = a1[4];
    sub_5480(a1, v25);
    v26 = dispatch thunk of AssetInfo.assetType.getter(v25, v24);
    static AssetType.== infix(_:_:)(v26, 0);
    Metrics.Impression.init(artistName:id:idType:impressionIndex:impressionType:isSG:kind:name:narratorName:parentId:)(v47, v46, v45, v44, (uint64_t)v55, 0, (uint64_t)&v50);
    v55[0] = v54;
    v27 = v52;
    if (v52)
    {
      v28 = v51[2];
      swift_bridgeObjectRetain(a3);
      sub_B5594((uint64_t)v55);
      v29 = v27;
    }
    else
    {
      swift_bridgeObjectRetain(a3);
      v32 = sub_B5594((uint64_t)v55);
      v33 = UUID.init()(v32);
      v28 = UUID.uuidString.getter(v33);
      v29 = v34;
      (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    }
    v35 = v48;
    v36 = v55[0];
    v37 = v53;
    swift_bridgeObjectRetain(v27);
    ImpressionMetrics.ID.init(parent:element:index:)(v36, *((_QWORD *)&v36 + 1), v28, v29, v37);
    sub_B55BC(v51);
    v38 = sub_123BD4();
    v39 = sub_B5664(v51);
    ScalarDictionary.init()(v39);
    v40 = sub_B570C((uint64_t)_swiftEmptyArrayStorage);
    v41 = sub_B570C((uint64_t)_swiftEmptyArrayStorage);
    v42 = v49;
    ImpressionMetrics.init(id:fields:custom:commonFields:clickLocationFields:)(v17, v38, v35, v40, v41);
    sub_B5664(v51);
    v43 = type metadata accessor for ImpressionMetrics(0);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 56))(v42, 0, 1, v43);
  }
  else
  {
    v30 = type metadata accessor for ImpressionMetrics(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(a4, 1, 1, v30);
  }
}

uint64_t static SeriesQuickActionButtonViewModel.preheader(for:seriesOrdering:isAudiobook:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t, uint64_t);
  char *v35;
  void (*v36)(char *, uint64_t);
  uint64_t v37;
  void (*v38)(char *, uint64_t);
  uint64_t v39;
  char *v40;
  uint64_t v41;
  void (*v42)(char *, char *, uint64_t);
  uint64_t v43;
  void (*v44)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(char *, uint64_t);
  uint64_t v51;
  void (*v52)(char *, uint64_t, uint64_t);
  void (*v53)(char *, uint64_t);
  uint64_t v54;
  void (*v55)(char *, uint64_t);
  char *v56;
  char *v57;
  char *v58;
  char *v59;
  uint64_t v60;
  void (*v61)(char *, char *, uint64_t);
  char *v62;
  uint64_t v63;
  void (*v64)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t result;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  char *v83;
  char *v84;

  v73 = a2;
  v74 = a3;
  v72 = a1;
  v82 = a4;
  v79 = type metadata accessor for ShrinkableText(0);
  __chkstk_darwin(v79);
  v81 = (char *)&v71 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_5440(&qword_25E0C8);
  v6 = __chkstk_darwin(v5);
  v80 = (char *)&v71 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v78 = (char *)&v71 - v8;
  v9 = type metadata accessor for LocalizerLookupStrategy(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v71 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for LocalizerDefaultValue(0);
  v75 = *(_QWORD *)(v13 - 8);
  v76 = v13;
  __chkstk_darwin(v13);
  v15 = (char *)&v71 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for LocalizerRequest(0);
  v77 = *(_QWORD *)(v16 - 8);
  v17 = __chkstk_darwin(v16);
  v19 = (char *)&v71 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __chkstk_darwin(v17);
  v83 = (char *)&v71 - v21;
  v22 = __chkstk_darwin(v20);
  v84 = (char *)&v71 - v23;
  __chkstk_darwin(v22);
  v25 = (char *)&v71 - v24;
  v26 = type metadata accessor for SeriesOrdering(0);
  v27 = *(_QWORD *)(v26 - 8);
  __chkstk_darwin(v26);
  v29 = (char *)&v71 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, char *, uint64_t))(v27 + 16))(v29, v74, v26);
  v30 = (*(uint64_t (**)(char *, uint64_t))(v27 + 88))(v29, v26);
  if (v30 == enum case for SeriesOrdering.notAvailable(_:) || v30 == enum case for SeriesOrdering.nonSeries(_:))
    goto LABEL_6;
  if (v30 == enum case for SeriesOrdering.orderedSeries(_:))
  {
    v31 = swift_allocObject(&unk_250098, 32, 7);
    *(_QWORD *)(v31 + 16) = v72;
    v32 = v73;
    *(_QWORD *)(v31 + 24) = v73;
    swift_bridgeObjectRetain(v32);
    v71 = v25;
    static LocalizerRequest.custom(_:)(sub_B5864, v31);
    swift_release(v31);
    LocalizerDefaultValue.init(stringLiteral:)("NEXT IN SERIES", 14, 2);
    v33 = enum case for LocalizerLookupStrategy.default(_:);
    v34 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 104);
    v34(v12, enum case for LocalizerLookupStrategy.default(_:), v9);
    v74 = v19;
    v35 = v84;
    static LocalizerRequest.string(forKey:with:defaultValue:using:)(0xD00000000000002FLL, 0x80000000001FB8D0, 0, v15, v12);
    v36 = *(void (**)(char *, uint64_t))(v10 + 8);
    v36(v12, v9);
    v37 = v76;
    v38 = *(void (**)(char *, uint64_t))(v75 + 8);
    v38(v15, v76);
    LocalizerDefaultValue.init(stringLiteral:)("NEXT", 4, 2);
    v34(v12, v33, v9);
    static LocalizerRequest.string(forKey:with:defaultValue:using:)(0xD000000000000035, 0x80000000001FB910, 0, v15, v12);
    v36(v12, v9);
    v39 = v37;
    v40 = v71;
    v38(v15, v39);
    v41 = v77;
    v42 = *(void (**)(char *, char *, uint64_t))(v77 + 16);
    v42(v74, v40, v16);
    v43 = (uint64_t)v78;
    v42(v78, v35, v16);
    v44 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v41 + 56);
    v44(v43, 0, 1, v16);
    v45 = (uint64_t)v80;
    v42(v80, v83, v16);
    v44(v45, 0, 1, v16);
    v46 = v79;
    v47 = (uint64_t)v81;
    v48 = (uint64_t)&v81[*(int *)(v79 + 20)];
    v44(v48, 1, 1, v16);
    v49 = v47 + *(int *)(v46 + 24);
    v44(v49, 1, 1, v16);
    (*(void (**)(uint64_t, char *, uint64_t))(v41 + 32))(v47, v74, v16);
    sub_B586C(v43, v48);
    sub_B586C(v45, v49);
    sub_21C88(v47, v82, type metadata accessor for ShrinkableText);
    v50 = *(void (**)(char *, uint64_t))(v41 + 8);
    v50(v83, v16);
LABEL_7:
    v50(v84, v16);
    return ((uint64_t (*)(char *, uint64_t))v50)(v40, v16);
  }
  if (v30 == enum case for SeriesOrdering.unorderedSeries(_:))
  {
LABEL_6:
    LocalizerDefaultValue.init(stringLiteral:)("MORE IN SERIES", 14, 2);
    v51 = enum case for LocalizerLookupStrategy.default(_:);
    v52 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 104);
    v52(v12, enum case for LocalizerLookupStrategy.default(_:), v9);
    static LocalizerRequest.string(forKey:with:defaultValue:using:)(0xD00000000000002FLL, 0x80000000001FB950, 0, v15, v12);
    v53 = *(void (**)(char *, uint64_t))(v10 + 8);
    v53(v12, v9);
    v54 = v76;
    v55 = *(void (**)(char *, uint64_t))(v75 + 8);
    v55(v15, v76);
    LocalizerDefaultValue.init(stringLiteral:)("MORE…", 7, 0);
    v52(v12, v51, v9);
    v56 = v84;
    static LocalizerRequest.string(forKey:with:defaultValue:using:)(0xD000000000000035, 0x80000000001FB990, 0, v15, v12);
    v57 = v12;
    v58 = v25;
    v53(v57, v9);
    v59 = v56;
    v55(v15, v54);
    v60 = v77;
    v61 = *(void (**)(char *, char *, uint64_t))(v77 + 16);
    v62 = v83;
    v40 = v58;
    v61(v83, v58, v16);
    v63 = (uint64_t)v78;
    v61(v78, v59, v16);
    v64 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v60 + 56);
    v64(v63, 0, 1, v16);
    v65 = (uint64_t)v80;
    v64((uint64_t)v80, 1, 1, v16);
    v66 = v79;
    v67 = (uint64_t)v81;
    v68 = (uint64_t)&v81[*(int *)(v79 + 20)];
    v64(v68, 1, 1, v16);
    v69 = v67 + *(int *)(v66 + 24);
    v64(v69, 1, 1, v16);
    (*(void (**)(uint64_t, char *, uint64_t))(v60 + 32))(v67, v62, v16);
    sub_B586C(v63, v68);
    sub_B586C(v65, v69);
    sub_21C88(v67, v82, type metadata accessor for ShrinkableText);
    v50 = *(void (**)(char *, uint64_t))(v60 + 8);
    goto LABEL_7;
  }
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD00000000000004DLL, 0x80000000001FB880, "BooksUI/SeriesQuickActionButtonViewModel.swift", 46, 2, 122, 0);
  __break(1u);
  return result;
}

uint64_t sub_B523C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t inited;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE v31[64];

  v6 = sub_5440(&qword_25E138);
  __chkstk_darwin(v6);
  v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for LocalizerDefaultValue(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = a1[3];
  if (a3)
  {
    v28 = a1[4];
    sub_5480(a1, v13);
    v14 = sub_5440(&qword_261FB8);
    inited = swift_initStackObject(v14, v31);
    *(_OWORD *)(inited + 16) = xmmword_1E0B70;
    strcpy((char *)(inited + 32), "sequenceLabel");
    *(_WORD *)(inited + 46) = -4864;
    v29 = a2;
    v30 = a3;
    v16 = a1[3];
    v17 = a1[4];
    sub_5480(a1, v16);
    dispatch thunk of Localizer.locale.getter(v16, v17);
    v18 = type metadata accessor for Locale(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v8, 0, 1, v18);
    v19 = sub_C57C();
    v20 = StringProtocol.uppercased(with:)(v8, &type metadata for String, v19);
    v22 = v21;
    sub_B414((uint64_t)v8, &qword_25E138);
    *(_QWORD *)(inited + 48) = v20;
    *(_QWORD *)(inited + 56) = v22;
    v23 = sub_965C(inited);
    LocalizerDefaultValue.init(stringLiteral:)("NEXT IN SERIES · @@sequenceLabel@@", 35, 0);
    v24 = Localizer.string(forKey:with:defaultValue:)(0xD000000000000030, 0x80000000001FB9D0, v23, v12, v13, v28);
    swift_bridgeObjectRelease(v23);
  }
  else
  {
    v25 = a1[4];
    sub_5480(a1, v13);
    LocalizerDefaultValue.init(stringLiteral:)("NEXT IN SERIES", 14, 2);
    v24 = Localizer.string(forKey:defaultValue:)(0xD00000000000002FLL, 0x80000000001FB8D0, v12, v13, v25);
  }
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  return v24;
}

uint64_t sub_B54C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CardInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_B5504()
{
  unint64_t result;
  uint64_t v1;

  result = qword_263330;
  if (!qword_263330)
  {
    v1 = type metadata accessor for FlowAction(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for FlowAction, v1);
    atomic_store(result, (unint64_t *)&qword_263330);
  }
  return result;
}

uint64_t sub_B554C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_5440(&qword_263338);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_B5594(uint64_t a1)
{
  swift_bridgeObjectRetain(*(_QWORD *)(a1 + 8));
  return a1;
}

_QWORD *sub_B55BC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = a1[1];
  v3 = a1[3];
  v4 = a1[5];
  v5 = a1[8];
  v6 = a1[10];
  v7 = a1[12];
  v8 = a1[14];
  v9 = a1[16];
  swift_bridgeObjectRetain(a1[18]);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  return a1;
}

_QWORD *sub_B5664(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = a1[1];
  v3 = a1[3];
  v4 = a1[5];
  v5 = a1[10];
  v6 = a1[12];
  v7 = a1[14];
  v8 = a1[16];
  v9 = a1[18];
  swift_bridgeObjectRelease(a1[8]);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease(v8);
  swift_bridgeObjectRelease(v9);
  return a1;
}

unint64_t sub_B570C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_5440(&qword_25E0B0);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  v6 = v3 + 64;
  v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_B3D0(v7, (uint64_t)&v16, &qword_25E0B8);
    v8 = v16;
    v9 = v17;
    result = sub_1B94CC(v16, v17);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v12 = (uint64_t *)(v4[6] + 16 * result);
    *v12 = v8;
    v12[1] = v9;
    result = (unint64_t)sub_8C4C(&v18, (_OWORD *)(v4[7] + 32 * result));
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4[2] = v15;
    v7 += 48;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_B5840()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_B5864(_QWORD *a1)
{
  uint64_t v1;

  return sub_B523C(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_B586C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_5440(&qword_25E0C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t *initializeBufferWithCopyOfBuffer for SeriesQuickActionButtonViewModel(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  int EnumCaseMultiPayload;
  __int128 v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  void (*v37)(char *, char *, uint64_t);
  char *v38;
  char *v39;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) == 0)
  {
    v7 = type metadata accessor for SeriesQuickActionButtonViewModel.Style(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, v7);
    if (EnumCaseMultiPayload == 2)
    {
      v14 = *(_OWORD *)(a2 + 3);
      *(_OWORD *)(a1 + 3) = v14;
      (**(void (***)(uint64_t *, uint64_t *))(v14 - 8))(a1, a2);
      v10 = a1;
      v11 = v7;
      v12 = 2;
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v15 = *(_OWORD *)(a2 + 3);
      *(_OWORD *)(a1 + 3) = v15;
      (**(void (***)(uint64_t *, uint64_t *))(v15 - 8))(a1, a2);
      v16 = sub_5440(&qword_263690);
      v17 = *(int *)(v16 + 48);
      v18 = (uint64_t *)((char *)a1 + v17);
      v19 = (uint64_t *)((char *)a2 + v17);
      v20 = type metadata accessor for CardInfo(0);
      v21 = *(_QWORD *)(v20 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
      {
        v22 = sub_5440(&qword_2618C8);
        memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
      }
      else
      {
        v23 = *v19;
        *v18 = *v19;
        v24 = *(int *)(v20 + 20);
        v38 = (char *)v19 + v24;
        v39 = (char *)v18 + v24;
        v25 = type metadata accessor for UUID(0);
        v37 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 16);
        swift_bridgeObjectRetain(v23);
        v37(v39, v38, v25);
        (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
      }
      v26 = *(int *)(v16 + 64);
      v27 = (char *)a1 + v26;
      v28 = (char *)a2 + v26;
      v29 = type metadata accessor for AltSeriesContentTypeExposureData(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v29 - 8) + 16))(v27, v28, v29);
      v10 = a1;
      v11 = v7;
      v12 = 1;
    }
    else
    {
      if (EnumCaseMultiPayload)
      {
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
LABEL_14:
        v30 = *(int *)(a3 + 20);
        v31 = (char *)a1 + v30;
        v32 = (char *)a2 + v30;
        v33 = type metadata accessor for SeriesData(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v33 - 8) + 16))(v31, v32, v33);
        v34 = *(int *)(a3 + 24);
        v35 = *(_OWORD *)((char *)a2 + v34 + 24);
        *(_OWORD *)((char *)a1 + v34 + 24) = v35;
        (**(void (***)(void))(v35 - 8))();
        return a1;
      }
      v9 = *(_OWORD *)(a2 + 3);
      *(_OWORD *)(a1 + 3) = v9;
      (**(void (***)(uint64_t *, uint64_t *))(v9 - 8))(a1, a2);
      v10 = a1;
      v11 = v7;
      v12 = 0;
    }
    swift_storeEnumTagMultiPayload(v10, v11, v12);
    goto LABEL_14;
  }
  v13 = *a2;
  *a1 = *a2;
  a1 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
  swift_retain(v13);
  return a1;
}

uint64_t destroy for SeriesQuickActionButtonViewModel(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  int EnumCaseMultiPayload;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;

  v4 = type metadata accessor for SeriesQuickActionButtonViewModel.Style(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a1, v4);
  switch(EnumCaseMultiPayload)
  {
    case 2:
      goto LABEL_4;
    case 1:
      _s7BooksUI13AnyPagedFrameVwxx_0(a1);
      v6 = sub_5440(&qword_263690);
      v7 = (_QWORD *)((char *)a1 + *(int *)(v6 + 48));
      v8 = type metadata accessor for CardInfo(0);
      if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v7, 1, v8))
      {
        swift_bridgeObjectRelease(*v7);
        v9 = (char *)v7 + *(int *)(v8 + 20);
        v10 = type metadata accessor for UUID(0);
        (*(void (**)(char *, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
      }
      v11 = (char *)a1 + *(int *)(v6 + 64);
      v12 = type metadata accessor for AltSeriesContentTypeExposureData(0);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
      break;
    case 0:
LABEL_4:
      _s7BooksUI13AnyPagedFrameVwxx_0(a1);
      break;
  }
  v13 = (char *)a1 + *(int *)(a2 + 20);
  v14 = type metadata accessor for SeriesData(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
  return _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)((char *)a1 + *(int *)(a2 + 24)));
}

uint64_t initializeWithCopy for SeriesQuickActionButtonViewModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int EnumCaseMultiPayload;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  void (*v35)(char *, char *, uint64_t);
  char *v36;
  char *v37;

  v6 = type metadata accessor for SeriesQuickActionButtonViewModel.Style(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, v6);
  switch(EnumCaseMultiPayload)
  {
    case 2:
      v12 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 24) = v12;
      (**(void (***)(uint64_t, uint64_t))(v12 - 8))(a1, a2);
      v9 = a1;
      v10 = v6;
      v11 = 2;
      goto LABEL_11;
    case 1:
      v13 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 24) = v13;
      (**(void (***)(uint64_t, uint64_t))(v13 - 8))(a1, a2);
      v14 = sub_5440(&qword_263690);
      v15 = *(int *)(v14 + 48);
      v16 = (uint64_t *)(a1 + v15);
      v17 = (uint64_t *)(a2 + v15);
      v18 = type metadata accessor for CardInfo(0);
      v19 = *(_QWORD *)(v18 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
      {
        v20 = sub_5440(&qword_2618C8);
        memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
      }
      else
      {
        v21 = *v17;
        *v16 = *v17;
        v22 = *(int *)(v18 + 20);
        v36 = (char *)v17 + v22;
        v37 = (char *)v16 + v22;
        v23 = type metadata accessor for UUID(0);
        v35 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 16);
        swift_bridgeObjectRetain(v21);
        v35(v37, v36, v23);
        (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
      }
      v24 = *(int *)(v14 + 64);
      v25 = a1 + v24;
      v26 = a2 + v24;
      v27 = type metadata accessor for AltSeriesContentTypeExposureData(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 16))(v25, v26, v27);
      v9 = a1;
      v10 = v6;
      v11 = 1;
      goto LABEL_11;
    case 0:
      v8 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 24) = v8;
      (**(void (***)(uint64_t, uint64_t))(v8 - 8))(a1, a2);
      v9 = a1;
      v10 = v6;
      v11 = 0;
LABEL_11:
      swift_storeEnumTagMultiPayload(v9, v10, v11);
      goto LABEL_12;
  }
  memcpy((void *)a1, (const void *)a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
LABEL_12:
  v28 = *(int *)(a3 + 20);
  v29 = a1 + v28;
  v30 = a2 + v28;
  v31 = type metadata accessor for SeriesData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 16))(v29, v30, v31);
  v32 = *(int *)(a3 + 24);
  v33 = *(_OWORD *)(a2 + v32 + 24);
  *(_OWORD *)(a1 + v32 + 24) = v33;
  (**(void (***)(void))(v33 - 8))();
  return a1;
}

_QWORD *assignWithCopy for SeriesQuickActionButtonViewModel(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  void (*v33)(char *, char *, uint64_t);
  char *v34;
  char *v35;

  if (a1 != a2)
  {
    sub_224DC((uint64_t)a1, type metadata accessor for SeriesQuickActionButtonViewModel.Style);
    v6 = type metadata accessor for SeriesQuickActionButtonViewModel.Style(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, v6);
    switch(EnumCaseMultiPayload)
    {
      case 2:
        v12 = a2[3];
        a1[3] = v12;
        a1[4] = a2[4];
        (**(void (***)(_QWORD *, _QWORD *))(v12 - 8))(a1, a2);
        v9 = a1;
        v10 = v6;
        v11 = 2;
        goto LABEL_12;
      case 1:
        v13 = a2[3];
        a1[3] = v13;
        a1[4] = a2[4];
        (**(void (***)(_QWORD *, _QWORD *))(v13 - 8))(a1, a2);
        v14 = sub_5440(&qword_263690);
        v15 = *(int *)(v14 + 48);
        v16 = (_QWORD *)((char *)a1 + v15);
        v17 = (_QWORD *)((char *)a2 + v15);
        v18 = type metadata accessor for CardInfo(0);
        v19 = *(_QWORD *)(v18 - 8);
        if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
        {
          v20 = sub_5440(&qword_2618C8);
          memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
        }
        else
        {
          v21 = *v17;
          *v16 = *v17;
          v22 = *(int *)(v18 + 20);
          v34 = (char *)v17 + v22;
          v35 = (char *)v16 + v22;
          v23 = type metadata accessor for UUID(0);
          v33 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 16);
          swift_bridgeObjectRetain(v21);
          v33(v35, v34, v23);
          (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
        }
        v24 = *(int *)(v14 + 64);
        v25 = (char *)a1 + v24;
        v26 = (char *)a2 + v24;
        v27 = type metadata accessor for AltSeriesContentTypeExposureData(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 16))(v25, v26, v27);
        v9 = a1;
        v10 = v6;
        v11 = 1;
        goto LABEL_12;
      case 0:
        v8 = a2[3];
        a1[3] = v8;
        a1[4] = a2[4];
        (**(void (***)(_QWORD *, _QWORD *))(v8 - 8))(a1, a2);
        v9 = a1;
        v10 = v6;
        v11 = 0;
LABEL_12:
        swift_storeEnumTagMultiPayload(v9, v10, v11);
        goto LABEL_13;
    }
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
LABEL_13:
  v28 = *(int *)(a3 + 20);
  v29 = (char *)a1 + v28;
  v30 = (char *)a2 + v28;
  v31 = type metadata accessor for SeriesData(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v31 - 8) + 24))(v29, v30, v31);
  sub_142F8((_QWORD *)((char *)a1 + *(int *)(a3 + 24)), (_QWORD *)((char *)a2 + *(int *)(a3 + 24)));
  return a1;
}

_OWORD *initializeWithTake for SeriesQuickActionButtonViewModel(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  __int128 v30;

  v6 = type metadata accessor for SeriesQuickActionButtonViewModel.Style(0);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    *((_QWORD *)a1 + 4) = *((_QWORD *)a2 + 4);
    v8 = sub_5440(&qword_263690);
    v9 = *(int *)(v8 + 48);
    v10 = (_QWORD *)((char *)a1 + v9);
    v11 = (_QWORD *)((char *)a2 + v9);
    v12 = type metadata accessor for CardInfo(0);
    v13 = *(_QWORD *)(v12 - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
    {
      v14 = sub_5440(&qword_2618C8);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      *v10 = *v11;
      v15 = *(int *)(v12 + 20);
      v16 = (char *)v10 + v15;
      v17 = (char *)v11 + v15;
      v18 = type metadata accessor for UUID(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v16, v17, v18);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
    }
    v19 = *(int *)(v8 + 64);
    v20 = (char *)a1 + v19;
    v21 = (char *)a2 + v19;
    v22 = type metadata accessor for AltSeriesContentTypeExposureData(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v20, v21, v22);
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v23 = *(int *)(a3 + 20);
  v24 = (char *)a1 + v23;
  v25 = (char *)a2 + v23;
  v26 = type metadata accessor for SeriesData(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v26 - 8) + 32))(v24, v25, v26);
  v27 = *(int *)(a3 + 24);
  v28 = (char *)a1 + v27;
  v29 = (char *)a2 + v27;
  v30 = *((_OWORD *)v29 + 1);
  *(_OWORD *)v28 = *(_OWORD *)v29;
  *((_OWORD *)v28 + 1) = v30;
  *((_QWORD *)v28 + 4) = *((_QWORD *)v29 + 4);
  return a1;
}

_OWORD *assignWithTake for SeriesQuickActionButtonViewModel(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  __int128 v30;

  if (a1 != a2)
  {
    sub_224DC((uint64_t)a1, type metadata accessor for SeriesQuickActionButtonViewModel.Style);
    v6 = type metadata accessor for SeriesQuickActionButtonViewModel.Style(0);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = a2[1];
      *a1 = *a2;
      a1[1] = v7;
      *((_QWORD *)a1 + 4) = *((_QWORD *)a2 + 4);
      v8 = sub_5440(&qword_263690);
      v9 = *(int *)(v8 + 48);
      v10 = (_QWORD *)((char *)a1 + v9);
      v11 = (_QWORD *)((char *)a2 + v9);
      v12 = type metadata accessor for CardInfo(0);
      v13 = *(_QWORD *)(v12 - 8);
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
      {
        v14 = sub_5440(&qword_2618C8);
        memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
      }
      else
      {
        *v10 = *v11;
        v15 = *(int *)(v12 + 20);
        v16 = (char *)v10 + v15;
        v17 = (char *)v11 + v15;
        v18 = type metadata accessor for UUID(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v16, v17, v18);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
      }
      v19 = *(int *)(v8 + 64);
      v20 = (char *)a1 + v19;
      v21 = (char *)a2 + v19;
      v22 = type metadata accessor for AltSeriesContentTypeExposureData(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v20, v21, v22);
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
  }
  v23 = *(int *)(a3 + 20);
  v24 = (char *)a1 + v23;
  v25 = (char *)a2 + v23;
  v26 = type metadata accessor for SeriesData(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v26 - 8) + 40))(v24, v25, v26);
  v27 = *(int *)(a3 + 24);
  v28 = (char *)a1 + v27;
  v29 = (char *)a2 + v27;
  _s7BooksUI13AnyPagedFrameVwxx_0((_OWORD *)((char *)a1 + v27));
  v30 = *((_OWORD *)v29 + 1);
  *(_OWORD *)v28 = *(_OWORD *)v29;
  *((_OWORD *)v28 + 1) = v30;
  *((_QWORD *)v28 + 4) = *((_QWORD *)v29 + 4);
  return a1;
}

uint64_t getEnumTagSinglePayload for SeriesQuickActionButtonViewModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_B650C);
}

uint64_t sub_B650C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v14;

  v6 = type metadata accessor for SeriesQuickActionButtonViewModel.Style(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = type metadata accessor for SeriesData(0);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = *(_QWORD *)(a1 + *(int *)(a3 + 24) + 24);
  if (v14 >= 0xFFFFFFFF)
    LODWORD(v14) = -1;
  return (v14 + 1);
}

uint64_t storeEnumTagSinglePayload for SeriesQuickActionButtonViewModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_B65C4);
}

uint64_t sub_B65C4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v8 = type metadata accessor for SeriesQuickActionButtonViewModel.Style(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  result = type metadata accessor for SeriesData(0);
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  *(_QWORD *)(a1 + *(int *)(a4 + 24) + 24) = (a2 - 1);
  return result;
}

uint64_t sub_B666C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[3];

  result = type metadata accessor for SeriesQuickActionButtonViewModel.Style(319);
  if (v3 <= 0x3F)
  {
    v5[0] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for SeriesData(319);
    if (v4 <= 0x3F)
    {
      v5[1] = *(_QWORD *)(result - 8) + 64;
      v5[2] = "(";
      swift_initStructMetadata(a1, 256, 3, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for SeriesQuickActionButtonViewModel.Style(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  int EnumCaseMultiPayload;
  __int128 v9;
  uint64_t v10;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, char *, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v10 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v10 + ((v6 + 16) & ~(unint64_t)v6);
    swift_retain(v10);
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 2)
    {
      v12 = *(_OWORD *)(a2 + 3);
      *(_OWORD *)(a1 + 24) = v12;
      (**(void (***)(uint64_t, uint64_t *))(v12 - 8))(a1, a2);
      swift_storeEnumTagMultiPayload(a1, a3, 2);
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v13 = *(_OWORD *)(a2 + 3);
      *(_OWORD *)(a1 + 24) = v13;
      (**(void (***)(uint64_t, uint64_t *))(v13 - 8))(a1, a2);
      v14 = sub_5440(&qword_263690);
      v15 = *(int *)(v14 + 48);
      v16 = (uint64_t *)(a1 + v15);
      v17 = (uint64_t *)((char *)a2 + v15);
      v18 = type metadata accessor for CardInfo(0);
      v19 = *(_QWORD *)(v18 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
      {
        v20 = sub_5440(&qword_2618C8);
        memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
      }
      else
      {
        v21 = *v17;
        *v16 = *v17;
        v22 = *(int *)(v18 + 20);
        v29 = (char *)v17 + v22;
        v30 = (char *)v16 + v22;
        v23 = type metadata accessor for UUID(0);
        v24 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 16);
        swift_bridgeObjectRetain(v21);
        v24(v30, v29, v23);
        (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
      }
      v25 = *(int *)(v14 + 64);
      v26 = a1 + v25;
      v27 = (uint64_t)a2 + v25;
      v28 = type metadata accessor for AltSeriesContentTypeExposureData(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 16))(v26, v27, v28);
      swift_storeEnumTagMultiPayload(a1, a3, 1);
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy((void *)a1, a2, *(_QWORD *)(v5 + 64));
    }
    else
    {
      v9 = *(_OWORD *)(a2 + 3);
      *(_OWORD *)(a1 + 24) = v9;
      (**(void (***)(uint64_t, uint64_t *))(v9 - 8))(a1, a2);
      swift_storeEnumTagMultiPayload(a1, a3, 0);
    }
  }
  return a1;
}

uint64_t destroy for SeriesQuickActionButtonViewModel.Style(_QWORD *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;

  result = swift_getEnumCaseMultiPayload(a1, a2);
  if ((_DWORD)result == 2)
    return _s7BooksUI13AnyPagedFrameVwxx_0(a1);
  if ((_DWORD)result != 1)
  {
    if ((_DWORD)result)
      return result;
    return _s7BooksUI13AnyPagedFrameVwxx_0(a1);
  }
  _s7BooksUI13AnyPagedFrameVwxx_0(a1);
  v4 = sub_5440(&qword_263690);
  v5 = (_QWORD *)((char *)a1 + *(int *)(v4 + 48));
  v6 = type metadata accessor for CardInfo(0);
  if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v5, 1, v6))
  {
    swift_bridgeObjectRelease(*v5);
    v7 = (char *)v5 + *(int *)(v6 + 20);
    v8 = type metadata accessor for UUID(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  }
  v9 = (char *)a1 + *(int *)(v4 + 64);
  v10 = type metadata accessor for AltSeriesContentTypeExposureData(0);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
}

uint64_t initializeWithCopy for SeriesQuickActionButtonViewModel.Style(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, char *, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v29;
  char *v30;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  switch(EnumCaseMultiPayload)
  {
    case 2:
      v11 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 24) = v11;
      (**(void (***)(uint64_t, uint64_t))(v11 - 8))(a1, a2);
      v8 = a1;
      v9 = a3;
      v10 = 2;
      goto LABEL_11;
    case 1:
      v12 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 24) = v12;
      (**(void (***)(uint64_t, uint64_t))(v12 - 8))(a1, a2);
      v13 = sub_5440(&qword_263690);
      v14 = *(int *)(v13 + 48);
      v15 = (uint64_t *)(a1 + v14);
      v16 = (uint64_t *)(a2 + v14);
      v17 = type metadata accessor for CardInfo(0);
      v18 = *(_QWORD *)(v17 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
      {
        v19 = sub_5440(&qword_2618C8);
        memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
      }
      else
      {
        v20 = *v16;
        *v15 = *v16;
        v21 = *(int *)(v17 + 20);
        v29 = (char *)v16 + v21;
        v30 = (char *)v15 + v21;
        v22 = type metadata accessor for UUID(0);
        v23 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 16);
        swift_bridgeObjectRetain(v20);
        v23(v30, v29, v22);
        (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
      }
      v24 = *(int *)(v13 + 64);
      v25 = a1 + v24;
      v26 = a2 + v24;
      v27 = type metadata accessor for AltSeriesContentTypeExposureData(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 16))(v25, v26, v27);
      v8 = a1;
      v9 = a3;
      v10 = 1;
      goto LABEL_11;
    case 0:
      v7 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 24) = v7;
      (**(void (***)(uint64_t, uint64_t))(v7 - 8))(a1, a2);
      v8 = a1;
      v9 = a3;
      v10 = 0;
LABEL_11:
      swift_storeEnumTagMultiPayload(v8, v9, v10);
      return a1;
  }
  memcpy((void *)a1, (const void *)a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  return a1;
}

_QWORD *assignWithCopy for SeriesQuickActionButtonViewModel.Style(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, char *, uint64_t);
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v29;
  char *v30;

  if (a1 != a2)
  {
    sub_224DC((uint64_t)a1, type metadata accessor for SeriesQuickActionButtonViewModel.Style);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    switch(EnumCaseMultiPayload)
    {
      case 2:
        v11 = a2[3];
        a1[3] = v11;
        a1[4] = a2[4];
        (**(void (***)(_QWORD *, _QWORD *))(v11 - 8))(a1, a2);
        v8 = a1;
        v9 = a3;
        v10 = 2;
        goto LABEL_12;
      case 1:
        v12 = a2[3];
        a1[3] = v12;
        a1[4] = a2[4];
        (**(void (***)(_QWORD *, _QWORD *))(v12 - 8))(a1, a2);
        v13 = sub_5440(&qword_263690);
        v14 = *(int *)(v13 + 48);
        v15 = (_QWORD *)((char *)a1 + v14);
        v16 = (_QWORD *)((char *)a2 + v14);
        v17 = type metadata accessor for CardInfo(0);
        v18 = *(_QWORD *)(v17 - 8);
        if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
        {
          v19 = sub_5440(&qword_2618C8);
          memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
        }
        else
        {
          v20 = *v16;
          *v15 = *v16;
          v21 = *(int *)(v17 + 20);
          v29 = (char *)v16 + v21;
          v30 = (char *)v15 + v21;
          v22 = type metadata accessor for UUID(0);
          v23 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 16);
          swift_bridgeObjectRetain(v20);
          v23(v30, v29, v22);
          (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
        }
        v24 = *(int *)(v13 + 64);
        v25 = (char *)a1 + v24;
        v26 = (char *)a2 + v24;
        v27 = type metadata accessor for AltSeriesContentTypeExposureData(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 16))(v25, v26, v27);
        v8 = a1;
        v9 = a3;
        v10 = 1;
        goto LABEL_12;
      case 0:
        v7 = a2[3];
        a1[3] = v7;
        a1[4] = a2[4];
        (**(void (***)(_QWORD *, _QWORD *))(v7 - 8))(a1, a2);
        v8 = a1;
        v9 = a3;
        v10 = 0;
LABEL_12:
        swift_storeEnumTagMultiPayload(v8, v9, v10);
        return a1;
    }
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

_OWORD *initializeWithTake for SeriesQuickActionButtonViewModel.Style(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;

  if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
  {
    v6 = a2[1];
    *a1 = *a2;
    a1[1] = v6;
    *((_QWORD *)a1 + 4) = *((_QWORD *)a2 + 4);
    v7 = sub_5440(&qword_263690);
    v8 = *(int *)(v7 + 48);
    v9 = (_QWORD *)((char *)a1 + v8);
    v10 = (_QWORD *)((char *)a2 + v8);
    v11 = type metadata accessor for CardInfo(0);
    v12 = *(_QWORD *)(v11 - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
    {
      v13 = sub_5440(&qword_2618C8);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
    else
    {
      *v9 = *v10;
      v14 = *(int *)(v11 + 20);
      v15 = (char *)v9 + v14;
      v16 = (char *)v10 + v14;
      v17 = type metadata accessor for UUID(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v15, v16, v17);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
    v18 = *(int *)(v7 + 64);
    v19 = (char *)a1 + v18;
    v20 = (char *)a2 + v18;
    v21 = type metadata accessor for AltSeriesContentTypeExposureData(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(v19, v20, v21);
    swift_storeEnumTagMultiPayload(a1, a3, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

_OWORD *assignWithTake for SeriesQuickActionButtonViewModel.Style(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;

  if (a1 != a2)
  {
    sub_224DC((uint64_t)a1, type metadata accessor for SeriesQuickActionButtonViewModel.Style);
    if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
    {
      v6 = a2[1];
      *a1 = *a2;
      a1[1] = v6;
      *((_QWORD *)a1 + 4) = *((_QWORD *)a2 + 4);
      v7 = sub_5440(&qword_263690);
      v8 = *(int *)(v7 + 48);
      v9 = (_QWORD *)((char *)a1 + v8);
      v10 = (_QWORD *)((char *)a2 + v8);
      v11 = type metadata accessor for CardInfo(0);
      v12 = *(_QWORD *)(v11 - 8);
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
      {
        v13 = sub_5440(&qword_2618C8);
        memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
      }
      else
      {
        *v9 = *v10;
        v14 = *(int *)(v11 + 20);
        v15 = (char *)v9 + v14;
        v16 = (char *)v10 + v14;
        v17 = type metadata accessor for UUID(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v15, v16, v17);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
      }
      v18 = *(int *)(v7 + 64);
      v19 = (char *)a1 + v18;
      v20 = (char *)a2 + v18;
      v21 = type metadata accessor for AltSeriesContentTypeExposureData(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(v19, v20, v21);
      swift_storeEnumTagMultiPayload(a1, a3, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_B714C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _BYTE v8[32];
  _QWORD v9[3];

  v9[0] = "(";
  sub_B0B10(319);
  v3 = v2;
  if (v4 <= 0x3F)
  {
    v5 = type metadata accessor for AltSeriesContentTypeExposureData(319);
    if (v6 > 0x3F)
    {
      return v5;
    }
    else
    {
      swift_getTupleTypeLayout3(v8, "(", *(_QWORD *)(v3 - 8) + 64, *(_QWORD *)(v5 - 8) + 64);
      v9[1] = v8;
      v9[2] = "(";
      swift_initEnumMetadataMultiPayload(a1, 256, 3, v9);
      return 0;
    }
  }
  return v3;
}

uint64_t sub_B7200(Swift::String string)
{
  void *object;
  Swift::String v2;
  Swift::Int v3;
  unsigned int v4;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_249758, v2);
  swift_bridgeObjectRelease(object);
  if (v3 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (v3)
    return v4;
  else
    return 0;
}

uint64_t sub_B7250(char a1)
{
  if ((a1 & 1) != 0)
    return 1635017060;
  else
    return 1684957547;
}

uint64_t sub_B7270(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_1E8378, a3);
  return == infix<A>(_:_:)(a1, a2, a3, WitnessTable, &protocol witness table for String);
}

uint64_t sub_B72C4(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_1E8378, a1);
  return RawRepresentable<>.hashValue.getter(a1, a2, WitnessTable, &protocol witness table for String);
}

uint64_t sub_B7310(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_1E8378, a2);
  return RawRepresentable<>.hash(into:)(a1, a2, a3, WitnessTable, &protocol witness table for String);
}

uint64_t sub_B7360(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_1E8378, a2);
  return RawRepresentable<>._rawHashValue(seed:)(a1, a2, a3, WitnessTable, &protocol witness table for String);
}

uint64_t sub_B73B0@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  void *v3;
  uint64_t result;
  Swift::String v5;

  v3 = (void *)a1[1];
  v5._countAndFlagsBits = *a1;
  v5._object = v3;
  result = sub_B7200(v5);
  *a2 = result;
  return result;
}

uint64_t sub_B73EC@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_B7250(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_B7424()
{
  char *v0;

  return sub_B7250(*v0);
}

uint64_t sub_B743C@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_B7200(a1);
  *a2 = result;
  return result;
}

uint64_t sub_B7470@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_35C54();
  *a1 = result;
  return result;
}

uint64_t sub_B74A4(uint64_t a1)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_1E87D8, a1);
  return CodingKey.description.getter(a1, WitnessTable);
}

uint64_t sub_B74D8(uint64_t a1)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_1E87D8, a1);
  return CodingKey.debugDescription.getter(a1, WitnessTable);
}

uint64_t PageUpdateInstruction<>.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v12;
  uint64_t WitnessTable;
  uint64_t v14;
  char *v15;
  uint64_t updated;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t v31;
  unint64_t v32;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char *v64;
  uint64_t v65;
  unint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  _QWORD *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD v127[2];
  __int128 v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;

  v112 = a7;
  *(_QWORD *)&v128 = a2;
  *((_QWORD *)&v128 + 1) = a3;
  v129 = a4;
  v130 = a5;
  v116 = a6;
  v131 = a6;
  v12 = _s10CodingKeysOMa_2(255, (uint64_t)&v128);
  WitnessTable = swift_getWitnessTable(&unk_1E87D8, v12);
  v117 = type metadata accessor for KeyedDecodingContainer(0, v12);
  v113 = *(_QWORD *)(v117 - 8);
  __chkstk_darwin(v117);
  v15 = (char *)&v107 - v14;
  v114 = a2;
  v115 = a3;
  *(_QWORD *)&v128 = a2;
  *((_QWORD *)&v128 + 1) = a3;
  v110 = a4;
  v129 = a4;
  v130 = a5;
  v111 = a5;
  updated = type metadata accessor for PageUpdateInstruction(0, (uint64_t)&v128);
  v17 = *(_QWORD *)(updated - 8);
  __chkstk_darwin(updated);
  v19 = (uint64_t *)((char *)&v107 - v18);
  v20 = a1[3];
  v21 = a1[4];
  v118 = a1;
  sub_5480(a1, v20);
  v22 = v119;
  dispatch thunk of Decoder.container<A>(keyedBy:)(v12, v12, WitnessTable, v20, v21);
  if (!v22)
  {
    v24 = v114;
    v23 = v115;
    v25 = v116;
    v119 = v17;
    v109 = updated;
    LOBYTE(v128) = 0;
    v26 = v117;
    v27 = KeyedDecodingContainer.decode(_:forKey:)(&v128, v117);
    v31 = v27;
    v32 = v28;
    if (v27 == 0x506563616C706572 && v28 == 0xEB00000000656761)
    {
      swift_bridgeObjectRelease(0xEB00000000656761);
      v37 = v19;
      goto LABEL_12;
    }
    v34 = _stringCompareWithSmolCheck(_:_:expecting:)(0x506563616C706572, 0xEB00000000656761, v27, v28, 0);
    v108 = v19;
    if ((v34 & 1) != 0)
    {
      swift_bridgeObjectRelease(v32);
      v37 = v108;
LABEL_12:
      v38 = type metadata accessor for CodeAnyIntentModel(0, v24, v35, v36);
      LOBYTE(v127[0]) = 1;
      v39 = swift_getWitnessTable(&protocol conformance descriptor for CodeAnyIntentModel<A>, v38);
      KeyedDecodingContainer.decode<A>(_:forKey:)(&v128, v38, v127, v26, v38, v39);
      v40 = v26;
      v29 = v118;
      (*(void (**)(char *, uint64_t))(v113 + 8))(v15, v40);
      sub_AC68(&v128, (uint64_t)v37);
      v41 = v37;
      v42 = v109;
      v43 = v109;
      v44 = 0;
LABEL_13:
      swift_storeEnumTagMultiPayload(v41, v43, v44);
LABEL_23:
      v53 = v112;
      v54 = v119;
LABEL_24:
      (*(void (**)(uint64_t, uint64_t *, uint64_t))(v54 + 32))(v53, v37, v42);
      return _s7BooksUI13AnyPagedFrameVwxx_0(v29);
    }
    v107 = v15;
    if (v31 == 0x6853646E65707061 && v32 == 0xED00007365766C65)
    {
      v46 = 0xED00007365766C65;
    }
    else
    {
      if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6853646E65707061, 0xED00007365766C65, v31, v32, 0) & 1) == 0)
      {
        if (v31 == 0x536563616C706572 && v32 == 0xEE007365766C6568)
        {
          v56 = 0xEE007365766C6568;
        }
        else
        {
          if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x536563616C706572, 0xEE007365766C6568, v31, v32, 0) & 1) == 0)
          {
            if (v31 == 0x685365766F6D6572 && v32 == 0xED00007365766C65)
            {
              v61 = 0xED00007365766C65;
            }
            else
            {
              if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x685365766F6D6572, 0xED00007365766C65, v31, v32, 0) & 1) == 0)
              {
                if (v31 == 0xD000000000000012 && v32 == 0x80000000001FBA40)
                {
                  v66 = 0x80000000001FBA40;
                }
                else
                {
                  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012, 0x80000000001FBA40, v31, v32, 0) & 1) == 0)
                  {
                    if (v31 == 0x7449646E65707061 && v32 == 0xEB00000000736D65)
                    {
                      swift_bridgeObjectRelease(0xEB00000000736D65);
                    }
                    else
                    {
                      if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7449646E65707061, 0xEB00000000736D65, v31, v32, 0) & 1) == 0)
                      {
                        if (v31 == 0x744965766F6D6572 && v32 == 0xEB00000000736D65)
                        {
                          v79 = 0xEB00000000736D65;
                        }
                        else
                        {
                          if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x744965766F6D6572, 0xEB00000000736D65, v31, v32, 0) & 1) == 0)
                          {
                            if (v31 == 0x496563616C706572 && v32 == 0xEC000000736D6574)
                            {
                              v83 = 0xEC000000736D6574;
                            }
                            else
                            {
                              if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x496563616C706572, 0xEC000000736D6574, v31, v32, 0) & 1) == 0)
                              {
                                if (v31 != 0xD000000000000013
                                  || (v87 = 0x80000000001FBA60, v32 != 0x80000000001FBA60))
                                {
                                  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013, 0x80000000001FBA60, v31, v32, 0) & 1) == 0)
                                  {
                                    if (v31 != 0xD000000000000013
                                      || (v91 = 0x80000000001FBA80, v32 != 0x80000000001FBA80))
                                    {
                                      if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013, 0x80000000001FBA80, v31, v32, 0) & 1) == 0)
                                      {
                                        if (v31 == 0x646E756F706D6F63 && v32 == 0xE800000000000000)
                                        {
                                          v95 = 0xE800000000000000;
                                        }
                                        else
                                        {
                                          if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x646E756F706D6F63, 0xE800000000000000, v31, v32, 0) & 1) == 0)
                                          {
                                            if (v31 == 0xD000000000000010 && v32 == 0x80000000001FBAA0
                                              || (_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x80000000001FBAA0, v31, v32, 0) & 1) != 0)
                                            {
                                              (*(void (**)(char *, uint64_t))(v113 + 8))(v107, v117);
                                              swift_bridgeObjectRelease(v32);
                                              v37 = v19;
                                              v50 = v19;
                                              v42 = v109;
                                              v51 = v109;
                                              v52 = 13;
                                            }
                                            else
                                            {
                                              if (v31 == 0x646E6550706F7473 && v32 == 0xEF61746144676E69)
                                              {
                                                swift_bridgeObjectRelease(0xEF61746144676E69);
                                              }
                                              else
                                              {
                                                v99 = _stringCompareWithSmolCheck(_:_:expecting:)(0x646E6550706F7473, 0xEF61746144676E69, v31, v32, 0);
                                                swift_bridgeObjectRelease(v32);
                                                if ((v99 & 1) == 0)
                                                {
                                                  v100 = type metadata accessor for DecodingError(0);
                                                  swift_allocError(v100, &protocol witness table for DecodingError, 0, 0);
                                                  v102 = v101;
                                                  v29 = v118;
                                                  v104 = v118[3];
                                                  v103 = v118[4];
                                                  sub_5480(v118, v104);
                                                  v105 = dispatch thunk of Decoder.codingPath.getter(v104, v103);
                                                  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)(v105, 0xD000000000000022, 0x80000000001FBAC0, 0);
                                                  v106 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v100 - 8) + 104))(v102, enum case for DecodingError.dataCorrupted(_:), v100);
                                                  swift_willThrow(v106);
                                                  (*(void (**)(char *, uint64_t))(v113 + 8))(v107, v117);
                                                  return _s7BooksUI13AnyPagedFrameVwxx_0(v29);
                                                }
                                              }
                                              (*(void (**)(char *, uint64_t))(v113 + 8))(v107, v117);
                                              v37 = v19;
                                              v50 = v19;
                                              v42 = v109;
                                              v51 = v109;
                                              v52 = 14;
                                            }
                                            goto LABEL_22;
                                          }
                                          v95 = v32;
                                        }
                                        swift_bridgeObjectRelease(v95);
                                        v96 = v109;
                                        v97 = type metadata accessor for Array(0, v109);
                                        LOBYTE(v127[0]) = 1;
                                        v132 = v25;
                                        v127[1] = swift_getWitnessTable(&protocol conformance descriptor for <> PageUpdateInstruction<A, B>, v96);
                                        v98 = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v97);
                                        KeyedDecodingContainer.decode<A>(_:forKey:)(&v128, v97, v127, v117, v97, v98);
                                        (*(void (**)(char *, uint64_t))(v113 + 8))(v107, v117);
                                        v37 = v19;
                                        *v19 = v128;
                                        v50 = v19;
                                        v42 = v109;
                                        v51 = v109;
                                        v52 = 12;
LABEL_22:
                                        swift_storeEnumTagMultiPayload(v50, v51, v52);
                                        v29 = v118;
                                        goto LABEL_23;
                                      }
                                      v91 = v32;
                                    }
                                    swift_bridgeObjectRelease(v91);
                                    *(_QWORD *)&v128 = v24;
                                    *((_QWORD *)&v128 + 1) = v23;
                                    v129 = v110;
                                    v130 = v111;
                                    v92 = type metadata accessor for PageUpdateInstruction.ShelfHeaderFooterUpdateDescriptor(255, (uint64_t)&v128);
                                    v93 = type metadata accessor for Array(0, v92);
                                    LOBYTE(v128) = 1;
                                    v126 = swift_getWitnessTable(&protocol conformance descriptor for PageUpdateInstruction<A, B>.ShelfHeaderFooterUpdateDescriptor, v92);
                                    v94 = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v93);
                                    KeyedDecodingContainer.decode<A>(_:forKey:)(v127, v93, &v128, v117, v93, v94);
                                    (*(void (**)(char *, uint64_t))(v113 + 8))(v107, v117);
                                    v37 = v19;
                                    *v19 = v127[0];
                                    v50 = v19;
                                    v42 = v109;
                                    v51 = v109;
                                    v52 = 10;
                                    goto LABEL_22;
                                  }
                                  v87 = v32;
                                }
                                swift_bridgeObjectRelease(v87);
                                *(_QWORD *)&v128 = v24;
                                *((_QWORD *)&v128 + 1) = v23;
                                v129 = v110;
                                v130 = v111;
                                v88 = type metadata accessor for PageUpdateInstruction.ShelfHeaderFooterUpdateDescriptor(255, (uint64_t)&v128);
                                v89 = type metadata accessor for Array(0, v88);
                                LOBYTE(v128) = 1;
                                v125 = swift_getWitnessTable(&protocol conformance descriptor for PageUpdateInstruction<A, B>.ShelfHeaderFooterUpdateDescriptor, v88);
                                v90 = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v89);
                                KeyedDecodingContainer.decode<A>(_:forKey:)(v127, v89, &v128, v117, v89, v90);
                                (*(void (**)(char *, uint64_t))(v113 + 8))(v107, v117);
                                v37 = v19;
                                *v19 = v127[0];
                                v50 = v19;
                                v42 = v109;
                                v51 = v109;
                                v52 = 9;
                                goto LABEL_22;
                              }
                              v83 = v32;
                            }
                            swift_bridgeObjectRelease(v83);
                            *(_QWORD *)&v128 = v24;
                            *((_QWORD *)&v128 + 1) = v23;
                            v129 = v110;
                            v130 = v111;
                            v84 = type metadata accessor for PageUpdateInstruction.ShelfItemUpdateDescriptor(255, (uint64_t)&v128);
                            v85 = type metadata accessor for Array(0, v84);
                            LOBYTE(v128) = 1;
                            v124 = swift_getWitnessTable(&protocol conformance descriptor for PageUpdateInstruction<A, B>.ShelfItemUpdateDescriptor, v84);
                            v86 = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v85);
                            KeyedDecodingContainer.decode<A>(_:forKey:)(v127, v85, &v128, v117, v85, v86);
                            (*(void (**)(char *, uint64_t))(v113 + 8))(v107, v117);
                            v37 = v19;
                            *v19 = v127[0];
                            v50 = v19;
                            v42 = v109;
                            v51 = v109;
                            v52 = 7;
                            goto LABEL_22;
                          }
                          v79 = v32;
                        }
                        swift_bridgeObjectRelease(v79);
                        *(_QWORD *)&v128 = v24;
                        *((_QWORD *)&v128 + 1) = v23;
                        v129 = v110;
                        v130 = v111;
                        v80 = type metadata accessor for PageUpdateInstruction.ShelfItemRemovalDescriptor(255, (uint64_t)&v128);
                        v81 = type metadata accessor for Array(0, v80);
                        LOBYTE(v128) = 1;
                        v123 = swift_getWitnessTable(&protocol conformance descriptor for PageUpdateInstruction<A, B>.ShelfItemRemovalDescriptor, v80);
                        v82 = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v81);
                        KeyedDecodingContainer.decode<A>(_:forKey:)(v127, v81, &v128, v117, v81, v82);
                        (*(void (**)(char *, uint64_t))(v113 + 8))(v107, v117);
                        v37 = v19;
                        *v19 = v127[0];
                        v50 = v19;
                        v42 = v109;
                        v51 = v109;
                        v52 = 6;
                        goto LABEL_22;
                      }
                      swift_bridgeObjectRelease(v32);
                      v26 = v117;
                    }
                    *(_QWORD *)&v128 = v24;
                    *((_QWORD *)&v128 + 1) = v23;
                    v129 = v110;
                    v130 = v111;
                    v73 = type metadata accessor for PageUpdateInstruction.ShelfItemUpdateDescriptor(255, (uint64_t)&v128);
                    v74 = type metadata accessor for Array(0, v73);
                    LOBYTE(v128) = 1;
                    v122 = swift_getWitnessTable(&protocol conformance descriptor for PageUpdateInstruction<A, B>.ShelfItemUpdateDescriptor, v73);
                    v75 = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v74);
                    v76 = v74;
                    v77 = v74;
                    v78 = v107;
                    KeyedDecodingContainer.decode<A>(_:forKey:)(v127, v76, &v128, v26, v77, v75);
                    (*(void (**)(char *, uint64_t))(v113 + 8))(v78, v26);
                    v37 = v19;
                    *v19 = v127[0];
                    v50 = v19;
                    v42 = v109;
                    v51 = v109;
                    v52 = 5;
                    goto LABEL_22;
                  }
                  v66 = v32;
                }
                swift_bridgeObjectRelease(v66);
                v53 = v112;
                LOBYTE(v128) = 1;
                v67 = v107;
                v68 = KeyedDecodingContainer.decode(_:forKey:)(&v128, v26);
                v70 = v69;
                v71 = v26;
                v29 = v118;
                v54 = v119;
                v37 = v108;
                v72 = v68;
                (*(void (**)(char *, uint64_t))(v113 + 8))(v67, v71);
                *v37 = v72;
                v37[1] = v70;
                v42 = v109;
                swift_storeEnumTagMultiPayload(v37, v109, 4);
                goto LABEL_24;
              }
              v61 = v32;
            }
            swift_bridgeObjectRelease(v61);
            v62 = sub_5440(&qword_25DF80);
            LOBYTE(v127[0]) = 1;
            v63 = sub_B85BC();
            v64 = v107;
            KeyedDecodingContainer.decode<A>(_:forKey:)(&v128, v62, v127, v26, v62, v63);
            v65 = v26;
            v29 = v118;
            v37 = v108;
            (*(void (**)(char *, uint64_t))(v113 + 8))(v64, v65);
            *v37 = v128;
            v41 = v37;
            v42 = v109;
            v43 = v109;
            v44 = 3;
            goto LABEL_13;
          }
          v56 = v32;
        }
        swift_bridgeObjectRelease(v56);
        v57 = type metadata accessor for Array(0, v23);
        LOBYTE(v127[0]) = 1;
        v121 = v25;
        v58 = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v57);
        v59 = v107;
        KeyedDecodingContainer.decode<A>(_:forKey:)(&v128, v57, v127, v26, v57, v58);
        (*(void (**)(char *, uint64_t))(v113 + 8))(v59, v26);
        v37 = v108;
        *v108 = v128;
        v50 = v37;
        v42 = v109;
        v51 = v109;
        v52 = 2;
        goto LABEL_22;
      }
      v46 = v32;
    }
    swift_bridgeObjectRelease(v46);
    v47 = type metadata accessor for Array(0, v23);
    LOBYTE(v127[0]) = 1;
    v120 = v25;
    v48 = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v47);
    v49 = v107;
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v128, v47, v127, v26, v47, v48);
    (*(void (**)(char *, uint64_t))(v113 + 8))(v49, v26);
    v37 = v108;
    *v108 = v128;
    v50 = v37;
    v42 = v109;
    v51 = v109;
    v52 = 1;
    goto LABEL_22;
  }
  v29 = v118;
  return _s7BooksUI13AnyPagedFrameVwxx_0(v29);
}

uint64_t _s10CodingKeysOMa_2(uint64_t a1, uint64_t a2)
{
  return swift_getGenericMetadata(a1, a2, &_s10CodingKeysOMn_2);
}

unint64_t sub_B85BC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2637D8;
  if (!qword_2637D8)
  {
    v1 = sub_7EF8(&qword_25DF80);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_2637D8);
  }
  return result;
}

unint64_t sub_B8618(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_2497A8, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 3)
    return 3;
  else
    return v3;
}

uint64_t sub_B8664(char a1)
{
  if (!a1)
    return 0x736D657469;
  if (a1 == 1)
    return 0x4449666C656873;
  return 0xD000000000000010;
}

uint64_t sub_B86BC@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return PageUpdateInstruction<>.init(from:)(a1, a2[2], a2[3], a2[4], a2[5], *(_QWORD *)(a3 - 8), a4);
}

uint64_t sub_B86E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_1E8468, a3);
  return == infix<A>(_:_:)(a1, a2, a3, WitnessTable, &protocol witness table for String);
}

uint64_t sub_B8734(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_1E8468, a1);
  return RawRepresentable<>.hashValue.getter(a1, a2, WitnessTable, &protocol witness table for String);
}

uint64_t sub_B8780(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_1E8468, a2);
  return RawRepresentable<>.hash(into:)(a1, a2, a3, WitnessTable, &protocol witness table for String);
}

uint64_t sub_B87D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_1E8468, a2);
  return RawRepresentable<>._rawHashValue(seed:)(a1, a2, a3, WitnessTable, &protocol witness table for String);
}

unint64_t sub_B8820@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  void *v3;
  unint64_t result;
  Swift::String v5;

  v3 = (void *)a1[1];
  v5._countAndFlagsBits = *a1;
  v5._object = v3;
  result = sub_B8618(v5);
  *a2 = result;
  return result;
}

uint64_t sub_B8858@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_B8664(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_B8888()
{
  char *v0;

  return sub_B8664(*v0);
}

uint64_t sub_B8898@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_B8660(a1);
  *a2 = result;
  return result;
}

uint64_t sub_B88C8@<X0>(_QWORD *a1@<X1>, _BYTE *a2@<X8>)
{
  return sub_B9394(a1, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))sub_B9878, a2);
}

uint64_t sub_B88D4(uint64_t a1)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_1E8788, a1);
  return CodingKey.description.getter(a1, WitnessTable);
}

uint64_t sub_B8908(uint64_t a1)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_1E8788, a1);
  return CodingKey.debugDescription.getter(a1, WitnessTable);
}

uint64_t PageUpdateInstruction.ShelfItemUpdateDescriptor.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _OWORD *a6@<X8>)
{
  uint64_t v7;
  uint64_t WitnessTable;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v20;
  uint64_t v21;
  char v22;
  __int128 v23;
  __int128 v24;
  _OWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _OWORD *v29;
  uint64_t v30;
  uint64_t v31;
  _OWORD v32[2];
  uint64_t v33;
  char v34;
  __int128 v35;
  _BYTE v36[24];
  __int128 v37;
  uint64_t v38;
  char v39;
  uint64_t v40;

  v29 = a6;
  v30 = a4;
  *(_QWORD *)&v35 = a2;
  *((_QWORD *)&v35 + 1) = a3;
  *(_QWORD *)v36 = a4;
  *(_QWORD *)&v36[8] = a5;
  v28 = a5;
  v7 = _s10CodingKeysOMa_1(255, (uint64_t)&v35);
  WitnessTable = swift_getWitnessTable(&unk_1E8788, v7);
  v31 = type metadata accessor for KeyedDecodingContainer(0, v7);
  v9 = *(_QWORD *)(v31 - 8);
  __chkstk_darwin(v31);
  v11 = (char *)&v26 - v10;
  v12 = a1[3];
  v13 = a1[4];
  sub_5480(a1, v12);
  v14 = v40;
  dispatch thunk of Decoder.container<A>(keyedBy:)(v7, v7, WitnessTable, v12, v13);
  if (!v14)
  {
    LOBYTE(v32[0]) = 0;
    v15 = sub_B8BE0();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v35, &type metadata for _CodeAnyComponentModel_Many, v32, v31, &type metadata for _CodeAnyComponentModel_Many, v15);
    v16 = v35;
    LOBYTE(v35) = 1;
    v26 = KeyedDecodingContainer.decode(_:forKey:)(&v35, v31);
    v27 = v17;
    v40 = v16;
    LOBYTE(v32[0]) = 2;
    v18 = sub_B8C24();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&type metadata for PaginationUpdate, v32, v31, &type metadata for PaginationUpdate, v18);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v31);
    v32[0] = v35;
    v32[1] = *(_OWORD *)v36;
    v33 = *(_QWORD *)&v36[16];
    v34 = v37;
    PageUpdateInstruction.ShelfItemUpdateDescriptor.init(items:shelfID:paginationUpdate:)(v40, v26, v27, (uint64_t)v32, (uint64_t)&v35);
    v20 = *(_QWORD *)v36;
    v21 = v38;
    v22 = v39;
    v23 = *(_OWORD *)&v36[8];
    v24 = v37;
    v25 = v29;
    *v29 = v35;
    *((_QWORD *)v25 + 2) = v20;
    *(_OWORD *)((char *)v25 + 24) = v23;
    *(_OWORD *)((char *)v25 + 40) = v24;
    *((_QWORD *)v25 + 7) = v21;
    *((_BYTE *)v25 + 64) = v22;
  }
  return _s7BooksUI13AnyPagedFrameVwxx_0(a1);
}

uint64_t _s10CodingKeysOMa_1(uint64_t a1, uint64_t a2)
{
  return swift_getGenericMetadata(a1, a2, &_s10CodingKeysOMn_1);
}

unint64_t sub_B8BE0()
{
  unint64_t result;

  result = qword_2637E0;
  if (!qword_2637E0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for _CodeAnyComponentModel_Many, &type metadata for _CodeAnyComponentModel_Many);
    atomic_store(result, (unint64_t *)&qword_2637E0);
  }
  return result;
}

unint64_t sub_B8C24()
{
  unint64_t result;

  result = qword_2637E8[0];
  if (!qword_2637E8[0])
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for PaginationUpdate, &type metadata for PaginationUpdate);
    atomic_store(result, qword_2637E8);
  }
  return result;
}

uint64_t sub_B8C68(char a1)
{
  if ((a1 & 1) != 0)
    return 0x4449666C656873;
  else
    return 0x7344496D657469;
}

uint64_t sub_B8C98@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, _OWORD *a3@<X8>)
{
  return PageUpdateInstruction.ShelfItemUpdateDescriptor.init(from:)(a1, a2[2], a2[3], a2[4], a2[5], a3);
}

uint64_t sub_B8CB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_1E8558, a3);
  return == infix<A>(_:_:)(a1, a2, a3, WitnessTable, &protocol witness table for String);
}

uint64_t sub_B8D0C(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_1E8558, a1);
  return RawRepresentable<>.hashValue.getter(a1, a2, WitnessTable, &protocol witness table for String);
}

uint64_t sub_B8D58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_1E8558, a2);
  return RawRepresentable<>.hash(into:)(a1, a2, a3, WitnessTable, &protocol witness table for String);
}

uint64_t sub_B8DA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_1E8558, a2);
  return RawRepresentable<>._rawHashValue(seed:)(a1, a2, a3, WitnessTable, &protocol witness table for String);
}

uint64_t sub_B8DF8@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, _BYTE *a3@<X8>)
{
  Swift::OpaquePointer v3;

  v3._rawValue = &off_249810;
  return sub_B8E04(v3, a1, a2, a3);
}

uint64_t sub_B8E04@<X0>(Swift::OpaquePointer cases@<0:X3>, uint64_t *a2@<X0>, _QWORD *a3@<X1>, _BYTE *a4@<X8>)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  Swift::String v12;

  v6 = (void *)a2[1];
  v7 = a3[2];
  v8 = a3[3];
  v9 = a3[4];
  v10 = a3[5];
  v12._countAndFlagsBits = *a2;
  v12._object = v6;
  result = sub_B9128(v12, v7, v8, v9, v10, cases);
  *a4 = result;
  return result;
}

uint64_t sub_B8E40@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_B9320(a1, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_B8C68, a2);
}

uint64_t sub_B8E4C(_QWORD *a1, uint64_t a2)
{
  return sub_B9364(a1, a2, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_B8C68);
}

uint64_t sub_B8E58@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X2>, _BYTE *a3@<X8>)
{
  Swift::OpaquePointer v4;

  v4._rawValue = &off_249810;
  return sub_B8E64(v4, *(Swift::String *)&a1, a2, a3);
}

uint64_t sub_B8E64@<X0>(Swift::OpaquePointer cases@<0:X4>, Swift::String a2@<X1:X0>, uint64_t *a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t result;

  result = sub_B9128(a2, a3[2], a3[3], a3[4], a3[5], cases);
  *a4 = result;
  return result;
}

uint64_t sub_B8E98@<X0>(_QWORD *a1@<X1>, _BYTE *a2@<X8>)
{
  return sub_B9394(a1, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))sub_B9880, a2);
}

uint64_t sub_B8EA4(uint64_t a1)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_1E8738, a1);
  return CodingKey.description.getter(a1, WitnessTable);
}

uint64_t sub_B8ED8(uint64_t a1)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_1E8738, a1);
  return CodingKey.debugDescription.getter(a1, WitnessTable);
}

uint64_t PageUpdateInstruction.ShelfItemRemovalDescriptor.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _OWORD *a6@<X8>)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t WitnessTable;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  uint64_t v24;
  _OWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  char v33;

  v25 = a6;
  v26 = a3;
  *(_QWORD *)&v30 = a2;
  *((_QWORD *)&v30 + 1) = a3;
  v27 = a4;
  v28 = a5;
  v31 = a4;
  v32 = a5;
  v8 = _s10CodingKeysOMa_0(255, (uint64_t)&v30);
  WitnessTable = swift_getWitnessTable(&unk_1E8738, v8);
  v29 = type metadata accessor for KeyedDecodingContainer(0, v8);
  v10 = *(_QWORD *)(v29 - 8);
  __chkstk_darwin(v29);
  v12 = (char *)&v24 - v11;
  v13 = a1[3];
  v14 = a1[4];
  sub_5480(a1, v13);
  dispatch thunk of Decoder.container<A>(keyedBy:)(v8, v8, WitnessTable, v13, v14);
  if (!v6)
  {
    v15 = sub_5440(&qword_25DF80);
    v33 = 0;
    v16 = sub_B85BC();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v30, v15, &v33, v29, v15, v16);
    v24 = v30;
    LOBYTE(v30) = 1;
    v18 = KeyedDecodingContainer.decode(_:forKey:)(&v30, v29);
    v19 = v12;
    v21 = v20;
    (*(void (**)(char *, uint64_t))(v10 + 8))(v19, v29);
    PageUpdateInstruction.ShelfItemRemovalDescriptor.init(itemIDs:shelfID:)(v24, v18, v21, &v30);
    v22 = v31;
    v23 = v25;
    *v25 = v30;
    *((_QWORD *)v23 + 2) = v22;
  }
  return _s7BooksUI13AnyPagedFrameVwxx_0(a1);
}

uint64_t _s10CodingKeysOMa_0(uint64_t a1, uint64_t a2)
{
  return swift_getGenericMetadata(a1, a2, &_s10CodingKeysOMn_0);
}

uint64_t sub_B9128(Swift::String string, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, Swift::OpaquePointer cases)
{
  void *object;
  Swift::String v7;
  Swift::Int v8;
  unsigned int v9;

  object = string._object;
  v7._countAndFlagsBits = string._countAndFlagsBits;
  v7._object = object;
  v8 = _findStringSwitchCase(cases:string:)(cases, v7);
  swift_bridgeObjectRelease(object);
  if (v8 == 1)
    v9 = 1;
  else
    v9 = 2;
  if (v8)
    return v9;
  else
    return 0;
}

uint64_t sub_B9174(char a1)
{
  if ((a1 & 1) != 0)
    return 0x4449666C656873;
  else
    return 0x6C65646F6DLL;
}

uint64_t sub_B91A8@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, _OWORD *a3@<X8>)
{
  return PageUpdateInstruction.ShelfItemRemovalDescriptor.init(from:)(a1, a2[2], a2[3], a2[4], a2[5], a3);
}

uint64_t sub_B91C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_1E8648, a3);
  return == infix<A>(_:_:)(a1, a2, a3, WitnessTable, &protocol witness table for String);
}

uint64_t sub_B921C(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_1E8648, a1);
  return RawRepresentable<>.hashValue.getter(a1, a2, WitnessTable, &protocol witness table for String);
}

uint64_t sub_B9268(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_1E8648, a2);
  return RawRepresentable<>.hash(into:)(a1, a2, a3, WitnessTable, &protocol witness table for String);
}

uint64_t sub_B92B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_1E8648, a2);
  return RawRepresentable<>._rawHashValue(seed:)(a1, a2, a3, WitnessTable, &protocol witness table for String);
}

uint64_t sub_B9308@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, _BYTE *a3@<X8>)
{
  Swift::OpaquePointer v3;

  v3._rawValue = &off_249860;
  return sub_B8E04(v3, a1, a2, a3);
}

uint64_t sub_B9314@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_B9320(a1, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_B9174, a2);
}

uint64_t sub_B9320@<X0>(_QWORD *a1@<X0>, uint64_t (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD)@<X2>, uint64_t *a3@<X8>)
{
  unsigned __int8 *v3;
  uint64_t result;
  uint64_t v6;

  result = a2(*v3, a1[2], a1[3], a1[4], a1[5]);
  *a3 = result;
  a3[1] = v6;
  return result;
}

uint64_t sub_B9358(_QWORD *a1, uint64_t a2)
{
  return sub_B9364(a1, a2, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_B9174);
}

uint64_t sub_B9364(_QWORD *a1, uint64_t a2, uint64_t (*a3)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  unsigned __int8 *v3;

  return a3(*v3, a1[2], a1[3], a1[4], a1[5]);
}

uint64_t sub_B937C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X2>, _BYTE *a3@<X8>)
{
  Swift::OpaquePointer v4;

  v4._rawValue = &off_249860;
  return sub_B8E64(v4, *(Swift::String *)&a1, a2, a3);
}

uint64_t sub_B9388@<X0>(_QWORD *a1@<X1>, _BYTE *a2@<X8>)
{
  return sub_B9394(a1, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))sub_35C54, a2);
}

uint64_t sub_B9394@<X0>(_QWORD *a1@<X1>, uint64_t (*a2)(_QWORD, _QWORD, _QWORD, _QWORD)@<X3>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = a2(a1[2], a1[3], a1[4], a1[5]);
  *a3 = result;
  return result;
}

uint64_t sub_B93C8(uint64_t a1)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_1E86E8, a1);
  return CodingKey.description.getter(a1, WitnessTable);
}

uint64_t sub_B93FC(uint64_t a1)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_1E86E8, a1);
  return CodingKey.debugDescription.getter(a1, WitnessTable);
}

uint64_t PageUpdateInstruction.ShelfHeaderFooterUpdateDescriptor.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t WitnessTable;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25[2];
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v22 = a6;
  v23 = a3;
  *(_QWORD *)&v26 = a2;
  *((_QWORD *)&v26 + 1) = a3;
  v24 = a4;
  v27 = a4;
  v28 = a5;
  v21 = a5;
  v8 = _s10CodingKeysOMa(255, (uint64_t)&v26);
  WitnessTable = swift_getWitnessTable(&unk_1E86E8, v8);
  v29 = type metadata accessor for KeyedDecodingContainer(0, v8);
  v10 = *(_QWORD *)(v29 - 8);
  __chkstk_darwin(v29);
  v12 = (char *)&v21 - v11;
  v13 = a1[3];
  v14 = a1[4];
  sub_5480(a1, v13);
  dispatch thunk of Decoder.container<A>(keyedBy:)(v8, v8, WitnessTable, v13, v14);
  if (!v6)
  {
    v15 = v22;
    LOBYTE(v25[0]) = 0;
    v16 = sub_5DF14();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v26, &type metadata for CodeAnyComponentModel, v25, v29, &type metadata for CodeAnyComponentModel, v16);
    LOBYTE(v25[0]) = 1;
    v18 = KeyedDecodingContainer.decode(_:forKey:)(v25, v29);
    v20 = v19;
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v29);
    sub_AC68(&v26, (uint64_t)v25);
    PageUpdateInstruction.ShelfHeaderFooterUpdateDescriptor.init(model:shelfID:)(v25, v18, v20, v15);
  }
  return _s7BooksUI13AnyPagedFrameVwxx_0(a1);
}

uint64_t _s10CodingKeysOMa(uint64_t a1, uint64_t a2)
{
  return swift_getGenericMetadata(a1, a2, &_s10CodingKeysOMn);
}

uint64_t sub_B9618@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  return PageUpdateInstruction.ShelfHeaderFooterUpdateDescriptor.init(from:)(a1, a2[2], a2[3], a2[4], a2[5], a3);
}

uint64_t sub_B9640(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_B968C + 4 * byte_1E821D[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_B96C0 + 4 * byte_1E8218[v4]))();
}

uint64_t sub_B96C0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_B96C8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0xB96D0);
  return result;
}

uint64_t sub_B96DC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0xB96E4);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_B96E8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_B96F0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_B96FC(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_B9748 + 4 * byte_1E8227[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_B977C + 4 * byte_1E8222[v4]))();
}

uint64_t sub_B977C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_B9784(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0xB978CLL);
  return result;
}

uint64_t sub_B9798(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0xB97A0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_B97A4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_B97AC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_B97B8(uint64_t a1)
{
  return swift_getWitnessTable(&unk_1E83F0, a1);
}

uint64_t sub_B97C8(uint64_t a1)
{
  return swift_getWitnessTable(&unk_1E84E0, a1);
}

uint64_t sub_B97D8(uint64_t a1)
{
  return swift_getWitnessTable(&unk_1E85D0, a1);
}

uint64_t sub_B97E8(uint64_t a1)
{
  return swift_getWitnessTable(&unk_1E86C0, a1);
}

uint64_t sub_B97F8(uint64_t a1)
{
  return swift_getWitnessTable(&unk_1E85F8, a1);
}

uint64_t sub_B9808(uint64_t a1)
{
  return swift_getWitnessTable(&unk_1E8620, a1);
}

uint64_t sub_B9818(uint64_t a1)
{
  return swift_getWitnessTable(&unk_1E8508, a1);
}

uint64_t sub_B9828(uint64_t a1)
{
  return swift_getWitnessTable(&unk_1E8530, a1);
}

uint64_t sub_B9838(uint64_t a1)
{
  return swift_getWitnessTable(&unk_1E8418, a1);
}

uint64_t sub_B9848(uint64_t a1)
{
  return swift_getWitnessTable(&unk_1E8440, a1);
}

uint64_t sub_B9858(uint64_t a1)
{
  return swift_getWitnessTable(&unk_1E8328, a1);
}

uint64_t sub_B9868(uint64_t a1)
{
  return swift_getWitnessTable(&unk_1E8350, a1);
}

uint64_t sub_B9878()
{
  return 3;
}

uint64_t static Defaults.shelfGridDebugUIEnabled.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  v0 = sub_5440(&qword_263A08);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_25DC18 != -1)
    swift_once(&qword_25DC18, sub_B9B50);
  v4 = sub_7120(v0, (uint64_t)qword_2639F0);
  (*(void (**)(char *, uint64_t, uint64_t))(v1 + 16))(v3, v4, v0);
  UserDefault.wrappedValue.getter(&v7, v0);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return v7;
}

uint64_t static Defaults.shelfGridDebugUIEnabled.setter(char a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v8;
  char v9;

  v2 = sub_5440(&qword_263A08);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_25DC18 != -1)
    swift_once(&qword_25DC18, sub_B9B50);
  v6 = sub_7120(v2, (uint64_t)qword_2639F0);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v6, v2);
  v9 = a1 & 1;
  UserDefault.wrappedValue.setter(&v9, v2);
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

void (*static Defaults.shelfGridDebugUIEnabled.modify(_QWORD *a1))(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;

  v2 = malloc(0x40uLL);
  *a1 = v2;
  v3 = sub_5440(&qword_263A08);
  v2[4] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[5] = v4;
  v5 = malloc(*(_QWORD *)(v4 + 64));
  v2[6] = v5;
  if (qword_25DC18 != -1)
    swift_once(&qword_25DC18, sub_B9B50);
  v6 = sub_7120(v3, (uint64_t)qword_2639F0);
  (*(void (**)(void *, uint64_t, uint64_t))(v4 + 16))(v5, v6, v3);
  v2[7] = UserDefault.wrappedValue.modify(v2, v3);
  return sub_B9AFC;
}

void sub_B9AFC(_QWORD *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;

  v1 = (void *)*a1;
  v2 = *(void **)(*a1 + 48);
  v3 = *(_QWORD *)(*a1 + 32);
  v4 = *(_QWORD *)(*a1 + 40);
  (*(void (**)(_QWORD, _QWORD))(*a1 + 56))(*a1, 0);
  (*(void (**)(void *, uint64_t))(v4 + 8))(v2, v3);
  free(v2);
  free(v1);
}

uint64_t sub_B9B50()
{
  uint64_t v0;
  id v1;
  char v3;

  v0 = sub_5440(&qword_263A08);
  sub_73A0(v0, qword_2639F0);
  sub_7120(v0, (uint64_t)qword_2639F0);
  v1 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v3 = 0;
  return UserDefault.init(_:defaults:defaultValue:)(0xD00000000000001ELL, 0x80000000001FBAF0, v1, &v3, &type metadata for Bool);
}

ValueMetadata *type metadata accessor for Defaults()
{
  return &type metadata for Defaults;
}

double NavigationBarTransitionInfo.startOffset.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

double NavigationBarTransitionInfo.endOffset.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 8);
}

void NavigationBarTransitionInfo.init(startOffset:endOffset:)(double *a1@<X8>, double a2@<D0>, double a3@<D1>)
{
  *a1 = a2;
  a1[1] = a3;
}

BOOL static NavigationBarTransitionInfo.== infix(_:_:)(double *a1, double *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

uint64_t View.navigationStyle(_:localizer:scrollContentOffset:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7, double a8)
{
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  _BYTE v24[40];

  v16 = type metadata accessor for NavigationStyle(0);
  __chkstk_darwin(v16);
  v18 = &v24[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v19 = type metadata accessor for NavigationStyleViewModifier(0);
  __chkstk_darwin(v19);
  v21 = &v24[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  sub_1E428(a1, (uint64_t)v18, type metadata accessor for NavigationStyle);
  sub_BD00(a2, (uint64_t)v24);
  swift_retain(a3);
  swift_retain(a4);
  sub_B9DC8((uint64_t)v18, (uint64_t)v24, a3, a4, (uint64_t)v21, a7, a8);
  View.modifier<A>(_:)(v21, a5, v19, a6);
  return sub_224DC((uint64_t)v21, type metadata accessor for NavigationStyleViewModifier);
}

uint64_t type metadata accessor for NavigationStyle(uint64_t a1)
{
  return sub_1FE90(a1, qword_263B18, (uint64_t)&nominal type descriptor for NavigationStyle);
}

uint64_t type metadata accessor for NavigationStyleViewModifier(uint64_t a1)
{
  return sub_1FE90(a1, qword_263BB0, (uint64_t)&nominal type descriptor for NavigationStyleViewModifier);
}

uint64_t sub_B9DC8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, double a6@<D0>, double a7@<D1>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  int *v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int *v40;
  uint64_t *v41;
  uint64_t v42;
  __n128 v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t result;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  char v64;

  v58 = a3;
  v59 = a4;
  v56 = (_QWORD *)a2;
  v11 = type metadata accessor for ToolbarPrincipalType(0);
  __chkstk_darwin(v11);
  v55 = (uint64_t)&v55 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for NavigationStyle(0);
  __chkstk_darwin(v13);
  v15 = (uint64_t *)((char *)&v55 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16 = type metadata accessor for LocalizerRequest(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = __chkstk_darwin(v16);
  v20 = (char *)&v55 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v22 = (char *)&v55 - v21;
  v23 = (int *)type metadata accessor for NavigationStyleViewModifier(0);
  v24 = a5 + v23[7];
  v63 = 0;
  v64 = 1;
  v25 = sub_5440(&qword_263EE8);
  State.init(wrappedValue:)(&v60, &v63, v25);
  v26 = v61;
  v27 = v62;
  *(_QWORD *)v24 = v60;
  *(_BYTE *)(v24 + 8) = v26;
  *(_QWORD *)(v24 + 16) = v27;
  v28 = (_QWORD *)(a5 + v23[8]);
  *v28 = swift_getKeyPath(&unk_1E8C90);
  v29 = sub_5440(&qword_25FAA0);
  swift_storeEnumTagMultiPayload(v28, v29, 0);
  v30 = (_QWORD *)(a5 + v23[9]);
  *v30 = swift_getKeyPath(&unk_1E8C30);
  v31 = sub_5440(&qword_25F548);
  swift_storeEnumTagMultiPayload(v30, v31, 0);
  v32 = (_QWORD *)(a5 + v23[10]);
  *v32 = swift_getKeyPath(&unk_1E8AF0);
  v33 = sub_5440(&qword_25F1E8);
  swift_storeEnumTagMultiPayload(v32, v33, 0);
  v34 = a5 + v23[11];
  *(_QWORD *)v34 = swift_getKeyPath(&unk_1E8B18);
  *(_BYTE *)(v34 + 8) = 0;
  sub_1E428(a1, a5 + v23[5], type metadata accessor for NavigationStyle);
  v57 = a1;
  sub_1E428(a1, (uint64_t)v15, type metadata accessor for NavigationStyle);
  if (swift_getEnumCaseMultiPayload(v15, v13) == 1)
  {
    v35 = *v15;
    swift_release(v15[1]);
    swift_release(v35);
    v36 = (int *)sub_5440(&qword_263AA0);
    v37 = (uint64_t)v15 + v36[12];
    swift_bridgeObjectRelease(*(uint64_t *)((char *)v15 + v36[16]));
    swift_bridgeObjectRelease(*(uint64_t *)((char *)v15 + v36[20]));
    v38 = v55;
    sub_21C88(v37, v55, type metadata accessor for ToolbarPrincipalType);
    v39 = v38 + *(int *)(sub_5440(&qword_263A10) + 48);
    (*(void (**)(char *, uint64_t, uint64_t))(v17 + 32))(v22, v38, v16);
    sub_B414(v39, &qword_25E0C8);
  }
  else
  {
    v40 = (int *)sub_5440(&qword_263A98);
    swift_bridgeObjectRelease(*(uint64_t *)((char *)v15 + v40[12]));
    swift_bridgeObjectRelease(*(uint64_t *)((char *)v15 + v40[16]));
    v41 = (uint64_t *)((char *)v15 + v40[20]);
    v42 = *v41;
    swift_release(v41[1]);
    v43 = swift_release(v42);
    (*(void (**)(char *, uint64_t *, uint64_t, __n128))(v17 + 32))(v22, v15, v16, v43);
  }
  (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v20, v22, v16);
  v44 = v56;
  sub_BD00((uint64_t)v56, (uint64_t)&v60);
  v45 = Text.init(_:localizer:)(v20, &v60);
  v47 = v46;
  v49 = v48;
  v51 = v50;
  _s7BooksUI13AnyPagedFrameVwxx_0(v44);
  sub_224DC(v57, type metadata accessor for NavigationStyle);
  result = (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v22, v16);
  *(_QWORD *)a5 = v45;
  *(_QWORD *)(a5 + 8) = v47;
  *(_BYTE *)(a5 + 16) = v49 & 1;
  *(_QWORD *)(a5 + 24) = v51;
  v53 = a5 + v23[6];
  v54 = v59;
  *(_QWORD *)v53 = v58;
  *(_QWORD *)(v53 + 8) = v54;
  *(double *)(v53 + 16) = a6;
  *(double *)(v53 + 24) = a7;
  return result;
}

ValueMetadata *type metadata accessor for NavigationBarTransitionInfo()
{
  return &type metadata for NavigationBarTransitionInfo;
}

uint64_t *initializeBufferWithCopyOfBuffer for ToolbarPrincipalType(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v13);
  }
  else
  {
    v6 = type metadata accessor for LocalizerRequest(0);
    v7 = *(_QWORD *)(v6 - 8);
    v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16);
    v8(a1, a2, v6);
    v9 = *(int *)(sub_5440(&qword_263A10) + 48);
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v11, 1, v6))
    {
      v12 = sub_5440(&qword_25E0C8);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
    else
    {
      v8((uint64_t *)v10, (uint64_t *)v11, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v10, 0, 1, v6);
    }
  }
  return a1;
}

uint64_t destroy for ToolbarPrincipalType(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  void (*v6)(uint64_t, uint64_t);

  v2 = type metadata accessor for LocalizerRequest(0);
  v3 = *(_QWORD *)(v2 - 8);
  v6 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v6(a1, v2);
  v4 = a1 + *(int *)(sub_5440(&qword_263A10) + 48);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v4, 1, v2);
  if (!(_DWORD)result)
    return ((uint64_t (*)(uint64_t, uint64_t))v6)(v4, v2);
  return result;
}

char *initializeWithCopy for ToolbarPrincipalType(char *a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  void (*v6)(void *, const void *, uint64_t);
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;

  v4 = type metadata accessor for LocalizerRequest(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(void (**)(void *, const void *, uint64_t))(v5 + 16);
  v6(a1, a2, v4);
  v7 = *(int *)(sub_5440(&qword_263A10) + 48);
  v8 = &a1[v7];
  v9 = &a2[v7];
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v9, 1, v4))
  {
    v10 = sub_5440(&qword_25E0C8);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  else
  {
    v6(v8, v9, v4);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v8, 0, 1, v4);
  }
  return a1;
}

char *assignWithCopy for ToolbarPrincipalType(char *a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  void (*v6)(void *, const void *, uint64_t);
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t (*v10)(const void *, uint64_t, uint64_t);
  int v11;
  int v12;
  uint64_t v13;

  v4 = type metadata accessor for LocalizerRequest(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(void (**)(void *, const void *, uint64_t))(v5 + 24);
  v6(a1, a2, v4);
  v7 = *(int *)(sub_5440(&qword_263A10) + 48);
  v8 = &a1[v7];
  v9 = &a2[v7];
  v10 = *(uint64_t (**)(const void *, uint64_t, uint64_t))(v5 + 48);
  v11 = v10(&a1[v7], 1, v4);
  v12 = v10(v9, 1, v4);
  if (!v11)
  {
    if (!v12)
    {
      v6(v8, v9, v4);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    goto LABEL_6;
  }
  if (v12)
  {
LABEL_6:
    v13 = sub_5440(&qword_25E0C8);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v8, v9, v4);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v8, 0, 1, v4);
  return a1;
}

char *initializeWithTake for ToolbarPrincipalType(char *a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  void (*v6)(void *, const void *, uint64_t);
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;

  v4 = type metadata accessor for LocalizerRequest(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(void (**)(void *, const void *, uint64_t))(v5 + 32);
  v6(a1, a2, v4);
  v7 = *(int *)(sub_5440(&qword_263A10) + 48);
  v8 = &a1[v7];
  v9 = &a2[v7];
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v9, 1, v4))
  {
    v10 = sub_5440(&qword_25E0C8);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  else
  {
    v6(v8, v9, v4);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v8, 0, 1, v4);
  }
  return a1;
}

char *assignWithTake for ToolbarPrincipalType(char *a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  void (*v6)(void *, const void *, uint64_t);
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t (*v10)(const void *, uint64_t, uint64_t);
  int v11;
  int v12;
  uint64_t v13;

  v4 = type metadata accessor for LocalizerRequest(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(void (**)(void *, const void *, uint64_t))(v5 + 40);
  v6(a1, a2, v4);
  v7 = *(int *)(sub_5440(&qword_263A10) + 48);
  v8 = &a1[v7];
  v9 = &a2[v7];
  v10 = *(uint64_t (**)(const void *, uint64_t, uint64_t))(v5 + 48);
  v11 = v10(&a1[v7], 1, v4);
  v12 = v10(v9, 1, v4);
  if (!v11)
  {
    if (!v12)
    {
      v6(v8, v9, v4);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    goto LABEL_6;
  }
  if (v12)
  {
LABEL_6:
    v13 = sub_5440(&qword_25E0C8);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v8, v9, v4);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v8, 0, 1, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for ToolbarPrincipalType(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_5440(&qword_263A10);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for ToolbarPrincipalType(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_5440(&qword_263A10);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(a1, a2, a3, v6);
}

uint64_t type metadata accessor for ToolbarPrincipalType(uint64_t a1)
{
  return sub_1FE90(a1, (uint64_t *)&unk_263A88, (uint64_t)&nominal type descriptor for ToolbarPrincipalType);
}

uint64_t sub_BA7EC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _DWORD v7[8];

  v2 = type metadata accessor for LocalizerRequest(319);
  if (v3 <= 0x3F)
  {
    sub_19B38(319, (unint64_t *)&qword_261BA0, (uint64_t (*)(uint64_t))&type metadata accessor for LocalizerRequest, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    if (v5 > 0x3F)
    {
      return v4;
    }
    else
    {
      swift_getTupleTypeLayout2(v7, *(_QWORD *)(v2 - 8) + 64, *(_QWORD *)(v4 - 8) + 64);
      swift_initEnumMetadataSingleCase(a1, 256, v7);
      v2 = 0;
      *(_DWORD *)(*(_QWORD *)(a1 - 8) + 84) = v7[5];
    }
  }
  return v2;
}

uint64_t *initializeBufferWithCopyOfBuffer for NavigationStyle(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, char *, uint64_t);
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v20 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v20);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
    {
      v7 = *a2;
      v8 = a2[1];
      *a1 = *a2;
      a1[1] = v8;
      a1[2] = a2[2];
      swift_retain(v7);
      swift_retain(v8);
      v9 = (int *)sub_5440(&qword_263AA0);
      v10 = v9[12];
      v11 = (char *)a1 + v10;
      v12 = (char *)a2 + v10;
      v13 = type metadata accessor for LocalizerRequest(0);
      v14 = *(_QWORD *)(v13 - 8);
      v15 = *(void (**)(char *, char *, uint64_t))(v14 + 16);
      v15(v11, v12, v13);
      v16 = *(int *)(sub_5440(&qword_263A10) + 48);
      v17 = &v11[v16];
      v18 = &v12[v16];
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v18, 1, v13))
      {
        v19 = sub_5440(&qword_25E0C8);
        memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
      }
      else
      {
        v15(v17, v18, v13);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v17, 0, 1, v13);
      }
      v35 = v9[16];
      v36 = *(uint64_t *)((char *)a2 + v35);
      *(uint64_t *)((char *)a1 + v35) = v36;
      v37 = v9[20];
      v38 = *(uint64_t *)((char *)a2 + v37);
      *(uint64_t *)((char *)a1 + v37) = v38;
      swift_bridgeObjectRetain(v36);
      swift_bridgeObjectRetain(v38);
      v32 = a1;
      v33 = a3;
      v34 = 1;
    }
    else
    {
      v21 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(a1, a2, v21);
      v22 = (int *)sub_5440(&qword_263A98);
      v23 = v22[12];
      v24 = *(uint64_t *)((char *)a2 + v23);
      *(uint64_t *)((char *)a1 + v23) = v24;
      v25 = v22[16];
      v26 = *(uint64_t *)((char *)a2 + v25);
      *(uint64_t *)((char *)a1 + v25) = v26;
      v27 = v22[20];
      v28 = (char *)a1 + v27;
      v29 = (char *)a2 + v27;
      v30 = *(_QWORD *)v29;
      v31 = *((_QWORD *)v29 + 1);
      *(_QWORD *)v28 = *(_QWORD *)v29;
      *((_QWORD *)v28 + 1) = v31;
      *((_OWORD *)v28 + 1) = *((_OWORD *)v29 + 1);
      v28[32] = v29[32];
      swift_bridgeObjectRetain(v24);
      swift_bridgeObjectRetain(v26);
      swift_retain(v30);
      swift_retain(v31);
      v32 = a1;
      v33 = a3;
      v34 = 0;
    }
    swift_storeEnumTagMultiPayload(v32, v33, v34);
  }
  return a1;
}

double destroy for NavigationStyle(_QWORD *a1, uint64_t a2)
{
  int *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(char *, uint64_t);
  char *v8;
  double result;
  uint64_t v10;
  int *v11;
  _QWORD *v12;

  if (swift_getEnumCaseMultiPayload(a1, a2) == 1)
  {
    swift_release(*a1);
    swift_release(a1[1]);
    v3 = (int *)sub_5440(&qword_263AA0);
    v4 = (char *)a1 + v3[12];
    v5 = type metadata accessor for LocalizerRequest(0);
    v6 = *(_QWORD *)(v5 - 8);
    v7 = *(void (**)(char *, uint64_t))(v6 + 8);
    v7(v4, v5);
    v8 = &v4[*(int *)(sub_5440(&qword_263A10) + 48)];
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v8, 1, v5))
      v7(v8, v5);
    swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + v3[16]));
    swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + v3[20]));
  }
  else
  {
    v10 = type metadata accessor for LocalizerRequest(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(a1, v10);
    v11 = (int *)sub_5440(&qword_263A98);
    swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + v11[12]));
    swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + v11[16]));
    v12 = (_QWORD *)((char *)a1 + v11[20]);
    swift_release(*v12);
    *(_QWORD *)&result = swift_release(v12[1]).n128_u64[0];
  }
  return result;
}

uint64_t *initializeWithCopy for NavigationStyle(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
  {
    v6 = *a2;
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    a1[2] = a2[2];
    swift_retain(v6);
    swift_retain(v7);
    v8 = (int *)sub_5440(&qword_263AA0);
    v9 = v8[12];
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for LocalizerRequest(0);
    v13 = *(_QWORD *)(v12 - 8);
    v14 = *(void (**)(char *, char *, uint64_t))(v13 + 16);
    v14(v10, v11, v12);
    v15 = *(int *)(sub_5440(&qword_263A10) + 48);
    v16 = &v10[v15];
    v17 = &v11[v15];
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v17, 1, v12))
    {
      v18 = sub_5440(&qword_25E0C8);
      memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      v14(v16, v17, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v16, 0, 1, v12);
    }
    v33 = v8[16];
    v34 = *(uint64_t *)((char *)a2 + v33);
    *(uint64_t *)((char *)a1 + v33) = v34;
    v35 = v8[20];
    v36 = *(uint64_t *)((char *)a2 + v35);
    *(uint64_t *)((char *)a1 + v35) = v36;
    swift_bridgeObjectRetain(v34);
    swift_bridgeObjectRetain(v36);
    v30 = a1;
    v31 = a3;
    v32 = 1;
  }
  else
  {
    v19 = type metadata accessor for LocalizerRequest(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(a1, a2, v19);
    v20 = (int *)sub_5440(&qword_263A98);
    v21 = v20[12];
    v22 = *(uint64_t *)((char *)a2 + v21);
    *(uint64_t *)((char *)a1 + v21) = v22;
    v23 = v20[16];
    v24 = *(uint64_t *)((char *)a2 + v23);
    *(uint64_t *)((char *)a1 + v23) = v24;
    v25 = v20[20];
    v26 = (char *)a1 + v25;
    v27 = (char *)a2 + v25;
    v28 = *(_QWORD *)v27;
    v29 = *((_QWORD *)v27 + 1);
    *(_QWORD *)v26 = *(_QWORD *)v27;
    *((_QWORD *)v26 + 1) = v29;
    *((_OWORD *)v26 + 1) = *((_OWORD *)v27 + 1);
    v26[32] = v27[32];
    swift_bridgeObjectRetain(v22);
    swift_bridgeObjectRetain(v24);
    swift_retain(v28);
    swift_retain(v29);
    v30 = a1;
    v31 = a3;
    v32 = 0;
  }
  swift_storeEnumTagMultiPayload(v30, v31, v32);
  return a1;
}

uint64_t *assignWithCopy for NavigationStyle(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  if (a1 != a2)
  {
    sub_224DC((uint64_t)a1, type metadata accessor for NavigationStyle);
    if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
    {
      v6 = *a2;
      *a1 = *a2;
      v7 = a2[1];
      a1[1] = v7;
      a1[2] = a2[2];
      swift_retain(v6);
      swift_retain(v7);
      v8 = (int *)sub_5440(&qword_263AA0);
      v9 = v8[12];
      v10 = (char *)a1 + v9;
      v11 = (char *)a2 + v9;
      v12 = type metadata accessor for LocalizerRequest(0);
      v13 = *(_QWORD *)(v12 - 8);
      v14 = *(void (**)(char *, char *, uint64_t))(v13 + 16);
      v14(v10, v11, v12);
      v15 = *(int *)(sub_5440(&qword_263A10) + 48);
      v16 = &v10[v15];
      v17 = &v11[v15];
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v17, 1, v12))
      {
        v18 = sub_5440(&qword_25E0C8);
        memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
      }
      else
      {
        v14(v16, v17, v12);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v16, 0, 1, v12);
      }
      v34 = v8[16];
      v35 = *(uint64_t *)((char *)a2 + v34);
      *(uint64_t *)((char *)a1 + v34) = v35;
      v36 = v8[20];
      v37 = *(uint64_t *)((char *)a2 + v36);
      *(uint64_t *)((char *)a1 + v36) = v37;
      swift_bridgeObjectRetain(v35);
      swift_bridgeObjectRetain(v37);
      v31 = a1;
      v32 = a3;
      v33 = 1;
    }
    else
    {
      v19 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(a1, a2, v19);
      v20 = (int *)sub_5440(&qword_263A98);
      v21 = v20[12];
      v22 = *(uint64_t *)((char *)a2 + v21);
      *(uint64_t *)((char *)a1 + v21) = v22;
      v23 = v20[16];
      v24 = *(uint64_t *)((char *)a2 + v23);
      *(uint64_t *)((char *)a1 + v23) = v24;
      v25 = v20[20];
      v26 = (char *)a1 + v25;
      v27 = (char *)a2 + v25;
      v28 = *(_QWORD *)v27;
      *(_QWORD *)v26 = *(_QWORD *)v27;
      v29 = *((_QWORD *)v27 + 1);
      *((_QWORD *)v26 + 1) = v29;
      v30 = *((_OWORD *)v27 + 1);
      v26[32] = v27[32];
      *((_OWORD *)v26 + 1) = v30;
      swift_bridgeObjectRetain(v22);
      swift_bridgeObjectRetain(v24);
      swift_retain(v28);
      swift_retain(v29);
      v31 = a1;
      v32 = a3;
      v33 = 0;
    }
    swift_storeEnumTagMultiPayload(v31, v32, v33);
  }
  return a1;
}

uint64_t initializeWithTake for NavigationStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void *, const void *, uint64_t);
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    v6 = (int *)sub_5440(&qword_263AA0);
    v7 = v6[12];
    v8 = (char *)(a1 + v7);
    v9 = (char *)(a2 + v7);
    v10 = type metadata accessor for LocalizerRequest(0);
    v11 = *(_QWORD *)(v10 - 8);
    v12 = *(void (**)(void *, const void *, uint64_t))(v11 + 32);
    v12(v8, v9, v10);
    v13 = *(int *)(sub_5440(&qword_263A10) + 48);
    v14 = &v8[v13];
    v15 = &v9[v13];
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v15, 1, v10))
    {
      v16 = sub_5440(&qword_25E0C8);
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    }
    else
    {
      v12(v14, v15, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v14, 0, 1, v10);
    }
    *(_QWORD *)(a1 + v6[16]) = *(_QWORD *)(a2 + v6[16]);
    *(_QWORD *)(a1 + v6[20]) = *(_QWORD *)(a2 + v6[20]);
    v23 = a1;
    v24 = a3;
    v25 = 1;
  }
  else
  {
    v17 = type metadata accessor for LocalizerRequest(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(a1, a2, v17);
    v18 = (int *)sub_5440(&qword_263A98);
    *(_QWORD *)(a1 + v18[12]) = *(_QWORD *)(a2 + v18[12]);
    *(_QWORD *)(a1 + v18[16]) = *(_QWORD *)(a2 + v18[16]);
    v19 = v18[20];
    v20 = a1 + v19;
    v21 = a2 + v19;
    v22 = *(_OWORD *)(v21 + 16);
    *(_OWORD *)v20 = *(_OWORD *)v21;
    *(_OWORD *)(v20 + 16) = v22;
    *(_BYTE *)(v20 + 32) = *(_BYTE *)(v21 + 32);
    v23 = a1;
    v24 = a3;
    v25 = 0;
  }
  swift_storeEnumTagMultiPayload(v23, v24, v25);
  return a1;
}

uint64_t assignWithTake for NavigationStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  void *v14;
  const void *v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  if (a1 != a2)
  {
    sub_224DC(a1, type metadata accessor for NavigationStyle);
    if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      v6 = (int *)sub_5440(&qword_263AA0);
      v7 = v6[12];
      v8 = a1 + v7;
      v9 = a2 + v7;
      v10 = type metadata accessor for LocalizerRequest(0);
      v11 = *(_QWORD *)(v10 - 8);
      v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 32);
      v12(v8, v9, v10);
      v13 = *(int *)(sub_5440(&qword_263A10) + 48);
      v14 = (void *)(v8 + v13);
      v15 = (const void *)(v9 + v13);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48))(v15, 1, v10))
      {
        v16 = sub_5440(&qword_25E0C8);
        memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
      }
      else
      {
        v12((uint64_t)v14, (uint64_t)v15, v10);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v14, 0, 1, v10);
      }
      *(_QWORD *)(a1 + v6[16]) = *(_QWORD *)(a2 + v6[16]);
      *(_QWORD *)(a1 + v6[20]) = *(_QWORD *)(a2 + v6[20]);
      v23 = a1;
      v24 = a3;
      v25 = 1;
    }
    else
    {
      v17 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(a1, a2, v17);
      v18 = (int *)sub_5440(&qword_263A98);
      *(_QWORD *)(a1 + v18[12]) = *(_QWORD *)(a2 + v18[12]);
      *(_QWORD *)(a1 + v18[16]) = *(_QWORD *)(a2 + v18[16]);
      v19 = v18[20];
      v20 = a1 + v19;
      v21 = a2 + v19;
      v22 = *(_OWORD *)(v21 + 16);
      *(_OWORD *)v20 = *(_OWORD *)v21;
      *(_OWORD *)(v20 + 16) = v22;
      *(_BYTE *)(v20 + 32) = *(_BYTE *)(v21 + 32);
      v23 = a1;
      v24 = a3;
      v25 = 0;
    }
    swift_storeEnumTagMultiPayload(v23, v24, v25);
  }
  return a1;
}

void sub_BB3C4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _BYTE v7[32];
  _BYTE v8[32];
  void *v9;
  char *v10;
  char *v11;
  const char *v12;
  _BYTE v13[32];
  _QWORD v14[2];

  v2 = type metadata accessor for LocalizerRequest(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(v2 - 8) + 64;
    v9 = (void *)v4;
    v10 = (char *)&value witness table for Builtin.BridgeObject + 64;
    v11 = (char *)&value witness table for Builtin.BridgeObject + 64;
    v12 = "!";
    swift_getTupleTypeLayout(v13, 0, 4, &v9);
    v14[0] = v13;
    v9 = &unk_1E88F8;
    sub_19B38(319, (unint64_t *)&qword_261BA0, (uint64_t (*)(uint64_t))&type metadata accessor for LocalizerRequest, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    if (v6 <= 0x3F)
    {
      swift_getTupleTypeLayout2(v7, v4, *(_QWORD *)(v5 - 8) + 64);
      v10 = v7;
      v11 = (char *)&value witness table for Builtin.BridgeObject + 64;
      v12 = (char *)&value witness table for Builtin.BridgeObject + 64;
      swift_getTupleTypeLayout(v8, 0, 4, &v9);
      v14[1] = v8;
      swift_initEnumMetadataMultiPayload(a1, 256, 2, v14);
    }
  }
}

uint64_t sub_BB4D4(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *a1;
  v2 = type metadata accessor for NavigationStyleViewModifier(255);
  v3 = type metadata accessor for ModifiedContent(255, v1, v2);
  sub_6FD0(&qword_263B50, type metadata accessor for NavigationStyleViewModifier, (uint64_t)&unk_1E8988);
  return swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v3);
}

unint64_t sub_BB554(unint64_t a1, uint64_t a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, char *, uint64_t);
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _WORD *v54;
  _WORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _WORD *v65;
  _WORD *v66;
  uint64_t v67;
  int *v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  int *v91;
  uint64_t v92;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v27 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = v27 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain(v27);
  }
  else
  {
    v7 = *(_QWORD *)a2;
    v8 = *(_QWORD *)(a2 + 8);
    v9 = *(_BYTE *)(a2 + 16);
    sub_34B1C(*(_QWORD *)a2, v8, v9);
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v8;
    *(_BYTE *)(a1 + 16) = v9;
    v10 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 24) = v10;
    v11 = a3[5];
    v12 = (uint64_t *)(a1 + v11);
    v13 = (uint64_t *)(a2 + v11);
    v14 = type metadata accessor for NavigationStyle(0);
    swift_bridgeObjectRetain(v10);
    if (swift_getEnumCaseMultiPayload(v13, v14) == 1)
    {
      v92 = v14;
      v15 = *v13;
      v16 = v13[1];
      *v12 = *v13;
      v12[1] = v16;
      v12[2] = v13[2];
      swift_retain(v15);
      swift_retain(v16);
      v91 = (int *)sub_5440(&qword_263AA0);
      v17 = v91[12];
      v18 = (char *)v12 + v17;
      v19 = (char *)v13 + v17;
      v20 = type metadata accessor for LocalizerRequest(0);
      v21 = *(_QWORD *)(v20 - 8);
      v22 = *(void (**)(char *, char *, uint64_t))(v21 + 16);
      v22(v18, v19, v20);
      v23 = *(int *)(sub_5440(&qword_263A10) + 48);
      v24 = &v18[v23];
      v25 = &v19[v23];
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v25, 1, v20))
      {
        v26 = sub_5440(&qword_25E0C8);
        memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
      }
      else
      {
        v22(v24, v25, v20);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v24, 0, 1, v20);
      }
      v40 = v91[16];
      v41 = *(uint64_t *)((char *)v13 + v40);
      *(uint64_t *)((char *)v12 + v40) = v41;
      v42 = v91[20];
      v43 = *(uint64_t *)((char *)v13 + v42);
      *(uint64_t *)((char *)v12 + v42) = v43;
      swift_bridgeObjectRetain(v41);
      swift_bridgeObjectRetain(v43);
      v39 = 1;
      v14 = v92;
    }
    else
    {
      v28 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v28 - 8) + 16))(v12, v13, v28);
      v29 = (int *)sub_5440(&qword_263A98);
      v30 = v29[12];
      v31 = *(uint64_t *)((char *)v13 + v30);
      *(uint64_t *)((char *)v12 + v30) = v31;
      v32 = v29[16];
      v33 = *(uint64_t *)((char *)v13 + v32);
      *(uint64_t *)((char *)v12 + v32) = v33;
      v34 = v29[20];
      v35 = (char *)v12 + v34;
      v36 = (char *)v13 + v34;
      v37 = *(_QWORD *)v36;
      v38 = *((_QWORD *)v36 + 1);
      *(_QWORD *)v35 = *(_QWORD *)v36;
      *((_QWORD *)v35 + 1) = v38;
      *((_OWORD *)v35 + 1) = *((_OWORD *)v36 + 1);
      v35[32] = v36[32];
      swift_bridgeObjectRetain(v31);
      swift_bridgeObjectRetain(v33);
      swift_retain(v37);
      swift_retain(v38);
      v39 = 0;
    }
    swift_storeEnumTagMultiPayload(v12, v14, v39);
    v44 = a3[6];
    v45 = a3[7];
    v46 = a1 + v44;
    v47 = (uint64_t *)(a2 + v44);
    v48 = *v47;
    v49 = v47[1];
    *(_QWORD *)v46 = *v47;
    *(_QWORD *)(v46 + 8) = v49;
    *(_OWORD *)(v46 + 16) = *((_OWORD *)v47 + 1);
    v50 = a1 + v45;
    v51 = a2 + v45;
    *(_QWORD *)v50 = *(_QWORD *)v51;
    *(_BYTE *)(v50 + 8) = *(_BYTE *)(v51 + 8);
    v52 = *(_QWORD *)(v51 + 16);
    *(_QWORD *)(v50 + 16) = v52;
    v53 = a3[8];
    v54 = (_WORD *)(a1 + v53);
    v55 = (_WORD *)(a2 + v53);
    swift_retain(v48);
    swift_retain(v49);
    swift_retain(v52);
    v56 = sub_5440(&qword_25FAA0);
    if (swift_getEnumCaseMultiPayload(v55, v56) == 1)
    {
      *v54 = *v55;
      v57 = type metadata accessor for FontConstants.Environment(0);
      v58 = *(int *)(v57 + 24);
      v59 = (char *)v54 + v58;
      v60 = (char *)v55 + v58;
      v61 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v61 - 8) + 16))(v59, v60, v61);
      *(_QWORD *)((char *)v54 + *(int *)(v57 + 28)) = *(_QWORD *)((char *)v55 + *(int *)(v57 + 28));
      v62 = 1;
    }
    else
    {
      v63 = *(_QWORD *)v55;
      *(_QWORD *)v54 = *(_QWORD *)v55;
      swift_retain(v63);
      v62 = 0;
    }
    swift_storeEnumTagMultiPayload(v54, v56, v62);
    v64 = a3[9];
    v65 = (_WORD *)(a1 + v64);
    v66 = (_WORD *)(a2 + v64);
    v67 = sub_5440(&qword_25F548);
    if (swift_getEnumCaseMultiPayload(v66, v67) == 1)
    {
      *v65 = *v66;
      v68 = (int *)type metadata accessor for SizeConstants.Environment(0);
      v69 = v68[6];
      v70 = (char *)v65 + v69;
      v71 = (char *)v66 + v69;
      v72 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v72 - 8) + 16))(v70, v71, v72);
      *(_QWORD *)((char *)v65 + v68[7]) = *(_QWORD *)((char *)v66 + v68[7]);
      v73 = v68[8];
      v74 = (char *)v65 + v73;
      v75 = (char *)v66 + v73;
      v74[2] = v75[2];
      *(_WORD *)v74 = *(_WORD *)v75;
      v76 = 1;
    }
    else
    {
      v77 = *(_QWORD *)v66;
      *(_QWORD *)v65 = *(_QWORD *)v66;
      swift_retain(v77);
      v76 = 0;
    }
    swift_storeEnumTagMultiPayload(v65, v67, v76);
    v78 = a3[10];
    v79 = (uint64_t *)(a1 + v78);
    v80 = (uint64_t *)(a2 + v78);
    v81 = sub_5440(&qword_25F1E8);
    if (swift_getEnumCaseMultiPayload(v80, v81) == 1)
    {
      v82 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v82 - 8) + 16))(v79, v80, v82);
      v83 = 1;
    }
    else
    {
      v84 = *v80;
      *v79 = *v80;
      swift_retain(v84);
      v83 = 0;
    }
    swift_storeEnumTagMultiPayload(v79, v81, v83);
    v85 = a3[11];
    v86 = a1 + v85;
    v87 = a2 + v85;
    v88 = *(_QWORD *)v87;
    v89 = *(_BYTE *)(v87 + 8);
    sub_F9E4(*(_QWORD *)v87, v89);
    *(_QWORD *)v86 = v88;
    *(_BYTE *)(v86 + 8) = v89;
  }
  return a1;
}

uint64_t sub_BBA1C(uint64_t a1, int *a2)
{
  _QWORD *v4;
  uint64_t v5;
  int *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(char *, uint64_t);
  char *v11;
  uint64_t v12;
  int *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;

  sub_2B574(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
  v4 = (_QWORD *)(a1 + a2[5]);
  v5 = type metadata accessor for NavigationStyle(0);
  if (swift_getEnumCaseMultiPayload(v4, v5) == 1)
  {
    swift_release(*v4);
    swift_release(v4[1]);
    v6 = (int *)sub_5440(&qword_263AA0);
    v7 = (char *)v4 + v6[12];
    v8 = type metadata accessor for LocalizerRequest(0);
    v9 = *(_QWORD *)(v8 - 8);
    v10 = *(void (**)(char *, uint64_t))(v9 + 8);
    v10(v7, v8);
    v11 = &v7[*(int *)(sub_5440(&qword_263A10) + 48)];
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v11, 1, v8))
      v10(v11, v8);
    swift_bridgeObjectRelease(*(_QWORD *)((char *)v4 + v6[16]));
    swift_bridgeObjectRelease(*(_QWORD *)((char *)v4 + v6[20]));
  }
  else
  {
    v12 = type metadata accessor for LocalizerRequest(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v4, v12);
    v13 = (int *)sub_5440(&qword_263A98);
    swift_bridgeObjectRelease(*(_QWORD *)((char *)v4 + v13[12]));
    swift_bridgeObjectRelease(*(_QWORD *)((char *)v4 + v13[16]));
    v14 = (_QWORD *)((char *)v4 + v13[20]);
    swift_release(*v14);
    swift_release(v14[1]);
  }
  v15 = (_QWORD *)(a1 + a2[6]);
  swift_release(*v15);
  swift_release(v15[1]);
  swift_release(*(_QWORD *)(a1 + a2[7] + 16));
  v16 = (_QWORD *)(a1 + a2[8]);
  v17 = sub_5440(&qword_25FAA0);
  if (swift_getEnumCaseMultiPayload(v16, v17) == 1)
  {
    v18 = (char *)v16 + *(int *)(type metadata accessor for FontConstants.Environment(0) + 24);
    v19 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(v18, v19);
  }
  else
  {
    swift_release(*v16);
  }
  v20 = (_QWORD *)(a1 + a2[9]);
  v21 = sub_5440(&qword_25F548);
  if (swift_getEnumCaseMultiPayload(v20, v21) == 1)
  {
    v22 = (char *)v20 + *(int *)(type metadata accessor for SizeConstants.Environment(0) + 24);
    v23 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v23 - 8) + 8))(v22, v23);
  }
  else
  {
    swift_release(*v20);
  }
  v24 = (_QWORD *)(a1 + a2[10]);
  v25 = sub_5440(&qword_25F1E8);
  if (swift_getEnumCaseMultiPayload(v24, v25) == 1)
  {
    v26 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v26 - 8) + 8))(v24, v26);
  }
  else
  {
    swift_release(*v24);
  }
  return sub_BE0C(*(_QWORD *)(a1 + a2[11]), *(_BYTE *)(a1 + a2[11] + 8));
}

uint64_t sub_BBCD0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, char *, uint64_t);
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  int *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _WORD *v53;
  _WORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _WORD *v64;
  _WORD *v65;
  uint64_t v66;
  int *v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char v88;
  uint64_t v90;
  int *v91;

  v6 = *(_QWORD *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  v8 = *(_BYTE *)(a2 + 16);
  sub_34B1C(*(_QWORD *)a2, v7, v8);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  *(_BYTE *)(a1 + 16) = v8;
  v9 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v9;
  v10 = a3[5];
  v11 = (uint64_t *)(a1 + v10);
  v12 = (uint64_t *)(a2 + v10);
  v13 = type metadata accessor for NavigationStyle(0);
  swift_bridgeObjectRetain(v9);
  if (swift_getEnumCaseMultiPayload(v12, v13) == 1)
  {
    v90 = v13;
    v91 = a3;
    v14 = *v12;
    v15 = v12[1];
    *v11 = *v12;
    v11[1] = v15;
    v11[2] = v12[2];
    swift_retain(v14);
    swift_retain(v15);
    v16 = (int *)sub_5440(&qword_263AA0);
    v17 = v16[12];
    v18 = (char *)v11 + v17;
    v19 = (char *)v12 + v17;
    v20 = type metadata accessor for LocalizerRequest(0);
    v21 = *(_QWORD *)(v20 - 8);
    v22 = *(void (**)(char *, char *, uint64_t))(v21 + 16);
    v22(v18, v19, v20);
    v23 = *(int *)(sub_5440(&qword_263A10) + 48);
    v24 = &v18[v23];
    v25 = &v19[v23];
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v25, 1, v20))
    {
      v26 = sub_5440(&qword_25E0C8);
      memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    }
    else
    {
      v22(v24, v25, v20);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v24, 0, 1, v20);
    }
    v39 = v16[16];
    v40 = *(uint64_t *)((char *)v12 + v39);
    *(uint64_t *)((char *)v11 + v39) = v40;
    v41 = v16[20];
    v42 = *(uint64_t *)((char *)v12 + v41);
    *(uint64_t *)((char *)v11 + v41) = v42;
    swift_bridgeObjectRetain(v40);
    swift_bridgeObjectRetain(v42);
    v38 = 1;
    v13 = v90;
    a3 = v91;
  }
  else
  {
    v27 = type metadata accessor for LocalizerRequest(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v27 - 8) + 16))(v11, v12, v27);
    v28 = (int *)sub_5440(&qword_263A98);
    v29 = v28[12];
    v30 = *(uint64_t *)((char *)v12 + v29);
    *(uint64_t *)((char *)v11 + v29) = v30;
    v31 = v28[16];
    v32 = *(uint64_t *)((char *)v12 + v31);
    *(uint64_t *)((char *)v11 + v31) = v32;
    v33 = v28[20];
    v34 = (char *)v11 + v33;
    v35 = (char *)v12 + v33;
    v36 = *(_QWORD *)v35;
    v37 = *((_QWORD *)v35 + 1);
    *(_QWORD *)v34 = *(_QWORD *)v35;
    *((_QWORD *)v34 + 1) = v37;
    *((_OWORD *)v34 + 1) = *((_OWORD *)v35 + 1);
    v34[32] = v35[32];
    swift_bridgeObjectRetain(v30);
    swift_bridgeObjectRetain(v32);
    swift_retain(v36);
    swift_retain(v37);
    v38 = 0;
  }
  swift_storeEnumTagMultiPayload(v11, v13, v38);
  v43 = a3[6];
  v44 = a3[7];
  v45 = a1 + v43;
  v46 = (uint64_t *)(a2 + v43);
  v47 = *v46;
  v48 = v46[1];
  *(_QWORD *)v45 = *v46;
  *(_QWORD *)(v45 + 8) = v48;
  *(_OWORD *)(v45 + 16) = *((_OWORD *)v46 + 1);
  v49 = a1 + v44;
  v50 = a2 + v44;
  *(_QWORD *)v49 = *(_QWORD *)v50;
  *(_BYTE *)(v49 + 8) = *(_BYTE *)(v50 + 8);
  v51 = *(_QWORD *)(v50 + 16);
  *(_QWORD *)(v49 + 16) = v51;
  v52 = a3[8];
  v53 = (_WORD *)(a1 + v52);
  v54 = (_WORD *)(a2 + v52);
  swift_retain(v47);
  swift_retain(v48);
  swift_retain(v51);
  v55 = sub_5440(&qword_25FAA0);
  if (swift_getEnumCaseMultiPayload(v54, v55) == 1)
  {
    *v53 = *v54;
    v56 = type metadata accessor for FontConstants.Environment(0);
    v57 = *(int *)(v56 + 24);
    v58 = (char *)v53 + v57;
    v59 = (char *)v54 + v57;
    v60 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v60 - 8) + 16))(v58, v59, v60);
    *(_QWORD *)((char *)v53 + *(int *)(v56 + 28)) = *(_QWORD *)((char *)v54 + *(int *)(v56 + 28));
    v61 = 1;
  }
  else
  {
    v62 = *(_QWORD *)v54;
    *(_QWORD *)v53 = *(_QWORD *)v54;
    swift_retain(v62);
    v61 = 0;
  }
  swift_storeEnumTagMultiPayload(v53, v55, v61);
  v63 = a3[9];
  v64 = (_WORD *)(a1 + v63);
  v65 = (_WORD *)(a2 + v63);
  v66 = sub_5440(&qword_25F548);
  if (swift_getEnumCaseMultiPayload(v65, v66) == 1)
  {
    *v64 = *v65;
    v67 = (int *)type metadata accessor for SizeConstants.Environment(0);
    v68 = v67[6];
    v69 = (char *)v64 + v68;
    v70 = (char *)v65 + v68;
    v71 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v71 - 8) + 16))(v69, v70, v71);
    *(_QWORD *)((char *)v64 + v67[7]) = *(_QWORD *)((char *)v65 + v67[7]);
    v72 = v67[8];
    v73 = (char *)v64 + v72;
    v74 = (char *)v65 + v72;
    v73[2] = v74[2];
    *(_WORD *)v73 = *(_WORD *)v74;
    v75 = 1;
  }
  else
  {
    v76 = *(_QWORD *)v65;
    *(_QWORD *)v64 = *(_QWORD *)v65;
    swift_retain(v76);
    v75 = 0;
  }
  swift_storeEnumTagMultiPayload(v64, v66, v75);
  v77 = a3[10];
  v78 = (uint64_t *)(a1 + v77);
  v79 = (uint64_t *)(a2 + v77);
  v80 = sub_5440(&qword_25F1E8);
  if (swift_getEnumCaseMultiPayload(v79, v80) == 1)
  {
    v81 = type metadata accessor for ColorScheme(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v81 - 8) + 16))(v78, v79, v81);
    v82 = 1;
  }
  else
  {
    v83 = *v79;
    *v78 = *v79;
    swift_retain(v83);
    v82 = 0;
  }
  swift_storeEnumTagMultiPayload(v78, v80, v82);
  v84 = a3[11];
  v85 = a1 + v84;
  v86 = a2 + v84;
  v87 = *(_QWORD *)v86;
  v88 = *(_BYTE *)(v86 + 8);
  sub_F9E4(*(_QWORD *)v86, v88);
  *(_QWORD *)v85 = v87;
  *(_BYTE *)(v85 + 8) = v88;
  return a1;
}

uint64_t sub_BC168(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, char *, uint64_t);
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  int *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _BYTE *v61;
  _BYTE *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _BYTE *v66;
  _BYTE *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _BYTE *v72;
  _BYTE *v73;
  uint64_t v74;
  int *v75;
  uint64_t v76;
  _BYTE *v77;
  _BYTE *v78;
  uint64_t v79;
  uint64_t v80;
  _BYTE *v81;
  _BYTE *v82;
  char v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char v97;
  uint64_t v98;
  char v99;
  int *v101;
  uint64_t v102;

  v6 = *(_QWORD *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  v8 = *(_BYTE *)(a2 + 16);
  sub_34B1C(*(_QWORD *)a2, v7, v8);
  v9 = *(_QWORD *)a1;
  v10 = *(_QWORD *)(a1 + 8);
  v11 = *(_BYTE *)(a1 + 16);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  *(_BYTE *)(a1 + 16) = v8;
  sub_2B574(v9, v10, v11);
  v12 = *(_QWORD *)(a2 + 24);
  v13 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  if (a1 != a2)
  {
    v14 = a3[5];
    v15 = (uint64_t *)(a1 + v14);
    v16 = (uint64_t *)(a2 + v14);
    sub_224DC(a1 + v14, type metadata accessor for NavigationStyle);
    v17 = type metadata accessor for NavigationStyle(0);
    if (swift_getEnumCaseMultiPayload(v16, v17) == 1)
    {
      v102 = v17;
      v18 = *v16;
      *v15 = *v16;
      v19 = v16[1];
      v15[1] = v19;
      v15[2] = v16[2];
      swift_retain(v18);
      swift_retain(v19);
      v101 = (int *)sub_5440(&qword_263AA0);
      v20 = v101[12];
      v21 = (char *)v15 + v20;
      v22 = (char *)v16 + v20;
      v23 = type metadata accessor for LocalizerRequest(0);
      v24 = *(_QWORD *)(v23 - 8);
      v25 = *(void (**)(char *, char *, uint64_t))(v24 + 16);
      v25(v21, v22, v23);
      v26 = *(int *)(sub_5440(&qword_263A10) + 48);
      v27 = &v21[v26];
      v28 = &v22[v26];
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v28, 1, v23))
      {
        v29 = sub_5440(&qword_25E0C8);
        memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
      }
      else
      {
        v25(v27, v28, v23);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v27, 0, 1, v23);
      }
      v43 = v101[16];
      v44 = *(uint64_t *)((char *)v16 + v43);
      *(uint64_t *)((char *)v15 + v43) = v44;
      v45 = v101[20];
      v46 = *(uint64_t *)((char *)v16 + v45);
      *(uint64_t *)((char *)v15 + v45) = v46;
      swift_bridgeObjectRetain(v44);
      swift_bridgeObjectRetain(v46);
      v42 = 1;
      v17 = v102;
    }
    else
    {
      v30 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v30 - 8) + 16))(v15, v16, v30);
      v31 = (int *)sub_5440(&qword_263A98);
      v32 = v31[12];
      v33 = *(uint64_t *)((char *)v16 + v32);
      *(uint64_t *)((char *)v15 + v32) = v33;
      v34 = v31[16];
      v35 = *(uint64_t *)((char *)v16 + v34);
      *(uint64_t *)((char *)v15 + v34) = v35;
      v36 = v31[20];
      v37 = (char *)v15 + v36;
      v38 = (char *)v16 + v36;
      v39 = *(_QWORD *)v38;
      *(_QWORD *)v37 = *(_QWORD *)v38;
      v40 = *((_QWORD *)v38 + 1);
      *((_QWORD *)v37 + 1) = v40;
      v41 = *((_OWORD *)v38 + 1);
      v37[32] = v38[32];
      *((_OWORD *)v37 + 1) = v41;
      swift_bridgeObjectRetain(v33);
      swift_bridgeObjectRetain(v35);
      swift_retain(v39);
      swift_retain(v40);
      v42 = 0;
    }
    swift_storeEnumTagMultiPayload(v15, v17, v42);
  }
  v47 = a3[6];
  v48 = (_QWORD *)(a1 + v47);
  v49 = (_QWORD *)(a2 + v47);
  v50 = *(_QWORD *)(a1 + v47);
  v51 = *(_QWORD *)(a2 + v47);
  *(_QWORD *)(a1 + v47) = v51;
  swift_retain(v51);
  swift_release(v50);
  v52 = v49[1];
  v53 = v48[1];
  v48[1] = v52;
  swift_retain(v52);
  swift_release(v53);
  v48[2] = v49[2];
  v48[3] = v49[3];
  v54 = a3[7];
  v55 = a1 + v54;
  v56 = (uint64_t *)(a2 + v54);
  v57 = *v56;
  *(_BYTE *)(v55 + 8) = *((_BYTE *)v56 + 8);
  *(_QWORD *)v55 = v57;
  v58 = *(_QWORD *)(v55 + 16);
  v59 = v56[2];
  *(_QWORD *)(v55 + 16) = v59;
  swift_retain(v59);
  swift_release(v58);
  if (a1 != a2)
  {
    v60 = a3[8];
    v61 = (_BYTE *)(a1 + v60);
    v62 = (_BYTE *)(a2 + v60);
    sub_B414(a1 + v60, &qword_25FAA0);
    v63 = sub_5440(&qword_25FAA0);
    if (swift_getEnumCaseMultiPayload(v62, v63) == 1)
    {
      *v61 = *v62;
      v61[1] = v62[1];
      v64 = type metadata accessor for FontConstants.Environment(0);
      v65 = *(int *)(v64 + 24);
      v66 = &v61[v65];
      v67 = &v62[v65];
      v68 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v68 - 8) + 16))(v66, v67, v68);
      *(_QWORD *)&v61[*(int *)(v64 + 28)] = *(_QWORD *)&v62[*(int *)(v64 + 28)];
      v69 = 1;
    }
    else
    {
      v70 = *(_QWORD *)v62;
      *(_QWORD *)v61 = *(_QWORD *)v62;
      swift_retain(v70);
      v69 = 0;
    }
    swift_storeEnumTagMultiPayload(v61, v63, v69);
    v71 = a3[9];
    v72 = (_BYTE *)(a1 + v71);
    v73 = (_BYTE *)(a2 + v71);
    sub_B414(a1 + v71, &qword_25F548);
    v74 = sub_5440(&qword_25F548);
    if (swift_getEnumCaseMultiPayload(v73, v74) == 1)
    {
      *v72 = *v73;
      v72[1] = v73[1];
      v75 = (int *)type metadata accessor for SizeConstants.Environment(0);
      v76 = v75[6];
      v77 = &v72[v76];
      v78 = &v73[v76];
      v79 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v79 - 8) + 16))(v77, v78, v79);
      *(_QWORD *)&v72[v75[7]] = *(_QWORD *)&v73[v75[7]];
      v80 = v75[8];
      v81 = &v72[v80];
      v82 = &v73[v80];
      v83 = v82[2];
      *(_WORD *)v81 = *(_WORD *)v82;
      v81[2] = v83;
      v84 = 1;
    }
    else
    {
      v85 = *(_QWORD *)v73;
      *(_QWORD *)v72 = *(_QWORD *)v73;
      swift_retain(v85);
      v84 = 0;
    }
    swift_storeEnumTagMultiPayload(v72, v74, v84);
    v86 = a3[10];
    v87 = (uint64_t *)(a1 + v86);
    v88 = (uint64_t *)(a2 + v86);
    sub_B414(a1 + v86, &qword_25F1E8);
    v89 = sub_5440(&qword_25F1E8);
    if (swift_getEnumCaseMultiPayload(v88, v89) == 1)
    {
      v90 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v90 - 8) + 16))(v87, v88, v90);
      v91 = 1;
    }
    else
    {
      v92 = *v88;
      *v87 = *v88;
      swift_retain(v92);
      v91 = 0;
    }
    swift_storeEnumTagMultiPayload(v87, v89, v91);
  }
  v93 = a3[11];
  v94 = a1 + v93;
  v95 = a2 + v93;
  v96 = *(_QWORD *)v95;
  v97 = *(_BYTE *)(v95 + 8);
  sub_F9E4(*(_QWORD *)v95, v97);
  v98 = *(_QWORD *)v94;
  v99 = *(_BYTE *)(v94 + 8);
  *(_QWORD *)v94 = v96;
  *(_BYTE *)(v94 + 8) = v97;
  sub_BE0C(v98, v99);
  return a1;
}

_OWORD *sub_BC6C4(_OWORD *a1, _OWORD *a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, char *, uint64_t);
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  int *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  _OWORD *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  _WORD *v36;
  _WORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  _WORD *v45;
  _WORD *v46;
  uint64_t v47;
  int *v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  int *v65;
  uint64_t v66;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for NavigationStyle(0);
  if (swift_getEnumCaseMultiPayload(v9, v10) == 1)
  {
    v66 = v10;
    *(_OWORD *)v8 = *(_OWORD *)v9;
    *((_QWORD *)v8 + 2) = *((_QWORD *)v9 + 2);
    v65 = (int *)sub_5440(&qword_263AA0);
    v11 = v65[12];
    v12 = &v8[v11];
    v13 = &v9[v11];
    v14 = type metadata accessor for LocalizerRequest(0);
    v15 = *(_QWORD *)(v14 - 8);
    v16 = *(void (**)(char *, char *, uint64_t))(v15 + 32);
    v16(v12, v13, v14);
    v17 = *(int *)(sub_5440(&qword_263A10) + 48);
    v18 = &v12[v17];
    v19 = &v13[v17];
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v19, 1, v14))
    {
      v20 = sub_5440(&qword_25E0C8);
      memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    }
    else
    {
      v16(v18, v19, v14);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v18, 0, 1, v14);
    }
    v10 = v66;
    *(_QWORD *)&v8[v65[16]] = *(_QWORD *)&v9[v65[16]];
    *(_QWORD *)&v8[v65[20]] = *(_QWORD *)&v9[v65[20]];
    v23 = 1;
  }
  else
  {
    v21 = type metadata accessor for LocalizerRequest(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(v8, v9, v21);
    v22 = (int *)sub_5440(&qword_263A98);
    v23 = 0;
    *(_QWORD *)&v8[v22[12]] = *(_QWORD *)&v9[v22[12]];
    *(_QWORD *)&v8[v22[16]] = *(_QWORD *)&v9[v22[16]];
    v24 = v22[20];
    v25 = &v8[v24];
    v26 = &v9[v24];
    v27 = *((_OWORD *)v26 + 1);
    *(_OWORD *)v25 = *(_OWORD *)v26;
    *((_OWORD *)v25 + 1) = v27;
    v25[32] = v26[32];
  }
  swift_storeEnumTagMultiPayload(v8, v10, v23);
  v28 = a3[6];
  v29 = a3[7];
  v30 = *(_OWORD *)((char *)a2 + v28);
  v31 = *(_OWORD *)((char *)a2 + v28 + 16);
  v32 = (_OWORD *)((char *)a1 + v28);
  *v32 = v30;
  v32[1] = v31;
  v33 = (char *)a1 + v29;
  v34 = (char *)a2 + v29;
  *(_OWORD *)v33 = *(_OWORD *)v34;
  *((_QWORD *)v33 + 2) = *((_QWORD *)v34 + 2);
  v35 = a3[8];
  v36 = (_WORD *)((char *)a1 + v35);
  v37 = (_WORD *)((char *)a2 + v35);
  v38 = sub_5440(&qword_25FAA0);
  if (swift_getEnumCaseMultiPayload(v37, v38) == 1)
  {
    *v36 = *v37;
    v39 = type metadata accessor for FontConstants.Environment(0);
    v40 = *(int *)(v39 + 24);
    v41 = (char *)v36 + v40;
    v42 = (char *)v37 + v40;
    v43 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v43 - 8) + 32))(v41, v42, v43);
    *(_QWORD *)((char *)v36 + *(int *)(v39 + 28)) = *(_QWORD *)((char *)v37 + *(int *)(v39 + 28));
    swift_storeEnumTagMultiPayload(v36, v38, 1);
  }
  else
  {
    memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
  }
  v44 = a3[9];
  v45 = (_WORD *)((char *)a1 + v44);
  v46 = (_WORD *)((char *)a2 + v44);
  v47 = sub_5440(&qword_25F548);
  if (swift_getEnumCaseMultiPayload(v46, v47) == 1)
  {
    *v45 = *v46;
    v48 = (int *)type metadata accessor for SizeConstants.Environment(0);
    v49 = v48[6];
    v50 = (char *)v45 + v49;
    v51 = (char *)v46 + v49;
    v52 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v52 - 8) + 32))(v50, v51, v52);
    *(_QWORD *)((char *)v45 + v48[7]) = *(_QWORD *)((char *)v46 + v48[7]);
    v53 = v48[8];
    v54 = (char *)v45 + v53;
    v55 = (char *)v46 + v53;
    v54[2] = v55[2];
    *(_WORD *)v54 = *(_WORD *)v55;
    swift_storeEnumTagMultiPayload(v45, v47, 1);
  }
  else
  {
    memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
  }
  v56 = a3[10];
  v57 = (char *)a1 + v56;
  v58 = (char *)a2 + v56;
  v59 = sub_5440(&qword_25F1E8);
  if (swift_getEnumCaseMultiPayload(v58, v59) == 1)
  {
    v60 = type metadata accessor for ColorScheme(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v60 - 8) + 32))(v57, v58, v60);
    swift_storeEnumTagMultiPayload(v57, v59, 1);
  }
  else
  {
    memcpy(v57, v58, *(_QWORD *)(*(_QWORD *)(v59 - 8) + 64));
  }
  v61 = a3[11];
  v62 = (char *)a1 + v61;
  v63 = (char *)a2 + v61;
  *(_QWORD *)v62 = *(_QWORD *)v63;
  v62[8] = v63[8];
  return a1;
}

uint64_t sub_BCAD0(uint64_t a1, uint64_t a2, int *a3)
{
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  void *v22;
  const void *v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _WORD *v42;
  _WORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  _WORD *v51;
  _WORD *v52;
  uint64_t v53;
  int *v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  void *v63;
  const void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  int *v74;
  uint64_t v75;

  v6 = *(_BYTE *)(a2 + 16);
  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_BYTE *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v6;
  sub_2B574(v7, v8, v9);
  v10 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease(v10);
  if (a1 != a2)
  {
    v11 = a3[5];
    v12 = a1 + v11;
    v13 = a2 + v11;
    sub_224DC(a1 + v11, type metadata accessor for NavigationStyle);
    v14 = type metadata accessor for NavigationStyle(0);
    if (swift_getEnumCaseMultiPayload(v13, v14) == 1)
    {
      v75 = v14;
      *(_OWORD *)v12 = *(_OWORD *)v13;
      *(_QWORD *)(v12 + 16) = *(_QWORD *)(v13 + 16);
      v74 = (int *)sub_5440(&qword_263AA0);
      v15 = v74[12];
      v16 = v12 + v15;
      v17 = v13 + v15;
      v18 = type metadata accessor for LocalizerRequest(0);
      v19 = *(_QWORD *)(v18 - 8);
      v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 32);
      v20(v16, v17, v18);
      v21 = *(int *)(sub_5440(&qword_263A10) + 48);
      v22 = (void *)(v16 + v21);
      v23 = (const void *)(v17 + v21);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v19 + 48))(v23, 1, v18))
      {
        v24 = sub_5440(&qword_25E0C8);
        memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
      }
      else
      {
        v20((uint64_t)v22, (uint64_t)v23, v18);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v22, 0, 1, v18);
      }
      v14 = v75;
      *(_QWORD *)(v12 + v74[16]) = *(_QWORD *)(v13 + v74[16]);
      *(_QWORD *)(v12 + v74[20]) = *(_QWORD *)(v13 + v74[20]);
      v27 = 1;
    }
    else
    {
      v25 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 32))(v12, v13, v25);
      v26 = (int *)sub_5440(&qword_263A98);
      v27 = 0;
      *(_QWORD *)(v12 + v26[12]) = *(_QWORD *)(v13 + v26[12]);
      *(_QWORD *)(v12 + v26[16]) = *(_QWORD *)(v13 + v26[16]);
      v28 = v26[20];
      v29 = v12 + v28;
      v30 = v13 + v28;
      v31 = *(_OWORD *)(v30 + 16);
      *(_OWORD *)v29 = *(_OWORD *)v30;
      *(_OWORD *)(v29 + 16) = v31;
      *(_BYTE *)(v29 + 32) = *(_BYTE *)(v30 + 32);
    }
    swift_storeEnumTagMultiPayload(v12, v14, v27);
  }
  v32 = a3[6];
  v33 = a1 + v32;
  v34 = a2 + v32;
  v35 = *(_QWORD *)(a1 + v32);
  *(_QWORD *)(a1 + v32) = *(_QWORD *)(a2 + v32);
  swift_release(v35);
  v36 = *(_QWORD *)(v33 + 8);
  *(_QWORD *)(v33 + 8) = *(_QWORD *)(v34 + 8);
  swift_release(v36);
  *(_OWORD *)(v33 + 16) = *(_OWORD *)(v34 + 16);
  v37 = a3[7];
  v38 = a1 + v37;
  v39 = a2 + v37;
  *(_QWORD *)v38 = *(_QWORD *)v39;
  *(_BYTE *)(v38 + 8) = *(_BYTE *)(v39 + 8);
  v40 = *(_QWORD *)(v38 + 16);
  *(_QWORD *)(v38 + 16) = *(_QWORD *)(v39 + 16);
  swift_release(v40);
  if (a1 != a2)
  {
    v41 = a3[8];
    v42 = (_WORD *)(a1 + v41);
    v43 = (_WORD *)(a2 + v41);
    sub_B414(a1 + v41, &qword_25FAA0);
    v44 = sub_5440(&qword_25FAA0);
    if (swift_getEnumCaseMultiPayload(v43, v44) == 1)
    {
      *v42 = *v43;
      v45 = type metadata accessor for FontConstants.Environment(0);
      v46 = *(int *)(v45 + 24);
      v47 = (char *)v42 + v46;
      v48 = (char *)v43 + v46;
      v49 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v49 - 8) + 32))(v47, v48, v49);
      *(_QWORD *)((char *)v42 + *(int *)(v45 + 28)) = *(_QWORD *)((char *)v43 + *(int *)(v45 + 28));
      swift_storeEnumTagMultiPayload(v42, v44, 1);
    }
    else
    {
      memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
    }
    v50 = a3[9];
    v51 = (_WORD *)(a1 + v50);
    v52 = (_WORD *)(a2 + v50);
    sub_B414(a1 + v50, &qword_25F548);
    v53 = sub_5440(&qword_25F548);
    if (swift_getEnumCaseMultiPayload(v52, v53) == 1)
    {
      *v51 = *v52;
      v54 = (int *)type metadata accessor for SizeConstants.Environment(0);
      v55 = v54[6];
      v56 = (char *)v51 + v55;
      v57 = (char *)v52 + v55;
      v58 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v58 - 8) + 32))(v56, v57, v58);
      *(_QWORD *)((char *)v51 + v54[7]) = *(_QWORD *)((char *)v52 + v54[7]);
      v59 = v54[8];
      v60 = (char *)v51 + v59;
      v61 = (char *)v52 + v59;
      v60[2] = v61[2];
      *(_WORD *)v60 = *(_WORD *)v61;
      swift_storeEnumTagMultiPayload(v51, v53, 1);
    }
    else
    {
      memcpy(v51, v52, *(_QWORD *)(*(_QWORD *)(v53 - 8) + 64));
    }
    v62 = a3[10];
    v63 = (void *)(a1 + v62);
    v64 = (const void *)(a2 + v62);
    sub_B414(a1 + v62, &qword_25F1E8);
    v65 = sub_5440(&qword_25F1E8);
    if (swift_getEnumCaseMultiPayload(v64, v65) == 1)
    {
      v66 = type metadata accessor for ColorScheme(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v66 - 8) + 32))(v63, v64, v66);
      swift_storeEnumTagMultiPayload(v63, v65, 1);
    }
    else
    {
      memcpy(v63, v64, *(_QWORD *)(*(_QWORD *)(v65 - 8) + 64));
    }
  }
  v67 = a3[11];
  v68 = a1 + v67;
  v69 = (uint64_t *)(a2 + v67);
  v70 = *v69;
  LOBYTE(v69) = *((_BYTE *)v69 + 8);
  v71 = *(_QWORD *)v68;
  v72 = *(_BYTE *)(v68 + 8);
  *(_QWORD *)v68 = v70;
  *(_BYTE *)(v68 + 8) = (_BYTE)v69;
  sub_BE0C(v71, v72);
  return a1;
}

uint64_t sub_BCF94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_BCFA0);
}

uint64_t sub_BCFA0(uint64_t a1, uint64_t a2, int *a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 24);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for NavigationStyle(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = a3[5];
    }
    else
    {
      v12 = sub_5440(&qword_261A40);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
      {
        v10 = v12;
        v11 = a3[8];
      }
      else
      {
        v13 = sub_5440(&qword_25F558);
        v9 = *(_QWORD *)(v13 - 8);
        if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
        {
          v10 = v13;
          v11 = a3[9];
        }
        else
        {
          v10 = sub_5440(&qword_25F210);
          v9 = *(_QWORD *)(v10 - 8);
          v11 = a3[10];
        }
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t sub_BD094(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_BD0A0);
}

uint64_t sub_BD0A0(uint64_t result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 24) = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for NavigationStyle(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = a4[5];
    }
    else
    {
      v12 = sub_5440(&qword_261A40);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == a3)
      {
        v10 = v12;
        v11 = a4[8];
      }
      else
      {
        v13 = sub_5440(&qword_25F558);
        v9 = *(_QWORD *)(v13 - 8);
        if (*(_DWORD *)(v9 + 84) == a3)
        {
          v10 = v13;
          v11 = a4[9];
        }
        else
        {
          v10 = sub_5440(&qword_25F210);
          v9 = *(_QWORD *)(v10 - 8);
          v11 = a4[10];
        }
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

void sub_BD190(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD v10[8];

  v10[0] = " ";
  v2 = type metadata accessor for NavigationStyle(319);
  if (v3 <= 0x3F)
  {
    v10[1] = *(_QWORD *)(v2 - 8) + 64;
    v10[2] = " ";
    v10[3] = &unk_1E8958;
    sub_19B38(319, &qword_261AB0, type metadata accessor for FontConstants, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
    if (v5 <= 0x3F)
    {
      v10[4] = *(_QWORD *)(v4 - 8) + 64;
      sub_19B38(319, (unint64_t *)&qword_25F5C8, type metadata accessor for SizeConstants, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
      if (v7 <= 0x3F)
      {
        v10[5] = *(_QWORD *)(v6 - 8) + 64;
        sub_19B38(319, (unint64_t *)&qword_25F298, type metadata accessor for ColorConstants, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
        if (v9 <= 0x3F)
        {
          v10[6] = *(_QWORD *)(v8 - 8) + 64;
          v10[7] = &unk_1E8970;
          swift_initStructMetadata(a1, 256, 8, v10, a1 + 16);
        }
      }
    }
  }
}

uint64_t sub_BD2B4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_22CAF8, 1);
}

uint64_t sub_BD2C4@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t OpaqueTypeConformance2;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  __n128 v71;
  int *v73;
  char *v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  void (*v80)(char *, uint64_t *, uint64_t);
  char *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  __n128 v109;
  uint64_t v110;
  char *v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  char *v117;
  uint64_t *v118;
  char *v119;
  char *v120;
  uint64_t v121;
  char *v122;
  uint64_t *v123;
  uint64_t v124;
  uint64_t *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  char v139;

  v125 = a2;
  v134 = a3;
  v129 = sub_5440(&qword_263C58);
  v118 = *(uint64_t **)(v129 - 8);
  __chkstk_darwin(v129);
  v117 = (char *)&v110 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v132 = sub_5440(&qword_263C50);
  v121 = *(_QWORD *)(v132 - 8);
  __chkstk_darwin(v132);
  v120 = (char *)&v110 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v133 = sub_5440(&qword_263C70);
  v114 = *(_QWORD *)(v133 - 8);
  v6 = __chkstk_darwin(v133);
  v119 = (char *)&v110 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v122 = (char *)&v110 - v8;
  v9 = type metadata accessor for ToolbarPrincipalType(0);
  __chkstk_darwin(v9);
  v126 = (uint64_t)&v110 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v127 = sub_5440(&qword_263C78);
  __chkstk_darwin(v127);
  v131 = (char *)&v110 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v128 = sub_5440(&qword_263C28);
  v113 = *(_QWORD *)(v128 - 8);
  __chkstk_darwin(v128);
  v13 = (char *)&v110 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v130 = sub_5440(&qword_263C80);
  v116 = *(_QWORD *)(v130 - 8);
  v14 = __chkstk_darwin(v130);
  v112 = (char *)&v110 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v115 = (char *)&v110 - v16;
  v124 = type metadata accessor for LocalizerRequest(0);
  v17 = *(_QWORD *)(v124 - 8);
  v18 = __chkstk_darwin(v124);
  v20 = (char *)&v110 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v22 = (char *)&v110 - v21;
  v23 = type metadata accessor for NavigationStyle(0);
  __chkstk_darwin(v23);
  v25 = (uint64_t *)((char *)&v110 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  v26 = type metadata accessor for NavigationStyleViewModifier(0);
  v27 = *(int *)(v26 + 20);
  v123 = a1;
  sub_1E428((uint64_t)a1 + v27, (uint64_t)v25, type metadata accessor for NavigationStyle);
  if (swift_getEnumCaseMultiPayload(v25, v23) == 1)
  {
    v28 = *v25;
    v29 = v25[1];
    v124 = *v25;
    v116 = v29;
    v30 = v25[2];
    v31 = (int *)sub_5440(&qword_263AA0);
    v32 = (uint64_t)v25 + v31[12];
    v115 = *(char **)((char *)v25 + v31[16]);
    v113 = *(uint64_t *)((char *)v25 + v31[20]);
    v33 = v126;
    sub_21C88(v32, v126, type metadata accessor for ToolbarPrincipalType);
    v34 = v123;
    v35 = (uint64_t)v123 + *(int *)(v26 + 44);
    v36 = *(_QWORD *)v35;
    v37 = *(_BYTE *)(v35 + 8);
    sub_F9E4(*(_QWORD *)v35, v37);
    v38 = sub_31ABC(v36, v37);
    sub_BE0C(v36, v37);
    v39 = sub_5440(&qword_261520);
    v40 = type metadata accessor for ToolbarPlacement(0);
    v41 = swift_allocObject(v39, ((*(unsigned __int8 *)(*(_QWORD *)(v40 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v40 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v40 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v40 - 8) + 80) | 7);
    *(_OWORD *)(v41 + 16) = xmmword_1E0B70;
    static ToolbarPlacement.navigationBar.getter();
    v42 = sub_5440(&qword_263C38);
    v43 = sub_7FD8(&qword_263C40, &qword_263C38, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
    if ((v38 & 1) != 0)
      v44 = 2;
    else
      v44 = 1;
    v45 = v117;
    v112 = (char *)v42;
    v111 = (char *)v43;
    View.toolbar(_:for:)(v44, v41, v42, v43);
    v46 = swift_bridgeObjectRelease(v41);
    v125 = &v110;
    __chkstk_darwin(v46);
    *(&v110 - 8) = v33;
    *(&v110 - 7) = v28;
    *(&v110 - 6) = v29;
    *(&v110 - 5) = v30;
    v47 = v113;
    *(&v110 - 4) = (uint64_t)v34;
    *(&v110 - 3) = v47;
    v48 = v115;
    *(&v110 - 2) = (uint64_t)v115;
    v49 = sub_5440(&qword_263C60);
    v135 = (char *)v42;
    v136 = v43;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v135, &opaque type descriptor for <<opaque return type of View.toolbar(_:for:)>>, 1);
    v51 = sub_7FD8(&qword_263C68, &qword_263C60, (uint64_t)&protocol conformance descriptor for TupleToolbarContent<A>);
    v52 = v120;
    v53 = v129;
    View.toolbar<A>(content:)(sub_C1FAC, &v110 - 10, v129, v49, OpaqueTypeConformance2, v51);
    ((void (*)(char *, uint64_t))v118[1])(v45, v53);
    swift_bridgeObjectRelease(v48);
    swift_bridgeObjectRelease(v47);
    v54 = *v34;
    v55 = v34[1];
    v56 = *((unsigned __int8 *)v34 + 16);
    v57 = v34[3];
    v135 = (char *)v53;
    v136 = v49;
    v137 = OpaqueTypeConformance2;
    v138 = v51;
    v58 = swift_getOpaqueTypeConformance2(&v135, &opaque type descriptor for <<opaque return type of View.toolbar<A>(content:)>>, 1);
    v59 = v119;
    v60 = v55;
    v61 = v132;
    View.navigationTitle(_:)(v54, v60, v56, v57, v132, v58);
    (*(void (**)(char *, uint64_t))(v121 + 8))(v52, v61);
    v62 = v114;
    v63 = v122;
    v64 = v133;
    (*(void (**)(char *, char *, uint64_t))(v114 + 32))(v122, v59, v133);
    v65 = v131;
    (*(void (**)(char *, char *, uint64_t))(v62 + 16))(v131, v63, v64);
    swift_storeEnumTagMultiPayload(v65, v127, 1);
    v66 = sub_7EF8(&qword_263C30);
    v135 = v112;
    v136 = (uint64_t)v111;
    v67 = swift_getOpaqueTypeConformance2(&v135, &opaque type descriptor for <<opaque return type of View.navigationTitle(_:)>>, 1);
    v68 = sub_7FD8(&qword_263C48, &qword_263C30, (uint64_t)&protocol conformance descriptor for TupleToolbarContent<A>);
    v135 = (char *)v128;
    v136 = v66;
    v137 = v67;
    v138 = v68;
    v69 = swift_getOpaqueTypeConformance2(&v135, &opaque type descriptor for <<opaque return type of View.toolbar<A>(content:)>>, 1);
    v135 = (char *)v61;
    v136 = v58;
    v70 = swift_getOpaqueTypeConformance2(&v135, &opaque type descriptor for <<opaque return type of View.navigationTitle(_:)>>, 1);
    _ConditionalContent<>.init(storage:)(v65, v130, v64, v69, v70);
    swift_release(v116);
    v71 = swift_release(v124);
    (*(void (**)(char *, uint64_t, __n128))(v62 + 8))(v63, v64, v71);
    return sub_224DC(v126, type metadata accessor for ToolbarPrincipalType);
  }
  else
  {
    v73 = (int *)sub_5440(&qword_263A98);
    v120 = *(char **)((char *)v25 + v73[12]);
    v119 = *(char **)((char *)v25 + v73[16]);
    v74 = (char *)v25 + v73[20];
    v117 = v13;
    v76 = (char *)*((_QWORD *)v74 + 1);
    v126 = *(_QWORD *)v74;
    v75 = v126;
    v122 = v76;
    v77 = *((_QWORD *)v74 + 2);
    v78 = *((_QWORD *)v74 + 3);
    v79 = v74[32];
    v80 = *(void (**)(char *, uint64_t *, uint64_t))(v17 + 32);
    v81 = v22;
    v82 = v22;
    v111 = v22;
    v83 = v124;
    v80(v82, v25, v124);
    v135 = (char *)v75;
    v136 = (uint64_t)v76;
    v137 = v77;
    v138 = v78;
    v139 = v79;
    v84 = (uint64_t)v81;
    v85 = (uint64_t)v123;
    sub_BDD5C(v84, (uint64_t)v20);
    v86 = sub_5440(&qword_263C38);
    v87 = sub_7FD8(&qword_263C40, &qword_263C38, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
    v88 = v117;
    v89 = v86;
    v121 = v86;
    View.navigationTitle(_:)(v20, v86, v87);
    v125 = *(uint64_t **)(v17 + 8);
    v90 = ((uint64_t (*)(char *, uint64_t))v125)(v20, v83);
    v118 = &v110;
    __chkstk_darwin(v90);
    v91 = v119;
    *(&v110 - 4) = (uint64_t)v119;
    *(&v110 - 3) = v85;
    v92 = v120;
    *(&v110 - 2) = (uint64_t)v120;
    v93 = sub_5440(&qword_263C30);
    v135 = (char *)v89;
    v136 = v87;
    v94 = swift_getOpaqueTypeConformance2(&v135, &opaque type descriptor for <<opaque return type of View.navigationTitle(_:)>>, 1);
    v95 = sub_7FD8(&qword_263C48, &qword_263C30, (uint64_t)&protocol conformance descriptor for TupleToolbarContent<A>);
    v96 = v112;
    v97 = v128;
    View.toolbar<A>(content:)(sub_C1FC4, &v110 - 6, v128, v93, v94, v95);
    (*(void (**)(char *, uint64_t))(v113 + 8))(v88, v97);
    swift_bridgeObjectRelease(v92);
    swift_bridgeObjectRelease(v91);
    v98 = v116;
    v99 = v115;
    v100 = v96;
    v101 = v130;
    (*(void (**)(char *, char *, uint64_t))(v116 + 32))(v115, v100, v130);
    v102 = v131;
    (*(void (**)(char *, char *, uint64_t))(v98 + 16))(v131, v99, v101);
    swift_storeEnumTagMultiPayload(v102, v127, 0);
    v135 = (char *)v97;
    v136 = v93;
    v137 = v94;
    v138 = v95;
    v103 = swift_getOpaqueTypeConformance2(&v135, &opaque type descriptor for <<opaque return type of View.toolbar<A>(content:)>>, 1);
    v104 = sub_7EF8(&qword_263C60);
    v135 = (char *)v121;
    v136 = v87;
    v105 = swift_getOpaqueTypeConformance2(&v135, &opaque type descriptor for <<opaque return type of View.toolbar(_:for:)>>, 1);
    v106 = sub_7FD8(&qword_263C68, &qword_263C60, (uint64_t)&protocol conformance descriptor for TupleToolbarContent<A>);
    v135 = (char *)v129;
    v136 = v104;
    v137 = v105;
    v138 = v106;
    v107 = swift_getOpaqueTypeConformance2(&v135, &opaque type descriptor for <<opaque return type of View.toolbar<A>(content:)>>, 1);
    v135 = (char *)v132;
    v136 = v107;
    v108 = swift_getOpaqueTypeConformance2(&v135, &opaque type descriptor for <<opaque return type of View.navigationTitle(_:)>>, 1);
    _ConditionalContent<>.init(storage:)(v102, v101, v133, v103, v108);
    swift_release(v122);
    v109 = swift_release(v126);
    (*(void (**)(char *, uint64_t, __n128))(v98 + 8))(v99, v101, v109);
    return ((uint64_t (*)(char *, uint64_t))v125)(v111, v124);
  }
}

uint64_t sub_BDD5C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  double v10;
  char v11;

  v4 = sub_5440(&qword_263E50);
  Binding.wrappedValue.getter(&v9, v4);
  if ((v11 & 1) == 0)
  {
    v5 = v10;
    type metadata accessor for NavigationStyleViewModifier(0);
    v6 = sub_5440(&qword_263E28);
    Binding.wrappedValue.getter(&v9, v6);
    if (v5 >= v10)
      return static LocalizerRequest.verbatim(_:)(0, 0xE000000000000000);
  }
  v7 = type metadata accessor for LocalizerRequest(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a2, a1, v7);
}

uint64_t sub_BDE4C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  void (*v24)(char *, char *, uint64_t);
  void (*v25)(char *, uint64_t);
  _QWORD v27[2];
  _BYTE v28[16];
  uint64_t v29;
  uint64_t v30;
  _BYTE v31[16];
  uint64_t v32;
  uint64_t v33;

  v27[0] = a3;
  v27[1] = a4;
  v6 = sub_5440(&qword_263C88);
  __chkstk_darwin(v6);
  v8 = (char *)v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ToolbarItemPlacement(0);
  __chkstk_darwin(v9);
  v11 = (char *)v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_5440(&qword_263C90);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v14);
  v19 = (char *)v27 - v18;
  static ToolbarItemPlacement.navigationBarTrailing.getter(v17);
  v32 = a1;
  v33 = a2;
  v20 = sub_5440(&qword_263C98);
  v21 = sub_C1FF8();
  v22 = ToolbarItem<>.init(placement:content:)(v11, sub_C1FD0, v31, v20, v21);
  static ToolbarItemPlacement.navigationBarLeading.getter(v22);
  v29 = v27[0];
  v30 = a2;
  ToolbarItem<>.init(placement:content:)(v11, sub_C260C, v28, v20, v21);
  v23 = &v8[*(int *)(v6 + 48)];
  v24 = *(void (**)(char *, char *, uint64_t))(v13 + 16);
  v24(v8, v19, v12);
  v24(v23, v16, v12);
  TupleToolbarContent.init(_:)(v8, v6);
  v25 = *(void (**)(char *, uint64_t))(v13 + 8);
  v25(v16, v12);
  return ((uint64_t (*)(char *, uint64_t))v25)(v19, v12);
}

void sub_BE02C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD v40[3];
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  char *v49;
  char *v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  char *v58;
  char *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _BYTE v96[224];

  v94 = a2;
  v95 = a1;
  v2 = type metadata accessor for Image.Scale(0);
  v65 = *(_QWORD *)(v2 - 8);
  v66 = v2;
  __chkstk_darwin(v2);
  v64 = (char *)v40 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = sub_5440(&qword_263DB0);
  __chkstk_darwin(v54);
  v56 = (char *)v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_5440(&qword_263DE8);
  v62 = *(_QWORD *)(v5 - 8);
  v63 = v5;
  __chkstk_darwin(v5);
  v61 = (char *)v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v81 = sub_5440(&qword_263DA8);
  v7 = __chkstk_darwin(v81);
  v59 = (char *)v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v67 = (char *)v40 - v9;
  v79 = sub_5440(&qword_263DF0);
  __chkstk_darwin(v79);
  v80 = (char *)v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v93 = sub_5440(&qword_263D30);
  __chkstk_darwin(v93);
  v82 = (char *)v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = type metadata accessor for NavigationStyleViewModifier(0);
  v53 = *(_QWORD *)(v41 - 8);
  __chkstk_darwin(v41);
  v55 = v12;
  v57 = (char *)v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_5440(&qword_263D80);
  __chkstk_darwin(v13);
  v47 = (char *)v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = sub_5440(&qword_263D70);
  __chkstk_darwin(v43);
  v48 = (char *)v40 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = sub_5440(&qword_263D60);
  __chkstk_darwin(v44);
  v49 = (char *)v40 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = sub_5440(&qword_263D50);
  __chkstk_darwin(v46);
  v50 = (char *)v40 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v77 = sub_5440(&qword_263D38);
  __chkstk_darwin(v77);
  v52 = (char *)v40 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v78 = sub_5440(&qword_263DF8);
  v60 = *(_QWORD *)(v78 - 8);
  v19 = __chkstk_darwin(v78);
  v51 = (char *)v40 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v58 = (char *)v40 - v21;
  v83 = type metadata accessor for PlainButtonStyle(0);
  v73 = *(_QWORD *)(v83 - 8);
  __chkstk_darwin(v83);
  v72 = (char *)v40 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v74 = sub_5440(&qword_263D18);
  __chkstk_darwin(v74);
  v40[2] = (char *)v40 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v76 = sub_5440(&qword_263E00);
  v45 = *(_QWORD *)(v76 - 8);
  v24 = __chkstk_darwin(v76);
  v40[1] = (char *)v40 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  v42 = (char *)v40 - v26;
  v69 = sub_5440(&qword_263E08);
  __chkstk_darwin(v69);
  v71 = (char *)v40 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v89 = sub_5440(&qword_263D08);
  __chkstk_darwin(v89);
  v75 = (char *)v40 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v70 = type metadata accessor for UIKitActionButton(0);
  __chkstk_darwin(v70);
  v29 = type metadata accessor for DataStackID(0);
  __chkstk_darwin(v29);
  v30 = sub_5440(qword_25E3E8);
  __chkstk_darwin(v30);
  v84 = (char *)v40 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = sub_5440(&qword_263CF8);
  __chkstk_darwin(v32);
  v90 = sub_5440(&qword_263E10);
  __chkstk_darwin(v90);
  v92 = (char *)v40 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v85 = sub_5440(&qword_263E18);
  __chkstk_darwin(v85);
  v87 = (char *)v40 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = sub_5440(&qword_263E20);
  __chkstk_darwin(v35);
  v86 = sub_5440(&qword_263CE0);
  __chkstk_darwin(v86);
  v68 = (char *)v40 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v91 = sub_5440(&qword_263CD0);
  __chkstk_darwin(v91);
  v88 = (char *)v40 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = type metadata accessor for NavigationActionMenuButtonView(0);
  v39 = __chkstk_darwin(v38);
  __chkstk_darwin(v39);
  sub_969D0(v95, (uint64_t)v96);
  __asm { BR              X10 }
}

uint64_t sub_BE7E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;

  v7 = *(_BYTE *)(v0 + 720);
  v8 = *(_QWORD *)(v0 + 728);
  v9 = (_QWORD *)(v1 + *(int *)(v2 + 24));
  *v9 = swift_getKeyPath(&unk_1E8AF0);
  v10 = sub_5440(&qword_25F1E8);
  swift_storeEnumTagMultiPayload(v9, v10, 0);
  v11 = v1 + *(int *)(v2 + 28);
  *(_QWORD *)v11 = swift_getKeyPath(&unk_1E8B18);
  *(_BYTE *)(v11 + 8) = 0;
  *(_BYTE *)v1 = v7;
  *(_QWORD *)(v1 + 8) = v8;
  sub_21C88(v1, v5, type metadata accessor for NavigationActionMenuButtonView);
  sub_1E428(v5, v6, type metadata accessor for NavigationActionMenuButtonView);
  swift_storeEnumTagMultiPayload(v6, v3, 0);
  v12 = sub_6FD0(&qword_263CE8, type metadata accessor for NavigationActionMenuButtonView, (uint64_t)&protocol conformance descriptor for NavigationActionMenuButtonView);
  v13 = sub_7FD8(&qword_263CF0, &qword_263CF8, (uint64_t)&protocol conformance descriptor for BooksActionButton<A>);
  v14 = *(_QWORD *)(v0 + 248);
  _ConditionalContent<>.init(storage:)(v6, v2, v4, v12, v13);
  v15 = *(_QWORD *)(v0 + 400);
  sub_B3D0(v14, v15, &qword_263CE0);
  swift_storeEnumTagMultiPayload(v15, *(_QWORD *)(v0 + 384), 0);
  v16 = sub_C2124();
  v17 = sub_C21C0();
  v18 = *(_QWORD *)(v0 + 408);
  _ConditionalContent<>.init(storage:)(v15, *(_QWORD *)(v0 + 392), *(_QWORD *)(v0 + 416), v16, v17);
  sub_B414(v14, &qword_263CE0);
  v19 = *(_QWORD *)(v0 + 440);
  sub_B3D0(v18, v19, &qword_263CD0);
  swift_storeEnumTagMultiPayload(v19, *(_QWORD *)(v0 + 424), 0);
  v20 = sub_C2100();
  v21 = sub_C22C8();
  _ConditionalContent<>.init(storage:)(v19, *(_QWORD *)(v0 + 432), *(_QWORD *)(v0 + 448), v20, v21);
  sub_B414(v18, &qword_263CD0);
  return sub_224DC(v5, type metadata accessor for NavigationActionMenuButtonView);
}

uint64_t sub_BFAB0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD v41[2];
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v45 = a4;
  v41[1] = a2;
  v42 = a3;
  v50 = a5;
  v7 = type metadata accessor for ColorScheme(0);
  v47 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v46 = (char *)v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ColorConstants.Environment(0);
  __chkstk_darwin(v9);
  v11 = (char *)v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for ColorConstants(0);
  __chkstk_darwin(v12);
  v14 = (char *)v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = type metadata accessor for NavigationStyleViewModifier(0);
  v15 = *(_QWORD *)(v43 - 8);
  v16 = *(_QWORD *)(v15 + 64);
  __chkstk_darwin(v43);
  v17 = (char *)v41 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_5440(&qword_263CB0);
  v48 = *(_QWORD *)(v18 - 8);
  v49 = v18;
  __chkstk_darwin(v18);
  v20 = (char *)v41 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = sub_5440(&qword_263C98);
  __chkstk_darwin(v44);
  v22 = (char *)v41 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = a1;
  sub_1E428(a2, (uint64_t)v17, type metadata accessor for NavigationStyleViewModifier);
  v23 = *(unsigned __int8 *)(v15 + 80);
  v24 = (v23 + 16) & ~v23;
  v25 = swift_allocObject(v42, v24 + v16, v23 | 7);
  sub_21C88((uint64_t)v17, v25 + v24, type metadata accessor for NavigationStyleViewModifier);
  swift_bridgeObjectRetain(a1);
  v26 = sub_5440(&qword_263DD0);
  v27 = sub_5440(&qword_263CC0);
  v28 = sub_7FD8(&qword_263DD8, &qword_263DD0, (uint64_t)&protocol conformance descriptor for [A]);
  v29 = sub_2F608(&qword_263CB8, &qword_263CC0, (void (*)(void))sub_C2100, (void (*)(void))sub_C22C8);
  v30 = sub_C263C();
  ForEach<>.init(_:content:)(&v51, v45, v25, v26, &type metadata for String, v27, v28, v29, v30);
  _s7BooksUI18BuyButtonExternalsV6colorsAA14ColorConstantsVvg_0((uint64_t)v14);
  sub_1E428((uint64_t)v14, (uint64_t)v11, type metadata accessor for ColorConstants.Environment);
  v32 = v46;
  v31 = v47;
  (*(void (**)(char *, _QWORD, uint64_t))(v47 + 104))(v46, enum case for ColorScheme.dark(_:), v7);
  v33 = sub_6FD0((unint64_t *)&qword_25FD60, (uint64_t (*)(uint64_t))&type metadata accessor for ColorScheme, (uint64_t)&protocol conformance descriptor for ColorScheme);
  LOBYTE(v29) = dispatch thunk of static Equatable.== infix(_:_:)(v11, v32, v7, v33);
  v34 = *(void (**)(char *, uint64_t))(v31 + 8);
  v34(v32, v7);
  v35 = ((uint64_t (*)(char *, uint64_t))v34)(v11, v7);
  if ((v29 & 1) != 0)
    v36 = _s7BooksUI14ColorConstantsV25vibrantPrimaryButtonLabel05SwiftB00C0Vvg_0();
  else
    v36 = static Color.black.getter(v35);
  v37 = v36;
  sub_224DC((uint64_t)v14, type metadata accessor for ColorConstants);
  v39 = v48;
  v38 = v49;
  (*(void (**)(char *, char *, uint64_t))(v48 + 16))(v22, v20, v49);
  *(_QWORD *)&v22[*(int *)(v44 + 36)] = v37;
  (*(void (**)(char *, uint64_t))(v39 + 8))(v20, v38);
  return sub_167A4((uint64_t)v22, v50, &qword_263C98);
}

uint64_t sub_BFE5C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>, double a8@<D0>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  void (*v39)(char *, char *, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t OpaqueTypeConformance2;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  int *v66;
  char *v67;
  uint64_t v68;
  char *v69;
  char *v70;
  void (*v71)(char *, char *, uint64_t);
  char *v72;
  uint64_t v73;
  uint64_t v74;
  void (*v75)(char *, char *, uint64_t);
  char *v76;
  char *v77;
  uint64_t v78;
  void (*v79)(char *, uint64_t);
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  int *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  char v101[16];
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  double v105;
  uint64_t v106;
  uint64_t v107;

  v91 = a6;
  v89 = a5;
  v98 = a1;
  v99 = a4;
  v96 = a7;
  v95 = (int *)sub_5440(&qword_263E58);
  __chkstk_darwin(v95);
  v88 = (char *)&v81 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_5440(&qword_263E60);
  v93 = *(_QWORD *)(v12 - 8);
  v94 = v12;
  v13 = __chkstk_darwin(v12);
  v92 = (char *)&v81 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v100 = (char *)&v81 - v15;
  v85 = sub_5440(&qword_263E68);
  v83 = *(_QWORD *)(v85 - 8);
  __chkstk_darwin(v85);
  v82 = (char *)&v81 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_5440(&qword_263E70);
  v18 = __chkstk_darwin(v17);
  v20 = (char *)&v81 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v22 = (char *)&v81 - v21;
  v23 = type metadata accessor for ToolbarItemPlacement(0);
  v24 = __chkstk_darwin(v23);
  v26 = (char *)&v81 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  v28 = (char *)&v81 - v27;
  v29 = sub_5440(&qword_263E78);
  v30 = *(_QWORD *)(v29 - 8);
  v31 = __chkstk_darwin(v29);
  v33 = (char *)&v81 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = __chkstk_darwin(v31);
  v36 = (char *)&v81 - v35;
  static ToolbarItemPlacement.principal.getter(v34);
  v102 = v98;
  v103 = a2;
  v87 = a2;
  v97 = a3;
  v104 = a3;
  v105 = a8;
  v37 = sub_5440(&qword_263E80);
  v38 = sub_C2F3C();
  ToolbarItem<>.init(placement:content:)(v28, sub_C2F2C, v101, v37, v38);
  v98 = v30;
  v39 = *(void (**)(char *, char *, uint64_t))(v30 + 32);
  v86 = v36;
  v40 = v29;
  v39(v36, v33, v29);
  v41 = v99 + *(int *)(type metadata accessor for NavigationStyleViewModifier(0) + 44);
  v42 = *(_QWORD *)v41;
  LOBYTE(v33) = *(_BYTE *)(v41 + 8);
  sub_F9E4(*(_QWORD *)v41, (char)v33);
  LOBYTE(v37) = sub_31ABC(v42, (char)v33);
  v43 = sub_BE0C(v42, (char)v33);
  v90 = v22;
  if ((v37 & 1) != 0)
  {
    v55 = sub_5440(&qword_263EA8);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v55 - 8) + 56))(v20, 1, 1, v55);
    v56 = sub_7FD8(&qword_263EB0, &qword_263E68, (uint64_t)&protocol conformance descriptor for ToolbarItem<A, B>);
    v106 = v85;
    v107 = v56;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v106, &opaque type descriptor for <<opaque return type of static ToolbarContentBuilder.buildBlock<A>(_:)>>, 1);
    static ToolbarContentBuilder.buildIf<A>(_:)(v20, v55, OpaqueTypeConformance2);
    v54 = sub_B414((uint64_t)v20, &qword_263E70);
    v45 = v87;
  }
  else
  {
    v44 = static ToolbarItemPlacement.navigationBarLeading.getter(v43);
    __chkstk_darwin(v44);
    v45 = v87;
    v46 = v97;
    *(&v81 - 4) = v87;
    *(&v81 - 3) = v46;
    *((double *)&v81 - 2) = a8;
    v47 = sub_5440(&qword_263EC8);
    v48 = sub_C3094();
    v49 = v82;
    ToolbarItem<>.init(placement:content:)(v26, sub_C3088, &v81 - 6, v47, v48);
    v50 = sub_7FD8(&qword_263EB0, &qword_263E68, (uint64_t)&protocol conformance descriptor for ToolbarItem<A, B>);
    v51 = v85;
    static ToolbarContentBuilder.buildBlock<A>(_:)(v49, v85, v50);
    v52 = sub_5440(&qword_263EA8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 56))(v20, 0, 1, v52);
    v106 = v51;
    v107 = v50;
    v53 = swift_getOpaqueTypeConformance2(&v106, &opaque type descriptor for <<opaque return type of static ToolbarContentBuilder.buildBlock<A>(_:)>>, 1);
    static ToolbarContentBuilder.buildIf<A>(_:)(v20, v52, v53);
    sub_B414((uint64_t)v20, &qword_263E70);
    v54 = (*(uint64_t (**)(char *, uint64_t))(v83 + 8))(v49, v51);
  }
  v58 = static ToolbarItemPlacement.navigationBarTrailing.getter(v54);
  __chkstk_darwin(v58);
  v59 = v99;
  *(&v81 - 6) = v89;
  *(&v81 - 5) = v59;
  v60 = v97;
  *(&v81 - 4) = v45;
  *(&v81 - 3) = v60;
  *((double *)&v81 - 2) = a8;
  v61 = sub_5440(&qword_263EB8);
  v62 = sub_C2FE4();
  v63 = ToolbarItem<>.init(placement:content:)(v26, sub_C2FD8, &v81 - 8, v61, v62);
  v64 = static ToolbarItemPlacement.navigationBarLeading.getter(v63);
  __chkstk_darwin(v64);
  *(&v81 - 6) = v91;
  *(&v81 - 5) = v59;
  *(&v81 - 4) = v45;
  *(&v81 - 3) = v60;
  *((double *)&v81 - 2) = a8;
  v65 = v92;
  ToolbarItem<>.init(placement:content:)(v26, sub_C3068, &v81 - 8, v61, v62);
  v66 = v95;
  v67 = v88;
  v68 = (uint64_t)&v88[v95[12]];
  v69 = &v88[v95[16]];
  v70 = &v88[v95[20]];
  v71 = *(void (**)(char *, char *, uint64_t))(v98 + 16);
  v72 = v86;
  v84 = v40;
  v71(v88, v86, v40);
  v73 = (uint64_t)v90;
  sub_B3D0((uint64_t)v90, v68, &qword_263E70);
  v74 = v93;
  v75 = *(void (**)(char *, char *, uint64_t))(v93 + 16);
  v76 = v69;
  v77 = v100;
  v78 = v94;
  v75(v76, v100, v94);
  v75(v70, v65, v78);
  TupleToolbarContent.init(_:)(v67, v66);
  v79 = *(void (**)(char *, uint64_t))(v74 + 8);
  v79(v65, v78);
  v79(v77, v78);
  sub_B414(v73, &qword_263E70);
  return (*(uint64_t (**)(char *, uint64_t))(v98 + 8))(v72, v84);
}

uint64_t sub_C0518@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  int *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t (*v26)(_QWORD);
  char *v27;
  void (*v28)(char *, char *, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t KeyPath;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int *v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  double v63;
  _QWORD v64[2];
  char v65;

  v54 = a2;
  v55 = a3;
  v56 = a4;
  v7 = (int *)type metadata accessor for UberNavigationTitleView(0);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v50 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v51 = (uint64_t)&v50 - v11;
  v12 = sub_5440(&qword_25E0C8);
  v13 = __chkstk_darwin(v12);
  v50 = (uint64_t)&v50 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v57 = (uint64_t)&v50 - v15;
  v16 = type metadata accessor for LocalizerRequest(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = __chkstk_darwin(v16);
  v20 = (char *)&v50 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v22 = (char *)&v50 - v21;
  v23 = type metadata accessor for ToolbarPrincipalType(0);
  __chkstk_darwin(v23);
  v25 = (char *)&v50 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1E428(a1, (uint64_t)v25, v26);
  v27 = &v25[*(int *)(sub_5440(&qword_263A10) + 48)];
  v52 = v22;
  v53 = v17;
  v28 = *(void (**)(char *, char *, uint64_t))(v17 + 32);
  v28(v22, v25, v16);
  v29 = (uint64_t)v27;
  v30 = v57;
  sub_167A4(v29, v57, &qword_25E0C8);
  (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v20, v22, v16);
  v31 = v30;
  v32 = v50;
  sub_B3D0(v31, v50, &qword_25E0C8);
  v33 = &v10[v7[6]];
  *(_QWORD *)v33 = swift_getKeyPath(&unk_1E8C30);
  v34 = sub_5440(&qword_25F548);
  swift_storeEnumTagMultiPayload(v33, v34, 0);
  v35 = &v10[v7[7]];
  *(_QWORD *)v35 = swift_getKeyPath(&unk_1E8C58);
  v36 = sub_5440(&qword_25FAC8);
  swift_storeEnumTagMultiPayload(v35, v36, 0);
  v28(v10, v20, v16);
  sub_167A4(v32, (uint64_t)&v10[v7[5]], &qword_25E0C8);
  v37 = &v10[v7[8]];
  v38 = v54;
  v39 = v55;
  *(_QWORD *)v37 = v54;
  *((_QWORD *)v37 + 1) = v39;
  *((double *)v37 + 2) = a5;
  v40 = v51;
  sub_21C88((uint64_t)v10, v51, type metadata accessor for UberNavigationTitleView);
  KeyPath = swift_getKeyPath(&unk_1E8BC0);
  v42 = swift_getKeyPath(&unk_1E8BE8);
  v61 = v38;
  v62 = v39;
  v63 = a5;
  swift_retain_n(v38, 2);
  swift_retain_n(v39, 2);
  v43 = sub_5440(&qword_263EE0);
  Binding.subscript.getter(v64, v42, v43);
  swift_release(v39);
  swift_release(v38);
  swift_release(v42);
  v44 = v64[0];
  v45 = v64[1];
  LOBYTE(v32) = v65;
  v58 = v7;
  v59 = &type metadata for Bool;
  v60 = sub_6FD0(&qword_263E90, type metadata accessor for UberNavigationTitleView, (uint64_t)&protocol conformance descriptor for UberNavigationTitleView);
  v46 = swift_getKeyPath(&unk_1E8C18);
  v47 = v56;
  sub_1E428(v40, v56, type metadata accessor for UberNavigationTitleView);
  v48 = v47 + *(int *)(sub_5440(&qword_263E80) + 36);
  *(_QWORD *)v48 = KeyPath;
  *(_QWORD *)(v48 + 8) = v44;
  *(_QWORD *)(v48 + 16) = v45;
  *(_BYTE *)(v48 + 24) = v32;
  *(_QWORD *)(v48 + 32) = v46;
  sub_224DC(v40, type metadata accessor for UberNavigationTitleView);
  sub_B414(v57, &qword_25E0C8);
  return (*(uint64_t (**)(char *, uint64_t))(v53 + 8))(v52, v16);
}

BOOL sub_C0914(double a1)
{
  return a1 < 0.5;
}

uint64_t sub_C0924@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t KeyPath;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  _QWORD v12[2];
  char v13;

  KeyPath = swift_getKeyPath(&unk_1E8BC0);
  v7 = swift_getKeyPath(&unk_1E8BE8);
  swift_retain(a1);
  swift_retain(a2);
  v8 = sub_5440(&qword_263EE0);
  Binding.subscript.getter(v12, v7, v8);
  swift_release(a2);
  swift_release(a1);
  swift_release(v7);
  v9 = v12[0];
  v10 = v12[1];
  LOBYTE(a1) = v13;
  sub_C3118();
  result = swift_getKeyPath(&unk_1E8C18);
  *(_QWORD *)a3 = KeyPath;
  *(_QWORD *)(a3 + 8) = v9;
  *(_QWORD *)(a3 + 16) = v10;
  *(_BYTE *)(a3 + 24) = a1;
  *(_QWORD *)(a3 + 32) = result;
  return result;
}

uint64_t sub_C0A20@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, double a6@<D0>)
{
  return sub_C0A48(a1, a2, a3, a4, (uint64_t)&unk_250540, (uint64_t)sub_C2638, a5, a6);
}

uint64_t sub_C0A34@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, double a6@<D0>)
{
  return sub_C0A48(a1, a2, a3, a4, (uint64_t)&unk_250518, (uint64_t)sub_C2638, a5, a6);
}

uint64_t sub_C0A48@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>, double a8@<D0>)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t KeyPath;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v59;
  _QWORD v60[2];
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD v74[3];
  _QWORD v75[2];
  char v76;

  v63 = a6;
  v61 = a5;
  v71 = a4;
  v72 = a3;
  v60[1] = a2;
  v73 = a7;
  v11 = type metadata accessor for ColorScheme(0);
  v64 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v13 = (char *)v60 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for ColorConstants.Environment(0);
  __chkstk_darwin(v14);
  v16 = (char *)v60 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for ColorConstants(0);
  __chkstk_darwin(v17);
  v19 = (char *)v60 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v62 = type metadata accessor for NavigationStyleViewModifier(0);
  v20 = *(_QWORD *)(v62 - 8);
  v21 = *(_QWORD *)(v20 + 64);
  __chkstk_darwin(v62);
  v22 = (char *)v60 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = sub_5440(&qword_263CB0);
  v65 = *(_QWORD *)(v23 - 8);
  v66 = v23;
  __chkstk_darwin(v23);
  v25 = (char *)v60 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v67 = sub_5440(&qword_263C98);
  __chkstk_darwin(v67);
  v70 = (char *)v60 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v68 = sub_5440(&qword_263EB8);
  __chkstk_darwin(v68);
  v69 = (uint64_t)v60 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v74[0] = a1;
  sub_1E428(a2, (uint64_t)v22, type metadata accessor for NavigationStyleViewModifier);
  v28 = *(unsigned __int8 *)(v20 + 80);
  v29 = (v28 + 16) & ~v28;
  v30 = swift_allocObject(v61, v29 + v21, v28 | 7);
  sub_21C88((uint64_t)v22, v30 + v29, type metadata accessor for NavigationStyleViewModifier);
  swift_bridgeObjectRetain(a1);
  v31 = sub_5440(&qword_263DD0);
  v32 = sub_5440(&qword_263CC0);
  v33 = sub_7FD8(&qword_263DD8, &qword_263DD0, (uint64_t)&protocol conformance descriptor for [A]);
  v34 = sub_2F608(&qword_263CB8, &qword_263CC0, (void (*)(void))sub_C2100, (void (*)(void))sub_C22C8);
  v35 = sub_C263C();
  ForEach<>.init(_:content:)(v74, v63, v30, v31, &type metadata for String, v32, v33, v34, v35);
  _s7BooksUI18BuyButtonExternalsV6colorsAA14ColorConstantsVvg_0((uint64_t)v19);
  sub_1E428((uint64_t)v19, (uint64_t)v16, type metadata accessor for ColorConstants.Environment);
  v36 = v64;
  (*(void (**)(char *, _QWORD, uint64_t))(v64 + 104))(v13, enum case for ColorScheme.dark(_:), v11);
  v37 = sub_6FD0((unint64_t *)&qword_25FD60, (uint64_t (*)(uint64_t))&type metadata accessor for ColorScheme, (uint64_t)&protocol conformance descriptor for ColorScheme);
  LOBYTE(v30) = dispatch thunk of static Equatable.== infix(_:_:)(v16, v13, v11, v37);
  v38 = *(void (**)(char *, uint64_t))(v36 + 8);
  v38(v13, v11);
  v39 = ((uint64_t (*)(char *, uint64_t))v38)(v16, v11);
  if ((v30 & 1) != 0)
    v40 = _s7BooksUI14ColorConstantsV25vibrantPrimaryButtonLabel05SwiftB00C0Vvg_0();
  else
    v40 = static Color.black.getter(v39);
  v41 = v40;
  sub_224DC((uint64_t)v19, type metadata accessor for ColorConstants);
  v43 = v65;
  v42 = v66;
  v44 = (uint64_t)v70;
  (*(void (**)(char *, char *, uint64_t))(v65 + 16))(v70, v25, v66);
  v45 = v67;
  *(_QWORD *)(v44 + *(int *)(v67 + 36)) = v41;
  (*(void (**)(char *, uint64_t))(v43 + 8))(v25, v42);
  KeyPath = swift_getKeyPath(&unk_1E8BC0);
  v47 = swift_getKeyPath(&unk_1E8BE8);
  v49 = v71;
  v48 = v72;
  v74[0] = v72;
  v74[1] = v71;
  *(double *)&v74[2] = a8;
  swift_retain(v72);
  swift_retain(v49);
  v50 = sub_5440(&qword_263EE0);
  Binding.subscript.getter(v75, v47, v50);
  swift_release(v49);
  swift_release(v48);
  swift_release(v47);
  v51 = v75[0];
  v52 = v75[1];
  v53 = v76;
  __chkstk_darwin(v54);
  v60[-4] = v45;
  v60[-3] = &type metadata for Bool;
  v59 = sub_C1FF8();
  v55 = swift_getKeyPath(&unk_1E8C18);
  v56 = v69;
  sub_B3D0(v44, v69, &qword_263C98);
  v57 = v56 + *(int *)(v68 + 36);
  *(_QWORD *)v57 = KeyPath;
  *(_QWORD *)(v57 + 8) = v51;
  *(_QWORD *)(v57 + 16) = v52;
  *(_BYTE *)(v57 + 24) = v53;
  *(_QWORD *)(v57 + 32) = v55;
  sub_B414(v44, &qword_263C98);
  return sub_167A4(v56, v73, &qword_263EB8);
}

uint64_t sub_C0F60@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  _QWORD v23[2];

  v23[0] = a1;
  v23[1] = a2;
  v7 = sub_C57C();
  swift_bridgeObjectRetain(a2);
  v8 = Text.init<A>(_:)(v23, &type metadata for String, v7);
  v10 = v9;
  v12 = v11;
  v14 = v13 & 1;
  v15 = Text.font(_:)(a3, v8, v9, v14, v11);
  v17 = v16;
  v19 = v18;
  v21 = v20;
  sub_2B574(v8, v10, v14);
  result = swift_bridgeObjectRelease(v12);
  *(_QWORD *)a4 = v15;
  *(_QWORD *)(a4 + 8) = v17;
  *(_BYTE *)(a4 + 16) = v19 & 1;
  *(_QWORD *)(a4 + 24) = v21;
  return result;
}

uint64_t sub_C1034@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  int *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  double v25;
  double v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  double v43;
  double v44;
  double v45;
  double v46;
  BOOL v47;
  double v48;
  double v49;
  double v50;
  double v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  __int128 v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __int128 v64;
  char v65;
  uint64_t v66;
  __int128 v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  uint64_t v95;
  _OWORD v96[3];

  v80 = a7;
  v79 = a6;
  v78 = a5;
  v76 = a4;
  v77 = a1;
  v81 = a8;
  v10 = (int *)type metadata accessor for CoverView(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v75 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_5440(&qword_25F668);
  __chkstk_darwin(v13);
  v15 = (char *)&v75 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v75 = sub_5440(&qword_263E40);
  v16 = __chkstk_darwin(v75);
  v83 = (uint64_t)&v75 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v16);
  v20 = (char *)&v75 - v19;
  v21 = __chkstk_darwin(v18);
  v23 = (char *)&v75 - v22;
  __chkstk_darwin(v21);
  v82 = (uint64_t)&v75 - v24;
  if ((a2 & 1) != 0)
    v25 = 44.0;
  else
    v25 = 36.0;
  if ((a2 & 1) != 0)
    v26 = 44.0;
  else
    v26 = 54.0;
  sub_51C90(a3, (uint64_t)&v85);
  *(_QWORD *)v12 = swift_getKeyPath(&unk_1E8B40);
  v12[40] = 0;
  *((_QWORD *)v12 + 6) = swift_getKeyPath(&unk_1E8B68);
  v12[56] = 0;
  v27 = &v12[v10[6]];
  *(_QWORD *)v27 = swift_getKeyPath(&unk_1E8AF0);
  v28 = sub_5440(&qword_25F1E8);
  swift_storeEnumTagMultiPayload(v27, v28, 0);
  v29 = &v12[v10[7]];
  *(_QWORD *)v29 = swift_getKeyPath(&unk_1E8B98);
  v30 = sub_5440(&qword_25F758);
  swift_storeEnumTagMultiPayload(v29, v30, 0);
  v31 = &v12[v10[8]];
  v32 = type metadata accessor for ProfileRestrictions(0);
  v33 = sub_6FD0((unint64_t *)&qword_26AF00, type metadata accessor for ProfileRestrictions, (uint64_t)&protocol conformance descriptor for ProfileRestrictions);
  *(_QWORD *)v31 = EnvironmentObject.init()(v32, v33);
  *((_QWORD *)v31 + 1) = v34;
  v35 = &v12[v10[9]];
  v84 = 1;
  State.init(wrappedValue:)(v96, &v84, &type metadata for Bool);
  v36 = *((_QWORD *)&v96[0] + 1);
  *v35 = v96[0];
  *((_QWORD *)v35 + 1) = v36;
  v37 = &v12[v10[10]];
  v38 = v94;
  *((_OWORD *)v37 + 8) = v93;
  *((_OWORD *)v37 + 9) = v38;
  *((_QWORD *)v37 + 20) = v95;
  v39 = v90;
  *((_OWORD *)v37 + 4) = v89;
  *((_OWORD *)v37 + 5) = v39;
  v40 = v92;
  *((_OWORD *)v37 + 6) = v91;
  *((_OWORD *)v37 + 7) = v40;
  v41 = v86;
  *(_OWORD *)v37 = v85;
  *((_OWORD *)v37 + 1) = v41;
  v42 = v88;
  *((_OWORD *)v37 + 2) = v87;
  *((_OWORD *)v37 + 3) = v42;
  v12[v10[11]] = 0;
  v43 = *(double *)(a3 + 88);
  v44 = v25 / v26;
  v45 = v26 * v43;
  if (v25 < v26 * v43)
    v45 = v25;
  v46 = v25 / v43;
  if (v26 < v25 / v43)
    v46 = v26;
  v47 = v43 < v44;
  if (v43 >= v44)
    v48 = v25;
  else
    v48 = v45;
  if (v47)
    v49 = v26;
  else
    v49 = v46;
  v50 = v48;
  v51 = v49;
  v52 = _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0();
  _FrameLayout.init(width:height:alignment:)(v96, *(_QWORD *)&v50, 0, *(_QWORD *)&v51, 0, v52, v53);
  sub_1E428((uint64_t)v12, (uint64_t)v15, type metadata accessor for CoverView);
  v54 = &v15[*(int *)(v13 + 36)];
  v55 = v96[1];
  *(_OWORD *)v54 = v96[0];
  *((_OWORD *)v54 + 1) = v55;
  *((_OWORD *)v54 + 2) = v96[2];
  sub_224DC((uint64_t)v12, type metadata accessor for CoverView);
  v56 = *(_QWORD *)(a3 + 120);
  if (v56)
  {
    v57 = *(_QWORD *)(a3 + 112);
    swift_bridgeObjectRetain(*(_QWORD *)(a3 + 120));
  }
  else
  {
    v57 = 0;
    v56 = 0xE000000000000000;
  }
  *(_QWORD *)&v85 = v57;
  *((_QWORD *)&v85 + 1) = v56;
  v58 = sub_C2B4C();
  v59 = sub_C57C();
  View.accessibilityLabel<A>(_:)(&v85, v13, &type metadata for String, v58, v59);
  swift_bridgeObjectRelease(v56);
  sub_B414((uint64_t)v15, &qword_25F668);
  if (*(_QWORD *)(a3 + 120))
  {
    v60 = *(_QWORD *)(a3 + 128);
    v61 = *(_QWORD *)(a3 + 136);
    swift_bridgeObjectRetain(v61);
  }
  else
  {
    v60 = 0;
    v61 = 0xE000000000000000;
  }
  *(_QWORD *)&v85 = v60;
  *((_QWORD *)&v85 + 1) = v61;
  ModifiedContent<>.accessibilityValue<A>(_:)(&v85, v75, &type metadata for String, v59);
  swift_bridgeObjectRelease(v61);
  sub_B414((uint64_t)v20, &qword_263E40);
  v62 = v82;
  v63 = sub_167A4((uint64_t)v23, v82, &qword_263E40);
  v75 = static HorizontalAlignment.leading.getter(v63);
  sub_C166C(v76, v78, v77, v79, v80, (uint64_t *)&v85);
  v64 = v85;
  v65 = v86;
  v66 = *((_QWORD *)&v86 + 1);
  v67 = v87;
  v68 = v88;
  v69 = *((_QWORD *)&v88 + 1);
  v70 = v83;
  sub_B3D0(v62, v83, &qword_263E40);
  v71 = v70;
  v72 = v81;
  sub_B3D0(v71, v81, &qword_263E40);
  v73 = v72 + *(int *)(sub_5440(&qword_263E48) + 48);
  *(_QWORD *)v73 = v75;
  *(_QWORD *)(v73 + 8) = 0x4008000000000000;
  *(_BYTE *)(v73 + 16) = 0;
  *(_OWORD *)(v73 + 24) = v64;
  *(_BYTE *)(v73 + 40) = v65;
  *(_QWORD *)(v73 + 48) = v66;
  *(_OWORD *)(v73 + 56) = v67;
  *(_BYTE *)(v73 + 72) = v68;
  *(_QWORD *)(v73 + 80) = v69;
  sub_34B1C(v64, *((uint64_t *)&v64 + 1), v65);
  swift_bridgeObjectRetain(v66);
  sub_34B1C(v67, *((uint64_t *)&v67 + 1), v68);
  swift_bridgeObjectRetain(v69);
  sub_B414(v82, &qword_263E40);
  sub_2B574(v64, *((uint64_t *)&v64 + 1), v65);
  swift_bridgeObjectRelease(v66);
  sub_2B574(v67, *((uint64_t *)&v67 + 1), v68);
  swift_bridgeObjectRelease(v69);
  return sub_B414(v83, &qword_263E40);
}

uint64_t sub_C166C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  double v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  char v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;

  v94 = a4;
  v95 = a5;
  v92 = a3;
  v99 = a6;
  v9 = sub_5440(&qword_25FE08);
  __chkstk_darwin(v9);
  v98 = (char *)&v84 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Font.TextStyle(0);
  v96 = *(_QWORD *)(v11 - 8);
  v97 = v11;
  __chkstk_darwin(v11);
  v93 = (char *)&v84 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for ColorConstants(0);
  __chkstk_darwin(v13);
  v100 = (uint64_t)&v84 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for FontConstants.SheetHeader(0);
  __chkstk_darwin(v15);
  v17 = (char *)&v84 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for FontConstants(0);
  __chkstk_darwin(v18);
  v20 = (char *)&v84 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v101 = a1;
  v102 = a2;
  v21 = sub_C57C();
  v87 = v21;
  swift_bridgeObjectRetain(a2);
  v22 = Text.init<A>(_:)(&v101, &type metadata for String, v21);
  v24 = v23;
  v26 = v25;
  v28 = v27 & 1;
  v91 = type metadata accessor for NavigationStyleViewModifier(0);
  v86 = a3 + *(int *)(v91 + 32);
  sub_32164((uint64_t)v20);
  v85 = v17;
  sub_1E428((uint64_t)v20, (uint64_t)v17, type metadata accessor for FontConstants.Environment);
  v29 = sub_224DC((uint64_t)v20, type metadata accessor for FontConstants);
  v30 = static Font.title3.getter(v29);
  v31 = Font.bold()();
  swift_release(v30);
  sub_224DC((uint64_t)v17, type metadata accessor for FontConstants.SheetHeader);
  v32 = v26;
  v33 = Text.font(_:)(v31, v22, v24, v28, v26);
  v35 = v34;
  v37 = v36;
  v39 = v38 & 1;
  sub_2B574(v22, v24, v28);
  swift_release(v31);
  swift_bridgeObjectRelease(v32);
  v88 = v92 + *(int *)(v91 + 40);
  v40 = v100;
  _s7BooksUI18BuyButtonExternalsV6colorsAA14ColorConstantsVvg_0(v100);
  v41 = _s7BooksUI14ColorConstantsV14vibrantPrimary05SwiftB00C0Vvg_0();
  sub_224DC(v40, type metadata accessor for ColorConstants);
  v42 = Text.foregroundColor(_:)(v41, v33, v35, v39, v37);
  v91 = v43;
  v92 = v42;
  v90 = v44;
  v89 = v45 & 1;
  sub_2B574(v33, v35, v39);
  swift_release(v41);
  swift_bridgeObjectRelease(v37);
  v101 = v94;
  v102 = v95;
  swift_bridgeObjectRetain(v95);
  v46 = Text.init<A>(_:)(&v101, &type metadata for String, v87);
  v48 = v47;
  v50 = v49;
  v52 = v51 & 1;
  sub_32164((uint64_t)v20);
  v53 = (uint64_t)v85;
  sub_1E428((uint64_t)v20, (uint64_t)v85, type metadata accessor for FontConstants.Environment);
  sub_224DC((uint64_t)v20, type metadata accessor for FontConstants);
  v55 = v96;
  v54 = v97;
  v56 = v93;
  (*(void (**)(char *, _QWORD, uint64_t))(v96 + 104))(v93, enum case for Font.TextStyle.subheadline(_:), v97);
  v57 = type metadata accessor for Font.Design(0);
  v58 = v98;
  v59 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v57 - 8) + 56))(v98, 1, 1, v57);
  v60 = static Font.Weight.medium.getter(v59);
  v61 = (uint64_t)v58;
  v62 = static Font.system(_:design:weight:)(v56, v58, *(_QWORD *)&v60, 0);
  sub_B414(v61, &qword_25FE08);
  (*(void (**)(char *, uint64_t))(v55 + 8))(v56, v54);
  sub_224DC(v53, type metadata accessor for FontConstants.SheetHeader);
  v63 = Text.font(_:)(v62, v46, v48, v52, v50);
  v65 = v64;
  v67 = v66;
  v69 = v68 & 1;
  sub_2B574(v46, v48, v52);
  swift_release(v62);
  swift_bridgeObjectRelease(v50);
  v70 = v100;
  _s7BooksUI18BuyButtonExternalsV6colorsAA14ColorConstantsVvg_0(v100);
  v71 = _s7BooksUI14ColorConstantsV19booksSecondaryLabel05SwiftB00C0Vvg_0();
  sub_224DC(v70, type metadata accessor for ColorConstants);
  v72 = Text.foregroundColor(_:)(v71, v63, v65, v69, v67);
  v74 = v73;
  v76 = v75;
  LOBYTE(v50) = v77 & 1;
  sub_2B574(v63, v65, v69);
  swift_release(v71);
  swift_bridgeObjectRelease(v67);
  v78 = v89;
  LOBYTE(v101) = v89;
  v79 = v99;
  v80 = v91;
  v81 = v92;
  v82 = v90;
  *v99 = v92;
  v79[1] = v82;
  *((_BYTE *)v79 + 16) = v78;
  v79[3] = v80;
  v79[4] = v72;
  v79[5] = v74;
  *((_BYTE *)v79 + 48) = v50;
  v79[7] = v76;
  sub_34B1C(v81, v82, v78);
  swift_bridgeObjectRetain(v80);
  sub_34B1C(v72, v74, v50);
  swift_bridgeObjectRetain(v76);
  sub_2B574(v72, v74, v50);
  swift_bridgeObjectRelease(v76);
  sub_2B574(v81, v82, v101);
  return swift_bridgeObjectRelease(v80);
}

uint64_t sub_C1BA0(double a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  double v5;
  uint64_t *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  double v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;

  v5 = a1 - a2;
  v6 = (uint64_t *)(a5 + *(int *)(type metadata accessor for NavigationStyleViewModifier(0) + 28));
  v7 = *v6;
  v8 = *((_BYTE *)v6 + 8);
  v9 = v6[2];
  v14 = v7;
  v15 = v8;
  v16 = v9;
  v12 = v5;
  v13 = 0;
  v10 = sub_5440(&qword_263C08);
  return State.wrappedValue.setter(&v12, v10);
}

uint64_t sub_C1C1C(uint64_t *a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD v24[2];
  char v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 v28;

  v5 = type metadata accessor for ContentMarginPlacement(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_5440(&qword_263C00);
  __chkstk_darwin(v9);
  v11 = (char *)v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_BD2C4(v2, a1, (uint64_t)v11);
  v13 = static Edge.Set.top.getter(v12);
  v14 = (char *)v2 + *(int *)(a2 + 28);
  v15 = *(_QWORD *)v14;
  v16 = v14[8];
  v17 = *((_QWORD *)v14 + 2);
  v24[1] = v15;
  v25 = v16;
  v26 = v17;
  v18 = sub_5440(&qword_263C08);
  v19 = State.wrappedValue.getter(&v27, v18);
  v20 = v27;
  v21 = v28;
  static ContentMarginPlacement.scrollIndicators.getter(v19);
  v22 = sub_C1D84();
  View.contentMargins(_:_:for:)(v13, v20, v21, v8, v9, v22);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return sub_B414((uint64_t)v11, &qword_263C00);
}

unint64_t sub_C1D84()
{
  unint64_t result;
  uint64_t v1;

  result = qword_263C10;
  if (!qword_263C10)
  {
    v1 = sub_7EF8(&qword_263C00);
    sub_C1DE8();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> Group<A>, v1);
    atomic_store(result, (unint64_t *)&qword_263C10);
  }
  return result;
}

unint64_t sub_C1DE8()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t OpaqueTypeConformance2;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  result = qword_263C18;
  if (!qword_263C18)
  {
    v1 = sub_7EF8(&qword_263C20);
    v2 = sub_7EF8(&qword_263C28);
    v3 = sub_7EF8(&qword_263C30);
    v4 = sub_7EF8(&qword_263C38);
    v5 = sub_7FD8(&qword_263C40, &qword_263C38, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
    v14 = v4;
    v15 = v5;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v14, &opaque type descriptor for <<opaque return type of View.navigationTitle(_:)>>, 1);
    v7 = sub_7FD8(&qword_263C48, &qword_263C30, (uint64_t)&protocol conformance descriptor for TupleToolbarContent<A>);
    v14 = v2;
    v15 = v3;
    v16 = OpaqueTypeConformance2;
    v17 = v7;
    swift_getOpaqueTypeConformance2(&v14, &opaque type descriptor for <<opaque return type of View.toolbar<A>(content:)>>, 1);
    v8 = sub_7EF8(&qword_263C50);
    v9 = sub_7EF8(&qword_263C58);
    v10 = sub_7EF8(&qword_263C60);
    v14 = v4;
    v15 = v5;
    v11 = swift_getOpaqueTypeConformance2(&v14, &opaque type descriptor for <<opaque return type of View.toolbar(_:for:)>>, 1);
    v12 = sub_7FD8(&qword_263C68, &qword_263C60, (uint64_t)&protocol conformance descriptor for TupleToolbarContent<A>);
    v14 = v9;
    v15 = v10;
    v16 = v11;
    v17 = v12;
    v13 = swift_getOpaqueTypeConformance2(&v14, &opaque type descriptor for <<opaque return type of View.toolbar<A>(content:)>>, 1);
    v14 = v8;
    v15 = v13;
    swift_getOpaqueTypeConformance2(&v14, &opaque type descriptor for <<opaque return type of View.navigationTitle(_:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_263C18);
  }
  return result;
}

uint64_t sub_C1FAC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_BFE5C(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 64), a1, *(double *)(v1 + 40));
}

uint64_t sub_C1FC4@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_BDE4C(v1[2], v1[3], v1[4], a1);
}

uint64_t sub_C1FD0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_BFAB0(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), (uint64_t)&unk_2504F0, (uint64_t)sub_C2638, a1);
}

unint64_t sub_C1FF8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_263CA0;
  if (!qword_263CA0)
  {
    v1 = sub_7EF8(&qword_263C98);
    sub_C207C();
    sub_7FD8(&qword_263DC0, &qword_263DC8, (uint64_t)&protocol conformance descriptor for _ForegroundStyleModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_263CA0);
  }
  return result;
}

unint64_t sub_C207C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_263CA8;
  if (!qword_263CA8)
  {
    v1 = sub_7EF8(&qword_263CB0);
    sub_2F608(&qword_263CB8, &qword_263CC0, (void (*)(void))sub_C2100, (void (*)(void))sub_C22C8);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v1);
    atomic_store(result, (unint64_t *)&qword_263CA8);
  }
  return result;
}

uint64_t sub_C2100()
{
  return sub_2F608(&qword_263CC8, &qword_263CD0, (void (*)(void))sub_C2124, (void (*)(void))sub_C21C0);
}

unint64_t sub_C2124()
{
  unint64_t result;
  uint64_t v1;

  result = qword_263CD8;
  if (!qword_263CD8)
  {
    v1 = sub_7EF8(&qword_263CE0);
    sub_6FD0(&qword_263CE8, type metadata accessor for NavigationActionMenuButtonView, (uint64_t)&protocol conformance descriptor for NavigationActionMenuButtonView);
    sub_7FD8(&qword_263CF0, &qword_263CF8, (uint64_t)&protocol conformance descriptor for BooksActionButton<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_263CD8);
  }
  return result;
}

unint64_t sub_C21C0()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[4];

  result = qword_263D00;
  if (!qword_263D00)
  {
    v1 = sub_7EF8(&qword_263D08);
    sub_6FD0(&qword_263D10, type metadata accessor for UIKitActionButton, (uint64_t)&protocol conformance descriptor for UIKitActionButton);
    v2[0] = sub_7EF8(&qword_263D18);
    v2[1] = type metadata accessor for PlainButtonStyle(255);
    v2[2] = sub_7FD8(&qword_263D20, &qword_263D18, (uint64_t)&protocol conformance descriptor for BooksActionButton<A>);
    v2[3] = sub_6FD0(&qword_2609C0, (uint64_t (*)(uint64_t))&type metadata accessor for PlainButtonStyle, (uint64_t)&protocol conformance descriptor for PlainButtonStyle);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_263D00);
  }
  return result;
}

unint64_t sub_C22C8()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[4];

  result = qword_263D28;
  if (!qword_263D28)
  {
    v1 = sub_7EF8(&qword_263D30);
    v2[0] = sub_7EF8(&qword_263D38);
    v2[1] = &type metadata for CGFloat;
    v2[2] = sub_3CC54(&qword_263D40, &qword_263D38, (void (*)(void))sub_C2398);
    v2[3] = sub_C24C0();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
    sub_C2504();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_263D28);
  }
  return result;
}

unint64_t sub_C2398()
{
  unint64_t result;
  uint64_t v1;

  result = qword_263D48;
  if (!qword_263D48)
  {
    v1 = sub_7EF8(&qword_263D50);
    sub_3CC54(&qword_263D58, &qword_263D60, (void (*)(void))sub_C243C);
    sub_7FD8(&qword_263D88, &qword_263D90, (uint64_t)&protocol conformance descriptor for _AnimationModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_263D48);
  }
  return result;
}

unint64_t sub_C243C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_263D68;
  if (!qword_263D68)
  {
    v1 = sub_7EF8(&qword_263D70);
    sub_7FD8(&qword_263D78, &qword_263D80, (uint64_t)&protocol conformance descriptor for HStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_263D68);
  }
  return result;
}

unint64_t sub_C24C0()
{
  unint64_t result;

  result = qword_263D98;
  if (!qword_263D98)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CGFloat, &type metadata for CGFloat);
    atomic_store(result, (unint64_t *)&qword_263D98);
  }
  return result;
}

unint64_t sub_C2504()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[4];

  result = qword_263DA0;
  if (!qword_263DA0)
  {
    v1 = sub_7EF8(&qword_263DA8);
    v2[0] = sub_7EF8(&qword_263DB0);
    v2[1] = type metadata accessor for PlainButtonStyle(255);
    v2[2] = sub_7FD8(&qword_263DB8, &qword_263DB0, (uint64_t)&protocol conformance descriptor for BooksActionButton<A>);
    v2[3] = sub_6FD0(&qword_2609C0, (uint64_t (*)(uint64_t))&type metadata accessor for PlainButtonStyle, (uint64_t)&protocol conformance descriptor for PlainButtonStyle);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
    sub_7FD8((unint64_t *)&qword_260A18, &qword_25FF30, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_263DA0);
  }
  return result;
}

uint64_t sub_C260C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_BFAB0(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), (uint64_t)&unk_250428, (uint64_t)sub_C2638, a1);
}

unint64_t sub_C263C()
{
  unint64_t result;

  result = qword_263DE0;
  if (!qword_263DE0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ToolbarItemType, &type metadata for ToolbarItemType);
    atomic_store(result, (unint64_t *)&qword_263DE0);
  }
  return result;
}

uint64_t sub_C2680()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

void LibraryAssetState.ownership.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 16);
}

unint64_t sub_C26BC()
{
  unint64_t result;

  result = qword_263E30;
  if (!qword_263E30)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CGFloat, &type metadata for CGFloat);
    atomic_store(result, (unint64_t *)&qword_263E30);
  }
  return result;
}

uint64_t sub_C2700()
{
  uint64_t v0;
  uint64_t v1;
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t);
  char *v16;
  uint64_t v17;
  int *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;

  v1 = v0;
  v2 = (int *)type metadata accessor for NavigationStyleViewModifier(0);
  v3 = *((_QWORD *)v2 - 1);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v5 = (v4 + 16) & ~v4;
  v6 = *(_QWORD *)(v3 + 64);
  v7 = v0 + v5;
  sub_2B574(*(_QWORD *)(v0 + v5), *(_QWORD *)(v0 + v5 + 8), *(_BYTE *)(v0 + v5 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v5 + 24));
  v8 = (_QWORD *)(v0 + v5 + v2[5]);
  v9 = type metadata accessor for NavigationStyle(0);
  if (swift_getEnumCaseMultiPayload(v8, v9) == 1)
  {
    v33 = v6;
    v10 = v0;
    swift_release(*v8);
    swift_release(v8[1]);
    v11 = (int *)sub_5440(&qword_263AA0);
    v12 = (char *)v8 + v11[12];
    v13 = type metadata accessor for LocalizerRequest(0);
    v14 = *(_QWORD *)(v13 - 8);
    v15 = *(void (**)(char *, uint64_t))(v14 + 8);
    v15(v12, v13);
    v16 = &v12[*(int *)(sub_5440(&qword_263A10) + 48)];
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v16, 1, v13))
      v15(v16, v13);
    swift_bridgeObjectRelease(*(_QWORD *)((char *)v8 + v11[16]));
    swift_bridgeObjectRelease(*(_QWORD *)((char *)v8 + v11[20]));
    v1 = v10;
    v6 = v33;
    v5 = (v4 + 16) & ~v4;
  }
  else
  {
    v17 = type metadata accessor for LocalizerRequest(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(v8, v17);
    v18 = (int *)sub_5440(&qword_263A98);
    swift_bridgeObjectRelease(*(_QWORD *)((char *)v8 + v18[12]));
    swift_bridgeObjectRelease(*(_QWORD *)((char *)v8 + v18[16]));
    v19 = (_QWORD *)((char *)v8 + v18[20]);
    swift_release(*v19);
    swift_release(v19[1]);
  }
  v20 = (_QWORD *)(v7 + v2[6]);
  swift_release(*v20);
  swift_release(v20[1]);
  swift_release(*(_QWORD *)(v7 + v2[7] + 16));
  v21 = (_QWORD *)(v7 + v2[8]);
  v22 = sub_5440(&qword_25FAA0);
  if (swift_getEnumCaseMultiPayload(v21, v22) == 1)
  {
    v23 = (char *)v21 + *(int *)(type metadata accessor for FontConstants.Environment(0) + 24);
    v24 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v24 - 8) + 8))(v23, v24);
  }
  else
  {
    swift_release(*v21);
  }
  v25 = (_QWORD *)(v7 + v2[9]);
  v26 = sub_5440(&qword_25F548);
  if (swift_getEnumCaseMultiPayload(v25, v26) == 1)
  {
    v27 = (char *)v25 + *(int *)(type metadata accessor for SizeConstants.Environment(0) + 24);
    v28 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v28 - 8) + 8))(v27, v28);
  }
  else
  {
    swift_release(*v25);
  }
  v29 = (_QWORD *)(v7 + v2[10]);
  v30 = sub_5440(&qword_25F1E8);
  if (swift_getEnumCaseMultiPayload(v29, v30) == 1)
  {
    v31 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v31 - 8) + 8))(v29, v31);
  }
  else
  {
    swift_release(*v29);
  }
  sub_BE0C(*(_QWORD *)(v7 + v2[11]), *(_BYTE *)(v7 + v2[11] + 8));
  return swift_deallocObject(v1, ((((v6 + v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8, v4 | 7);
}

uint64_t sub_C2A1C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v5 = *(_QWORD *)(type metadata accessor for NavigationStyleViewModifier(0) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = (*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_C1BA0(*(double *)(v2 + v7), *(double *)(v2 + ((v7 + 15) & 0xFFFFFFFFFFFFF8)), a1, a2, v2 + v6);
}

uint64_t sub_C2A88()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_C2AAC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v4 = *(_QWORD *)(v1 + 16);
  v3 = *(_QWORD *)(v1 + 24);
  swift_bridgeObjectRetain(v3);
  result = Image.init(systemName:)(v4, v3);
  *a1 = result;
  return result;
}

uint64_t sub_C2AF4()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_C2B20@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_C0F60(v1[2], v1[3], v1[4], a1);
}

unint64_t sub_C2B4C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25F6E0;
  if (!qword_25F6E0)
  {
    v1 = sub_7EF8(&qword_25F668);
    sub_6FD0(&qword_25F6C0, type metadata accessor for CoverView, (uint64_t)&protocol conformance descriptor for CoverView);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_25F6E0);
  }
  return result;
}

uint64_t sub_C2BD4()
{
  uint64_t v0;
  uint64_t v1;
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t);
  char *v16;
  uint64_t v17;
  int *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;

  v1 = v0;
  v2 = (int *)type metadata accessor for NavigationStyleViewModifier(0);
  v3 = *((_QWORD *)v2 - 1);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v5 = (v4 + 16) & ~v4;
  v6 = *(_QWORD *)(v3 + 64);
  v7 = v0 + v5;
  sub_2B574(*(_QWORD *)(v0 + v5), *(_QWORD *)(v0 + v5 + 8), *(_BYTE *)(v0 + v5 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v5 + 24));
  v8 = (_QWORD *)(v0 + v5 + v2[5]);
  v9 = type metadata accessor for NavigationStyle(0);
  if (swift_getEnumCaseMultiPayload(v8, v9) == 1)
  {
    v33 = v6;
    v10 = v0;
    swift_release(*v8);
    swift_release(v8[1]);
    v11 = (int *)sub_5440(&qword_263AA0);
    v12 = (char *)v8 + v11[12];
    v13 = type metadata accessor for LocalizerRequest(0);
    v14 = *(_QWORD *)(v13 - 8);
    v15 = *(void (**)(char *, uint64_t))(v14 + 8);
    v15(v12, v13);
    v16 = &v12[*(int *)(sub_5440(&qword_263A10) + 48)];
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v16, 1, v13))
      v15(v16, v13);
    swift_bridgeObjectRelease(*(_QWORD *)((char *)v8 + v11[16]));
    swift_bridgeObjectRelease(*(_QWORD *)((char *)v8 + v11[20]));
    v1 = v10;
    v6 = v33;
    v5 = (v4 + 16) & ~v4;
  }
  else
  {
    v17 = type metadata accessor for LocalizerRequest(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(v8, v17);
    v18 = (int *)sub_5440(&qword_263A98);
    swift_bridgeObjectRelease(*(_QWORD *)((char *)v8 + v18[12]));
    swift_bridgeObjectRelease(*(_QWORD *)((char *)v8 + v18[16]));
    v19 = (_QWORD *)((char *)v8 + v18[20]);
    swift_release(*v19);
    swift_release(v19[1]);
  }
  v20 = (_QWORD *)(v7 + v2[6]);
  swift_release(*v20);
  swift_release(v20[1]);
  swift_release(*(_QWORD *)(v7 + v2[7] + 16));
  v21 = (_QWORD *)(v7 + v2[8]);
  v22 = sub_5440(&qword_25FAA0);
  if (swift_getEnumCaseMultiPayload(v21, v22) == 1)
  {
    v23 = (char *)v21 + *(int *)(type metadata accessor for FontConstants.Environment(0) + 24);
    v24 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v24 - 8) + 8))(v23, v24);
  }
  else
  {
    swift_release(*v21);
  }
  v25 = (_QWORD *)(v7 + v2[9]);
  v26 = sub_5440(&qword_25F548);
  if (swift_getEnumCaseMultiPayload(v25, v26) == 1)
  {
    v27 = (char *)v25 + *(int *)(type metadata accessor for SizeConstants.Environment(0) + 24);
    v28 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v28 - 8) + 8))(v27, v28);
  }
  else
  {
    swift_release(*v25);
  }
  v29 = (_QWORD *)(v7 + v2[10]);
  v30 = sub_5440(&qword_25F1E8);
  if (swift_getEnumCaseMultiPayload(v29, v30) == 1)
  {
    v31 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v31 - 8) + 8))(v29, v31);
  }
  else
  {
    swift_release(*v29);
  }
  sub_BE0C(*(_QWORD *)(v7 + v2[11]), *(_BYTE *)(v7 + v2[11] + 8));
  return swift_deallocObject(v1, v5 + v6, v4 | 7);
}

void sub_C2EDC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  type metadata accessor for NavigationStyleViewModifier(0);
  sub_BE02C(a1, a2);
}

uint64_t sub_C2F2C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_C0518(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), a1, *(double *)(v1 + 40));
}

unint64_t sub_C2F3C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_263E88;
  if (!qword_263E88)
  {
    v1 = sub_7EF8(&qword_263E80);
    sub_6FD0(&qword_263E90, type metadata accessor for UberNavigationTitleView, (uint64_t)&protocol conformance descriptor for UberNavigationTitleView);
    sub_7FD8(&qword_263E98, &qword_263EA0, (uint64_t)&unk_1F45F0);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_263E88);
  }
  return result;
}

uint64_t sub_C2FD8()
{
  return sub_C3074((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, double))sub_C0A20);
}

unint64_t sub_C2FE4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_263EC0;
  if (!qword_263EC0)
  {
    v1 = sub_7EF8(&qword_263EB8);
    sub_C1FF8();
    sub_7FD8(&qword_263E98, &qword_263EA0, (uint64_t)&unk_1F45F0);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_263EC0);
  }
  return result;
}

uint64_t sub_C3068()
{
  return sub_C3074((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, double))sub_C0A34);
}

uint64_t sub_C3074(uint64_t (*a1)(_QWORD, _QWORD, _QWORD, _QWORD, double))
{
  uint64_t v1;

  return a1(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(double *)(v1 + 48));
}

uint64_t sub_C3088@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_C0924(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

unint64_t sub_C3094()
{
  unint64_t result;
  uint64_t v1;

  result = qword_263ED0;
  if (!qword_263ED0)
  {
    v1 = sub_7EF8(&qword_263EC8);
    sub_C3118();
    sub_7FD8(&qword_263E98, &qword_263EA0, (uint64_t)&unk_1F45F0);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_263ED0);
  }
  return result;
}

unint64_t sub_C3118()
{
  unint64_t result;

  result = qword_263ED8;
  if (!qword_263ED8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for UberNavigationBackButtonView, &type metadata for UberNavigationBackButtonView);
    atomic_store(result, (unint64_t *)&qword_263ED8);
  }
  return result;
}

double *sub_C3164@<X0>(double *result@<X0>, BOOL *a2@<X8>)
{
  *a2 = *result < 0.5;
  return result;
}

uint64_t sub_C3198()
{
  _QWORD v1[2];

  v1[0] = sub_7EF8(&qword_263C00);
  v1[1] = sub_C1D84();
  return swift_getOpaqueTypeConformance2(v1, &opaque type descriptor for <<opaque return type of View.contentMargins(_:_:for:)>>, 1);
}

uint64_t PageScrollActionImplementation.perform(_:asPartOf:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v19;

  v4 = sub_5440(&qword_25E2E8);
  __chkstk_darwin(v4);
  v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for PageScrollAction(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  __chkstk_darwin(v7);
  sub_C3584(a1, (uint64_t)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = *(unsigned __int8 *)(v8 + 80);
  v11 = (v10 + 24) & ~v10;
  v12 = swift_allocObject(&unk_2505E8, v11 + v9, v10 | 7);
  *(_QWORD *)(v12 + 16) = a2;
  sub_C35CC((uint64_t)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v12 + v11);
  sub_5440(&qword_263F00);
  v13 = swift_retain(a2);
  v14 = Promise.__allocating_init()(v13);
  v15 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v6, 1, 1, v15);
  v16 = (_QWORD *)swift_allocObject(&unk_250610, 56, 7);
  v16[2] = 0;
  v16[3] = 0;
  v16[4] = &unk_263EF8;
  v16[5] = v12;
  v16[6] = v14;
  swift_retain(v14);
  v17 = sub_C3A3C((uint64_t)v6, (uint64_t)&unk_263F10, (uint64_t)v16);
  swift_release(v17);
  return v14;
}

uint64_t sub_C335C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v3[7] = a1;
  v3[8] = a3;
  v4 = type metadata accessor for MainActor(0);
  v3[9] = v4;
  v3[10] = static MainActor.shared.getter(v4);
  v5 = sub_5440(&qword_263F40);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to BaseObjectGraph.inject<A>(_:)[1]);
  v3[11] = v6;
  *v6 = v3;
  v6[1] = sub_C33F4;
  return BaseObjectGraph.inject<A>(_:)(v3 + 2, v5, v5);
}

uint64_t sub_C33F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 88);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 72);
  *(_QWORD *)(*(_QWORD *)v1 + 96) = v0;
  swift_task_dealloc(v2);
  v5 = dispatch thunk of Actor.unownedExecutor.getter(v3, &protocol witness table for MainActor);
  if (v0)
    v6 = sub_C3550;
  else
    v6 = sub_C347C;
  return swift_task_switch(v6, v5, v4);
}

uint64_t sub_C347C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  unsigned int *v7;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + 56);
  v2 = *(_QWORD *)(v0 + 64);
  swift_release(*(_QWORD *)(v0 + 80));
  v3 = *(_QWORD *)(v0 + 40);
  v4 = *(_QWORD *)(v0 + 48);
  sub_5480((_QWORD *)(v0 + 16), v3);
  v9 = *(_QWORD *)(v2 + *(int *)(type metadata accessor for PageScrollAction(0) + 24));
  v5 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v4 + 8))(&v9, v3, v4);
  v6 = type metadata accessor for ActionOutcome(0);
  v7 = (unsigned int *)&enum case for ActionOutcome.performed(_:);
  if ((v5 & 1) == 0)
    v7 = (unsigned int *)&enum case for ActionOutcome.unsupported(_:);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v6 - 8) + 104))(v1, *v7, v6);
  _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)(v0 + 16));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_C3550()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 80));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_C3584(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PageScrollAction(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_C35CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PageScrollAction(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_C3610(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for PageScrollAction(0) - 8) + 80);
  v5 = *(_QWORD *)(v1 + 16);
  v6 = v1 + ((v4 + 24) & ~v4);
  v7 = (_QWORD *)swift_task_alloc(dword_263EF4);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_10F84;
  return sub_C335C(a1, v5, v6);
}

uint64_t sub_C3690(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v19;

  v4 = sub_5440(&qword_25E2E8);
  __chkstk_darwin(v4);
  v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for PageScrollAction(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  __chkstk_darwin(v7);
  sub_C3584(a1, (uint64_t)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = *(unsigned __int8 *)(v8 + 80);
  v11 = (v10 + 24) & ~v10;
  v12 = swift_allocObject(&unk_250658, v11 + v9, v10 | 7);
  *(_QWORD *)(v12 + 16) = a2;
  sub_C35CC((uint64_t)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v12 + v11);
  sub_5440(&qword_263F00);
  v13 = swift_retain(a2);
  v14 = Promise.__allocating_init()(v13);
  v15 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v6, 1, 1, v15);
  v16 = (_QWORD *)swift_allocObject(&unk_250680, 56, 7);
  v16[2] = 0;
  v16[3] = 0;
  v16[4] = &unk_263F20;
  v16[5] = v12;
  v16[6] = v14;
  swift_retain(v14);
  v17 = sub_C3A3C((uint64_t)v6, (uint64_t)&unk_263F28, (uint64_t)v16);
  swift_release(v17);
  return v14;
}

uint64_t sub_C3808(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t (*v13)(uint64_t);

  v6[2] = a6;
  v8 = type metadata accessor for ActionOutcome(0);
  v6[3] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v6[4] = v9;
  v10 = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6[5] = v10;
  v13 = (uint64_t (*)(uint64_t))((char *)a4 + *a4);
  v11 = (_QWORD *)swift_task_alloc(a4[1]);
  v6[6] = v11;
  *v11 = v6;
  v11[1] = sub_C38A0;
  return v13(v10);
}

uint64_t sub_C38A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 48);
  *(_QWORD *)(*(_QWORD *)v1 + 56) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_C395C;
  else
    v3 = sub_C3904;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_C3904()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v0 + 32);
  v1 = *(_QWORD *)(v0 + 40);
  v3 = *(_QWORD *)(v0 + 24);
  Promise.resolve(_:)(v1);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc(*(_QWORD *)(v0 + 40));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_C395C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 56);
  Promise.reject(_:)(v1);
  swift_errorRelease(v1);
  swift_task_dealloc(*(_QWORD *)(v0 + 40));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_C39A8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = v1[2];
  v5 = v1[3];
  v6 = (int *)v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = (_QWORD *)swift_task_alloc(dword_263F0C);
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_10F84;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, int *, uint64_t, uint64_t))((char *)&dword_263F08
                                                                                     + dword_263F08))(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_C3A3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ObjectType;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD v19[4];

  v6 = type metadata accessor for TaskPriority(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) == 1)
  {
    sub_108F8(a1);
    v8 = 7168;
    v9 = *(_QWORD *)(a3 + 16);
    if (v9)
    {
LABEL_3:
      v10 = *(_QWORD *)(a3 + 24);
      ObjectType = swift_getObjectType(v9);
      swift_unknownObjectRetain(v9);
      v12 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v10);
      v14 = v13;
      swift_unknownObjectRelease(v9);
      goto LABEL_6;
    }
  }
  else
  {
    v15 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    v8 = v15 | 0x1C00;
    v9 = *(_QWORD *)(a3 + 16);
    if (v9)
      goto LABEL_3;
  }
  v12 = 0;
  v14 = 0;
LABEL_6:
  v16 = swift_allocObject(&unk_2506A8, 32, 7);
  *(_QWORD *)(v16 + 16) = a2;
  *(_QWORD *)(v16 + 24) = a3;
  if (v14 | v12)
  {
    v19[0] = 0;
    v19[1] = 0;
    v17 = v19;
    v19[2] = v12;
    v19[3] = v14;
  }
  else
  {
    v17 = 0;
  }
  return swift_task_create(v8, v17, (char *)&type metadata for () + 8, &unk_263F38, v16);
}

unint64_t sub_C3B84()
{
  unint64_t result;
  uint64_t v1;

  result = qword_263F18;
  if (!qword_263F18)
  {
    v1 = type metadata accessor for PageScrollAction(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for PageScrollAction, v1);
    atomic_store(result, (unint64_t *)&qword_263F18);
  }
  return result;
}

ValueMetadata *type metadata accessor for PageScrollActionImplementation()
{
  return &type metadata for PageScrollActionImplementation;
}

uint64_t sub_C3BE0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = type metadata accessor for PageScrollAction(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release(*(_QWORD *)(v0 + 16));
  v6 = type metadata accessor for ClickData(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v0 + v4, 1, v6))
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v4, v6);
  v8 = v0 + v4 + *(int *)(v1 + 20);
  v9 = type metadata accessor for ActionMetrics(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_C3CAC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for PageScrollAction(0) - 8) + 80);
  v5 = *(_QWORD *)(v1 + 16);
  v6 = v1 + ((v4 + 24) & ~v4);
  v7 = (_QWORD *)swift_task_alloc(dword_263EF4);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_108B0;
  return sub_C335C(a1, v5, v6);
}

uint64_t sub_C3D30()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[2]);
  swift_release(v0[5]);
  swift_release(v0[6]);
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_C3D64(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = v1[2];
  v5 = v1[3];
  v6 = (int *)v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = (_QWORD *)swift_task_alloc(dword_263F0C);
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_108B0;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, int *, uint64_t, uint64_t))((char *)&dword_263F08
                                                                                     + dword_263F08))(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_C3DF8(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v4 = (_QWORD *)swift_task_alloc(a2[1]);
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_C3E5C;
  return v6(a1);
}

uint64_t sub_C3E5C()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_C3EA8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_C3ECC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_263F34);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_10F84;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_263F30 + dword_263F30))(a1, v4);
}

double sub_C3F3C@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)(a1 + 32) = 0;
  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

_QWORD *sub_C3F4C@<X0>(_QWORD *a1@<X8>)
{
  unint64_t v2;

  v2 = sub_C4210();
  return EnvironmentValues.subscript.getter(a1, &type metadata for LocalizerForAnalyticsKey, &type metadata for LocalizerForAnalyticsKey, v2);
}

uint64_t View._localizerForAnalytics(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t KeyPath;
  _BYTE v8[40];

  KeyPath = swift_getKeyPath(&unk_1E8D20);
  sub_BD00(a1, (uint64_t)v8);
  View.environment<A>(_:_:)(KeyPath, v8, a2, a3);
  swift_release(KeyPath);
  return sub_C40DC((uint64_t)v8);
}

_QWORD *sub_C4004@<X0>(_QWORD *a1@<X8>)
{
  unint64_t v2;

  v2 = sub_C4210();
  return EnvironmentValues.subscript.getter(a1, &type metadata for LocalizerForAnalyticsKey, &type metadata for LocalizerForAnalyticsKey, v2);
}

_QWORD *sub_C4040@<X0>(_QWORD *a1@<X8>)
{
  unint64_t v2;

  v2 = sub_C4210();
  return EnvironmentValues.subscript.getter(a1, &type metadata for LocalizerForAnalyticsKey, &type metadata for LocalizerForAnalyticsKey, v2);
}

uint64_t sub_C407C(uint64_t a1)
{
  unint64_t v1;
  _BYTE v3[40];
  _BYTE v4[40];

  sub_C41C8(a1, (uint64_t)v4);
  sub_C41C8((uint64_t)v4, (uint64_t)v3);
  v1 = sub_C4210();
  EnvironmentValues.subscript.setter(v3, &type metadata for LocalizerForAnalyticsKey, &type metadata for LocalizerForAnalyticsKey, v1);
  return sub_C40DC((uint64_t)v4);
}

uint64_t sub_C40DC(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_5440(&qword_25FB10);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_C411C(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *a1;
  v2 = sub_7EF8(&qword_263F48);
  v3 = type metadata accessor for ModifiedContent(255, v1, v2);
  sub_C417C();
  return swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v3);
}

unint64_t sub_C417C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_263F50;
  if (!qword_263F50)
  {
    v1 = sub_7EF8(&qword_263F48);
    result = swift_getWitnessTable(&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>, v1);
    atomic_store(result, (unint64_t *)&qword_263F50);
  }
  return result;
}

uint64_t sub_C41C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_5440(&qword_25FB10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_C4210()
{
  unint64_t result;

  result = qword_263F58;
  if (!qword_263F58)
  {
    result = swift_getWitnessTable(&unk_1E8D6C, &type metadata for LocalizerForAnalyticsKey);
    atomic_store(result, (unint64_t *)&qword_263F58);
  }
  return result;
}

ValueMetadata *type metadata accessor for LocalizerForAnalyticsKey()
{
  return &type metadata for LocalizerForAnalyticsKey;
}

uint64_t CoverViewModel.source.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  _QWORD v17[3];
  uint64_t v18;
  uint64_t v19;

  sub_C4354(v1, (uint64_t)&v13);
  if (v16)
  {
    result = sub_C4388((uint64_t)&v13);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_BYTE *)(a1 + 16) = -1;
  }
  else
  {
    sub_AC68(&v13, (uint64_t)v17);
    v4 = v18;
    v5 = v19;
    sub_5480(v17, v18);
    v6 = AssetInfo.coverURLString.getter(v4, v5);
    v8 = v7;
    sub_BD00((uint64_t)v17, (uint64_t)&v13);
    if (v8)
    {
      v9 = 1;
    }
    else
    {
      v10 = v14;
      v11 = v15;
      sub_5480(&v13, v14);
      v6 = ContentInfo.id.getter(v10, *(_QWORD *)(v11 + 8));
      v8 = v12;
      v9 = 0;
    }
    *(_QWORD *)a1 = v6;
    *(_QWORD *)(a1 + 8) = v8;
    *(_BYTE *)(a1 + 16) = v9;
    _s7BooksUI13AnyPagedFrameVwxx_0(&v13);
    return _s7BooksUI13AnyPagedFrameVwxx_0(v17);
  }
  return result;
}

uint64_t sub_C4354(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for CoverViewModel.Style(a2, a1);
  return a2;
}

uint64_t sub_C4388(uint64_t a1)
{
  unsigned int v2;

  v2 = *(unsigned __int8 *)(a1 + 56);
  if (v2 >= 3)
    v2 = *(_DWORD *)a1 + 3;
  if (!v2)
    _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)a1);
  return a1;
}

uint64_t CoverViewModel.init(style:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  double v7;
  uint64_t result;
  unint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t (*v19)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD v43[3];
  uint64_t v44;
  uint64_t v45;
  _QWORD v46[3];
  uint64_t v47;
  uint64_t v48;
  __int128 v49[2];
  uint64_t v50;
  uint64_t v51;
  char v52;

  v4 = sub_5440(&qword_2630E8);
  __chkstk_darwin(v4);
  v6 = (char *)v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_C4354(a1, a2);
  sub_C4354(a1, (uint64_t)v49);
  if (v52)
  {
    v7 = *(double *)v49;
    if (v52 == 1)
    {
      *(_QWORD *)(a2 + 88) = 0x3FF0000000000000;
      *(double *)(a2 + 64) = v7;
      *(double *)(a2 + 72) = v7;
      *(_BYTE *)(a2 + 80) = 0;
      result = sub_C4388(a1);
      v9 = 0xD00000000000001BLL;
      v10 = "placeholder-audiobook-cover";
    }
    else
    {
      v22 = BYTE8(v49[0]);
      *(_QWORD *)(a2 + 88) = 0x3FE4834834834834;
      *(double *)(a2 + 64) = v7 * 0.641025641;
      *(double *)(a2 + 72) = v7;
      *(_BYTE *)(a2 + 80) = v22;
      result = sub_C4388(a1);
      v9 = 0xD000000000000016;
      v10 = "placeholder-book-cover";
    }
    *(_QWORD *)(a2 + 96) = v9;
    *(_QWORD *)(a2 + 104) = (unint64_t)(v10 - 32) | 0x8000000000000000;
    *(_OWORD *)(a2 + 112) = 0u;
    *(_OWORD *)(a2 + 128) = 0u;
    *(_OWORD *)(a2 + 144) = 0u;
    *(_QWORD *)(a2 + 160) = 0;
  }
  else
  {
    v11 = v50;
    v12 = v51;
    sub_AC68(v49, (uint64_t)v46);
    v13 = v47;
    v14 = v48;
    sub_5480(v46, v47);
    *(double *)(a2 + 88) = AssetInfo.coverAspectRatio.getter(v13, v14);
    *(_QWORD *)(a2 + 64) = v11;
    *(_QWORD *)(a2 + 72) = v12;
    sub_BD00((uint64_t)v46, (uint64_t)v43);
    v15 = sub_5440(&qword_262040);
    v16 = type metadata accessor for BookInfo(0);
    v17 = swift_dynamicCast(v6, v43, v15, v16, 6);
    v18 = *(_QWORD *)(v16 - 8);
    v19 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56);
    if ((v17 & 1) != 0)
    {
      v20 = v19(v6, 0, 1, v16);
      v21 = BookInfo.isRTL.getter(v20);
      (*(void (**)(char *, uint64_t))(v18 + 8))(v6, v16);
    }
    else
    {
      v19(v6, 1, 1, v16);
      sub_B414((uint64_t)v6, &qword_2630E8);
      v21 = 0;
    }
    *(_BYTE *)(a2 + 80) = v21 & 1;
    v23 = v47;
    v24 = v48;
    sub_5480(v46, v47);
    *(_QWORD *)(a2 + 96) = ContentInfo.id.getter(v23, *(_QWORD *)(v24 + 8));
    *(_QWORD *)(a2 + 104) = v25;
    sub_BD00((uint64_t)v46, (uint64_t)v43);
    v26 = v44;
    v27 = v45;
    sub_5480(v43, v44);
    v28 = AssetInfo.title.getter(v26, v27);
    v30 = v29;
    v31 = v44;
    v32 = v45;
    sub_5480(v43, v44);
    v33 = AssetInfo.author.getter(v31, v32);
    v35 = v34;
    v36 = v44;
    v37 = v45;
    sub_5480(v43, v44);
    LOBYTE(v37) = AssetInfo.isPartOfSeries.getter(v36, v37);
    v38 = v44;
    v39 = v45;
    sub_5480(v43, v44);
    v40 = AssetInfo.seriesName.getter(v38, v39);
    v42 = v41;
    _s7BooksUI13AnyPagedFrameVwxx_0(v43);
    sub_C4388(a1);
    *(_QWORD *)(a2 + 112) = v28;
    *(_QWORD *)(a2 + 120) = v30;
    *(_QWORD *)(a2 + 128) = v33;
    *(_QWORD *)(a2 + 136) = v35;
    *(_QWORD *)(a2 + 144) = v37 & 1;
    *(_QWORD *)(a2 + 152) = v40;
    *(_QWORD *)(a2 + 160) = v42;
    return _s7BooksUI13AnyPagedFrameVwxx_0(v46);
  }
  return result;
}

uint64_t CoverViewModel.axLabel.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  unint64_t v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;

  v1 = v0[15];
  if (!v1)
    return 0;
  v2 = v0[14];
  v4 = v0[19];
  v3 = v0[20];
  v5 = v0[17];
  v6 = v0[18];
  v7 = v0[16];
  swift_bridgeObjectRetain(v0[15]);
  v8 = sub_AAC9C(0, 1, 1, (char *)&_swiftEmptyArrayStorage);
  v10 = *((_QWORD *)v8 + 2);
  v9 = *((_QWORD *)v8 + 3);
  v11 = v10 + 1;
  if (v10 >= v9 >> 1)
    v8 = sub_AAC9C((char *)(v9 > 1), v10 + 1, 1, v8);
  *((_QWORD *)v8 + 2) = v11;
  v12 = &v8[16 * v10];
  *((_QWORD *)v12 + 4) = v2;
  *((_QWORD *)v12 + 5) = v1;
  v13 = *((_QWORD *)v8 + 3);
  swift_bridgeObjectRetain(v5);
  if (v11 >= v13 >> 1)
    v8 = sub_AAC9C((char *)(v13 > 1), v10 + 2, 1, v8);
  *((_QWORD *)v8 + 2) = v10 + 2;
  v14 = &v8[16 * v11];
  *((_QWORD *)v14 + 4) = v7;
  *((_QWORD *)v14 + 5) = v5;
  if ((v6 & 1) != 0 && v3)
  {
    v15 = *((_QWORD *)v8 + 2);
    v16 = *((_QWORD *)v8 + 3);
    swift_bridgeObjectRetain(v3);
    if (v15 >= v16 >> 1)
      v8 = sub_AAC9C((char *)(v16 > 1), v15 + 1, 1, v8);
    *((_QWORD *)v8 + 2) = v15 + 1;
    v17 = &v8[16 * v15];
    *((_QWORD *)v17 + 4) = v4;
    *((_QWORD *)v17 + 5) = v3;
  }
  v18 = sub_5440(&qword_25DF80);
  v19 = sub_A8F8();
  v20 = BidirectionalCollection<>.joined(separator:)(8236, 0xE200000000000000, v18, v19);
  swift_bridgeObjectRelease(v8);
  return v20;
}

uint64_t CoverViewModel.axSeriesLabel.getter()
{
  _QWORD *v0;
  uint64_t v1;
  BOOL v2;
  uint64_t v3;

  v1 = v0[20];
  if (v0[15])
    v2 = v1 == 0;
  else
    v2 = 1;
  if (v2)
    return 0;
  v3 = v0[19];
  swift_bridgeObjectRetain(v1);
  return v3;
}

uint64_t CoverViewModel.style.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_C4354(v1, a1);
}

double CoverViewModel.intrinsicSize.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 64);
}

uint64_t CoverViewModel.isRTL.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 80);
}

double CoverViewModel.aspectRatio.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 88);
}

uint64_t CoverViewModel.axCoverProperties.getter@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = v1[14];
  v3 = v1[15];
  v4 = v1[16];
  v5 = v1[17];
  v6 = v1[18];
  v7 = v1[19];
  v8 = v1[20];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = v6;
  a1[5] = v7;
  a1[6] = v8;
  return sub_ABBF4(v2, v3, v4, v5, v6, v7, v8);
}

uint64_t PageUpdateInstruction.ShelfHeaderFooterUpdateDescriptor.shelfID.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 48));
  return v1;
}

uint64_t CoverViewModel.placeholderImageName.getter()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t result;
  _QWORD v6[3];
  uint64_t v7;
  uint64_t v8;
  __int128 v9[3];
  char v10;

  v1 = 0xD00000000000001ALL;
  sub_C4354(v0, (uint64_t)v9);
  if (v10)
  {
    if (v10 == 1)
      return 0xD00000000000001BLL;
    return v1;
  }
  sub_AC68(v9, (uint64_t)v6);
  v2 = v7;
  v3 = v8;
  sub_5480(v6, v7);
  v4 = dispatch thunk of AssetInfo.assetType.getter(v2, v3);
  if (!v4)
  {
    _s7BooksUI13AnyPagedFrameVwxx_0(v6);
    return 0xD00000000000001BLL;
  }
  if (v4 == 1)
  {
    _s7BooksUI13AnyPagedFrameVwxx_0(v6);
    return v1;
  }
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000020, 0x80000000001FBBD0, "BooksUI/CoverViewModel.swift", 28, 2, 99, 0);
  __break(1u);
  return result;
}

uint64_t sub_C4AE0@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 104);
  *a1 = *(_QWORD *)(v1 + 96);
  a1[1] = v2;
  return swift_bridgeObjectRetain(v2);
}

uint64_t _s7BooksUI14CoverViewModelV5StyleO2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  double v4;
  double v5;
  double v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  char v19;
  _QWORD v21[3];
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[3];
  uint64_t v25;
  uint64_t v26;
  __int128 v27[2];
  double v28;
  double v29;
  _BYTE v30[56];
  char v31;
  __int128 v32[2];
  double v33;
  double v34;
  char v35;

  sub_C4354(a1, (uint64_t)v30);
  sub_C4354(a2, (uint64_t)v32);
  if (!v31)
  {
    sub_C4354((uint64_t)v30, (uint64_t)v27);
    if (v35)
    {
      _s7BooksUI13AnyPagedFrameVwxx_0(v27);
      goto LABEL_9;
    }
    v5 = v28;
    v4 = v29;
    v7 = v33;
    v6 = v34;
    sub_AC68(v27, (uint64_t)v24);
    sub_AC68(v32, (uint64_t)v21);
    v8 = v25;
    v9 = v26;
    sub_5480(v24, v25);
    v10 = ContentInfo.id.getter(v8, *(_QWORD *)(v9 + 8));
    v12 = v11;
    v13 = v22;
    v14 = v23;
    sub_5480(v21, v22);
    v15 = ContentInfo.id.getter(v13, *(_QWORD *)(v14 + 8));
    if (v10 == v15 && v12 == v16)
    {
      swift_bridgeObjectRelease_n(v12, 2);
      if (v5 != v7)
      {
        v3 = 0;
        goto LABEL_20;
      }
    }
    else
    {
      v18 = v16;
      v19 = _stringCompareWithSmolCheck(_:_:expecting:)(v10, v12, v15, v16, 0);
      swift_bridgeObjectRelease(v12);
      swift_bridgeObjectRelease(v18);
      v3 = 0;
      if ((v19 & 1) == 0 || v5 != v7)
        goto LABEL_20;
    }
    v3 = v4 == v6;
LABEL_20:
    _s7BooksUI13AnyPagedFrameVwxx_0(v21);
    _s7BooksUI13AnyPagedFrameVwxx_0(v24);
    goto LABEL_21;
  }
  if (v31 == 1)
  {
    sub_C4354((uint64_t)v30, (uint64_t)v27);
    if (v35 == 1)
    {
      v3 = *(double *)v27 == *(double *)v32;
LABEL_21:
      sub_C4388((uint64_t)v30);
      return v3;
    }
  }
  else
  {
    sub_C4354((uint64_t)v30, (uint64_t)v27);
    if (v35 == 2)
    {
      v3 = (*(double *)v27 == *(double *)v32) & (BYTE8(v27[0]) ^ BYTE8(v32[0]) ^ 1u);
      goto LABEL_21;
    }
  }
LABEL_9:
  sub_B414((uint64_t)v30, &qword_263F60);
  return 0;
}

uint64_t _s7BooksUI14CoverViewModelV013AccessibilityC10PropertiesV2eeoiySbAE_AEtFZ_0(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t result;
  char v19;

  v4 = *a1;
  v5 = a1[1];
  v6 = a1[2];
  v7 = a1[3];
  v8 = *((unsigned __int8 *)a1 + 32);
  v9 = a1[5];
  v10 = a1[6];
  v11 = *(_QWORD *)(a2 + 8);
  v12 = *(_QWORD *)(a2 + 16);
  v13 = *(_QWORD *)(a2 + 24);
  v14 = *(unsigned __int8 *)(a2 + 32);
  v16 = *(_QWORD *)(a2 + 40);
  v15 = *(_QWORD *)(a2 + 48);
  if (v4 == *(_QWORD *)a2 && v5 == v11
    || (v17 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *(_QWORD *)a2, v11, 0), result = 0, (v17 & 1) != 0))
  {
    if (v6 == v12 && v7 == v13)
    {
      if (v8 != v14)
        return 0;
LABEL_10:
      if (v10)
      {
        if (!v15
          || (v9 != v16 || v10 != v15) && (_stringCompareWithSmolCheck(_:_:expecting:)(v9, v10, v16, v15, 0) & 1) == 0)
        {
          return 0;
        }
      }
      else if (v15)
      {
        return 0;
      }
      return 1;
    }
    v19 = _stringCompareWithSmolCheck(_:_:expecting:)(v6, v7, v12, v13, 0);
    result = 0;
    if ((v19 & 1) != 0 && ((v8 ^ v14) & 1) == 0)
      goto LABEL_10;
  }
  return result;
}

BOOL _s7BooksUI14CoverViewModelV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  _BOOL8 result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[4];
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  if ((_s7BooksUI14CoverViewModelV5StyleO2eeoiySbAE_AEtFZ_0(a1, a2) & 1) == 0)
    return 0;
  v4 = *(double *)(a1 + 64) == *(double *)(a2 + 64) && *(double *)(a1 + 72) == *(double *)(a2 + 72);
  if (!v4
    || *(unsigned __int8 *)(a1 + 80) != *(unsigned __int8 *)(a2 + 80)
    || *(double *)(a1 + 88) != *(double *)(a2 + 88))
  {
    return 0;
  }
  v5 = *(_QWORD *)(a1 + 96);
  v6 = *(_QWORD *)(a1 + 104);
  v7 = *(_QWORD *)(a2 + 96);
  v8 = *(_QWORD *)(a2 + 104);
  if (v5 == v7 && v6 == v8
    || (v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v6, v7, v8, 0), result = 0, (v9 & 1) != 0))
  {
    v11 = *(_QWORD *)(a1 + 112);
    v12 = *(_QWORD *)(a1 + 120);
    v14 = *(_QWORD *)(a1 + 128);
    v13 = *(_QWORD *)(a1 + 136);
    v15 = *(_QWORD *)(a1 + 144);
    v16 = *(_QWORD *)(a1 + 152);
    v17 = *(_QWORD *)(a1 + 160);
    v19 = *(_QWORD *)(a2 + 112);
    v18 = *(_QWORD *)(a2 + 120);
    v21 = *(_QWORD *)(a2 + 128);
    v20 = *(_QWORD *)(a2 + 136);
    v23 = *(_QWORD *)(a2 + 144);
    v22 = *(_QWORD *)(a2 + 152);
    v24 = *(_QWORD *)(a2 + 160);
    if (v12)
    {
      v40 = v11;
      v41 = v12;
      v42 = v14;
      v43 = v13;
      v44 = v15;
      v45 = v16;
      v46 = v17;
      v25 = v13;
      if (v18)
      {
        v36[0] = v19;
        v36[1] = v18;
        v36[2] = v21;
        v36[3] = v20;
        v37 = v23 & 1;
        v38 = v22;
        v39 = v24;
        v26 = _s7BooksUI14CoverViewModelV013AccessibilityC10PropertiesV2eeoiySbAE_AEtFZ_0(&v40, (uint64_t)v36);
        v27 = v41;
        v28 = v43;
        v29 = v46;
        swift_bridgeObjectRetain(v17);
        swift_bridgeObjectRetain(v12);
        swift_bridgeObjectRetain(v25);
        swift_bridgeObjectRelease(v28);
        swift_bridgeObjectRelease(v27);
        swift_bridgeObjectRelease(v29);
        return (v26 & 1) != 0;
      }
      v32 = v15;
      v33 = v14;
      v34 = v11;
      v31 = v22;
      swift_bridgeObjectRetain(v12);
      v35 = v25;
      swift_bridgeObjectRetain(v25);
      swift_bridgeObjectRetain(v17);
      v22 = v31;
    }
    else
    {
      v32 = v15;
      v33 = v14;
      v34 = v11;
      v35 = v13;
      if (!v18)
        return 1;
    }
    v30 = v22;
    sub_ABBF4(v19, v18, v21, v20, v23, v22, v24);
    sub_ABC30(v34, v12, v33, v35, v32, v16, v17);
    sub_ABC30(v19, v18, v21, v20, v23, v30, v24);
    return 0;
  }
  return result;
}

uint64_t destroy for CoverViewModel(uint64_t a1)
{
  uint64_t result;

  if (!*(_BYTE *)(a1 + 56))
    _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)a1);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 104));
  result = *(_QWORD *)(a1 + 120);
  if (result)
  {
    swift_bridgeObjectRelease(result);
    swift_bridgeObjectRelease(*(_QWORD *)(a1 + 136));
    return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 160));
  }
  return result;
}

uint64_t initializeWithCopy for CoverViewModel(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;

  if (*(_BYTE *)(a2 + 56))
  {
    v4 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v4;
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 24) = v5;
    (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1, a2);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_BYTE *)(a1 + 56) = 0;
  }
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  v6 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 104) = v6;
  v7 = *(_QWORD *)(a2 + 120);
  swift_bridgeObjectRetain(v6);
  if (v7)
  {
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
    *(_QWORD *)(a1 + 120) = v7;
    v8 = *(_QWORD *)(a2 + 136);
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
    *(_QWORD *)(a1 + 136) = v8;
    *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
    v9 = *(_QWORD *)(a2 + 152);
    v10 = *(_QWORD *)(a2 + 160);
    *(_QWORD *)(a1 + 152) = v9;
    *(_QWORD *)(a1 + 160) = v10;
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v10);
  }
  else
  {
    v11 = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 128) = v11;
    *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
    *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  }
  return a1;
}

uint64_t assignWithCopy for CoverViewModel(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD *v10;
  __int128 *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;

  if ((__int128 *)a1 != a2)
  {
    sub_C4388(a1);
    if (*((_BYTE *)a2 + 56))
    {
      v4 = *a2;
      v5 = a2[1];
      v6 = a2[2];
      *(_OWORD *)(a1 + 41) = *(__int128 *)((char *)a2 + 41);
      *(_OWORD *)(a1 + 16) = v5;
      *(_OWORD *)(a1 + 32) = v6;
      *(_OWORD *)a1 = v4;
    }
    else
    {
      v7 = *((_QWORD *)a2 + 3);
      *(_QWORD *)(a1 + 24) = v7;
      *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
      (**(void (***)(uint64_t, __int128 *))(v7 - 8))(a1, a2);
      *(_OWORD *)(a1 + 40) = *(__int128 *)((char *)a2 + 40);
      *(_BYTE *)(a1 + 56) = 0;
    }
  }
  *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
  *(_QWORD *)(a1 + 72) = *((_QWORD *)a2 + 9);
  *(_BYTE *)(a1 + 80) = *((_BYTE *)a2 + 80);
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 11);
  *(_QWORD *)(a1 + 96) = *((_QWORD *)a2 + 12);
  v8 = *((_QWORD *)a2 + 13);
  v9 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 104) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  v10 = (_OWORD *)(a1 + 112);
  v11 = a2 + 7;
  v12 = *(_QWORD *)(a1 + 120);
  v13 = *((_QWORD *)a2 + 15);
  if (v12)
  {
    if (v13)
    {
      *(_QWORD *)(a1 + 112) = *((_QWORD *)a2 + 14);
      v14 = *((_QWORD *)a2 + 15);
      *(_QWORD *)(a1 + 120) = v14;
      swift_bridgeObjectRetain(v14);
      swift_bridgeObjectRelease(v12);
      *(_QWORD *)(a1 + 128) = *((_QWORD *)a2 + 16);
      v15 = *((_QWORD *)a2 + 17);
      v16 = *(_QWORD *)(a1 + 136);
      *(_QWORD *)(a1 + 136) = v15;
      swift_bridgeObjectRetain(v15);
      swift_bridgeObjectRelease(v16);
      *(_BYTE *)(a1 + 144) = *((_BYTE *)a2 + 144);
      *(_QWORD *)(a1 + 152) = *((_QWORD *)a2 + 19);
      v17 = *((_QWORD *)a2 + 20);
      v18 = *(_QWORD *)(a1 + 160);
      *(_QWORD *)(a1 + 160) = v17;
      swift_bridgeObjectRetain(v17);
      swift_bridgeObjectRelease(v18);
    }
    else
    {
      sub_C5344((_QWORD *)(a1 + 112));
      v23 = a2[8];
      v22 = a2[9];
      v24 = *v11;
      *(_QWORD *)(a1 + 160) = *((_QWORD *)a2 + 20);
      *(_OWORD *)(a1 + 128) = v23;
      *(_OWORD *)(a1 + 144) = v22;
      *v10 = v24;
    }
  }
  else if (v13)
  {
    *(_QWORD *)(a1 + 112) = *((_QWORD *)a2 + 14);
    v19 = *((_QWORD *)a2 + 15);
    *(_QWORD *)(a1 + 120) = v19;
    *(_QWORD *)(a1 + 128) = *((_QWORD *)a2 + 16);
    v20 = *((_QWORD *)a2 + 17);
    *(_QWORD *)(a1 + 136) = v20;
    *(_BYTE *)(a1 + 144) = *((_BYTE *)a2 + 144);
    *(_QWORD *)(a1 + 152) = *((_QWORD *)a2 + 19);
    v21 = *((_QWORD *)a2 + 20);
    *(_QWORD *)(a1 + 160) = v21;
    swift_bridgeObjectRetain(v19);
    swift_bridgeObjectRetain(v20);
    swift_bridgeObjectRetain(v21);
  }
  else
  {
    v25 = *v11;
    v26 = a2[8];
    v27 = a2[9];
    *(_QWORD *)(a1 + 160) = *((_QWORD *)a2 + 20);
    *(_OWORD *)(a1 + 128) = v26;
    *(_OWORD *)(a1 + 144) = v27;
    *v10 = v25;
  }
  return a1;
}

_QWORD *sub_C5344(_QWORD *a1)
{
  destroy for CoverViewModel.AccessibilityCoverProperties(a1);
  return a1;
}

__n128 initializeWithTake for CoverViewModel(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __n128 result;
  __int128 v8;
  __int128 v9;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  v4 = a2[3];
  v5 = a2[4];
  v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  result = (__n128)a2[7];
  v8 = a2[8];
  v9 = a2[9];
  *(_QWORD *)(a1 + 160) = *((_QWORD *)a2 + 20);
  *(_OWORD *)(a1 + 128) = v8;
  *(_OWORD *)(a1 + 144) = v9;
  *(__n128 *)(a1 + 112) = result;
  return result;
}

uint64_t assignWithTake for CoverViewModel(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;

  if (a1 != a2)
  {
    sub_C4388(a1);
    v4 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v4;
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
  }
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  v5 = *(_QWORD *)(a2 + 104);
  v6 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v5;
  swift_bridgeObjectRelease(v6);
  v7 = *(_QWORD *)(a1 + 120);
  if (!v7)
    goto LABEL_7;
  v8 = *(_QWORD *)(a2 + 120);
  if (!v8)
  {
    sub_C5344((_QWORD *)(a1 + 112));
LABEL_7:
    v13 = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 128) = v13;
    *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
    *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
    return a1;
  }
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v8;
  swift_bridgeObjectRelease(v7);
  v9 = *(_QWORD *)(a2 + 136);
  v10 = *(_QWORD *)(a1 + 136);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = v9;
  swift_bridgeObjectRelease(v10);
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  v11 = *(_QWORD *)(a2 + 160);
  v12 = *(_QWORD *)(a1 + 160);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = v11;
  swift_bridgeObjectRelease(v12);
  return a1;
}

uint64_t getEnumTagSinglePayload for CoverViewModel(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 168))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 104);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CoverViewModel(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 168) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 104) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 168) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for CoverViewModel()
{
  return &type metadata for CoverViewModel;
}

uint64_t destroy for CoverViewModel.AccessibilityCoverProperties(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  return swift_bridgeObjectRelease(a1[6]);
}

uint64_t initializeWithCopy for CoverViewModel.AccessibilityCoverProperties(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v5;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

uint64_t assignWithCopy for CoverViewModel.AccessibilityCoverProperties(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v8 = *(_QWORD *)(a2 + 48);
  v9 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  return a1;
}

uint64_t assignWithTake for CoverViewModel.AccessibilityCoverProperties(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 48);
  v9 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v8;
  swift_bridgeObjectRelease(v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for CoverViewModel.AccessibilityCoverProperties(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 56))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CoverViewModel.AccessibilityCoverProperties(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 56) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for CoverViewModel.AccessibilityCoverProperties()
{
  return &type metadata for CoverViewModel.AccessibilityCoverProperties;
}

_QWORD *destroy for CoverViewModel.Style(_QWORD *a1)
{
  unsigned int v1;

  v1 = *((unsigned __int8 *)a1 + 56);
  if (v1 >= 3)
    v1 = *(_DWORD *)a1 + 3;
  if (!v1)
    return (_QWORD *)_s7BooksUI13AnyPagedFrameVwxx_0(a1);
  return a1;
}

uint64_t initializeWithCopy for CoverViewModel.Style(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  char v5;
  __int128 v6;

  v4 = *(unsigned __int8 *)(a2 + 56);
  if (v4 >= 3)
    v4 = *(_DWORD *)a2 + 3;
  if (v4 == 2)
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
    v5 = 2;
  }
  else if (v4 == 1)
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    v5 = 1;
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 24) = v6;
    (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1, a2);
    v5 = 0;
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  }
  *(_BYTE *)(a1 + 56) = v5;
  return a1;
}

uint64_t assignWithCopy for CoverViewModel.Style(uint64_t a1, uint64_t *a2)
{
  unsigned int v4;
  unsigned int v5;
  char v6;
  uint64_t v7;
  uint64_t v8;

  if ((uint64_t *)a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 56);
    if (v4 >= 3)
      v4 = *(_DWORD *)a1 + 3;
    if (!v4)
      _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)a1);
    v5 = *((unsigned __int8 *)a2 + 56);
    if (v5 >= 3)
      v5 = *(_DWORD *)a2 + 3;
    if (v5 == 2)
    {
      v7 = *a2;
      *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
      *(_QWORD *)a1 = v7;
      v6 = 2;
    }
    else if (v5 == 1)
    {
      *(_QWORD *)a1 = *a2;
      v6 = 1;
    }
    else
    {
      v8 = a2[3];
      *(_QWORD *)(a1 + 24) = v8;
      *(_QWORD *)(a1 + 32) = a2[4];
      (**(void (***)(uint64_t, uint64_t *))(v8 - 8))(a1, a2);
      v6 = 0;
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 5);
    }
    *(_BYTE *)(a1 + 56) = v6;
  }
  return a1;
}

uint64_t assignWithTake for CoverViewModel.Style(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  char v6;
  __int128 v7;

  if (a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 56);
    if (v4 >= 3)
      v4 = *(_DWORD *)a1 + 3;
    if (!v4)
      _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)a1);
    v5 = *(unsigned __int8 *)(a2 + 56);
    if (v5 >= 3)
      v5 = *(_DWORD *)a2 + 3;
    if (v5 == 2)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
      v6 = 2;
    }
    else if (v5 == 1)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v6 = 1;
    }
    else
    {
      v6 = 0;
      v7 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v7;
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    }
    *(_BYTE *)(a1 + 56) = v6;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for CoverViewModel.Style(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 57))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 56);
  if (v3 >= 3)
    return (v3 ^ 0xFF) + 1;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for CoverViewModel.Style(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_OWORD *)(result + 41) = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)result = 0u;
    *(_DWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 57) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 57) = 0;
    if (a2)
      *(_BYTE *)(result + 56) = -(char)a2;
  }
  return result;
}

uint64_t sub_C5A48(uint64_t a1)
{
  uint64_t result;

  result = *(unsigned __int8 *)(a1 + 56);
  if (result >= 3)
    return (*(_DWORD *)a1 + 3);
  return result;
}

uint64_t sub_C5A64(uint64_t result, unsigned int a2)
{
  if (a2 > 2)
  {
    *(_QWORD *)(result + 48) = 0;
    *(_OWORD *)(result + 16) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)result = 0u;
    *(_DWORD *)result = a2 - 3;
    LOBYTE(a2) = 3;
  }
  *(_BYTE *)(result + 56) = a2;
  return result;
}

ValueMetadata *type metadata accessor for CoverViewModel.Style()
{
  return &type metadata for CoverViewModel.Style;
}

uint64_t sub_C5AA0(char a1, unsigned __int8 a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  int v5;
  unint64_t v6;
  char v7;

  v2 = 1953394534;
  if (a1)
  {
    if (a1 == 1)
      v3 = 0x80000000001F9650;
    else
      v3 = 0x80000000001F9670;
    v4 = 0xD000000000000012;
    v5 = a2;
    if (a2)
    {
LABEL_6:
      if (v5 == 1)
        v6 = 0x80000000001F9650;
      else
        v6 = 0x80000000001F9670;
      v2 = 0xD000000000000012;
      if (v4 != 0xD000000000000012)
        goto LABEL_15;
      goto LABEL_13;
    }
  }
  else
  {
    v3 = 0xE400000000000000;
    v4 = 1953394534;
    v5 = a2;
    if (a2)
      goto LABEL_6;
  }
  v6 = 0xE400000000000000;
  if (v4 != 1953394534)
  {
LABEL_15:
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v3, v2, v6, 0);
    goto LABEL_16;
  }
LABEL_13:
  if (v3 != v6)
    goto LABEL_15;
  v7 = 1;
  v6 = v3;
LABEL_16:
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

void sub_C5B90(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_C5BD8(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_C5C2C + 4 * byte_1E8EE4[a2]))(1702521203);
}

uint64_t sub_C5C2C(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 1702521203 && v1 == 0xE400000000000000)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 1702521203, 0xE400000000000000, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xE400000000000000);
  return v2 & 1;
}

uint64_t sub_C5CC4(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x69746E6575716573;
  else
    v3 = 0x64695F737469;
  if (v2)
    v4 = 0xE600000000000000;
  else
    v4 = 0xEA00000000006C61;
  if ((a2 & 1) != 0)
    v5 = 0x69746E6575716573;
  else
    v5 = 0x64695F737469;
  if ((a2 & 1) != 0)
    v6 = 0xEA00000000006C61;
  else
    v6 = 0xE600000000000000;
  if (v3 == v5 && v4 == v6)
  {
    v7 = 1;
    v6 = v4;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v5, v6, 0);
  }
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

uint64_t sub_C5D68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  char v7;

  v0 = Metrics.ClickActionType.rawValue.getter();
  v2 = v1;
  v3 = Metrics.ClickActionType.rawValue.getter();
  if (v0 == v3 && v2 == v4)
  {
    v7 = 1;
    v6 = v2;
  }
  else
  {
    v6 = v4;
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v0, v2, v3, v4, 0);
  }
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

void sub_C5DFC(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_C5E3C(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_C5EAC + 4 * byte_1E8EEE[a2]))(0x64726177726F66);
}

uint64_t sub_C5EAC(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x64726177726F66 && v1 == 0xE700000000000000)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x64726177726F66, 0xE700000000000000, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xE700000000000000);
  return v2 & 1;
}

void sub_C5F6C(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_C5FB4(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_C606C + 4 * byte_1E8EFD[a2]))(0x7265746C6966);
}

uint64_t sub_C606C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  if (a1 == 0x7265746C6966 && v1 == v2)
  {
    v3 = 1;
    v2 = v1;
  }
  else
  {
    v3 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x7265746C6966, v2, 0);
  }
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(v2);
  return v3 & 1;
}

void sub_C618C(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_C61D4(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_C6260 + 4 * byte_1E8F0D[a2]))(0x6E6D756C6F63);
}

uint64_t sub_C6260(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  if (a1 == 0x6E6D756C6F63 && v1 == v2)
  {
    v3 = 1;
    v2 = v1;
  }
  else
  {
    v3 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x6E6D756C6F63, v2, 0);
  }
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(v2);
  return v3 & 1;
}

void sub_C6344(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_C638C(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_C640C + 4 * byte_1E8F1A[a2]))(0x6954656C62627562);
}

uint64_t sub_C640C(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x6954656C62627562 && v1 == 0xE900000000000070)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x6954656C62627562, 0xE900000000000070, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xE900000000000070);
  return v2 & 1;
}

uint64_t sub_C64DC(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x7472656C61;
  else
    v3 = 0x68536E6F69746361;
  if (v2)
    v4 = 0xEB00000000746565;
  else
    v4 = 0xE500000000000000;
  if ((a2 & 1) != 0)
    v5 = 0x7472656C61;
  else
    v5 = 0x68536E6F69746361;
  if ((a2 & 1) != 0)
    v6 = 0xE500000000000000;
  else
    v6 = 0xEB00000000746565;
  if (v3 == v5 && v4 == v6)
  {
    v7 = 1;
    v6 = v4;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v5, v6, 0);
  }
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

uint64_t sub_C6584(char a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  if ((a1 & 1) != 0)
    v2 = 1635017060;
  else
    v2 = 1684957547;
  if ((a2 & 1) != 0)
    v3 = 1635017060;
  else
    v3 = 1684957547;
  if (v2 == v3)
    v4 = 1;
  else
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)(v2, 0xE400000000000000, v3, 0xE400000000000000, 0);
  swift_bridgeObjectRelease_n(0xE400000000000000, 2);
  return v4 & 1;
}

void sub_C65F0(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_C6630(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_C66C8 + 4 * byte_1E8F25[a2]))(0x656C746974627573);
}

uint64_t sub_C66C8(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x656C746974627573 && v1 == 0xE800000000000000)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x656C746974627573, 0xE800000000000000, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xE800000000000000);
  return v2 & 1;
}

uint64_t sub_C67A8(unsigned __int8 a1, unsigned __int8 a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  unint64_t v5;
  int v6;
  unint64_t v7;
  char v8;

  v2 = 0x656C67676F74;
  v3 = a1;
  if (a1)
  {
    if (a1 == 1)
      v4 = 0x6E694C6572616873;
    else
      v4 = 0x6E6F74747562;
    if (v3 == 1)
      v5 = 0xE90000000000006BLL;
    else
      v5 = 0xE600000000000000;
    v6 = a2;
    if (a2)
    {
LABEL_9:
      if (v6 == 1)
        v2 = 0x6E694C6572616873;
      else
        v2 = 0x6E6F74747562;
      if (v6 == 1)
        v7 = 0xE90000000000006BLL;
      else
        v7 = 0xE600000000000000;
      if (v4 != v2)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v5 = 0xE600000000000000;
    v4 = 0x656C67676F74;
    v6 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xE600000000000000;
  if (v4 != 0x656C67676F74)
  {
LABEL_21:
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, v2, v7, 0);
    goto LABEL_22;
  }
LABEL_19:
  if (v5 != v7)
    goto LABEL_21;
  v8 = 1;
  v7 = v5;
LABEL_22:
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v7);
  return v8 & 1;
}

uint64_t sub_C68B8(char a1, char a2)
{
  BOOL v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0xD00000000000001ELL;
  else
    v3 = 1701736302;
  if (v2)
    v4 = 0xE400000000000000;
  else
    v4 = 0x80000000001F97B0;
  if ((a2 & 1) != 0)
    v5 = 0xD00000000000001ELL;
  else
    v5 = 1701736302;
  if ((a2 & 1) != 0)
    v6 = 0x80000000001F97B0;
  else
    v6 = 0xE400000000000000;
  if (v3 == v5 && v4 == v6)
  {
    v7 = 1;
    v6 = v4;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v5, v6, 0);
  }
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

void sub_C6958(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_C69B4(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_C6A24 + 4 * byte_1E8F2E[a2]))(0xD000000000000012);
}

uint64_t sub_C6A24(uint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  char v3;

  v2 = 0x80000000001F94E0;
  if (a1 == 0xD000000000000012 && v1 == 0x80000000001F94E0)
  {
    v3 = 1;
    v2 = v1;
  }
  else
  {
    v3 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0xD000000000000012, 0x80000000001F94E0, 0);
  }
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(v2);
  return v3 & 1;
}

void sub_C6ADC(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_C6B2C(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_C6BD4 + 4 * byte_1E8F38[a2]))(0x656372756F736572);
}

uint64_t sub_C6BD4(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x656372756F736572 && v1 == 0xE800000000000000)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x656372756F736572, 0xE800000000000000, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xE800000000000000);
  return v2 & 1;
}

void sub_C6CCC(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_C6D14(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_C6DE8 + 4 * byte_1E8F46[a2]))(0x656C746974627573);
}

uint64_t sub_C6DE8(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x656C746974627573 && v1 == 0xE800000000000000)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x656C746974627573, 0xE800000000000000, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xE800000000000000);
  return v2 & 1;
}

void sub_C6F1C(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_C6F80(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_C7030 + 4 * byte_1E8F54[a2]))(0x69576E6F74747562);
}

uint64_t sub_C7030(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x69576E6F74747562 && v1 == 0xEF6567616D496874)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x69576E6F74747562, 0xEF6567616D496874, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xEF6567616D496874);
  return v2 & 1;
}

uint64_t sub_C7128(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x72756769666E6F63;
  else
    v3 = 1684957547;
  if (v2)
    v4 = 0xE400000000000000;
  else
    v4 = 0xED00006E6F697461;
  if ((a2 & 1) != 0)
    v5 = 0x72756769666E6F63;
  else
    v5 = 1684957547;
  if ((a2 & 1) != 0)
    v6 = 0xED00006E6F697461;
  else
    v6 = 0xE400000000000000;
  if (v3 == v5 && v4 == v6)
  {
    v7 = 1;
    v6 = v4;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v5, v6, 0);
  }
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

void sub_C71D0(char a1)
{
  __asm { BR              X11 }
}

uint64_t sub_C721C(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_C72DC + 4 * byte_1E8F62[a2]))(0x72616D6B63656863);
}

uint64_t sub_C72DC(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x72616D6B63656863 && v1 == 0xE90000000000006BLL)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x72616D6B63656863, 0xE90000000000006BLL, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xE90000000000006BLL);
  return v2 & 1;
}

uint64_t sub_C73D0(unsigned __int8 a1, unsigned __int8 a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  unint64_t v5;
  int v6;
  unint64_t v7;
  char v8;

  v2 = 0x746867696ELL;
  v3 = a1;
  if (a1)
  {
    if (a1 == 1)
      v4 = 0;
    else
      v4 = 0x646168536B726164;
    if (v3 == 1)
      v5 = 0xE000000000000000;
    else
      v5 = 0xEA0000000000776FLL;
    v6 = a2;
    if (a2)
    {
LABEL_9:
      if (v6 == 1)
        v2 = 0;
      else
        v2 = 0x646168536B726164;
      if (v6 == 1)
        v7 = 0xE000000000000000;
      else
        v7 = 0xEA0000000000776FLL;
      if (v4 != v2)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v5 = 0xE500000000000000;
    v4 = 0x746867696ELL;
    v6 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xE500000000000000;
  if (v4 != 0x746867696ELL)
  {
LABEL_21:
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, v2, v7, 0);
    goto LABEL_22;
  }
LABEL_19:
  if (v5 != v7)
    goto LABEL_21;
  v8 = 1;
  v7 = v5;
LABEL_22:
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v7);
  return v8 & 1;
}

uint64_t sub_C74C8(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x6F666E4964726163;
  else
    v3 = 0x536472614377656ELL;
  if (v2)
    v4 = 0xEA00000000007465;
  else
    v4 = 0xE800000000000000;
  if ((a2 & 1) != 0)
    v5 = 0x6F666E4964726163;
  else
    v5 = 0x536472614377656ELL;
  if ((a2 & 1) != 0)
    v6 = 0xE800000000000000;
  else
    v6 = 0xEA00000000007465;
  if (v3 == v5 && v4 == v6)
  {
    v7 = 1;
    v6 = v4;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v5, v6, 0);
  }
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

uint64_t sub_C7570(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x4164657375636F66;
  else
    v3 = 0x536472614377656ELL;
  if (v2)
    v4 = 0xEA00000000007465;
  else
    v4 = 0xED000044496D6164;
  if ((a2 & 1) != 0)
    v5 = 0x4164657375636F66;
  else
    v5 = 0x536472614377656ELL;
  if ((a2 & 1) != 0)
    v6 = 0xED000044496D6164;
  else
    v6 = 0xEA00000000007465;
  if (v3 == v5 && v4 == v6)
  {
    v7 = 1;
    v6 = v4;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v5, v6, 0);
  }
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

uint64_t sub_C7624(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x736E6F6974706FLL;
  else
    v3 = 1684366694;
  if (v2)
    v4 = 0xE400000000000000;
  else
    v4 = 0xE700000000000000;
  if ((a2 & 1) != 0)
    v5 = 0x736E6F6974706FLL;
  else
    v5 = 1684366694;
  if ((a2 & 1) != 0)
    v6 = 0xE700000000000000;
  else
    v6 = 0xE400000000000000;
  if (v3 == v5 && v4 == v6)
  {
    v7 = 1;
    v6 = v4;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v5, v6, 0);
  }
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

void sub_C76C0(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_C7708(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_C7758 + 4 * byte_1E8F6E[a2]))(0x7265746F6F66);
}

uint64_t sub_C7758(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  if (a1 == 0x7265746F6F66 && v1 == v2)
  {
    v3 = 1;
    v2 = v1;
  }
  else
  {
    v3 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x7265746F6F66, v2, 0);
  }
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(v2);
  return v3 & 1;
}

uint64_t EmptyAction.init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v5;

  v0 = type metadata accessor for ActionMetrics(0);
  v1 = __chkstk_darwin(v0);
  v3 = (char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  static ActionMetrics.notInstrumented.getter(v1);
  return EmptyAction.init(actionMetrics:)(v3);
}

uint64_t Models.FlowBackAction.clickData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  v2 = type metadata accessor for ClickData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(a1, 1, 1, v2);
}

uint64_t ClosureAction.clickData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char v24;

  v22 = a1;
  v1 = type metadata accessor for LinkActionType(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for ClickData.TargetType(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ActionMetrics(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  ClosureAction.actionMetrics.getter(v11);
  sub_122E40(&v24);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  if (v24 != 34)
  {
    v23 = v24;
    v15 = Metrics.ClickActionType.rawValue.getter();
    v17 = v16;
    if (v15 == 0x64616F6C6572 && v16 == 0xE600000000000000)
    {
      swift_bridgeObjectRelease(0xE600000000000000);
      v14 = v22;
    }
    else
    {
      v18 = _stringCompareWithSmolCheck(_:_:expecting:)(v15, v16, 0x64616F6C6572, 0xE600000000000000, 0);
      swift_bridgeObjectRelease(v17);
      v14 = v22;
      if ((v18 & 1) == 0)
        goto LABEL_8;
    }
    (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v8, enum case for ClickData.TargetType.reload(_:), v5);
    (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, enum case for LinkActionType.click(_:), v1);
    ClickData.init(with:linkActionType:index:url:)(v8, v4, 0, 0, 0);
    v19 = type metadata accessor for ClickData(0);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v14, 0, 1, v19);
  }
  v14 = v22;
LABEL_8:
  v21 = type metadata accessor for ClickData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v14, 1, 1, v21);
}

uint64_t CompoundAction.clickData.getter@<X0>(char *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t);
  uint64_t v29;
  uint64_t (*v30)(char *, uint64_t, uint64_t);
  int v31;
  uint64_t result;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(char *, uint64_t, uint64_t);
  char *v43;
  char *v44;
  char *v45;
  char *v46;
  char *v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  _BYTE v52[40];
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  _QWORD v56[6];

  v49 = a1;
  v1 = type metadata accessor for ClickData(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v45 = (char *)&v45 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_5440(&qword_25E828);
  v5 = __chkstk_darwin(v4);
  v48 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v5);
  v46 = (char *)&v45 - v8;
  v9 = __chkstk_darwin(v7);
  v47 = (char *)&v45 - v10;
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v45 - v12;
  v14 = CompoundAction.subactions.getter(v11);
  v15 = v14;
  v16 = *(_QWORD *)(v14 + 16);
  if (!v16)
    goto LABEL_10;
  v17 = 0;
  v18 = v14 + 32;
  while (1)
  {
    sub_BD00(v18, (uint64_t)v56);
    sub_BD00((uint64_t)v56, (uint64_t)v52);
    swift_bridgeObjectRetain(v15);
    v19 = sub_5440(&qword_25E848);
    v20 = sub_5440(&qword_25E850);
    v21 = swift_dynamicCast(&v53, v52, v19, v20, 6);
    v50 = v20;
    v51 = v19;
    if (v21)
    {
      v22 = v16;
      v23 = v15;
      v24 = v2;
      v25 = v1;
      v26 = *((_QWORD *)&v54 + 1);
      v27 = v55;
      sub_5480(&v53, *((uint64_t *)&v54 + 1));
      v28 = *(void (**)(uint64_t, uint64_t))(v27 + 16);
      v29 = v27;
      v1 = v25;
      v2 = v24;
      v15 = v23;
      v16 = v22;
      v28(v26, v29);
      _s7BooksUI13AnyPagedFrameVwxx_0(&v53);
    }
    else
    {
      v55 = 0;
      v53 = 0u;
      v54 = 0u;
      sub_B414((uint64_t)&v53, &qword_25E840);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v2 + 56))(v13, 1, 1, v1);
    }
    _s7BooksUI13AnyPagedFrameVwxx_0(v56);
    swift_bridgeObjectRelease(v15);
    v30 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v2 + 48);
    v31 = v30(v13, 1, v1);
    result = sub_B414((uint64_t)v13, &qword_25E828);
    if (v31 != 1)
      break;
    ++v17;
    v18 += 40;
    if (v16 == v17)
      goto LABEL_10;
  }
  if (v16 == v17)
  {
LABEL_10:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v2 + 56))(v49, 1, 1, v1);
    return swift_bridgeObjectRelease(v15);
  }
  if (v17 >= *(_QWORD *)(v15 + 16))
  {
    __break(1u);
  }
  else
  {
    sub_BD00(v18, (uint64_t)v56);
    sub_BD00((uint64_t)v56, (uint64_t)v52);
    if (swift_dynamicCast(&v53, v52, v51, v50, 6))
    {
      v33 = v2;
      v34 = v1;
      v35 = *((_QWORD *)&v54 + 1);
      v36 = v55;
      sub_5480(&v53, *((uint64_t *)&v54 + 1));
      v37 = *(void (**)(uint64_t, uint64_t))(v36 + 16);
      v38 = (uint64_t)v46;
      v39 = v36;
      v1 = v34;
      v2 = v33;
      v37(v35, v39);
      _s7BooksUI13AnyPagedFrameVwxx_0(&v53);
    }
    else
    {
      v55 = 0;
      v53 = 0u;
      v54 = 0u;
      sub_B414((uint64_t)&v53, &qword_25E840);
      v38 = (uint64_t)v46;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v2 + 56))(v46, 1, 1, v1);
    }
    v41 = (uint64_t)v47;
    v40 = (uint64_t)v48;
    _s7BooksUI13AnyPagedFrameVwxx_0(v56);
    sub_C7EC4(v38, v41);
    sub_C7F0C(v41, v40);
    result = v30((char *)v40, 1, v1);
    if ((_DWORD)result != 1)
    {
      v42 = *(void (**)(char *, uint64_t, uint64_t))(v2 + 32);
      v43 = v45;
      v42(v45, v40, v1);
      sub_B414(v41, &qword_25E828);
      v44 = v49;
      v42(v49, (uint64_t)v43, v1);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v2 + 56))(v44, 0, 1, v1);
      return swift_bridgeObjectRelease(v15);
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_C7EC4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_5440(&qword_25E828);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_C7F0C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_5440(&qword_25E828);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

ValueMetadata *type metadata accessor for SeeAllViewModel()
{
  return &type metadata for SeeAllViewModel;
}

BooksUI::BooksToolbarIconView __swiftcall BooksToolbarIconView.init(kind:)(BooksUI::BooksToolbarIconView kind)
{
  _BYTE *v1;

  *v1 = *(_BYTE *)kind.symbolKind;
  return kind;
}

uint64_t BooksToolbarIconView.body.getter@<X0>(uint64_t a1@<X8>)
{
  unsigned __int8 *v1;
  unsigned __int8 *v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  int *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  char *v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t KeyPath;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _BYTE v45[4];
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v2 = v1;
  v55 = a1;
  v53 = type metadata accessor for SymbolEffectOptions(0);
  v51 = *(_QWORD *)(v53 - 8);
  __chkstk_darwin(v53);
  v4 = &v45[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = type metadata accessor for ReplaceSymbolEffect(0);
  v6 = *(_QWORD *)(v5 - 8);
  v49 = v5;
  v50 = v6;
  __chkstk_darwin(v5);
  v8 = &v45[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v54 = type metadata accessor for ContentTransition(0);
  v52 = *(_QWORD *)(v54 - 8);
  __chkstk_darwin(v54);
  v10 = &v45[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = type metadata accessor for LiftHoverEffect(0);
  v47 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v13 = &v45[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v14 = (int *)type metadata accessor for CircularIconView(0);
  __chkstk_darwin(v14);
  v16 = &v45[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v48 = sub_5440(&qword_263F68);
  v17 = *(_QWORD *)(v48 - 8);
  __chkstk_darwin(v48);
  v19 = &v45[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v46 = *v2;
  *v16 = swift_getKeyPath(&unk_1E8FF0);
  v20 = sub_5440(&qword_25F1E8);
  swift_storeEnumTagMultiPayload(v16, v20, 0);
  v21 = (_QWORD *)((char *)v16 + v14[5]);
  *v21 = swift_getKeyPath(&unk_1E9018);
  v22 = sub_5440(&qword_25FAC8);
  swift_storeEnumTagMultiPayload(v21, v22, 0);
  v23 = (char *)v16 + v14[6];
  *(_QWORD *)v23 = swift_getKeyPath(&unk_1E9050);
  v23[8] = 0;
  v24 = (_QWORD *)((char *)v16 + v14[7]);
  *v24 = swift_getKeyPath(&unk_1E9098);
  v25 = sub_5440(&qword_25E948);
  swift_storeEnumTagMultiPayload(v24, v25, 0);
  v26 = (_QWORD *)((char *)v16 + v14[8]);
  *v26 = swift_getKeyPath(&unk_1E90C8);
  v27 = sub_5440(&qword_25F208);
  swift_storeEnumTagMultiPayload(v26, v27, 0);
  v28 = (char *)v16 + v14[9];
  *(_QWORD *)v28 = swift_getKeyPath(&unk_1E90F0);
  v28[8] = 0;
  v29 = (char *)v16 + v14[11];
  *(_QWORD *)v29 = swift_getKeyPath(&unk_1E9118);
  v29[8] = 0;
  *((_BYTE *)v16 + v14[10]) = v46;
  static CustomHoverEffect<>.lift.getter();
  v30 = sub_6FD0(&qword_263F70, type metadata accessor for CircularIconView, (uint64_t)&protocol conformance descriptor for CircularIconView);
  v31 = sub_6FD0(&qword_263F78, (uint64_t (*)(uint64_t))&type metadata accessor for LiftHoverEffect, (uint64_t)&protocol conformance descriptor for LiftHoverEffect);
  View.hoverEffect<A>(_:isEnabled:)(v13, 1, v14, v11, v30, v31);
  (*(void (**)(_BYTE *, uint64_t))(v47 + 8))(v13, v11);
  v32 = sub_C8520((uint64_t)v16);
  v33 = ReplaceSymbolEffect.init()(v32);
  static SymbolEffectOptions.default.getter(v33);
  v34 = sub_6FD0(&qword_261758, (uint64_t (*)(uint64_t))&type metadata accessor for ReplaceSymbolEffect, (uint64_t)&protocol conformance descriptor for ReplaceSymbolEffect);
  v35 = v49;
  static ContentTransition.symbolEffect<A>(_:options:)(v8, v4, v49, v34);
  (*(void (**)(_BYTE *, uint64_t))(v51 + 8))(v4, v53);
  (*(void (**)(_BYTE *, uint64_t))(v50 + 8))(v8, v35);
  KeyPath = swift_getKeyPath(&unk_1E9140);
  v37 = sub_5440(&qword_263F80);
  v38 = v55;
  v39 = (uint64_t *)(v55 + *(int *)(v37 + 36));
  v40 = sub_5440(&qword_261748);
  v41 = v52;
  v42 = v54;
  (*(void (**)(char *, _BYTE *, uint64_t))(v52 + 16))((char *)v39 + *(int *)(v40 + 28), v10, v54);
  *v39 = KeyPath;
  v43 = v48;
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v17 + 16))(v38, v19, v48);
  (*(void (**)(_BYTE *, uint64_t))(v41 + 8))(v10, v42);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v17 + 8))(v19, v43);
}

_QWORD *sub_C83D4@<X0>(_BYTE *a1@<X8>)
{
  unint64_t v2;
  _QWORD *result;
  uint64_t v4;

  v2 = sub_C88C8();
  result = EnvironmentValues.subscript.getter(&v4, &type metadata for CircularIconSizeKey, &type metadata for CircularIconSizeKey, v2);
  *a1 = v4;
  return result;
}

uint64_t sub_C8420(char *a1)
{
  unint64_t v1;
  char v3;

  v3 = *a1;
  v1 = sub_C88C8();
  return EnvironmentValues.subscript.setter(&v3, &type metadata for CircularIconSizeKey, &type metadata for CircularIconSizeKey, v1);
}

_QWORD *sub_C8484@<X0>(_BYTE *a1@<X8>)
{
  unint64_t v2;
  _QWORD *result;
  uint64_t v4;

  v2 = sub_C88C8();
  result = EnvironmentValues.subscript.getter(&v4, &type metadata for CircularIconSizeKey, &type metadata for CircularIconSizeKey, v2);
  *a1 = v4;
  return result;
}

uint64_t sub_C84D0(char *a1)
{
  unint64_t v1;
  char v3;

  v3 = *a1;
  v1 = sub_C88C8();
  return EnvironmentValues.subscript.setter(&v3, &type metadata for CircularIconSizeKey, &type metadata for CircularIconSizeKey, v1);
}

uint64_t sub_C8520(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for CircularIconView(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_C855C()
{
  return EnvironmentValues.contentTransition.getter();
}

uint64_t sub_C857C()
{
  return EnvironmentValues.contentTransition.getter();
}

uint64_t sub_C859C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v7;

  v2 = type metadata accessor for ContentTransition(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v5 + 16))(v4, a1);
  return EnvironmentValues.contentTransition.setter(v4);
}

uint64_t sub_C861C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &opaque type descriptor for <<opaque return type of BooksToolbarIconView.body>>, 1);
}

uint64_t getEnumTagSinglePayload for SymbolImage.Kind(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF9)
    goto LABEL_17;
  if (a2 + 7 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 7) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 7;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 7;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 7;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 8;
  v8 = v6 - 8;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for BooksToolbarIconView(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_C8708 + 4 * byte_1E8FE5[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_C873C + 4 * asc_1E8FE0[v4]))();
}

uint64_t sub_C873C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_C8744(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0xC874CLL);
  return result;
}

uint64_t sub_C8758(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0xC8760);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_C8764(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_C876C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BooksToolbarIconView()
{
  return &type metadata for BooksToolbarIconView;
}

unint64_t sub_C878C()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[4];

  result = qword_263F88;
  if (!qword_263F88)
  {
    v1 = sub_7EF8(&qword_263F80);
    v2[0] = type metadata accessor for CircularIconView(255);
    v2[1] = type metadata accessor for LiftHoverEffect(255);
    v2[2] = sub_6FD0(&qword_263F70, type metadata accessor for CircularIconView, (uint64_t)&protocol conformance descriptor for CircularIconView);
    v2[3] = sub_6FD0(&qword_263F78, (uint64_t (*)(uint64_t))&type metadata accessor for LiftHoverEffect, (uint64_t)&protocol conformance descriptor for LiftHoverEffect);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.hoverEffect<A>(_:isEnabled:)>>, 1);
    sub_C887C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_263F88);
  }
  return result;
}

unint64_t sub_C887C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_263F90;
  if (!qword_263F90)
  {
    v1 = sub_7EF8(&qword_261748);
    result = swift_getWitnessTable(&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>, v1);
    atomic_store(result, (unint64_t *)&qword_263F90);
  }
  return result;
}

unint64_t sub_C88C8()
{
  unint64_t result;

  result = qword_263F98[0];
  if (!qword_263F98[0])
  {
    result = swift_getWitnessTable(&unk_1F1EA4, &type metadata for CircularIconSizeKey);
    atomic_store(result, qword_263F98);
  }
  return result;
}

uint64_t sub_C890C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a4 = swift_getKeyPath(&unk_1E9200);
  *(_BYTE *)(a4 + 40) = 0;
  v9 = a4 + *(int *)(type metadata accessor for ListItemMetadataSharedWithYouView(0, a2, a3, v8) + 36);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(v9, a1, a2);
}

_QWORD *sub_C8978@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *result;
  uint64_t v8;
  _QWORD *v9;
  _QWORD v10[5];

  v3 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)(a1 + 24) + 16))(*(_QWORD *)(a1 + 16));
  v5 = v4;
  sub_321BC((uint64_t)v10);
  v6 = type metadata accessor for HighlightAttributionViewLoader(0);
  swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
  v9 = HighlightAttributionViewLoader.init(id:provider:)(v3, v5, (uint64_t)v10);
  result = State.init(wrappedValue:)(v10, &v9, v6);
  v8 = v10[1];
  *a2 = v10[0];
  a2[1] = v8;
  return result;
}

void sub_C8A24(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t KeyPath;
  unint64_t v6;
  void *v7;
  id v8;
  _QWORD v9[2];
  uint64_t v10;

  v9[1] = a1;
  v3 = sub_5440(&qword_261C70);
  State.wrappedValue.getter(&v10, v3);
  v4 = v10;
  KeyPath = swift_getKeyPath(&unk_1E9340);
  v9[0] = v4;
  v6 = sub_C9448();
  ObservationRegistrar.access<A, B>(_:keyPath:)(v9, KeyPath, v6);
  swift_release(KeyPath);
  v7 = *(void **)(v4 + 16);
  v8 = v7;
  swift_release(v4);
  *a2 = v7;
  a2[1] = v7 != 0;
}

void sub_C8AC8(_QWORD *a1@<X8>)
{
  uint64_t v1;

  sub_C8A24(*(_QWORD *)(v1 + 8), a1);
}

uint64_t type metadata accessor for ListItemMetadataSharedWithYouView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10E40(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ListItemMetadataSharedWithYouView);
}

uint64_t sub_C8AE4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = ")";
  result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 16));
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 0, 2, v4, a1 + 32);
    return 0;
  }
  return result;
}

uint64_t sub_C8B5C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;

  v4 = a1;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_DWORD *)(v6 + 80);
  if (v7 > 7
    || (*(_DWORD *)(v6 + 80) & 0x100000) != 0
    || ((v7 + 41) & (unint64_t)~v7) + *(_QWORD *)(v6 + 64) > 0x18)
  {
    v10 = *a2;
    *(_QWORD *)v4 = *a2;
    v4 = v10 + ((v7 & 0xF8 ^ 0x1F8) & (v7 + 16));
    swift_retain(v10);
  }
  else
  {
    if ((a2[5] & 1) != 0)
    {
      v11 = a2[3];
      if (v11)
      {
        v12 = a2[4];
        *(_QWORD *)(a1 + 24) = v11;
        *(_QWORD *)(a1 + 32) = v12;
        (**(void (***)(uint64_t, uint64_t *))(v11 - 8))(a1, a2);
      }
      else
      {
        v14 = *((_OWORD *)a2 + 1);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v14;
        *(_QWORD *)(a1 + 32) = a2[4];
      }
      *(_BYTE *)(v4 + 40) = 1;
    }
    else
    {
      v13 = *a2;
      *(_QWORD *)v4 = *a2;
      *(_BYTE *)(v4 + 40) = 0;
      swift_retain(v13);
    }
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v6 + 16))((v4 + v7 + 41) & ~v7, ((unint64_t)a2 + v7 + 41) & ~v7, v5);
  }
  return v4;
}

uint64_t sub_C8C6C(_QWORD *a1, uint64_t a2)
{
  if ((a1[5] & 1) != 0)
  {
    if (a1[3])
      _s7BooksUI13AnyPagedFrameVwxx_0(a1);
  }
  else
  {
    swift_release(*a1);
  }
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))(((unint64_t)a1 + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80) + 41) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
}

uint64_t sub_C8CCC(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;

  if ((a2[5] & 1) != 0)
  {
    v6 = a2[3];
    if (v6)
    {
      v7 = a2[4];
      *(_QWORD *)(a1 + 24) = v6;
      *(_QWORD *)(a1 + 32) = v7;
      (**(void (***)(uint64_t, uint64_t *))(v6 - 8))(a1, a2);
    }
    else
    {
      v9 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v9;
      *(_QWORD *)(a1 + 32) = a2[4];
    }
    *(_BYTE *)(a1 + 40) = 1;
  }
  else
  {
    v8 = *a2;
    *(_QWORD *)a1 = *a2;
    *(_BYTE *)(a1 + 40) = 0;
    swift_retain(v8);
  }
  v10 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v10 + 16))((*(unsigned __int8 *)(v10 + 80) + 41 + a1) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v10 + 80) + 41) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
  return a1;
}

uint64_t sub_C8D80(uint64_t a1, uint64_t *a2, uint64_t a3, __n128 a4)
{
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;

  if ((uint64_t *)a1 != a2)
  {
    sub_C8E48(a1);
    if ((a2[5] & 1) != 0)
    {
      v7 = a2[3];
      if (v7)
      {
        *(_QWORD *)(a1 + 24) = v7;
        *(_QWORD *)(a1 + 32) = a2[4];
        (**(void (***)(uint64_t, uint64_t *))(v7 - 8))(a1, a2);
      }
      else
      {
        a4 = *(__n128 *)a2;
        v9 = *((_OWORD *)a2 + 1);
        *(_QWORD *)(a1 + 32) = a2[4];
        *(__n128 *)a1 = a4;
        *(_OWORD *)(a1 + 16) = v9;
      }
      *(_BYTE *)(a1 + 40) = 1;
    }
    else
    {
      v8 = *a2;
      *(_QWORD *)a1 = *a2;
      *(_BYTE *)(a1 + 40) = 0;
      a4 = swift_retain(v8);
    }
  }
  v10 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t, __n128))(v10 + 24))((*(unsigned __int8 *)(v10 + 80) + 41 + a1) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v10 + 80) + 41) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80), a4);
  return a1;
}

uint64_t sub_C8E48(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_5440(&qword_25FAB0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

_OWORD *sub_C8E88(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  *(_OWORD *)((char *)a1 + 25) = *(_OWORD *)((char *)a2 + 25);
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v5 + 32))(((unint64_t)a1 + *(unsigned __int8 *)(v5 + 80) + 41) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v5 + 80) + 41) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
  return a1;
}

_OWORD *sub_C8EE0(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;

  if (a1 != a2)
  {
    sub_C8E48((uint64_t)a1);
    v6 = a2[1];
    *a1 = *a2;
    a1[1] = v6;
    *(_OWORD *)((char *)a1 + 25) = *(_OWORD *)((char *)a2 + 25);
  }
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 40))(((unint64_t)a1 + *(unsigned __int8 *)(v7 + 80) + 41) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v7 + 80) + 41) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t sub_C8F58(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v13;
  int v14;
  unsigned int v15;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0xFE)
    v6 = 254;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_22;
  v9 = ((v7 + 41) & ~v7) + *(_QWORD *)(v4 + 64);
  v10 = 8 * v9;
  if (v9 <= 3)
  {
    v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      v11 = *(_DWORD *)(a1 + v9);
      if (!v11)
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      v11 = *(unsigned __int16 *)(a1 + v9);
      if (!*(_WORD *)(a1 + v9))
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_22:
      if (v5 > 0xFE)
        return (*(uint64_t (**)(uint64_t))(v4 + 48))((a1 + v7 + 41) & ~v7);
      v15 = *(unsigned __int8 *)(a1 + 40);
      if (v15 > 1)
        return (v15 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v11 = *(unsigned __int8 *)(a1 + v9);
  if (!*(_BYTE *)(a1 + v9))
    goto LABEL_22;
LABEL_15:
  v14 = (v11 - 1) << v10;
  if (v9 > 3)
    v14 = 0;
  if (!(_DWORD)v9)
    return v6 + v14 + 1;
  if (v9 > 3)
    LODWORD(v9) = 4;
  return ((uint64_t (*)(void))((char *)&loc_C902C + 4 * byte_1E91F0[(v9 - 1)]))();
}

void sub_C909C(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0xFEu)
    v6 = 254;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((*(unsigned __int8 *)(v5 + 80) + 41) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
     + *(_QWORD *)(v5 + 64);
  if (a3 > v6)
  {
    if (v7 <= 3)
    {
      v10 = ((a3 - v6 + ~(-1 << (8 * v7))) >> (8 * v7)) + 1;
      if (HIWORD(v10))
      {
        v8 = &dword_4;
      }
      else if (v10 >= 0x100)
      {
        v8 = 2;
      }
      else
      {
        v8 = v10 > 1;
      }
    }
    else
    {
      v8 = &dword_0 + 1;
    }
  }
  else
  {
    v8 = 0;
  }
  if (v6 < a2)
  {
    v9 = ~v6 + a2;
    if (v7 < 4)
    {
      if ((_DWORD)v7)
      {
        v11 = v9 & ~(-1 << (8 * v7));
        bzero(a1, v7);
        if ((_DWORD)v7 == 3)
        {
          *a1 = v11;
          *((_BYTE *)a1 + 2) = BYTE2(v11);
        }
        else if ((_DWORD)v7 == 2)
        {
          *a1 = v11;
        }
        else
        {
          *(_BYTE *)a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v7);
      *(_DWORD *)a1 = v9;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

uint64_t sub_C92AC(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  return swift_getOpaqueTypeConformance2(&v3, &unk_22CCFC, 1);
}

uint64_t destroy for SharedWithYouContentView(_QWORD *a1)
{
  swift_release(*a1);
  return swift_release(a1[1]);
}

uint64_t *_s7BooksUI24SharedWithYouContentViewVwCP_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_retain(v3);
  swift_retain(v4);
  return a1;
}

uint64_t *assignWithCopy for SharedWithYouContentView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_retain(v4);
  swift_release(v5);
  v6 = a1[1];
  v7 = a2[1];
  a1[1] = v7;
  swift_retain(v7);
  swift_release(v6);
  return a1;
}

_QWORD *assignWithTake for SharedWithYouContentView(_QWORD *a1, _OWORD *a2)
{
  uint64_t v4;

  swift_release(*a1);
  v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  swift_release(v4);
  return a1;
}

ValueMetadata *type metadata accessor for SharedWithYouContentView()
{
  return &type metadata for SharedWithYouContentView;
}

unint64_t sub_C93EC()
{
  unint64_t result;

  result = qword_264020;
  if (!qword_264020)
  {
    result = swift_getWitnessTable(&unk_1E92EC, &type metadata for SharedWithYouContentView);
    atomic_store(result, (unint64_t *)&qword_264020);
  }
  return result;
}

uint64_t sub_C9430(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_22CD30, 1);
}

unint64_t sub_C9448()
{
  unint64_t result;
  uint64_t v1;

  result = qword_261C78;
  if (!qword_261C78)
  {
    v1 = type metadata accessor for HighlightAttributionViewLoader(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for HighlightAttributionViewLoader, v1);
    atomic_store(result, (unint64_t *)&qword_261C78);
  }
  return result;
}

unint64_t sub_C9494()
{
  unint64_t result;
  uint64_t v1;

  result = qword_264028;
  if (!qword_264028)
  {
    v1 = sub_7EF8(&qword_264030);
    sub_C94F8();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_264028);
  }
  return result;
}

unint64_t sub_C94F8()
{
  unint64_t result;

  result = qword_264038[0];
  if (!qword_264038[0])
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for SharedWithYouView, &type metadata for SharedWithYouView);
    atomic_store(result, qword_264038);
  }
  return result;
}

uint64_t SegmentedControlViewModel.selection.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2 + *(int *)(a1 + 36));
}

uint64_t SegmentedControlViewModel.selection.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 40))(v2 + *(int *)(a2 + 36), a1);
}

uint64_t SegmentedControlViewModel.init(pickerItems:selection:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  char *v7;

  *a5 = a1;
  v7 = (char *)a5 + *(int *)(type metadata accessor for SegmentedControlViewModel(0, a3, a4, a4) + 36);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 32))(v7, a2, a3);
}

uint64_t type metadata accessor for SegmentedControlViewModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10E40(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SegmentedControlViewModel);
}

uint64_t sub_C95DC(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 16));
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 0, 2, v4, a1 + 32);
    return 0;
  }
  return result;
}

uint64_t *sub_C9658(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = ((v6 + 8) & ~v6) + *(_QWORD *)(v5 + 64);
  v8 = *(_DWORD *)(v5 + 80) & 0x100000;
  v9 = *a2;
  *a1 = *a2;
  if (v6 > 7 || v8 != 0 || v7 > 0x18)
  {
    a1 = (uint64_t *)(v9 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain(v9);
  }
  else
  {
    v12 = ((unint64_t)a1 + v6 + 8) & ~v6;
    v13 = ((unint64_t)a2 + v6 + 8) & ~v6;
    v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_bridgeObjectRetain(v9);
    v14(v12, v13, v4);
  }
  return a1;
}

uint64_t sub_C9714(_QWORD *a1, uint64_t a2)
{
  swift_bridgeObjectRelease(*a1);
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))(((unint64_t)a1 + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
}

uint64_t *sub_C9758(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);

  v4 = *a2;
  *a1 = *a2;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = ((unint64_t)a1 + v7 + 8) & ~v7;
  v9 = ((unint64_t)a2 + v7 + 8) & ~v7;
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  swift_bridgeObjectRetain(v4);
  v10(v8, v9, v5);
  return a1;
}

uint64_t *sub_C97C8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = *a2;
  v7 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v8 + 24))(((unint64_t)a1 + *(unsigned __int8 *)(v8 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v8 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  return a1;
}

_QWORD *sub_C9838(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 32))(((unint64_t)a1 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

uint64_t *sub_C9888(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v6);
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 40))(((unint64_t)a1 + *(unsigned __int8 *)(v7 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v7 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t sub_C98F0(_QWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v13;
  int v14;
  uint64_t v15;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_22;
  v9 = ((v7 + 8) & ~v7) + *(_QWORD *)(v4 + 64);
  v10 = 8 * v9;
  if (v9 <= 3)
  {
    v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      v11 = *(_DWORD *)((char *)a1 + v9);
      if (!v11)
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      v11 = *(unsigned __int16 *)((char *)a1 + v9);
      if (!*(_WORD *)((char *)a1 + v9))
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_22:
      if ((v5 & 0x80000000) != 0)
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)a1 + v7 + 8) & ~v7);
      v15 = *a1;
      if (*a1 >= 0xFFFFFFFFuLL)
        LODWORD(v15) = -1;
      return (v15 + 1);
    }
  }
  v11 = *((unsigned __int8 *)a1 + v9);
  if (!*((_BYTE *)a1 + v9))
    goto LABEL_22;
LABEL_15:
  v14 = (v11 - 1) << v10;
  if (v9 > 3)
    v14 = 0;
  if (!(_DWORD)v9)
    return v6 + v14 + 1;
  if (v9 > 3)
    LODWORD(v9) = 4;
  return ((uint64_t (*)(void))((char *)&loc_C99C4 + 4 * byte_1E9370[(v9 - 1)]))();
}

void sub_C9A34(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((*(unsigned __int8 *)(v5 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)) + *(_QWORD *)(v5 + 64);
  if (a3 > v6)
  {
    if (v7 <= 3)
    {
      v10 = ((a3 - v6 + ~(-1 << (8 * v7))) >> (8 * v7)) + 1;
      if (HIWORD(v10))
      {
        v8 = &dword_4;
      }
      else if (v10 >= 0x100)
      {
        v8 = 2;
      }
      else
      {
        v8 = v10 > 1;
      }
    }
    else
    {
      v8 = &dword_0 + 1;
    }
  }
  else
  {
    v8 = 0;
  }
  if (v6 < a2)
  {
    v9 = ~v6 + a2;
    if (v7 < 4)
    {
      if ((_DWORD)v7)
      {
        v11 = v9 & ~(-1 << (8 * v7));
        bzero(a1, v7);
        if ((_DWORD)v7 == 3)
        {
          *a1 = v11;
          *((_BYTE *)a1 + 2) = BYTE2(v11);
        }
        else if ((_DWORD)v7 == 2)
        {
          *a1 = v11;
        }
        else
        {
          *(_BYTE *)a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v7);
      *(_DWORD *)a1 = v9;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

uint64_t View.animateIn()(uint64_t a1, uint64_t a2)
{
  uint64_t KeyPath;
  char v6;

  KeyPath = swift_getKeyPath(&unk_1E93E0);
  v6 = 1;
  View.environment<A>(_:_:)(KeyPath, &v6, a1, a2);
  return swift_release(KeyPath);
}

uint64_t EnvironmentValues.isAnimatableIn.getter()
{
  unint64_t v0;
  uint64_t var1;

  v0 = sub_C9DF8();
  EnvironmentValues.subscript.getter(&var1, &type metadata for IsAnimatableInKey, &type metadata for IsAnimatableInKey, v0);
  return var1;
}

_QWORD *sub_C9CD0@<X0>(_BYTE *a1@<X8>)
{
  unint64_t v2;
  _QWORD *result;
  uint64_t v4;

  v2 = sub_C9DF8();
  result = EnvironmentValues.subscript.getter(&v4, &type metadata for IsAnimatableInKey, &type metadata for IsAnimatableInKey, v2);
  *a1 = v4;
  return result;
}

_QWORD *sub_C9D1C@<X0>(_BYTE *a1@<X8>)
{
  unint64_t v2;
  _QWORD *result;
  uint64_t v4;

  v2 = sub_C9DF8();
  result = EnvironmentValues.subscript.getter(&v4, &type metadata for IsAnimatableInKey, &type metadata for IsAnimatableInKey, v2);
  *a1 = v4;
  return result;
}

uint64_t sub_C9D68(char *a1)
{
  unint64_t v1;
  char v3;

  v3 = *a1;
  v1 = sub_C9DF8();
  return EnvironmentValues.subscript.setter(&v3, &type metadata for IsAnimatableInKey, &type metadata for IsAnimatableInKey, v1);
}

uint64_t sub_C9DB0(char *a1)
{
  unint64_t v1;
  char v3;

  v3 = *a1;
  v1 = sub_C9DF8();
  return EnvironmentValues.subscript.setter(&v3, &type metadata for IsAnimatableInKey, &type metadata for IsAnimatableInKey, v1);
}

unint64_t sub_C9DF8()
{
  unint64_t result;

  result = qword_2640C0;
  if (!qword_2640C0)
  {
    result = swift_getWitnessTable(&unk_1E9424, &type metadata for IsAnimatableInKey);
    atomic_store(result, (unint64_t *)&qword_2640C0);
  }
  return result;
}

uint64_t EnvironmentValues.isAnimatableIn.setter(char a1)
{
  unint64_t v1;
  char v3;

  v3 = a1;
  v1 = sub_C9DF8();
  return EnvironmentValues.subscript.setter(&v3, &type metadata for IsAnimatableInKey, &type metadata for IsAnimatableInKey, v1);
}

uint64_t (*EnvironmentValues.isAnimatableIn.modify(uint64_t a1))(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  unint64_t v4;

  v3 = (_QWORD *)(a1 + 17);
  *(_QWORD *)a1 = v1;
  v4 = sub_C9DF8();
  *(_QWORD *)(a1 + 8) = v4;
  EnvironmentValues.subscript.getter(v3, &type metadata for IsAnimatableInKey, &type metadata for IsAnimatableInKey, v4);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a1 + 17);
  return sub_C9ED4;
}

uint64_t sub_C9ED4(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a1 + 16);
  return EnvironmentValues.subscript.setter(a1 + 17, &type metadata for IsAnimatableInKey, &type metadata for IsAnimatableInKey, v1);
}

uint64_t sub_C9F08(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *a1;
  v2 = sub_7EF8(&qword_25ED08);
  v3 = type metadata accessor for ModifiedContent(255, v1, v2);
  sub_C9F68();
  return swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v3);
}

unint64_t sub_C9F68()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25ED10;
  if (!qword_25ED10)
  {
    v1 = sub_7EF8(&qword_25ED08);
    result = swift_getWitnessTable(&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>, v1);
    atomic_store(result, (unint64_t *)&qword_25ED10);
  }
  return result;
}

ValueMetadata *type metadata accessor for IsAnimatableInKey()
{
  return &type metadata for IsAnimatableInKey;
}

uint64_t CodeListItemViewModel.wrappedValue.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1E428(v1, a1, type metadata accessor for ListItemViewModel);
}

uint64_t CodeListItemViewModel.wrappedValue.setter(uint64_t a1)
{
  uint64_t v1;

  return sub_C9FF0(a1, v1);
}

uint64_t sub_C9FF0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ListItemViewModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t CodeListItemViewModel.init(wrappedValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_21C88(a1, a2, type metadata accessor for ListItemViewModel);
}

uint64_t sub_CA054(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_CA088 + 4 * byte_1E9460[a1]))(0x747865746E6F63, 0xE700000000000000);
}

uint64_t sub_CA088()
{
  return 0x656372756F736572;
}

uint64_t sub_CA0A0()
{
  return 0x4E6E6F6974636573;
}

uint64_t sub_CA0C0()
{
  return 0x4449736569726573;
}

unint64_t sub_CA0D8()
{
  return 0xD000000000000012;
}

unint64_t sub_CA0F4()
{
  return 0xD000000000000013;
}

uint64_t sub_CA114(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_CA148 + 4 * byte_1E9466[a1]))(0x747865746E6F63, 0xE700000000000000);
}

uint64_t sub_CA148()
{
  return 0x656372756F736572;
}

uint64_t sub_CA160()
{
  return 0x4E6E6F6974636573;
}

uint64_t sub_CA180()
{
  return 0x4449736569726573;
}

unint64_t sub_CA198()
{
  return 0xD000000000000012;
}

unint64_t sub_CA1B4()
{
  return 0xD000000000000013;
}

void sub_CA1D4(char *a1)
{
  sub_C6ADC(*a1);
}

void sub_CA1E0()
{
  char *v0;

  sub_124E84(*v0);
}

void sub_CA1E8(uint64_t a1)
{
  char *v1;

  sub_125538(a1, *v1);
}

void sub_CA1F0(uint64_t a1)
{
  char *v1;

  sub_125C2C(a1, *v1);
}

unint64_t sub_CA1F8@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_CCAD4(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_CA224@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_CA054(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_CA24C()
{
  unsigned __int8 *v0;

  return sub_CA114(*v0);
}

unint64_t sub_CA254@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_CCAD4(a1);
  *a2 = result;
  return result;
}

uint64_t sub_CA278(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_CAEBC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_CA2A0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_CAEBC();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_CA2C8(char *a1)
{
  sub_C6958(*a1);
}

void sub_CA2D4()
{
  char *v0;

  sub_124F88(*v0);
}

void sub_CA2DC(uint64_t a1)
{
  char *v1;

  sub_125488(a1, *v1);
}

void sub_CA2E4(uint64_t a1)
{
  char *v1;

  sub_125D2C(a1, *v1);
}

unint64_t sub_CA2EC@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_CCB60(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_CA318()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_CA34C + 4 * byte_1E946C[*v0]))();
}

void sub_CA34C(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000012;
  a1[1] = 0x80000000001F94E0;
}

void sub_CA36C(_QWORD *a1@<X8>)
{
  *a1 = 0x736E6F6974696465;
  a1[1] = 0xE800000000000000;
}

void sub_CA388(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000017;
  a1[1] = 0x80000000001F9500;
}

uint64_t sub_CA3B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_CCB1C();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t CodeListItemViewModel.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  unint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  _BYTE *v33;
  uint64_t v34;
  _QWORD v35[7];
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _BYTE v43[592];
  __int128 v44;
  uint64_t v45;
  _BYTE v46[48];
  uint64_t v47;

  v40 = a2;
  v36 = type metadata accessor for ListItemEditionsDescriptorExternals(0);
  __chkstk_darwin(v36);
  v39 = (char *)v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_5440(&qword_2618C8);
  __chkstk_darwin(v4);
  v38 = (char *)v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = type metadata accessor for ListItemViewModel(0);
  v6 = __chkstk_darwin(v37);
  v8 = (char *)v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)v35 - v9;
  v41 = sub_5440(&qword_2640C8);
  v11 = *(_QWORD *)(v41 - 8);
  __chkstk_darwin(v41);
  v13 = (char *)v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for CodeListItemViewModel(0);
  __chkstk_darwin(v14);
  v16 = (char *)v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = a1[3];
  v17 = a1[4];
  v42 = a1;
  sub_5480(a1, v18);
  v19 = sub_CAEBC();
  v20 = v47;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for CodeListItemViewModel.CodingKeys, &type metadata for CodeListItemViewModel.CodingKeys, v19, v18, v17);
  if (!v20)
  {
    v35[4] = v8;
    v35[5] = v16;
    v35[6] = v10;
    v47 = v11;
    v21 = sub_5440(&qword_25F900);
    v43[0] = 1;
    v22 = sub_7FD8((unint64_t *)&qword_25F908, &qword_25F900, (uint64_t)&protocol conformance descriptor for MResourceDecoder<A>);
    v23 = v41;
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v44, v21, v43, v41, v21, v22);
    v24 = (void *)v44;
    static ContentInfoUtilities.assetInfo(storeAsset:)(&v44, v44);
    if (v45)
    {
      sub_AC68(&v44, (uint64_t)v46);
      v43[0] = 0;
      v25 = sub_CAF00();
      KeyedDecodingContainer.decode<A>(_:forKey:)(&v44, &type metadata for CodeListItemViewModel.Context, v43, v23, &type metadata for CodeListItemViewModel.Context, v25);
      __asm { BR              X10 }
    }
    sub_B414((uint64_t)&v44, &qword_25F910);
    v27 = type metadata accessor for DecodingError(0);
    swift_allocError(v27, &protocol witness table for DecodingError, 0, 0);
    v29 = v28;
    v30 = KeyedDecodingContainer.codingPath.getter(v23);
    v31 = sub_34EE8();
    v32 = swift_allocError(&type metadata for ListItemDecodingError, v31, 0, 0);
    *v33 = 0;
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)(v30, 0xD00000000000001ALL, 0x80000000001F9FF0, v32);
    v34 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v27 - 8) + 104))(v29, enum case for DecodingError.dataCorrupted(_:), v27);
    swift_willThrow(v34);

    (*(void (**)(char *, uint64_t))(v47 + 8))(v13, v23);
  }
  return _s7BooksUI13AnyPagedFrameVwxx_0(v42);
}

void sub_CA7D8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *((_BYTE *)v0 + 704) = 3;
  v8 = KeyedDecodingContainer.decode(_:forKey:)(v0 + 88, v2);
  if (!v5)
  {
    v10 = v9;
    v0[10] = v8;
    sub_BD00(v7 - 128, (uint64_t)(v0 + 88));
    v11 = v0[9];
    CardInfo.init(with:alwaysPresentNewCardSet:)(v0 + 88, 1, v11);
    static ListItemViewModel.seriesPage(seriesID:assetInfo:cardInfo:)(v0[10], v10, (_QWORD *)(v7 - 128), v11, v0[6]);
    swift_bridgeObjectRelease(v10);

    sub_B414(v11, &qword_2618C8);
    v12 = v0[6];
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v4, v2);
    v13 = v0[5];
    sub_21C88(v12, v13, type metadata accessor for ListItemViewModel);
    _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)(v7 - 128));
    sub_21C88(v13, v1, type metadata accessor for CodeListItemViewModel);
    JUMPOUT(0xCA6CCLL);
  }
  JUMPOUT(0xCA6B0);
}

uint64_t sub_CAE6C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return CodeListItemViewModel.init(from:)(a1, a2);
}

uint64_t type metadata accessor for CodeListItemViewModel(uint64_t a1)
{
  uint64_t result;

  result = qword_264178;
  if (!qword_264178)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CodeListItemViewModel);
  return result;
}

unint64_t sub_CAEBC()
{
  unint64_t result;

  result = qword_2640D0;
  if (!qword_2640D0)
  {
    result = swift_getWitnessTable(&unk_1E981C, &type metadata for CodeListItemViewModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2640D0);
  }
  return result;
}

unint64_t sub_CAF00()
{
  unint64_t result;

  result = qword_2640D8;
  if (!qword_2640D8)
  {
    result = swift_getWitnessTable(&unk_1E97F4, &type metadata for CodeListItemViewModel.Context);
    atomic_store(result, (unint64_t *)&qword_2640D8);
  }
  return result;
}

uint64_t sub_CAF44()
{
  return sub_CAF68(&qword_2640F0, &qword_2640F8, (void (*)(void))sub_CAFCC, (uint64_t)&protocol conformance descriptor for <A> [A]);
}

uint64_t sub_CAF68(unint64_t *a1, uint64_t *a2, void (*a3)(void), uint64_t a4)
{
  uint64_t result;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v8 = sub_7EF8(a2);
    a3();
    result = swift_getWitnessTable(a4, v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_CAFCC()
{
  unint64_t result;

  result = qword_264100;
  if (!qword_264100)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ListItemMetadataDescriptorModel, &type metadata for ListItemMetadataDescriptorModel);
    atomic_store(result, (unint64_t *)&qword_264100);
  }
  return result;
}

uint64_t sub_CB010()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 49, 7);
}

uint64_t sub_CB048@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1E428(a1, a2, type metadata accessor for FontConstants.Environment);
}

uint64_t sub_CB068()
{
  uint64_t v0;

  sub_BE0C(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
  _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 72, 7);
}

unint64_t sub_CB0A4()
{
  unint64_t result;

  result = qword_264118;
  if (!qword_264118)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ListItemDecodingError, &type metadata for ListItemDecodingError);
    atomic_store(result, (unint64_t *)&qword_264118);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for CodeListItemViewModel(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  char v7;
  __int128 v8;
  _BYTE *v9;
  _BYTE *v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  _OWORD *v17;
  _OWORD *v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  _OWORD *v22;
  _OWORD *v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  _OWORD *v27;
  _OWORD *v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  _OWORD *v32;
  _OWORD *v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  _OWORD *v37;
  _OWORD *v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  _OWORD *v42;
  _OWORD *v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  _OWORD *v47;
  _OWORD *v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(char *, char *, uint64_t);
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v79;

  v4 = type metadata accessor for ListItemViewModel(0);
  v5 = *(_DWORD *)(*(_QWORD *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v11 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain(v11);
  }
  else
  {
    v6 = v4;
    *(_BYTE *)a1 = *(_BYTE *)a2;
    *(_QWORD *)(a1 + 8) = a2[1];
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    v7 = *((_BYTE *)a2 + 89);
    v8 = *((_OWORD *)a2 + 3);
    *(_OWORD *)(a1 + 48) = v8;
    (**(void (***)(uint64_t, uint64_t))(v8 - 8))(a1 + 24, (uint64_t)(a2 + 3));
    v9 = (_BYTE *)(a1 + 64);
    v10 = a2 + 8;
    if ((v7 & 1) != 0)
    {
      *v9 = *v10;
    }
    else
    {
      *(_QWORD *)v9 = *(_QWORD *)v10;
      *(_BYTE *)(a1 + 72) = *((_BYTE *)a2 + 72);
      *(_QWORD *)(a1 + 80) = a2[10];
      *(_BYTE *)(a1 + 88) = *((_BYTE *)a2 + 88);
    }
    *(_BYTE *)(a1 + 89) = v7;
    v12 = (_OWORD *)(a1 + 96);
    v13 = a2 + 12;
    v14 = a2[15];
    if (v14)
    {
      v15 = a2[16];
      *(_QWORD *)(a1 + 120) = v14;
      *(_QWORD *)(a1 + 128) = v15;
      (**(void (***)(_OWORD *, _OWORD *))(v14 - 8))(v12, v13);
    }
    else
    {
      v16 = *((_OWORD *)a2 + 7);
      *v12 = *v13;
      *(_OWORD *)(a1 + 112) = v16;
      *(_QWORD *)(a1 + 128) = a2[16];
    }
    v17 = (_OWORD *)(a1 + 136);
    v18 = a2 + 17;
    v19 = a2[20];
    if (v19)
    {
      v20 = a2[21];
      *(_QWORD *)(a1 + 160) = v19;
      *(_QWORD *)(a1 + 168) = v20;
      (**(void (***)(_OWORD *, _OWORD *))(v19 - 8))(v17, v18);
    }
    else
    {
      v21 = *(_OWORD *)(a2 + 19);
      *v17 = *v18;
      *(_OWORD *)(a1 + 152) = v21;
      *(_QWORD *)(a1 + 168) = a2[21];
    }
    v22 = (_OWORD *)(a1 + 176);
    v23 = a2 + 22;
    v24 = a2[25];
    if (v24)
    {
      v25 = a2[26];
      *(_QWORD *)(a1 + 200) = v24;
      *(_QWORD *)(a1 + 208) = v25;
      (**(void (***)(_OWORD *, _OWORD *))(v24 - 8))(v22, v23);
    }
    else
    {
      v26 = *((_OWORD *)a2 + 12);
      *v22 = *v23;
      *(_OWORD *)(a1 + 192) = v26;
      *(_QWORD *)(a1 + 208) = a2[26];
    }
    v27 = (_OWORD *)(a1 + 216);
    v28 = a2 + 27;
    v29 = a2[30];
    if (v29)
    {
      v30 = a2[31];
      *(_QWORD *)(a1 + 240) = v29;
      *(_QWORD *)(a1 + 248) = v30;
      (**(void (***)(_OWORD *, _OWORD *))(v29 - 8))(v27, v28);
    }
    else
    {
      v31 = *(_OWORD *)(a2 + 29);
      *v27 = *v28;
      *(_OWORD *)(a1 + 232) = v31;
      *(_QWORD *)(a1 + 248) = a2[31];
    }
    v32 = (_OWORD *)(a1 + 256);
    v33 = a2 + 32;
    v34 = a2[35];
    if (v34)
    {
      v35 = a2[36];
      *(_QWORD *)(a1 + 280) = v34;
      *(_QWORD *)(a1 + 288) = v35;
      (**(void (***)(_OWORD *, _OWORD *))(v34 - 8))(v32, v33);
    }
    else
    {
      v36 = *((_OWORD *)a2 + 17);
      *v32 = *v33;
      *(_OWORD *)(a1 + 272) = v36;
      *(_QWORD *)(a1 + 288) = a2[36];
    }
    v37 = (_OWORD *)(a1 + 296);
    v38 = a2 + 37;
    v39 = a2[40];
    if (v39)
    {
      v40 = a2[41];
      *(_QWORD *)(a1 + 320) = v39;
      *(_QWORD *)(a1 + 328) = v40;
      (**(void (***)(_OWORD *, _OWORD *))(v39 - 8))(v37, v38);
    }
    else
    {
      v41 = *(_OWORD *)(a2 + 39);
      *v37 = *v38;
      *(_OWORD *)(a1 + 312) = v41;
      *(_QWORD *)(a1 + 328) = a2[41];
    }
    v42 = (_OWORD *)(a1 + 336);
    v43 = a2 + 42;
    v44 = a2[45];
    if (v44)
    {
      v45 = a2[46];
      *(_QWORD *)(a1 + 360) = v44;
      *(_QWORD *)(a1 + 368) = v45;
      (**(void (***)(_OWORD *, _OWORD *))(v44 - 8))(v42, v43);
    }
    else
    {
      v46 = *((_OWORD *)a2 + 22);
      *v42 = *v43;
      *(_OWORD *)(a1 + 352) = v46;
      *(_QWORD *)(a1 + 368) = a2[46];
    }
    v47 = (_OWORD *)(a1 + 376);
    v48 = a2 + 47;
    v49 = a2[50];
    if (v49)
    {
      v50 = a2[51];
      *(_QWORD *)(a1 + 400) = v49;
      *(_QWORD *)(a1 + 408) = v50;
      (**(void (***)(_OWORD *, _OWORD *))(v49 - 8))(v47, v48);
    }
    else
    {
      v51 = *(_OWORD *)(a2 + 49);
      *v47 = *v48;
      *(_OWORD *)(a1 + 392) = v51;
      *(_QWORD *)(a1 + 408) = a2[51];
    }
    v52 = a2[55];
    v53 = a2[56];
    *(_QWORD *)(a1 + 440) = v52;
    *(_QWORD *)(a1 + 448) = v53;
    (**(void (***)(uint64_t, uint64_t))(v52 - 8))(a1 + 416, (uint64_t)(a2 + 52));
    v54 = *(int *)(v6 + 40);
    v55 = (uint64_t *)(a1 + v54);
    v56 = (uint64_t *)((char *)a2 + v54);
    v57 = type metadata accessor for CardInfo(0);
    v58 = *(_QWORD *)(v57 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v58 + 48))(v56, 1, v57))
    {
      v59 = sub_5440(&qword_2618C8);
      memcpy(v55, v56, *(_QWORD *)(*(_QWORD *)(v59 - 8) + 64));
    }
    else
    {
      v60 = *v56;
      *v55 = *v56;
      v61 = *(int *)(v57 + 20);
      v62 = (char *)v55 + v61;
      v79 = (char *)v56 + v61;
      v63 = type metadata accessor for UUID(0);
      v64 = v6;
      v65 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v63 - 8) + 16);
      swift_bridgeObjectRetain(v60);
      v65(v62, v79, v63);
      v6 = v64;
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v58 + 56))(v55, 0, 1, v57);
    }
    v66 = *(int *)(v6 + 44);
    v67 = a1 + v66;
    v68 = (uint64_t)a2 + v66;
    v69 = *(_QWORD *)(v68 + 8);
    *(_QWORD *)v67 = *(_QWORD *)v68;
    *(_QWORD *)(v67 + 8) = v69;
    v70 = *(_QWORD *)(v68 + 24);
    *(_QWORD *)(v67 + 16) = *(_QWORD *)(v68 + 16);
    *(_QWORD *)(v67 + 24) = v70;
    v71 = *(_QWORD *)(v68 + 40);
    *(_QWORD *)(v67 + 32) = *(_QWORD *)(v68 + 32);
    *(_QWORD *)(v67 + 40) = v71;
    v72 = *(_QWORD *)(v68 + 56);
    *(_QWORD *)(v67 + 48) = *(_QWORD *)(v68 + 48);
    *(_QWORD *)(v67 + 56) = v72;
    v73 = *(_QWORD *)(v68 + 72);
    *(_QWORD *)(v67 + 64) = *(_QWORD *)(v68 + 64);
    *(_QWORD *)(v67 + 72) = v73;
    v74 = *(_QWORD *)(v68 + 88);
    *(_QWORD *)(v67 + 80) = *(_QWORD *)(v68 + 80);
    *(_QWORD *)(v67 + 88) = v74;
    v75 = *(_QWORD *)(v68 + 104);
    *(_QWORD *)(v67 + 96) = *(_QWORD *)(v68 + 96);
    *(_QWORD *)(v67 + 104) = v75;
    v76 = *(_QWORD *)(v68 + 120);
    *(_QWORD *)(v67 + 112) = *(_QWORD *)(v68 + 112);
    *(_QWORD *)(v67 + 120) = v76;
    v77 = *(_QWORD *)(v68 + 136);
    *(_QWORD *)(v67 + 128) = *(_QWORD *)(v68 + 128);
    *(_QWORD *)(v67 + 136) = v77;
    *(_BYTE *)(v67 + 144) = *(_BYTE *)(v68 + 144);
    swift_bridgeObjectRetain(v69);
    swift_bridgeObjectRetain(v70);
    swift_bridgeObjectRetain(v71);
    swift_bridgeObjectRetain(v72);
    swift_bridgeObjectRetain(v73);
    swift_bridgeObjectRetain(v74);
    swift_bridgeObjectRetain(v75);
    swift_bridgeObjectRetain(v76);
    swift_bridgeObjectRetain(v77);
  }
  return a1;
}

uint64_t destroy for CodeListItemViewModel(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  _QWORD *v7;

  _s7BooksUI13AnyPagedFrameVwxx_0(a1 + 3);
  if (a1[15])
    _s7BooksUI13AnyPagedFrameVwxx_0(a1 + 12);
  if (a1[20])
    _s7BooksUI13AnyPagedFrameVwxx_0(a1 + 17);
  if (a1[25])
    _s7BooksUI13AnyPagedFrameVwxx_0(a1 + 22);
  if (a1[30])
    _s7BooksUI13AnyPagedFrameVwxx_0(a1 + 27);
  if (a1[35])
    _s7BooksUI13AnyPagedFrameVwxx_0(a1 + 32);
  if (a1[40])
    _s7BooksUI13AnyPagedFrameVwxx_0(a1 + 37);
  if (a1[45])
    _s7BooksUI13AnyPagedFrameVwxx_0(a1 + 42);
  if (a1[50])
    _s7BooksUI13AnyPagedFrameVwxx_0(a1 + 47);
  _s7BooksUI13AnyPagedFrameVwxx_0(a1 + 52);
  v2 = type metadata accessor for ListItemViewModel(0);
  v3 = (_QWORD *)((char *)a1 + *(int *)(v2 + 40));
  v4 = type metadata accessor for CardInfo(0);
  if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(v3, 1, v4))
  {
    swift_bridgeObjectRelease(*v3);
    v5 = (char *)v3 + *(int *)(v4 + 20);
    v6 = type metadata accessor for UUID(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  }
  v7 = (_QWORD *)((char *)a1 + *(int *)(v2 + 44));
  swift_bridgeObjectRelease(v7[1]);
  swift_bridgeObjectRelease(v7[3]);
  swift_bridgeObjectRelease(v7[5]);
  swift_bridgeObjectRelease(v7[7]);
  swift_bridgeObjectRelease(v7[9]);
  swift_bridgeObjectRelease(v7[11]);
  swift_bridgeObjectRelease(v7[13]);
  swift_bridgeObjectRelease(v7[15]);
  return swift_bridgeObjectRelease(v7[17]);
}

uint64_t initializeWithCopy for CodeListItemViewModel(uint64_t a1, uint64_t a2)
{
  char v4;
  __int128 v5;
  _BYTE *v6;
  _BYTE *v7;
  _OWORD *v8;
  _OWORD *v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  _OWORD *v13;
  _OWORD *v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  _OWORD *v18;
  _OWORD *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  _OWORD *v23;
  _OWORD *v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  _OWORD *v28;
  _OWORD *v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  _OWORD *v33;
  _OWORD *v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  _OWORD *v38;
  _OWORD *v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  _OWORD *v43;
  _OWORD *v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  void (*v61)(char *, char *, uint64_t);
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v75;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v4 = *(_BYTE *)(a2 + 89);
  v5 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 48) = v5;
  (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1 + 24, a2 + 24);
  v6 = (_BYTE *)(a1 + 64);
  v7 = (_BYTE *)(a2 + 64);
  if ((v4 & 1) != 0)
  {
    *v6 = *v7;
  }
  else
  {
    *(_QWORD *)v6 = *(_QWORD *)v7;
    *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  }
  *(_BYTE *)(a1 + 89) = v4;
  v8 = (_OWORD *)(a1 + 96);
  v9 = (_OWORD *)(a2 + 96);
  v10 = *(_QWORD *)(a2 + 120);
  if (v10)
  {
    v11 = *(_QWORD *)(a2 + 128);
    *(_QWORD *)(a1 + 120) = v10;
    *(_QWORD *)(a1 + 128) = v11;
    (**(void (***)(_OWORD *, _OWORD *))(v10 - 8))(v8, v9);
  }
  else
  {
    v12 = *(_OWORD *)(a2 + 112);
    *v8 = *v9;
    *(_OWORD *)(a1 + 112) = v12;
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  }
  v13 = (_OWORD *)(a1 + 136);
  v14 = (_OWORD *)(a2 + 136);
  v15 = *(_QWORD *)(a2 + 160);
  if (v15)
  {
    v16 = *(_QWORD *)(a2 + 168);
    *(_QWORD *)(a1 + 160) = v15;
    *(_QWORD *)(a1 + 168) = v16;
    (**(void (***)(_OWORD *, _OWORD *))(v15 - 8))(v13, v14);
  }
  else
  {
    v17 = *(_OWORD *)(a2 + 152);
    *v13 = *v14;
    *(_OWORD *)(a1 + 152) = v17;
    *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  }
  v18 = (_OWORD *)(a1 + 176);
  v19 = (_OWORD *)(a2 + 176);
  v20 = *(_QWORD *)(a2 + 200);
  if (v20)
  {
    v21 = *(_QWORD *)(a2 + 208);
    *(_QWORD *)(a1 + 200) = v20;
    *(_QWORD *)(a1 + 208) = v21;
    (**(void (***)(_OWORD *, _OWORD *))(v20 - 8))(v18, v19);
  }
  else
  {
    v22 = *(_OWORD *)(a2 + 192);
    *v18 = *v19;
    *(_OWORD *)(a1 + 192) = v22;
    *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  }
  v23 = (_OWORD *)(a1 + 216);
  v24 = (_OWORD *)(a2 + 216);
  v25 = *(_QWORD *)(a2 + 240);
  if (v25)
  {
    v26 = *(_QWORD *)(a2 + 248);
    *(_QWORD *)(a1 + 240) = v25;
    *(_QWORD *)(a1 + 248) = v26;
    (**(void (***)(_OWORD *, _OWORD *))(v25 - 8))(v23, v24);
  }
  else
  {
    v27 = *(_OWORD *)(a2 + 232);
    *v23 = *v24;
    *(_OWORD *)(a1 + 232) = v27;
    *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
  }
  v28 = (_OWORD *)(a1 + 256);
  v29 = (_OWORD *)(a2 + 256);
  v30 = *(_QWORD *)(a2 + 280);
  if (v30)
  {
    v31 = *(_QWORD *)(a2 + 288);
    *(_QWORD *)(a1 + 280) = v30;
    *(_QWORD *)(a1 + 288) = v31;
    (**(void (***)(_OWORD *, _OWORD *))(v30 - 8))(v28, v29);
  }
  else
  {
    v32 = *(_OWORD *)(a2 + 272);
    *v28 = *v29;
    *(_OWORD *)(a1 + 272) = v32;
    *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
  }
  v33 = (_OWORD *)(a1 + 296);
  v34 = (_OWORD *)(a2 + 296);
  v35 = *(_QWORD *)(a2 + 320);
  if (v35)
  {
    v36 = *(_QWORD *)(a2 + 328);
    *(_QWORD *)(a1 + 320) = v35;
    *(_QWORD *)(a1 + 328) = v36;
    (**(void (***)(_OWORD *, _OWORD *))(v35 - 8))(v33, v34);
  }
  else
  {
    v37 = *(_OWORD *)(a2 + 312);
    *v33 = *v34;
    *(_OWORD *)(a1 + 312) = v37;
    *(_QWORD *)(a1 + 328) = *(_QWORD *)(a2 + 328);
  }
  v38 = (_OWORD *)(a1 + 336);
  v39 = (_OWORD *)(a2 + 336);
  v40 = *(_QWORD *)(a2 + 360);
  if (v40)
  {
    v41 = *(_QWORD *)(a2 + 368);
    *(_QWORD *)(a1 + 360) = v40;
    *(_QWORD *)(a1 + 368) = v41;
    (**(void (***)(_OWORD *, _OWORD *))(v40 - 8))(v38, v39);
  }
  else
  {
    v42 = *(_OWORD *)(a2 + 352);
    *v38 = *v39;
    *(_OWORD *)(a1 + 352) = v42;
    *(_QWORD *)(a1 + 368) = *(_QWORD *)(a2 + 368);
  }
  v43 = (_OWORD *)(a1 + 376);
  v44 = (_OWORD *)(a2 + 376);
  v45 = *(_QWORD *)(a2 + 400);
  if (v45)
  {
    v46 = *(_QWORD *)(a2 + 408);
    *(_QWORD *)(a1 + 400) = v45;
    *(_QWORD *)(a1 + 408) = v46;
    (**(void (***)(_OWORD *, _OWORD *))(v45 - 8))(v43, v44);
  }
  else
  {
    v47 = *(_OWORD *)(a2 + 392);
    *v43 = *v44;
    *(_OWORD *)(a1 + 392) = v47;
    *(_QWORD *)(a1 + 408) = *(_QWORD *)(a2 + 408);
  }
  v48 = *(_QWORD *)(a2 + 440);
  v49 = *(_QWORD *)(a2 + 448);
  *(_QWORD *)(a1 + 440) = v48;
  *(_QWORD *)(a1 + 448) = v49;
  (**(void (***)(uint64_t, uint64_t))(v48 - 8))(a1 + 416, a2 + 416);
  v50 = type metadata accessor for ListItemViewModel(0);
  v51 = *(int *)(v50 + 40);
  v52 = (uint64_t *)(a1 + v51);
  v53 = (uint64_t *)(a2 + v51);
  v54 = type metadata accessor for CardInfo(0);
  v55 = *(_QWORD *)(v54 - 8);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v55 + 48))(v53, 1, v54))
  {
    v56 = sub_5440(&qword_2618C8);
    memcpy(v52, v53, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
  }
  else
  {
    v57 = *v53;
    *v52 = *v53;
    v58 = *(int *)(v54 + 20);
    v59 = (char *)v52 + v58;
    v75 = (char *)v53 + v58;
    v60 = type metadata accessor for UUID(0);
    v61 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v60 - 8) + 16);
    swift_bridgeObjectRetain(v57);
    v61(v59, v75, v60);
    (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v55 + 56))(v52, 0, 1, v54);
  }
  v62 = *(int *)(v50 + 44);
  v63 = a1 + v62;
  v64 = a2 + v62;
  v65 = *(_QWORD *)(v64 + 8);
  *(_QWORD *)v63 = *(_QWORD *)v64;
  *(_QWORD *)(v63 + 8) = v65;
  v66 = *(_QWORD *)(v64 + 24);
  *(_QWORD *)(v63 + 16) = *(_QWORD *)(v64 + 16);
  *(_QWORD *)(v63 + 24) = v66;
  v67 = *(_QWORD *)(v64 + 40);
  *(_QWORD *)(v63 + 32) = *(_QWORD *)(v64 + 32);
  *(_QWORD *)(v63 + 40) = v67;
  v68 = *(_QWORD *)(v64 + 56);
  *(_QWORD *)(v63 + 48) = *(_QWORD *)(v64 + 48);
  *(_QWORD *)(v63 + 56) = v68;
  v69 = *(_QWORD *)(v64 + 72);
  *(_QWORD *)(v63 + 64) = *(_QWORD *)(v64 + 64);
  *(_QWORD *)(v63 + 72) = v69;
  v70 = *(_QWORD *)(v64 + 88);
  *(_QWORD *)(v63 + 80) = *(_QWORD *)(v64 + 80);
  *(_QWORD *)(v63 + 88) = v70;
  v71 = *(_QWORD *)(v64 + 104);
  *(_QWORD *)(v63 + 96) = *(_QWORD *)(v64 + 96);
  *(_QWORD *)(v63 + 104) = v71;
  v72 = *(_QWORD *)(v64 + 120);
  *(_QWORD *)(v63 + 112) = *(_QWORD *)(v64 + 112);
  *(_QWORD *)(v63 + 120) = v72;
  v73 = *(_QWORD *)(v64 + 136);
  *(_QWORD *)(v63 + 128) = *(_QWORD *)(v64 + 128);
  *(_QWORD *)(v63 + 136) = v73;
  *(_BYTE *)(v63 + 144) = *(_BYTE *)(v64 + 144);
  swift_bridgeObjectRetain(v65);
  swift_bridgeObjectRetain(v66);
  swift_bridgeObjectRetain(v67);
  swift_bridgeObjectRetain(v68);
  swift_bridgeObjectRetain(v69);
  swift_bridgeObjectRetain(v70);
  swift_bridgeObjectRetain(v71);
  swift_bridgeObjectRetain(v72);
  swift_bridgeObjectRetain(v73);
  return a1;
}

uint64_t assignWithCopy for CodeListItemViewModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t (*v41)(uint64_t *, uint64_t, uint64_t);
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  void (*v48)(char *, char *, uint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  char *v78;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  if (a1 != a2)
  {
    sub_2EFF0((_QWORD *)(a1 + 24));
    v5 = *(_BYTE *)(a2 + 89);
    v6 = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 48) = v6;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1 + 24, a2 + 24);
    v7 = (_BYTE *)(a1 + 64);
    v8 = (_BYTE *)(a2 + 64);
    if ((v5 & 1) != 0)
    {
      *v7 = *v8;
    }
    else
    {
      v9 = *(_QWORD *)v8;
      *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
      *(_QWORD *)v7 = v9;
      v10 = *(_QWORD *)(a2 + 80);
      *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
      *(_QWORD *)(a1 + 80) = v10;
    }
    *(_BYTE *)(a1 + 89) = v5;
  }
  v11 = *(_QWORD *)(a2 + 120);
  if (*(_QWORD *)(a1 + 120))
  {
    if (v11)
    {
      sub_142F8((_QWORD *)(a1 + 96), (_QWORD *)(a2 + 96));
      goto LABEL_13;
    }
    _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)(a1 + 96));
  }
  else if (v11)
  {
    *(_QWORD *)(a1 + 120) = v11;
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
    (**(void (***)(uint64_t, uint64_t))(v11 - 8))(a1 + 96, a2 + 96);
    goto LABEL_13;
  }
  v12 = *(_OWORD *)(a2 + 96);
  v13 = *(_OWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 96) = v12;
  *(_OWORD *)(a1 + 112) = v13;
LABEL_13:
  v14 = *(_QWORD *)(a2 + 160);
  if (*(_QWORD *)(a1 + 160))
  {
    if (v14)
    {
      sub_142F8((_QWORD *)(a1 + 136), (_QWORD *)(a2 + 136));
      goto LABEL_20;
    }
    _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)(a1 + 136));
  }
  else if (v14)
  {
    *(_QWORD *)(a1 + 160) = v14;
    *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
    (**(void (***)(uint64_t, uint64_t))(v14 - 8))(a1 + 136, a2 + 136);
    goto LABEL_20;
  }
  v15 = *(_OWORD *)(a2 + 136);
  v16 = *(_OWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 136) = v15;
  *(_OWORD *)(a1 + 152) = v16;
LABEL_20:
  v17 = *(_QWORD *)(a2 + 200);
  if (*(_QWORD *)(a1 + 200))
  {
    if (v17)
    {
      sub_142F8((_QWORD *)(a1 + 176), (_QWORD *)(a2 + 176));
      goto LABEL_27;
    }
    _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)(a1 + 176));
  }
  else if (v17)
  {
    *(_QWORD *)(a1 + 200) = v17;
    *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
    (**(void (***)(uint64_t, uint64_t))(v17 - 8))(a1 + 176, a2 + 176);
    goto LABEL_27;
  }
  v18 = *(_OWORD *)(a2 + 176);
  v19 = *(_OWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 176) = v18;
  *(_OWORD *)(a1 + 192) = v19;
LABEL_27:
  v20 = *(_QWORD *)(a2 + 240);
  if (*(_QWORD *)(a1 + 240))
  {
    if (v20)
    {
      sub_142F8((_QWORD *)(a1 + 216), (_QWORD *)(a2 + 216));
      goto LABEL_34;
    }
    _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)(a1 + 216));
  }
  else if (v20)
  {
    *(_QWORD *)(a1 + 240) = v20;
    *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
    (**(void (***)(uint64_t, uint64_t))(v20 - 8))(a1 + 216, a2 + 216);
    goto LABEL_34;
  }
  v21 = *(_OWORD *)(a2 + 216);
  v22 = *(_OWORD *)(a2 + 232);
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
  *(_OWORD *)(a1 + 216) = v21;
  *(_OWORD *)(a1 + 232) = v22;
LABEL_34:
  v23 = *(_QWORD *)(a2 + 280);
  if (*(_QWORD *)(a1 + 280))
  {
    if (v23)
    {
      sub_142F8((_QWORD *)(a1 + 256), (_QWORD *)(a2 + 256));
      goto LABEL_41;
    }
    _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)(a1 + 256));
  }
  else if (v23)
  {
    *(_QWORD *)(a1 + 280) = v23;
    *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
    (**(void (***)(uint64_t, uint64_t))(v23 - 8))(a1 + 256, a2 + 256);
    goto LABEL_41;
  }
  v24 = *(_OWORD *)(a2 + 256);
  v25 = *(_OWORD *)(a2 + 272);
  *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
  *(_OWORD *)(a1 + 256) = v24;
  *(_OWORD *)(a1 + 272) = v25;
LABEL_41:
  v26 = *(_QWORD *)(a2 + 320);
  if (*(_QWORD *)(a1 + 320))
  {
    if (v26)
    {
      sub_142F8((_QWORD *)(a1 + 296), (_QWORD *)(a2 + 296));
      goto LABEL_48;
    }
    _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)(a1 + 296));
  }
  else if (v26)
  {
    *(_QWORD *)(a1 + 320) = v26;
    *(_QWORD *)(a1 + 328) = *(_QWORD *)(a2 + 328);
    (**(void (***)(uint64_t, uint64_t))(v26 - 8))(a1 + 296, a2 + 296);
    goto LABEL_48;
  }
  v27 = *(_OWORD *)(a2 + 296);
  v28 = *(_OWORD *)(a2 + 312);
  *(_QWORD *)(a1 + 328) = *(_QWORD *)(a2 + 328);
  *(_OWORD *)(a1 + 296) = v27;
  *(_OWORD *)(a1 + 312) = v28;
LABEL_48:
  v29 = *(_QWORD *)(a2 + 360);
  if (*(_QWORD *)(a1 + 360))
  {
    if (v29)
    {
      sub_142F8((_QWORD *)(a1 + 336), (_QWORD *)(a2 + 336));
      goto LABEL_55;
    }
    _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)(a1 + 336));
  }
  else if (v29)
  {
    *(_QWORD *)(a1 + 360) = v29;
    *(_QWORD *)(a1 + 368) = *(_QWORD *)(a2 + 368);
    (**(void (***)(uint64_t, uint64_t))(v29 - 8))(a1 + 336, a2 + 336);
    goto LABEL_55;
  }
  v30 = *(_OWORD *)(a2 + 336);
  v31 = *(_OWORD *)(a2 + 352);
  *(_QWORD *)(a1 + 368) = *(_QWORD *)(a2 + 368);
  *(_OWORD *)(a1 + 336) = v30;
  *(_OWORD *)(a1 + 352) = v31;
LABEL_55:
  v32 = *(_QWORD *)(a2 + 400);
  if (*(_QWORD *)(a1 + 400))
  {
    if (v32)
    {
      sub_142F8((_QWORD *)(a1 + 376), (_QWORD *)(a2 + 376));
      goto LABEL_62;
    }
    _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)(a1 + 376));
  }
  else if (v32)
  {
    *(_QWORD *)(a1 + 400) = v32;
    *(_QWORD *)(a1 + 408) = *(_QWORD *)(a2 + 408);
    (**(void (***)(uint64_t, uint64_t))(v32 - 8))(a1 + 376, a2 + 376);
    goto LABEL_62;
  }
  v33 = *(_OWORD *)(a2 + 376);
  v34 = *(_OWORD *)(a2 + 392);
  *(_QWORD *)(a1 + 408) = *(_QWORD *)(a2 + 408);
  *(_OWORD *)(a1 + 376) = v33;
  *(_OWORD *)(a1 + 392) = v34;
LABEL_62:
  sub_142F8((_QWORD *)(a1 + 416), (_QWORD *)(a2 + 416));
  v35 = type metadata accessor for ListItemViewModel(0);
  v36 = *(int *)(v35 + 40);
  v37 = (uint64_t *)(a1 + v36);
  v38 = (uint64_t *)(a2 + v36);
  v39 = type metadata accessor for CardInfo(0);
  v40 = *(_QWORD *)(v39 - 8);
  v41 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v40 + 48);
  v42 = v41(v37, 1, v39);
  v43 = v41(v38, 1, v39);
  if (!v42)
  {
    if (!v43)
    {
      v72 = *v38;
      v73 = *v37;
      *v37 = *v38;
      swift_bridgeObjectRetain(v72);
      swift_bridgeObjectRelease(v73);
      v74 = *(int *)(v39 + 20);
      v75 = (char *)v37 + v74;
      v76 = (char *)v38 + v74;
      v77 = type metadata accessor for UUID(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v77 - 8) + 24))(v75, v76, v77);
      goto LABEL_68;
    }
    sub_AF1B0((uint64_t)v37);
    goto LABEL_67;
  }
  if (v43)
  {
LABEL_67:
    v49 = sub_5440(&qword_2618C8);
    memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
    goto LABEL_68;
  }
  v44 = *v38;
  *v37 = *v38;
  v45 = *(int *)(v39 + 20);
  v46 = (char *)v37 + v45;
  v78 = (char *)v38 + v45;
  v47 = type metadata accessor for UUID(0);
  v48 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v47 - 8) + 16);
  swift_bridgeObjectRetain(v44);
  v48(v46, v78, v47);
  (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v40 + 56))(v37, 0, 1, v39);
LABEL_68:
  v50 = *(int *)(v35 + 44);
  v51 = a1 + v50;
  v52 = a2 + v50;
  *(_QWORD *)v51 = *(_QWORD *)(a2 + v50);
  v53 = *(_QWORD *)(a2 + v50 + 8);
  v54 = *(_QWORD *)(a1 + v50 + 8);
  *(_QWORD *)(v51 + 8) = v53;
  swift_bridgeObjectRetain(v53);
  swift_bridgeObjectRelease(v54);
  *(_QWORD *)(v51 + 16) = *(_QWORD *)(v52 + 16);
  v55 = *(_QWORD *)(v52 + 24);
  v56 = *(_QWORD *)(v51 + 24);
  *(_QWORD *)(v51 + 24) = v55;
  swift_bridgeObjectRetain(v55);
  swift_bridgeObjectRelease(v56);
  *(_QWORD *)(v51 + 32) = *(_QWORD *)(v52 + 32);
  v57 = *(_QWORD *)(v52 + 40);
  v58 = *(_QWORD *)(v51 + 40);
  *(_QWORD *)(v51 + 40) = v57;
  swift_bridgeObjectRetain(v57);
  swift_bridgeObjectRelease(v58);
  *(_QWORD *)(v51 + 48) = *(_QWORD *)(v52 + 48);
  v59 = *(_QWORD *)(v52 + 56);
  v60 = *(_QWORD *)(v51 + 56);
  *(_QWORD *)(v51 + 56) = v59;
  swift_bridgeObjectRetain(v59);
  swift_bridgeObjectRelease(v60);
  *(_QWORD *)(v51 + 64) = *(_QWORD *)(v52 + 64);
  v61 = *(_QWORD *)(v52 + 72);
  v62 = *(_QWORD *)(v51 + 72);
  *(_QWORD *)(v51 + 72) = v61;
  swift_bridgeObjectRetain(v61);
  swift_bridgeObjectRelease(v62);
  *(_QWORD *)(v51 + 80) = *(_QWORD *)(v52 + 80);
  v63 = *(_QWORD *)(v52 + 88);
  v64 = *(_QWORD *)(v51 + 88);
  *(_QWORD *)(v51 + 88) = v63;
  swift_bridgeObjectRetain(v63);
  swift_bridgeObjectRelease(v64);
  *(_QWORD *)(v51 + 96) = *(_QWORD *)(v52 + 96);
  v65 = *(_QWORD *)(v52 + 104);
  v66 = *(_QWORD *)(v51 + 104);
  *(_QWORD *)(v51 + 104) = v65;
  swift_bridgeObjectRetain(v65);
  swift_bridgeObjectRelease(v66);
  *(_QWORD *)(v51 + 112) = *(_QWORD *)(v52 + 112);
  v67 = *(_QWORD *)(v52 + 120);
  v68 = *(_QWORD *)(v51 + 120);
  *(_QWORD *)(v51 + 120) = v67;
  swift_bridgeObjectRetain(v67);
  swift_bridgeObjectRelease(v68);
  *(_QWORD *)(v51 + 128) = *(_QWORD *)(v52 + 128);
  v69 = *(_QWORD *)(v52 + 136);
  v70 = *(_QWORD *)(v51 + 136);
  *(_QWORD *)(v51 + 136) = v69;
  swift_bridgeObjectRetain(v69);
  swift_bridgeObjectRelease(v70);
  *(_BYTE *)(v51 + 144) = *(_BYTE *)(v52 + 144);
  return a1;
}

uint64_t initializeWithTake for CodeListItemViewModel(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_WORD *)(a1 + 88) = *(_WORD *)(a2 + 88);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  memcpy((void *)(a1 + 96), (const void *)(a2 + 96), 0x118uLL);
  v4 = *(_OWORD *)(a2 + 392);
  *(_OWORD *)(a1 + 376) = *(_OWORD *)(a2 + 376);
  *(_OWORD *)(a1 + 392) = v4;
  *(_QWORD *)(a1 + 408) = *(_QWORD *)(a2 + 408);
  v5 = *(_OWORD *)(a2 + 432);
  *(_OWORD *)(a1 + 416) = *(_OWORD *)(a2 + 416);
  *(_OWORD *)(a1 + 432) = v5;
  *(_QWORD *)(a1 + 448) = *(_QWORD *)(a2 + 448);
  v6 = type metadata accessor for ListItemViewModel(0);
  v7 = *(int *)(v6 + 40);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  v10 = type metadata accessor for CardInfo(0);
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    v12 = sub_5440(&qword_2618C8);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    *v8 = *v9;
    v13 = *(int *)(v10 + 20);
    v14 = (char *)v8 + v13;
    v15 = (char *)v9 + v13;
    v16 = type metadata accessor for UUID(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v14, v15, v16);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  v17 = *(int *)(v6 + 44);
  v18 = a1 + v17;
  v19 = a2 + v17;
  v20 = *(_OWORD *)(v19 + 112);
  *(_OWORD *)(v18 + 96) = *(_OWORD *)(v19 + 96);
  *(_OWORD *)(v18 + 112) = v20;
  *(_OWORD *)(v18 + 128) = *(_OWORD *)(v19 + 128);
  *(_BYTE *)(v18 + 144) = *(_BYTE *)(v19 + 144);
  v21 = *(_OWORD *)(v19 + 48);
  *(_OWORD *)(v18 + 32) = *(_OWORD *)(v19 + 32);
  *(_OWORD *)(v18 + 48) = v21;
  v22 = *(_OWORD *)(v19 + 80);
  *(_OWORD *)(v18 + 64) = *(_OWORD *)(v19 + 64);
  *(_OWORD *)(v18 + 80) = v22;
  v23 = *(_OWORD *)(v19 + 16);
  *(_OWORD *)v18 = *(_OWORD *)v19;
  *(_OWORD *)(v18 + 16) = v23;
  return a1;
}

uint64_t assignWithTake for CodeListItemViewModel(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t *, uint64_t, uint64_t);
  int v20;
  int v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  if (a1 != a2)
  {
    sub_2EFF0((_QWORD *)(a1 + 24));
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(_WORD *)(a1 + 88) = *(_WORD *)(a2 + 88);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  }
  if (*(_QWORD *)(a1 + 120))
    _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)(a1 + 96));
  v4 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v4;
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  if (*(_QWORD *)(a1 + 160))
    _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)(a1 + 136));
  v5 = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = v5;
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  if (*(_QWORD *)(a1 + 200))
    _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)(a1 + 176));
  v6 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 192) = v6;
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  if (*(_QWORD *)(a1 + 240))
    _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)(a1 + 216));
  v7 = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(a1 + 232) = v7;
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
  if (*(_QWORD *)(a1 + 280))
    _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)(a1 + 256));
  v8 = *(_OWORD *)(a2 + 272);
  *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
  *(_OWORD *)(a1 + 272) = v8;
  *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
  if (*(_QWORD *)(a1 + 320))
    _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)(a1 + 296));
  v9 = *(_OWORD *)(a2 + 312);
  *(_OWORD *)(a1 + 296) = *(_OWORD *)(a2 + 296);
  *(_OWORD *)(a1 + 312) = v9;
  *(_QWORD *)(a1 + 328) = *(_QWORD *)(a2 + 328);
  if (*(_QWORD *)(a1 + 360))
    _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)(a1 + 336));
  v10 = *(_OWORD *)(a2 + 352);
  *(_OWORD *)(a1 + 336) = *(_OWORD *)(a2 + 336);
  *(_OWORD *)(a1 + 352) = v10;
  *(_QWORD *)(a1 + 368) = *(_QWORD *)(a2 + 368);
  if (*(_QWORD *)(a1 + 400))
    _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)(a1 + 376));
  v11 = *(_OWORD *)(a2 + 392);
  *(_OWORD *)(a1 + 376) = *(_OWORD *)(a2 + 376);
  *(_OWORD *)(a1 + 392) = v11;
  *(_QWORD *)(a1 + 408) = *(_QWORD *)(a2 + 408);
  _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)(a1 + 416));
  v12 = *(_OWORD *)(a2 + 432);
  *(_OWORD *)(a1 + 416) = *(_OWORD *)(a2 + 416);
  *(_OWORD *)(a1 + 432) = v12;
  *(_QWORD *)(a1 + 448) = *(_QWORD *)(a2 + 448);
  v13 = type metadata accessor for ListItemViewModel(0);
  v14 = *(int *)(v13 + 40);
  v15 = (uint64_t *)(a1 + v14);
  v16 = (uint64_t *)(a2 + v14);
  v17 = type metadata accessor for CardInfo(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v18 + 48);
  v20 = v19(v15, 1, v17);
  v21 = v19(v16, 1, v17);
  if (!v20)
  {
    if (!v21)
    {
      v49 = *v15;
      *v15 = *v16;
      swift_bridgeObjectRelease(v49);
      v50 = *(int *)(v17 + 20);
      v51 = (char *)v15 + v50;
      v52 = (char *)v16 + v50;
      v53 = type metadata accessor for UUID(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v53 - 8) + 40))(v51, v52, v53);
      goto LABEL_25;
    }
    sub_AF1B0((uint64_t)v15);
    goto LABEL_24;
  }
  if (v21)
  {
LABEL_24:
    v26 = sub_5440(&qword_2618C8);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    goto LABEL_25;
  }
  *v15 = *v16;
  v22 = *(int *)(v17 + 20);
  v23 = (char *)v15 + v22;
  v24 = (char *)v16 + v22;
  v25 = type metadata accessor for UUID(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 32))(v23, v24, v25);
  (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
LABEL_25:
  v27 = *(int *)(v13 + 44);
  v28 = a1 + v27;
  v29 = a2 + v27;
  v30 = *(_QWORD *)(v29 + 8);
  v31 = *(_QWORD *)(a1 + v27 + 8);
  *(_QWORD *)v28 = *(_QWORD *)v29;
  *(_QWORD *)(v28 + 8) = v30;
  swift_bridgeObjectRelease(v31);
  v32 = *(_QWORD *)(v29 + 24);
  v33 = *(_QWORD *)(v28 + 24);
  *(_QWORD *)(v28 + 16) = *(_QWORD *)(v29 + 16);
  *(_QWORD *)(v28 + 24) = v32;
  swift_bridgeObjectRelease(v33);
  v34 = *(_QWORD *)(v29 + 40);
  v35 = *(_QWORD *)(v28 + 40);
  *(_QWORD *)(v28 + 32) = *(_QWORD *)(v29 + 32);
  *(_QWORD *)(v28 + 40) = v34;
  swift_bridgeObjectRelease(v35);
  v36 = *(_QWORD *)(v29 + 56);
  v37 = *(_QWORD *)(v28 + 56);
  *(_QWORD *)(v28 + 48) = *(_QWORD *)(v29 + 48);
  *(_QWORD *)(v28 + 56) = v36;
  swift_bridgeObjectRelease(v37);
  v38 = *(_QWORD *)(v29 + 72);
  v39 = *(_QWORD *)(v28 + 72);
  *(_QWORD *)(v28 + 64) = *(_QWORD *)(v29 + 64);
  *(_QWORD *)(v28 + 72) = v38;
  swift_bridgeObjectRelease(v39);
  v40 = *(_QWORD *)(v29 + 88);
  v41 = *(_QWORD *)(v28 + 88);
  *(_QWORD *)(v28 + 80) = *(_QWORD *)(v29 + 80);
  *(_QWORD *)(v28 + 88) = v40;
  swift_bridgeObjectRelease(v41);
  v42 = *(_QWORD *)(v29 + 104);
  v43 = *(_QWORD *)(v28 + 104);
  *(_QWORD *)(v28 + 96) = *(_QWORD *)(v29 + 96);
  *(_QWORD *)(v28 + 104) = v42;
  swift_bridgeObjectRelease(v43);
  v44 = *(_QWORD *)(v29 + 120);
  v45 = *(_QWORD *)(v28 + 120);
  *(_QWORD *)(v28 + 112) = *(_QWORD *)(v29 + 112);
  *(_QWORD *)(v28 + 120) = v44;
  swift_bridgeObjectRelease(v45);
  v46 = *(_QWORD *)(v29 + 136);
  v47 = *(_QWORD *)(v28 + 136);
  *(_QWORD *)(v28 + 128) = *(_QWORD *)(v29 + 128);
  *(_QWORD *)(v28 + 136) = v46;
  swift_bridgeObjectRelease(v47);
  *(_BYTE *)(v28 + 144) = *(_BYTE *)(v29 + 144);
  return a1;
}

uint64_t getEnumTagSinglePayload for CodeListItemViewModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_CC660);
}

uint64_t sub_CC660(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ListItemViewModel(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for CodeListItemViewModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_CC6A8);
}

uint64_t sub_CC6A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ListItemViewModel(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t sub_CC6E8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  result = type metadata accessor for ListItemViewModel(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 1, &v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ListItemDecodingError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_CC79C + 4 * byte_1E9479[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_CC7D0 + 4 * byte_1E9474[v4]))();
}

uint64_t sub_CC7D0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_CC7D8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0xCC7E0);
  return result;
}

uint64_t sub_CC7EC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0xCC7F4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_CC7F8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_CC800(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ListItemDecodingError()
{
  return &type metadata for ListItemDecodingError;
}

uint64_t storeEnumTagSinglePayload for CodeListItemViewModel.Context(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_CC868 + 4 * byte_1E9483[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_CC89C + 4 * byte_1E947E[v4]))();
}

uint64_t sub_CC89C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_CC8A4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0xCC8ACLL);
  return result;
}

uint64_t sub_CC8B8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0xCC8C0);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_CC8C4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_CC8CC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CodeListItemViewModel.Context()
{
  return &type metadata for CodeListItemViewModel.Context;
}

uint64_t storeEnumTagSinglePayload for CodeListItemViewModel.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_CC934 + 4 * byte_1E948D[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_CC968 + 4 * byte_1E9488[v4]))();
}

uint64_t sub_CC968(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_CC970(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0xCC978);
  return result;
}

uint64_t sub_CC984(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0xCC98CLL);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_CC990(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_CC998(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CodeListItemViewModel.CodingKeys()
{
  return &type metadata for CodeListItemViewModel.CodingKeys;
}

unint64_t sub_CC9B8()
{
  unint64_t result;

  result = qword_2641B0;
  if (!qword_2641B0)
  {
    result = swift_getWitnessTable(&unk_1E972C, &type metadata for CodeListItemViewModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2641B0);
  }
  return result;
}

unint64_t sub_CCA00()
{
  unint64_t result;

  result = qword_2641B8;
  if (!qword_2641B8)
  {
    result = swift_getWitnessTable(&unk_1E97CC, &type metadata for CodeListItemViewModel.Context);
    atomic_store(result, (unint64_t *)&qword_2641B8);
  }
  return result;
}

unint64_t sub_CCA48()
{
  unint64_t result;

  result = qword_2641C0;
  if (!qword_2641C0)
  {
    result = swift_getWitnessTable(&unk_1E9664, &type metadata for CodeListItemViewModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2641C0);
  }
  return result;
}

unint64_t sub_CCA90()
{
  unint64_t result;

  result = qword_2641C8;
  if (!qword_2641C8)
  {
    result = swift_getWitnessTable(&unk_1E968C, &type metadata for CodeListItemViewModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2641C8);
  }
  return result;
}

unint64_t sub_CCAD4(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_2498B0, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 6)
    return 6;
  else
    return v3;
}

unint64_t sub_CCB1C()
{
  unint64_t result;

  result = qword_2641D0;
  if (!qword_2641D0)
  {
    result = swift_getWitnessTable(&unk_1E9754, &type metadata for CodeListItemViewModel.Context);
    atomic_store(result, (unint64_t *)&qword_2641D0);
  }
  return result;
}

unint64_t sub_CCB60(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_249960, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 4)
    return 4;
  else
    return v3;
}

__n128 TransitionFrameViewModel.init(section:)@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_CCBB4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  const char *v20;
  char *v21;
  id v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t ObjCClassFromMetadata;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD v40[2];

  v1 = type metadata accessor for Locale(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = __chkstk_darwin(v1);
  v5 = (char *)v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v7 = (char *)v40 - v6;
  v8 = type metadata accessor for String.LocalizationValue(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)v40 - v13;
  v15 = v0[1];
  if (v15)
  {
    if (v15 != 1)
    {
      v40[0] = *v0;
      swift_bridgeObjectRetain(v15);
      v30 = String.LocalizationValue.init(stringLiteral:)(0xD00000000000003ALL, 0x80000000001FBD60);
      static Locale.current.getter(v30);
      (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v12, v14, v8);
      v31 = type metadata accessor for BundleFinder();
      ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v31);
      v33 = objc_msgSend((id)objc_opt_self(NSBundle), "bundleForClass:", ObjCClassFromMetadata);
      (*(void (**)(char *, char *, uint64_t))(v2 + 16))(v5, v7, v1);
      v34 = String.init(localized:table:bundle:locale:comment:)(v12, 0, 0, v33, v5, "Year in Review Reader Type Section Transition Frame title. Text quoted inside ** represents text to be highlighted in orange.", 125, 2);
      v36 = v35;
      (*(void (**)(char *, uint64_t))(v2 + 8))(v7, v1);
      (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v8);
      v37 = sub_5440(&qword_25E310);
      v38 = swift_allocObject(v37, 72, 7);
      *(_OWORD *)(v38 + 16) = xmmword_1E0B70;
      *(_QWORD *)(v38 + 56) = &type metadata for String;
      *(_QWORD *)(v38 + 64) = sub_578F0();
      *(_QWORD *)(v38 + 32) = v40[0];
      *(_QWORD *)(v38 + 40) = v15;
      v29 = static String.localizedStringWithFormat(_:_:)(v34, v36, v38);
      swift_bridgeObjectRelease(v36);
      swift_bridgeObjectRelease(v38);
      return v29;
    }
    v16 = String.LocalizationValue.init(stringLiteral:)(0x100000000000002CLL, 0x80000000001FBE20);
    static Locale.current.getter(v16);
    (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v12, v14, v8);
    v17 = type metadata accessor for BundleFinder();
    v18 = swift_getObjCClassFromMetadata(v17);
    v19 = objc_msgSend((id)objc_opt_self(NSBundle), "bundleForClass:", v18);
    (*(void (**)(char *, char *, uint64_t))(v2 + 16))(v5, v7, v1);
    v20 = "Year in Review Reading Insights Section Transition Frame title. Text quoted inside ** represents text to be hi"
          "ghlighted in orange.";
    v21 = v12;
    v22 = v19;
    v23 = v5;
    v24 = 130;
  }
  else
  {
    v25 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000033, 0x80000000001FBEE0);
    static Locale.current.getter(v25);
    (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v12, v14, v8);
    v26 = type metadata accessor for BundleFinder();
    v27 = swift_getObjCClassFromMetadata(v26);
    v28 = objc_msgSend((id)objc_opt_self(NSBundle), "bundleForClass:", v27);
    (*(void (**)(char *, char *, uint64_t))(v2 + 16))(v5, v7, v1);
    v20 = "Year in Review Highlights Section Transition Frame title. Text quoted inside ** represents text to be highlighted in orange.";
    v21 = v12;
    v22 = v28;
    v23 = v5;
    v24 = 124;
  }
  v29 = String.init(localized:table:bundle:locale:comment:)(v21, 0, 0, v22, v23, v20, v24, 2);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v7, v1);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v8);
  return v29;
}

uint64_t sub_CCF94()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  const char *v20;
  _BYTE *v21;
  id v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t ObjCClassFromMetadata;
  id v28;
  uint64_t v29;
  _BYTE v31[16];

  v1 = type metadata accessor for Locale(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = __chkstk_darwin(v1);
  v5 = &v31[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v3);
  v7 = &v31[-v6];
  v8 = type metadata accessor for String.LocalizationValue(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = &v31[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v10);
  v14 = &v31[-v13];
  v15 = *(_QWORD *)(v0 + 8);
  if (v15 == 1)
  {
    v25 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000058, 0x80000000001FBC00);
    static Locale.current.getter(v25);
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v9 + 16))(v12, v14, v8);
    v26 = type metadata accessor for BundleFinder();
    ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v26);
    v28 = objc_msgSend((id)objc_opt_self(NSBundle), "bundleForClass:", ObjCClassFromMetadata);
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v2 + 16))(v5, v7, v1);
    v20 = "Accessibility string for insights image";
    v21 = v12;
    v22 = v28;
    v23 = v5;
    v24 = 39;
  }
  else
  {
    if (v15)
      return 0;
    v16 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000059, 0x80000000001FBC90);
    static Locale.current.getter(v16);
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v9 + 16))(v12, v14, v8);
    v17 = type metadata accessor for BundleFinder();
    v18 = swift_getObjCClassFromMetadata(v17);
    v19 = objc_msgSend((id)objc_opt_self(NSBundle), "bundleForClass:", v18);
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v2 + 16))(v5, v7, v1);
    v20 = "Accessibility string for highlights image";
    v21 = v12;
    v22 = v19;
    v23 = v5;
    v24 = 41;
  }
  v29 = String.init(localized:table:bundle:locale:comment:)(v21, 0, 0, v22, v23, v20, v24, 2);
  (*(void (**)(_BYTE *, uint64_t))(v2 + 8))(v7, v1);
  (*(void (**)(_BYTE *, uint64_t))(v9 + 8))(v14, v8);
  return v29;
}

uint64_t sub_CD228@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t ObjCClassFromMetadata;
  id v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;

  v3 = *(_QWORD *)(v1 + 8);
  if (v3)
  {
    if (v3 != 1)
    {
      v11 = type metadata accessor for ImageResource(0);
      v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56);
      v13 = a1;
      v14 = 1;
      return v12(v13, v14, 1, v11);
    }
    v4 = type metadata accessor for BundleFinder();
    ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v4);
    v6 = objc_msgSend((id)objc_opt_self(NSBundle), "bundleForClass:", ObjCClassFromMetadata);
    v7 = 0x80000000001FBD20;
    v8 = 0xD000000000000017;
  }
  else
  {
    v9 = type metadata accessor for BundleFinder();
    v10 = swift_getObjCClassFromMetadata(v9);
    v6 = objc_msgSend((id)objc_opt_self(NSBundle), "bundleForClass:", v10);
    v8 = 0xD000000000000019;
    v7 = 0x80000000001FBD40;
  }
  ImageResource.init(name:bundle:)(v8, v7, v6);
  v11 = type metadata accessor for ImageResource(0);
  v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56);
  v13 = a1;
  v14 = 0;
  return v12(v13, v14, 1, v11);
}

uint64_t sub_CD348()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  uint64_t v21;

  v1 = sub_5440(&qword_2642E8);
  __chkstk_darwin(v1);
  v3 = (char *)&v21 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_5440(&qword_2642F0);
  __chkstk_darwin(v4);
  v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(v0 + 8);
  if (v7)
  {
    if (v7 == 1)
      v8 = (unsigned int *)&enum case for FrameName.transitionReadingInsights(_:);
    else
      v8 = (unsigned int *)&enum case for FrameName.transitionReaderType(_:);
  }
  else
  {
    v8 = (unsigned int *)&enum case for FrameName.transitionHighlight(_:);
  }
  v9 = *v8;
  v10 = type metadata accessor for FrameName(0);
  v11 = *(_QWORD *)(v10 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 104))(v6, v9, v10);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v6, 0, 1, v10);
  v12 = type metadata accessor for ReaderType(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v3, 1, 1, v12);
  return YIRSourceData.init(frameName:readerType:totalReadTime:longestPageCount:longestAudiobook:finishedSeries:mostContentGenre:mostContentAuthor:totalRatedContent:finishedBooks:longestStreak:readingGoalsReachedDays:avgReadingTime:)((uint64_t)v6, (uint64_t)v3, 0, 1, 0, 1, 0, 1, 0.0, v13, v14, v15, v16, v17, v18, v19, 0, 0, 0,
           0,
           0,
           0,
           0,
           1,
           0,
           1,
           0,
           1,
           0,
           1,
           0.0,
           1);
}

uint64_t TransitionFrame.background.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for TransitionFrame(0);
  return sub_1E428(v1 + *(int *)(v3 + 20), a1, type metadata accessor for PageBackground);
}

uint64_t type metadata accessor for TransitionFrame(uint64_t a1)
{
  uint64_t result;

  result = qword_264250;
  if (!qword_264250)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for TransitionFrame);
  return result;
}

uint64_t TransitionFrame.exposureData.getter@<X0>(_QWORD *a1@<X8>)
{
  type metadata accessor for TransitionFrame(0);
  a1[3] = type metadata accessor for YIRSourceData(0);
  a1[4] = sub_6FD0(&qword_25EFF0, (uint64_t (*)(uint64_t))&type metadata accessor for YIRSourceData, (uint64_t)&protocol conformance descriptor for YIRSourceData);
  a1[5] = sub_6FD0(&qword_25EFF8, (uint64_t (*)(uint64_t))&type metadata accessor for YIRSourceData, (uint64_t)&protocol conformance descriptor for YIRSourceData);
  sub_C404(a1);
  return sub_CD348();
}

uint64_t TransitionFrame.id.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  Swift::String v3;
  void *object;
  Swift::String v5;
  __int128 v7;
  _QWORD v8[2];

  v8[0] = 0;
  v8[1] = 0xE000000000000000;
  v1 = type metadata accessor for TransitionFrame(0);
  *(_QWORD *)&v7 = v1;
  v2 = sub_5440(&qword_2641D8);
  v3._countAndFlagsBits = String.init<A>(reflecting:)(&v7, v2);
  object = v3._object;
  String.append(_:)(v3);
  swift_bridgeObjectRelease(object);
  v5._countAndFlagsBits = 45;
  v5._object = (void *)0xE100000000000000;
  String.append(_:)(v5);
  v7 = *(_OWORD *)(v0 + *(int *)(v1 + 24));
  _print_unlocked<A, B>(_:_:)(&v7, v8, &type metadata for TransitionFrameViewModel.Section, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  return v8[0];
}

uint64_t TransitionFrame.init(model:)@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  char *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  _QWORD *v15;

  v3 = *a1;
  v4 = a1[1];
  *a2 = static Alignment.bottom.getter(a1);
  a2[1] = v5;
  v6 = type metadata accessor for TransitionFrame(0);
  v7 = (_QWORD *)((char *)a2 + *(int *)(v6 + 20));
  v8 = (char *)v7 + *(int *)(sub_5440(&qword_25E930) + 48);
  v9 = objc_msgSend((id)objc_opt_self(UIColor), "secondarySystemBackgroundColor");
  *v7 = Color.init(uiColor:)(v9);
  v10 = enum case for ColorScheme.light(_:);
  v11 = type metadata accessor for ColorScheme(0);
  v12 = *(_QWORD *)(v11 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 104))(v8, v10, v11);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v8, 0, 1, v11);
  v13 = type metadata accessor for PageBackground(0);
  result = swift_storeEnumTagMultiPayload(v7, v13, 0);
  v15 = (_QWORD *)((char *)a2 + *(int *)(v6 + 24));
  *v15 = v3;
  v15[1] = v4;
  return result;
}

uint64_t TransitionFrame.body.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;

  v3 = type metadata accessor for TransitionFrame(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  __chkstk_darwin(v3);
  sub_1E428(v1, (uint64_t)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = (v7 + 16) & ~v7;
  v9 = swift_allocObject(&unk_250F80, v8 + v5, v7 | 7);
  result = sub_CD9DC((uint64_t)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v9 + v8);
  *a1 = sub_CDA20;
  a1[1] = v9;
  return result;
}

uint64_t sub_CD860@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t KeyPath;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v19;

  v6 = type metadata accessor for ColorScheme(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_5440(&qword_2642A0);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v13 = static HorizontalAlignment.center.getter(v11);
  *((_QWORD *)v13 + 1) = 0;
  v13[16] = 1;
  v14 = sub_5440(&qword_2642A8);
  sub_CDA24(a2, a1, &v13[*(int *)(v14 + 44)]);
  KeyPath = swift_getKeyPath(&unk_1E99A0);
  (*(void (**)(char *, _QWORD, uint64_t))(v7 + 104))(v9, enum case for ColorScheme.light(_:), v6);
  v16 = (uint64_t *)(a3 + *(int *)(sub_5440(&qword_2642B0) + 36));
  v17 = sub_5440(&qword_25EE58);
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))((char *)v16 + *(int *)(v17 + 28), v9, v6);
  *v16 = KeyPath;
  sub_B3D0((uint64_t)v13, a3, &qword_2642A0);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  return sub_B414((uint64_t)v13, &qword_2642A0);
}

uint64_t sub_CD9DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TransitionFrame(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_CDA24@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __n128 v35;
  __n128 v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  char *v47;
  char *v48;
  char *v49;
  char *v50;
  _QWORD *v51;
  uint64_t *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  double v58;
  double v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  __n128 v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  int *v96;
  char *v97;
  char v99;
  char v100;
  char *v101;
  char *v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  _QWORD *v123;
  uint64_t v124;
  __int128 v125;
  __int128 v126;
  __int16 v127;
  _OWORD v128[7];

  v113 = a2;
  v123 = a3;
  v105 = type metadata accessor for Image.ResizingMode(0);
  v104 = *(_QWORD *)(v105 - 8);
  __chkstk_darwin(v105);
  v103 = (char *)&v101 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v122 = sub_5440(&qword_2642B8);
  v121 = *(_QWORD *)(v122 - 8);
  __chkstk_darwin(v122);
  v106 = (char *)&v101 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_5440(&qword_2642C0);
  __chkstk_darwin(v6);
  v116 = (uint64_t)&v101 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v115 = type metadata accessor for ImageResource(0);
  v114 = *(_QWORD *)(v115 - 8);
  v8 = __chkstk_darwin(v115);
  v101 = (char *)&v101 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v102 = (char *)&v101 - v10;
  v11 = sub_5440(&qword_2642C8);
  v12 = __chkstk_darwin(v11);
  v120 = (uint64_t)&v101 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v119 = (uint64_t)&v101 - v14;
  v15 = sub_5440(&qword_25FE08);
  __chkstk_darwin(v15);
  v17 = (char *)&v101 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for Color.RGBColorSpace(0);
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v21 = (char *)&v101 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = (int *)type metadata accessor for TextLockup(0);
  __chkstk_darwin(v22);
  v24 = (char **)((char *)&v101 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  v112 = sub_5440(&qword_2642D0);
  v111 = *(_QWORD *)(v112 - 8);
  __chkstk_darwin(v112);
  v26 = (char *)&v101 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v109 = sub_5440(&qword_2642D8);
  v27 = __chkstk_darwin(v109);
  v118 = (uint64_t)&v101 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = __chkstk_darwin(v27);
  v31 = (char *)&v101 - v30;
  __chkstk_darwin(v29);
  v124 = (uint64_t)&v101 - v32;
  v33 = *(int *)(type metadata accessor for TransitionFrame(0) + 24);
  v117 = a1;
  v110 = v33;
  v128[0] = *(_OWORD *)(a1 + v33);
  v108 = sub_CCBB4();
  v107 = v34;
  v35 = ((__n128 (*)(char *, _QWORD, uint64_t))*(_QWORD *)(v19 + 104))(v21, enum case for Color.RGBColorSpace.sRGB(_:), v18);
  v35.n128_u64[0] = 0x3FEF7F7F7F7F7F7FLL;
  v36.n128_u64[0] = 0x3FC5959595959596;
  v37 = Color.init(_:red:green:blue:opacity:)(v21, v35, 0.48627451, v36, 1.0) | 0x8000000000000000;
  v38 = type metadata accessor for Font.Design(0);
  v39 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 56))(v17, 1, 1, v38);
  v40 = static HorizontalAlignment.leading.getter(v39);
  v41 = static Alignment.leading.getter(v40);
  v43 = v42;
  *v24 = swift_getKeyPath(&unk_1E99D0);
  v44 = sub_5440(&qword_25F1E8);
  swift_storeEnumTagMultiPayload(v24, v44, 0);
  v45 = (_QWORD *)((char *)v24 + v22[5]);
  *v45 = swift_getKeyPath(&unk_1E99F8);
  v46 = sub_5440(&qword_25F208);
  swift_storeEnumTagMultiPayload(v45, v46, 0);
  v47 = (char *)v24 + v22[6];
  *(_QWORD *)v47 = swift_getKeyPath(&unk_1E9A20);
  v47[8] = 0;
  v48 = (char *)v24 + v22[7];
  *(_QWORD *)v48 = swift_getKeyPath(&unk_1E9A48);
  v48[8] = 0;
  v49 = (char *)v24 + v22[8];
  *(_QWORD *)v49 = swift_getKeyPath(&unk_1E9A70);
  v49[8] = 0;
  v50 = (char *)v24 + v22[9];
  *(_QWORD *)v50 = swift_getKeyPath(&unk_1E9AA0);
  v50[8] = 0;
  *((_BYTE *)v24 + v22[10]) = 4;
  v51 = (_QWORD *)((char *)v24 + v22[11]);
  *v51 = 0;
  v51[1] = 0;
  v52 = (_QWORD *)((char *)v24 + v22[12]);
  v53 = v107;
  *v52 = v108;
  v52[1] = v53;
  v52[2] = v37;
  v54 = (_QWORD *)((char *)v24 + v22[13]);
  *v54 = 0;
  v54[1] = 0;
  sub_167A4((uint64_t)v17, (uint64_t)v24 + v22[14], &qword_25FE08);
  *(_QWORD *)((char *)v24 + v22[15]) = v40;
  v55 = (_QWORD *)((char *)v24 + v22[16]);
  *v55 = v41;
  v55[1] = v43;
  *((_BYTE *)v24 + v22[17]) = 0;
  v56 = sub_6FD0((unint64_t *)&qword_262EE8, type metadata accessor for TextLockup, (uint64_t)&unk_1F26B8);
  View.lineHeightMultiple(_:)(v22, v56, 0.9);
  v57 = sub_224DC((uint64_t)v24, type metadata accessor for TextLockup);
  GeometryProxy.size.getter(v57);
  v59 = v58 * 0.3;
  v60 = _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0();
  v100 = 1;
  v99 = 1;
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v128, 0, 1, 0, 1, 0, 1, *(_QWORD *)&v59, 0, 0, v99, 0, v100, v60, v61);
  v62 = v111;
  v63 = v112;
  (*(void (**)(char *, char *, uint64_t))(v111 + 16))(v31, v26, v112);
  v64 = &v31[*(int *)(v109 + 36)];
  v65 = v128[5];
  *((_OWORD *)v64 + 4) = v128[4];
  *((_OWORD *)v64 + 5) = v65;
  *((_OWORD *)v64 + 6) = v128[6];
  v66 = v128[1];
  *(_OWORD *)v64 = v128[0];
  *((_OWORD *)v64 + 1) = v66;
  v67 = v128[3];
  *((_OWORD *)v64 + 2) = v128[2];
  *((_OWORD *)v64 + 3) = v67;
  (*(void (**)(char *, uint64_t))(v62 + 8))(v26, v63);
  v68 = v124;
  sub_167A4((uint64_t)v31, v124, &qword_2642D8);
  v69 = v117;
  v70 = v110;
  v126 = *(_OWORD *)(v117 + v110);
  v71 = v116;
  sub_CD228(v116);
  v72 = v114;
  v73 = v115;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v114 + 48))(v71, 1, v115) == 1)
  {
    sub_B414(v71, &qword_2642C0);
    v74 = 1;
    v75 = v119;
  }
  else
  {
    v76 = v69;
    v77 = v102;
    (*(void (**)(char *, uint64_t, uint64_t))(v72 + 32))(v102, v71, v73);
    v78 = v101;
    (*(void (**)(char *, char *, uint64_t))(v72 + 16))(v101, v77, v73);
    v79 = Image.init(_:)(v78);
    v80 = v104;
    v81 = v103;
    v82 = v105;
    (*(void (**)(char *, _QWORD, uint64_t))(v104 + 104))(v103, enum case for Image.ResizingMode.stretch(_:), v105);
    v83 = Image.resizable(capInsets:resizingMode:)(v81, v79, 0.0, 0.0, 0.0, 0.0);
    v84 = swift_release(v79);
    (*(void (**)(char *, uint64_t, __n128))(v80 + 8))(v81, v82, v84);
    v126 = (unint64_t)v83;
    v127 = 1;
    v125 = *(_OWORD *)(v76 + v70);
    v85 = sub_CCF94();
    v87 = v86;
    *(_QWORD *)&v125 = v85;
    *((_QWORD *)&v125 + 1) = v86;
    v88 = sub_5440(&qword_260390);
    v89 = sub_4522C();
    v90 = sub_C57C();
    v91 = (uint64_t)v106;
    View.accessibilityLabel<A>(_:)(&v125, v88, &type metadata for String, v89, v90);
    swift_release(v83);
    swift_bridgeObjectRelease(v87);
    v92 = v77;
    v68 = v124;
    (*(void (**)(char *, uint64_t))(v72 + 8))(v92, v73);
    v75 = v119;
    sub_167A4(v91, v119, &qword_2642B8);
    v74 = 0;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v121 + 56))(v75, v74, 1, v122);
  v93 = v118;
  sub_B3D0(v68, v118, &qword_2642D8);
  v94 = v120;
  sub_B3D0(v75, v120, &qword_2642C8);
  v95 = v123;
  *v123 = 0;
  *((_BYTE *)v95 + 8) = 1;
  v96 = (int *)sub_5440(&qword_2642E0);
  sub_B3D0(v93, (uint64_t)v95 + v96[12], &qword_2642D8);
  v97 = (char *)v95 + v96[16];
  *(_QWORD *)v97 = 0;
  v97[8] = 1;
  sub_B3D0(v94, (uint64_t)v95 + v96[20], &qword_2642C8);
  sub_B414(v75, &qword_2642C8);
  sub_B414(v68, &qword_2642D8);
  sub_B414(v94, &qword_2642C8);
  return sub_B414(v93, &qword_2642D8);
}

uint64_t sub_CE414(uint64_t a1)
{
  uint64_t result;

  result = sub_6FD0(&qword_2641E0, type metadata accessor for TransitionFrame, (uint64_t)&protocol conformance descriptor for TransitionFrame);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_CE454@<X0>(_QWORD *a1@<X8>)
{
  a1[3] = type metadata accessor for YIRSourceData(0);
  a1[4] = sub_6FD0(&qword_25EFF0, (uint64_t (*)(uint64_t))&type metadata accessor for YIRSourceData, (uint64_t)&protocol conformance descriptor for YIRSourceData);
  a1[5] = sub_6FD0(&qword_25EFF8, (uint64_t (*)(uint64_t))&type metadata accessor for YIRSourceData, (uint64_t)&protocol conformance descriptor for YIRSourceData);
  sub_C404(a1);
  return sub_CD348();
}

uint64_t sub_CE4E4(uint64_t a1)
{
  uint64_t result;

  result = sub_6FD0(&qword_2641E8, type metadata accessor for TransitionFrame, (uint64_t)&protocol conformance descriptor for TransitionFrame);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_CE520(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &opaque type descriptor for <<opaque return type of TransitionFrame.body>>, 1);
}

uint64_t sub_CE530@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  v4 = *(_QWORD *)(a1 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  __chkstk_darwin(a1);
  sub_1E428(v2, (uint64_t)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for TransitionFrame);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = (v6 + 16) & ~v6;
  v8 = swift_allocObject(&unk_251110, v7 + v5, v6 | 7);
  result = sub_CD9DC((uint64_t)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v8 + v7);
  *a2 = sub_CDA20;
  a2[1] = v8;
  return result;
}

unint64_t destroy for TransitionFrameViewModel(uint64_t a1)
{
  unint64_t result;

  result = *(_QWORD *)(a1 + 8);
  if (result >= 2)
    return swift_bridgeObjectRelease(result);
  return result;
}

_QWORD *_s7BooksUI24TransitionFrameViewModelVwCP_0(_QWORD *a1, _QWORD *a2)
{
  unint64_t v3;

  v3 = a2[1];
  if (v3 >= 2)
  {
    *a1 = *a2;
    a1[1] = v3;
    swift_bridgeObjectRetain(v3);
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  return a1;
}

_QWORD *assignWithCopy for TransitionFrameViewModel(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = a1[1];
  v5 = a2[1];
  if (v4 >= 2)
  {
    if (v5 >= 2)
    {
      *a1 = *a2;
      v7 = a2[1];
      a1[1] = v7;
      swift_bridgeObjectRetain(v7);
      swift_bridgeObjectRelease(v4);
      return a1;
    }
    sub_B414((uint64_t)a1, &qword_2641F0);
    goto LABEL_6;
  }
  if (v5 < 2)
  {
LABEL_6:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  *a1 = *a2;
  v6 = a2[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  return a1;
}

_QWORD *assignWithTake for TransitionFrameViewModel(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;
  unint64_t v5;

  v4 = a1[1];
  if (v4 >= 2)
  {
    v5 = a2[1];
    if (v5 >= 2)
    {
      *a1 = *a2;
      a1[1] = v5;
      swift_bridgeObjectRelease(v4);
      return a1;
    }
    sub_B414((uint64_t)a1, &qword_2641F0);
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  return a1;
}

uint64_t getEnumTagSinglePayload for TransitionFrameViewModel(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 > 0x7FFFFFFD && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 2147483646);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 2;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for TransitionFrameViewModel(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(_QWORD *)result = a2 - 2147483646;
    *(_QWORD *)(result + 8) = 0;
    if (a3 > 0x7FFFFFFD)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 > 0x7FFFFFFD)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for TransitionFrameViewModel()
{
  return &type metadata for TransitionFrameViewModel;
}

unint64_t destroy for TransitionFrameViewModel.Section(uint64_t a1)
{
  unint64_t result;

  result = *(_QWORD *)(a1 + 8);
  if (result >= 0xFFFFFFFF)
    return swift_bridgeObjectRelease(result);
  return result;
}

uint64_t _s7BooksUI24TransitionFrameViewModelV7SectionOwCP_0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 < 0xFFFFFFFF)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v3;
    swift_bridgeObjectRetain(v3);
  }
  return a1;
}

_QWORD *assignWithCopy for TransitionFrameViewModel.Section(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = a1[1];
  v5 = a2[1];
  if (v4 < 0xFFFFFFFF)
  {
    if (v5 >= 0xFFFFFFFF)
    {
      *a1 = *a2;
      v7 = a2[1];
      a1[1] = v7;
      swift_bridgeObjectRetain(v7);
      return a1;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  if (v5 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease(a1[1]);
    goto LABEL_7;
  }
  *a1 = *a2;
  v6 = a2[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t assignWithTake for TransitionFrameViewModel.Section(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4 < 0xFFFFFFFF)
    goto LABEL_5;
  v5 = *(_QWORD *)(a2 + 8);
  if (v5 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease(v4);
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v5;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for TransitionFrameViewModel.Section(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unsigned int v4;
  unsigned int v5;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFE && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 2147483646);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 + 1;
  v5 = v3 - 1;
  if (v4 >= 3)
    return v5;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for TransitionFrameViewModel.Section(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2 + 1;
  }
  return result;
}

uint64_t sub_CEA04(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

_QWORD *sub_CEA1C(_QWORD *result, int a2)
{
  if (a2 < 0)
  {
    *result = a2 ^ 0x80000000;
    result[1] = 0;
  }
  else if (a2)
  {
    result[1] = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for TransitionFrameViewModel.Section()
{
  return &type metadata for TransitionFrameViewModel.Section;
}

uint64_t *initializeBufferWithCopyOfBuffer for TransitionFrame(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  unint64_t v31;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    v7 = *(int *)(a3 + 20);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for PageBackground(0);
    if (swift_getEnumCaseMultiPayload(v9, v10) == 1)
    {
      if (v9[56])
      {
        v11 = *((_OWORD *)v9 + 1);
        *(_OWORD *)v8 = *(_OWORD *)v9;
        *((_OWORD *)v8 + 1) = v11;
        *((_OWORD *)v8 + 2) = *((_OWORD *)v9 + 2);
        *(_OWORD *)(v8 + 41) = *(_OWORD *)(v9 + 41);
      }
      else
      {
        v21 = *(_OWORD *)(v9 + 24);
        *(_OWORD *)(v8 + 24) = v21;
        (**(void (***)(char *, char *))(v21 - 8))(v8, v9);
        *(_OWORD *)(v8 + 40) = *(_OWORD *)(v9 + 40);
        v8[56] = 0;
      }
      *((_OWORD *)v8 + 4) = *((_OWORD *)v9 + 4);
      v8[80] = v9[80];
      *(_OWORD *)(v8 + 88) = *(_OWORD *)(v9 + 88);
      v22 = *((_QWORD *)v9 + 13);
      *((_QWORD *)v8 + 13) = v22;
      v23 = *((_QWORD *)v9 + 15);
      swift_bridgeObjectRetain(v22);
      if (v23)
      {
        *((_QWORD *)v8 + 14) = *((_QWORD *)v9 + 14);
        *((_QWORD *)v8 + 15) = v23;
        v24 = *((_QWORD *)v9 + 17);
        *((_QWORD *)v8 + 16) = *((_QWORD *)v9 + 16);
        *((_QWORD *)v8 + 17) = v24;
        v8[144] = v9[144];
        v25 = *((_QWORD *)v9 + 19);
        v26 = *((_QWORD *)v9 + 20);
        *((_QWORD *)v8 + 19) = v25;
        *((_QWORD *)v8 + 20) = v26;
        swift_bridgeObjectRetain(v23);
        swift_bridgeObjectRetain(v24);
        swift_bridgeObjectRetain(v26);
      }
      else
      {
        v27 = *((_OWORD *)v9 + 8);
        *((_OWORD *)v8 + 7) = *((_OWORD *)v9 + 7);
        *((_OWORD *)v8 + 8) = v27;
        *((_OWORD *)v8 + 9) = *((_OWORD *)v9 + 9);
        *((_QWORD *)v8 + 20) = *((_QWORD *)v9 + 20);
      }
      v20 = 1;
    }
    else
    {
      v13 = *(_QWORD *)v9;
      *(_QWORD *)v8 = *(_QWORD *)v9;
      swift_retain(v13);
      v14 = *(int *)(sub_5440(&qword_25E930) + 48);
      v15 = &v8[v14];
      v16 = &v9[v14];
      v17 = type metadata accessor for ColorScheme(0);
      v18 = *(_QWORD *)(v17 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
      {
        v19 = sub_5440(&qword_25E928);
        memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v15, v16, v17);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
      }
      v20 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v10, v20);
    v28 = *(int *)(a3 + 24);
    v29 = (uint64_t *)((char *)v4 + v28);
    v30 = (uint64_t *)((char *)a2 + v28);
    v31 = v30[1];
    if (v31 >= 2)
    {
      *v29 = *v30;
      v29[1] = v31;
      swift_bridgeObjectRetain(v31);
    }
    else
    {
      *(_OWORD *)v29 = *(_OWORD *)v30;
    }
  }
  return v4;
}

unint64_t destroy for TransitionFrame(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;

  v4 = (_QWORD *)(a1 + *(int *)(a2 + 20));
  v5 = type metadata accessor for PageBackground(0);
  if (swift_getEnumCaseMultiPayload(v4, v5) == 1)
  {
    if (!*((_BYTE *)v4 + 56))
      _s7BooksUI13AnyPagedFrameVwxx_0(v4);
    swift_bridgeObjectRelease(v4[13]);
    v6 = v4[15];
    if (v6)
    {
      swift_bridgeObjectRelease(v6);
      swift_bridgeObjectRelease(v4[17]);
      swift_bridgeObjectRelease(v4[20]);
    }
  }
  else
  {
    swift_release(*v4);
    v7 = (char *)v4 + *(int *)(sub_5440(&qword_25E930) + 48);
    v8 = type metadata accessor for ColorScheme(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8))
      (*(void (**)(char *, uint64_t))(v9 + 8))(v7, v8);
  }
  result = *(_QWORD *)(a1 + *(int *)(a2 + 24) + 8);
  if (result >= 2)
    return swift_bridgeObjectRelease(result);
  return result;
}

_OWORD *initializeWithCopy for TransitionFrame(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  unint64_t v29;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for PageBackground(0);
  if (swift_getEnumCaseMultiPayload(v8, v9) == 1)
  {
    if (v8[56])
    {
      v10 = *((_OWORD *)v8 + 1);
      *(_OWORD *)v7 = *(_OWORD *)v8;
      *((_OWORD *)v7 + 1) = v10;
      *((_OWORD *)v7 + 2) = *((_OWORD *)v8 + 2);
      *(_OWORD *)(v7 + 41) = *(_OWORD *)(v8 + 41);
    }
    else
    {
      v19 = *(_OWORD *)(v8 + 24);
      *(_OWORD *)(v7 + 24) = v19;
      (**(void (***)(char *, char *))(v19 - 8))(v7, v8);
      *(_OWORD *)(v7 + 40) = *(_OWORD *)(v8 + 40);
      v7[56] = 0;
    }
    *((_OWORD *)v7 + 4) = *((_OWORD *)v8 + 4);
    v7[80] = v8[80];
    *(_OWORD *)(v7 + 88) = *(_OWORD *)(v8 + 88);
    v20 = *((_QWORD *)v8 + 13);
    *((_QWORD *)v7 + 13) = v20;
    v21 = *((_QWORD *)v8 + 15);
    swift_bridgeObjectRetain(v20);
    if (v21)
    {
      *((_QWORD *)v7 + 14) = *((_QWORD *)v8 + 14);
      *((_QWORD *)v7 + 15) = v21;
      v22 = *((_QWORD *)v8 + 17);
      *((_QWORD *)v7 + 16) = *((_QWORD *)v8 + 16);
      *((_QWORD *)v7 + 17) = v22;
      v7[144] = v8[144];
      v23 = *((_QWORD *)v8 + 19);
      v24 = *((_QWORD *)v8 + 20);
      *((_QWORD *)v7 + 19) = v23;
      *((_QWORD *)v7 + 20) = v24;
      swift_bridgeObjectRetain(v21);
      swift_bridgeObjectRetain(v22);
      swift_bridgeObjectRetain(v24);
    }
    else
    {
      v25 = *((_OWORD *)v8 + 8);
      *((_OWORD *)v7 + 7) = *((_OWORD *)v8 + 7);
      *((_OWORD *)v7 + 8) = v25;
      *((_OWORD *)v7 + 9) = *((_OWORD *)v8 + 9);
      *((_QWORD *)v7 + 20) = *((_QWORD *)v8 + 20);
    }
    v18 = 1;
  }
  else
  {
    v11 = *(_QWORD *)v8;
    *(_QWORD *)v7 = *(_QWORD *)v8;
    swift_retain(v11);
    v12 = *(int *)(sub_5440(&qword_25E930) + 48);
    v13 = &v7[v12];
    v14 = &v8[v12];
    v15 = type metadata accessor for ColorScheme(0);
    v16 = *(_QWORD *)(v15 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
    {
      v17 = sub_5440(&qword_25E928);
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v13, v14, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
    }
    v18 = 0;
  }
  swift_storeEnumTagMultiPayload(v7, v9, v18);
  v26 = *(int *)(a3 + 24);
  v27 = (_QWORD *)((char *)a1 + v26);
  v28 = (_QWORD *)((char *)a2 + v26);
  v29 = v28[1];
  if (v29 >= 2)
  {
    *v27 = *v28;
    v27[1] = v29;
    swift_bridgeObjectRetain(v29);
  }
  else
  {
    *(_OWORD *)v27 = *(_OWORD *)v28;
  }
  return a1;
}

_QWORD *assignWithCopy for TransitionFrame(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;

  *a1 = *a2;
  a1[1] = a2[1];
  if (a1 != a2)
  {
    v6 = *(int *)(a3 + 20);
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    sub_224DC((uint64_t)a1 + v6, type metadata accessor for PageBackground);
    v9 = type metadata accessor for PageBackground(0);
    if (swift_getEnumCaseMultiPayload(v8, v9) == 1)
    {
      if (v8[56])
      {
        v10 = *(_OWORD *)v8;
        v11 = *((_OWORD *)v8 + 1);
        v12 = *((_OWORD *)v8 + 2);
        *(_OWORD *)(v7 + 41) = *(_OWORD *)(v8 + 41);
        *((_OWORD *)v7 + 1) = v11;
        *((_OWORD *)v7 + 2) = v12;
        *(_OWORD *)v7 = v10;
      }
      else
      {
        v21 = *((_QWORD *)v8 + 3);
        *((_QWORD *)v7 + 3) = v21;
        *((_QWORD *)v7 + 4) = *((_QWORD *)v8 + 4);
        (**(void (***)(char *, char *))(v21 - 8))(v7, v8);
        *(_OWORD *)(v7 + 40) = *(_OWORD *)(v8 + 40);
        v7[56] = 0;
      }
      *((_OWORD *)v7 + 4) = *((_OWORD *)v8 + 4);
      v7[80] = v8[80];
      *((_QWORD *)v7 + 11) = *((_QWORD *)v8 + 11);
      *((_QWORD *)v7 + 12) = *((_QWORD *)v8 + 12);
      v22 = *((_QWORD *)v8 + 13);
      *((_QWORD *)v7 + 13) = v22;
      v23 = *((_QWORD *)v8 + 15);
      swift_bridgeObjectRetain(v22);
      if (v23)
      {
        *((_QWORD *)v7 + 14) = *((_QWORD *)v8 + 14);
        v24 = *((_QWORD *)v8 + 15);
        *((_QWORD *)v7 + 15) = v24;
        *((_QWORD *)v7 + 16) = *((_QWORD *)v8 + 16);
        v25 = *((_QWORD *)v8 + 17);
        *((_QWORD *)v7 + 17) = v25;
        v7[144] = v8[144];
        *((_QWORD *)v7 + 19) = *((_QWORD *)v8 + 19);
        v26 = *((_QWORD *)v8 + 20);
        *((_QWORD *)v7 + 20) = v26;
        swift_bridgeObjectRetain(v24);
        swift_bridgeObjectRetain(v25);
        swift_bridgeObjectRetain(v26);
      }
      else
      {
        v27 = *((_OWORD *)v8 + 7);
        v28 = *((_OWORD *)v8 + 8);
        v29 = *((_OWORD *)v8 + 9);
        *((_QWORD *)v7 + 20) = *((_QWORD *)v8 + 20);
        *((_OWORD *)v7 + 8) = v28;
        *((_OWORD *)v7 + 9) = v29;
        *((_OWORD *)v7 + 7) = v27;
      }
      v20 = 1;
    }
    else
    {
      v13 = *(_QWORD *)v8;
      *(_QWORD *)v7 = *(_QWORD *)v8;
      swift_retain(v13);
      v14 = *(int *)(sub_5440(&qword_25E930) + 48);
      v15 = &v7[v14];
      v16 = &v8[v14];
      v17 = type metadata accessor for ColorScheme(0);
      v18 = *(_QWORD *)(v17 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
      {
        v19 = sub_5440(&qword_25E928);
        memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v15, v16, v17);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
      }
      v20 = 0;
    }
    swift_storeEnumTagMultiPayload(v7, v9, v20);
  }
  v30 = *(int *)(a3 + 24);
  v31 = (_QWORD *)((char *)a1 + v30);
  v32 = (_QWORD *)((char *)a2 + v30);
  v33 = *(_QWORD *)((char *)a1 + v30 + 8);
  v34 = v32[1];
  if (v33 >= 2)
  {
    if (v34 >= 2)
    {
      *v31 = *v32;
      v36 = v32[1];
      v31[1] = v36;
      swift_bridgeObjectRetain(v36);
      swift_bridgeObjectRelease(v33);
      return a1;
    }
    sub_B414((uint64_t)v31, &qword_2641F0);
    goto LABEL_20;
  }
  if (v34 < 2)
  {
LABEL_20:
    *(_OWORD *)v31 = *(_OWORD *)v32;
    return a1;
  }
  *v31 = *v32;
  v35 = v32[1];
  v31[1] = v35;
  swift_bridgeObjectRetain(v35);
  return a1;
}

_OWORD *initializeWithTake for TransitionFrame(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (_QWORD *)((char *)a1 + v6);
  v8 = (_QWORD *)((char *)a2 + v6);
  v9 = type metadata accessor for PageBackground(0);
  if (swift_getEnumCaseMultiPayload(v8, v9))
  {
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  else
  {
    *v7 = *v8;
    v10 = *(int *)(sub_5440(&qword_25E930) + 48);
    v11 = (char *)v7 + v10;
    v12 = (char *)v8 + v10;
    v13 = type metadata accessor for ColorScheme(0);
    v14 = *(_QWORD *)(v13 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
    {
      v15 = sub_5440(&qword_25E928);
      memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v12, v13);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
    }
    swift_storeEnumTagMultiPayload(v7, v9, 0);
  }
  *(_OWORD *)((char *)a1 + *(int *)(a3 + 24)) = *(_OWORD *)((char *)a2 + *(int *)(a3 + 24));
  return a1;
}

_OWORD *assignWithTake for TransitionFrame(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;

  *a1 = *a2;
  if (a1 != a2)
  {
    v6 = *(int *)(a3 + 20);
    v7 = (_QWORD *)((char *)a1 + v6);
    v8 = (_QWORD *)((char *)a2 + v6);
    sub_224DC((uint64_t)a1 + v6, type metadata accessor for PageBackground);
    v9 = type metadata accessor for PageBackground(0);
    if (swift_getEnumCaseMultiPayload(v8, v9))
    {
      memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      *v7 = *v8;
      v10 = *(int *)(sub_5440(&qword_25E930) + 48);
      v11 = (char *)v7 + v10;
      v12 = (char *)v8 + v10;
      v13 = type metadata accessor for ColorScheme(0);
      v14 = *(_QWORD *)(v13 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
      {
        v15 = sub_5440(&qword_25E928);
        memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v12, v13);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
      }
      swift_storeEnumTagMultiPayload(v7, v9, 0);
    }
  }
  v16 = *(int *)(a3 + 24);
  v17 = (_QWORD *)((char *)a1 + v16);
  v18 = (_QWORD *)((char *)a2 + v16);
  v19 = *(_QWORD *)((char *)a1 + v16 + 8);
  if (v19 >= 2)
  {
    v20 = v18[1];
    if (v20 >= 2)
    {
      *v17 = *v18;
      v17[1] = v20;
      swift_bridgeObjectRelease(v19);
      return a1;
    }
    sub_B414((uint64_t)v17, &qword_2641F0);
  }
  *(_OWORD *)v17 = *(_OWORD *)v18;
  return a1;
}

uint64_t getEnumTagSinglePayload for TransitionFrame(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_CF5AC);
}

uint64_t sub_CF5AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;

  v6 = type metadata accessor for PageBackground(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 20), a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 24) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  v10 = v9 - 2;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t storeEnumTagSinglePayload for TransitionFrame(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_CF648);
}

uint64_t sub_CF648(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for PageBackground(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + *(int *)(a4 + 20), a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 24) + 8) = (a2 + 1);
  return result;
}

uint64_t sub_CF6C8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = &unk_1E9970;
  result = type metadata accessor for PageBackground(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    v4[2] = &unk_1E9988;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
    return 0;
  }
  return result;
}

unint64_t sub_CF748()
{
  unint64_t result;
  uint64_t v1;

  result = qword_264290;
  if (!qword_264290)
  {
    v1 = sub_7EF8(&qword_264298);
    result = swift_getWitnessTable(&protocol conformance descriptor for GeometryReader<A>, v1);
    atomic_store(result, (unint64_t *)&qword_264290);
  }
  return result;
}

uint64_t sub_CF798()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  v1 = type metadata accessor for TransitionFrame(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = (_QWORD *)(v0 + v4 + *(int *)(v1 + 20));
  v7 = type metadata accessor for PageBackground(0);
  if (swift_getEnumCaseMultiPayload(v6, v7) == 1)
  {
    if (!*((_BYTE *)v6 + 56))
      _s7BooksUI13AnyPagedFrameVwxx_0(v6);
    swift_bridgeObjectRelease(v6[13]);
    v8 = v6[15];
    if (v8)
    {
      swift_bridgeObjectRelease(v8);
      swift_bridgeObjectRelease(v6[17]);
      swift_bridgeObjectRelease(v6[20]);
    }
  }
  else
  {
    swift_release(*v6);
    v9 = (char *)v6 + *(int *)(sub_5440(&qword_25E930) + 48);
    v10 = type metadata accessor for ColorScheme(0);
    v11 = *(_QWORD *)(v10 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
      (*(void (**)(char *, uint64_t))(v11 + 8))(v9, v10);
  }
  v12 = *(_QWORD *)(v0 + v4 + *(int *)(v1 + 24) + 8);
  if (v12 >= 2)
    swift_bridgeObjectRelease(v12);
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_CF8C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for TransitionFrame(0) - 8) + 80);
  return sub_CD860(a1, v2 + ((v5 + 16) & ~v5), a2);
}

uint64_t View.clipShape<A>(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t AssociatedConformanceWitness;
  uint64_t v15;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a5, a3, &protocol requirements base descriptor for CoverEffect, &associated type descriptor for CoverEffect.Shape);
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  v12 = (char *)&v15 - v11;
  (*(void (**)(uint64_t, uint64_t))(a5 + 48))(a3, a5);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a5, a3, AssociatedTypeWitness, &protocol requirements base descriptor for CoverEffect, &associated conformance descriptor for CoverEffect.CoverEffect.Shape: InsettableShape);
  View.clipShape<A>(_:style:)(v12, 256, a2, AssociatedTypeWitness, a4, *(_QWORD *)(AssociatedConformanceWitness + 8));
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, AssociatedTypeWitness);
}

uint64_t View.coverEffect<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v21;

  v21 = a4;
  v9 = *(_QWORD *)(a3 - 8);
  __chkstk_darwin(a1);
  v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for _CoverEffectViewModifier(0, v12, v14, v13);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v21 - v17;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a1, a3);
  _CoverEffectViewModifier.init(effect:)((uint64_t)v11, a3, a5, v19, (uint64_t)v18);
  View.modifier<A>(_:)(v18, a2, v15, v21);
  return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v18, v15);
}

uint64_t type metadata accessor for _CoverEffectViewModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10E40(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _CoverEffectViewModifier);
}

uint64_t _CoverEffectViewModifier.init(effect:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  _QWORD *v8;
  uint64_t v9;

  v8 = (_QWORD *)(a5 + *(int *)(type metadata accessor for _CoverEffectViewModifier(0, a2, a3, a4) + 36));
  *v8 = swift_getKeyPath(&unk_1E9B10);
  v9 = sub_5440(&qword_25FB18);
  swift_storeEnumTagMultiPayload(v8, v9, 0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a5, a1, a2);
}

double Image.coverEffect<A>(_:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  double result;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v23 = a4;
  v24 = a1;
  v25 = a5;
  v7 = *(_QWORD *)(a3 - 8);
  __chkstk_darwin(a1);
  v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for _CoverEffectViewModifier(0, v10, v11, v11);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v23 - v14;
  v16 = type metadata accessor for Image.ResizingMode(0);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v19 = (char *)&v23 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD, uint64_t))(v17 + 104))(v19, enum case for Image.ResizingMode.stretch(_:), v16);
  v20 = Image.resizable(capInsets:resizingMode:)(v19, a2, 0.0, 0.0, 0.0, 0.0);
  (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
  v26 = v20;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v24, a3);
  _CoverEffectViewModifier.init(effect:)((uint64_t)v9, a3, v23, v21, (uint64_t)v15);
  View.modifier<A>(_:)(v15, &type metadata for Image, v12, &protocol witness table for Image);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  *(_QWORD *)&result = swift_release(v26).n128_u64[0];
  return result;
}

uint64_t sub_CFD7C()
{
  return EnvironmentValues.redactionReasons.getter();
}

uint64_t sub_CFD9C()
{
  return EnvironmentValues.redactionReasons.getter();
}

uint64_t sub_CFDBC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v7;

  v2 = type metadata accessor for RedactionReasons(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v5 + 16))(v4, a1);
  return EnvironmentValues.redactionReasons.setter(v4);
}

uint64_t _CoverEffectViewModifier.body(content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t WitnessTable;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  void (*v28)(char *, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t AssociatedConformanceWitness;
  void (*v33)(uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v48 = a1;
  v53 = a3;
  v4 = *(_QWORD *)(a2 + 24);
  v49 = *(_QWORD *)(a2 + 16);
  v50 = v4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v4, v49, &protocol requirements base descriptor for CoverEffect, &associated type descriptor for CoverEffect.Body);
  v46 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = __chkstk_darwin(AssociatedTypeWitness);
  v8 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v47 = (uint64_t)&v42 - v9;
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for _CoverEffectViewModifier<A>, a2);
  v11 = type metadata accessor for _ViewModifier_Content(0, a2, WitnessTable);
  v45 = *(_QWORD *)(v11 - 8);
  v12 = __chkstk_darwin(v11);
  v44 = (uint64_t)&v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v43 = (uint64_t)&v42 - v14;
  v15 = type metadata accessor for RedactionReasons(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = __chkstk_darwin(v15);
  v19 = (char *)&v42 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v21 = (char *)&v42 - v20;
  v22 = type metadata accessor for _ConditionalContent(0, v11, AssociatedTypeWitness);
  v51 = *(_QWORD *)(v22 - 8);
  v52 = v22;
  __chkstk_darwin(v22);
  v24 = (char *)&v42 - v23;
  v25 = sub_321E8((uint64_t)v21);
  static RedactionReasons.placeholder.getter(v25);
  v26 = sub_D0210();
  v27 = dispatch thunk of SetAlgebra.isSuperset(of:)(v19, v15, v26);
  v28 = *(void (**)(char *, uint64_t))(v16 + 8);
  v28(v19, v15);
  v28(v21, v15);
  if ((v27 & 1) != 0)
  {
    v29 = swift_getWitnessTable(&protocol conformance descriptor for _ViewModifier_Content<A>, v11);
    v30 = v43;
    sub_10F80(v48, v11, v43);
    v31 = v44;
    sub_C5C0(v30, v11, v44);
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v50, v49, AssociatedTypeWitness, &protocol requirements base descriptor for CoverEffect, &associated conformance descriptor for CoverEffect.CoverEffect.Body: View);
    sub_17C7C(v31, v11, AssociatedTypeWitness, v29, AssociatedConformanceWitness);
    v33 = *(void (**)(uint64_t, uint64_t))(v45 + 8);
    v33(v31, v11);
    v34 = v30;
    v35 = v11;
  }
  else
  {
    v37 = v49;
    v36 = v50;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v50 + 56))(v48, v49, v50);
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v36, v37, AssociatedTypeWitness, &protocol requirements base descriptor for CoverEffect, &associated conformance descriptor for CoverEffect.CoverEffect.Body: View);
    v38 = v47;
    sub_10F80((uint64_t)v8, AssociatedTypeWitness, v47);
    v33 = *(void (**)(uint64_t, uint64_t))(v46 + 8);
    v33((uint64_t)v8, AssociatedTypeWitness);
    sub_C5C0(v38, AssociatedTypeWitness, (uint64_t)v8);
    v39 = swift_getWitnessTable(&protocol conformance descriptor for _ViewModifier_Content<A>, v11);
    sub_17D40((uint64_t)v8, v11, AssociatedTypeWitness, v39, AssociatedConformanceWitness);
    v33((uint64_t)v8, AssociatedTypeWitness);
    v34 = v38;
    v35 = AssociatedTypeWitness;
  }
  v33(v34, v35);
  v54 = swift_getWitnessTable(&protocol conformance descriptor for _ViewModifier_Content<A>, v11);
  v55 = AssociatedConformanceWitness;
  v40 = v52;
  swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v52);
  sub_C5C0((uint64_t)v24, v40, v53);
  return (*(uint64_t (**)(char *, uint64_t))(v51 + 8))(v24, v40);
}

unint64_t sub_D0210()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2642F8[0];
  if (!qword_2642F8[0])
  {
    v1 = type metadata accessor for RedactionReasons(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for RedactionReasons, v1);
    atomic_store(result, qword_2642F8);
  }
  return result;
}

uint64_t sub_D0258(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  return swift_getOpaqueTypeConformance2(&v3, &opaque type descriptor for <<opaque return type of _CoverEffectViewModifier.body(content:)>>, 1);
}

uint64_t dispatch thunk of CoverEffect.body(cover:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 56))();
}

void sub_D0298(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[2];

  v2 = swift_checkMetadataState(319, *(_QWORD *)(a1 + 16));
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_D0FDC(319);
    if (v5 <= 0x3F)
    {
      v6[1] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 0, 2, v6, a1 + 32);
    }
  }
}

uint64_t *sub_D0320(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t *v22;
  unsigned int v23;
  uint64_t v24;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_QWORD *)(type metadata accessor for RedactionReasons(0) - 8);
  v9 = *(_DWORD *)(v8 + 80);
  v10 = v9 & 0xF8 | 7;
  v11 = v7 + v10;
  v12 = (v7 + v10) & ~v10;
  if (*(_QWORD *)(v8 + 64) <= 8uLL)
    v13 = 8;
  else
    v13 = *(_QWORD *)(v8 + 64);
  v14 = v13 + v12 + 1;
  v15 = *(_DWORD *)(v6 + 80) & 0xF8 | v10;
  v16 = (*(_DWORD *)(v6 + 80) | v9) & 0x100000;
  if ((_DWORD)v15 != 7 || v16 != 0 || v14 > 0x18)
  {
    v19 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v19 + ((v15 + 16) & ~v15));
LABEL_21:
    swift_retain(v19);
    return a1;
  }
  v20 = ~v10;
  (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
  v21 = (_QWORD *)(((unint64_t)a1 + v11) & v20);
  v22 = (uint64_t *)(((unint64_t)a2 + v11) & v20);
  v23 = *((unsigned __int8 *)v22 + v13);
  if (v23 >= 2)
  {
    if (v13 <= 3)
      v24 = v13;
    else
      v24 = 4;
    __asm { BR              X12 }
  }
  if (v23 != 1)
  {
    v19 = *v22;
    *v21 = *v22;
    *((_BYTE *)v21 + v13) = 0;
    goto LABEL_21;
  }
  (*(void (**)(unint64_t))(v8 + 16))(((unint64_t)a1 + v11) & v20);
  *((_BYTE *)v21 + v13) = 1;
  return a1;
}

uint64_t sub_D04B4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  unsigned int v9;
  uint64_t v10;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  (*(void (**)(void))(v3 + 8))();
  v4 = *(_QWORD *)(v3 + 64);
  v5 = *(_QWORD *)(type metadata accessor for RedactionReasons(0) - 8);
  v6 = *(_DWORD *)(v5 + 80) & 0xF8 | 7;
  v7 = (_QWORD *)((v4 + a1 + v6) & ~v6);
  v8 = *(_QWORD *)(v5 + 64);
  if (v8 <= 8)
    v8 = 8;
  v9 = *((unsigned __int8 *)v7 + v8);
  if (v9 >= 2)
  {
    if (v8 <= 3)
      v10 = v8;
    else
      v10 = 4;
    __asm { BR              X14 }
  }
  if (v9 == 1)
    return (*(uint64_t (**)(void))(v5 + 8))();
  else
    return swift_release(*v7);
}

uint64_t sub_D05A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  char v15;
  uint64_t v16;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_QWORD *)(type metadata accessor for RedactionReasons(0) - 8);
  v8 = *(_DWORD *)(v7 + 80) & 0xF8 | 7;
  v9 = v6 + v8;
  v10 = (_QWORD *)((v6 + v8 + a1) & ~v8);
  v11 = (uint64_t *)((v9 + a2) & ~v8);
  if (*(_QWORD *)(v7 + 64) <= 8uLL)
    v12 = 8;
  else
    v12 = *(_QWORD *)(v7 + 64);
  v13 = *((unsigned __int8 *)v11 + v12);
  if (v13 >= 2)
  {
    if (v12 <= 3)
      v14 = v12;
    else
      v14 = 4;
    __asm { BR              X13 }
  }
  if (v13 == 1)
  {
    (*(void (**)(_QWORD *))(v7 + 16))(v10);
    v15 = 1;
  }
  else
  {
    v16 = *v11;
    *v10 = *v11;
    swift_retain(v16);
    v15 = 0;
  }
  *((_BYTE *)v10 + v12) = v15;
  return a1;
}

uint64_t sub_D06C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = type metadata accessor for RedactionReasons(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_DWORD *)(v8 + 80) & 0xF8 | 7;
  v10 = v6 + v9;
  v11 = (uint64_t *)((v6 + v9 + a1) & ~v9);
  v12 = (uint64_t *)((v10 + a2) & ~v9);
  if (v11 != v12)
  {
    v13 = v7;
    if (*(_QWORD *)(v8 + 64) <= 8uLL)
      v14 = 8;
    else
      v14 = *(_QWORD *)(v8 + 64);
    v15 = *((unsigned __int8 *)v11 + v14);
    if (v15 >= 2)
    {
      if (v14 <= 3)
        v16 = v14;
      else
        v16 = 4;
      __asm { BR              X12 }
    }
    if (v15 == 1)
      (*(void (**)(uint64_t *, uint64_t))(v8 + 8))(v11, v7);
    else
      swift_release(*v11);
    v17 = *((unsigned __int8 *)v12 + v14);
    if (v17 >= 2)
    {
      if (v14 <= 3)
        v18 = v14;
      else
        v18 = 4;
      __asm { BR              X12 }
    }
    if (v17 == 1)
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(v11, v12, v13);
      *((_BYTE *)v11 + v14) = 1;
    }
    else
    {
      v19 = *v12;
      *v11 = *v12;
      *((_BYTE *)v11 + v14) = 0;
      swift_retain(v19);
    }
  }
  return a1;
}

uint64_t sub_D0894(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  char v15;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_QWORD *)(type metadata accessor for RedactionReasons(0) - 8);
  v8 = *(_DWORD *)(v7 + 80) & 0xF8 | 7;
  v9 = v6 + v8;
  v10 = (_QWORD *)((v6 + v8 + a1) & ~v8);
  v11 = (_QWORD *)((v9 + a2) & ~v8);
  if (*(_QWORD *)(v7 + 64) <= 8uLL)
    v12 = 8;
  else
    v12 = *(_QWORD *)(v7 + 64);
  v13 = *((unsigned __int8 *)v11 + v12);
  if (v13 >= 2)
  {
    if (v12 <= 3)
      v14 = v12;
    else
      v14 = 4;
    __asm { BR              X13 }
  }
  if (v13 == 1)
  {
    (*(void (**)(_QWORD *))(v7 + 32))(v10);
    v15 = 1;
  }
  else
  {
    v15 = 0;
    *v10 = *v11;
  }
  *((_BYTE *)v10 + v12) = v15;
  return a1;
}

uint64_t sub_D09B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  char v19;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = type metadata accessor for RedactionReasons(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_DWORD *)(v8 + 80) & 0xF8 | 7;
  v10 = v6 + v9;
  v11 = (_QWORD *)((v6 + v9 + a1) & ~v9);
  v12 = (_QWORD *)((v10 + a2) & ~v9);
  if (v11 != v12)
  {
    v13 = v7;
    if (*(_QWORD *)(v8 + 64) <= 8uLL)
      v14 = 8;
    else
      v14 = *(_QWORD *)(v8 + 64);
    v15 = *((unsigned __int8 *)v11 + v14);
    if (v15 >= 2)
    {
      if (v14 <= 3)
        v16 = v14;
      else
        v16 = 4;
      __asm { BR              X12 }
    }
    if (v15 == 1)
      (*(void (**)(_QWORD *, uint64_t))(v8 + 8))(v11, v7);
    else
      swift_release(*v11);
    v17 = *((unsigned __int8 *)v12 + v14);
    if (v17 >= 2)
    {
      if (v14 <= 3)
        v18 = v14;
      else
        v18 = 4;
      __asm { BR              X12 }
    }
    if (v17 == 1)
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v8 + 32))(v11, v12, v13);
      v19 = 1;
    }
    else
    {
      v19 = 0;
      *v11 = *v12;
    }
    *((_BYTE *)v11 + v14) = v19;
  }
  return a1;
}

uint64_t sub_D0B78(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  int v15;
  unsigned int v17;
  int v18;
  int v19;
  unsigned int v20;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int *)(v6 + 84);
  v8 = *(_QWORD *)(type metadata accessor for RedactionReasons(0) - 8);
  v9 = 8;
  if (*(_QWORD *)(v8 + 64) > 8uLL)
    v9 = *(_QWORD *)(v8 + 64);
  if (v7 <= 0xFE)
    v10 = 254;
  else
    v10 = v7;
  if (!a2)
    return 0;
  v11 = *(_DWORD *)(v8 + 80) & 0xF8 | 7;
  v12 = *(_QWORD *)(v6 + 64) + v11;
  if (a2 <= v10)
    goto LABEL_26;
  v13 = v9 + (v12 & ~v11) + 1;
  v14 = 8 * v13;
  if (v13 <= 3)
  {
    v17 = ((a2 - v10 + ~(-1 << v14)) >> v14) + 1;
    if (HIWORD(v17))
    {
      v15 = *(_DWORD *)(a1 + v13);
      if (!v15)
        goto LABEL_26;
      goto LABEL_17;
    }
    if (v17 > 0xFF)
    {
      v15 = *(unsigned __int16 *)(a1 + v13);
      if (!*(_WORD *)(a1 + v13))
        goto LABEL_26;
      goto LABEL_17;
    }
    if (v17 < 2)
    {
LABEL_26:
      if (v7 >= 0xFE)
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, v7, v5);
      v20 = *(unsigned __int8 *)(((v12 + a1) & ~v11) + v9);
      if (v20 >= 2)
        return (v20 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v15 = *(unsigned __int8 *)(a1 + v13);
  if (!*(_BYTE *)(a1 + v13))
    goto LABEL_26;
LABEL_17:
  v18 = (v15 - 1) << v14;
  if (v13 > 3)
    v18 = 0;
  if ((_DWORD)v13)
  {
    if (v13 <= 3)
      v19 = v13;
    else
      v19 = 4;
    __asm { BR              X12 }
  }
  return v10 + v18 + 1;
}

void sub_D0D2C(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  uint64_t v12;
  size_t v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  int v17;

  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  v9 = *(_QWORD *)(type metadata accessor for RedactionReasons(0) - 8);
  v10 = *(_QWORD *)(v9 + 64);
  if (v10 <= 8)
    v10 = 8;
  if (v8 <= 0xFE)
    v11 = 254;
  else
    v11 = v8;
  v12 = *(_DWORD *)(v9 + 80) & 0xF8 | 7;
  v13 = ((*(_QWORD *)(v7 + 64) + v12) & ~v12) + v10 + 1;
  if (a3 <= v11)
  {
    v14 = 0;
  }
  else if (v13 <= 3)
  {
    v16 = ((a3 - v11 + ~(-1 << (8 * v13))) >> (8 * v13)) + 1;
    if (HIWORD(v16))
    {
      v14 = &dword_4;
    }
    else if (v16 >= 0x100)
    {
      v14 = 2;
    }
    else
    {
      v14 = v16 > 1;
    }
  }
  else
  {
    v14 = &dword_0 + 1;
  }
  if (v11 < a2)
  {
    v15 = ~v11 + a2;
    if (v13 < 4)
    {
      if ((_DWORD)v13)
      {
        v17 = v15 & ~(-1 << (8 * v13));
        bzero(a1, v13);
        if ((_DWORD)v13 == 3)
        {
          *(_WORD *)a1 = v17;
          a1[2] = BYTE2(v17);
        }
        else if ((_DWORD)v13 == 2)
        {
          *(_WORD *)a1 = v17;
        }
        else
        {
          *a1 = v17;
        }
      }
    }
    else
    {
      bzero(a1, v13);
      *(_DWORD *)a1 = v15;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

void sub_D0FB8()
{
  uint64_t v0;
  int v1;

  *(_WORD *)v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
  JUMPOUT(0xD0FA0);
}

void sub_D0FC8()
{
  _WORD *v0;
  __int16 v1;

  *v0 = v1;
  JUMPOUT(0xD0FA0);
}

void sub_D0FD0()
{
  _DWORD *v0;
  int v1;

  *v0 = v1;
  JUMPOUT(0xD0FA0);
}

void sub_D0FDC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_264380)
  {
    v2 = type metadata accessor for RedactionReasons(255);
    v3 = type metadata accessor for Environment.Content(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_264380);
  }
}

uint64_t sub_D1030(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v6;
  uint64_t v7;

  v1 = *a1;
  v2 = a1[1];
  v3 = a1[3];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v3, v2, &protocol requirements base descriptor for CoverEffect, &associated type descriptor for CoverEffect.Shape);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v3, v2, AssociatedTypeWitness, &protocol requirements base descriptor for CoverEffect, &associated conformance descriptor for CoverEffect.CoverEffect.Shape: InsettableShape);
  v6 = type metadata accessor for _ClipEffect(255, AssociatedTypeWitness, *(_QWORD *)(AssociatedConformanceWitness + 8));
  v7 = type metadata accessor for ModifiedContent(255, v1, v6);
  swift_getWitnessTable(&protocol conformance descriptor for _ClipEffect<A>, v6);
  return swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v7);
}

uint64_t sub_D10FC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *a1;
  v5 = type metadata accessor for _CoverEffectViewModifier(255, a1[1], a1[3], a4);
  v6 = type metadata accessor for ModifiedContent(255, v4, v5);
  swift_getWitnessTable(&protocol conformance descriptor for _CoverEffectViewModifier<A>, v5);
  return swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v6);
}

uint64_t sub_D1174(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  v4 = type metadata accessor for _CoverEffectViewModifier(255, *a1, a1[1], a4);
  v5 = type metadata accessor for ModifiedContent(255, &type metadata for Image, v4);
  swift_getWitnessTable(&protocol conformance descriptor for _CoverEffectViewModifier<A>, v4);
  return swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v5);
}

uint64_t sub_D11EC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t WitnessTable;
  uint64_t v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;

  v4 = *a1;
  v5 = a1[1];
  v6 = type metadata accessor for _CoverEffectViewModifier(255, *a1, v5, a4);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for _CoverEffectViewModifier<A>, v6);
  v8 = type metadata accessor for _ViewModifier_Content(255, v6, WitnessTable);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v5, v4, &protocol requirements base descriptor for CoverEffect, &associated type descriptor for CoverEffect.Body);
  v10 = type metadata accessor for _ConditionalContent(255, v8, AssociatedTypeWitness);
  swift_getWitnessTable(&protocol conformance descriptor for _ViewModifier_Content<A>, v8);
  swift_getAssociatedConformanceWitness(v5, v4, AssociatedTypeWitness, &protocol requirements base descriptor for CoverEffect, &associated conformance descriptor for CoverEffect.CoverEffect.Body: View);
  return swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v10);
}

uint64_t dispatch thunk of CoverStackLayout.axLabel.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t WantToReadToolbarButton.init(assetInfo:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t (*v46)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t (*v93)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v94;
  uint64_t v95;
  uint64_t (*v96)(char *, uint64_t, uint64_t);
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t ToolbarButton;
  uint64_t v105;
  char *v106;
  char *v107;
  uint64_t v108;
  char v109;
  unsigned __int8 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  uint64_t v117;
  char v118;
  _BYTE v119[7];
  uint64_t v120;
  unint64_t v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  _BYTE v125[7];
  char v126;
  char v127;
  unsigned __int8 v128;

  v103 = a2;
  v108 = type metadata accessor for UUID(0);
  v99 = *(_QWORD *)(v108 - 8);
  __chkstk_darwin(v108);
  v107 = (char *)&v86 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_5440(&qword_25E828);
  __chkstk_darwin(v4);
  v106 = (char *)&v86 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v105 = type metadata accessor for AssetAction.Kind(0);
  __chkstk_darwin(v105);
  v7 = (char *)&v86 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_5440(&qword_268370);
  v9 = __chkstk_darwin(v8);
  v100 = (char *)&v86 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v12 = (char *)&v86 - v11;
  v13 = type metadata accessor for ActionMetrics(0);
  v14 = __chkstk_darwin(v13);
  v102 = (uint64_t)&v86 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v98 = (uint64_t)&v86 - v16;
  v17 = type metadata accessor for AssetAction(0);
  v18 = __chkstk_darwin(v17);
  v101 = (uint64_t)&v86 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v97 = (uint64_t)&v86 - v20;
  ToolbarButton = type metadata accessor for WantToReadToolbarButton(0);
  __chkstk_darwin(ToolbarButton);
  v22 = (char *)&v86 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v22 = swift_getKeyPath(&unk_1E9C70);
  *(_OWORD *)(v22 + 8) = 0u;
  *(_OWORD *)(v22 + 24) = 0u;
  *(_OWORD *)(v22 + 40) = 0u;
  *(_OWORD *)(v22 + 51) = 0u;
  *((_QWORD *)v22 + 9) = swift_getKeyPath(&unk_1E9C98);
  v22[80] = 0;
  v23 = a1[3];
  v24 = a1[4];
  sub_5480(a1, v23);
  v92 = ContentInfo.id.getter(v23, *(_QWORD *)(v24 + 8));
  v91 = v25;
  v26 = a1[3];
  v27 = a1[4];
  sub_5480(a1, v26);
  v90 = ContentInfo.id.getter(v26, *(_QWORD *)(v27 + 8));
  v89 = v28;
  v29 = a1[3];
  v30 = a1[4];
  sub_5480(a1, v29);
  v88 = AssetInfo.isExplicit.getter(v29, v30);
  v31 = a1[3];
  v32 = a1[4];
  sub_5480(a1, v31);
  v95 = ContentInfo.id.getter(v31, *(_QWORD *)(v32 + 8));
  v34 = v33;
  v128 = 0;
  v127 = 26;
  LOBYTE(v111) = 26;
  v35 = _s7BooksUI7MetricsO13actionDetails3for9assetInfoSDySSypGSgAC15ClickActionTypeO_14BookFoundation05AssetH0_ptFZ_0(&v111, a1);
  v36 = a1[3];
  v37 = a1[4];
  sub_5480(a1, v36);
  AssetInfo.sharableURL.getter(v36, v37);
  v38 = type metadata accessor for URL(0);
  v39 = *(_QWORD *)(v38 - 8);
  v96 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v39 + 48);
  v40 = v96(v12, 1, v38);
  v87 = v39;
  if (v40 == 1)
  {
    sub_B414((uint64_t)v12, &qword_268370);
    v41 = 0;
    v42 = 0;
  }
  else
  {
    v41 = URL.absoluteString.getter();
    v42 = v43;
    (*(void (**)(char *, uint64_t))(v39 + 8))(v12, v38);
  }
  v126 = 0;
  v117 = 0;
  v115 = 0u;
  v116 = 0u;
  v113 = 0u;
  v114 = 0u;
  v112 = 0u;
  v111 = 0u;
  v118 = 0;
  v120 = 0x6E6F74747562;
  v121 = 0xE600000000000000;
  v122 = 0u;
  v123 = 0u;
  v124 = 0u;
  v44 = v98;
  static Metrics.createClickMetrics(targetId:targetType:actionType:actionDetails:actionUrl:location:)(v95, v34, &v128, &v127, v35, v41, v42, &v111, v98);
  swift_bridgeObjectRelease(v34);
  swift_bridgeObjectRelease(v42);
  swift_bridgeObjectRelease(v35);
  v95 = (uint64_t)" to Read accessoryButton";
  *(_QWORD *)v7 = 0xD00000000000001ALL;
  *((_QWORD *)v7 + 1) = 0x80000000001FB080;
  *((_WORD *)v7 + 8) = 1;
  swift_storeEnumTagMultiPayload(v7, v105, 5);
  v45 = type metadata accessor for ClickData(0);
  v46 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 56);
  v47 = (uint64_t)v106;
  v94 = v45;
  v93 = v46;
  v48 = ((uint64_t (*)(char *, uint64_t, uint64_t))v46)(v106, 1, 1);
  v49 = v107;
  v50 = UUID.init()(v48);
  v51 = UUID.uuidString.getter(v50);
  v53 = v52;
  v99 = *(_QWORD *)(v99 + 8);
  ((void (*)(char *, uint64_t))v99)(v49, v108);
  v54 = v97;
  AssetAction.init(id:assetID:instanceID:isExplicit:actionMetrics:kind:clickData:)(v51, v53, v92, v91, v90, v89, v88 & 1, v44, v97, (uint64_t)v7, v47);
  sub_21C88(v54, (uint64_t)&v22[*(int *)(ToolbarButton + 24)], type metadata accessor for AssetAction);
  v55 = a1[3];
  v56 = a1[4];
  sub_5480(a1, v55);
  v98 = ContentInfo.id.getter(v55, *(_QWORD *)(v56 + 8));
  v97 = v57;
  v58 = a1[3];
  v59 = a1[4];
  sub_5480(a1, v58);
  v92 = ContentInfo.id.getter(v58, *(_QWORD *)(v59 + 8));
  v91 = v60;
  v61 = a1[3];
  v62 = a1[4];
  sub_5480(a1, v61);
  LODWORD(v90) = AssetInfo.isExplicit.getter(v61, v62);
  v63 = a1[3];
  v64 = a1[4];
  sub_5480(a1, v63);
  v65 = ContentInfo.id.getter(v63, *(_QWORD *)(v64 + 8));
  v67 = v66;
  v110 = 0;
  v109 = 1;
  LOBYTE(v111) = 1;
  v68 = _s7BooksUI7MetricsO13actionDetails3for9assetInfoSDySSypGSgAC15ClickActionTypeO_14BookFoundation05AssetH0_ptFZ_0(&v111, a1);
  v69 = a1[3];
  v70 = a1[4];
  sub_5480(a1, v69);
  v71 = (uint64_t)v100;
  AssetInfo.sharableURL.getter(v69, v70);
  if (v96((char *)v71, 1, v38) == 1)
  {
    sub_B414(v71, &qword_268370);
    v72 = 0;
    v73 = 0;
  }
  else
  {
    v72 = URL.absoluteString.getter();
    v73 = v74;
    (*(void (**)(uint64_t, uint64_t))(v87 + 8))(v71, v38);
  }
  v117 = 0;
  v115 = 0u;
  v116 = 0u;
  v113 = 0u;
  v114 = 0u;
  v112 = 0u;
  v111 = 0u;
  v118 = v126;
  *(_DWORD *)v119 = *(_DWORD *)v125;
  *(_DWORD *)&v119[3] = *(_DWORD *)&v125[3];
  v120 = 0x6E6F74747562;
  v121 = 0xE600000000000000;
  v122 = 0u;
  v123 = 0u;
  v124 = 0u;
  v75 = v102;
  static Metrics.createClickMetrics(targetId:targetType:actionType:actionDetails:actionUrl:location:)(v65, v67, &v110, &v109, v68, v72, v73, &v111, v102);
  swift_bridgeObjectRelease(v67);
  swift_bridgeObjectRelease(v73);
  swift_bridgeObjectRelease(v68);
  v76 = v95 | 0x8000000000000000;
  *(_QWORD *)v7 = 0xD00000000000001ALL;
  *((_QWORD *)v7 + 1) = v76;
  *((_WORD *)v7 + 8) = 1;
  swift_storeEnumTagMultiPayload(v7, v105, 0);
  v77 = (uint64_t)v106;
  v78 = v93(v106, 1, 1, v94);
  v79 = v107;
  v80 = UUID.init()(v78);
  v81 = UUID.uuidString.getter(v80);
  v83 = v82;
  ((void (*)(char *, uint64_t))v99)(v79, v108);
  v84 = v101;
  AssetAction.init(id:assetID:instanceID:isExplicit:actionMetrics:kind:clickData:)(v81, v83, v98, v97, v92, v91, v90 & 1, v75, v101, (uint64_t)v7, v77);
  sub_21C88(v84, (uint64_t)&v22[*(int *)(ToolbarButton + 28)], type metadata accessor for AssetAction);
  sub_21C88((uint64_t)v22, v103, type metadata accessor for WantToReadToolbarButton);
  return _s7BooksUI13AnyPagedFrameVwxx_0(a1);
}

uint64_t type metadata accessor for WantToReadToolbarButton(uint64_t a1)
{
  uint64_t result;

  result = qword_264438;
  if (!qword_264438)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for WantToReadToolbarButton);
  return result;
}

uint64_t WantToReadToolbarButton.body.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _BYTE v8[16];
  uint64_t v9;

  v1 = sub_5440(&qword_264388);
  __chkstk_darwin(v1);
  v3 = &v8[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_D1D48(v0, (uint64_t)v3);
  v9 = v0;
  v4 = type metadata accessor for LocalizedText(0);
  v5 = sub_D2C68();
  v6 = sub_6FD0((unint64_t *)&qword_25FEA8, (uint64_t (*)(uint64_t))&type metadata accessor for LocalizedText, (uint64_t)&protocol conformance descriptor for LocalizedText);
  View.accessibilityLabel<A>(content:)(sub_D2C48, v8, v1, v4, v5, v6);
  return sub_B414((uint64_t)v3, &qword_264388);
}

uint64_t sub_D1D48@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  char v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  __int128 v29;
  __int128 v30;
  int v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  char *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t (**v56)@<X0>(char *@<X8>);
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  char *v63;
  char *v64;
  char *v65;
  void (*v66)(char *, uint64_t);
  uint64_t v67;
  uint64_t OpaqueTypeConformance2;
  char *v69;
  char *v70;
  char *v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t ToolbarButton;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  char *v95;
  char *v96;
  __int128 v97;
  __int128 v98;
  uint64_t v99;
  unint64_t v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  _BYTE v104[19];
  __int128 v105;
  __int128 v106;
  __int128 v107;
  _BYTE v108[19];

  v94 = a2;
  v91 = sub_5440(&qword_2643C8);
  v79 = *(_QWORD *)(v91 - 8);
  __chkstk_darwin(v91);
  v78 = (char *)&v77 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v92 = sub_5440(&qword_264478);
  __chkstk_darwin(v92);
  v93 = (char *)&v77 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v90 = type metadata accessor for AutomationSemantics(0);
  v88 = *(_QWORD *)(v90 - 8);
  v5 = __chkstk_darwin(v90);
  v96 = (char *)&v77 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v89 = (char *)&v77 - v7;
  v8 = type metadata accessor for DataStackID(0);
  __chkstk_darwin(v8);
  v83 = (char *)&v77 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  ToolbarButton = type metadata accessor for WantToReadToolbarButton(0);
  v81 = *(_QWORD *)(ToolbarButton - 8);
  v10 = *(_QWORD *)(v81 + 64);
  __chkstk_darwin(ToolbarButton);
  v82 = (uint64_t)&v77 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_5440(qword_25E3E8);
  __chkstk_darwin(v11);
  v13 = (char *)&v77 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = (int *)sub_5440(&qword_263DB0);
  __chkstk_darwin(v14);
  v16 = (char *)&v77 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_5440(&qword_2643A8);
  v85 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v95 = (char *)&v77 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_5440(&qword_264480);
  v87 = *(_QWORD *)(v19 - 8);
  v20 = __chkstk_darwin(v19);
  v84 = (char *)&v77 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v86 = (char *)&v77 - v22;
  v23 = *(void **)(a1 + 72);
  v24 = *(_BYTE *)(a1 + 80);
  sub_18EF0(v23, v24);
  v25 = (void *)sub_30F6C(v23, v24);
  sub_19034(v23, v24);

  if (v25)
  {
    v78 = (char *)v17;
    v79 = v19;
    v27 = type metadata accessor for ButtonRole(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v13, 1, 1, v27);
    *((_QWORD *)&v98 + 1) = type metadata accessor for AssetAction(0);
    v99 = sub_6FD0(&qword_261738, type metadata accessor for AssetAction, (uint64_t)&protocol conformance descriptor for AssetAction);
    v28 = sub_C404(&v97);
    v29 = *(_OWORD *)(a1 + 48);
    v107 = *(_OWORD *)(a1 + 32);
    *(_OWORD *)v108 = v29;
    *(_DWORD *)&v108[15] = *(_DWORD *)(a1 + 63);
    v30 = *(_OWORD *)(a1 + 16);
    v105 = *(_OWORD *)a1;
    v106 = v30;
    sub_34820((uint64_t)&v105, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))sub_3480C);
    sub_316C0((uint64_t)&v101);
    sub_34820((uint64_t)&v105, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))sub_BDF8);
    if (*((_QWORD *)&v101 + 1)
      && (v31 = *(_DWORD *)v104, swift_bridgeObjectRelease(*((_QWORD *)&v101 + 1)), (v31 & 0x10000) != 0))
    {
      v32 = 6;
    }
    else
    {
      v32 = 7;
    }
    sub_1E428(a1 + *(int *)(ToolbarButton + 4 * v32), (uint64_t)v28, type metadata accessor for AssetAction);
    v45 = v82;
    sub_1E428(a1, v82, type metadata accessor for WantToReadToolbarButton);
    v46 = *(unsigned __int8 *)(v81 + 80);
    v47 = (v46 + 16) & ~v46;
    v48 = swift_allocObject(&unk_251258, v47 + v10, v46 | 7);
    v49 = sub_21C88(v45, v48 + v47, type metadata accessor for WantToReadToolbarButton);
    v50 = v83;
    static DataStackID.additionalEventData.getter(v49);
    AppAnalyticsData.init(_:)(v50);
    v51 = &v16[v14[9]];
    *(_QWORD *)v51 = swift_getKeyPath(&unk_1E9C98);
    v51[8] = 0;
    v52 = &v16[v14[10]];
    *(_QWORD *)v52 = swift_getKeyPath(&unk_1E9D68);
    v53 = sub_5440(&qword_25E818);
    swift_storeEnumTagMultiPayload(v52, v53, 0);
    v54 = &v16[v14[11]];
    *(_QWORD *)v54 = swift_getKeyPath(&unk_1E9D98);
    v54[40] = 0;
    sub_167A4((uint64_t)v13, (uint64_t)&v16[v14[12]], qword_25E3E8);
    v55 = sub_167A4((uint64_t)&v97, (uint64_t)&v16[v14[13]], &qword_25E820);
    v56 = (uint64_t (**)@<X0>(char *@<X8>))&v16[v14[14]];
    *v56 = sub_D5664;
    v56[1] = (uint64_t (*)@<X0>(char *@<X8>))v48;
    __chkstk_darwin(v55);
    *(&v77 - 2) = a1;
    v57 = sub_5440(&qword_2643B0);
    v58 = sub_7FD8(&qword_263DB8, &qword_263DB0, (uint64_t)&protocol conformance descriptor for BooksActionButton<A>);
    v59 = sub_7FD8(&qword_2643B8, &qword_2643B0, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    View.accessibilityShowsLargeContentViewer<A>(_:)(sub_D56B0, &v77 - 4, v14, v57, v58, v59);
    sub_B414((uint64_t)v16, &qword_263DB0);
    v101 = 0u;
    v102 = 0u;
    v98 = 0u;
    v97 = 0u;
    static AutomationSemantics.productPage(elementName:id:parentId:)(0xD000000000000010, 0x80000000001FBFA0, &v101, &v97);
    sub_B414((uint64_t)&v97, &qword_25E0C0);
    sub_B414((uint64_t)&v101, &qword_25E0C0);
    v60 = *(_OWORD *)(a1 + 48);
    v103 = *(_OWORD *)(a1 + 32);
    *(_OWORD *)v104 = v60;
    *(_DWORD *)&v104[15] = *(_DWORD *)(a1 + 63);
    v61 = *(_OWORD *)(a1 + 16);
    v101 = *(_OWORD *)a1;
    v102 = v61;
    sub_34820((uint64_t)&v101, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))sub_3480C);
    sub_316C0((uint64_t)&v97);
    sub_34820((uint64_t)&v101, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))sub_BDF8);
    if (*((_QWORD *)&v97 + 1))
    {
      v62 = (v100 >> 16) & 1;
      swift_bridgeObjectRelease(*((_QWORD *)&v97 + 1));
    }
    else
    {
      LOBYTE(v62) = 0;
    }
    v63 = v93;
    *((_QWORD *)&v98 + 1) = &type metadata for Bool;
    LOBYTE(v97) = v62;
    v64 = v89;
    v65 = v96;
    AutomationSemantics.attribute(key:value:)(0x746E61576E497369, 0xEE00646165526F54, &v97);
    v66 = *(void (**)(char *, uint64_t))(v88 + 8);
    v67 = v90;
    v66(v65, v90);
    sub_B414((uint64_t)&v97, &qword_25E0C0);
    *(_QWORD *)&v97 = v14;
    *((_QWORD *)&v97 + 1) = v57;
    *(_QWORD *)&v98 = v58;
    *((_QWORD *)&v98 + 1) = v59;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v97, &opaque type descriptor for <<opaque return type of View.accessibilityShowsLargeContentViewer<A>(_:)>>, 1);
    v69 = v84;
    v70 = v78;
    v71 = v95;
    View.automationSemantics(_:)(v64, v78, OpaqueTypeConformance2);
    v66(v64, v67);
    (*(void (**)(char *, char *))(v85 + 8))(v71, v70);
    v72 = v87;
    v73 = v86;
    v74 = v79;
    (*(void (**)(char *, char *, uint64_t))(v87 + 32))(v86, v69, v79);
    (*(void (**)(char *, char *, uint64_t))(v72 + 16))(v63, v73, v74);
    swift_storeEnumTagMultiPayload(v63, v92, 0);
    *(_QWORD *)&v97 = v70;
    *((_QWORD *)&v97 + 1) = OpaqueTypeConformance2;
    v75 = swift_getOpaqueTypeConformance2(&v97, &opaque type descriptor for <<opaque return type of View.automationSemantics(_:)>>, 1);
    v76 = sub_7FD8(&qword_2643C0, &qword_2643C8, (uint64_t)&protocol conformance descriptor for Button<A>);
    _ConditionalContent<>.init(storage:)(v63, v74, v91, v75, v76);
    return (*(uint64_t (**)(char *, uint64_t))(v72 + 8))(v73, v74);
  }
  else
  {
    __chkstk_darwin(v26);
    *(&v77 - 2) = a1;
    v33 = sub_4F0A4();
    v34 = v78;
    Button.init(action:label:)(sub_D2A80, 0, sub_D539C, &v77 - 4, &type metadata for BooksToolbarIconView, v33);
    v35 = v79;
    v36 = v93;
    v37 = v91;
    (*(void (**)(char *, char *, uint64_t))(v79 + 16))(v93, v34, v91);
    swift_storeEnumTagMultiPayload(v36, v92, 1);
    v38 = sub_7EF8(&qword_2643B0);
    v39 = sub_7FD8(&qword_263DB8, &qword_263DB0, (uint64_t)&protocol conformance descriptor for BooksActionButton<A>);
    v40 = sub_7FD8(&qword_2643B8, &qword_2643B0, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    *(_QWORD *)&v105 = v14;
    *((_QWORD *)&v105 + 1) = v38;
    *(_QWORD *)&v106 = v39;
    *((_QWORD *)&v106 + 1) = v40;
    v41 = swift_getOpaqueTypeConformance2(&v105, &opaque type descriptor for <<opaque return type of View.accessibilityShowsLargeContentViewer<A>(_:)>>, 1);
    *(_QWORD *)&v105 = v17;
    *((_QWORD *)&v105 + 1) = v41;
    v42 = swift_getOpaqueTypeConformance2(&v105, &opaque type descriptor for <<opaque return type of View.automationSemantics(_:)>>, 1);
    v43 = sub_7FD8(&qword_2643C0, &qword_2643C8, (uint64_t)&protocol conformance descriptor for Button<A>);
    _ConditionalContent<>.init(storage:)(v36, v19, v37, v42, v43);
    return (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v34, v37);
  }
}

uint64_t sub_D2788@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  __int128 v3;
  __int128 v4;
  uint64_t result;
  int v6;
  char v7;
  _BYTE v8[8];
  uint64_t v9;
  uint64_t v10;
  _OWORD v11[3];
  _OWORD v12[2];

  v3 = *(_OWORD *)(a1 + 48);
  v11[2] = *(_OWORD *)(a1 + 32);
  v12[0] = v3;
  *(_DWORD *)((char *)v12 + 15) = *(_DWORD *)(a1 + 63);
  v4 = *(_OWORD *)(a1 + 16);
  v11[0] = *(_OWORD *)a1;
  v11[1] = v4;
  sub_34820((uint64_t)v11, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))sub_3480C);
  sub_316C0((uint64_t)v8);
  sub_34820((uint64_t)v11, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))sub_BDF8);
  result = v9;
  if (v9 && (v6 = v10, result = swift_bridgeObjectRelease(v9), (v6 & 0x10000) != 0))
    v7 = 1;
  else
    v7 = 4;
  *a2 = v7;
  return result;
}

double sub_D2814@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  __int128 v11;
  __int128 v12;
  int v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, char *, uint64_t);
  uint64_t v18;
  void (*v19)(char *, uint64_t, __n128);
  __n128 v20;
  double result;
  _BYTE v23[8];
  uint64_t v24;
  uint64_t v25;
  _OWORD v26[3];
  _OWORD v27[2];

  v4 = type metadata accessor for LocalizedText(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = &v23[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v6);
  v10 = &v23[-v9 - 8];
  v11 = *(_OWORD *)(a1 + 48);
  v26[2] = *(_OWORD *)(a1 + 32);
  v27[0] = v11;
  *(_DWORD *)((char *)v27 + 15) = *(_DWORD *)(a1 + 63);
  v12 = *(_OWORD *)(a1 + 16);
  v26[0] = *(_OWORD *)a1;
  v26[1] = v12;
  sub_34820((uint64_t)v26, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))sub_3480C);
  sub_316C0((uint64_t)v23);
  sub_34820((uint64_t)v26, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))sub_BDF8);
  if (v24 && (v13 = v25, swift_bridgeObjectRelease(v24), (v13 & 0x10000) != 0))
  {
    v14 = 0xE90000000000006BLL;
    v15 = 0x72616D6B63656863;
  }
  else
  {
    v14 = 0xE400000000000000;
    v15 = 1937075312;
  }
  v16 = Image.init(systemName:)(v15, v14);
  sub_D29A0();
  v17 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
  v17(v8, v10, v4);
  *a2 = v16;
  v18 = sub_5440(&qword_264488);
  v17((char *)a2 + *(int *)(v18 + 48), v8, v4);
  v19 = *(void (**)(char *, uint64_t, __n128))(v5 + 8);
  v20 = swift_retain(v16);
  v19(v10, v4, v20);
  ((void (*)(char *, uint64_t))v19)(v8, v4);
  *(_QWORD *)&result = swift_release(v16).n128_u64[0];
  return result;
}

uint64_t sub_D29A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  __int128 v4;
  __int128 v5;
  int v6;
  char v7;
  char v10[8];
  uint64_t v11;
  uint64_t v12;
  _OWORD v13[3];
  _OWORD v14[2];

  v1 = type metadata accessor for LocalizerRequest(0);
  __chkstk_darwin(v1);
  v3 = &v10[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v4 = *(_OWORD *)(v0 + 48);
  v13[2] = *(_OWORD *)(v0 + 32);
  v14[0] = v4;
  *(_DWORD *)((char *)v14 + 15) = *(_DWORD *)(v0 + 63);
  v5 = *(_OWORD *)(v0 + 16);
  v13[0] = *(_OWORD *)v0;
  v13[1] = v5;
  sub_34820((uint64_t)v13, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))sub_3480C);
  sub_316C0((uint64_t)v10);
  sub_34820((uint64_t)v13, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))sub_BDF8);
  if (v11 && (v6 = v12, swift_bridgeObjectRelease(v11), (v6 & 0x10000) != 0))
    v7 = 1;
  else
    v7 = 4;
  v10[0] = v7;
  SymbolImage.Kind.accessibilityLocalizable.getter();
  return LocalizedText.init(_:)(v3);
}

void sub_D2A80()
{
  uint64_t v0;
  uint64_t v1;
  os_log_type_t v2;
  uint8_t *v3;
  NSObject *oslog;

  if (qword_25DB10 != -1)
    swift_once(&qword_25DB10, sub_72E8);
  v0 = type metadata accessor for Logger(0);
  v1 = sub_7120(v0, (uint64_t)qword_25DF00);
  oslog = Logger.logObject.getter(v1);
  v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(oslog, v2))
  {
    v3 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v3 = 0;
    _os_log_impl(&dword_0, oslog, v2, "Attempt to use CircularWantToReadButton without analytics tracker", v3, 2u);
    swift_slowDealloc(v3, -1, -1);
  }

}

uint64_t sub_D2B4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _BYTE v8[16];
  uint64_t v9;

  v1 = sub_5440(&qword_264388);
  __chkstk_darwin(v1);
  v3 = &v8[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_D1D48(v0, (uint64_t)v3);
  v9 = v0;
  v4 = type metadata accessor for LocalizedText(0);
  v5 = sub_D2C68();
  v6 = sub_6FD0((unint64_t *)&qword_25FEA8, (uint64_t (*)(uint64_t))&type metadata accessor for LocalizedText, (uint64_t)&protocol conformance descriptor for LocalizedText);
  View.accessibilityLabel<A>(content:)(sub_D56B8, v8, v1, v4, v5, v6);
  return sub_B414((uint64_t)v3, &qword_264388);
}

uint64_t sub_D2C48()
{
  return sub_D29A0();
}

unint64_t sub_D2C68()
{
  unint64_t result;
  uint64_t v1;

  result = qword_264390;
  if (!qword_264390)
  {
    v1 = sub_7EF8(&qword_264388);
    sub_D2CCC();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> Group<A>, v1);
    atomic_store(result, (unint64_t *)&qword_264390);
  }
  return result;
}

unint64_t sub_D2CCC()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t OpaqueTypeConformance2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = qword_264398;
  if (!qword_264398)
  {
    v1 = sub_7EF8(&qword_2643A0);
    v2 = sub_7EF8(&qword_2643A8);
    v4 = sub_7EF8(&qword_263DB0);
    v5 = sub_7EF8(&qword_2643B0);
    v6 = sub_7FD8(&qword_263DB8, &qword_263DB0, (uint64_t)&protocol conformance descriptor for BooksActionButton<A>);
    v7 = sub_7FD8(&qword_2643B8, &qword_2643B0, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v4, &opaque type descriptor for <<opaque return type of View.accessibilityShowsLargeContentViewer<A>(_:)>>, 1);
    v4 = v2;
    v5 = OpaqueTypeConformance2;
    swift_getOpaqueTypeConformance2(&v4, &opaque type descriptor for <<opaque return type of View.automationSemantics(_:)>>, 1);
    sub_7FD8(&qword_2643C0, &qword_2643C8, (uint64_t)&protocol conformance descriptor for Button<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_264398);
  }
  return result;
}

uint64_t sub_D2DFC(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &opaque type descriptor for <<opaque return type of WantToReadToolbarButton.body>>, 1);
}

unint64_t initializeBufferWithCopyOfBuffer for WantToReadToolbarButton(unint64_t a1, uint64_t a2, uint64_t a3)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int16 v13;
  char v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t, uint64_t);
  uint64_t v28;
  void *v29;
  const void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  id v46;
  void *v47;
  id v48;
  uint64_t v49;
  void *v50;
  id v51;
  void *v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  const void *v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  _QWORD *v77;
  uint64_t v78;
  void *v79;
  id v80;
  void *v81;
  id v82;
  uint64_t v83;
  void *v84;
  id v85;
  void *v86;
  id v87;
  uint64_t v88;
  uint64_t v89;
  void *v90;
  id v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unsigned int (*v97)(const void *, uint64_t, uint64_t);
  void (*v98)(uint64_t, uint64_t, uint64_t);
  uint64_t v99;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v34 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    v35 = v34 + ((v4 + 16) & ~(unint64_t)v4);
    swift_retain(v34);
  }
  else
  {
    v5 = *(_QWORD *)a2;
    v6 = *(_QWORD *)(a2 + 8);
    v7 = *(_QWORD *)(a2 + 16);
    v8 = *(_QWORD *)(a2 + 24);
    v9 = *(_QWORD *)(a2 + 32);
    v10 = *(_QWORD *)(a2 + 40);
    v12 = *(_QWORD *)(a2 + 48);
    v11 = *(_QWORD *)(a2 + 56);
    v13 = *(_WORD *)(a2 + 64);
    v14 = *(_BYTE *)(a2 + 66);
    sub_3480C(*(_QWORD *)a2, v6, v7, v8, v9, v10, v12, v11, v13, v14);
    *(_QWORD *)a1 = v5;
    *(_QWORD *)(a1 + 8) = v6;
    *(_QWORD *)(a1 + 16) = v7;
    *(_QWORD *)(a1 + 24) = v8;
    *(_QWORD *)(a1 + 32) = v9;
    *(_QWORD *)(a1 + 40) = v10;
    *(_QWORD *)(a1 + 48) = v12;
    *(_QWORD *)(a1 + 56) = v11;
    *(_WORD *)(a1 + 64) = v13;
    *(_BYTE *)(a1 + 66) = v14;
    v15 = *(void **)(a2 + 72);
    LOBYTE(v6) = *(_BYTE *)(a2 + 80);
    sub_18EF0(v15, v6);
    *(_QWORD *)(a1 + 72) = v15;
    *(_BYTE *)(a1 + 80) = v6;
    v16 = *(int *)(a3 + 24);
    v17 = a1 + v16;
    v18 = a2 + v16;
    v19 = *(_QWORD *)(a2 + v16 + 8);
    *(_QWORD *)v17 = *(_QWORD *)(a2 + v16);
    *(_QWORD *)(v17 + 8) = v19;
    v20 = *(_QWORD *)(a2 + v16 + 24);
    *(_QWORD *)(v17 + 16) = *(_QWORD *)(a2 + v16 + 16);
    *(_QWORD *)(v17 + 24) = v20;
    v21 = *(_QWORD *)(a2 + v16 + 40);
    *(_QWORD *)(v17 + 32) = *(_QWORD *)(a2 + v16 + 32);
    *(_QWORD *)(v17 + 40) = v21;
    *(_BYTE *)(v17 + 48) = *(_BYTE *)(a2 + v16 + 48);
    v22 = (int *)type metadata accessor for AssetAction(0);
    v23 = v22[8];
    v24 = v17 + v23;
    v25 = v18 + v23;
    v26 = type metadata accessor for ActionMetrics(0);
    v27 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 16);
    swift_bridgeObjectRetain(v19);
    swift_bridgeObjectRetain(v20);
    swift_bridgeObjectRetain(v21);
    v98 = v27;
    v99 = v26;
    v27(v24, v25, v26);
    v28 = v22[9];
    v29 = (void *)(v17 + v28);
    v30 = (const void *)(v18 + v28);
    v31 = type metadata accessor for ClickData(0);
    v32 = *(_QWORD *)(v31 - 8);
    v97 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v32 + 48);
    v96 = v32;
    if (v97(v30, 1, v31))
    {
      v33 = sub_5440(&qword_25E828);
      memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v32 + 16))(v29, v30, v31);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v29, 0, 1, v31);
    }
    v37 = v22[10];
    v38 = (_QWORD *)(v17 + v37);
    v39 = (_QWORD *)(v18 + v37);
    v40 = type metadata accessor for AssetAction.Kind(0);
    v35 = a1;
    switch(swift_getEnumCaseMultiPayload(v39, v40))
    {
      case 0u:
        v41 = v39[1];
        *v38 = *v39;
        v38[1] = v41;
        *((_WORD *)v38 + 8) = *((_WORD *)v39 + 8);
        swift_bridgeObjectRetain(v41);
        v42 = v38;
        v43 = v40;
        v44 = 0;
        goto LABEL_19;
      case 1u:
        v45 = (void *)*v39;
        *v38 = *v39;
        v46 = v45;
        v42 = v38;
        v43 = v40;
        v44 = 1;
        goto LABEL_19;
      case 2u:
        v47 = (void *)*v39;
        *v38 = *v39;
        v48 = v47;
        v42 = v38;
        v43 = v40;
        v44 = 2;
        goto LABEL_19;
      case 3u:
        v49 = v39[1];
        *v38 = *v39;
        v38[1] = v49;
        *((_BYTE *)v38 + 16) = *((_BYTE *)v39 + 16);
        v50 = (void *)v39[3];
        v38[3] = v50;
        swift_bridgeObjectRetain(v49);
        v51 = v50;
        v35 = a1;
        v42 = v38;
        v43 = v40;
        v44 = 3;
        goto LABEL_19;
      case 4u:
        v52 = (void *)*v39;
        *v38 = *v39;
        v53 = v52;
        v42 = v38;
        v43 = v40;
        v44 = 4;
        goto LABEL_19;
      case 5u:
        v54 = v39[1];
        *v38 = *v39;
        v38[1] = v54;
        *((_WORD *)v38 + 8) = *((_WORD *)v39 + 8);
        swift_bridgeObjectRetain(v54);
        v42 = v38;
        v43 = v40;
        v44 = 5;
        goto LABEL_19;
      case 6u:
        v55 = type metadata accessor for URL(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v55 - 8) + 16))(v38, v39, v55);
        v42 = v38;
        v43 = v40;
        v44 = 6;
        goto LABEL_19;
      case 7u:
        v56 = (void *)*v39;
        *v38 = *v39;
        v57 = v56;
        v42 = v38;
        v43 = v40;
        v44 = 7;
        goto LABEL_19;
      case 9u:
        v58 = type metadata accessor for Date(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v58 - 8) + 16))(v38, v39, v58);
        v59 = sub_5440(&qword_2643D0);
        *((_BYTE *)v38 + *(int *)(v59 + 48)) = *((_BYTE *)v39 + *(int *)(v59 + 48));
        v42 = v38;
        v43 = v40;
        v44 = 9;
        goto LABEL_19;
      case 0xAu:
        v60 = type metadata accessor for Date(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v60 - 8) + 16))(v38, v39, v60);
        v61 = sub_5440(&qword_2643D8);
        *((_BYTE *)v38 + *(int *)(v61 + 48)) = *((_BYTE *)v39 + *(int *)(v61 + 48));
        v42 = v38;
        v43 = v40;
        v44 = 10;
LABEL_19:
        swift_storeEnumTagMultiPayload(v42, v43, v44);
        break;
      default:
        memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
        break;
    }
    v62 = *(int *)(a3 + 28);
    v63 = v35 + v62;
    v64 = a2 + v62;
    v65 = *(_QWORD *)(a2 + v62 + 8);
    *(_QWORD *)v63 = *(_QWORD *)(a2 + v62);
    *(_QWORD *)(v63 + 8) = v65;
    v66 = *(_QWORD *)(a2 + v62 + 24);
    *(_QWORD *)(v63 + 16) = *(_QWORD *)(a2 + v62 + 16);
    *(_QWORD *)(v63 + 24) = v66;
    v67 = *(_QWORD *)(a2 + v62 + 40);
    *(_QWORD *)(v63 + 32) = *(_QWORD *)(a2 + v62 + 32);
    *(_QWORD *)(v63 + 40) = v67;
    *(_BYTE *)(v63 + 48) = *(_BYTE *)(a2 + v62 + 48);
    v68 = v22[8];
    v69 = v63 + v68;
    v70 = v64 + v68;
    swift_bridgeObjectRetain(v65);
    swift_bridgeObjectRetain(v66);
    swift_bridgeObjectRetain(v67);
    v98(v69, v70, v99);
    v71 = v22[9];
    v72 = (void *)(v63 + v71);
    v73 = (const void *)(v64 + v71);
    if (v97((const void *)(v64 + v71), 1, v31))
    {
      v74 = sub_5440(&qword_25E828);
      memcpy(v72, v73, *(_QWORD *)(*(_QWORD *)(v74 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v96 + 16))(v72, v73, v31);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v96 + 56))(v72, 0, 1, v31);
    }
    v75 = v22[10];
    v76 = (_QWORD *)(v63 + v75);
    v77 = (_QWORD *)(v64 + v75);
    switch(swift_getEnumCaseMultiPayload(v64 + v75, v40))
    {
      case 0u:
        v78 = v77[1];
        *v76 = *v77;
        v76[1] = v78;
        *((_WORD *)v76 + 8) = *((_WORD *)v77 + 8);
        swift_bridgeObjectRetain(v78);
        swift_storeEnumTagMultiPayload(v76, v40, 0);
        break;
      case 1u:
        v79 = (void *)*v77;
        *v76 = *v77;
        v80 = v79;
        swift_storeEnumTagMultiPayload(v76, v40, 1);
        break;
      case 2u:
        v81 = (void *)*v77;
        *v76 = *v77;
        v82 = v81;
        swift_storeEnumTagMultiPayload(v76, v40, 2);
        break;
      case 3u:
        v83 = v77[1];
        *v76 = *v77;
        v76[1] = v83;
        *((_BYTE *)v76 + 16) = *((_BYTE *)v77 + 16);
        v84 = (void *)v77[3];
        v76[3] = v84;
        swift_bridgeObjectRetain(v83);
        v85 = v84;
        v35 = a1;
        swift_storeEnumTagMultiPayload(v76, v40, 3);
        break;
      case 4u:
        v86 = (void *)*v77;
        *v76 = *v77;
        v87 = v86;
        swift_storeEnumTagMultiPayload(v76, v40, 4);
        break;
      case 5u:
        v88 = v77[1];
        *v76 = *v77;
        v76[1] = v88;
        *((_WORD *)v76 + 8) = *((_WORD *)v77 + 8);
        swift_bridgeObjectRetain(v88);
        swift_storeEnumTagMultiPayload(v76, v40, 5);
        break;
      case 6u:
        v89 = type metadata accessor for URL(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v89 - 8) + 16))(v76, v77, v89);
        swift_storeEnumTagMultiPayload(v76, v40, 6);
        break;
      case 7u:
        v90 = (void *)*v77;
        *v76 = *v77;
        v91 = v90;
        swift_storeEnumTagMultiPayload(v76, v40, 7);
        break;
      case 9u:
        v92 = type metadata accessor for Date(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v92 - 8) + 16))(v76, v77, v92);
        v93 = sub_5440(&qword_2643D0);
        *((_BYTE *)v76 + *(int *)(v93 + 48)) = *((_BYTE *)v77 + *(int *)(v93 + 48));
        swift_storeEnumTagMultiPayload(v76, v40, 9);
        break;
      case 0xAu:
        v94 = type metadata accessor for Date(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v94 - 8) + 16))(v76, v77, v94);
        v95 = sub_5440(&qword_2643D8);
        *((_BYTE *)v76 + *(int *)(v95 + 48)) = *((_BYTE *)v77 + *(int *)(v95 + 48));
        swift_storeEnumTagMultiPayload(v76, v40, 10);
        break;
      default:
        memcpy(v76, v77, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
        break;
    }
  }
  return v35;
}

void destroy for WantToReadToolbarButton(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  int *v5;
  char *v6;
  uint64_t v7;
  void (*v8)(char *, uint64_t);
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(char *, uint64_t, uint64_t);
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  void *v19;
  uint64_t v20;

  sub_BDF8(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_WORD *)(a1 + 64), *(_BYTE *)(a1 + 66));
  sub_19034(*(id *)(a1 + 72), *(_BYTE *)(a1 + 80));
  v4 = (_QWORD *)(a1 + *(int *)(a2 + 24));
  swift_bridgeObjectRelease(v4[1]);
  swift_bridgeObjectRelease(v4[3]);
  swift_bridgeObjectRelease(v4[5]);
  v5 = (int *)type metadata accessor for AssetAction(0);
  v6 = (char *)v4 + v5[8];
  v7 = type metadata accessor for ActionMetrics(0);
  v8 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v7 - 8) + 8);
  v8(v6, v7);
  v9 = (char *)v4 + v5[9];
  v10 = type metadata accessor for ClickData(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  if (!v12(v9, 1, v10))
    (*(void (**)(char *, uint64_t))(v11 + 8))(v9, v10);
  v13 = (char *)v4 + v5[10];
  v14 = type metadata accessor for AssetAction.Kind(0);
  switch(swift_getEnumCaseMultiPayload(v13, v14))
  {
    case 0u:
    case 5u:
      swift_bridgeObjectRelease(*((_QWORD *)v13 + 1));
      break;
    case 1u:
    case 2u:
    case 4u:
    case 7u:

      break;
    case 3u:
      swift_bridgeObjectRelease(*((_QWORD *)v13 + 1));

      break;
    case 6u:
      v15 = type metadata accessor for URL(0);
      goto LABEL_9;
    case 9u:
    case 0xAu:
      v15 = type metadata accessor for Date(0);
LABEL_9:
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v13, v15);
      break;
    default:
      break;
  }
  v16 = (char *)(a1 + *(int *)(a2 + 28));
  swift_bridgeObjectRelease(*((_QWORD *)v16 + 1));
  swift_bridgeObjectRelease(*((_QWORD *)v16 + 3));
  swift_bridgeObjectRelease(*((_QWORD *)v16 + 5));
  v8(&v16[v5[8]], v7);
  v17 = &v16[v5[9]];
  if (!v12(v17, 1, v10))
    (*(void (**)(char *, uint64_t))(v11 + 8))(v17, v10);
  v18 = &v16[v5[10]];
  switch(swift_getEnumCaseMultiPayload(v18, v14))
  {
    case 0u:
    case 5u:
      swift_bridgeObjectRelease(*((_QWORD *)v18 + 1));
      return;
    case 1u:
    case 2u:
    case 4u:
    case 7u:
      v19 = *(void **)v18;
      goto LABEL_17;
    case 3u:
      swift_bridgeObjectRelease(*((_QWORD *)v18 + 1));
      v19 = (void *)*((_QWORD *)v18 + 3);
LABEL_17:

      return;
    case 6u:
      v20 = type metadata accessor for URL(0);
      goto LABEL_19;
    case 9u:
    case 0xAu:
      v20 = type metadata accessor for Date(0);
LABEL_19:
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(v18, v20);
      break;
    default:
      return;
  }
}

uint64_t initializeWithCopy for WantToReadToolbarButton(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t, uint64_t);
  int *v28;
  uint64_t v29;
  void *v30;
  const void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  id v44;
  void *v45;
  id v46;
  uint64_t v47;
  void (*v48)(uint64_t, uint64_t, uint64_t);
  void *v49;
  id v50;
  void *v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  const void *v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  _QWORD *v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  id v82;
  void *v83;
  id v84;
  uint64_t v85;
  void *v86;
  id v87;
  void *v88;
  id v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  id v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v99;
  unsigned int (*v100)(const void *, uint64_t, uint64_t);
  uint64_t v101;
  __int16 v102;
  uint64_t v103;
  char v104;
  uint64_t v105;

  v5 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = *(_QWORD *)(a2 + 40);
  v12 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a2 + 56);
  v102 = *(_WORD *)(a2 + 64);
  v104 = *(_BYTE *)(a2 + 66);
  sub_3480C(*(_QWORD *)a2, v6, v7, v8, v9, v10, v12, v11, v102, v104);
  *(_QWORD *)a1 = v5;
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = v7;
  *(_QWORD *)(a1 + 24) = v8;
  *(_QWORD *)(a1 + 32) = v9;
  *(_QWORD *)(a1 + 40) = v10;
  *(_QWORD *)(a1 + 48) = v12;
  *(_QWORD *)(a1 + 56) = v11;
  *(_WORD *)(a1 + 64) = v102;
  *(_BYTE *)(a1 + 66) = v104;
  v13 = *(void **)(a2 + 72);
  LOBYTE(v6) = *(_BYTE *)(a2 + 80);
  sub_18EF0(v13, v6);
  *(_QWORD *)(a1 + 72) = v13;
  *(_BYTE *)(a1 + 80) = v6;
  v14 = *(int *)(a3 + 24);
  v105 = a1;
  v15 = a1 + v14;
  v101 = a2;
  v16 = a2 + v14;
  v17 = *(_QWORD *)(a2 + v14 + 8);
  *(_QWORD *)v15 = *(_QWORD *)(a2 + v14);
  *(_QWORD *)(v15 + 8) = v17;
  v18 = *(_QWORD *)(a2 + v14 + 24);
  *(_QWORD *)(v15 + 16) = *(_QWORD *)(a2 + v14 + 16);
  *(_QWORD *)(v15 + 24) = v18;
  v19 = *(_QWORD *)(a2 + v14 + 40);
  *(_QWORD *)(v15 + 32) = *(_QWORD *)(a2 + v14 + 32);
  *(_QWORD *)(v15 + 40) = v19;
  *(_BYTE *)(v15 + 48) = *(_BYTE *)(a2 + v14 + 48);
  v20 = type metadata accessor for AssetAction(0);
  v21 = *(int *)(v20 + 32);
  v22 = v15 + v21;
  v23 = v16 + v21;
  v24 = type metadata accessor for ActionMetrics(0);
  v25 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 16);
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRetain(v19);
  v103 = v24;
  v26 = v24;
  v27 = v25;
  v28 = (int *)v20;
  v27(v22, v23, v26);
  v29 = *(int *)(v20 + 36);
  v30 = (void *)(v15 + v29);
  v31 = (const void *)(v16 + v29);
  v32 = type metadata accessor for ClickData(0);
  v33 = *(_QWORD *)(v32 - 8);
  v100 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v33 + 48);
  if (v100(v31, 1, v32))
  {
    v34 = sub_5440(&qword_25E828);
    memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v33 + 16))(v30, v31, v32);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v33 + 56))(v30, 0, 1, v32);
  }
  v99 = v33;
  v35 = v28[10];
  v36 = (_QWORD *)(v15 + v35);
  v37 = (_QWORD *)(v16 + v35);
  v38 = type metadata accessor for AssetAction.Kind(0);
  switch(swift_getEnumCaseMultiPayload(v37, v38))
  {
    case 0u:
      v39 = v37[1];
      *v36 = *v37;
      v36[1] = v39;
      *((_WORD *)v36 + 8) = *((_WORD *)v37 + 8);
      swift_bridgeObjectRetain(v39);
      v40 = v36;
      v41 = v38;
      v42 = 0;
      goto LABEL_16;
    case 1u:
      v43 = (void *)*v37;
      *v36 = *v37;
      v44 = v43;
      v40 = v36;
      v41 = v38;
      v42 = 1;
      goto LABEL_16;
    case 2u:
      v45 = (void *)*v37;
      *v36 = *v37;
      v46 = v45;
      v40 = v36;
      v41 = v38;
      v42 = 2;
      goto LABEL_16;
    case 3u:
      v47 = v37[1];
      *v36 = *v37;
      v36[1] = v47;
      *((_BYTE *)v36 + 16) = *((_BYTE *)v37 + 16);
      v48 = v27;
      v49 = (void *)v37[3];
      v36[3] = v49;
      swift_bridgeObjectRetain(v47);
      v50 = v49;
      v27 = v48;
      v40 = v36;
      v41 = v38;
      v42 = 3;
      goto LABEL_16;
    case 4u:
      v51 = (void *)*v37;
      *v36 = *v37;
      v52 = v51;
      v40 = v36;
      v41 = v38;
      v42 = 4;
      goto LABEL_16;
    case 5u:
      v53 = v37[1];
      *v36 = *v37;
      v36[1] = v53;
      *((_WORD *)v36 + 8) = *((_WORD *)v37 + 8);
      swift_bridgeObjectRetain(v53);
      v40 = v36;
      v41 = v38;
      v42 = 5;
      goto LABEL_16;
    case 6u:
      v54 = type metadata accessor for URL(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v54 - 8) + 16))(v36, v37, v54);
      v40 = v36;
      v41 = v38;
      v42 = 6;
      goto LABEL_16;
    case 7u:
      v55 = (void *)*v37;
      *v36 = *v37;
      v56 = v55;
      v40 = v36;
      v41 = v38;
      v42 = 7;
      goto LABEL_16;
    case 9u:
      v57 = type metadata accessor for Date(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v57 - 8) + 16))(v36, v37, v57);
      v58 = sub_5440(&qword_2643D0);
      *((_BYTE *)v36 + *(int *)(v58 + 48)) = *((_BYTE *)v37 + *(int *)(v58 + 48));
      v40 = v36;
      v41 = v38;
      v42 = 9;
      goto LABEL_16;
    case 0xAu:
      v59 = type metadata accessor for Date(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v59 - 8) + 16))(v36, v37, v59);
      v60 = sub_5440(&qword_2643D8);
      *((_BYTE *)v36 + *(int *)(v60 + 48)) = *((_BYTE *)v37 + *(int *)(v60 + 48));
      v40 = v36;
      v41 = v38;
      v42 = 10;
LABEL_16:
      swift_storeEnumTagMultiPayload(v40, v41, v42);
      break;
    default:
      memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
      break;
  }
  v61 = *(int *)(a3 + 28);
  v62 = v105 + v61;
  v63 = v101 + v61;
  v64 = *(_QWORD *)(v101 + v61 + 8);
  *(_QWORD *)v62 = *(_QWORD *)(v101 + v61);
  *(_QWORD *)(v62 + 8) = v64;
  v65 = *(_QWORD *)(v101 + v61 + 24);
  *(_QWORD *)(v62 + 16) = *(_QWORD *)(v101 + v61 + 16);
  *(_QWORD *)(v62 + 24) = v65;
  v66 = *(_QWORD *)(v101 + v61 + 40);
  *(_QWORD *)(v62 + 32) = *(_QWORD *)(v101 + v61 + 32);
  *(_QWORD *)(v62 + 40) = v66;
  *(_BYTE *)(v62 + 48) = *(_BYTE *)(v101 + v61 + 48);
  v67 = v28[8];
  v68 = v62 + v67;
  v69 = v63 + v67;
  swift_bridgeObjectRetain(v64);
  swift_bridgeObjectRetain(v65);
  swift_bridgeObjectRetain(v66);
  v27(v68, v69, v103);
  v70 = v28[9];
  v71 = (void *)(v62 + v70);
  v72 = (const void *)(v63 + v70);
  if (v100((const void *)(v63 + v70), 1, v32))
  {
    v73 = sub_5440(&qword_25E828);
    memcpy(v71, v72, *(_QWORD *)(*(_QWORD *)(v73 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v99 + 16))(v71, v72, v32);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v99 + 56))(v71, 0, 1, v32);
  }
  v74 = v28[10];
  v75 = (_QWORD *)(v62 + v74);
  v76 = (_QWORD *)(v63 + v74);
  switch(swift_getEnumCaseMultiPayload(v63 + v74, v38))
  {
    case 0u:
      v77 = v76[1];
      *v75 = *v76;
      v75[1] = v77;
      *((_WORD *)v75 + 8) = *((_WORD *)v76 + 8);
      swift_bridgeObjectRetain(v77);
      v78 = v75;
      v79 = v38;
      v80 = 0;
      goto LABEL_32;
    case 1u:
      v81 = (void *)*v76;
      *v75 = *v76;
      v82 = v81;
      v78 = v75;
      v79 = v38;
      v80 = 1;
      goto LABEL_32;
    case 2u:
      v83 = (void *)*v76;
      *v75 = *v76;
      v84 = v83;
      v78 = v75;
      v79 = v38;
      v80 = 2;
      goto LABEL_32;
    case 3u:
      v85 = v76[1];
      *v75 = *v76;
      v75[1] = v85;
      *((_BYTE *)v75 + 16) = *((_BYTE *)v76 + 16);
      v86 = (void *)v76[3];
      v75[3] = v86;
      swift_bridgeObjectRetain(v85);
      v87 = v86;
      v78 = v75;
      v79 = v38;
      v80 = 3;
      goto LABEL_32;
    case 4u:
      v88 = (void *)*v76;
      *v75 = *v76;
      v89 = v88;
      v78 = v75;
      v79 = v38;
      v80 = 4;
      goto LABEL_32;
    case 5u:
      v90 = v76[1];
      *v75 = *v76;
      v75[1] = v90;
      *((_WORD *)v75 + 8) = *((_WORD *)v76 + 8);
      swift_bridgeObjectRetain(v90);
      v78 = v75;
      v79 = v38;
      v80 = 5;
      goto LABEL_32;
    case 6u:
      v91 = type metadata accessor for URL(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v91 - 8) + 16))(v75, v76, v91);
      v78 = v75;
      v79 = v38;
      v80 = 6;
      goto LABEL_32;
    case 7u:
      v92 = (void *)*v76;
      *v75 = *v76;
      v93 = v92;
      v78 = v75;
      v79 = v38;
      v80 = 7;
      goto LABEL_32;
    case 9u:
      v94 = type metadata accessor for Date(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v94 - 8) + 16))(v75, v76, v94);
      v95 = sub_5440(&qword_2643D0);
      *((_BYTE *)v75 + *(int *)(v95 + 48)) = *((_BYTE *)v76 + *(int *)(v95 + 48));
      v78 = v75;
      v79 = v38;
      v80 = 9;
      goto LABEL_32;
    case 0xAu:
      v96 = type metadata accessor for Date(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v96 - 8) + 16))(v75, v76, v96);
      v97 = sub_5440(&qword_2643D8);
      *((_BYTE *)v75 + *(int *)(v97 + 48)) = *((_BYTE *)v76 + *(int *)(v97 + 48));
      v78 = v75;
      v79 = v38;
      v80 = 10;
LABEL_32:
      swift_storeEnumTagMultiPayload(v78, v79, v80);
      break;
    default:
      memcpy(v75, v76, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
      break;
  }
  return v105;
}

uint64_t assignWithCopy for WantToReadToolbarButton(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int16 v21;
  char v22;
  void *v23;
  void *v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  void *v42;
  uint64_t v43;
  uint64_t (*v44)(void *, uint64_t, uint64_t);
  int v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  id v56;
  void *v57;
  id v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  id v63;
  void *v64;
  id v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  id v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void *v84;
  void *v85;
  int v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  void *v97;
  id v98;
  void *v99;
  id v100;
  uint64_t v101;
  uint64_t v102;
  void *v103;
  id v104;
  void *v105;
  id v106;
  uint64_t v107;
  uint64_t v108;
  void *v109;
  id v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  void (*v116)(uint64_t, uint64_t);
  __int16 v117;
  uint64_t v118;
  char v119;
  uint64_t v120;

  v3 = a2;
  v5 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = *(_QWORD *)(a2 + 40);
  v12 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a2 + 56);
  v117 = *(_WORD *)(a2 + 64);
  v119 = *(_BYTE *)(a2 + 66);
  sub_3480C(*(_QWORD *)a2, v6, v7, v8, v9, v10, v12, v11, v117, v119);
  v13 = *(_QWORD *)a1;
  v14 = *(_QWORD *)(a1 + 8);
  v15 = *(_QWORD *)(a1 + 16);
  v16 = *(_QWORD *)(a1 + 24);
  v17 = *(_QWORD *)(a1 + 32);
  v18 = *(_QWORD *)(a1 + 40);
  v19 = *(_QWORD *)(a1 + 48);
  v20 = *(_QWORD *)(a1 + 56);
  v21 = *(_WORD *)(a1 + 64);
  v22 = *(_BYTE *)(a1 + 66);
  *(_QWORD *)a1 = v5;
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = v7;
  *(_QWORD *)(a1 + 24) = v8;
  *(_QWORD *)(a1 + 32) = v9;
  *(_QWORD *)(a1 + 40) = v10;
  *(_QWORD *)(a1 + 48) = v12;
  *(_QWORD *)(a1 + 56) = v11;
  *(_WORD *)(a1 + 64) = v117;
  *(_BYTE *)(a1 + 66) = v119;
  sub_BDF8(v13, v14, v15, v16, v17, v18, v19, v20, v21, v22);
  v23 = *(void **)(v3 + 72);
  LOBYTE(v11) = *(_BYTE *)(v3 + 80);
  sub_18EF0(v23, v11);
  v24 = *(void **)(a1 + 72);
  v25 = *(_BYTE *)(a1 + 80);
  *(_QWORD *)(a1 + 72) = v23;
  *(_BYTE *)(a1 + 80) = v11;
  sub_19034(v24, v25);
  v26 = *(int *)(a3 + 24);
  v27 = a1 + v26;
  v28 = v3 + v26;
  *(_QWORD *)v27 = *(_QWORD *)(v3 + v26);
  v29 = *(_QWORD *)(v3 + v26 + 8);
  v30 = *(_QWORD *)(a1 + v26 + 8);
  *(_QWORD *)(v27 + 8) = v29;
  swift_bridgeObjectRetain(v29);
  swift_bridgeObjectRelease(v30);
  *(_QWORD *)(v27 + 16) = *(_QWORD *)(v28 + 16);
  v31 = *(_QWORD *)(v28 + 24);
  v32 = *(_QWORD *)(v27 + 24);
  *(_QWORD *)(v27 + 24) = v31;
  swift_bridgeObjectRetain(v31);
  swift_bridgeObjectRelease(v32);
  *(_QWORD *)(v27 + 32) = *(_QWORD *)(v28 + 32);
  v33 = *(_QWORD *)(v28 + 40);
  v34 = *(_QWORD *)(v27 + 40);
  *(_QWORD *)(v27 + 40) = v33;
  swift_bridgeObjectRetain(v33);
  swift_bridgeObjectRelease(v34);
  *(_BYTE *)(v27 + 48) = *(_BYTE *)(v28 + 48);
  v35 = (int *)type metadata accessor for AssetAction(0);
  v36 = v35[8];
  v37 = v27 + v36;
  v38 = v28 + v36;
  v39 = type metadata accessor for ActionMetrics(0);
  v116 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 24);
  v118 = v39;
  v116(v37, v38);
  v40 = v35[9];
  v41 = (void *)(v27 + v40);
  v42 = (void *)(v28 + v40);
  v43 = type metadata accessor for ClickData(0);
  v120 = *(_QWORD *)(v43 - 8);
  v44 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v120 + 48);
  LODWORD(v37) = v44(v41, 1, v43);
  v45 = v44(v42, 1, v43);
  if ((_DWORD)v37)
  {
    if (!v45)
    {
      (*(void (**)(void *, void *, uint64_t))(v120 + 16))(v41, v42, v43);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v120 + 56))(v41, 0, 1, v43);
      if (a1 == v3)
        goto LABEL_23;
      goto LABEL_8;
    }
  }
  else
  {
    if (!v45)
    {
      (*(void (**)(void *, void *, uint64_t))(v120 + 24))(v41, v42, v43);
      if (a1 == v3)
        goto LABEL_23;
      goto LABEL_8;
    }
    (*(void (**)(void *, uint64_t))(v120 + 8))(v41, v43);
  }
  v46 = sub_5440(&qword_25E828);
  memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
  if (a1 == v3)
    goto LABEL_23;
LABEL_8:
  v47 = v35[10];
  v48 = (_QWORD *)(v27 + v47);
  v49 = (_QWORD *)(v28 + v47);
  sub_62AF0(v27 + v47);
  v50 = type metadata accessor for AssetAction.Kind(0);
  switch(swift_getEnumCaseMultiPayload(v49, v50))
  {
    case 0u:
      *v48 = *v49;
      v51 = v49[1];
      v48[1] = v51;
      *((_BYTE *)v48 + 16) = *((_BYTE *)v49 + 16);
      *((_BYTE *)v48 + 17) = *((_BYTE *)v49 + 17);
      swift_bridgeObjectRetain(v51);
      v52 = v48;
      v53 = v50;
      v54 = 0;
      goto LABEL_22;
    case 1u:
      v55 = (void *)*v49;
      *v48 = *v49;
      v56 = v55;
      v52 = v48;
      v53 = v50;
      v54 = 1;
      goto LABEL_22;
    case 2u:
      v57 = (void *)*v49;
      *v48 = *v49;
      v58 = v57;
      v52 = v48;
      v53 = v50;
      v54 = 2;
      goto LABEL_22;
    case 3u:
      *v48 = *v49;
      v59 = v49[1];
      v48[1] = v59;
      *((_BYTE *)v48 + 16) = *((_BYTE *)v49 + 16);
      v60 = v3;
      v61 = a1;
      v62 = (void *)v49[3];
      v48[3] = v62;
      swift_bridgeObjectRetain(v59);
      v63 = v62;
      a1 = v61;
      v3 = v60;
      v52 = v48;
      v53 = v50;
      v54 = 3;
      goto LABEL_22;
    case 4u:
      v64 = (void *)*v49;
      *v48 = *v49;
      v65 = v64;
      v52 = v48;
      v53 = v50;
      v54 = 4;
      goto LABEL_22;
    case 5u:
      *v48 = *v49;
      v66 = v49[1];
      v48[1] = v66;
      *((_BYTE *)v48 + 16) = *((_BYTE *)v49 + 16);
      *((_BYTE *)v48 + 17) = *((_BYTE *)v49 + 17);
      swift_bridgeObjectRetain(v66);
      v52 = v48;
      v53 = v50;
      v54 = 5;
      goto LABEL_22;
    case 6u:
      v67 = type metadata accessor for URL(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v67 - 8) + 16))(v48, v49, v67);
      v52 = v48;
      v53 = v50;
      v54 = 6;
      goto LABEL_22;
    case 7u:
      v68 = (void *)*v49;
      *v48 = *v49;
      v69 = v68;
      v52 = v48;
      v53 = v50;
      v54 = 7;
      goto LABEL_22;
    case 9u:
      v70 = type metadata accessor for Date(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v70 - 8) + 16))(v48, v49, v70);
      v71 = sub_5440(&qword_2643D0);
      *((_BYTE *)v48 + *(int *)(v71 + 48)) = *((_BYTE *)v49 + *(int *)(v71 + 48));
      v52 = v48;
      v53 = v50;
      v54 = 9;
      goto LABEL_22;
    case 0xAu:
      v72 = type metadata accessor for Date(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v72 - 8) + 16))(v48, v49, v72);
      v73 = sub_5440(&qword_2643D8);
      *((_BYTE *)v48 + *(int *)(v73 + 48)) = *((_BYTE *)v49 + *(int *)(v73 + 48));
      v52 = v48;
      v53 = v50;
      v54 = 10;
LABEL_22:
      swift_storeEnumTagMultiPayload(v52, v53, v54);
      break;
    default:
      memcpy(v48, v49, *(_QWORD *)(*(_QWORD *)(v50 - 8) + 64));
      break;
  }
LABEL_23:
  v74 = *(int *)(a3 + 28);
  v75 = a1 + v74;
  v76 = v3 + v74;
  *(_QWORD *)v75 = *(_QWORD *)(v3 + v74);
  v77 = *(_QWORD *)(v3 + v74 + 8);
  v78 = *(_QWORD *)(a1 + v74 + 8);
  *(_QWORD *)(v75 + 8) = v77;
  swift_bridgeObjectRetain(v77);
  swift_bridgeObjectRelease(v78);
  *(_QWORD *)(v75 + 16) = *(_QWORD *)(v76 + 16);
  v79 = *(_QWORD *)(v76 + 24);
  v80 = *(_QWORD *)(v75 + 24);
  *(_QWORD *)(v75 + 24) = v79;
  swift_bridgeObjectRetain(v79);
  swift_bridgeObjectRelease(v80);
  *(_QWORD *)(v75 + 32) = *(_QWORD *)(v76 + 32);
  v81 = *(_QWORD *)(v76 + 40);
  v82 = *(_QWORD *)(v75 + 40);
  *(_QWORD *)(v75 + 40) = v81;
  swift_bridgeObjectRetain(v81);
  swift_bridgeObjectRelease(v82);
  *(_BYTE *)(v75 + 48) = *(_BYTE *)(v76 + 48);
  ((void (*)(uint64_t, uint64_t, uint64_t))v116)(v75 + v35[8], v76 + v35[8], v118);
  v83 = v35[9];
  v84 = (void *)(v75 + v83);
  v85 = (void *)(v76 + v83);
  v86 = v44((void *)(v75 + v83), 1, v43);
  v87 = v44(v85, 1, v43);
  if (v86)
  {
    if (!v87)
    {
      (*(void (**)(void *, void *, uint64_t))(v120 + 16))(v84, v85, v43);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v120 + 56))(v84, 0, 1, v43);
      if (a1 == v3)
        return a1;
      goto LABEL_30;
    }
LABEL_29:
    v88 = sub_5440(&qword_25E828);
    memcpy(v84, v85, *(_QWORD *)(*(_QWORD *)(v88 - 8) + 64));
    if (a1 == v3)
      return a1;
    goto LABEL_30;
  }
  if (v87)
  {
    (*(void (**)(void *, uint64_t))(v120 + 8))(v84, v43);
    goto LABEL_29;
  }
  (*(void (**)(void *, void *, uint64_t))(v120 + 24))(v84, v85, v43);
  if (a1 == v3)
    return a1;
LABEL_30:
  v89 = v35[10];
  v90 = (_QWORD *)(v75 + v89);
  v91 = (_QWORD *)(v76 + v89);
  sub_62AF0(v75 + v89);
  v92 = type metadata accessor for AssetAction.Kind(0);
  switch(swift_getEnumCaseMultiPayload(v91, v92))
  {
    case 0u:
      *v90 = *v91;
      v93 = v91[1];
      v90[1] = v93;
      *((_BYTE *)v90 + 16) = *((_BYTE *)v91 + 16);
      *((_BYTE *)v90 + 17) = *((_BYTE *)v91 + 17);
      swift_bridgeObjectRetain(v93);
      v94 = v90;
      v95 = v92;
      v96 = 0;
      goto LABEL_44;
    case 1u:
      v97 = (void *)*v91;
      *v90 = *v91;
      v98 = v97;
      v94 = v90;
      v95 = v92;
      v96 = 1;
      goto LABEL_44;
    case 2u:
      v99 = (void *)*v91;
      *v90 = *v91;
      v100 = v99;
      v94 = v90;
      v95 = v92;
      v96 = 2;
      goto LABEL_44;
    case 3u:
      *v90 = *v91;
      v101 = v91[1];
      v90[1] = v101;
      *((_BYTE *)v90 + 16) = *((_BYTE *)v91 + 16);
      v102 = a1;
      v103 = (void *)v91[3];
      v90[3] = v103;
      swift_bridgeObjectRetain(v101);
      v104 = v103;
      a1 = v102;
      v94 = v90;
      v95 = v92;
      v96 = 3;
      goto LABEL_44;
    case 4u:
      v105 = (void *)*v91;
      *v90 = *v91;
      v106 = v105;
      v94 = v90;
      v95 = v92;
      v96 = 4;
      goto LABEL_44;
    case 5u:
      *v90 = *v91;
      v107 = v91[1];
      v90[1] = v107;
      *((_BYTE *)v90 + 16) = *((_BYTE *)v91 + 16);
      *((_BYTE *)v90 + 17) = *((_BYTE *)v91 + 17);
      swift_bridgeObjectRetain(v107);
      v94 = v90;
      v95 = v92;
      v96 = 5;
      goto LABEL_44;
    case 6u:
      v108 = type metadata accessor for URL(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v108 - 8) + 16))(v90, v91, v108);
      v94 = v90;
      v95 = v92;
      v96 = 6;
      goto LABEL_44;
    case 7u:
      v109 = (void *)*v91;
      *v90 = *v91;
      v110 = v109;
      v94 = v90;
      v95 = v92;
      v96 = 7;
      goto LABEL_44;
    case 9u:
      v111 = type metadata accessor for Date(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v111 - 8) + 16))(v90, v91, v111);
      v112 = sub_5440(&qword_2643D0);
      *((_BYTE *)v90 + *(int *)(v112 + 48)) = *((_BYTE *)v91 + *(int *)(v112 + 48));
      v94 = v90;
      v95 = v92;
      v96 = 9;
      goto LABEL_44;
    case 0xAu:
      v113 = type metadata accessor for Date(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v113 - 8) + 16))(v90, v91, v113);
      v114 = sub_5440(&qword_2643D8);
      *((_BYTE *)v90 + *(int *)(v114 + 48)) = *((_BYTE *)v91 + *(int *)(v114 + 48));
      v94 = v90;
      v95 = v92;
      v96 = 10;
LABEL_44:
      swift_storeEnumTagMultiPayload(v94, v95, v96);
      break;
    default:
      memcpy(v90, v91, *(_QWORD *)(*(_QWORD *)(v92 - 8) + 64));
      break;
  }
  return a1;
}

uint64_t initializeWithTake for WantToReadToolbarButton(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  const void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  uint64_t v25;
  int EnumCaseMultiPayload;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  void *v37;
  const void *v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE *v41;
  _BYTE *v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int (*v50)(const void *, uint64_t, uint64_t);
  void (*v51)(uint64_t, uint64_t, uint64_t);

  v5 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v5;
  *(_DWORD *)(a1 + 63) = *(_DWORD *)(a2 + 63);
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  v7 = *(int *)(a3 + 24);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = *(_OWORD *)(a2 + v7 + 16);
  *(_OWORD *)v8 = *(_OWORD *)(a2 + v7);
  *(_OWORD *)(v8 + 16) = v10;
  *(_OWORD *)(v8 + 32) = *(_OWORD *)(a2 + v7 + 32);
  *(_BYTE *)(v8 + 48) = *(_BYTE *)(a2 + v7 + 48);
  v11 = (int *)type metadata accessor for AssetAction(0);
  v12 = v11[8];
  v13 = v8 + v12;
  v14 = v9 + v12;
  v15 = type metadata accessor for ActionMetrics(0);
  v51 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 32);
  v51(v13, v14, v15);
  v16 = v11[9];
  v17 = (void *)(v8 + v16);
  v18 = (const void *)(v9 + v16);
  v19 = type metadata accessor for ClickData(0);
  v20 = *(_QWORD *)(v19 - 8);
  v50 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v20 + 48);
  if (v50(v18, 1, v19))
  {
    v21 = sub_5440(&qword_25E828);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v20 + 32))(v17, v18, v19);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
  }
  v22 = v11[10];
  v23 = (_BYTE *)(v8 + v22);
  v24 = (_BYTE *)(v9 + v22);
  v25 = type metadata accessor for AssetAction.Kind(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v24, v25);
  switch(EnumCaseMultiPayload)
  {
    case 10:
      v28 = type metadata accessor for Date(0);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v28 - 8) + 32))(v23, v24, v28);
      v29 = sub_5440(&qword_2643D8);
      v23[*(int *)(v29 + 48)] = v24[*(int *)(v29 + 48)];
      swift_storeEnumTagMultiPayload(v23, v25, 10);
      break;
    case 9:
      v30 = type metadata accessor for Date(0);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v30 - 8) + 32))(v23, v24, v30);
      v31 = sub_5440(&qword_2643D0);
      v23[*(int *)(v31 + 48)] = v24[*(int *)(v31 + 48)];
      swift_storeEnumTagMultiPayload(v23, v25, 9);
      break;
    case 6:
      v27 = type metadata accessor for URL(0);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v27 - 8) + 32))(v23, v24, v27);
      swift_storeEnumTagMultiPayload(v23, v25, 6);
      break;
    default:
      memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
      break;
  }
  v32 = *(int *)(a3 + 28);
  v33 = a1 + v32;
  v34 = a2 + v32;
  v35 = *(_OWORD *)(a2 + v32 + 16);
  *(_OWORD *)v33 = *(_OWORD *)(a2 + v32);
  *(_OWORD *)(v33 + 16) = v35;
  *(_OWORD *)(v33 + 32) = *(_OWORD *)(a2 + v32 + 32);
  *(_BYTE *)(v33 + 48) = *(_BYTE *)(a2 + v32 + 48);
  v51(a1 + v32 + v11[8], a2 + v32 + v11[8], v15);
  v36 = v11[9];
  v37 = (void *)(v33 + v36);
  v38 = (const void *)(v34 + v36);
  if (v50((const void *)(v34 + v36), 1, v19))
  {
    v39 = sub_5440(&qword_25E828);
    memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v20 + 32))(v37, v38, v19);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v37, 0, 1, v19);
  }
  v40 = v11[10];
  v41 = (_BYTE *)(v33 + v40);
  v42 = (_BYTE *)(v34 + v40);
  v43 = swift_getEnumCaseMultiPayload(v34 + v40, v25);
  switch(v43)
  {
    case 10:
      v45 = type metadata accessor for Date(0);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v45 - 8) + 32))(v41, v42, v45);
      v46 = sub_5440(&qword_2643D8);
      v41[*(int *)(v46 + 48)] = v42[*(int *)(v46 + 48)];
      swift_storeEnumTagMultiPayload(v41, v25, 10);
      break;
    case 9:
      v47 = type metadata accessor for Date(0);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v47 - 8) + 32))(v41, v42, v47);
      v48 = sub_5440(&qword_2643D0);
      v41[*(int *)(v48 + 48)] = v42[*(int *)(v48 + 48)];
      swift_storeEnumTagMultiPayload(v41, v25, 9);
      break;
    case 6:
      v44 = type metadata accessor for URL(0);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v44 - 8) + 32))(v41, v42, v44);
      swift_storeEnumTagMultiPayload(v41, v25, 6);
      break;
    default:
      memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
      break;
  }
  return a1;
}

uint64_t assignWithTake for WantToReadToolbarButton(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int16 v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int16 v16;
  char v17;
  __int128 v18;
  __int128 v19;
  char v20;
  void *v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  void *v39;
  uint64_t v40;
  uint64_t (*v41)(void *, uint64_t, uint64_t);
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  _BYTE *v46;
  _BYTE *v47;
  uint64_t v48;
  int EnumCaseMultiPayload;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  void *v66;
  int v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  _BYTE *v71;
  _BYTE *v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void (*v81)(uint64_t, uint64_t);
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;

  v6 = *(_WORD *)(a2 + 64);
  v7 = *(_BYTE *)(a2 + 66);
  v8 = *(_QWORD *)a1;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_QWORD *)(a1 + 24);
  v12 = *(_QWORD *)(a1 + 32);
  v13 = *(_QWORD *)(a1 + 40);
  v14 = *(_QWORD *)(a1 + 48);
  v15 = *(_QWORD *)(a1 + 56);
  v16 = *(_WORD *)(a1 + 64);
  v17 = *(_BYTE *)(a1 + 66);
  v18 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v18;
  v19 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v19;
  *(_WORD *)(a1 + 64) = v6;
  *(_BYTE *)(a1 + 66) = v7;
  sub_BDF8(v8, v9, v10, v11, v12, v13, v14, v15, v16, v17);
  v20 = *(_BYTE *)(a2 + 80);
  v21 = *(void **)(a1 + 72);
  v22 = *(_BYTE *)(a1 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = v20;
  sub_19034(v21, v22);
  v83 = a3;
  v23 = *(int *)(a3 + 24);
  v24 = a1 + v23;
  v25 = a2 + v23;
  v26 = *(_QWORD *)(a2 + v23 + 8);
  v27 = *(_QWORD *)(a1 + v23 + 8);
  *(_QWORD *)v24 = *(_QWORD *)(a2 + v23);
  *(_QWORD *)(v24 + 8) = v26;
  swift_bridgeObjectRelease(v27);
  v28 = *(_QWORD *)(v25 + 24);
  v29 = *(_QWORD *)(v24 + 24);
  *(_QWORD *)(v24 + 16) = *(_QWORD *)(v25 + 16);
  *(_QWORD *)(v24 + 24) = v28;
  swift_bridgeObjectRelease(v29);
  v30 = *(_QWORD *)(v25 + 40);
  v31 = *(_QWORD *)(v24 + 40);
  *(_QWORD *)(v24 + 32) = *(_QWORD *)(v25 + 32);
  *(_QWORD *)(v24 + 40) = v30;
  swift_bridgeObjectRelease(v31);
  *(_BYTE *)(v24 + 48) = *(_BYTE *)(v25 + 48);
  v32 = (int *)type metadata accessor for AssetAction(0);
  v33 = v32[8];
  v34 = v24 + v33;
  v35 = v25 + v33;
  v36 = type metadata accessor for ActionMetrics(0);
  v81 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 40);
  v82 = v36;
  v81(v34, v35);
  v37 = v32[9];
  v38 = (void *)(v24 + v37);
  v39 = (void *)(v25 + v37);
  v40 = type metadata accessor for ClickData(0);
  v84 = *(_QWORD *)(v40 - 8);
  v41 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v84 + 48);
  v42 = v41(v38, 1, v40);
  v43 = v41(v39, 1, v40);
  if (v42)
  {
    if (!v43)
    {
      (*(void (**)(void *, void *, uint64_t))(v84 + 32))(v38, v39, v40);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v84 + 56))(v38, 0, 1, v40);
      if (a1 == a2)
        goto LABEL_17;
      goto LABEL_8;
    }
  }
  else
  {
    if (!v43)
    {
      (*(void (**)(void *, void *, uint64_t))(v84 + 40))(v38, v39, v40);
      if (a1 == a2)
        goto LABEL_17;
      goto LABEL_8;
    }
    (*(void (**)(void *, uint64_t))(v84 + 8))(v38, v40);
  }
  v44 = sub_5440(&qword_25E828);
  memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
  if (a1 == a2)
    goto LABEL_17;
LABEL_8:
  v45 = v32[10];
  v46 = (_BYTE *)(v24 + v45);
  v47 = (_BYTE *)(v25 + v45);
  sub_62AF0(v24 + v45);
  v48 = type metadata accessor for AssetAction.Kind(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v47, v48);
  switch(EnumCaseMultiPayload)
  {
    case 10:
      v51 = type metadata accessor for Date(0);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v51 - 8) + 32))(v46, v47, v51);
      v52 = sub_5440(&qword_2643D8);
      v46[*(int *)(v52 + 48)] = v47[*(int *)(v52 + 48)];
      swift_storeEnumTagMultiPayload(v46, v48, 10);
      break;
    case 9:
      v53 = type metadata accessor for Date(0);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v53 - 8) + 32))(v46, v47, v53);
      v54 = sub_5440(&qword_2643D0);
      v46[*(int *)(v54 + 48)] = v47[*(int *)(v54 + 48)];
      swift_storeEnumTagMultiPayload(v46, v48, 9);
      break;
    case 6:
      v50 = type metadata accessor for URL(0);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v50 - 8) + 32))(v46, v47, v50);
      swift_storeEnumTagMultiPayload(v46, v48, 6);
      break;
    default:
      memcpy(v46, v47, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
      break;
  }
LABEL_17:
  v55 = *(int *)(v83 + 28);
  v56 = a1 + v55;
  v57 = a2 + v55;
  v58 = *(_QWORD *)(a2 + v55 + 8);
  v59 = *(_QWORD *)(a1 + v55 + 8);
  *(_QWORD *)v56 = *(_QWORD *)(a2 + v55);
  *(_QWORD *)(v56 + 8) = v58;
  swift_bridgeObjectRelease(v59);
  v60 = *(_QWORD *)(v57 + 24);
  v61 = *(_QWORD *)(v56 + 24);
  *(_QWORD *)(v56 + 16) = *(_QWORD *)(v57 + 16);
  *(_QWORD *)(v56 + 24) = v60;
  swift_bridgeObjectRelease(v61);
  v62 = *(_QWORD *)(v57 + 40);
  v63 = *(_QWORD *)(v56 + 40);
  *(_QWORD *)(v56 + 32) = *(_QWORD *)(v57 + 32);
  *(_QWORD *)(v56 + 40) = v62;
  swift_bridgeObjectRelease(v63);
  *(_BYTE *)(v56 + 48) = *(_BYTE *)(v57 + 48);
  ((void (*)(uint64_t, uint64_t, uint64_t))v81)(v56 + v32[8], v57 + v32[8], v82);
  v64 = v32[9];
  v65 = (void *)(v56 + v64);
  v66 = (void *)(v57 + v64);
  v67 = v41((void *)(v56 + v64), 1, v40);
  v68 = v41(v66, 1, v40);
  if (v67)
  {
    if (!v68)
    {
      (*(void (**)(void *, void *, uint64_t))(v84 + 32))(v65, v66, v40);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v84 + 56))(v65, 0, 1, v40);
      if (a1 == a2)
        return a1;
      goto LABEL_24;
    }
LABEL_23:
    v69 = sub_5440(&qword_25E828);
    memcpy(v65, v66, *(_QWORD *)(*(_QWORD *)(v69 - 8) + 64));
    if (a1 == a2)
      return a1;
    goto LABEL_24;
  }
  if (v68)
  {
    (*(void (**)(void *, uint64_t))(v84 + 8))(v65, v40);
    goto LABEL_23;
  }
  (*(void (**)(void *, void *, uint64_t))(v84 + 40))(v65, v66, v40);
  if (a1 == a2)
    return a1;
LABEL_24:
  v70 = v32[10];
  v71 = (_BYTE *)(v56 + v70);
  v72 = (_BYTE *)(v57 + v70);
  sub_62AF0(v56 + v70);
  v73 = type metadata accessor for AssetAction.Kind(0);
  v74 = swift_getEnumCaseMultiPayload(v72, v73);
  switch(v74)
  {
    case 10:
      v76 = type metadata accessor for Date(0);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v76 - 8) + 32))(v71, v72, v76);
      v77 = sub_5440(&qword_2643D8);
      v71[*(int *)(v77 + 48)] = v72[*(int *)(v77 + 48)];
      swift_storeEnumTagMultiPayload(v71, v73, 10);
      break;
    case 9:
      v78 = type metadata accessor for Date(0);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v78 - 8) + 32))(v71, v72, v78);
      v79 = sub_5440(&qword_2643D0);
      v71[*(int *)(v79 + 48)] = v72[*(int *)(v79 + 48)];
      swift_storeEnumTagMultiPayload(v71, v73, 9);
      break;
    case 6:
      v75 = type metadata accessor for URL(0);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v75 - 8) + 32))(v71, v72, v75);
      swift_storeEnumTagMultiPayload(v71, v73, 6);
      break;
    default:
      memcpy(v71, v72, *(_QWORD *)(*(_QWORD *)(v73 - 8) + 64));
      break;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for WantToReadToolbarButton(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_D51A8);
}

uint64_t sub_D51A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4;
  uint64_t v8;

  if ((_DWORD)a2 == 254)
  {
    v4 = *(unsigned __int8 *)(a1 + 66);
    if (v4 > 1)
      return (v4 ^ 0xFF) + 1;
    else
      return 0;
  }
  else
  {
    v8 = type metadata accessor for AssetAction(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for WantToReadToolbarButton(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_D5228);
}

uint64_t sub_D5228(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 254)
  {
    *(_BYTE *)(result + 66) = -(char)a2;
  }
  else
  {
    v7 = type metadata accessor for AssetAction(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

uint64_t sub_D5298(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];
  uint64_t v5;
  uint64_t v6;

  v4[0] = "C";
  v4[1] = L"\t";
  result = type metadata accessor for AssetAction(319);
  if (v3 <= 0x3F)
  {
    v5 = *(_QWORD *)(result - 8) + 64;
    v6 = v5;
    swift_initStructMetadata(a1, 256, 4, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_D5314()
{
  _QWORD v1[4];

  v1[0] = sub_7EF8(&qword_264388);
  v1[1] = type metadata accessor for LocalizedText(255);
  v1[2] = sub_D2C68();
  v1[3] = sub_6FD0((unint64_t *)&qword_25FEA8, (uint64_t (*)(uint64_t))&type metadata accessor for LocalizedText, (uint64_t)&protocol conformance descriptor for LocalizedText);
  return swift_getOpaqueTypeConformance2(v1, &opaque type descriptor for <<opaque return type of View.accessibilityLabel<A>(content:)>>, 1);
}

uint64_t sub_D539C@<X0>(char *a1@<X8>)
{
  uint64_t v1;

  return sub_D2788(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_D53A4()
{
  uint64_t v0;
  uint64_t ToolbarButton;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  int *v5;
  char *v6;
  uint64_t v7;
  void (*v8)(char *, uint64_t);
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(char *, uint64_t, uint64_t);
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  ToolbarButton = type metadata accessor for WantToReadToolbarButton(0);
  v2 = *(_QWORD *)(ToolbarButton - 8);
  v23 = *(unsigned __int8 *)(v2 + 80);
  v24 = v0;
  v21 = *(_QWORD *)(v2 + 64);
  v22 = (v23 + 16) & ~v23;
  v3 = v0 + v22;
  sub_BDF8(*(_QWORD *)(v0 + v22), *(_QWORD *)(v0 + v22 + 8), *(_QWORD *)(v0 + v22 + 16), *(_QWORD *)(v0 + v22 + 24), *(_QWORD *)(v0 + v22 + 32), *(_QWORD *)(v0 + v22 + 40), *(_QWORD *)(v0 + v22 + 48), *(_QWORD *)(v0 + v22 + 56), *(_WORD *)(v0 + v22 + 64), *(_BYTE *)(v0 + v22 + 66));
  sub_19034(*(id *)(v3 + 72), *(_BYTE *)(v3 + 80));
  v4 = (_QWORD *)(v0 + v22 + *(int *)(ToolbarButton + 24));
  swift_bridgeObjectRelease(v4[1]);
  swift_bridgeObjectRelease(v4[3]);
  swift_bridgeObjectRelease(v4[5]);
  v5 = (int *)type metadata accessor for AssetAction(0);
  v6 = (char *)v4 + v5[8];
  v7 = type metadata accessor for ActionMetrics(0);
  v8 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v7 - 8) + 8);
  v8(v6, v7);
  v9 = (char *)v4 + v5[9];
  v10 = type metadata accessor for ClickData(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  if (!v12(v9, 1, v10))
    (*(void (**)(char *, uint64_t))(v11 + 8))(v9, v10);
  v13 = (char *)v4 + v5[10];
  v14 = type metadata accessor for AssetAction.Kind(0);
  switch(swift_getEnumCaseMultiPayload(v13, v14))
  {
    case 0u:
    case 5u:
      swift_bridgeObjectRelease(*((_QWORD *)v13 + 1));
      break;
    case 1u:
    case 2u:
    case 4u:
    case 7u:

      break;
    case 3u:
      swift_bridgeObjectRelease(*((_QWORD *)v13 + 1));

      break;
    case 6u:
      v15 = type metadata accessor for URL(0);
      goto LABEL_9;
    case 9u:
    case 0xAu:
      v15 = type metadata accessor for Date(0);
LABEL_9:
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v13, v15);
      break;
    default:
      break;
  }
  v16 = (char *)(v3 + *(int *)(ToolbarButton + 28));
  swift_bridgeObjectRelease(*((_QWORD *)v16 + 1));
  swift_bridgeObjectRelease(*((_QWORD *)v16 + 3));
  swift_bridgeObjectRelease(*((_QWORD *)v16 + 5));
  v8(&v16[v5[8]], v7);
  v17 = &v16[v5[9]];
  if (!v12(v17, 1, v10))
    (*(void (**)(char *, uint64_t))(v11 + 8))(v17, v10);
  v18 = &v16[v5[10]];
  switch(swift_getEnumCaseMultiPayload(v18, v14))
  {
    case 0u:
    case 5u:
      swift_bridgeObjectRelease(*((_QWORD *)v18 + 1));
      break;
    case 1u:
    case 2u:
    case 4u:
    case 7u:

      break;
    case 3u:
      swift_bridgeObjectRelease(*((_QWORD *)v18 + 1));

      break;
    case 6u:
      v19 = type metadata accessor for URL(0);
      goto LABEL_18;
    case 9u:
    case 0xAu:
      v19 = type metadata accessor for Date(0);
LABEL_18:
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(v18, v19);
      break;
    default:
      return swift_deallocObject(v24, v22 + v21, v23 | 7);
  }
  return swift_deallocObject(v24, v22 + v21, v23 | 7);
}

uint64_t sub_D5664@<X0>(char *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for WantToReadToolbarButton(0) - 8) + 80);
  return sub_D2788(v1 + ((v3 + 16) & ~v3), a1);
}

double sub_D56B0@<D0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return sub_D2814(*(_QWORD *)(v1 + 16), a1);
}

uint64_t dispatch thunk of PageUpdateControlling.issue(instruction:animated:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 40))();
}

BOOL ColorConstants.isLight.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  void (*v10)(char *, uint64_t);
  uint64_t v12;

  v1 = v0;
  v2 = type metadata accessor for ColorScheme(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for ColorConstants.Environment(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_D57DC(v1, (uint64_t)v8);
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for ColorScheme.dark(_:), v2);
  v9 = sub_4928C();
  LOBYTE(v1) = dispatch thunk of static Equatable.== infix(_:_:)(v8, v5, v2, v9);
  v10 = *(void (**)(char *, uint64_t))(v3 + 8);
  v10(v5, v2);
  v10(v8, v2);
  return (v1 & 1) == 0;
}

uint64_t type metadata accessor for ColorConstants.Environment(uint64_t a1)
{
  return sub_1FE90(a1, qword_264578, (uint64_t)&nominal type descriptor for ColorConstants.Environment);
}

uint64_t sub_D57DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ColorConstants.Environment(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t EnvironmentValues.colors.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  void (*v16)(char *, uint64_t, uint64_t);
  uint64_t v17;
  void (*v18)(char *, uint64_t);
  uint64_t v20;
  uint64_t v21;

  v21 = a1;
  v2 = type metadata accessor for ColorScheme(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for ColorConstants.Environment(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for EnvironmentValues(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v20 - v14;
  v16 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v16((char *)&v20 - v14, v1, v9);
  v17 = ((uint64_t (*)(char *, char *, uint64_t))v16)(v13, v15, v9);
  EnvironmentValues.colorScheme.getter(v17);
  v18 = *(void (**)(char *, uint64_t))(v10 + 8);
  v18(v13, v9);
  (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v8, v5, v2);
  v18(v15, v9);
  return sub_D5990((uint64_t)v8, v21);
}

uint64_t sub_D5990(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ColorConstants.Environment(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t ColorConstants.Environment.colorScheme.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for ColorScheme(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t ColorConstants.Environment.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  v4 = type metadata accessor for ColorScheme(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
}

uint64_t ColorConstants.env.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_D57DC(v1, a1);
}

uint64_t ColorConstants.init(env:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_D5990(a1, a2);
}

uint64_t getEnumTagSinglePayload for ColorConstants(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_D5A80);
}

uint64_t sub_D5A80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_D5C54(a1, a2, a3, type metadata accessor for ColorConstants.Environment);
}

uint64_t storeEnumTagSinglePayload for ColorConstants(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_D5A98);
}

uint64_t sub_D5A98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_D5CA8(a1, a2, a3, a4, type metadata accessor for ColorConstants.Environment);
}

uint64_t type metadata accessor for ColorConstants(uint64_t a1)
{
  return sub_1FE90(a1, qword_2644E8, (uint64_t)&nominal type descriptor for ColorConstants);
}

uint64_t _s7BooksUI14ColorConstantsV11EnvironmentVwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ColorScheme(0);
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8))(a1, a2, v4);
}

uint64_t _s7BooksUI14ColorConstantsV11EnvironmentVwxx_0(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ColorScheme(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t _s7BooksUI14ColorConstantsV11EnvironmentVwcp_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ColorScheme(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t _s7BooksUI14ColorConstantsV11EnvironmentVwca_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ColorScheme(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t _s7BooksUI14ColorConstantsV11EnvironmentVwtk_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ColorScheme(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t _s7BooksUI14ColorConstantsV11EnvironmentVwta_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ColorScheme(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for ColorConstants.Environment(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_D5C48);
}

uint64_t sub_D5C48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_D5C54(a1, a2, a3, (uint64_t (*)(_QWORD))&type metadata accessor for ColorScheme);
}

uint64_t sub_D5C54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v6;

  v6 = a4(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(a1, a2, v6);
}

uint64_t storeEnumTagSinglePayload for ColorConstants.Environment(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_D5C9C);
}

uint64_t sub_D5C9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_D5CA8(a1, a2, a3, a4, (uint64_t (*)(_QWORD))&type metadata accessor for ColorScheme);
}

uint64_t sub_D5CA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v7;

  v7 = a5(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(a1, a2, a2, v7);
}

uint64_t sub_D5CE8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  result = type metadata accessor for ColorScheme(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 1, &v4, a1 + 16);
    return 0;
  }
  return result;
}

double DelayAction.seconds.getter()
{
  uint64_t v0;

  return *(double *)(v0 + *(int *)(type metadata accessor for DelayAction(0) + 20));
}

uint64_t type metadata accessor for DelayAction(uint64_t a1)
{
  uint64_t result;

  result = qword_264608;
  if (!qword_264608)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for DelayAction);
  return result;
}

uint64_t DelayAction.init(actionMetrics:seconds:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  uint64_t v6;
  uint64_t result;

  v6 = type metadata accessor for ActionMetrics(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a2, a1, v6);
  result = type metadata accessor for DelayAction(0);
  *(double *)(a2 + *(int *)(result + 20)) = a3;
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for DelayAction(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v8);
  }
  else
  {
    v7 = type metadata accessor for ActionMetrics(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
  }
  return a1;
}

uint64_t destroy for DelayAction(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ActionMetrics(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t initializeWithCopy for DelayAction(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for ActionMetrics(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithCopy for DelayAction(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for ActionMetrics(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t initializeWithTake for DelayAction(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for ActionMetrics(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithTake for DelayAction(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for ActionMetrics(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t getEnumTagSinglePayload for DelayAction(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_D6040);
}

uint64_t sub_D6040(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ActionMetrics(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for DelayAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_D6088);
}

uint64_t sub_D6088(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ActionMetrics(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t sub_D60C8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = type metadata accessor for ActionMetrics(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.Int64 + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_D613C(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_D6178 + 4 * asc_1E9E80[a1]))(0x4D747865746E6F63, 0xEB00000000756E65);
}

uint64_t sub_D6178()
{
  return 0x69576E6F74747562;
}

unint64_t sub_D61AC()
{
  return 0xD000000000000010;
}

uint64_t sub_D61C8()
{
  return 0x70756B636F6CLL;
}

unint64_t sub_D61DC()
{
  return 0xD000000000000016;
}

Swift::Int sub_D61FC()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1, 0);
  String.hash(into:)(v1, 1701869940, 0xE400000000000000);
  return Hasher._finalize()();
}

uint64_t sub_D6244(uint64_t a1)
{
  return String.hash(into:)(a1, 1701869940, 0xE400000000000000);
}

Swift::Int sub_D6254(uint64_t a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, a1);
  String.hash(into:)(v2, 1701869940, 0xE400000000000000);
  return Hasher._finalize()();
}

uint64_t sub_D6298@<X0>(uint64_t *a1@<X0>, BOOL *a2@<X8>)
{
  Swift::String v3;
  void *v4;
  Swift::Int v5;
  uint64_t result;

  v3._countAndFlagsBits = *a1;
  v4 = (void *)a1[1];
  v3._object = v4;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_249BC0, v3);
  result = swift_bridgeObjectRelease(v4);
  *a2 = v5 != 0;
  return result;
}

void sub_D62E8(_QWORD *a1@<X8>)
{
  *a1 = 1701869940;
  a1[1] = 0xE400000000000000;
}

uint64_t sub_D62FC()
{
  return 1701869940;
}

uint64_t sub_D630C@<X0>(Swift::String string@<0:X0, 8:X1>, BOOL *a2@<X8>)
{
  void *object;
  Swift::String v3;
  Swift::Int v5;
  uint64_t result;

  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_249BF8, v3);
  result = swift_bridgeObjectRelease(object);
  *a2 = v5 != 0;
  return result;
}

uint64_t sub_D6360(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_D771C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_D6388(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_D771C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_D63B0(char *a1, char *a2)
{
  return sub_C7128(*a1, *a2);
}

Swift::Int sub_D63BC()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5, 0);
  if (v1)
    v2 = 0x72756769666E6F63;
  else
    v2 = 1684957547;
  if (v1)
    v3 = 0xED00006E6F697461;
  else
    v3 = 0xE400000000000000;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_D6440(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  if (*v1)
    v2 = 0x72756769666E6F63;
  else
    v2 = 1684957547;
  if (*v1)
    v3 = 0xED00006E6F697461;
  else
    v3 = 0xE400000000000000;
  String.hash(into:)(a1, v2, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_D64A0(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD v6[9];

  v2 = *v1;
  Hasher.init(_seed:)(v6, a1);
  if (v2)
    v3 = 0x72756769666E6F63;
  else
    v3 = 1684957547;
  if (v2)
    v4 = 0xED00006E6F697461;
  else
    v4 = 0xE400000000000000;
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_D6520@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &off_2499E0;
  return sub_D79D4(v2, a1, a2);
}

void sub_D652C(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 1684957547;
  if (*v1)
    v2 = 0x72756769666E6F63;
  v3 = 0xE400000000000000;
  if (*v1)
    v3 = 0xED00006E6F697461;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_D6570()
{
  _BYTE *v0;

  if (*v0)
    return 0x72756769666E6F63;
  else
    return 1684957547;
}

uint64_t sub_D65B0@<X0>(Swift::String a1@<X1:X0>, char *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &off_2499E0;
  return sub_D7A84(a1, v2, a2);
}

void sub_D65BC(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_D65C8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_D7760();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_D65F0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_D7760();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_D6618(char *a1)
{
  sub_C6CCC(*a1);
}

void sub_D6624()
{
  char *v0;

  sub_125B04(0, *v0);
}

void sub_D6630(uint64_t a1)
{
  char *v1;

  sub_125618(a1, *v1);
}

void sub_D6638(uint64_t a1)
{
  char *v1;

  sub_125B04(a1, *v1);
}

unint64_t sub_D6640@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_D93A0(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_D666C()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_D6698 + 4 * byte_1E9E86[*v0]))();
}

void sub_D6698(_QWORD *a1@<X8>)
{
  *a1 = 0x656C746974627573;
  a1[1] = 0xE800000000000000;
}

void sub_D66B4(_QWORD *a1@<X8>)
{
  *a1 = 0x63657053746E6F66;
  a1[1] = 0xE800000000000000;
}

void sub_D66D0(_QWORD *a1@<X8>)
{
  *a1 = 0x6E6F69746361;
  a1[1] = 0xE600000000000000;
}

void sub_D66E8(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "assetResource");
  *(_WORD *)(a1 + 14) = -4864;
}

void sub_D6710(_QWORD *a1@<X8>)
{
  *a1 = 0x6D614E6567616D69;
  a1[1] = 0xE900000000000065;
}

void sub_D6730(_QWORD *a1@<X8>)
{
  *a1 = 0x6D496C6F626D7973;
  a1[1] = 0xEF646E694B656761;
}

void sub_D6758(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = 0x73756E656DLL;
  a1[1] = v1;
}

uint64_t sub_D676C()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_D6798 + 4 * byte_1E9E8E[*v0]))(0x656C746974, 0xE500000000000000);
}

uint64_t sub_D6798()
{
  return 0x656C746974627573;
}

uint64_t sub_D67B0()
{
  return 0x63657053746E6F66;
}

uint64_t sub_D67C8()
{
  return 0x6E6F69746361;
}

uint64_t sub_D67DC()
{
  return 0x7365527465737361;
}

uint64_t sub_D6800()
{
  return 0x6D614E6567616D69;
}

uint64_t sub_D681C()
{
  return 0x6D496C6F626D7973;
}

uint64_t sub_D6840()
{
  return 0x73756E656DLL;
}

unint64_t sub_D6850@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_D93A0(a1);
  *a2 = result;
  return result;
}

void sub_D6874(_BYTE *a1@<X8>)
{
  *a1 = 8;
}

uint64_t sub_D6880(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_D77E8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_D68A8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_D77E8();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_D68D0(char *a1)
{
  sub_C6F1C(*a1);
}

void sub_D68DC()
{
  char *v0;

  sub_12505C(*v0);
}

void sub_D68E4(uint64_t a1)
{
  char *v1;

  sub_125720(a1, *v1);
}

void sub_D68EC(uint64_t a1)
{
  char *v1;

  sub_125A04(a1, *v1);
}

unint64_t sub_D68F4@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_D942C(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_D6920@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_D613C(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_D6948(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_D935C();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t ToolbarItemType.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v23;
  unint64_t v24;
  _QWORD v25[9];
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD v37[32];
  char v38[384];

  v33 = a2;
  v3 = sub_5440(&qword_264640);
  v4 = __chkstk_darwin(v3);
  v32 = (char *)v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v28 = (char *)v25 - v6;
  v7 = sub_5440(&qword_264648);
  v29 = *(_QWORD *)(v7 - 8);
  v30 = v7;
  __chkstk_darwin(v7);
  v31 = (char *)v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_5440(&qword_264650);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v34 = (char *)v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_5440(&qword_264658);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v14 = a1[3];
  v15 = a1[4];
  v36 = a1;
  sub_5480(a1, v14);
  v16 = sub_D771C();
  v17 = v35;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&_s8RootKeysON_0, &_s8RootKeysON_0, v16, v14, v15);
  if (!v17)
  {
    v25[8] = v10;
    v26 = v9;
    v27 = v13;
    v18 = sub_D7760();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(&_s8TypeKeysON, v19, v12, &_s8TypeKeysON, v18);
    v38[0] = 0;
    v20 = sub_D77A4();
    v21 = v26;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v37, &_s15ToolbarItemKindON, v38, v26, &_s15ToolbarItemKindON, v20);
    v23 = LOBYTE(v37[0]);
    LOBYTE(v37[0]) = 1;
    v24 = sub_D77E8();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(&_s17ConfigurationKeysON, v37, v21, &_s17ConfigurationKeysON, v24);
    __asm { BR              X9 }
  }
  return _s7BooksUI13AnyPagedFrameVwxx_0(v36);
}

void sub_D6C88()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  *(_BYTE *)(v0 + 416) = 6;
  v5 = sub_D782C();
  v7 = *(_QWORD *)(v0 + 104);
  v6 = *(_QWORD *)(v0 + 112);
  KeyedDecodingContainer.decode<A>(_:forKey:)((_QWORD *)(v0 + 160), &type metadata for SymbolImage.Kind, v0 + 416, v7, &type metadata for SymbolImage.Kind, v5);
  if (!v4)
  {
    v8 = *(_BYTE *)(v0 + 160);
    v9 = sub_5440(&qword_264690);
    *(_BYTE *)(v0 + 416) = 7;
    v10 = sub_D885C();
    KeyedDecodingContainer.decode<A>(_:forKey:)((_QWORD *)(v0 + 160), v9, v0 + 416, v7, v9, v10);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 96) + 8))(v6, v7);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 64) + 8))(*(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 72));
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 80) + 8))(v2, v3);
    v11 = *(_QWORD *)(v0 + 160);
    *(_BYTE *)(v0 + 584) = v8;
    *(_QWORD *)(v0 + 592) = v11;
    *(_BYTE *)(v0 + 785) = 0;
    sub_D7870(v0 + 584, v1);
    JUMPOUT(0xD6BE0);
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 96) + 8))(v6, v7);
  JUMPOUT(0xD6C58);
}

unint64_t sub_D771C()
{
  unint64_t result;

  result = qword_264660;
  if (!qword_264660)
  {
    result = swift_getWitnessTable(&unk_1EA714, &_s8RootKeysON_0);
    atomic_store(result, (unint64_t *)&qword_264660);
  }
  return result;
}

unint64_t sub_D7760()
{
  unint64_t result;

  result = qword_264668;
  if (!qword_264668)
  {
    result = swift_getWitnessTable(&unk_1EA6C4, &_s8TypeKeysON);
    atomic_store(result, (unint64_t *)&qword_264668);
  }
  return result;
}

unint64_t sub_D77A4()
{
  unint64_t result;

  result = qword_264670;
  if (!qword_264670)
  {
    result = swift_getWitnessTable(&unk_1EA69C, &_s15ToolbarItemKindON);
    atomic_store(result, (unint64_t *)&qword_264670);
  }
  return result;
}

unint64_t sub_D77E8()
{
  unint64_t result;

  result = qword_264678;
  if (!qword_264678)
  {
    result = swift_getWitnessTable(&unk_1EA64C, &_s17ConfigurationKeysON);
    atomic_store(result, (unint64_t *)&qword_264678);
  }
  return result;
}

unint64_t sub_D782C()
{
  unint64_t result;

  result = qword_264680;
  if (!qword_264680)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for SymbolImage.Kind, &type metadata for SymbolImage.Kind);
    atomic_store(result, (unint64_t *)&qword_264680);
  }
  return result;
}

uint64_t sub_D7870(uint64_t a1, uint64_t a2)
{
  initializeWithTake for ToolbarItemType(a2, a1);
  return a2;
}

uint64_t sub_D78AC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return ToolbarItemType.init(from:)(a1, a2);
}

uint64_t sub_D78C0(char *a1, char *a2)
{
  return sub_C6584(*a1, *a2);
}

Swift::Int sub_D78CC()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  _QWORD v4[9];

  v1 = *v0;
  Hasher.init(_seed:)(v4, 0);
  if (v1)
    v2 = 1635017060;
  else
    v2 = 1684957547;
  String.hash(into:)(v4, v2, 0xE400000000000000);
  swift_bridgeObjectRelease(0xE400000000000000);
  return Hasher._finalize()();
}

uint64_t sub_D7930(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;

  if (*v1)
    v2 = 1635017060;
  else
    v2 = 1684957547;
  String.hash(into:)(a1, v2, 0xE400000000000000);
  return swift_bridgeObjectRelease(0xE400000000000000);
}

Swift::Int sub_D7968(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  uint64_t v3;
  _QWORD v5[9];

  v2 = *v1;
  Hasher.init(_seed:)(v5, a1);
  if (v2)
    v3 = 1635017060;
  else
    v3 = 1684957547;
  String.hash(into:)(v5, v3, 0xE400000000000000);
  swift_bridgeObjectRelease(0xE400000000000000);
  return Hasher._finalize()();
}

uint64_t sub_D79C8@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &off_249C30;
  return sub_D79D4(v2, a1, a2);
}

uint64_t sub_D79D4@<X0>(Swift::OpaquePointer cases@<0:X3>, uint64_t *a2@<X0>, char *a3@<X8>)
{
  Swift::String v4;
  void *v5;
  Swift::Int v6;
  uint64_t result;
  char v8;

  v4._countAndFlagsBits = *a2;
  v5 = (void *)a2[1];
  v4._object = v5;
  v6 = _findStringSwitchCase(cases:string:)(cases, v4);
  result = swift_bridgeObjectRelease(v5);
  if (v6 == 1)
    v8 = 1;
  else
    v8 = 2;
  if (!v6)
    v8 = 0;
  *a3 = v8;
  return result;
}

void sub_D7A2C(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;

  v2 = 1684957547;
  if (*v1)
    v2 = 1635017060;
  *a1 = v2;
  a1[1] = 0xE400000000000000;
}

uint64_t sub_D7A54()
{
  _BYTE *v0;

  if (*v0)
    return 1635017060;
  else
    return 1684957547;
}

uint64_t sub_D7A78@<X0>(Swift::String a1@<X1:X0>, char *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &off_249C30;
  return sub_D7A84(a1, v2, a2);
}

uint64_t sub_D7A84@<X0>(Swift::String string@<0:X0, 8:X1>, Swift::OpaquePointer cases@<0:X4>, char *a3@<X8>)
{
  void *object;
  Swift::String v4;
  Swift::Int v6;
  uint64_t result;
  char v8;

  object = string._object;
  v4._countAndFlagsBits = string._countAndFlagsBits;
  v4._object = object;
  v6 = _findStringSwitchCase(cases:string:)(cases, v4);
  result = swift_bridgeObjectRelease(object);
  if (v6 == 1)
    v8 = 1;
  else
    v8 = 2;
  if (!v6)
    v8 = 0;
  *a3 = v8;
  return result;
}

uint64_t sub_D7AE0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_D88D8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_D7B08(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_D88D8();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_D7B30(char *a1)
{
  sub_C65F0(*a1);
}

void sub_D7B3C()
{
  unsigned __int8 *v0;
  uint64_t v1;
  _QWORD v2[9];

  v1 = *v0;
  Hasher.init(_seed:)(v2, 0);
  __asm { BR              X9 }
}

Swift::Int sub_D7B80()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x656C746974627573, 0xE800000000000000);
  swift_bridgeObjectRelease(0xE800000000000000);
  return Hasher._finalize()();
}

void sub_D7C24()
{
  __asm { BR              X10 }
}

uint64_t sub_D7C58(uint64_t a1)
{
  String.hash(into:)(a1, 0x656C746974627573, 0xE800000000000000);
  return swift_bridgeObjectRelease(0xE800000000000000);
}

void sub_D7CE8(uint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t v2;
  _QWORD v3[9];

  v2 = *v1;
  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X9 }
}

Swift::Int sub_D7D28()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x656C746974627573, 0xE800000000000000);
  swift_bridgeObjectRelease(0xE800000000000000);
  return Hasher._finalize()();
}

unint64_t sub_D7DCC@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_D9474(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_D7DF8()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_D7E20 + 4 * byte_1E9EAB[*v0]))();
}

void sub_D7E20(_QWORD *a1@<X8>)
{
  *a1 = 0x656C746974627573;
  a1[1] = 0xE800000000000000;
}

void sub_D7E3C(_QWORD *a1@<X8>)
{
  *a1 = 0x6D496C6F626D7973;
  a1[1] = 0xEF646E694B656761;
}

void sub_D7E64(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "assetResource");
  *(_WORD *)(a1 + 14) = -4864;
}

void sub_D7E8C(_QWORD *a1@<X8>)
{
  *a1 = 0x7463656C65537369;
  a1[1] = 0xEA00000000006465;
}

uint64_t sub_D7EAC()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_D7ED4 + 4 * byte_1E9EB0[*v0]))(7107189, 0xE300000000000000);
}

uint64_t sub_D7ED4()
{
  return 0x656C746974627573;
}

uint64_t sub_D7EEC()
{
  return 0x6D496C6F626D7973;
}

uint64_t sub_D7F10()
{
  return 0x7365527465737361;
}

uint64_t sub_D7F34()
{
  return 0x7463656C65537369;
}

unint64_t sub_D7F50@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_D9474(a1);
  *a2 = result;
  return result;
}

uint64_t sub_D7F74(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_D8960();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_D7F9C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_D8960();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_D7FC4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_C67A8(*a1, *a2);
}

Swift::Int sub_D7FD0()
{
  unsigned __int8 *v0;
  int v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v7[9];

  v1 = *v0;
  Hasher.init(_seed:)(v7, 0);
  v2 = 0xE90000000000006BLL;
  v3 = 0x6E694C6572616873;
  if (v1 != 1)
  {
    v3 = 0x6E6F74747562;
    v2 = 0xE600000000000000;
  }
  if (v1)
    v4 = v3;
  else
    v4 = 0x656C67676F74;
  if (v1)
    v5 = v2;
  else
    v5 = 0xE600000000000000;
  String.hash(into:)(v7, v4, v5);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

uint64_t sub_D806C(uint64_t a1)
{
  _BYTE *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2 = 0xE90000000000006BLL;
  v3 = 0x6E694C6572616873;
  if (*v1 != 1)
  {
    v3 = 0x6E6F74747562;
    v2 = 0xE600000000000000;
  }
  if (*v1)
    v4 = v3;
  else
    v4 = 0x656C67676F74;
  if (*v1)
    v5 = v2;
  else
    v5 = 0xE600000000000000;
  String.hash(into:)(a1, v4, v5);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_D80E4(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD v8[9];

  v2 = *v1;
  Hasher.init(_seed:)(v8, a1);
  v3 = 0xE90000000000006BLL;
  v4 = 0x6E694C6572616873;
  if (v2 != 1)
  {
    v4 = 0x6E6F74747562;
    v3 = 0xE600000000000000;
  }
  if (v2)
    v5 = v4;
  else
    v5 = 0x656C67676F74;
  if (v2)
    v6 = v3;
  else
    v6 = 0xE600000000000000;
  String.hash(into:)(v8, v5, v6);
  swift_bridgeObjectRelease(v6);
  return Hasher._finalize()();
}

unint64_t sub_D817C@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_D94BC(*a1);
  *a2 = result;
  return result;
}

void sub_D81A8(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xE600000000000000;
  v4 = 0xE90000000000006BLL;
  v5 = 0x6E694C6572616873;
  if (v2 != 1)
  {
    v5 = 0x6E6F74747562;
    v4 = 0xE600000000000000;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x656C67676F74;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_D8204(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_D93E8();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t ToolbarActionMenuItemButtonType.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  int v26;
  unint64_t v27;
  char *v28;
  _QWORD *v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  _QWORD *v55;
  _BYTE *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  char *v65;
  _OWORD v66[2];
  uint64_t v67;
  char v68;

  v63 = a2;
  v3 = sub_5440(&qword_25E0C8);
  __chkstk_darwin(v3);
  v59 = (char *)&v56 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for URL(0);
  v57 = *(_QWORD *)(v5 - 8);
  v58 = v5;
  __chkstk_darwin(v5);
  v60 = (_BYTE **)((char *)&v56 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = sub_5440(&qword_2646A8);
  v8 = *(_QWORD *)(v7 - 8);
  v61 = v7;
  v62 = v8;
  __chkstk_darwin(v7);
  v10 = (char *)&v56 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_5440(&qword_2646B0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v56 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for ToolbarActionMenuItemButtonType(0);
  __chkstk_darwin(v15);
  v17 = (char *)&v56 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = a1[3];
  v18 = a1[4];
  v64 = a1;
  sub_5480(a1, v19);
  v20 = sub_D88D8();
  v21 = v65;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&_s8RootKeysON, &_s8RootKeysON, v20, v19, v18);
  if (!v21)
  {
    v65 = v10;
    v22 = v12;
    v56 = v17;
    v23 = v63;
    v68 = 0;
    v24 = sub_D891C();
    KeyedDecodingContainer.decode<A>(_:forKey:)(v66, &_s12MenuItemKindON, &v68, v11, &_s12MenuItemKindON, v24);
    v25 = v11;
    v26 = LOBYTE(v66[0]);
    LOBYTE(v66[0]) = 1;
    v27 = sub_D8960();
    v28 = v65;
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(&_s8DataKeysON, v66, v25, &_s8DataKeysON, v27);
    if (v26)
    {
      if (v26 != 1)
      {
        v41 = v14;
        v42 = type metadata accessor for LocalizerRequest(0);
        LOBYTE(v66[0]) = 1;
        v43 = sub_6FD0(&qword_2629C8, (uint64_t (*)(uint64_t))&type metadata accessor for LocalizerRequest, (uint64_t)&protocol conformance descriptor for LocalizerRequest);
        v44 = v61;
        KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v42, v66, v61, v42, v43);
        v45 = v22;
        LOBYTE(v66[0]) = 2;
        v58 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v66, v44);
        v60 = v46;
        v47 = sub_5440(&qword_25F900);
        v68 = 3;
        v48 = sub_34E9C();
        KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v47, &v68, v44, v47, v48);
        v49 = v62;
        if (*(_QWORD *)&v66[0])
        {
          v50 = *(id *)&v66[0];
          static ContentInfoUtilities.assetInfo(storeAsset:)(v66, v50);

          (*(void (**)(char *, uint64_t))(v49 + 8))(v65, v61);
          (*(void (**)(char *, uint64_t))(v45 + 8))(v41, v25);
        }
        else
        {
          (*(void (**)(char *, uint64_t))(v62 + 8))(v65, v61);
          (*(void (**)(char *, uint64_t))(v45 + 8))(v41, v25);
          v67 = 0;
          memset(v66, 0, sizeof(v66));
        }
        v35 = (uint64_t)v56;
        v51 = (uint64_t)v59;
        v52 = sub_5440(&qword_262AA8);
        v53 = (uint64_t *)(v35 + *(int *)(v52 + 48));
        v54 = v35 + *(int *)(v52 + 64);
        sub_167A4(v51, v35, &qword_25E0C8);
        v55 = v60;
        *v53 = v58;
        v53[1] = (uint64_t)v55;
        sub_167A4((uint64_t)v66, v54, &qword_25F910);
        swift_storeEnumTagMultiPayload(v35, v15, 2);
        v29 = v64;
        goto LABEL_10;
      }
      v59 = (char *)v15;
      LOBYTE(v66[0]) = 0;
      v31 = sub_6FD0(&qword_2646D0, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
      v32 = v61;
      v33 = v58;
      v34 = v65;
      KeyedDecodingContainer.decode<A>(_:forKey:)(v60, v58, v66, v61, v58, v31);
      (*(void (**)(char *, uint64_t))(v62 + 8))(v34, v32);
      (*(void (**)(char *, uint64_t))(v22 + 8))(v14, v25);
      v29 = v64;
      v35 = (uint64_t)v56;
      (*(void (**)(_BYTE *, _QWORD *, uint64_t))(v57 + 32))(v56, v60, v33);
      v36 = v35;
      v37 = v59;
      v38 = 1;
    }
    else
    {
      LOBYTE(v66[0]) = 4;
      v39 = v61;
      v40 = KeyedDecodingContainer.decode(_:forKey:)(v66, v61);
      (*(void (**)(char *, uint64_t))(v62 + 8))(v28, v39);
      (*(void (**)(char *, uint64_t))(v22 + 8))(v14, v25);
      v29 = v64;
      v35 = (uint64_t)v56;
      *v56 = v40 & 1;
      v36 = v35;
      v37 = (char *)v15;
      v38 = 0;
    }
    swift_storeEnumTagMultiPayload(v36, v37, v38);
LABEL_10:
    sub_D89A4(v35, v23);
    return _s7BooksUI13AnyPagedFrameVwxx_0(v29);
  }
  v29 = v64;
  return _s7BooksUI13AnyPagedFrameVwxx_0(v29);
}

uint64_t sub_D880C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return ToolbarActionMenuItemButtonType.init(from:)(a1, a2);
}

uint64_t sub_D8820(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for FontSpec(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_D885C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_264698;
  if (!qword_264698)
  {
    v1 = sub_7EF8(&qword_264690);
    sub_6FD0(&qword_2646A0, type metadata accessor for ToolbarActionMenu, (uint64_t)&protocol conformance descriptor for ToolbarActionMenu);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_264698);
  }
  return result;
}

unint64_t sub_D88D8()
{
  unint64_t result;

  result = qword_2646B8;
  if (!qword_2646B8)
  {
    result = swift_getWitnessTable(&unk_1EA5FC, &_s8RootKeysON);
    atomic_store(result, (unint64_t *)&qword_2646B8);
  }
  return result;
}

unint64_t sub_D891C()
{
  unint64_t result;

  result = qword_2646C0;
  if (!qword_2646C0)
  {
    result = swift_getWitnessTable(&unk_1EA5D4, &_s12MenuItemKindON);
    atomic_store(result, (unint64_t *)&qword_2646C0);
  }
  return result;
}

unint64_t sub_D8960()
{
  unint64_t result;

  result = qword_2646C8;
  if (!qword_2646C8)
  {
    result = swift_getWitnessTable(&unk_1EA584, &_s8DataKeysON);
    atomic_store(result, (unint64_t *)&qword_2646C8);
  }
  return result;
}

uint64_t sub_D89A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ToolbarActionMenuItemButtonType(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t _s12MenuItemKindOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_D8A34 + 4 * byte_1E9EBA[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_D8A68 + 4 * byte_1E9EB5[v4]))();
}

uint64_t sub_D8A68(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_D8A70(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0xD8A78);
  return result;
}

uint64_t sub_D8A84(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0xD8A8CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_D8A90(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_D8A98(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s12MenuItemKindOMa()
{
  return &_s12MenuItemKindON;
}

ValueMetadata *_s8RootKeysOMa()
{
  return &_s8RootKeysON;
}

uint64_t _s8DataKeysOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_D8B14 + 4 * byte_1E9EC4[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_D8B48 + 4 * byte_1E9EBF[v4]))();
}

uint64_t sub_D8B48(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_D8B50(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0xD8B58);
  return result;
}

uint64_t sub_D8B64(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0xD8B6CLL);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_D8B70(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_D8B78(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s8DataKeysOMa()
{
  return &_s8DataKeysON;
}

uint64_t _s15ToolbarItemKindOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_D8BE0 + 4 * byte_1E9ECE[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_D8C14 + 4 * byte_1E9EC9[v4]))();
}

uint64_t sub_D8C14(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_D8C1C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0xD8C24);
  return result;
}

uint64_t sub_D8C30(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0xD8C38);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_D8C3C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_D8C44(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s15ToolbarItemKindOMa()
{
  return &_s15ToolbarItemKindON;
}

uint64_t _s8RootKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_D8CA0 + 4 * byte_1E9ED3[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_D8CC0 + 4 * byte_1E9ED8[v4]))();
}

_BYTE *sub_D8CA0(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_D8CC0(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_D8CC8(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_D8CD0(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_D8CD8(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_D8CE0(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *_s8RootKeysOMa_0()
{
  return &_s8RootKeysON_0;
}

uint64_t _s8RootKeysOwst_1(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_D8D48 + 4 * byte_1E9EE2[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_D8D7C + 4 * byte_1E9EDD[v4]))();
}

uint64_t sub_D8D7C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_D8D84(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0xD8D8CLL);
  return result;
}

uint64_t sub_D8D98(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0xD8DA0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_D8DA4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_D8DAC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s8TypeKeysOMa()
{
  return &_s8TypeKeysON;
}

uint64_t _s17ConfigurationKeysOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_D8E14 + 4 * byte_1E9EEC[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_D8E48 + 4 * byte_1E9EE7[v4]))();
}

uint64_t sub_D8E48(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_D8E50(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0xD8E58);
  return result;
}

uint64_t sub_D8E64(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0xD8E6CLL);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_D8E70(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_D8E78(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s17ConfigurationKeysOMa()
{
  return &_s17ConfigurationKeysON;
}

unint64_t sub_D8E98()
{
  unint64_t result;

  result = qword_2646D8;
  if (!qword_2646D8)
  {
    result = swift_getWitnessTable(&unk_1EA05C, &_s17ConfigurationKeysON);
    atomic_store(result, (unint64_t *)&qword_2646D8);
  }
  return result;
}

unint64_t sub_D8EE0()
{
  unint64_t result;

  result = qword_2646E0;
  if (!qword_2646E0)
  {
    result = swift_getWitnessTable(&unk_1EA14C, &_s8TypeKeysON);
    atomic_store(result, (unint64_t *)&qword_2646E0);
  }
  return result;
}

unint64_t sub_D8F28()
{
  unint64_t result;

  result = qword_2646E8;
  if (!qword_2646E8)
  {
    result = swift_getWitnessTable(&unk_1EA23C, &_s8RootKeysON_0);
    atomic_store(result, (unint64_t *)&qword_2646E8);
  }
  return result;
}

unint64_t sub_D8F70()
{
  unint64_t result;

  result = qword_2646F0;
  if (!qword_2646F0)
  {
    result = swift_getWitnessTable(&unk_1EA2DC, &_s15ToolbarItemKindON);
    atomic_store(result, (unint64_t *)&qword_2646F0);
  }
  return result;
}

unint64_t sub_D8FB8()
{
  unint64_t result;

  result = qword_2646F8;
  if (!qword_2646F8)
  {
    result = swift_getWitnessTable(&unk_1EA3CC, &_s8DataKeysON);
    atomic_store(result, (unint64_t *)&qword_2646F8);
  }
  return result;
}

unint64_t sub_D9000()
{
  unint64_t result;

  result = qword_264700;
  if (!qword_264700)
  {
    result = swift_getWitnessTable(&unk_1EA4BC, &_s8RootKeysON);
    atomic_store(result, (unint64_t *)&qword_264700);
  }
  return result;
}

unint64_t sub_D9048()
{
  unint64_t result;

  result = qword_264708;
  if (!qword_264708)
  {
    result = swift_getWitnessTable(&unk_1EA55C, &_s12MenuItemKindON);
    atomic_store(result, (unint64_t *)&qword_264708);
  }
  return result;
}

unint64_t sub_D9090()
{
  unint64_t result;

  result = qword_264710;
  if (!qword_264710)
  {
    result = swift_getWitnessTable(&unk_1EA304, &_s8DataKeysON);
    atomic_store(result, (unint64_t *)&qword_264710);
  }
  return result;
}

unint64_t sub_D90D8()
{
  unint64_t result;

  result = qword_264718;
  if (!qword_264718)
  {
    result = swift_getWitnessTable(&unk_1EA32C, &_s8DataKeysON);
    atomic_store(result, (unint64_t *)&qword_264718);
  }
  return result;
}

unint64_t sub_D9120()
{
  unint64_t result;

  result = qword_264720;
  if (!qword_264720)
  {
    result = swift_getWitnessTable(&unk_1EA3F4, &_s8RootKeysON);
    atomic_store(result, (unint64_t *)&qword_264720);
  }
  return result;
}

unint64_t sub_D9168()
{
  unint64_t result;

  result = qword_264728;
  if (!qword_264728)
  {
    result = swift_getWitnessTable(&unk_1EA41C, &_s8RootKeysON);
    atomic_store(result, (unint64_t *)&qword_264728);
  }
  return result;
}

unint64_t sub_D91B0()
{
  unint64_t result;

  result = qword_264730;
  if (!qword_264730)
  {
    result = swift_getWitnessTable(&unk_1E9F94, &_s17ConfigurationKeysON);
    atomic_store(result, (unint64_t *)&qword_264730);
  }
  return result;
}

unint64_t sub_D91F8()
{
  unint64_t result;

  result = qword_264738;
  if (!qword_264738)
  {
    result = swift_getWitnessTable(&unk_1E9FBC, &_s17ConfigurationKeysON);
    atomic_store(result, (unint64_t *)&qword_264738);
  }
  return result;
}

unint64_t sub_D9240()
{
  unint64_t result;

  result = qword_264740;
  if (!qword_264740)
  {
    result = swift_getWitnessTable(&unk_1EA084, &_s8TypeKeysON);
    atomic_store(result, (unint64_t *)&qword_264740);
  }
  return result;
}

unint64_t sub_D9288()
{
  unint64_t result;

  result = qword_264748;
  if (!qword_264748)
  {
    result = swift_getWitnessTable(&unk_1EA0AC, &_s8TypeKeysON);
    atomic_store(result, (unint64_t *)&qword_264748);
  }
  return result;
}

unint64_t sub_D92D0()
{
  unint64_t result;

  result = qword_264750;
  if (!qword_264750)
  {
    result = swift_getWitnessTable(&unk_1EA174, &_s8RootKeysON_0);
    atomic_store(result, (unint64_t *)&qword_264750);
  }
  return result;
}

unint64_t sub_D9318()
{
  unint64_t result;

  result = qword_264758;
  if (!qword_264758)
  {
    result = swift_getWitnessTable(&unk_1EA19C, &_s8RootKeysON_0);
    atomic_store(result, (unint64_t *)&qword_264758);
  }
  return result;
}

unint64_t sub_D935C()
{
  unint64_t result;

  result = qword_264760;
  if (!qword_264760)
  {
    result = swift_getWitnessTable(&unk_1EA264, &_s15ToolbarItemKindON);
    atomic_store(result, (unint64_t *)&qword_264760);
  }
  return result;
}

unint64_t sub_D93A0(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_249A30, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 8)
    return 8;
  else
    return v3;
}

unint64_t sub_D93E8()
{
  unint64_t result;

  result = qword_264768[0];
  if (!qword_264768[0])
  {
    result = swift_getWitnessTable(&unk_1EA4E4, &_s12MenuItemKindON);
    atomic_store(result, qword_264768);
  }
  return result;
}

unint64_t sub_D942C(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_249B10, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 6)
    return 6;
  else
    return v3;
}

unint64_t sub_D9474(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_249C80, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 5)
    return 5;
  else
    return v3;
}

unint64_t sub_D94BC(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_249D18, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 3)
    return 3;
  else
    return v3;
}

uint64_t _CodeAnyIntentModel_KeyedBy.description.getter(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t ExtendedExistentialTypeMetadata;
  uint64_t v6;
  uint64_t WitnessTable;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  v3 = *v1;
  v11 = 0;
  v12 = 0xE000000000000000;
  v4 = a1[2];
  v9 = a1[3];
  v10 = v3;
  ExtendedExistentialTypeMetadata = swift_getExtendedExistentialTypeMetadata(&unk_1E3480, &v9);
  v6 = type metadata accessor for Dictionary(0, v4, ExtendedExistentialTypeMetadata, a1[5]);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A : B], v6);
  DefaultStringInterpolation.appendInterpolation<A>(_:)(&v10, v6, WitnessTable);
  return v11;
}

void _CodeAnyIntentModel_KeyedBy.init(from:)(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v6;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t WitnessTable;
  uint64_t v17;
  uint64_t v18;
  uint64_t KeyPath;
  uint64_t v20;
  uint64_t ExtendedExistentialTypeMetadata;
  uint64_t v22;
  _QWORD v23[5];
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[5];
  uint64_t *v27;

  sub_BD00((uint64_t)a1, (uint64_t)v26);
  v15 = type metadata accessor for CodeAnyIntentModel(0, a3, v13, v14);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for CodeAnyIntentModel<A>, v15);
  v17 = Dictionary<>.init(from:)(v26, a2, v15, a4, a5, WitnessTable);
  if (v6)
  {
    _s7BooksUI13AnyPagedFrameVwxx_0(a1);
  }
  else
  {
    v18 = v17;
    v27 = a6;
    __chkstk_darwin(v17);
    KeyPath = swift_getKeyPath(&unk_1EA778);
    v25 = (uint64_t)&v25;
    v23[2] = a2;
    v23[3] = a4;
    v23[4] = a5;
    v24 = __chkstk_darwin(KeyPath);
    v20 = v24;
    v26[0] = a3;
    ExtendedExistentialTypeMetadata = swift_getExtendedExistentialTypeMetadata(&unk_1E3480, v26);
    v22 = Dictionary.mapValues<A>(_:)(sub_D9724, v23, v18, a2, v15, ExtendedExistentialTypeMetadata, a5);
    swift_bridgeObjectRelease(v18);
    _s7BooksUI13AnyPagedFrameVwxx_0(a1);
    swift_release(v20);
    *v27 = v22;
  }
}

uint64_t sub_D9724(uint64_t a1)
{
  uint64_t v1;

  return swift_getAtKeyPath(a1, *(_QWORD *)(v1 + 40));
}

void sub_D9750(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  _CodeAnyIntentModel_KeyedBy.init(from:)(a1, a2[2], a2[3], a2[4], a2[5], a3);
}

void _CodeAnyIntentModel_KeyedBy<>.init(_partiallyFrom:)(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t WitnessTable;
  uint64_t v10;
  uint64_t KeyPath;
  uint64_t ExtendedExistentialTypeMetadata;
  uint64_t v13;
  _QWORD v14[5];

  sub_BD00((uint64_t)a1, (uint64_t)v14);
  v8 = type metadata accessor for CodeAnyIntentModel(0, a2, v6, v7);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for CodeAnyIntentModel<A>, v8);
  v10 = Dictionary<>.init(_partiallyFrom:)(v14, v8, WitnessTable);
  KeyPath = swift_getKeyPath(&unk_1EA798);
  v14[0] = a2;
  ExtendedExistentialTypeMetadata = swift_getExtendedExistentialTypeMetadata(&unk_1E3480, v14);
  v13 = Dictionary.mapValues<A>(_:)(sub_D9864, KeyPath, v10, &type metadata for String, v8, ExtendedExistentialTypeMetadata, &protocol witness table for String);
  swift_bridgeObjectRelease(v10);
  _s7BooksUI13AnyPagedFrameVwxx_0(a1);
  swift_release(KeyPath);
  *a3 = v13;
}

uint64_t sub_D9864(uint64_t a1)
{
  uint64_t v1;

  return swift_getAtKeyPath(a1, v1);
}

void sub_D988C(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _CodeAnyIntentModel_KeyedBy<>.init(_partiallyFrom:)(a1, *(_QWORD *)(a2 + 24), a3);
}

uint64_t type metadata accessor for _CodeAnyIntentModel_KeyedBy(uint64_t a1, uint64_t a2)
{
  return swift_getGenericMetadata(a1, a2, &nominal type descriptor for _CodeAnyIntentModel_KeyedBy);
}

uint64_t ListItemAccessoryRecommendationControls.init(assetInfo:)@<X0>(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = swift_getKeyPath(&unk_1EA890);
  *(_BYTE *)(a2 + 8) = 0;
  return sub_AC68(a1, a2 + 16);
}

uint64_t ListItemAccessoryRecommendationControls.content(contextActionMenuView:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;

  v36 = a3;
  v6 = type metadata accessor for RestrictedDynamicTypeSizeViewModifier(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_5440(&qword_25E778);
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v10);
  v15 = (char *)&v35 - v14;
  v16 = __chkstk_darwin(v13);
  v18 = (char *)&v35 - v17;
  __chkstk_darwin(v16);
  v20 = (char *)&v35 - v19;
  v21 = sub_5440(&qword_2647F0);
  v22 = __chkstk_darwin(v21);
  v24 = (char *)&v35 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v24 = static VerticalAlignment.center.getter(v22);
  *((_QWORD *)v24 + 1) = 0;
  v24[16] = 1;
  v25 = sub_5440(&qword_2647F8);
  sub_D9BC8(v3, a1, a2, (uint64_t)&v24[*(int *)(v25 + 44)]);
  v26 = type metadata accessor for DynamicTypeSize(0);
  v27 = *(_QWORD *)(v26 - 8);
  v28 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v27 + 56);
  v28(v20, 1, 1, v26);
  (*(void (**)(char *, _QWORD, uint64_t))(v27 + 104))(v18, enum case for DynamicTypeSize.accessibility3(_:), v26);
  v28(v18, 0, 1, v26);
  sub_B3D0((uint64_t)v20, (uint64_t)v15, &qword_25E778);
  sub_B3D0((uint64_t)v18, (uint64_t)v12, &qword_25E778);
  v28(v8, 1, 1, v26);
  v29 = (uint64_t)&v8[*(int *)(v6 + 20)];
  v28((char *)v29, 1, 1, v26);
  v30 = &v8[*(int *)(v6 + 24)];
  *(_QWORD *)v30 = swift_getKeyPath(&unk_1EA8B8);
  v31 = sub_5440(&qword_25FAA8);
  swift_storeEnumTagMultiPayload(v30, v31, 0);
  sub_A77A8((uint64_t)v15, (uint64_t)v8);
  sub_A77A8((uint64_t)v12, v29);
  v32 = sub_5440(&qword_264800);
  v33 = v36;
  sub_21C88((uint64_t)v8, v36 + *(int *)(v32 + 36), type metadata accessor for RestrictedDynamicTypeSizeViewModifier);
  sub_B3D0((uint64_t)v24, v33, &qword_2647F0);
  sub_B414((uint64_t)v18, &qword_25E778);
  sub_B414((uint64_t)v20, &qword_25E778);
  return sub_B414((uint64_t)v24, &qword_2647F0);
}

uint64_t sub_D9BC8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t ButtonView;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t, uint64_t);
  uint64_t v28;
  unint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int *v49;
  uint64_t v50;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  __int128 v67[5];
  _OWORD v68[3];
  __int128 v69[8];
  char v70;
  uint64_t v71;
  unsigned __int8 v72;
  uint64_t v73;
  unsigned __int8 v74;
  uint64_t v75;
  uint64_t v76;

  v64 = a2;
  v65 = a3;
  v55 = a4;
  v54 = type metadata accessor for Font.TextStyle(0);
  v5 = *(_QWORD *)(v54 - 8);
  __chkstk_darwin(v54);
  v7 = (char *)&v52 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (int *)type metadata accessor for ListItemAccessoryMoreButtonView(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v52 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_5440(&qword_264838);
  v12 = __chkstk_darwin(v11);
  v62 = (char *)&v52 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v63 = (uint64_t)&v52 - v14;
  ButtonView = type metadata accessor for ListItemAccessoryWantToReadButtonView(0);
  v16 = __chkstk_darwin(ButtonView);
  v18 = (char *)&v52 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v20 = (char *)&v52 - v19;
  v52 = (uint64_t)&v52 - v19;
  a1 += 16;
  sub_BD00(a1, (uint64_t)v69);
  *(_QWORD *)&v67[0] = swift_getKeyPath(&unk_1EA968);
  *(__int128 *)((char *)v67 + 8) = 0u;
  *(__int128 *)((char *)&v67[1] + 8) = 0u;
  *(__int128 *)((char *)&v67[2] + 8) = 0u;
  *(__int128 *)((char *)&v67[3] + 3) = 0u;
  *((_QWORD *)&v67[4] + 1) = swift_getKeyPath(&unk_1EA890);
  LOBYTE(v68[0]) = 0;
  sub_AC68(v69, (uint64_t)v68 + 8);
  v70 = 1;
  v69[6] = v68[1];
  v69[7] = v68[2];
  v69[2] = v67[2];
  v69[3] = v67[3];
  v69[4] = v67[4];
  v69[5] = v68[0];
  v69[0] = v67[0];
  v69[1] = v67[1];
  v21 = _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0();
  _FrameLayout.init(width:height:alignment:)(&v71, 0x4028000000000000, 0, 0, 1, v21, v22);
  v61 = v71;
  v60 = v72;
  v59 = v73;
  v58 = v74;
  v56 = v76;
  v57 = v75;
  sub_BD00(a1, (uint64_t)v67);
  *(_QWORD *)v18 = swift_getKeyPath(&unk_1EA990);
  v18[8] = 0;
  v23 = &v18[*(int *)(ButtonView + 20)];
  v53 = v18;
  *(_QWORD *)v23 = swift_getKeyPath(&unk_1EA9D0);
  v24 = sub_5440(&qword_25F758);
  swift_storeEnumTagMultiPayload(v23, v24, 0);
  v66 = 0x403E000000000000;
  v25 = sub_62860();
  ScaledMetric.init(wrappedValue:)(&v66, &type metadata for CGFloat, v25);
  sub_AC68(v67, (uint64_t)&v18[*(int *)(ButtonView + 28)]);
  sub_21C88((uint64_t)v18, (uint64_t)v20, type metadata accessor for ListItemAccessoryWantToReadButtonView);
  sub_BD00(a1, (uint64_t)v67);
  v66 = 0x4034000000000000;
  v26 = enum case for Font.TextStyle.subheadline(_:);
  v27 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 104);
  v28 = v54;
  v27(v7, enum case for Font.TextStyle.subheadline(_:), v54);
  v29 = sub_3CB54();
  swift_retain(v65);
  ScaledMetric.init(wrappedValue:relativeTo:)(&v66, v7, &type metadata for Double, v29);
  v66 = 0x4000000000000000;
  v27(v7, v26, v28);
  ScaledMetric.init(wrappedValue:relativeTo:)(&v66, v7, &type metadata for Double, v29);
  v30 = &v10[v8[6]];
  *(_QWORD *)v30 = swift_getKeyPath(&unk_1EA9F8);
  v31 = sub_5440(&qword_25F548);
  swift_storeEnumTagMultiPayload(v30, v31, 0);
  v32 = &v10[v8[7]];
  *(_QWORD *)v32 = swift_getKeyPath(&unk_1EAA20);
  v33 = sub_5440(&qword_25F1E8);
  swift_storeEnumTagMultiPayload(v32, v33, 0);
  v34 = &v10[v8[8]];
  *(_QWORD *)v34 = swift_getKeyPath(&unk_1EA968);
  *(_OWORD *)(v34 + 8) = 0u;
  *(_OWORD *)(v34 + 24) = 0u;
  *(_OWORD *)(v34 + 40) = 0u;
  *(_OWORD *)(v34 + 51) = 0u;
  v35 = &v10[v8[9]];
  v36 = type metadata accessor for ProfileRestrictions(0);
  v37 = sub_6FD0((unint64_t *)&qword_26AF00, type metadata accessor for ProfileRestrictions, (uint64_t)&protocol conformance descriptor for ProfileRestrictions);
  *(_QWORD *)v35 = EnvironmentObject.init()(v36, v37);
  *((_QWORD *)v35 + 1) = v38;
  sub_AC68(v67, (uint64_t)&v10[v8[10]]);
  v39 = &v10[v8[11]];
  v40 = v65;
  *(_QWORD *)v39 = v64;
  *((_QWORD *)v39 + 1) = v40;
  v10[v8[12]] = 0;
  v41 = sub_6FD0((unint64_t *)&qword_25F888, type metadata accessor for ListItemAccessoryMoreButtonView, (uint64_t)&protocol conformance descriptor for ListItemAccessoryMoreButtonView);
  v42 = (uint64_t)v62;
  View.accessibilityHidden(_:)(1, v8, v41);
  sub_224DC((uint64_t)v10, type metadata accessor for ListItemAccessoryMoreButtonView);
  v43 = v63;
  sub_DA2D8(v42, v63);
  sub_DA320((uint64_t)v69, (uint64_t)v67);
  v45 = v52;
  v44 = (uint64_t)v53;
  sub_DA35C(v52, (uint64_t)v53);
  sub_B3D0(v43, v42, &qword_264838);
  v46 = v55;
  sub_DA320((uint64_t)v67, v55);
  *(_QWORD *)(v46 + 136) = 0;
  *(_BYTE *)(v46 + 144) = 1;
  *(_QWORD *)(v46 + 152) = v61;
  *(_BYTE *)(v46 + 160) = v60;
  *(_QWORD *)(v46 + 168) = v59;
  *(_BYTE *)(v46 + 176) = v58;
  v47 = v56;
  *(_QWORD *)(v46 + 184) = v57;
  *(_QWORD *)(v46 + 192) = v47;
  v48 = v46;
  v49 = (int *)sub_5440(qword_264840);
  sub_DA35C(v44, v48 + v49[16]);
  v50 = v48 + v49[20];
  *(_QWORD *)v50 = 0;
  *(_BYTE *)(v50 + 8) = 1;
  sub_B3D0(v42, v48 + v49[24], &qword_264838);
  sub_B414(v43, &qword_264838);
  sub_224DC(v45, type metadata accessor for ListItemAccessoryWantToReadButtonView);
  sub_DA3A0((uint64_t)v69);
  sub_B414(v42, &qword_264838);
  sub_224DC(v44, type metadata accessor for ListItemAccessoryWantToReadButtonView);
  return sub_DA3A0((uint64_t)v67);
}

uint64_t sub_DA1C8(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &opaque type descriptor for <<opaque return type of ListItemAccessoryRecommendationControls.content(contextActionMenuView:)>>, 1);
}

ValueMetadata *type metadata accessor for ListItemAccessoryRecommendationControls()
{
  return &type metadata for ListItemAccessoryRecommendationControls;
}

unint64_t sub_DA1F0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_264828;
  if (!qword_264828)
  {
    v1 = sub_7EF8(&qword_264800);
    sub_DA274();
    sub_6FD0((unint64_t *)&qword_263108, type metadata accessor for RestrictedDynamicTypeSizeViewModifier, (uint64_t)&unk_1E7268);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_264828);
  }
  return result;
}

unint64_t sub_DA274()
{
  unint64_t result;
  uint64_t v1;

  result = qword_264830;
  if (!qword_264830)
  {
    v1 = sub_7EF8(&qword_2647F0);
    result = swift_getWitnessTable(&protocol conformance descriptor for HStack<A>, v1);
    atomic_store(result, (unint64_t *)&qword_264830);
  }
  return result;
}

uint64_t sub_DA2D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_5440(&qword_264838);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_DA320(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for ListItemAccessoryBuyButtonView(a2, a1);
  return a2;
}

uint64_t sub_DA35C(uint64_t a1, uint64_t a2)
{
  uint64_t ButtonView;

  ButtonView = type metadata accessor for ListItemAccessoryWantToReadButtonView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(ButtonView - 8) + 16))(a2, a1, ButtonView);
  return a2;
}

uint64_t sub_DA3A0(uint64_t a1)
{
  destroy for ListItemAccessoryBuyButtonView(a1);
  return a1;
}

uint64_t sub_DA3D4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[6];

  v4[0] = &unk_1EAA78;
  v4[1] = &unk_1EAA90;
  result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 16));
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(result - 8) + 64;
    v4[3] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[4] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[5] = (char *)&value witness table for Builtin.Int64 + 64;
    swift_initStructMetadata(a1, 0, 6, v4, a1 + 32);
    return 0;
  }
  return result;
}

uint64_t *sub_DA464(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, uint64_t);
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = *(_QWORD *)(v5 + 64) + 7;
  if (v6 > 7
    || (*(_DWORD *)(v5 + 80) & 0x100000) != 0
    || ((((((v7 + ((v6 + 32) & ~v6)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
     + 8 > 0x18)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain(v10);
  }
  else
  {
    v11 = a2[1];
    *a1 = *a2;
    a1[1] = v11;
    v12 = (_QWORD *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
    v13 = (_QWORD *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
    *v12 = *v13;
    v14 = v13[1];
    v12[1] = v14;
    v15 = ((unint64_t)v12 + v6 + 16) & ~v6;
    v16 = ((unint64_t)v13 + v6 + 16) & ~v6;
    v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_bridgeObjectRetain(v11);
    swift_bridgeObjectRetain(v14);
    v17(v15, v16, v4);
    v18 = (_QWORD *)((v7 + v15) & 0xFFFFFFFFFFFFF8);
    v19 = (_QWORD *)((v7 + v16) & 0xFFFFFFFFFFFFF8);
    *v18 = *v19;
    v20 = (_QWORD *)(((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFF8);
    v21 = (_QWORD *)(((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFF8);
    *v20 = *v21;
    *(_QWORD *)(((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFF8);
  }
  return a1;
}

uint64_t sub_DA5AC(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  v4 = (a1 + 23) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + 8));
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))((v4 + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
}

_QWORD *sub_DA600(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = (_QWORD *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
  v6 = (_QWORD *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v5 = *v6;
  v7 = v6[1];
  v5[1] = v7;
  v8 = *(_QWORD *)(a3 + 16);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = ((unint64_t)v5 + v10 + 16) & ~v10;
  v12 = ((unint64_t)v6 + v10 + 16) & ~v10;
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v7);
  v13(v11, v12, v8);
  v14 = *(_QWORD *)(v9 + 64) + 7;
  v15 = (_QWORD *)((v14 + v11) & 0xFFFFFFFFFFFFFFF8);
  v16 = (_QWORD *)((v14 + v12) & 0xFFFFFFFFFFFFFFF8);
  *v15 = *v16;
  v17 = (_QWORD *)(((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFF8);
  v18 = (_QWORD *)(((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v17 = *v18;
  *(_QWORD *)(((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFF8);
  return a1;
}

_QWORD *sub_DA6E0(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;

  *a1 = *a2;
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = (_QWORD *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
  v9 = (_QWORD *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v8 = *v9;
  v10 = v9[1];
  v11 = v8[1];
  v8[1] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  v12 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v13 = *(unsigned __int8 *)(v12 + 80);
  v14 = ((unint64_t)v8 + v13 + 16) & ~v13;
  v15 = ((unint64_t)v9 + v13 + 16) & ~v13;
  (*(void (**)(uint64_t, uint64_t))(v12 + 24))(v14, v15);
  v16 = *(_QWORD *)(v12 + 64) + 7;
  v17 = (_QWORD *)((v16 + v14) & 0xFFFFFFFFFFFFFFF8);
  v18 = (_QWORD *)((v16 + v15) & 0xFFFFFFFFFFFFFFF8);
  *v17 = *v18;
  v19 = (_QWORD *)(((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFF8);
  v20 = (_QWORD *)(((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v19 = *v20;
  *(_QWORD *)(((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFF8);
  return a1;
}

_OWORD *sub_DA7D8(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  _OWORD *v4;
  _OWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;

  *a1 = *a2;
  v4 = (_OWORD *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
  v5 = (_OWORD *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v4 = *v5;
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = ((unint64_t)v4 + v7 + 16) & ~v7;
  v9 = ((unint64_t)v5 + v7 + 16) & ~v7;
  (*(void (**)(uint64_t, uint64_t))(v6 + 32))(v8, v9);
  v10 = *(_QWORD *)(v6 + 64) + 7;
  v11 = (_QWORD *)((v10 + v8) & 0xFFFFFFFFFFFFFFF8);
  v12 = (_QWORD *)((v10 + v9) & 0xFFFFFFFFFFFFFFF8);
  *v11 = *v12;
  v13 = (_QWORD *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFF8);
  v14 = (_QWORD *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v13 = *v14;
  *(_QWORD *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFF8);
  return a1;
}

_QWORD *sub_DA890(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;

  v6 = a2[1];
  v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = (_QWORD *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
  v9 = (_QWORD *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v8 = *v9;
  v10 = v8[1];
  v8[1] = v9[1];
  swift_bridgeObjectRelease(v10);
  v11 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v12 = *(unsigned __int8 *)(v11 + 80);
  v13 = ((unint64_t)v8 + v12 + 16) & ~v12;
  v14 = ((unint64_t)v9 + v12 + 16) & ~v12;
  (*(void (**)(uint64_t, uint64_t))(v11 + 40))(v13, v14);
  v15 = *(_QWORD *)(v11 + 64) + 7;
  v16 = (_QWORD *)((v15 + v13) & 0xFFFFFFFFFFFFFFF8);
  v17 = (_QWORD *)((v15 + v14) & 0xFFFFFFFFFFFFFFF8);
  *v16 = *v17;
  v18 = (_QWORD *)(((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFF8);
  v19 = (_QWORD *)(((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v18 = *v19;
  *(_QWORD *)(((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_DA970(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  if (v6 >= a2)
  {
    if ((v5 & 0x80000000) != 0)
    {
      return (*(uint64_t (**)(unint64_t))(v4 + 48))((((a1 + 23) & 0xFFFFFFFFFFFFFFF8) + v7 + 16) & ~v7);
    }
    else
    {
      v12 = *(_QWORD *)(a1 + 8);
      if (v12 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      return (v12 + 1);
    }
  }
  else
  {
    if (((((((((*(_QWORD *)(v4 + 64) + ((v7 + 32) & ~v7) + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
         + 8) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_DAA0C + 4 * byte_1EAA50[v10]))();
  }
}

void sub_DAA94(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  int v10;
  unsigned int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = *(unsigned __int8 *)(v5 + 80);
  if (v6 >= a3)
  {
    v10 = 0;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((((((*(_DWORD *)(v5 + 64) + (((_DWORD)v7 + 32) & ~(_DWORD)v7) + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v8 = a3 - v6 + 1;
    else
      v8 = 2;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X13 }
  }
  if (((((((*(_DWORD *)(v5 + 64) + (((_DWORD)v7 + 32) & ~(_DWORD)v7) + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    v11 = ~v6 + a2;
    bzero(a1, ((((((*(_QWORD *)(v5 + 64) + ((v7 + 32) & ~v7) + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)+ 8);
    *a1 = v11;
  }
  __asm { BR              X10 }
}

void sub_DABAC()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0xDAC20);
}

void sub_DABB4(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0xDABBCLL);
  JUMPOUT(0xDAC20);
}

void sub_DABD0()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0xDAC20);
}

void sub_DABD8()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0xDAC20);
}

void sub_DABE0(uint64_t a1, int a2, int a3)
{
  uint64_t v3;
  uint64_t v4;

  *(_WORD *)(v3 + v4) = 0;
  if (a2)
  {
    if (a3 < 0)
      JUMPOUT(0xDABECLL);
    if (a2 < 0)
      JUMPOUT(0xDAC18);
    *(_QWORD *)(v3 + 8) = (a2 - 1);
  }
  JUMPOUT(0xDAC20);
}

uint64_t type metadata accessor for ReadingInsightsView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10E40(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ReadingInsightsView);
}

uint64_t sub_DAC44(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  return swift_getOpaqueTypeConformance2(&v3, &unk_22D4DC, 1);
}

uint64_t sub_DAC78(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t TupleTypeMetadata;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  __int128 *v12;
  _OWORD *v13;
  unint64_t v14;
  __int128 v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;

  v4 = a1;
  v5 = (uint64_t *)(a3 & 0xFFFFFFFFFFFFFFFELL);
  if (a2 == 1)
  {
    TupleTypeMetadata = *v5;
    __chkstk_darwin(a1);
    v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
LABEL_12:
    v22 = 32;
    v23 = a2;
    do
    {
      if (a2 == 1)
        v24 = 0;
      else
        v24 = *(_DWORD *)(TupleTypeMetadata + v22);
      v26 = *v5++;
      v25 = v26;
      v27 = *v4++;
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v25 - 8) + 16))(&v8[v24], v27);
      v22 += 16;
      --v23;
    }
    while (v23);
    return TupleView.init(_:)(v8, TupleTypeMetadata);
  }
  __chkstk_darwin(a1);
  v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    v11 = 0;
    if (a2 < 4)
      goto LABEL_9;
    if ((unint64_t)(v10 - (char *)v5) < 0x20)
      goto LABEL_9;
    v11 = a2 & 0xFFFFFFFFFFFFFFFCLL;
    v12 = (__int128 *)(v5 + 2);
    v13 = v10 + 16;
    v14 = a2 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v15 = *v12;
      *(v13 - 1) = *(v12 - 1);
      *v13 = v15;
      v12 += 2;
      v13 += 2;
      v14 -= 4;
    }
    while (v14);
    if (v11 != a2)
    {
LABEL_9:
      v16 = a2 - v11;
      v17 = v11;
      v18 = &v10[8 * v11];
      v19 = &v5[v17];
      do
      {
        v20 = *v19++;
        *(_QWORD *)v18 = v20;
        v18 += 8;
        --v16;
      }
      while (v16);
    }
  }
  TupleTypeMetadata = swift_getTupleTypeMetadata(0, a2);
  __chkstk_darwin(TupleTypeMetadata);
  v8 = (char *)&v29 - v21;
  if (a2)
    goto LABEL_12;
  return TupleView.init(_:)(v8, TupleTypeMetadata);
}

double sub_DAE2C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t TupleTypeMetadata2;
  uint64_t v12;
  uint64_t WitnessTable;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double result;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;

  v4 = *(_QWORD *)(a1 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  __chkstk_darwin(a1);
  v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v4 + 16))(v6);
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = (v7 + 32) & ~v7;
  v9 = swift_allocObject(&unk_2518F8, v8 + v5, v7 | 7);
  v27 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v9 + 16) = v27;
  (*(void (**)(uint64_t, char *, uint64_t))(v4 + 32))(v9 + v8, v6, a1);
  v10 = sub_7EF8(&qword_2648C8);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v10, v27, 0, 0);
  v12 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v12);
  v14 = type metadata accessor for VStack(255, v12, WitnessTable);
  v15 = type metadata accessor for ModifiedContent(255, v14, &type metadata for _PaddingLayout);
  v16 = sub_7EF8(&qword_25EE58);
  v17 = type metadata accessor for ModifiedContent(0, v15, v16);
  v32 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v14);
  v33 = &protocol witness table for _PaddingLayout;
  v18 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v15);
  v19 = sub_64664();
  v30 = v18;
  v31 = v19;
  v20 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v17);
  v21 = GeometryReader.init(content:)(sub_DBA3C, v9, v17, v20);
  v23 = v22;
  v28 = v21;
  v29 = v22;
  v24 = type metadata accessor for GeometryReader(0, v17, v20);
  swift_getWitnessTable(&protocol conformance descriptor for GeometryReader<A>, v24);
  sub_10F80((uint64_t)&v28, v24, (uint64_t)&v34);
  swift_release(v23);
  v25 = v35;
  v28 = v34;
  v29 = v35;
  sub_C5C0((uint64_t)&v28, v24, a2);
  *(_QWORD *)&result = swift_release(v25).n128_u64[0];
  return result;
}

uint64_t sub_DB058@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t TupleTypeMetadata2;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t KeyPath;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  __n128 v41;
  unint64_t v42;
  uint64_t v43;
  void (*v44)(char *, uint64_t);
  uint64_t WitnessTable;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58[16];
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  void *v66;

  v47 = a2;
  v49 = a1;
  v57 = a5;
  v7 = type metadata accessor for ColorScheme(0);
  v55 = *(_QWORD *)(v7 - 8);
  v56 = v7;
  __chkstk_darwin(v7);
  v54 = (char *)&WitnessTable - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_7EF8(&qword_2648C8);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v9, a3, 0, 0);
  v11 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v11);
  v12 = type metadata accessor for VStack(0, v11, WitnessTable);
  v50 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v14 = (char *)&WitnessTable - v13;
  v15 = type metadata accessor for ModifiedContent(0, v12, &type metadata for _PaddingLayout);
  v53 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v48 = (char *)&WitnessTable - v16;
  v17 = sub_7EF8(&qword_25EE58);
  v18 = type metadata accessor for ModifiedContent(0, v15, v17);
  v52 = *(_QWORD *)(v18 - 8);
  v19 = __chkstk_darwin(v18);
  v21 = (char *)&WitnessTable - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __chkstk_darwin(v19);
  v51 = (uint64_t)&WitnessTable - v23;
  v24 = static HorizontalAlignment.leading.getter(v22);
  v26 = type metadata accessor for ReadingInsightsView(0, a3, a4, v25);
  v27 = *(_QWORD *)(v47 + *(int *)(v26 + 52));
  v59 = a3;
  v60 = a4;
  v28 = v47;
  v61 = v47;
  v62 = v49;
  v29 = VStack.init(alignment:spacing:content:)(v24, v27, 0, sub_DBAA4, v58, v11, WitnessTable);
  v30 = static Edge.Set.top.getter(v29);
  v31 = Edge.Set.init(rawValue:)(0);
  v32 = Edge.Set.init(rawValue:)(v31);
  if (Edge.Set.init(rawValue:)(v32 & v30) != v30)
    v31 = Edge.Set.init(rawValue:)(v31 | v30);
  v33 = *(_QWORD *)(v28 + *(int *)(v26 + 48));
  v34 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v12);
  v35 = v48;
  View.padding(_:_:)(v31, v33, 0, v12, v34);
  (*(void (**)(char *, uint64_t))(v50 + 8))(v14, v12);
  KeyPath = swift_getKeyPath(&unk_1EAB08);
  v38 = v54;
  v37 = v55;
  v39 = v56;
  (*(void (**)(char *, _QWORD, uint64_t))(v55 + 104))(v54, enum case for ColorScheme.dark(_:), v56);
  v65 = v34;
  v66 = &protocol witness table for _PaddingLayout;
  v40 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v15);
  View.environment<A>(_:_:)(KeyPath, v38, v15, v40);
  v41 = swift_release(KeyPath);
  (*(void (**)(char *, uint64_t, __n128))(v37 + 8))(v38, v39, v41);
  (*(void (**)(char *, uint64_t))(v53 + 8))(v35, v15);
  v42 = sub_64664();
  v63 = v40;
  v64 = v42;
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v18);
  v43 = v51;
  sub_10F80((uint64_t)v21, v18, v51);
  v44 = *(void (**)(char *, uint64_t))(v52 + 8);
  v44(v21, v18);
  sub_C5C0(v43, v18, v57);
  return ((uint64_t (*)(uint64_t, uint64_t))v44)(v43, v18);
}

uint64_t sub_DB428@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  double v42;
  double v43;
  uint64_t v44;
  uint64_t v45;
  double v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void (*v59)(uint64_t, uint64_t);
  char v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  unint64_t v76;
  uint64_t v77;
  _QWORD v78[2];
  uint64_t v79[2];
  _OWORD v80[7];

  v67 = a4;
  v68 = a2;
  v73 = a5;
  v74 = *(_QWORD *)(a3 - 8);
  v7 = __chkstk_darwin(a1);
  v75 = (char *)&v63 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v72 = (uint64_t)&v63 - v9;
  v10 = sub_5440(&qword_25FE08);
  __chkstk_darwin(v10);
  v12 = (char *)&v63 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (int *)type metadata accessor for TextLockup(0);
  __chkstk_darwin(v13);
  v15 = (uint64_t *)((char *)&v63 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v69 = sub_5440(&qword_2648C8);
  v16 = __chkstk_darwin(v69);
  v71 = (uint64_t)&v63 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v16);
  v20 = (char *)&v63 - v19;
  __chkstk_darwin(v18);
  v70 = (uint64_t)&v63 - v21;
  v22 = a1[1];
  v65 = *a1;
  v23 = a1[3];
  v66 = a1[2];
  v24 = type metadata accessor for Font.Design(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v12, 1, 1, v24);
  swift_bridgeObjectRetain(v23);
  v25 = swift_bridgeObjectRetain(v22);
  v64 = static HorizontalAlignment.leading.getter(v25);
  v63 = static Alignment.leading.getter(v64);
  v27 = v26;
  *v15 = swift_getKeyPath(&unk_1EAB38);
  v28 = sub_5440(&qword_25F1E8);
  swift_storeEnumTagMultiPayload(v15, v28, 0);
  v29 = (_QWORD *)((char *)v15 + v13[5]);
  *v29 = swift_getKeyPath(&unk_1EAB60);
  v30 = sub_5440(&qword_25F208);
  swift_storeEnumTagMultiPayload(v29, v30, 0);
  v31 = (char *)v15 + v13[6];
  *(_QWORD *)v31 = swift_getKeyPath(&unk_1EAB88);
  v31[8] = 0;
  v32 = (char *)v15 + v13[7];
  *(_QWORD *)v32 = swift_getKeyPath(&unk_1EABB0);
  v32[8] = 0;
  v33 = (char *)v15 + v13[8];
  *(_QWORD *)v33 = swift_getKeyPath(&unk_1EABD8);
  v33[8] = 0;
  v34 = (char *)v15 + v13[9];
  *(_QWORD *)v34 = swift_getKeyPath(&unk_1EAC08);
  v34[8] = 0;
  *((_BYTE *)v15 + v13[10]) = 4;
  v35 = (_QWORD *)((char *)v15 + v13[11]);
  *v35 = 0;
  v35[1] = 0;
  v36 = (_QWORD *)((char *)v15 + v13[12]);
  *v36 = v65;
  v36[1] = v22;
  v36[2] = 0;
  v37 = (_QWORD *)((char *)v15 + v13[13]);
  *v37 = v66;
  v37[1] = v23;
  v38 = (uint64_t)v12;
  v39 = v67;
  v40 = sub_167A4(v38, (uint64_t)v15 + v13[14], &qword_25FE08);
  *(_QWORD *)((char *)v15 + v13[15]) = v64;
  v41 = (_QWORD *)((char *)v15 + v13[16]);
  *v41 = v63;
  v41[1] = v27;
  *((_BYTE *)v15 + v13[17]) = 0;
  GeometryProxy.size.getter(v40);
  v43 = v42;
  v45 = type metadata accessor for ReadingInsightsView(0, a3, v39, v44);
  v46 = v43 * *(double *)((char *)a1 + *(int *)(v45 + 44));
  v47 = _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0();
  v62 = 1;
  v61 = 1;
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v80, 0, 1, 0, 1, 0, 1, *(_QWORD *)&v46, 0, 0, v61, 0, v62, v47, v48);
  sub_DBAD8((uint64_t)v15, (uint64_t)v20);
  v49 = v69;
  v50 = &v20[*(int *)(v69 + 36)];
  v51 = v80[5];
  *((_OWORD *)v50 + 4) = v80[4];
  *((_OWORD *)v50 + 5) = v51;
  *((_OWORD *)v50 + 6) = v80[6];
  v52 = v80[1];
  *(_OWORD *)v50 = v80[0];
  *((_OWORD *)v50 + 1) = v52;
  v53 = v80[3];
  *((_OWORD *)v50 + 2) = v80[2];
  *((_OWORD *)v50 + 3) = v53;
  sub_DBB1C((uint64_t)v15);
  v54 = v70;
  sub_167A4((uint64_t)v20, v70, &qword_2648C8);
  v55 = v72;
  sub_10F80((uint64_t)a1 + *(int *)(v45 + 40), a3, v72);
  v56 = v71;
  sub_DBB58(v54, v71);
  v79[0] = v56;
  v57 = v74;
  v58 = (uint64_t)v75;
  (*(void (**)(char *, uint64_t, uint64_t))(v74 + 16))(v75, v55, a3);
  v79[1] = v58;
  v78[0] = v49;
  v78[1] = a3;
  v76 = sub_DBBA0();
  v77 = v39;
  sub_DAC78(v79, 2uLL, (uint64_t)v78);
  v59 = *(void (**)(uint64_t, uint64_t))(v57 + 8);
  v59(v55, a3);
  sub_DBC54(v54);
  v59(v58, a3);
  return sub_DBC54(v56);
}

uint64_t sub_DB9AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = type metadata accessor for ReadingInsightsView(0, v5, *(_QWORD *)(v4 + 24), a4);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v8 + 32) & ~v8;
  v10 = v9 + *(_QWORD *)(v7 + 64);
  v11 = v8 | 7;
  v12 = v4 + v9;
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + v9 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v12 + 24));
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v12 + *(int *)(v6 + 40), v5);
  return swift_deallocObject(v4, v10, v11);
}

uint64_t sub_DBA3C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = *(_QWORD *)(v3 + 16);
  v7 = *(_QWORD *)(v3 + 24);
  v8 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ReadingInsightsView(0, v6, v7, a2) - 8) + 80);
  return sub_DB058(a1, v3 + ((v8 + 32) & ~v8), v6, v7, a3);
}

uint64_t sub_DBAA4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_DB428(*(uint64_t **)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_DBAD8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TextLockup(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_DBB1C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for TextLockup(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_DBB58(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_5440(&qword_2648C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_DBBA0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2648D0;
  if (!qword_2648D0)
  {
    v1 = sub_7EF8(&qword_2648C8);
    sub_DBC0C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_2648D0);
  }
  return result;
}

unint64_t sub_DBC0C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_262EE8;
  if (!qword_262EE8)
  {
    v1 = type metadata accessor for TextLockup(255);
    result = swift_getWitnessTable(&unk_1F26B8, v1);
    atomic_store(result, (unint64_t *)&qword_262EE8);
  }
  return result;
}

uint64_t sub_DBC54(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_5440(&qword_2648C8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_DBC94(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t TupleTypeMetadata2;
  uint64_t v4;
  uint64_t WitnessTable;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = *a1;
  v2 = sub_7EF8(&qword_2648C8);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v2, v1, 0, 0);
  v4 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v4);
  v6 = type metadata accessor for VStack(255, v4, WitnessTable);
  v7 = type metadata accessor for ModifiedContent(255, v6, &type metadata for _PaddingLayout);
  v8 = sub_7EF8(&qword_25EE58);
  v9 = type metadata accessor for ModifiedContent(255, v7, v8);
  swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v6);
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v7);
  sub_64664();
  v10 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v9);
  v11 = type metadata accessor for GeometryReader(255, v9, v10);
  return swift_getWitnessTable(&protocol conformance descriptor for GeometryReader<A>, v11);
}

uint64_t dispatch thunk of HighlightAttributionViewProviding.createHighlightAttributionView(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 24))();
}

uint64_t _CodeAnyComponentModel_OrNil.init(wrappedValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  return sub_DBDDC(a1, a2);
}

uint64_t sub_DBDDC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_5440(&qword_2648D8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t _CodeAnyComponentModel_OrNil.wrappedValue.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_DBE30(v1, a1);
}

uint64_t sub_DBE30(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_5440(&qword_2648D8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t _CodeAnyComponentModel_OrNil.wrappedValue.setter(uint64_t a1)
{
  uint64_t v1;

  return sub_DBDDC(a1, v1);
}

uint64_t _CodeAnyComponentModel_OrNil.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v4;
  uint64_t v5;
  _QWORD v6[5];

  sub_DBE30(v0, (uint64_t)&v4);
  if (v5)
  {
    sub_AC68(&v4, (uint64_t)v6);
    *(_QWORD *)&v4 = 0;
    *((_QWORD *)&v4 + 1) = 0xE000000000000000;
    v1 = sub_5440(&qword_25ED60);
    _print_unlocked<A, B>(_:_:)(v6, &v4, v1, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    v2 = v4;
    _s7BooksUI13AnyPagedFrameVwxx_0(v6);
  }
  else
  {
    sub_B414((uint64_t)&v4, &qword_2648D8);
    return 7104878;
  }
  return v2;
}

_QWORD *_CodeAnyComponentModel_OrNil.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  unint64_t v5;
  _BYTE v7[40];
  _QWORD v8[5];
  _OWORD v9[2];
  uint64_t v10;

  *(_QWORD *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  sub_BD00((uint64_t)a1, (uint64_t)v7);
  v5 = sub_5DF14();
  Optional<A>.init(from:)(v8, v7, &type metadata for CodeAnyComponentModel, v5);
  _s7BooksUI13AnyPagedFrameVwxx_0(a1);
  if (v2)
    return sub_302AC((_QWORD *)a2);
  if (v8[3])
  {
    sub_BD00((uint64_t)v8, (uint64_t)v9);
    sub_5E280(v8);
  }
  else
  {
    sub_B414((uint64_t)v8, &qword_2648E0);
    memset(v9, 0, sizeof(v9));
    v10 = 0;
  }
  return (_QWORD *)sub_DBDDC((uint64_t)v9, a2);
}

uint64_t _CodeAnyComponentModel_OrNil.init(_partiallyFrom:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  _QWORD v6[5];
  _OWORD v7[2];
  uint64_t v8;

  *(_QWORD *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  sub_BD00((uint64_t)a1, (uint64_t)v7);
  v4 = sub_5DF14();
  Optional<A>.init(_partiallyFrom:)(v6, v7, &type metadata for CodeAnyComponentModel, v4);
  _s7BooksUI13AnyPagedFrameVwxx_0(a1);
  if (v6[3])
  {
    sub_BD00((uint64_t)v6, (uint64_t)v7);
    sub_5E280(v6);
  }
  else
  {
    sub_B414((uint64_t)v6, &qword_2648E0);
    memset(v7, 0, sizeof(v7));
    v8 = 0;
  }
  return sub_DBDDC((uint64_t)v7, a2);
}

_QWORD *sub_DC0A4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return _CodeAnyComponentModel_OrNil.init(from:)(a1, a2);
}

ValueMetadata *type metadata accessor for _CodeAnyComponentModel_OrNil()
{
  return &type metadata for _CodeAnyComponentModel_OrNil;
}

void sub_DC0CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (qword_25DC50 != -1)
    swift_once(&qword_25DC50, sub_DCAF8);
  v0 = qword_264978;
  v1 = qword_25DC40;
  swift_bridgeObjectRetain(qword_264978);
  if (v1 != -1)
    swift_once(&qword_25DC40, sub_DC994);
  v2 = qword_264968;
  v3 = qword_264968;
  swift_bridgeObjectRetain_n(qword_264968, 3);
  sub_DCB64(&v3);
  swift_bridgeObjectRelease_n(v2, 2);
  qword_2648E8 = v0;
  unk_2648F0 = v3;
  qword_2648F8 = 0;
  unk_264900 = 0;
}

uint64_t static ShelfGridType.c.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (qword_25DC20 != -1)
    swift_once(&qword_25DC20, sub_DC0CC);
  v2 = qword_2648E8;
  v3 = unk_2648F0;
  v4 = qword_2648F8;
  v5 = unk_264900;
  *a1 = qword_2648E8;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  return sub_5802C(v4, v5);
}

void sub_DC220()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (qword_25DC58 != -1)
    swift_once(&qword_25DC58, sub_DCB1C);
  v0 = qword_264980;
  v1 = qword_25DC40;
  swift_bridgeObjectRetain(qword_264980);
  if (v1 != -1)
    swift_once(&qword_25DC40, sub_DC994);
  v2 = qword_264968;
  v3 = qword_264968;
  swift_bridgeObjectRetain_n(qword_264968, 3);
  sub_DCB64(&v3);
  swift_bridgeObjectRelease_n(v2, 2);
  qword_264908 = v0;
  unk_264910 = v3;
  qword_264918 = 0;
  unk_264920 = 0;
}

uint64_t static ShelfGridType.d.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (qword_25DC28 != -1)
    swift_once(&qword_25DC28, sub_DC220);
  v2 = qword_264908;
  v3 = unk_264910;
  v4 = qword_264918;
  v5 = unk_264920;
  *a1 = qword_264908;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  return sub_5802C(v4, v5);
}

uint64_t sub_DC374()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;

  if (qword_25DC60 != -1)
    swift_once(&qword_25DC60, sub_DCB40);
  v0 = qword_264988;
  v1 = qword_25DC48;
  swift_bridgeObjectRetain(qword_264988);
  if (v1 != -1)
    swift_once(&qword_25DC48, sub_DCA3C);
  v2 = qword_264970;
  v3 = qword_25DC58;
  swift_bridgeObjectRetain(qword_264970);
  if (v3 != -1)
    swift_once(&qword_25DC58, sub_DCB1C);
  v4 = qword_264980;
  v5 = qword_25DC40;
  swift_bridgeObjectRetain(qword_264980);
  if (v5 != -1)
    swift_once(&qword_25DC40, sub_DC994);
  v6 = qword_264968;
  v9 = v2;
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v6);
  sub_DCB64(&v9);
  swift_bridgeObjectRelease(v2);
  v7 = v9;
  v9 = v6;
  swift_bridgeObjectRetain(v6);
  sub_DCB64(&v9);
  result = swift_bridgeObjectRelease(v6);
  qword_264928 = v0;
  unk_264930 = v7;
  qword_264938 = v4;
  unk_264940 = v9;
  return result;
}

uint64_t static ShelfGridType.e.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (qword_25DC30 != -1)
    swift_once(&qword_25DC30, sub_DC374);
  v2 = qword_264928;
  v3 = unk_264930;
  v4 = qword_264938;
  v5 = unk_264940;
  *a1 = qword_264928;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  return sub_5802C(v4, v5);
}

void sub_DC564()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = sub_B238((uint64_t)_swiftEmptyArrayStorage);
  if (qword_25DC40 != -1)
    swift_once(&qword_25DC40, sub_DC994);
  v1 = qword_264968;
  v2 = qword_264968;
  swift_bridgeObjectRetain_n(qword_264968, 3);
  sub_DCB64(&v2);
  swift_bridgeObjectRelease_n(v1, 2);
  qword_264948 = v0;
  unk_264950 = v2;
  qword_264958 = 0;
  unk_264960 = 0;
}

uint64_t static ShelfGridType.vertical.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (qword_25DC38 != -1)
    swift_once(&qword_25DC38, sub_DC564);
  v2 = qword_264948;
  v3 = unk_264950;
  v4 = qword_264958;
  v5 = unk_264960;
  *a1 = qword_264948;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  return sub_5802C(v4, v5);
}

uint64_t destroy for ShelfGridType(_QWORD *a1)
{
  uint64_t result;

  swift_bridgeObjectRelease(*a1);
  swift_bridgeObjectRelease(a1[1]);
  result = a1[2];
  if (result)
  {
    swift_bridgeObjectRelease(result);
    return swift_bridgeObjectRelease(a1[3]);
  }
  return result;
}

_QWORD *initializeWithCopy for ShelfGridType(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  uint64_t v8;

  v4 = *a2;
  v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  v7 = a2 + 2;
  v6 = a2[2];
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  if (v6)
  {
    v8 = a2[3];
    a1[2] = v6;
    a1[3] = v8;
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v8);
  }
  else
  {
    *((_OWORD *)a1 + 1) = *v7;
  }
  return a1;
}

_QWORD *assignWithCopy for ShelfGridType(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = a1[2];
  v9 = a2[2];
  if (!v8)
  {
    if (v9)
    {
      a1[2] = v9;
      v12 = a2[3];
      a1[3] = v12;
      swift_bridgeObjectRetain(v9);
      swift_bridgeObjectRetain(v12);
      return a1;
    }
LABEL_7:
    *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
    return a1;
  }
  if (!v9)
  {
    sub_DC82C((uint64_t)(a1 + 2));
    goto LABEL_7;
  }
  a1[2] = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease(v8);
  v10 = a2[3];
  v11 = a1[3];
  a1[3] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  return a1;
}

uint64_t sub_DC82C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_5440(&qword_260E38);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

_QWORD *assignWithTake for ShelfGridType(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v4);
  v5 = a1[1];
  a1[1] = a2[1];
  swift_bridgeObjectRelease(v5);
  v6 = a1[2];
  v7 = a2[2];
  if (!v6)
    goto LABEL_5;
  if (!v7)
  {
    sub_DC82C((uint64_t)(a1 + 2));
LABEL_5:
    *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
    return a1;
  }
  a1[2] = v7;
  swift_bridgeObjectRelease(v6);
  v8 = a1[3];
  a1[3] = a2[3];
  swift_bridgeObjectRelease(v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for ShelfGridType(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ShelfGridType(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ShelfGridType()
{
  return &type metadata for ShelfGridType;
}

double sub_DC994()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  v0 = sub_5440(&qword_25ED80);
  v1 = swift_allocObject(v0, 128, 7);
  *(_QWORD *)&result = 6;
  *(_OWORD *)(v1 + 16) = xmmword_1EAD00;
  *(_BYTE *)(v1 + 32) = 0;
  *(_QWORD *)(v1 + 40) = 0x4074000000000000;
  *(_BYTE *)(v1 + 48) = 1;
  *(_QWORD *)(v1 + 56) = 0x407C200000000000;
  *(_BYTE *)(v1 + 64) = 3;
  *(_QWORD *)(v1 + 72) = 0x4089000000000000;
  *(_BYTE *)(v1 + 80) = 4;
  *(_QWORD *)(v1 + 88) = 0x408F400000000000;
  *(_BYTE *)(v1 + 96) = 5;
  *(_QWORD *)(v1 + 104) = 0x4092C00000000000;
  *(_BYTE *)(v1 + 112) = 6;
  *(_QWORD *)(v1 + 120) = 0x4095E00000000000;
  qword_264968 = v1;
  return result;
}

double sub_DCA3C()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  v0 = sub_5440(&qword_25ED80);
  v1 = swift_allocObject(v0, 144, 7);
  *(_QWORD *)&result = 7;
  *(_OWORD *)(v1 + 16) = xmmword_1E2070;
  *(_BYTE *)(v1 + 32) = 0;
  *(_QWORD *)(v1 + 40) = 0x4074000000000000;
  *(_BYTE *)(v1 + 48) = 1;
  *(_QWORD *)(v1 + 56) = 0x407C200000000000;
  *(_BYTE *)(v1 + 64) = 2;
  *(_QWORD *)(v1 + 72) = 0x4085E00000000000;
  *(_BYTE *)(v1 + 80) = 3;
  *(_QWORD *)(v1 + 88) = 0x4089000000000000;
  *(_BYTE *)(v1 + 96) = 4;
  *(_QWORD *)(v1 + 104) = 0x408F400000000000;
  *(_BYTE *)(v1 + 112) = 5;
  *(_QWORD *)(v1 + 120) = 0x4092C00000000000;
  *(_BYTE *)(v1 + 128) = 6;
  *(_QWORD *)(v1 + 136) = 0x4095E00000000000;
  qword_264970 = v1;
  return result;
}

unint64_t sub_DCAF8()
{
  unint64_t result;

  result = sub_B238((uint64_t)&off_249D80);
  qword_264978 = result;
  return result;
}

unint64_t sub_DCB1C()
{
  unint64_t result;

  result = sub_B238((uint64_t)&off_249E00);
  qword_264980 = result;
  return result;
}

unint64_t sub_DCB40()
{
  unint64_t result;

  result = sub_B238((uint64_t)&off_249E80);
  qword_264988 = result;
  return result;
}

Swift::Int sub_DCB64(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  Swift::Int result;
  uint64_t v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
    v2 = sub_DD6E8(v2);
  v3 = *(_QWORD *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  result = sub_DCBCC(v5);
  *a1 = v2;
  return result;
}

Swift::Int sub_DCBCC(uint64_t *a1)
{
  uint64_t v1;
  Swift::Int v3;
  Swift::Int result;
  uint64_t v5;
  Swift::Int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  Swift::Int v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  Swift::Int v15;
  double v16;
  double v17;
  double *v18;
  double v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  Swift::Int v23;
  Swift::Int v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  Swift::Int v28;
  double *v29;
  double v30;
  Swift::Int v31;
  double *v32;
  char v33;
  unint64_t v34;
  unint64_t v35;
  char *v36;
  char *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  BOOL v49;
  unint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  BOOL v59;
  uint64_t v60;
  char v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  BOOL v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  unint64_t v83;
  char *v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  double v91;
  uint64_t v92;
  uint64_t v93;
  char v94;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  unint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  _QWORD *v104;
  Swift::Int v105;
  Swift::Int v106;
  uint64_t v107;
  double *__dst;

  v3 = a1[1];
  result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if ((v3 & 0x8000000000000000) == 0)
    {
      if ((unint64_t)v3 < 2)
        return result;
      v87 = *a1;
      v88 = *a1 + 8;
      v89 = -1;
      v90 = 1;
      while (1)
      {
        v91 = *(double *)(v87 + 16 * v90 + 8);
        v92 = v89;
        v93 = v88;
        do
        {
          if (v91 >= *(double *)v93)
            break;
          if (!v87)
            goto LABEL_143;
          v94 = *(_BYTE *)(v93 + 8);
          *(_OWORD *)(v93 + 8) = *(_OWORD *)(v93 - 8);
          *(_BYTE *)(v93 - 8) = v94;
          *(double *)v93 = v91;
          v93 -= 16;
        }
        while (!__CFADD__(v92++, 1));
        ++v90;
        v88 += 16;
        --v89;
        if (v90 == v3)
          return result;
      }
    }
    goto LABEL_139;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
  {
LABEL_148:
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
    __break(1u);
    return result;
  }
  v6 = result;
  v102 = a1;
  if (v3 < 2)
  {
    v10 = _swiftEmptyArrayStorage;
    __dst = (double *)&_swiftEmptyArrayStorage[4];
    if (v3 != 1)
    {
      v14 = _swiftEmptyArrayStorage[2];
      v13 = (char *)_swiftEmptyArrayStorage;
      goto LABEL_105;
    }
    v104 = _swiftEmptyArrayStorage;
  }
  else
  {
    v7 = v5 >> 1;
    v8 = sub_5440(&qword_264990);
    v9 = static Array._allocateBufferUninitialized(minimumCapacity:)(v7, v8);
    *(_QWORD *)(v9 + 16) = v7;
    v104 = (_QWORD *)v9;
    __dst = (double *)(v9 + 32);
  }
  v11 = 0;
  v12 = *a1;
  v103 = *a1 + 40;
  v13 = (char *)_swiftEmptyArrayStorage;
  v105 = v6;
  v106 = v3;
  v107 = v12;
  while (1)
  {
    v15 = v11++;
    if (v11 < v3)
    {
      v16 = *(double *)(v12 + 16 * v11 + 8);
      v17 = *(double *)(v12 + 16 * v15 + 8);
      v11 = v15 + 2;
      if (v15 + 2 < v3)
      {
        v18 = (double *)(v103 + 16 * v15);
        v19 = v16;
        while (1)
        {
          v20 = v19;
          v19 = *v18;
          if (v16 < v17 == *v18 >= v20)
            break;
          ++v11;
          v18 += 2;
          if (v3 == v11)
          {
            v11 = v3;
            break;
          }
        }
      }
      if (v16 < v17)
      {
        if (v11 < v15)
          goto LABEL_140;
        if (v15 < v11)
        {
          v21 = 16 * v11;
          v22 = 16 * v15;
          v23 = v11;
          v24 = v15;
          do
          {
            if (v24 != --v23)
            {
              if (!v12)
                goto LABEL_146;
              v25 = v12 + v21;
              v26 = *(_BYTE *)(v12 + v22);
              v27 = *(_QWORD *)(v12 + v22 + 8);
              *(_OWORD *)(v12 + v22) = *(_OWORD *)(v12 + v21 - 16);
              *(_BYTE *)(v25 - 16) = v26;
              *(_QWORD *)(v25 - 8) = v27;
            }
            ++v24;
            v21 -= 16;
            v22 += 16;
          }
          while (v24 < v23);
        }
      }
    }
    if (v11 < v3)
    {
      if (__OFSUB__(v11, v15))
        goto LABEL_138;
      if (v11 - v15 < v6)
      {
        v28 = v15 + v6;
        if (__OFADD__(v15, v6))
          goto LABEL_141;
        if (v28 >= v3)
          v28 = v3;
        if (v28 < v15)
          goto LABEL_142;
        if (v11 != v28)
        {
          v29 = (double *)(v12 + 16 * v11);
          do
          {
            v30 = *(double *)(v12 + 16 * v11 + 8);
            v31 = v15;
            v32 = v29;
            do
            {
              if (v30 >= *(v32 - 1))
                break;
              if (!v12)
                goto LABEL_144;
              v33 = *(_BYTE *)v32;
              *(_OWORD *)v32 = *((_OWORD *)v32 - 1);
              *(v32 - 1) = v30;
              *((_BYTE *)v32 - 16) = v33;
              v32 -= 2;
              ++v31;
            }
            while (v11 != v31);
            ++v11;
            v29 += 2;
          }
          while (v11 != v28);
          v11 = v28;
        }
      }
    }
    if (v11 < v15)
    {
LABEL_133:
      __break(1u);
      goto LABEL_134;
    }
    if ((swift_isUniquelyReferenced_nonNull_native(v13) & 1) == 0)
      v13 = sub_DD534(0, *((_QWORD *)v13 + 2) + 1, 1, v13);
    v35 = *((_QWORD *)v13 + 2);
    v34 = *((_QWORD *)v13 + 3);
    v14 = v35 + 1;
    v12 = v107;
    if (v35 >= v34 >> 1)
    {
      v84 = sub_DD534((char *)(v34 > 1), v35 + 1, 1, v13);
      v12 = v107;
      v13 = v84;
    }
    *((_QWORD *)v13 + 2) = v14;
    v36 = v13 + 32;
    v37 = &v13[16 * v35 + 32];
    *(_QWORD *)v37 = v15;
    *((_QWORD *)v37 + 1) = v11;
    if (v35)
      break;
    v14 = 1;
LABEL_15:
    v6 = v105;
    v3 = v106;
    if (v11 >= v106)
    {
      v10 = v104;
LABEL_105:
      v86 = v13;
      v104 = v10;
      if (v14 < 2)
        goto LABEL_95;
      v96 = *v102;
      while (1)
      {
        v97 = v14 - 2;
        if (v14 < 2)
          break;
        if (!v96)
          goto LABEL_147;
        v85 = v86;
        v98 = *(_QWORD *)&v86[16 * v97 + 32];
        v99 = *(_QWORD *)&v86[16 * v14 + 24];
        sub_DD2AC((double *)(v96 + 16 * v98), (double *)(v96 + 16 * *(_QWORD *)&v86[16 * v14 + 16]), v96 + 16 * v99, __dst);
        if (v1)
          goto LABEL_94;
        if (v99 < v98)
          goto LABEL_135;
        if ((swift_isUniquelyReferenced_nonNull_native(v85) & 1) == 0)
          v85 = sub_DD6D4((uint64_t)v85);
        if (v97 >= *((_QWORD *)v85 + 2))
          goto LABEL_136;
        v100 = &v85[16 * v97 + 32];
        *(_QWORD *)v100 = v98;
        *((_QWORD *)v100 + 1) = v99;
        v101 = *((_QWORD *)v85 + 2);
        if (v14 > v101)
          goto LABEL_137;
        memmove(&v85[16 * v14 + 16], &v85[16 * v14 + 32], 16 * (v101 - v14));
        v86 = v85;
        *((_QWORD *)v85 + 2) = v101 - 1;
        v14 = v101 - 1;
        if (v101 <= 2)
          goto LABEL_95;
      }
LABEL_134:
      __break(1u);
LABEL_135:
      __break(1u);
LABEL_136:
      __break(1u);
LABEL_137:
      __break(1u);
LABEL_138:
      __break(1u);
LABEL_139:
      __break(1u);
LABEL_140:
      __break(1u);
LABEL_141:
      __break(1u);
LABEL_142:
      __break(1u);
LABEL_143:
      __break(1u);
LABEL_144:
      __break(1u);
LABEL_145:
      __break(1u);
LABEL_146:
      __break(1u);
LABEL_147:
      __break(1u);
      goto LABEL_148;
    }
  }
  while (1)
  {
    v38 = v14 - 1;
    if (v14 >= 4)
    {
      v43 = &v36[16 * v14];
      v44 = *((_QWORD *)v43 - 8);
      v45 = *((_QWORD *)v43 - 7);
      v49 = __OFSUB__(v45, v44);
      v46 = v45 - v44;
      if (v49)
        goto LABEL_122;
      v48 = *((_QWORD *)v43 - 6);
      v47 = *((_QWORD *)v43 - 5);
      v49 = __OFSUB__(v47, v48);
      v41 = v47 - v48;
      v42 = v49;
      if (v49)
        goto LABEL_123;
      v50 = v14 - 2;
      v51 = &v36[16 * v14 - 32];
      v53 = *(_QWORD *)v51;
      v52 = *((_QWORD *)v51 + 1);
      v49 = __OFSUB__(v52, v53);
      v54 = v52 - v53;
      if (v49)
        goto LABEL_125;
      v49 = __OFADD__(v41, v54);
      v55 = v41 + v54;
      if (v49)
        goto LABEL_128;
      if (v55 >= v46)
      {
        v73 = &v36[16 * v38];
        v75 = *(_QWORD *)v73;
        v74 = *((_QWORD *)v73 + 1);
        v49 = __OFSUB__(v74, v75);
        v76 = v74 - v75;
        if (v49)
          goto LABEL_132;
        v66 = v41 < v76;
        goto LABEL_83;
      }
    }
    else
    {
      if (v14 != 3)
      {
        v67 = *((_QWORD *)v13 + 4);
        v68 = *((_QWORD *)v13 + 5);
        v49 = __OFSUB__(v68, v67);
        v60 = v68 - v67;
        v61 = v49;
        goto LABEL_77;
      }
      v40 = *((_QWORD *)v13 + 4);
      v39 = *((_QWORD *)v13 + 5);
      v49 = __OFSUB__(v39, v40);
      v41 = v39 - v40;
      v42 = v49;
    }
    if ((v42 & 1) != 0)
      goto LABEL_124;
    v50 = v14 - 2;
    v56 = &v36[16 * v14 - 32];
    v58 = *(_QWORD *)v56;
    v57 = *((_QWORD *)v56 + 1);
    v59 = __OFSUB__(v57, v58);
    v60 = v57 - v58;
    v61 = v59;
    if (v59)
      goto LABEL_127;
    v62 = &v36[16 * v38];
    v64 = *(_QWORD *)v62;
    v63 = *((_QWORD *)v62 + 1);
    v49 = __OFSUB__(v63, v64);
    v65 = v63 - v64;
    if (v49)
      goto LABEL_130;
    if (__OFADD__(v60, v65))
      goto LABEL_131;
    if (v60 + v65 >= v41)
    {
      v66 = v41 < v65;
LABEL_83:
      if (v66)
        v38 = v50;
      goto LABEL_85;
    }
LABEL_77:
    if ((v61 & 1) != 0)
      goto LABEL_126;
    v69 = &v36[16 * v38];
    v71 = *(_QWORD *)v69;
    v70 = *((_QWORD *)v69 + 1);
    v49 = __OFSUB__(v70, v71);
    v72 = v70 - v71;
    if (v49)
      goto LABEL_129;
    if (v72 < v60)
      goto LABEL_15;
LABEL_85:
    v77 = v38 - 1;
    if (v38 - 1 >= v14)
    {
      __break(1u);
LABEL_119:
      __break(1u);
LABEL_120:
      __break(1u);
LABEL_121:
      __break(1u);
LABEL_122:
      __break(1u);
LABEL_123:
      __break(1u);
LABEL_124:
      __break(1u);
LABEL_125:
      __break(1u);
LABEL_126:
      __break(1u);
LABEL_127:
      __break(1u);
LABEL_128:
      __break(1u);
LABEL_129:
      __break(1u);
LABEL_130:
      __break(1u);
LABEL_131:
      __break(1u);
LABEL_132:
      __break(1u);
      goto LABEL_133;
    }
    if (!v12)
      goto LABEL_145;
    v78 = v13;
    v79 = &v36[16 * v77];
    v80 = *(_QWORD *)v79;
    v81 = &v36[16 * v38];
    v82 = *((_QWORD *)v81 + 1);
    sub_DD2AC((double *)(v12 + 16 * *(_QWORD *)v79), (double *)(v12 + 16 * *(_QWORD *)v81), v12 + 16 * v82, __dst);
    if (v1)
      break;
    if (v82 < v80)
      goto LABEL_119;
    if (v38 > *((_QWORD *)v78 + 2))
      goto LABEL_120;
    *(_QWORD *)v79 = v80;
    *(_QWORD *)&v36[16 * v77 + 8] = v82;
    v83 = *((_QWORD *)v78 + 2);
    if (v38 >= v83)
      goto LABEL_121;
    v13 = v78;
    v14 = v83 - 1;
    memmove(&v36[16 * v38], v81 + 16, 16 * (v83 - 1 - v38));
    *((_QWORD *)v78 + 2) = v83 - 1;
    v12 = v107;
    if (v83 <= 2)
      goto LABEL_15;
  }
  v85 = v78;
LABEL_94:
  v86 = v85;
LABEL_95:
  swift_bridgeObjectRelease(v86);
  v104[2] = 0;
  return swift_bridgeObjectRelease(v104);
}

uint64_t sub_DD2AC(double *__src, double *a2, unint64_t a3, double *__dst)
{
  double *v4;
  double *v6;
  double *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double *v14;
  double *v15;
  double *v16;
  double *v17;
  double *v18;
  double *v19;
  double *v20;
  double *v21;
  uint64_t result;
  char *v23;
  double *v24;
  double *v25;

  v4 = __dst;
  v6 = a2;
  v7 = __src;
  v8 = (char *)a2 - (char *)__src;
  v9 = (char *)a2 - (char *)__src + 15;
  if ((char *)a2 - (char *)__src >= 0)
    v9 = (char *)a2 - (char *)__src;
  v10 = v9 >> 4;
  v11 = a3 - (_QWORD)a2;
  v12 = a3 - (_QWORD)a2 + 15;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v12 = a3 - (_QWORD)a2;
  v13 = v12 >> 4;
  v25 = __src;
  v24 = __dst;
  if (v10 >= v12 >> 4)
  {
    if (v11 >= -15)
    {
      if (__dst != a2 || &a2[2 * v13] <= __dst)
        memmove(__dst, a2, 16 * v13);
      v18 = &v4[2 * v13];
      v23 = (char *)v18;
      v25 = v6;
      if (v7 < v6 && v11 >= 16)
      {
        v19 = (double *)(a3 - 16);
        do
        {
          v20 = v19 + 2;
          if (*(v18 - 1) >= *(v6 - 1))
          {
            v23 = (char *)(v18 - 2);
            if (v20 < v18 || v19 >= v18 || v20 != v18)
              *(_OWORD *)v19 = *((_OWORD *)v18 - 1);
            v21 = v6;
            v18 -= 2;
            if (v6 <= v7)
              break;
          }
          else
          {
            v21 = v6 - 2;
            if (v20 != v6 || v19 >= v6)
              *(_OWORD *)v19 = *(_OWORD *)v21;
            v25 = v6 - 2;
            if (v21 <= v7)
              break;
          }
          v19 -= 2;
          v6 = v21;
        }
        while (v18 > v4);
      }
LABEL_44:
      sub_DD62C((void **)&v25, (const void **)&v24, &v23);
      return 1;
    }
  }
  else if (v8 >= -15)
  {
    if (__dst != __src || &__src[2 * v10] <= __dst)
      memmove(__dst, __src, 16 * v10);
    v14 = &v4[2 * v10];
    v23 = (char *)v14;
    if ((unint64_t)v6 < a3 && v8 >= 16)
    {
      v15 = v4;
      while (1)
      {
        if (v6[1] >= v15[1])
        {
          v4 = v15 + 2;
          v17 = v15;
          v16 = v6;
          if (v7 == v15)
          {
            v15 += 2;
            if (v7 < v4)
              goto LABEL_22;
          }
          else
          {
            v15 += 2;
          }
        }
        else
        {
          v16 = v6 + 2;
          v17 = v6;
          if (v7 == v6 && v7 < v16)
            goto LABEL_22;
        }
        *(_OWORD *)v7 = *(_OWORD *)v17;
LABEL_22:
        v7 += 2;
        if (v15 < v14)
        {
          v6 = v16;
          if ((unint64_t)v16 < a3)
            continue;
        }
        v24 = v4;
        v25 = v7;
        goto LABEL_44;
      }
    }
    goto LABEL_44;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

char *sub_DD534(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_5440(&qword_264998);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)&_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8])
      memmove(v14, v15, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v14, v15, 16 * v8);
  }
  swift_bridgeObjectRelease(a4);
  return v11;
}

char *sub_DD62C(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *result;
  uint64_t v7;
  char v9;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  v5 = v4 + 15;
  if (v4 >= 0)
    v5 = *a3 - (_QWORD)v3;
  if (v4 <= -16)
  {
    v9 = 2;
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v9, 1046, 0);
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v7 = v5 >> 4;
    if (result != v3 || result >= &v3[16 * v7])
      return (char *)memmove(result, v3, 16 * v7);
  }
  return result;
}

char *sub_DD6D4(uint64_t a1)
{
  return sub_DD534(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_DD6E8(uint64_t a1)
{
  return sub_2175C(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t QuickActionBuyButtonView.init(assetInfo:stretchWidth:isEnabled:localizerForAnalytics:)@<X0>(_QWORD *a1@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  _BYTE v14[40];
  _QWORD v15[5];

  v10 = type metadata accessor for QuickActionBuyButtonViewModel(0);
  __chkstk_darwin(v10);
  v12 = &v14[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_BD00((uint64_t)a1, (uint64_t)v15);
  sub_B3D0(a4, (uint64_t)v14, &qword_25FB10);
  QuickActionBuyButtonViewModel.init(assetInfo:stretchWidth:isEnabled:localizerForAnalytics:)(v15, a2, a3, (uint64_t)v14, (uint64_t)v12);
  sub_B414(a4, &qword_25FB10);
  _s7BooksUI13AnyPagedFrameVwxx_0(a1);
  return sub_21C88((uint64_t)v12, a5, type metadata accessor for QuickActionBuyButtonViewModel);
}

uint64_t type metadata accessor for QuickActionBuyButtonViewModel(uint64_t a1)
{
  return sub_1FE90(a1, qword_264AA0, (uint64_t)&nominal type descriptor for QuickActionBuyButtonViewModel);
}

uint64_t QuickActionBuyButtonViewModel.init(assetInfo:stretchWidth:isEnabled:localizerForAnalytics:)@<X0>(_QWORD *a1@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int *v14;
  uint64_t v15;
  char *v16;
  int *v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t, uint64_t);
  unint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  int v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;

  v45 = a4;
  v46 = a1;
  v43 = a2;
  v44 = a3;
  v6 = type metadata accessor for Font.TextStyle(0);
  v41 = *(_QWORD *)(v6 - 8);
  v42 = v6;
  __chkstk_darwin(v6);
  v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = type metadata accessor for ButtonViewModel.ActionKind(0);
  __chkstk_darwin(v39);
  v10 = (char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for ButtonViewModel.Content(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = (int *)type metadata accessor for ButtonViewModel(0);
  __chkstk_darwin(v14);
  v16 = (char *)&v37 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = (int *)type metadata accessor for QuickActionBuyButtonViewModel(0);
  v18 = (_QWORD *)(a5 + v17[7]);
  *v18 = 0;
  v18[1] = 0;
  v19 = a5 + v17[8];
  *(_QWORD *)v19 = swift_getKeyPath(&unk_1EAD88);
  *(_OWORD *)(v19 + 8) = 0u;
  *(_OWORD *)(v19 + 24) = 0u;
  *(_OWORD *)(v19 + 40) = 0u;
  *(_OWORD *)(v19 + 51) = 0u;
  v20 = (_QWORD *)(a5 + v17[9]);
  *v20 = swift_getKeyPath(&unk_1EADB0);
  v21 = sub_5440(&qword_25F758);
  swift_storeEnumTagMultiPayload(v20, v21, 0);
  v22 = (_QWORD *)(a5 + v17[10]);
  v40 = a5;
  v23 = type metadata accessor for ProfileRestrictions(0);
  v24 = sub_6FD0((unint64_t *)&qword_26AF00, type metadata accessor for ProfileRestrictions, (uint64_t)&protocol conformance descriptor for ProfileRestrictions);
  *v22 = EnvironmentObject.init()(v23, v24);
  v22[1] = v25;
  sub_BD00((uint64_t)v46, a5 + v17[5]);
  v37 = v13;
  static LocalizerRequest.verbatim(_:)(0, 0xE000000000000000);
  swift_storeEnumTagMultiPayload(v13, v11, 0);
  v38 = v10;
  *((_QWORD *)v10 + 4) = 0;
  *(_OWORD *)v10 = 0u;
  *((_OWORD *)v10 + 1) = 0u;
  swift_storeEnumTagMultiPayload(v10, v39, 0);
  v47 = 0x403C000000000000;
  v26 = enum case for Font.TextStyle.subheadline(_:);
  v27 = v42;
  v28 = *(void (**)(char *, uint64_t, uint64_t))(v41 + 104);
  v28(v8, enum case for Font.TextStyle.subheadline(_:), v42);
  v29 = sub_3CB54();
  ScaledMetric.init(wrappedValue:relativeTo:)(&v47, v8, &type metadata for Double, v29);
  v47 = 0x4008000000000000;
  v28(v8, v26, v27);
  ScaledMetric.init(wrappedValue:relativeTo:)(&v47, v8, &type metadata for Double, v29);
  v30 = &v16[v14[6]];
  *(_QWORD *)v30 = swift_getKeyPath(&unk_1EADD8);
  v31 = sub_5440(&qword_25F1E8);
  swift_storeEnumTagMultiPayload(v30, v31, 0);
  v32 = &v16[v14[14]];
  v33 = type metadata accessor for LocalizerRequest(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56))(v32, 1, 1, v33);
  v16[v14[7]] = v43;
  v16[v14[8]] = 1;
  v16[v14[9]] = 0;
  v34 = &v16[v14[10]];
  *(_QWORD *)v34 = 2;
  *((_QWORD *)v34 + 1) = 0;
  *((_QWORD *)v34 + 2) = 0;
  *((_QWORD *)v34 + 3) = 0;
  sub_21C88((uint64_t)v37, (uint64_t)&v16[v14[11]], type metadata accessor for ButtonViewModel.Content);
  v16[v14[12]] = v44;
  sub_21C88((uint64_t)v38, (uint64_t)&v16[v14[13]], type metadata accessor for ButtonViewModel.ActionKind);
  _s7BooksUI13AnyPagedFrameVwxx_0(v46);
  v35 = v40;
  sub_21C88((uint64_t)v16, v40, type metadata accessor for ButtonViewModel);
  return sub_167A4(v45, v35 + v17[6], &qword_25FB10);
}

uint64_t QuickActionBuyButtonView.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t, uint64_t);
  unint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t KeyPath;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  unint64_t v35;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  __int16 v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  __int16 v57;
  _OWORD v58[3];
  _BYTE v59[19];

  v2 = v1;
  v43 = a1;
  v45 = type metadata accessor for ImpressionsCalculator.Configuration(0);
  v44 = *(_QWORD *)(v45 - 8);
  __chkstk_darwin(v45);
  v42 = (char *)&v37 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_5440(&qword_25FE30);
  __chkstk_darwin(v4);
  v41 = (uint64_t)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Font.TextStyle(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for ButtonViewModel(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for ButtonView(0);
  __chkstk_darwin(v13);
  v15 = (char *)&v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = sub_5440(&qword_2649A0);
  __chkstk_darwin(v39);
  v38 = (uint64_t)&v37 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1E428(v2, (uint64_t)v12, type metadata accessor for ButtonViewModel);
  *(_QWORD *)&v58[0] = 0x4020000000000000;
  v17 = enum case for Font.TextStyle.subheadline(_:);
  v18 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 104);
  v18(v9, enum case for Font.TextStyle.subheadline(_:), v6);
  v19 = sub_3CB54();
  ScaledMetric.init(wrappedValue:relativeTo:)(v58, v9, &type metadata for Double, v19);
  *(_QWORD *)&v58[0] = 0x3FF8000000000000;
  v18(v9, v17, v6);
  ScaledMetric.init(wrappedValue:relativeTo:)(v58, v9, &type metadata for Double, v19);
  v20 = &v15[*(int *)(v13 + 24)];
  *(_QWORD *)v20 = swift_getKeyPath(&unk_1EAE00);
  v21 = sub_5440(&qword_25FB20);
  swift_storeEnumTagMultiPayload(v20, v21, 0);
  sub_21C88((uint64_t)v12, (uint64_t)&v15[*(int *)(v13 + 28)], type metadata accessor for ButtonViewModel);
  KeyPath = swift_getKeyPath(&unk_1EAE38);
  v23 = v38;
  sub_1E428((uint64_t)v15, v38, type metadata accessor for ButtonView);
  v24 = v39;
  v25 = v23 + *(int *)(v39 + 36);
  *(_QWORD *)v25 = KeyPath;
  *(_BYTE *)(v25 + 8) = 1;
  sub_224DC((uint64_t)v15, type metadata accessor for ButtonView);
  v26 = (int *)type metadata accessor for QuickActionBuyButtonViewModel(0);
  v27 = (_QWORD *)(v40 + v26[5]);
  v28 = v40 + v26[8];
  v29 = v40;
  v30 = *(_OWORD *)(v28 + 48);
  v58[2] = *(_OWORD *)(v28 + 32);
  *(_OWORD *)v59 = v30;
  *(_DWORD *)&v59[15] = *(_DWORD *)(v28 + 63);
  v31 = *(_OWORD *)(v28 + 16);
  v58[0] = *(_OWORD *)v28;
  v58[1] = v31;
  sub_34820((uint64_t)v58, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))sub_3480C);
  sub_316C0((uint64_t)&v52);
  sub_34820((uint64_t)v58, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))sub_BDF8);
  v46 = v52;
  v37 = v53;
  v47 = v53;
  v48 = v54;
  v49 = v55;
  v50 = v56;
  v51 = v57;
  v32 = v41;
  static SeriesQuickActionButtonViewModel.impressionMetricsForSamples(for:in:with:)(v27, (uint64_t)&v46, *(_QWORD *)(v29 + v26[7] + 8), v41);
  v33 = swift_bridgeObjectRelease(v37);
  v34 = v42;
  static ImpressionsCalculator.Configuration.half.getter(v33);
  v35 = sub_E141C();
  View.impressionable(_:configuration:position:definesParentContext:)(v32, v34, 0, 1, 0, v24, v35);
  (*(void (**)(char *, uint64_t))(v44 + 8))(v34, v45);
  sub_B414(v32, &qword_25FE30);
  return sub_B414(v23, &qword_2649A0);
}

Swift::Void __swiftcall QuickActionBuyButtonViewModel.update()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  _BYTE *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int *v35;
  __int128 *v36;
  __int128 v37;
  __int128 v38;
  unsigned __int8 v39;
  uint64x2_t v40;
  int16x8_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t KeyPath;
  uint64_t v50;
  id v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  void *v70;
  id v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t *v81;
  char v82;
  void (*v83)(_BYTE *, uint64_t *);
  unint64_t *v84;
  uint64_t v85;
  _BYTE *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _BYTE *v90;
  char v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  id v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  id v104;
  _BYTE *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  void (*v119)(char *, _BYTE *, uint64_t);
  _BYTE *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t *v130;
  uint64_t v131;
  char v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t *v140;
  uint64_t v141;
  void (*v142)(char *, _BYTE *, uint64_t);
  uint64_t v143;
  _QWORD *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  _BYTE *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  int *v158;
  id v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  id v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  _BYTE *v169;
  uint64_t v170;
  uint64_t v171;
  _QWORD *v172;
  uint64_t *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  _BYTE v177[4];
  int v178;
  unint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  _BYTE *v183;
  uint64_t *v184;
  _QWORD *v185;
  _BYTE *v186;
  _BYTE *v187;
  _BYTE *v188;
  uint64_t v189;
  _QWORD *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  char *v195;
  _BYTE *v196;
  int *v197;
  uint64_t v198;
  _BYTE *v199;
  id v200;
  uint64_t v201;
  uint64_t *v202;
  _BYTE *v203;
  _BYTE *v204;
  unint64_t *v205;
  int *v206;
  uint64_t v207;
  _BYTE *v208;
  __int128 v209;
  uint64_t v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int16 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int16 v220;
  _OWORD v221[3];
  _OWORD v222[3];

  v1 = v0;
  v207 = type metadata accessor for ButtonViewModel.ActionKind(0);
  __chkstk_darwin(v207);
  v3 = &v177[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = type metadata accessor for LocalizerRequest(0);
  v198 = *(_QWORD *)(v4 - 8);
  v5 = __chkstk_darwin(v4);
  v186 = &v177[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v5);
  v187 = &v177[-v7];
  v8 = sub_5440(&qword_25E0C8);
  __chkstk_darwin(v8);
  v195 = &v177[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v189 = type metadata accessor for AssetAction.Kind(0);
  __chkstk_darwin(v189);
  v190 = &v177[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = sub_5440(&qword_2649B0);
  v12 = __chkstk_darwin(v11);
  v204 = &v177[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v14 = __chkstk_darwin(v12);
  v188 = &v177[-v15];
  __chkstk_darwin(v14);
  v203 = &v177[-v16];
  v17 = type metadata accessor for ButtonViewModel.Content(0);
  v18 = __chkstk_darwin(v17);
  v184 = (uint64_t *)&v177[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v20 = __chkstk_darwin(v18);
  v183 = &v177[-v21];
  v22 = __chkstk_darwin(v20);
  v185 = &v177[-v23];
  __chkstk_darwin(v22);
  v205 = (unint64_t *)&v177[-v24];
  v25 = type metadata accessor for SeriesOrdering(0);
  v201 = *(_QWORD *)(v25 - 8);
  v202 = (uint64_t *)v25;
  v26 = __chkstk_darwin(v25);
  v28 = &v177[-((v27 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v26);
  v30 = &v177[-v29];
  v31 = sub_5440(&qword_268370);
  v32 = __chkstk_darwin(v31);
  v199 = &v177[-((v33 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v32);
  v208 = &v177[-v34];
  v35 = (int *)type metadata accessor for QuickActionBuyButtonViewModel(0);
  v36 = (__int128 *)(v0 + v35[8]);
  v37 = v36[3];
  v221[2] = v36[2];
  v222[0] = v37;
  *(_DWORD *)((char *)v222 + 15) = *(_DWORD *)((char *)v36 + 63);
  v38 = *v36;
  v221[1] = v36[1];
  v221[0] = v38;
  sub_34820((uint64_t)v221, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))sub_3480C);
  sub_316C0((uint64_t)&v211);
  sub_34820((uint64_t)v221, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))sub_BDF8);
  if (!*((_QWORD *)&v211 + 1))
  {
    v53 = type metadata accessor for ButtonViewModel(0);
    v54 = v1 + *(int *)(v53 + 44);
    sub_224DC(v54, type metadata accessor for ButtonViewModel.Content);
    swift_storeEnumTagMultiPayload(v54, v17, 7);
    v55 = v1 + *(int *)(v53 + 52);
    sub_224DC(v55, type metadata accessor for ButtonViewModel.ActionKind);
    *(_OWORD *)v55 = 0u;
    *(_OWORD *)(v55 + 16) = 0u;
    *(_QWORD *)(v55 + 32) = 0;
    swift_storeEnumTagMultiPayload(v55, v207, 0);
    return;
  }
  v192 = v17;
  v193 = *((_QWORD *)&v211 + 1);
  v196 = v3;
  v39 = v212;
  v216 = v211;
  LOBYTE(v217) = v212;
  v179 = *((_QWORD *)&v212 + 1);
  *((_QWORD *)&v217 + 1) = *((_QWORD *)&v212 + 1);
  v181 = v213;
  v182 = v4;
  LOWORD(v218) = v213 & 0xFF01;
  *((_QWORD *)&v218 + 1) = *((_QWORD *)&v213 + 1);
  LOBYTE(v219) = v214 & 1;
  v40 = (uint64x2_t)vdupq_n_s64(v214);
  v41 = (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v40, (uint64x2_t)xmmword_1EAD30), (int32x4_t)vshlq_u64(v40, (uint64x2_t)xmmword_1EAD20));
  *(int8x8_t *)v41.i8 = vand_s8((int8x8_t)vmovn_s32((int32x4_t)v41), (int8x8_t)0x1000100010001);
  *(_DWORD *)((char *)&v219 + 1) = vmovn_s16(v41).u32[0];
  *((_QWORD *)&v219 + 1) = *((_QWORD *)&v214 + 1);
  v220 = v215 & 0x101;
  v42 = (_QWORD *)(v0 + v35[5]);
  v43 = v42[3];
  v44 = v42[4];
  sub_5480((_QWORD *)(v1 + v35[5]), v43);
  v45 = AssetInfo.isExplicit.getter(v43, v44);
  v197 = v35;
  if ((v45 & 1) != 0)
  {
    v46 = v1;
    v47 = v1 + v35[10];
    v48 = *(void **)v47;
    if (!*(_QWORD *)v47)
    {
      v174 = *(_QWORD *)(v47 + 8);
      v175 = type metadata accessor for ProfileRestrictions(0);
      v176 = sub_6FD0((unint64_t *)&qword_26AF00, type metadata accessor for ProfileRestrictions, (uint64_t)&protocol conformance descriptor for ProfileRestrictions);
      EnvironmentObject.error()(0, v174, v175, v176);
      __break(1u);
      return;
    }
    KeyPath = swift_getKeyPath(&unk_1EAE68);
    v50 = swift_getKeyPath(&unk_1EAE90);
    v51 = v48;
    static Published.subscript.getter(&v211, v51, KeyPath, v50);

    swift_release(KeyPath);
    swift_release(v50);
    v52 = v211;
    v1 = v46;
  }
  else
  {
    v52 = 1;
  }
  v56 = v39;
  v206 = (int *)type metadata accessor for ButtonViewModel(0);
  v57 = v206[12];
  v194 = v1;
  *(_BYTE *)(v1 + v57) = v52;
  v58 = v42[3];
  v59 = v42[4];
  sub_5480(v42, v58);
  v60 = ContentInfo.id.getter(v58, *(_QWORD *)(v59 + 8));
  v191 = v61;
  v62 = v42[3];
  v63 = v42[4];
  sub_5480(v42, v62);
  v64 = dispatch thunk of AssetInfo.assetType.getter(v62, v63);
  v178 = static AssetType.== infix(_:_:)(v64, 0);
  v65 = v42[3];
  v66 = v42[4];
  sub_5480(v42, v65);
  v200 = (id)ContentInfo.storeData.getter(v65, *(_QWORD *)(v66 + 8));
  v67 = v42[3];
  v68 = v42[4];
  sub_5480(v42, v67);
  v69 = (void *)ContentInfo.storeData.getter(v67, *(_QWORD *)(v68 + 8));
  v180 = v60;
  if (v69)
  {
    v70 = v69;
    v71 = objc_msgSend(v69, "bookSampleDownloadURL");

    v72 = (uint64_t)v196;
    if (v71)
    {
      v73 = (uint64_t)v199;
      static URL._unconditionallyBridgeFromObjectiveC(_:)(v71);

      v74 = type metadata accessor for URL(0);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v74 - 8) + 56))(v73, 0, 1, v74);
    }
    else
    {
      v77 = type metadata accessor for URL(0);
      v73 = (uint64_t)v199;
      (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v77 - 8) + 56))(v199, 1, 1, v77);
    }
    v76 = v194;
    sub_167A4(v73, (uint64_t)v208, &qword_268370);
  }
  else
  {
    v75 = type metadata accessor for URL(0);
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v75 - 8) + 56))(v208, 1, 1, v75);
    v76 = v194;
    v72 = (uint64_t)v196;
  }
  v78 = v42[3];
  v79 = v42[4];
  sub_5480(v42, v78);
  AssetInfo.seriesOrdering.getter(v78, v79);
  v80 = v201;
  v81 = v202;
  (*(void (**)(_BYTE *, _QWORD, uint64_t *))(v201 + 104))(v28, enum case for SeriesOrdering.orderedSeries(_:), v202);
  v82 = static SeriesOrdering.== infix(_:_:)(v30, v28);
  v83 = *(void (**)(_BYTE *, uint64_t *))(v80 + 8);
  v83(v28, v81);
  v83(v30, v81);
  if (v56 != 3)
  {
    v89 = (uint64_t)v204;
    v84 = v205;
    if ((v181 & 1) != 0)
    {
      if (v56 > 1)
      {
        v109 = v42[3];
        v110 = v42[4];
        sub_5480(v42, v109);
        if ((AssetInfo.isFree.getter(v109, v110) & 1) == 0)
        {
          sub_E076C(v178 & 1, v42, (uint64_t)v186);
          if ((v82 & 1) == 0
            || (v111 = v42[3],
                v112 = v42[4],
                sub_5480(v42, v111),
                AssetInfo.sequenceNumber.getter(v111, v112),
                (v113 & 0x100000000) != 0))
          {
            v139 = sub_5440(&qword_2621C0);
            v140 = v184;
            v202 = (uint64_t *)((char *)v184 + *(int *)(v139 + 48));
            v141 = v198;
            v142 = *(void (**)(char *, _BYTE *, uint64_t))(v198 + 16);
            v120 = v186;
            v121 = v182;
            v142((char *)v184, v186, v182);
            v143 = v42[3];
            v201 = v42[4];
            v144 = v42;
            v116 = (uint64_t)v140;
            v119 = v142;
            v118 = v141;
            sub_5480(v144, v143);
            v84 = v205;
            v145 = AssetInfo.title.getter(v143, v201);
            v147 = v146;
            static LocalizerRequest.verbatim(_:)(v145, v146);
            swift_bridgeObjectRelease(v147);
            v122 = 5;
          }
          else
          {
            if ((v178 & 1) != 0)
              v114 = 0x6E6F687064616568;
            else
              v114 = 0x6761702E6B6F6F62;
            v115 = sub_5440(&qword_2621B0);
            v116 = (uint64_t)v184;
            v117 = (char *)v184 + *(int *)(v115 + 48);
            *v184 = v114;
            *(_QWORD *)(v116 + 8) = 0xEA00000000007365;
            v118 = v198;
            v119 = *(void (**)(char *, _BYTE *, uint64_t))(v198 + 16);
            v120 = v186;
            v121 = v182;
            v119(v117, v186, v182);
            v122 = 3;
          }
          swift_storeEnumTagMultiPayload(v116, v192, v122);
          sub_21C88(v116, (uint64_t)v84, type metadata accessor for ButtonViewModel.Content);
          v148 = (uint64_t)v195;
          v119(v195, v120, v121);
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v118 + 56))(v148, 0, 1, v121);
          v86 = v203;
          v90 = v208;
          v149 = v191;
          sub_DFACC(v148, v178 & 1, (uint64_t)v208, (unint64_t)&v216, v76, v180, v191, (uint64_t)v203);
          swift_bridgeObjectRelease(v149);
          sub_B414(v148, &qword_25E0C8);
          swift_bridgeObjectRelease(v193);
          sub_B3D0(v76 + v197[6], (uint64_t)&v209, &qword_25FB10);
          if (v210)
          {
            sub_AC68(&v209, (uint64_t)&v211);
            v87 = LocalizerRequest.perform(using:)(&v211);
            v150 = v120;
            v88 = v151;
            _s7BooksUI13AnyPagedFrameVwxx_0(&v211);
            (*(void (**)(_BYTE *, uint64_t))(v198 + 8))(v150, v121);
          }
          else
          {
            (*(void (**)(_BYTE *, uint64_t))(v198 + 8))(v120, v121);
            sub_B414((uint64_t)&v209, &qword_25FB10);
            v87 = 0;
            v88 = 0;
          }
          v72 = (uint64_t)v196;
          goto LABEL_45;
        }
        sub_E0158(v178 & 1, v42, (uint64_t)v187);
        v133 = v192;
        if ((v82 & 1) == 0
          || (v134 = v42[3],
              v135 = v42[4],
              sub_5480(v42, v134),
              AssetInfo.sequenceNumber.getter(v134, v135),
              (v136 & 0x100000000) != 0))
        {
          sub_5440(&qword_2621C0);
          v137 = (uint64_t)v183;
          v202 = *(uint64_t **)(v198 + 16);
          ((void (*)(_BYTE *, _BYTE *, uint64_t))v202)(v183, v187, v182);
          v152 = v42[3];
          v153 = v42[4];
          sub_5480(v42, v152);
          v154 = v153;
          v84 = v205;
          v155 = AssetInfo.title.getter(v152, v154);
          v157 = v156;
          static LocalizerRequest.verbatim(_:)(v155, v156);
          swift_bridgeObjectRelease(v157);
          v138 = 5;
        }
        else
        {
          v137 = (uint64_t)v183;
          v202 = *(uint64_t **)(v198 + 16);
          ((void (*)(_BYTE *, _BYTE *, uint64_t))v202)(v183, v187, v182);
          v138 = 0;
        }
        v158 = v197;
        v90 = v208;
        swift_storeEnumTagMultiPayload(v137, v133, v138);
        sub_21C88(v137, (uint64_t)v84, type metadata accessor for ButtonViewModel.Content);
        v86 = v203;
        v159 = v200;
        if (v200)
        {
          v160 = v189;
          v161 = (uint64_t)v190;
          *v190 = v200;
          swift_storeEnumTagMultiPayload(v161, v160, 1);
          v162 = (uint64_t)v195;
          v163 = v182;
          ((void (*)(char *, _BYTE *, uint64_t))v202)(v195, v187, v182);
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v198 + 56))(v162, 0, 1, v163);
          v164 = v159;
          v165 = v191;
          sub_DF1BC(v161, v162, (unint64_t)&v216, v76, v180, v191, (uint64_t)v86);
          v166 = v162;
          v158 = v197;
          sub_B414(v166, &qword_25E0C8);
          sub_224DC(v161, type metadata accessor for AssetAction.Kind);
          v167 = type metadata accessor for AssetAction(0);
          (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v167 - 8) + 56))(v86, 0, 1, v167);
          v72 = (uint64_t)v196;
        }
        else
        {
          v168 = type metadata accessor for AssetAction(0);
          (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v168 - 8) + 56))(v86, 1, 1, v168);
          v72 = (uint64_t)v196;
          v165 = v191;
        }
        swift_bridgeObjectRelease(v193);
        swift_bridgeObjectRelease(v165);
        sub_B3D0(v76 + v158[6], (uint64_t)&v209, &qword_25FB10);
        if (v210)
        {
          sub_AC68(&v209, (uint64_t)&v211);
          v169 = v187;
          v87 = LocalizerRequest.perform(using:)(&v211);
          v88 = v170;
          _s7BooksUI13AnyPagedFrameVwxx_0(&v211);
          (*(void (**)(_BYTE *, uint64_t))(v198 + 8))(v169, v182);
          goto LABEL_45;
        }
        (*(void (**)(_BYTE *, uint64_t))(v198 + 8))(v187, v182);
        sub_B414((uint64_t)&v209, &qword_25FB10);
      }
      else
      {
        v91 = v178;
        if ((v178 & (v179 > 2)) == 1)
        {
          sub_5440(&qword_2621B0);
          v92 = (uint64_t)v185;
          *v185 = 0xD000000000000015;
          *(_QWORD *)(v92 + 8) = 0x80000000001FC000;
          v93 = v42[3];
          v94 = v42[4];
          sub_5480(v42, v93);
          v95 = AssetInfo.title.getter(v93, v94);
          v97 = v96;
          static LocalizerRequest.verbatim(_:)(v95, v96);
          swift_bridgeObjectRelease(v97);
          swift_storeEnumTagMultiPayload(v92, v192, 3);
          v84 = v205;
          sub_21C88(v92, (uint64_t)v205, type metadata accessor for ButtonViewModel.Content);
          v98 = v189;
          v99 = (uint64_t)v190;
          *v190 = 0;
          *(_QWORD *)(v99 + 8) = 0;
          *(_BYTE *)(v99 + 16) = 1;
          v100 = v200;
          *(_QWORD *)(v99 + 24) = v200;
          v101 = v99;
          v102 = 3;
LABEL_20:
          swift_storeEnumTagMultiPayload(v101, v98, v102);
          v103 = (uint64_t)v195;
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v198 + 56))(v195, 1, 1, v182);
          v104 = v100;
          v105 = v188;
          v106 = v191;
          sub_DF1BC(v99, v103, (unint64_t)&v216, v76, v180, v191, (uint64_t)v188);
          swift_bridgeObjectRelease(v106);
          sub_B414(v103, &qword_25E0C8);
          sub_224DC(v99, type metadata accessor for AssetAction.Kind);
          swift_bridgeObjectRelease(v193);
          v107 = type metadata accessor for AssetAction(0);
          (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v107 - 8) + 56))(v105, 0, 1, v107);
          v108 = (uint64_t)v105;
          v86 = v203;
          sub_167A4(v108, (uint64_t)v203, &qword_2649B0);
          v87 = 0;
          v88 = 0;
          v90 = v208;
          goto LABEL_45;
        }
        v123 = sub_5440(&qword_2621C0);
        v124 = (uint64_t)v185;
        v202 = (_QWORD *)((char *)v185 + *(int *)(v123 + 48));
        v213 = v218;
        v214 = v219;
        v215 = v220;
        v211 = v216;
        v212 = v217;
        sub_DFF2C(v91 & 1, (uint64_t)&v211);
        v125 = v42[3];
        v126 = v42[4];
        sub_5480(v42, v125);
        v127 = AssetInfo.title.getter(v125, v126);
        v129 = v128;
        static LocalizerRequest.verbatim(_:)(v127, v128);
        swift_bridgeObjectRelease(v129);
        swift_storeEnumTagMultiPayload(v124, v192, 5);
        v130 = v205;
        sub_21C88(v124, (uint64_t)v205, type metadata accessor for ButtonViewModel.Content);
        v86 = v203;
        v131 = v191;
        v132 = v91 & 1;
        v84 = v130;
        v90 = v208;
        sub_DFD68((unint64_t)&v216, v76, v180, v191, v132, (uint64_t)v208, (uint64_t)v203);
        swift_bridgeObjectRelease(v193);
        swift_bridgeObjectRelease(v131);
      }
      v87 = 0;
      v88 = 0;
      goto LABEL_45;
    }
    *v205 = v179;
    swift_storeEnumTagMultiPayload(v84, v192, 6);
    v100 = v200;
    v98 = v189;
    v99 = (uint64_t)v190;
    *v190 = v200;
    v101 = v99;
    v102 = 2;
    goto LABEL_20;
  }
  swift_bridgeObjectRelease(v193);
  swift_bridgeObjectRelease(v191);
  v84 = v205;
  swift_storeEnumTagMultiPayload(v205, v192, 7);
  v85 = type metadata accessor for AssetAction(0);
  v86 = v203;
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v85 - 8) + 56))(v203, 1, 1, v85);
  v87 = 0;
  v88 = 0;
  v89 = (uint64_t)v204;
  v90 = v208;
LABEL_45:
  sub_E14EC((uint64_t)v84, v76 + v206[11]);
  sub_B3D0((uint64_t)v86, v89, &qword_2649B0);
  v171 = type metadata accessor for AssetAction(0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v171 - 8) + 48))(v89, 1, v171) == 1)
  {

    sub_B414((uint64_t)v86, &qword_2649B0);
    sub_224DC((uint64_t)v84, type metadata accessor for ButtonViewModel.Content);
    sub_B414((uint64_t)v90, &qword_268370);
    sub_B414(v89, &qword_2649B0);
    *(_OWORD *)v72 = 0u;
    *(_OWORD *)(v72 + 16) = 0u;
    *(_QWORD *)(v72 + 32) = 0;
  }
  else
  {
    *(_QWORD *)(v72 + 24) = v171;
    *(_QWORD *)(v72 + 32) = sub_6FD0(&qword_263340, type metadata accessor for AssetAction, (uint64_t)&protocol conformance descriptor for AssetAction);
    v172 = sub_C404((_QWORD *)v72);
    sub_21C88(v89, (uint64_t)v172, type metadata accessor for AssetAction);

    sub_B414((uint64_t)v86, &qword_2649B0);
    sub_224DC((uint64_t)v84, type metadata accessor for ButtonViewModel.Content);
    sub_B414((uint64_t)v90, &qword_268370);
  }
  swift_storeEnumTagMultiPayload(v72, v207, 0);
  sub_E1530(v72, v76 + v206[13]);
  v173 = (uint64_t *)(v76 + v197[7]);
  swift_bridgeObjectRelease(v173[1]);
  *v173 = v87;
  v173[1] = v88;
}

uint64_t sub_DF1BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  void (*v39)(char *, _QWORD, uint64_t);
  uint64_t v40;
  int EnumCaseMultiPayload;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  unint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  __int128 v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _OWORD v119[11];
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  char v131;
  char v132;
  _QWORD v133[6];

  *(_QWORD *)&v113 = a5;
  *((_QWORD *)&v113 + 1) = a6;
  v112 = a4;
  v101 = a3;
  v99 = a2;
  v110 = a7;
  v8 = type metadata accessor for UUID(0);
  v116 = *(_QWORD *)(v8 - 8);
  v117 = v8;
  __chkstk_darwin(v8);
  v109 = (char *)&v94 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_5440(&qword_25E828);
  __chkstk_darwin(v10);
  v108 = (char *)&v94 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v111 = type metadata accessor for QuickActionBuyButtonViewModel(0);
  __chkstk_darwin(v111);
  v103 = (uint64_t)&v94 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_5440(&qword_25FAC0);
  __chkstk_darwin(v13);
  v15 = (char *)&v94 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_5440(&qword_268370);
  __chkstk_darwin(v16);
  v100 = (char *)&v94 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_5440(&qword_25E0C8);
  __chkstk_darwin(v18);
  v98 = (uint64_t)&v94 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for AssetAction.Kind(0);
  v21 = __chkstk_darwin(v20);
  v107 = (uint64_t)&v94 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v24 = (id *)((char *)&v94 - v23);
  v25 = type metadata accessor for ActionMetrics(0);
  v114 = *(_QWORD *)(v25 - 8);
  v115 = v25;
  v26 = __chkstk_darwin(v25);
  v106 = (char *)&v94 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  v118 = (uint64_t)&v94 - v28;
  v29 = type metadata accessor for LinkActionType(0);
  v30 = *(_QWORD *)(v29 - 8);
  __chkstk_darwin(v29);
  v32 = (char *)&v94 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = type metadata accessor for ClickData.TargetType(0);
  __chkstk_darwin(v33);
  v35 = (char *)&v94 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = type metadata accessor for ClickData(0);
  v104 = *(_QWORD *)(v36 - 8);
  v105 = v36;
  __chkstk_darwin(v36);
  v38 = (char *)&v94 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssetAction.Kind.appAnalyticsClickTargetType.getter();
  v39 = *(void (**)(char *, _QWORD, uint64_t))(v30 + 104);
  v40 = a1;
  v39(v32, enum case for LinkActionType.click(_:), v29);
  v102 = v38;
  ClickData.init(with:linkActionType:index:url:)(v35, v32, 0, 0, 0);
  sub_1E428(a1, (uint64_t)v24, type metadata accessor for AssetAction.Kind);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v24, v20);
  if (EnumCaseMultiPayload == 4)
  {

    v43 = v111;
    v42 = v112;
    v44 = (uint64_t)v15;
LABEL_5:
    if (*(_BYTE *)(v101 + 16) == 5)
    {
      v47 = 1;
      goto LABEL_9;
    }
LABEL_18:
    static ActionMetrics.notInstrumented.getter(v46);
    goto LABEL_32;
  }
  v43 = v111;
  v42 = v112;
  v44 = (uint64_t)v15;
  if (EnumCaseMultiPayload == 6)
  {
    v45 = type metadata accessor for URL(0);
    v46 = (*(uint64_t (**)(id *, uint64_t))(*(_QWORD *)(v45 - 8) + 8))(v24, v45);
    goto LABEL_5;
  }
  v46 = sub_224DC((uint64_t)v24, type metadata accessor for AssetAction.Kind);
  if (*(_BYTE *)(v101 + 16) != 5)
    goto LABEL_18;
  v47 = 0;
LABEL_9:
  sub_B3D0(v42 + *(int *)(v43 + 24), (uint64_t)&v120, &qword_25FB10);
  if (!*((_QWORD *)&v121 + 1))
  {
    v46 = sub_B414((uint64_t)&v120, &qword_25FB10);
    goto LABEL_18;
  }
  sub_AC68(&v120, (uint64_t)v133);
  AssetAction.Kind.figaroActionType.getter();
  v48 = v43;
  v49 = v120;
  LOBYTE(v119[0]) = v120;
  v50 = v42 + *(int *)(v48 + 20);
  sub_BD00(v50, (uint64_t)&v120);
  v101 = _s7BooksUI7MetricsO13actionDetails3for9assetInfoSDySSypGSgAC15ClickActionTypeO_14BookFoundation05AssetH0_ptFZ_0(v119, &v120);
  _s7BooksUI13AnyPagedFrameVwxx_0(&v120);
  sub_BD00(v50, (uint64_t)&v120);
  v51 = *((_QWORD *)&v121 + 1);
  v52 = v122;
  sub_5480(&v120, *((uint64_t *)&v121 + 1));
  v53 = dispatch thunk of AssetInfo.assetType.getter(v51, v52);
  v54 = static AssetType.== infix(_:_:)(v53, 0);
  if ((v54 & 1) != 0)
    v55 = 0x6F6F626F69647561;
  else
    v55 = 0x6B6F6F6265;
  v56 = 0xE500000000000000;
  if ((v54 & 1) != 0)
    v56 = 0xE90000000000006BLL;
  v96 = v56;
  v97 = v55;
  _s7BooksUI13AnyPagedFrameVwxx_0(&v120);
  v57 = v98;
  sub_B3D0(v99, v98, &qword_25E0C8);
  v58 = type metadata accessor for LocalizerRequest(0);
  v59 = *(_QWORD *)(v58 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v59 + 48))(v57, 1, v58) == 1)
  {
    sub_B414(v57, &qword_25E0C8);
    v99 = 0;
    v95 = 0;
  }
  else
  {
    v99 = LocalizerRequest.perform(using:)(v133);
    v95 = v60;
    (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v57, v58);
  }
  if (v47)
    v61 = 5;
  else
    v61 = 0;
  v62 = 0x6E6F74747562;
  if (v47)
    v62 = 0x77656976657270;
  v98 = v62;
  if (v47)
    v63 = 0xE700000000000000;
  else
    v63 = 0xE600000000000000;
  v132 = v61;
  v131 = v49;
  sub_BD00(v50, (uint64_t)&v120);
  v64 = *((_QWORD *)&v121 + 1);
  v65 = v122;
  sub_5480(&v120, *((uint64_t *)&v121 + 1));
  swift_bridgeObjectRetain(*((_QWORD *)&v113 + 1));
  v66 = (uint64_t)v100;
  AssetInfo.sharableURL.getter(v64, v65);
  v67 = type metadata accessor for URL(0);
  v68 = *(_QWORD *)(v67 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v68 + 48))(v66, 1, v67) == 1)
  {
    _s7BooksUI13AnyPagedFrameVwxx_0(&v120);
    sub_B414(v66, &qword_268370);
    v69 = 0;
    v70 = 0;
  }
  else
  {
    v69 = URL.absoluteString.getter();
    v70 = v71;
    (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v66, v67);
    _s7BooksUI13AnyPagedFrameVwxx_0(&v120);
  }
  v43 = v111;
  v42 = v112;
  v121 = 0u;
  v122 = 0u;
  v120 = 0u;
  v123 = v113;
  v124 = xmmword_1E5A30;
  *(_QWORD *)&v125 = v97;
  *((_QWORD *)&v125 + 1) = v96;
  *(_QWORD *)&v126 = 1;
  BYTE8(v126) = 0;
  *(_QWORD *)&v127 = v98;
  *((_QWORD *)&v127 + 1) = v63;
  *(_QWORD *)&v128 = v99;
  *((_QWORD *)&v128 + 1) = v95;
  v129 = 0u;
  v130 = 0u;
  v119[8] = v128;
  memset(&v119[9], 0, 32);
  v119[4] = xmmword_1E5A30;
  v119[5] = v125;
  v119[6] = v126;
  v119[7] = v127;
  memset(v119, 0, 48);
  v119[3] = v113;
  v72 = v101;
  static Metrics.createClickMetrics(targetId:targetType:actionType:actionDetails:actionUrl:location:)(v113, *((uint64_t *)&v113 + 1), (unsigned __int8 *)&v132, &v131, v101, v69, v70, v119, v118);
  swift_bridgeObjectRelease(v70);
  swift_bridgeObjectRelease(v72);
  _s7BooksUI13AnyPagedFrameVwxx_0(v133);
  sub_7E498(&v120);
LABEL_32:
  v73 = v103;
  sub_1E428(v42, v103, type metadata accessor for QuickActionBuyButtonViewModel);
  sub_31EB0(v44);
  sub_224DC(v73, type metadata accessor for QuickActionBuyButtonViewModel);
  v74 = v116;
  v75 = v117;
  v76 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v116 + 48))(v44, 1, v117);
  if ((_DWORD)v76 == 1)
  {
    sub_B414(v44, &qword_25FAC0);
    v111 = 0;
    v103 = 0;
  }
  else
  {
    v111 = UUID.uuidString.getter(v76);
    v103 = v77;
    (*(void (**)(uint64_t, uint64_t))(v74 + 8))(v44, v75);
  }
  sub_BD00(v42 + *(int *)(v43 + 20), (uint64_t)&v120);
  v78 = *((_QWORD *)&v121 + 1);
  v79 = v122;
  sub_5480(&v120, *((uint64_t *)&v121 + 1));
  LODWORD(v112) = AssetInfo.isExplicit.getter(v78, v79);
  v80 = (uint64_t)v106;
  (*(void (**)(char *, uint64_t, uint64_t))(v114 + 16))(v106, v118, v115);
  v81 = v107;
  sub_1E428(v40, v107, type metadata accessor for AssetAction.Kind);
  v82 = v104;
  v83 = v105;
  v84 = (uint64_t)v108;
  v85 = v102;
  (*(void (**)(char *, char *, uint64_t))(v104 + 16))(v108, v102, v105);
  v86 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v82 + 56))(v84, 0, 1, v83);
  v87 = v109;
  v88 = UUID.init()(v86);
  v89 = UUID.uuidString.getter(v88);
  v91 = v90;
  (*(void (**)(char *, uint64_t))(v116 + 8))(v87, v117);
  v92 = *((_QWORD *)&v113 + 1);
  swift_bridgeObjectRetain(*((_QWORD *)&v113 + 1));
  AssetAction.init(id:assetID:instanceID:isExplicit:actionMetrics:kind:clickData:)(v89, v91, v113, v92, v111, v103, v112 & 1, v80, v110, v81, v84);
  (*(void (**)(uint64_t, uint64_t))(v114 + 8))(v118, v115);
  (*(void (**)(char *, uint64_t))(v82 + 8))(v85, v83);
  return _s7BooksUI13AnyPagedFrameVwxx_0(&v120);
}

uint64_t sub_DFACC@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  id v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[3];
  uint64_t v37;
  uint64_t v38;

  v34 = a6;
  v35 = a7;
  v32 = a1;
  v33 = a4;
  v12 = type metadata accessor for AssetAction.Kind(0);
  __chkstk_darwin(v12);
  v14 = (uint64_t *)((char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15 = sub_5440(&qword_268370);
  __chkstk_darwin(v15);
  v17 = (char *)&v31 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for URL(0);
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v21 = (char *)&v31 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a2 & 1) != 0)
  {
    v22 = type metadata accessor for QuickActionBuyButtonViewModel(0);
    sub_BD00(a5 + *(int *)(v22 + 20), (uint64_t)v36);
    v23 = v37;
    v24 = v38;
    sub_5480(v36, v37);
    v25 = ContentInfo.storeData.getter(v23, *(_QWORD *)(v24 + 8));
    if (v25)
    {
      v26 = (void *)v25;
      _s7BooksUI13AnyPagedFrameVwxx_0(v36);
      *v14 = v26;
      swift_storeEnumTagMultiPayload(v14, v12, 4);
      v27 = v26;
      sub_DF1BC((uint64_t)v14, v32, v33, a5, v34, v35, a8);

      sub_224DC((uint64_t)v14, type metadata accessor for AssetAction.Kind);
LABEL_7:
      v28 = type metadata accessor for AssetAction(0);
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(a8, 0, 1, v28);
    }
    _s7BooksUI13AnyPagedFrameVwxx_0(v36);
  }
  else
  {
    sub_B3D0(a3, (uint64_t)v17, &qword_268370);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18) != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v21, v17, v18);
      (*(void (**)(_QWORD *, char *, uint64_t))(v19 + 16))(v14, v21, v18);
      swift_storeEnumTagMultiPayload(v14, v12, 6);
      sub_DF1BC((uint64_t)v14, v32, v33, a5, v34, v35, a8);
      sub_224DC((uint64_t)v14, type metadata accessor for AssetAction.Kind);
      (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
      goto LABEL_7;
    }
    sub_B414((uint64_t)v17, &qword_268370);
  }
  v30 = type metadata accessor for AssetAction(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(a8, 1, 1, v30);
}

uint64_t sub_DFD68@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;

  v14 = sub_5440(&qword_25E0C8);
  __chkstk_darwin(v14);
  v16 = (char *)&v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for AssetAction.Kind(0);
  __chkstk_darwin(v17);
  v20 = (char *)&v25 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(unsigned __int8 *)(a1 + 16) > 1u)
  {
    v24 = type metadata accessor for LocalizerRequest(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v16, 1, 1, v24);
    sub_DFACC((uint64_t)v16, a5 & 1, a6, a1, a2, a3, a4, a7);
    return sub_B414((uint64_t)v16, &qword_25E0C8);
  }
  else
  {
    swift_storeEnumTagMultiPayload(v20, v18, 11);
    v21 = type metadata accessor for LocalizerRequest(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v16, 1, 1, v21);
    sub_DF1BC((uint64_t)v20, (uint64_t)v16, a1, a2, a3, a4, a7);
    sub_B414((uint64_t)v16, &qword_25E0C8);
    sub_224DC((uint64_t)v20, type metadata accessor for AssetAction.Kind);
    v22 = type metadata accessor for AssetAction(0);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(a7, 0, 1, v22);
  }
}

uint64_t sub_DFF2C(char a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  const char *v13;
  unint64_t v14;
  uint64_t v16;

  v4 = type metadata accessor for LocalizerLookupStrategy(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for LocalizerDefaultValue(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(double *)(a2 + 40) != 0.0)
  {
    if ((a1 & 1) != 0)
    {
      LocalizerDefaultValue.init(stringLiteral:)("Continue Listening", 18, 2);
      (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for LocalizerLookupStrategy.default(_:), v4);
      v12 = 0xD000000000000034;
      v13 = "Books.SeriesRoom.QuickActionButton.ContinueListening";
    }
    else
    {
      LocalizerDefaultValue.init(stringLiteral:)("Continue Reading", 16, 2);
      (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for LocalizerLookupStrategy.default(_:), v4);
      v12 = 0xD000000000000032;
      v13 = "Books.SeriesRoom.QuickActionButton.ContinueReading";
    }
    goto LABEL_8;
  }
  if ((a1 & 1) != 0)
  {
    LocalizerDefaultValue.init(stringLiteral:)("Start Listening", 15, 2);
    (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for LocalizerLookupStrategy.default(_:), v4);
    v12 = 0xD000000000000031;
    v13 = "Books.SeriesRoom.QuickActionButton.StartListening";
LABEL_8:
    v14 = (unint64_t)(v13 - 32) | 0x8000000000000000;
    goto LABEL_9;
  }
  LocalizerDefaultValue.init(stringLiteral:)("Start Reading", 13, 2);
  (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for LocalizerLookupStrategy.default(_:), v4);
  v14 = 0x80000000001FC0E0;
  v12 = 0xD00000000000002FLL;
LABEL_9:
  static LocalizerRequest.string(forKey:with:defaultValue:using:)(v12, v14, 0, v11, v7);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

void sub_E0158(int a1@<W0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  char v27;
  void (*v28)(char *, uint64_t);
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  int v41;
  __int16 v42;
  __int16 v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(char *, uint64_t);
  char *v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _BYTE v72[40];

  v64 = a1;
  v71 = a3;
  v4 = type metadata accessor for SeriesOrdering(0);
  v62 = *(_QWORD *)(v4 - 8);
  v63 = v4;
  __chkstk_darwin(v4);
  v6 = (char *)&v61 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = type metadata accessor for LocalizerLookupStrategy(0);
  v65 = *(_QWORD *)(v69 - 8);
  __chkstk_darwin(v69);
  v66 = (char *)&v61 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v70 = type metadata accessor for LocalizerDefaultValue(0);
  v67 = *(_QWORD *)(v70 - 8);
  __chkstk_darwin(v70);
  v68 = (char *)&v61 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ContentKind(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v61 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v61 - v14;
  v16 = sub_5440(&qword_2630E8);
  __chkstk_darwin(v16);
  v18 = (char *)&v61 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for BookInfo(0);
  v20 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v22 = (char *)&v61 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_BD00((uint64_t)a2, (uint64_t)v72);
  v23 = sub_5440(&qword_262040);
  v24 = swift_dynamicCast(v18, v72, v23, v19, 6);
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v20 + 56);
  if ((v24 & 1) != 0)
  {
    v25(v18, 0, 1, v19);
    v26 = (*(uint64_t (**)(char *, char *, uint64_t))(v20 + 32))(v22, v18, v19);
    BookInfo.contentKind.getter(v26);
    (*(void (**)(char *, _QWORD, uint64_t))(v10 + 104))(v13, enum case for ContentKind.manga(_:), v9);
    v27 = static ContentKind.== infix(_:_:)(v15, v13);
    v28 = *(void (**)(char *, uint64_t))(v10 + 8);
    v28(v13, v9);
    v28(v15, v9);
    if ((v27 & 1) != 0)
    {
      v29 = v68;
      LocalizerDefaultValue.init(stringLiteral:)("Get Manga for Free", 18, 2);
      v31 = v65;
      v30 = v66;
      v32 = v69;
      (*(void (**)(char *, _QWORD, uint64_t))(v65 + 104))(v66, enum case for LocalizerLookupStrategy.default(_:), v69);
      static LocalizerRequest.string(forKey:with:defaultValue:using:)(0xD000000000000038, 0x80000000001FC290, 0, v29, v30);
      (*(void (**)(char *, uint64_t))(v31 + 8))(v30, v32);
      (*(void (**)(char *, uint64_t))(v67 + 8))(v29, v70);
      (*(void (**)(char *, uint64_t))(v20 + 8))(v22, v19);
      return;
    }
    (*(void (**)(char *, uint64_t))(v20 + 8))(v22, v19);
  }
  else
  {
    v25(v18, 1, 1, v19);
    sub_B414((uint64_t)v18, &qword_2630E8);
  }
  v33 = a2[3];
  v34 = a2[4];
  sub_5480(a2, v33);
  AssetInfo.seriesOrdering.getter(v33, v34);
  v35 = (*(uint64_t (**)(char *, uint64_t))(v62 + 88))(v6, v63);
  if (v35 != enum case for SeriesOrdering.notAvailable(_:) && v35 != enum case for SeriesOrdering.nonSeries(_:))
  {
    if (v35 == enum case for SeriesOrdering.orderedSeries(_:))
    {
      v36 = a2[3];
      v37 = a2[4];
      sub_5480(a2, v36);
      v38 = AssetInfo.sequenceNumber.getter(v36, v37);
      if ((v40 & 0x100000000) == 0)
      {
        v41 = v38;
        v42 = v39;
        v43 = v40;
        v44 = HIDWORD(v38);
        v45 = HIWORD(v38);
        v46 = v39 >> 16;
        v47 = HIDWORD(v39);
        v48 = HIWORD(v39);
        v49 = v40 >> 16;
        v50 = swift_allocObject(&unk_251AA8, 37, 7);
        *(_DWORD *)(v50 + 16) = v41;
        *(_WORD *)(v50 + 20) = v44;
        *(_WORD *)(v50 + 22) = v45;
        *(_WORD *)(v50 + 24) = v42;
        *(_WORD *)(v50 + 26) = v46;
        *(_WORD *)(v50 + 28) = v47;
        *(_WORD *)(v50 + 30) = v48;
        *(_WORD *)(v50 + 32) = v43;
        *(_WORD *)(v50 + 34) = v49;
        *(_BYTE *)(v50 + 36) = v64 & 1;
        static LocalizerRequest.custom(_:)(sub_E64C8, v50);
        swift_release(v50);
        return;
      }
    }
    else if (v35 != enum case for SeriesOrdering.unorderedSeries(_:))
    {
      _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000015, 0x80000000001FC1A0, "BooksUI/QuickActionBuyButtonView.swift", 38, 2, 243, 0);
      __break(1u);
      return;
    }
  }
  if ((v64 & 1) != 0)
  {
    v51 = v68;
    LocalizerDefaultValue.init(stringLiteral:)("Get a Free Audiobook", 20, 2);
    v53 = v65;
    v52 = v66;
    v54 = v69;
    (*(void (**)(char *, _QWORD, uint64_t))(v65 + 104))(v66, enum case for LocalizerLookupStrategy.default(_:), v69);
    static LocalizerRequest.string(forKey:with:defaultValue:using:)(0xD000000000000045, 0x80000000001FC220, 0, v51, v52);
    (*(void (**)(char *, uint64_t))(v53 + 8))(v52, v54);
    v55 = *(void (**)(char *, uint64_t))(v67 + 8);
    v56 = v51;
  }
  else
  {
    v57 = v68;
    LocalizerDefaultValue.init(stringLiteral:)("Get a Free Book", 15, 2);
    v59 = v65;
    v58 = v66;
    v60 = v69;
    (*(void (**)(char *, _QWORD, uint64_t))(v65 + 104))(v66, enum case for LocalizerLookupStrategy.default(_:), v69);
    static LocalizerRequest.string(forKey:with:defaultValue:using:)(0xD000000000000040, 0x80000000001FC1C0, 0, v57, v58);
    (*(void (**)(char *, uint64_t))(v59 + 8))(v58, v60);
    v55 = *(void (**)(char *, uint64_t))(v67 + 8);
    v56 = v57;
  }
  v55(v56, v70);
}

void sub_E076C(int a1@<W0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  char v27;
  void (*v28)(char *, uint64_t);
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  int v41;
  __int16 v42;
  __int16 v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(char *, uint64_t);
  char *v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _BYTE v72[40];

  v64 = a1;
  v71 = a3;
  v4 = type metadata accessor for SeriesOrdering(0);
  v62 = *(_QWORD *)(v4 - 8);
  v63 = v4;
  __chkstk_darwin(v4);
  v6 = (char *)&v61 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = type metadata accessor for LocalizerLookupStrategy(0);
  v65 = *(_QWORD *)(v69 - 8);
  __chkstk_darwin(v69);
  v66 = (char *)&v61 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v70 = type metadata accessor for LocalizerDefaultValue(0);
  v67 = *(_QWORD *)(v70 - 8);
  __chkstk_darwin(v70);
  v68 = (char *)&v61 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ContentKind(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v61 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v61 - v14;
  v16 = sub_5440(&qword_2630E8);
  __chkstk_darwin(v16);
  v18 = (char *)&v61 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for BookInfo(0);
  v20 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v22 = (char *)&v61 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_BD00((uint64_t)a2, (uint64_t)v72);
  v23 = sub_5440(&qword_262040);
  v24 = swift_dynamicCast(v18, v72, v23, v19, 6);
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v20 + 56);
  if ((v24 & 1) != 0)
  {
    v25(v18, 0, 1, v19);
    v26 = (*(uint64_t (**)(char *, char *, uint64_t))(v20 + 32))(v22, v18, v19);
    BookInfo.contentKind.getter(v26);
    (*(void (**)(char *, _QWORD, uint64_t))(v10 + 104))(v13, enum case for ContentKind.manga(_:), v9);
    v27 = static ContentKind.== infix(_:_:)(v15, v13);
    v28 = *(void (**)(char *, uint64_t))(v10 + 8);
    v28(v13, v9);
    v28(v15, v9);
    if ((v27 & 1) != 0)
    {
      v29 = v68;
      LocalizerDefaultValue.init(stringLiteral:)("Sample Manga for Free", 21, 2);
      v31 = v65;
      v30 = v66;
      v32 = v69;
      (*(void (**)(char *, _QWORD, uint64_t))(v65 + 104))(v66, enum case for LocalizerLookupStrategy.default(_:), v69);
      static LocalizerRequest.string(forKey:with:defaultValue:using:)(0xD000000000000033, 0x80000000001FC500, 0, v29, v30);
      (*(void (**)(char *, uint64_t))(v31 + 8))(v30, v32);
      (*(void (**)(char *, uint64_t))(v67 + 8))(v29, v70);
      (*(void (**)(char *, uint64_t))(v20 + 8))(v22, v19);
      return;
    }
    (*(void (**)(char *, uint64_t))(v20 + 8))(v22, v19);
  }
  else
  {
    v25(v18, 1, 1, v19);
    sub_B414((uint64_t)v18, &qword_2630E8);
  }
  v33 = a2[3];
  v34 = a2[4];
  sub_5480(a2, v33);
  AssetInfo.seriesOrdering.getter(v33, v34);
  v35 = (*(uint64_t (**)(char *, uint64_t))(v62 + 88))(v6, v63);
  if (v35 != enum case for SeriesOrdering.notAvailable(_:) && v35 != enum case for SeriesOrdering.nonSeries(_:))
  {
    if (v35 == enum case for SeriesOrdering.orderedSeries(_:))
    {
      v36 = a2[3];
      v37 = a2[4];
      sub_5480(a2, v36);
      v38 = AssetInfo.sequenceNumber.getter(v36, v37);
      if ((v40 & 0x100000000) == 0)
      {
        v41 = v38;
        v42 = v39;
        v43 = v40;
        v44 = HIDWORD(v38);
        v45 = HIWORD(v38);
        v46 = v39 >> 16;
        v47 = HIDWORD(v39);
        v48 = HIWORD(v39);
        v49 = v40 >> 16;
        v50 = swift_allocObject(&unk_251AD0, 37, 7);
        *(_DWORD *)(v50 + 16) = v41;
        *(_WORD *)(v50 + 20) = v44;
        *(_WORD *)(v50 + 22) = v45;
        *(_WORD *)(v50 + 24) = v42;
        *(_WORD *)(v50 + 26) = v46;
        *(_WORD *)(v50 + 28) = v47;
        *(_WORD *)(v50 + 30) = v48;
        *(_WORD *)(v50 + 32) = v43;
        *(_WORD *)(v50 + 34) = v49;
        *(_BYTE *)(v50 + 36) = v64 & 1;
        static LocalizerRequest.custom(_:)(sub_E64E4, v50);
        swift_release(v50);
        return;
      }
    }
    else if (v35 != enum case for SeriesOrdering.unorderedSeries(_:))
    {
      _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000015, 0x80000000001FC1A0, "BooksUI/QuickActionBuyButtonView.swift", 38, 2, 277, 0);
      __break(1u);
      return;
    }
  }
  if ((v64 & 1) != 0)
  {
    v51 = v68;
    LocalizerDefaultValue.init(stringLiteral:)("Listen to a Free Preview", 24, 2);
    v53 = v65;
    v52 = v66;
    v54 = v69;
    (*(void (**)(char *, _QWORD, uint64_t))(v65 + 104))(v66, enum case for LocalizerLookupStrategy.default(_:), v69);
    static LocalizerRequest.string(forKey:with:defaultValue:using:)(0xD000000000000047, 0x80000000001FC490, 0, v51, v52);
    (*(void (**)(char *, uint64_t))(v53 + 8))(v52, v54);
    v55 = *(void (**)(char *, uint64_t))(v67 + 8);
    v56 = v51;
  }
  else
  {
    v57 = v68;
    LocalizerDefaultValue.init(stringLiteral:)("Read a Free Sample", 18, 2);
    v59 = v65;
    v58 = v66;
    v60 = v69;
    (*(void (**)(char *, _QWORD, uint64_t))(v65 + 104))(v66, enum case for LocalizerLookupStrategy.default(_:), v69);
    static LocalizerRequest.string(forKey:with:defaultValue:using:)(0xD000000000000042, 0x80000000001FC420, 0, v57, v58);
    (*(void (**)(char *, uint64_t))(v59 + 8))(v58, v60);
    v55 = *(void (**)(char *, uint64_t))(v67 + 8);
    v56 = v57;
  }
  v55(v56, v70);
}

uint64_t sub_E0D80(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  NSDecimalNumber *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t inited;
  unint64_t v24;
  _BYTE *v25;
  unint64_t v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE v31[12];
  int v32;
  _BYTE *v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE v36[64];
  _BYTE v37[72];

  v32 = a5;
  v6 = type metadata accessor for LocalizerDefaultValue(0);
  v34 = *(_QWORD *)(v6 - 8);
  v35 = v6;
  __chkstk_darwin(v6);
  v33 = &v31[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = type metadata accessor for LocalizerContext(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = &v31[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = a1[3];
  v12 = a1[4];
  sub_5480(a1, v13);
  NSDecimal._bridgeToObjectiveC()(v14);
  v16 = v15;
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v9 + 104))(v11, enum case for LocalizerContext.standalone(_:), v8);
  v17 = Localizer.decimal(forNumber:in:)((uint64_t)v16, (uint64_t)v11, v13, v12);
  v19 = v18;

  (*(void (**)(_BYTE *, uint64_t))(v9 + 8))(v11, v8);
  v20 = a1[3];
  v21 = a1[4];
  sub_5480(a1, v20);
  v22 = sub_5440(&qword_261FB8);
  if ((v32 & 1) != 0)
  {
    inited = swift_initStackObject(v22, v36);
    *(_OWORD *)(inited + 16) = xmmword_1E0B70;
    *(_QWORD *)(inited + 32) = 0xD000000000000014;
    *(_QWORD *)(inited + 40) = 0x80000000001FC340;
    *(_QWORD *)(inited + 48) = v17;
    *(_QWORD *)(inited + 56) = v19;
    v24 = sub_965C(inited);
    v25 = v33;
    LocalizerDefaultValue.init(stringLiteral:)("Get Audiobook @@sequenceNumberString@@ for Free", 47, 2);
    v26 = 0xD000000000000052;
    v27 = "Books.SeriesRoom.QuickActionButton.Audiobook.OrderedSeries.SequenceNumber.FreeBook";
  }
  else
  {
    v28 = swift_initStackObject(v22, v37);
    *(_OWORD *)(v28 + 16) = xmmword_1E0B70;
    *(_QWORD *)(v28 + 32) = 0xD000000000000014;
    *(_QWORD *)(v28 + 40) = 0x80000000001FC340;
    *(_QWORD *)(v28 + 48) = v17;
    *(_QWORD *)(v28 + 56) = v19;
    v24 = sub_965C(v28);
    v25 = v33;
    LocalizerDefaultValue.init(stringLiteral:)("Get Book @@sequenceNumberString@@ for Free", 42, 2);
    v26 = 0xD00000000000004DLL;
    v27 = "Books.SeriesRoom.QuickActionButton.Book.OrderedSeries.SequenceNumber.FreeBook";
  }
  v29 = Localizer.string(forKey:with:defaultValue:)(v26, (unint64_t)(v27 - 32) | 0x8000000000000000, v24, v25, v20, v21);
  swift_bridgeObjectRelease(v24);
  (*(void (**)(_BYTE *, uint64_t))(v34 + 8))(v25, v35);
  return v29;
}

uint64_t sub_E0FF8(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  NSDecimalNumber *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t inited;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char v41[64];
  char v42[72];

  v37 = a5;
  v36 = type metadata accessor for LocalizerLookupStrategy(0);
  v35 = *(_QWORD *)(v36 - 8);
  __chkstk_darwin(v36);
  v34 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for LocalizerDefaultValue(0);
  v39 = *(_QWORD *)(v7 - 8);
  v40 = v7;
  __chkstk_darwin(v7);
  v38 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for LocalizerContext(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1[3];
  v13 = a1[4];
  sub_5480(a1, v14);
  NSDecimal._bridgeToObjectiveC()(v15);
  v17 = v16;
  (*(void (**)(char *, _QWORD, uint64_t))(v10 + 104))(v12, enum case for LocalizerContext.standalone(_:), v9);
  v18 = Localizer.decimal(forNumber:in:)((uint64_t)v17, (uint64_t)v12, v14, v13);
  v20 = v19;

  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  v21 = a1[3];
  v22 = a1[4];
  sub_5480(a1, v21);
  v23 = sub_5440(&qword_261FB8);
  if ((v37 & 1) != 0)
  {
    inited = swift_initStackObject(v23, v41);
    *(_OWORD *)(inited + 16) = xmmword_1E0B70;
    *(_QWORD *)(inited + 32) = 0xD000000000000014;
    *(_QWORD *)(inited + 40) = 0x80000000001FC340;
    *(_QWORD *)(inited + 48) = v18;
    *(_QWORD *)(inited + 56) = v20;
    v25 = sub_965C(inited);
    v26 = v38;
    LocalizerDefaultValue.init(stringLiteral:)("Preview Audiobook @@sequenceNumberString@@ for Free", 51, 2);
    v27 = Localizer.string(forKey:with:defaultValue:)(0xD000000000000054, 0x80000000001FC5E0, v25, v26, v21, v22);
    swift_bridgeObjectRelease(v25);
  }
  else
  {
    v28 = swift_initStackObject(v23, v42);
    *(_OWORD *)(v28 + 16) = xmmword_1E0B70;
    *(_QWORD *)(v28 + 32) = 0xD000000000000014;
    *(_QWORD *)(v28 + 40) = 0x80000000001FC340;
    *(_QWORD *)(v28 + 48) = v18;
    *(_QWORD *)(v28 + 56) = v20;
    v29 = sub_965C(v28);
    v26 = v38;
    LocalizerDefaultValue.init(stringLiteral:)("Sample Book @@sequenceNumberString@@ for Free", 45, 2);
    v30 = v35;
    v31 = v34;
    v32 = v36;
    (*(void (**)(char *, _QWORD, uint64_t))(v35 + 104))(v34, enum case for LocalizerLookupStrategy.default(_:), v36);
    v27 = dispatch thunk of Localizer.string(forKey:with:defaultValue:using:)(0xD00000000000004FLL, 0x80000000001FC560, v29, v26, v31, v21, v22);
    swift_bridgeObjectRelease(v29);
    (*(void (**)(char *, uint64_t))(v30 + 8))(v31, v32);
  }
  (*(void (**)(char *, uint64_t))(v39 + 8))(v26, v40);
  return v27;
}

uint64_t sub_E1328@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1EAE68);
  v5 = swift_getKeyPath(&unk_1EAE90);
  static Published.subscript.getter(&v7, v3, KeyPath, v5);
  swift_release(KeyPath);
  result = swift_release(v5);
  *a2 = v7;
  return result;
}

uint64_t sub_E13A4(char *a1, void **a2)
{
  char v2;
  void *v3;
  uint64_t KeyPath;
  uint64_t v5;
  char v7;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1EAE68);
  v5 = swift_getKeyPath(&unk_1EAE90);
  v7 = v2;
  return static Published.subscript.setter(&v7, v3, KeyPath, v5);
}

unint64_t sub_E141C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2649A8;
  if (!qword_2649A8)
  {
    v1 = sub_7EF8(&qword_2649A0);
    sub_6FD0(&qword_2618B0, type metadata accessor for ButtonView, (uint64_t)&protocol conformance descriptor for ButtonView);
    sub_E14A0();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_2649A8);
  }
  return result;
}

unint64_t sub_E14A0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_261BF0;
  if (!qword_261BF0)
  {
    v1 = sub_7EF8(&qword_261BF8);
    result = swift_getWitnessTable(&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>, v1);
    atomic_store(result, (unint64_t *)&qword_261BF0);
  }
  return result;
}

uint64_t sub_E14EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ButtonViewModel.Content(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_E1530(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ButtonViewModel.ActionKind(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_E157C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &opaque type descriptor for <<opaque return type of QuickActionBuyButtonView.body>>, 1);
}

_QWORD *initializeBufferWithCopyOfBuffer for QuickActionBuyButtonView(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  int v5;
  int *v6;
  uint64_t v7;
  void (*v8)(_QWORD *, _QWORD *, uint64_t);
  int *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  id v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(_QWORD *, _QWORD *, uint64_t);
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  __int128 v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  __int128 v79;
  uint64_t v80;
  _QWORD *v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  __int16 v94;
  char v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  char *v107;
  uint64_t v108;
  void *v109;
  id v110;
  uint64_t v112;
  int *v113;
  _QWORD *v114;
  _QWORD *v115;

  v4 = type metadata accessor for QuickActionBuyButtonViewModel(0);
  v5 = *(_DWORD *)(*(_QWORD *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v18 = *a2;
    *a1 = *a2;
    v19 = (_QWORD *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v18);
  }
  else
  {
    v6 = (int *)v4;
    v7 = sub_5440(&qword_25FC38);
    v8 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v9 = (int *)type metadata accessor for ButtonViewModel(0);
    v8((_QWORD *)((char *)a1 + v9[5]), (_QWORD *)((char *)a2 + v9[5]), v7);
    v10 = v9[6];
    v11 = (_QWORD *)((char *)a1 + v10);
    v12 = (_QWORD *)((char *)a2 + v10);
    v13 = sub_5440(&qword_25F1E8);
    if (swift_getEnumCaseMultiPayload(v12, v13) == 1)
    {
      v14 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v11, v12, v14);
      v15 = v11;
      v16 = v13;
      v17 = 1;
    }
    else
    {
      v20 = *v12;
      *v11 = *v12;
      swift_retain(v20);
      v15 = v11;
      v16 = v13;
      v17 = 0;
    }
    swift_storeEnumTagMultiPayload(v15, v16, v17);
    *((_BYTE *)a1 + v9[7]) = *((_BYTE *)a2 + v9[7]);
    *((_BYTE *)a1 + v9[8]) = *((_BYTE *)a2 + v9[8]);
    *((_BYTE *)a1 + v9[9]) = *((_BYTE *)a2 + v9[9]);
    v21 = v9[10];
    v22 = (_QWORD *)((char *)a1 + v21);
    v23 = (_QWORD *)((char *)a2 + v21);
    v24 = *v23;
    if (*v23 >= 3uLL)
    {
      v26 = v23[1];
      v27 = v23[2];
      *v22 = v24;
      v22[1] = v26;
      v28 = v23[3];
      v22[2] = v27;
      v22[3] = v28;
      swift_retain(v24);
      swift_retain(v26);
      swift_retain(v27);
      swift_retain(v28);
    }
    else
    {
      v25 = *((_OWORD *)v23 + 1);
      *(_OWORD *)v22 = *(_OWORD *)v23;
      *((_OWORD *)v22 + 1) = v25;
    }
    v29 = v9[11];
    v30 = (_QWORD *)((char *)a1 + v29);
    v31 = (_QWORD *)((char *)a2 + v29);
    v32 = type metadata accessor for ButtonViewModel.Content(0);
    switch(swift_getEnumCaseMultiPayload(v31, v32))
    {
      case 0u:
        v33 = type metadata accessor for LocalizerRequest(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v33 - 8) + 16))(v30, v31, v33);
        v34 = v30;
        v35 = v32;
        v36 = 0;
        goto LABEL_17;
      case 1u:
        v37 = v31[1];
        *v30 = *v31;
        v30[1] = v37;
        swift_bridgeObjectRetain(v37);
        v34 = v30;
        v35 = v32;
        v36 = 1;
        goto LABEL_17;
      case 2u:
        v38 = v31[1];
        *v30 = *v31;
        v30[1] = v38;
        v39 = (void *)v31[2];
        v30[2] = v39;
        swift_bridgeObjectRetain(v38);
        v40 = v39;
        v41 = *(int *)(sub_5440(&qword_2621A8) + 64);
        v42 = (char *)v30 + v41;
        v43 = (char *)v31 + v41;
        v44 = type metadata accessor for LocalizerRequest(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v44 - 8) + 16))(v42, v43, v44);
        v34 = v30;
        v35 = v32;
        v36 = 2;
        goto LABEL_17;
      case 3u:
        v45 = v31[1];
        *v30 = *v31;
        v30[1] = v45;
        swift_bridgeObjectRetain(v45);
        v46 = *(int *)(sub_5440(&qword_2621B0) + 48);
        v47 = (char *)v30 + v46;
        v48 = (char *)v31 + v46;
        v49 = type metadata accessor for LocalizerRequest(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v49 - 8) + 16))(v47, v48, v49);
        v34 = v30;
        v35 = v32;
        v36 = 3;
        goto LABEL_17;
      case 4u:
        v50 = type metadata accessor for LocalizerRequest(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v50 - 8) + 16))(v30, v31, v50);
        v51 = *(int *)(sub_5440(&qword_2621B8) + 48);
        v52 = (_QWORD *)((char *)v30 + v51);
        v53 = (_QWORD *)((char *)v31 + v51);
        v54 = v53[1];
        *v52 = *v53;
        v52[1] = v54;
        swift_bridgeObjectRetain(v54);
        v34 = v30;
        v35 = v32;
        v36 = 4;
        goto LABEL_17;
      case 5u:
        v55 = type metadata accessor for LocalizerRequest(0);
        v56 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v55 - 8) + 16);
        v56(v30, v31, v55);
        v57 = sub_5440(&qword_2621C0);
        v56((_QWORD *)((char *)v30 + *(int *)(v57 + 48)), (_QWORD *)((char *)v31 + *(int *)(v57 + 48)), v55);
        v34 = v30;
        v35 = v32;
        v36 = 5;
LABEL_17:
        swift_storeEnumTagMultiPayload(v34, v35, v36);
        break;
      default:
        memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
        break;
    }
    *((_BYTE *)a1 + v9[12]) = *((_BYTE *)a2 + v9[12]);
    v58 = v9[13];
    v59 = (char *)a1 + v58;
    v60 = (char *)a2 + v58;
    v61 = type metadata accessor for ButtonViewModel.ActionKind(0);
    if (swift_getEnumCaseMultiPayload(v60, v61) == 1)
    {
      v62 = type metadata accessor for URL(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v62 - 8) + 16))(v59, v60, v62);
      v63 = 1;
    }
    else
    {
      v63 = *((_QWORD *)v60 + 3);
      if (v63)
      {
        v64 = *((_QWORD *)v60 + 4);
        *((_QWORD *)v59 + 3) = v63;
        *((_QWORD *)v59 + 4) = v64;
        (**(void (***)(char *, char *))(v63 - 8))(v59, v60);
        v63 = 0;
      }
      else
      {
        v65 = *((_OWORD *)v60 + 1);
        *(_OWORD *)v59 = *(_OWORD *)v60;
        *((_OWORD *)v59 + 1) = v65;
        *((_QWORD *)v59 + 4) = *((_QWORD *)v60 + 4);
      }
    }
    swift_storeEnumTagMultiPayload(v59, v61, v63);
    v66 = v9[14];
    v67 = (char *)a1 + v66;
    v68 = (char *)a2 + v66;
    v69 = type metadata accessor for LocalizerRequest(0);
    v70 = *(_QWORD *)(v69 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v70 + 48))(v68, 1, v69))
    {
      v71 = sub_5440(&qword_25E0C8);
      memcpy(v67, v68, *(_QWORD *)(*(_QWORD *)(v71 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v70 + 16))(v67, v68, v69);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v70 + 56))(v67, 0, 1, v69);
    }
    v72 = v6[5];
    v73 = *(_OWORD *)((char *)a2 + v72 + 24);
    *(_OWORD *)((char *)a1 + v72 + 24) = v73;
    (**(void (***)(void))(v73 - 8))();
    v74 = v6[6];
    v75 = (char *)a1 + v74;
    v76 = (char *)a2 + v74;
    v77 = *(_QWORD *)((char *)a2 + v74 + 24);
    if (v77)
    {
      v78 = *((_QWORD *)v76 + 4);
      *((_QWORD *)v75 + 3) = v77;
      *((_QWORD *)v75 + 4) = v78;
      (**(void (***)(void))(v77 - 8))();
    }
    else
    {
      v79 = *((_OWORD *)v76 + 1);
      *(_OWORD *)v75 = *(_OWORD *)v76;
      *((_OWORD *)v75 + 1) = v79;
      *((_QWORD *)v75 + 4) = *((_QWORD *)v76 + 4);
    }
    v80 = v6[7];
    v81 = (_QWORD *)((char *)a1 + v80);
    v82 = (_QWORD *)((char *)a2 + v80);
    v83 = v82[1];
    *v81 = *v82;
    v81[1] = v83;
    v84 = v6[8];
    v114 = a1;
    v115 = a2;
    v85 = (char *)a1 + v84;
    v86 = (char *)v115 + v84;
    v87 = *(_QWORD *)v86;
    v88 = *((_QWORD *)v86 + 1);
    v89 = *((_QWORD *)v86 + 2);
    v90 = *((_QWORD *)v86 + 3);
    v113 = v6;
    v91 = *((_QWORD *)v86 + 4);
    v92 = *((_QWORD *)v86 + 5);
    v93 = *((_QWORD *)v86 + 7);
    v112 = *((_QWORD *)v86 + 6);
    v94 = *((_WORD *)v86 + 32);
    v95 = v86[66];
    swift_bridgeObjectRetain(v83);
    sub_3480C(v87, v88, v89, v90, v91, v92, v112, v93, v94, v95);
    *(_QWORD *)v85 = v87;
    *((_QWORD *)v85 + 1) = v88;
    *((_QWORD *)v85 + 2) = v89;
    *((_QWORD *)v85 + 3) = v90;
    *((_QWORD *)v85 + 4) = v91;
    *((_QWORD *)v85 + 5) = v92;
    v19 = v114;
    *((_QWORD *)v85 + 6) = v112;
    *((_QWORD *)v85 + 7) = v93;
    *((_WORD *)v85 + 32) = v94;
    v85[66] = v95;
    v96 = v113[9];
    v97 = (_QWORD *)((char *)v114 + v96);
    v98 = (_QWORD *)((char *)v115 + v96);
    v99 = sub_5440(&qword_25F758);
    if (swift_getEnumCaseMultiPayload(v98, v99) == 1)
    {
      v100 = type metadata accessor for UUID(0);
      v101 = *(_QWORD *)(v100 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v101 + 48))(v98, 1, v100))
      {
        v102 = sub_5440(&qword_25FAC0);
        memcpy(v97, v98, *(_QWORD *)(*(_QWORD *)(v102 - 8) + 64));
        v103 = 1;
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v101 + 16))(v97, v98, v100);
        v103 = 1;
        (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v101 + 56))(v97, 0, 1, v100);
      }
    }
    else
    {
      v104 = *v98;
      *v97 = *v98;
      swift_retain(v104);
      v103 = 0;
    }
    swift_storeEnumTagMultiPayload(v97, v99, v103);
    v105 = v113[10];
    v106 = (_QWORD *)((char *)v114 + v105);
    v107 = (char *)v115 + v105;
    v109 = *(void **)v107;
    v108 = *((_QWORD *)v107 + 1);
    *v106 = v109;
    v106[1] = v108;
    v110 = v109;
  }
  return v19;
}

void destroy for QuickActionBuyButtonView(uint64_t a1)
{
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t);
  int *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t);
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int *v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v2 = sub_5440(&qword_25FC38);
  v3 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8);
  v3(a1, v2);
  v4 = (int *)type metadata accessor for ButtonViewModel(0);
  v3(a1 + v4[5], v2);
  v5 = (_QWORD *)(a1 + v4[6]);
  v6 = sub_5440(&qword_25F1E8);
  if (swift_getEnumCaseMultiPayload(v5, v6) == 1)
  {
    v7 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v5, v7);
  }
  else
  {
    swift_release(*v5);
  }
  v8 = (_QWORD *)(a1 + v4[10]);
  if (*v8 >= 3uLL)
  {
    swift_release(*v8);
    swift_release(v8[1]);
    swift_release(v8[2]);
    swift_release(v8[3]);
  }
  v9 = a1 + v4[11];
  v10 = type metadata accessor for ButtonViewModel.Content(0);
  switch(swift_getEnumCaseMultiPayload(v9, v10))
  {
    case 0u:
      goto LABEL_11;
    case 1u:
      swift_bridgeObjectRelease(*(_QWORD *)(v9 + 8));
      break;
    case 2u:
      swift_bridgeObjectRelease(*(_QWORD *)(v9 + 8));

      v11 = *(int *)(sub_5440(&qword_2621A8) + 64);
      goto LABEL_10;
    case 3u:
      swift_bridgeObjectRelease(*(_QWORD *)(v9 + 8));
      v11 = *(int *)(sub_5440(&qword_2621B0) + 48);
LABEL_10:
      v9 += v11;
LABEL_11:
      v12 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v9, v12);
      break;
    case 4u:
      v13 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v9, v13);
      v14 = sub_5440(&qword_2621B8);
      swift_bridgeObjectRelease(*(_QWORD *)(v9 + *(int *)(v14 + 48) + 8));
      break;
    case 5u:
      v15 = type metadata accessor for LocalizerRequest(0);
      v16 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8);
      v16(v9, v15);
      v17 = sub_5440(&qword_2621C0);
      v16(v9 + *(int *)(v17 + 48), v15);
      break;
    default:
      break;
  }
  v18 = (_QWORD *)(a1 + v4[13]);
  v19 = type metadata accessor for ButtonViewModel.ActionKind(0);
  if (swift_getEnumCaseMultiPayload(v18, v19) == 1)
  {
    v20 = type metadata accessor for URL(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(v18, v20);
  }
  else if (v18[3])
  {
    _s7BooksUI13AnyPagedFrameVwxx_0(v18);
  }
  v21 = a1 + v4[14];
  v22 = type metadata accessor for LocalizerRequest(0);
  v23 = *(_QWORD *)(v22 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
    (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v21, v22);
  v24 = (int *)type metadata accessor for QuickActionBuyButtonViewModel(0);
  _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)(a1 + v24[5]));
  v25 = (_QWORD *)(a1 + v24[6]);
  if (v25[3])
    _s7BooksUI13AnyPagedFrameVwxx_0(v25);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + v24[7] + 8));
  v26 = a1 + v24[8];
  sub_BDF8(*(_QWORD *)v26, *(_QWORD *)(v26 + 8), *(_QWORD *)(v26 + 16), *(_QWORD *)(v26 + 24), *(_QWORD *)(v26 + 32), *(_QWORD *)(v26 + 40), *(_QWORD *)(v26 + 48), *(_QWORD *)(v26 + 56), *(_WORD *)(v26 + 64), *(_BYTE *)(v26 + 66));
  v27 = (_QWORD *)(a1 + v24[9]);
  v28 = sub_5440(&qword_25F758);
  if (swift_getEnumCaseMultiPayload(v27, v28) == 1)
  {
    v29 = type metadata accessor for UUID(0);
    v30 = *(_QWORD *)(v29 - 8);
    if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v30 + 48))(v27, 1, v29))
      (*(void (**)(_QWORD *, uint64_t))(v30 + 8))(v27, v29);
  }
  else
  {
    swift_release(*v27);
  }

}

uint64_t initializeWithCopy for QuickActionBuyButtonView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, uint64_t);
  int *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  id v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(_QWORD *, _QWORD *, uint64_t);
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  void *v62;
  const void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int *v67;
  uint64_t v68;
  __int128 v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  __int128 v75;
  uint64_t v76;
  _QWORD *v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  __int16 v90;
  char v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;
  void *v105;
  id v106;
  uint64_t v108;
  int *v109;
  uint64_t v110;
  uint64_t v111;

  v4 = sub_5440(&qword_25FC38);
  v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16);
  v5(a1, a2, v4);
  v6 = (int *)type metadata accessor for ButtonViewModel(0);
  v5(a1 + v6[5], a2 + v6[5], v4);
  v7 = v6[6];
  v8 = (uint64_t *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v10 = sub_5440(&qword_25F1E8);
  if (swift_getEnumCaseMultiPayload(v9, v10) == 1)
  {
    v11 = type metadata accessor for ColorScheme(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v8, v9, v11);
    v12 = v8;
    v13 = v10;
    v14 = 1;
  }
  else
  {
    v15 = *v9;
    *v8 = *v9;
    swift_retain(v15);
    v12 = v8;
    v13 = v10;
    v14 = 0;
  }
  swift_storeEnumTagMultiPayload(v12, v13, v14);
  *(_BYTE *)(a1 + v6[7]) = *(_BYTE *)(a2 + v6[7]);
  *(_BYTE *)(a1 + v6[8]) = *(_BYTE *)(a2 + v6[8]);
  *(_BYTE *)(a1 + v6[9]) = *(_BYTE *)(a2 + v6[9]);
  v16 = v6[10];
  v17 = (_QWORD *)(a1 + v16);
  v18 = (_QWORD *)(a2 + v16);
  v19 = *v18;
  if (*v18 >= 3uLL)
  {
    v21 = v18[1];
    v22 = v18[2];
    *v17 = v19;
    v17[1] = v21;
    v23 = v18[3];
    v17[2] = v22;
    v17[3] = v23;
    swift_retain(v19);
    swift_retain(v21);
    swift_retain(v22);
    swift_retain(v23);
  }
  else
  {
    v20 = *((_OWORD *)v18 + 1);
    *(_OWORD *)v17 = *(_OWORD *)v18;
    *((_OWORD *)v17 + 1) = v20;
  }
  v24 = v6[11];
  v25 = (_QWORD *)(a1 + v24);
  v26 = (_QWORD *)(a2 + v24);
  v27 = type metadata accessor for ButtonViewModel.Content(0);
  switch(swift_getEnumCaseMultiPayload(v26, v27))
  {
    case 0u:
      v28 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v28 - 8) + 16))(v25, v26, v28);
      v29 = v25;
      v30 = v27;
      v31 = 0;
      goto LABEL_15;
    case 1u:
      v32 = v26[1];
      *v25 = *v26;
      v25[1] = v32;
      swift_bridgeObjectRetain(v32);
      v29 = v25;
      v30 = v27;
      v31 = 1;
      goto LABEL_15;
    case 2u:
      v33 = v26[1];
      *v25 = *v26;
      v25[1] = v33;
      v34 = (void *)v26[2];
      v25[2] = v34;
      swift_bridgeObjectRetain(v33);
      v35 = v34;
      v36 = *(int *)(sub_5440(&qword_2621A8) + 64);
      v37 = (char *)v25 + v36;
      v38 = (char *)v26 + v36;
      v39 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v39 - 8) + 16))(v37, v38, v39);
      v29 = v25;
      v30 = v27;
      v31 = 2;
      goto LABEL_15;
    case 3u:
      v40 = v26[1];
      *v25 = *v26;
      v25[1] = v40;
      swift_bridgeObjectRetain(v40);
      v41 = *(int *)(sub_5440(&qword_2621B0) + 48);
      v42 = (char *)v25 + v41;
      v43 = (char *)v26 + v41;
      v44 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v44 - 8) + 16))(v42, v43, v44);
      v29 = v25;
      v30 = v27;
      v31 = 3;
      goto LABEL_15;
    case 4u:
      v45 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v45 - 8) + 16))(v25, v26, v45);
      v46 = *(int *)(sub_5440(&qword_2621B8) + 48);
      v47 = (_QWORD *)((char *)v25 + v46);
      v48 = (_QWORD *)((char *)v26 + v46);
      v49 = v48[1];
      *v47 = *v48;
      v47[1] = v49;
      swift_bridgeObjectRetain(v49);
      v29 = v25;
      v30 = v27;
      v31 = 4;
      goto LABEL_15;
    case 5u:
      v50 = type metadata accessor for LocalizerRequest(0);
      v51 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v50 - 8) + 16);
      v51(v25, v26, v50);
      v52 = sub_5440(&qword_2621C0);
      v51((_QWORD *)((char *)v25 + *(int *)(v52 + 48)), (_QWORD *)((char *)v26 + *(int *)(v52 + 48)), v50);
      v29 = v25;
      v30 = v27;
      v31 = 5;
LABEL_15:
      swift_storeEnumTagMultiPayload(v29, v30, v31);
      break;
    default:
      memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
      break;
  }
  *(_BYTE *)(a1 + v6[12]) = *(_BYTE *)(a2 + v6[12]);
  v53 = v6[13];
  v54 = a1 + v53;
  v55 = a2 + v53;
  v56 = type metadata accessor for ButtonViewModel.ActionKind(0);
  if (swift_getEnumCaseMultiPayload(v55, v56) == 1)
  {
    v57 = type metadata accessor for URL(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v57 - 8) + 16))(v54, v55, v57);
    v58 = 1;
  }
  else
  {
    v58 = *(_QWORD *)(v55 + 24);
    if (v58)
    {
      v59 = *(_QWORD *)(v55 + 32);
      *(_QWORD *)(v54 + 24) = v58;
      *(_QWORD *)(v54 + 32) = v59;
      (**(void (***)(uint64_t, uint64_t))(v58 - 8))(v54, v55);
      v58 = 0;
    }
    else
    {
      v60 = *(_OWORD *)(v55 + 16);
      *(_OWORD *)v54 = *(_OWORD *)v55;
      *(_OWORD *)(v54 + 16) = v60;
      *(_QWORD *)(v54 + 32) = *(_QWORD *)(v55 + 32);
    }
  }
  swift_storeEnumTagMultiPayload(v54, v56, v58);
  v61 = v6[14];
  v62 = (void *)(a1 + v61);
  v63 = (const void *)(a2 + v61);
  v64 = type metadata accessor for LocalizerRequest(0);
  v65 = *(_QWORD *)(v64 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v65 + 48))(v63, 1, v64))
  {
    v66 = sub_5440(&qword_25E0C8);
    memcpy(v62, v63, *(_QWORD *)(*(_QWORD *)(v66 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v65 + 16))(v62, v63, v64);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v65 + 56))(v62, 0, 1, v64);
  }
  v67 = (int *)type metadata accessor for QuickActionBuyButtonViewModel(0);
  v68 = v67[5];
  v69 = *(_OWORD *)(a2 + v68 + 24);
  *(_OWORD *)(a1 + v68 + 24) = v69;
  (**(void (***)(void))(v69 - 8))();
  v70 = v67[6];
  v71 = a1 + v70;
  v72 = a2 + v70;
  v73 = *(_QWORD *)(a2 + v70 + 24);
  if (v73)
  {
    v74 = *(_QWORD *)(v72 + 32);
    *(_QWORD *)(v71 + 24) = v73;
    *(_QWORD *)(v71 + 32) = v74;
    (**(void (***)(void))(v73 - 8))();
  }
  else
  {
    v75 = *(_OWORD *)(v72 + 16);
    *(_OWORD *)v71 = *(_OWORD *)v72;
    *(_OWORD *)(v71 + 16) = v75;
    *(_QWORD *)(v71 + 32) = *(_QWORD *)(v72 + 32);
  }
  v76 = v67[7];
  v77 = (_QWORD *)(a1 + v76);
  v78 = (_QWORD *)(a2 + v76);
  v79 = v78[1];
  *v77 = *v78;
  v77[1] = v79;
  v80 = v67[8];
  v110 = a2;
  v111 = a1;
  v81 = a1 + v80;
  v82 = a2 + v80;
  v83 = *(_QWORD *)v82;
  v84 = *(_QWORD *)(v82 + 8);
  v85 = *(_QWORD *)(v82 + 16);
  v86 = *(_QWORD *)(v82 + 24);
  v87 = *(_QWORD *)(v82 + 32);
  v88 = *(_QWORD *)(v82 + 40);
  v89 = *(_QWORD *)(v82 + 56);
  v108 = *(_QWORD *)(v82 + 48);
  v109 = v67;
  v90 = *(_WORD *)(v82 + 64);
  v91 = *(_BYTE *)(v82 + 66);
  swift_bridgeObjectRetain(v79);
  sub_3480C(v83, v84, v85, v86, v87, v88, v108, v89, v90, v91);
  *(_QWORD *)v81 = v83;
  *(_QWORD *)(v81 + 8) = v84;
  *(_QWORD *)(v81 + 16) = v85;
  *(_QWORD *)(v81 + 24) = v86;
  *(_QWORD *)(v81 + 32) = v87;
  *(_QWORD *)(v81 + 40) = v88;
  *(_QWORD *)(v81 + 48) = v108;
  *(_QWORD *)(v81 + 56) = v89;
  *(_WORD *)(v81 + 64) = v90;
  *(_BYTE *)(v81 + 66) = v91;
  v92 = v109[9];
  v93 = (uint64_t *)(v111 + v92);
  v94 = (uint64_t *)(v110 + v92);
  v95 = sub_5440(&qword_25F758);
  if (swift_getEnumCaseMultiPayload(v94, v95) == 1)
  {
    v96 = type metadata accessor for UUID(0);
    v97 = *(_QWORD *)(v96 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v97 + 48))(v94, 1, v96))
    {
      v98 = sub_5440(&qword_25FAC0);
      memcpy(v93, v94, *(_QWORD *)(*(_QWORD *)(v98 - 8) + 64));
      v99 = 1;
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v97 + 16))(v93, v94, v96);
      v99 = 1;
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v97 + 56))(v93, 0, 1, v96);
    }
  }
  else
  {
    v100 = *v94;
    *v93 = *v94;
    swift_retain(v100);
    v99 = 0;
  }
  swift_storeEnumTagMultiPayload(v93, v95, v99);
  v101 = v109[10];
  v102 = (_QWORD *)(v111 + v101);
  v103 = v110 + v101;
  v105 = *(void **)v103;
  v104 = *(_QWORD *)(v103 + 8);
  *v102 = v105;
  v102[1] = v104;
  v106 = v105;
  return v111;
}

uint64_t assignWithCopy for QuickActionBuyButtonView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, uint64_t);
  int *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  id v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  void (*v59)(_QWORD *, _QWORD *, uint64_t);
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  __int128 *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  void *v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t (*v77)(void *, uint64_t, uint64_t);
  int v78;
  int v79;
  uint64_t v80;
  int *v81;
  uint64_t v82;
  uint64_t v83;
  __int128 *v84;
  uint64_t v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;
  _QWORD *v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  __int16 v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  __int16 v113;
  char v114;
  uint64_t v115;
  uint64_t *v116;
  uint64_t *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  _QWORD *v125;
  uint64_t v126;
  void *v127;
  void *v128;
  id v129;
  char v131;
  int *v132;
  uint64_t v133;
  uint64_t v134;

  v4 = sub_5440(&qword_25FC38);
  v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24);
  v5(a1, a2, v4);
  v6 = (int *)type metadata accessor for ButtonViewModel(0);
  v5(a1 + v6[5], a2 + v6[5], v4);
  if (a1 != a2)
  {
    v7 = v6[6];
    v8 = (uint64_t *)(a1 + v7);
    v9 = (uint64_t *)(a2 + v7);
    sub_B414(a1 + v7, &qword_25F1E8);
    v10 = sub_5440(&qword_25F1E8);
    if (swift_getEnumCaseMultiPayload(v9, v10) == 1)
    {
      v11 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v8, v9, v11);
      v12 = v8;
      v13 = v10;
      v14 = 1;
    }
    else
    {
      v15 = *v9;
      *v8 = *v9;
      swift_retain(v15);
      v12 = v8;
      v13 = v10;
      v14 = 0;
    }
    swift_storeEnumTagMultiPayload(v12, v13, v14);
  }
  *(_BYTE *)(a1 + v6[7]) = *(_BYTE *)(a2 + v6[7]);
  *(_BYTE *)(a1 + v6[8]) = *(_BYTE *)(a2 + v6[8]);
  *(_BYTE *)(a1 + v6[9]) = *(_BYTE *)(a2 + v6[9]);
  v16 = v6[10];
  v17 = a1 + v16;
  v18 = a2 + v16;
  v19 = *(_QWORD *)(a1 + v16);
  v20 = *(_QWORD *)(a2 + v16);
  if (v19 >= 3)
  {
    if (v20 < 3)
    {
      sub_B414(a1 + v16, &qword_2624C0);
      v22 = *(_OWORD *)(v18 + 16);
      *(_OWORD *)v17 = *(_OWORD *)v18;
      *(_OWORD *)(v17 + 16) = v22;
      if (a1 == a2)
        goto LABEL_17;
      goto LABEL_14;
    }
    *(_QWORD *)v17 = v20;
    swift_retain(v20);
    swift_release(v19);
    v34 = *(_QWORD *)(v18 + 8);
    v35 = *(_QWORD *)(v17 + 8);
    *(_QWORD *)(v17 + 8) = v34;
    swift_retain(v34);
    swift_release(v35);
    v36 = *(_QWORD *)(v18 + 16);
    v37 = *(_QWORD *)(v17 + 16);
    *(_QWORD *)(v17 + 16) = v36;
    swift_retain(v36);
    swift_release(v37);
    v38 = *(_QWORD *)(v18 + 24);
    v39 = *(_QWORD *)(v17 + 24);
    *(_QWORD *)(v17 + 24) = v38;
    swift_retain(v38);
    swift_release(v39);
    if (a1 != a2)
      goto LABEL_14;
LABEL_17:
    *(_BYTE *)(a1 + v6[12]) = *(_BYTE *)(a2 + v6[12]);
    goto LABEL_31;
  }
  if (v20 >= 3)
  {
    *(_QWORD *)v17 = v20;
    v23 = *(_QWORD *)(v18 + 8);
    *(_QWORD *)(v17 + 8) = v23;
    v24 = *(_QWORD *)(v18 + 16);
    *(_QWORD *)(v17 + 16) = v24;
    v25 = *(_QWORD *)(v18 + 24);
    *(_QWORD *)(v17 + 24) = v25;
    swift_retain(v20);
    swift_retain(v23);
    swift_retain(v24);
    swift_retain(v25);
    if (a1 != a2)
      goto LABEL_14;
    goto LABEL_17;
  }
  v21 = *(_OWORD *)(v18 + 16);
  *(_OWORD *)v17 = *(_OWORD *)v18;
  *(_OWORD *)(v17 + 16) = v21;
  if (a1 == a2)
    goto LABEL_17;
LABEL_14:
  v26 = v6[11];
  v27 = (_QWORD *)(a1 + v26);
  v28 = (_QWORD *)(a2 + v26);
  sub_224DC(a1 + v26, type metadata accessor for ButtonViewModel.Content);
  v29 = type metadata accessor for ButtonViewModel.Content(0);
  switch(swift_getEnumCaseMultiPayload(v28, v29))
  {
    case 0u:
      v30 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v30 - 8) + 16))(v27, v28, v30);
      v31 = v27;
      v32 = v29;
      v33 = 0;
      goto LABEL_23;
    case 1u:
      *v27 = *v28;
      v40 = v28[1];
      v27[1] = v40;
      swift_bridgeObjectRetain(v40);
      v31 = v27;
      v32 = v29;
      v33 = 1;
      goto LABEL_23;
    case 2u:
      *v27 = *v28;
      v41 = v28[1];
      v27[1] = v41;
      v42 = (void *)v28[2];
      v27[2] = v42;
      swift_bridgeObjectRetain(v41);
      v43 = v42;
      v44 = *(int *)(sub_5440(&qword_2621A8) + 64);
      v45 = (char *)v27 + v44;
      v46 = (char *)v28 + v44;
      v47 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v47 - 8) + 16))(v45, v46, v47);
      v31 = v27;
      v32 = v29;
      v33 = 2;
      goto LABEL_23;
    case 3u:
      *v27 = *v28;
      v48 = v28[1];
      v27[1] = v48;
      swift_bridgeObjectRetain(v48);
      v49 = *(int *)(sub_5440(&qword_2621B0) + 48);
      v50 = (char *)v27 + v49;
      v51 = (char *)v28 + v49;
      v52 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v52 - 8) + 16))(v50, v51, v52);
      v31 = v27;
      v32 = v29;
      v33 = 3;
      goto LABEL_23;
    case 4u:
      v53 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v53 - 8) + 16))(v27, v28, v53);
      v54 = *(int *)(sub_5440(&qword_2621B8) + 48);
      v55 = (_QWORD *)((char *)v27 + v54);
      v56 = (_QWORD *)((char *)v28 + v54);
      *v55 = *v56;
      v57 = v56[1];
      v55[1] = v57;
      swift_bridgeObjectRetain(v57);
      v31 = v27;
      v32 = v29;
      v33 = 4;
      goto LABEL_23;
    case 5u:
      v58 = type metadata accessor for LocalizerRequest(0);
      v59 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v58 - 8) + 16);
      v59(v27, v28, v58);
      v60 = sub_5440(&qword_2621C0);
      v59((_QWORD *)((char *)v27 + *(int *)(v60 + 48)), (_QWORD *)((char *)v28 + *(int *)(v60 + 48)), v58);
      v31 = v27;
      v32 = v29;
      v33 = 5;
LABEL_23:
      swift_storeEnumTagMultiPayload(v31, v32, v33);
      break;
    default:
      memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
      break;
  }
  *(_BYTE *)(a1 + v6[12]) = *(_BYTE *)(a2 + v6[12]);
  v61 = v6[13];
  v62 = a1 + v61;
  v63 = (__int128 *)(a2 + v61);
  sub_224DC(a1 + v61, type metadata accessor for ButtonViewModel.ActionKind);
  v64 = type metadata accessor for ButtonViewModel.ActionKind(0);
  if (swift_getEnumCaseMultiPayload(v63, v64) == 1)
  {
    v65 = type metadata accessor for URL(0);
    (*(void (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)(v65 - 8) + 16))(v62, v63, v65);
    v66 = v62;
    v67 = v64;
    v68 = 1;
  }
  else
  {
    v69 = *((_QWORD *)v63 + 3);
    if (v69)
    {
      *(_QWORD *)(v62 + 24) = v69;
      *(_QWORD *)(v62 + 32) = *((_QWORD *)v63 + 4);
      (**(void (***)(uint64_t, __int128 *))(v69 - 8))(v62, v63);
    }
    else
    {
      v70 = *v63;
      v71 = v63[1];
      *(_QWORD *)(v62 + 32) = *((_QWORD *)v63 + 4);
      *(_OWORD *)v62 = v70;
      *(_OWORD *)(v62 + 16) = v71;
    }
    v66 = v62;
    v67 = v64;
    v68 = 0;
  }
  swift_storeEnumTagMultiPayload(v66, v67, v68);
LABEL_31:
  v72 = v6[14];
  v73 = (void *)(a1 + v72);
  v74 = (void *)(a2 + v72);
  v75 = type metadata accessor for LocalizerRequest(0);
  v76 = *(_QWORD *)(v75 - 8);
  v77 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v76 + 48);
  v78 = v77(v73, 1, v75);
  v79 = v77(v74, 1, v75);
  if (v78)
  {
    if (!v79)
    {
      (*(void (**)(void *, void *, uint64_t))(v76 + 16))(v73, v74, v75);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v76 + 56))(v73, 0, 1, v75);
      goto LABEL_37;
    }
    goto LABEL_36;
  }
  if (v79)
  {
    (*(void (**)(void *, uint64_t))(v76 + 8))(v73, v75);
LABEL_36:
    v80 = sub_5440(&qword_25E0C8);
    memcpy(v73, v74, *(_QWORD *)(*(_QWORD *)(v80 - 8) + 64));
    goto LABEL_37;
  }
  (*(void (**)(void *, void *, uint64_t))(v76 + 24))(v73, v74, v75);
LABEL_37:
  v81 = (int *)type metadata accessor for QuickActionBuyButtonViewModel(0);
  sub_142F8((_QWORD *)(a1 + v81[5]), (_QWORD *)(a2 + v81[5]));
  v82 = v81[6];
  v83 = a1 + v82;
  v84 = (__int128 *)(a2 + v82);
  v85 = *(_QWORD *)(a2 + v82 + 24);
  if (*(_QWORD *)(a1 + v82 + 24))
  {
    if (v85)
    {
      sub_142F8((_QWORD *)v83, v84);
      goto LABEL_44;
    }
    _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)v83);
  }
  else if (v85)
  {
    *(_QWORD *)(v83 + 24) = v85;
    *(_QWORD *)(v83 + 32) = *((_QWORD *)v84 + 4);
    (**(void (***)(uint64_t, __int128 *))(v85 - 8))(v83, v84);
    goto LABEL_44;
  }
  v86 = *v84;
  v87 = v84[1];
  *(_QWORD *)(v83 + 32) = *((_QWORD *)v84 + 4);
  *(_OWORD *)v83 = v86;
  *(_OWORD *)(v83 + 16) = v87;
LABEL_44:
  v88 = v81[7];
  v89 = (_QWORD *)(a1 + v88);
  v90 = (_QWORD *)(a2 + v88);
  *v89 = *v90;
  v91 = v90[1];
  v92 = v89[1];
  v89[1] = v91;
  swift_bridgeObjectRetain(v91);
  swift_bridgeObjectRelease(v92);
  v93 = v81[8];
  v132 = v81;
  v133 = a2;
  v94 = a1 + v93;
  v95 = a2 + v93;
  v96 = *(_QWORD *)v95;
  v97 = *(_QWORD *)(v95 + 8);
  v98 = *(_QWORD *)(v95 + 16);
  v99 = *(_QWORD *)(v95 + 24);
  v134 = a1;
  v100 = *(_QWORD *)(v95 + 32);
  v101 = *(_QWORD *)(v95 + 40);
  v103 = *(_QWORD *)(v95 + 48);
  v102 = *(_QWORD *)(v95 + 56);
  v104 = *(_WORD *)(v95 + 64);
  sub_3480C(*(_QWORD *)v95, v97, v98, v99, v100, v101, v103, v102, v104, *(_BYTE *)(v95 + 66));
  v105 = *(_QWORD *)v94;
  v106 = *(_QWORD *)(v94 + 8);
  v107 = *(_QWORD *)(v94 + 16);
  v108 = *(_QWORD *)(v94 + 24);
  v109 = *(_QWORD *)(v94 + 32);
  v110 = *(_QWORD *)(v94 + 40);
  v111 = *(_QWORD *)(v94 + 48);
  v112 = *(_QWORD *)(v94 + 56);
  v113 = *(_WORD *)(v94 + 64);
  v114 = *(_BYTE *)(v94 + 66);
  *(_QWORD *)v94 = v96;
  *(_QWORD *)(v94 + 8) = v97;
  *(_QWORD *)(v94 + 16) = v98;
  *(_QWORD *)(v94 + 24) = v99;
  *(_QWORD *)(v94 + 32) = v100;
  *(_QWORD *)(v94 + 40) = v101;
  *(_QWORD *)(v94 + 48) = v103;
  *(_QWORD *)(v94 + 56) = v102;
  *(_WORD *)(v94 + 64) = v104;
  *(_BYTE *)(v94 + 66) = v131;
  sub_BDF8(v105, v106, v107, v108, v109, v110, v111, v112, v113, v114);
  if (v134 != v133)
  {
    v115 = v132[9];
    v116 = (uint64_t *)(v134 + v115);
    v117 = (uint64_t *)(v133 + v115);
    sub_B414(v134 + v115, &qword_25F758);
    v118 = sub_5440(&qword_25F758);
    if (swift_getEnumCaseMultiPayload(v117, v118) == 1)
    {
      v119 = type metadata accessor for UUID(0);
      v120 = *(_QWORD *)(v119 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v120 + 48))(v117, 1, v119))
      {
        v121 = sub_5440(&qword_25FAC0);
        memcpy(v116, v117, *(_QWORD *)(*(_QWORD *)(v121 - 8) + 64));
        v122 = 1;
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v120 + 16))(v116, v117, v119);
        v122 = 1;
        (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v120 + 56))(v116, 0, 1, v119);
      }
    }
    else
    {
      v123 = *v117;
      *v116 = *v117;
      swift_retain(v123);
      v122 = 0;
    }
    swift_storeEnumTagMultiPayload(v116, v118, v122);
  }
  v124 = v132[10];
  v125 = (_QWORD *)(v134 + v124);
  v126 = v133 + v124;
  v127 = *(void **)(v134 + v124);
  v128 = *(void **)(v133 + v124);
  *v125 = v128;
  v129 = v128;

  v125[1] = *(_QWORD *)(v126 + 8);
  return v134;
}

uint64_t initializeWithTake for QuickActionBuyButtonView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, uint64_t);
  int *v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  _OWORD *v14;
  __int128 v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(_QWORD *, _QWORD *, uint64_t);
  uint64_t v36;
  uint64_t v37;
  void *v38;
  const void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  const void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  void *v63;
  const void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;

  v4 = sub_5440(&qword_25FC38);
  v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32);
  v5(a1, a2, v4);
  v6 = (int *)type metadata accessor for ButtonViewModel(0);
  v5(a1 + v6[5], a2 + v6[5], v4);
  v7 = v6[6];
  v8 = (void *)(a1 + v7);
  v9 = (const void *)(a2 + v7);
  v10 = sub_5440(&qword_25F1E8);
  if (swift_getEnumCaseMultiPayload(v9, v10) == 1)
  {
    v11 = type metadata accessor for ColorScheme(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v8, v9, v11);
    swift_storeEnumTagMultiPayload(v8, v10, 1);
  }
  else
  {
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  *(_BYTE *)(a1 + v6[7]) = *(_BYTE *)(a2 + v6[7]);
  *(_BYTE *)(a1 + v6[8]) = *(_BYTE *)(a2 + v6[8]);
  *(_BYTE *)(a1 + v6[9]) = *(_BYTE *)(a2 + v6[9]);
  v12 = v6[10];
  v13 = (_OWORD *)(a1 + v12);
  v14 = (_OWORD *)(a2 + v12);
  v15 = v14[1];
  *v13 = *v14;
  v13[1] = v15;
  v16 = v6[11];
  v17 = (_QWORD *)(a1 + v16);
  v18 = (_QWORD *)(a2 + v16);
  v19 = type metadata accessor for ButtonViewModel.Content(0);
  switch(swift_getEnumCaseMultiPayload(v18, v19))
  {
    case 0u:
      v20 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v17, v18, v20);
      v21 = v17;
      v22 = v19;
      v23 = 0;
      goto LABEL_11;
    case 2u:
      *(_OWORD *)v17 = *(_OWORD *)v18;
      v17[2] = v18[2];
      v24 = *(int *)(sub_5440(&qword_2621A8) + 64);
      v25 = (char *)v17 + v24;
      v26 = (char *)v18 + v24;
      v27 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 32))(v25, v26, v27);
      v21 = v17;
      v22 = v19;
      v23 = 2;
      goto LABEL_11;
    case 3u:
      *(_OWORD *)v17 = *(_OWORD *)v18;
      v28 = *(int *)(sub_5440(&qword_2621B0) + 48);
      v29 = (char *)v17 + v28;
      v30 = (char *)v18 + v28;
      v31 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v31 - 8) + 32))(v29, v30, v31);
      v21 = v17;
      v22 = v19;
      v23 = 3;
      goto LABEL_11;
    case 4u:
      v32 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v32 - 8) + 32))(v17, v18, v32);
      v33 = sub_5440(&qword_2621B8);
      *(_OWORD *)((char *)v17 + *(int *)(v33 + 48)) = *(_OWORD *)((char *)v18 + *(int *)(v33 + 48));
      v21 = v17;
      v22 = v19;
      v23 = 4;
      goto LABEL_11;
    case 5u:
      v34 = type metadata accessor for LocalizerRequest(0);
      v35 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v34 - 8) + 32);
      v35(v17, v18, v34);
      v36 = sub_5440(&qword_2621C0);
      v35((_QWORD *)((char *)v17 + *(int *)(v36 + 48)), (_QWORD *)((char *)v18 + *(int *)(v36 + 48)), v34);
      v21 = v17;
      v22 = v19;
      v23 = 5;
LABEL_11:
      swift_storeEnumTagMultiPayload(v21, v22, v23);
      break;
    default:
      memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
      break;
  }
  *(_BYTE *)(a1 + v6[12]) = *(_BYTE *)(a2 + v6[12]);
  v37 = v6[13];
  v38 = (void *)(a1 + v37);
  v39 = (const void *)(a2 + v37);
  v40 = type metadata accessor for ButtonViewModel.ActionKind(0);
  if (swift_getEnumCaseMultiPayload(v39, v40) == 1)
  {
    v41 = type metadata accessor for URL(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v41 - 8) + 32))(v38, v39, v41);
    swift_storeEnumTagMultiPayload(v38, v40, 1);
  }
  else
  {
    memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
  }
  v42 = v6[14];
  v43 = (void *)(a1 + v42);
  v44 = (const void *)(a2 + v42);
  v45 = type metadata accessor for LocalizerRequest(0);
  v46 = *(_QWORD *)(v45 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v46 + 48))(v44, 1, v45))
  {
    v47 = sub_5440(&qword_25E0C8);
    memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v46 + 32))(v43, v44, v45);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v46 + 56))(v43, 0, 1, v45);
  }
  v48 = (int *)type metadata accessor for QuickActionBuyButtonViewModel(0);
  v49 = v48[5];
  v50 = a1 + v49;
  v51 = a2 + v49;
  v52 = *(_OWORD *)(v51 + 16);
  *(_OWORD *)v50 = *(_OWORD *)v51;
  *(_OWORD *)(v50 + 16) = v52;
  *(_QWORD *)(v50 + 32) = *(_QWORD *)(v51 + 32);
  v53 = v48[6];
  v54 = a1 + v53;
  v55 = a2 + v53;
  v56 = *(_OWORD *)(v55 + 16);
  *(_OWORD *)v54 = *(_OWORD *)v55;
  *(_OWORD *)(v54 + 16) = v56;
  *(_QWORD *)(v54 + 32) = *(_QWORD *)(v55 + 32);
  *(_OWORD *)(a1 + v48[7]) = *(_OWORD *)(a2 + v48[7]);
  v57 = v48[8];
  v58 = a1 + v57;
  v59 = a2 + v57;
  *(_DWORD *)(v58 + 63) = *(_DWORD *)(v59 + 63);
  v60 = *(_OWORD *)(v59 + 48);
  *(_OWORD *)(v58 + 32) = *(_OWORD *)(v59 + 32);
  *(_OWORD *)(v58 + 48) = v60;
  v61 = *(_OWORD *)(v59 + 16);
  *(_OWORD *)v58 = *(_OWORD *)v59;
  *(_OWORD *)(v58 + 16) = v61;
  v62 = v48[9];
  v63 = (void *)(a1 + v62);
  v64 = (const void *)(a2 + v62);
  v65 = sub_5440(&qword_25F758);
  if (swift_getEnumCaseMultiPayload(v64, v65) == 1)
  {
    v66 = type metadata accessor for UUID(0);
    v67 = *(_QWORD *)(v66 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v67 + 48))(v64, 1, v66))
    {
      v68 = sub_5440(&qword_25FAC0);
      memcpy(v63, v64, *(_QWORD *)(*(_QWORD *)(v68 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v67 + 32))(v63, v64, v66);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v67 + 56))(v63, 0, 1, v66);
    }
    swift_storeEnumTagMultiPayload(v63, v65, 1);
  }
  else
  {
    memcpy(v63, v64, *(_QWORD *)(*(_QWORD *)(v65 - 8) + 64));
  }
  *(_OWORD *)(a1 + v48[10]) = *(_OWORD *)(a2 + v48[10]);
  return a1;
}

uint64_t assignWithTake for QuickActionBuyButtonView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, uint64_t);
  int *v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  __int128 v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(_QWORD *, _QWORD *, uint64_t);
  uint64_t v40;
  uint64_t v41;
  void *v42;
  const void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t (*v51)(void *, uint64_t, uint64_t);
  int v52;
  int v53;
  uint64_t v54;
  int *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  __int128 v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  __int16 v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  __int16 v83;
  char v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  void *v88;
  const void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  _QWORD *v96;
  void *v97;

  v4 = sub_5440(&qword_25FC38);
  v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40);
  v5(a1, a2, v4);
  v6 = (int *)type metadata accessor for ButtonViewModel(0);
  v5(a1 + v6[5], a2 + v6[5], v4);
  if (a1 != a2)
  {
    v7 = v6[6];
    v8 = (void *)(a1 + v7);
    v9 = (const void *)(a2 + v7);
    sub_B414(a1 + v7, &qword_25F1E8);
    v10 = sub_5440(&qword_25F1E8);
    if (swift_getEnumCaseMultiPayload(v9, v10) == 1)
    {
      v11 = type metadata accessor for ColorScheme(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v8, v9, v11);
      swift_storeEnumTagMultiPayload(v8, v10, 1);
    }
    else
    {
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    }
  }
  *(_BYTE *)(a1 + v6[7]) = *(_BYTE *)(a2 + v6[7]);
  *(_BYTE *)(a1 + v6[8]) = *(_BYTE *)(a2 + v6[8]);
  *(_BYTE *)(a1 + v6[9]) = *(_BYTE *)(a2 + v6[9]);
  v12 = v6[10];
  v13 = (_QWORD *)(a1 + v12);
  v14 = (_QWORD *)(a2 + v12);
  v15 = *(_QWORD *)(a1 + v12);
  if (v15 >= 3)
  {
    if (*v14 >= 3uLL)
    {
      *v13 = *v14;
      swift_release(v15);
      v25 = v13[1];
      v13[1] = v14[1];
      swift_release(v25);
      v26 = v13[2];
      v13[2] = v14[2];
      swift_release(v26);
      v27 = v13[3];
      v13[3] = v14[3];
      swift_release(v27);
      if (a1 != a2)
        goto LABEL_9;
LABEL_12:
      *(_BYTE *)(a1 + v6[12]) = *(_BYTE *)(a2 + v6[12]);
      goto LABEL_22;
    }
    sub_B414((uint64_t)v13, &qword_2624C0);
  }
  v16 = *((_OWORD *)v14 + 1);
  *(_OWORD *)v13 = *(_OWORD *)v14;
  *((_OWORD *)v13 + 1) = v16;
  if (a1 == a2)
    goto LABEL_12;
LABEL_9:
  v17 = v6[11];
  v18 = (_QWORD *)(a1 + v17);
  v19 = (_QWORD *)(a2 + v17);
  sub_224DC(a1 + v17, type metadata accessor for ButtonViewModel.Content);
  v20 = type metadata accessor for ButtonViewModel.Content(0);
  switch(swift_getEnumCaseMultiPayload(v19, v20))
  {
    case 0u:
      v21 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(v18, v19, v21);
      v22 = v18;
      v23 = v20;
      v24 = 0;
      goto LABEL_18;
    case 2u:
      *(_OWORD *)v18 = *(_OWORD *)v19;
      v18[2] = v19[2];
      v28 = *(int *)(sub_5440(&qword_2621A8) + 64);
      v29 = (char *)v18 + v28;
      v30 = (char *)v19 + v28;
      v31 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v31 - 8) + 32))(v29, v30, v31);
      v22 = v18;
      v23 = v20;
      v24 = 2;
      goto LABEL_18;
    case 3u:
      *(_OWORD *)v18 = *(_OWORD *)v19;
      v32 = *(int *)(sub_5440(&qword_2621B0) + 48);
      v33 = (char *)v18 + v32;
      v34 = (char *)v19 + v32;
      v35 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v35 - 8) + 32))(v33, v34, v35);
      v22 = v18;
      v23 = v20;
      v24 = 3;
      goto LABEL_18;
    case 4u:
      v36 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v36 - 8) + 32))(v18, v19, v36);
      v37 = sub_5440(&qword_2621B8);
      *(_OWORD *)((char *)v18 + *(int *)(v37 + 48)) = *(_OWORD *)((char *)v19 + *(int *)(v37 + 48));
      v22 = v18;
      v23 = v20;
      v24 = 4;
      goto LABEL_18;
    case 5u:
      v38 = type metadata accessor for LocalizerRequest(0);
      v39 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v38 - 8) + 32);
      v39(v18, v19, v38);
      v40 = sub_5440(&qword_2621C0);
      v39((_QWORD *)((char *)v18 + *(int *)(v40 + 48)), (_QWORD *)((char *)v19 + *(int *)(v40 + 48)), v38);
      v22 = v18;
      v23 = v20;
      v24 = 5;
LABEL_18:
      swift_storeEnumTagMultiPayload(v22, v23, v24);
      break;
    default:
      memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
      break;
  }
  *(_BYTE *)(a1 + v6[12]) = *(_BYTE *)(a2 + v6[12]);
  v41 = v6[13];
  v42 = (void *)(a1 + v41);
  v43 = (const void *)(a2 + v41);
  sub_224DC(a1 + v41, type metadata accessor for ButtonViewModel.ActionKind);
  v44 = type metadata accessor for ButtonViewModel.ActionKind(0);
  if (swift_getEnumCaseMultiPayload(v43, v44) == 1)
  {
    v45 = type metadata accessor for URL(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v45 - 8) + 32))(v42, v43, v45);
    swift_storeEnumTagMultiPayload(v42, v44, 1);
  }
  else
  {
    memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
  }
LABEL_22:
  v46 = v6[14];
  v47 = (void *)(a1 + v46);
  v48 = (void *)(a2 + v46);
  v49 = type metadata accessor for LocalizerRequest(0);
  v50 = *(_QWORD *)(v49 - 8);
  v51 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v50 + 48);
  v52 = v51(v47, 1, v49);
  v53 = v51(v48, 1, v49);
  if (v52)
  {
    if (!v53)
    {
      (*(void (**)(void *, void *, uint64_t))(v50 + 32))(v47, v48, v49);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v50 + 56))(v47, 0, 1, v49);
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  if (v53)
  {
    (*(void (**)(void *, uint64_t))(v50 + 8))(v47, v49);
LABEL_27:
    v54 = sub_5440(&qword_25E0C8);
    memcpy(v47, v48, *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64));
    goto LABEL_28;
  }
  (*(void (**)(void *, void *, uint64_t))(v50 + 40))(v47, v48, v49);
LABEL_28:
  v55 = (int *)type metadata accessor for QuickActionBuyButtonViewModel(0);
  v56 = v55[5];
  v57 = a1 + v56;
  v58 = a2 + v56;
  _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)(a1 + v56));
  *(_QWORD *)(v57 + 32) = *(_QWORD *)(v58 + 32);
  v59 = *(_OWORD *)(v58 + 16);
  *(_OWORD *)v57 = *(_OWORD *)v58;
  *(_OWORD *)(v57 + 16) = v59;
  v60 = v55[6];
  v61 = a1 + v60;
  v62 = a2 + v60;
  if (*(_QWORD *)(a1 + v60 + 24))
    _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)v61);
  v63 = *(_OWORD *)(v62 + 16);
  *(_OWORD *)v61 = *(_OWORD *)v62;
  *(_OWORD *)(v61 + 16) = v63;
  *(_QWORD *)(v61 + 32) = *(_QWORD *)(v62 + 32);
  v64 = v55[7];
  v65 = (_QWORD *)(a1 + v64);
  v66 = (uint64_t *)(a2 + v64);
  v68 = *v66;
  v67 = v66[1];
  v69 = v65[1];
  *v65 = v68;
  v65[1] = v67;
  swift_bridgeObjectRelease(v69);
  v70 = v55[8];
  v71 = a1 + v70;
  v72 = a2 + v70;
  v73 = *(_WORD *)(v72 + 64);
  v74 = *(_BYTE *)(v72 + 66);
  v75 = *(_QWORD *)v71;
  v76 = *(_QWORD *)(v71 + 8);
  v77 = *(_QWORD *)(v71 + 16);
  v78 = *(_QWORD *)(v71 + 24);
  v79 = *(_QWORD *)(v71 + 32);
  v80 = *(_QWORD *)(v71 + 40);
  v81 = *(_QWORD *)(v71 + 48);
  v82 = *(_QWORD *)(v71 + 56);
  v83 = *(_WORD *)(v71 + 64);
  v84 = *(_BYTE *)(v71 + 66);
  v85 = *(_OWORD *)(v72 + 16);
  *(_OWORD *)v71 = *(_OWORD *)v72;
  *(_OWORD *)(v71 + 16) = v85;
  v86 = *(_OWORD *)(v72 + 48);
  *(_OWORD *)(v71 + 32) = *(_OWORD *)(v72 + 32);
  *(_OWORD *)(v71 + 48) = v86;
  *(_WORD *)(v71 + 64) = v73;
  *(_BYTE *)(v71 + 66) = v74;
  sub_BDF8(v75, v76, v77, v78, v79, v80, v81, v82, v83, v84);
  if (a1 != a2)
  {
    v87 = v55[9];
    v88 = (void *)(a1 + v87);
    v89 = (const void *)(a2 + v87);
    sub_B414(a1 + v87, &qword_25F758);
    v90 = sub_5440(&qword_25F758);
    if (swift_getEnumCaseMultiPayload(v89, v90) == 1)
    {
      v91 = type metadata accessor for UUID(0);
      v92 = *(_QWORD *)(v91 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v92 + 48))(v89, 1, v91))
      {
        v93 = sub_5440(&qword_25FAC0);
        memcpy(v88, v89, *(_QWORD *)(*(_QWORD *)(v93 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v92 + 32))(v88, v89, v91);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v92 + 56))(v88, 0, 1, v91);
      }
      swift_storeEnumTagMultiPayload(v88, v90, 1);
    }
    else
    {
      memcpy(v88, v89, *(_QWORD *)(*(_QWORD *)(v90 - 8) + 64));
    }
  }
  v94 = v55[10];
  v95 = (_QWORD *)(a1 + v94);
  v96 = (_QWORD *)(a2 + v94);
  v97 = *(void **)(a1 + v94);
  *v95 = *v96;

  v95[1] = v96[1];
  return a1;
}

uint64_t getEnumTagSinglePayload for QuickActionBuyButtonView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_E3B84);
}

uint64_t sub_E3B84(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for QuickActionBuyButtonViewModel(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for QuickActionBuyButtonView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_E3BCC);
}

uint64_t sub_E3BCC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for QuickActionBuyButtonViewModel(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for QuickActionBuyButtonView(uint64_t a1)
{
  return sub_1FE90(a1, qword_264A10, (uint64_t)&nominal type descriptor for QuickActionBuyButtonView);
}

uint64_t sub_E3C20(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  result = type metadata accessor for QuickActionBuyButtonViewModel(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 1, &v4, a1 + 16);
    return 0;
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for QuickActionBuyButtonViewModel(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(_QWORD *, _QWORD *, uint64_t);
  int *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  id v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(_QWORD *, _QWORD *, uint64_t);
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  __int128 v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  __int128 v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  _QWORD *v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  __int16 v94;
  char v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  char *v107;
  uint64_t v108;
  void *v109;
  id v110;
  uint64_t v112;
  char v113;
  int *v114;
  _QWORD *v115;
  _QWORD *v116;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v18 = *a2;
    *a1 = *a2;
    v19 = (_QWORD *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v18);
  }
  else
  {
    v7 = sub_5440(&qword_25FC38);
    v8 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v9 = (int *)type metadata accessor for ButtonViewModel(0);
    v8((_QWORD *)((char *)a1 + v9[5]), (_QWORD *)((char *)a2 + v9[5]), v7);
    v10 = v9[6];
    v11 = (_QWORD *)((char *)a1 + v10);
    v12 = (_QWORD *)((char *)a2 + v10);
    v13 = sub_5440(&qword_25F1E8);
    if (swift_getEnumCaseMultiPayload(v12, v13) == 1)
    {
      v14 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v11, v12, v14);
      v15 = v11;
      v16 = v13;
      v17 = 1;
    }
    else
    {
      v20 = *v12;
      *v11 = *v12;
      swift_retain(v20);
      v15 = v11;
      v16 = v13;
      v17 = 0;
    }
    swift_storeEnumTagMultiPayload(v15, v16, v17);
    *((_BYTE *)a1 + v9[7]) = *((_BYTE *)a2 + v9[7]);
    *((_BYTE *)a1 + v9[8]) = *((_BYTE *)a2 + v9[8]);
    *((_BYTE *)a1 + v9[9]) = *((_BYTE *)a2 + v9[9]);
    v21 = v9[10];
    v22 = (_QWORD *)((char *)a1 + v21);
    v23 = (_QWORD *)((char *)a2 + v21);
    v24 = *v23;
    if (*v23 >= 3uLL)
    {
      v26 = v23[1];
      v27 = v23[2];
      *v22 = v24;
      v22[1] = v26;
      v28 = v23[3];
      v22[2] = v27;
      v22[3] = v28;
      swift_retain(v24);
      swift_retain(v26);
      swift_retain(v27);
      swift_retain(v28);
    }
    else
    {
      v25 = *((_OWORD *)v23 + 1);
      *(_OWORD *)v22 = *(_OWORD *)v23;
      *((_OWORD *)v22 + 1) = v25;
    }
    v29 = v9[11];
    v30 = (_QWORD *)((char *)a1 + v29);
    v31 = (_QWORD *)((char *)a2 + v29);
    v32 = type metadata accessor for ButtonViewModel.Content(0);
    switch(swift_getEnumCaseMultiPayload(v31, v32))
    {
      case 0u:
        v33 = type metadata accessor for LocalizerRequest(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v33 - 8) + 16))(v30, v31, v33);
        v34 = v30;
        v35 = v32;
        v36 = 0;
        goto LABEL_17;
      case 1u:
        v37 = v31[1];
        *v30 = *v31;
        v30[1] = v37;
        swift_bridgeObjectRetain(v37);
        v34 = v30;
        v35 = v32;
        v36 = 1;
        goto LABEL_17;
      case 2u:
        v38 = v31[1];
        *v30 = *v31;
        v30[1] = v38;
        v39 = (void *)v31[2];
        v30[2] = v39;
        swift_bridgeObjectRetain(v38);
        v40 = v39;
        v41 = *(int *)(sub_5440(&qword_2621A8) + 64);
        v42 = (char *)v30 + v41;
        v43 = (char *)v31 + v41;
        v44 = type metadata accessor for LocalizerRequest(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v44 - 8) + 16))(v42, v43, v44);
        v34 = v30;
        v35 = v32;
        v36 = 2;
        goto LABEL_17;
      case 3u:
        v45 = v31[1];
        *v30 = *v31;
        v30[1] = v45;
        swift_bridgeObjectRetain(v45);
        v46 = *(int *)(sub_5440(&qword_2621B0) + 48);
        v47 = (char *)v30 + v46;
        v48 = (char *)v31 + v46;
        v49 = type metadata accessor for LocalizerRequest(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v49 - 8) + 16))(v47, v48, v49);
        v34 = v30;
        v35 = v32;
        v36 = 3;
        goto LABEL_17;
      case 4u:
        v50 = type metadata accessor for LocalizerRequest(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v50 - 8) + 16))(v30, v31, v50);
        v51 = *(int *)(sub_5440(&qword_2621B8) + 48);
        v52 = (_QWORD *)((char *)v30 + v51);
        v53 = (_QWORD *)((char *)v31 + v51);
        v54 = v53[1];
        *v52 = *v53;
        v52[1] = v54;
        swift_bridgeObjectRetain(v54);
        v34 = v30;
        v35 = v32;
        v36 = 4;
        goto LABEL_17;
      case 5u:
        v55 = type metadata accessor for LocalizerRequest(0);
        v56 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v55 - 8) + 16);
        v56(v30, v31, v55);
        v57 = sub_5440(&qword_2621C0);
        v56((_QWORD *)((char *)v30 + *(int *)(v57 + 48)), (_QWORD *)((char *)v31 + *(int *)(v57 + 48)), v55);
        v34 = v30;
        v35 = v32;
        v36 = 5;
LABEL_17:
        swift_storeEnumTagMultiPayload(v34, v35, v36);
        break;
      default:
        memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
        break;
    }
    *((_BYTE *)a1 + v9[12]) = *((_BYTE *)a2 + v9[12]);
    v58 = v9[13];
    v59 = (char *)a1 + v58;
    v60 = (char *)a2 + v58;
    v61 = type metadata accessor for ButtonViewModel.ActionKind(0);
    if (swift_getEnumCaseMultiPayload(v60, v61) == 1)
    {
      v62 = type metadata accessor for URL(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v62 - 8) + 16))(v59, v60, v62);
      v63 = 1;
    }
    else
    {
      v63 = *((_QWORD *)v60 + 3);
      if (v63)
      {
        v64 = *((_QWORD *)v60 + 4);
        *((_QWORD *)v59 + 3) = v63;
        *((_QWORD *)v59 + 4) = v64;
        (**(void (***)(char *, char *))(v63 - 8))(v59, v60);
        v63 = 0;
      }
      else
      {
        v65 = *((_OWORD *)v60 + 1);
        *(_OWORD *)v59 = *(_OWORD *)v60;
        *((_OWORD *)v59 + 1) = v65;
        *((_QWORD *)v59 + 4) = *((_QWORD *)v60 + 4);
      }
    }
    swift_storeEnumTagMultiPayload(v59, v61, v63);
    v66 = v9[14];
    v67 = (char *)a1 + v66;
    v68 = (char *)a2 + v66;
    v69 = type metadata accessor for LocalizerRequest(0);
    v70 = *(_QWORD *)(v69 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v70 + 48))(v68, 1, v69))
    {
      v71 = sub_5440(&qword_25E0C8);
      memcpy(v67, v68, *(_QWORD *)(*(_QWORD *)(v71 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v70 + 16))(v67, v68, v69);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v70 + 56))(v67, 0, 1, v69);
    }
    v72 = a3[5];
    v73 = *(_OWORD *)((char *)a2 + v72 + 24);
    *(_OWORD *)((char *)a1 + v72 + 24) = v73;
    (**(void (***)(void))(v73 - 8))();
    v74 = a3[6];
    v75 = (char *)a1 + v74;
    v76 = (char *)a2 + v74;
    v77 = *(_QWORD *)((char *)a2 + v74 + 24);
    if (v77)
    {
      v78 = *((_QWORD *)v76 + 4);
      *((_QWORD *)v75 + 3) = v77;
      *((_QWORD *)v75 + 4) = v78;
      (**(void (***)(void))(v77 - 8))();
    }
    else
    {
      v79 = *((_OWORD *)v76 + 1);
      *(_OWORD *)v75 = *(_OWORD *)v76;
      *((_OWORD *)v75 + 1) = v79;
      *((_QWORD *)v75 + 4) = *((_QWORD *)v76 + 4);
    }
    v80 = a3[7];
    v81 = a3[8];
    v82 = (_QWORD *)((char *)a1 + v80);
    v83 = (_QWORD *)((char *)a2 + v80);
    v84 = v83[1];
    *v82 = *v83;
    v82[1] = v84;
    v85 = (char *)a1 + v81;
    v86 = (char *)a2 + v81;
    v87 = *(_QWORD *)((char *)a2 + v81);
    v88 = *(_QWORD *)((char *)a2 + v81 + 8);
    v89 = *(_QWORD *)((char *)a2 + v81 + 16);
    v90 = *(_QWORD *)((char *)a2 + v81 + 24);
    v114 = a3;
    v115 = a2;
    v91 = *(_QWORD *)((char *)a2 + v81 + 32);
    v92 = *(_QWORD *)((char *)a2 + v81 + 40);
    v93 = *((_QWORD *)v86 + 6);
    v112 = *((_QWORD *)v86 + 7);
    v116 = a1;
    v94 = *((_WORD *)v86 + 32);
    v95 = v86[66];
    v113 = v95;
    swift_bridgeObjectRetain(v84);
    sub_3480C(v87, v88, v89, v90, v91, v92, v93, v112, v94, v95);
    *(_QWORD *)v85 = v87;
    *((_QWORD *)v85 + 1) = v88;
    *((_QWORD *)v85 + 2) = v89;
    *((_QWORD *)v85 + 3) = v90;
    *((_QWORD *)v85 + 4) = v91;
    *((_QWORD *)v85 + 5) = v92;
    *((_QWORD *)v85 + 6) = v93;
    *((_QWORD *)v85 + 7) = v112;
    *((_WORD *)v85 + 32) = v94;
    v19 = v116;
    v96 = v114[9];
    v97 = (_QWORD *)((char *)v116 + v96);
    v98 = (_QWORD *)((char *)v115 + v96);
    v85[66] = v113;
    v99 = sub_5440(&qword_25F758);
    if (swift_getEnumCaseMultiPayload(v98, v99) == 1)
    {
      v100 = type metadata accessor for UUID(0);
      v101 = *(_QWORD *)(v100 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v101 + 48))(v98, 1, v100))
      {
        v102 = sub_5440(&qword_25FAC0);
        memcpy(v97, v98, *(_QWORD *)(*(_QWORD *)(v102 - 8) + 64));
        v103 = 1;
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v101 + 16))(v97, v98, v100);
        v103 = 1;
        (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v101 + 56))(v97, 0, 1, v100);
      }
    }
    else
    {
      v104 = *v98;
      *v97 = *v98;
      swift_retain(v104);
      v103 = 0;
    }
    swift_storeEnumTagMultiPayload(v97, v99, v103);
    v105 = v114[10];
    v106 = (_QWORD *)((char *)v116 + v105);
    v107 = (char *)v115 + v105;
    v109 = *(void **)v107;
    v108 = *((_QWORD *)v107 + 1);
    *v106 = v109;
    v106[1] = v108;
    v110 = v109;
  }
  return v19;
}

void destroy for QuickActionBuyButtonViewModel(uint64_t a1, int *a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  int *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v4 = sub_5440(&qword_25FC38);
  v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v5(a1, v4);
  v6 = (int *)type metadata accessor for ButtonViewModel(0);
  v5(a1 + v6[5], v4);
  v7 = (_QWORD *)(a1 + v6[6]);
  v8 = sub_5440(&qword_25F1E8);
  if (swift_getEnumCaseMultiPayload(v7, v8) == 1)
  {
    v9 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v7, v9);
  }
  else
  {
    swift_release(*v7);
  }
  v10 = (_QWORD *)(a1 + v6[10]);
  if (*v10 >= 3uLL)
  {
    swift_release(*v10);
    swift_release(v10[1]);
    swift_release(v10[2]);
    swift_release(v10[3]);
  }
  v11 = a1 + v6[11];
  v12 = type metadata accessor for ButtonViewModel.Content(0);
  switch(swift_getEnumCaseMultiPayload(v11, v12))
  {
    case 0u:
      goto LABEL_11;
    case 1u:
      swift_bridgeObjectRelease(*(_QWORD *)(v11 + 8));
      break;
    case 2u:
      swift_bridgeObjectRelease(*(_QWORD *)(v11 + 8));

      v13 = *(int *)(sub_5440(&qword_2621A8) + 64);
      goto LABEL_10;
    case 3u:
      swift_bridgeObjectRelease(*(_QWORD *)(v11 + 8));
      v13 = *(int *)(sub_5440(&qword_2621B0) + 48);
LABEL_10:
      v11 += v13;
LABEL_11:
      v14 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v11, v14);
      break;
    case 4u:
      v15 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v11, v15);
      v16 = sub_5440(&qword_2621B8);
      swift_bridgeObjectRelease(*(_QWORD *)(v11 + *(int *)(v16 + 48) + 8));
      break;
    case 5u:
      v17 = type metadata accessor for LocalizerRequest(0);
      v18 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 8);
      v18(v11, v17);
      v19 = sub_5440(&qword_2621C0);
      v18(v11 + *(int *)(v19 + 48), v17);
      break;
    default:
      break;
  }
  v20 = (_QWORD *)(a1 + v6[13]);
  v21 = type metadata accessor for ButtonViewModel.ActionKind(0);
  if (swift_getEnumCaseMultiPayload(v20, v21) == 1)
  {
    v22 = type metadata accessor for URL(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v22 - 8) + 8))(v20, v22);
  }
  else if (v20[3])
  {
    _s7BooksUI13AnyPagedFrameVwxx_0(v20);
  }
  v23 = a1 + v6[14];
  v24 = type metadata accessor for LocalizerRequest(0);
  v25 = *(_QWORD *)(v24 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v23, v24);
  _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)(a1 + a2[5]));
  v26 = (_QWORD *)(a1 + a2[6]);
  if (v26[3])
    _s7BooksUI13AnyPagedFrameVwxx_0(v26);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[7] + 8));
  v27 = a1 + a2[8];
  sub_BDF8(*(_QWORD *)v27, *(_QWORD *)(v27 + 8), *(_QWORD *)(v27 + 16), *(_QWORD *)(v27 + 24), *(_QWORD *)(v27 + 32), *(_QWORD *)(v27 + 40), *(_QWORD *)(v27 + 48), *(_QWORD *)(v27 + 56), *(_WORD *)(v27 + 64), *(_BYTE *)(v27 + 66));
  v28 = (_QWORD *)(a1 + a2[9]);
  v29 = sub_5440(&qword_25F758);
  if (swift_getEnumCaseMultiPayload(v28, v29) == 1)
  {
    v30 = type metadata accessor for UUID(0);
    v31 = *(_QWORD *)(v30 - 8);
    if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v31 + 48))(v28, 1, v30))
      (*(void (**)(_QWORD *, uint64_t))(v31 + 8))(v28, v30);
  }
  else
  {
    swift_release(*v28);
  }

}

uint64_t initializeWithCopy for QuickActionBuyButtonViewModel(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  int *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  id v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(_QWORD *, _QWORD *, uint64_t);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  void *v64;
  const void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  __int128 v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  __int128 v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  _QWORD *v80;
  uint64_t v81;
  int *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  __int16 v92;
  char v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  void *v107;
  id v108;
  uint64_t v110;
  int *v111;
  uint64_t v112;
  uint64_t v113;

  v6 = sub_5440(&qword_25FC38);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v8 = (int *)type metadata accessor for ButtonViewModel(0);
  v7(a1 + v8[5], a2 + v8[5], v6);
  v9 = v8[6];
  v10 = (uint64_t *)(a1 + v9);
  v11 = (uint64_t *)(a2 + v9);
  v12 = sub_5440(&qword_25F1E8);
  if (swift_getEnumCaseMultiPayload(v11, v12) == 1)
  {
    v13 = type metadata accessor for ColorScheme(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v10, v11, v13);
    v14 = v10;
    v15 = v12;
    v16 = 1;
  }
  else
  {
    v17 = *v11;
    *v10 = *v11;
    swift_retain(v17);
    v14 = v10;
    v15 = v12;
    v16 = 0;
  }
  swift_storeEnumTagMultiPayload(v14, v15, v16);
  *(_BYTE *)(a1 + v8[7]) = *(_BYTE *)(a2 + v8[7]);
  *(_BYTE *)(a1 + v8[8]) = *(_BYTE *)(a2 + v8[8]);
  *(_BYTE *)(a1 + v8[9]) = *(_BYTE *)(a2 + v8[9]);
  v18 = v8[10];
  v19 = (_QWORD *)(a1 + v18);
  v20 = (_QWORD *)(a2 + v18);
  v21 = *v20;
  if (*v20 >= 3uLL)
  {
    v23 = v20[1];
    v24 = v20[2];
    *v19 = v21;
    v19[1] = v23;
    v25 = v20[3];
    v19[2] = v24;
    v19[3] = v25;
    swift_retain(v21);
    swift_retain(v23);
    swift_retain(v24);
    swift_retain(v25);
  }
  else
  {
    v22 = *((_OWORD *)v20 + 1);
    *(_OWORD *)v19 = *(_OWORD *)v20;
    *((_OWORD *)v19 + 1) = v22;
  }
  v26 = v8[11];
  v27 = (_QWORD *)(a1 + v26);
  v28 = (_QWORD *)(a2 + v26);
  v29 = type metadata accessor for ButtonViewModel.Content(0);
  switch(swift_getEnumCaseMultiPayload(v28, v29))
  {
    case 0u:
      v30 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v30 - 8) + 16))(v27, v28, v30);
      v31 = v27;
      v32 = v29;
      v33 = 0;
      goto LABEL_15;
    case 1u:
      v34 = v28[1];
      *v27 = *v28;
      v27[1] = v34;
      swift_bridgeObjectRetain(v34);
      v31 = v27;
      v32 = v29;
      v33 = 1;
      goto LABEL_15;
    case 2u:
      v35 = v28[1];
      *v27 = *v28;
      v27[1] = v35;
      v36 = (void *)v28[2];
      v27[2] = v36;
      swift_bridgeObjectRetain(v35);
      v37 = v36;
      v38 = *(int *)(sub_5440(&qword_2621A8) + 64);
      v39 = (char *)v27 + v38;
      v40 = (char *)v28 + v38;
      v41 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v41 - 8) + 16))(v39, v40, v41);
      v31 = v27;
      v32 = v29;
      v33 = 2;
      goto LABEL_15;
    case 3u:
      v42 = v28[1];
      *v27 = *v28;
      v27[1] = v42;
      swift_bridgeObjectRetain(v42);
      v43 = *(int *)(sub_5440(&qword_2621B0) + 48);
      v44 = (char *)v27 + v43;
      v45 = (char *)v28 + v43;
      v46 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v46 - 8) + 16))(v44, v45, v46);
      v31 = v27;
      v32 = v29;
      v33 = 3;
      goto LABEL_15;
    case 4u:
      v47 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v47 - 8) + 16))(v27, v28, v47);
      v48 = *(int *)(sub_5440(&qword_2621B8) + 48);
      v49 = (_QWORD *)((char *)v27 + v48);
      v50 = (_QWORD *)((char *)v28 + v48);
      v51 = v50[1];
      *v49 = *v50;
      v49[1] = v51;
      swift_bridgeObjectRetain(v51);
      v31 = v27;
      v32 = v29;
      v33 = 4;
      goto LABEL_15;
    case 5u:
      v52 = type metadata accessor for LocalizerRequest(0);
      v53 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v52 - 8) + 16);
      v53(v27, v28, v52);
      v54 = sub_5440(&qword_2621C0);
      v53((_QWORD *)((char *)v27 + *(int *)(v54 + 48)), (_QWORD *)((char *)v28 + *(int *)(v54 + 48)), v52);
      v31 = v27;
      v32 = v29;
      v33 = 5;
LABEL_15:
      swift_storeEnumTagMultiPayload(v31, v32, v33);
      break;
    default:
      memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
      break;
  }
  *(_BYTE *)(a1 + v8[12]) = *(_BYTE *)(a2 + v8[12]);
  v55 = v8[13];
  v56 = a1 + v55;
  v57 = a2 + v55;
  v58 = type metadata accessor for ButtonViewModel.ActionKind(0);
  if (swift_getEnumCaseMultiPayload(v57, v58) == 1)
  {
    v59 = type metadata accessor for URL(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v59 - 8) + 16))(v56, v57, v59);
    v60 = 1;
  }
  else
  {
    v60 = *(_QWORD *)(v57 + 24);
    if (v60)
    {
      v61 = *(_QWORD *)(v57 + 32);
      *(_QWORD *)(v56 + 24) = v60;
      *(_QWORD *)(v56 + 32) = v61;
      (**(void (***)(uint64_t, uint64_t))(v60 - 8))(v56, v57);
      v60 = 0;
    }
    else
    {
      v62 = *(_OWORD *)(v57 + 16);
      *(_OWORD *)v56 = *(_OWORD *)v57;
      *(_OWORD *)(v56 + 16) = v62;
      *(_QWORD *)(v56 + 32) = *(_QWORD *)(v57 + 32);
    }
  }
  swift_storeEnumTagMultiPayload(v56, v58, v60);
  v63 = v8[14];
  v64 = (void *)(a1 + v63);
  v65 = (const void *)(a2 + v63);
  v66 = type metadata accessor for LocalizerRequest(0);
  v67 = *(_QWORD *)(v66 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v67 + 48))(v65, 1, v66))
  {
    v68 = sub_5440(&qword_25E0C8);
    memcpy(v64, v65, *(_QWORD *)(*(_QWORD *)(v68 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v67 + 16))(v64, v65, v66);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v67 + 56))(v64, 0, 1, v66);
  }
  v69 = a3[5];
  v70 = *(_OWORD *)(a2 + v69 + 24);
  *(_OWORD *)(a1 + v69 + 24) = v70;
  (**(void (***)(void))(v70 - 8))();
  v71 = a3[6];
  v72 = a1 + v71;
  v73 = a2 + v71;
  v74 = *(_QWORD *)(a2 + v71 + 24);
  if (v74)
  {
    v75 = *(_QWORD *)(v73 + 32);
    *(_QWORD *)(v72 + 24) = v74;
    *(_QWORD *)(v72 + 32) = v75;
    (**(void (***)(void))(v74 - 8))();
  }
  else
  {
    v76 = *(_OWORD *)(v73 + 16);
    *(_OWORD *)v72 = *(_OWORD *)v73;
    *(_OWORD *)(v72 + 16) = v76;
    *(_QWORD *)(v72 + 32) = *(_QWORD *)(v73 + 32);
  }
  v77 = a3[7];
  v78 = a3[8];
  v79 = (_QWORD *)(a1 + v77);
  v80 = (_QWORD *)(a2 + v77);
  v81 = v80[1];
  *v79 = *v80;
  v79[1] = v81;
  v82 = a3;
  v83 = a1 + v78;
  v84 = a2 + v78;
  v86 = *(_QWORD *)(a2 + v78);
  v85 = *(_QWORD *)(a2 + v78 + 8);
  v87 = *(_QWORD *)(a2 + v78 + 16);
  v88 = *(_QWORD *)(a2 + v78 + 24);
  v111 = v82;
  v112 = a2;
  v89 = *(_QWORD *)(a2 + v78 + 32);
  v90 = *(_QWORD *)(a2 + v78 + 40);
  v91 = *(_QWORD *)(v84 + 56);
  v110 = *(_QWORD *)(v84 + 48);
  v113 = a1;
  v92 = *(_WORD *)(v84 + 64);
  v93 = *(_BYTE *)(v84 + 66);
  swift_bridgeObjectRetain(v81);
  sub_3480C(v86, v85, v87, v88, v89, v90, v110, v91, v92, v93);
  *(_QWORD *)v83 = v86;
  *(_QWORD *)(v83 + 8) = v85;
  *(_QWORD *)(v83 + 16) = v87;
  *(_QWORD *)(v83 + 24) = v88;
  *(_QWORD *)(v83 + 32) = v89;
  *(_QWORD *)(v83 + 40) = v90;
  *(_QWORD *)(v83 + 48) = v110;
  *(_QWORD *)(v83 + 56) = v91;
  *(_WORD *)(v83 + 64) = v92;
  v94 = v111[9];
  v95 = (uint64_t *)(v113 + v94);
  v96 = (uint64_t *)(v112 + v94);
  *(_BYTE *)(v83 + 66) = v93;
  v97 = sub_5440(&qword_25F758);
  if (swift_getEnumCaseMultiPayload(v96, v97) == 1)
  {
    v98 = type metadata accessor for UUID(0);
    v99 = *(_QWORD *)(v98 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v99 + 48))(v96, 1, v98))
    {
      v100 = sub_5440(&qword_25FAC0);
      memcpy(v95, v96, *(_QWORD *)(*(_QWORD *)(v100 - 8) + 64));
      v101 = 1;
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v99 + 16))(v95, v96, v98);
      v101 = 1;
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v99 + 56))(v95, 0, 1, v98);
    }
  }
  else
  {
    v102 = *v96;
    *v95 = *v96;
    swift_retain(v102);
    v101 = 0;
  }
  swift_storeEnumTagMultiPayload(v95, v97, v101);
  v103 = v111[10];
  v104 = (_QWORD *)(v113 + v103);
  v105 = v112 + v103;
  v107 = *(void **)v105;
  v106 = *(_QWORD *)(v105 + 8);
  *v104 = v107;
  v104[1] = v106;
  v108 = v107;
  return v113;
}

uint64_t assignWithCopy for QuickActionBuyButtonViewModel(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  int *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  id v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  void (*v61)(_QWORD *, _QWORD *, uint64_t);
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  __int128 *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  void *v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t (*v79)(void *, uint64_t, uint64_t);
  int v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  __int128 *v85;
  uint64_t v86;
  __int128 v87;
  __int128 v88;
  uint64_t v89;
  _QWORD *v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  __int16 v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  __int16 v114;
  char v115;
  uint64_t v116;
  uint64_t *v117;
  uint64_t *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  _QWORD *v126;
  _QWORD *v127;
  void *v128;
  void *v129;
  id v130;
  char v132;
  int *v133;
  uint64_t v134;
  uint64_t v135;

  v6 = sub_5440(&qword_25FC38);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  v8 = (int *)type metadata accessor for ButtonViewModel(0);
  v7(a1 + v8[5], a2 + v8[5], v6);
  if (a1 != a2)
  {
    v9 = v8[6];
    v10 = (uint64_t *)(a1 + v9);
    v11 = (uint64_t *)(a2 + v9);
    sub_B414(a1 + v9, &qword_25F1E8);
    v12 = sub_5440(&qword_25F1E8);
    if (swift_getEnumCaseMultiPayload(v11, v12) == 1)
    {
      v13 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v10, v11, v13);
      v14 = v10;
      v15 = v12;
      v16 = 1;
    }
    else
    {
      v17 = *v11;
      *v10 = *v11;
      swift_retain(v17);
      v14 = v10;
      v15 = v12;
      v16 = 0;
    }
    swift_storeEnumTagMultiPayload(v14, v15, v16);
  }
  *(_BYTE *)(a1 + v8[7]) = *(_BYTE *)(a2 + v8[7]);
  *(_BYTE *)(a1 + v8[8]) = *(_BYTE *)(a2 + v8[8]);
  *(_BYTE *)(a1 + v8[9]) = *(_BYTE *)(a2 + v8[9]);
  v18 = v8[10];
  v19 = a1 + v18;
  v20 = a2 + v18;
  v21 = *(_QWORD *)(a1 + v18);
  v22 = *(_QWORD *)(a2 + v18);
  if (v21 >= 3)
  {
    if (v22 < 3)
    {
      sub_B414(a1 + v18, &qword_2624C0);
      v24 = *(_OWORD *)(v20 + 16);
      *(_OWORD *)v19 = *(_OWORD *)v20;
      *(_OWORD *)(v19 + 16) = v24;
      if (a1 == a2)
        goto LABEL_17;
      goto LABEL_14;
    }
    *(_QWORD *)v19 = v22;
    swift_retain(v22);
    swift_release(v21);
    v36 = *(_QWORD *)(v20 + 8);
    v37 = *(_QWORD *)(v19 + 8);
    *(_QWORD *)(v19 + 8) = v36;
    swift_retain(v36);
    swift_release(v37);
    v38 = *(_QWORD *)(v20 + 16);
    v39 = *(_QWORD *)(v19 + 16);
    *(_QWORD *)(v19 + 16) = v38;
    swift_retain(v38);
    swift_release(v39);
    v40 = *(_QWORD *)(v20 + 24);
    v41 = *(_QWORD *)(v19 + 24);
    *(_QWORD *)(v19 + 24) = v40;
    swift_retain(v40);
    swift_release(v41);
    if (a1 != a2)
      goto LABEL_14;
LABEL_17:
    *(_BYTE *)(a1 + v8[12]) = *(_BYTE *)(a2 + v8[12]);
    goto LABEL_31;
  }
  if (v22 >= 3)
  {
    *(_QWORD *)v19 = v22;
    v25 = *(_QWORD *)(v20 + 8);
    *(_QWORD *)(v19 + 8) = v25;
    v26 = *(_QWORD *)(v20 + 16);
    *(_QWORD *)(v19 + 16) = v26;
    v27 = *(_QWORD *)(v20 + 24);
    *(_QWORD *)(v19 + 24) = v27;
    swift_retain(v22);
    swift_retain(v25);
    swift_retain(v26);
    swift_retain(v27);
    if (a1 != a2)
      goto LABEL_14;
    goto LABEL_17;
  }
  v23 = *(_OWORD *)(v20 + 16);
  *(_OWORD *)v19 = *(_OWORD *)v20;
  *(_OWORD *)(v19 + 16) = v23;
  if (a1 == a2)
    goto LABEL_17;
LABEL_14:
  v28 = v8[11];
  v29 = (_QWORD *)(a1 + v28);
  v30 = (_QWORD *)(a2 + v28);
  sub_224DC(a1 + v28, type metadata accessor for ButtonViewModel.Content);
  v31 = type metadata accessor for ButtonViewModel.Content(0);
  switch(swift_getEnumCaseMultiPayload(v30, v31))
  {
    case 0u:
      v32 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v32 - 8) + 16))(v29, v30, v32);
      v33 = v29;
      v34 = v31;
      v35 = 0;
      goto LABEL_23;
    case 1u:
      *v29 = *v30;
      v42 = v30[1];
      v29[1] = v42;
      swift_bridgeObjectRetain(v42);
      v33 = v29;
      v34 = v31;
      v35 = 1;
      goto LABEL_23;
    case 2u:
      *v29 = *v30;
      v43 = v30[1];
      v29[1] = v43;
      v44 = (void *)v30[2];
      v29[2] = v44;
      swift_bridgeObjectRetain(v43);
      v45 = v44;
      v46 = *(int *)(sub_5440(&qword_2621A8) + 64);
      v47 = (char *)v29 + v46;
      v48 = (char *)v30 + v46;
      v49 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v49 - 8) + 16))(v47, v48, v49);
      v33 = v29;
      v34 = v31;
      v35 = 2;
      goto LABEL_23;
    case 3u:
      *v29 = *v30;
      v50 = v30[1];
      v29[1] = v50;
      swift_bridgeObjectRetain(v50);
      v51 = *(int *)(sub_5440(&qword_2621B0) + 48);
      v52 = (char *)v29 + v51;
      v53 = (char *)v30 + v51;
      v54 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v54 - 8) + 16))(v52, v53, v54);
      v33 = v29;
      v34 = v31;
      v35 = 3;
      goto LABEL_23;
    case 4u:
      v55 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v55 - 8) + 16))(v29, v30, v55);
      v56 = *(int *)(sub_5440(&qword_2621B8) + 48);
      v57 = (_QWORD *)((char *)v29 + v56);
      v58 = (_QWORD *)((char *)v30 + v56);
      *v57 = *v58;
      v59 = v58[1];
      v57[1] = v59;
      swift_bridgeObjectRetain(v59);
      v33 = v29;
      v34 = v31;
      v35 = 4;
      goto LABEL_23;
    case 5u:
      v60 = type metadata accessor for LocalizerRequest(0);
      v61 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v60 - 8) + 16);
      v61(v29, v30, v60);
      v62 = sub_5440(&qword_2621C0);
      v61((_QWORD *)((char *)v29 + *(int *)(v62 + 48)), (_QWORD *)((char *)v30 + *(int *)(v62 + 48)), v60);
      v33 = v29;
      v34 = v31;
      v35 = 5;
LABEL_23:
      swift_storeEnumTagMultiPayload(v33, v34, v35);
      break;
    default:
      memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
      break;
  }
  *(_BYTE *)(a1 + v8[12]) = *(_BYTE *)(a2 + v8[12]);
  v63 = v8[13];
  v64 = a1 + v63;
  v65 = (__int128 *)(a2 + v63);
  sub_224DC(a1 + v63, type metadata accessor for ButtonViewModel.ActionKind);
  v66 = type metadata accessor for ButtonViewModel.ActionKind(0);
  if (swift_getEnumCaseMultiPayload(v65, v66) == 1)
  {
    v67 = type metadata accessor for URL(0);
    (*(void (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)(v67 - 8) + 16))(v64, v65, v67);
    v68 = v64;
    v69 = v66;
    v70 = 1;
  }
  else
  {
    v71 = *((_QWORD *)v65 + 3);
    if (v71)
    {
      *(_QWORD *)(v64 + 24) = v71;
      *(_QWORD *)(v64 + 32) = *((_QWORD *)v65 + 4);
      (**(void (***)(uint64_t, __int128 *))(v71 - 8))(v64, v65);
    }
    else
    {
      v72 = *v65;
      v73 = v65[1];
      *(_QWORD *)(v64 + 32) = *((_QWORD *)v65 + 4);
      *(_OWORD *)v64 = v72;
      *(_OWORD *)(v64 + 16) = v73;
    }
    v68 = v64;
    v69 = v66;
    v70 = 0;
  }
  swift_storeEnumTagMultiPayload(v68, v69, v70);
LABEL_31:
  v74 = v8[14];
  v75 = (void *)(a1 + v74);
  v76 = (void *)(a2 + v74);
  v77 = type metadata accessor for LocalizerRequest(0);
  v78 = *(_QWORD *)(v77 - 8);
  v79 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v78 + 48);
  v80 = v79(v75, 1, v77);
  v81 = v79(v76, 1, v77);
  if (v80)
  {
    if (!v81)
    {
      (*(void (**)(void *, void *, uint64_t))(v78 + 16))(v75, v76, v77);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v78 + 56))(v75, 0, 1, v77);
      goto LABEL_37;
    }
    goto LABEL_36;
  }
  if (v81)
  {
    (*(void (**)(void *, uint64_t))(v78 + 8))(v75, v77);
LABEL_36:
    v82 = sub_5440(&qword_25E0C8);
    memcpy(v75, v76, *(_QWORD *)(*(_QWORD *)(v82 - 8) + 64));
    goto LABEL_37;
  }
  (*(void (**)(void *, void *, uint64_t))(v78 + 24))(v75, v76, v77);
LABEL_37:
  sub_142F8((_QWORD *)(a1 + a3[5]), (_QWORD *)(a2 + a3[5]));
  v83 = a3[6];
  v84 = a1 + v83;
  v85 = (__int128 *)(a2 + v83);
  v86 = *(_QWORD *)(a2 + v83 + 24);
  if (*(_QWORD *)(a1 + v83 + 24))
  {
    if (v86)
    {
      sub_142F8((_QWORD *)v84, v85);
      goto LABEL_44;
    }
    _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)v84);
  }
  else if (v86)
  {
    *(_QWORD *)(v84 + 24) = v86;
    *(_QWORD *)(v84 + 32) = *((_QWORD *)v85 + 4);
    (**(void (***)(uint64_t, __int128 *))(v86 - 8))(v84, v85);
    goto LABEL_44;
  }
  v87 = *v85;
  v88 = v85[1];
  *(_QWORD *)(v84 + 32) = *((_QWORD *)v85 + 4);
  *(_OWORD *)v84 = v87;
  *(_OWORD *)(v84 + 16) = v88;
LABEL_44:
  v89 = a3[7];
  v90 = (_QWORD *)(a1 + v89);
  v91 = (_QWORD *)(a2 + v89);
  *v90 = *v91;
  v92 = v91[1];
  v93 = v90[1];
  v90[1] = v92;
  swift_bridgeObjectRetain(v92);
  swift_bridgeObjectRelease(v93);
  v94 = a3[8];
  v134 = a1;
  v135 = a2;
  v95 = a1 + v94;
  v96 = v135 + v94;
  v97 = *(_QWORD *)v96;
  v98 = *(_QWORD *)(v96 + 8);
  v99 = *(_QWORD *)(v96 + 16);
  v100 = *(_QWORD *)(v96 + 24);
  v133 = a3;
  v101 = *(_QWORD *)(v96 + 32);
  v102 = *(_QWORD *)(v96 + 40);
  v104 = *(_QWORD *)(v96 + 48);
  v103 = *(_QWORD *)(v96 + 56);
  v105 = *(_WORD *)(v96 + 64);
  sub_3480C(*(_QWORD *)v96, v98, v99, v100, v101, v102, v104, v103, v105, *(_BYTE *)(v96 + 66));
  v106 = *(_QWORD *)v95;
  v107 = *(_QWORD *)(v95 + 8);
  v108 = *(_QWORD *)(v95 + 16);
  v109 = *(_QWORD *)(v95 + 24);
  v110 = *(_QWORD *)(v95 + 32);
  v111 = *(_QWORD *)(v95 + 40);
  v112 = *(_QWORD *)(v95 + 48);
  v113 = *(_QWORD *)(v95 + 56);
  v114 = *(_WORD *)(v95 + 64);
  v115 = *(_BYTE *)(v95 + 66);
  *(_QWORD *)v95 = v97;
  *(_QWORD *)(v95 + 8) = v98;
  *(_QWORD *)(v95 + 16) = v99;
  *(_QWORD *)(v95 + 24) = v100;
  *(_QWORD *)(v95 + 32) = v101;
  *(_QWORD *)(v95 + 40) = v102;
  *(_QWORD *)(v95 + 48) = v104;
  *(_QWORD *)(v95 + 56) = v103;
  *(_WORD *)(v95 + 64) = v105;
  *(_BYTE *)(v95 + 66) = v132;
  sub_BDF8(v106, v107, v108, v109, v110, v111, v112, v113, v114, v115);
  if (v134 != v135)
  {
    v116 = v133[9];
    v117 = (uint64_t *)(v134 + v116);
    v118 = (uint64_t *)(v135 + v116);
    sub_B414(v134 + v116, &qword_25F758);
    v119 = sub_5440(&qword_25F758);
    if (swift_getEnumCaseMultiPayload(v118, v119) == 1)
    {
      v120 = type metadata accessor for UUID(0);
      v121 = *(_QWORD *)(v120 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v121 + 48))(v118, 1, v120))
      {
        v122 = sub_5440(&qword_25FAC0);
        memcpy(v117, v118, *(_QWORD *)(*(_QWORD *)(v122 - 8) + 64));
        v123 = 1;
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v121 + 16))(v117, v118, v120);
        v123 = 1;
        (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v121 + 56))(v117, 0, 1, v120);
      }
    }
    else
    {
      v124 = *v118;
      *v117 = *v118;
      swift_retain(v124);
      v123 = 0;
    }
    swift_storeEnumTagMultiPayload(v117, v119, v123);
  }
  v125 = v133[10];
  v126 = (_QWORD *)(v134 + v125);
  v127 = (_QWORD *)(v135 + v125);
  v128 = *(void **)(v134 + v125);
  v129 = *(void **)(v135 + v125);
  *v126 = *v127;
  v130 = v129;

  v126[1] = v127[1];
  return v134;
}

uint64_t initializeWithTake for QuickActionBuyButtonViewModel(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  int *v8;
  uint64_t v9;
  void *v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  __int128 v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(_QWORD *, _QWORD *, uint64_t);
  uint64_t v38;
  uint64_t v39;
  void *v40;
  const void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  const void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  __int128 *v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  __int128 v61;
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  void *v68;
  const void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;

  v6 = sub_5440(&qword_25FC38);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v8 = (int *)type metadata accessor for ButtonViewModel(0);
  v7(a1 + v8[5], a2 + v8[5], v6);
  v9 = v8[6];
  v10 = (void *)(a1 + v9);
  v11 = (const void *)(a2 + v9);
  v12 = sub_5440(&qword_25F1E8);
  if (swift_getEnumCaseMultiPayload(v11, v12) == 1)
  {
    v13 = type metadata accessor for ColorScheme(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v10, v11, v13);
    swift_storeEnumTagMultiPayload(v10, v12, 1);
  }
  else
  {
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  *(_BYTE *)(a1 + v8[7]) = *(_BYTE *)(a2 + v8[7]);
  *(_BYTE *)(a1 + v8[8]) = *(_BYTE *)(a2 + v8[8]);
  *(_BYTE *)(a1 + v8[9]) = *(_BYTE *)(a2 + v8[9]);
  v14 = v8[10];
  v15 = (_OWORD *)(a1 + v14);
  v16 = (_OWORD *)(a2 + v14);
  v17 = v16[1];
  *v15 = *v16;
  v15[1] = v17;
  v18 = v8[11];
  v19 = (_QWORD *)(a1 + v18);
  v20 = (_QWORD *)(a2 + v18);
  v21 = type metadata accessor for ButtonViewModel.Content(0);
  switch(swift_getEnumCaseMultiPayload(v20, v21))
  {
    case 0u:
      v22 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v19, v20, v22);
      v23 = v19;
      v24 = v21;
      v25 = 0;
      goto LABEL_11;
    case 2u:
      *(_OWORD *)v19 = *(_OWORD *)v20;
      v19[2] = v20[2];
      v26 = *(int *)(sub_5440(&qword_2621A8) + 64);
      v27 = (char *)v19 + v26;
      v28 = (char *)v20 + v26;
      v29 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v29 - 8) + 32))(v27, v28, v29);
      v23 = v19;
      v24 = v21;
      v25 = 2;
      goto LABEL_11;
    case 3u:
      *(_OWORD *)v19 = *(_OWORD *)v20;
      v30 = *(int *)(sub_5440(&qword_2621B0) + 48);
      v31 = (char *)v19 + v30;
      v32 = (char *)v20 + v30;
      v33 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v33 - 8) + 32))(v31, v32, v33);
      v23 = v19;
      v24 = v21;
      v25 = 3;
      goto LABEL_11;
    case 4u:
      v34 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v34 - 8) + 32))(v19, v20, v34);
      v35 = sub_5440(&qword_2621B8);
      *(_OWORD *)((char *)v19 + *(int *)(v35 + 48)) = *(_OWORD *)((char *)v20 + *(int *)(v35 + 48));
      v23 = v19;
      v24 = v21;
      v25 = 4;
      goto LABEL_11;
    case 5u:
      v36 = type metadata accessor for LocalizerRequest(0);
      v37 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v36 - 8) + 32);
      v37(v19, v20, v36);
      v38 = sub_5440(&qword_2621C0);
      v37((_QWORD *)((char *)v19 + *(int *)(v38 + 48)), (_QWORD *)((char *)v20 + *(int *)(v38 + 48)), v36);
      v23 = v19;
      v24 = v21;
      v25 = 5;
LABEL_11:
      swift_storeEnumTagMultiPayload(v23, v24, v25);
      break;
    default:
      memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
      break;
  }
  *(_BYTE *)(a1 + v8[12]) = *(_BYTE *)(a2 + v8[12]);
  v39 = v8[13];
  v40 = (void *)(a1 + v39);
  v41 = (const void *)(a2 + v39);
  v42 = type metadata accessor for ButtonViewModel.ActionKind(0);
  if (swift_getEnumCaseMultiPayload(v41, v42) == 1)
  {
    v43 = type metadata accessor for URL(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v43 - 8) + 32))(v40, v41, v43);
    swift_storeEnumTagMultiPayload(v40, v42, 1);
  }
  else
  {
    memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
  }
  v44 = v8[14];
  v45 = (void *)(a1 + v44);
  v46 = (const void *)(a2 + v44);
  v47 = type metadata accessor for LocalizerRequest(0);
  v48 = *(_QWORD *)(v47 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v48 + 48))(v46, 1, v47))
  {
    v49 = sub_5440(&qword_25E0C8);
    memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v48 + 32))(v45, v46, v47);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v48 + 56))(v45, 0, 1, v47);
  }
  v50 = a3[5];
  v51 = a3[6];
  v52 = a1 + v50;
  v53 = a2 + v50;
  *(_QWORD *)(v52 + 32) = *(_QWORD *)(v53 + 32);
  v54 = *(_OWORD *)(v53 + 16);
  *(_OWORD *)v52 = *(_OWORD *)v53;
  *(_OWORD *)(v52 + 16) = v54;
  v55 = a1 + v51;
  v56 = (__int128 *)(a2 + v51);
  *(_QWORD *)(v55 + 32) = *((_QWORD *)v56 + 4);
  v58 = *v56;
  v57 = v56[1];
  v59 = a3[7];
  v60 = a3[8];
  v61 = *(_OWORD *)(a2 + v59);
  *(_OWORD *)v55 = v58;
  *(_OWORD *)(v55 + 16) = v57;
  *(_OWORD *)(a1 + v59) = v61;
  v62 = a1 + v60;
  v63 = *(_OWORD *)(a2 + v60);
  v64 = *(_OWORD *)(a2 + v60 + 16);
  v65 = *(_OWORD *)(a2 + v60 + 32);
  v66 = *(_OWORD *)(a2 + v60 + 48);
  *(_DWORD *)(v62 + 63) = *(_DWORD *)(a2 + v60 + 63);
  *(_OWORD *)(v62 + 32) = v65;
  *(_OWORD *)(v62 + 48) = v66;
  v67 = a3[9];
  v68 = (void *)(a1 + v67);
  v69 = (const void *)(a2 + v67);
  *(_OWORD *)v62 = v63;
  *(_OWORD *)(v62 + 16) = v64;
  v70 = sub_5440(&qword_25F758);
  if (swift_getEnumCaseMultiPayload(v69, v70) == 1)
  {
    v71 = type metadata accessor for UUID(0);
    v72 = *(_QWORD *)(v71 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v72 + 48))(v69, 1, v71))
    {
      v73 = sub_5440(&qword_25FAC0);
      memcpy(v68, v69, *(_QWORD *)(*(_QWORD *)(v73 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v72 + 32))(v68, v69, v71);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v72 + 56))(v68, 0, 1, v71);
    }
    swift_storeEnumTagMultiPayload(v68, v70, 1);
  }
  else
  {
    memcpy(v68, v69, *(_QWORD *)(*(_QWORD *)(v70 - 8) + 64));
  }
  *(_OWORD *)(a1 + a3[10]) = *(_OWORD *)(a2 + a3[10]);
  return a1;
}

uint64_t assignWithTake for QuickActionBuyButtonViewModel(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  int *v8;
  uint64_t v9;
  void *v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  unint64_t v17;
  __int128 v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(_QWORD *, _QWORD *, uint64_t);
  uint64_t v42;
  uint64_t v43;
  void *v44;
  const void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t (*v53)(void *, uint64_t, uint64_t);
  int v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __int128 v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  __int16 v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  __int16 v84;
  char v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;
  void *v89;
  const void *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  _QWORD *v97;
  void *v98;

  v6 = sub_5440(&qword_25FC38);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  v8 = (int *)type metadata accessor for ButtonViewModel(0);
  v7(a1 + v8[5], a2 + v8[5], v6);
  if (a1 != a2)
  {
    v9 = v8[6];
    v10 = (void *)(a1 + v9);
    v11 = (const void *)(a2 + v9);
    sub_B414(a1 + v9, &qword_25F1E8);
    v12 = sub_5440(&qword_25F1E8);
    if (swift_getEnumCaseMultiPayload(v11, v12) == 1)
    {
      v13 = type metadata accessor for ColorScheme(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v10, v11, v13);
      swift_storeEnumTagMultiPayload(v10, v12, 1);
    }
    else
    {
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
  }
  *(_BYTE *)(a1 + v8[7]) = *(_BYTE *)(a2 + v8[7]);
  *(_BYTE *)(a1 + v8[8]) = *(_BYTE *)(a2 + v8[8]);
  *(_BYTE *)(a1 + v8[9]) = *(_BYTE *)(a2 + v8[9]);
  v14 = v8[10];
  v15 = (_QWORD *)(a1 + v14);
  v16 = (_QWORD *)(a2 + v14);
  v17 = *(_QWORD *)(a1 + v14);
  if (v17 >= 3)
  {
    if (*v16 >= 3uLL)
    {
      *v15 = *v16;
      swift_release(v17);
      v27 = v15[1];
      v15[1] = v16[1];
      swift_release(v27);
      v28 = v15[2];
      v15[2] = v16[2];
      swift_release(v28);
      v29 = v15[3];
      v15[3] = v16[3];
      swift_release(v29);
      if (a1 != a2)
        goto LABEL_9;
LABEL_12:
      *(_BYTE *)(a1 + v8[12]) = *(_BYTE *)(a2 + v8[12]);
      goto LABEL_22;
    }
    sub_B414((uint64_t)v15, &qword_2624C0);
  }
  v18 = *((_OWORD *)v16 + 1);
  *(_OWORD *)v15 = *(_OWORD *)v16;
  *((_OWORD *)v15 + 1) = v18;
  if (a1 == a2)
    goto LABEL_12;
LABEL_9:
  v19 = v8[11];
  v20 = (_QWORD *)(a1 + v19);
  v21 = (_QWORD *)(a2 + v19);
  sub_224DC(a1 + v19, type metadata accessor for ButtonViewModel.Content);
  v22 = type metadata accessor for ButtonViewModel.Content(0);
  switch(swift_getEnumCaseMultiPayload(v21, v22))
  {
    case 0u:
      v23 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v23 - 8) + 32))(v20, v21, v23);
      v24 = v20;
      v25 = v22;
      v26 = 0;
      goto LABEL_18;
    case 2u:
      *(_OWORD *)v20 = *(_OWORD *)v21;
      v20[2] = v21[2];
      v30 = *(int *)(sub_5440(&qword_2621A8) + 64);
      v31 = (char *)v20 + v30;
      v32 = (char *)v21 + v30;
      v33 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v33 - 8) + 32))(v31, v32, v33);
      v24 = v20;
      v25 = v22;
      v26 = 2;
      goto LABEL_18;
    case 3u:
      *(_OWORD *)v20 = *(_OWORD *)v21;
      v34 = *(int *)(sub_5440(&qword_2621B0) + 48);
      v35 = (char *)v20 + v34;
      v36 = (char *)v21 + v34;
      v37 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v37 - 8) + 32))(v35, v36, v37);
      v24 = v20;
      v25 = v22;
      v26 = 3;
      goto LABEL_18;
    case 4u:
      v38 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v38 - 8) + 32))(v20, v21, v38);
      v39 = sub_5440(&qword_2621B8);
      *(_OWORD *)((char *)v20 + *(int *)(v39 + 48)) = *(_OWORD *)((char *)v21 + *(int *)(v39 + 48));
      v24 = v20;
      v25 = v22;
      v26 = 4;
      goto LABEL_18;
    case 5u:
      v40 = type metadata accessor for LocalizerRequest(0);
      v41 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v40 - 8) + 32);
      v41(v20, v21, v40);
      v42 = sub_5440(&qword_2621C0);
      v41((_QWORD *)((char *)v20 + *(int *)(v42 + 48)), (_QWORD *)((char *)v21 + *(int *)(v42 + 48)), v40);
      v24 = v20;
      v25 = v22;
      v26 = 5;
LABEL_18:
      swift_storeEnumTagMultiPayload(v24, v25, v26);
      break;
    default:
      memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
      break;
  }
  *(_BYTE *)(a1 + v8[12]) = *(_BYTE *)(a2 + v8[12]);
  v43 = v8[13];
  v44 = (void *)(a1 + v43);
  v45 = (const void *)(a2 + v43);
  sub_224DC(a1 + v43, type metadata accessor for ButtonViewModel.ActionKind);
  v46 = type metadata accessor for ButtonViewModel.ActionKind(0);
  if (swift_getEnumCaseMultiPayload(v45, v46) == 1)
  {
    v47 = type metadata accessor for URL(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v47 - 8) + 32))(v44, v45, v47);
    swift_storeEnumTagMultiPayload(v44, v46, 1);
  }
  else
  {
    memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
  }
LABEL_22:
  v48 = v8[14];
  v49 = (void *)(a1 + v48);
  v50 = (void *)(a2 + v48);
  v51 = type metadata accessor for LocalizerRequest(0);
  v52 = *(_QWORD *)(v51 - 8);
  v53 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v52 + 48);
  v54 = v53(v49, 1, v51);
  v55 = v53(v50, 1, v51);
  if (v54)
  {
    if (!v55)
    {
      (*(void (**)(void *, void *, uint64_t))(v52 + 32))(v49, v50, v51);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v52 + 56))(v49, 0, 1, v51);
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  if (v55)
  {
    (*(void (**)(void *, uint64_t))(v52 + 8))(v49, v51);
LABEL_27:
    v56 = sub_5440(&qword_25E0C8);
    memcpy(v49, v50, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
    goto LABEL_28;
  }
  (*(void (**)(void *, void *, uint64_t))(v52 + 40))(v49, v50, v51);
LABEL_28:
  v57 = a3[5];
  v58 = a1 + v57;
  v59 = a2 + v57;
  _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)(a1 + v57));
  *(_QWORD *)(v58 + 32) = *(_QWORD *)(v59 + 32);
  v60 = *(_OWORD *)(v59 + 16);
  *(_OWORD *)v58 = *(_OWORD *)v59;
  *(_OWORD *)(v58 + 16) = v60;
  v61 = a3[6];
  v62 = a1 + v61;
  v63 = a2 + v61;
  if (*(_QWORD *)(a1 + v61 + 24))
    _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)v62);
  v64 = *(_OWORD *)(v63 + 16);
  *(_OWORD *)v62 = *(_OWORD *)v63;
  *(_OWORD *)(v62 + 16) = v64;
  *(_QWORD *)(v62 + 32) = *(_QWORD *)(v63 + 32);
  v65 = a3[7];
  v66 = (_QWORD *)(a1 + v65);
  v67 = (uint64_t *)(a2 + v65);
  v69 = *v67;
  v68 = v67[1];
  v70 = v66[1];
  *v66 = v69;
  v66[1] = v68;
  swift_bridgeObjectRelease(v70);
  v71 = a3[8];
  v72 = a1 + v71;
  v73 = a2 + v71;
  v74 = *(_WORD *)(v73 + 64);
  v75 = *(_BYTE *)(v73 + 66);
  v76 = *(_QWORD *)v72;
  v77 = *(_QWORD *)(v72 + 8);
  v78 = *(_QWORD *)(v72 + 16);
  v79 = *(_QWORD *)(v72 + 24);
  v80 = *(_QWORD *)(v72 + 32);
  v81 = *(_QWORD *)(v72 + 40);
  v82 = *(_QWORD *)(v72 + 48);
  v83 = *(_QWORD *)(v72 + 56);
  v84 = *(_WORD *)(v72 + 64);
  v85 = *(_BYTE *)(v72 + 66);
  v86 = *(_OWORD *)(v73 + 16);
  *(_OWORD *)v72 = *(_OWORD *)v73;
  *(_OWORD *)(v72 + 16) = v86;
  v87 = *(_OWORD *)(v73 + 48);
  *(_OWORD *)(v72 + 32) = *(_OWORD *)(v73 + 32);
  *(_OWORD *)(v72 + 48) = v87;
  *(_WORD *)(v72 + 64) = v74;
  *(_BYTE *)(v72 + 66) = v75;
  sub_BDF8(v76, v77, v78, v79, v80, v81, v82, v83, v84, v85);
  if (a1 != a2)
  {
    v88 = a3[9];
    v89 = (void *)(a1 + v88);
    v90 = (const void *)(a2 + v88);
    sub_B414(a1 + v88, &qword_25F758);
    v91 = sub_5440(&qword_25F758);
    if (swift_getEnumCaseMultiPayload(v90, v91) == 1)
    {
      v92 = type metadata accessor for UUID(0);
      v93 = *(_QWORD *)(v92 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v93 + 48))(v90, 1, v92))
      {
        v94 = sub_5440(&qword_25FAC0);
        memcpy(v89, v90, *(_QWORD *)(*(_QWORD *)(v94 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v93 + 32))(v89, v90, v92);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v93 + 56))(v89, 0, 1, v92);
      }
      swift_storeEnumTagMultiPayload(v89, v91, 1);
    }
    else
    {
      memcpy(v89, v90, *(_QWORD *)(*(_QWORD *)(v91 - 8) + 64));
    }
  }
  v95 = a3[10];
  v96 = (_QWORD *)(a1 + v95);
  v97 = (_QWORD *)(a2 + v95);
  v98 = *(void **)(a1 + v95);
  *v96 = *v97;

  v96[1] = v97[1];
  return a1;
}

uint64_t getEnumTagSinglePayload for QuickActionBuyButtonViewModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_E6258);
}

uint64_t sub_E6258(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  unint64_t v11;

  v6 = type metadata accessor for ButtonViewModel(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v8 = sub_5440(&qword_261678);
    v10 = a1 + *(int *)(a3 + 36);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
    return v9(v10, a2, v8);
  }
  v11 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 24);
  if (v11 >= 0xFFFFFFFF)
    LODWORD(v11) = -1;
  return (v11 + 1);
}

uint64_t storeEnumTagSinglePayload for QuickActionBuyButtonViewModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_E6314);
}

uint64_t sub_E6314(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  result = type metadata accessor for ButtonViewModel(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(_QWORD *)(a1 + *(int *)(a4 + 20) + 24) = (a2 - 1);
      return result;
    }
    v10 = sub_5440(&qword_261678);
    v12 = a1 + *(int *)(a4 + 36);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_E63C0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[7];

  v2 = type metadata accessor for ButtonViewModel(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    v6[1] = "(";
    v6[2] = &unk_1EAF98;
    v6[3] = &unk_1EAFB0;
    v6[4] = &unk_1EAFC8;
    sub_627B0(319);
    if (v5 <= 0x3F)
    {
      v6[5] = *(_QWORD *)(v4 - 8) + 64;
      v6[6] = &unk_1EAFB0;
      swift_initStructMetadata(a1, 256, 7, v6, a1 + 16);
    }
  }
}

uint64_t sub_E646C()
{
  _QWORD v1[2];

  v1[0] = sub_7EF8(&qword_2649A0);
  v1[1] = sub_E141C();
  return swift_getOpaqueTypeConformance2(v1, &opaque type descriptor for <<opaque return type of View.impressionable(_:configuration:position:definesParentContext:)>>, 1);
}

uint64_t sub_E64B8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 37, 7);
}

uint64_t sub_E64C8(uint64_t a1)
{
  return sub_E64F0(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))sub_E0D80);
}

uint64_t sub_E64D4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 37, 7);
}

uint64_t sub_E64E4(uint64_t a1)
{
  return sub_E64F0(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))sub_E0FF8);
}

uint64_t sub_E64F0(uint64_t a1, uint64_t (*a2)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))
{
  uint64_t v2;

  return a2(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(unsigned int *)(v2 + 32), *(unsigned __int8 *)(v2 + 36));
}

uint64_t AudiobookCoverEffect.init(shadowScale:cornerRadius:)@<X0>(double *a1@<X8>, double a2@<D0>, double a3@<D1>)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t result;

  v6 = (_QWORD *)((char *)a1 + *(int *)(type metadata accessor for AudiobookCoverEffect(0) + 24));
  *v6 = swift_getKeyPath(&unk_1EAFE0);
  v7 = sub_5440(&qword_25E948);
  result = swift_storeEnumTagMultiPayload(v6, v7, 0);
  *a1 = a2;
  a1[1] = a3;
  return result;
}

uint64_t type metadata accessor for AudiobookCoverEffect(uint64_t a1)
{
  uint64_t result;

  result = qword_264B98;
  if (!qword_264B98)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AudiobookCoverEffect);
  return result;
}

uint64_t AudiobookCoverEffect.body(cover:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t (*v13)(_QWORD);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;

  v3 = v2;
  v6 = sub_5440(&qword_264AF0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  __chkstk_darwin(v6);
  v9 = type metadata accessor for AudiobookCoverEffect(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  __chkstk_darwin(v9);
  v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1E428(v3, (uint64_t)v12, v13);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v6);
  v14 = *(unsigned __int8 *)(v10 + 80);
  v15 = (v14 + 16) & ~v14;
  v16 = *(unsigned __int8 *)(v7 + 80);
  v17 = (v11 + v16 + v15) & ~v16;
  v18 = swift_allocObject(&unk_251B60, v17 + v8, v14 | v16 | 7);
  sub_E6770((uint64_t)v12, v18 + v15);
  result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v7 + 32))(v18 + v17, (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  *a2 = sub_E67B4;
  a2[1] = v18;
  return result;
}

uint64_t sub_E66F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  double v7;
  double v8;
  double v9;
  uint64_t v10;
  uint64_t v11;

  v7 = GeometryProxy.size.getter(a1);
  v9 = v8;
  *a4 = _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0();
  a4[1] = v10;
  v11 = sub_5440(&qword_264BE8);
  return sub_E67B8(a2, a3, (uint64_t)a4 + *(int *)(v11 + 44), v7, v9);
}

uint64_t sub_E6770(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AudiobookCoverEffect(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_E67B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>)
{
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;

  v39 = a3;
  v9 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v9);
  v11 = (uint64_t *)((char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = sub_5440(&qword_264BF0);
  __chkstk_darwin(v12);
  v14 = (char *)&v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_5440(&qword_264BF8);
  v16 = __chkstk_darwin(v15);
  v18 = (char *)&v38 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v20 = (char *)&v38 - v19;
  v21 = sub_5440(&qword_264C00);
  v22 = __chkstk_darwin(v21);
  v24 = (char *)&v38 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = __chkstk_darwin(v22);
  v27 = (uint64_t *)((char *)&v38 - v26);
  *v27 = static Alignment.bottom.getter(v25);
  v27[1] = v28;
  v29 = sub_5440(&qword_264C08);
  sub_E6AC0(a1, a2, (uint64_t)v27 + *(int *)(v29 + 44), a4, a5);
  sub_E75F8(a2, a1, (uint64_t)v14, a4, a5);
  v30 = *(_QWORD *)(a1 + 8);
  v31 = (char *)v11 + *(int *)(v9 + 20);
  v32 = enum case for RoundedCornerStyle.continuous(_:);
  v33 = type metadata accessor for RoundedCornerStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 104))(v31, v32, v33);
  *v11 = v30;
  v11[1] = v30;
  v34 = (uint64_t)&v18[*(int *)(v15 + 36)];
  sub_1E428((uint64_t)v11, v34, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  *(_WORD *)(v34 + *(int *)(sub_5440(&qword_25F700) + 36)) = 256;
  sub_B3D0((uint64_t)v14, (uint64_t)v18, &qword_264BF0);
  sub_224DC((uint64_t)v11, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  sub_B414((uint64_t)v14, &qword_264BF0);
  sub_167A4((uint64_t)v18, (uint64_t)v20, &qword_264BF8);
  sub_B3D0((uint64_t)v27, (uint64_t)v24, &qword_264C00);
  sub_B3D0((uint64_t)v20, (uint64_t)v18, &qword_264BF8);
  v35 = v39;
  sub_B3D0((uint64_t)v24, v39, &qword_264C00);
  v36 = sub_5440(&qword_264C10);
  sub_B3D0((uint64_t)v18, v35 + *(int *)(v36 + 48), &qword_264BF8);
  sub_B414((uint64_t)v20, &qword_264BF8);
  sub_B414((uint64_t)v27, &qword_264C00);
  sub_B414((uint64_t)v18, &qword_264BF8);
  return sub_B414((uint64_t)v24, &qword_264C00);
}

uint64_t sub_E6AC0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  double v45;
  double v46;
  double v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  __int128 v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  void (*v58)(char *, uint64_t);
  double v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _OWORD *v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  double v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void (*v88)(char *);
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t (*v92)(char *, uint64_t, uint64_t);
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unsigned int v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  _OWORD v123[3];
  _OWORD v124[3];

  v107 = a2;
  v121 = a3;
  v8 = type metadata accessor for BlendMode(0);
  v119 = *(_QWORD *)(v8 - 8);
  v120 = v8;
  __chkstk_darwin(v8);
  v118 = (char *)&v88 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v105 = sub_5440(&qword_264C18);
  __chkstk_darwin(v105);
  v103 = (char *)&v88 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v106 = sub_5440(&qword_264C28);
  __chkstk_darwin(v106);
  v104 = (char *)&v88 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v116 = sub_5440(&qword_264C30);
  __chkstk_darwin(v116);
  v111 = (uint64_t)&v88 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v114 = sub_5440(&qword_264C38);
  __chkstk_darwin(v114);
  v110 = (uint64_t)&v88 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v113 = sub_5440(&qword_264C40);
  __chkstk_darwin(v113);
  v109 = (uint64_t)&v88 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v112 = sub_5440(&qword_264C48);
  v15 = __chkstk_darwin(v112);
  v117 = (uint64_t)&v88 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v15);
  v108 = (char *)&v88 - v18;
  __chkstk_darwin(v17);
  v115 = (uint64_t)&v88 - v19;
  v101 = type metadata accessor for ColorScheme(0);
  v100 = *(_QWORD *)(v101 - 8);
  v20 = __chkstk_darwin(v101);
  v99 = (char *)&v88 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v98 = (uint64_t)&v88 - v22;
  v23 = type metadata accessor for RoundedRectangle(0);
  v97 = v23;
  __chkstk_darwin(v23);
  v25 = (char *)&v88 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = sub_5440(&qword_260860);
  __chkstk_darwin(v26);
  v28 = (char *)&v88 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = sub_5440(&qword_260868);
  __chkstk_darwin(v29);
  v31 = (char *)&v88 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v89 = sub_5440(&qword_260870);
  __chkstk_darwin(v89);
  v33 = (char *)&v88 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v94 = sub_5440(&qword_260878);
  __chkstk_darwin(v94);
  v91 = (uint64_t)&v88 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v93 = sub_5440(&qword_260880);
  v35 = __chkstk_darwin(v93);
  v102 = (uint64_t)&v88 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = __chkstk_darwin(v35);
  v90 = (uint64_t)&v88 - v38;
  __chkstk_darwin(v37);
  v122 = (uint64_t)&v88 - v39;
  v40 = *(_QWORD *)(a1 + 8);
  v41 = &v25[*(int *)(v23 + 20)];
  v42 = enum case for RoundedCornerStyle.continuous(_:);
  v96 = enum case for RoundedCornerStyle.continuous(_:);
  v95 = type metadata accessor for RoundedCornerStyle(0);
  v92 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v95 - 8) + 104);
  v43 = v92(v41, v42, v95);
  *(_QWORD *)v25 = v40;
  *((_QWORD *)v25 + 1) = v40;
  v44 = static Color.black.getter(v43);
  sub_1E428((uint64_t)v25, (uint64_t)v28, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  *(_QWORD *)&v28[*(int *)(v26 + 52)] = v44;
  *(_WORD *)&v28[*(int *)(v26 + 56)] = 256;
  sub_224DC((uint64_t)v25, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  v45 = *(double *)a1;
  v46 = *(double *)a1 * a4;
  v47 = *(double *)a1 * a5;
  v48 = _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0();
  _FrameLayout.init(width:height:alignment:)(v123, *(_QWORD *)&v46, 0, *(_QWORD *)&v47, 0, v48, v49);
  sub_B3D0((uint64_t)v28, (uint64_t)v31, &qword_260860);
  v50 = &v31[*(int *)(v29 + 36)];
  v51 = v123[1];
  *(_OWORD *)v50 = v123[0];
  *((_OWORD *)v50 + 1) = v51;
  *((_OWORD *)v50 + 2) = v123[2];
  sub_B414((uint64_t)v28, &qword_260860);
  sub_B3D0((uint64_t)v31, (uint64_t)v33, &qword_260868);
  v52 = &v33[*(int *)(v89 + 36)];
  *(_QWORD *)v52 = 0;
  *((double *)v52 + 1) = (1.0 - v45) * a5 * -0.25;
  sub_B414((uint64_t)v31, &qword_260868);
  type metadata accessor for AudiobookCoverEffect(0);
  v53 = a1;
  v54 = v98;
  sub_31378(v98);
  LODWORD(v89) = enum case for ColorScheme.dark(_:);
  v55 = v100;
  v88 = *(void (**)(char *))(v100 + 104);
  v56 = v99;
  v57 = v101;
  v88(v99);
  LOBYTE(v46) = static ColorScheme.== infix(_:_:)(v54, v56);
  v58 = *(void (**)(char *, uint64_t))(v55 + 8);
  v58(v56, v57);
  v58((char *)v54, v57);
  if ((LOBYTE(v46) & 1) != 0)
    v59 = 0.9;
  else
    v59 = 0.75;
  v60 = v91;
  sub_B3D0((uint64_t)v33, v91, &qword_260870);
  *(double *)(v60 + *(int *)(v94 + 36)) = v59;
  sub_B414((uint64_t)v33, &qword_260870);
  v61 = v90;
  sub_B3D0(v60, v90, &qword_260878);
  v62 = v61 + *(int *)(v93 + 36);
  *(double *)v62 = a4 * 0.1;
  *(_BYTE *)(v62 + 8) = 0;
  sub_B414(v60, &qword_260878);
  sub_167A4(v61, v122, &qword_260880);
  v63 = _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0();
  _FrameLayout.init(width:height:alignment:)(v124, *(_QWORD *)&a4, 0, *(_QWORD *)&a5, 0, v63, v64);
  v65 = sub_5440(&qword_264AF0);
  v66 = (uint64_t)v103;
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v65 - 8) + 16))(v103, v107, v65);
  v67 = (_OWORD *)(v66 + *(int *)(v105 + 36));
  v68 = v124[1];
  *v67 = v124[0];
  v67[1] = v68;
  v67[2] = v124[2];
  v69 = *(_QWORD *)(v53 + 8);
  v92(&v25[*(int *)(v97 + 20)], v96, v95);
  *(_QWORD *)v25 = v69;
  *((_QWORD *)v25 + 1) = v69;
  v70 = (uint64_t)v104;
  v71 = (uint64_t)&v104[*(int *)(v106 + 36)];
  sub_1E428((uint64_t)v25, v71, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  *(_WORD *)(v71 + *(int *)(sub_5440(&qword_25F700) + 36)) = 256;
  sub_B3D0(v66, v70, &qword_264C18);
  sub_224DC((uint64_t)v25, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  sub_B414(v66, &qword_264C18);
  sub_31378(v54);
  ((void (*)(char *, _QWORD, uint64_t))v88)(v56, v89, v57);
  LOBYTE(v71) = static ColorScheme.== infix(_:_:)(v54, v56);
  v58(v56, v57);
  v58((char *)v54, v57);
  if ((v71 & 1) != 0)
    v72 = 0.15;
  else
    v72 = 0.5;
  v73 = v111;
  sub_B3D0(v70, v111, &qword_264C28);
  *(double *)(v73 + *(int *)(v116 + 36)) = v72;
  sub_B414(v70, &qword_264C28);
  v74 = v110;
  sub_B3D0(v73, v110, &qword_264C30);
  v75 = v74 + *(int *)(v114 + 36);
  *(double *)v75 = a4 * 0.1;
  *(_BYTE *)(v75 + 8) = 0;
  sub_B414(v73, &qword_264C30);
  v76 = v109;
  sub_B3D0(v74, v109, &qword_264C38);
  *(_QWORD *)(v76 + *(int *)(v113 + 36)) = 0x3FF199999999999ALL;
  sub_B414(v74, &qword_264C38);
  v78 = v118;
  v77 = v119;
  v79 = v120;
  (*(void (**)(char *, _QWORD, uint64_t))(v119 + 104))(v118, enum case for BlendMode.color(_:), v120);
  v80 = (uint64_t)v108;
  (*(void (**)(char *, char *, uint64_t))(v77 + 16))(&v108[*(int *)(v112 + 36)], v78, v79);
  sub_B3D0(v76, v80, &qword_264C40);
  (*(void (**)(char *, uint64_t))(v77 + 8))(v78, v79);
  sub_B414(v76, &qword_264C40);
  v81 = v115;
  sub_167A4(v80, v115, &qword_264C48);
  v82 = v122;
  v83 = v102;
  sub_B3D0(v122, v102, &qword_260880);
  v84 = v117;
  sub_B3D0(v81, v117, &qword_264C48);
  v85 = v121;
  sub_B3D0(v83, v121, &qword_260880);
  v86 = sub_5440(&qword_264C50);
  sub_B3D0(v84, v85 + *(int *)(v86 + 48), &qword_264C48);
  sub_B414(v81, &qword_264C48);
  sub_B414(v82, &qword_260880);
  sub_B414(v84, &qword_264C48);
  return sub_B414(v83, &qword_260880);
}

uint64_t sub_E75D8(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &opaque type descriptor for <<opaque return type of AudiobookCoverEffect.body(cover:)>>, 1);
}

uint64_t sub_E75E8(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &opaque type descriptor for <<opaque return type of AudiobookCoverEffect.shape>>, 1);
}

uint64_t sub_E75F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  double v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(char *, uint64_t, uint64_t);
  char *v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  void (*v84)(char *, char *, uint64_t);
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _OWORD *v94;
  __int128 v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  __n128 v101;
  uint64_t *v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  char *v111;
  void (*v112)(char *, uint64_t);
  uint64_t v113;
  float v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  _OWORD *v125;
  __int128 v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  __n128 v130;
  uint64_t *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  int *v145;
  uint64_t v147;
  uint64_t v148;
  __int128 v149;
  char *v150;
  uint64_t v151;
  char *v152;
  char *v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  char *v158;
  uint64_t v159;
  uint64_t *v160;
  char *v161;
  char *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  char *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  char *v173;
  uint64_t v174;
  char *v175;
  uint64_t v176;
  uint64_t *v177;
  uint64_t v178;
  double v179;
  void (*v180)(char *, _QWORD, uint64_t);
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  char *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  _OWORD v192[3];
  uint64_t v193;
  __int128 v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  char v198;
  uint64_t v199;
  char v200;
  uint64_t v201;
  uint64_t v202;
  _OWORD v203[3];
  _OWORD v204[3];

  v157 = a2;
  v178 = a3;
  v171 = type metadata accessor for ColorScheme(0);
  v170 = *(_QWORD *)(v171 - 8);
  v8 = __chkstk_darwin(v171);
  v169 = (char *)&v147 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v167 = (uint64_t)&v147 - v10;
  v181 = type metadata accessor for ShadowStyle(0);
  v164 = *(_QWORD *)(v181 - 8);
  __chkstk_darwin(v181);
  v161 = (char *)&v147 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v190 = sub_5440(&qword_2607D8);
  v12 = __chkstk_darwin(v190);
  v177 = (uint64_t *)((char *)&v147 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v12);
  v160 = (uint64_t *)((char *)&v147 - v14);
  v166 = sub_5440(&qword_2607E0);
  v15 = __chkstk_darwin(v166);
  v176 = (uint64_t)&v147 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v163 = (uint64_t)&v147 - v17;
  v165 = sub_5440(&qword_2607E8);
  v18 = __chkstk_darwin(v165);
  v175 = (char *)&v147 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v162 = (char *)&v147 - v20;
  v183 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v183);
  v153 = (char *)&v147 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v184 = sub_5440(&qword_2607F0);
  v22 = __chkstk_darwin(v184);
  v168 = (uint64_t)&v147 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v155 = (uint64_t)&v147 - v24;
  v189 = sub_5440(&qword_2607F8);
  v25 = __chkstk_darwin(v189);
  v173 = (char *)&v147 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  v158 = (char *)&v147 - v27;
  v159 = sub_5440(&qword_260800);
  v28 = __chkstk_darwin(v159);
  v174 = (uint64_t)&v147 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = __chkstk_darwin(v28);
  v172 = (uint64_t)&v147 - v31;
  v32 = __chkstk_darwin(v30);
  v187 = (uint64_t)&v147 - v33;
  v34 = __chkstk_darwin(v32);
  v156 = (uint64_t)&v147 - v35;
  __chkstk_darwin(v34);
  v188 = (uint64_t)&v147 - v36;
  v37 = type metadata accessor for _BlendModeEffect(0);
  __chkstk_darwin(v37);
  v152 = (char *)&v147 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v191 = type metadata accessor for BlendMode(0);
  v39 = *(_QWORD *)(v191 - 8);
  __chkstk_darwin(v191);
  v150 = (char *)&v147 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  v151 = sub_5440(&qword_260808);
  v41 = __chkstk_darwin(v151);
  v43 = (char *)&v147 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v41);
  v185 = (uint64_t)&v147 - v44;
  v45 = sub_5440(&qword_264C18);
  v46 = __chkstk_darwin(v45);
  v182 = (uint64_t)&v147 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v46);
  v49 = (char *)&v147 - v48;
  v50 = a5;
  v51 = _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0();
  v179 = a5;
  _FrameLayout.init(width:height:alignment:)(v192, *(_QWORD *)&a4, 0, *(_QWORD *)&a5, 0, v51, v52);
  v53 = sub_5440(&qword_264AF0);
  v54 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v53 - 8) + 16);
  v186 = v49;
  v54(v49, a1, v53);
  v55 = &v49[*(int *)(v45 + 36)];
  v56 = v192[1];
  *(_OWORD *)v55 = v192[0];
  *((_OWORD *)v55 + 1) = v56;
  *((_OWORD *)v55 + 2) = v192[2];
  v57 = sub_5440(&qword_260828);
  v58 = swift_allocObject(v57, 64, 7);
  *(_OWORD *)(v58 + 16) = xmmword_1E1CE0;
  v59 = _s7BooksUI14ColorConstantsV25vibrantPrimaryButtonLabel05SwiftB00C0Vvg_0();
  v60 = Color.opacity(_:)(1.0);
  swift_release(v59);
  v61 = Gradient.Stop.init(color:location:)(v60, 0.0);
  *(_QWORD *)(v58 + 32) = v61;
  *(_QWORD *)(v58 + 40) = v62;
  v63 = static Color.black.getter(v61);
  v64 = Color.opacity(_:)(0.5);
  swift_release(v63);
  v65 = Gradient.Stop.init(color:location:)(v64, 1.0);
  *(_QWORD *)(v58 + 48) = v65;
  *(_QWORD *)(v58 + 56) = v66;
  v67 = static UnitPoint.top.getter(v65);
  v69 = v68;
  v70 = static UnitPoint.bottom.getter();
  v72 = v71;
  Gradient.init(stops:)(v58);
  LinearGradient.init(gradient:startPoint:endPoint:)(&v193, v67, v69, v70, v72);
  v73 = v193;
  v149 = v194;
  v74 = v195;
  v75 = v196;
  v76 = _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0();
  _FrameLayout.init(width:height:alignment:)(&v197, 0, 1, *(_QWORD *)&v50, 0, v76, v77);
  v147 = v197;
  LOBYTE(v64) = v198;
  v78 = v199;
  v79 = v200;
  v80 = v201;
  v81 = v202;
  v148 = v39;
  v180 = *(void (**)(char *, _QWORD, uint64_t))(v39 + 104);
  v82 = v150;
  v83 = v191;
  v180(v150, enum case for BlendMode.softLight(_:), v191);
  v84 = *(void (**)(char *, char *, uint64_t))(v39 + 16);
  v85 = (uint64_t)v152;
  v84(v152, v82, v83);
  sub_1E428(v85, (uint64_t)&v43[*(int *)(v151 + 36)], (uint64_t (*)(_QWORD))&type metadata accessor for _BlendModeEffect);
  *(_QWORD *)v43 = v73;
  *(_OWORD *)(v43 + 8) = v149;
  *((_QWORD *)v43 + 3) = v74;
  *((_QWORD *)v43 + 4) = v75;
  *((_QWORD *)v43 + 5) = v147;
  v43[48] = v64;
  *((_QWORD *)v43 + 7) = v78;
  v43[64] = v79;
  *((_QWORD *)v43 + 9) = v80;
  *((_QWORD *)v43 + 10) = v81;
  *((_QWORD *)v43 + 11) = 0x3FD999999999999ALL;
  v154 = v43;
  swift_bridgeObjectRetain(v73);
  sub_224DC(v85, (uint64_t (*)(_QWORD))&type metadata accessor for _BlendModeEffect);
  (*(void (**)(char *, uint64_t))(v148 + 8))(v82, v83);
  sub_4C880(&v193);
  sub_167A4((uint64_t)v43, v185, &qword_260808);
  v86 = v157;
  v87 = *(_QWORD *)(v157 + 8);
  v88 = v153;
  v89 = &v153[*(int *)(v183 + 20)];
  v90 = enum case for RoundedCornerStyle.continuous(_:);
  LODWORD(v152) = enum case for RoundedCornerStyle.continuous(_:);
  v151 = type metadata accessor for RoundedCornerStyle(0);
  v150 = *(char **)(*(_QWORD *)(v151 - 8) + 104);
  ((void (*)(char *, uint64_t, uint64_t))v150)(v89, v90, v151);
  *v88 = v87;
  v88[1] = v87;
  v91 = _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0();
  _FrameLayout.init(width:height:alignment:)(v203, 0, 1, *(_QWORD *)&v179, 0, v91, v92);
  v93 = v155;
  sub_1E428((uint64_t)v88, v155, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  v94 = (_OWORD *)(v93 + *(int *)(v184 + 36));
  v95 = v203[1];
  *v94 = v203[0];
  v94[1] = v95;
  v94[2] = v203[2];
  v96 = sub_224DC((uint64_t)v88, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  v97 = static Color.black.getter(v96);
  v98 = _s7BooksUI14ColorConstantsV25vibrantPrimaryButtonLabel05SwiftB00C0Vvg_0();
  v99 = Color.opacity(_:)(0.8);
  swift_release(v98);
  v100 = v161;
  static ShadowStyle.inner(color:radius:x:y:)(v99, a4 * 0.01, a4 * 0.005, a4 * 0.0075);
  v101 = swift_release(v99);
  v102 = v160;
  v103 = (char *)v160 + *(int *)(v190 + 36);
  v104 = v164;
  *(_QWORD *)&v149 = *(_QWORD *)(v164 + 16);
  v105 = v181;
  ((void (*)(char *, char *, uint64_t, __n128))v149)(v103, v100, v181, v101);
  *v102 = v97;
  v164 = *(_QWORD *)(v104 + 8);
  ((void (*)(char *, uint64_t))v164)(v100, v105);
  type metadata accessor for AudiobookCoverEffect(0);
  v106 = v86;
  v107 = v167;
  sub_31378(v167);
  v108 = v170;
  v109 = v169;
  v110 = v171;
  (*(void (**)(char *, _QWORD, uint64_t))(v170 + 104))(v169, enum case for ColorScheme.dark(_:), v171);
  v111 = v109;
  LOBYTE(v109) = static ColorScheme.== infix(_:_:)(v107, v109);
  v112 = *(void (**)(char *, uint64_t))(v108 + 8);
  v112(v111, v110);
  v112((char *)v107, v110);
  v113 = v163;
  sub_B3D0((uint64_t)v102, v163, &qword_2607D8);
  v114 = 0.15;
  if ((v109 & 1) == 0)
    v114 = 0.5;
  v115 = v166;
  *(float *)(v113 + *(int *)(v166 + 36)) = v114;
  sub_B414((uint64_t)v102, &qword_2607D8);
  v116 = v165;
  v117 = (uint64_t)v162;
  v180(&v162[*(int *)(v165 + 36)], enum case for BlendMode.screen(_:), v191);
  sub_167A4(v113, v117, &qword_2607E0);
  v118 = (uint64_t)v158;
  sub_B3D0(v117, (uint64_t)&v158[*(int *)(v189 + 36)], &qword_2607E8);
  sub_B3D0(v93, v118, &qword_2607F0);
  sub_B414(v117, &qword_2607E8);
  sub_B414(v93, &qword_2607F0);
  v119 = v156;
  sub_B3D0(v118, v156, &qword_2607F8);
  v120 = v159;
  *(_BYTE *)(v119 + *(int *)(v159 + 36)) = 1;
  sub_B414(v118, &qword_2607F8);
  sub_167A4(v119, v188, &qword_260800);
  v121 = *(_QWORD *)(v106 + 8);
  ((void (*)(char *, _QWORD, uint64_t))v150)((char *)v88 + *(int *)(v183 + 20), v152, v151);
  *v88 = v121;
  v88[1] = v121;
  v122 = _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0();
  _FrameLayout.init(width:height:alignment:)(v204, 0, 1, *(_QWORD *)&v179, 0, v122, v123);
  v124 = v168;
  sub_1E428((uint64_t)v88, v168, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  v125 = (_OWORD *)(v124 + *(int *)(v184 + 36));
  v126 = v204[1];
  *v125 = v204[0];
  v125[1] = v126;
  v125[2] = v204[2];
  sub_224DC((uint64_t)v88, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  v127 = _s7BooksUI14ColorConstantsV25vibrantPrimaryButtonLabel05SwiftB00C0Vvg_0();
  v128 = static Color.black.getter(v127);
  v129 = Color.opacity(_:)(0.8);
  swift_release(v128);
  static ShadowStyle.inner(color:radius:x:y:)(v129, a4 * 0.01, a4 * -0.0025, a4 * -0.005);
  v130 = swift_release(v129);
  v131 = v177;
  v132 = v181;
  ((void (*)(char *, char *, uint64_t, __n128))v149)((char *)v177 + *(int *)(v190 + 36), v100, v181, v130);
  *v131 = v127;
  ((void (*)(char *, uint64_t))v164)(v100, v132);
  v133 = v176;
  sub_B3D0((uint64_t)v131, v176, &qword_2607D8);
  *(_DWORD *)(v133 + *(int *)(v115 + 36)) = 1048576000;
  sub_B414((uint64_t)v131, &qword_2607D8);
  v134 = (uint64_t)v175;
  v180(&v175[*(int *)(v116 + 36)], enum case for BlendMode.darken(_:), v191);
  sub_167A4(v133, v134, &qword_2607E0);
  v135 = (uint64_t)v173;
  sub_B3D0(v134, (uint64_t)&v173[*(int *)(v189 + 36)], &qword_2607E8);
  sub_B3D0(v124, v135, &qword_2607F0);
  sub_B414(v134, &qword_2607E8);
  sub_B414(v124, &qword_2607F0);
  v136 = v172;
  sub_B3D0(v135, v172, &qword_2607F8);
  *(_BYTE *)(v136 + *(int *)(v120 + 36)) = 1;
  sub_B414(v135, &qword_2607F8);
  v137 = v187;
  sub_167A4(v136, v187, &qword_260800);
  v138 = v182;
  sub_B3D0((uint64_t)v186, v182, &qword_264C18);
  v139 = v185;
  v140 = (uint64_t)v154;
  sub_B3D0(v185, (uint64_t)v154, &qword_260808);
  v141 = v188;
  sub_B3D0(v188, v136, &qword_260800);
  v142 = v174;
  sub_B3D0(v137, v174, &qword_260800);
  v143 = v138;
  v144 = v178;
  sub_B3D0(v143, v178, &qword_264C18);
  v145 = (int *)sub_5440(&qword_264C20);
  sub_B3D0(v140, v144 + v145[12], &qword_260808);
  sub_B3D0(v136, v144 + v145[16], &qword_260800);
  sub_B3D0(v142, v144 + v145[20], &qword_260800);
  sub_B414(v187, &qword_260800);
  sub_B414(v141, &qword_260800);
  sub_B414(v139, &qword_260808);
  sub_B414((uint64_t)v186, &qword_264C18);
  sub_B414(v142, &qword_260800);
  sub_B414(v136, &qword_260800);
  sub_B414(v140, &qword_260808);
  return sub_B414(v182, &qword_264C18);
}

uint64_t sub_E85C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;

  v5 = v3;
  v8 = sub_5440(&qword_264AF0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  v11 = __chkstk_darwin(v8);
  v12 = *(_QWORD *)(a2 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  __chkstk_darwin(v11);
  v14 = (char *)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1E428(v5, (uint64_t)v14, type metadata accessor for AudiobookCoverEffect);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v8);
  v15 = *(unsigned __int8 *)(v12 + 80);
  v16 = (v15 + 16) & ~v15;
  v17 = *(unsigned __int8 *)(v9 + 80);
  v18 = (v13 + v16 + v17) & ~v17;
  v19 = swift_allocObject(&unk_251B88, v18 + v10, v15 | v17 | 7);
  sub_E6770((uint64_t)v14, v19 + v16);
  result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v9 + 32))(v19 + v18, (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
  *a3 = sub_E67B4;
  a3[1] = v19;
  return result;
}

uint64_t sub_E8708(uint64_t a1)
{
  uint64_t result;

  result = sub_6FD0(&qword_264B38, type metadata accessor for AudiobookCoverEffect, (uint64_t)&protocol conformance descriptor for AudiobookCoverEffect);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t getEnumTagSinglePayload for AudiobookCoverEffect(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_E8750);
}

uint64_t sub_E8750(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a1 + *(int *)(a3 + 24);
  v5 = sub_5440(&qword_25EAE8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, a2, v5);
}

uint64_t storeEnumTagSinglePayload for AudiobookCoverEffect(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_E87A0);
}

uint64_t sub_E87A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = a1 + *(int *)(a4 + 24);
  v6 = sub_5440(&qword_25EAE8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, a2, a2, v6);
}

unint64_t sub_E87EC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_264BD8;
  if (!qword_264BD8)
  {
    v1 = sub_7EF8(&qword_264BE0);
    result = swift_getWitnessTable(&protocol conformance descriptor for GeometryReader<A>, v1);
    atomic_store(result, (unint64_t *)&qword_264BD8);
  }
  return result;
}

uint64_t sub_E883C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = type metadata accessor for AudiobookCoverEffect(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = sub_5440(&qword_264AF0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(v7 + 64);
  v10 = (_QWORD *)(v0 + *(int *)(v1 + 24) + v4);
  v11 = sub_5440(&qword_25E948);
  if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
  {
    v12 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v10, v12);
  }
  else
  {
    v13 = swift_release(*v10);
  }
  v14 = v3 | v8 | 7;
  v15 = (v4 + v5 + v8) & ~v8;
  v16 = v15 + v9;
  (*(void (**)(uint64_t, uint64_t, __n128))(v7 + 8))(v0 + v15, v6, v13);
  return swift_deallocObject(v0, v16, v14);
}

uint64_t sub_E8938@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  v5 = *(_QWORD *)(type metadata accessor for AudiobookCoverEffect(0) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = v6 + *(_QWORD *)(v5 + 64);
  v8 = *(unsigned __int8 *)(*(_QWORD *)(sub_5440(&qword_264AF0) - 8) + 80);
  return sub_E66F8(a1, v2 + v6, v2 + ((v7 + v8) & ~v8), a2);
}

uint64_t RefreshSeriesUberHeaderAction.seriesInfo.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_BD00(v1, a1);
}

uint64_t RefreshSeriesUberHeaderAction.actionMetrics.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for RefreshSeriesUberHeaderAction(0) + 20);
  v4 = type metadata accessor for ActionMetrics(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for RefreshSeriesUberHeaderAction(uint64_t a1)
{
  uint64_t result;

  result = qword_264CB0;
  if (!qword_264CB0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for RefreshSeriesUberHeaderAction);
  return result;
}

uint64_t sub_E8A44@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 20);
  v5 = type metadata accessor for ActionMetrics(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

_QWORD *initializeBufferWithCopyOfBuffer for RefreshSeriesUberHeaderAction(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v4;
  int v5;
  __int128 v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 3);
    *(_OWORD *)(a1 + 24) = v7;
    (**(void (***)(uint64_t, uint64_t *))(v7 - 8))(a1, a2);
    v8 = *(int *)(a3 + 20);
    v9 = (char *)v4 + v8;
    v10 = (uint64_t)a2 + v8;
    v11 = type metadata accessor for ActionMetrics(0);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
  }
  return v4;
}

uint64_t destroy for RefreshSeriesUberHeaderAction(_QWORD *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;

  _s7BooksUI13AnyPagedFrameVwxx_0(a1);
  v4 = (char *)a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for ActionMetrics(0);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t initializeWithCopy for RefreshSeriesUberHeaderAction(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v6;
  (**(void (***)(void))(v6 - 8))();
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for ActionMetrics(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  return a1;
}

_QWORD *assignWithCopy for RefreshSeriesUberHeaderAction(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  sub_142F8(a1, a2);
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for ActionMetrics(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

uint64_t initializeWithTake for RefreshSeriesUberHeaderAction(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v5 = *(int *)(a3 + 20);
  v6 = a1 + v5;
  v7 = a2 + v5;
  v8 = type metadata accessor for ActionMetrics(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for RefreshSeriesUberHeaderAction(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)a1);
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for ActionMetrics(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for RefreshSeriesUberHeaderAction(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_E8D24);
}

uint64_t sub_E8D24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 24);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for ActionMetrics(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for RefreshSeriesUberHeaderAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_E8DAC);
}

uint64_t sub_E8DAC(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 24) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for ActionMetrics(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 20), a2, a2, v7);
  }
  return result;
}

uint64_t sub_E8E20(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = "(";
  result = type metadata accessor for ActionMetrics(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

double View.figaroLocationPositionOverride(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  double result;

  v6 = swift_allocObject(&unk_251C00, 24, 7);
  *(_QWORD *)(v6 + 16) = a1;
  View.transformMetricsContext(transform:)(sub_3D1F8, v6, a2, a3);
  *(_QWORD *)&result = swift_release(v6).n128_u64[0];
  return result;
}

uint64_t sub_E8F08()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_5440(&qword_264D18);
  sub_73A0(v0, qword_264CE8);
  sub_7120(v0, (uint64_t)qword_264CE8);
  v1 = sub_5440(&qword_264D30);
  return MetricsFieldsContext.Property.init(_:)(0xD00000000000001ELL, 0x80000000001FC6B0, v1);
}

uint64_t static MetricsFieldsContext.Property<A>.locationStack.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_E9034(&qword_25DC68, &qword_264D18, (uint64_t)qword_264CE8, (uint64_t)sub_E8F08, a1);
}

uint64_t sub_E8FA4()
{
  uint64_t v0;

  v0 = sub_5440(&qword_264D20);
  sub_73A0(v0, qword_264D00);
  sub_7120(v0, (uint64_t)qword_264D00);
  return MetricsFieldsContext.Property.init(_:)(0xD000000000000029, 0x80000000001FC680, &type metadata for Int);
}

uint64_t static MetricsFieldsContext.Property<A>.locationPositionOverride.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_E9034(&qword_25DC70, &qword_264D20, (uint64_t)qword_264D00, (uint64_t)sub_E8FA4, a1);
}

uint64_t sub_E9034@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;

  if (*a1 != -1)
    swift_once(a1, a4);
  v8 = sub_5440(a2);
  v9 = sub_7120(v8, a3);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a5, v9, v8);
}

double View.figaroLocation(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  double result;
  uint64_t v7[22];

  sub_E93A8(a1, (uint64_t)v7);
  v5 = swift_allocObject(&unk_251C28, 192, 7);
  sub_E93A8((uint64_t)v7, v5 + 16);
  sub_E946C(v7);
  View.transformMetricsContext(transform:)(sub_E9464, v5, a2, a3);
  *(_QWORD *)&result = swift_release(v5).n128_u64[0];
  return result;
}

uint64_t sub_E9134(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _QWORD *v19;
  _QWORD v20[22];
  _BYTE v21[176];
  _OWORD v22[11];
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  _BYTE v34[176];

  sub_E93A8(a2, (uint64_t)v21);
  sub_E93A8((uint64_t)v21, (uint64_t)v34);
  sub_E93A8(a2, (uint64_t)v22);
  result = sub_E95C8((uint64_t)v22);
  if ((_DWORD)result != 1)
  {
    v31 = v22[8];
    v32 = v22[9];
    v33 = v22[10];
    v27 = v22[4];
    v28 = v22[5];
    v29 = v22[6];
    v30 = v22[7];
    v23 = v22[0];
    v24 = v22[1];
    v25 = v22[2];
    v26 = v22[3];
    sub_E93A8((uint64_t)v34, (uint64_t)v20);
    sub_7E3E4(v20);
    if (qword_25DC68 != -1)
      swift_once(&qword_25DC68, sub_E8F08);
    v4 = sub_5440(&qword_264D18);
    v5 = sub_7120(v4, (uint64_t)qword_264CE8);
    v6 = sub_5440(&qword_264D30);
    MetricsFieldsContext.subscript.getter(&v19, v5, v6);
    if (v19)
      v7 = v19;
    else
      v7 = _swiftEmptyArrayStorage;
    if ((swift_isUniquelyReferenced_nonNull_native(v7) & 1) == 0)
      v7 = sub_AADA8(0, v7[2] + 1, 1, v7);
    v9 = v7[2];
    v8 = v7[3];
    if (v9 >= v8 >> 1)
      v7 = sub_AADA8((_QWORD *)(v8 > 1), v9 + 1, 1, v7);
    v7[2] = v9 + 1;
    v10 = &v7[22 * v9];
    v11 = v23;
    v12 = v25;
    v10[3] = v24;
    v10[4] = v12;
    v10[2] = v11;
    v13 = v26;
    v14 = v27;
    v15 = v29;
    v10[7] = v28;
    v10[8] = v15;
    v10[5] = v13;
    v10[6] = v14;
    v16 = v30;
    v17 = v31;
    v18 = v33;
    v10[11] = v32;
    v10[12] = v18;
    v10[9] = v16;
    v10[10] = v17;
    v19 = v7;
    MetricsFieldsContext.addValue<A>(_:forProperty:)(&v19, v5, v6);
    return swift_bridgeObjectRelease(v7);
  }
  return result;
}

uint64_t sub_E931C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v5 = a2;
  if (qword_25DC70 != -1)
    swift_once(&qword_25DC70, sub_E8FA4);
  v2 = sub_5440(&qword_264D20);
  v3 = sub_7120(v2, (uint64_t)qword_264D00);
  return MetricsFieldsContext.addValue<A>(_:forProperty:)(&v5, v3, &type metadata for Int);
}

uint64_t sub_E9398()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_E93A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_5440(&qword_264D28);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_E93F0()
{
  _QWORD *v0;

  if (v0[17])
  {
    swift_bridgeObjectRelease(v0[3]);
    swift_bridgeObjectRelease(v0[5]);
    swift_bridgeObjectRelease(v0[7]);
    swift_bridgeObjectRelease(v0[9]);
    swift_bridgeObjectRelease(v0[11]);
    swift_bridgeObjectRelease(v0[13]);
    swift_bridgeObjectRelease(v0[17]);
    swift_bridgeObjectRelease(v0[19]);
    swift_bridgeObjectRelease(v0[21]);
    swift_bridgeObjectRelease(v0[23]);
  }
  return swift_deallocObject(v0, 192, 7);
}

uint64_t sub_E9464(uint64_t a1)
{
  uint64_t v1;

  return sub_E9134(a1, v1 + 16);
}

uint64_t *sub_E946C(uint64_t *a1)
{
  sub_E94CC(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12], a1[13], a1[14], a1[15], a1[16], a1[17], a1[18],
    a1[19],
    a1[20],
    a1[21]);
  return a1;
}

uint64_t sub_E94CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t result;

  if (a16)
  {
    swift_bridgeObjectRetain(a22);
    swift_bridgeObjectRetain(a2);
    swift_bridgeObjectRetain(a4);
    swift_bridgeObjectRetain(a6);
    swift_bridgeObjectRetain(a8);
    swift_bridgeObjectRetain(a10);
    swift_bridgeObjectRetain(a12);
    swift_bridgeObjectRetain(a16);
    swift_bridgeObjectRetain(a18);
    return swift_bridgeObjectRetain(a20);
  }
  return result;
}

uint64_t sub_E9594(__int128 *a1)
{
  __int128 v2;

  v2 = *a1;
  return swift_getOpaqueTypeConformance2(&v2, &opaque type descriptor for <<opaque return type of View.transformMetricsContext(transform:)>>, 1);
}

uint64_t sub_E95C8(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 120);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

uint64_t SeriesQuickActionButtonView.init(model:contextActionMenuView:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  _QWORD *v13;

  *(_QWORD *)a4 = swift_getKeyPath(&unk_1EB110);
  *(_BYTE *)(a4 + 40) = 0;
  *(_QWORD *)(a4 + 48) = swift_getKeyPath(&unk_1EB138);
  *(_WORD *)(a4 + 88) = 256;
  v8 = type metadata accessor for ProfileRestrictions(0);
  v9 = sub_6FD0((unint64_t *)&qword_26AF00, type metadata accessor for ProfileRestrictions, (uint64_t)&protocol conformance descriptor for ProfileRestrictions);
  *(_QWORD *)(a4 + 96) = EnvironmentObject.init()(v8, v9);
  *(_QWORD *)(a4 + 104) = v10;
  v11 = type metadata accessor for SeriesQuickActionButtonView(0);
  result = sub_21C88(a1, a4 + *(int *)(v11 + 32), type metadata accessor for SeriesQuickActionButtonViewModel);
  v13 = (_QWORD *)(a4 + *(int *)(v11 + 36));
  *v13 = a2;
  v13[1] = a3;
  return result;
}

void SeriesQuickActionButtonView.body.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t (*v93)(_QWORD);
  char *v94;
  _QWORD v95[8];
  uint64_t v96;
  char *v97;
  char *v98;
  char *v99;
  char *v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  char *v109;
  char *v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  char *v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  char *v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  char *v134;
  uint64_t v135;
  char *v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  char *v158;
  uint64_t v159;
  uint64_t v160;
  char *v161;
  char *v162;
  uint64_t v163;
  char *v164;
  uint64_t v165;
  uint64_t v166;
  char *v167;
  char *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  char *v173;
  char *v174;
  char *v175;
  char *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  char *v180;
  char *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  char *v185;
  char *v186;
  uint64_t v187;
  char *v188;
  char *v189;
  char *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  char *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  char *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  char *v204;
  char *v205;
  uint64_t v206;

  v202 = a1;
  v160 = type metadata accessor for RedactionReasons(0);
  v159 = *(_QWORD *)(v160 - 8);
  __chkstk_darwin(v160);
  v158 = (char *)v95 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v177 = sub_5440(&qword_264D38);
  v163 = *(_QWORD *)(v177 - 8);
  v2 = __chkstk_darwin(v177);
  v157 = (char *)v95 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  v162 = (char *)v95 - v4;
  v114 = sub_5440(&qword_264D40);
  __chkstk_darwin(v114);
  v95[2] = (char *)v95 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v172 = sub_5440(&qword_264D48);
  __chkstk_darwin(v172);
  v174 = (char *)v95 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v201 = sub_5440(&qword_264D50);
  __chkstk_darwin(v201);
  v176 = (char *)v95 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v107 = sub_5440(&qword_264D58);
  __chkstk_darwin(v107);
  v108 = (char *)v95 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for QuickActionBuyButtonViewModel(0);
  __chkstk_darwin(v9);
  v142 = (char *)v95 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v151 = type metadata accessor for QuickActionBuyButtonView(0);
  __chkstk_darwin(v151);
  v149 = (char *)v95 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v153 = sub_5440(&qword_264D60);
  v152 = *(_QWORD *)(v153 - 8);
  __chkstk_darwin(v153);
  v150 = (char *)v95 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v156 = sub_5440(&qword_264D68);
  v155 = *(_QWORD *)(v156 - 8);
  __chkstk_darwin(v156);
  v154 = (char *)v95 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v166 = sub_5440(&qword_264D70);
  __chkstk_darwin(v166);
  v164 = (char *)v95 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v170 = sub_5440(&qword_264D78);
  v15 = __chkstk_darwin(v170);
  v98 = (char *)v95 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v15);
  v100 = (char *)v95 - v18;
  v19 = __chkstk_darwin(v17);
  v97 = (char *)v95 - v20;
  v21 = __chkstk_darwin(v19);
  v104 = (char *)v95 - v22;
  __chkstk_darwin(v21);
  v110 = (char *)v95 - v23;
  v106 = sub_5440(&qword_264D80);
  __chkstk_darwin(v106);
  v95[1] = (char *)v95 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = sub_5440(&qword_25FAC0);
  __chkstk_darwin(v25);
  v116 = (char *)v95 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v96 = sub_5440(&qword_264D88);
  __chkstk_darwin(v96);
  v101 = (char *)v95 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v187 = type metadata accessor for RefreshOnAssetCompletionChangeViewModifier(0);
  __chkstk_darwin(v187);
  v188 = (char *)v95 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = type metadata accessor for AutomaticHoverEffect(0);
  v147 = *(_QWORD *)(v29 - 8);
  v148 = v29;
  __chkstk_darwin(v29);
  v146 = (char *)v95 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v141 = type metadata accessor for PlainButtonStyle(0);
  v139 = *(_QWORD *)(v141 - 8);
  __chkstk_darwin(v141);
  v137 = (char *)v95 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = sub_5440(qword_25E3E8);
  __chkstk_darwin(v32);
  v186 = (char *)v95 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v135 = sub_5440(&qword_264D90);
  __chkstk_darwin(v135);
  v134 = (char *)v95 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v140 = sub_5440(&qword_264D98);
  v138 = *(_QWORD *)(v140 - 8);
  __chkstk_darwin(v140);
  v136 = (char *)v95 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = sub_5440(&qword_264DA0);
  v144 = *(_QWORD *)(v36 - 8);
  v145 = v36;
  __chkstk_darwin(v36);
  v143 = (char *)v95 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v165 = sub_5440(&qword_264DA8);
  __chkstk_darwin(v165);
  v161 = (char *)v95 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v105 = sub_5440(&qword_264DB0);
  v39 = __chkstk_darwin(v105);
  v95[4] = (char *)v95 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = __chkstk_darwin(v39);
  v95[5] = (char *)v95 - v42;
  v43 = __chkstk_darwin(v41);
  v95[3] = (char *)v95 - v44;
  __chkstk_darwin(v43);
  v95[7] = (char *)v95 - v45;
  v46 = sub_5440(&qword_264DB8);
  v102 = *(_QWORD *)(v46 - 8);
  v103 = v46;
  __chkstk_darwin(v46);
  v99 = (char *)v95 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = sub_5440(&qword_264DC0);
  v112 = *(_QWORD *)(v48 - 8);
  v113 = v48;
  __chkstk_darwin(v48);
  v111 = (char *)v95 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
  v178 = sub_5440(&qword_264DC8);
  v50 = __chkstk_darwin(v178);
  v109 = (char *)v95 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v50);
  v115 = (char *)v95 - v52;
  v128 = type metadata accessor for ListItemViewModel(0);
  v131 = *(_QWORD *)(v128 - 8);
  v53 = __chkstk_darwin(v128);
  v132 = v54;
  v133 = (char *)v95 - ((v54 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v53);
  v168 = (char *)v95 - v55;
  v56 = type metadata accessor for SeriesOrdering(0);
  v124 = *(_QWORD *)(v56 - 8);
  v125 = v56;
  __chkstk_darwin(v56);
  v123 = (char *)v95 - ((v57 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58 = type metadata accessor for ShrinkableText(0);
  __chkstk_darwin(v58);
  v167 = (char *)v95 - ((v59 + 15) & 0xFFFFFFFFFFFFFFF0);
  v192 = type metadata accessor for AltSeriesContentTypeExposureData(0);
  v191 = *(_QWORD *)(v192 - 8);
  __chkstk_darwin(v192);
  v190 = (char *)v95 - ((v60 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = sub_5440(&qword_2618C8);
  v62 = __chkstk_darwin(v61);
  v95[6] = (char *)v95 - ((v63 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v62);
  v189 = (char *)v95 - v64;
  v198 = sub_5440(&qword_264DD0);
  __chkstk_darwin(v198);
  v200 = (char *)v95 - ((v65 + 15) & 0xFFFFFFFFFFFFFFF0);
  v171 = sub_5440(&qword_264DD8);
  __chkstk_darwin(v171);
  v173 = (char *)v95 - ((v66 + 15) & 0xFFFFFFFFFFFFFFF0);
  v199 = sub_5440(&qword_264DE0);
  __chkstk_darwin(v199);
  v175 = (char *)v95 - ((v67 + 15) & 0xFFFFFFFFFFFFFFF0);
  v194 = type metadata accessor for DataStackID(0);
  v193 = *(_QWORD *)(v194 - 8);
  __chkstk_darwin(v194);
  v205 = (char *)v95 - ((v68 + 15) & 0xFFFFFFFFFFFFFFF0);
  v184 = type metadata accessor for Font.TextStyle(0);
  v183 = *(_QWORD *)(v184 - 8);
  __chkstk_darwin(v184);
  v185 = (char *)v95 - ((v69 + 15) & 0xFFFFFFFFFFFFFFF0);
  v182 = type metadata accessor for ButtonViewModel.ActionKind(0);
  __chkstk_darwin(v182);
  v195 = (char *)v95 - ((v70 + 15) & 0xFFFFFFFFFFFFFFF0);
  v71 = type metadata accessor for SeriesQuickActionButtonView(0);
  v196 = *(_QWORD *)(v71 - 8);
  v72 = __chkstk_darwin(v71);
  v121 = (char *)v95 - ((v73 + 15) & 0xFFFFFFFFFFFFFFF0);
  v74 = __chkstk_darwin(v72);
  v204 = (char *)v95 - v75;
  v203 = v76;
  __chkstk_darwin(v74);
  v122 = (char *)v95 - v77;
  v78 = type metadata accessor for LocalizerLookupStrategy(0);
  v119 = *(_QWORD *)(v78 - 8);
  v120 = v78;
  __chkstk_darwin(v78);
  v79 = type metadata accessor for LocalizerDefaultValue(0);
  v117 = *(_QWORD *)(v79 - 8);
  v118 = v79;
  __chkstk_darwin(v79);
  v179 = type metadata accessor for ButtonViewModel.Content(0);
  v80 = __chkstk_darwin(v179);
  v180 = (char *)v95 - ((v81 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v80);
  v181 = (char *)v95 - v82;
  v83 = type metadata accessor for ButtonViewModel(0);
  v84 = __chkstk_darwin(v83);
  __chkstk_darwin(v84);
  v197 = type metadata accessor for ButtonView(0);
  v85 = __chkstk_darwin(v197);
  __chkstk_darwin(v85);
  v127 = (char *)v95 - v86;
  v169 = sub_5440(&qword_264DE8);
  v130 = *(_QWORD *)(v169 - 8);
  v87 = __chkstk_darwin(v169);
  v126 = (char *)v95 - ((v88 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v87);
  v129 = (char *)v95 - v89;
  v90 = type metadata accessor for SeriesQuickActionButtonViewModel.Style(0);
  __chkstk_darwin(v90);
  v92 = (char *)v95 - ((v91 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1E428(v206 + *(int *)(v71 + 32), (uint64_t)v92, v93);
  v94 = (char *)&loc_EA470 + *((int *)qword_EC430 + swift_getEnumCaseMultiPayload(v92, v90));
  __asm { BR              X10 }
}

uint64_t sub_EA480()
{
  uint64_t v0;
  __int128 *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  void *v14;
  uint64_t KeyPath;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __n128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t OpaqueTypeConformance2;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;

  sub_AC68(v1, v0 + 952);
  *(_DWORD *)(v0 + 832) = *(unsigned __int8 *)(*(_QWORD *)(v0 + 944) + 89);
  sub_5440(&qword_2621B0);
  v7 = *(_QWORD **)(v0 + 744);
  *v7 = 0xD000000000000013;
  v7[1] = 0x80000000001F9710;
  LocalizerDefaultValue.init(stringLiteral:)("Share", 5, 2);
  v8 = *(_QWORD *)(v0 + 248);
  v9 = *(_QWORD *)(v0 + 256);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v8 + 104))(v4, enum case for LocalizerLookupStrategy.default(_:), v9);
  static LocalizerRequest.string(forKey:with:defaultValue:using:)(0xD000000000000012, 0x80000000001FC6D0, 0, v3, v4);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v4, v9);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 232) + 8))(v3, *(_QWORD *)(v0 + 240));
  swift_storeEnumTagMultiPayload(v7, *(_QWORD *)(v0 + 728), 3);
  v10 = *(_QWORD *)(v0 + 976);
  v11 = *(_QWORD *)(v0 + 984);
  sub_5480((_QWORD *)(v0 + 952), v10);
  LOBYTE(v10) = ((uint64_t (*)(uint64_t, uint64_t))SeriesInfo.isExplicit.getter)(v10, v11);
  v12 = *(_QWORD *)(v0 + 272);
  sub_1E428(*(_QWORD *)(v0 + 944), v12, type metadata accessor for SeriesQuickActionButtonView);
  v13 = 1;
  if ((v10 & 1) != 0)
  {
    v14 = *(void **)(v12 + 96);
    if (!v14)
    {
      v61 = *(_QWORD *)(v12 + 104);
      v62 = type metadata accessor for ProfileRestrictions(0);
      v63 = sub_6FD0((unint64_t *)&qword_26AF00, type metadata accessor for ProfileRestrictions, (uint64_t)&protocol conformance descriptor for ProfileRestrictions);
      EnvironmentObject.error()(0, v61, v62, v63);
      __break(1u);
      JUMPOUT(0xEC430);
    }
    KeyPath = swift_getKeyPath(&unk_1EB248);
    v16 = swift_getKeyPath(&off_1EB270);
    v17 = v14;
    static Published.subscript.getter((_QWORD *)(v6 - 128), v17, KeyPath, v16);

    swift_release(KeyPath);
    swift_release(v16);
    v13 = *(unsigned __int8 *)(v6 - 128);
  }
  *(_DWORD *)(v0 + 824) = v13;
  sub_224DC(v12, type metadata accessor for SeriesQuickActionButtonView);
  v18 = *(_QWORD *)(v0 + 976);
  v19 = *(_QWORD *)(v0 + 984);
  sub_5480((_QWORD *)(v0 + 952), v18);
  v20 = *(_QWORD *)(v0 + 856);
  ((void (*)(uint64_t, uint64_t))SeriesInfo.url.getter)(v18, v19);
  swift_storeEnumTagMultiPayload(v20, *(_QWORD *)(v0 + 752), 1);
  *(_QWORD *)(v6 - 128) = 0x403C000000000000;
  v21 = enum case for Font.TextStyle.subheadline(_:);
  v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 760) + 104);
  v23 = *(_QWORD *)(v0 + 776);
  v24 = *(_QWORD *)(v0 + 768);
  v22(v23, enum case for Font.TextStyle.subheadline(_:), v24);
  v25 = sub_3CB54();
  ScaledMetric.init(wrappedValue:relativeTo:)(v6 - 128, v23, &type metadata for Double, v25);
  *(_QWORD *)(v6 - 128) = 0x4008000000000000;
  v22(v23, v21, v24);
  v26 = v25;
  ScaledMetric.init(wrappedValue:relativeTo:)(v6 - 128, v23, &type metadata for Double, v25);
  v27 = (_QWORD *)(v2 + v5[6]);
  *v27 = swift_getKeyPath(&unk_1EB160);
  v28 = sub_5440(&qword_25F1E8);
  swift_storeEnumTagMultiPayload(v27, v28, 0);
  v29 = v2 + v5[14];
  v30 = type metadata accessor for LocalizerRequest(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v29, 1, 1, v30);
  *(_BYTE *)(v2 + v5[7]) = *(_DWORD *)(v0 + 832);
  *(_BYTE *)(v2 + v5[8]) = 1;
  *(_BYTE *)(v2 + v5[9]) = 0;
  v31 = (_QWORD *)(v2 + v5[10]);
  *v31 = 2;
  v31[1] = 0;
  v31[2] = 0;
  v31[3] = 0;
  sub_21C88(*(_QWORD *)(v0 + 744), v2 + v5[11], type metadata accessor for ButtonViewModel.Content);
  *(_BYTE *)(v2 + v5[12]) = *(_DWORD *)(v0 + 824);
  sub_21C88(*(_QWORD *)(v0 + 856), v2 + v5[13], type metadata accessor for ButtonViewModel.ActionKind);
  *(_QWORD *)(v6 - 128) = 0x4020000000000000;
  v22(v23, v21, v24);
  v32 = *(_QWORD *)(v0 + 312);
  ScaledMetric.init(wrappedValue:relativeTo:)(v6 - 128, v23, &type metadata for Double, v25);
  v33 = *(_QWORD *)(v0 + 872);
  *(_QWORD *)(v6 - 128) = 0x3FF8000000000000;
  v22(v23, v21, v24);
  ScaledMetric.init(wrappedValue:relativeTo:)(v6 - 128, v23, &type metadata for Double, v26);
  v34 = v33;
  v35 = (_QWORD *)(v32 + *(int *)(v33 + 24));
  *v35 = swift_getKeyPath(&unk_1EB188);
  v36 = sub_5440(&qword_25FB20);
  swift_storeEnumTagMultiPayload(v35, v36, 0);
  sub_21C88(v2, v32 + *(int *)(v33 + 28), type metadata accessor for ButtonViewModel);
  v37 = type metadata accessor for SeriesData(0);
  v38 = *(_QWORD *)(v0 + 936);
  static DataStackID.additionalEventData.getter(v37);
  v39 = *(_QWORD *)(v0 + 928);
  sub_1E428(*(_QWORD *)(v0 + 944), v39, type metadata accessor for SeriesQuickActionButtonView);
  v40 = *(unsigned __int8 *)(*(_QWORD *)(v0 + 864) + 80);
  v41 = (v40 + 16) & ~v40;
  v42 = swift_allocObject(&unk_251CF8, v41 + *(_QWORD *)(v0 + 920), v40 | 7);
  sub_21C88(v39, v42 + v41, type metadata accessor for SeriesQuickActionButtonView);
  v43 = sub_6FD0(&qword_2618B0, type metadata accessor for ButtonView, (uint64_t)&protocol conformance descriptor for ButtonView);
  v44 = sub_6FD0(&qword_264E10, (uint64_t (*)(uint64_t))&type metadata accessor for SeriesData, (uint64_t)&protocol conformance descriptor for SeriesData);
  v45 = sub_6FD0(&qword_264E18, (uint64_t (*)(uint64_t))&type metadata accessor for SeriesData, (uint64_t)&protocol conformance descriptor for SeriesData);
  v46 = *(_QWORD *)(v0 + 304);
  *(_QWORD *)(v0 + 856) = v37;
  ((void (*)(uint64_t, uint64_t, uint64_t (*)(), uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))View.transformAppAnalyticsData<A>(_:for:transform:))(v37, v38, sub_ED198, v42, v34, v37, v43, v44, v45);
  v47 = swift_release(v42);
  (*(void (**)(uint64_t, _QWORD, __n128))(*(_QWORD *)(v0 + 840) + 8))(v38, *(_QWORD *)(v0 + 848), v47);
  sub_224DC(v32, type metadata accessor for ButtonView);
  v49 = *(_QWORD *)(v0 + 328);
  v48 = *(_QWORD *)(v0 + 336);
  v50 = v46;
  v51 = *(_QWORD *)(v0 + 648);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v48 + 32))(v49, v50, v51);
  v52 = *(_QWORD *)(v0 + 680);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v48 + 16))(v52, v49, v51);
  swift_storeEnumTagMultiPayload(v52, *(_QWORD *)(v0 + 664), 0);
  v53 = *(_QWORD *)(v0 + 856);
  *(_QWORD *)(v6 - 128) = v34;
  *(_QWORD *)(v6 - 120) = v53;
  *(_QWORD *)(v6 - 112) = v43;
  *(_QWORD *)(v6 - 104) = v44;
  *(_QWORD *)(v6 - 96) = v45;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v6 - 128, &opaque type descriptor for <<opaque return type of View.transformAppAnalyticsData<A>(_:for:transform:)>>, 1);
  v55 = sub_ECD40();
  v56 = *(_QWORD *)(v0 + 696);
  _ConditionalContent<>.init(storage:)(v52, v51, *(_QWORD *)(v0 + 720), OpaqueTypeConformance2, v55);
  v57 = *(_QWORD *)(v0 + 896);
  sub_B3D0(v56, v57, &qword_264DE0);
  swift_storeEnumTagMultiPayload(v57, *(_QWORD *)(v0 + 880), 0);
  v58 = sub_ECC30();
  v59 = sub_ED0C4();
  _ConditionalContent<>.init(storage:)(v57, *(_QWORD *)(v0 + 888), *(_QWORD *)(v0 + 904), v58, v59);
  sub_B414(v56, &qword_264DE0);
  (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v49, v51);
  return _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)(v0 + 952));
}

double sub_EC440@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t (*v9)(_QWORD);
  uint64_t *v10;
  uint64_t v11;
  double result;
  uint64_t v13;

  v6 = type metadata accessor for ListItemViewModel(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1E428(a1, (uint64_t)v8, v9);
  v10 = (uint64_t *)(a2 + *(int *)(type metadata accessor for SeriesQuickActionButtonView(0) + 36));
  v11 = v10[1];
  ListItemView.init(_:contextActionMenuView:)((uint64_t)v8, *v10, v11, a3);
  *(_QWORD *)&result = swift_retain(v11).n128_u64[0];
  return result;
}

uint64_t sub_EC4E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = type metadata accessor for SeriesData(0);
  v5 = *(_QWORD *)(v4 - 8);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  v6 = a2 + *(int *)(type metadata accessor for SeriesQuickActionButtonView(0) + 32);
  v7 = v6 + *(int *)(type metadata accessor for SeriesQuickActionButtonViewModel(0) + 20);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(a1, v7, v4);
}

uint64_t sub_EC55C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  __int128 v11;
  __int128 v12;
  double v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  __n128 v23;
  char v26[8];
  uint64_t v27;
  double v28;
  unint64_t v29;
  _OWORD v30[3];
  _OWORD v31[2];

  v2 = v1;
  v4 = type metadata accessor for RefreshOnAssetCompletionChangeViewModifier(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  __chkstk_darwin(v4);
  v7 = sub_5440(&qword_264FD0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = &v26[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v11 = *(_OWORD *)(v1 + 48);
  v30[2] = *(_OWORD *)(v1 + 32);
  v31[0] = v11;
  *(_DWORD *)((char *)v31 + 15) = *(_DWORD *)(v1 + 63);
  v12 = *(_OWORD *)(v1 + 16);
  v30[0] = *(_OWORD *)v1;
  v30[1] = v12;
  sub_34820((uint64_t)v30, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))sub_3480C);
  sub_316C0((uint64_t)v26);
  sub_34820((uint64_t)v30, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))sub_BDF8);
  if (v27)
  {
    v13 = v28;
    v14 = (v29 >> 24) & 1;
    swift_bridgeObjectRelease(v27);
    if (v13 >= 0.85)
      v15 = 1;
    else
      v15 = v14;
  }
  else
  {
    v15 = 2;
  }
  v26[0] = v15;
  sub_1E428(v2, (uint64_t)&v26[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8], type metadata accessor for RefreshOnAssetCompletionChangeViewModifier);
  v16 = *(unsigned __int8 *)(v5 + 80);
  v17 = (v16 + 16) & ~v16;
  v18 = swift_allocObject(&unk_251D20, v17 + v6, v16 | 7);
  sub_21C88((uint64_t)&v26[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8], v18 + v17, type metadata accessor for RefreshOnAssetCompletionChangeViewModifier);
  v19 = sub_5440(&qword_264FD8);
  v20 = sub_5440(&qword_264FE0);
  v21 = sub_7FD8(&qword_264FE8, &qword_264FD8, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
  v22 = sub_F0F4C();
  View.onChange<A>(of:initial:_:)(v26, 0, sub_F0F00, v18, v19, v20, v21, v22);
  v23 = swift_release(v18);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t, __n128))(v8 + 32))(a1, v10, v7, v23);
}

uint64_t sub_EC778(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  char *v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[5];
  _QWORD v20[3];
  uint64_t v21;
  uint64_t v22;

  v6 = type metadata accessor for OpaqueMetricsFieldsContext(0);
  v7 = *(_QWORD *)(v6 - 8);
  result = __chkstk_darwin(v6);
  v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*a1 != 2 && *a2 != 2)
  {
    v12 = type metadata accessor for RefreshOnAssetCompletionChangeViewModifier(0);
    sub_32138((uint64_t)v20);
    v13 = v21;
    if (v21)
    {
      v18 = v22;
      sub_5480(v20, v21);
      v14 = a3 + *(int *)(v12 + 28);
      v19[3] = type metadata accessor for RefreshSeriesUberHeaderAction(0);
      v19[4] = sub_6FD0(&qword_264FF8, type metadata accessor for RefreshSeriesUberHeaderAction, (uint64_t)&protocol conformance descriptor for RefreshSeriesUberHeaderAction);
      v15 = sub_C404(v19);
      v16 = sub_BD00(v14, (uint64_t)v15);
      static ActionMetrics.notInstrumented.getter(v16);
      sub_3210C((uint64_t)v10);
      PerformAction.callAsFunction(_:withMetrics:)(v19, v10, v13, v18);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
      _s7BooksUI13AnyPagedFrameVwxx_0(v19);
      return _s7BooksUI13AnyPagedFrameVwxx_0(v20);
    }
    else
    {
      return sub_B414((uint64_t)v20, &qword_25FAF0);
    }
  }
  return result;
}

_QWORD *sub_EC908@<X0>(_QWORD *a1@<X8>)
{
  unint64_t v2;

  v2 = sub_F0FA8();
  return EnvironmentValues.subscript.getter(a1, &type metadata for LibraryAssetStateObserverProviderKey, &type metadata for LibraryAssetStateObserverProviderKey, v2);
}

_QWORD *sub_EC944@<X0>(_QWORD *a1@<X8>)
{
  unint64_t v2;

  v2 = sub_F0FA8();
  return EnvironmentValues.subscript.getter(a1, &type metadata for LibraryAssetStateObserverProviderKey, &type metadata for LibraryAssetStateObserverProviderKey, v2);
}

uint64_t sub_EC980(uint64_t a1)
{
  unint64_t v1;
  _BYTE v3[40];
  _BYTE v4[40];

  sub_B3D0(a1, (uint64_t)v4, &qword_25FB00);
  sub_B3D0((uint64_t)v4, (uint64_t)v3, &qword_25FB00);
  v1 = sub_F0FA8();
  EnvironmentValues.subscript.setter(v3, &type metadata for LibraryAssetStateObserverProviderKey, &type metadata for LibraryAssetStateObserverProviderKey, v1);
  return sub_B414((uint64_t)v4, &qword_25FB00);
}

uint64_t type metadata accessor for SeriesQuickActionButtonView(uint64_t a1)
{
  return sub_1FE90(a1, qword_264ED8, (uint64_t)&nominal type descriptor for SeriesQuickActionButtonView);
}

uint64_t type metadata accessor for RefreshOnAssetCompletionChangeViewModifier(uint64_t a1)
{
  return sub_1FE90(a1, qword_264F90, (uint64_t)&nominal type descriptor for RefreshOnAssetCompletionChangeViewModifier);
}

unint64_t sub_ECA28()
{
  unint64_t result;
  uint64_t v1;

  result = qword_264DF8;
  if (!qword_264DF8)
  {
    v1 = sub_7EF8(&qword_264D40);
    sub_ECA94();
    sub_ECBEC();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_264DF8);
  }
  return result;
}

unint64_t sub_ECA94()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t OpaqueTypeConformance2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = qword_264E00;
  if (!qword_264E00)
  {
    v1 = sub_7EF8(&qword_264D70);
    v2 = sub_7EF8(&qword_264D60);
    v4 = type metadata accessor for QuickActionBuyButtonView(255);
    v5 = type metadata accessor for SeriesData(255);
    v6 = sub_6FD0(&qword_264E08, type metadata accessor for QuickActionBuyButtonView, (uint64_t)&protocol conformance descriptor for QuickActionBuyButtonView);
    v7 = sub_6FD0(&qword_264E10, (uint64_t (*)(uint64_t))&type metadata accessor for SeriesData, (uint64_t)&protocol conformance descriptor for SeriesData);
    v8 = sub_6FD0(&qword_264E18, (uint64_t (*)(uint64_t))&type metadata accessor for SeriesData, (uint64_t)&protocol conformance descriptor for SeriesData);
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v4, &opaque type descriptor for <<opaque return type of View.transformAppAnalyticsData<A>(_:for:transform:)>>, 1);
    v4 = v2;
    v5 = OpaqueTypeConformance2;
    swift_getOpaqueTypeConformance2(&v4, &opaque type descriptor for <<opaque return type of View.transformMetricsContext(transform:)>>, 1);
    sub_6FD0(&qword_264E20, type metadata accessor for RefreshOnAssetCompletionChangeViewModifier, (uint64_t)&unk_1EB470);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_264E00);
  }
  return result;
}

unint64_t sub_ECBEC()
{
  unint64_t result;

  result = qword_264E28;
  if (!qword_264E28)
  {
    result = swift_getWitnessTable(&unk_1F1730, &type metadata for ObserveLibraryAssetStateViewModifier);
    atomic_store(result, (unint64_t *)&qword_264E28);
  }
  return result;
}

unint64_t sub_ECC30()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[5];

  result = qword_264E30;
  if (!qword_264E30)
  {
    v1 = sub_7EF8(&qword_264DE0);
    v2[0] = type metadata accessor for ButtonView(255);
    v2[1] = type metadata accessor for SeriesData(255);
    v2[2] = sub_6FD0(&qword_2618B0, type metadata accessor for ButtonView, (uint64_t)&protocol conformance descriptor for ButtonView);
    v2[3] = sub_6FD0(&qword_264E10, (uint64_t (*)(uint64_t))&type metadata accessor for SeriesData, (uint64_t)&protocol conformance descriptor for SeriesData);
    v2[4] = sub_6FD0(&qword_264E18, (uint64_t (*)(uint64_t))&type metadata accessor for SeriesData, (uint64_t)&protocol conformance descriptor for SeriesData);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.transformAppAnalyticsData<A>(_:for:transform:)>>, 1);
    sub_ECD40();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_264E30);
  }
  return result;
}

unint64_t sub_ECD40()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t OpaqueTypeConformance2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = qword_264E38;
  if (!qword_264E38)
  {
    v1 = sub_7EF8(&qword_264DC8);
    v2 = sub_7EF8(&qword_264DB8);
    v4 = sub_7EF8(&qword_264DB0);
    v5 = type metadata accessor for SeriesData(255);
    v6 = sub_ECE80();
    v7 = sub_6FD0(&qword_264E10, (uint64_t (*)(uint64_t))&type metadata accessor for SeriesData, (uint64_t)&protocol conformance descriptor for SeriesData);
    v8 = sub_6FD0(&qword_264E18, (uint64_t (*)(uint64_t))&type metadata accessor for SeriesData, (uint64_t)&protocol conformance descriptor for SeriesData);
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v4, &opaque type descriptor for <<opaque return type of View.transformAppAnalyticsData<A>(_:for:transform:)>>, 1);
    v4 = v2;
    v5 = OpaqueTypeConformance2;
    swift_getOpaqueTypeConformance2(&v4, &opaque type descriptor for <<opaque return type of View.collectAppAnalyticsExposure(with:)>>, 1);
    sub_7FD8((unint64_t *)&qword_261FE0, &qword_261FD8, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_264E38);
  }
  return result;
}

unint64_t sub_ECE80()
{
  unint64_t result;
  uint64_t v1;

  result = qword_264E40;
  if (!qword_264E40)
  {
    v1 = sub_7EF8(&qword_264DB0);
    sub_ECEEC();
    sub_ECF58();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_264E40);
  }
  return result;
}

unint64_t sub_ECEEC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_264E48;
  if (!qword_264E48)
  {
    v1 = sub_7EF8(&qword_264D80);
    sub_ECF58();
    sub_ECBEC();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_264E48);
  }
  return result;
}

unint64_t sub_ECF58()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t OpaqueTypeConformance2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = qword_264E50;
  if (!qword_264E50)
  {
    v1 = sub_7EF8(&qword_264DA8);
    v2 = sub_7EF8(&qword_264D98);
    v3 = type metadata accessor for AutomaticHoverEffect(255);
    v6 = sub_7EF8(&qword_264D90);
    v7 = type metadata accessor for PlainButtonStyle(255);
    v8 = sub_7FD8(&qword_264E58, &qword_264D90, (uint64_t)&protocol conformance descriptor for BooksActionButton<A>);
    v9 = sub_6FD0(&qword_2609C0, (uint64_t (*)(uint64_t))&type metadata accessor for PlainButtonStyle, (uint64_t)&protocol conformance descriptor for PlainButtonStyle);
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v6, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
    v5 = sub_6FD0((unint64_t *)&qword_25FDF0, (uint64_t (*)(uint64_t))&type metadata accessor for AutomaticHoverEffect, (uint64_t)&protocol conformance descriptor for AutomaticHoverEffect);
    v6 = v2;
    v7 = v3;
    v8 = OpaqueTypeConformance2;
    v9 = v5;
    swift_getOpaqueTypeConformance2(&v6, &opaque type descriptor for <<opaque return type of View.hoverEffect<A>(_:isEnabled:)>>, 1);
    sub_6FD0(&qword_264E20, type metadata accessor for RefreshOnAssetCompletionChangeViewModifier, (uint64_t)&unk_1EB470);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_264E50);
  }
  return result;
}

unint64_t sub_ED0C4()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_264E60;
  if (!qword_264E60)
  {
    v1 = sub_7EF8(&qword_264D50);
    sub_2F608(&qword_264DF0, &qword_264D78, (void (*)(void))sub_ECA28, (void (*)(void))sub_ECA94);
    v2[0] = type metadata accessor for ButtonView(255);
    v2[1] = sub_6FD0(&qword_2618B0, type metadata accessor for ButtonView, (uint64_t)&protocol conformance descriptor for ButtonView);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.redacted(reason:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_264E60);
  }
  return result;
}

uint64_t sub_ED19C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_ED1B8(uint64_t a1, char *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(_QWORD, _QWORD, _QWORD);
  uint64_t v21;
  void (*v22)(_QWORD, _QWORD, _QWORD);
  uint64_t v23;
  char v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  char isUniquelyReferenced_nonNull_native;
  char *v28;
  uint64_t v29;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;

  v3 = v2;
  v6 = type metadata accessor for MetricsFieldInclusionRequest(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v3;
  v11 = *(_QWORD *)(*v3 + 40);
  v13 = sub_6FD0(&qword_25F4E0, v12, (uint64_t)&protocol conformance descriptor for MetricsFieldInclusionRequest);
  swift_bridgeObjectRetain(v10);
  v35 = a2;
  v14 = dispatch thunk of Hashable._rawHashValue(seed:)(v11, v6, v13);
  v15 = -1 << *(_BYTE *)(v10 + 32);
  v16 = v14 & ~v15;
  v17 = v10;
  v18 = v10 + 56;
  if (((*(_QWORD *)(v10 + 56 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) != 0)
  {
    v31 = v3;
    v32 = a1;
    v33 = ~v15;
    v34 = v7;
    v19 = *(_QWORD *)(v7 + 72);
    v20 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    while (1)
    {
      v21 = v17;
      v22 = v20;
      v20(v9, *(_QWORD *)(v17 + 48) + v19 * v16, v6);
      v23 = sub_6FD0(&qword_25F4E8, (uint64_t (*)(uint64_t))&type metadata accessor for MetricsFieldInclusionRequest, (uint64_t)&protocol conformance descriptor for MetricsFieldInclusionRequest);
      v24 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v35, v6, v23);
      v25 = *(void (**)(char *, uint64_t))(v34 + 8);
      v25(v9, v6);
      if ((v24 & 1) != 0)
        break;
      v16 = (v16 + 1) & v33;
      v17 = v21;
      v20 = v22;
      if (((*(_QWORD *)(v18 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) == 0)
      {
        swift_bridgeObjectRelease(v21);
        v3 = v31;
        a1 = v32;
        v26 = v34;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease(v21);
    v25(v35, v6);
    v22(v32, *(_QWORD *)(*v31 + 48) + v19 * v16, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease(v10);
    v20 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    v26 = v7;
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v28 = v35;
    v20(v9, v35, v6);
    v36 = *v3;
    *v3 = 0x8000000000000000;
    sub_EDC08((uint64_t)v9, v16, isUniquelyReferenced_nonNull_native);
    v29 = *v3;
    *v3 = v36;
    swift_bridgeObjectRelease(v29);
    (*(void (**)(uint64_t, char *, uint64_t))(v26 + 32))(a1, v28, v6);
    return 1;
  }
}

uint64_t sub_ED414(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v7;
  Swift::Int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  BOOL v21;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v23;
  _QWORD v24[9];

  v7 = *v3;
  Hasher.init(_seed:)(v24, *(_QWORD *)(*v3 + 40));
  swift_bridgeObjectRetain(v7);
  String.hash(into:)(v24, a2, a3);
  v8 = Hasher._finalize()();
  v9 = -1 << *(_BYTE *)(v7 + 32);
  v10 = v8 & ~v9;
  if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = *(_QWORD *)(v7 + 48);
    v12 = (_QWORD *)(v11 + 16 * v10);
    v13 = v12[1];
    v14 = *v12 == a2 && v13 == a3;
    if (v14 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v12, v13, a2, a3, 0) & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease(a3);
      swift_bridgeObjectRelease(v7);
      v15 = (uint64_t *)(*(_QWORD *)(*v3 + 48) + 16 * v10);
      v16 = v15[1];
      *a1 = *v15;
      a1[1] = v16;
      swift_bridgeObjectRetain(v16);
      return 0;
    }
    v18 = ~v9;
    while (1)
    {
      v10 = (v10 + 1) & v18;
      if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
        break;
      v19 = (_QWORD *)(v11 + 16 * v10);
      v20 = v19[1];
      v21 = *v19 == a2 && v20 == a3;
      if (v21 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v19, v20, a2, a3, 0) & 1) != 0)
        goto LABEL_7;
    }
  }
  swift_bridgeObjectRelease(v7);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  v24[0] = *v3;
  *v3 = 0x8000000000000000;
  swift_bridgeObjectRetain(a3);
  sub_EDE0C(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  v23 = *v3;
  *v3 = v24[0];
  swift_bridgeObjectRelease(v23);
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t sub_ED5C0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t result;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, unint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  int64_t v38;
  _QWORD *v39;
  uint64_t v40;

  v2 = v1;
  v4 = type metadata accessor for MetricsFieldInclusionRequest(0);
  v40 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_5440(&qword_25F4D8);
  v8 = static _SetStorage.resize(original:capacity:move:)(v7, a1, 1);
  v9 = v8;
  if (!*(_QWORD *)(v7 + 16))
    goto LABEL_39;
  v10 = 1 << *(_BYTE *)(v7 + 32);
  v11 = *(_QWORD *)(v7 + 56);
  v39 = (_QWORD *)(v7 + 56);
  if (v10 < 64)
    v12 = ~(-1 << v10);
  else
    v12 = -1;
  v13 = v12 & v11;
  v37 = v2;
  v38 = (unint64_t)(v10 + 63) >> 6;
  v14 = v8 + 56;
  result = swift_retain(v7);
  v16 = 0;
  while (1)
  {
    if (v13)
    {
      v18 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v19 = v18 | (v16 << 6);
      goto LABEL_26;
    }
    v20 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
LABEL_40:
      __break(1u);
LABEL_41:
      __break(1u);
      return result;
    }
    if (v20 >= v38)
      goto LABEL_35;
    v21 = v39[v20];
    ++v16;
    if (!v21)
    {
      v16 = v20 + 1;
      if (v20 + 1 >= v38)
        goto LABEL_35;
      v21 = v39[v16];
      if (!v21)
      {
        v16 = v20 + 2;
        if (v20 + 2 >= v38)
          goto LABEL_35;
        v21 = v39[v16];
        if (!v21)
          break;
      }
    }
LABEL_25:
    v13 = (v21 - 1) & v21;
    v19 = __clz(__rbit64(v21)) + (v16 << 6);
LABEL_26:
    v23 = v7;
    v24 = *(_QWORD *)(v7 + 48);
    v25 = *(_QWORD *)(v40 + 72);
    v26 = *(void (**)(char *, unint64_t, uint64_t))(v40 + 32);
    v26(v6, v24 + v25 * v19, v4);
    v27 = *(_QWORD *)(v9 + 40);
    v28 = sub_6FD0(&qword_25F4E0, (uint64_t (*)(uint64_t))&type metadata accessor for MetricsFieldInclusionRequest, (uint64_t)&protocol conformance descriptor for MetricsFieldInclusionRequest);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v27, v4, v28);
    v29 = -1 << *(_BYTE *)(v9 + 32);
    v30 = result & ~v29;
    v31 = v30 >> 6;
    if (((-1 << v30) & ~*(_QWORD *)(v14 + 8 * (v30 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v30) & ~*(_QWORD *)(v14 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v32 = 0;
      v33 = (unint64_t)(63 - v29) >> 6;
      do
      {
        if (++v31 == v33 && (v32 & 1) != 0)
        {
          __break(1u);
          goto LABEL_40;
        }
        v34 = v31 == v33;
        if (v31 == v33)
          v31 = 0;
        v32 |= v34;
        v35 = *(_QWORD *)(v14 + 8 * v31);
      }
      while (v35 == -1);
      v17 = __clz(__rbit64(~v35)) + (v31 << 6);
    }
    *(_QWORD *)(v14 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    result = ((uint64_t (*)(unint64_t, char *, uint64_t))v26)(*(_QWORD *)(v9 + 48) + v17 * v25, v6, v4);
    ++*(_QWORD *)(v9 + 16);
    v7 = v23;
  }
  v22 = v20 + 3;
  if (v22 < v38)
  {
    v21 = v39[v22];
    if (!v21)
    {
      while (1)
      {
        v16 = v22 + 1;
        if (__OFADD__(v22, 1))
          goto LABEL_41;
        if (v16 >= v38)
          goto LABEL_35;
        v21 = v39[v16];
        ++v22;
        if (v21)
          goto LABEL_25;
      }
    }
    v16 = v22;
    goto LABEL_25;
  }
LABEL_35:
  swift_release(v7);
  v2 = v37;
  v36 = 1 << *(_BYTE *)(v7 + 32);
  if (v36 > 63)
    bzero(v39, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v39 = -1 << v36;
  *(_QWORD *)(v7 + 16) = 0;
LABEL_39:
  result = swift_release(v7);
  *v2 = v9;
  return result;
}

void sub_ED92C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  Swift::Int v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  _QWORD *v33;
  _QWORD v34[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_5440(&qword_265000);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = v5;
  if (*(_QWORD *)(v3 + 16))
  {
    v7 = 1 << *(_BYTE *)(v3 + 32);
    v32 = v2;
    v33 = (_QWORD *)(v3 + 56);
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(v3 + 56);
    v10 = (unint64_t)(v7 + 63) >> 6;
    v11 = v5 + 56;
    swift_retain(v3);
    v12 = 0;
    while (1)
    {
      if (v9)
      {
        v15 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v16 = v15 | (v12 << 6);
      }
      else
      {
        v17 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return;
        }
        if (v17 >= v10)
          goto LABEL_36;
        v18 = v33[v17];
        ++v12;
        if (!v18)
        {
          v12 = v17 + 1;
          if (v17 + 1 >= v10)
            goto LABEL_36;
          v18 = v33[v12];
          if (!v18)
          {
            v12 = v17 + 2;
            if (v17 + 2 >= v10)
              goto LABEL_36;
            v18 = v33[v12];
            if (!v18)
            {
              v19 = v17 + 3;
              if (v19 >= v10)
              {
LABEL_36:
                swift_release(v3);
                v2 = v32;
                v31 = 1 << *(_BYTE *)(v3 + 32);
                if (v31 > 63)
                  bzero(v33, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v33 = -1 << v31;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v18 = v33[v19];
              if (!v18)
              {
                while (1)
                {
                  v12 = v19 + 1;
                  if (__OFADD__(v19, 1))
                    goto LABEL_42;
                  if (v12 >= v10)
                    goto LABEL_36;
                  v18 = v33[v12];
                  ++v19;
                  if (v18)
                    goto LABEL_26;
                }
              }
              v12 = v19;
            }
          }
        }
LABEL_26:
        v9 = (v18 - 1) & v18;
        v16 = __clz(__rbit64(v18)) + (v12 << 6);
      }
      v20 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v16);
      v21 = *v20;
      v22 = v20[1];
      Hasher.init(_seed:)(v34, *(_QWORD *)(v6 + 40));
      String.hash(into:)(v34, v21, v22);
      v23 = Hasher._finalize()();
      v24 = -1 << *(_BYTE *)(v6 + 32);
      v25 = v23 & ~v24;
      v26 = v25 >> 6;
      if (((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6))) != 0)
      {
        v13 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v27 = 0;
        v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v29 = v26 == v28;
          if (v26 == v28)
            v26 = 0;
          v27 |= v29;
          v30 = *(_QWORD *)(v11 + 8 * v26);
        }
        while (v30 == -1);
        v13 = __clz(__rbit64(~v30)) + (v26 << 6);
      }
      *(_QWORD *)(v11 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      v14 = (_QWORD *)(*(_QWORD *)(v6 + 48) + 16 * v13);
      *v14 = v21;
      v14[1] = v22;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  swift_release(v3);
  *v2 = v6;
}

uint64_t sub_EDC08(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, unint64_t, uint64_t);
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;

  v30 = a1;
  v6 = type metadata accessor for MetricsFieldInclusionRequest(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(*v3 + 16);
  v11 = *(_QWORD *)(*v3 + 24);
  v29 = v3;
  if (v11 > v10 && (a3 & 1) != 0)
    goto LABEL_12;
  v12 = v10 + 1;
  if ((a3 & 1) != 0)
  {
    sub_ED5C0(v12);
  }
  else
  {
    if (v11 > v10)
    {
      sub_EDFA4();
      goto LABEL_12;
    }
    sub_EE378(v12);
  }
  v13 = *v3;
  v14 = *(_QWORD *)(*v3 + 40);
  v15 = sub_6FD0(&qword_25F4E0, (uint64_t (*)(uint64_t))&type metadata accessor for MetricsFieldInclusionRequest, (uint64_t)&protocol conformance descriptor for MetricsFieldInclusionRequest);
  v16 = dispatch thunk of Hashable._rawHashValue(seed:)(v14, v6, v15);
  v17 = -1 << *(_BYTE *)(v13 + 32);
  a2 = v16 & ~v17;
  if (((*(_QWORD *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v18 = ~v17;
    v19 = *(_QWORD *)(v7 + 72);
    v20 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    do
    {
      v20(v9, *(_QWORD *)(v13 + 48) + v19 * a2, v6);
      v21 = sub_6FD0(&qword_25F4E8, (uint64_t (*)(uint64_t))&type metadata accessor for MetricsFieldInclusionRequest, (uint64_t)&protocol conformance descriptor for MetricsFieldInclusionRequest);
      v22 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v30, v6, v21);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      if ((v22 & 1) != 0)
        goto LABEL_15;
      a2 = (a2 + 1) & v18;
    }
    while (((*(_QWORD *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v23 = v30;
  v24 = *v29;
  *(_QWORD *)(*v29 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 32))(*(_QWORD *)(v24 + 48) + *(_QWORD *)(v7 + 72) * a2, v23, v6);
  v26 = *(_QWORD *)(v24 + 16);
  v27 = __OFADD__(v26, 1);
  v28 = v26 + 1;
  if (!v27)
  {
    *(_QWORD *)(v24 + 16) = v28;
    return result;
  }
  __break(1u);
LABEL_15:
  result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v6);
  __break(1u);
  return result;
}

void sub_EDE0C(uint64_t a1, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t *v5;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  _QWORD v29[9];

  v5 = v4;
  v9 = *(_QWORD *)(*v4 + 16);
  v10 = *(_QWORD *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0)
    goto LABEL_22;
  v11 = v9 + 1;
  if ((a4 & 1) != 0)
  {
    sub_ED92C(v11);
  }
  else
  {
    if (v10 > v9)
    {
      sub_EE1C8();
      goto LABEL_22;
    }
    sub_EE6A0(v11);
  }
  v12 = *v4;
  Hasher.init(_seed:)(v29, *(_QWORD *)(*v4 + 40));
  String.hash(into:)(v29, a1, a2);
  v13 = Hasher._finalize()();
  v14 = -1 << *(_BYTE *)(v12 + 32);
  a3 = v13 & ~v14;
  v15 = v12 + 56;
  if (((*(_QWORD *)(v12 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
  {
    v16 = *(_QWORD *)(v12 + 48);
    v17 = (_QWORD *)(v16 + 16 * a3);
    v18 = v17[1];
    v19 = *v17 == a1 && v18 == a2;
    if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v17, v18, a1, a2, 0) & 1) != 0)
    {
LABEL_21:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
      __break(1u);
    }
    else
    {
      v20 = ~v14;
      while (1)
      {
        a3 = (a3 + 1) & v20;
        if (((*(_QWORD *)(v15 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) == 0)
          break;
        v21 = (_QWORD *)(v16 + 16 * a3);
        v22 = v21[1];
        v23 = *v21 == a1 && v22 == a2;
        if (v23 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v21, v22, a1, a2, 0) & 1) != 0)
          goto LABEL_21;
      }
    }
  }
LABEL_22:
  v24 = *v5;
  *(_QWORD *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v25 = (_QWORD *)(*(_QWORD *)(v24 + 48) + 16 * a3);
  *v25 = a1;
  v25[1] = a2;
  v26 = *(_QWORD *)(v24 + 16);
  v27 = __OFADD__(v26, 1);
  v28 = v26 + 1;
  if (v27)
    __break(1u);
  else
    *(_QWORD *)(v24 + 16) = v28;
}

void *sub_EDFA4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *result;
  uint64_t v10;
  unint64_t v11;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t *v25;

  v1 = v0;
  v2 = type metadata accessor for MetricsFieldInclusionRequest(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_5440(&qword_25F4D8);
  v6 = *v0;
  v7 = static _SetStorage.copy(original:)(*v0);
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
  {
    result = (void *)swift_release(v6);
LABEL_30:
    *v1 = v8;
    return result;
  }
  v25 = v1;
  result = (void *)(v7 + 56);
  v10 = v6 + 56;
  v11 = (unint64_t)((1 << *(_BYTE *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 56 + 8 * v11)
    result = memmove(result, (const void *)(v6 + 56), 8 * v11);
  v13 = 0;
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v6 + 16);
  v14 = 1 << *(_BYTE *)(v6 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & *(_QWORD *)(v6 + 56);
  v17 = (unint64_t)(v14 + 63) >> 6;
  while (1)
  {
    if (v16)
    {
      v18 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v19 = v18 | (v13 << 6);
      goto LABEL_12;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v21 >= v17)
      goto LABEL_28;
    v22 = *(_QWORD *)(v10 + 8 * v21);
    ++v13;
    if (!v22)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v17)
        goto LABEL_28;
      v22 = *(_QWORD *)(v10 + 8 * v13);
      if (!v22)
      {
        v13 = v21 + 2;
        if (v21 + 2 >= v17)
          goto LABEL_28;
        v22 = *(_QWORD *)(v10 + 8 * v13);
        if (!v22)
          break;
      }
    }
LABEL_27:
    v16 = (v22 - 1) & v22;
    v19 = __clz(__rbit64(v22)) + (v13 << 6);
LABEL_12:
    v20 = *(_QWORD *)(v3 + 72) * v19;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, *(_QWORD *)(v6 + 48) + v20, v2);
    result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v8 + 48) + v20, v5, v2);
  }
  v23 = v21 + 3;
  if (v23 >= v17)
  {
LABEL_28:
    result = (void *)swift_release(v6);
    v1 = v25;
    goto LABEL_30;
  }
  v22 = *(_QWORD *)(v10 + 8 * v23);
  if (v22)
  {
    v13 = v23;
    goto LABEL_27;
  }
  while (1)
  {
    v13 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v13 >= v17)
      goto LABEL_28;
    v22 = *(_QWORD *)(v10 + 8 * v13);
    ++v23;
    if (v22)
      goto LABEL_27;
  }
LABEL_32:
  __break(1u);
  return result;
}

void sub_EE1C8()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  sub_5440(&qword_265000);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 56 + 8 * v7)
    memmove(v5, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_28;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
      {
        v9 = v20 + 2;
        if (v20 + 2 >= v13)
          goto LABEL_28;
        v21 = *(_QWORD *)(v6 + 8 * v9);
        if (!v21)
          break;
      }
    }
LABEL_27:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    v18 = v17[1];
    v19 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v19 = *v17;
    v19[1] = v18;
    swift_bridgeObjectRetain(v18);
  }
  v22 = v20 + 3;
  if (v22 >= v13)
    goto LABEL_28;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
}

uint64_t sub_EE378(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t result;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  int64_t v37;

  v2 = v1;
  v4 = type metadata accessor for MetricsFieldInclusionRequest(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_5440(&qword_25F4D8);
  v9 = static _SetStorage.resize(original:capacity:move:)(v8, a1, 0);
  v10 = v9;
  if (!*(_QWORD *)(v8 + 16))
  {
    result = swift_release(v8);
LABEL_37:
    *v2 = v10;
    return result;
  }
  v11 = 1 << *(_BYTE *)(v8 + 32);
  v12 = *(_QWORD *)(v8 + 56);
  v35 = v2;
  v36 = v8 + 56;
  if (v11 < 64)
    v13 = ~(-1 << v11);
  else
    v13 = -1;
  v14 = v13 & v12;
  v37 = (unint64_t)(v11 + 63) >> 6;
  v15 = v9 + 56;
  result = swift_retain(v8);
  v17 = 0;
  while (1)
  {
    if (v14)
    {
      v19 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v20 = v19 | (v17 << 6);
      goto LABEL_26;
    }
    v21 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v21 >= v37)
      goto LABEL_35;
    v22 = *(_QWORD *)(v36 + 8 * v21);
    ++v17;
    if (!v22)
    {
      v17 = v21 + 1;
      if (v21 + 1 >= v37)
        goto LABEL_35;
      v22 = *(_QWORD *)(v36 + 8 * v17);
      if (!v22)
      {
        v17 = v21 + 2;
        if (v21 + 2 >= v37)
          goto LABEL_35;
        v22 = *(_QWORD *)(v36 + 8 * v17);
        if (!v22)
          break;
      }
    }
LABEL_25:
    v14 = (v22 - 1) & v22;
    v20 = __clz(__rbit64(v22)) + (v17 << 6);
LABEL_26:
    v24 = *(_QWORD *)(v5 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v5 + 16))(v7, *(_QWORD *)(v8 + 48) + v24 * v20, v4);
    v25 = *(_QWORD *)(v10 + 40);
    v26 = sub_6FD0(&qword_25F4E0, (uint64_t (*)(uint64_t))&type metadata accessor for MetricsFieldInclusionRequest, (uint64_t)&protocol conformance descriptor for MetricsFieldInclusionRequest);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v25, v4, v26);
    v27 = -1 << *(_BYTE *)(v10 + 32);
    v28 = result & ~v27;
    v29 = v28 >> 6;
    if (((-1 << v28) & ~*(_QWORD *)(v15 + 8 * (v28 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v28) & ~*(_QWORD *)(v15 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v30 = 0;
      v31 = (unint64_t)(63 - v27) >> 6;
      do
      {
        if (++v29 == v31 && (v30 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v32 = v29 == v31;
        if (v29 == v31)
          v29 = 0;
        v30 |= v32;
        v33 = *(_QWORD *)(v15 + 8 * v29);
      }
      while (v33 == -1);
      v18 = __clz(__rbit64(~v33)) + (v29 << 6);
    }
    *(_QWORD *)(v15 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v5 + 32))(*(_QWORD *)(v10 + 48) + v18 * v24, v7, v4);
    ++*(_QWORD *)(v10 + 16);
  }
  v23 = v21 + 3;
  if (v23 >= v37)
  {
LABEL_35:
    result = swift_release_n(v8, 2);
    v2 = v35;
    goto LABEL_37;
  }
  v22 = *(_QWORD *)(v36 + 8 * v23);
  if (v22)
  {
    v17 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    v17 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v17 >= v37)
      goto LABEL_35;
    v22 = *(_QWORD *)(v36 + 8 * v17);
    ++v23;
    if (v22)
      goto LABEL_25;
  }
LABEL_39:
  __break(1u);
  return result;
}

void sub_EE6A0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  Swift::Int v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;
  int64_t v32;
  _QWORD v33[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_5440(&qword_265000);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = v5;
  if (!*(_QWORD *)(v3 + 16))
  {
    swift_release(v3);
LABEL_38:
    *v2 = v6;
    return;
  }
  v7 = 1 << *(_BYTE *)(v3 + 32);
  v8 = v3 + 56;
  if (v7 < 64)
    v9 = ~(-1 << v7);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v3 + 56);
  v31 = v2;
  v32 = (unint64_t)(v7 + 63) >> 6;
  v11 = v5 + 56;
  swift_retain(v3);
  v12 = 0;
  while (1)
  {
    if (v10)
    {
      v15 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v16 = v15 | (v12 << 6);
      goto LABEL_27;
    }
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v32)
      goto LABEL_36;
    v18 = *(_QWORD *)(v8 + 8 * v17);
    ++v12;
    if (!v18)
    {
      v12 = v17 + 1;
      if (v17 + 1 >= v32)
        goto LABEL_36;
      v18 = *(_QWORD *)(v8 + 8 * v12);
      if (!v18)
      {
        v12 = v17 + 2;
        if (v17 + 2 >= v32)
          goto LABEL_36;
        v18 = *(_QWORD *)(v8 + 8 * v12);
        if (!v18)
          break;
      }
    }
LABEL_26:
    v10 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v12 << 6);
LABEL_27:
    v20 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v16);
    v21 = *v20;
    v22 = v20[1];
    Hasher.init(_seed:)(v33, *(_QWORD *)(v6 + 40));
    swift_bridgeObjectRetain(v22);
    String.hash(into:)(v33, v21, v22);
    v23 = Hasher._finalize()();
    v24 = -1 << *(_BYTE *)(v6 + 32);
    v25 = v23 & ~v24;
    v26 = v25 >> 6;
    if (((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6))) != 0)
    {
      v13 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v29 = v26 == v28;
        if (v26 == v28)
          v26 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v11 + 8 * v26);
      }
      while (v30 == -1);
      v13 = __clz(__rbit64(~v30)) + (v26 << 6);
    }
    *(_QWORD *)(v11 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    v14 = (_QWORD *)(*(_QWORD *)(v6 + 48) + 16 * v13);
    *v14 = v21;
    v14[1] = v22;
    ++*(_QWORD *)(v6 + 16);
  }
  v19 = v17 + 3;
  if (v19 >= v32)
  {
LABEL_36:
    swift_release_n(v3, 2);
    v2 = v31;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v8 + 8 * v19);
  if (v18)
  {
    v12 = v19;
    goto LABEL_26;
  }
  while (1)
  {
    v12 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v12 >= v32)
      goto LABEL_36;
    v18 = *(_QWORD *)(v8 + 8 * v12);
    ++v19;
    if (v18)
      goto LABEL_26;
  }
LABEL_40:
  __break(1u);
}

uint64_t sub_EE94C(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7[2];
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 16);
  result = Set.init(minimumCapacity:)(v2, &type metadata for String, &protocol witness table for String);
  v8 = result;
  if (v2)
  {
    v4 = (uint64_t *)(a1 + 40);
    do
    {
      v5 = *(v4 - 1);
      v6 = *v4;
      swift_bridgeObjectRetain(*v4);
      sub_ED414(v7, v5, v6);
      swift_bridgeObjectRelease(v7[1]);
      v4 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

uint64_t sub_EE9E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unsigned int (*v14)(_QWORD *, uint64_t, uint64_t);
  char *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  int EnumCaseMultiPayload;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;

  v1 = type metadata accessor for ListItemViewModel(0);
  v2 = *(_QWORD *)(v1 - 8);
  v37 = *(unsigned __int8 *)(v2 + 80);
  v3 = (v37 + 16) & ~v37;
  v4 = *(_QWORD *)(v2 + 64);
  v5 = type metadata accessor for SeriesQuickActionButtonView(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v36 = *(_QWORD *)(v6 + 64);
  v8 = (_QWORD *)(v0 + v3);
  _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)(v0 + v3 + 24));
  if (*(_QWORD *)(v0 + v3 + 120))
    _s7BooksUI13AnyPagedFrameVwxx_0(v8 + 12);
  if (v8[20])
    _s7BooksUI13AnyPagedFrameVwxx_0(v8 + 17);
  if (v8[25])
    _s7BooksUI13AnyPagedFrameVwxx_0(v8 + 22);
  if (v8[30])
    _s7BooksUI13AnyPagedFrameVwxx_0(v8 + 27);
  if (v8[35])
    _s7BooksUI13AnyPagedFrameVwxx_0(v8 + 32);
  if (v8[40])
    _s7BooksUI13AnyPagedFrameVwxx_0(v8 + 37);
  v9 = v4 + v7;
  if (v8[45])
    _s7BooksUI13AnyPagedFrameVwxx_0(v8 + 42);
  v10 = v3 + v9;
  if (v8[50])
    _s7BooksUI13AnyPagedFrameVwxx_0(v8 + 47);
  v11 = v10 & ~v7;
  _s7BooksUI13AnyPagedFrameVwxx_0(v8 + 52);
  v12 = (_QWORD *)((char *)v8 + *(int *)(v1 + 40));
  v13 = type metadata accessor for CardInfo(0);
  v14 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 48);
  if (!v14(v12, 1, v13))
  {
    swift_bridgeObjectRelease(*v12);
    v15 = (char *)v12 + *(int *)(v13 + 20);
    v16 = type metadata accessor for UUID(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v15, v16);
  }
  v17 = (_QWORD *)((char *)v8 + *(int *)(v1 + 44));
  swift_bridgeObjectRelease(v17[1]);
  swift_bridgeObjectRelease(v17[3]);
  swift_bridgeObjectRelease(v17[5]);
  swift_bridgeObjectRelease(v17[7]);
  swift_bridgeObjectRelease(v17[9]);
  swift_bridgeObjectRelease(v17[11]);
  swift_bridgeObjectRelease(v17[13]);
  swift_bridgeObjectRelease(v17[15]);
  swift_bridgeObjectRelease(v17[17]);
  v18 = v0 + v11;
  if ((*(_BYTE *)(v0 + v11 + 40) & 1) != 0)
  {
    if (*(_QWORD *)(v18 + 24))
      _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)(v0 + v11));
  }
  else
  {
    swift_release(*(_QWORD *)v18);
  }
  v19 = (_QWORD *)(v18 + 48);
  if ((*(_BYTE *)(v18 + 88) & 1) != 0)
  {
    if (*(_QWORD *)(v18 + 72))
      _s7BooksUI13AnyPagedFrameVwxx_0(v19);
  }
  else
  {
    swift_release(*v19);
  }

  v20 = (_QWORD *)(v18 + *(int *)(v5 + 32));
  v21 = type metadata accessor for SeriesQuickActionButtonViewModel.Style(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v20, v21);
  if (EnumCaseMultiPayload == 2)
  {
    _s7BooksUI13AnyPagedFrameVwxx_0(v20);
LABEL_35:
    v24 = v36;
    v23 = v37;
    goto LABEL_36;
  }
  if (EnumCaseMultiPayload == 1)
  {
    _s7BooksUI13AnyPagedFrameVwxx_0(v20);
    v25 = sub_5440(&qword_263690);
    v26 = (_QWORD *)((char *)v20 + *(int *)(v25 + 48));
    if (!v14(v26, 1, v13))
    {
      swift_bridgeObjectRelease(*v26);
      v27 = (char *)v26 + *(int *)(v13 + 20);
      v28 = type metadata accessor for UUID(0);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v28 - 8) + 8))(v27, v28);
    }
    v29 = (char *)v20 + *(int *)(v25 + 64);
    v30 = type metadata accessor for AltSeriesContentTypeExposureData(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v30 - 8) + 8))(v29, v30);
    goto LABEL_35;
  }
  v24 = v36;
  v23 = v37;
  if (!EnumCaseMultiPayload)
    _s7BooksUI13AnyPagedFrameVwxx_0(v20);
LABEL_36:
  v31 = v11 + v24;
  v32 = type metadata accessor for SeriesQuickActionButtonViewModel(0);
  v33 = (char *)v20 + *(int *)(v32 + 20);
  v34 = type metadata accessor for SeriesData(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v34 - 8) + 8))(v33, v34);
  _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)((char *)v20 + *(int *)(v32 + 24)));
  swift_release(*(_QWORD *)(v18 + *(int *)(v5 + 36) + 8));
  return swift_deallocObject(v0, v31, v23 | v7 | 7);
}

double sub_EED40@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(type metadata accessor for ListItemViewModel(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = *(_QWORD *)(v3 + 64);
  v6 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for SeriesQuickActionButtonView(0) - 8) + 80);
  return sub_EC440(v1 + v4, v1 + ((v4 + v5 + v6) & ~v6), a1);
}

uint64_t sub_EEDC4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  int EnumCaseMultiPayload;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;

  v1 = type metadata accessor for SeriesQuickActionButtonView(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v0 + v4;
  if ((*(_BYTE *)(v0 + v4 + 40) & 1) != 0)
  {
    if (*(_QWORD *)(v6 + 24))
      _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)(v0 + v4));
  }
  else
  {
    swift_release(*(_QWORD *)v6);
  }
  v7 = (_QWORD *)(v6 + 48);
  if ((*(_BYTE *)(v6 + 88) & 1) != 0)
  {
    if (*(_QWORD *)(v6 + 72))
      _s7BooksUI13AnyPagedFrameVwxx_0(v7);
  }
  else
  {
    swift_release(*v7);
  }

  v8 = (_QWORD *)(v6 + *(int *)(v1 + 32));
  v9 = type metadata accessor for SeriesQuickActionButtonViewModel.Style(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v8, v9);
  switch(EnumCaseMultiPayload)
  {
    case 2:
      goto LABEL_12;
    case 1:
      _s7BooksUI13AnyPagedFrameVwxx_0(v8);
      v11 = sub_5440(&qword_263690);
      v12 = (_QWORD *)((char *)v8 + *(int *)(v11 + 48));
      v13 = type metadata accessor for CardInfo(0);
      if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 48))(v12, 1, v13))
      {
        swift_bridgeObjectRelease(*v12);
        v14 = (char *)v12 + *(int *)(v13 + 20);
        v15 = type metadata accessor for UUID(0);
        (*(void (**)(char *, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14, v15);
      }
      v16 = (char *)v8 + *(int *)(v11 + 64);
      v17 = type metadata accessor for AltSeriesContentTypeExposureData(0);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(v16, v17);
      break;
    case 0:
LABEL_12:
      _s7BooksUI13AnyPagedFrameVwxx_0(v8);
      break;
  }
  v18 = v3 | 7;
  v19 = type metadata accessor for SeriesQuickActionButtonViewModel(0);
  v20 = (char *)v8 + *(int *)(v19 + 20);
  v21 = type metadata accessor for SeriesData(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v21 - 8) + 8))(v20, v21);
  _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)((char *)v8 + *(int *)(v19 + 24)));
  swift_release(*(_QWORD *)(v6 + *(int *)(v1 + 36) + 8));
  return swift_deallocObject(v0, v4 + v5, v18);
}

uint64_t sub_EEFB0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for SeriesQuickActionButtonView(0) - 8) + 80);
  return sub_EC4E4(a1, v1 + ((v3 + 16) & ~v3));
}

uint64_t sub_EEFF0(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &opaque type descriptor for <<opaque return type of SeriesQuickActionButtonView.body>>, 1);
}

uint64_t initializeBufferWithCopyOfBuffer for SeriesQuickActionButtonView(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  _OWORD *v13;
  _OWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  int EnumCaseMultiPayload;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  void (*v56)(char *, char *, uint64_t);
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) == 0)
  {
    if ((a2[5] & 1) != 0)
    {
      v7 = a2[3];
      if (v7)
      {
        v8 = a2[4];
        *(_QWORD *)(a1 + 24) = v7;
        *(_QWORD *)(a1 + 32) = v8;
        (**(void (***)(uint64_t, uint64_t *))(v7 - 8))(a1, a2);
      }
      else
      {
        v9 = *(__n128 *)a2;
        v12 = *((_OWORD *)a2 + 1);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v12;
        *(_QWORD *)(a1 + 32) = a2[4];
      }
      *(_BYTE *)(v4 + 40) = 1;
    }
    else
    {
      v11 = *a2;
      *(_QWORD *)v4 = *a2;
      *(_BYTE *)(v4 + 40) = 0;
      v9 = swift_retain(v11);
    }
    v13 = a2 + 6;
    if ((a2[11] & 1) != 0)
    {
      v14 = (_OWORD *)(v4 + 48);
      v15 = a2[9];
      if (v15)
      {
        v16 = a2[10];
        *(_QWORD *)(v4 + 72) = v15;
        *(_QWORD *)(v4 + 80) = v16;
        (**(void (***)(_OWORD *, _OWORD *, __n128))(v15 - 8))(v14, v13, v9);
      }
      else
      {
        v18 = *((_OWORD *)a2 + 4);
        *v14 = *v13;
        *(_OWORD *)(v4 + 64) = v18;
        *(_QWORD *)(v4 + 80) = a2[10];
      }
      *(_BYTE *)(v4 + 88) = 1;
    }
    else
    {
      v17 = *(_QWORD *)v13;
      *(_QWORD *)(v4 + 48) = *(_QWORD *)v13;
      *(_BYTE *)(v4 + 88) = 0;
      swift_retain(v17);
    }
    *(_BYTE *)(v4 + 89) = *((_BYTE *)a2 + 89);
    v20 = (void *)a2[12];
    v19 = a2[13];
    *(_QWORD *)(v4 + 96) = v20;
    *(_QWORD *)(v4 + 104) = v19;
    v21 = *(int *)(a3 + 32);
    v22 = v4 + v21;
    v23 = (uint64_t)a2 + v21;
    v24 = type metadata accessor for SeriesQuickActionButtonViewModel.Style(0);
    v25 = v20;
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v23, v24);
    if (EnumCaseMultiPayload == 2)
    {
      v31 = *(_OWORD *)(v23 + 24);
      *(_OWORD *)(v22 + 24) = v31;
      (**(void (***)(uint64_t, uint64_t))(v31 - 8))(v22, v23);
      v28 = v22;
      v29 = v24;
      v30 = 2;
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v32 = *(_OWORD *)(v23 + 24);
      *(_OWORD *)(v22 + 24) = v32;
      (**(void (***)(uint64_t, uint64_t))(v32 - 8))(v22, v23);
      v60 = sub_5440(&qword_263690);
      v33 = *(int *)(v60 + 48);
      v34 = (uint64_t *)(v22 + v33);
      v35 = (uint64_t *)(v23 + v33);
      v36 = type metadata accessor for CardInfo(0);
      v37 = *(_QWORD *)(v36 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v37 + 48))(v35, 1, v36))
      {
        v38 = sub_5440(&qword_2618C8);
        memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
      }
      else
      {
        v57 = *v35;
        *v34 = *v35;
        v39 = *(int *)(v36 + 20);
        v58 = (char *)v35 + v39;
        v59 = (char *)v34 + v39;
        v40 = type metadata accessor for UUID(0);
        v56 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v40 - 8) + 16);
        swift_bridgeObjectRetain(v57);
        v56(v59, v58, v40);
        (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v37 + 56))(v34, 0, 1, v36);
      }
      v41 = *(int *)(v60 + 64);
      v42 = v22 + v41;
      v43 = v23 + v41;
      v44 = type metadata accessor for AltSeriesContentTypeExposureData(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 16))(v42, v43, v44);
      v28 = v22;
      v29 = v24;
      v30 = 1;
    }
    else
    {
      if (EnumCaseMultiPayload)
      {
        memcpy((void *)v22, (const void *)v23, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
LABEL_26:
        v45 = type metadata accessor for SeriesQuickActionButtonViewModel(0);
        v46 = *(int *)(v45 + 20);
        v47 = v22 + v46;
        v48 = v23 + v46;
        v49 = type metadata accessor for SeriesData(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 16))(v47, v48, v49);
        v50 = *(int *)(v45 + 24);
        v51 = *(_OWORD *)(v23 + v50 + 24);
        *(_OWORD *)(v22 + v50 + 24) = v51;
        (**(void (***)(void))(v51 - 8))();
        v52 = *(int *)(a3 + 36);
        v53 = (_QWORD *)(v4 + v52);
        v54 = (uint64_t *)((char *)a2 + v52);
        v10 = v54[1];
        *v53 = *v54;
        v53[1] = v10;
        goto LABEL_27;
      }
      v27 = *(_OWORD *)(v23 + 24);
      *(_OWORD *)(v22 + 24) = v27;
      (**(void (***)(uint64_t, uint64_t))(v27 - 8))(v22, v23);
      v28 = v22;
      v29 = v24;
      v30 = 0;
    }
    swift_storeEnumTagMultiPayload(v28, v29, v30);
    goto LABEL_26;
  }
  v10 = *a2;
  *(_QWORD *)v4 = *a2;
  v4 = v10 + ((v5 + 16) & ~(unint64_t)v5);
LABEL_27:
  swift_retain(v10);
  return v4;
}

double destroy for SeriesQuickActionButtonView(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  double result;

  if ((a1[5] & 1) != 0)
  {
    if (a1[3])
      _s7BooksUI13AnyPagedFrameVwxx_0(a1);
  }
  else
  {
    swift_release(*a1);
  }
  v4 = a1 + 6;
  if ((a1[11] & 1) != 0)
  {
    if (a1[9])
      _s7BooksUI13AnyPagedFrameVwxx_0(v4);
  }
  else
  {
    swift_release(*v4);
  }

  v5 = (_QWORD *)((char *)a1 + *(int *)(a2 + 32));
  v6 = type metadata accessor for SeriesQuickActionButtonViewModel.Style(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v5, v6);
  switch(EnumCaseMultiPayload)
  {
    case 2:
      goto LABEL_12;
    case 1:
      _s7BooksUI13AnyPagedFrameVwxx_0(v5);
      v8 = sub_5440(&qword_263690);
      v9 = (_QWORD *)((char *)v5 + *(int *)(v8 + 48));
      v10 = type metadata accessor for CardInfo(0);
      if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(v9, 1, v10))
      {
        swift_bridgeObjectRelease(*v9);
        v11 = (char *)v9 + *(int *)(v10 + 20);
        v12 = type metadata accessor for UUID(0);
        (*(void (**)(char *, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
      }
      v13 = (char *)v5 + *(int *)(v8 + 64);
      v14 = type metadata accessor for AltSeriesContentTypeExposureData(0);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
      break;
    case 0:
LABEL_12:
      _s7BooksUI13AnyPagedFrameVwxx_0(v5);
      break;
  }
  v15 = type metadata accessor for SeriesQuickActionButtonViewModel(0);
  v16 = (char *)v5 + *(int *)(v15 + 20);
  v17 = type metadata accessor for SeriesData(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(v16, v17);
  _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)((char *)v5 + *(int *)(v15 + 24)));
  *(_QWORD *)&result = swift_release(*(_QWORD *)((char *)a1 + *(int *)(a2 + 36) + 8)).n128_u64[0];
  return result;
}

uint64_t initializeWithCopy for SeriesQuickActionButtonView(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  __int128 v10;
  _OWORD *v11;
  _OWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  int EnumCaseMultiPayload;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  void (*v55)(char *, char *, uint64_t);
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;

  if ((a2[5] & 1) != 0)
  {
    v6 = a2[3];
    if (v6)
    {
      v7 = a2[4];
      *(_QWORD *)(a1 + 24) = v6;
      *(_QWORD *)(a1 + 32) = v7;
      (**(void (***)(uint64_t, uint64_t *))(v6 - 8))(a1, a2);
    }
    else
    {
      v8 = *(__n128 *)a2;
      v10 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v10;
      *(_QWORD *)(a1 + 32) = a2[4];
    }
    *(_BYTE *)(a1 + 40) = 1;
  }
  else
  {
    v9 = *a2;
    *(_QWORD *)a1 = *a2;
    *(_BYTE *)(a1 + 40) = 0;
    v8 = swift_retain(v9);
  }
  v11 = a2 + 6;
  if ((a2[11] & 1) != 0)
  {
    v12 = (_OWORD *)(a1 + 48);
    v13 = a2[9];
    if (v13)
    {
      v14 = a2[10];
      *(_QWORD *)(a1 + 72) = v13;
      *(_QWORD *)(a1 + 80) = v14;
      (**(void (***)(_OWORD *, _OWORD *, __n128))(v13 - 8))(v12, v11, v8);
    }
    else
    {
      v16 = *((_OWORD *)a2 + 4);
      *v12 = *v11;
      *(_OWORD *)(a1 + 64) = v16;
      *(_QWORD *)(a1 + 80) = a2[10];
    }
    *(_BYTE *)(a1 + 88) = 1;
  }
  else
  {
    v15 = *(_QWORD *)v11;
    *(_QWORD *)(a1 + 48) = *(_QWORD *)v11;
    *(_BYTE *)(a1 + 88) = 0;
    swift_retain(v15);
  }
  *(_BYTE *)(a1 + 89) = *((_BYTE *)a2 + 89);
  v18 = (void *)a2[12];
  v17 = a2[13];
  *(_QWORD *)(a1 + 96) = v18;
  *(_QWORD *)(a1 + 104) = v17;
  v19 = *(int *)(a3 + 32);
  v20 = a1 + v19;
  v21 = (uint64_t)a2 + v19;
  v22 = type metadata accessor for SeriesQuickActionButtonViewModel.Style(0);
  v23 = v18;
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v21, v22);
  switch(EnumCaseMultiPayload)
  {
    case 2:
      v29 = *(_OWORD *)(v21 + 24);
      *(_OWORD *)(v20 + 24) = v29;
      (**(void (***)(uint64_t, uint64_t))(v29 - 8))(v20, v21);
      v26 = v20;
      v27 = v22;
      v28 = 2;
      goto LABEL_23;
    case 1:
      v30 = *(_OWORD *)(v21 + 24);
      *(_OWORD *)(v20 + 24) = v30;
      (**(void (***)(uint64_t, uint64_t))(v30 - 8))(v20, v21);
      v59 = sub_5440(&qword_263690);
      v31 = *(int *)(v59 + 48);
      v32 = (uint64_t *)(v20 + v31);
      v33 = (uint64_t *)(v21 + v31);
      v34 = type metadata accessor for CardInfo(0);
      v35 = *(_QWORD *)(v34 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v35 + 48))(v33, 1, v34))
      {
        v36 = sub_5440(&qword_2618C8);
        memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
      }
      else
      {
        v56 = *v33;
        *v32 = *v33;
        v37 = *(int *)(v34 + 20);
        v57 = (char *)v33 + v37;
        v58 = (char *)v32 + v37;
        v38 = type metadata accessor for UUID(0);
        v55 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v38 - 8) + 16);
        swift_bridgeObjectRetain(v56);
        v55(v58, v57, v38);
        (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, v34);
      }
      v39 = *(int *)(v59 + 64);
      v40 = v20 + v39;
      v41 = v21 + v39;
      v42 = type metadata accessor for AltSeriesContentTypeExposureData(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 16))(v40, v41, v42);
      v26 = v20;
      v27 = v22;
      v28 = 1;
      goto LABEL_23;
    case 0:
      v25 = *(_OWORD *)(v21 + 24);
      *(_OWORD *)(v20 + 24) = v25;
      (**(void (***)(uint64_t, uint64_t))(v25 - 8))(v20, v21);
      v26 = v20;
      v27 = v22;
      v28 = 0;
LABEL_23:
      swift_storeEnumTagMultiPayload(v26, v27, v28);
      goto LABEL_24;
  }
  memcpy((void *)v20, (const void *)v21, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
LABEL_24:
  v43 = type metadata accessor for SeriesQuickActionButtonViewModel(0);
  v44 = *(int *)(v43 + 20);
  v45 = v20 + v44;
  v46 = v21 + v44;
  v47 = type metadata accessor for SeriesData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 16))(v45, v46, v47);
  v48 = *(int *)(v43 + 24);
  v49 = *(_OWORD *)(v21 + v48 + 24);
  *(_OWORD *)(v20 + v48 + 24) = v49;
  (**(void (***)(void))(v49 - 8))();
  v50 = *(int *)(a3 + 36);
  v51 = (_QWORD *)(a1 + v50);
  v52 = (uint64_t *)((char *)a2 + v50);
  v53 = v52[1];
  *v51 = *v52;
  v51[1] = v53;
  swift_retain(v53);
  return a1;
}

uint64_t assignWithCopy for SeriesQuickActionButtonView(uint64_t a1, __int128 *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 *v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  void *v15;
  void *v16;
  id v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  int EnumCaseMultiPayload;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  void (*v52)(char *, char *, uint64_t);
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;

  if ((__int128 *)a1 != a2)
  {
    sub_B414(a1, &qword_25FB08);
    if ((*((_BYTE *)a2 + 40) & 1) != 0)
    {
      v6 = *((_QWORD *)a2 + 3);
      if (v6)
      {
        *(_QWORD *)(a1 + 24) = v6;
        *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
        (**(void (***)(uint64_t, __int128 *))(v6 - 8))(a1, a2);
      }
      else
      {
        v8 = *a2;
        v9 = a2[1];
        *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
        *(_OWORD *)a1 = v8;
        *(_OWORD *)(a1 + 16) = v9;
      }
      *(_BYTE *)(a1 + 40) = 1;
    }
    else
    {
      v7 = *(_QWORD *)a2;
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_BYTE *)(a1 + 40) = 0;
      swift_retain(v7);
    }
    v10 = a2 + 3;
    sub_B414(a1 + 48, &qword_25FAF8);
    if ((*((_BYTE *)a2 + 88) & 1) != 0)
    {
      v11 = *((_QWORD *)a2 + 9);
      if (v11)
      {
        *(_QWORD *)(a1 + 72) = v11;
        *(_QWORD *)(a1 + 80) = *((_QWORD *)a2 + 10);
        (**(void (***)(uint64_t, uint64_t))(v11 - 8))(a1 + 48, (uint64_t)(a2 + 3));
      }
      else
      {
        v13 = *v10;
        v14 = a2[4];
        *(_QWORD *)(a1 + 80) = *((_QWORD *)a2 + 10);
        *(_OWORD *)(a1 + 48) = v13;
        *(_OWORD *)(a1 + 64) = v14;
      }
      *(_BYTE *)(a1 + 88) = 1;
    }
    else
    {
      v12 = *(_QWORD *)v10;
      *(_QWORD *)(a1 + 48) = *(_QWORD *)v10;
      *(_BYTE *)(a1 + 88) = 0;
      swift_retain(v12);
    }
  }
  *(_BYTE *)(a1 + 89) = *((_BYTE *)a2 + 89);
  v15 = *(void **)(a1 + 96);
  v16 = (void *)*((_QWORD *)a2 + 12);
  *(_QWORD *)(a1 + 96) = v16;
  v17 = v16;

  *(_QWORD *)(a1 + 104) = *((_QWORD *)a2 + 13);
  v18 = *(int *)(a3 + 32);
  v19 = (_QWORD *)(a1 + v18);
  v20 = (_QWORD *)((char *)a2 + v18);
  if ((__int128 *)a1 != a2)
  {
    sub_224DC(a1 + v18, type metadata accessor for SeriesQuickActionButtonViewModel.Style);
    v21 = type metadata accessor for SeriesQuickActionButtonViewModel.Style(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v20, v21);
    switch(EnumCaseMultiPayload)
    {
      case 2:
        v27 = v20[3];
        v19[3] = v27;
        v19[4] = v20[4];
        (**(void (***)(_QWORD *, _QWORD *))(v27 - 8))(v19, v20);
        v24 = v19;
        v25 = v21;
        v26 = 2;
        goto LABEL_25;
      case 1:
        v28 = v20[3];
        v19[3] = v28;
        v19[4] = v20[4];
        (**(void (***)(_QWORD *, _QWORD *))(v28 - 8))(v19, v20);
        v56 = sub_5440(&qword_263690);
        v29 = *(int *)(v56 + 48);
        v30 = (_QWORD *)((char *)v19 + v29);
        v31 = (_QWORD *)((char *)v20 + v29);
        v32 = type metadata accessor for CardInfo(0);
        v33 = *(_QWORD *)(v32 - 8);
        if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v33 + 48))(v31, 1, v32))
        {
          v34 = sub_5440(&qword_2618C8);
          memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
        }
        else
        {
          v53 = *v31;
          *v30 = *v31;
          v35 = *(int *)(v32 + 20);
          v54 = (char *)v31 + v35;
          v55 = (char *)v30 + v35;
          v36 = type metadata accessor for UUID(0);
          v52 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v36 - 8) + 16);
          swift_bridgeObjectRetain(v53);
          v52(v55, v54, v36);
          (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v33 + 56))(v30, 0, 1, v32);
        }
        v37 = *(int *)(v56 + 64);
        v38 = (char *)v19 + v37;
        v39 = (char *)v20 + v37;
        v40 = type metadata accessor for AltSeriesContentTypeExposureData(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v40 - 8) + 16))(v38, v39, v40);
        v24 = v19;
        v25 = v21;
        v26 = 1;
        goto LABEL_25;
      case 0:
        v23 = v20[3];
        v19[3] = v23;
        v19[4] = v20[4];
        (**(void (***)(_QWORD *, _QWORD *))(v23 - 8))(v19, v20);
        v24 = v19;
        v25 = v21;
        v26 = 0;
LABEL_25:
        swift_storeEnumTagMultiPayload(v24, v25, v26);
        goto LABEL_26;
    }
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
  }
LABEL_26:
  v41 = type metadata accessor for SeriesQuickActionButtonViewModel(0);
  v42 = *(int *)(v41 + 20);
  v43 = (char *)v19 + v42;
  v44 = (char *)v20 + v42;
  v45 = type metadata accessor for SeriesData(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v45 - 8) + 24))(v43, v44, v45);
  sub_142F8((_QWORD *)((char *)v19 + *(int *)(v41 + 24)), (_QWORD *)((char *)v20 + *(int *)(v41 + 24)));
  v46 = *(int *)(a3 + 36);
  v47 = (_QWORD *)(a1 + v46);
  v48 = (_QWORD *)((char *)a2 + v46);
  v49 = v48[1];
  v50 = v47[1];
  *v47 = *v48;
  v47[1] = v49;
  swift_retain(v49);
  swift_release(v50);
  return a1;
}

uint64_t initializeWithTake for SeriesQuickActionButtonView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  _OWORD *v9;
  _OWORD *v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  __int128 v35;
  char *v37;
  uint64_t v38;

  v3 = a3;
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  v7 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v7;
  *(_OWORD *)(a1 + 73) = *(_OWORD *)(a2 + 73);
  *(_BYTE *)(a1 + 89) = *(_BYTE *)(a2 + 89);
  v8 = *(int *)(a3 + 32);
  v9 = (_OWORD *)(a1 + v8);
  v10 = (_OWORD *)(a2 + v8);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  v11 = type metadata accessor for SeriesQuickActionButtonViewModel.Style(0);
  if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
  {
    v38 = v3;
    v12 = v10[1];
    *v9 = *v10;
    v9[1] = v12;
    *((_QWORD *)v9 + 4) = *((_QWORD *)v10 + 4);
    v13 = sub_5440(&qword_263690);
    v14 = *(int *)(v13 + 48);
    v15 = (_QWORD *)((char *)v9 + v14);
    v16 = (_QWORD *)((char *)v10 + v14);
    v17 = type metadata accessor for CardInfo(0);
    v18 = *(_QWORD *)(v17 - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
    {
      v19 = sub_5440(&qword_2618C8);
      memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    }
    else
    {
      *v15 = *v16;
      v20 = *(int *)(v17 + 20);
      v37 = (char *)v15 + v20;
      v21 = (char *)v16 + v20;
      v22 = type metadata accessor for UUID(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v37, v21, v22);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
    }
    v23 = *(int *)(v13 + 64);
    v24 = (char *)v9 + v23;
    v25 = (char *)v10 + v23;
    v26 = type metadata accessor for AltSeriesContentTypeExposureData(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v26 - 8) + 32))(v24, v25, v26);
    swift_storeEnumTagMultiPayload(v9, v11, 1);
    v3 = v38;
  }
  else
  {
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  v27 = type metadata accessor for SeriesQuickActionButtonViewModel(0);
  v28 = *(int *)(v27 + 20);
  v29 = (char *)v9 + v28;
  v30 = (char *)v10 + v28;
  v31 = type metadata accessor for SeriesData(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v31 - 8) + 32))(v29, v30, v31);
  v32 = *(int *)(v27 + 24);
  v33 = (char *)v9 + v32;
  v34 = (char *)v10 + v32;
  v35 = *((_OWORD *)v34 + 1);
  *(_OWORD *)v33 = *(_OWORD *)v34;
  *((_OWORD *)v33 + 1) = v35;
  *((_QWORD *)v33 + 4) = *((_QWORD *)v34 + 4);
  *(_OWORD *)(a1 + *(int *)(v3 + 36)) = *(_OWORD *)(a2 + *(int *)(v3 + 36));
  return a1;
}

uint64_t assignWithTake for SeriesQuickActionButtonView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  __int128 v7;
  void *v8;
  uint64_t v9;
  _OWORD *v10;
  _OWORD *v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  char *v39;
  uint64_t v40;

  if (a1 != a2)
  {
    sub_B414(a1, &qword_25FB08);
    v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v6;
    *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
    sub_B414(a1 + 48, &qword_25FAF8);
    v7 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 64) = v7;
    *(_OWORD *)(a1 + 73) = *(_OWORD *)(a2 + 73);
  }
  *(_BYTE *)(a1 + 89) = *(_BYTE *)(a2 + 89);
  v8 = *(void **)(a1 + 96);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);

  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  v9 = *(int *)(a3 + 32);
  v10 = (_OWORD *)(a1 + v9);
  v11 = (_OWORD *)(a2 + v9);
  if (a1 != a2)
  {
    sub_224DC(a1 + v9, type metadata accessor for SeriesQuickActionButtonViewModel.Style);
    v12 = type metadata accessor for SeriesQuickActionButtonViewModel.Style(0);
    if (swift_getEnumCaseMultiPayload(v11, v12) == 1)
    {
      v13 = v11[1];
      *v10 = *v11;
      v10[1] = v13;
      *((_QWORD *)v10 + 4) = *((_QWORD *)v11 + 4);
      v40 = sub_5440(&qword_263690);
      v14 = *(int *)(v40 + 48);
      v15 = (_QWORD *)((char *)v10 + v14);
      v16 = (_QWORD *)((char *)v11 + v14);
      v17 = type metadata accessor for CardInfo(0);
      v18 = *(_QWORD *)(v17 - 8);
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
      {
        v19 = sub_5440(&qword_2618C8);
        memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
      }
      else
      {
        *v15 = *v16;
        v20 = *(int *)(v17 + 20);
        v39 = (char *)v15 + v20;
        v21 = (char *)v16 + v20;
        v22 = type metadata accessor for UUID(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v39, v21, v22);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
      }
      v23 = *(int *)(v40 + 64);
      v24 = (char *)v10 + v23;
      v25 = (char *)v11 + v23;
      v26 = type metadata accessor for AltSeriesContentTypeExposureData(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v26 - 8) + 32))(v24, v25, v26);
      swift_storeEnumTagMultiPayload(v10, v12, 1);
    }
    else
    {
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
  }
  v27 = type metadata accessor for SeriesQuickActionButtonViewModel(0);
  v28 = *(int *)(v27 + 20);
  v29 = (char *)v10 + v28;
  v30 = (char *)v11 + v28;
  v31 = type metadata accessor for SeriesData(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v31 - 8) + 40))(v29, v30, v31);
  v32 = *(int *)(v27 + 24);
  v33 = (char *)v10 + v32;
  v34 = (char *)v11 + v32;
  _s7BooksUI13AnyPagedFrameVwxx_0(v33);
  v35 = *((_OWORD *)v34 + 1);
  *(_OWORD *)v33 = *(_OWORD *)v34;
  *((_OWORD *)v33 + 1) = v35;
  *((_QWORD *)v33 + 4) = *((_QWORD *)v34 + 4);
  v36 = *(int *)(a3 + 36);
  v37 = *(_QWORD *)(a1 + v36 + 8);
  *(_OWORD *)(a1 + v36) = *(_OWORD *)(a2 + v36);
  swift_release(v37);
  return a1;
}

uint64_t getEnumTagSinglePayload for SeriesQuickActionButtonView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_F0138);
}

uint64_t sub_F0138(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for SeriesQuickActionButtonViewModel(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 32), a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 36));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for SeriesQuickActionButtonView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_F01C4);
}

uint64_t sub_F01C4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for SeriesQuickActionButtonViewModel(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + *(int *)(a4 + 32), a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 36)) = (a2 - 1);
  return result;
}

uint64_t sub_F0240(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[6];

  v4[0] = ")";
  v4[1] = ")";
  v4[2] = &unk_1EB3D8;
  v4[3] = &unk_1EB3F0;
  result = type metadata accessor for SeriesQuickActionButtonViewModel(319);
  if (v3 <= 0x3F)
  {
    v4[4] = *(_QWORD *)(result - 8) + 64;
    v4[5] = (char *)&value witness table for () + 64;
    swift_initStructMetadata(a1, 256, 6, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_F02D4()
{
  return sub_2F608(&qword_264F20, &qword_264F28, (void (*)(void))sub_ECC30, (void (*)(void))sub_ED0C4);
}

unint64_t sub_F0308(unint64_t a1, uint64_t a2, int *a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  __int16 v32;
  char v33;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v20 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = v20 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain(v20);
  }
  else
  {
    v6 = *(_QWORD *)a2;
    v7 = *(_QWORD *)(a2 + 8);
    v8 = *(_QWORD *)(a2 + 16);
    v9 = *(_QWORD *)(a2 + 24);
    v10 = *(_QWORD *)(a2 + 32);
    v11 = *(_QWORD *)(a2 + 40);
    v13 = *(_QWORD *)(a2 + 48);
    v12 = *(_QWORD *)(a2 + 56);
    v32 = *(_WORD *)(a2 + 64);
    v33 = *(_BYTE *)(a2 + 66);
    sub_3480C(*(_QWORD *)a2, v7, v8, v9, v10, v11, v13, v12, v32, v33);
    *(_QWORD *)a1 = v6;
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = v8;
    *(_QWORD *)(a1 + 24) = v9;
    *(_QWORD *)(a1 + 32) = v10;
    *(_QWORD *)(a1 + 40) = v11;
    *(_QWORD *)(a1 + 48) = v13;
    *(_QWORD *)(a1 + 56) = v12;
    *(_WORD *)(a1 + 64) = v32;
    v14 = a3[5];
    v15 = (uint64_t *)(a1 + v14);
    v16 = (uint64_t *)(a2 + v14);
    *(_BYTE *)(a1 + 66) = v33;
    v17 = sub_5440(&qword_25FAE0);
    if (swift_getEnumCaseMultiPayload(v16, v17) == 1)
    {
      v18 = type metadata accessor for OpaqueMetricsFieldsContext(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v15, v16, v18);
      v19 = 1;
    }
    else
    {
      v21 = *v16;
      *v15 = *v16;
      swift_retain(v21);
      v19 = 0;
    }
    swift_storeEnumTagMultiPayload(v15, v17, v19);
    v22 = a3[6];
    v23 = a1 + v22;
    v24 = (uint64_t *)(a2 + v22);
    if ((*(_BYTE *)(a2 + v22 + 40) & 1) != 0)
    {
      v25 = v24[3];
      if (v25)
      {
        v26 = v24[4];
        *(_QWORD *)(v23 + 24) = v25;
        *(_QWORD *)(v23 + 32) = v26;
        (**(void (***)(uint64_t))(v25 - 8))(v23);
      }
      else
      {
        v28 = *((_OWORD *)v24 + 1);
        *(_OWORD *)v23 = *(_OWORD *)v24;
        *(_OWORD *)(v23 + 16) = v28;
        *(_QWORD *)(v23 + 32) = v24[4];
      }
      *(_BYTE *)(v23 + 40) = 1;
    }
    else
    {
      v27 = *v24;
      *(_QWORD *)v23 = *v24;
      *(_BYTE *)(v23 + 40) = 0;
      swift_retain(v27);
    }
    v29 = a3[7];
    v30 = *(_OWORD *)(a2 + v29 + 24);
    *(_OWORD *)(a1 + v29 + 24) = v30;
    (**(void (***)(void))(v30 - 8))();
  }
  return a1;
}

uint64_t sub_F04EC(uint64_t a1, int *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  sub_BDF8(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_WORD *)(a1 + 64), *(_BYTE *)(a1 + 66));
  v4 = (_QWORD *)(a1 + a2[5]);
  v5 = sub_5440(&qword_25FAE0);
  if (swift_getEnumCaseMultiPayload(v4, v5) == 1)
  {
    v6 = type metadata accessor for OpaqueMetricsFieldsContext(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v4, v6);
  }
  else
  {
    swift_release(*v4);
  }
  v7 = (_QWORD *)(a1 + a2[6]);
  if ((v7[5] & 1) != 0)
  {
    if (v7[3])
      _s7BooksUI13AnyPagedFrameVwxx_0(v7);
  }
  else
  {
    swift_release(*v7);
  }
  return _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)(a1 + a2[7]));
}

uint64_t sub_F05C4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  __int16 v30;
  char v31;

  v5 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = *(_QWORD *)(a2 + 40);
  v12 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a2 + 56);
  v30 = *(_WORD *)(a2 + 64);
  v31 = *(_BYTE *)(a2 + 66);
  sub_3480C(*(_QWORD *)a2, v6, v7, v8, v9, v10, v12, v11, v30, v31);
  *(_QWORD *)a1 = v5;
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = v7;
  *(_QWORD *)(a1 + 24) = v8;
  *(_QWORD *)(a1 + 32) = v9;
  *(_QWORD *)(a1 + 40) = v10;
  *(_QWORD *)(a1 + 48) = v12;
  *(_QWORD *)(a1 + 56) = v11;
  *(_WORD *)(a1 + 64) = v30;
  v13 = a3[5];
  v14 = (uint64_t *)(a1 + v13);
  v15 = (uint64_t *)(a2 + v13);
  *(_BYTE *)(a1 + 66) = v31;
  v16 = sub_5440(&qword_25FAE0);
  if (swift_getEnumCaseMultiPayload(v15, v16) == 1)
  {
    v17 = type metadata accessor for OpaqueMetricsFieldsContext(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v14, v15, v17);
    v18 = 1;
  }
  else
  {
    v19 = *v15;
    *v14 = *v15;
    swift_retain(v19);
    v18 = 0;
  }
  swift_storeEnumTagMultiPayload(v14, v16, v18);
  v20 = a3[6];
  v21 = a1 + v20;
  v22 = (uint64_t *)(a2 + v20);
  if ((*(_BYTE *)(a2 + v20 + 40) & 1) != 0)
  {
    v23 = v22[3];
    if (v23)
    {
      v24 = v22[4];
      *(_QWORD *)(v21 + 24) = v23;
      *(_QWORD *)(v21 + 32) = v24;
      (**(void (***)(uint64_t))(v23 - 8))(v21);
    }
    else
    {
      v26 = *((_OWORD *)v22 + 1);
      *(_OWORD *)v21 = *(_OWORD *)v22;
      *(_OWORD *)(v21 + 16) = v26;
      *(_QWORD *)(v21 + 32) = v22[4];
    }
    *(_BYTE *)(v21 + 40) = 1;
  }
  else
  {
    v25 = *v22;
    *(_QWORD *)v21 = *v22;
    *(_BYTE *)(v21 + 40) = 0;
    swift_retain(v25);
  }
  v27 = a3[7];
  v28 = *(_OWORD *)(a2 + v27 + 24);
  *(_OWORD *)(a1 + v27 + 24) = v28;
  (**(void (***)(void))(v28 - 8))();
  return a1;
}

uint64_t sub_F077C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int16 v21;
  char v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 *v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int16 v38;
  char v39;

  v5 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = *(_QWORD *)(a2 + 40);
  v12 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a2 + 56);
  v38 = *(_WORD *)(a2 + 64);
  v39 = *(_BYTE *)(a2 + 66);
  sub_3480C(*(_QWORD *)a2, v6, v7, v8, v9, v10, v12, v11, v38, v39);
  v13 = *(_QWORD *)a1;
  v14 = *(_QWORD *)(a1 + 8);
  v15 = *(_QWORD *)(a1 + 16);
  v16 = *(_QWORD *)(a1 + 24);
  v17 = *(_QWORD *)(a1 + 32);
  v18 = *(_QWORD *)(a1 + 40);
  v19 = *(_QWORD *)(a1 + 48);
  v20 = *(_QWORD *)(a1 + 56);
  v21 = *(_WORD *)(a1 + 64);
  v22 = *(_BYTE *)(a1 + 66);
  *(_QWORD *)a1 = v5;
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = v7;
  *(_QWORD *)(a1 + 24) = v8;
  *(_QWORD *)(a1 + 32) = v9;
  *(_QWORD *)(a1 + 40) = v10;
  *(_QWORD *)(a1 + 48) = v12;
  *(_QWORD *)(a1 + 56) = v11;
  *(_WORD *)(a1 + 64) = v38;
  *(_BYTE *)(a1 + 66) = v39;
  sub_BDF8(v13, v14, v15, v16, v17, v18, v19, v20, v21, v22);
  if (a1 != a2)
  {
    v23 = a3[5];
    v24 = (uint64_t *)(a1 + v23);
    v25 = (uint64_t *)(a2 + v23);
    sub_B414(a1 + v23, &qword_25FAE0);
    v26 = sub_5440(&qword_25FAE0);
    if (swift_getEnumCaseMultiPayload(v25, v26) == 1)
    {
      v27 = type metadata accessor for OpaqueMetricsFieldsContext(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v27 - 8) + 16))(v24, v25, v27);
      v28 = 1;
    }
    else
    {
      v29 = *v25;
      *v24 = *v25;
      swift_retain(v29);
      v28 = 0;
    }
    swift_storeEnumTagMultiPayload(v24, v26, v28);
    v30 = a3[6];
    v31 = a1 + v30;
    v32 = (__int128 *)(a2 + v30);
    sub_B414(a1 + v30, &qword_25FAE8);
    if ((*((_BYTE *)v32 + 40) & 1) != 0)
    {
      v33 = *((_QWORD *)v32 + 3);
      if (v33)
      {
        *(_QWORD *)(v31 + 24) = v33;
        *(_QWORD *)(v31 + 32) = *((_QWORD *)v32 + 4);
        (**(void (***)(uint64_t, __int128 *))(v33 - 8))(v31, v32);
      }
      else
      {
        v35 = *v32;
        v36 = v32[1];
        *(_QWORD *)(v31 + 32) = *((_QWORD *)v32 + 4);
        *(_OWORD *)v31 = v35;
        *(_OWORD *)(v31 + 16) = v36;
      }
      *(_BYTE *)(v31 + 40) = 1;
    }
    else
    {
      v34 = *(_QWORD *)v32;
      *(_QWORD *)v31 = *(_QWORD *)v32;
      *(_BYTE *)(v31 + 40) = 0;
      swift_retain(v34);
    }
  }
  sub_142F8((_QWORD *)(a1 + a3[7]), (_QWORD *)(a2 + a3[7]));
  return a1;
}

uint64_t sub_F0974(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  void *v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;

  v6 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v6;
  *(_DWORD *)(a1 + 63) = *(_DWORD *)(a2 + 63);
  v7 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v7;
  v8 = a3[5];
  v9 = (void *)(a1 + v8);
  v10 = (const void *)(a2 + v8);
  v11 = sub_5440(&qword_25FAE0);
  if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
  {
    v12 = type metadata accessor for OpaqueMetricsFieldsContext(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v9, v10, v12);
    swift_storeEnumTagMultiPayload(v9, v11, 1);
  }
  else
  {
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  v13 = a3[6];
  v14 = a3[7];
  v15 = (_OWORD *)(a1 + v13);
  v16 = (_OWORD *)(a2 + v13);
  v17 = v16[1];
  *v15 = *v16;
  v15[1] = v17;
  *(_OWORD *)((char *)v15 + 25) = *(_OWORD *)((char *)v16 + 25);
  v18 = a1 + v14;
  v19 = a2 + v14;
  *(_QWORD *)(v18 + 32) = *(_QWORD *)(v19 + 32);
  v20 = *(_OWORD *)(v19 + 16);
  *(_OWORD *)v18 = *(_OWORD *)v19;
  *(_OWORD *)(v18 + 16) = v20;
  return a1;
}

uint64_t sub_F0A70(uint64_t a1, uint64_t a2, int *a3)
{
  __int16 v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int16 v16;
  char v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  void *v21;
  const void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _OWORD *v26;
  _OWORD *v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;

  v6 = *(_WORD *)(a2 + 64);
  v7 = *(_BYTE *)(a2 + 66);
  v8 = *(_QWORD *)a1;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_QWORD *)(a1 + 24);
  v12 = *(_QWORD *)(a1 + 32);
  v13 = *(_QWORD *)(a1 + 40);
  v14 = *(_QWORD *)(a1 + 48);
  v15 = *(_QWORD *)(a1 + 56);
  v16 = *(_WORD *)(a1 + 64);
  v17 = *(_BYTE *)(a1 + 66);
  v18 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v18;
  v19 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v19;
  *(_WORD *)(a1 + 64) = v6;
  *(_BYTE *)(a1 + 66) = v7;
  sub_BDF8(v8, v9, v10, v11, v12, v13, v14, v15, v16, v17);
  if (a1 != a2)
  {
    v20 = a3[5];
    v21 = (void *)(a1 + v20);
    v22 = (const void *)(a2 + v20);
    sub_B414(a1 + v20, &qword_25FAE0);
    v23 = sub_5440(&qword_25FAE0);
    if (swift_getEnumCaseMultiPayload(v22, v23) == 1)
    {
      v24 = type metadata accessor for OpaqueMetricsFieldsContext(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v24 - 8) + 32))(v21, v22, v24);
      swift_storeEnumTagMultiPayload(v21, v23, 1);
    }
    else
    {
      memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    }
    v25 = a3[6];
    v26 = (_OWORD *)(a2 + v25);
    v27 = (_OWORD *)(a1 + v25);
    sub_B414(a1 + v25, &qword_25FAE8);
    v28 = v26[1];
    *v27 = *v26;
    v27[1] = v28;
    *(_OWORD *)((char *)v27 + 25) = *(_OWORD *)((char *)v26 + 25);
  }
  v29 = a3[7];
  v30 = a1 + v29;
  v31 = a2 + v29;
  _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)(a1 + v29));
  v32 = *(_OWORD *)(v31 + 16);
  *(_OWORD *)v30 = *(_OWORD *)v31;
  *(_OWORD *)(v30 + 16) = v32;
  *(_QWORD *)(v30 + 32) = *(_QWORD *)(v31 + 32);
  return a1;
}

uint64_t sub_F0BD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_F0BE4);
}

uint64_t sub_F0BE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = sub_5440(&qword_264F30);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 20), a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 28) + 24);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_F0C6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_F0C78);
}

uint64_t sub_F0C78(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_5440(&qword_264F30);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + *(int *)(a4 + 20), a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 28) + 24) = (a2 - 1);
  return result;
}

void sub_F0CFC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = "C";
  sub_F0D84(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(v2 - 8) + 64;
    v4[2] = ")";
    v4[3] = L"(";
    swift_initStructMetadata(a1, 256, 4, v4, a1 + 16);
  }
}

void sub_F0D84(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_2617F8)
  {
    v2 = type metadata accessor for OpaqueMetricsFieldsContext(255);
    v3 = type metadata accessor for Environment.Content(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_2617F8);
  }
}

uint64_t sub_F0DD8(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_22D7C4, 1);
}

uint64_t sub_F0DE8()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v1 = (int *)type metadata accessor for RefreshOnAssetCompletionChangeViewModifier(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v0 + v4;
  sub_BDF8(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8), *(_QWORD *)(v0 + v4 + 16), *(_QWORD *)(v0 + v4 + 24), *(_QWORD *)(v0 + v4 + 32), *(_QWORD *)(v0 + v4 + 40), *(_QWORD *)(v0 + v4 + 48), *(_QWORD *)(v0 + v4 + 56), *(_WORD *)(v0 + v4 + 64), *(_BYTE *)(v0 + v4 + 66));
  v7 = (_QWORD *)(v0 + v4 + v1[5]);
  v8 = sub_5440(&qword_25FAE0);
  if (swift_getEnumCaseMultiPayload(v7, v8) == 1)
  {
    v9 = type metadata accessor for OpaqueMetricsFieldsContext(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v7, v9);
  }
  else
  {
    swift_release(*v7);
  }
  v10 = (_QWORD *)(v6 + v1[6]);
  if ((v10[5] & 1) != 0)
  {
    if (v10[3])
      _s7BooksUI13AnyPagedFrameVwxx_0(v10);
  }
  else
  {
    swift_release(*v10);
  }
  _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)(v6 + v1[7]));
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_F0F00(_BYTE *a1, _BYTE *a2)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for RefreshOnAssetCompletionChangeViewModifier(0) - 8)
                          + 80);
  return sub_EC778(a1, a2, v2 + ((v5 + 16) & ~v5));
}

unint64_t sub_F0F4C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_264FF0;
  if (!qword_264FF0)
  {
    v1 = sub_7EF8(&qword_264FE0);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_264FF0);
  }
  return result;
}

unint64_t sub_F0FA8()
{
  unint64_t result;

  result = qword_265008;
  if (!qword_265008)
  {
    result = swift_getWitnessTable(&unk_1F16F8, &type metadata for LibraryAssetStateObserverProviderKey);
    atomic_store(result, (unint64_t *)&qword_265008);
  }
  return result;
}

uint64_t sub_F0FEC()
{
  _QWORD v1[4];

  v1[0] = sub_7EF8(&qword_264FD8);
  v1[1] = sub_7EF8(&qword_264FE0);
  v1[2] = sub_7FD8(&qword_264FE8, &qword_264FD8, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
  v1[3] = sub_F0F4C();
  return swift_getOpaqueTypeConformance2(v1, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
}

uint64_t static AssetAction.Kind.removeFromWantToRead(presentNotice:useNonSpecificDeterminerInMessage:)@<X0>(char a1@<W0>, char a2@<W1>, uint64_t a3@<X8>)
{
  return sub_F1098(a1, a2, 5, a3);
}

uint64_t type metadata accessor for AssetAction.Kind(uint64_t a1)
{
  return sub_1FE90(a1, qword_265160, (uint64_t)&nominal type descriptor for AssetAction.Kind);
}

uint64_t static AssetAction.Kind.addToWantToRead(presentNotice:useNonSpecificDeterminerInMessage:)@<X0>(char a1@<W0>, char a2@<W1>, uint64_t a3@<X8>)
{
  return sub_F1098(a1, a2, 0, a3);
}

uint64_t sub_F1098@<X0>(char a1@<W0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;

  *(_QWORD *)a4 = 0xD00000000000001ALL;
  *(_QWORD *)(a4 + 8) = 0x80000000001FB080;
  *(_BYTE *)(a4 + 16) = a1;
  *(_BYTE *)(a4 + 17) = a2;
  v6 = type metadata accessor for AssetAction.Kind(0);
  return swift_storeEnumTagMultiPayload(a4, v6, a3);
}

void AssetAction.Kind.appAnalyticsClickTargetType.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t (*v5)(_QWORD);
  char *v6;
  uint64_t v7;

  v1 = v0;
  v2 = type metadata accessor for AssetAction.Kind(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1E428(v1, (uint64_t)v4, v5);
  v6 = (char *)sub_F117C + 4 * byte_1EB4C0[swift_getEnumCaseMultiPayload(v4, v2)];
  __asm { BR              X10 }
}

uint64_t sub_F117C()
{
  uint64_t v0;
  id *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = enum case for ClickData.TargetType.navigate(_:);
  v3 = ((uint64_t (*)(_QWORD))type metadata accessor for ClickData.TargetType)(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(v0, v2, v3);
}

uint64_t AssetAction.init(id:assetID:instanceID:isExplicit:actionMetrics:kind:clickData:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, int a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t, uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  LODWORD(v46) = a7;
  v44 = a5;
  v45 = a6;
  v47 = a11;
  v43 = type metadata accessor for LinkActionType(0);
  v41 = *(_QWORD *)(v43 - 8);
  __chkstk_darwin(v43);
  v42 = (char *)&v40 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for ClickData.TargetType(0);
  __chkstk_darwin(v18);
  v40 = (char *)&v40 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for AssetAction.Kind(0);
  __chkstk_darwin(v20);
  v22 = (char *)&v40 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = sub_5440(&qword_25E828);
  v24 = __chkstk_darwin(v23);
  v26 = (char *)&v40 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  v28 = (char *)&v40 - v27;
  *(_QWORD *)a9 = a1;
  *(_QWORD *)(a9 + 8) = a2;
  *(_QWORD *)(a9 + 16) = a3;
  *(_QWORD *)(a9 + 24) = a4;
  v29 = v45;
  *(_QWORD *)(a9 + 32) = v44;
  *(_QWORD *)(a9 + 40) = v29;
  *(_BYTE *)(a9 + 48) = v46;
  v30 = type metadata accessor for AssetAction(0);
  v31 = a9 + *(int *)(v30 + 32);
  v32 = type metadata accessor for ActionMetrics(0);
  v33 = *(_QWORD *)(v32 - 8);
  v34 = *(void (**)(uint64_t, uint64_t, uint64_t))(v33 + 16);
  v46 = a8;
  v34(v31, a8, v32);
  v44 = v30;
  sub_1E428(a10, a9 + *(int *)(v30 + 40), type metadata accessor for AssetAction.Kind);
  sub_C7F0C(v47, (uint64_t)v26);
  v45 = a10;
  sub_1E428(a10, (uint64_t)v22, type metadata accessor for AssetAction.Kind);
  v35 = type metadata accessor for ClickData(0);
  v36 = *(_QWORD *)(v35 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48))(v26, 1, v35) == 1)
  {
    v37 = v40;
    AssetAction.Kind.appAnalyticsClickTargetType.getter();
    v38 = v42;
    (*(void (**)(char *, _QWORD, uint64_t))(v41 + 104))(v42, enum case for LinkActionType.click(_:), v43);
    ClickData.init(with:linkActionType:index:url:)(v37, v38, 0, 0, 0);
    sub_B414(v47, &qword_25E828);
    sub_224DC(v45, type metadata accessor for AssetAction.Kind);
    (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v46, v32);
    sub_224DC((uint64_t)v22, type metadata accessor for AssetAction.Kind);
    sub_B414((uint64_t)v26, &qword_25E828);
  }
  else
  {
    sub_B414(v47, &qword_25E828);
    sub_224DC(v45, type metadata accessor for AssetAction.Kind);
    (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v46, v32);
    sub_224DC((uint64_t)v22, type metadata accessor for AssetAction.Kind);
    (*(void (**)(char *, char *, uint64_t))(v36 + 32))(v28, v26, v35);
  }
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v36 + 56))(v28, 0, 1, v35);
  return sub_C7EC4((uint64_t)v28, a9 + *(int *)(v44 + 36));
}

uint64_t type metadata accessor for AssetAction(uint64_t a1)
{
  return sub_1FE90(a1, (uint64_t *)&unk_265098, (uint64_t)&nominal type descriptor for AssetAction);
}

void AssetAction.Kind.figaroActionType.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t (*v5)(_QWORD);
  char *v6;
  uint64_t v7;

  v1 = v0;
  v2 = type metadata accessor for AssetAction.Kind(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1E428(v1, (uint64_t)v4, v5);
  v6 = (char *)sub_F1764 + 4 * byte_1EB4CD[swift_getEnumCaseMultiPayload(v4, v2)];
  __asm { BR              X11 }
}

uint64_t sub_F1764()
{
  _BYTE *v0;
  uint64_t v1;
  uint64_t result;

  result = sub_224DC(v1, type metadata accessor for AssetAction.Kind);
  *v0 = 0;
  return result;
}

uint64_t LibraryAssetState.isInSamples.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 48);
}

uint64_t AssetAction.actionMetrics.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for AssetAction(0) + 32);
  v4 = type metadata accessor for ActionMetrics(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t AssetAction.clickData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for AssetAction(0) + 36);
  return sub_C7F0C(v3, a1);
}

uint64_t AssetAction.kind.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for AssetAction(0);
  return sub_1E428(v1 + *(int *)(v3 + 40), a1, type metadata accessor for AssetAction.Kind);
}

uint64_t sub_F1924()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_F1948 + 4 * byte_1EB4DA[*v0]))(25705, 0xE200000000000000);
}

uint64_t sub_F1948()
{
  return 0x44497465737361;
}

uint64_t sub_F1960()
{
  return 0x65636E6174736E69;
}

uint64_t sub_F197C()
{
  return 0x63696C7078457369;
}

uint64_t sub_F1998()
{
  return 0x654D6E6F69746361;
}

uint64_t sub_F19BC()
{
  return 0x7461446B63696C63;
}

uint64_t sub_F19D8()
{
  return 1684957547;
}

uint64_t sub_F19E8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_F4EA8(a1, a2);
  *a3 = result;
  return result;
}

void sub_F1A0C(_BYTE *a1@<X8>)
{
  *a1 = 7;
}

uint64_t sub_F1A18(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_F2BC4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_F1A40(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_F2BC4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t AssetAction.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v36;
  _QWORD *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  char v48;
  char v49;
  char v50;
  char v51;
  char v52;
  char v53;
  char v54;

  v39 = a2;
  v40 = type metadata accessor for AssetAction.Kind(0);
  __chkstk_darwin(v40);
  v41 = (uint64_t *)((char *)&v36 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v4 = sub_5440(&qword_25E828);
  __chkstk_darwin(v4);
  v42 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for ActionMetrics(0);
  v43 = *(_QWORD *)(v6 - 8);
  v44 = v6;
  __chkstk_darwin(v6);
  v8 = (uint64_t *)((char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v45 = sub_5440(&qword_265010);
  v9 = *(_QWORD *)(v45 - 8);
  __chkstk_darwin(v45);
  v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (int *)type metadata accessor for AssetAction(0);
  __chkstk_darwin(v12);
  v14 = (uint64_t *)((char *)&v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15 = a1[3];
  v16 = a1[4];
  v46 = a1;
  sub_5480(a1, v15);
  v17 = sub_F2BC4();
  v18 = v47;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for AssetAction.CodingKeys, &type metadata for AssetAction.CodingKeys, v17, v15, v16);
  if (v18)
    return _s7BooksUI13AnyPagedFrameVwxx_0(v46);
  v37 = v8;
  v38 = v14;
  v47 = v9;
  v19 = v44;
  v20 = v45;
  v54 = 0;
  v21 = v11;
  v22 = KeyedDecodingContainer.decode(_:forKey:)(&v54, v45);
  v23 = (uint64_t)v38;
  *v38 = v22;
  *(_QWORD *)(v23 + 8) = v24;
  v53 = 1;
  *(_QWORD *)(v23 + 16) = KeyedDecodingContainer.decode(_:forKey:)(&v53, v20);
  *(_QWORD *)(v23 + 24) = v25;
  v52 = 2;
  *(_QWORD *)(v23 + 32) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v52, v20);
  *(_QWORD *)(v23 + 40) = v26;
  v51 = 3;
  *(_BYTE *)(v23 + 48) = KeyedDecodingContainer.decode(_:forKey:)(&v51, v20) & 1;
  v50 = 4;
  v27 = sub_6FD0(&qword_2634C0, (uint64_t (*)(uint64_t))&type metadata accessor for ActionMetrics, (uint64_t)&protocol conformance descriptor for ActionMetrics);
  v28 = v37;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v37, v19, &v50, v20, v19, v27);
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(v43 + 32))(v23 + v12[8], v28, v19);
  v29 = type metadata accessor for ClickData(0);
  v49 = 5;
  v30 = sub_6FD0(&qword_265020, (uint64_t (*)(uint64_t))&type metadata accessor for ClickData, (uint64_t)&protocol conformance descriptor for ClickData);
  v31 = (uint64_t)v42;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v29, &v49, v20, v29, v30);
  v32 = v47;
  sub_C7EC4(v31, v23 + v12[9]);
  v48 = 6;
  v33 = sub_6FD0(&qword_265028, type metadata accessor for AssetAction.Kind, (uint64_t)&protocol conformance descriptor for AssetAction.Kind);
  v34 = v41;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v41, v40, &v48, v20, v40, v33);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v21, v20);
  sub_F2C08((uint64_t)v34, v23 + v12[10]);
  sub_1E428(v23, v39, type metadata accessor for AssetAction);
  _s7BooksUI13AnyPagedFrameVwxx_0(v46);
  return sub_224DC(v23, type metadata accessor for AssetAction);
}

uint64_t sub_F1F94@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_C7F0C(v2 + *(int *)(a1 + 36), a2);
}

uint64_t sub_F1FA4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return AssetAction.init(from:)(a1, a2);
}

uint64_t sub_F1FB8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 32);
  v5 = type metadata accessor for ActionMetrics(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

Swift::Int sub_F1FF8()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1, 0);
  String.hash(into:)(v1, 1684957547, 0xE400000000000000);
  return Hasher._finalize()();
}

uint64_t sub_F2040(uint64_t a1)
{
  return String.hash(into:)(a1, 1684957547, 0xE400000000000000);
}

Swift::Int sub_F2050(uint64_t a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, a1);
  String.hash(into:)(v2, 1684957547, 0xE400000000000000);
  return Hasher._finalize()();
}

uint64_t sub_F2094@<X0>(uint64_t *a1@<X0>, BOOL *a2@<X8>)
{
  Swift::String v3;
  void *v4;
  Swift::Int v5;
  uint64_t result;

  v3._countAndFlagsBits = *a1;
  v4 = (void *)a1[1];
  v3._object = v4;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_249F10, v3);
  result = swift_bridgeObjectRelease(v4);
  *a2 = v5 != 0;
  return result;
}

void sub_F20E4(_QWORD *a1@<X8>)
{
  *a1 = 1684957547;
  a1[1] = 0xE400000000000000;
}

uint64_t sub_F20F8()
{
  return 1684957547;
}

uint64_t sub_F2108@<X0>(Swift::String string@<0:X0, 8:X1>, BOOL *a2@<X8>)
{
  void *object;
  Swift::String v3;
  Swift::Int v5;
  uint64_t result;

  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_249F48, v3);
  result = swift_bridgeObjectRelease(object);
  *a2 = v5 != 0;
  return result;
}

uint64_t sub_F215C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_F2C4C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_F2184(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_F2C4C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t AssetAction.Kind.init(from:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  v3 = sub_5440(&qword_265030);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  sub_5480(a1, v7);
  v9 = sub_F2C4C();
  v10 = dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for AssetAction.Kind.CodingKeys, &type metadata for AssetAction.Kind.CodingKeys, v9, v7, v8);
  if (!v1)
  {
    KeyedDecodingContainer.decode(_:forKey:)(v10, v3);
    swift_bridgeObjectRelease(v11);
    v12 = type metadata accessor for DecodingError(0);
    swift_allocError(v12, &protocol witness table for DecodingError, 0, 0);
    v14 = v13;
    v15 = KeyedDecodingContainer.codingPath.getter(v3);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)(v15, 0x7070757320746F4ELL, 0xED0000646574726FLL, 0);
    v16 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v12 - 8) + 104))(v14, enum case for DecodingError.dataCorrupted(_:), v12);
    swift_willThrow(v16);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
  return _s7BooksUI13AnyPagedFrameVwxx_0(a1);
}

uint64_t sub_F232C(_QWORD *a1)
{
  return AssetAction.Kind.init(from:)(a1);
}

uint64_t static AssetAction.Kind.markAsFinished.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  *(_QWORD *)a1 = 0xD000000000000016;
  *(_QWORD *)(a1 + 8) = 0x80000000001FC6F0;
  *(_WORD *)(a1 + 16) = 0;
  v2 = type metadata accessor for AssetAction.Kind(0);
  return swift_storeEnumTagMultiPayload(a1, v2, 0);
}

uint64_t _s7BooksUI11AssetActionV4KindO2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  void **v15;
  uint64_t v16;
  uint64_t v17;
  void **v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  void **v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  void **v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void **v33;
  uint64_t v34;
  char *v35;
  void *v36;
  uint64_t v37;
  int v38;
  char v39;
  void **v40;
  void *v41;
  void **v42;
  void *v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  void *v52;
  void **v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  id v58;
  void *v59;
  int v60;
  void *v61;
  void **v62;
  uint64_t EnumCaseMultiPayload;
  int v64;
  void *v65;
  char v67;
  uint64_t v68;
  void *v69;
  int v70;
  char v71;
  char v73;
  void **v74;
  uint64_t v75;
  uint64_t v76;
  void (*v77)(char *, char *, uint64_t);
  char *v78;
  char *v79;
  void (*v80)(char *, uint64_t);
  uint64_t v81;
  uint64_t v82;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v93;
  uint64_t v95;
  char *v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  void **v101;
  char *v102;

  v102 = (char *)a2;
  v3 = type metadata accessor for URL(0);
  v98 = *(_QWORD *)(v3 - 8);
  v99 = v3;
  v4 = __chkstk_darwin(v3);
  v97 = (char *)&v95 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v96 = (char *)&v95 - v6;
  v7 = type metadata accessor for AssetAction.Kind(0);
  v8 = __chkstk_darwin(v7);
  v100 = (uint64_t)&v95 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v95 - v11;
  v13 = __chkstk_darwin(v10);
  v15 = (void **)((char *)&v95 - v14);
  v16 = __chkstk_darwin(v13);
  v18 = (void **)((char *)&v95 - v17);
  v19 = __chkstk_darwin(v16);
  v21 = (char *)&v95 - v20;
  v22 = __chkstk_darwin(v19);
  v24 = (void **)((char *)&v95 - v23);
  v25 = __chkstk_darwin(v22);
  v27 = (char *)&v95 - v26;
  __chkstk_darwin(v25);
  v29 = (void **)((char *)&v95 - v28);
  v30 = sub_5440(&qword_2651C8);
  v31 = __chkstk_darwin(v30);
  v33 = (void **)((char *)&v95 + *(int *)(v31 + 48) - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0));
  v34 = a1;
  v35 = (char *)&v95 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1E428(v34, (uint64_t)v35, type metadata accessor for AssetAction.Kind);
  v101 = v33;
  sub_1E428((uint64_t)v102, (uint64_t)v33, type metadata accessor for AssetAction.Kind);
  v102 = v35;
  switch(swift_getEnumCaseMultiPayload(v35, v7))
  {
    case 0u:
      sub_1E428((uint64_t)v102, (uint64_t)v12, type metadata accessor for AssetAction.Kind);
      v37 = *(_QWORD *)v12;
      v36 = (void *)*((_QWORD *)v12 + 1);
      v38 = v12[16];
      v39 = v12[17];
      v40 = v101;
      if (swift_getEnumCaseMultiPayload(v101, v7))
        goto LABEL_43;
      goto LABEL_27;
    case 1u:
      sub_1E428((uint64_t)v102, (uint64_t)v29, type metadata accessor for AssetAction.Kind);
      v41 = *v29;
      v42 = v101;
      if (swift_getEnumCaseMultiPayload(v101, v7) == 1)
        goto LABEL_5;
      goto LABEL_25;
    case 2u:
      sub_1E428((uint64_t)v102, (uint64_t)v18, type metadata accessor for AssetAction.Kind);
      v52 = *v18;
      v53 = v101;
      if (swift_getEnumCaseMultiPayload(v101, v7) == 2)
        goto LABEL_11;
      goto LABEL_37;
    case 3u:
      sub_1E428((uint64_t)v102, (uint64_t)v21, type metadata accessor for AssetAction.Kind);
      v59 = *(void **)v21;
      v36 = (void *)*((_QWORD *)v21 + 1);
      v60 = v21[16];
      v61 = (void *)*((_QWORD *)v21 + 3);
      v62 = v101;
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v101, v7);
      if ((_DWORD)EnumCaseMultiPayload == 3)
      {
        v37 = (uint64_t)v62[1];
        v64 = *((unsigned __int8 *)v62 + 16);
        v65 = v62[3];
        if (v36)
        {
          if (!v37)
          {
            swift_bridgeObjectRelease(v36);

            goto LABEL_94;
          }
          if (v59 == *v62 && v36 == (void *)v37)
          {
            swift_bridgeObjectRelease(v36);
            EnumCaseMultiPayload = swift_bridgeObjectRelease(v37);
          }
          else
          {
            v67 = _stringCompareWithSmolCheck(_:_:expecting:)(v59, v36, *v62, v62[1], 0);
            swift_bridgeObjectRelease(v36);
            EnumCaseMultiPayload = swift_bridgeObjectRelease(v37);
            if ((v67 & 1) == 0)
              goto LABEL_72;
          }
        }
        else if (v37)
        {
          swift_bridgeObjectRelease(v62[1]);
LABEL_72:

          LOBYTE(v37) = 0;
          goto LABEL_94;
        }
        if (v60 != v64)
          goto LABEL_72;
        if (v61)
        {
          v85 = MResource.id.getter(EnumCaseMultiPayload);
          v87 = v86;
          if (v65)
          {
            v88 = v85;
            v89 = MResource.id.getter(v85);
            v91 = v90;
            if (v87)
            {
              if (v90)
              {
                if (v88 == v89 && v87 == v90)
                  LOBYTE(v37) = 1;
                else
                  LOBYTE(v37) = _stringCompareWithSmolCheck(_:_:expecting:)(v88, v87, v89, v90, 0);
                swift_bridgeObjectRelease(v87);
                swift_bridgeObjectRelease(v91);

                goto LABEL_94;
              }
LABEL_89:
              swift_bridgeObjectRelease(v87);

              LOBYTE(v37) = 0;
              goto LABEL_94;
            }
LABEL_84:

            if (v91)
            {
              v84 = v91;
              goto LABEL_59;
            }
LABEL_86:
            LOBYTE(v37) = 1;
            goto LABEL_94;
          }
          if (v86)
          {
            v65 = 0;
            goto LABEL_89;
          }
        }
        else
        {
          if (v65)
          {
            MResource.id.getter(EnumCaseMultiPayload);
            v91 = v93;
            v61 = 0;
            goto LABEL_84;
          }
          v61 = 0;
        }

        goto LABEL_66;
      }

LABEL_43:
      swift_bridgeObjectRelease(v36);
LABEL_45:
      sub_B414((uint64_t)v102, &qword_2651C8);
      LOBYTE(v37) = 0;
      return v37 & 1;
    case 4u:
      sub_1E428((uint64_t)v102, (uint64_t)v24, type metadata accessor for AssetAction.Kind);
      v41 = *v24;
      v42 = v101;
      if (swift_getEnumCaseMultiPayload(v101, v7) != 4)
      {
LABEL_25:

        goto LABEL_45;
      }
LABEL_5:
      v43 = *v42;
      v44 = v41;
      v45 = MResource.id.getter(v44);
      v47 = v46;

      v48 = v43;
      v37 = MResource.id.getter(v48);
      v50 = v49;

      if (v45 == v37 && v47 == v50)
        LOBYTE(v37) = 1;
      else
        LOBYTE(v37) = _stringCompareWithSmolCheck(_:_:expecting:)(v45, v47, v37, v50, 0);

      swift_bridgeObjectRelease(v47);
      swift_bridgeObjectRelease(v50);
      goto LABEL_94;
    case 5u:
      v68 = v100;
      sub_1E428((uint64_t)v102, v100, type metadata accessor for AssetAction.Kind);
      v37 = *(_QWORD *)v68;
      v36 = *(void **)(v68 + 8);
      v38 = *(unsigned __int8 *)(v68 + 16);
      v39 = *(_BYTE *)(v68 + 17);
      v40 = v101;
      if (swift_getEnumCaseMultiPayload(v101, v7) != 5)
        goto LABEL_43;
LABEL_27:
      v69 = v40[1];
      v70 = *((unsigned __int8 *)v40 + 16);
      v71 = *((_BYTE *)v40 + 17);
      if ((void *)v37 == *v40 && v36 == v69)
      {
        swift_bridgeObjectRelease_n(v36, 2);
        if (v38 != v70)
        {
          LOBYTE(v37) = 0;
          goto LABEL_94;
        }
      }
      else
      {
        v73 = _stringCompareWithSmolCheck(_:_:expecting:)(v37, v36, *v40, v40[1], 0);
        swift_bridgeObjectRelease(v36);
        swift_bridgeObjectRelease(v69);
        LOBYTE(v37) = 0;
        if ((v73 & 1) == 0 || ((v38 ^ v70) & 1) != 0)
          goto LABEL_94;
      }
      LOBYTE(v37) = v39 ^ v71 ^ 1;
      goto LABEL_94;
    case 6u:
      sub_1E428((uint64_t)v102, (uint64_t)v27, type metadata accessor for AssetAction.Kind);
      v74 = v101;
      if (swift_getEnumCaseMultiPayload(v101, v7) == 6)
      {
        v76 = v98;
        v75 = v99;
        v77 = *(void (**)(char *, char *, uint64_t))(v98 + 32);
        v78 = v96;
        v77(v96, v27, v99);
        v79 = v97;
        v77(v97, (char *)v74, v75);
        LOBYTE(v37) = static URL.== infix(_:_:)(v78, v79);
        v80 = *(void (**)(char *, uint64_t))(v76 + 8);
        v80(v79, v75);
        v80(v78, v75);
        goto LABEL_94;
      }
      (*(void (**)(char *, uint64_t))(v98 + 8))(v27, v99);
      goto LABEL_45;
    case 7u:
      sub_1E428((uint64_t)v102, (uint64_t)v15, type metadata accessor for AssetAction.Kind);
      v52 = *v15;
      v53 = v101;
      if (swift_getEnumCaseMultiPayload(v101, v7) != 7)
      {
LABEL_37:

        goto LABEL_45;
      }
LABEL_11:
      v54 = *v53;
      if (v52)
      {
        v37 = v52;
        v55 = MResource.id.getter(v37);
        v57 = v56;

        if (!v54)
        {
          if (v57)
          {
            v58 = 0;
            goto LABEL_63;
          }
LABEL_65:

LABEL_66:
          LOBYTE(v37) = 1;
LABEL_94:
          sub_224DC((uint64_t)v102, type metadata accessor for AssetAction.Kind);
          return v37 & 1;
        }
      }
      else
      {
        v57 = 0;
        v55 = 0;
        if (!v54)
        {
          v37 = 0;
          goto LABEL_65;
        }
      }
      v58 = v54;
      v37 = MResource.id.getter(v58);
      v82 = v81;

      if (!v57)
      {

        if (!v82)
          goto LABEL_86;
        v84 = v82;
LABEL_59:
        swift_bridgeObjectRelease(v84);
        LOBYTE(v37) = 0;
        goto LABEL_94;
      }
      if (v82)
      {
        if (v55 == v37 && v57 == v82)
          LOBYTE(v37) = 1;
        else
          LOBYTE(v37) = _stringCompareWithSmolCheck(_:_:expecting:)(v55, v57, v37, v82, 0);
        swift_bridgeObjectRelease(v57);
        swift_bridgeObjectRelease(v82);

        goto LABEL_94;
      }
      v37 = (uint64_t)v52;
LABEL_63:
      swift_bridgeObjectRelease(v57);

      LOBYTE(v37) = 0;
      goto LABEL_94;
    case 0xBu:
      if (swift_getEnumCaseMultiPayload(v101, v7) != 11)
        goto LABEL_45;
      sub_224DC((uint64_t)v102, type metadata accessor for AssetAction.Kind);
      LOBYTE(v37) = 1;
      return v37 & 1;
    default:
      goto LABEL_45;
  }
}

unint64_t sub_F2BC4()
{
  unint64_t result;

  result = qword_265018;
  if (!qword_265018)
  {
    result = swift_getWitnessTable(&unk_1EB958, &type metadata for AssetAction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_265018);
  }
  return result;
}

uint64_t sub_F2C08(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AssetAction.Kind(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_F2C4C()
{
  unint64_t result;

  result = qword_265038;
  if (!qword_265038)
  {
    result = swift_getWitnessTable(&unk_1EB908, &type metadata for AssetAction.Kind.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_265038);
  }
  return result;
}

uint64_t sub_F2C90(uint64_t a1)
{
  uint64_t result;

  result = sub_6FD0(&qword_261738, type metadata accessor for AssetAction, (uint64_t)&protocol conformance descriptor for AssetAction);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for AssetAction(uint64_t a1, uint64_t *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  id v30;
  void *v31;
  id v32;
  uint64_t v33;
  void *v34;
  id v35;
  void *v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v22 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v22 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v22);
  }
  else
  {
    v7 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v7;
    v8 = a2[3];
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_QWORD *)(a1 + 24) = v8;
    v9 = a2[4];
    v10 = a2[5];
    *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
    v11 = a3[8];
    v12 = a1 + v11;
    v13 = (uint64_t)a2 + v11;
    *(_QWORD *)(a1 + 32) = v9;
    *(_QWORD *)(a1 + 40) = v10;
    v14 = type metadata accessor for ActionMetrics(0);
    v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v10);
    v15(v12, v13, v14);
    v16 = a3[9];
    v17 = (char *)v4 + v16;
    v18 = (char *)a2 + v16;
    v19 = type metadata accessor for ClickData(0);
    v20 = *(_QWORD *)(v19 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
    {
      v21 = sub_5440(&qword_25E828);
      memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v17, v18, v19);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
    }
    v24 = a3[10];
    v25 = (_QWORD *)((char *)v4 + v24);
    v26 = (uint64_t *)((char *)a2 + v24);
    v27 = type metadata accessor for AssetAction.Kind(0);
    switch(swift_getEnumCaseMultiPayload(v26, v27))
    {
      case 0u:
        v28 = v26[1];
        *v25 = *v26;
        v25[1] = v28;
        *((_WORD *)v25 + 8) = *((_WORD *)v26 + 8);
        swift_bridgeObjectRetain(v28);
        swift_storeEnumTagMultiPayload(v25, v27, 0);
        break;
      case 1u:
        v29 = (void *)*v26;
        *v25 = *v26;
        v30 = v29;
        swift_storeEnumTagMultiPayload(v25, v27, 1);
        break;
      case 2u:
        v31 = (void *)*v26;
        *v25 = *v26;
        v32 = v31;
        swift_storeEnumTagMultiPayload(v25, v27, 2);
        break;
      case 3u:
        v33 = v26[1];
        *v25 = *v26;
        v25[1] = v33;
        *((_BYTE *)v25 + 16) = *((_BYTE *)v26 + 16);
        v34 = (void *)v26[3];
        v25[3] = v34;
        swift_bridgeObjectRetain(v33);
        v35 = v34;
        swift_storeEnumTagMultiPayload(v25, v27, 3);
        break;
      case 4u:
        v36 = (void *)*v26;
        *v25 = *v26;
        v37 = v36;
        swift_storeEnumTagMultiPayload(v25, v27, 4);
        break;
      case 5u:
        v38 = v26[1];
        *v25 = *v26;
        v25[1] = v38;
        *((_WORD *)v25 + 8) = *((_WORD *)v26 + 8);
        swift_bridgeObjectRetain(v38);
        swift_storeEnumTagMultiPayload(v25, v27, 5);
        break;
      case 6u:
        v39 = type metadata accessor for URL(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v39 - 8) + 16))(v25, v26, v39);
        swift_storeEnumTagMultiPayload(v25, v27, 6);
        break;
      case 7u:
        v40 = (void *)*v26;
        *v25 = *v26;
        v41 = v40;
        swift_storeEnumTagMultiPayload(v25, v27, 7);
        break;
      case 9u:
        v42 = type metadata accessor for Date(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v42 - 8) + 16))(v25, v26, v42);
        v43 = sub_5440(&qword_2643D0);
        *((_BYTE *)v25 + *(int *)(v43 + 48)) = *((_BYTE *)v26 + *(int *)(v43 + 48));
        swift_storeEnumTagMultiPayload(v25, v27, 9);
        break;
      case 0xAu:
        v44 = type metadata accessor for Date(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v44 - 8) + 16))(v25, v26, v44);
        v45 = sub_5440(&qword_2643D8);
        *((_BYTE *)v25 + *(int *)(v45 + 48)) = *((_BYTE *)v26 + *(int *)(v45 + 48));
        swift_storeEnumTagMultiPayload(v25, v27, 10);
        break;
      default:
        memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
        break;
    }
  }
  return v4;
}

void destroy for AssetAction(_QWORD *a1, int *a2)
{
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;

  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[5]);
  v4 = (char *)a1 + a2[8];
  v5 = type metadata accessor for ActionMetrics(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v6 = (char *)a1 + a2[9];
  v7 = type metadata accessor for ClickData(0);
  v8 = *(_QWORD *)(v7 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
    (*(void (**)(char *, uint64_t))(v8 + 8))(v6, v7);
  v9 = (char *)a1 + a2[10];
  v10 = type metadata accessor for AssetAction.Kind(0);
  switch(swift_getEnumCaseMultiPayload(v9, v10))
  {
    case 0u:
    case 5u:
      swift_bridgeObjectRelease(*((_QWORD *)v9 + 1));
      return;
    case 1u:
    case 2u:
    case 4u:
    case 7u:
      v11 = *(void **)v9;
      goto LABEL_8;
    case 3u:
      swift_bridgeObjectRelease(*((_QWORD *)v9 + 1));
      v11 = (void *)*((_QWORD *)v9 + 3);
LABEL_8:

      return;
    case 6u:
      v12 = type metadata accessor for URL(0);
      goto LABEL_10;
    case 9u:
    case 0xAu:
      v12 = type metadata accessor for Date(0);
LABEL_10:
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v9, v12);
      break;
    default:
      return;
  }
}

uint64_t initializeWithCopy for AssetAction(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  void *v16;
  const void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  id v30;
  void *v31;
  id v32;
  uint64_t v33;
  void *v34;
  id v35;
  void *v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v7;
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v10 = a3[8];
  v11 = a1 + v10;
  v12 = a2 + v10;
  *(_QWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 40) = v9;
  v13 = type metadata accessor for ActionMetrics(0);
  v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v9);
  v14(v11, v12, v13);
  v15 = a3[9];
  v16 = (void *)(a1 + v15);
  v17 = (const void *)(a2 + v15);
  v18 = type metadata accessor for ClickData(0);
  v19 = *(_QWORD *)(v18 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
  {
    v20 = sub_5440(&qword_25E828);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v19 + 16))(v16, v17, v18);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
  }
  v21 = a3[10];
  v22 = (_QWORD *)(a1 + v21);
  v23 = (_QWORD *)(a2 + v21);
  v24 = type metadata accessor for AssetAction.Kind(0);
  switch(swift_getEnumCaseMultiPayload(v23, v24))
  {
    case 0u:
      v25 = v23[1];
      *v22 = *v23;
      v22[1] = v25;
      *((_WORD *)v22 + 8) = *((_WORD *)v23 + 8);
      swift_bridgeObjectRetain(v25);
      v26 = v22;
      v27 = v24;
      v28 = 0;
      goto LABEL_16;
    case 1u:
      v29 = (void *)*v23;
      *v22 = *v23;
      v30 = v29;
      v26 = v22;
      v27 = v24;
      v28 = 1;
      goto LABEL_16;
    case 2u:
      v31 = (void *)*v23;
      *v22 = *v23;
      v32 = v31;
      v26 = v22;
      v27 = v24;
      v28 = 2;
      goto LABEL_16;
    case 3u:
      v33 = v23[1];
      *v22 = *v23;
      v22[1] = v33;
      *((_BYTE *)v22 + 16) = *((_BYTE *)v23 + 16);
      v34 = (void *)v23[3];
      v22[3] = v34;
      swift_bridgeObjectRetain(v33);
      v35 = v34;
      v26 = v22;
      v27 = v24;
      v28 = 3;
      goto LABEL_16;
    case 4u:
      v36 = (void *)*v23;
      *v22 = *v23;
      v37 = v36;
      v26 = v22;
      v27 = v24;
      v28 = 4;
      goto LABEL_16;
    case 5u:
      v38 = v23[1];
      *v22 = *v23;
      v22[1] = v38;
      *((_WORD *)v22 + 8) = *((_WORD *)v23 + 8);
      swift_bridgeObjectRetain(v38);
      v26 = v22;
      v27 = v24;
      v28 = 5;
      goto LABEL_16;
    case 6u:
      v39 = type metadata accessor for URL(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v39 - 8) + 16))(v22, v23, v39);
      v26 = v22;
      v27 = v24;
      v28 = 6;
      goto LABEL_16;
    case 7u:
      v40 = (void *)*v23;
      *v22 = *v23;
      v41 = v40;
      v26 = v22;
      v27 = v24;
      v28 = 7;
      goto LABEL_16;
    case 9u:
      v42 = type metadata accessor for Date(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v42 - 8) + 16))(v22, v23, v42);
      v43 = sub_5440(&qword_2643D0);
      *((_BYTE *)v22 + *(int *)(v43 + 48)) = *((_BYTE *)v23 + *(int *)(v43 + 48));
      v26 = v22;
      v27 = v24;
      v28 = 9;
      goto LABEL_16;
    case 0xAu:
      v44 = type metadata accessor for Date(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v44 - 8) + 16))(v22, v23, v44);
      v45 = sub_5440(&qword_2643D8);
      *((_BYTE *)v22 + *(int *)(v45 + 48)) = *((_BYTE *)v23 + *(int *)(v45 + 48));
      v26 = v22;
      v27 = v24;
      v28 = 10;
LABEL_16:
      swift_storeEnumTagMultiPayload(v26, v27, v28);
      break;
    default:
      memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
      break;
  }
  return a1;
}

uint64_t assignWithCopy for AssetAction(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(void *, uint64_t, uint64_t);
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  id v34;
  void *v35;
  id v36;
  uint64_t v37;
  void *v38;
  id v39;
  void *v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v10 = *(_QWORD *)(a2 + 40);
  v11 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v12 = a3[8];
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = type metadata accessor for ActionMetrics(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 24))(v13, v14, v15);
  v16 = a3[9];
  v17 = (void *)(a1 + v16);
  v18 = (void *)(a2 + v16);
  v19 = type metadata accessor for ClickData(0);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v20 + 48);
  v22 = v21(v17, 1, v19);
  v23 = v21(v18, 1, v19);
  if (v22)
  {
    if (!v23)
    {
      (*(void (**)(void *, void *, uint64_t))(v20 + 16))(v17, v18, v19);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
      if (a1 == a2)
        return a1;
      goto LABEL_8;
    }
LABEL_7:
    v24 = sub_5440(&qword_25E828);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    if (a1 == a2)
      return a1;
    goto LABEL_8;
  }
  if (v23)
  {
    (*(void (**)(void *, uint64_t))(v20 + 8))(v17, v19);
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v20 + 24))(v17, v18, v19);
  if (a1 == a2)
    return a1;
LABEL_8:
  v25 = a3[10];
  v26 = (_QWORD *)(a1 + v25);
  v27 = (_QWORD *)(a2 + v25);
  sub_224DC(a1 + v25, type metadata accessor for AssetAction.Kind);
  v28 = type metadata accessor for AssetAction.Kind(0);
  switch(swift_getEnumCaseMultiPayload(v27, v28))
  {
    case 0u:
      *v26 = *v27;
      v29 = v27[1];
      v26[1] = v29;
      *((_BYTE *)v26 + 16) = *((_BYTE *)v27 + 16);
      *((_BYTE *)v26 + 17) = *((_BYTE *)v27 + 17);
      swift_bridgeObjectRetain(v29);
      v30 = v26;
      v31 = v28;
      v32 = 0;
      goto LABEL_22;
    case 1u:
      v33 = (void *)*v27;
      *v26 = *v27;
      v34 = v33;
      v30 = v26;
      v31 = v28;
      v32 = 1;
      goto LABEL_22;
    case 2u:
      v35 = (void *)*v27;
      *v26 = *v27;
      v36 = v35;
      v30 = v26;
      v31 = v28;
      v32 = 2;
      goto LABEL_22;
    case 3u:
      *v26 = *v27;
      v37 = v27[1];
      v26[1] = v37;
      *((_BYTE *)v26 + 16) = *((_BYTE *)v27 + 16);
      v38 = (void *)v27[3];
      v26[3] = v38;
      swift_bridgeObjectRetain(v37);
      v39 = v38;
      v30 = v26;
      v31 = v28;
      v32 = 3;
      goto LABEL_22;
    case 4u:
      v40 = (void *)*v27;
      *v26 = *v27;
      v41 = v40;
      v30 = v26;
      v31 = v28;
      v32 = 4;
      goto LABEL_22;
    case 5u:
      *v26 = *v27;
      v42 = v27[1];
      v26[1] = v42;
      *((_BYTE *)v26 + 16) = *((_BYTE *)v27 + 16);
      *((_BYTE *)v26 + 17) = *((_BYTE *)v27 + 17);
      swift_bridgeObjectRetain(v42);
      v30 = v26;
      v31 = v28;
      v32 = 5;
      goto LABEL_22;
    case 6u:
      v43 = type metadata accessor for URL(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v43 - 8) + 16))(v26, v27, v43);
      v30 = v26;
      v31 = v28;
      v32 = 6;
      goto LABEL_22;
    case 7u:
      v44 = (void *)*v27;
      *v26 = *v27;
      v45 = v44;
      v30 = v26;
      v31 = v28;
      v32 = 7;
      goto LABEL_22;
    case 9u:
      v46 = type metadata accessor for Date(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v46 - 8) + 16))(v26, v27, v46);
      v47 = sub_5440(&qword_2643D0);
      *((_BYTE *)v26 + *(int *)(v47 + 48)) = *((_BYTE *)v27 + *(int *)(v47 + 48));
      v30 = v26;
      v31 = v28;
      v32 = 9;
      goto LABEL_22;
    case 0xAu:
      v48 = type metadata accessor for Date(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v48 - 8) + 16))(v26, v27, v48);
      v49 = sub_5440(&qword_2643D8);
      *((_BYTE *)v26 + *(int *)(v49 + 48)) = *((_BYTE *)v27 + *(int *)(v49 + 48));
      v30 = v26;
      v31 = v28;
      v32 = 10;
LABEL_22:
      swift_storeEnumTagMultiPayload(v30, v31, v32);
      break;
    default:
      memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
      break;
  }
  return a1;
}

uint64_t initializeWithTake for AssetAction(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  _BYTE *v19;
  uint64_t v20;
  int EnumCaseMultiPayload;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v7 = a3[8];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for ActionMetrics(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = a3[9];
  v12 = (void *)(a1 + v11);
  v13 = (const void *)(a2 + v11);
  v14 = type metadata accessor for ClickData(0);
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    v16 = sub_5440(&qword_25E828);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v15 + 32))(v12, v13, v14);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  v17 = a3[10];
  v18 = (_BYTE *)(a1 + v17);
  v19 = (_BYTE *)(a2 + v17);
  v20 = type metadata accessor for AssetAction.Kind(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v19, v20);
  switch(EnumCaseMultiPayload)
  {
    case 10:
      v23 = type metadata accessor for Date(0);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v23 - 8) + 32))(v18, v19, v23);
      v24 = sub_5440(&qword_2643D8);
      v18[*(int *)(v24 + 48)] = v19[*(int *)(v24 + 48)];
      swift_storeEnumTagMultiPayload(v18, v20, 10);
      break;
    case 9:
      v25 = type metadata accessor for Date(0);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v25 - 8) + 32))(v18, v19, v25);
      v26 = sub_5440(&qword_2643D0);
      v18[*(int *)(v26 + 48)] = v19[*(int *)(v26 + 48)];
      swift_storeEnumTagMultiPayload(v18, v20, 9);
      break;
    case 6:
      v22 = type metadata accessor for URL(0);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v18, v19, v22);
      swift_storeEnumTagMultiPayload(v18, v20, 6);
      break;
    default:
      memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
      break;
  }
  return a1;
}

uint64_t assignWithTake for AssetAction(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(void *, uint64_t, uint64_t);
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  _BYTE *v27;
  uint64_t v28;
  int EnumCaseMultiPayload;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v8;
  swift_bridgeObjectRelease(v9);
  v10 = *(_QWORD *)(a2 + 40);
  v11 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v10;
  swift_bridgeObjectRelease(v11);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v12 = a3[8];
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = type metadata accessor for ActionMetrics(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 40))(v13, v14, v15);
  v16 = a3[9];
  v17 = (void *)(a1 + v16);
  v18 = (void *)(a2 + v16);
  v19 = type metadata accessor for ClickData(0);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v20 + 48);
  v22 = v21(v17, 1, v19);
  v23 = v21(v18, 1, v19);
  if (v22)
  {
    if (!v23)
    {
      (*(void (**)(void *, void *, uint64_t))(v20 + 32))(v17, v18, v19);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
      if (a1 == a2)
        return a1;
      goto LABEL_8;
    }
LABEL_7:
    v24 = sub_5440(&qword_25E828);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    if (a1 == a2)
      return a1;
    goto LABEL_8;
  }
  if (v23)
  {
    (*(void (**)(void *, uint64_t))(v20 + 8))(v17, v19);
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v20 + 40))(v17, v18, v19);
  if (a1 == a2)
    return a1;
LABEL_8:
  v25 = a3[10];
  v26 = (_BYTE *)(a1 + v25);
  v27 = (_BYTE *)(a2 + v25);
  sub_224DC(a1 + v25, type metadata accessor for AssetAction.Kind);
  v28 = type metadata accessor for AssetAction.Kind(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v27, v28);
  switch(EnumCaseMultiPayload)
  {
    case 10:
      v31 = type metadata accessor for Date(0);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v31 - 8) + 32))(v26, v27, v31);
      v32 = sub_5440(&qword_2643D8);
      v26[*(int *)(v32 + 48)] = v27[*(int *)(v32 + 48)];
      swift_storeEnumTagMultiPayload(v26, v28, 10);
      break;
    case 9:
      v33 = type metadata accessor for Date(0);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v33 - 8) + 32))(v26, v27, v33);
      v34 = sub_5440(&qword_2643D0);
      v26[*(int *)(v34 + 48)] = v27[*(int *)(v34 + 48)];
      swift_storeEnumTagMultiPayload(v26, v28, 9);
      break;
    case 6:
      v30 = type metadata accessor for URL(0);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v30 - 8) + 32))(v26, v27, v30);
      swift_storeEnumTagMultiPayload(v26, v28, 6);
      break;
    default:
      memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
      break;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for AssetAction(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_F3DDC);
}

uint64_t sub_F3DDC(uint64_t a1, uint64_t a2, int *a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for ActionMetrics(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = a3[8];
    }
    else
    {
      v12 = sub_5440(&qword_25E828);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
      {
        v10 = v12;
        v11 = a3[9];
      }
      else
      {
        v10 = type metadata accessor for AssetAction.Kind(0);
        v9 = *(_QWORD *)(v10 - 8);
        v11 = a3[10];
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for AssetAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_F3EB0);
}

uint64_t sub_F3EB0(uint64_t result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for ActionMetrics(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = a4[8];
    }
    else
    {
      v12 = sub_5440(&qword_25E828);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == a3)
      {
        v10 = v12;
        v11 = a4[9];
      }
      else
      {
        v10 = type metadata accessor for AssetAction.Kind(0);
        v9 = *(_QWORD *)(v10 - 8);
        v11 = a4[10];
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

void sub_F3F74(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[7];

  v8[0] = &unk_1EB688;
  v8[1] = &unk_1EB688;
  v8[2] = &unk_1EB6A0;
  v8[3] = &unk_1EB6B8;
  v2 = type metadata accessor for ActionMetrics(319);
  if (v3 <= 0x3F)
  {
    v8[4] = *(_QWORD *)(v2 - 8) + 64;
    sub_F4034(319);
    if (v5 <= 0x3F)
    {
      v8[5] = *(_QWORD *)(v4 - 8) + 64;
      v6 = type metadata accessor for AssetAction.Kind(319);
      if (v7 <= 0x3F)
      {
        v8[6] = *(_QWORD *)(v6 - 8) + 64;
        swift_initStructMetadata(a1, 256, 7, v8, a1 + 16);
      }
    }
  }
}

void sub_F4034(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_2650A8)
  {
    v2 = type metadata accessor for ClickData(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_2650A8);
  }
}

_QWORD *initializeBufferWithCopyOfBuffer for AssetAction.Kind(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v8;
  uint64_t v9;
  void *v11;
  id v12;
  void *v13;
  id v14;
  uint64_t v15;
  void *v16;
  id v17;
  void *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v9 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain(v9);
  }
  else
  {
    switch(swift_getEnumCaseMultiPayload(a2, a3))
    {
      case 0u:
        v8 = a2[1];
        *a1 = *a2;
        a1[1] = v8;
        *((_WORD *)a1 + 8) = *((_WORD *)a2 + 8);
        swift_bridgeObjectRetain(v8);
        swift_storeEnumTagMultiPayload(a1, a3, 0);
        break;
      case 1u:
        v11 = (void *)*a2;
        *a1 = *a2;
        v12 = v11;
        swift_storeEnumTagMultiPayload(a1, a3, 1);
        break;
      case 2u:
        v13 = (void *)*a2;
        *a1 = *a2;
        v14 = v13;
        swift_storeEnumTagMultiPayload(a1, a3, 2);
        break;
      case 3u:
        v15 = a2[1];
        *a1 = *a2;
        a1[1] = v15;
        *((_BYTE *)a1 + 16) = *((_BYTE *)a2 + 16);
        v16 = (void *)a2[3];
        a1[3] = v16;
        swift_bridgeObjectRetain(v15);
        v17 = v16;
        swift_storeEnumTagMultiPayload(a1, a3, 3);
        break;
      case 4u:
        v18 = (void *)*a2;
        *a1 = *a2;
        v19 = v18;
        swift_storeEnumTagMultiPayload(a1, a3, 4);
        break;
      case 5u:
        v20 = a2[1];
        *a1 = *a2;
        a1[1] = v20;
        *((_WORD *)a1 + 8) = *((_WORD *)a2 + 8);
        swift_bridgeObjectRetain(v20);
        swift_storeEnumTagMultiPayload(a1, a3, 5);
        break;
      case 6u:
        v21 = type metadata accessor for URL(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(a1, a2, v21);
        swift_storeEnumTagMultiPayload(a1, a3, 6);
        break;
      case 7u:
        v22 = (void *)*a2;
        *a1 = *a2;
        v23 = v22;
        swift_storeEnumTagMultiPayload(a1, a3, 7);
        break;
      case 9u:
        v24 = type metadata accessor for Date(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v24 - 8) + 16))(a1, a2, v24);
        v25 = sub_5440(&qword_2643D0);
        *((_BYTE *)a1 + *(int *)(v25 + 48)) = *((_BYTE *)a2 + *(int *)(v25 + 48));
        swift_storeEnumTagMultiPayload(a1, a3, 9);
        break;
      case 0xAu:
        v26 = type metadata accessor for Date(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v26 - 8) + 16))(a1, a2, v26);
        v27 = sub_5440(&qword_2643D8);
        *((_BYTE *)a1 + *(int *)(v27 + 48)) = *((_BYTE *)a2 + *(int *)(v27 + 48));
        swift_storeEnumTagMultiPayload(a1, a3, 10);
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(v5 + 64));
        break;
    }
  }
  return a1;
}

void destroy for AssetAction.Kind(uint64_t a1)
{
  void *v2;
  uint64_t v3;

  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 5u:
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
      return;
    case 1u:
    case 2u:
    case 4u:
    case 7u:
      v2 = *(void **)a1;
      goto LABEL_6;
    case 3u:
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
      v2 = *(void **)(a1 + 24);
LABEL_6:

      return;
    case 6u:
      v3 = type metadata accessor for URL(0);
      goto LABEL_8;
    case 9u:
    case 0xAu:
      v3 = type metadata accessor for Date(0);
LABEL_8:
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
      break;
    default:
      return;
  }
}

_QWORD *initializeWithCopy for AssetAction.Kind(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  void *v12;
  id v13;
  uint64_t v14;
  void *v15;
  id v16;
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  switch(swift_getEnumCaseMultiPayload(a2, a3))
  {
    case 0u:
      v6 = a2[1];
      *a1 = *a2;
      a1[1] = v6;
      *((_WORD *)a1 + 8) = *((_WORD *)a2 + 8);
      swift_bridgeObjectRetain(v6);
      v7 = a1;
      v8 = a3;
      v9 = 0;
      goto LABEL_13;
    case 1u:
      v10 = (void *)*a2;
      *a1 = *a2;
      v11 = v10;
      v7 = a1;
      v8 = a3;
      v9 = 1;
      goto LABEL_13;
    case 2u:
      v12 = (void *)*a2;
      *a1 = *a2;
      v13 = v12;
      v7 = a1;
      v8 = a3;
      v9 = 2;
      goto LABEL_13;
    case 3u:
      v14 = a2[1];
      *a1 = *a2;
      a1[1] = v14;
      *((_BYTE *)a1 + 16) = *((_BYTE *)a2 + 16);
      v15 = (void *)a2[3];
      a1[3] = v15;
      swift_bridgeObjectRetain(v14);
      v16 = v15;
      v7 = a1;
      v8 = a3;
      v9 = 3;
      goto LABEL_13;
    case 4u:
      v17 = (void *)*a2;
      *a1 = *a2;
      v18 = v17;
      v7 = a1;
      v8 = a3;
      v9 = 4;
      goto LABEL_13;
    case 5u:
      v19 = a2[1];
      *a1 = *a2;
      a1[1] = v19;
      *((_WORD *)a1 + 8) = *((_WORD *)a2 + 8);
      swift_bridgeObjectRetain(v19);
      v7 = a1;
      v8 = a3;
      v9 = 5;
      goto LABEL_13;
    case 6u:
      v20 = type metadata accessor for URL(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(a1, a2, v20);
      v7 = a1;
      v8 = a3;
      v9 = 6;
      goto LABEL_13;
    case 7u:
      v21 = (void *)*a2;
      *a1 = *a2;
      v22 = v21;
      v7 = a1;
      v8 = a3;
      v9 = 7;
      goto LABEL_13;
    case 9u:
      v23 = type metadata accessor for Date(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(a1, a2, v23);
      v24 = sub_5440(&qword_2643D0);
      *((_BYTE *)a1 + *(int *)(v24 + 48)) = *((_BYTE *)a2 + *(int *)(v24 + 48));
      v7 = a1;
      v8 = a3;
      v9 = 9;
      goto LABEL_13;
    case 0xAu:
      v25 = type metadata accessor for Date(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v25 - 8) + 16))(a1, a2, v25);
      v26 = sub_5440(&qword_2643D8);
      *((_BYTE *)a1 + *(int *)(v26 + 48)) = *((_BYTE *)a2 + *(int *)(v26 + 48));
      v7 = a1;
      v8 = a3;
      v9 = 10;
LABEL_13:
      swift_storeEnumTagMultiPayload(v7, v8, v9);
      break;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

_QWORD *assignWithCopy for AssetAction.Kind(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  void *v12;
  id v13;
  uint64_t v14;
  void *v15;
  id v16;
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  if (a1 != a2)
  {
    sub_224DC((uint64_t)a1, type metadata accessor for AssetAction.Kind);
    switch(swift_getEnumCaseMultiPayload(a2, a3))
    {
      case 0u:
        *a1 = *a2;
        v6 = a2[1];
        a1[1] = v6;
        *((_BYTE *)a1 + 16) = *((_BYTE *)a2 + 16);
        *((_BYTE *)a1 + 17) = *((_BYTE *)a2 + 17);
        swift_bridgeObjectRetain(v6);
        v7 = a1;
        v8 = a3;
        v9 = 0;
        goto LABEL_14;
      case 1u:
        v10 = (void *)*a2;
        *a1 = *a2;
        v11 = v10;
        v7 = a1;
        v8 = a3;
        v9 = 1;
        goto LABEL_14;
      case 2u:
        v12 = (void *)*a2;
        *a1 = *a2;
        v13 = v12;
        v7 = a1;
        v8 = a3;
        v9 = 2;
        goto LABEL_14;
      case 3u:
        *a1 = *a2;
        v14 = a2[1];
        a1[1] = v14;
        *((_BYTE *)a1 + 16) = *((_BYTE *)a2 + 16);
        v15 = (void *)a2[3];
        a1[3] = v15;
        swift_bridgeObjectRetain(v14);
        v16 = v15;
        v7 = a1;
        v8 = a3;
        v9 = 3;
        goto LABEL_14;
      case 4u:
        v17 = (void *)*a2;
        *a1 = *a2;
        v18 = v17;
        v7 = a1;
        v8 = a3;
        v9 = 4;
        goto LABEL_14;
      case 5u:
        *a1 = *a2;
        v19 = a2[1];
        a1[1] = v19;
        *((_BYTE *)a1 + 16) = *((_BYTE *)a2 + 16);
        *((_BYTE *)a1 + 17) = *((_BYTE *)a2 + 17);
        swift_bridgeObjectRetain(v19);
        v7 = a1;
        v8 = a3;
        v9 = 5;
        goto LABEL_14;
      case 6u:
        v20 = type metadata accessor for URL(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(a1, a2, v20);
        v7 = a1;
        v8 = a3;
        v9 = 6;
        goto LABEL_14;
      case 7u:
        v21 = (void *)*a2;
        *a1 = *a2;
        v22 = v21;
        v7 = a1;
        v8 = a3;
        v9 = 7;
        goto LABEL_14;
      case 9u:
        v23 = type metadata accessor for Date(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(a1, a2, v23);
        v24 = sub_5440(&qword_2643D0);
        *((_BYTE *)a1 + *(int *)(v24 + 48)) = *((_BYTE *)a2 + *(int *)(v24 + 48));
        v7 = a1;
        v8 = a3;
        v9 = 9;
        goto LABEL_14;
      case 0xAu:
        v25 = type metadata accessor for Date(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v25 - 8) + 16))(a1, a2, v25);
        v26 = sub_5440(&qword_2643D8);
        *((_BYTE *)a1 + *(int *)(v26 + 48)) = *((_BYTE *)a2 + *(int *)(v26 + 48));
        v7 = a1;
        v8 = a3;
        v9 = 10;
LABEL_14:
        swift_storeEnumTagMultiPayload(v7, v8, v9);
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

_BYTE *initializeWithTake for AssetAction.Kind(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  switch(EnumCaseMultiPayload)
  {
    case 10:
      v8 = type metadata accessor for Date(0);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
      v9 = sub_5440(&qword_2643D8);
      a1[*(int *)(v9 + 48)] = a2[*(int *)(v9 + 48)];
      swift_storeEnumTagMultiPayload(a1, a3, 10);
      break;
    case 9:
      v10 = type metadata accessor for Date(0);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(a1, a2, v10);
      v11 = sub_5440(&qword_2643D0);
      a1[*(int *)(v11 + 48)] = a2[*(int *)(v11 + 48)];
      swift_storeEnumTagMultiPayload(a1, a3, 9);
      break;
    case 6:
      v7 = type metadata accessor for URL(0);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, a3, 6);
      break;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

_BYTE *assignWithTake for AssetAction.Kind(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (a1 != a2)
  {
    sub_224DC((uint64_t)a1, type metadata accessor for AssetAction.Kind);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    switch(EnumCaseMultiPayload)
    {
      case 10:
        v8 = type metadata accessor for Date(0);
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
        v9 = sub_5440(&qword_2643D8);
        a1[*(int *)(v9 + 48)] = a2[*(int *)(v9 + 48)];
        swift_storeEnumTagMultiPayload(a1, a3, 10);
        break;
      case 9:
        v10 = type metadata accessor for Date(0);
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(a1, a2, v10);
        v11 = sub_5440(&qword_2643D0);
        a1[*(int *)(v11 + 48)] = a2[*(int *)(v11 + 48)];
        swift_storeEnumTagMultiPayload(a1, a3, 9);
        break;
      case 6:
        v7 = type metadata accessor for URL(0);
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
        swift_storeEnumTagMultiPayload(a1, a3, 6);
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

uint64_t sub_F4A98(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _BYTE v6[32];
  _BYTE v7[32];
  _QWORD v8[11];

  v8[0] = &unk_1EB6D8;
  v8[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v8[2] = &unk_1EB6F0;
  v8[3] = &unk_1EB708;
  v8[4] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v8[5] = &unk_1EB6D8;
  result = type metadata accessor for URL(319);
  if (v3 <= 0x3F)
  {
    v8[6] = *(_QWORD *)(result - 8) + 64;
    v8[7] = &unk_1EB6F0;
    v8[8] = &unk_1EB6B8;
    result = type metadata accessor for Date(319);
    if (v4 <= 0x3F)
    {
      v5 = *(_QWORD *)(result - 8) + 64;
      swift_getTupleTypeLayout2(v7, v5, &unk_1EB6B8);
      v8[9] = v7;
      swift_getTupleTypeLayout2(v6, v5, &unk_1EB6B8);
      v8[10] = v6;
      swift_initEnumMetadataMultiPayload(a1, 256, 11, v8);
      return 0;
    }
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for AssetAction.Kind.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_F4BD0 + 4 * byte_1EB545[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_F4BF0 + 4 * byte_1EB54A[v4]))();
}

_BYTE *sub_F4BD0(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_F4BF0(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_F4BF8(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_F4C00(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_F4C08(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_F4C10(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for AssetAction.Kind.CodingKeys()
{
  return &type metadata for AssetAction.Kind.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for AssetAction.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_F4C78 + 4 * byte_1EB554[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_F4CAC + 4 * byte_1EB54F[v4]))();
}

uint64_t sub_F4CAC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_F4CB4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0xF4CBCLL);
  return result;
}

uint64_t sub_F4CC8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0xF4CD0);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_F4CD4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_F4CDC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AssetAction.CodingKeys()
{
  return &type metadata for AssetAction.CodingKeys;
}

unint64_t sub_F4CFC()
{
  unint64_t result;

  result = qword_265198;
  if (!qword_265198)
  {
    result = swift_getWitnessTable(&unk_1EB7F0, &type metadata for AssetAction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_265198);
  }
  return result;
}

unint64_t sub_F4D44()
{
  unint64_t result;

  result = qword_2651A0;
  if (!qword_2651A0)
  {
    result = swift_getWitnessTable(&unk_1EB8E0, &type metadata for AssetAction.Kind.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2651A0);
  }
  return result;
}

unint64_t sub_F4D8C()
{
  unint64_t result;

  result = qword_2651A8;
  if (!qword_2651A8)
  {
    result = swift_getWitnessTable(&unk_1EB818, &type metadata for AssetAction.Kind.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2651A8);
  }
  return result;
}

unint64_t sub_F4DD4()
{
  unint64_t result;

  result = qword_2651B0;
  if (!qword_2651B0)
  {
    result = swift_getWitnessTable(&unk_1EB840, &type metadata for AssetAction.Kind.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2651B0);
  }
  return result;
}

unint64_t sub_F4E1C()
{
  unint64_t result;

  result = qword_2651B8;
  if (!qword_2651B8)
  {
    result = swift_getWitnessTable(&unk_1EB760, &type metadata for AssetAction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2651B8);
  }
  return result;
}

unint64_t sub_F4E64()
{
  unint64_t result;

  result = qword_2651C0;
  if (!qword_2651C0)
  {
    result = swift_getWitnessTable(&unk_1EB788, &type metadata for AssetAction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2651C0);
  }
  return result;
}

uint64_t sub_F4EA8(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char v12;

  if (a1 == 25705 && a2 == 0xE200000000000000)
  {
    v5 = 0xE200000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(25705, 0xE200000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x44497465737361 && a2 == 0xE700000000000000)
  {
    v7 = 0xE700000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x44497465737361, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x65636E6174736E69 && a2 == 0xEA00000000004449)
  {
    v8 = 0xEA00000000004449;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x65636E6174736E69, 0xEA00000000004449, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x63696C7078457369 && a2 == 0xEA00000000007469)
  {
    v9 = 0xEA00000000007469;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x63696C7078457369, 0xEA00000000007469, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_26;
  }
  if (a1 == 0x654D6E6F69746361 && a2 == 0xED00007363697274)
  {
    v10 = 0xED00007363697274;
LABEL_32:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x654D6E6F69746361, 0xED00007363697274, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_32;
  }
  if (a1 == 0x7461446B63696C63 && a2 == 0xE900000000000061)
  {
    v11 = 0xE900000000000061;
LABEL_38:
    swift_bridgeObjectRelease(v11);
    return 5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7461446B63696C63, 0xE900000000000061, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
    goto LABEL_38;
  }
  if (a1 == 1684957547 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease(0xE400000000000000);
    return 6;
  }
  else
  {
    v12 = _stringCompareWithSmolCheck(_:_:expecting:)(1684957547, 0xE400000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v12 & 1) != 0)
      return 6;
    else
      return 7;
  }
}

uint64_t ToolbarActionToggleMenuItem.init(item:isSelected:preSelectionActionProvider:postSelectionActionProvider:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  int *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t result;
  _QWORD *v18;
  _QWORD *v19;

  *(_QWORD *)a7 = swift_getKeyPath(&unk_1EB9B0);
  *(_BYTE *)(a7 + 40) = 0;
  v14 = (int *)type metadata accessor for ToolbarActionToggleMenuItem(0);
  v15 = (_QWORD *)(a7 + v14[5]);
  *v15 = swift_getKeyPath(&unk_1EB9E0);
  v16 = sub_5440(&qword_25FAE0);
  swift_storeEnumTagMultiPayload(v15, v16, 0);
  result = sub_21C88(a1, a7 + v14[6], type metadata accessor for ToolbarActionMenuItem);
  *(_BYTE *)(a7 + v14[7]) = a2;
  v18 = (_QWORD *)(a7 + v14[8]);
  *v18 = a3;
  v18[1] = a4;
  v19 = (_QWORD *)(a7 + v14[9]);
  *v19 = a5;
  v19[1] = a6;
  return result;
}

uint64_t type metadata accessor for ToolbarActionToggleMenuItem(uint64_t a1)
{
  uint64_t result;

  result = qword_265238;
  if (!qword_265238)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ToolbarActionToggleMenuItem);
  return result;
}

uint64_t ToolbarActionToggleMenuItem.item.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for ToolbarActionToggleMenuItem(0);
  return sub_1E428(v1 + *(int *)(v3 + 24), a1, type metadata accessor for ToolbarActionMenuItem);
}

uint64_t ToolbarActionToggleMenuItem.isSelected.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for ToolbarActionToggleMenuItem(0) + 28));
}

uint64_t ToolbarActionToggleMenuItem.preSelectionActionProvider.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for ToolbarActionToggleMenuItem(0) + 32));
  v2 = *v1;
  sub_64644(*v1, v1[1]);
  return v2;
}

uint64_t ToolbarActionToggleMenuItem.postSelectionActionProvider.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for ToolbarActionToggleMenuItem(0) + 36));
  v2 = *v1;
  sub_64644(*v1, v1[1]);
  return v2;
}

uint64_t ToolbarActionToggleMenuItem.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  uint64_t KeyPath;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48[16];
  char *v49;
  _QWORD v50[2];
  unsigned __int8 v51;

  v2 = v1;
  v47 = a1;
  v3 = type metadata accessor for ToolbarActionToggleMenuItem(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  __chkstk_darwin(v3);
  v6 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for LocalizerRequest(0);
  v8 = *(_QWORD *)(v7 - 8);
  v40 = v7;
  v41 = v8;
  v9 = v8;
  __chkstk_darwin(v7);
  v11 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_5440(&qword_2651D0);
  v45 = *(_QWORD *)(v12 - 8);
  v46 = v12;
  __chkstk_darwin(v12);
  v42 = (char *)&v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = v2 + *(int *)(v3 + 24);
  v44 = v14;
  v43 = type metadata accessor for ToolbarActionMenuItem(0);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v14 + *(int *)(v43 + 20), v7);
  sub_1E428(v2, (uint64_t)v6, type metadata accessor for ToolbarActionToggleMenuItem);
  v15 = type metadata accessor for MainActor(0);
  v16 = static MainActor.shared.getter(v15);
  v17 = *(unsigned __int8 *)(v4 + 80);
  v18 = (v17 + 32) & ~v17;
  v19 = v18 + v5;
  v20 = v17 | 7;
  v21 = swift_allocObject(&unk_252018, v19, v17 | 7);
  *(_QWORD *)(v21 + 16) = v16;
  *(_QWORD *)(v21 + 24) = &protocol witness table for MainActor;
  sub_21C88((uint64_t)v6, v21 + v18, type metadata accessor for ToolbarActionToggleMenuItem);
  v22 = sub_1E428(v2, (uint64_t)v6, type metadata accessor for ToolbarActionToggleMenuItem);
  v23 = static MainActor.shared.getter(v22);
  v24 = swift_allocObject(&unk_252040, v19, v20);
  *(_QWORD *)(v24 + 16) = v23;
  *(_QWORD *)(v24 + 24) = &protocol witness table for MainActor;
  sub_21C88((uint64_t)v6, v24 + v18, type metadata accessor for ToolbarActionToggleMenuItem);
  Binding.init(get:set:)(v50, sub_F56BC, v21, sub_F5BF0, v24, &type metadata for Bool);
  v25 = v50[0];
  v26 = v50[1];
  v27 = v51;
  v49 = v11;
  v28 = type metadata accessor for LocalizedText(0);
  v29 = sub_5C448();
  v30 = v42;
  Toggle.init(isOn:label:)(v25, v26, v27, sub_F5CC4, v48, v28, v29);
  (*(void (**)(char *, uint64_t))(v41 + 8))(v11, v40);
  LOBYTE(v27) = *(_BYTE *)(v44 + *(int *)(v43 + 28));
  KeyPath = swift_getKeyPath(&unk_1EBA10);
  v32 = swift_allocObject(&unk_252068, 17, 7);
  *(_BYTE *)(v32 + 16) = (v27 & 1) == 0;
  v33 = v45;
  v34 = v47;
  v35 = v30;
  v36 = v30;
  v37 = v46;
  (*(void (**)(uint64_t, char *, uint64_t))(v45 + 16))(v47, v36, v46);
  v38 = (uint64_t *)(v34 + *(int *)(sub_5440(&qword_2651D8) + 36));
  *v38 = KeyPath;
  v38[1] = (uint64_t)sub_3D3A0;
  v38[2] = v32;
  return (*(uint64_t (**)(char *, uint64_t))(v33 + 8))(v35, v37);
}

uint64_t sub_F56BC@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;

  result = type metadata accessor for ToolbarActionToggleMenuItem(0);
  v4 = *(unsigned __int8 *)(*(_QWORD *)(result - 8) + 80);
  *a1 = *(_BYTE *)(v1 + ((v4 + 32) & ~v4) + *(int *)(result + 28));
  return result;
}

uint64_t sub_F5700(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, __n128);
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(uint64_t, __n128);
  uint64_t v28;
  __n128 v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  void *v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;

  v6 = type metadata accessor for OpaqueMetricsFieldsContext(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for ActionMetrics(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = _swiftEmptyArrayStorage;
  v43 = _swiftEmptyArrayStorage;
  v14 = type metadata accessor for ToolbarActionToggleMenuItem(0);
  v15 = (int *)v14;
  v16 = a5 + *(int *)(v14 + 32);
  v17 = *(uint64_t (**)(uint64_t, __n128))v16;
  if (*(_QWORD *)v16)
  {
    v18 = *(_QWORD *)(v16 + 8);
    v19 = a5 + *(int *)(v14 + 24);
    v20 = swift_retain(v18);
    v21 = v17(v19, v20);
    sub_180BA0(v21);
    sub_64654((uint64_t)v17, v18);
    v13 = v43;
  }
  v22 = a5 + v15[6];
  v23 = type metadata accessor for ToolbarActionMenuItem(0);
  sub_958C8(v22 + *(int *)(v23 + 24), (uint64_t)&v37);
  sub_AC68(&v37, (uint64_t)&v40);
  if ((swift_isUniquelyReferenced_nonNull_native(v13) & 1) == 0)
    v13 = sub_AAED0(0, v13[2] + 1, 1, v13);
  v25 = v13[2];
  v24 = v13[3];
  if (v25 >= v24 >> 1)
    v13 = sub_AAED0((_QWORD *)(v24 > 1), v25 + 1, 1, v13);
  v13[2] = v25 + 1;
  sub_AC68(&v40, (uint64_t)&v13[5 * v25 + 4]);
  v43 = v13;
  v26 = a5 + v15[9];
  v27 = *(uint64_t (**)(uint64_t, __n128))v26;
  if (*(_QWORD *)v26)
  {
    v28 = *(_QWORD *)(v26 + 8);
    v29 = swift_retain(v28);
    v30 = v27(v22, v29);
    sub_180BA0(v30);
    sub_64654((uint64_t)v27, v28);
  }
  if ((*(_BYTE *)(a5 + v15[7]) & 1) != 0)
    return swift_bridgeObjectRelease(v43);
  sub_32138((uint64_t)&v40);
  v32 = v41;
  if (v41)
  {
    v33 = v42;
    v34 = sub_5480(&v40, v41);
    static ActionMetrics.notInstrumented.getter(v34);
    v35 = v43;
    v38 = type metadata accessor for CompoundAction(0);
    v39 = &protocol witness table for CompoundAction;
    sub_C404(&v37);
    CompoundAction.init(actionMetrics:subactions:)(v12, v35);
    sub_3210C((uint64_t)v9);
    PerformAction.callAsFunction(_:withMetrics:)(&v37, v9, v32, v33);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    _s7BooksUI13AnyPagedFrameVwxx_0(&v37);
    return _s7BooksUI13AnyPagedFrameVwxx_0(&v40);
  }
  else
  {
    swift_bridgeObjectRelease(v43);
    return sub_B414((uint64_t)&v40, &qword_25FAF0);
  }
}

uint64_t sub_F59D0()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t);
  char *v16;
  uint64_t v17;
  int EnumCaseMultiPayload;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v25;

  v1 = (int *)type metadata accessor for ToolbarActionToggleMenuItem(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  v6 = (_QWORD *)(v0 + v4);
  if ((*(_BYTE *)(v0 + v4 + 40) & 1) != 0)
  {
    if (v6[3])
      _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)(v0 + v4));
  }
  else
  {
    swift_release(*v6);
  }
  v7 = (_QWORD *)((char *)v6 + v1[5]);
  v8 = sub_5440(&qword_25FAE0);
  v25 = v5;
  if (swift_getEnumCaseMultiPayload(v7, v8) == 1)
  {
    v9 = type metadata accessor for OpaqueMetricsFieldsContext(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v7, v9);
  }
  else
  {
    swift_release(*v7);
  }
  v10 = (char *)v6 + v1[6];
  swift_bridgeObjectRelease(*((_QWORD *)v10 + 1));
  v11 = (int *)type metadata accessor for ToolbarActionMenuItem(0);
  v12 = &v10[v11[5]];
  v13 = type metadata accessor for LocalizerRequest(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(void (**)(char *, uint64_t))(v14 + 8);
  v15(v12, v13);
  _s7BooksUI13AnyPagedFrameVwxx_0(&v10[v11[6]]);
  v16 = &v10[v11[9]];
  v17 = type metadata accessor for ToolbarActionMenuItemButtonType(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v16, v17);
  if (EnumCaseMultiPayload == 2)
  {
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v16, 1, v13))
      v15(v16, v13);
    v20 = sub_5440(&qword_262AA8);
    swift_bridgeObjectRelease(*(_QWORD *)&v16[*(int *)(v20 + 48) + 8]);
    v21 = &v16[*(int *)(v20 + 64)];
    if (*((_QWORD *)v21 + 3))
      _s7BooksUI13AnyPagedFrameVwxx_0(v21);
  }
  else if (EnumCaseMultiPayload == 1)
  {
    v19 = type metadata accessor for URL(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(v16, v19);
  }
  v22 = (_QWORD *)((char *)v6 + v1[8]);
  if (*v22)
    swift_release(v22[1]);
  v23 = (_QWORD *)((char *)v6 + v1[9]);
  if (*v23)
    swift_release(v23[1]);
  return swift_deallocObject(v0, ((v3 + 32) & ~v3) + v25, v3 | 7);
}

uint64_t sub_F5BF0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ToolbarActionToggleMenuItem(0) - 8) + 80);
  return sub_F5700(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), v2 + ((v5 + 32) & ~v5));
}

uint64_t sub_F5C44(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v7;

  v2 = type metadata accessor for LocalizerRequest(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v5 + 16))(v4, a1);
  return LocalizedText.init(_:)(v4);
}

uint64_t sub_F5CC4()
{
  uint64_t v0;

  return sub_F5C44(*(_QWORD *)(v0 + 16));
}

uint64_t sub_F5CD4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_F5CE4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &opaque type descriptor for <<opaque return type of ToolbarActionToggleMenuItem.body>>, 1);
}

uint64_t initializeBufferWithCopyOfBuffer for ToolbarActionToggleMenuItem(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  int *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t, uint64_t);
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  int EnumCaseMultiPayload;
  uint64_t v38;
  uint64_t v39;
  int *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v62;
  int *v63;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v9 = *a2;
    *(_QWORD *)v4 = *a2;
    v4 = v9 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain(v9);
  }
  else
  {
    if ((a2[5] & 1) != 0)
    {
      v7 = a2[3];
      if (v7)
      {
        v8 = a2[4];
        *(_QWORD *)(a1 + 24) = v7;
        *(_QWORD *)(a1 + 32) = v8;
        (**(void (***)(uint64_t, uint64_t *))(v7 - 8))(a1, a2);
      }
      else
      {
        v11 = *((_OWORD *)a2 + 1);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v11;
        *(_QWORD *)(a1 + 32) = a2[4];
      }
      *(_BYTE *)(v4 + 40) = 1;
    }
    else
    {
      v10 = *a2;
      *(_QWORD *)v4 = *a2;
      *(_BYTE *)(v4 + 40) = 0;
      swift_retain(v10);
    }
    v12 = a3[5];
    v13 = (uint64_t *)(v4 + v12);
    v14 = (uint64_t *)((char *)a2 + v12);
    v15 = sub_5440(&qword_25FAE0);
    if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
    {
      v16 = type metadata accessor for OpaqueMetricsFieldsContext(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v13, v14, v16);
      v17 = v13;
      v18 = v15;
      v19 = 1;
    }
    else
    {
      v20 = *v14;
      *v13 = *v14;
      swift_retain(v20);
      v17 = v13;
      v18 = v15;
      v19 = 0;
    }
    swift_storeEnumTagMultiPayload(v17, v18, v19);
    v63 = a3;
    v21 = a3[6];
    v22 = (_QWORD *)(v4 + v21);
    v23 = (uint64_t)a2 + v21;
    v24 = *(uint64_t *)((char *)a2 + v21 + 8);
    *v22 = *(uint64_t *)((char *)a2 + v21);
    v22[1] = v24;
    v25 = (int *)type metadata accessor for ToolbarActionMenuItem(0);
    v26 = v25[5];
    v27 = (char *)v22 + v26;
    v28 = v23 + v26;
    v29 = type metadata accessor for LocalizerRequest(0);
    v62 = *(_QWORD *)(v29 - 8);
    v30 = *(void (**)(char *, uint64_t, uint64_t))(v62 + 16);
    swift_bridgeObjectRetain(v24);
    v30(v27, v28, v29);
    v31 = v25[6];
    v32 = *(_OWORD *)(v23 + v31 + 24);
    *(_OWORD *)((char *)v22 + v31 + 24) = v32;
    (**(void (***)(void))(v32 - 8))();
    *((_BYTE *)v22 + v25[7]) = *(_BYTE *)(v23 + v25[7]);
    *((_BYTE *)v22 + v25[8]) = *(_BYTE *)(v23 + v25[8]);
    v33 = v25[9];
    v34 = (char *)v22 + v33;
    v35 = (char *)(v23 + v33);
    v36 = type metadata accessor for ToolbarActionMenuItemButtonType(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v35, v36);
    if (EnumCaseMultiPayload == 2)
    {
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v62 + 48))(v35, 1, v29))
      {
        v39 = sub_5440(&qword_25E0C8);
        memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
      }
      else
      {
        v30(v34, (uint64_t)v35, v29);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v62 + 56))(v34, 0, 1, v29);
      }
      v40 = v63;
      v41 = sub_5440(&qword_262AA8);
      v42 = *(int *)(v41 + 48);
      v43 = &v34[v42];
      v44 = &v35[v42];
      v46 = *(_QWORD *)v44;
      v45 = *((_QWORD *)v44 + 1);
      *(_QWORD *)v43 = v46;
      *((_QWORD *)v43 + 1) = v45;
      v47 = *(int *)(v41 + 64);
      v48 = &v34[v47];
      v49 = &v35[v47];
      v50 = *((_QWORD *)v49 + 3);
      swift_bridgeObjectRetain(v45);
      if (v50)
      {
        v51 = *((_QWORD *)v49 + 4);
        *((_QWORD *)v48 + 3) = v50;
        *((_QWORD *)v48 + 4) = v51;
        (**(void (***)(char *, char *, uint64_t))(v50 - 8))(v48, v49, v50);
      }
      else
      {
        v52 = *((_OWORD *)v49 + 1);
        *(_OWORD *)v48 = *(_OWORD *)v49;
        *((_OWORD *)v48 + 1) = v52;
        *((_QWORD *)v48 + 4) = *((_QWORD *)v49 + 4);
      }
      swift_storeEnumTagMultiPayload(v34, v36, 2);
    }
    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        v38 = type metadata accessor for URL(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v38 - 8) + 16))(v34, v35, v38);
        swift_storeEnumTagMultiPayload(v34, v36, 1);
      }
      else
      {
        memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
      }
      v40 = v63;
    }
    v53 = v40[8];
    *(_BYTE *)(v4 + v40[7]) = *((_BYTE *)a2 + v40[7]);
    v54 = (_QWORD *)(v4 + v53);
    v55 = (uint64_t *)((char *)a2 + v53);
    if (*v55)
    {
      v56 = v55[1];
      *v54 = *v55;
      v54[1] = v56;
      swift_retain(v56);
    }
    else
    {
      *(_OWORD *)v54 = *(_OWORD *)v55;
    }
    v57 = v40[9];
    v58 = (_QWORD *)(v4 + v57);
    v59 = (uint64_t *)((char *)a2 + v57);
    if (*v59)
    {
      v60 = v59[1];
      *v58 = *v59;
      v58[1] = v60;
      swift_retain(v60);
    }
    else
    {
      *(_OWORD *)v58 = *(_OWORD *)v59;
    }
  }
  return v4;
}

double destroy for ToolbarActionToggleMenuItem(_QWORD *a1, int *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(char *, uint64_t);
  char *v13;
  uint64_t v14;
  int EnumCaseMultiPayload;
  double result;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  _QWORD *v20;
  _QWORD *v21;

  if ((a1[5] & 1) != 0)
  {
    if (a1[3])
      _s7BooksUI13AnyPagedFrameVwxx_0(a1);
  }
  else
  {
    swift_release(*a1);
  }
  v4 = (_QWORD *)((char *)a1 + a2[5]);
  v5 = sub_5440(&qword_25FAE0);
  if (swift_getEnumCaseMultiPayload(v4, v5) == 1)
  {
    v6 = type metadata accessor for OpaqueMetricsFieldsContext(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v4, v6);
  }
  else
  {
    swift_release(*v4);
  }
  v7 = (char *)a1 + a2[6];
  swift_bridgeObjectRelease(*((_QWORD *)v7 + 1));
  v8 = (int *)type metadata accessor for ToolbarActionMenuItem(0);
  v9 = &v7[v8[5]];
  v10 = type metadata accessor for LocalizerRequest(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(void (**)(char *, uint64_t))(v11 + 8);
  v12(v9, v10);
  _s7BooksUI13AnyPagedFrameVwxx_0(&v7[v8[6]]);
  v13 = &v7[v8[9]];
  v14 = type metadata accessor for ToolbarActionMenuItemButtonType(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v13, v14);
  if (EnumCaseMultiPayload == 2)
  {
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v13, 1, v10))
      v12(v13, v10);
    v18 = sub_5440(&qword_262AA8);
    swift_bridgeObjectRelease(*(_QWORD *)&v13[*(int *)(v18 + 48) + 8]);
    v19 = &v13[*(int *)(v18 + 64)];
    if (*((_QWORD *)v19 + 3))
      _s7BooksUI13AnyPagedFrameVwxx_0(v19);
  }
  else if (EnumCaseMultiPayload == 1)
  {
    v17 = type metadata accessor for URL(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(v13, v17);
  }
  v20 = (_QWORD *)((char *)a1 + a2[8]);
  if (*v20)
    *(_QWORD *)&result = swift_release(v20[1]).n128_u64[0];
  v21 = (_QWORD *)((char *)a1 + a2[9]);
  if (*v21)
    *(_QWORD *)&result = swift_release(v21[1]).n128_u64[0];
  return result;
}

uint64_t initializeWithCopy for ToolbarActionToggleMenuItem(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  int *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t, uint64_t);
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  int EnumCaseMultiPayload;
  uint64_t v36;
  uint64_t v37;
  int *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v60;
  int *v61;

  if ((a2[5] & 1) != 0)
  {
    v6 = a2[3];
    if (v6)
    {
      v7 = a2[4];
      *(_QWORD *)(a1 + 24) = v6;
      *(_QWORD *)(a1 + 32) = v7;
      (**(void (***)(uint64_t, uint64_t *))(v6 - 8))(a1, a2);
    }
    else
    {
      v9 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v9;
      *(_QWORD *)(a1 + 32) = a2[4];
    }
    *(_BYTE *)(a1 + 40) = 1;
  }
  else
  {
    v8 = *a2;
    *(_QWORD *)a1 = *a2;
    *(_BYTE *)(a1 + 40) = 0;
    swift_retain(v8);
  }
  v10 = a3[5];
  v11 = (uint64_t *)(a1 + v10);
  v12 = (uint64_t *)((char *)a2 + v10);
  v13 = sub_5440(&qword_25FAE0);
  if (swift_getEnumCaseMultiPayload(v12, v13) == 1)
  {
    v14 = type metadata accessor for OpaqueMetricsFieldsContext(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v11, v12, v14);
    v15 = v11;
    v16 = v13;
    v17 = 1;
  }
  else
  {
    v18 = *v12;
    *v11 = *v12;
    swift_retain(v18);
    v15 = v11;
    v16 = v13;
    v17 = 0;
  }
  swift_storeEnumTagMultiPayload(v15, v16, v17);
  v61 = a3;
  v19 = a3[6];
  v20 = (_QWORD *)(a1 + v19);
  v21 = (uint64_t)a2 + v19;
  v22 = *(uint64_t *)((char *)a2 + v19 + 8);
  *v20 = *(uint64_t *)((char *)a2 + v19);
  v20[1] = v22;
  v23 = (int *)type metadata accessor for ToolbarActionMenuItem(0);
  v24 = v23[5];
  v25 = (char *)v20 + v24;
  v26 = v21 + v24;
  v27 = type metadata accessor for LocalizerRequest(0);
  v60 = *(_QWORD *)(v27 - 8);
  v28 = *(void (**)(char *, uint64_t, uint64_t))(v60 + 16);
  swift_bridgeObjectRetain(v22);
  v28(v25, v26, v27);
  v29 = v23[6];
  v30 = *(_OWORD *)(v21 + v29 + 24);
  *(_OWORD *)((char *)v20 + v29 + 24) = v30;
  (**(void (***)(void))(v30 - 8))();
  *((_BYTE *)v20 + v23[7]) = *(_BYTE *)(v21 + v23[7]);
  *((_BYTE *)v20 + v23[8]) = *(_BYTE *)(v21 + v23[8]);
  v31 = v23[9];
  v32 = (char *)v20 + v31;
  v33 = (char *)(v21 + v31);
  v34 = type metadata accessor for ToolbarActionMenuItemButtonType(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v33, v34);
  if (EnumCaseMultiPayload == 2)
  {
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v60 + 48))(v33, 1, v27))
    {
      v37 = sub_5440(&qword_25E0C8);
      memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
    }
    else
    {
      v28(v32, (uint64_t)v33, v27);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v60 + 56))(v32, 0, 1, v27);
    }
    v38 = v61;
    v39 = sub_5440(&qword_262AA8);
    v40 = *(int *)(v39 + 48);
    v41 = &v32[v40];
    v42 = &v33[v40];
    v44 = *(_QWORD *)v42;
    v43 = *((_QWORD *)v42 + 1);
    *(_QWORD *)v41 = v44;
    *((_QWORD *)v41 + 1) = v43;
    v45 = *(int *)(v39 + 64);
    v46 = &v32[v45];
    v47 = &v33[v45];
    v48 = *((_QWORD *)v47 + 3);
    swift_bridgeObjectRetain(v43);
    if (v48)
    {
      v49 = *((_QWORD *)v47 + 4);
      *((_QWORD *)v46 + 3) = v48;
      *((_QWORD *)v46 + 4) = v49;
      (**(void (***)(char *, char *, uint64_t))(v48 - 8))(v46, v47, v48);
    }
    else
    {
      v50 = *((_OWORD *)v47 + 1);
      *(_OWORD *)v46 = *(_OWORD *)v47;
      *((_OWORD *)v46 + 1) = v50;
      *((_QWORD *)v46 + 4) = *((_QWORD *)v47 + 4);
    }
    swift_storeEnumTagMultiPayload(v32, v34, 2);
  }
  else
  {
    if (EnumCaseMultiPayload == 1)
    {
      v36 = type metadata accessor for URL(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v36 - 8) + 16))(v32, v33, v36);
      swift_storeEnumTagMultiPayload(v32, v34, 1);
    }
    else
    {
      memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
    }
    v38 = v61;
  }
  v51 = v38[8];
  *(_BYTE *)(a1 + v38[7]) = *((_BYTE *)a2 + v38[7]);
  v52 = (_QWORD *)(a1 + v51);
  v53 = (uint64_t *)((char *)a2 + v51);
  if (*v53)
  {
    v54 = v53[1];
    *v52 = *v53;
    v52[1] = v54;
    swift_retain(v54);
  }
  else
  {
    *(_OWORD *)v52 = *(_OWORD *)v53;
  }
  v55 = v38[9];
  v56 = (_QWORD *)(a1 + v55);
  v57 = (uint64_t *)((char *)a2 + v55);
  if (*v57)
  {
    v58 = v57[1];
    *v56 = *v57;
    v56[1] = v58;
    swift_retain(v58);
  }
  else
  {
    *(_OWORD *)v56 = *(_OWORD *)v57;
  }
  return a1;
}

uint64_t assignWithCopy for ToolbarActionToggleMenuItem(uint64_t a1, __int128 *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  int EnumCaseMultiPayload;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;

  if ((__int128 *)a1 != a2)
  {
    sub_B414(a1, &qword_25FAE8);
    if ((*((_BYTE *)a2 + 40) & 1) != 0)
    {
      v6 = *((_QWORD *)a2 + 3);
      if (v6)
      {
        *(_QWORD *)(a1 + 24) = v6;
        *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
        (**(void (***)(uint64_t, __int128 *))(v6 - 8))(a1, a2);
      }
      else
      {
        v8 = *a2;
        v9 = a2[1];
        *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
        *(_OWORD *)a1 = v8;
        *(_OWORD *)(a1 + 16) = v9;
      }
      *(_BYTE *)(a1 + 40) = 1;
    }
    else
    {
      v7 = *(_QWORD *)a2;
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_BYTE *)(a1 + 40) = 0;
      swift_retain(v7);
    }
    v10 = a3[5];
    v11 = (uint64_t *)(a1 + v10);
    v12 = (uint64_t *)((char *)a2 + v10);
    sub_B414(a1 + v10, &qword_25FAE0);
    v13 = sub_5440(&qword_25FAE0);
    if (swift_getEnumCaseMultiPayload(v12, v13) == 1)
    {
      v14 = type metadata accessor for OpaqueMetricsFieldsContext(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v11, v12, v14);
      v15 = v11;
      v16 = v13;
      v17 = 1;
    }
    else
    {
      v18 = *v12;
      *v11 = *v12;
      swift_retain(v18);
      v15 = v11;
      v16 = v13;
      v17 = 0;
    }
    swift_storeEnumTagMultiPayload(v15, v16, v17);
  }
  v19 = a3[6];
  v20 = (_QWORD *)(a1 + v19);
  v21 = (uint64_t)a2 + v19;
  *v20 = *(_QWORD *)((char *)a2 + v19);
  v22 = *(_QWORD *)((char *)a2 + v19 + 8);
  v23 = *(_QWORD *)(a1 + v19 + 8);
  v20[1] = v22;
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRelease(v23);
  v24 = (int *)type metadata accessor for ToolbarActionMenuItem(0);
  v25 = v24[5];
  v26 = (char *)v20 + v25;
  v27 = v21 + v25;
  v28 = type metadata accessor for LocalizerRequest(0);
  v29 = *(_QWORD *)(v28 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v29 + 24))(v26, v27, v28);
  sub_142F8((_QWORD *)((char *)v20 + v24[6]), (_QWORD *)(v21 + v24[6]));
  *((_BYTE *)v20 + v24[7]) = *(_BYTE *)(v21 + v24[7]);
  *((_BYTE *)v20 + v24[8]) = *(_BYTE *)(v21 + v24[8]);
  if ((__int128 *)a1 != a2)
  {
    v30 = v24[9];
    v31 = (char *)v20 + v30;
    v32 = (char *)(v21 + v30);
    sub_F6A4C((uint64_t)v20 + v30);
    v33 = type metadata accessor for ToolbarActionMenuItemButtonType(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v32, v33);
    if (EnumCaseMultiPayload == 2)
    {
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v32, 1, v28))
      {
        v39 = sub_5440(&qword_25E0C8);
        memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v29 + 16))(v31, v32, v28);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v31, 0, 1, v28);
      }
      v40 = sub_5440(&qword_262AA8);
      v41 = *(int *)(v40 + 48);
      v42 = &v31[v41];
      v43 = &v32[v41];
      *(_QWORD *)v42 = *(_QWORD *)v43;
      v44 = *((_QWORD *)v43 + 1);
      *((_QWORD *)v42 + 1) = v44;
      v45 = *(int *)(v40 + 64);
      v46 = &v31[v45];
      v47 = &v32[v45];
      v48 = *((_QWORD *)v47 + 3);
      swift_bridgeObjectRetain(v44);
      if (v48)
      {
        *((_QWORD *)v46 + 3) = v48;
        *((_QWORD *)v46 + 4) = *((_QWORD *)v47 + 4);
        (**(void (***)(char *, char *, uint64_t))(v48 - 8))(v46, v47, v48);
      }
      else
      {
        v49 = *(_OWORD *)v47;
        v50 = *((_OWORD *)v47 + 1);
        *((_QWORD *)v46 + 4) = *((_QWORD *)v47 + 4);
        *(_OWORD *)v46 = v49;
        *((_OWORD *)v46 + 1) = v50;
      }
      v36 = v31;
      v37 = v33;
      v38 = 2;
    }
    else
    {
      if (EnumCaseMultiPayload != 1)
      {
        memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
        goto LABEL_25;
      }
      v35 = type metadata accessor for URL(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v35 - 8) + 16))(v31, v32, v35);
      v36 = v31;
      v37 = v33;
      v38 = 1;
    }
    swift_storeEnumTagMultiPayload(v36, v37, v38);
  }
LABEL_25:
  *(_BYTE *)(a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
  v51 = a3[8];
  v52 = (_QWORD *)(a1 + v51);
  v53 = (uint64_t)a2 + v51;
  v54 = *(_QWORD *)(a1 + v51);
  v55 = *(_QWORD *)((char *)a2 + v51);
  if (v54)
  {
    if (v55)
    {
      v56 = *(_QWORD *)(v53 + 8);
      v57 = v52[1];
      *v52 = v55;
      v52[1] = v56;
      swift_retain(v56);
      swift_release(v57);
      goto LABEL_32;
    }
    swift_release(v52[1]);
  }
  else if (v55)
  {
    v58 = *(_QWORD *)(v53 + 8);
    *v52 = v55;
    v52[1] = v58;
    swift_retain(v58);
    goto LABEL_32;
  }
  *(_OWORD *)v52 = *(_OWORD *)v53;
LABEL_32:
  v59 = a3[9];
  v60 = (_QWORD *)(a1 + v59);
  v61 = (uint64_t *)((char *)a2 + v59);
  v62 = *(_QWORD *)(a1 + v59);
  v63 = *v61;
  if (!v62)
  {
    if (v63)
    {
      v66 = v61[1];
      *v60 = v63;
      v60[1] = v66;
      swift_retain(v66);
      return a1;
    }
LABEL_38:
    *(_OWORD *)v60 = *(_OWORD *)v61;
    return a1;
  }
  if (!v63)
  {
    swift_release(v60[1]);
    goto LABEL_38;
  }
  v64 = v61[1];
  v65 = v60[1];
  *v60 = v63;
  v60[1] = v64;
  swift_retain(v64);
  swift_release(v65);
  return a1;
}

uint64_t sub_F6A4C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ToolbarActionMenuItemButtonType(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

_OWORD *initializeWithTake for ToolbarActionToggleMenuItem(_OWORD *a1, _OWORD *a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  int *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, char *, uint64_t);
  uint64_t v22;
  char *v23;
  char *v24;
  __int128 v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  int EnumCaseMultiPayload;
  uint64_t v31;
  uint64_t v32;
  int *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  __int128 v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  int *v50;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  *(_OWORD *)((char *)a1 + 25) = *(_OWORD *)((char *)a2 + 25);
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = sub_5440(&qword_25FAE0);
  if (swift_getEnumCaseMultiPayload(v9, v10) == 1)
  {
    v11 = type metadata accessor for OpaqueMetricsFieldsContext(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v8, v9, v11);
    swift_storeEnumTagMultiPayload(v8, v10, 1);
  }
  else
  {
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  v50 = a3;
  v12 = a3[6];
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  *(_OWORD *)((char *)a1 + v12) = *(_OWORD *)((char *)a2 + v12);
  v15 = (int *)type metadata accessor for ToolbarActionMenuItem(0);
  v16 = v15[5];
  v17 = &v13[v16];
  v18 = &v14[v16];
  v19 = type metadata accessor for LocalizerRequest(0);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = *(void (**)(char *, char *, uint64_t))(v20 + 32);
  v21(v17, v18, v19);
  v22 = v15[6];
  v23 = &v13[v22];
  v24 = &v14[v22];
  v25 = *((_OWORD *)v24 + 1);
  *(_OWORD *)v23 = *(_OWORD *)v24;
  *((_OWORD *)v23 + 1) = v25;
  *((_QWORD *)v23 + 4) = *((_QWORD *)v24 + 4);
  v13[v15[7]] = v14[v15[7]];
  v13[v15[8]] = v14[v15[8]];
  v26 = v15[9];
  v27 = &v13[v26];
  v28 = &v14[v26];
  v29 = type metadata accessor for ToolbarActionMenuItemButtonType(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v28, v29);
  if (EnumCaseMultiPayload == 2)
  {
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v28, 1, v19))
    {
      v32 = sub_5440(&qword_25E0C8);
      memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    }
    else
    {
      v21(v27, v28, v19);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v27, 0, 1, v19);
    }
    v33 = v50;
    v34 = sub_5440(&qword_262AA8);
    *(_OWORD *)&v27[*(int *)(v34 + 48)] = *(_OWORD *)&v28[*(int *)(v34 + 48)];
    v35 = *(int *)(v34 + 64);
    v36 = &v27[v35];
    v37 = &v28[v35];
    *((_QWORD *)v36 + 4) = *((_QWORD *)v37 + 4);
    v38 = *((_OWORD *)v37 + 1);
    *(_OWORD *)v36 = *(_OWORD *)v37;
    *((_OWORD *)v36 + 1) = v38;
    swift_storeEnumTagMultiPayload(v27, v29, 2);
  }
  else
  {
    if (EnumCaseMultiPayload == 1)
    {
      v31 = type metadata accessor for URL(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v31 - 8) + 32))(v27, v28, v31);
      swift_storeEnumTagMultiPayload(v27, v29, 1);
    }
    else
    {
      memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    }
    v33 = v50;
  }
  v39 = v33[8];
  *((_BYTE *)a1 + v33[7]) = *((_BYTE *)a2 + v33[7]);
  v40 = (_QWORD *)((char *)a1 + v39);
  v41 = (uint64_t *)((char *)a2 + v39);
  v42 = *v41;
  if (*v41)
  {
    v43 = v41[1];
    *v40 = v42;
    v40[1] = v43;
  }
  else
  {
    *(_OWORD *)v40 = *(_OWORD *)v41;
  }
  v44 = v33[9];
  v45 = (_QWORD *)((char *)a1 + v44);
  v46 = (uint64_t *)((char *)a2 + v44);
  v47 = *v46;
  if (*v46)
  {
    v48 = v46[1];
    *v45 = v47;
    v45[1] = v48;
  }
  else
  {
    *(_OWORD *)v45 = *(_OWORD *)v46;
  }
  return a1;
}

_OWORD *assignWithTake for ToolbarActionToggleMenuItem(_OWORD *a1, _OWORD *a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  __int128 v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  int EnumCaseMultiPayload;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  __int128 v41;
  uint64_t v42;
  _QWORD *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  if (a1 != a2)
  {
    sub_B414((uint64_t)a1, &qword_25FAE8);
    v6 = a2[1];
    *a1 = *a2;
    a1[1] = v6;
    *(_OWORD *)((char *)a1 + 25) = *(_OWORD *)((char *)a2 + 25);
    v7 = a3[5];
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    sub_B414((uint64_t)a1 + v7, &qword_25FAE0);
    v10 = sub_5440(&qword_25FAE0);
    if (swift_getEnumCaseMultiPayload(v9, v10) == 1)
    {
      v11 = type metadata accessor for OpaqueMetricsFieldsContext(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v8, v9, v11);
      swift_storeEnumTagMultiPayload(v8, v10, 1);
    }
    else
    {
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    }
  }
  v12 = a3[6];
  v13 = (_QWORD *)((char *)a1 + v12);
  v14 = (char *)a2 + v12;
  v15 = *(_QWORD *)((char *)a2 + v12 + 8);
  v16 = *(_QWORD *)((char *)a1 + v12 + 8);
  *v13 = *(_QWORD *)((char *)a2 + v12);
  v13[1] = v15;
  swift_bridgeObjectRelease(v16);
  v17 = (int *)type metadata accessor for ToolbarActionMenuItem(0);
  v18 = v17[5];
  v19 = (char *)v13 + v18;
  v20 = &v14[v18];
  v21 = type metadata accessor for LocalizerRequest(0);
  v22 = *(_QWORD *)(v21 - 8);
  (*(void (**)(char *, char *, uint64_t))(v22 + 40))(v19, v20, v21);
  v23 = v17[6];
  v24 = (char *)v13 + v23;
  v25 = &v14[v23];
  _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)((char *)v13 + v23));
  v26 = *((_OWORD *)v25 + 1);
  *(_OWORD *)v24 = *(_OWORD *)v25;
  *((_OWORD *)v24 + 1) = v26;
  *((_QWORD *)v24 + 4) = *((_QWORD *)v25 + 4);
  *((_BYTE *)v13 + v17[7]) = v14[v17[7]];
  *((_BYTE *)v13 + v17[8]) = v14[v17[8]];
  if (a1 != a2)
  {
    v27 = v17[9];
    v28 = (char *)v13 + v27;
    v29 = &v14[v27];
    sub_F6A4C((uint64_t)v13 + v27);
    v30 = type metadata accessor for ToolbarActionMenuItemButtonType(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v29, v30);
    if (EnumCaseMultiPayload == 2)
    {
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v29, 1, v21))
      {
        v36 = sub_5440(&qword_25E0C8);
        memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v28, v29, v21);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v28, 0, 1, v21);
      }
      v37 = sub_5440(&qword_262AA8);
      *(_OWORD *)&v28[*(int *)(v37 + 48)] = *(_OWORD *)&v29[*(int *)(v37 + 48)];
      v38 = *(int *)(v37 + 64);
      v39 = &v28[v38];
      v40 = &v29[v38];
      *((_QWORD *)v39 + 4) = *((_QWORD *)v40 + 4);
      v41 = *((_OWORD *)v40 + 1);
      *(_OWORD *)v39 = *(_OWORD *)v40;
      *((_OWORD *)v39 + 1) = v41;
      v33 = v28;
      v34 = v30;
      v35 = 2;
    }
    else
    {
      if (EnumCaseMultiPayload != 1)
      {
        memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
        goto LABEL_15;
      }
      v32 = type metadata accessor for URL(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v32 - 8) + 32))(v28, v29, v32);
      v33 = v28;
      v34 = v30;
      v35 = 1;
    }
    swift_storeEnumTagMultiPayload(v33, v34, v35);
  }
LABEL_15:
  v42 = a3[8];
  *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
  v43 = (_QWORD *)((char *)a1 + v42);
  v44 = (char *)a2 + v42;
  v45 = *(_QWORD *)((char *)a2 + v42);
  if (*(_QWORD *)((char *)a1 + v42))
  {
    if (v45)
    {
      v46 = *((_QWORD *)v44 + 1);
      v47 = v43[1];
      *v43 = v45;
      v43[1] = v46;
      swift_release(v47);
      goto LABEL_22;
    }
    swift_release(v43[1]);
  }
  else if (v45)
  {
    v48 = *((_QWORD *)v44 + 1);
    *v43 = v45;
    v43[1] = v48;
    goto LABEL_22;
  }
  *(_OWORD *)v43 = *(_OWORD *)v44;
LABEL_22:
  v49 = a3[9];
  v50 = (_QWORD *)((char *)a1 + v49);
  v51 = (uint64_t *)((char *)a2 + v49);
  v52 = *(_QWORD *)((char *)a1 + v49);
  v53 = *v51;
  if (!v52)
  {
    if (v53)
    {
      v56 = v51[1];
      *v50 = v53;
      v50[1] = v56;
      return a1;
    }
LABEL_28:
    *(_OWORD *)v50 = *(_OWORD *)v51;
    return a1;
  }
  if (!v53)
  {
    swift_release(v50[1]);
    goto LABEL_28;
  }
  v54 = v51[1];
  v55 = v50[1];
  *v50 = v53;
  v50[1] = v54;
  swift_release(v55);
  return a1;
}

uint64_t getEnumTagSinglePayload for ToolbarActionToggleMenuItem(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_F70E8);
}

uint64_t sub_F70E8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v12;
  int v13;

  v6 = sub_5440(&qword_264F30);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = a3[5];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v10 = type metadata accessor for ToolbarActionMenuItem(0);
  v7 = *(_QWORD *)(v10 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v10;
    v9 = a3[6];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v12 = *(_QWORD *)(a1 + a3[8]);
  if (v12 >= 0xFFFFFFFF)
    LODWORD(v12) = -1;
  v13 = v12 - 1;
  if (v13 < 0)
    v13 = -1;
  return (v13 + 1);
}

uint64_t storeEnumTagSinglePayload for ToolbarActionToggleMenuItem(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_F71A8);
}

uint64_t sub_F71A8(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  v8 = sub_5440(&qword_264F30);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = a4[5];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
  }
  result = type metadata accessor for ToolbarActionMenuItem(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = a4[6];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
  }
  *(_QWORD *)(a1 + a4[8]) = a2;
  return result;
}

void sub_F724C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[6];

  v6[0] = ")";
  sub_F0D84(319);
  if (v3 <= 0x3F)
  {
    v6[1] = *(_QWORD *)(v2 - 8) + 64;
    v4 = type metadata accessor for ToolbarActionMenuItem(319);
    if (v5 <= 0x3F)
    {
      v6[2] = *(_QWORD *)(v4 - 8) + 64;
      v6[3] = &unk_1EBAE8;
      v6[4] = &unk_1EBB00;
      v6[5] = &unk_1EBB00;
      swift_initStructMetadata(a1, 256, 6, v6, a1 + 16);
    }
  }
}

unint64_t sub_F72F4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_265280;
  if (!qword_265280)
  {
    v1 = sub_7EF8(&qword_2651D8);
    sub_7FD8(&qword_265288, &qword_2651D0, (uint64_t)&protocol conformance descriptor for Toggle<A>);
    sub_7FD8(&qword_25FE80, &qword_25FE88, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyTransformModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_265280);
  }
  return result;
}

void *ListItemMetadataView.init(model:)@<X0>(const void *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  char *v5;

  *a2 = swift_getKeyPath(&unk_1EBB20);
  v4 = sub_5440(&qword_25F200);
  swift_storeEnumTagMultiPayload(a2, v4, 0);
  v5 = (char *)a2 + *(int *)(type metadata accessor for ListItemMetadataView(0) + 20);
  return memcpy(v5, a1, 0x118uLL);
}

uint64_t type metadata accessor for ListItemMetadataView(uint64_t a1)
{
  uint64_t result;

  result = qword_2652E8;
  if (!qword_2652E8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ListItemMetadataView);
  return result;
}

double ListItemMetadataView.body.getter@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  double result;
  __int128 v11;
  _OWORD v12[7];
  _OWORD v13[2];
  _OWORD v14[9];

  v2 = type metadata accessor for SizeConstants.Spacing(0);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = static HorizontalAlignment.leading.getter(v3);
  _s7BooksUI35ListItemEditionsDescriptorExternalsV7spacingAA13SizeConstantsV7SpacingVvg_0((uint64_t)v5);
  sub_F7550((uint64_t)v5);
  sub_F758C((uint64_t)v12);
  *(_OWORD *)((char *)&v14[6] + 7) = v12[6];
  *(_OWORD *)((char *)&v14[5] + 7) = v12[5];
  *(_OWORD *)((char *)&v14[2] + 7) = v12[2];
  *(_OWORD *)((char *)&v14[1] + 7) = v12[1];
  *(_OWORD *)((char *)&v14[7] + 7) = v13[0];
  v14[8] = *(_OWORD *)((char *)v13 + 9);
  *(_OWORD *)((char *)&v14[3] + 7) = v12[3];
  *(_OWORD *)((char *)&v14[4] + 7) = v12[4];
  *(_OWORD *)((char *)v14 + 7) = v12[0];
  v7 = v14[4];
  *(_OWORD *)(a1 + 97) = v14[5];
  v8 = v14[7];
  *(_OWORD *)(a1 + 113) = v14[6];
  *(_OWORD *)(a1 + 129) = v8;
  *(_OWORD *)(a1 + 145) = v14[8];
  v9 = v14[0];
  *(_OWORD *)(a1 + 33) = v14[1];
  result = *(double *)&v14[2];
  v11 = v14[3];
  *(_OWORD *)(a1 + 49) = v14[2];
  *(_OWORD *)(a1 + 65) = v11;
  *(_OWORD *)(a1 + 81) = v7;
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = 0x4000000000000000;
  *(_BYTE *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 17) = v9;
  return result;
}

uint64_t sub_F7550(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for SizeConstants.Spacing(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_F758C(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  double v13;
  double v14;
  double v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  double v26;
  double v27;
  double v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v2 = type metadata accessor for SizeConstants.Spacing(0);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v7 = (char *)&v34 - v6;
  v35 = sub_F7724();
  v34 = sub_F7868();
  v8 = sub_F79B0();
  v9 = sub_F7AF8();
  v10 = sub_F7C40();
  v11 = static Edge.Set.top.getter(v10);
  _s7BooksUI35ListItemEditionsDescriptorExternalsV7spacingAA13SizeConstantsV7SpacingVvg_0((uint64_t)v7);
  sub_F7550((uint64_t)v7);
  _s7BooksUI35ListItemEditionsDescriptorExternalsV7spacingAA13SizeConstantsV7SpacingVvg_0((uint64_t)v5);
  v12 = sub_F7550((uint64_t)v5);
  v16 = EdgeInsets.init(_all:)(v12, 6.0, v13, v14, v15);
  v18 = v17;
  v20 = v19;
  v22 = v21;
  v23 = sub_F7D88();
  v24 = static Edge.Set.top.getter(v23);
  _s7BooksUI35ListItemEditionsDescriptorExternalsV7spacingAA13SizeConstantsV7SpacingVvg_0((uint64_t)v7);
  sub_F7550((uint64_t)v7);
  _s7BooksUI35ListItemEditionsDescriptorExternalsV7spacingAA13SizeConstantsV7SpacingVvg_0((uint64_t)v5);
  v25 = sub_F7550((uint64_t)v5);
  v29 = EdgeInsets.init(_all:)(v25, 6.0, v26, v27, v28);
  v30 = v34;
  *(_QWORD *)a1 = v35;
  *(_QWORD *)(a1 + 8) = v30;
  *(_QWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 24) = v9;
  *(_QWORD *)(a1 + 32) = v10;
  *(_BYTE *)(a1 + 40) = v11;
  *(double *)(a1 + 48) = v16;
  *(_QWORD *)(a1 + 56) = v18;
  *(_QWORD *)(a1 + 64) = v20;
  *(_QWORD *)(a1 + 72) = v22;
  *(_BYTE *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = v23;
  *(_BYTE *)(a1 + 96) = v24;
  *(double *)(a1 + 104) = v29;
  *(_QWORD *)(a1 + 112) = v31;
  *(_QWORD *)(a1 + 120) = v32;
  *(_QWORD *)(a1 + 128) = v33;
  *(_BYTE *)(a1 + 136) = 0;
}

uint64_t sub_F7714(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &opaque type descriptor for <<opaque return type of ListItemMetadataView.body>>, 1);
}

uint64_t sub_F7724()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t WitnessTable;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v15[5];
  _QWORD v16[3];
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;

  v1 = type metadata accessor for ListItemMetadataView(0);
  sub_B3D0(v0 + *(int *)(v1 + 20), (uint64_t)&v19, &qword_25E0E8);
  if (!v20)
    return 0;
  sub_AC68(&v19, (uint64_t)v16);
  v2 = v17;
  v3 = v18;
  sub_5480(v16, v17);
  v5 = type metadata accessor for ListItemMetadataEyebrowView(0, v2, v3, v4);
  v15[3] = v5;
  WitnessTable = swift_getWitnessTable(&unk_1EC8A0, v5);
  v15[4] = WitnessTable;
  v7 = sub_C404(v15);
  v8 = sub_F8E34(v2, v3, (uint64_t (*)(char *, uint64_t, uint64_t))sub_108050);
  __chkstk_darwin(v8);
  v10 = (char *)&v15[-1] - v9;
  (*(void (**)(char *, _QWORD *, uint64_t))(v11 + 16))((char *)&v15[-1] - v9, v7, v5);
  v12 = AnyView.init<A>(_:)(v10, v5, WitnessTable);
  _s7BooksUI13AnyPagedFrameVwxx_0(v15);
  _s7BooksUI13AnyPagedFrameVwxx_0(v16);
  return v12;
}

uint64_t sub_F7868()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t WitnessTable;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v15[5];
  _QWORD v16[3];
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;

  v1 = type metadata accessor for ListItemMetadataView(0);
  sub_B3D0(v0 + *(int *)(v1 + 20) + 40, (uint64_t)&v19, &qword_25E0F0);
  if (!v20)
    return 0;
  sub_AC68(&v19, (uint64_t)v16);
  v2 = v17;
  v3 = v18;
  sub_5480(v16, v17);
  v5 = type metadata accessor for ListItemMetadataTitleLockupView(0, v2, v3, v4);
  v15[3] = v5;
  WitnessTable = swift_getWitnessTable(&unk_1E4880, v5);
  v15[4] = WitnessTable;
  v7 = sub_C404(v15);
  v8 = sub_F8E34(v2, v3, (uint64_t (*)(char *, uint64_t, uint64_t))sub_5FE90);
  __chkstk_darwin(v8);
  v10 = (char *)&v15[-1] - v9;
  (*(void (**)(char *, _QWORD *, uint64_t))(v11 + 16))((char *)&v15[-1] - v9, v7, v5);
  v12 = AnyView.init<A>(_:)(v10, v5, WitnessTable);
  _s7BooksUI13AnyPagedFrameVwxx_0(v15);
  _s7BooksUI13AnyPagedFrameVwxx_0(v16);
  return v12;
}

uint64_t sub_F79B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t WitnessTable;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v15[5];
  _QWORD v16[3];
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;

  v1 = type metadata accessor for ListItemMetadataView(0);
  sub_B3D0(v0 + *(int *)(v1 + 20) + 80, (uint64_t)&v19, &qword_25E0F8);
  if (!v20)
    return 0;
  sub_AC68(&v19, (uint64_t)v16);
  v2 = v17;
  v3 = v18;
  sub_5480(v16, v17);
  v5 = type metadata accessor for ListItemMetadataFormatAndDescriptorView(0, v2, v3, v4);
  v15[3] = v5;
  WitnessTable = swift_getWitnessTable(&unk_1F1898, v5);
  v15[4] = WitnessTable;
  v7 = sub_C404(v15);
  v8 = sub_F8E34(v2, v3, (uint64_t (*)(char *, uint64_t, uint64_t))sub_15C5C4);
  __chkstk_darwin(v8);
  v10 = (char *)&v15[-1] - v9;
  (*(void (**)(char *, _QWORD *, uint64_t))(v11 + 16))((char *)&v15[-1] - v9, v7, v5);
  v12 = AnyView.init<A>(_:)(v10, v5, WitnessTable);
  _s7BooksUI13AnyPagedFrameVwxx_0(v15);
  _s7BooksUI13AnyPagedFrameVwxx_0(v16);
  return v12;
}

uint64_t sub_F7AF8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t WitnessTable;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v15[5];
  _QWORD v16[3];
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;

  v1 = type metadata accessor for ListItemMetadataView(0);
  sub_B3D0(v0 + *(int *)(v1 + 20) + 160, (uint64_t)&v19, &qword_25E100);
  if (!v20)
    return 0;
  sub_AC68(&v19, (uint64_t)v16);
  v2 = v17;
  v3 = v18;
  sub_5480(v16, v17);
  v5 = type metadata accessor for ListItemMetadataFinePrintView(0, v2, v3, v4);
  v15[3] = v5;
  WitnessTable = swift_getWitnessTable(&unk_1F7EF0, v5);
  v15[4] = WitnessTable;
  v7 = sub_C404(v15);
  v8 = sub_F8E34(v2, v3, (uint64_t (*)(char *, uint64_t, uint64_t))sub_1C1394);
  __chkstk_darwin(v8);
  v10 = (char *)&v15[-1] - v9;
  (*(void (**)(char *, _QWORD *, uint64_t))(v11 + 16))((char *)&v15[-1] - v9, v7, v5);
  v12 = AnyView.init<A>(_:)(v10, v5, WitnessTable);
  _s7BooksUI13AnyPagedFrameVwxx_0(v15);
  _s7BooksUI13AnyPagedFrameVwxx_0(v16);
  return v12;
}

uint64_t sub_F7C40()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t WitnessTable;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v15[5];
  _QWORD v16[3];
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;

  v1 = type metadata accessor for ListItemMetadataView(0);
  sub_B3D0(v0 + *(int *)(v1 + 20) + 200, (uint64_t)&v19, &qword_25E108);
  if (!v20)
    return 0;
  sub_AC68(&v19, (uint64_t)v16);
  v2 = v17;
  v3 = v18;
  sub_5480(v16, v17);
  v5 = type metadata accessor for ListItemMetadataSharedWithYouView(0, v2, v3, v4);
  v15[3] = v5;
  WitnessTable = swift_getWitnessTable(&unk_1E9280, v5);
  v15[4] = WitnessTable;
  v7 = sub_C404(v15);
  v8 = sub_F8E34(v2, v3, (uint64_t (*)(char *, uint64_t, uint64_t))sub_C890C);
  __chkstk_darwin(v8);
  v10 = (char *)&v15[-1] - v9;
  (*(void (**)(char *, _QWORD *, uint64_t))(v11 + 16))((char *)&v15[-1] - v9, v7, v5);
  v12 = AnyView.init<A>(_:)(v10, v5, WitnessTable);
  _s7BooksUI13AnyPagedFrameVwxx_0(v15);
  _s7BooksUI13AnyPagedFrameVwxx_0(v16);
  return v12;
}

uint64_t sub_F7D88()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t WitnessTable;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v15[5];
  _QWORD v16[3];
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;

  v1 = type metadata accessor for ListItemMetadataView(0);
  sub_B3D0(v0 + *(int *)(v1 + 20) + 240, (uint64_t)&v19, &qword_25E110);
  if (!v20)
    return 0;
  sub_AC68(&v19, (uint64_t)v16);
  v2 = v17;
  v3 = v18;
  sub_5480(v16, v17);
  v5 = type metadata accessor for ListItemMetadataCreatorDescriptionView(0, v2, v3, v4);
  v15[3] = v5;
  WitnessTable = swift_getWitnessTable(&unk_1E3B48, v5);
  v15[4] = WitnessTable;
  v7 = sub_C404(v15);
  v8 = sub_F8E34(v2, v3, (uint64_t (*)(char *, uint64_t, uint64_t))sub_4CFBC);
  __chkstk_darwin(v8);
  v10 = (char *)&v15[-1] - v9;
  (*(void (**)(char *, _QWORD *, uint64_t))(v11 + 16))((char *)&v15[-1] - v9, v7, v5);
  v12 = AnyView.init<A>(_:)(v10, v5, WitnessTable);
  _s7BooksUI13AnyPagedFrameVwxx_0(v15);
  _s7BooksUI13AnyPagedFrameVwxx_0(v16);
  return v12;
}

uint64_t *initializeBufferWithCopyOfBuffer for ListItemMetadataView(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  _OWORD *v25;
  _OWORD *v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  _OWORD *v30;
  _OWORD *v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  _OWORD *v35;
  _OWORD *v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  _OWORD *v40;
  _OWORD *v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  _OWORD *v45;
  _OWORD *v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  _OWORD *v50;
  _OWORD *v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v17 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v17);
  }
  else
  {
    v7 = sub_5440(&qword_25F200);
    if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
    {
      *(_WORD *)a1 = *(_WORD *)a2;
      v8 = (int *)type metadata accessor for SizeConstants.Environment(0);
      v9 = v8[6];
      v10 = (char *)a1 + v9;
      v11 = (char *)a2 + v9;
      v12 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
      *(uint64_t *)((char *)a1 + v8[7]) = *(uint64_t *)((char *)a2 + v8[7]);
      v13 = v8[8];
      v14 = (char *)a1 + v13;
      v15 = (char *)a2 + v13;
      v14[2] = v15[2];
      *(_WORD *)v14 = *(_WORD *)v15;
      v16 = 1;
    }
    else
    {
      v18 = *a2;
      *a1 = *a2;
      swift_retain(v18);
      v16 = 0;
    }
    swift_storeEnumTagMultiPayload(a1, v7, v16);
    v19 = *(int *)(a3 + 20);
    v20 = (char *)a1 + v19;
    v21 = (char *)a2 + v19;
    v22 = *((_QWORD *)v21 + 3);
    if (v22)
    {
      v23 = *((_QWORD *)v21 + 4);
      *((_QWORD *)v20 + 3) = v22;
      *((_QWORD *)v20 + 4) = v23;
      (**(void (***)(char *, char *))(v22 - 8))(v20, v21);
    }
    else
    {
      v24 = *((_OWORD *)v21 + 1);
      *(_OWORD *)v20 = *(_OWORD *)v21;
      *((_OWORD *)v20 + 1) = v24;
      *((_QWORD *)v20 + 4) = *((_QWORD *)v21 + 4);
    }
    v25 = v20 + 40;
    v26 = v21 + 40;
    v27 = *((_QWORD *)v21 + 8);
    if (v27)
    {
      v28 = *((_QWORD *)v21 + 9);
      *((_QWORD *)v20 + 8) = v27;
      *((_QWORD *)v20 + 9) = v28;
      (**(void (***)(_OWORD *, _OWORD *))(v27 - 8))(v25, v26);
    }
    else
    {
      v29 = *(_OWORD *)(v21 + 56);
      *v25 = *v26;
      *(_OWORD *)(v20 + 56) = v29;
      *((_QWORD *)v20 + 9) = *((_QWORD *)v21 + 9);
    }
    v30 = v20 + 80;
    v31 = v21 + 80;
    v32 = *((_QWORD *)v21 + 13);
    if (v32)
    {
      v33 = *((_QWORD *)v21 + 14);
      *((_QWORD *)v20 + 13) = v32;
      *((_QWORD *)v20 + 14) = v33;
      (**(void (***)(_OWORD *, _OWORD *))(v32 - 8))(v30, v31);
    }
    else
    {
      v34 = *((_OWORD *)v21 + 6);
      *v30 = *v31;
      *((_OWORD *)v20 + 6) = v34;
      *((_QWORD *)v20 + 14) = *((_QWORD *)v21 + 14);
    }
    v35 = v20 + 120;
    v36 = v21 + 120;
    v37 = *((_QWORD *)v21 + 18);
    if (v37)
    {
      v38 = *((_QWORD *)v21 + 19);
      *((_QWORD *)v20 + 18) = v37;
      *((_QWORD *)v20 + 19) = v38;
      (**(void (***)(_OWORD *, _OWORD *))(v37 - 8))(v35, v36);
    }
    else
    {
      v39 = *(_OWORD *)(v21 + 136);
      *v35 = *v36;
      *(_OWORD *)(v20 + 136) = v39;
      *((_QWORD *)v20 + 19) = *((_QWORD *)v21 + 19);
    }
    v40 = v20 + 160;
    v41 = v21 + 160;
    v42 = *((_QWORD *)v21 + 23);
    if (v42)
    {
      v43 = *((_QWORD *)v21 + 24);
      *((_QWORD *)v20 + 23) = v42;
      *((_QWORD *)v20 + 24) = v43;
      (**(void (***)(_OWORD *, _OWORD *))(v42 - 8))(v40, v41);
    }
    else
    {
      v44 = *((_OWORD *)v21 + 11);
      *v40 = *v41;
      *((_OWORD *)v20 + 11) = v44;
      *((_QWORD *)v20 + 24) = *((_QWORD *)v21 + 24);
    }
    v45 = v20 + 200;
    v46 = v21 + 200;
    v47 = *((_QWORD *)v21 + 28);
    if (v47)
    {
      v48 = *((_QWORD *)v21 + 29);
      *((_QWORD *)v20 + 28) = v47;
      *((_QWORD *)v20 + 29) = v48;
      (**(void (***)(_OWORD *, _OWORD *))(v47 - 8))(v45, v46);
    }
    else
    {
      v49 = *(_OWORD *)(v21 + 216);
      *v45 = *v46;
      *(_OWORD *)(v20 + 216) = v49;
      *((_QWORD *)v20 + 29) = *((_QWORD *)v21 + 29);
    }
    v50 = v20 + 240;
    v51 = v21 + 240;
    v52 = *((_QWORD *)v21 + 33);
    if (v52)
    {
      v53 = *((_QWORD *)v21 + 34);
      *((_QWORD *)v20 + 33) = v52;
      *((_QWORD *)v20 + 34) = v53;
      (**(void (***)(_OWORD *, _OWORD *))(v52 - 8))(v50, v51);
    }
    else
    {
      v54 = *((_OWORD *)v21 + 16);
      *v50 = *v51;
      *((_OWORD *)v20 + 16) = v54;
      *((_QWORD *)v20 + 34) = *((_QWORD *)v21 + 34);
    }
  }
  return a1;
}

void destroy for ListItemMetadataView(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = sub_5440(&qword_25F200);
  if (swift_getEnumCaseMultiPayload(a1, v4) == 1)
  {
    v5 = (char *)a1 + *(int *)(type metadata accessor for SizeConstants.Environment(0) + 24);
    v6 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  }
  else
  {
    swift_release(*a1);
  }
  v7 = (_QWORD *)((char *)a1 + *(int *)(a2 + 20));
  if (v7[3])
    _s7BooksUI13AnyPagedFrameVwxx_0(v7);
  if (v7[8])
    _s7BooksUI13AnyPagedFrameVwxx_0(v7 + 5);
  if (v7[13])
    _s7BooksUI13AnyPagedFrameVwxx_0(v7 + 10);
  if (v7[18])
    _s7BooksUI13AnyPagedFrameVwxx_0(v7 + 15);
  if (v7[23])
    _s7BooksUI13AnyPagedFrameVwxx_0(v7 + 20);
  if (v7[28])
    _s7BooksUI13AnyPagedFrameVwxx_0(v7 + 25);
  if (v7[33])
    _s7BooksUI13AnyPagedFrameVwxx_0(v7 + 30);
}

_WORD *initializeWithCopy for ListItemMetadataView(_WORD *a1, _WORD *a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  _OWORD *v23;
  _OWORD *v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  _OWORD *v28;
  _OWORD *v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  _OWORD *v33;
  _OWORD *v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  _OWORD *v38;
  _OWORD *v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  _OWORD *v43;
  _OWORD *v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  _OWORD *v48;
  _OWORD *v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;

  v6 = sub_5440(&qword_25F200);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    *a1 = *a2;
    v7 = (int *)type metadata accessor for SizeConstants.Environment(0);
    v8 = v7[6];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    *(_QWORD *)((char *)a1 + v7[7]) = *(_QWORD *)((char *)a2 + v7[7]);
    v12 = v7[8];
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    v13[2] = v14[2];
    *(_WORD *)v13 = *(_WORD *)v14;
    v15 = 1;
  }
  else
  {
    v16 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    swift_retain(v16);
    v15 = 0;
  }
  swift_storeEnumTagMultiPayload(a1, v6, v15);
  v17 = *(int *)(a3 + 20);
  v18 = (char *)a1 + v17;
  v19 = (char *)a2 + v17;
  v20 = *((_QWORD *)v19 + 3);
  if (v20)
  {
    v21 = *((_QWORD *)v19 + 4);
    *((_QWORD *)v18 + 3) = v20;
    *((_QWORD *)v18 + 4) = v21;
    (**(void (***)(char *, char *))(v20 - 8))(v18, v19);
  }
  else
  {
    v22 = *((_OWORD *)v19 + 1);
    *(_OWORD *)v18 = *(_OWORD *)v19;
    *((_OWORD *)v18 + 1) = v22;
    *((_QWORD *)v18 + 4) = *((_QWORD *)v19 + 4);
  }
  v23 = v18 + 40;
  v24 = v19 + 40;
  v25 = *((_QWORD *)v19 + 8);
  if (v25)
  {
    v26 = *((_QWORD *)v19 + 9);
    *((_QWORD *)v18 + 8) = v25;
    *((_QWORD *)v18 + 9) = v26;
    (**(void (***)(_OWORD *, _OWORD *))(v25 - 8))(v23, v24);
  }
  else
  {
    v27 = *(_OWORD *)(v19 + 56);
    *v23 = *v24;
    *(_OWORD *)(v18 + 56) = v27;
    *((_QWORD *)v18 + 9) = *((_QWORD *)v19 + 9);
  }
  v28 = v18 + 80;
  v29 = v19 + 80;
  v30 = *((_QWORD *)v19 + 13);
  if (v30)
  {
    v31 = *((_QWORD *)v19 + 14);
    *((_QWORD *)v18 + 13) = v30;
    *((_QWORD *)v18 + 14) = v31;
    (**(void (***)(_OWORD *, _OWORD *))(v30 - 8))(v28, v29);
  }
  else
  {
    v32 = *((_OWORD *)v19 + 6);
    *v28 = *v29;
    *((_OWORD *)v18 + 6) = v32;
    *((_QWORD *)v18 + 14) = *((_QWORD *)v19 + 14);
  }
  v33 = v18 + 120;
  v34 = v19 + 120;
  v35 = *((_QWORD *)v19 + 18);
  if (v35)
  {
    v36 = *((_QWORD *)v19 + 19);
    *((_QWORD *)v18 + 18) = v35;
    *((_QWORD *)v18 + 19) = v36;
    (**(void (***)(_OWORD *, _OWORD *))(v35 - 8))(v33, v34);
  }
  else
  {
    v37 = *(_OWORD *)(v19 + 136);
    *v33 = *v34;
    *(_OWORD *)(v18 + 136) = v37;
    *((_QWORD *)v18 + 19) = *((_QWORD *)v19 + 19);
  }
  v38 = v18 + 160;
  v39 = v19 + 160;
  v40 = *((_QWORD *)v19 + 23);
  if (v40)
  {
    v41 = *((_QWORD *)v19 + 24);
    *((_QWORD *)v18 + 23) = v40;
    *((_QWORD *)v18 + 24) = v41;
    (**(void (***)(_OWORD *, _OWORD *))(v40 - 8))(v38, v39);
  }
  else
  {
    v42 = *((_OWORD *)v19 + 11);
    *v38 = *v39;
    *((_OWORD *)v18 + 11) = v42;
    *((_QWORD *)v18 + 24) = *((_QWORD *)v19 + 24);
  }
  v43 = v18 + 200;
  v44 = v19 + 200;
  v45 = *((_QWORD *)v19 + 28);
  if (v45)
  {
    v46 = *((_QWORD *)v19 + 29);
    *((_QWORD *)v18 + 28) = v45;
    *((_QWORD *)v18 + 29) = v46;
    (**(void (***)(_OWORD *, _OWORD *))(v45 - 8))(v43, v44);
  }
  else
  {
    v47 = *(_OWORD *)(v19 + 216);
    *v43 = *v44;
    *(_OWORD *)(v18 + 216) = v47;
    *((_QWORD *)v18 + 29) = *((_QWORD *)v19 + 29);
  }
  v48 = v18 + 240;
  v49 = v19 + 240;
  v50 = *((_QWORD *)v19 + 33);
  if (v50)
  {
    v51 = *((_QWORD *)v19 + 34);
    *((_QWORD *)v18 + 33) = v50;
    *((_QWORD *)v18 + 34) = v51;
    (**(void (***)(_OWORD *, _OWORD *))(v50 - 8))(v48, v49);
  }
  else
  {
    v52 = *((_OWORD *)v19 + 16);
    *v48 = *v49;
    *((_OWORD *)v18 + 16) = v52;
    *((_QWORD *)v18 + 34) = *((_QWORD *)v19 + 34);
  }
  return a1;
}

_BYTE *assignWithCopy for ListItemMetadataView(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  _BYTE *v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  _BYTE *v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;

  if (a1 != a2)
  {
    sub_F88E8((uint64_t)a1);
    v6 = sub_5440(&qword_25F200);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      v7 = (int *)type metadata accessor for SizeConstants.Environment(0);
      v8 = v7[6];
      v9 = &a1[v8];
      v10 = &a2[v8];
      v11 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
      *(_QWORD *)&a1[v7[7]] = *(_QWORD *)&a2[v7[7]];
      v12 = v7[8];
      v13 = &a1[v12];
      v14 = &a2[v12];
      v15 = v14[2];
      *(_WORD *)v13 = *(_WORD *)v14;
      v13[2] = v15;
      v16 = 1;
    }
    else
    {
      v17 = *(_QWORD *)a2;
      *(_QWORD *)a1 = *(_QWORD *)a2;
      swift_retain(v17);
      v16 = 0;
    }
    swift_storeEnumTagMultiPayload(a1, v6, v16);
  }
  v18 = *(int *)(a3 + 20);
  v19 = &a1[v18];
  v20 = &a2[v18];
  v21 = *((_QWORD *)v20 + 3);
  if (*(_QWORD *)&a1[v18 + 24])
  {
    if (v21)
    {
      sub_142F8(v19, v20);
      goto LABEL_13;
    }
    _s7BooksUI13AnyPagedFrameVwxx_0(v19);
  }
  else if (v21)
  {
    *((_QWORD *)v19 + 3) = v21;
    *((_QWORD *)v19 + 4) = *((_QWORD *)v20 + 4);
    (**(void (***)(_BYTE *, _BYTE *))(v21 - 8))(v19, v20);
    goto LABEL_13;
  }
  v22 = *(_OWORD *)v20;
  v23 = *((_OWORD *)v20 + 1);
  *((_QWORD *)v19 + 4) = *((_QWORD *)v20 + 4);
  *(_OWORD *)v19 = v22;
  *((_OWORD *)v19 + 1) = v23;
LABEL_13:
  v24 = *((_QWORD *)v20 + 8);
  if (*((_QWORD *)v19 + 8))
  {
    if (v24)
    {
      sub_142F8((_QWORD *)v19 + 5, (_QWORD *)v20 + 5);
      goto LABEL_20;
    }
    _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)v19 + 5);
  }
  else if (v24)
  {
    *((_QWORD *)v19 + 8) = v24;
    *((_QWORD *)v19 + 9) = *((_QWORD *)v20 + 9);
    (**(void (***)(uint64_t, uint64_t))(v24 - 8))((uint64_t)(v19 + 40), (uint64_t)(v20 + 40));
    goto LABEL_20;
  }
  v25 = *(_OWORD *)(v20 + 40);
  v26 = *(_OWORD *)(v20 + 56);
  *((_QWORD *)v19 + 9) = *((_QWORD *)v20 + 9);
  *(_OWORD *)(v19 + 40) = v25;
  *(_OWORD *)(v19 + 56) = v26;
LABEL_20:
  v27 = *((_QWORD *)v20 + 13);
  if (*((_QWORD *)v19 + 13))
  {
    if (v27)
    {
      sub_142F8((_QWORD *)v19 + 10, (_QWORD *)v20 + 10);
      goto LABEL_27;
    }
    _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)v19 + 10);
  }
  else if (v27)
  {
    *((_QWORD *)v19 + 13) = v27;
    *((_QWORD *)v19 + 14) = *((_QWORD *)v20 + 14);
    (**(void (***)(uint64_t, uint64_t))(v27 - 8))((uint64_t)(v19 + 80), (uint64_t)(v20 + 80));
    goto LABEL_27;
  }
  v28 = *((_OWORD *)v20 + 5);
  v29 = *((_OWORD *)v20 + 6);
  *((_QWORD *)v19 + 14) = *((_QWORD *)v20 + 14);
  *((_OWORD *)v19 + 5) = v28;
  *((_OWORD *)v19 + 6) = v29;
LABEL_27:
  v30 = *((_QWORD *)v20 + 18);
  if (*((_QWORD *)v19 + 18))
  {
    if (v30)
    {
      sub_142F8((_QWORD *)v19 + 15, (_QWORD *)v20 + 15);
      goto LABEL_34;
    }
    _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)v19 + 15);
  }
  else if (v30)
  {
    *((_QWORD *)v19 + 18) = v30;
    *((_QWORD *)v19 + 19) = *((_QWORD *)v20 + 19);
    (**(void (***)(uint64_t, uint64_t))(v30 - 8))((uint64_t)(v19 + 120), (uint64_t)(v20 + 120));
    goto LABEL_34;
  }
  v31 = *(_OWORD *)(v20 + 120);
  v32 = *(_OWORD *)(v20 + 136);
  *((_QWORD *)v19 + 19) = *((_QWORD *)v20 + 19);
  *(_OWORD *)(v19 + 120) = v31;
  *(_OWORD *)(v19 + 136) = v32;
LABEL_34:
  v33 = *((_QWORD *)v20 + 23);
  if (*((_QWORD *)v19 + 23))
  {
    if (v33)
    {
      sub_142F8((_QWORD *)v19 + 20, (_QWORD *)v20 + 20);
      goto LABEL_41;
    }
    _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)v19 + 20);
  }
  else if (v33)
  {
    *((_QWORD *)v19 + 23) = v33;
    *((_QWORD *)v19 + 24) = *((_QWORD *)v20 + 24);
    (**(void (***)(uint64_t, uint64_t))(v33 - 8))((uint64_t)(v19 + 160), (uint64_t)(v20 + 160));
    goto LABEL_41;
  }
  v34 = *((_OWORD *)v20 + 10);
  v35 = *((_OWORD *)v20 + 11);
  *((_QWORD *)v19 + 24) = *((_QWORD *)v20 + 24);
  *((_OWORD *)v19 + 10) = v34;
  *((_OWORD *)v19 + 11) = v35;
LABEL_41:
  v36 = *((_QWORD *)v20 + 28);
  if (*((_QWORD *)v19 + 28))
  {
    if (v36)
    {
      sub_142F8((_QWORD *)v19 + 25, (_QWORD *)v20 + 25);
      goto LABEL_48;
    }
    _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)v19 + 25);
  }
  else if (v36)
  {
    *((_QWORD *)v19 + 28) = v36;
    *((_QWORD *)v19 + 29) = *((_QWORD *)v20 + 29);
    (**(void (***)(uint64_t, uint64_t))(v36 - 8))((uint64_t)(v19 + 200), (uint64_t)(v20 + 200));
    goto LABEL_48;
  }
  v37 = *(_OWORD *)(v20 + 200);
  v38 = *(_OWORD *)(v20 + 216);
  *((_QWORD *)v19 + 29) = *((_QWORD *)v20 + 29);
  *(_OWORD *)(v19 + 200) = v37;
  *(_OWORD *)(v19 + 216) = v38;
LABEL_48:
  v39 = *((_QWORD *)v20 + 33);
  if (!*((_QWORD *)v19 + 33))
  {
    if (v39)
    {
      *((_QWORD *)v19 + 33) = v39;
      *((_QWORD *)v19 + 34) = *((_QWORD *)v20 + 34);
      (**(void (***)(uint64_t, uint64_t))(v39 - 8))((uint64_t)(v19 + 240), (uint64_t)(v20 + 240));
      return a1;
    }
LABEL_54:
    v40 = *((_OWORD *)v20 + 15);
    v41 = *((_OWORD *)v20 + 16);
    *((_QWORD *)v19 + 34) = *((_QWORD *)v20 + 34);
    *((_OWORD *)v19 + 15) = v40;
    *((_OWORD *)v19 + 16) = v41;
    return a1;
  }
  if (!v39)
  {
    _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)v19 + 30);
    goto LABEL_54;
  }
  sub_142F8((_QWORD *)v19 + 30, (_QWORD *)v20 + 30);
  return a1;
}

uint64_t sub_F88E8(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_5440(&qword_25F200);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

_WORD *initializeWithTake for ListItemMetadataView(_WORD *a1, _WORD *a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v6 = sub_5440(&qword_25F200);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    *a1 = *a2;
    v7 = (int *)type metadata accessor for SizeConstants.Environment(0);
    v8 = v7[6];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
    *(_QWORD *)((char *)a1 + v7[7]) = *(_QWORD *)((char *)a2 + v7[7]);
    v12 = v7[8];
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    v13[2] = v14[2];
    *(_WORD *)v13 = *(_WORD *)v14;
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  memcpy((char *)a1 + *(int *)(a3 + 20), (char *)a2 + *(int *)(a3 + 20), 0x118uLL);
  return a1;
}

_WORD *assignWithTake for ListItemMetadataView(_WORD *a1, _WORD *a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;

  if (a1 != a2)
  {
    sub_F88E8((uint64_t)a1);
    v6 = sub_5440(&qword_25F200);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      *a1 = *a2;
      v7 = (int *)type metadata accessor for SizeConstants.Environment(0);
      v8 = v7[6];
      v9 = (char *)a1 + v8;
      v10 = (char *)a2 + v8;
      v11 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
      *(_QWORD *)((char *)a1 + v7[7]) = *(_QWORD *)((char *)a2 + v7[7]);
      v12 = v7[8];
      v13 = (char *)a1 + v12;
      v14 = (char *)a2 + v12;
      v13[2] = v14[2];
      *(_WORD *)v13 = *(_WORD *)v14;
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
  }
  v15 = *(int *)(a3 + 20);
  v16 = (char *)a1 + v15;
  v17 = (char *)a2 + v15;
  if (*(_QWORD *)((char *)a1 + v15 + 24))
    _s7BooksUI13AnyPagedFrameVwxx_0(v16);
  v18 = *((_OWORD *)v17 + 1);
  *(_OWORD *)v16 = *(_OWORD *)v17;
  *((_OWORD *)v16 + 1) = v18;
  *((_QWORD *)v16 + 4) = *((_QWORD *)v17 + 4);
  if (*((_QWORD *)v16 + 8))
    _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)v16 + 5);
  v19 = *(_OWORD *)(v17 + 56);
  *(_OWORD *)(v16 + 40) = *(_OWORD *)(v17 + 40);
  *(_OWORD *)(v16 + 56) = v19;
  *((_QWORD *)v16 + 9) = *((_QWORD *)v17 + 9);
  if (*((_QWORD *)v16 + 13))
    _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)v16 + 10);
  v20 = *((_OWORD *)v17 + 6);
  *((_OWORD *)v16 + 5) = *((_OWORD *)v17 + 5);
  *((_OWORD *)v16 + 6) = v20;
  *((_QWORD *)v16 + 14) = *((_QWORD *)v17 + 14);
  if (*((_QWORD *)v16 + 18))
    _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)v16 + 15);
  v21 = *(_OWORD *)(v17 + 136);
  *(_OWORD *)(v16 + 120) = *(_OWORD *)(v17 + 120);
  *(_OWORD *)(v16 + 136) = v21;
  *((_QWORD *)v16 + 19) = *((_QWORD *)v17 + 19);
  if (*((_QWORD *)v16 + 23))
    _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)v16 + 20);
  v22 = *((_OWORD *)v17 + 11);
  *((_OWORD *)v16 + 10) = *((_OWORD *)v17 + 10);
  *((_OWORD *)v16 + 11) = v22;
  *((_QWORD *)v16 + 24) = *((_QWORD *)v17 + 24);
  if (*((_QWORD *)v16 + 28))
    _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)v16 + 25);
  v23 = *(_OWORD *)(v17 + 216);
  *(_OWORD *)(v16 + 200) = *(_OWORD *)(v17 + 200);
  *(_OWORD *)(v16 + 216) = v23;
  *((_QWORD *)v16 + 29) = *((_QWORD *)v17 + 29);
  if (*((_QWORD *)v16 + 33))
    _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)v16 + 30);
  v24 = *((_OWORD *)v17 + 16);
  *((_OWORD *)v16 + 15) = *((_OWORD *)v17 + 15);
  *((_OWORD *)v16 + 16) = v24;
  *((_QWORD *)v16 + 34) = *((_QWORD *)v17 + 34);
  return a1;
}

uint64_t getEnumTagSinglePayload for ListItemMetadataView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_F8C58);
}

uint64_t sub_F8C58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;

  v6 = sub_5440(&qword_25F220);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 24);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  v10 = v9 - 1;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t storeEnumTagSinglePayload for ListItemMetadataView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_F8CF4);
}

uint64_t sub_F8CF4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_5440(&qword_25F220);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20) + 24) = a2;
  return result;
}

void sub_F8D74(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  sub_A0614(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(v2 - 8) + 64;
    v4[1] = &unk_1EBBC8;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
  }
}

unint64_t sub_F8DE8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_265320;
  if (!qword_265320)
  {
    v1 = sub_7EF8(&qword_265328);
    result = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v1);
    atomic_store(result, (unint64_t *)&qword_265320);
  }
  return result;
}

uint64_t sub_F8E34(uint64_t a1, uint64_t a2, uint64_t (*a3)(char *, uint64_t, uint64_t))
{
  uint64_t v3;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v11;

  __chkstk_darwin(a1);
  v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v8, v3, a1);
  return a3(v8, a1, a2);
}

BOOL LibraryAssetState.isOwned.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 16) < 2u;
}

BOOL LibraryAssetState.isPurchasing.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + 16) == 3;
}

uint64_t LibraryAssetState.isLocal.getter()
{
  uint64_t v0;
  uint64_t v1;
  unsigned int v2;

  v1 = *(_QWORD *)(v0 + 24);
  if (v1)
    v2 = 0;
  else
    v2 = *(unsigned __int8 *)(v0 + 32);
  if (*(_BYTE *)(v0 + 32) == 1 && v1 == 1)
    return 1;
  else
    return v2;
}

void LibraryAssetState.localState.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(v1 + 32);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 24);
  *(_BYTE *)(a1 + 8) = v2;
}

void LibraryAssetState.playState.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 33);
}

double LibraryAssetState.readingProgress.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 40);
}

uint64_t LibraryAssetState.isInWantToRead.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 50);
}

uint64_t LibraryAssetState.isFinished.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 51);
}

uint64_t LibraryAssetState.hasSpecifiedFinishedDate.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 52);
}

uint64_t LibraryAssetState.downloadProgress.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 56);
}

uint64_t LibraryAssetState.isPurchased.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 65);
}

uint64_t LibraryAssetState.isDownloadable.getter()
{
  uint64_t v0;
  uint64_t v1;
  unsigned int v2;

  v1 = *(_QWORD *)(v0 + 24);
  if (v1 == 3)
    v2 = *(unsigned __int8 *)(v0 + 32);
  else
    v2 = 0;
  if (*(_BYTE *)(v0 + 32) == 1 && v1 == 2)
    return 1;
  else
    return v2;
}

BOOL LibraryAssetState.isDownloading.getter()
{
  uint64_t v0;

  return (*(_BYTE *)(v0 + 32) & 1) == 0;
}

uint64_t LibraryAssetState.init(id:ownership:localState:playState:downloadProgress:readingProgress:isInSamples:isLocalSample:isInWantToRead:isFinished:hasSpecifiedFinishedDate:isPurchased:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t *a4@<X3>, char *a5@<X4>, uint64_t a6@<X5>, char a7@<W6>, char a8@<W7>, uint64_t a9@<X8>, double a10@<D0>, char a11, char a12, char a13, char a14, char a15)
{
  char v15;
  uint64_t v16;
  char v17;
  char v18;

  v15 = *a3;
  v16 = *a4;
  v17 = *((_BYTE *)a4 + 8);
  v18 = *a5;
  *(_QWORD *)a9 = result;
  *(_QWORD *)(a9 + 8) = a2;
  *(_BYTE *)(a9 + 16) = v15;
  *(_QWORD *)(a9 + 24) = v16;
  *(_BYTE *)(a9 + 32) = v17;
  *(_BYTE *)(a9 + 33) = v18;
  *(double *)(a9 + 40) = a10;
  *(_BYTE *)(a9 + 48) = a8;
  *(_BYTE *)(a9 + 49) = a11;
  *(_BYTE *)(a9 + 50) = a12;
  *(_BYTE *)(a9 + 51) = a13;
  *(_BYTE *)(a9 + 52) = a14;
  *(_QWORD *)(a9 + 56) = a6;
  *(_BYTE *)(a9 + 64) = a7 & 1;
  *(_BYTE *)(a9 + 65) = a15;
  return result;
}

uint64_t _s7BooksUI17LibraryAssetStateV05LocalE0O2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  double v2;

  v2 = *(double *)a1;
  if (*(_BYTE *)(a1 + 8) == 1)
    return ((uint64_t (*)(void))((char *)&loc_F902C + 4 * byte_1EBBE0[*(_QWORD *)&v2]))();
  if ((*(_BYTE *)(a2 + 8) & 1) != 0)
    return 0;
  return v2 == *(double *)a2;
}

uint64_t sub_F9064@<X0>(uint64_t a1@<X8>)
{
  char v1;
  char v2;

  if (a1 == 2)
    v2 = v1;
  else
    v2 = 0;
  if ((v2 & 1) == 0)
    JUMPOUT(0xF9044);
  return 1;
}

uint64_t sub_F9078@<X0>(uint64_t a1@<X8>)
{
  char v1;
  char v2;

  if (a1 == 3)
    v2 = v1;
  else
    v2 = 0;
  if ((v2 & 1) == 0)
    JUMPOUT(0xF9044);
  return 1;
}

uint64_t sub_F908C@<X0>(unint64_t a1@<X8>)
{
  char v1;
  char v2;

  if (a1 > 3)
    v2 = v1;
  else
    v2 = 0;
  if ((v2 & 1) == 0)
    JUMPOUT(0xF9044);
  return 1;
}

uint64_t sub_F90A0@<X0>(uint64_t a1@<X8>)
{
  char v1;
  char v2;

  if (a1 == 1)
    v2 = v1;
  else
    v2 = 0;
  if ((v2 & 1) == 0)
    JUMPOUT(0xF9044);
  return 1;
}

uint64_t _s7BooksUI17LibraryAssetStateV2eeoiySbAC_ACtFZ_0(double *a1, uint64_t a2)
{
  double v4;
  uint64_t v5;
  int v6;
  double v7;
  int v8;
  int v9;
  double v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  double v16;
  char v17;
  int v18;
  uint64_t v19;
  int v20;
  double v21;
  char v22;
  int v23;
  double v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  double v30;
  int v31;
  int v32;
  uint64_t result;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  char v40;
  int v41;
  char v42;
  char v43;
  char v44;
  int v45;
  double v46;
  char v47;
  double v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;

  v4 = *a1;
  v5 = *((_QWORD *)a1 + 1);
  v6 = *((unsigned __int8 *)a1 + 16);
  v7 = a1[3];
  v8 = *((unsigned __int8 *)a1 + 32);
  v9 = *((unsigned __int8 *)a1 + 33);
  v10 = a1[5];
  v11 = *((unsigned __int8 *)a1 + 48);
  v12 = *((unsigned __int8 *)a1 + 49);
  v13 = *((unsigned __int8 *)a1 + 50);
  v14 = *((unsigned __int8 *)a1 + 51);
  v15 = *((unsigned __int8 *)a1 + 52);
  v16 = a1[7];
  v17 = *((_BYTE *)a1 + 64);
  v18 = *((unsigned __int8 *)a1 + 65);
  v19 = *(_QWORD *)(a2 + 8);
  v20 = *(unsigned __int8 *)(a2 + 16);
  v21 = *(double *)(a2 + 24);
  v22 = *(_BYTE *)(a2 + 32);
  v23 = *(unsigned __int8 *)(a2 + 33);
  v24 = *(double *)(a2 + 40);
  v25 = *(unsigned __int8 *)(a2 + 48);
  v26 = *(unsigned __int8 *)(a2 + 49);
  v27 = *(unsigned __int8 *)(a2 + 50);
  v28 = *(unsigned __int8 *)(a2 + 51);
  v29 = *(unsigned __int8 *)(a2 + 52);
  v30 = *(double *)(a2 + 56);
  v31 = *(unsigned __int8 *)(a2 + 64);
  v32 = *(unsigned __int8 *)(a2 + 65);
  if (*(_QWORD *)&v4 == *(_QWORD *)a2 && v5 == v19)
  {
    if (v6 != v20)
      return 0;
  }
  else
  {
    v45 = *((unsigned __int8 *)a1 + 32);
    v46 = *(double *)(a2 + 24);
    v47 = *(_BYTE *)(a2 + 32);
    v48 = a1[3];
    v49 = *(unsigned __int8 *)(a2 + 33);
    v50 = *(unsigned __int8 *)(a2 + 48);
    v51 = *(unsigned __int8 *)(a2 + 49);
    v52 = *((unsigned __int8 *)a1 + 33);
    v53 = *(unsigned __int8 *)(a2 + 50);
    v54 = *(unsigned __int8 *)(a2 + 51);
    v55 = *((unsigned __int8 *)a1 + 48);
    v56 = *(unsigned __int8 *)(a2 + 52);
    v34 = *((unsigned __int8 *)a1 + 49);
    v35 = *((unsigned __int8 *)a1 + 50);
    v36 = *((unsigned __int8 *)a1 + 51);
    v37 = *(unsigned __int8 *)(a2 + 64);
    v38 = *((unsigned __int8 *)a1 + 52);
    v39 = *(unsigned __int8 *)(a2 + 65);
    v40 = *((_BYTE *)a1 + 64);
    v41 = *((unsigned __int8 *)a1 + 65);
    v42 = _stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)&v4, v5, *(_QWORD *)a2, v19, 0);
    result = 0;
    if ((v42 & 1) == 0)
      return result;
    v18 = v41;
    v17 = v40;
    v32 = v39;
    v15 = v38;
    v31 = v37;
    v14 = v36;
    v13 = v35;
    v12 = v34;
    v11 = v55;
    v29 = v56;
    v27 = v53;
    v28 = v54;
    v26 = v51;
    v9 = v52;
    v23 = v49;
    v25 = v50;
    v7 = v48;
    v22 = v47;
    v21 = v46;
    v8 = v45;
    if (v6 != v20)
      return result;
  }
  if (v8)
    __asm { BR              X9 }
  result = 0;
  if (v7 == v21)
    v43 = v22;
  else
    v43 = 1;
  if ((v43 & 1) == 0
    && v9 == v23
    && v10 == v24
    && ((v11 ^ v25) & 1) == 0
    && ((v12 ^ v26) & 1) == 0
    && ((v13 ^ v27) & 1) == 0
    && ((v14 ^ v28) & 1) == 0
    && ((v15 ^ v29) & 1) == 0)
  {
    if ((v17 & 1) != 0)
    {
      if (!v31)
        return 0;
    }
    else
    {
      if (v16 == v30)
        v44 = v31;
      else
        v44 = 1;
      if ((v44 & 1) != 0)
        return 0;
    }
    return v18 ^ v32 ^ 1u;
  }
  return result;
}

unint64_t sub_F932C()
{
  unint64_t result;

  result = qword_265330;
  if (!qword_265330)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for LibraryAssetState.Ownership, &type metadata for LibraryAssetState.Ownership);
    atomic_store(result, (unint64_t *)&qword_265330);
  }
  return result;
}

unint64_t sub_F9374()
{
  unint64_t result;

  result = qword_265338;
  if (!qword_265338)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for LibraryAssetState.PlayState, &type metadata for LibraryAssetState.PlayState);
    atomic_store(result, (unint64_t *)&qword_265338);
  }
  return result;
}

uint64_t initializeWithCopy for LibraryAssetState(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 52) = *(_BYTE *)(a2 + 52);
  v4 = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = v4;
  *(_BYTE *)(a1 + 65) = *(_BYTE *)(a2 + 65);
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t assignWithCopy for LibraryAssetState(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_BYTE *)(a1 + 49) = *(_BYTE *)(a2 + 49);
  *(_BYTE *)(a1 + 50) = *(_BYTE *)(a2 + 50);
  *(_BYTE *)(a1 + 51) = *(_BYTE *)(a2 + 51);
  *(_BYTE *)(a1 + 52) = *(_BYTE *)(a2 + 52);
  v7 = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = v7;
  *(_BYTE *)(a1 + 65) = *(_BYTE *)(a2 + 65);
  return a1;
}

__n128 initializeWithTake for ListItemThumbnailStyle(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_WORD *)(a1 + 64) = *(_WORD *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for LibraryAssetState(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_BYTE *)(a1 + 49) = *(_BYTE *)(a2 + 49);
  *(_BYTE *)(a1 + 50) = *(_BYTE *)(a2 + 50);
  *(_BYTE *)(a1 + 51) = *(_BYTE *)(a2 + 51);
  *(_BYTE *)(a1 + 52) = *(_BYTE *)(a2 + 52);
  v6 = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = v6;
  *(_BYTE *)(a1 + 65) = *(_BYTE *)(a2 + 65);
  return a1;
}

uint64_t getEnumTagSinglePayload for LibraryAssetState(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 66))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LibraryAssetState(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 64) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 66) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 66) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for LibraryAssetState()
{
  return &type metadata for LibraryAssetState;
}

uint64_t storeEnumTagSinglePayload for LibraryAssetState.Ownership(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_F9690 + 4 * byte_1EBBEF[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_F96C4 + 4 * byte_1EBBEA[v4]))();
}

uint64_t sub_F96C4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_F96CC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0xF96D4);
  return result;
}

uint64_t sub_F96E0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0xF96E8);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_F96EC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_F96F4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for LibraryAssetState.Ownership()
{
  return &type metadata for LibraryAssetState.Ownership;
}

uint64_t getEnumTagSinglePayload for LibraryAssetState.LocalState(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for LibraryAssetState.LocalState(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = 0;
    *(_BYTE *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 1;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 9) = v3;
  return result;
}

uint64_t sub_F9760(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_F977C(uint64_t result, int a2)
{
  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    *(_BYTE *)(result + 8) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for LibraryAssetState.LocalState()
{
  return &type metadata for LibraryAssetState.LocalState;
}

uint64_t storeEnumTagSinglePayload for LibraryAssetState.PlayState(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_F97F8 + 4 * byte_1EBBF9[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_F982C + 4 * byte_1EBBF4[v4]))();
}

uint64_t sub_F982C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_F9834(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0xF983CLL);
  return result;
}

uint64_t sub_F9848(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0xF9850);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_F9854(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_F985C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for LibraryAssetState.PlayState()
{
  return &type metadata for LibraryAssetState.PlayState;
}

uint64_t UIKitActionButton.init(type:action:)@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  v6 = type metadata accessor for DataStackID(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)a3 = swift_getKeyPath(&unk_1EBDC0);
  *(_BYTE *)(a3 + 40) = 0;
  v9 = (int *)type metadata accessor for UIKitActionButton(0);
  v10 = (_QWORD *)(a3 + v9[5]);
  *v10 = swift_getKeyPath(&unk_1EBDF0);
  v11 = sub_5440(&qword_25FAE0);
  v12 = swift_storeEnumTagMultiPayload(v10, v11, 0);
  static DataStackID.additionalEventData.getter(v12);
  AppAnalyticsData.init(_:)(v8);
  v13 = a3 + v9[7];
  *(_QWORD *)v13 = swift_getKeyPath(&unk_1EBE20);
  *(_BYTE *)(v13 + 8) = 0;
  v14 = (_QWORD *)(a3 + v9[8]);
  *v14 = swift_getKeyPath(&unk_1EBE50);
  v15 = sub_5440(&qword_25E818);
  swift_storeEnumTagMultiPayload(v14, v15, 0);
  v16 = a3 + v9[9];
  *(_QWORD *)v16 = swift_getKeyPath(&unk_1EBE80);
  *(_BYTE *)(v16 + 40) = 0;
  *(_QWORD *)(a3 + v9[10]) = a1;
  return sub_AC68(a2, a3 + v9[11]);
}

uint64_t type metadata accessor for UIKitActionButton(uint64_t a1)
{
  return sub_1FE90(a1, qword_2653A0, (uint64_t)&nominal type descriptor for UIKitActionButton);
}

id UIKitActionButton.makeUIView(context:)()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for UIKitActionButton(0) + 40));
  v2 = objc_msgSend((id)objc_opt_self(UIButton), "buttonWithType:", v1);
  v3 = sub_5440(&qword_265340);
  UIViewRepresentableContext.coordinator.getter(&v6, v3);
  v4 = v6;
  objc_msgSend(v2, "addTarget:action:forControlEvents:", v6, "perform", 0x2000);
  swift_release(v4);
  return v2;
}

double UIKitActionButton.updateUIView(_:context:)(uint64_t a1, uint64_t a2)
{
  return sub_F9FFC(a2);
}

uint64_t UIKitActionButton.makeCoordinator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v10[24];
  _BYTE v11[40];
  __int128 v12[2];

  v1 = type metadata accessor for OpaqueMetricsFieldsContext(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = &v10[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = type metadata accessor for UIKitActionButton(0);
  sub_BD00(v0 + *(int *)(v5 + 44), (uint64_t)v12);
  sub_32138((uint64_t)v11);
  sub_3210C((uint64_t)v4);
  v6 = type metadata accessor for UIKitActionButton.Coordinator(0);
  v7 = swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
  *(_OWORD *)(v7 + 72) = 0u;
  *(_QWORD *)(v7 + 88) = 0;
  *(_OWORD *)(v7 + 56) = 0u;
  sub_AC68(v12, v7 + 16);
  swift_beginAccess(v7 + 56, v10, 33, 0);
  sub_FA594((uint64_t)v11, v7 + 56);
  swift_endAccess(v10);
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v2 + 32))(v7 + OBJC_IVAR____TtCV7BooksUI17UIKitActionButton11Coordinator_metricsFieldsContext, v4, v1);
  return v7;
}

uint64_t sub_F9BC4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v9[24];
  _BYTE v10[24];
  _QWORD v11[5];
  _QWORD v12[3];
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[24];
  _BYTE v16[24];
  uint64_t v17;

  v1 = type metadata accessor for OpaqueMetricsFieldsContext(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = &v9[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  swift_beginAccess(v0 + 56, v15, 0, 0);
  sub_FB62C(v0 + 56, (uint64_t)v16);
  if (!v17)
    return sub_B414((uint64_t)v16, &qword_25FAF0);
  sub_BD00((uint64_t)v16, (uint64_t)v12);
  sub_B414((uint64_t)v16, &qword_25FAF0);
  v5 = v13;
  v6 = v14;
  sub_5480(v12, v13);
  swift_beginAccess(v0 + 16, v10, 0, 0);
  sub_BD00(v0 + 16, (uint64_t)v11);
  v7 = v0 + OBJC_IVAR____TtCV7BooksUI17UIKitActionButton11Coordinator_metricsFieldsContext;
  swift_beginAccess(v7, v9, 0, 0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v2 + 16))(v4, v7, v1);
  PerformAction.callAsFunction(_:withMetrics:)(v11, v4, v5, v6);
  (*(void (**)(_BYTE *, uint64_t))(v2 + 8))(v4, v1);
  _s7BooksUI13AnyPagedFrameVwxx_0(v11);
  return _s7BooksUI13AnyPagedFrameVwxx_0(v12);
}

uint64_t UIKitActionButton.Coordinator.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)(v0 + 16));
  sub_B414(v0 + 56, &qword_25FAF0);
  v1 = v0 + OBJC_IVAR____TtCV7BooksUI17UIKitActionButton11Coordinator_metricsFieldsContext;
  v2 = type metadata accessor for OpaqueMetricsFieldsContext(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t UIKitActionButton.Coordinator.__deallocating_deinit()
{
  _QWORD *v0;
  char *v1;
  uint64_t v2;

  _s7BooksUI13AnyPagedFrameVwxx_0(v0 + 2);
  sub_B414((uint64_t)(v0 + 7), &qword_25FAF0);
  v1 = (char *)v0 + OBJC_IVAR____TtCV7BooksUI17UIKitActionButton11Coordinator_metricsFieldsContext;
  v2 = type metadata accessor for OpaqueMetricsFieldsContext(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48), *(unsigned __int16 *)(*v0 + 52));
}

id sub_F9E28(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v3 = objc_msgSend((id)objc_opt_self(UIButton), "buttonWithType:", *(_QWORD *)(v2 + *(int *)(a2 + 40)));
  v4 = sub_5440(&qword_265340);
  UIViewRepresentableContext.coordinator.getter(&v7, v4);
  v5 = v7;
  objc_msgSend(v3, "addTarget:action:forControlEvents:", v7, "perform", 0x2000);
  swift_release(v5);
  return v3;
}

uint64_t sub_F9ECC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = UIKitActionButton.makeCoordinator()();
  *a1 = result;
  return result;
}

uint64_t sub_F9EF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_FB674(qword_265500, (uint64_t)&protocol conformance descriptor for UIKitActionButton);
  return static UIViewRepresentable._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_F9F50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_FB674(qword_265500, (uint64_t)&protocol conformance descriptor for UIKitActionButton);
  return static UIViewRepresentable._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

void sub_F9FB0(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_FB674(qword_265500, (uint64_t)&protocol conformance descriptor for UIKitActionButton);
  UIViewRepresentable.body.getter(a1, v2);
  __break(1u);
}

double sub_F9FFC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  char v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __n128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  double result;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _BYTE v55[40];
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  __int128 v60[2];
  __int128 v61;
  uint64_t v62;
  uint64_t v63;

  v54 = a1;
  v52 = type metadata accessor for OpaqueMetricsFieldsContext(0);
  v2 = *(_QWORD *)(v52 - 8);
  __chkstk_darwin(v52);
  v51 = (uint64_t)&v41 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for DataStack(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_5440(&qword_25E828);
  __chkstk_darwin(v8);
  v10 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = type metadata accessor for ClickData(0);
  v11 = *(_QWORD *)(v50 - 8);
  __chkstk_darwin(v50);
  v13 = (char *)&v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = type metadata accessor for UIKitActionButton(0);
  v14 = v1;
  v15 = v1 + *(int *)(v53 + 44);
  sub_BD00(v15, (uint64_t)v60);
  v16 = sub_5440(&qword_25E848);
  v17 = sub_5440(&qword_25E850);
  if ((swift_dynamicCast(&v57, v60, v16, v17, 6) & 1) != 0)
  {
    v45 = v7;
    v46 = v5;
    v47 = v13;
    v48 = v4;
    v49 = v2;
    sub_AC68(&v57, (uint64_t)&v61);
    v19 = v62;
    v18 = v63;
    sub_5480(&v61, v62);
    (*(void (**)(uint64_t, uint64_t))(v18 + 16))(v19, v18);
    v20 = v50;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v10, 1, v50) != 1)
    {
      v23 = v47;
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v47, v10, v20);
      v24 = sub_5440(&qword_265340);
      UIViewRepresentableContext.coordinator.getter(&v56, v24);
      v44 = v56;
      v25 = v62;
      v42 = v63;
      v43 = sub_5480(&v61, v62);
      v26 = v14 + *(int *)(v53 + 28);
      v27 = *(id *)v26;
      v28 = *(_BYTE *)(v26 + 8);
      sub_18EF0(*(id *)v26, v28);
      v29 = (void *)sub_30F6C(v27, v28);
      sub_19034(v27, v28);
      v59 = 0;
      v57 = 0u;
      v58 = 0u;
      v30 = (uint64_t)v45;
      sub_31134((uint64_t)v45);
      v31 = sub_31160((uint64_t)v55);
      v32 = AppAnalyticsData.wrappedValue.getter(v31);
      ActionModel.instrumentingAppAnalyticsClickEvent(using:refId:dataStack:sizeProvider:clickData:additionalData:)(v60, v29, &v57, v30, v55, v23, v32, v25, *(_QWORD *)(v42 + 8));
      swift_bridgeObjectRelease(v32);

      sub_B414((uint64_t)v55, &qword_25E858);
      (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v30, v48);
      sub_B414((uint64_t)&v57, &qword_25E530);
      v33 = v44;
      swift_beginAccess(v44 + 16, &v57, 33, 0);
      _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)(v33 + 16));
      sub_AC68(v60, v33 + 16);
      swift_endAccess(&v57);
      v34 = swift_release(v33);
      (*(void (**)(char *, uint64_t, __n128))(v11 + 8))(v23, v20, v34);
      _s7BooksUI13AnyPagedFrameVwxx_0(&v61);
      v2 = v49;
      goto LABEL_7;
    }
    sub_B414((uint64_t)v10, &qword_25E828);
    _s7BooksUI13AnyPagedFrameVwxx_0(&v61);
    v2 = v49;
  }
  else
  {
    v59 = 0;
    v57 = 0u;
    v58 = 0u;
    sub_B414((uint64_t)&v57, &qword_25E840);
  }
  v21 = sub_5440(&qword_265340);
  UIViewRepresentableContext.coordinator.getter(&v57, v21);
  v22 = v57;
  sub_BD00(v15, (uint64_t)&v61);
  swift_beginAccess(v22 + 16, v60, 33, 0);
  _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)(v22 + 16));
  sub_AC68(&v61, v22 + 16);
  swift_endAccess(v60);
  swift_release(v22);
LABEL_7:
  v35 = sub_5440(&qword_265340);
  UIViewRepresentableContext.coordinator.getter(&v57, v35);
  v36 = v57;
  sub_32138((uint64_t)&v61);
  swift_beginAccess(v36 + 56, v60, 33, 0);
  sub_FA594((uint64_t)&v61, v36 + 56);
  swift_endAccess(v60);
  swift_release(v36);
  UIViewRepresentableContext.coordinator.getter(v60, v35);
  v37 = *(_QWORD *)&v60[0];
  v38 = v51;
  sub_3210C(v51);
  v39 = v37 + OBJC_IVAR____TtCV7BooksUI17UIKitActionButton11Coordinator_metricsFieldsContext;
  swift_beginAccess(v37 + OBJC_IVAR____TtCV7BooksUI17UIKitActionButton11Coordinator_metricsFieldsContext, &v61, 33, 0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 40))(v39, v38, v52);
  swift_endAccess(&v61);
  *(_QWORD *)&result = swift_release(v37).n128_u64[0];
  return result;
}

uint64_t type metadata accessor for UIKitActionButton.Coordinator(uint64_t a1)
{
  return sub_1FE90(a1, qword_265418, (uint64_t)&nominal type descriptor for UIKitActionButton.Coordinator);
}

uint64_t sub_FA594(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_5440(&qword_25FAF0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_FA5DC()
{
  return sub_FB674(&qword_263D10, (uint64_t)&protocol conformance descriptor for UIKitActionButton);
}

uint64_t initializeBufferWithCopyOfBuffer for UIKitActionButton(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  __int128 v44;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v9 = *a2;
    *(_QWORD *)v4 = *a2;
    v4 = v9 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain(v9);
  }
  else
  {
    if ((a2[5] & 1) != 0)
    {
      v7 = a2[3];
      if (v7)
      {
        v8 = a2[4];
        *(_QWORD *)(a1 + 24) = v7;
        *(_QWORD *)(a1 + 32) = v8;
        (**(void (***)(uint64_t, uint64_t *))(v7 - 8))(a1, a2);
      }
      else
      {
        v11 = *((_OWORD *)a2 + 1);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v11;
        *(_QWORD *)(a1 + 32) = a2[4];
      }
      *(_BYTE *)(v4 + 40) = 1;
    }
    else
    {
      v10 = *a2;
      *(_QWORD *)v4 = *a2;
      *(_BYTE *)(v4 + 40) = 0;
      swift_retain(v10);
    }
    v12 = a3[5];
    v13 = (uint64_t *)(v4 + v12);
    v14 = (uint64_t *)((char *)a2 + v12);
    v15 = sub_5440(&qword_25FAE0);
    if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
    {
      v16 = type metadata accessor for OpaqueMetricsFieldsContext(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v13, v14, v16);
      v17 = v13;
      v18 = v15;
      v19 = 1;
    }
    else
    {
      v20 = *v14;
      *v13 = *v14;
      swift_retain(v20);
      v17 = v13;
      v18 = v15;
      v19 = 0;
    }
    swift_storeEnumTagMultiPayload(v17, v18, v19);
    v21 = a3[6];
    v22 = v4 + v21;
    v23 = (uint64_t)a2 + v21;
    v24 = type metadata accessor for AppAnalyticsData(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 16))(v22, v23, v24);
    v25 = a3[7];
    v26 = v4 + v25;
    v27 = (uint64_t)a2 + v25;
    v28 = *(id *)v27;
    LOBYTE(v23) = *(_BYTE *)(v27 + 8);
    sub_18EF0(*(id *)v27, v23);
    *(_QWORD *)v26 = v28;
    *(_BYTE *)(v26 + 8) = v23;
    v29 = a3[8];
    v30 = (uint64_t *)(v4 + v29);
    v31 = (uint64_t *)((char *)a2 + v29);
    v32 = sub_5440(&qword_25E818);
    if (swift_getEnumCaseMultiPayload(v31, v32) == 1)
    {
      v33 = type metadata accessor for DataStack(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v33 - 8) + 16))(v30, v31, v33);
      v34 = 1;
    }
    else
    {
      v35 = *v31;
      *v30 = *v31;
      swift_retain(v35);
      v34 = 0;
    }
    swift_storeEnumTagMultiPayload(v30, v32, v34);
    v36 = a3[9];
    v37 = v4 + v36;
    v38 = (uint64_t *)((char *)a2 + v36);
    if ((*((_BYTE *)a2 + v36 + 40) & 1) != 0)
    {
      v39 = v38[3];
      if (v39)
      {
        v40 = v38[4];
        *(_QWORD *)(v37 + 24) = v39;
        *(_QWORD *)(v37 + 32) = v40;
        (**(void (***)(uint64_t))(v39 - 8))(v37);
      }
      else
      {
        v42 = *((_OWORD *)v38 + 1);
        *(_OWORD *)v37 = *(_OWORD *)v38;
        *(_OWORD *)(v37 + 16) = v42;
        *(_QWORD *)(v37 + 32) = v38[4];
      }
      *(_BYTE *)(v37 + 40) = 1;
    }
    else
    {
      v41 = *v38;
      *(_QWORD *)v37 = *v38;
      *(_BYTE *)(v37 + 40) = 0;
      swift_retain(v41);
    }
    v43 = a3[11];
    *(_QWORD *)(v4 + a3[10]) = *(uint64_t *)((char *)a2 + a3[10]);
    v44 = *(_OWORD *)((char *)a2 + v43 + 24);
    *(_OWORD *)(v4 + v43 + 24) = v44;
    (**(void (***)(void))(v44 - 8))();
  }
  return v4;
}

uint64_t destroy for UIKitActionButton(_QWORD *a1, int *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  if ((a1[5] & 1) != 0)
  {
    if (a1[3])
      _s7BooksUI13AnyPagedFrameVwxx_0(a1);
  }
  else
  {
    swift_release(*a1);
  }
  v4 = (_QWORD *)((char *)a1 + a2[5]);
  v5 = sub_5440(&qword_25FAE0);
  if (swift_getEnumCaseMultiPayload(v4, v5) == 1)
  {
    v6 = type metadata accessor for OpaqueMetricsFieldsContext(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v4, v6);
  }
  else
  {
    swift_release(*v4);
  }
  v7 = (char *)a1 + a2[6];
  v8 = type metadata accessor for AppAnalyticsData(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  sub_19034(*(id *)((char *)a1 + a2[7]), *((_BYTE *)a1 + a2[7] + 8));
  v9 = (_QWORD *)((char *)a1 + a2[8]);
  v10 = sub_5440(&qword_25E818);
  if (swift_getEnumCaseMultiPayload(v9, v10) == 1)
  {
    v11 = type metadata accessor for DataStack(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v9, v11);
  }
  else
  {
    swift_release(*v9);
  }
  v12 = (_QWORD *)((char *)a1 + a2[9]);
  if ((v12[5] & 1) != 0)
  {
    if (v12[3])
      _s7BooksUI13AnyPagedFrameVwxx_0(v12);
  }
  else
  {
    swift_release(*v12);
  }
  return _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)((char *)a1 + a2[11]));
}

uint64_t initializeWithCopy for UIKitActionButton(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  __int128 v42;

  if ((a2[5] & 1) != 0)
  {
    v6 = a2[3];
    if (v6)
    {
      v7 = a2[4];
      *(_QWORD *)(a1 + 24) = v6;
      *(_QWORD *)(a1 + 32) = v7;
      (**(void (***)(uint64_t, uint64_t *))(v6 - 8))(a1, a2);
    }
    else
    {
      v9 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v9;
      *(_QWORD *)(a1 + 32) = a2[4];
    }
    *(_BYTE *)(a1 + 40) = 1;
  }
  else
  {
    v8 = *a2;
    *(_QWORD *)a1 = *a2;
    *(_BYTE *)(a1 + 40) = 0;
    swift_retain(v8);
  }
  v10 = a3[5];
  v11 = (uint64_t *)(a1 + v10);
  v12 = (uint64_t *)((char *)a2 + v10);
  v13 = sub_5440(&qword_25FAE0);
  if (swift_getEnumCaseMultiPayload(v12, v13) == 1)
  {
    v14 = type metadata accessor for OpaqueMetricsFieldsContext(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v11, v12, v14);
    v15 = v11;
    v16 = v13;
    v17 = 1;
  }
  else
  {
    v18 = *v12;
    *v11 = *v12;
    swift_retain(v18);
    v15 = v11;
    v16 = v13;
    v17 = 0;
  }
  swift_storeEnumTagMultiPayload(v15, v16, v17);
  v19 = a3[6];
  v20 = a1 + v19;
  v21 = (uint64_t)a2 + v19;
  v22 = type metadata accessor for AppAnalyticsData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v20, v21, v22);
  v23 = a3[7];
  v24 = a1 + v23;
  v25 = (uint64_t)a2 + v23;
  v26 = *(id *)v25;
  LOBYTE(v21) = *(_BYTE *)(v25 + 8);
  sub_18EF0(*(id *)v25, v21);
  *(_QWORD *)v24 = v26;
  *(_BYTE *)(v24 + 8) = v21;
  v27 = a3[8];
  v28 = (uint64_t *)(a1 + v27);
  v29 = (uint64_t *)((char *)a2 + v27);
  v30 = sub_5440(&qword_25E818);
  if (swift_getEnumCaseMultiPayload(v29, v30) == 1)
  {
    v31 = type metadata accessor for DataStack(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v31 - 8) + 16))(v28, v29, v31);
    v32 = 1;
  }
  else
  {
    v33 = *v29;
    *v28 = *v29;
    swift_retain(v33);
    v32 = 0;
  }
  swift_storeEnumTagMultiPayload(v28, v30, v32);
  v34 = a3[9];
  v35 = a1 + v34;
  v36 = (uint64_t *)((char *)a2 + v34);
  if ((*((_BYTE *)a2 + v34 + 40) & 1) != 0)
  {
    v37 = v36[3];
    if (v37)
    {
      v38 = v36[4];
      *(_QWORD *)(v35 + 24) = v37;
      *(_QWORD *)(v35 + 32) = v38;
      (**(void (***)(uint64_t))(v37 - 8))(v35);
    }
    else
    {
      v40 = *((_OWORD *)v36 + 1);
      *(_OWORD *)v35 = *(_OWORD *)v36;
      *(_OWORD *)(v35 + 16) = v40;
      *(_QWORD *)(v35 + 32) = v36[4];
    }
    *(_BYTE *)(v35 + 40) = 1;
  }
  else
  {
    v39 = *v36;
    *(_QWORD *)v35 = *v36;
    *(_BYTE *)(v35 + 40) = 0;
    swift_retain(v39);
  }
  v41 = a3[11];
  *(_QWORD *)(a1 + a3[10]) = *(uint64_t *)((char *)a2 + a3[10]);
  v42 = *(_OWORD *)((char *)a2 + v41 + 24);
  *(_OWORD *)(a1 + v41 + 24) = v42;
  (**(void (***)(void))(v42 - 8))();
  return a1;
}

uint64_t assignWithCopy for UIKitActionButton(uint64_t a1, __int128 *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  void *v27;
  char v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 *v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;

  if ((__int128 *)a1 != a2)
  {
    sub_B414(a1, &qword_25FAE8);
    if ((*((_BYTE *)a2 + 40) & 1) != 0)
    {
      v6 = *((_QWORD *)a2 + 3);
      if (v6)
      {
        *(_QWORD *)(a1 + 24) = v6;
        *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
        (**(void (***)(uint64_t, __int128 *))(v6 - 8))(a1, a2);
      }
      else
      {
        v8 = *a2;
        v9 = a2[1];
        *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
        *(_OWORD *)a1 = v8;
        *(_OWORD *)(a1 + 16) = v9;
      }
      *(_BYTE *)(a1 + 40) = 1;
    }
    else
    {
      v7 = *(_QWORD *)a2;
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_BYTE *)(a1 + 40) = 0;
      swift_retain(v7);
    }
    v10 = a3[5];
    v11 = (uint64_t *)(a1 + v10);
    v12 = (uint64_t *)((char *)a2 + v10);
    sub_B414(a1 + v10, &qword_25FAE0);
    v13 = sub_5440(&qword_25FAE0);
    if (swift_getEnumCaseMultiPayload(v12, v13) == 1)
    {
      v14 = type metadata accessor for OpaqueMetricsFieldsContext(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v11, v12, v14);
      v15 = v11;
      v16 = v13;
      v17 = 1;
    }
    else
    {
      v18 = *v12;
      *v11 = *v12;
      swift_retain(v18);
      v15 = v11;
      v16 = v13;
      v17 = 0;
    }
    swift_storeEnumTagMultiPayload(v15, v16, v17);
  }
  v19 = a3[6];
  v20 = a1 + v19;
  v21 = (uint64_t)a2 + v19;
  v22 = type metadata accessor for AppAnalyticsData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 24))(v20, v21, v22);
  v23 = a3[7];
  v24 = a1 + v23;
  v25 = (uint64_t)a2 + v23;
  v26 = *(id *)v25;
  LOBYTE(v21) = *(_BYTE *)(v25 + 8);
  sub_18EF0(*(id *)v25, v21);
  v27 = *(void **)v24;
  v28 = *(_BYTE *)(v24 + 8);
  *(_QWORD *)v24 = v26;
  *(_BYTE *)(v24 + 8) = v21;
  sub_19034(v27, v28);
  if ((__int128 *)a1 != a2)
  {
    v29 = a3[8];
    v30 = (uint64_t *)(a1 + v29);
    v31 = (uint64_t *)((char *)a2 + v29);
    sub_B414(a1 + v29, &qword_25E818);
    v32 = sub_5440(&qword_25E818);
    if (swift_getEnumCaseMultiPayload(v31, v32) == 1)
    {
      v33 = type metadata accessor for DataStack(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v33 - 8) + 16))(v30, v31, v33);
      v34 = 1;
    }
    else
    {
      v35 = *v31;
      *v30 = *v31;
      swift_retain(v35);
      v34 = 0;
    }
    swift_storeEnumTagMultiPayload(v30, v32, v34);
    v36 = a3[9];
    v37 = a1 + v36;
    v38 = (__int128 *)((char *)a2 + v36);
    sub_B414(a1 + v36, &qword_25E860);
    if ((*((_BYTE *)v38 + 40) & 1) != 0)
    {
      v39 = *((_QWORD *)v38 + 3);
      if (v39)
      {
        *(_QWORD *)(v37 + 24) = v39;
        *(_QWORD *)(v37 + 32) = *((_QWORD *)v38 + 4);
        (**(void (***)(uint64_t, __int128 *))(v39 - 8))(v37, v38);
      }
      else
      {
        v41 = *v38;
        v42 = v38[1];
        *(_QWORD *)(v37 + 32) = *((_QWORD *)v38 + 4);
        *(_OWORD *)v37 = v41;
        *(_OWORD *)(v37 + 16) = v42;
      }
      *(_BYTE *)(v37 + 40) = 1;
    }
    else
    {
      v40 = *(_QWORD *)v38;
      *(_QWORD *)v37 = *(_QWORD *)v38;
      *(_BYTE *)(v37 + 40) = 0;
      swift_retain(v40);
    }
  }
  *(_QWORD *)(a1 + a3[10]) = *(_QWORD *)((char *)a2 + a3[10]);
  sub_142F8((_QWORD *)(a1 + a3[11]), (__int128 *)((char *)a2 + a3[11]));
  return a1;
}

_OWORD *initializeWithTake for UIKitActionButton(_OWORD *a1, _OWORD *a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _OWORD *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  __int128 v33;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  *(_OWORD *)((char *)a1 + 25) = *(_OWORD *)((char *)a2 + 25);
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = sub_5440(&qword_25FAE0);
  if (swift_getEnumCaseMultiPayload(v9, v10) == 1)
  {
    v11 = type metadata accessor for OpaqueMetricsFieldsContext(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v8, v9, v11);
    swift_storeEnumTagMultiPayload(v8, v10, 1);
  }
  else
  {
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  v12 = a3[6];
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = type metadata accessor for AppAnalyticsData(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v13, v14, v15);
  v16 = a3[7];
  v17 = a3[8];
  v18 = (char *)a1 + v16;
  v19 = (char *)a2 + v16;
  *(_QWORD *)v18 = *(_QWORD *)v19;
  v18[8] = v19[8];
  v20 = (char *)a1 + v17;
  v21 = (char *)a2 + v17;
  v22 = sub_5440(&qword_25E818);
  if (swift_getEnumCaseMultiPayload(v21, v22) == 1)
  {
    v23 = type metadata accessor for DataStack(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 32))(v20, v21, v23);
    swift_storeEnumTagMultiPayload(v20, v22, 1);
  }
  else
  {
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  v24 = a3[9];
  v25 = a3[10];
  v26 = *(_OWORD *)((char *)a2 + v24);
  v27 = *(_OWORD *)((char *)a2 + v24 + 16);
  v28 = *(_OWORD *)((char *)a2 + v24 + 25);
  v29 = (_OWORD *)((char *)a1 + v24);
  *v29 = v26;
  v29[1] = v27;
  *(_OWORD *)((char *)v29 + 25) = v28;
  *(_QWORD *)((char *)a1 + v25) = *(_QWORD *)((char *)a2 + v25);
  v30 = a3[11];
  v31 = (char *)a1 + v30;
  v32 = (char *)a2 + v30;
  v33 = *((_OWORD *)v32 + 1);
  *(_OWORD *)v31 = *(_OWORD *)v32;
  *((_OWORD *)v31 + 1) = v33;
  *((_QWORD *)v31 + 4) = *((_QWORD *)v32 + 4);
  return a1;
}

_OWORD *assignWithTake for UIKitActionButton(_OWORD *a1, _OWORD *a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  void *v20;
  char v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _OWORD *v28;
  _OWORD *v29;
  __int128 v30;
  uint64_t v31;
  char *v32;
  char *v33;
  __int128 v34;

  if (a1 != a2)
  {
    sub_B414((uint64_t)a1, &qword_25FAE8);
    v6 = a2[1];
    *a1 = *a2;
    a1[1] = v6;
    *(_OWORD *)((char *)a1 + 25) = *(_OWORD *)((char *)a2 + 25);
    v7 = a3[5];
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    sub_B414((uint64_t)a1 + v7, &qword_25FAE0);
    v10 = sub_5440(&qword_25FAE0);
    if (swift_getEnumCaseMultiPayload(v9, v10) == 1)
    {
      v11 = type metadata accessor for OpaqueMetricsFieldsContext(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v8, v9, v11);
      swift_storeEnumTagMultiPayload(v8, v10, 1);
    }
    else
    {
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    }
  }
  v12 = a3[6];
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = type metadata accessor for AppAnalyticsData(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 40))(v13, v14, v15);
  v16 = a3[7];
  v17 = (char *)a1 + v16;
  v18 = (char *)a2 + v16;
  v19 = *(_QWORD *)v18;
  LOBYTE(v18) = v18[8];
  v20 = *(void **)v17;
  v21 = v17[8];
  *(_QWORD *)v17 = v19;
  v17[8] = (char)v18;
  sub_19034(v20, v21);
  if (a1 != a2)
  {
    v22 = a3[8];
    v23 = (char *)a1 + v22;
    v24 = (char *)a2 + v22;
    sub_B414((uint64_t)a1 + v22, &qword_25E818);
    v25 = sub_5440(&qword_25E818);
    if (swift_getEnumCaseMultiPayload(v24, v25) == 1)
    {
      v26 = type metadata accessor for DataStack(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v26 - 8) + 32))(v23, v24, v26);
      swift_storeEnumTagMultiPayload(v23, v25, 1);
    }
    else
    {
      memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    }
    v27 = a3[9];
    v28 = (_OWORD *)((char *)a2 + v27);
    v29 = (_OWORD *)((char *)a1 + v27);
    sub_B414((uint64_t)a1 + v27, &qword_25E860);
    v30 = v28[1];
    *v29 = *v28;
    v29[1] = v30;
    *(_OWORD *)((char *)v29 + 25) = *(_OWORD *)((char *)v28 + 25);
  }
  v31 = a3[11];
  *(_QWORD *)((char *)a1 + a3[10]) = *(_QWORD *)((char *)a2 + a3[10]);
  v32 = (char *)a1 + v31;
  v33 = (char *)a2 + v31;
  _s7BooksUI13AnyPagedFrameVwxx_0((_OWORD *)((char *)a1 + v31));
  v34 = *((_OWORD *)v33 + 1);
  *(_OWORD *)v32 = *(_OWORD *)v33;
  *((_OWORD *)v32 + 1) = v34;
  *((_QWORD *)v32 + 4) = *((_QWORD *)v33 + 4);
  return a1;
}

uint64_t getEnumTagSinglePayload for UIKitActionButton(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_FB2FC);
}

uint64_t sub_FB2FC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v13;

  v6 = sub_5440(&qword_264F30);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = a3[5];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v10 = type metadata accessor for AppAnalyticsData(0);
  v7 = *(_QWORD *)(v10 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v10;
    v9 = a3[6];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v11 = sub_5440(qword_25E868);
  v7 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v9 = a3[8];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v13 = *(_QWORD *)(a1 + a3[11] + 24);
  if (v13 >= 0xFFFFFFFF)
    LODWORD(v13) = -1;
  return (v13 + 1);
}

uint64_t storeEnumTagSinglePayload for UIKitActionButton(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_FB3DC);
}

uint64_t sub_FB3DC(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;

  v8 = sub_5440(&qword_264F30);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = a4[5];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
  }
  v12 = type metadata accessor for AppAnalyticsData(0);
  v9 = *(_QWORD *)(v12 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v12;
    v11 = a4[6];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
  }
  result = sub_5440(qword_25E868);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = a4[8];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
  }
  *(_QWORD *)(a1 + a4[11] + 24) = (a2 - 1);
  return result;
}

void sub_FB4AC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[8];

  v8[0] = ")";
  sub_2ADCC(319, (unint64_t *)&qword_2617F8, (uint64_t (*)(uint64_t))&type metadata accessor for OpaqueMetricsFieldsContext);
  if (v3 <= 0x3F)
  {
    v8[1] = *(_QWORD *)(v2 - 8) + 64;
    v4 = type metadata accessor for AppAnalyticsData(319);
    if (v5 <= 0x3F)
    {
      v8[2] = *(_QWORD *)(v4 - 8) + 64;
      v8[3] = L"\t";
      sub_2ADCC(319, &qword_25E8F0, (uint64_t (*)(uint64_t))&type metadata accessor for DataStack);
      if (v7 <= 0x3F)
      {
        v8[4] = *(_QWORD *)(v6 - 8) + 64;
        v8[5] = ")";
        v8[6] = (char *)&value witness table for Builtin.Int64 + 64;
        v8[7] = &unk_1EBFD8;
        swift_initStructMetadata(a1, 256, 8, v8, a1 + 16);
      }
    }
  }
}

uint64_t sub_FB598()
{
  return type metadata accessor for UIKitActionButton.Coordinator(0);
}

uint64_t sub_FB5A0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = &unk_1EBFD8;
  v4[1] = &unk_1EC020;
  result = type metadata accessor for OpaqueMetricsFieldsContext(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 3, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for UIKitActionButton.Coordinator(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for UIKitActionButton.Coordinator);
}

uint64_t sub_FB62C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_5440(&qword_25FAF0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_FB674(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for UIKitActionButton(255);
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

_QWORD *sub_FB6B4(uint64_t a1)
{
  int64_t v1;
  _QWORD *v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  __int128 v8[2];
  _QWORD *v9;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = _swiftEmptyArrayStorage;
  if (v1)
  {
    v9 = _swiftEmptyArrayStorage;
    sub_20EEC(0, v1, 0);
    v2 = _swiftEmptyArrayStorage;
    v4 = a1 + 32;
    do
    {
      sub_BD00(v4, (uint64_t)v8);
      v9 = v2;
      v6 = v2[2];
      v5 = v2[3];
      if (v6 >= v5 >> 1)
      {
        sub_20EEC(v5 > 1, v6 + 1, 1);
        v2 = v9;
      }
      v2[2] = v6 + 1;
      sub_AC68(v8, (uint64_t)&v2[5 * v6 + 4]);
      v4 += 40;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t _CodeAnyActionModel_Many.description.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *v0;
  swift_bridgeObjectRetain(*v0);
  v2 = sub_5440(&qword_25E848);
  v3 = Array.description.getter(v1, v2);
  swift_bridgeObjectRelease(v1);
  return v3;
}

uint64_t _CodeAnyActionModel_Many.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  _QWORD *v9;
  _BYTE v10[40];

  sub_BD00((uint64_t)a1, (uint64_t)v10);
  v5 = sub_30268();
  v6 = Array<A>.init(from:)(v10, &type metadata for CodeAnyActionModel, v5);
  if (v2)
    return _s7BooksUI13AnyPagedFrameVwxx_0(a1);
  v8 = v6;
  v9 = sub_FB6B4(v6);
  _s7BooksUI13AnyPagedFrameVwxx_0(a1);
  result = swift_bridgeObjectRelease(v8);
  *a2 = v9;
  return result;
}

uint64_t _CodeAnyActionModel_Many.init(_partiallyFrom:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t result;
  _BYTE v8[40];

  sub_BD00((uint64_t)a1, (uint64_t)v8);
  v4 = sub_30268();
  v5 = Array<A>.init(_partiallyFrom:)(v8, &type metadata for CodeAnyActionModel, v4);
  v6 = sub_FB6B4(v5);
  _s7BooksUI13AnyPagedFrameVwxx_0(a1);
  result = swift_bridgeObjectRelease(v5);
  *a2 = v6;
  return result;
}

ValueMetadata *type metadata accessor for _CodeAnyActionModel_Many()
{
  return &type metadata for _CodeAnyActionModel_Many;
}

uint64_t sub_FB91C(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;

  v21 = a6;
  v12 = *(_QWORD *)(a4 - 8);
  v13 = __chkstk_darwin(a1);
  v15 = (char *)&v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v17 = (char *)&v20 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v18 + 16))(v17, v6);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, a1, a4);
  return _ShapeView.init(shape:style:fillStyle:)(v17, v15, a2 & 0x101, a3, a4, a5, v21);
}

uint64_t AssetCover.init(aspectRatio:url:effect:placeholderColor:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, double *a6@<X8>, double a7@<D0>, double a8@<D1>)
{
  int *v13;
  char *v14;
  uint64_t v15;
  uint64_t result;

  *a6 = a7;
  a6[1] = a8;
  v13 = (int *)type metadata accessor for AssetCover(0, a4, a5, a4);
  v14 = (char *)a6 + v13[9];
  v15 = type metadata accessor for URL(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v14, a1, v15);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 32))((char *)a6 + v13[10], a2, a4);
  *(_QWORD *)((char *)a6 + v13[11]) = a3;
  return result;
}

uint64_t type metadata accessor for AssetCover(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10E40(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AssetCover);
}

uint64_t AssetCover.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t AssociatedTypeWitness;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t WitnessTable;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t, uint64_t);
  char *v35;
  double *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(uint64_t, char *, uint64_t);
  char *v47;
  double *v48;
  uint64_t v49;
  uint64_t v50;
  double v51;
  double v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(uint64_t, uint64_t);
  uint64_t v60;
  double *v61;
  void (*v62)(char *, double *, uint64_t);
  char *v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  uint64_t v86;
  _QWORD v87[5];

  v80 = a2;
  v4 = *(_QWORD *)(a1 - 8);
  v78 = *(_QWORD *)(v4 + 64);
  v5 = __chkstk_darwin(a1);
  v79 = (char *)&v60 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v77 = (char *)&v60 - v7;
  v8 = sub_5440(&qword_268370);
  __chkstk_darwin(v8);
  v10 = (char *)&v60 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(a1 + 24);
  v13 = a1;
  v73 = *(_QWORD *)(a1 + 16);
  v11 = v73;
  v75 = v12;
  v15 = type metadata accessor for _CoverEffectViewModifier(255, v73, v12, v14);
  v16 = type metadata accessor for ModifiedContent(255, &type metadata for Image, v15);
  v76 = v16;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v12, v11, &protocol requirements base descriptor for CoverEffect, &associated type descriptor for CoverEffect.Shape);
  v18 = *(_QWORD *)(swift_getAssociatedConformanceWitness(v12, v11, AssociatedTypeWitness, &protocol requirements base descriptor for CoverEffect, &associated conformance descriptor for CoverEffect.CoverEffect.Shape: InsettableShape)+ 8);
  v87[0] = AssociatedTypeWitness;
  v87[1] = &type metadata for Color;
  v87[2] = v18;
  v87[3] = &protocol witness table for Color;
  v19 = type metadata accessor for _ShapeView(255, v87);
  v72 = v19;
  v20 = type metadata accessor for _ConditionalContent(255, v16, v19);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for _CoverEffectViewModifier<A>, v15);
  v85 = &protocol witness table for Image;
  v86 = WitnessTable;
  v22 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v16);
  v70 = v22;
  v68 = swift_getWitnessTable(&protocol conformance descriptor for _ShapeView<A, B>, v19);
  v83 = v22;
  v84 = v68;
  v23 = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v20);
  v24 = type metadata accessor for AsyncImage(0, v20, v23);
  v71 = *(_QWORD *)(v24 - 8);
  v66 = v24;
  __chkstk_darwin(v24);
  v64 = (uint64_t)&v60 - v25;
  v69 = type metadata accessor for ModifiedContent(0, v26, &type metadata for _AspectRatioLayout);
  v74 = *(_QWORD *)(v69 - 8);
  v27 = __chkstk_darwin(v69);
  v65 = (char *)&v60 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27);
  v67 = (uint64_t)&v60 - v29;
  v30 = *(int *)(v13 + 36);
  v61 = v2;
  v31 = (uint64_t)v2 + v30;
  v32 = type metadata accessor for URL(0);
  v33 = *(_QWORD *)(v32 - 8);
  v34 = *(void (**)(char *, uint64_t, uint64_t))(v33 + 16);
  v63 = v10;
  v34(v10, v31, v32);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v33 + 56))(v10, 0, 1, v32);
  v62 = *(void (**)(char *, double *, uint64_t))(v4 + 16);
  v35 = v77;
  v36 = v2;
  v37 = v13;
  v62(v77, v36, v13);
  v38 = *(unsigned __int8 *)(v4 + 80);
  v39 = v4;
  v40 = (v38 + 32) & ~v38;
  v41 = v40 + v78;
  v42 = v38 | 7;
  v43 = swift_allocObject(&unk_2524D8, v40 + v78, v38 | 7);
  v44 = v73;
  v45 = v75;
  *(_QWORD *)(v43 + 16) = v73;
  *(_QWORD *)(v43 + 24) = v45;
  v46 = *(void (**)(uint64_t, char *, uint64_t))(v39 + 32);
  v46(v43 + v40, v35, v37);
  v47 = v79;
  v48 = v61;
  v62(v79, v61, v37);
  v49 = swift_allocObject(&unk_252500, v41, v42);
  *(_QWORD *)(v49 + 16) = v44;
  *(_QWORD *)(v49 + 24) = v45;
  v46(v49 + v40, v47, v37);
  v50 = v64;
  sub_FC4F8((uint64_t)v63, (uint64_t)sub_FC164, v43, (uint64_t)sub_FC4A0, v49, v76, v72, v70, v64, 1.0, v68);
  v51 = *v48;
  v52 = v48[1];
  v53 = v66;
  v54 = swift_getWitnessTable(&protocol conformance descriptor for AsyncImage<A>, v66);
  v55 = (uint64_t)v65;
  View.aspectRatio(_:contentMode:)(0, v53, v54, v51, v52);
  (*(void (**)(uint64_t, uint64_t))(v71 + 8))(v50, v53);
  v81 = v54;
  v82 = &protocol witness table for _AspectRatioLayout;
  v56 = v69;
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v69);
  v57 = v67;
  sub_10F80(v55, v56, v67);
  v58 = *(void (**)(uint64_t, uint64_t))(v74 + 8);
  v58(v55, v56);
  sub_C5C0(v57, v56, v80);
  return ((uint64_t (*)(uint64_t, uint64_t))v58)(v57, v56);
}

uint64_t sub_FBFF4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t WitnessTable;
  void (*v21)(char *, uint64_t);
  _QWORD v23[2];

  v10 = type metadata accessor for _CoverEffectViewModifier(255, a3, a4, a4);
  v11 = type metadata accessor for ModifiedContent(0, &type metadata for Image, v10);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v17 = (char *)v23 - v16;
  v19 = type metadata accessor for AssetCover(0, a3, a4, v18);
  Image.coverEffect<A>(_:)(a2 + *(int *)(v19 + 40), a1, a3, a4, (uint64_t)v15);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for _CoverEffectViewModifier<A>, v10);
  v23[0] = &protocol witness table for Image;
  v23[1] = WitnessTable;
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v11);
  sub_10F80((uint64_t)v15, v11, (uint64_t)v17);
  v21 = *(void (**)(char *, uint64_t))(v12 + 8);
  v21(v15, v11);
  sub_C5C0((uint64_t)v17, v11, a5);
  return ((uint64_t (*)(char *, uint64_t))v21)(v17, v11);
}

uint64_t sub_FC164@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = *(_QWORD *)(v3 + 16);
  v7 = *(_QWORD *)(v3 + 24);
  v8 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for AssetCover(0, v6, v7, a2) - 8) + 80);
  return sub_FBFF4(a1, v3 + ((v8 + 32) & ~v8), v6, v7, a3);
}

uint64_t sub_FC1CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[4];

  v23 = a4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a3, a2, &protocol requirements base descriptor for CoverEffect, &associated type descriptor for CoverEffect.Shape);
  v22 = *(_QWORD *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  v9 = (char *)&v20 - v8;
  v20 = *(_QWORD *)(swift_getAssociatedConformanceWitness(a3, a2, AssociatedTypeWitness, &protocol requirements base descriptor for CoverEffect, &associated conformance descriptor for CoverEffect.CoverEffect.Shape: InsettableShape)+ 8);
  v24[0] = AssociatedTypeWitness;
  v24[1] = &type metadata for Color;
  v24[2] = v20;
  v24[3] = &protocol witness table for Color;
  v10 = type metadata accessor for _ShapeView(0, v24);
  v21 = *(_QWORD *)(v10 - 8);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v20 - v14;
  v17 = type metadata accessor for AssetCover(0, a2, a3, v16);
  (*(void (**)(uint64_t, uint64_t))(a3 + 48))(a2, a3);
  v24[0] = *(_QWORD *)(a1 + *(int *)(v17 + 44));
  sub_FB91C((uint64_t)v24, 256, AssociatedTypeWitness, (uint64_t)&type metadata for Color, v20, (uint64_t)&protocol witness table for Color);
  (*(void (**)(char *, uint64_t))(v22 + 8))(v9, AssociatedTypeWitness);
  swift_getWitnessTable(&protocol conformance descriptor for _ShapeView<A, B>, v10);
  sub_10F80((uint64_t)v13, v10, (uint64_t)v15);
  v18 = *(void (**)(char *, uint64_t))(v21 + 8);
  v18(v13, v10);
  sub_C5C0((uint64_t)v15, v10, v23);
  return ((uint64_t (*)(char *, uint64_t))v18)(v15, v10);
}

uint64_t sub_FC3E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = (int *)type metadata accessor for AssetCover(0, v5, *(_QWORD *)(v4 + 24), a4);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v8 + 32) & ~v8;
  v10 = v9 + *(_QWORD *)(v7 + 64);
  v11 = v8 | 7;
  v12 = v4 + v9;
  v13 = v4 + v9 + v6[9];
  v14 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v12 + v6[10], v5);
  swift_release(*(_QWORD *)(v12 + v6[11]));
  return swift_deallocObject(v4, v10, v11);
}

uint64_t sub_FC4A0@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(v2 + 16);
  v5 = *(_QWORD *)(v2 + 24);
  v6 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for AssetCover(0, v4, v5, a1) - 8) + 80);
  return sub_FC1CC(v2 + ((v6 + 32) & ~v6), v4, v5, a2);
}

uint64_t sub_FC4F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, double a10@<D0>, uint64_t a11)
{
  uint64_t v19;
  uint64_t v20;
  char *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t WitnessTable;
  _QWORD v27[4];

  v27[0] = a5;
  v27[1] = a9;
  v19 = sub_5440(&qword_268370);
  __chkstk_darwin(v19);
  v21 = (char *)v27 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_FD188(a1, (uint64_t)v21);
  v22 = (_QWORD *)swift_allocObject(&unk_252580, 80, 7);
  v22[2] = a6;
  v22[3] = a7;
  v22[4] = a8;
  v22[5] = a11;
  v22[6] = a2;
  v22[7] = a3;
  v23 = v27[0];
  v22[8] = a4;
  v22[9] = v23;
  v24 = type metadata accessor for _ConditionalContent(0, a6, a7);
  v27[2] = a8;
  v27[3] = a11;
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v24);
  AsyncImage.init(url:scale:transaction:content:)(v21, 0, sub_FD49C, v22, v24, WitnessTable, a10);
  return sub_12C34(a1);
}

uint64_t sub_FC634(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  return swift_getOpaqueTypeConformance2(&v3, &opaque type descriptor for <<opaque return type of AssetCover.body>>, 1);
}

uint64_t sub_FC66C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[4];

  v5[0] = &unk_1EC150;
  result = type metadata accessor for URL(319);
  if (v3 <= 0x3F)
  {
    v5[1] = *(_QWORD *)(result - 8) + 64;
    result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 16));
    if (v4 <= 0x3F)
    {
      v5[2] = *(_QWORD *)(result - 8) + 64;
      v5[3] = (char *)&value witness table for Builtin.NativeObject + 64;
      swift_initStructMetadata(a1, 0, 4, v5, a1 + 32);
      return 0;
    }
  }
  return result;
}

uint64_t *sub_FC70C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;

  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_DWORD *)(v7 + 80);
  v9 = *(_QWORD *)(v7 + 64);
  v10 = *(_QWORD *)(a3 + 16);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_DWORD *)(v11 + 80);
  v13 = *(_QWORD *)(v11 + 64) + 7;
  if ((v12 | v8) > 7
    || ((*(_DWORD *)(v11 + 80) | *(_DWORD *)(v7 + 80)) & 0x100000) != 0
    || ((v13 + ((v9 + ((v8 + 16) & ~v8) + v12) & ~v12)) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    v24 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v24 + (((v12 | v8) & 0xF8 ^ 0x1F8) & ((v12 | v8) + 16)));
  }
  else
  {
    v16 = ~v8;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    v17 = (char *)a1 + v8;
    v18 = (char *)a2 + v8;
    v19 = (unint64_t)(v17 + 16) & v16;
    v20 = (unint64_t)(v18 + 16) & v16;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v19, v20, v6);
    v21 = (v19 + v9 + v12) & ~v12;
    v22 = (v20 + v9 + v12) & ~v12;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v21, v22, v10);
    v23 = (uint64_t *)((v13 + v22) & 0xFFFFFFFFFFFFF8);
    v24 = *v23;
    *(_QWORD *)((v13 + v21) & 0xFFFFFFFFFFFFF8) = *v23;
  }
  swift_retain(v24);
  return a1;
}

uint64_t sub_FC864(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v4 = type metadata accessor for URL(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = (a1 + *(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  (*(void (**)(unint64_t, uint64_t))(v5 + 8))(v6, v4);
  v7 = v6 + *(_QWORD *)(v5 + 64);
  v8 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v9 = (v7 + *(unsigned __int8 *)(v8 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  (*(void (**)(unint64_t))(v8 + 8))(v9);
  return swift_release(*(_QWORD *)((*(_QWORD *)(v8 + 64) + v9 + 7) & 0xFFFFFFFFFFFFF8));
}

_OWORD *sub_FC8F4(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t v20;

  *a1 = *a2;
  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = ((unint64_t)a1 + v8 + 16) & ~v8;
  v10 = ((unint64_t)a2 + v8 + 16) & ~v8;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v9, v10, v6);
  v11 = *(_QWORD *)(v7 + 64);
  v12 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v13 = *(unsigned __int8 *)(v12 + 80);
  v14 = v11 + v13;
  v15 = (v14 + v9) & ~v13;
  v16 = (v14 + v10) & ~v13;
  (*(void (**)(uint64_t, uint64_t))(v12 + 16))(v15, v16);
  v17 = *(_QWORD *)(v12 + 64) + 7;
  v18 = (_QWORD *)((v17 + v15) & 0xFFFFFFFFFFFFF8);
  v19 = (uint64_t *)((v17 + v16) & 0xFFFFFFFFFFFFF8);
  v20 = *v19;
  *v18 = *v19;
  swift_retain(v20);
  return a1;
}

_QWORD *sub_FC9C4(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;

  *a1 = *a2;
  a1[1] = a2[1];
  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = ((unint64_t)a1 + v8 + 16) & ~v8;
  v10 = ((unint64_t)a2 + v8 + 16) & ~v8;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24))(v9, v10, v6);
  v11 = *(_QWORD *)(v7 + 64);
  v12 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v13 = *(unsigned __int8 *)(v12 + 80);
  v14 = v11 + v13;
  v15 = (v14 + v9) & ~v13;
  v16 = (v14 + v10) & ~v13;
  (*(void (**)(uint64_t, uint64_t))(v12 + 24))(v15, v16);
  v17 = *(_QWORD *)(v12 + 64) + 7;
  v18 = (uint64_t *)((v17 + v15) & 0xFFFFFFFFFFFFFFF8);
  v19 = (uint64_t *)((v17 + v16) & 0xFFFFFFFFFFFFF8);
  v20 = *v19;
  v21 = *v18;
  *v18 = *v19;
  swift_retain(v20);
  swift_release(v21);
  return a1;
}

_OWORD *sub_FCAA8(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  *a1 = *a2;
  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = ((unint64_t)a1 + v8 + 16) & ~v8;
  v10 = ((unint64_t)a2 + v8 + 16) & ~v8;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(v9, v10, v6);
  v11 = *(_QWORD *)(v7 + 64);
  v12 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v13 = *(unsigned __int8 *)(v12 + 80);
  v14 = v11 + v13;
  v15 = (v14 + v9) & ~v13;
  v16 = (v14 + v10) & ~v13;
  (*(void (**)(uint64_t, uint64_t))(v12 + 32))(v15, v16);
  *(_QWORD *)((*(_QWORD *)(v12 + 64) + 7 + v15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v12 + 64) + 7 + v16) & 0xFFFFFFFFFFFFF8);
  return a1;
}

_OWORD *sub_FCB74(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;

  *a1 = *a2;
  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = ((unint64_t)a1 + v8 + 16) & ~v8;
  v10 = ((unint64_t)a2 + v8 + 16) & ~v8;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 40))(v9, v10, v6);
  v11 = *(_QWORD *)(v7 + 64);
  v12 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v13 = *(unsigned __int8 *)(v12 + 80);
  v14 = v11 + v13;
  v15 = (v14 + v9) & ~v13;
  v16 = (v14 + v10) & ~v13;
  (*(void (**)(uint64_t, uint64_t))(v12 + 40))(v15, v16);
  v17 = *(_QWORD *)(v12 + 64) + 7;
  v18 = (uint64_t *)((v17 + v15) & 0xFFFFFFFFFFFFFFF8);
  v19 = *v18;
  *v18 = *(_QWORD *)((v17 + v16) & 0xFFFFFFFFFFFFF8);
  swift_release(v19);
  return a1;
}

uint64_t sub_FCC48(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, uint64_t, uint64_t);
  unint64_t v24;

  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_DWORD *)(v7 + 84);
  v9 = *(_QWORD *)(a3 + 16);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned int *)(v10 + 84);
  if (v11 <= v8)
    v12 = *(_DWORD *)(v7 + 84);
  else
    v12 = *(_DWORD *)(v10 + 84);
  if (v12 <= 0x7FFFFFFF)
    v12 = 0x7FFFFFFF;
  if (!a2)
    return 0;
  v13 = v6;
  v14 = *(unsigned __int8 *)(v7 + 80);
  v15 = *(_QWORD *)(v7 + 64);
  v16 = *(unsigned __int8 *)(v10 + 80);
  v17 = *(_QWORD *)(v10 + 64) + 7;
  if (v12 < a2)
  {
    if (((((v17 + ((v15 + ((v14 + 16) & ~v14) + v16) & ~v16)) & 0xFFFFFFFFFFFFFFF8) + 8) & 0xFFFFFFF8) != 0)
      v18 = 2;
    else
      v18 = a2 - v12 + 1;
    if (v18 >= 0x10000)
      v19 = 4;
    else
      v19 = 2;
    if (v18 < 0x100)
      v19 = 1;
    if (v18 >= 2)
      v20 = v19;
    else
      v20 = 0;
    __asm { BR              X5 }
  }
  v22 = (a1 + v14 + 16) & ~v14;
  if (v8 == v12)
  {
    v23 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v11 = *(unsigned int *)(v7 + 84);
    v9 = v13;
    return v23(v22, v11, v9);
  }
  v22 = (v22 + v15 + v16) & ~v16;
  if ((_DWORD)v11 == v12)
  {
    v23 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
    return v23(v22, v11, v9);
  }
  v24 = *(_QWORD *)((v17 + v22) & 0xFFFFFFFFFFFFF8);
  if (v24 >= 0xFFFFFFFF)
    LODWORD(v24) = -1;
  return (v24 + 1);
}

void sub_FCDF0(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  int v15;
  unsigned int v16;

  v8 = *(_QWORD *)(type metadata accessor for URL(0) - 8);
  v9 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v9 + 84) <= *(_DWORD *)(v8 + 84))
    v10 = *(_DWORD *)(v8 + 84);
  else
    v10 = *(_DWORD *)(v9 + 84);
  if (v10 <= 0x7FFFFFFF)
    v10 = 0x7FFFFFFF;
  v11 = *(unsigned __int8 *)(v8 + 80);
  v12 = *(unsigned __int8 *)(v9 + 80);
  if (v10 >= a3)
  {
    v15 = 0;
    if (a2 <= v10)
      goto LABEL_19;
  }
  else
  {
    if (((*(_DWORD *)(v9 + 64)
         + 7
         + ((*(_DWORD *)(v8 + 64) + (((_DWORD)v11 + 16) & ~(_DWORD)v11) + (_DWORD)v12) & ~(_DWORD)v12)) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v13 = a3 - v10 + 1;
    else
      v13 = 2;
    if (v13 >= 0x10000)
      v14 = 4;
    else
      v14 = 2;
    if (v13 < 0x100)
      v14 = 1;
    if (v13 >= 2)
      v15 = v14;
    else
      v15 = 0;
    if (a2 <= v10)
LABEL_19:
      __asm { BR              X5 }
  }
  if (((*(_DWORD *)(v9 + 64)
       + 7
       + ((*(_DWORD *)(v8 + 64) + (((_DWORD)v11 + 16) & ~(_DWORD)v11) + (_DWORD)v12) & ~(_DWORD)v12)) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    v16 = ~v10 + a2;
    bzero(a1, ((*(_QWORD *)(v9 + 64) + 7 + ((*(_QWORD *)(v8 + 64) + ((v11 + 16) & ~v11) + v12) & ~v12)) & 0xFFFFFFFFFFFFFFF8)+ 8);
    *a1 = v16;
  }
  __asm { BR              X10 }
}

void sub_FCF34()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0xFCFD4);
}

void sub_FCF3C()
{
  int v0;
  uint64_t v1;
  uint64_t v2;

  *(_DWORD *)(v1 + v2) = 0;
  if (v0)
    JUMPOUT(0xFCF44);
  JUMPOUT(0xFCFD4);
}

void sub_FCF9C()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0xFCFD4);
}

void sub_FCFA4()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0xFCFD4);
}

uint64_t sub_FCFAC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t (*v5)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  *(_WORD *)(v17 + v18) = 0;
  if (!(_DWORD)v16)
    JUMPOUT(0xFCFD4);
  v4 = (v17 + v14 + 16) & a1;
  if ((_DWORD)v8 == v11)
  {
    v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
    v6 = v16;
    a2 = v8;
    a3 = a4;
  }
  else
  {
    v4 = (v4 + v13 + v12) & v15;
    if ((_DWORD)a2 != v11)
      JUMPOUT(0xFCFB8);
    v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v6 = v16;
  }
  return v5(v4, v6, a2, a3);
}

uint64_t sub_FCFEC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t WitnessTable;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[4];

  v4 = *a1;
  v5 = a1[1];
  v6 = type metadata accessor for _CoverEffectViewModifier(255, *a1, v5, a4);
  v7 = type metadata accessor for ModifiedContent(255, &type metadata for Image, v6);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v5, v4, &protocol requirements base descriptor for CoverEffect, &associated type descriptor for CoverEffect.Shape);
  v9 = *(_QWORD *)(swift_getAssociatedConformanceWitness(v5, v4, AssociatedTypeWitness, &protocol requirements base descriptor for CoverEffect, &associated conformance descriptor for CoverEffect.CoverEffect.Shape: InsettableShape)+ 8);
  v16[0] = AssociatedTypeWitness;
  v16[1] = &type metadata for Color;
  v16[2] = v9;
  v16[3] = &protocol witness table for Color;
  v10 = type metadata accessor for _ShapeView(255, v16);
  v11 = type metadata accessor for _ConditionalContent(255, v7, v10);
  swift_getWitnessTable(&protocol conformance descriptor for _CoverEffectViewModifier<A>, v6);
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v7);
  swift_getWitnessTable(&protocol conformance descriptor for _ShapeView<A, B>, v10);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v11);
  v13 = type metadata accessor for AsyncImage(255, v11, WitnessTable);
  v14 = type metadata accessor for ModifiedContent(255, v13, &type metadata for _AspectRatioLayout);
  swift_getWitnessTable(&protocol conformance descriptor for AsyncImage<A>, v13);
  return swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v14);
}

uint64_t sub_FD188(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_5440(&qword_268370);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_FD1D0@<X0>(uint64_t a1@<X0>, void (*a2)(void)@<X1>, uint64_t a3@<X2>, void (*a4)(void)@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t);
  uint64_t v34;
  __n128 v35;
  uint64_t v36;
  void (*v37)(char *, uint64_t);
  uint64_t v38;
  char *v39;
  _QWORD v41[2];
  void (*v42)(void);
  uint64_t v43;
  void (*v44)(void);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v48 = a8;
  v49 = a9;
  v41[1] = a5;
  v42 = a4;
  v43 = a3;
  v44 = a2;
  v47 = a10;
  v45 = *(_QWORD *)(a6 - 8);
  v12 = __chkstk_darwin(a1);
  v14 = (char *)v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v12);
  v17 = (char *)v41 - v16;
  v41[0] = *(_QWORD *)(v18 - 8);
  v19 = __chkstk_darwin(v15);
  v21 = (char *)v41 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v23 = (char *)v41 - v22;
  v26 = type metadata accessor for _ConditionalContent(0, v24, v25);
  v46 = *(_QWORD *)(v26 - 8);
  v27 = __chkstk_darwin(v26);
  v29 = (char *)v41 - v28;
  v30 = AsyncImagePhase.image.getter(v27);
  if (v30)
  {
    v31 = v30;
    v44();
    v32 = v48;
    sub_10F80((uint64_t)v14, a6, (uint64_t)v17);
    v33 = *(void (**)(char *, uint64_t))(v45 + 8);
    v33(v14, a6);
    sub_C5C0((uint64_t)v17, a6, (uint64_t)v14);
    v34 = v47;
    sub_17C7C((uint64_t)v14, a6, a7, v32, v47);
    v35 = swift_release(v31);
    ((void (*)(char *, uint64_t, __n128))v33)(v14, a6, v35);
    v33(v17, a6);
  }
  else
  {
    v42();
    v36 = v47;
    sub_10F80((uint64_t)v21, a7, (uint64_t)v23);
    v37 = *(void (**)(char *, uint64_t))(v41[0] + 8);
    v37(v21, a7);
    sub_C5C0((uint64_t)v23, a7, (uint64_t)v21);
    v38 = v48;
    sub_17D40((uint64_t)v21, a6, a7, v48, v36);
    v37(v21, a7);
    v39 = v23;
    v34 = v36;
    v37(v39, a7);
    v32 = v38;
  }
  v50 = v32;
  v51 = v34;
  swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v26);
  sub_C5C0((uint64_t)v29, v26, v49);
  return (*(uint64_t (**)(char *, uint64_t))(v46 + 8))(v29, v26);
}

uint64_t sub_FD470()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 56));
  swift_release(*(_QWORD *)(v0 + 72));
  return swift_deallocObject(v0, 80, 7);
}

uint64_t sub_FD49C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_FD1D0(a1, *(void (**)(void))(v2 + 48), *(_QWORD *)(v2 + 56), *(void (**)(void))(v2 + 64), *(_QWORD *)(v2 + 72), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), a2, *(_QWORD *)(v2 + 40));
}

id static NSBundle.BooksUI.getter()
{
  uint64_t v0;
  uint64_t ObjCClassFromMetadata;

  v0 = type metadata accessor for BundleFinder();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v0);
  return objc_msgSend((id)objc_opt_self(NSBundle), "bundleForClass:", ObjCClassFromMetadata);
}

uint64_t sub_FD514()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  swift_errorRetain(v1);
  return v1;
}

uint64_t Error.withSubsequentAction(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  __int128 v18[2];

  v5 = v4;
  v9 = *(_QWORD *)(a2 - 8);
  v10 = __chkstk_darwin(a1);
  v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_BD00(v10, (uint64_t)v18);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, v5, a2);
  v13 = _getErrorEmbeddedNSError<A>(_:)(v12, a2, a3);
  if (v13)
  {
    v14 = v13;
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, a2);
  }
  else
  {
    v14 = swift_allocError(a2, a3, 0, 0);
    (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(v15, v12, a2);
  }
  result = sub_AC68(v18, a4);
  *(_QWORD *)(a4 + 40) = v14;
  return result;
}

unint64_t sub_FD630()
{
  unint64_t result;

  result = qword_265588;
  if (!qword_265588)
  {
    result = swift_getWitnessTable(&unk_1EC1F8, &type metadata for WrappedErrorWithAction);
    atomic_store(result, (unint64_t *)&qword_265588);
  }
  return result;
}

uint64_t destroy for WrappedErrorWithAction(_QWORD *a1)
{
  _s7BooksUI13AnyPagedFrameVwxx_0(a1);
  return swift_errorRelease(a1[5]);
}

uint64_t initializeWithCopy for WrappedErrorWithAction(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;

  v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  v5 = *(_QWORD *)(a2 + 40);
  swift_errorRetain(v5);
  *(_QWORD *)(a1 + 40) = v5;
  return a1;
}

_QWORD *assignWithCopy for WrappedErrorWithAction(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  sub_142F8(a1, a2);
  v4 = a2[5];
  swift_errorRetain(v4);
  v5 = a1[5];
  a1[5] = v4;
  swift_errorRelease(v5);
  return a1;
}

uint64_t assignWithTake for WrappedErrorWithAction(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;

  _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  v6 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  swift_errorRelease(v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for WrappedErrorWithAction(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for WrappedErrorWithAction(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for WrappedErrorWithAction()
{
  return &type metadata for WrappedErrorWithAction;
}

unint64_t sub_FD808(uint64_t a1)
{
  unint64_t result;

  result = sub_FD82C();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_FD82C()
{
  unint64_t result;

  result = qword_265590;
  if (!qword_265590)
  {
    result = swift_getWitnessTable(&unk_1EC1B8, &type metadata for WrappedErrorWithAction);
    atomic_store(result, (unint64_t *)&qword_265590);
  }
  return result;
}

uint64_t YearInReviewLoadingView.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t KeyPath;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;

  v70 = a1;
  v1 = type metadata accessor for ColorScheme(0);
  v68 = *(_QWORD *)(v1 - 8);
  v69 = v1;
  __chkstk_darwin(v1);
  v67 = (char *)&v55 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v66 = type metadata accessor for ToolbarButtonStyle(0);
  v3 = __chkstk_darwin(v66);
  v64 = (uint64_t *)((char *)&v55 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v3);
  v65 = (uint64_t)&v55 - v5;
  v6 = sub_5440(&qword_265598);
  __chkstk_darwin(v6);
  v8 = (char *)&v55 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_5440(&qword_2655A0);
  v58 = *(_QWORD *)(v9 - 8);
  v59 = v9;
  __chkstk_darwin(v9);
  v11 = (char *)&v55 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = sub_5440(&qword_2655A8);
  __chkstk_darwin(v56);
  v13 = (char *)&v55 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = sub_5440(&qword_2655B0);
  __chkstk_darwin(v61);
  v15 = (char *)&v55 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_5440(&qword_2655B8);
  v62 = *(_QWORD *)(v16 - 8);
  v63 = v16;
  __chkstk_darwin(v16);
  v57 = (char *)&v55 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = sub_5440(&qword_2655C0);
  v18 = __chkstk_darwin(v60);
  v20 = (char *)&v55 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v8 = static HorizontalAlignment.center.getter(v18);
  *((_QWORD *)v8 + 1) = 0;
  v8[16] = 1;
  sub_5440(&qword_2655C8);
  v21 = ProgressView<>.init<>()();
  v22 = static Axis.Set.horizontal.getter(v21);
  v23 = v22;
  v24 = static Axis.Set.vertical.getter(v22);
  v25 = Axis.Set.init(rawValue:)(0);
  v26 = Axis.Set.init(rawValue:)(v25);
  if (Axis.Set.init(rawValue:)(v26 & v23) != v23)
    v25 = Axis.Set.init(rawValue:)(v25 | v23);
  v27 = Axis.Set.init(rawValue:)(v25);
  if (Axis.Set.init(rawValue:)(v27 & v24) != v24)
    v25 = Axis.Set.init(rawValue:)(v25 | v24);
  v28 = _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0();
  v30 = v29;
  v31 = sub_7FD8(&qword_2655D0, &qword_265598, (uint64_t)&protocol conformance descriptor for VStack<A>);
  View.containerRelativeFrame(_:alignment:)(v25, v28, v30, v6, v31);
  sub_B414((uint64_t)v8, &qword_265598);
  v32 = _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0();
  v34 = v33;
  v35 = Color.init(hexString:)(0x423243374246, 0xE600000000000000);
  v36 = static Edge.Set.all.getter(v35);
  v38 = v58;
  v37 = v59;
  (*(void (**)(char *, char *, uint64_t))(v58 + 16))(v13, v11, v59);
  v39 = &v13[*(int *)(v56 + 36)];
  *(_QWORD *)v39 = v35;
  v39[8] = v36;
  *((_QWORD *)v39 + 2) = v32;
  *((_QWORD *)v39 + 3) = v34;
  (*(void (**)(char *, uint64_t))(v38 + 8))(v11, v37);
  sub_FDD58((uint64_t)v13, (uint64_t)v15);
  sub_B414((uint64_t)v13, &qword_2655A8);
  KeyPath = swift_getKeyPath(&unk_1EC220);
  v41 = (uint64_t)v64;
  *v64 = KeyPath;
  v42 = sub_5440(&qword_25E948);
  swift_storeEnumTagMultiPayload(v41, v42, 0);
  v43 = v65;
  sub_FDDA8(v41, v65);
  v44 = sub_FDDEC();
  sub_FDF24();
  v45 = v57;
  View.buttonStyle<A>(_:)(v43, v61, v66, v44);
  sub_FDF6C(v43);
  sub_B414((uint64_t)v15, &qword_2655B0);
  v46 = swift_getKeyPath(&unk_1EC220);
  v48 = v67;
  v47 = v68;
  v49 = v69;
  (*(void (**)(char *, _QWORD, uint64_t))(v68 + 104))(v67, enum case for ColorScheme.dark(_:), v69);
  v50 = (uint64_t *)&v20[*(int *)(v60 + 36)];
  v51 = sub_5440(&qword_25EE58);
  (*(void (**)(char *, char *, uint64_t))(v47 + 16))((char *)v50 + *(int *)(v51 + 28), v48, v49);
  *v50 = v46;
  v53 = v62;
  v52 = v63;
  (*(void (**)(char *, char *, uint64_t))(v62 + 16))(v20, v45, v63);
  (*(void (**)(char *, uint64_t))(v47 + 8))(v48, v49);
  (*(void (**)(char *, uint64_t))(v53 + 8))(v45, v52);
  return sub_FDFA8((uint64_t)v20, v70);
}

uint64_t sub_FDD58(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_5440(&qword_2655A8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_FDDA8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ToolbarButtonStyle(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_FDDEC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2655D8;
  if (!qword_2655D8)
  {
    v1 = sub_7EF8(&qword_2655B0);
    sub_FDE58();
    sub_11764();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_2655D8);
  }
  return result;
}

unint64_t sub_FDE58()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_2655E0;
  if (!qword_2655E0)
  {
    v1 = sub_7EF8(&qword_2655A8);
    v2[0] = sub_7EF8(&qword_265598);
    v2[1] = sub_7FD8(&qword_2655D0, &qword_265598, (uint64_t)&protocol conformance descriptor for VStack<A>);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.containerRelativeFrame(_:alignment:)>>, 1);
    sub_7FD8(&qword_2655E8, &qword_2655F0, (uint64_t)&protocol conformance descriptor for _BackgroundModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_2655E0);
  }
  return result;
}

unint64_t sub_FDF24()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2655F8;
  if (!qword_2655F8)
  {
    v1 = type metadata accessor for ToolbarButtonStyle(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for ToolbarButtonStyle, v1);
    atomic_store(result, (unint64_t *)&qword_2655F8);
  }
  return result;
}

uint64_t sub_FDF6C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ToolbarButtonStyle(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_FDFA8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_5440(&qword_2655C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_FDFF0(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &opaque type descriptor for <<opaque return type of YearInReviewLoadingView.body>>, 1);
}

uint64_t sub_FE000@<X0>(uint64_t a1@<X8>)
{
  return YearInReviewLoadingView.body.getter(a1);
}

ValueMetadata *type metadata accessor for YearInReviewLoadingView()
{
  return &type metadata for YearInReviewLoadingView;
}

unint64_t sub_FE028()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[4];

  result = qword_265600;
  if (!qword_265600)
  {
    v1 = sub_7EF8(&qword_2655C0);
    v2[0] = sub_7EF8(&qword_2655B0);
    v2[1] = type metadata accessor for ToolbarButtonStyle(255);
    v2[2] = sub_FDDEC();
    v2[3] = sub_FDF24();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
    sub_7FD8((unint64_t *)&qword_25EE78, &qword_25EE58, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_265600);
  }
  return result;
}

uint64_t UberNavigationTitleView.init(title:subtitle:navigationBarOpacity:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, double a6@<D0>)
{
  int *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;

  v12 = (int *)type metadata accessor for UberNavigationTitleView(0);
  v13 = (_QWORD *)(a5 + v12[6]);
  *v13 = swift_getKeyPath(&unk_1EC2D0);
  v14 = sub_5440(&qword_25F548);
  swift_storeEnumTagMultiPayload(v13, v14, 0);
  v15 = (_QWORD *)(a5 + v12[7]);
  *v15 = swift_getKeyPath(&unk_1EC2F8);
  v16 = sub_5440(&qword_25FAC8);
  swift_storeEnumTagMultiPayload(v15, v16, 0);
  v17 = type metadata accessor for LocalizerRequest(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(a5, a1, v17);
  result = sub_167A4(a2, a5 + v12[5], &qword_25E0C8);
  v19 = a5 + v12[8];
  *(_QWORD *)v19 = a3;
  *(_QWORD *)(v19 + 8) = a4;
  *(double *)(v19 + 16) = a6;
  return result;
}

uint64_t type metadata accessor for UberNavigationTitleView(uint64_t a1)
{
  uint64_t result;

  result = qword_265680;
  if (!qword_265680)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for UberNavigationTitleView);
  return result;
}

uint64_t UberNavigationTitleView.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  double v27;
  double v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD v44[3];

  v40 = a1;
  v2 = type metadata accessor for SizeConstants.Spacing(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v39 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for SizeConstants(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_5440(&qword_265608);
  __chkstk_darwin(v8);
  v10 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_5440(&qword_265610);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v10 = static HorizontalAlignment.center.getter(v12);
  *((_QWORD *)v10 + 1) = 0;
  v10[16] = 1;
  v15 = sub_5440(&qword_265618);
  sub_FE4C0(v1, (uint64_t)&v10[*(int *)(v15 + 44)]);
  v16 = (uint64_t *)(v1 + *(int *)(type metadata accessor for UberNavigationTitleView(0) + 32));
  v17 = v16[1];
  v18 = v16[2];
  v41 = *v16;
  v42 = v17;
  v43 = v18;
  v19 = sub_5440(&qword_263EE0);
  Binding.projectedValue.getter(v44, v19);
  v21 = v44[0];
  v20 = v44[1];
  v22 = v44[2];
  sub_B3D0((uint64_t)v10, (uint64_t)v14, &qword_265608);
  v23 = &v14[*(int *)(v11 + 36)];
  *(_QWORD *)v23 = v21;
  *((_QWORD *)v23 + 1) = v20;
  *((_QWORD *)v23 + 2) = v22;
  v24 = sub_B414((uint64_t)v10, &qword_265608);
  LOBYTE(v10) = static Edge.Set.horizontal.getter(v24);
  sub_3168C((uint64_t)v7);
  sub_FEFB0((uint64_t)v7, (uint64_t)v4);
  sub_224DC((uint64_t)v7, type metadata accessor for SizeConstants);
  v25 = sub_224DC((uint64_t)v4, type metadata accessor for SizeConstants.Spacing);
  v29 = EdgeInsets.init(_all:)(v25, 16.0, v26, v27, v28);
  v31 = v30;
  v33 = v32;
  v35 = v34;
  v36 = v40;
  sub_B3D0((uint64_t)v14, v40, &qword_265610);
  v37 = v36 + *(int *)(sub_5440(&qword_265620) + 36);
  *(_BYTE *)v37 = (_BYTE)v10;
  *(double *)(v37 + 8) = v29;
  *(_QWORD *)(v37 + 16) = v31;
  *(_QWORD *)(v37 + 24) = v33;
  *(_QWORD *)(v37 + 32) = v35;
  *(_BYTE *)(v37 + 40) = 0;
  return sub_B414((uint64_t)v14, &qword_265610);
}

uint64_t sub_FE4C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(char *, uint64_t);
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t KeyPath;
  uint64_t v71;
  void (*v72)(char *, char *, uint64_t);
  char *v73;
  uint64_t *v74;
  void (*v75)(char *, uint64_t);
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  double v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t *v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v105;
  char *v106;
  char *v107;
  char *v108;
  char *v109;
  void (*v110)(char *, _QWORD, uint64_t);
  void (*v111)(char *, uint64_t, uint64_t);
  uint64_t v112;
  char *v113;
  char *v114;
  char *v115;
  uint64_t v116;
  char *v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  char *v123;
  uint64_t v124;
  uint64_t (*v125)(char *, uint64_t, uint64_t);
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;

  v137 = a2;
  v119 = sub_5440(&qword_2656F8);
  __chkstk_darwin(v119);
  v122 = (char *)&v105 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_5440(&qword_265700);
  v134 = *(_QWORD *)(v4 - 8);
  v135 = v4;
  __chkstk_darwin(v4);
  v121 = (uint64_t)&v105 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_5440(&qword_265708);
  v7 = __chkstk_darwin(v6);
  v136 = (uint64_t)&v105 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v138 = (char *)&v105 - v9;
  v10 = sub_5440(&qword_25FE08);
  v11 = __chkstk_darwin(v10);
  v118 = (char *)&v105 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v11);
  v109 = (char *)&v105 - v14;
  __chkstk_darwin(v13);
  v108 = (char *)&v105 - v15;
  v16 = type metadata accessor for Font.TextStyle(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = __chkstk_darwin(v16);
  v117 = (char *)&v105 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __chkstk_darwin(v18);
  v107 = (char *)&v105 - v21;
  __chkstk_darwin(v20);
  v106 = (char *)&v105 - v22;
  v23 = type metadata accessor for FontConstants.Navigation(0);
  v24 = __chkstk_darwin(v23);
  v116 = (uint64_t)&v105 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = __chkstk_darwin(v24);
  v105 = (char *)&v105 - v27;
  __chkstk_darwin(v26);
  v29 = (char *)&v105 - v28;
  v30 = sub_5440(&qword_25E0C8);
  v31 = __chkstk_darwin(v30);
  v129 = (uint64_t)&v105 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v31);
  v34 = (char *)&v105 - v33;
  v35 = type metadata accessor for LocalizerRequest(0);
  v36 = *(_QWORD *)(v35 - 8);
  v37 = __chkstk_darwin(v35);
  v115 = (char *)&v105 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v37);
  v40 = (char *)&v105 - v39;
  v41 = type metadata accessor for LocalizedText(0);
  v127 = *(_QWORD *)(v41 - 8);
  v128 = v41;
  v42 = __chkstk_darwin(v41);
  v114 = (char *)&v105 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v42);
  v45 = (char *)&v105 - v44;
  v126 = sub_5440(&qword_25FE10);
  v46 = __chkstk_darwin(v126);
  v132 = (uint64_t)&v105 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = __chkstk_darwin(v46);
  v50 = (char *)&v105 - v49;
  __chkstk_darwin(v48);
  v139 = (uint64_t)&v105 - v51;
  v111 = *(void (**)(char *, uint64_t, uint64_t))(v36 + 16);
  v111(v40, a1, v35);
  v123 = v45;
  v113 = v40;
  LocalizedText.init(_:)(v40);
  v52 = type metadata accessor for UberNavigationTitleView(0);
  v124 = a1 + *(int *)(v52 + 20);
  sub_B3D0(v124, (uint64_t)v34, &qword_25E0C8);
  v130 = v36;
  v131 = v35;
  v125 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v36 + 48);
  LODWORD(v35) = v125(v34, 1, v35);
  sub_B414((uint64_t)v34, &qword_25E0C8);
  v112 = v52;
  v120 = a1;
  v133 = v16;
  if ((_DWORD)v35 == 1)
  {
    v29 = v105;
    sub_3226C((uint64_t)v105);
    v53 = v107;
    v110 = *(void (**)(char *, _QWORD, uint64_t))(v17 + 104);
    v110(v107, enum case for Font.TextStyle.headline(_:), v16);
    if ((_s7BooksUI16FallBackFontSpecV03usecdE0SbyFZ_0() & 1) != 0)
    {
      v54 = type metadata accessor for Font.Design(0);
      v55 = (uint64_t)v109;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v54 - 8) + 56))(v109, 1, 1, v54);
    }
    else
    {
      v59 = enum case for Font.Design.serif (_:);
      v60 = type metadata accessor for Font.Design(0);
      v61 = *(_QWORD *)(v60 - 8);
      v55 = (uint64_t)v109;
      (*(void (**)(char *, uint64_t, uint64_t))(v61 + 104))(v109, v59, v60);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v61 + 56))(v55, 0, 1, v60);
    }
    v62 = (uint64_t)v138;
    v63 = v128;
    v64 = static Font.system(_:design:weight:)(v53, v55, 0, 1);
    sub_B414(v55, &qword_25FE08);
    v65 = *(void (**)(char *, uint64_t))(v17 + 8);
    v65(v53, v133);
  }
  else
  {
    sub_3226C((uint64_t)v29);
    v56 = v106;
    v110 = *(void (**)(char *, _QWORD, uint64_t))(v17 + 104);
    v110(v106, enum case for Font.TextStyle.subheadline(_:), v16);
    if ((_s7BooksUI16FallBackFontSpecV03usecdE0SbyFZ_0() & 1) != 0)
    {
      v57 = type metadata accessor for Font.Design(0);
      v58 = (uint64_t)v108;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v57 - 8) + 56))(v108, 1, 1, v57);
    }
    else
    {
      v66 = enum case for Font.Design.serif (_:);
      v67 = type metadata accessor for Font.Design(0);
      v68 = *(_QWORD *)(v67 - 8);
      v58 = (uint64_t)v108;
      (*(void (**)(char *, uint64_t, uint64_t))(v68 + 104))(v108, v66, v67);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v68 + 56))(v58, 0, 1, v67);
    }
    v62 = (uint64_t)v138;
    v69 = static Font.system(_:design:weight:)(v56, v58, 0, 1);
    sub_B414(v58, &qword_25FE08);
    v65 = *(void (**)(char *, uint64_t))(v17 + 8);
    v65(v56, v16);
    v64 = Font.bold()(v69);
    swift_release(v69);
    v63 = v128;
  }
  sub_224DC((uint64_t)v29, type metadata accessor for FontConstants.Navigation);
  KeyPath = swift_getKeyPath(&unk_1EC420);
  v71 = v127;
  v72 = *(void (**)(char *, char *, uint64_t))(v127 + 16);
  v73 = v123;
  v72(v50, v123, v63);
  v74 = (uint64_t *)&v50[*(int *)(v126 + 36)];
  *v74 = KeyPath;
  v74[1] = v64;
  v75 = *(void (**)(char *, uint64_t))(v71 + 8);
  v75(v73, v63);
  sub_167A4((uint64_t)v50, v139, &qword_25FE10);
  v76 = v129;
  sub_B3D0(v124, v129, &qword_25E0C8);
  v77 = v131;
  if (v125((char *)v76, 1, v131) == 1)
  {
    sub_B414(v76, &qword_25E0C8);
    v78 = 1;
    v79 = v135;
  }
  else
  {
    v80 = v115;
    (*(void (**)(char *, uint64_t, uint64_t))(v130 + 32))(v115, v76, v77);
    v81 = v113;
    v111(v113, (uint64_t)v80, v77);
    v82 = v114;
    LocalizedText.init(_:)(v81);
    v83 = _s7BooksUI14ColorConstantsV19booksSecondaryLabel05SwiftB00C0Vvg_0();
    v84 = swift_getKeyPath(&unk_1EC450);
    v85 = (uint64_t)v122;
    v72(v122, v82, v63);
    v86 = (uint64_t *)(v85 + *(int *)(v119 + 36));
    *v86 = v84;
    v86[1] = v83;
    v75(v82, v63);
    v87 = v116;
    sub_3226C(v116);
    v88 = v117;
    v89 = v133;
    v110(v117, enum case for Font.TextStyle.caption2(_:), v133);
    v90 = type metadata accessor for Font.Design(0);
    v91 = (uint64_t)v118;
    v92 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v90 - 8) + 56))(v118, 1, 1, v90);
    v93 = static Font.Weight.medium.getter(v92);
    v94 = static Font.system(_:design:weight:)(v88, v91, *(_QWORD *)&v93, 0);
    sub_B414(v91, &qword_25FE08);
    v65(v88, v89);
    sub_224DC(v87, type metadata accessor for FontConstants.Navigation);
    v95 = swift_getKeyPath(&unk_1EC420);
    v96 = v121;
    sub_B3D0(v85, v121, &qword_2656F8);
    v79 = v135;
    v97 = (uint64_t *)(v96 + *(int *)(v135 + 36));
    *v97 = v95;
    v97[1] = v94;
    sub_B414(v85, &qword_2656F8);
    v98 = v80;
    v62 = (uint64_t)v138;
    (*(void (**)(char *, uint64_t))(v130 + 8))(v98, v77);
    sub_167A4(v96, v62, &qword_265700);
    v78 = 0;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v134 + 56))(v62, v78, 1, v79);
  v99 = v139;
  v100 = v132;
  sub_B3D0(v139, v132, &qword_25FE10);
  v101 = v136;
  sub_B3D0(v62, v136, &qword_265708);
  v102 = v137;
  sub_B3D0(v100, v137, &qword_25FE10);
  v103 = sub_5440(&qword_265710);
  sub_B3D0(v101, v102 + *(int *)(v103 + 48), &qword_265708);
  sub_B414(v62, &qword_265708);
  sub_B414(v99, &qword_25FE10);
  sub_B414(v101, &qword_265708);
  return sub_B414(v100, &qword_25FE10);
}

uint64_t sub_FEF10@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v4 = sub_5440(&qword_263EE0);
  Binding.wrappedValue.getter(&v8, v4);
  v5 = v8;
  v6 = sub_5440(&qword_2656E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a2, a1, v6);
  result = sub_5440(&qword_2656F0);
  *(_QWORD *)(a2 + *(int *)(result + 36)) = v5;
  return result;
}

uint64_t sub_FEFB0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SizeConstants.Environment(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_FEFF4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &opaque type descriptor for <<opaque return type of UberNavigationTitleView.body>>, 1);
}

char *initializeBufferWithCopyOfBuffer for UberNavigationTitleView(char *a1, char *a2, int *a3)
{
  char *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(char *, char *, uint64_t);
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v14 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    v4 = (char *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = type metadata accessor for LocalizerRequest(0);
    v8 = *(_QWORD *)(v7 - 8);
    v9 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
    v9(v4, a2, v7);
    v10 = a3[5];
    v11 = &v4[v10];
    v12 = &a2[v10];
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(&a2[v10], 1, v7))
    {
      v13 = sub_5440(&qword_25E0C8);
      memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
    else
    {
      v9(v11, v12, v7);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v11, 0, 1, v7);
    }
    v15 = a3[6];
    v16 = &v4[v15];
    v17 = &a2[v15];
    v18 = sub_5440(&qword_25F548);
    if (swift_getEnumCaseMultiPayload(v17, v18) == 1)
    {
      *(_WORD *)v16 = *(_WORD *)v17;
      v19 = (int *)type metadata accessor for SizeConstants.Environment(0);
      v20 = v19[6];
      v21 = &v16[v20];
      v22 = &v17[v20];
      v23 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v21, v22, v23);
      *(_QWORD *)&v16[v19[7]] = *(_QWORD *)&v17[v19[7]];
      v24 = v19[8];
      v25 = &v16[v24];
      v26 = &v17[v24];
      v25[2] = v26[2];
      *(_WORD *)v25 = *(_WORD *)v26;
      v27 = 1;
    }
    else
    {
      v28 = *(_QWORD *)v17;
      *(_QWORD *)v16 = *(_QWORD *)v17;
      swift_retain(v28);
      v27 = 0;
    }
    swift_storeEnumTagMultiPayload(v16, v18, v27);
    v29 = a3[7];
    v30 = &v4[v29];
    v31 = &a2[v29];
    v32 = sub_5440(&qword_25FAC8);
    if (swift_getEnumCaseMultiPayload(v31, v32) == 1)
    {
      *(_WORD *)v30 = *(_WORD *)v31;
      v33 = type metadata accessor for FontConstants.Environment(0);
      v34 = *(int *)(v33 + 24);
      v35 = &v30[v34];
      v36 = &v31[v34];
      v37 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v37 - 8) + 16))(v35, v36, v37);
      *(_QWORD *)&v30[*(int *)(v33 + 28)] = *(_QWORD *)&v31[*(int *)(v33 + 28)];
      v38 = 1;
    }
    else
    {
      v39 = *(_QWORD *)v31;
      *(_QWORD *)v30 = *(_QWORD *)v31;
      swift_retain(v39);
      v38 = 0;
    }
    swift_storeEnumTagMultiPayload(v30, v32, v38);
    v40 = a3[8];
    v41 = &v4[v40];
    v42 = &a2[v40];
    v43 = *(_QWORD *)v42;
    v14 = *((_QWORD *)v42 + 1);
    *(_QWORD *)v41 = *(_QWORD *)v42;
    *((_QWORD *)v41 + 1) = v14;
    *((_QWORD *)v41 + 2) = *((_QWORD *)v42 + 2);
    swift_retain(v43);
  }
  swift_retain(v14);
  return v4;
}

double destroy for UberNavigationTitleView(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  _QWORD *v16;
  double result;

  v4 = type metadata accessor for LocalizerRequest(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v6(a1, v4);
  v7 = a1 + a2[5];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v7, 1, v4))
    v6(v7, v4);
  v8 = (_QWORD *)(a1 + a2[6]);
  v9 = sub_5440(&qword_25F548);
  if (swift_getEnumCaseMultiPayload(v8, v9) == 1)
  {
    v10 = (char *)v8 + *(int *)(type metadata accessor for SizeConstants.Environment(0) + 24);
    v11 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  }
  else
  {
    swift_release(*v8);
  }
  v12 = (_QWORD *)(a1 + a2[7]);
  v13 = sub_5440(&qword_25FAC8);
  if (swift_getEnumCaseMultiPayload(v12, v13) == 1)
  {
    v14 = (char *)v12 + *(int *)(type metadata accessor for FontConstants.Environment(0) + 24);
    v15 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14, v15);
  }
  else
  {
    swift_release(*v12);
  }
  v16 = (_QWORD *)(a1 + a2[8]);
  swift_release(*v16);
  *(_QWORD *)&result = swift_release(v16[1]).n128_u64[0];
  return result;
}

uint64_t initializeWithCopy for UberNavigationTitleView(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  void *v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  _WORD *v14;
  _WORD *v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _WORD *v28;
  _WORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;

  v6 = type metadata accessor for LocalizerRequest(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
  v8(a1, a2, v6);
  v9 = a3[5];
  v10 = (void *)(a1 + v9);
  v11 = (const void *)(a2 + v9);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a2 + v9, 1, v6))
  {
    v12 = sub_5440(&qword_25E0C8);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    v8((uint64_t)v10, (uint64_t)v11, v6);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v10, 0, 1, v6);
  }
  v13 = a3[6];
  v14 = (_WORD *)(a1 + v13);
  v15 = (_WORD *)(a2 + v13);
  v16 = sub_5440(&qword_25F548);
  if (swift_getEnumCaseMultiPayload(v15, v16) == 1)
  {
    *v14 = *v15;
    v17 = (int *)type metadata accessor for SizeConstants.Environment(0);
    v18 = v17[6];
    v19 = (char *)v14 + v18;
    v20 = (char *)v15 + v18;
    v21 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v19, v20, v21);
    *(_QWORD *)((char *)v14 + v17[7]) = *(_QWORD *)((char *)v15 + v17[7]);
    v22 = v17[8];
    v23 = (char *)v14 + v22;
    v24 = (char *)v15 + v22;
    v23[2] = v24[2];
    *(_WORD *)v23 = *(_WORD *)v24;
    v25 = 1;
  }
  else
  {
    v26 = *(_QWORD *)v15;
    *(_QWORD *)v14 = *(_QWORD *)v15;
    swift_retain(v26);
    v25 = 0;
  }
  swift_storeEnumTagMultiPayload(v14, v16, v25);
  v27 = a3[7];
  v28 = (_WORD *)(a1 + v27);
  v29 = (_WORD *)(a2 + v27);
  v30 = sub_5440(&qword_25FAC8);
  if (swift_getEnumCaseMultiPayload(v29, v30) == 1)
  {
    *v28 = *v29;
    v31 = type metadata accessor for FontConstants.Environment(0);
    v32 = *(int *)(v31 + 24);
    v33 = (char *)v28 + v32;
    v34 = (char *)v29 + v32;
    v35 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v35 - 8) + 16))(v33, v34, v35);
    *(_QWORD *)((char *)v28 + *(int *)(v31 + 28)) = *(_QWORD *)((char *)v29 + *(int *)(v31 + 28));
    v36 = 1;
  }
  else
  {
    v37 = *(_QWORD *)v29;
    *(_QWORD *)v28 = *(_QWORD *)v29;
    swift_retain(v37);
    v36 = 0;
  }
  swift_storeEnumTagMultiPayload(v28, v30, v36);
  v38 = a3[8];
  v39 = (uint64_t *)(a1 + v38);
  v40 = (uint64_t *)(a2 + v38);
  v41 = *v40;
  v42 = v40[1];
  *v39 = *v40;
  v39[1] = v42;
  v39[2] = v40[2];
  swift_retain(v41);
  swift_retain(v42);
  return a1;
}

uint64_t assignWithCopy for UberNavigationTitleView(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  void *v10;
  const void *v11;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  _BYTE *v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  _BYTE *v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  _BYTE *v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v32;
  _BYTE *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE *v37;
  _BYTE *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v6 = type metadata accessor for LocalizerRequest(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24);
  v8(a1, a2, v6);
  v9 = a3[5];
  v10 = (void *)(a1 + v9);
  v11 = (const void *)(a2 + v9);
  v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  v13 = v12(a1 + v9, 1, v6);
  v14 = v12((uint64_t)v11, 1, v6);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(v10, v11, v6);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v10, 0, 1, v6);
      if (a1 == a2)
        goto LABEL_15;
      goto LABEL_8;
    }
LABEL_7:
    v15 = sub_5440(&qword_25E0C8);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    if (a1 == a2)
      goto LABEL_15;
    goto LABEL_8;
  }
  if (v14)
  {
    (*(void (**)(void *, uint64_t))(v7 + 8))(v10, v6);
    goto LABEL_7;
  }
  v8((uint64_t)v10, (uint64_t)v11, v6);
  if (a1 == a2)
    goto LABEL_15;
LABEL_8:
  v16 = a3[6];
  v17 = (_BYTE *)(a1 + v16);
  v18 = (_BYTE *)(a2 + v16);
  sub_B414(a1 + v16, &qword_25F548);
  v19 = sub_5440(&qword_25F548);
  if (swift_getEnumCaseMultiPayload(v18, v19) == 1)
  {
    *v17 = *v18;
    v17[1] = v18[1];
    v20 = (int *)type metadata accessor for SizeConstants.Environment(0);
    v21 = v20[6];
    v22 = &v17[v21];
    v23 = &v18[v21];
    v24 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v24 - 8) + 16))(v22, v23, v24);
    *(_QWORD *)&v17[v20[7]] = *(_QWORD *)&v18[v20[7]];
    v25 = v20[8];
    v26 = &v17[v25];
    v27 = &v18[v25];
    v28 = v27[2];
    *(_WORD *)v26 = *(_WORD *)v27;
    v26[2] = v28;
    v29 = 1;
  }
  else
  {
    v30 = *(_QWORD *)v18;
    *(_QWORD *)v17 = *(_QWORD *)v18;
    swift_retain(v30);
    v29 = 0;
  }
  swift_storeEnumTagMultiPayload(v17, v19, v29);
  v31 = a3[7];
  v32 = (_BYTE *)(a1 + v31);
  v33 = (_BYTE *)(a2 + v31);
  sub_B414(a1 + v31, &qword_25FAC8);
  v34 = sub_5440(&qword_25FAC8);
  if (swift_getEnumCaseMultiPayload(v33, v34) == 1)
  {
    *v32 = *v33;
    v32[1] = v33[1];
    v35 = type metadata accessor for FontConstants.Environment(0);
    v36 = *(int *)(v35 + 24);
    v37 = &v32[v36];
    v38 = &v33[v36];
    v39 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v39 - 8) + 16))(v37, v38, v39);
    *(_QWORD *)&v32[*(int *)(v35 + 28)] = *(_QWORD *)&v33[*(int *)(v35 + 28)];
    v40 = 1;
  }
  else
  {
    v41 = *(_QWORD *)v33;
    *(_QWORD *)v32 = *(_QWORD *)v33;
    swift_retain(v41);
    v40 = 0;
  }
  swift_storeEnumTagMultiPayload(v32, v34, v40);
LABEL_15:
  v42 = a3[8];
  v43 = a1 + v42;
  v44 = (uint64_t *)(a2 + v42);
  v45 = *(_QWORD *)(a1 + v42);
  v46 = *v44;
  *(_QWORD *)(a1 + v42) = *v44;
  swift_retain(v46);
  swift_release(v45);
  v47 = v44[1];
  v48 = *(_QWORD *)(v43 + 8);
  *(_QWORD *)(v43 + 8) = v47;
  swift_retain(v47);
  swift_release(v48);
  *(_QWORD *)(v43 + 16) = v44[2];
  return a1;
}

uint64_t initializeWithTake for UberNavigationTitleView(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  void *v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  _WORD *v14;
  _WORD *v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  _WORD *v26;
  _WORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v6 = type metadata accessor for LocalizerRequest(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32);
  v8(a1, a2, v6);
  v9 = a3[5];
  v10 = (void *)(a1 + v9);
  v11 = (const void *)(a2 + v9);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a2 + v9, 1, v6))
  {
    v12 = sub_5440(&qword_25E0C8);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    v8((uint64_t)v10, (uint64_t)v11, v6);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v10, 0, 1, v6);
  }
  v13 = a3[6];
  v14 = (_WORD *)(a1 + v13);
  v15 = (_WORD *)(a2 + v13);
  v16 = sub_5440(&qword_25F548);
  if (swift_getEnumCaseMultiPayload(v15, v16) == 1)
  {
    *v14 = *v15;
    v17 = (int *)type metadata accessor for SizeConstants.Environment(0);
    v18 = v17[6];
    v19 = (char *)v14 + v18;
    v20 = (char *)v15 + v18;
    v21 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(v19, v20, v21);
    *(_QWORD *)((char *)v14 + v17[7]) = *(_QWORD *)((char *)v15 + v17[7]);
    v22 = v17[8];
    v23 = (char *)v14 + v22;
    v24 = (char *)v15 + v22;
    v23[2] = v24[2];
    *(_WORD *)v23 = *(_WORD *)v24;
    swift_storeEnumTagMultiPayload(v14, v16, 1);
  }
  else
  {
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  v25 = a3[7];
  v26 = (_WORD *)(a1 + v25);
  v27 = (_WORD *)(a2 + v25);
  v28 = sub_5440(&qword_25FAC8);
  if (swift_getEnumCaseMultiPayload(v27, v28) == 1)
  {
    *v26 = *v27;
    v29 = type metadata accessor for FontConstants.Environment(0);
    v30 = *(int *)(v29 + 24);
    v31 = (char *)v26 + v30;
    v32 = (char *)v27 + v30;
    v33 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v33 - 8) + 32))(v31, v32, v33);
    *(_QWORD *)((char *)v26 + *(int *)(v29 + 28)) = *(_QWORD *)((char *)v27 + *(int *)(v29 + 28));
    swift_storeEnumTagMultiPayload(v26, v28, 1);
  }
  else
  {
    memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
  }
  v34 = a3[8];
  v35 = a1 + v34;
  v36 = a2 + v34;
  *(_OWORD *)v35 = *(_OWORD *)v36;
  *(_QWORD *)(v35 + 16) = *(_QWORD *)(v36 + 16);
  return a1;
}

uint64_t assignWithTake for UberNavigationTitleView(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  void *v10;
  const void *v11;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _WORD *v17;
  _WORD *v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  _WORD *v29;
  _WORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;

  v6 = type metadata accessor for LocalizerRequest(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 40);
  v8(a1, a2, v6);
  v9 = a3[5];
  v10 = (void *)(a1 + v9);
  v11 = (const void *)(a2 + v9);
  v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  v13 = v12(a1 + v9, 1, v6);
  v14 = v12((uint64_t)v11, 1, v6);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(v10, v11, v6);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v10, 0, 1, v6);
      if (a1 == a2)
        goto LABEL_14;
      goto LABEL_8;
    }
LABEL_7:
    v15 = sub_5440(&qword_25E0C8);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    if (a1 == a2)
      goto LABEL_14;
    goto LABEL_8;
  }
  if (v14)
  {
    (*(void (**)(void *, uint64_t))(v7 + 8))(v10, v6);
    goto LABEL_7;
  }
  v8((uint64_t)v10, (uint64_t)v11, v6);
  if (a1 == a2)
    goto LABEL_14;
LABEL_8:
  v16 = a3[6];
  v17 = (_WORD *)(a1 + v16);
  v18 = (_WORD *)(a2 + v16);
  sub_B414(a1 + v16, &qword_25F548);
  v19 = sub_5440(&qword_25F548);
  if (swift_getEnumCaseMultiPayload(v18, v19) == 1)
  {
    *v17 = *v18;
    v20 = (int *)type metadata accessor for SizeConstants.Environment(0);
    v21 = v20[6];
    v22 = (char *)v17 + v21;
    v23 = (char *)v18 + v21;
    v24 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 32))(v22, v23, v24);
    *(_QWORD *)((char *)v17 + v20[7]) = *(_QWORD *)((char *)v18 + v20[7]);
    v25 = v20[8];
    v26 = (char *)v17 + v25;
    v27 = (char *)v18 + v25;
    v26[2] = v27[2];
    *(_WORD *)v26 = *(_WORD *)v27;
    swift_storeEnumTagMultiPayload(v17, v19, 1);
  }
  else
  {
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  v28 = a3[7];
  v29 = (_WORD *)(a1 + v28);
  v30 = (_WORD *)(a2 + v28);
  sub_B414(a1 + v28, &qword_25FAC8);
  v31 = sub_5440(&qword_25FAC8);
  if (swift_getEnumCaseMultiPayload(v30, v31) == 1)
  {
    *v29 = *v30;
    v32 = type metadata accessor for FontConstants.Environment(0);
    v33 = *(int *)(v32 + 24);
    v34 = (char *)v29 + v33;
    v35 = (char *)v30 + v33;
    v36 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v36 - 8) + 32))(v34, v35, v36);
    *(_QWORD *)((char *)v29 + *(int *)(v32 + 28)) = *(_QWORD *)((char *)v30 + *(int *)(v32 + 28));
    swift_storeEnumTagMultiPayload(v29, v31, 1);
  }
  else
  {
    memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
  }
LABEL_14:
  v37 = a3[8];
  v38 = a1 + v37;
  v39 = (_QWORD *)(a2 + v37);
  v40 = *(_QWORD *)(a1 + v37);
  *(_QWORD *)(a1 + v37) = *v39;
  swift_release(v40);
  v41 = *(_QWORD *)(v38 + 8);
  *(_QWORD *)(v38 + 8) = v39[1];
  swift_release(v41);
  *(_QWORD *)(v38 + 16) = v39[2];
  return a1;
}

uint64_t getEnumTagSinglePayload for UberNavigationTitleView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_FFE9C);
}

uint64_t sub_FFE9C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v17;

  v6 = type metadata accessor for LocalizerRequest(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = sub_5440(&qword_25E0C8);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v13 = a3[5];
LABEL_9:
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = sub_5440(&qword_25F558);
  v12 = *(_QWORD *)(v14 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v14;
    v13 = a3[6];
    goto LABEL_9;
  }
  v15 = sub_5440(&qword_260578);
  v12 = *(_QWORD *)(v15 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v15;
    v13 = a3[7];
    goto LABEL_9;
  }
  v17 = *(_QWORD *)(a1 + a3[8] + 8);
  if (v17 >= 0xFFFFFFFF)
    LODWORD(v17) = -1;
  return (v17 + 1);
}

uint64_t storeEnumTagSinglePayload for UberNavigationTitleView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_FFFA8);
}

uint64_t sub_FFFA8(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;

  v8 = type metadata accessor for LocalizerRequest(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  v13 = sub_5440(&qword_25E0C8);
  v14 = *(_QWORD *)(v13 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = v13;
    v15 = a4[5];
LABEL_9:
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  v16 = sub_5440(&qword_25F558);
  v14 = *(_QWORD *)(v16 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = v16;
    v15 = a4[6];
    goto LABEL_9;
  }
  result = sub_5440(&qword_260578);
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v15 = a4[7];
    goto LABEL_9;
  }
  *(_QWORD *)(a1 + a4[8] + 8) = (a2 - 1);
  return result;
}

void sub_1000A4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD v10[5];

  v2 = type metadata accessor for LocalizerRequest(319);
  if (v3 <= 0x3F)
  {
    v10[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_19B38(319, (unint64_t *)&qword_261BA0, (uint64_t (*)(uint64_t))&type metadata accessor for LocalizerRequest, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    if (v5 <= 0x3F)
    {
      v10[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_19B38(319, (unint64_t *)&qword_25F5C8, type metadata accessor for SizeConstants, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
      if (v7 <= 0x3F)
      {
        v10[2] = *(_QWORD *)(v6 - 8) + 64;
        sub_19B38(319, (unint64_t *)&unk_2605E8, type metadata accessor for FontConstants.Navigation, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
        if (v9 <= 0x3F)
        {
          v10[3] = *(_QWORD *)(v8 - 8) + 64;
          v10[4] = &unk_1EC398;
          swift_initStructMetadata(a1, 256, 5, v10, a1 + 16);
        }
      }
    }
  }
}

unint64_t sub_1001B4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2656C8;
  if (!qword_2656C8)
  {
    v1 = sub_7EF8(&qword_265620);
    sub_100220();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_2656C8);
  }
  return result;
}

unint64_t sub_100220()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2656D0;
  if (!qword_2656D0)
  {
    v1 = sub_7EF8(&qword_265610);
    sub_7FD8(&qword_2656D8, &qword_265608, (uint64_t)&protocol conformance descriptor for VStack<A>);
    sub_1002A4();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_2656D0);
  }
  return result;
}

unint64_t sub_1002A4()
{
  unint64_t result;

  result = qword_2656E0;
  if (!qword_2656E0)
  {
    result = swift_getWitnessTable(&unk_1EC3CC, &type metadata for OpacityBindingViewModifier);
    atomic_store(result, (unint64_t *)&qword_2656E0);
  }
  return result;
}

uint64_t *sub_1002EC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  a1[2] = a2[2];
  swift_retain(v3);
  swift_retain(v4);
  return a1;
}

uint64_t *assignWithCopy for OpacityBindingViewModifier(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a1;
  v5 = *a2;
  *a1 = *a2;
  swift_retain(v5);
  swift_release(v4);
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_retain(v6);
  swift_release(v7);
  a1[2] = a2[2];
  return a1;
}

_QWORD *assignWithTake for OpacityBindingViewModifier(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;

  swift_release(*a1);
  v4 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release(v4);
  a1[2] = *(_QWORD *)(a2 + 16);
  return a1;
}

ValueMetadata *type metadata accessor for OpacityBindingViewModifier()
{
  return &type metadata for OpacityBindingViewModifier;
}

uint64_t sub_1003E0(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_22DC70, 1);
}

unint64_t sub_100404()
{
  unint64_t result;
  uint64_t v1;

  result = qword_265718;
  if (!qword_265718)
  {
    v1 = sub_7EF8(&qword_2656F0);
    sub_7FD8(&qword_265720, &qword_2656E8, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_265718);
  }
  return result;
}

uint64_t WelcomeFrameViewModel.init(year:localizedYear:exposureData:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v9;
  _QWORD *v10;
  char *v11;
  uint64_t v12;

  *a5 = a1;
  v9 = type metadata accessor for WelcomeFrameViewModel(0);
  v10 = (_QWORD *)((char *)a5 + *(int *)(v9 + 24));
  *v10 = a2;
  v10[1] = a3;
  v11 = (char *)a5 + *(int *)(v9 + 20);
  v12 = type metadata accessor for YIRSourceData(0);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v11, a4, v12);
}

uint64_t type metadata accessor for WelcomeFrameViewModel(uint64_t a1)
{
  return sub_1FE90(a1, qword_2657E0, (uint64_t)&nominal type descriptor for WelcomeFrameViewModel);
}

uint64_t sub_100508()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t ObjCClassFromMetadata;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE v29[16];

  v1 = type metadata accessor for Locale(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = __chkstk_darwin(v1);
  v5 = &v29[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v3);
  v7 = &v29[-v6];
  v8 = type metadata accessor for String.LocalizationValue(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = &v29[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v10);
  v14 = &v29[-v13];
  v15 = String.LocalizationValue.init(stringLiteral:)(0x100000000000003BLL, 0x80000000001FC8C0);
  static Locale.current.getter(v15);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v9 + 16))(v12, v14, v8);
  v16 = type metadata accessor for BundleFinder();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v16);
  v18 = objc_msgSend((id)objc_opt_self(NSBundle), "bundleForClass:", ObjCClassFromMetadata);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v2 + 16))(v5, v7, v1);
  v19 = String.init(localized:table:bundle:locale:comment:)(v12, 0, 0, v18, v5, "Body text appearing on the Welcome frame of Year in Review", 58, 2);
  v21 = v20;
  (*(void (**)(_BYTE *, uint64_t))(v2 + 8))(v7, v1);
  (*(void (**)(_BYTE *, uint64_t))(v9 + 8))(v14, v8);
  v22 = sub_5440(&qword_25E310);
  v23 = swift_allocObject(v22, 72, 7);
  *(_OWORD *)(v23 + 16) = xmmword_1E0B70;
  v24 = (uint64_t *)(v0 + *(int *)(type metadata accessor for WelcomeFrameViewModel(0) + 24));
  v26 = *v24;
  v25 = v24[1];
  *(_QWORD *)(v23 + 56) = &type metadata for String;
  *(_QWORD *)(v23 + 64) = sub_578F0();
  *(_QWORD *)(v23 + 32) = v26;
  *(_QWORD *)(v23 + 40) = v25;
  swift_bridgeObjectRetain(v25);
  v27 = static String.localizedStringWithFormat(_:_:)(v19, v21, v23);
  swift_bridgeObjectRelease(v21);
  swift_bridgeObjectRelease(v23);
  return v27;
}

uint64_t sub_100754()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t ObjCClassFromMetadata;
  id v17;
  uint64_t v18;
  _BYTE v20[16];

  v0 = type metadata accessor for Locale(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = &v20[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v2);
  v6 = &v20[-v5];
  v7 = type metadata accessor for String.LocalizationValue(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = &v20[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v9);
  v13 = &v20[-v12];
  v14 = String.LocalizationValue.init(stringLiteral:)(0x7261745320746547, 0xEB00000000646574);
  static Locale.current.getter(v14);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v8 + 16))(v11, v13, v7);
  v15 = type metadata accessor for BundleFinder();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v15);
  v17 = objc_msgSend((id)objc_opt_self(NSBundle), "bundleForClass:", ObjCClassFromMetadata);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v1 + 16))(v4, v6, v0);
  v18 = String.init(localized:table:bundle:locale:comment:)(v11, 0, 0, v17, v4, "Text that appears at the bottom of the Welcome frame in Year in Review", 70, 2);
  (*(void (**)(_BYTE *, uint64_t))(v1 + 8))(v6, v0);
  (*(void (**)(_BYTE *, uint64_t))(v8 + 8))(v13, v7);
  return v18;
}

uint64_t sub_100920()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t ObjCClassFromMetadata;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  _BYTE v22[16];

  v0 = type metadata accessor for Locale(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = &v22[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v2);
  v6 = &v22[-v5];
  v7 = type metadata accessor for String.LocalizationValue(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = &v22[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v9);
  v13 = &v22[-v12];
  v14 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000040, 0x80000000001FC940);
  static Locale.current.getter(v14);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v8 + 16))(v11, v13, v7);
  v15 = type metadata accessor for BundleFinder();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v15);
  v17 = objc_msgSend((id)objc_opt_self(NSBundle), "bundleForClass:", ObjCClassFromMetadata);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v1 + 16))(v4, v6, v0);
  v18 = String.init(localized:table:bundle:locale:comment:)(v11, 0, 0, v17, v4, "Accessibility alt text for Welcome Frame image", 46, 2);
  v20 = v19;
  (*(void (**)(_BYTE *, uint64_t))(v1 + 8))(v6, v0);
  result = (*(uint64_t (**)(_BYTE *, uint64_t))(v8 + 8))(v13, v7);
  qword_265728 = v18;
  unk_265730 = v20;
  return result;
}

uint64_t sub_100AEC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t ObjCClassFromMetadata;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  _BYTE v22[16];

  v0 = type metadata accessor for Locale(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = &v22[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v2);
  v6 = &v22[-v5];
  v7 = type metadata accessor for String.LocalizationValue(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = &v22[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v9);
  v13 = &v22[-v12];
  v14 = String.LocalizationValue.init(stringLiteral:)(0x646565636F7250, 0xE700000000000000);
  static Locale.current.getter(v14);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v8 + 16))(v11, v13, v7);
  v15 = type metadata accessor for BundleFinder();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v15);
  v17 = objc_msgSend((id)objc_opt_self(NSBundle), "bundleForClass:", ObjCClassFromMetadata);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v1 + 16))(v4, v6, v0);
  v18 = String.init(localized:table:bundle:locale:comment:)(v11, 0, 0, v17, v4, "Accessibility label for icon to proceed to next page of experience", 66, 2);
  v20 = v19;
  (*(void (**)(_BYTE *, uint64_t))(v1 + 8))(v6, v0);
  result = (*(uint64_t (**)(_BYTE *, uint64_t))(v8 + 8))(v13, v7);
  qword_265738 = v18;
  unk_265740 = v20;
  return result;
}

uint64_t sub_100CB4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t ObjCClassFromMetadata;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  _BYTE v22[16];

  v0 = type metadata accessor for Locale(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = &v22[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v2);
  v6 = &v22[-v5];
  v7 = type metadata accessor for String.LocalizationValue(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = &v22[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v9);
  v13 = &v22[-v12];
  v14 = String.LocalizationValue.init(stringLiteral:)(0xD00000000000001ELL, 0x80000000001FC7C0);
  static Locale.current.getter(v14);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v8 + 16))(v11, v13, v7);
  v15 = type metadata accessor for BundleFinder();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v15);
  v17 = objc_msgSend((id)objc_opt_self(NSBundle), "bundleForClass:", ObjCClassFromMetadata);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v1 + 16))(v4, v6, v0);
  v18 = String.init(localized:table:bundle:locale:comment:)(v11, 0, 0, v17, v4, "Accessibility hint to go to next page of experience", 51, 2);
  v20 = v19;
  (*(void (**)(_BYTE *, uint64_t))(v1 + 8))(v6, v0);
  result = (*(uint64_t (**)(_BYTE *, uint64_t))(v8 + 8))(v13, v7);
  qword_265748 = v18;
  unk_265750 = v20;
  return result;
}

uint64_t WelcomeFrame.exposureData.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v3 = v1 + *(int *)(type metadata accessor for WelcomeFrame(0) + 44);
  v4 = v3 + *(int *)(type metadata accessor for WelcomeFrameViewModel(0) + 20);
  v5 = type metadata accessor for YIRSourceData(0);
  a1[3] = v5;
  a1[4] = sub_6FD0(&qword_25EFF0, (uint64_t (*)(uint64_t))&type metadata accessor for YIRSourceData, (uint64_t)&protocol conformance descriptor for YIRSourceData);
  a1[5] = sub_6FD0(&qword_25EFF8, (uint64_t (*)(uint64_t))&type metadata accessor for YIRSourceData, (uint64_t)&protocol conformance descriptor for YIRSourceData);
  v6 = sub_C404(a1);
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(v6, v4, v5);
}

uint64_t type metadata accessor for WelcomeFrame(uint64_t a1)
{
  return sub_1FE90(a1, qword_265878, (uint64_t)&nominal type descriptor for WelcomeFrame);
}

double WelcomeFrame.horizontalPadding.getter()
{
  uint64_t v0;

  return *(double *)(v0 + *(int *)(type metadata accessor for WelcomeFrame(0) + 20));
}

uint64_t WelcomeFrame.init(model:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;

  v4 = Color.init(hexString:)(0x423243374246, 0xE600000000000000);
  if (!v4)
    v4 = static Color.orange.getter();
  *a2 = v4;
  v5 = (char *)a2 + *(int *)(sub_5440(&qword_25E930) + 48);
  v6 = enum case for ColorScheme.dark(_:);
  v7 = type metadata accessor for ColorScheme(0);
  v8 = *(_QWORD *)(v7 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 104))(v5, v6, v7);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v5, 0, 1, v7);
  v9 = type metadata accessor for PageBackground(0);
  swift_storeEnumTagMultiPayload(a2, v9, 0);
  v10 = (int *)type metadata accessor for WelcomeFrame(0);
  *(uint64_t *)((char *)a2 + v10[5]) = 0;
  v11 = (uint64_t *)((char *)a2 + v10[6]);
  *v11 = swift_getKeyPath(&unk_1EC490);
  v12 = sub_5440(&qword_25F1E8);
  swift_storeEnumTagMultiPayload(v11, v12, 0);
  v13 = (uint64_t *)((char *)a2 + v10[7]);
  *v13 = swift_getKeyPath(&unk_1EC4B8);
  v14 = sub_5440(&qword_25F200);
  swift_storeEnumTagMultiPayload(v13, v14, 0);
  v15 = (char *)a2 + v10[8];
  *(_QWORD *)v15 = swift_getKeyPath(&unk_1EC4F0);
  v15[8] = 0;
  v16 = (char *)a2 + v10[9];
  *(_QWORD *)v16 = swift_getKeyPath(&unk_1EC518);
  v16[8] = 0;
  v17 = (char *)a2 + v10[10];
  *(_QWORD *)v17 = swift_getKeyPath(&unk_1EC548);
  v17[8] = 0;
  return sub_21C88(a1, (uint64_t)a2 + v10[11], type metadata accessor for WelcomeFrameViewModel);
}

uint64_t WelcomeFrame.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t KeyPath;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (**v28)();
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v2 = v1;
  v33 = a1;
  v3 = type metadata accessor for WelcomeFrame(0);
  v32 = *(_QWORD *)(v3 - 8);
  v4 = *(_QWORD *)(v32 + 64);
  __chkstk_darwin(v3);
  v31 = (uint64_t)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for ColorScheme(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for SizeConstants.Spacing(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_5440(&qword_265758);
  __chkstk_darwin(v12);
  v14 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_5440(&qword_265760);
  __chkstk_darwin(v15);
  v17 = (char *)&v30 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s7BooksUI35ListItemEditionsDescriptorExternalsV7spacingAA13SizeConstantsV7SpacingVvg_0((uint64_t)v11);
  v18 = sub_224DC((uint64_t)v11, type metadata accessor for SizeConstants.Spacing);
  *(_QWORD *)v14 = static HorizontalAlignment.center.getter(v18);
  *((_QWORD *)v14 + 1) = 0x4034000000000000;
  v14[16] = 0;
  v19 = sub_5440(&qword_265768);
  sub_101404(v1, &v14[*(int *)(v19 + 44)]);
  KeyPath = swift_getKeyPath(&unk_1EC578);
  (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v8, enum case for ColorScheme.dark(_:), v5);
  v21 = (uint64_t *)&v17[*(int *)(v15 + 36)];
  v22 = sub_5440(&qword_25EE58);
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))((char *)v21 + *(int *)(v22 + 28), v8, v5);
  *v21 = KeyPath;
  sub_B3D0((uint64_t)v14, (uint64_t)v17, &qword_265758);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  sub_B414((uint64_t)v14, &qword_265758);
  v23 = v31;
  sub_1E428(v2, v31, type metadata accessor for WelcomeFrame);
  v24 = *(unsigned __int8 *)(v32 + 80);
  v25 = (v24 + 16) & ~v24;
  v26 = swift_allocObject(&unk_252810, v25 + v4, v24 | 7);
  sub_21C88(v23, v26 + v25, type metadata accessor for WelcomeFrame);
  v27 = v33;
  sub_B3D0((uint64_t)v17, v33, &qword_265760);
  v28 = (void (**)())(v27 + *(int *)(sub_5440(&qword_265770) + 36));
  *v28 = sub_104AD8;
  v28[1] = (void (*)())v26;
  v28[2] = 0;
  v28[3] = 0;
  return sub_B414((uint64_t)v17, &qword_265760);
}

uint64_t sub_101404@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  double v57;
  double v58;
  double v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  char v68;
  char *v69;
  uint64_t v70;
  char v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  char v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  char v81;
  char v82;
  uint64_t v83;
  double v84;
  uint64_t v85;
  char v86;
  char v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char v91;
  char v92;
  _BOOL8 v93;
  BOOL IsReduceMotionEnabled;
  char *v95;
  uint64_t v96;
  char v97;
  char v98;
  BOOL v99;
  char *v100;
  uint64_t v101;
  char v102;
  char v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char v107;
  uint64_t v108;
  char v109;
  char v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char v114;
  char v115;
  double v116;
  uint64_t v117;
  uint64_t v118;
  char v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char v124;
  char v125;
  BOOL v126;
  uint64_t v127;
  uint64_t v128;
  char v129;
  char v130;
  uint64_t v131;
  uint64_t v132;
  char v133;
  char v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  char v144;
  double v145;
  double v146;
  double v147;
  double v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  char v163;
  char v164;
  uint64_t v165;
  uint64_t v166;
  _QWORD *v167;
  uint64_t v168;
  char v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  char v174;
  char v175;
  double v176;
  uint64_t v177;
  uint64_t v178;
  char v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  char v184;
  char v185;
  _BOOL8 v186;
  BOOL v187;
  uint64_t v188;
  uint64_t v189;
  char v190;
  char v191;
  BOOL v192;
  uint64_t v193;
  uint64_t v194;
  char v195;
  char v196;
  uint64_t v197;
  uint64_t v198;
  char v199;
  char v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  _QWORD *v208;
  uint64_t v209;
  uint64_t v210;
  char *v211;
  uint64_t v212;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  char *v218;
  char *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  char *v223;
  char *v224;
  uint64_t v225;
  uint64_t *v226;
  char *v227;
  uint64_t v228;
  uint64_t v229;
  double v230;
  uint64_t v231;
  int v232;
  uint64_t v233;
  uint64_t v234;
  char *v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  _QWORD *v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;

  v242 = a2;
  v3 = sub_5440(&qword_2658E0);
  __chkstk_darwin(v3);
  v226 = (uint64_t *)((char *)&v214 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v225 = sub_5440(&qword_2658E8);
  __chkstk_darwin(v225);
  v246 = (uint64_t)&v214 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v228 = sub_5440(&qword_2658F0);
  __chkstk_darwin(v228);
  v235 = (char *)&v214 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v234 = sub_5440(&qword_2658F8);
  __chkstk_darwin(v234);
  v248 = (uint64_t)&v214 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v238 = sub_5440(&qword_265900);
  v8 = __chkstk_darwin(v238);
  v241 = (uint64_t)&v214 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v8);
  v237 = (uint64_t)&v214 - v11;
  __chkstk_darwin(v10);
  v240 = (uint64_t)&v214 - v12;
  v13 = sub_5440(&qword_265908);
  __chkstk_darwin(v13);
  v218 = (char *)&v214 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v217 = sub_5440(&qword_265910);
  __chkstk_darwin(v217);
  v244 = (uint64_t)&v214 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v221 = sub_5440(&qword_265918);
  v16 = __chkstk_darwin(v221);
  v239 = (uint64_t)&v214 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v16);
  v220 = (uint64_t)&v214 - v19;
  __chkstk_darwin(v18);
  v247 = (uint64_t)&v214 - v20;
  v21 = type metadata accessor for WelcomeFrame(0);
  v22 = __chkstk_darwin(v21);
  v231 = (uint64_t)&v214 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = __chkstk_darwin(v22);
  v227 = (char *)&v214 - v25;
  v26 = __chkstk_darwin(v24);
  v245 = (uint64_t)&v214 - v27;
  v28 = __chkstk_darwin(v26);
  v224 = (char *)&v214 - v29;
  v30 = __chkstk_darwin(v28);
  v222 = (uint64_t)&v214 - v31;
  v32 = __chkstk_darwin(v30);
  v216 = (uint64_t)&v214 - v33;
  v34 = __chkstk_darwin(v32);
  v223 = (char *)&v214 - v35;
  v36 = __chkstk_darwin(v34);
  v215 = (uint64_t)&v214 - v37;
  v38 = __chkstk_darwin(v36);
  v219 = (char *)&v214 - v39;
  v40 = __chkstk_darwin(v38);
  v42 = (char *)&v214 - v41;
  v43 = __chkstk_darwin(v40);
  v45 = (char *)&v214 - v44;
  v46 = __chkstk_darwin(v43);
  v48 = (char *)&v214 - v47;
  v49 = __chkstk_darwin(v46);
  v51 = (char *)&v214 - v50;
  v52 = a1 + *(int *)(v49 + 44);
  v53 = (uint64_t *)(v52 + *(int *)(type metadata accessor for WelcomeFrameViewModel(0) + 24));
  v54 = v53[1];
  v233 = *v53;
  v236 = v54;
  v55 = swift_bridgeObjectRetain(v54);
  v56 = static Edge.Set.horizontal.getter(v55);
  v232 = v56;
  v230 = EdgeInsets.init(_all:)(v56, 32.0, v57, v58, v59);
  v229 = v60;
  v62 = v61;
  v64 = v63;
  v65 = a1 + *(int *)(v21 + 36);
  v66 = *(_QWORD *)v65;
  v67 = *(_BYTE *)(v65 + 8);
  sub_F9E4(*(_QWORD *)v65, v67);
  v68 = sub_30DB4(v66, v67);
  sub_BE0C(v66, v67);
  sub_1E428(a1, (uint64_t)v51, type metadata accessor for WelcomeFrame);
  v243 = v21;
  if ((v68 & 1) != 0)
  {
    sub_224DC((uint64_t)v51, type metadata accessor for WelcomeFrame);
LABEL_4:
    sub_1E428(a1, (uint64_t)v48, type metadata accessor for WelcomeFrame);
    v73 = (uint64_t)v223;
LABEL_5:
    sub_224DC((uint64_t)v48, type metadata accessor for WelcomeFrame);
LABEL_6:
    v74 = 0;
    goto LABEL_7;
  }
  v69 = &v51[*(int *)(v21 + 40)];
  v70 = *(_QWORD *)v69;
  v71 = v69[8];
  sub_F9E4(*(_QWORD *)v69, v71);
  v72 = sub_30DB4(v70, v71);
  sub_BE0C(v70, v71);
  sub_224DC((uint64_t)v51, type metadata accessor for WelcomeFrame);
  if ((v72 & 1) != 0)
    goto LABEL_4;
  IsReduceMotionEnabled = UIAccessibilityIsReduceMotionEnabled();
  sub_1E428(a1, (uint64_t)v48, type metadata accessor for WelcomeFrame);
  v73 = (uint64_t)v223;
  if (IsReduceMotionEnabled)
    goto LABEL_5;
  v95 = &v48[*(int *)(v243 + 32)];
  v96 = *(_QWORD *)v95;
  v97 = v95[8];
  sub_F9E4(*(_QWORD *)v95, v97);
  v98 = sub_30DB4(v96, v97);
  sub_BE0C(v96, v97);
  sub_224DC((uint64_t)v48, type metadata accessor for WelcomeFrame);
  if ((v98 & 1) != 0)
    goto LABEL_6;
  v74 = 0x4054000000000000;
LABEL_7:
  v75 = *(_QWORD *)v65;
  v76 = *(_BYTE *)(v65 + 8);
  sub_F9E4(*(_QWORD *)v65, v76);
  v77 = sub_30DB4(v75, v76);
  sub_BE0C(v75, v76);
  sub_1E428(a1, (uint64_t)v45, type metadata accessor for WelcomeFrame);
  v78 = (uint64_t)v218;
  if ((v77 & 1) != 0)
  {
    sub_224DC((uint64_t)v45, type metadata accessor for WelcomeFrame);
LABEL_10:
    sub_1E428(a1, (uint64_t)v42, type metadata accessor for WelcomeFrame);
    v83 = (uint64_t)v219;
LABEL_11:
    sub_224DC((uint64_t)v42, type metadata accessor for WelcomeFrame);
LABEL_12:
    v84 = 1.0;
    goto LABEL_13;
  }
  v79 = &v45[*(int *)(v243 + 40)];
  v80 = *(_QWORD *)v79;
  v81 = v79[8];
  sub_F9E4(*(_QWORD *)v79, v81);
  v82 = sub_30DB4(v80, v81);
  sub_BE0C(v80, v81);
  sub_224DC((uint64_t)v45, type metadata accessor for WelcomeFrame);
  if ((v82 & 1) != 0)
    goto LABEL_10;
  v99 = UIAccessibilityIsReduceMotionEnabled();
  sub_1E428(a1, (uint64_t)v42, type metadata accessor for WelcomeFrame);
  v83 = (uint64_t)v219;
  if (v99)
    goto LABEL_11;
  v100 = &v42[*(int *)(v243 + 32)];
  v101 = *(_QWORD *)v100;
  v102 = v100[8];
  sub_F9E4(*(_QWORD *)v100, v102);
  v103 = sub_30DB4(v101, v102);
  sub_BE0C(v101, v102);
  sub_224DC((uint64_t)v42, type metadata accessor for WelcomeFrame);
  v84 = 0.0;
  if ((v103 & 1) != 0)
    goto LABEL_12;
LABEL_13:
  v85 = *(_QWORD *)v65;
  v86 = *(_BYTE *)(v65 + 8);
  sub_F9E4(*(_QWORD *)v65, v86);
  v87 = sub_30DB4(v85, v86);
  sub_BE0C(v85, v86);
  sub_1E428(a1, v83, type metadata accessor for WelcomeFrame);
  if ((v87 & 1) != 0)
  {
    sub_224DC(v83, type metadata accessor for WelcomeFrame);
    v223 = 0;
    v88 = v243;
  }
  else
  {
    v88 = v243;
    v89 = v83 + *(int *)(v243 + 40);
    v90 = *(_QWORD *)v89;
    v91 = *(_BYTE *)(v89 + 8);
    sub_F9E4(*(_QWORD *)v89, v91);
    v92 = sub_30DB4(v90, v91);
    sub_BE0C(v90, v91);
    sub_224DC(v83, type metadata accessor for WelcomeFrame);
    if ((v92 & 1) != 0 || (v93 = UIAccessibilityIsReduceMotionEnabled()))
    {
      v223 = 0;
    }
    else
    {
      v104 = static Animation.spring(response:dampingFraction:blendDuration:)(v93, 0.5, 1.0, 0.0);
      v223 = (char *)Animation.delay(_:)(0.1);
      swift_release(v104);
    }
  }
  v105 = a1 + *(int *)(v88 + 32);
  v106 = *(_QWORD *)v105;
  v107 = *(_BYTE *)(v105 + 8);
  sub_F9E4(*(_QWORD *)v105, v107);
  LODWORD(v219) = sub_30DB4(v106, v107);
  sub_BE0C(v106, v107);
  sub_1026D4(a1, v78);
  v108 = *(_QWORD *)v65;
  v109 = *(_BYTE *)(v65 + 8);
  sub_F9E4(*(_QWORD *)v65, v109);
  v110 = sub_30DB4(v108, v109);
  sub_BE0C(v108, v109);
  v111 = v215;
  sub_1E428(a1, v215, type metadata accessor for WelcomeFrame);
  if ((v110 & 1) != 0)
  {
    sub_224DC(v111, type metadata accessor for WelcomeFrame);
LABEL_28:
    sub_1E428(a1, v73, type metadata accessor for WelcomeFrame);
LABEL_29:
    sub_224DC(v73, type metadata accessor for WelcomeFrame);
LABEL_30:
    v116 = 1.0;
    goto LABEL_31;
  }
  v112 = v111 + *(int *)(v88 + 40);
  v113 = *(_QWORD *)v112;
  v114 = *(_BYTE *)(v112 + 8);
  sub_F9E4(*(_QWORD *)v112, v114);
  v115 = sub_30DB4(v113, v114);
  sub_BE0C(v113, v114);
  sub_224DC(v111, type metadata accessor for WelcomeFrame);
  if ((v115 & 1) != 0)
    goto LABEL_28;
  v126 = UIAccessibilityIsReduceMotionEnabled();
  sub_1E428(a1, v73, type metadata accessor for WelcomeFrame);
  if (v126)
    goto LABEL_29;
  v127 = v73 + *(int *)(v88 + 32);
  v128 = *(_QWORD *)v127;
  v129 = *(_BYTE *)(v127 + 8);
  sub_F9E4(*(_QWORD *)v127, v129);
  v130 = sub_30DB4(v128, v129);
  sub_BE0C(v128, v129);
  sub_224DC(v73, type metadata accessor for WelcomeFrame);
  v116 = 0.0;
  if ((v130 & 1) != 0)
    goto LABEL_30;
LABEL_31:
  v117 = v244;
  sub_B3D0(v78, v244, &qword_265908);
  *(double *)(v117 + *(int *)(v217 + 36)) = v116;
  sub_B414(v78, &qword_265908);
  v118 = *(_QWORD *)v65;
  LOBYTE(v117) = *(_BYTE *)(v65 + 8);
  sub_F9E4(*(_QWORD *)v65, v117);
  v119 = sub_30DB4(v118, v117);
  sub_BE0C(v118, v117);
  v120 = v216;
  sub_1E428(a1, v216, type metadata accessor for WelcomeFrame);
  if ((v119 & 1) != 0)
  {
    sub_224DC(v120, type metadata accessor for WelcomeFrame);
    v121 = 0;
  }
  else
  {
    v122 = v120 + *(int *)(v88 + 40);
    v123 = *(_QWORD *)v122;
    v124 = *(_BYTE *)(v122 + 8);
    sub_F9E4(*(_QWORD *)v122, v124);
    v125 = sub_30DB4(v123, v124);
    sub_BE0C(v123, v124);
    sub_224DC(v120, type metadata accessor for WelcomeFrame);
    if ((v125 & 1) != 0 || UIAccessibilityIsReduceMotionEnabled())
    {
      v121 = 0;
    }
    else
    {
      v131 = static Animation.easeOut.getter();
      v121 = Animation.delay(_:)(0.05);
      swift_release(v131);
    }
  }
  v132 = *(_QWORD *)v105;
  v133 = *(_BYTE *)(v105 + 8);
  sub_F9E4(*(_QWORD *)v105, v133);
  v134 = sub_30DB4(v132, v133);
  sub_BE0C(v132, v133);
  v135 = v244;
  v136 = v220;
  sub_B3D0(v244, v220, &qword_265910);
  v137 = v136 + *(int *)(v221 + 36);
  *(_QWORD *)v137 = v121;
  *(_BYTE *)(v137 + 8) = v134 & 1;
  sub_B414(v135, &qword_265910);
  v138 = sub_167A4(v136, v247, &qword_265918);
  v139 = static HorizontalAlignment.center.getter(v138);
  v140 = (uint64_t)v226;
  *v226 = v139;
  *(_QWORD *)(v140 + 8) = 0;
  *(_BYTE *)(v140 + 16) = 1;
  v141 = sub_5440(&qword_265920);
  v142 = sub_1034A4(a1, (char *)(v140 + *(int *)(v141 + 44)));
  v143 = static Edge.Set.horizontal.getter(v142);
  v144 = v143;
  v148 = EdgeInsets.init(_all:)(v143, 32.0, v145, v146, v147);
  v150 = v149;
  v152 = v151;
  v154 = v153;
  v155 = v246;
  sub_B3D0(v140, v246, &qword_2658E0);
  v156 = v155 + *(int *)(v225 + 36);
  *(_BYTE *)v156 = v144;
  *(double *)(v156 + 8) = v148;
  *(_QWORD *)(v156 + 16) = v150;
  *(_QWORD *)(v156 + 24) = v152;
  *(_QWORD *)(v156 + 32) = v154;
  *(_BYTE *)(v156 + 40) = 0;
  sub_B414(v140, &qword_2658E0);
  v157 = *(_QWORD *)v65;
  LOBYTE(v132) = *(_BYTE *)(v65 + 8);
  sub_F9E4(*(_QWORD *)v65, v132);
  LOBYTE(v155) = sub_30DB4(v157, v132);
  sub_BE0C(v157, v132);
  v158 = v222;
  sub_1E428(a1, v222, type metadata accessor for WelcomeFrame);
  if ((v155 & 1) != 0)
  {
    sub_224DC(v158, type metadata accessor for WelcomeFrame);
    v159 = (uint64_t)v235;
    v160 = (uint64_t)v224;
LABEL_43:
    sub_1E428(a1, v160, type metadata accessor for WelcomeFrame);
LABEL_44:
    sub_224DC(v160, type metadata accessor for WelcomeFrame);
LABEL_45:
    v165 = 0;
    goto LABEL_46;
  }
  v161 = v158 + *(int *)(v88 + 40);
  v162 = *(_QWORD *)v161;
  v163 = *(_BYTE *)(v161 + 8);
  sub_F9E4(*(_QWORD *)v161, v163);
  v164 = sub_30DB4(v162, v163);
  sub_BE0C(v162, v163);
  sub_224DC(v158, type metadata accessor for WelcomeFrame);
  v159 = (uint64_t)v235;
  v160 = (uint64_t)v224;
  if ((v164 & 1) != 0)
    goto LABEL_43;
  v187 = UIAccessibilityIsReduceMotionEnabled();
  sub_1E428(a1, v160, type metadata accessor for WelcomeFrame);
  if (v187)
    goto LABEL_44;
  v188 = v160 + *(int *)(v88 + 32);
  v189 = *(_QWORD *)v188;
  v190 = *(_BYTE *)(v188 + 8);
  sub_F9E4(*(_QWORD *)v188, v190);
  v191 = sub_30DB4(v189, v190);
  sub_BE0C(v189, v190);
  sub_224DC(v160, type metadata accessor for WelcomeFrame);
  if ((v191 & 1) != 0)
    goto LABEL_45;
  v165 = 0x4054000000000000;
LABEL_46:
  v166 = v246;
  sub_B3D0(v246, v159, &qword_2658E8);
  v167 = (_QWORD *)(v159 + *(int *)(v228 + 36));
  *v167 = 0;
  v167[1] = v165;
  sub_B414(v166, &qword_2658E8);
  v168 = *(_QWORD *)v65;
  LOBYTE(v166) = *(_BYTE *)(v65 + 8);
  sub_F9E4(*(_QWORD *)v65, v166);
  v169 = sub_30DB4(v168, v166);
  sub_BE0C(v168, v166);
  sub_1E428(a1, v245, type metadata accessor for WelcomeFrame);
  if ((v169 & 1) != 0)
  {
    sub_224DC(v245, type metadata accessor for WelcomeFrame);
    v170 = (uint64_t)v227;
LABEL_49:
    sub_1E428(a1, v170, type metadata accessor for WelcomeFrame);
LABEL_50:
    sub_224DC(v170, type metadata accessor for WelcomeFrame);
LABEL_51:
    v176 = 1.0;
    goto LABEL_52;
  }
  v171 = v245;
  v172 = v245 + *(int *)(v88 + 40);
  v173 = *(_QWORD *)v172;
  v174 = *(_BYTE *)(v172 + 8);
  sub_F9E4(*(_QWORD *)v172, v174);
  v175 = sub_30DB4(v173, v174);
  sub_BE0C(v173, v174);
  sub_224DC(v171, type metadata accessor for WelcomeFrame);
  v170 = (uint64_t)v227;
  if ((v175 & 1) != 0)
    goto LABEL_49;
  v192 = UIAccessibilityIsReduceMotionEnabled();
  sub_1E428(a1, v170, type metadata accessor for WelcomeFrame);
  if (v192)
    goto LABEL_50;
  v193 = v170 + *(int *)(v88 + 32);
  v194 = *(_QWORD *)v193;
  v195 = *(_BYTE *)(v193 + 8);
  sub_F9E4(*(_QWORD *)v193, v195);
  v196 = sub_30DB4(v194, v195);
  sub_BE0C(v194, v195);
  sub_224DC(v170, type metadata accessor for WelcomeFrame);
  v176 = 0.0;
  if ((v196 & 1) != 0)
    goto LABEL_51;
LABEL_52:
  v177 = v248;
  sub_B3D0(v159, v248, &qword_2658F0);
  *(double *)(v177 + *(int *)(v234 + 36)) = v176;
  sub_B414(v159, &qword_2658F0);
  v178 = *(_QWORD *)v65;
  LOBYTE(v177) = *(_BYTE *)(v65 + 8);
  sub_F9E4(*(_QWORD *)v65, v177);
  v179 = sub_30DB4(v178, v177);
  sub_BE0C(v178, v177);
  v180 = v231;
  sub_1E428(a1, v231, type metadata accessor for WelcomeFrame);
  if ((v179 & 1) != 0)
  {
    sub_224DC(v180, type metadata accessor for WelcomeFrame);
    v181 = 0;
  }
  else
  {
    v182 = v180 + *(int *)(v88 + 40);
    v183 = *(_QWORD *)v182;
    v184 = *(_BYTE *)(v182 + 8);
    sub_F9E4(*(_QWORD *)v182, v184);
    v185 = sub_30DB4(v183, v184);
    sub_BE0C(v183, v184);
    sub_224DC(v180, type metadata accessor for WelcomeFrame);
    if ((v185 & 1) != 0 || (v186 = UIAccessibilityIsReduceMotionEnabled()))
    {
      v181 = 0;
    }
    else
    {
      v197 = static Animation.spring(response:dampingFraction:blendDuration:)(v186, 0.5, 1.0, 0.0);
      v181 = Animation.delay(_:)(0.1);
      swift_release(v197);
    }
  }
  v198 = *(_QWORD *)v105;
  v199 = *(_BYTE *)(v105 + 8);
  sub_F9E4(*(_QWORD *)v105, v199);
  v200 = sub_30DB4(v198, v199);
  sub_BE0C(v198, v199);
  v201 = v248;
  v202 = v237;
  sub_B3D0(v248, v237, &qword_2658F8);
  v203 = v202 + *(int *)(v238 + 36);
  *(_QWORD *)v203 = v181;
  *(_BYTE *)(v203 + 8) = v200 & 1;
  sub_B414(v201, &qword_2658F8);
  v204 = v240;
  sub_167A4(v202, v240, &qword_265900);
  LOBYTE(v202) = v219 & 1;
  v205 = v247;
  v206 = v239;
  sub_B3D0(v247, v239, &qword_265918);
  v207 = v241;
  sub_B3D0(v204, v241, &qword_265900);
  v208 = v242;
  v209 = v236;
  *v242 = v233;
  v208[1] = v209;
  *((_BYTE *)v208 + 16) = v232;
  v210 = v229;
  *((double *)v208 + 3) = v230;
  v208[4] = v210;
  v208[5] = v62;
  v208[6] = v64;
  *((_BYTE *)v208 + 56) = 0;
  v208[8] = 0;
  v208[9] = v74;
  *((double *)v208 + 10) = v84;
  v211 = v223;
  v208[11] = v223;
  *((_BYTE *)v208 + 96) = v202;
  v212 = sub_5440(&qword_265928);
  sub_B3D0(v206, (uint64_t)v208 + *(int *)(v212 + 48), &qword_265918);
  sub_B3D0(v207, (uint64_t)v208 + *(int *)(v212 + 64), &qword_265900);
  swift_retain_n(v211, 2);
  swift_bridgeObjectRetain_n(v209, 2);
  sub_B414(v204, &qword_265900);
  sub_B414(v205, &qword_265918);
  swift_release(v211);
  swift_bridgeObjectRelease(v209);
  sub_B414(v207, &qword_265900);
  sub_B414(v206, &qword_265918);
  swift_release(v211);
  return swift_bridgeObjectRelease(v209);
}

