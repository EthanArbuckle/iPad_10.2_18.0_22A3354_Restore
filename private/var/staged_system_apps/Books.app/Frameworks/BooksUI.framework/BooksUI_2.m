uint64_t sub_1026D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t ObjCClassFromMetadata;
  id v46;
  uint64_t v47;
  uint64_t v48;
  __n128 v49;
  void (*v50)(char *, uint64_t, __n128);
  int *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  char v57;
  char v58;
  uint64_t v59;
  double v60;
  double v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  double v99;
  double v100;
  double v101;
  double v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t KeyPath;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  _QWORD *v117;
  void (*v118)(char *, _QWORD, uint64_t);
  char *v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t result;
  uint64_t v124;
  char *v125;
  char *v126;
  void (*v127)(char *, char *, uint64_t);
  char *v128;
  char *v129;
  void (*v130)(char *, char *, uint64_t);
  uint64_t v131;
  void (*v132)(char *, uint64_t);
  char *v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  char *v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  void (*v146)(char *, char *, uint64_t);
  uint64_t v147;
  uint64_t v148;
  void (*v149)(char *, uint64_t);
  BOOL IsReduceMotionEnabled;
  char *v151;
  uint64_t v152;
  char v153;
  char v154;
  char *v155;
  uint64_t v156;
  char *v157;
  uint64_t v158;
  char *v159;
  uint64_t v160;
  char *v161;
  char *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  char *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  char *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  char *v178;
  char *v179;
  uint64_t v180;
  uint64_t v181;
  char *v182;
  char *v183;
  _QWORD *v184;
  uint64_t v185;
  uint64_t v186;
  _QWORD v187[2];
  uint64_t v188;
  uint64_t v189;
  __int16 v190;
  double v191;
  double v192;
  double v193;
  uint64_t v194;

  v169 = a1;
  v167 = a2;
  v164 = sub_5440(&qword_25FE38);
  v2 = __chkstk_darwin(v164);
  v166 = (char *)&v155 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  v162 = (char *)&v155 - v4;
  v174 = type metadata accessor for DynamicTypeSize(0);
  v184 = *(_QWORD **)(v174 - 8);
  v5 = __chkstk_darwin(v174);
  v183 = (char *)&v155 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v182 = (char *)&v155 - v7;
  v165 = sub_5440(&qword_25FE40);
  v8 = __chkstk_darwin(v165);
  v161 = (char *)&v155 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v163 = (uint64_t)&v155 - v10;
  v11 = type metadata accessor for _BlendModeEffect(0);
  __chkstk_darwin(v11);
  v178 = (char *)&v155 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v177 = type metadata accessor for BlendMode(0);
  v176 = *(_QWORD *)(v177 - 8);
  __chkstk_darwin(v177);
  v173 = (char *)&v155 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for ColorConstants(0);
  __chkstk_darwin(v14);
  v170 = (uint64_t)&v155 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v171 = sub_5440(&qword_262688);
  __chkstk_darwin(v171);
  v179 = (char *)&v155 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v172 = sub_5440(&qword_2659E0);
  __chkstk_darwin(v172);
  v180 = (uint64_t)&v155 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v175 = sub_5440(&qword_2659E8);
  __chkstk_darwin(v175);
  v181 = (uint64_t)&v155 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v185 = sub_5440(&qword_2659F0);
  __chkstk_darwin(v185);
  v186 = (uint64_t)&v155 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v160 = sub_5440(&qword_2659F8);
  v158 = *(_QWORD *)(v160 - 8);
  v20 = __chkstk_darwin(v160);
  v159 = (char *)&v155 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v157 = (char *)&v155 - v22;
  v23 = type metadata accessor for WelcomeFrame(0);
  v24 = __chkstk_darwin(v23);
  v26 = (char *)&v155 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  v28 = (char *)&v155 - v27;
  v29 = type metadata accessor for Image.ResizingMode(0);
  v30 = *(_QWORD *)(v29 - 8);
  __chkstk_darwin(v29);
  v32 = (char *)&v155 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = type metadata accessor for ImageResource(0);
  __chkstk_darwin(v33);
  v35 = (char *)&v155 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = sub_5440(&qword_265A00);
  v37 = __chkstk_darwin(v36);
  v156 = (uint64_t)&v155 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = __chkstk_darwin(v37);
  v41 = (char *)&v155 - v40;
  __chkstk_darwin(v39);
  v43 = (char *)&v155 - v42;
  v44 = type metadata accessor for BundleFinder();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v44);
  v46 = objc_msgSend((id)objc_opt_self(NSBundle), "bundleForClass:", ObjCClassFromMetadata);
  ImageResource.init(name:bundle:)(0x636C65772D726979, 0xEB00000000656D6FLL, v46);
  v47 = Image.init(_:)(v35);
  (*(void (**)(char *, _QWORD, uint64_t))(v30 + 104))(v32, enum case for Image.ResizingMode.stretch(_:), v29);
  v48 = Image.resizable(capInsets:resizingMode:)(v32, v47, 0.0, 0.0, 0.0, 0.0);
  v49 = swift_release(v47);
  v50 = *(void (**)(char *, uint64_t, __n128))(v30 + 8);
  v51 = (int *)v23;
  v52 = v169;
  v50(v32, v29, v49);
  v53 = v52 + v51[9];
  v54 = *(_QWORD *)v53;
  LOBYTE(v47) = *(_BYTE *)(v53 + 8);
  sub_F9E4(*(_QWORD *)v53, v47);
  LOBYTE(v32) = sub_30DB4(v54, v47);
  sub_BE0C(v54, v47);
  sub_1E428(v52, (uint64_t)v28, type metadata accessor for WelcomeFrame);
  if ((v32 & 1) != 0)
  {
    sub_224DC((uint64_t)v28, type metadata accessor for WelcomeFrame);
LABEL_4:
    sub_1E428(v52, (uint64_t)v26, type metadata accessor for WelcomeFrame);
LABEL_5:
    v59 = sub_224DC((uint64_t)v26, type metadata accessor for WelcomeFrame);
LABEL_6:
    v60 = 1.0;
    goto LABEL_7;
  }
  v55 = &v28[v51[10]];
  v56 = *(_QWORD *)v55;
  v57 = v55[8];
  sub_F9E4(*(_QWORD *)v55, v57);
  v58 = sub_30DB4(v56, v57);
  sub_BE0C(v56, v57);
  sub_224DC((uint64_t)v28, type metadata accessor for WelcomeFrame);
  if ((v58 & 1) != 0)
    goto LABEL_4;
  IsReduceMotionEnabled = UIAccessibilityIsReduceMotionEnabled();
  sub_1E428(v52, (uint64_t)v26, type metadata accessor for WelcomeFrame);
  if (IsReduceMotionEnabled)
    goto LABEL_5;
  v151 = &v26[v51[8]];
  v152 = *(_QWORD *)v151;
  v153 = v151[8];
  sub_F9E4(*(_QWORD *)v151, v153);
  v154 = sub_30DB4(v152, v153);
  sub_BE0C(v152, v153);
  v59 = sub_224DC((uint64_t)v26, type metadata accessor for WelcomeFrame);
  if ((v154 & 1) != 0)
    goto LABEL_6;
  v60 = 0.8;
LABEL_7:
  v61 = static UnitPoint.center.getter(v59);
  v188 = v48;
  v189 = 0;
  v190 = 1;
  v191 = v60;
  v192 = v60;
  v193 = v61;
  v194 = v62;
  if (qword_25DC78 != -1)
    swift_once(&qword_25DC78, sub_100920);
  v187[0] = qword_265728;
  v187[1] = unk_265730;
  v63 = sub_5440(&qword_265A08);
  v64 = sub_106D44();
  v65 = sub_C57C();
  View.accessibilityLabel<A>(_:)(v187, v63, &type metadata for String, v64, v65);
  swift_release(v48);
  sub_167A4((uint64_t)v41, (uint64_t)v43, &qword_265A00);
  v188 = sub_100508();
  v189 = v66;
  v67 = Text.init<A>(_:)(&v188, &type metadata for String, v65);
  v69 = v68;
  v71 = v70;
  v73 = v72 & 1;
  v74 = static Font.body.getter();
  v75 = Text.font(_:)(v74, v67, v69, v73, v71);
  v77 = v76;
  v155 = v43;
  v79 = v78;
  v168 = v80;
  swift_release(v74);
  v81 = v79 & 1;
  sub_2B574(v67, v69, v73);
  swift_bridgeObjectRelease(v71);
  v82 = v170;
  _s7BooksUI18BuyButtonExternalsV6colorsAA14ColorConstantsVvg_0(v170);
  v83 = _s7BooksUI14ColorConstantsV19booksSecondaryLabel05SwiftB00C0Vvg_0();
  v84 = Color.opacity(_:)(0.8);
  swift_release(v83);
  sub_224DC(v82, type metadata accessor for ColorConstants);
  v188 = v84;
  v85 = v168;
  v86 = Text.foregroundStyle<A>(_:)(&v188, v75, v77, v81, v168, &type metadata for Color, &protocol witness table for Color);
  v88 = v87;
  v90 = v89;
  LOBYTE(v73) = v91 & 1;
  sub_2B574(v75, v77, v81);
  swift_release(v84);
  swift_bridgeObjectRelease(v85);
  v92 = v176;
  v93 = v173;
  v94 = v177;
  (*(void (**)(char *, _QWORD, uint64_t))(v176 + 104))(v173, enum case for BlendMode.plusLighter(_:), v177);
  v95 = (uint64_t)v178;
  (*(void (**)(char *, char *, uint64_t))(v92 + 16))(v178, v93, v94);
  v96 = (uint64_t)v179;
  sub_1E428(v95, (uint64_t)&v179[*(int *)(v171 + 36)], (uint64_t (*)(_QWORD))&type metadata accessor for _BlendModeEffect);
  *(_QWORD *)v96 = v86;
  *(_QWORD *)(v96 + 8) = v88;
  *(_BYTE *)(v96 + 16) = v73;
  *(_QWORD *)(v96 + 24) = v90;
  sub_34B1C(v86, v88, v73);
  swift_bridgeObjectRetain(v90);
  sub_224DC(v95, (uint64_t (*)(_QWORD))&type metadata accessor for _BlendModeEffect);
  (*(void (**)(char *, uint64_t))(v92 + 8))(v93, v94);
  sub_2B574(v86, v88, v73);
  v97 = swift_bridgeObjectRelease(v90);
  v98 = static Edge.Set.horizontal.getter(v97);
  LOBYTE(v85) = v98;
  v102 = EdgeInsets.init(_all:)(v98, 32.0, v99, v100, v101);
  v104 = v103;
  v106 = v105;
  v108 = v107;
  v109 = v180;
  sub_B3D0(v96, v180, &qword_262688);
  v110 = v109 + *(int *)(v172 + 36);
  *(_BYTE *)v110 = v85;
  *(double *)(v110 + 8) = v102;
  *(_QWORD *)(v110 + 16) = v104;
  *(_QWORD *)(v110 + 24) = v106;
  *(_QWORD *)(v110 + 32) = v108;
  *(_BYTE *)(v110 + 40) = 0;
  sub_B414(v96, &qword_262688);
  KeyPath = swift_getKeyPath(&unk_1EC738);
  v112 = v181;
  sub_B3D0(v109, v181, &qword_2659E0);
  v113 = v112 + *(int *)(v175 + 36);
  *(_QWORD *)v113 = KeyPath;
  *(_BYTE *)(v113 + 8) = 1;
  sub_B414(v109, &qword_2659E0);
  v114 = swift_getKeyPath(&unk_1EC6A8);
  v115 = v186;
  sub_B3D0(v112, v186, &qword_2659E8);
  v116 = v115 + *(int *)(v185 + 36);
  *(_QWORD *)v116 = v114;
  *(_QWORD *)(v116 + 8) = 3;
  *(_BYTE *)(v116 + 16) = 0;
  sub_B414(v112, &qword_2659E8);
  v117 = v184;
  v118 = (void (*)(char *, _QWORD, uint64_t))v184[13];
  v119 = v182;
  v120 = v174;
  v118(v182, enum case for DynamicTypeSize.small(_:), v174);
  v121 = v183;
  v118(v183, enum case for DynamicTypeSize.accessibility2(_:), v120);
  v122 = sub_6FD0(&qword_25FE98, (uint64_t (*)(uint64_t))&type metadata accessor for DynamicTypeSize, (uint64_t)&protocol conformance descriptor for DynamicTypeSize);
  result = dispatch thunk of static Comparable.<= infix(_:_:)(v119, v121, v120, v122);
  if ((result & 1) != 0)
  {
    v124 = v164;
    v125 = v162;
    v126 = &v162[*(int *)(v164 + 48)];
    v127 = (void (*)(char *, char *, uint64_t))v117[4];
    v127(v162, v119, v120);
    v127(v126, v121, v120);
    v128 = v166;
    v129 = &v166[*(int *)(v124 + 48)];
    v130 = (void (*)(char *, char *, uint64_t))v117[2];
    v130(v166, v125, v120);
    v130(v129, v126, v120);
    v131 = (uint64_t)v161;
    v127(v161, v128, v120);
    v132 = (void (*)(char *, uint64_t))v117[1];
    v132(v129, v120);
    v133 = &v128[*(int *)(v124 + 48)];
    v127(v128, v125, v120);
    v127(v133, v126, v120);
    v134 = v165;
    v127((char *)(v131 + *(int *)(v165 + 36)), v133, v120);
    v132(v128, v120);
    v135 = v163;
    sub_167A4(v131, v163, &qword_25FE40);
    v136 = sub_106E38();
    v137 = sub_7FD8(&qword_25FEA0, &qword_25FE40, (uint64_t)&protocol conformance descriptor for ClosedRange<A>);
    v138 = v159;
    v139 = v136;
    v140 = v186;
    View.dynamicTypeSize<A>(_:)(v135, v185, v134, v139, v137);
    sub_B414(v135, &qword_25FE40);
    sub_B414(v140, &qword_2659F0);
    v141 = v158;
    v142 = v157;
    v143 = v160;
    (*(void (**)(char *, char *, uint64_t))(v158 + 32))(v157, v138, v160);
    v144 = (uint64_t)v155;
    v145 = v156;
    sub_B3D0((uint64_t)v155, v156, &qword_265A00);
    v146 = *(void (**)(char *, char *, uint64_t))(v141 + 16);
    v146(v138, v142, v143);
    v147 = v167;
    sub_B3D0(v145, v167, &qword_265A00);
    v148 = sub_5440(qword_265A30);
    v146((char *)(v147 + *(int *)(v148 + 48)), v138, v143);
    v149 = *(void (**)(char *, uint64_t))(v141 + 8);
    v149(v142, v143);
    sub_B414(v144, &qword_265A00);
    v149(v138, v143);
    return sub_B414(v145, &qword_265A00);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1034A4@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void (*v72)(_QWORD);
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t KeyPath;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void (*v83)(char *, _QWORD, uint64_t);
  char *v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  void (*v91)(char *, char *, uint64_t);
  char *v92;
  char *v93;
  void (*v94)(char *, char *, uint64_t);
  uint64_t v95;
  void (*v96)(char *, uint64_t);
  char *v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t *v112;
  uint64_t *v113;
  uint64_t v114;
  id v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  int *v124;
  uint64_t v125;
  uint64_t v126;
  double v127;
  double v128;
  double v129;
  double v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  double v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  char v146;
  char v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  char v153;
  char v154;
  _BOOL8 IsReduceMotionEnabled;
  uint64_t v156;
  uint64_t v157;
  __n128 v158;
  uint64_t v159;
  char v160;
  char v161;
  uint64_t v162;
  unint64_t v163;
  uint64_t v164;
  unint64_t v165;
  char *v166;
  uint64_t v167;
  uint64_t v168;
  void (*v169)(char *, char *, char *);
  uint64_t v170;
  char *v171;
  uint64_t v172;
  void (*v173)(char *, char *);
  uint64_t v175;
  void (*v176)(char *, char *, uint64_t);
  void (*v177)(char *, _QWORD, uint64_t);
  unsigned int v178;
  uint64_t v179;
  char *v180;
  char *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  char *v185;
  char *v186;
  char *v187;
  uint64_t v188;
  uint64_t v189;
  char *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t *v196;
  uint64_t v197;
  uint64_t v198;
  unint64_t v199;
  char *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  char *v205;
  uint64_t v206;
  char *v207;
  char *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  char *v212;
  char *v213;
  uint64_t v214;
  uint64_t v215;
  char *v216;
  uint64_t v217;
  uint64_t v218;
  char *v219;
  char *v220;
  uint64_t v221;
  uint64_t v222;
  char *v223;
  uint64_t v224;
  uint64_t v225;
  char *v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;

  v228 = a1;
  v212 = a2;
  v229 = type metadata accessor for WelcomeFrame(0);
  __chkstk_darwin(v229);
  v206 = (uint64_t)&v175 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for SizeConstants.Spacing(0);
  __chkstk_darwin(v3);
  v204 = (uint64_t)&v175 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v189 = sub_5440(&qword_25FF30);
  __chkstk_darwin(v189);
  v193 = (uint64_t *)((char *)&v175 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v192 = type metadata accessor for Image.Scale(0);
  v191 = *(_QWORD *)(v192 - 8);
  __chkstk_darwin(v192);
  v190 = (char *)&v175 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v188 = sub_5440(&qword_265930);
  __chkstk_darwin(v188);
  v196 = (uint64_t *)((char *)&v175 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v195 = sub_5440(&qword_265938);
  __chkstk_darwin(v195);
  v197 = (uint64_t)&v175 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v194 = sub_5440(&qword_265940);
  __chkstk_darwin(v194);
  v200 = (char *)&v175 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v198 = sub_5440(&qword_265948);
  __chkstk_darwin(v198);
  v202 = (uint64_t)&v175 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v201 = sub_5440(&qword_265950);
  __chkstk_darwin(v201);
  v203 = (uint64_t)&v175 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v175 = sub_5440(&qword_265958);
  __chkstk_darwin(v175);
  v205 = (char *)&v175 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v209 = sub_5440(&qword_265960);
  v13 = __chkstk_darwin(v209);
  v211 = (uint64_t)&v175 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v13);
  v208 = (char *)&v175 - v16;
  v17 = __chkstk_darwin(v15);
  v207 = (char *)&v175 - v18;
  __chkstk_darwin(v17);
  v210 = (uint64_t)&v175 - v19;
  v183 = sub_5440(&qword_25FE38);
  v20 = __chkstk_darwin(v183);
  v185 = (char *)&v175 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v181 = (char *)&v175 - v22;
  v23 = type metadata accessor for DynamicTypeSize(0);
  v24 = *(_QWORD *)(v23 - 8);
  v217 = v23;
  v218 = v24;
  v25 = __chkstk_darwin(v23);
  v219 = (char *)&v175 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  v220 = (char *)&v175 - v27;
  v184 = sub_5440(&qword_25FE40);
  v28 = __chkstk_darwin(v184);
  v180 = (char *)&v175 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28);
  v182 = (uint64_t)&v175 - v30;
  v31 = type metadata accessor for _BlendModeEffect(0);
  __chkstk_darwin(v31);
  v216 = (char *)&v175 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v227 = type metadata accessor for BlendMode(0);
  v215 = *(_QWORD *)(v227 - 8);
  __chkstk_darwin(v227);
  v226 = (char *)&v175 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = type metadata accessor for ColorConstants(0);
  __chkstk_darwin(v34);
  v36 = (char *)&v175 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v214 = sub_5440(&qword_262688);
  __chkstk_darwin(v214);
  v213 = (char *)&v175 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v224 = sub_5440(&qword_265968);
  __chkstk_darwin(v224);
  v225 = (uint64_t)&v175 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = sub_5440(&qword_265970);
  v221 = *(_QWORD *)(v39 - 8);
  v222 = v39;
  v40 = __chkstk_darwin(v39);
  v187 = (char *)&v175 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v40);
  v223 = (char *)&v175 - v42;
  v230 = sub_100754();
  v231 = v43;
  v199 = sub_C57C();
  v44 = Text.init<A>(_:)(&v230, &type metadata for String, v199);
  v46 = v45;
  v48 = v47;
  v50 = v49 & 1;
  v51 = static Font.body.getter();
  v52 = Font.bold()(v51);
  swift_release(v51);
  v53 = Text.font(_:)(v52, v44, v46, v50, v48);
  v55 = v54;
  v57 = v56;
  v59 = v58;
  swift_release(v52);
  v60 = v57 & 1;
  sub_2B574(v44, v46, v50);
  swift_bridgeObjectRelease(v48);
  v179 = v228 + *(int *)(v229 + 24);
  _s7BooksUI18BuyButtonExternalsV6colorsAA14ColorConstantsVvg_0((uint64_t)v36);
  v61 = _s7BooksUI14ColorConstantsV19booksSecondaryLabel05SwiftB00C0Vvg_0();
  v62 = Color.opacity(_:)(0.8);
  swift_release(v61);
  v186 = v36;
  sub_224DC((uint64_t)v36, type metadata accessor for ColorConstants);
  v230 = v62;
  v63 = Text.foregroundStyle<A>(_:)(&v230, v53, v55, v60, v59, &type metadata for Color, &protocol witness table for Color);
  v65 = v64;
  v67 = v66;
  LOBYTE(v48) = v68 & 1;
  v69 = v53;
  v70 = v217;
  sub_2B574(v69, v55, v60);
  swift_release(v62);
  swift_bridgeObjectRelease(v59);
  v71 = v215;
  v72 = *(void (**)(_QWORD))(v215 + 104);
  v73 = v226;
  v178 = enum case for BlendMode.plusLighter(_:);
  v74 = v227;
  v177 = (void (*)(char *, _QWORD, uint64_t))v72;
  v72(v226);
  v75 = (uint64_t)v216;
  v176 = *(void (**)(char *, char *, uint64_t))(v71 + 16);
  v176(v216, v73, v74);
  v76 = (uint64_t)v213;
  sub_1E428(v75, (uint64_t)&v213[*(int *)(v214 + 36)], (uint64_t (*)(_QWORD))&type metadata accessor for _BlendModeEffect);
  *(_QWORD *)v76 = v63;
  *(_QWORD *)(v76 + 8) = v65;
  *(_BYTE *)(v76 + 16) = v48;
  *(_QWORD *)(v76 + 24) = v67;
  sub_34B1C(v63, v65, v48);
  swift_bridgeObjectRetain(v67);
  sub_224DC(v75, (uint64_t (*)(_QWORD))&type metadata accessor for _BlendModeEffect);
  v216 = *(char **)(v71 + 8);
  ((void (*)(char *, uint64_t))v216)(v73, v74);
  v77 = v63;
  v78 = v219;
  sub_2B574(v77, v65, v48);
  swift_bridgeObjectRelease(v67);
  KeyPath = swift_getKeyPath(&unk_1EC6A8);
  v80 = v225;
  sub_B3D0(v76, v225, &qword_262688);
  v81 = v80 + *(int *)(v224 + 36);
  *(_QWORD *)v81 = KeyPath;
  *(_QWORD *)(v81 + 8) = 3;
  *(_BYTE *)(v81 + 16) = 0;
  sub_B414(v76, &qword_262688);
  v82 = v218;
  v83 = *(void (**)(char *, _QWORD, uint64_t))(v218 + 104);
  v84 = v220;
  v83(v220, enum case for DynamicTypeSize.small(_:), v70);
  v83(v78, enum case for DynamicTypeSize.accessibility2(_:), v70);
  v85 = sub_6FD0(&qword_25FE98, (uint64_t (*)(uint64_t))&type metadata accessor for DynamicTypeSize, (uint64_t)&protocol conformance descriptor for DynamicTypeSize);
  v86 = v84;
  if ((dispatch thunk of static Comparable.<= infix(_:_:)(v84, v78, v70, v85) & 1) != 0)
  {
    v87 = v183;
    v88 = v181;
    v89 = &v181[*(int *)(v183 + 48)];
    v90 = v82;
    v91 = *(void (**)(char *, char *, uint64_t))(v82 + 32);
    v91(v181, v84, v70);
    v91(v89, v78, v70);
    v92 = v185;
    v93 = &v185[*(int *)(v87 + 48)];
    v94 = *(void (**)(char *, char *, uint64_t))(v90 + 16);
    v94(v185, v88, v70);
    v94(v93, v89, v70);
    v95 = (uint64_t)v180;
    v91(v180, v92, v70);
    v96 = *(void (**)(char *, uint64_t))(v90 + 8);
    v96(v93, v70);
    v97 = &v92[*(int *)(v87 + 48)];
    v91(v92, v88, v70);
    v91(v97, v89, v70);
    v98 = v184;
    v91((char *)(v95 + *(int *)(v184 + 36)), v97, v70);
    v96(v92, v70);
    v99 = v182;
    sub_167A4(v95, v182, &qword_25FE40);
    v100 = sub_1069B8();
    v101 = sub_7FD8(&qword_25FEA0, &qword_25FE40, (uint64_t)&protocol conformance descriptor for ClosedRange<A>);
    v86 = v187;
    v102 = v100;
    v103 = v225;
    View.dynamicTypeSize<A>(_:)(v99, v224, v98, v102, v101);
    sub_B414(v99, &qword_25FE40);
    sub_B414(v103, &qword_265968);
    (*(void (**)(char *, char *, uint64_t))(v221 + 32))(v223, v86, v222);
    v104 = Image.init(systemName:)(0xD000000000000014, 0x80000000001FC7A0);
    v105 = static Font.title3.getter(v104);
    v106 = Font.bold()(v105);
    swift_release(v105);
    v107 = swift_getKeyPath(&unk_1EC6D8);
    v108 = v191;
    v109 = v190;
    v110 = v192;
    (*(void (**)(char *, _QWORD, uint64_t))(v191 + 104))(v190, enum case for Image.Scale.large(_:), v192);
    v111 = swift_getKeyPath(&unk_1EC708);
    v112 = v193;
    (*(void (**)(char *, char *, uint64_t))(v108 + 16))((char *)v193 + *(int *)(v189 + 28), v109, v110);
    *v112 = v111;
    v113 = v196;
    sub_B3D0((uint64_t)v112, (uint64_t)v196 + *(int *)(v188 + 36), &qword_25FF30);
    *v113 = v104;
    v113[1] = v107;
    v113[2] = v106;
    swift_retain(v104);
    swift_retain(v107);
    swift_retain(v106);
    sub_B414((uint64_t)v112, &qword_25FF30);
    (*(void (**)(char *, uint64_t))(v108 + 8))(v109, v110);
    swift_release(v106);
    swift_release(v107);
    swift_release(v104);
    v114 = (uint64_t)v186;
    _s7BooksUI18BuyButtonExternalsV6colorsAA14ColorConstantsVvg_0((uint64_t)v186);
    v115 = objc_msgSend((id)objc_opt_self(UIColor), "tertiaryLabelColor");
    v116 = Color.init(_:)(v115);
    v117 = Color.opacity(_:)(0.65);
    swift_release(v116);
    sub_224DC(v114, type metadata accessor for ColorConstants);
    v118 = v197;
    sub_B3D0((uint64_t)v113, v197, &qword_265930);
    *(_QWORD *)(v118 + *(int *)(v195 + 36)) = v117;
    sub_B414((uint64_t)v113, &qword_265930);
    v120 = v226;
    v119 = v227;
    v177(v226, v178, v227);
    v121 = (uint64_t)v200;
    v176(&v200[*(int *)(v194 + 36)], v120, v119);
    sub_B3D0(v118, v121, &qword_265938);
    ((void (*)(char *, uint64_t))v216)(v120, v119);
    v122 = sub_B414(v118, &qword_265938);
    LOBYTE(v116) = static Edge.Set.vertical.getter(v122);
    v123 = v228;
    v124 = (int *)v229;
    v125 = v204;
    _s7BooksUI35ListItemEditionsDescriptorExternalsV7spacingAA13SizeConstantsV7SpacingVvg_0(v204);
    v126 = sub_224DC(v125, type metadata accessor for SizeConstants.Spacing);
    v130 = EdgeInsets.init(_all:)(v126, 2.0, v127, v128, v129);
    v132 = v131;
    v134 = v133;
    v136 = v135;
    v137 = v202;
    sub_B3D0(v121, v202, &qword_265940);
    v138 = v137 + *(int *)(v198 + 36);
    *(_BYTE *)v138 = v116;
    *(double *)(v138 + 8) = v130;
    *(_QWORD *)(v138 + 16) = v132;
    *(_QWORD *)(v138 + 24) = v134;
    *(_QWORD *)(v138 + 32) = v136;
    *(_BYTE *)(v138 + 40) = 0;
    sub_B414(v121, &qword_265940);
    v139 = v123 + v124[8];
    v140 = *(_QWORD *)v139;
    LOBYTE(v119) = *(_BYTE *)(v139 + 8);
    sub_F9E4(*(_QWORD *)v139, v119);
    LOBYTE(v125) = sub_30DB4(v140, v119);
    sub_BE0C(v140, v119);
    if ((v125 & 1) != 0)
      v141 = 15.0;
    else
      v141 = 0.0;
    v142 = v203;
    sub_B3D0(v137, v203, &qword_265948);
    v143 = v142 + *(int *)(v201 + 36);
    *(_QWORD *)v143 = 0;
    *(double *)(v143 + 8) = v141;
    sub_B414(v137, &qword_265948);
    v144 = v123 + v124[9];
    v145 = *(_QWORD *)v144;
    v146 = *(_BYTE *)(v144 + 8);
    sub_F9E4(*(_QWORD *)v144, v146);
    v147 = sub_30DB4(v145, v146);
    sub_BE0C(v145, v146);
    v148 = v123;
    v149 = v206;
    sub_1E428(v148, v206, type metadata accessor for WelcomeFrame);
    v76 = v221;
    v73 = (char *)v222;
    if ((v147 & 1) != 0)
    {
      sub_224DC(v149, type metadata accessor for WelcomeFrame);
      v150 = 0;
      v78 = (char *)v175;
      v71 = (uint64_t)v205;
    }
    else
    {
      v151 = v149 + v124[10];
      v152 = *(_QWORD *)v151;
      v153 = *(_BYTE *)(v151 + 8);
      sub_F9E4(*(_QWORD *)v151, v153);
      v154 = sub_30DB4(v152, v153);
      sub_BE0C(v152, v153);
      sub_224DC(v149, type metadata accessor for WelcomeFrame);
      v71 = (uint64_t)v205;
      if ((v154 & 1) != 0)
      {
        v150 = 0;
        v78 = (char *)v175;
      }
      else
      {
        IsReduceMotionEnabled = UIAccessibilityIsReduceMotionEnabled();
        v78 = (char *)v175;
        if (IsReduceMotionEnabled)
        {
          v150 = 0;
        }
        else
        {
          v156 = static Animation.spring(response:dampingFraction:blendDuration:)(IsReduceMotionEnabled, 1.25, 0.75, 0.0);
          v157 = Animation.delay(_:)(0.45);
          v158 = swift_release(v156);
          v150 = Animation.repeatForever(autoreverses:)(1, v157, v158);
          swift_release(v157);
        }
      }
    }
    v159 = *(_QWORD *)v139;
    v160 = *(_BYTE *)(v139 + 8);
    sub_F9E4(*(_QWORD *)v139, v160);
    v161 = sub_30DB4(v159, v160);
    sub_BE0C(v159, v160);
    sub_B3D0(v142, v71, &qword_265950);
    v162 = v71 + *((int *)v78 + 9);
    *(_QWORD *)v162 = v150;
    *(_BYTE *)(v162 + 8) = v161 & 1;
    sub_B414(v142, &qword_265950);
    if (qword_25DC80 == -1)
      goto LABEL_13;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_25DC80, sub_100AEC);
LABEL_13:
  v230 = qword_265738;
  v231 = unk_265740;
  v163 = sub_106A6C();
  v164 = (uint64_t)v208;
  v165 = v199;
  View.accessibilityLabel<A>(_:)(&v230, v78, &type metadata for String, v163, v199);
  sub_B414(v71, &qword_265958);
  v166 = v223;
  if (qword_25DC88 != -1)
    swift_once(&qword_25DC88, sub_100CB4);
  v230 = qword_265748;
  v231 = unk_265750;
  v167 = (uint64_t)v207;
  ModifiedContent<>.accessibilityHint<A>(_:)(&v230, v209, &type metadata for String, v165);
  sub_B414(v164, &qword_265960);
  v168 = v210;
  sub_167A4(v167, v210, &qword_265960);
  v169 = *(void (**)(char *, char *, char *))(v76 + 16);
  v169(v86, v166, v73);
  v170 = v211;
  sub_B3D0(v168, v211, &qword_265960);
  v171 = v212;
  v169(v212, v86, v73);
  v172 = sub_5440(&qword_2659D8);
  sub_B3D0(v170, (uint64_t)&v171[*(int *)(v172 + 48)], &qword_265960);
  sub_B414(v168, &qword_265960);
  v173 = *(void (**)(char *, char *))(v76 + 8);
  v173(v166, v73);
  sub_B414(v170, &qword_265960);
  return ((uint64_t (*)(char *, char *))v173)(v86, v73);
}

void sub_1046C4()
{
  Swift::String v0;
  void *object;
  id v2;
  id v3;
  NSString v4;

  type metadata accessor for WelcomeFrame(0);
  v0._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  object = v0._object;
  String.append(_:)(v0);
  swift_bridgeObjectRelease(object);
  v2 = objc_msgSend((id)objc_opt_self(BUAppGroup), "books");
  v3 = objc_msgSend(v2, "userDefaults");

  v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(0x80000000001FC780);
  objc_msgSend(v3, "setBool:forKey:", 1, v4);

}

double sub_1047C8(uint64_t a1)
{
  uint64_t v1;

  return *(double *)(v1 + *(int *)(a1 + 20));
}

uint64_t sub_1047D4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v2 + *(int *)(a1 + 44);
  v5 = v4 + *(int *)(type metadata accessor for WelcomeFrameViewModel(0) + 20);
  v6 = type metadata accessor for YIRSourceData(0);
  a2[3] = v6;
  a2[4] = sub_6FD0(&qword_25EFF0, (uint64_t (*)(uint64_t))&type metadata accessor for YIRSourceData, (uint64_t)&protocol conformance descriptor for YIRSourceData);
  a2[5] = sub_6FD0(&qword_25EFF8, (uint64_t (*)(uint64_t))&type metadata accessor for YIRSourceData, (uint64_t)&protocol conformance descriptor for YIRSourceData);
  v7 = sub_C404(a2);
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(v7, v5, v6);
}

uint64_t sub_10488C()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v1 = (int *)type metadata accessor for WelcomeFrame(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v0 + v4;
  v7 = type metadata accessor for PageBackground(0);
  if (swift_getEnumCaseMultiPayload(v0 + v4, v7) == 1)
  {
    if (!*(_BYTE *)(v6 + 56))
      _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)(v0 + v4));
    swift_bridgeObjectRelease(*(_QWORD *)(v6 + 104));
    v8 = *(_QWORD *)(v6 + 120);
    if (v8)
    {
      swift_bridgeObjectRelease(v8);
      swift_bridgeObjectRelease(*(_QWORD *)(v6 + 136));
      swift_bridgeObjectRelease(*(_QWORD *)(v6 + 160));
    }
  }
  else
  {
    swift_release(*(_QWORD *)v6);
    v9 = v6 + *(int *)(sub_5440(&qword_25E930) + 48);
    v10 = type metadata accessor for ColorScheme(0);
    v11 = *(_QWORD *)(v10 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
  }
  v12 = (_QWORD *)(v6 + v1[6]);
  v13 = sub_5440(&qword_25F1E8);
  if (swift_getEnumCaseMultiPayload(v12, v13) == 1)
  {
    v14 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v12, v14);
  }
  else
  {
    swift_release(*v12);
  }
  v15 = (_QWORD *)(v6 + v1[7]);
  v16 = sub_5440(&qword_25F200);
  if (swift_getEnumCaseMultiPayload(v15, v16) == 1)
  {
    v17 = (char *)v15 + *(int *)(type metadata accessor for SizeConstants.Environment(0) + 24);
    v18 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(v17, v18);
  }
  else
  {
    swift_release(*v15);
  }
  v19 = v3 | 7;
  sub_BE0C(*(_QWORD *)(v6 + v1[8]), *(_BYTE *)(v6 + v1[8] + 8));
  sub_BE0C(*(_QWORD *)(v6 + v1[9]), *(_BYTE *)(v6 + v1[9] + 8));
  sub_BE0C(*(_QWORD *)(v6 + v1[10]), *(_BYTE *)(v6 + v1[10] + 8));
  v20 = v6 + v1[11];
  v21 = type metadata accessor for WelcomeFrameViewModel(0);
  v22 = v20 + *(int *)(v21 + 20);
  v23 = type metadata accessor for YIRSourceData(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 8))(v22, v23);
  swift_bridgeObjectRelease(*(_QWORD *)(v20 + *(int *)(v21 + 24) + 8));
  return swift_deallocObject(v0, v4 + v5, v19);
}

void sub_104AD8()
{
  type metadata accessor for WelcomeFrame(0);
  sub_1046C4();
}

uint64_t sub_104B04(uint64_t a1)
{
  uint64_t result;

  result = sub_6FD0(&qword_265778, type metadata accessor for WelcomeFrame, (uint64_t)&protocol conformance descriptor for WelcomeFrame);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_104B40(uint64_t a1)
{
  uint64_t result;

  result = sub_6FD0(&qword_265780, type metadata accessor for WelcomeFrame, (uint64_t)&protocol conformance descriptor for WelcomeFrame);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_104B7C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &opaque type descriptor for <<opaque return type of WelcomeFrame.body>>, 1);
}

uint64_t *initializeBufferWithCopyOfBuffer for WelcomeFrameViewModel(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v15);
  }
  else
  {
    *a1 = *a2;
    v7 = *(int *)(a3 + 20);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for YIRSourceData(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
    v11 = *(int *)(a3 + 24);
    v12 = (uint64_t *)((char *)v4 + v11);
    v13 = (uint64_t *)((char *)a2 + v11);
    v14 = v13[1];
    *v12 = *v13;
    v12[1] = v14;
    swift_bridgeObjectRetain(v14);
  }
  return v4;
}

uint64_t destroy for WelcomeFrameViewModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for YIRSourceData(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(a2 + 24) + 8));
}

_QWORD *initializeWithCopy for WelcomeFrameViewModel(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for YIRSourceData(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
  v10 = *(int *)(a3 + 24);
  v11 = (_QWORD *)((char *)a1 + v10);
  v12 = (_QWORD *)((char *)a2 + v10);
  v13 = v12[1];
  *v11 = *v12;
  v11[1] = v13;
  swift_bridgeObjectRetain(v13);
  return a1;
}

_QWORD *assignWithCopy for WelcomeFrameViewModel(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for YIRSourceData(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  v10 = *(int *)(a3 + 24);
  v11 = (_QWORD *)((char *)a1 + v10);
  v12 = (_QWORD *)((char *)a2 + v10);
  *v11 = *v12;
  v13 = v12[1];
  v14 = v11[1];
  v11[1] = v13;
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRelease(v14);
  return a1;
}

_QWORD *initializeWithTake for WelcomeFrameViewModel(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for YIRSourceData(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  *(_OWORD *)((char *)a1 + *(int *)(a3 + 24)) = *(_OWORD *)((char *)a2 + *(int *)(a3 + 24));
  return a1;
}

_QWORD *assignWithTake for WelcomeFrameViewModel(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for YIRSourceData(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  v10 = *(int *)(a3 + 24);
  v11 = (_QWORD *)((char *)a1 + v10);
  v12 = (_QWORD *)((char *)a2 + v10);
  v14 = *v12;
  v13 = v12[1];
  v15 = v11[1];
  *v11 = v14;
  v11[1] = v13;
  swift_bridgeObjectRelease(v15);
  return a1;
}

uint64_t getEnumTagSinglePayload for WelcomeFrameViewModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_104EBC);
}

uint64_t sub_104EBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for YIRSourceData(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 20), a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 24) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for WelcomeFrameViewModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_104F4C);
}

uint64_t sub_104F4C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for YIRSourceData(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + *(int *)(a4 + 20), a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 24) + 8) = (a2 - 1);
  return result;
}

uint64_t sub_104FCC(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = (char *)&value witness table for Builtin.Int64 + 64;
  result = type metadata accessor for YIRSourceData(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    v4[2] = &unk_1EC668;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for WelcomeFrame(uint64_t a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _WORD *v32;
  _WORD *v33;
  uint64_t v34;
  int *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  uint64_t v71;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v9 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v9 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain(v9);
  }
  else
  {
    v7 = type metadata accessor for PageBackground(0);
    if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
    {
      if (*((_BYTE *)a2 + 56))
      {
        v8 = *((_OWORD *)a2 + 1);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v8;
        *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
        *(_OWORD *)(a1 + 41) = *(_OWORD *)((char *)a2 + 41);
      }
      else
      {
        v18 = *(_OWORD *)(a2 + 3);
        *(_OWORD *)(a1 + 24) = v18;
        (**(void (***)(uint64_t, uint64_t *))(v18 - 8))(a1, a2);
        *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 5);
        *(_BYTE *)(a1 + 56) = 0;
      }
      *(_OWORD *)(a1 + 64) = *((_OWORD *)a2 + 4);
      *(_BYTE *)(a1 + 80) = *((_BYTE *)a2 + 80);
      *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 11);
      v19 = a2[13];
      *(_QWORD *)(a1 + 104) = v19;
      v20 = a2[15];
      swift_bridgeObjectRetain(v19);
      if (v20)
      {
        *(_QWORD *)(a1 + 112) = a2[14];
        *(_QWORD *)(a1 + 120) = v20;
        v21 = a2[17];
        *(_QWORD *)(a1 + 128) = a2[16];
        *(_QWORD *)(a1 + 136) = v21;
        *(_BYTE *)(a1 + 144) = *((_BYTE *)a2 + 144);
        v22 = a2[20];
        *(_QWORD *)(a1 + 152) = a2[19];
        *(_QWORD *)(a1 + 160) = v22;
        swift_bridgeObjectRetain(v20);
        swift_bridgeObjectRetain(v21);
        swift_bridgeObjectRetain(v22);
      }
      else
      {
        v23 = *((_OWORD *)a2 + 8);
        *(_OWORD *)(a1 + 112) = *((_OWORD *)a2 + 7);
        *(_OWORD *)(a1 + 128) = v23;
        *(_OWORD *)(a1 + 144) = *((_OWORD *)a2 + 9);
        *(_QWORD *)(a1 + 160) = a2[20];
      }
      v17 = 1;
    }
    else
    {
      v10 = *a2;
      *(_QWORD *)a1 = *a2;
      swift_retain(v10);
      v11 = *(int *)(sub_5440(&qword_25E930) + 48);
      v12 = (void *)(a1 + v11);
      v13 = (char *)a2 + v11;
      v14 = type metadata accessor for ColorScheme(0);
      v15 = *(_QWORD *)(v14 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
      {
        v16 = sub_5440(&qword_25E928);
        memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, char *, uint64_t))(v15 + 16))(v12, v13, v14);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
      }
      v17 = 0;
    }
    swift_storeEnumTagMultiPayload(a1, v7, v17);
    v24 = a3[6];
    *(_QWORD *)(a1 + a3[5]) = *(uint64_t *)((char *)a2 + a3[5]);
    v25 = (uint64_t *)(a1 + v24);
    v26 = (uint64_t *)((char *)a2 + v24);
    v27 = sub_5440(&qword_25F1E8);
    if (swift_getEnumCaseMultiPayload(v26, v27) == 1)
    {
      v28 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v28 - 8) + 16))(v25, v26, v28);
      v29 = 1;
    }
    else
    {
      v30 = *v26;
      *v25 = *v26;
      swift_retain(v30);
      v29 = 0;
    }
    swift_storeEnumTagMultiPayload(v25, v27, v29);
    v31 = a3[7];
    v32 = (_WORD *)(a1 + v31);
    v33 = (_WORD *)((char *)a2 + v31);
    v34 = sub_5440(&qword_25F200);
    if (swift_getEnumCaseMultiPayload(v33, v34) == 1)
    {
      *v32 = *v33;
      v35 = (int *)type metadata accessor for SizeConstants.Environment(0);
      v36 = v35[6];
      v37 = (char *)v32 + v36;
      v38 = (char *)v33 + v36;
      v39 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v39 - 8) + 16))(v37, v38, v39);
      *(_QWORD *)((char *)v32 + v35[7]) = *(_QWORD *)((char *)v33 + v35[7]);
      v40 = v35[8];
      v41 = (char *)v32 + v40;
      v42 = (char *)v33 + v40;
      v41[2] = v42[2];
      *(_WORD *)v41 = *(_WORD *)v42;
      v43 = 1;
    }
    else
    {
      v44 = *(_QWORD *)v33;
      *(_QWORD *)v32 = *(_QWORD *)v33;
      swift_retain(v44);
      v43 = 0;
    }
    swift_storeEnumTagMultiPayload(v32, v34, v43);
    v45 = a3[8];
    v46 = a1 + v45;
    v47 = (uint64_t)a2 + v45;
    v48 = *(_QWORD *)v47;
    v49 = *(_BYTE *)(v47 + 8);
    sub_F9E4(*(_QWORD *)v47, v49);
    *(_QWORD *)v46 = v48;
    *(_BYTE *)(v46 + 8) = v49;
    v50 = a3[9];
    v51 = a1 + v50;
    v52 = (uint64_t)a2 + v50;
    v53 = *(_QWORD *)v52;
    v54 = *(_BYTE *)(v52 + 8);
    sub_F9E4(*(_QWORD *)v52, v54);
    *(_QWORD *)v51 = v53;
    *(_BYTE *)(v51 + 8) = v54;
    v55 = a3[10];
    v56 = a1 + v55;
    v57 = (uint64_t)a2 + v55;
    v58 = *(_QWORD *)v57;
    v59 = *(_BYTE *)(v57 + 8);
    sub_F9E4(*(_QWORD *)v57, v59);
    *(_QWORD *)v56 = v58;
    *(_BYTE *)(v56 + 8) = v59;
    v60 = a3[11];
    v61 = a1 + v60;
    v62 = (uint64_t)a2 + v60;
    *(_QWORD *)(a1 + v60) = *(uint64_t *)((char *)a2 + v60);
    v63 = type metadata accessor for WelcomeFrameViewModel(0);
    v64 = *(int *)(v63 + 20);
    v65 = v61 + v64;
    v66 = v62 + v64;
    v67 = type metadata accessor for YIRSourceData(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v67 - 8) + 16))(v65, v66, v67);
    v68 = *(int *)(v63 + 24);
    v69 = (_QWORD *)(v61 + v68);
    v70 = (_QWORD *)(v62 + v68);
    v71 = v70[1];
    *v69 = *v70;
    v69[1] = v71;
    swift_bridgeObjectRetain(v71);
  }
  return a1;
}

uint64_t destroy for WelcomeFrame(_QWORD *a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;

  v4 = type metadata accessor for PageBackground(0);
  if (swift_getEnumCaseMultiPayload(a1, v4) == 1)
  {
    if (!*((_BYTE *)a1 + 56))
      _s7BooksUI13AnyPagedFrameVwxx_0(a1);
    swift_bridgeObjectRelease(a1[13]);
    v5 = a1[15];
    if (v5)
    {
      swift_bridgeObjectRelease(v5);
      swift_bridgeObjectRelease(a1[17]);
      swift_bridgeObjectRelease(a1[20]);
    }
  }
  else
  {
    swift_release(*a1);
    v6 = (char *)a1 + *(int *)(sub_5440(&qword_25E930) + 48);
    v7 = type metadata accessor for ColorScheme(0);
    v8 = *(_QWORD *)(v7 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
      (*(void (**)(char *, uint64_t))(v8 + 8))(v6, v7);
  }
  v9 = (_QWORD *)((char *)a1 + a2[6]);
  v10 = sub_5440(&qword_25F1E8);
  if (swift_getEnumCaseMultiPayload(v9, v10) == 1)
  {
    v11 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v9, v11);
  }
  else
  {
    swift_release(*v9);
  }
  v12 = (_QWORD *)((char *)a1 + a2[7]);
  v13 = sub_5440(&qword_25F200);
  if (swift_getEnumCaseMultiPayload(v12, v13) == 1)
  {
    v14 = (char *)v12 + *(int *)(type metadata accessor for SizeConstants.Environment(0) + 24);
    v15 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14, v15);
  }
  else
  {
    swift_release(*v12);
  }
  sub_BE0C(*(_QWORD *)((char *)a1 + a2[8]), *((_BYTE *)a1 + a2[8] + 8));
  sub_BE0C(*(_QWORD *)((char *)a1 + a2[9]), *((_BYTE *)a1 + a2[9] + 8));
  sub_BE0C(*(_QWORD *)((char *)a1 + a2[10]), *((_BYTE *)a1 + a2[10] + 8));
  v16 = (char *)a1 + a2[11];
  v17 = type metadata accessor for WelcomeFrameViewModel(0);
  v18 = &v16[*(int *)(v17 + 20)];
  v19 = type metadata accessor for YIRSourceData(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(v18, v19);
  return swift_bridgeObjectRelease(*(_QWORD *)&v16[*(int *)(v17 + 24) + 8]);
}

uint64_t initializeWithCopy for WelcomeFrame(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _WORD *v30;
  _WORD *v31;
  uint64_t v32;
  int *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  _QWORD *v68;
  uint64_t v69;

  v6 = type metadata accessor for PageBackground(0);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    if (*((_BYTE *)a2 + 56))
    {
      v7 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v7;
      *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
      *(_OWORD *)(a1 + 41) = *(_OWORD *)((char *)a2 + 41);
    }
    else
    {
      v16 = *(_OWORD *)(a2 + 3);
      *(_OWORD *)(a1 + 24) = v16;
      (**(void (***)(uint64_t, uint64_t *))(v16 - 8))(a1, a2);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 5);
      *(_BYTE *)(a1 + 56) = 0;
    }
    *(_OWORD *)(a1 + 64) = *((_OWORD *)a2 + 4);
    *(_BYTE *)(a1 + 80) = *((_BYTE *)a2 + 80);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 11);
    v17 = a2[13];
    *(_QWORD *)(a1 + 104) = v17;
    v18 = a2[15];
    swift_bridgeObjectRetain(v17);
    if (v18)
    {
      *(_QWORD *)(a1 + 112) = a2[14];
      *(_QWORD *)(a1 + 120) = v18;
      v19 = a2[17];
      *(_QWORD *)(a1 + 128) = a2[16];
      *(_QWORD *)(a1 + 136) = v19;
      *(_BYTE *)(a1 + 144) = *((_BYTE *)a2 + 144);
      v20 = a2[20];
      *(_QWORD *)(a1 + 152) = a2[19];
      *(_QWORD *)(a1 + 160) = v20;
      swift_bridgeObjectRetain(v18);
      swift_bridgeObjectRetain(v19);
      swift_bridgeObjectRetain(v20);
    }
    else
    {
      v21 = *((_OWORD *)a2 + 8);
      *(_OWORD *)(a1 + 112) = *((_OWORD *)a2 + 7);
      *(_OWORD *)(a1 + 128) = v21;
      *(_OWORD *)(a1 + 144) = *((_OWORD *)a2 + 9);
      *(_QWORD *)(a1 + 160) = a2[20];
    }
    v15 = 1;
  }
  else
  {
    v8 = *a2;
    *(_QWORD *)a1 = *a2;
    swift_retain(v8);
    v9 = *(int *)(sub_5440(&qword_25E930) + 48);
    v10 = (void *)(a1 + v9);
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for ColorScheme(0);
    v13 = *(_QWORD *)(v12 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
    {
      v14 = sub_5440(&qword_25E928);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
    }
    v15 = 0;
  }
  swift_storeEnumTagMultiPayload(a1, v6, v15);
  v22 = a3[6];
  *(_QWORD *)(a1 + a3[5]) = *(uint64_t *)((char *)a2 + a3[5]);
  v23 = (uint64_t *)(a1 + v22);
  v24 = (uint64_t *)((char *)a2 + v22);
  v25 = sub_5440(&qword_25F1E8);
  if (swift_getEnumCaseMultiPayload(v24, v25) == 1)
  {
    v26 = type metadata accessor for ColorScheme(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v26 - 8) + 16))(v23, v24, v26);
    v27 = 1;
  }
  else
  {
    v28 = *v24;
    *v23 = *v24;
    swift_retain(v28);
    v27 = 0;
  }
  swift_storeEnumTagMultiPayload(v23, v25, v27);
  v29 = a3[7];
  v30 = (_WORD *)(a1 + v29);
  v31 = (_WORD *)((char *)a2 + v29);
  v32 = sub_5440(&qword_25F200);
  if (swift_getEnumCaseMultiPayload(v31, v32) == 1)
  {
    *v30 = *v31;
    v33 = (int *)type metadata accessor for SizeConstants.Environment(0);
    v34 = v33[6];
    v35 = (char *)v30 + v34;
    v36 = (char *)v31 + v34;
    v37 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v37 - 8) + 16))(v35, v36, v37);
    *(_QWORD *)((char *)v30 + v33[7]) = *(_QWORD *)((char *)v31 + v33[7]);
    v38 = v33[8];
    v39 = (char *)v30 + v38;
    v40 = (char *)v31 + v38;
    v39[2] = v40[2];
    *(_WORD *)v39 = *(_WORD *)v40;
    v41 = 1;
  }
  else
  {
    v42 = *(_QWORD *)v31;
    *(_QWORD *)v30 = *(_QWORD *)v31;
    swift_retain(v42);
    v41 = 0;
  }
  swift_storeEnumTagMultiPayload(v30, v32, v41);
  v43 = a3[8];
  v44 = a1 + v43;
  v45 = (uint64_t)a2 + v43;
  v46 = *(_QWORD *)v45;
  v47 = *(_BYTE *)(v45 + 8);
  sub_F9E4(*(_QWORD *)v45, v47);
  *(_QWORD *)v44 = v46;
  *(_BYTE *)(v44 + 8) = v47;
  v48 = a3[9];
  v49 = a1 + v48;
  v50 = (uint64_t)a2 + v48;
  v51 = *(_QWORD *)v50;
  v52 = *(_BYTE *)(v50 + 8);
  sub_F9E4(*(_QWORD *)v50, v52);
  *(_QWORD *)v49 = v51;
  *(_BYTE *)(v49 + 8) = v52;
  v53 = a3[10];
  v54 = a1 + v53;
  v55 = (uint64_t)a2 + v53;
  v56 = *(_QWORD *)v55;
  v57 = *(_BYTE *)(v55 + 8);
  sub_F9E4(*(_QWORD *)v55, v57);
  *(_QWORD *)v54 = v56;
  *(_BYTE *)(v54 + 8) = v57;
  v58 = a3[11];
  v59 = a1 + v58;
  v60 = (uint64_t)a2 + v58;
  *(_QWORD *)(a1 + v58) = *(uint64_t *)((char *)a2 + v58);
  v61 = type metadata accessor for WelcomeFrameViewModel(0);
  v62 = *(int *)(v61 + 20);
  v63 = v59 + v62;
  v64 = v60 + v62;
  v65 = type metadata accessor for YIRSourceData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v65 - 8) + 16))(v63, v64, v65);
  v66 = *(int *)(v61 + 24);
  v67 = (_QWORD *)(v59 + v66);
  v68 = (_QWORD *)(v60 + v66);
  v69 = v68[1];
  *v67 = *v68;
  v67[1] = v69;
  swift_bridgeObjectRetain(v69);
  return a1;
}

uint64_t assignWithCopy for WelcomeFrame(uint64_t a1, __int128 *a2, int *a3)
{
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE *v35;
  _BYTE *v36;
  uint64_t v37;
  int *v38;
  uint64_t v39;
  _BYTE *v40;
  _BYTE *v41;
  uint64_t v42;
  uint64_t v43;
  _BYTE *v44;
  _BYTE *v45;
  char v46;
  _BYTE *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;

  if ((__int128 *)a1 == a2)
  {
    *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)((char *)a2 + a3[5]);
  }
  else
  {
    sub_224DC(a1, type metadata accessor for PageBackground);
    v6 = type metadata accessor for PageBackground(0);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      if (*((_BYTE *)a2 + 56))
      {
        v7 = *a2;
        v8 = a2[1];
        v9 = a2[2];
        *(_OWORD *)(a1 + 41) = *(__int128 *)((char *)a2 + 41);
        *(_OWORD *)(a1 + 16) = v8;
        *(_OWORD *)(a1 + 32) = v9;
        *(_OWORD *)a1 = v7;
      }
      else
      {
        v18 = *((_QWORD *)a2 + 3);
        *(_QWORD *)(a1 + 24) = v18;
        *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
        (**(void (***)(uint64_t, __int128 *))(v18 - 8))(a1, a2);
        *(_OWORD *)(a1 + 40) = *(__int128 *)((char *)a2 + 40);
        *(_BYTE *)(a1 + 56) = 0;
      }
      *(_OWORD *)(a1 + 64) = a2[4];
      *(_BYTE *)(a1 + 80) = *((_BYTE *)a2 + 80);
      *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 11);
      *(_QWORD *)(a1 + 96) = *((_QWORD *)a2 + 12);
      v19 = *((_QWORD *)a2 + 13);
      *(_QWORD *)(a1 + 104) = v19;
      v20 = *((_QWORD *)a2 + 15);
      swift_bridgeObjectRetain(v19);
      if (v20)
      {
        *(_QWORD *)(a1 + 112) = *((_QWORD *)a2 + 14);
        v21 = *((_QWORD *)a2 + 15);
        *(_QWORD *)(a1 + 120) = v21;
        *(_QWORD *)(a1 + 128) = *((_QWORD *)a2 + 16);
        v22 = *((_QWORD *)a2 + 17);
        *(_QWORD *)(a1 + 136) = v22;
        *(_BYTE *)(a1 + 144) = *((_BYTE *)a2 + 144);
        *(_QWORD *)(a1 + 152) = *((_QWORD *)a2 + 19);
        v23 = *((_QWORD *)a2 + 20);
        *(_QWORD *)(a1 + 160) = v23;
        swift_bridgeObjectRetain(v21);
        swift_bridgeObjectRetain(v22);
        swift_bridgeObjectRetain(v23);
      }
      else
      {
        v24 = a2[7];
        v25 = a2[8];
        v26 = a2[9];
        *(_QWORD *)(a1 + 160) = *((_QWORD *)a2 + 20);
        *(_OWORD *)(a1 + 128) = v25;
        *(_OWORD *)(a1 + 144) = v26;
        *(_OWORD *)(a1 + 112) = v24;
      }
      v17 = 1;
    }
    else
    {
      v10 = *(_QWORD *)a2;
      *(_QWORD *)a1 = *(_QWORD *)a2;
      swift_retain(v10);
      v11 = *(int *)(sub_5440(&qword_25E930) + 48);
      v12 = (void *)(a1 + v11);
      v13 = (char *)a2 + v11;
      v14 = type metadata accessor for ColorScheme(0);
      v15 = *(_QWORD *)(v14 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
      {
        v16 = sub_5440(&qword_25E928);
        memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, char *, uint64_t))(v15 + 16))(v12, v13, v14);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
      }
      v17 = 0;
    }
    swift_storeEnumTagMultiPayload(a1, v6, v17);
    *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)((char *)a2 + a3[5]);
    v27 = a3[6];
    v28 = (uint64_t *)(a1 + v27);
    v29 = (uint64_t *)((char *)a2 + v27);
    sub_B414(a1 + v27, &qword_25F1E8);
    v30 = sub_5440(&qword_25F1E8);
    if (swift_getEnumCaseMultiPayload(v29, v30) == 1)
    {
      v31 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v31 - 8) + 16))(v28, v29, v31);
      v32 = 1;
    }
    else
    {
      v33 = *v29;
      *v28 = *v29;
      swift_retain(v33);
      v32 = 0;
    }
    swift_storeEnumTagMultiPayload(v28, v30, v32);
    v34 = a3[7];
    v35 = (_BYTE *)(a1 + v34);
    v36 = (char *)a2 + v34;
    sub_B414(a1 + v34, &qword_25F200);
    v37 = sub_5440(&qword_25F200);
    if (swift_getEnumCaseMultiPayload(v36, v37) == 1)
    {
      *v35 = *v36;
      v35[1] = v36[1];
      v38 = (int *)type metadata accessor for SizeConstants.Environment(0);
      v39 = v38[6];
      v40 = &v35[v39];
      v41 = &v36[v39];
      v42 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v42 - 8) + 16))(v40, v41, v42);
      *(_QWORD *)&v35[v38[7]] = *(_QWORD *)&v36[v38[7]];
      v43 = v38[8];
      v44 = &v35[v43];
      v45 = &v36[v43];
      v46 = v45[2];
      *(_WORD *)v44 = *(_WORD *)v45;
      v44[2] = v46;
      v47 = v35;
      v48 = v37;
      v49 = 1;
    }
    else
    {
      v50 = *(_QWORD *)v36;
      *(_QWORD *)v35 = *(_QWORD *)v36;
      swift_retain(v50);
      v47 = v35;
      v48 = v37;
      v49 = 0;
    }
    swift_storeEnumTagMultiPayload(v47, v48, v49);
  }
  v51 = a3[8];
  v52 = a1 + v51;
  v53 = (uint64_t)a2 + v51;
  v54 = *(_QWORD *)v53;
  v55 = *(_BYTE *)(v53 + 8);
  sub_F9E4(*(_QWORD *)v53, v55);
  v56 = *(_QWORD *)v52;
  v57 = *(_BYTE *)(v52 + 8);
  *(_QWORD *)v52 = v54;
  *(_BYTE *)(v52 + 8) = v55;
  sub_BE0C(v56, v57);
  v58 = a3[9];
  v59 = a1 + v58;
  v60 = (uint64_t)a2 + v58;
  v61 = *(_QWORD *)v60;
  v62 = *(_BYTE *)(v60 + 8);
  sub_F9E4(*(_QWORD *)v60, v62);
  v63 = *(_QWORD *)v59;
  v64 = *(_BYTE *)(v59 + 8);
  *(_QWORD *)v59 = v61;
  *(_BYTE *)(v59 + 8) = v62;
  sub_BE0C(v63, v64);
  v65 = a3[10];
  v66 = a1 + v65;
  v67 = (uint64_t)a2 + v65;
  v68 = *(_QWORD *)v67;
  v69 = *(_BYTE *)(v67 + 8);
  sub_F9E4(*(_QWORD *)v67, v69);
  v70 = *(_QWORD *)v66;
  v71 = *(_BYTE *)(v66 + 8);
  *(_QWORD *)v66 = v68;
  *(_BYTE *)(v66 + 8) = v69;
  sub_BE0C(v70, v71);
  v72 = a3[11];
  v73 = a1 + v72;
  v74 = (uint64_t)a2 + v72;
  *(_QWORD *)(a1 + v72) = *(_QWORD *)((char *)a2 + v72);
  v75 = type metadata accessor for WelcomeFrameViewModel(0);
  v76 = *(int *)(v75 + 20);
  v77 = v73 + v76;
  v78 = v74 + v76;
  v79 = type metadata accessor for YIRSourceData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v79 - 8) + 24))(v77, v78, v79);
  v80 = *(int *)(v75 + 24);
  v81 = (_QWORD *)(v73 + v80);
  v82 = (_QWORD *)(v74 + v80);
  *v81 = *v82;
  v83 = v82[1];
  v84 = v81[1];
  v81[1] = v83;
  swift_bridgeObjectRetain(v83);
  swift_bridgeObjectRelease(v84);
  return a1;
}

_QWORD *initializeWithTake for WelcomeFrame(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _WORD *v19;
  _WORD *v20;
  uint64_t v21;
  int *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;

  v6 = type metadata accessor for PageBackground(0);
  if (swift_getEnumCaseMultiPayload(a2, v6))
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  else
  {
    *a1 = *a2;
    v7 = *(int *)(sub_5440(&qword_25E930) + 48);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for ColorScheme(0);
    v11 = *(_QWORD *)(v10 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
    {
      v12 = sub_5440(&qword_25E928);
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
    }
    swift_storeEnumTagMultiPayload(a1, v6, 0);
  }
  v13 = a3[6];
  *(_QWORD *)((char *)a1 + a3[5]) = *(_QWORD *)((char *)a2 + a3[5]);
  v14 = (char *)a1 + v13;
  v15 = (char *)a2 + v13;
  v16 = sub_5440(&qword_25F1E8);
  if (swift_getEnumCaseMultiPayload(v15, v16) == 1)
  {
    v17 = type metadata accessor for ColorScheme(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v14, v15, v17);
    swift_storeEnumTagMultiPayload(v14, v16, 1);
  }
  else
  {
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  v18 = a3[7];
  v19 = (_WORD *)((char *)a1 + v18);
  v20 = (_WORD *)((char *)a2 + v18);
  v21 = sub_5440(&qword_25F200);
  if (swift_getEnumCaseMultiPayload(v20, v21) == 1)
  {
    *v19 = *v20;
    v22 = (int *)type metadata accessor for SizeConstants.Environment(0);
    v23 = v22[6];
    v24 = (char *)v19 + v23;
    v25 = (char *)v20 + v23;
    v26 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v26 - 8) + 32))(v24, v25, v26);
    *(_QWORD *)((char *)v19 + v22[7]) = *(_QWORD *)((char *)v20 + v22[7]);
    v27 = v22[8];
    v28 = (char *)v19 + v27;
    v29 = (char *)v20 + v27;
    v28[2] = v29[2];
    *(_WORD *)v28 = *(_WORD *)v29;
    swift_storeEnumTagMultiPayload(v19, v21, 1);
  }
  else
  {
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
  }
  v30 = a3[8];
  v31 = a3[9];
  v32 = (char *)a1 + v30;
  v33 = (char *)a2 + v30;
  *(_QWORD *)v32 = *(_QWORD *)v33;
  v32[8] = v33[8];
  v34 = (char *)a1 + v31;
  v35 = (char *)a2 + v31;
  *(_QWORD *)v34 = *(_QWORD *)v35;
  v34[8] = v35[8];
  v36 = a3[10];
  v37 = a3[11];
  v38 = (char *)a1 + v36;
  v39 = (char *)a2 + v36;
  *(_QWORD *)v38 = *(_QWORD *)v39;
  v38[8] = v39[8];
  v40 = (char *)a1 + v37;
  v41 = (char *)a2 + v37;
  *(_QWORD *)((char *)a1 + v37) = *(_QWORD *)((char *)a2 + v37);
  v42 = type metadata accessor for WelcomeFrameViewModel(0);
  v43 = *(int *)(v42 + 20);
  v44 = &v40[v43];
  v45 = &v41[v43];
  v46 = type metadata accessor for YIRSourceData(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v46 - 8) + 32))(v44, v45, v46);
  *(_OWORD *)&v40[*(int *)(v42 + 24)] = *(_OWORD *)&v41[*(int *)(v42 + 24)];
  return a1;
}

_QWORD *assignWithTake for WelcomeFrame(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _WORD *v19;
  _WORD *v20;
  uint64_t v21;
  int *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  if (a1 == a2)
  {
    *(_QWORD *)((char *)a1 + a3[5]) = *(_QWORD *)((char *)a2 + a3[5]);
  }
  else
  {
    sub_224DC((uint64_t)a1, type metadata accessor for PageBackground);
    v6 = type metadata accessor for PageBackground(0);
    if (swift_getEnumCaseMultiPayload(a2, v6))
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
    else
    {
      *a1 = *a2;
      v7 = *(int *)(sub_5440(&qword_25E930) + 48);
      v8 = (char *)a1 + v7;
      v9 = (char *)a2 + v7;
      v10 = type metadata accessor for ColorScheme(0);
      v11 = *(_QWORD *)(v10 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
      {
        v12 = sub_5440(&qword_25E928);
        memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      }
      swift_storeEnumTagMultiPayload(a1, v6, 0);
    }
    v13 = a3[6];
    *(_QWORD *)((char *)a1 + a3[5]) = *(_QWORD *)((char *)a2 + a3[5]);
    v14 = (char *)a1 + v13;
    v15 = (char *)a2 + v13;
    sub_B414((uint64_t)a1 + v13, &qword_25F1E8);
    v16 = sub_5440(&qword_25F1E8);
    if (swift_getEnumCaseMultiPayload(v15, v16) == 1)
    {
      v17 = type metadata accessor for ColorScheme(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v14, v15, v17);
      swift_storeEnumTagMultiPayload(v14, v16, 1);
    }
    else
    {
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    }
    v18 = a3[7];
    v19 = (_WORD *)((char *)a1 + v18);
    v20 = (_WORD *)((char *)a2 + v18);
    sub_B414((uint64_t)a1 + v18, &qword_25F200);
    v21 = sub_5440(&qword_25F200);
    if (swift_getEnumCaseMultiPayload(v20, v21) == 1)
    {
      *v19 = *v20;
      v22 = (int *)type metadata accessor for SizeConstants.Environment(0);
      v23 = v22[6];
      v24 = (char *)v19 + v23;
      v25 = (char *)v20 + v23;
      v26 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v26 - 8) + 32))(v24, v25, v26);
      *(_QWORD *)((char *)v19 + v22[7]) = *(_QWORD *)((char *)v20 + v22[7]);
      v27 = v22[8];
      v28 = (char *)v19 + v27;
      v29 = (char *)v20 + v27;
      v28[2] = v29[2];
      *(_WORD *)v28 = *(_WORD *)v29;
      swift_storeEnumTagMultiPayload(v19, v21, 1);
    }
    else
    {
      memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    }
  }
  v30 = a3[8];
  v31 = (char *)a1 + v30;
  v32 = (char *)a2 + v30;
  v33 = *(_QWORD *)v32;
  LOBYTE(v32) = v32[8];
  v34 = *(_QWORD *)v31;
  v35 = v31[8];
  *(_QWORD *)v31 = v33;
  v31[8] = (char)v32;
  sub_BE0C(v34, v35);
  v36 = a3[9];
  v37 = (char *)a1 + v36;
  v38 = (char *)a2 + v36;
  v39 = *(_QWORD *)v38;
  LOBYTE(v38) = v38[8];
  v40 = *(_QWORD *)v37;
  v41 = v37[8];
  *(_QWORD *)v37 = v39;
  v37[8] = (char)v38;
  sub_BE0C(v40, v41);
  v42 = a3[10];
  v43 = (char *)a1 + v42;
  v44 = (char *)a2 + v42;
  v45 = *(_QWORD *)v44;
  LOBYTE(v44) = v44[8];
  v46 = *(_QWORD *)v43;
  v47 = v43[8];
  *(_QWORD *)v43 = v45;
  v43[8] = (char)v44;
  sub_BE0C(v46, v47);
  v48 = a3[11];
  v49 = (char *)a1 + v48;
  v50 = (char *)a2 + v48;
  *(_QWORD *)((char *)a1 + v48) = *(_QWORD *)((char *)a2 + v48);
  v51 = type metadata accessor for WelcomeFrameViewModel(0);
  v52 = *(int *)(v51 + 20);
  v53 = &v49[v52];
  v54 = &v50[v52];
  v55 = type metadata accessor for YIRSourceData(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v55 - 8) + 40))(v53, v54, v55);
  v56 = *(int *)(v51 + 24);
  v57 = &v49[v56];
  v58 = &v50[v56];
  v60 = *(_QWORD *)v58;
  v59 = *((_QWORD *)v58 + 1);
  v61 = *((_QWORD *)v57 + 1);
  *(_QWORD *)v57 = v60;
  *((_QWORD *)v57 + 1) = v59;
  swift_bridgeObjectRelease(v61);
  return a1;
}

uint64_t getEnumTagSinglePayload for WelcomeFrame(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1065F8);
}

uint64_t sub_1065F8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;

  v6 = type metadata accessor for PageBackground(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = sub_5440(&qword_25F210);
  v10 = *(_QWORD *)(v9 - 8);
  if (*(_DWORD *)(v10 + 84) == (_DWORD)a2)
  {
    v11 = v9;
    v12 = a3[6];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1 + v12, a2, v11);
  }
  v13 = sub_5440(&qword_25F220);
  v10 = *(_QWORD *)(v13 - 8);
  if (*(_DWORD *)(v10 + 84) == (_DWORD)a2)
  {
    v11 = v13;
    v12 = a3[7];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1 + v12, a2, v11);
  }
  if ((_DWORD)a2 != 254)
  {
    v11 = type metadata accessor for WelcomeFrameViewModel(0);
    v10 = *(_QWORD *)(v11 - 8);
    v12 = a3[11];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1 + v12, a2, v11);
  }
  v14 = *(unsigned __int8 *)(a1 + a3[8] + 8);
  if (v14 > 1)
    return (v14 ^ 0xFF) + 1;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for WelcomeFrame(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1066F8);
}

uint64_t sub_1066F8(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;

  v8 = type metadata accessor for PageBackground(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v13 = sub_5440(&qword_25F210);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = a4[6];
    }
    else
    {
      result = sub_5440(&qword_25F220);
      v14 = *(_QWORD *)(result - 8);
      if (*(_DWORD *)(v14 + 84) == a3)
      {
        v10 = result;
        v15 = a4[7];
      }
      else
      {
        if (a3 == 254)
        {
          *(_BYTE *)(a1 + a4[8] + 8) = -(char)a2;
          return result;
        }
        v10 = type metadata accessor for WelcomeFrameViewModel(0);
        v14 = *(_QWORD *)(v10 - 8);
        v15 = a4[11];
      }
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_1067EC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD v10[8];

  v2 = type metadata accessor for PageBackground(319);
  if (v3 <= 0x3F)
  {
    v10[0] = *(_QWORD *)(v2 - 8) + 64;
    v10[1] = (char *)&value witness table for Builtin.Int64 + 64;
    sub_2ADCC(319, (unint64_t *)&qword_25F298, type metadata accessor for ColorConstants);
    if (v5 <= 0x3F)
    {
      v10[2] = *(_QWORD *)(v4 - 8) + 64;
      sub_2ADCC(319, (unint64_t *)&qword_25F2A8, type metadata accessor for SizeConstants.Spacing);
      if (v7 <= 0x3F)
      {
        v10[3] = *(_QWORD *)(v6 - 8) + 64;
        v10[4] = "\t";
        v10[5] = "\t";
        v10[6] = "\t";
        v8 = type metadata accessor for WelcomeFrameViewModel(319);
        if (v9 <= 0x3F)
        {
          v10[7] = *(_QWORD *)(v8 - 8) + 64;
          swift_initStructMetadata(a1, 256, 8, v10, a1 + 16);
        }
      }
    }
  }
}

uint64_t sub_1068E0()
{
  return sub_3CC54(&qword_2658C8, &qword_265770, (void (*)(void))sub_106914);
}

unint64_t sub_106914()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2658D0;
  if (!qword_2658D0)
  {
    v1 = sub_7EF8(&qword_265760);
    sub_7FD8(&qword_2658D8, &qword_265758, (uint64_t)&protocol conformance descriptor for VStack<A>);
    sub_7FD8((unint64_t *)&qword_25EE78, &qword_25EE58, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_2658D0);
  }
  return result;
}

unint64_t sub_1069B8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_265978;
  if (!qword_265978)
  {
    v1 = sub_7EF8(&qword_265968);
    sub_106DD0(&qword_265980, &qword_262688);
    sub_7FD8(&qword_260960, &qword_260968, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_265978);
  }
  return result;
}

unint64_t sub_106A6C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_265988;
  if (!qword_265988)
  {
    v1 = sub_7EF8(&qword_265958);
    sub_106AF0();
    sub_7FD8(&qword_25F440, &qword_25F448, (uint64_t)&protocol conformance descriptor for _AnimationModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_265988);
  }
  return result;
}

unint64_t sub_106AF0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_265990;
  if (!qword_265990)
  {
    v1 = sub_7EF8(&qword_265950);
    sub_3CC54(&qword_265998, &qword_265948, (void (*)(void))sub_106B94);
    sub_7FD8(&qword_2659C8, &qword_2659D0, (uint64_t)&protocol conformance descriptor for _IgnoredByLayoutEffect<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_265990);
  }
  return result;
}

uint64_t sub_106B94()
{
  return sub_3CC54(&qword_2659A0, &qword_265940, (void (*)(void))sub_106BB8);
}

unint64_t sub_106BB8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2659A8;
  if (!qword_2659A8)
  {
    v1 = sub_7EF8(&qword_265938);
    sub_106C3C();
    sub_7FD8(&qword_263DC0, &qword_263DC8, (uint64_t)&protocol conformance descriptor for _ForegroundStyleModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_2659A8);
  }
  return result;
}

unint64_t sub_106C3C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2659B0;
  if (!qword_2659B0)
  {
    v1 = sub_7EF8(&qword_265930);
    sub_106CC0();
    sub_7FD8((unint64_t *)&qword_260A18, &qword_25FF30, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_2659B0);
  }
  return result;
}

unint64_t sub_106CC0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2659B8;
  if (!qword_2659B8)
  {
    v1 = sub_7EF8(&qword_2659C0);
    sub_7FD8((unint64_t *)&qword_2600A8, &qword_2600B0, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_2659B8);
  }
  return result;
}

unint64_t sub_106D44()
{
  unint64_t result;
  uint64_t v1;

  result = qword_265A10;
  if (!qword_265A10)
  {
    v1 = sub_7EF8(&qword_265A08);
    sub_106DD0((unint64_t *)&qword_260388, &qword_260390);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_265A10);
  }
  return result;
}

uint64_t sub_106DD0(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = sub_7EF8(a2);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v4);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_106E38()
{
  unint64_t result;
  uint64_t v1;

  result = qword_265A18;
  if (!qword_265A18)
  {
    v1 = sub_7EF8(&qword_2659F0);
    sub_106EBC();
    sub_7FD8(&qword_260960, &qword_260968, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_265A18);
  }
  return result;
}

unint64_t sub_106EBC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_265A20;
  if (!qword_265A20)
  {
    v1 = sub_7EF8(&qword_2659E8);
    sub_106F40();
    sub_7FD8((unint64_t *)&qword_261BF0, &qword_261BF8, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_265A20);
  }
  return result;
}

unint64_t sub_106F40()
{
  unint64_t result;
  uint64_t v1;

  result = qword_265A28;
  if (!qword_265A28)
  {
    v1 = sub_7EF8(&qword_2659E0);
    sub_106DD0(&qword_265980, &qword_262688);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_265A28);
  }
  return result;
}

uint64_t PageUpdateActionImplementation.perform(_:asPartOf:)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_107AD4(a1, a2, a3[2], a3[3], a3[4], a3[5]);
}

uint64_t sub_106FDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t updated;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;

  v8[35] = a4;
  v8[36] = a5;
  v8[33] = a2;
  v8[34] = a3;
  v8[32] = a1;
  v12 = sub_5440(&qword_265AD0);
  v8[37] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v8[38] = v13;
  v8[39] = swift_task_alloc((*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for ActionOutcome(0);
  v8[40] = v14;
  v15 = *(_QWORD *)(v14 - 8);
  v8[41] = v15;
  v8[42] = swift_task_alloc((*(_QWORD *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_5440(&qword_265AD8);
  v8[43] = v16;
  v17 = *(_QWORD *)(v16 - 8);
  v8[44] = v17;
  v8[45] = swift_task_alloc((*(_QWORD *)(v17 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8[22] = a6;
  v8[23] = a7;
  v8[24] = a8;
  v8[25] = v27;
  updated = type metadata accessor for PageUpdateInstruction(0, (uint64_t)(v8 + 22));
  v8[46] = updated;
  v19 = *(_QWORD *)(updated - 8);
  v8[47] = v19;
  v8[48] = swift_task_alloc((*(_QWORD *)(v19 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8[26] = a6;
  v8[27] = a7;
  v8[28] = a8;
  v8[29] = v27;
  v20 = type metadata accessor for PageUpdateAction(0, (uint64_t)(v8 + 26));
  v8[49] = v20;
  v21 = *(_QWORD *)(v20 - 8);
  v8[50] = v21;
  v22 = (*(_QWORD *)(v21 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v8[51] = swift_task_alloc(v22);
  v8[52] = swift_task_alloc(v22);
  v23 = type metadata accessor for MainActor(0);
  v8[53] = static MainActor.shared.getter(v23);
  v24 = dispatch thunk of Actor.unownedExecutor.getter(v23, &protocol witness table for MainActor);
  v8[54] = v24;
  v8[55] = v25;
  return swift_task_switch(sub_10716C, v24, v25);
}

uint64_t sub_10716C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  _BOOL4 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint8_t *v15;
  void (*v16)(uint64_t, uint64_t);
  unint64_t updated;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v29;
  uint64_t v30;

  if (qword_25DAF8 != -1)
    swift_once(&qword_25DAF8, sub_7228);
  v1 = v0[52];
  v2 = v0[49];
  v3 = v0[50];
  v4 = v0[33];
  v5 = type metadata accessor for Logger(0);
  sub_7120(v5, (uint64_t)qword_25DEB8);
  v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v7 = v6(v1, v4, v2);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter();
  v10 = os_log_type_enabled(v8, v9);
  v11 = v0[52];
  if (v10)
  {
    v12 = v0[50];
    v13 = v0[51];
    v14 = v0[49];
    v15 = (uint8_t *)swift_slowAlloc(12, -1);
    v29 = swift_slowAlloc(32, -1);
    v30 = v29;
    *(_DWORD *)v15 = 136315138;
    v6(v13, v11, v14);
    v16 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    v16(v11, v14);
    updated = PageUpdateAction.description.getter(v14);
    v19 = v18;
    v16(v13, v14);
    v0[31] = sub_14AC3C(updated, v19, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 31, v0 + 32, v15 + 4, v15 + 12);
    swift_bridgeObjectRelease(v19);
    _os_log_impl(&dword_0, v8, v9, "Resolving instruction for PageUpdateAction: %s)", v15, 0xCu);
    swift_arrayDestroy(v29, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v29, -1, -1);
    swift_slowDealloc(v15, -1, -1);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v0[50] + 8))(v0[52], v0[49]);
  }

  v20 = v0[49];
  v21 = (_QWORD *)v0[34];
  v22 = v21[3];
  v23 = v21[4];
  sub_5480(v21, v22);
  PageUpdateAction.instructionIntent.getter(v20, (uint64_t)(v0 + 2));
  v24 = v0[5];
  v25 = v0[6];
  v26 = sub_5480(v0 + 2, v24);
  v27 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of IntentDispatcher.dispatch<A>(_:objectGraph:)[1]);
  v0[56] = v27;
  *v27 = v0;
  v27[1] = sub_1073EC;
  return dispatch thunk of IntentDispatcher.dispatch<A>(_:objectGraph:)(v0[48], v26, v0[35], v24, v25, v22, v23);
}

uint64_t sub_1073EC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 448);
  *(_QWORD *)(*v1 + 456) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_107824;
  else
    v4 = sub_10744C;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 432), *(_QWORD *)(v2 + 440));
}

uint64_t sub_10744C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  unsigned int *v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v15 = *(_QWORD *)(v0 + 416);
  v16 = *(_QWORD *)(v0 + 408);
  v1 = *(_QWORD *)(v0 + 384);
  v2 = *(_QWORD *)(v0 + 392);
  v3 = *(_QWORD *)(v0 + 368);
  v4 = *(_QWORD *)(v0 + 376);
  v17 = *(_QWORD *)(v0 + 360);
  v18 = *(_QWORD *)(v0 + 336);
  v14 = *(_QWORD *)(v0 + 320);
  v19 = *(_QWORD *)(v0 + 312);
  v5 = *(_QWORD **)(v0 + 288);
  v6 = *(_QWORD *)(v0 + 264);
  v12 = *(_QWORD *)(v0 + 328);
  v13 = *(_QWORD *)(v0 + 256);
  swift_release(*(_QWORD *)(v0 + 424));
  _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)(v0 + 16));
  v7 = v5[3];
  v8 = v5[4];
  sub_5480(v5, v7);
  v9 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v8 + 40))(v1, *(unsigned __int8 *)(v6 + *(int *)(v2 + 60)), v7, v8);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v1, v3);
  v10 = (unsigned int *)&enum case for ActionOutcome.performed(_:);
  if ((v9 & 1) == 0)
    v10 = (unsigned int *)&enum case for ActionOutcome.unsupported(_:);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v12 + 104))(v13, *v10, v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v1);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_107588()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 464);
  *(_QWORD *)(*v1 + 472) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_107984;
  else
    v4 = sub_1075E8;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 432), *(_QWORD *)(v2 + 440));
}

uint64_t sub_1075E8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v2 = v0[38];
  v1 = v0[39];
  v3 = v0[37];
  v4 = v0[10];
  v5 = v0[11];
  sub_5480(v0 + 7, v4);
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(v4, v5);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v2 + 104))(v1, enum case for ActionDispatcher.MetricsBehavior.notProcessed<A>(_:), v3);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to ActionDispatcher.perform(_:withMetrics:asPartOf:)[1]);
  v0[60] = v6;
  *v6 = v0;
  v6[1] = sub_1076B0;
  return ActionDispatcher.perform(_:withMetrics:asPartOf:)(v0[42], v0 + 12, v0[39], v0[35], v0[43]);
}

uint64_t sub_1076B0()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 480);
  *(_QWORD *)(*(_QWORD *)v1 + 488) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    (*(void (**)(_QWORD, _QWORD))(v2[38] + 8))(v2[39], v2[37]);
    _s7BooksUI13AnyPagedFrameVwxx_0(v2 + 12);
    v4 = v2[54];
    v5 = v2[55];
    v6 = sub_107A20;
  }
  else
  {
    v8 = v2[41];
    v7 = v2[42];
    v9 = v2[40];
    (*(void (**)(_QWORD, _QWORD))(v2[38] + 8))(v2[39], v2[37]);
    _s7BooksUI13AnyPagedFrameVwxx_0(v2 + 12);
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
    v4 = v2[54];
    v5 = v2[55];
    v6 = sub_10776C;
  }
  return swift_task_switch(v6, v4, v5);
}

uint64_t sub_10776C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_QWORD *)(v0 + 352);
  v1 = *(_QWORD *)(v0 + 360);
  v3 = *(_QWORD *)(v0 + 344);
  v4 = swift_release(*(_QWORD *)(v0 + 424));
  (*(void (**)(uint64_t, uint64_t, __n128))(v2 + 8))(v1, v3, v4);
  v5 = _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)(v0 + 56));
  swift_willThrow(v5);
  v6 = *(_QWORD *)(v0 + 408);
  v7 = *(_QWORD *)(v0 + 384);
  v8 = *(_QWORD *)(v0 + 360);
  v9 = *(_QWORD *)(v0 + 336);
  v10 = *(_QWORD *)(v0 + 312);
  swift_task_dealloc(*(_QWORD *)(v0 + 416));
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_107824()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = *(_QWORD *)(v0 + 456);
  _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)(v0 + 16));
  *(_QWORD *)(v0 + 240) = v1;
  swift_errorRetain(v1);
  v2 = sub_5440(&qword_265AE0);
  v3 = sub_5440(&qword_265AE8);
  if ((swift_dynamicCast(v0 + 136, v0 + 240, v2, v3, 6) & 1) != 0)
  {
    sub_AC68((__int128 *)(v0 + 136), v0 + 56);
    v4 = (_QWORD *)swift_task_alloc(async function pointer to BaseObjectGraph.inject<A>(_:)[1]);
    *(_QWORD *)(v0 + 464) = v4;
    *v4 = v0;
    v4[1] = sub_107588;
    return BaseObjectGraph.inject<A>(_:)(*(_QWORD *)(v0 + 360), *(_QWORD *)(v0 + 344), *(_QWORD *)(v0 + 344));
  }
  else
  {
    v6 = *(_QWORD *)(v0 + 424);
    *(_OWORD *)(v0 + 136) = 0u;
    *(_OWORD *)(v0 + 152) = 0u;
    *(_QWORD *)(v0 + 168) = 0;
    swift_release(v6);
    v7 = sub_108010(v0 + 136);
    swift_willThrow(v7);
    v8 = *(_QWORD *)(v0 + 408);
    v9 = *(_QWORD *)(v0 + 384);
    v10 = *(_QWORD *)(v0 + 360);
    v11 = *(_QWORD *)(v0 + 336);
    v12 = *(_QWORD *)(v0 + 312);
    swift_task_dealloc(*(_QWORD *)(v0 + 416));
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_107984()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 456);
  swift_release(*(_QWORD *)(v0 + 424));
  swift_errorRelease(v1);
  _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)(v0 + 56));
  v2 = *(_QWORD *)(v0 + 408);
  v3 = *(_QWORD *)(v0 + 384);
  v4 = *(_QWORD *)(v0 + 360);
  v5 = *(_QWORD *)(v0 + 336);
  v6 = *(_QWORD *)(v0 + 312);
  swift_task_dealloc(*(_QWORD *)(v0 + 416));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_107A20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + 456);
  v3 = *(_QWORD *)(v0 + 352);
  v2 = *(_QWORD *)(v0 + 360);
  v4 = *(_QWORD *)(v0 + 344);
  swift_release(*(_QWORD *)(v0 + 424));
  swift_errorRelease(v1);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)(v0 + 56));
  v5 = *(_QWORD *)(v0 + 408);
  v6 = *(_QWORD *)(v0 + 384);
  v7 = *(_QWORD *)(v0 + 360);
  v8 = *(_QWORD *)(v0 + 336);
  v9 = *(_QWORD *)(v0 + 312);
  swift_task_dealloc(*(_QWORD *)(v0 + 416));
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_107AD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t updated;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t ExtendedExistentialTypeMetadata;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  __n128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  __int128 v41[2];
  __int128 v42[2];
  _QWORD v43[5];
  _QWORD v44[6];

  v39 = a6;
  v38 = a5;
  v12 = sub_5440(&qword_25E2E8);
  __chkstk_darwin(v12);
  v40 = (char *)&v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44[0] = a3;
  v44[1] = a4;
  v37 = a4;
  v44[2] = a5;
  v44[3] = a6;
  updated = type metadata accessor for PageUpdateAction(0, (uint64_t)v44);
  v15 = *(_QWORD *)(updated - 8);
  v16 = *(_QWORD *)(v15 + 64);
  __chkstk_darwin(updated);
  v18 = (char *)&v36 - v17;
  v19 = sub_5440(&qword_265AB8);
  BaseObjectGraph.inject<A>(_:)(v44, v19, v19);
  v43[0] = a3;
  v43[1] = a4;
  ExtendedExistentialTypeMetadata = swift_getExtendedExistentialTypeMetadata(&unk_1EC7E0, v43);
  BaseObjectGraph.inject<A>(_:)(v43, ExtendedExistentialTypeMetadata, ExtendedExistentialTypeMetadata);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v18, a1, updated);
  sub_BD00((uint64_t)v44, (uint64_t)v42);
  sub_BD00((uint64_t)v43, (uint64_t)v41);
  v21 = *(unsigned __int8 *)(v15 + 80);
  v22 = (v21 + 48) & ~v21;
  v23 = (v16 + v22 + 7) & 0xFFFFFFFFFFFFFFF8;
  v24 = (v23 + 47) & 0xFFFFFFFFFFFFFFF8;
  v25 = (v24 + 15) & 0xFFFFFFFFFFFFFFF8;
  v26 = (char *)swift_allocObject(&unk_252910, v25 + 40, v21 | 7);
  v27 = v37;
  *((_QWORD *)v26 + 2) = a3;
  *((_QWORD *)v26 + 3) = v27;
  v28 = v39;
  *((_QWORD *)v26 + 4) = v38;
  *((_QWORD *)v26 + 5) = v28;
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(&v26[v22], v18, updated);
  sub_AC68(v42, (uint64_t)&v26[v23]);
  *(_QWORD *)&v26[v24] = a2;
  sub_AC68(v41, (uint64_t)&v26[v25]);
  sub_5440(&qword_263F00);
  v29 = swift_retain(a2);
  v30 = Promise.__allocating_init()(v29);
  v31 = type metadata accessor for TaskPriority(0);
  v32 = (uint64_t)v40;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v40, 1, 1, v31);
  v33 = (_QWORD *)swift_allocObject(&unk_252938, 56, 7);
  v33[2] = 0;
  v33[3] = 0;
  v33[4] = &unk_265AC8;
  v33[5] = v26;
  v33[6] = v30;
  swift_retain(v30);
  v34 = sub_C3A3C(v32, (uint64_t)&unk_263F10, (uint64_t)v33);
  swift_release(v34);
  _s7BooksUI13AnyPagedFrameVwxx_0(v43);
  _s7BooksUI13AnyPagedFrameVwxx_0(v44);
  return v30;
}

uint64_t sub_107D64(uint64_t a1)
{
  return swift_getWitnessTable(&protocol conformance descriptor for PageUpdateAction<A, B>, a1);
}

uint64_t type metadata accessor for PageUpdateActionImplementation(uint64_t a1, uint64_t a2)
{
  return swift_getGenericMetadata(a1, a2, &nominal type descriptor for PageUpdateActionImplementation);
}

uint64_t sub_107D80()
{
  uint64_t v0;
  __int128 v1;
  uint64_t updated;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _OWORD v16[2];

  v1 = *(_OWORD *)(v0 + 32);
  v16[0] = *(_OWORD *)(v0 + 16);
  v16[1] = v1;
  updated = type metadata accessor for PageUpdateAction(0, (uint64_t)v16);
  v3 = *(_QWORD *)(updated - 8);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v5 = (v4 + 48) & ~v4;
  v6 = *(_QWORD *)(v3 + 64);
  v7 = v0 + v5;
  v8 = type metadata accessor for ActionMetrics(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v0 + v5, v8);
  v9 = v0 + v5 + *(int *)(updated + 52);
  v10 = type metadata accessor for ClickData(0);
  v11 = *(_QWORD *)(v10 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
  v12 = (v6 + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  v13 = (v12 + 47) & 0xFFFFFFFFFFFFFFF8;
  v14 = (v13 + 15) & 0xFFFFFFFFFFFFFFF8;
  _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)(v7 + *(int *)(updated + 56)));
  _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)(v0 + v12));
  swift_release(*(_QWORD *)(v0 + v13));
  _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)(v0 + v14));
  return swift_deallocObject(v0, v14 + 40, v4 | 7);
}

uint64_t sub_107EA4(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v2[2] = v4;
  v2[3] = v5;
  v2[4] = v6;
  v2[5] = v7;
  v8 = *(_QWORD *)(type metadata accessor for PageUpdateAction(0, (uint64_t)(v2 + 2)) - 8);
  v9 = (*(unsigned __int8 *)(v8 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v10 = (*(_QWORD *)(v8 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  v11 = (v10 + 47) & 0xFFFFFFFFFFFFFFF8;
  v12 = (uint64_t)v1 + v9;
  v13 = (uint64_t)v1 + v10;
  v14 = *(_QWORD *)((char *)v1 + v11);
  v15 = (uint64_t)v1 + ((v11 + 15) & 0xFFFFFFFFFFFFFFF8);
  v16 = (_QWORD *)swift_task_alloc(dword_265AC4);
  v2[6] = v16;
  *v16 = v2;
  v16[1] = sub_107F94;
  return sub_106FDC(a1, v12, v13, v14, v15, v4, v5, v6);
}

uint64_t sub_107F94()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 48));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_107FDC()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[2]);
  swift_release(v0[5]);
  swift_release(v0[6]);
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_108010(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_5440(qword_265AF0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_108050@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;

  *a4 = swift_getKeyPath(&unk_1EC830);
  v8 = sub_5440(&qword_25FAD0);
  swift_storeEnumTagMultiPayload(a4, v8, 0);
  v10 = (char *)a4 + *(int *)(type metadata accessor for ListItemMetadataEyebrowView(0, a2, a3, v9) + 36);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(v10, a1, a2);
}

uint64_t sub_1080D8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v2 = *(_QWORD *)(a1 - 8);
  v3 = *(_QWORD *)(v2 + 64);
  __chkstk_darwin(a1);
  v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v2 + 16))(v4);
  v5 = *(unsigned __int8 *)(v2 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(&unk_252A00, v6 + v3, v5 | 7);
  *(_OWORD *)(v7 + 16) = *(_OWORD *)(a1 + 16);
  (*(void (**)(uint64_t, char *, uint64_t))(v2 + 32))(v7 + v6, v4, a1);
  v8 = sub_5440(&qword_265B78);
  v9 = type metadata accessor for _JetLocalizeDefaultWorking(0);
  v10 = type metadata accessor for _JetLocalizeDefaultFailed(0);
  v11 = sub_108F6C();
  v12 = sub_6FD0(&qword_25FEE0, (uint64_t (*)(uint64_t))&type metadata accessor for _JetLocalizeDefaultWorking, (uint64_t)&protocol conformance descriptor for _JetLocalizeDefaultWorking);
  v13 = sub_6FD0(&qword_25FEE8, (uint64_t (*)(uint64_t))&type metadata accessor for _JetLocalizeDefaultFailed, (uint64_t)&protocol conformance descriptor for _JetLocalizeDefaultFailed);
  return JetLocalize.init(working:failed:content:)(&j___s18_JetEngine_SwiftUI01_A22LocalizeDefaultWorkingVACycfC, 0, sub_4ED68, 0, sub_108F04, v7, v8, v9, v10, v11, v12, v13);
}

uint64_t sub_10824C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __n128 v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  __n128 v38;
  uint64_t KeyPath;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  _OWORD v67[8];
  _OWORD v68[2];
  _BYTE v69[161];
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  char v80;
  int v81;
  __int16 v82;
  char v83;

  v56 = a3;
  v57 = a4;
  v60 = a2;
  v55 = a1;
  v66 = a5;
  v5 = type metadata accessor for DefaultBlendModeModifier(0);
  v6 = __chkstk_darwin(v5);
  v64 = (uint64_t *)((char *)&v54 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v6);
  v65 = (uint64_t)&v54 - v8;
  v9 = type metadata accessor for Font.Leading(0);
  v62 = *(_QWORD *)(v9 - 8);
  v63 = v9;
  __chkstk_darwin(v9);
  v59 = (char *)&v54 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_5440(&qword_25FE08);
  __chkstk_darwin(v11);
  v13 = (char *)&v54 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58 = type metadata accessor for Font.TextStyle(0);
  v14 = *(_QWORD *)(v58 - 8);
  __chkstk_darwin(v58);
  v16 = (char *)&v54 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for FontConstants.ListItem(0);
  __chkstk_darwin(v17);
  v19 = (char *)&v54 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = sub_5440(&qword_265B78);
  v20 = __chkstk_darwin(v61);
  v22 = (char *)&v54 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = static Axis.Set.horizontal.getter(v20);
  v24 = v23;
  v25 = static Axis.Set.vertical.getter(v23);
  v26 = Axis.Set.init(rawValue:)(0);
  v27 = Axis.Set.init(rawValue:)(v26);
  if (Axis.Set.init(rawValue:)(v27 & v24) != v24)
    v26 = Axis.Set.init(rawValue:)(v26 | v24);
  v28 = Axis.Set.init(rawValue:)(v26);
  if (Axis.Set.init(rawValue:)(v28 & v25) != v25)
    LOBYTE(v26) = Axis.Set.init(rawValue:)(v26 | v25);
  sub_108764(v55, v56, v57, (uint64_t)v67);
  *(_OWORD *)&v69[119] = v67[7];
  *(_OWORD *)&v69[103] = v67[6];
  *(_OWORD *)&v69[55] = v67[3];
  *(_OWORD *)&v69[39] = v67[2];
  *(_OWORD *)&v69[135] = v68[0];
  *(_OWORD *)&v69[145] = *(_OWORD *)((char *)v68 + 10);
  *(_OWORD *)&v69[71] = v67[4];
  *(_OWORD *)&v69[87] = v67[5];
  *(_OWORD *)&v69[7] = v67[0];
  *(_OWORD *)&v69[23] = v67[1];
  v78 = *(_OWORD *)&v69[128];
  v79 = *(_OWORD *)&v69[144];
  v80 = BYTE9(v68[1]);
  v74 = *(_OWORD *)&v69[64];
  v75 = *(_OWORD *)&v69[80];
  v76 = *(_OWORD *)&v69[96];
  v77 = *(_OWORD *)&v69[112];
  v70 = *(_OWORD *)v69;
  v71 = *(_OWORD *)&v69[16];
  v72 = *(_OWORD *)&v69[32];
  v73 = *(_OWORD *)&v69[48];
  sub_30978((uint64_t)v19);
  v29 = v58;
  (*(void (**)(char *, _QWORD, uint64_t))(v14 + 104))(v16, enum case for Font.TextStyle.caption2(_:), v58);
  v30 = type metadata accessor for Font.Design(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v13, 1, 1, v30);
  v31 = static Font.system(_:design:weight:)(v16, v13, 0, 1);
  sub_109194((uint64_t)v13);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v29);
  v32 = Font.bold()(v31);
  v33 = swift_release(v31);
  v35 = v62;
  v34 = v63;
  v36 = v59;
  (*(void (**)(char *, _QWORD, uint64_t, __n128))(v62 + 104))(v59, enum case for Font.Leading.tight(_:), v63, v33);
  v37 = Font.leading(_:)(v36, v32);
  v38 = swift_release(v32);
  (*(void (**)(char *, uint64_t, __n128))(v35 + 8))(v36, v34, v38);
  sub_224DC((uint64_t)v19, type metadata accessor for FontConstants.ListItem);
  KeyPath = swift_getKeyPath(&unk_1EC8F0);
  v40 = _s7BooksUI14ColorConstantsV19booksSecondaryLabel05SwiftB00C0Vvg_0();
  v41 = swift_getKeyPath(&unk_1EC920);
  v42 = swift_getKeyPath(&unk_1EC950);
  v83 = 0;
  v43 = swift_getKeyPath(&unk_1EC980);
  v44 = v64;
  *v64 = v43;
  v45 = sub_5440(&qword_25F208);
  swift_storeEnumTagMultiPayload(v44, v45, 0);
  v46 = (uint64_t)v44;
  v47 = v65;
  sub_4E18C(v46, v65);
  sub_4E1D0(v47, (uint64_t)&v22[*(int *)(v61 + 36)]);
  v48 = v76;
  *(_OWORD *)(v22 + 113) = v77;
  v49 = v79;
  *(_OWORD *)(v22 + 129) = v78;
  *(_OWORD *)(v22 + 145) = v49;
  v50 = v72;
  *(_OWORD *)(v22 + 49) = v73;
  v51 = v75;
  *(_OWORD *)(v22 + 65) = v74;
  *(_OWORD *)(v22 + 81) = v51;
  *(_OWORD *)(v22 + 97) = v48;
  v52 = v71;
  *(_OWORD *)(v22 + 1) = v70;
  *(_OWORD *)(v22 + 17) = v52;
  *v22 = v26;
  v22[161] = v80;
  *(_OWORD *)(v22 + 33) = v50;
  *(_DWORD *)(v22 + 162) = v81;
  *((_WORD *)v22 + 83) = v82;
  *((_QWORD *)v22 + 21) = KeyPath;
  *((_QWORD *)v22 + 22) = v37;
  *((_QWORD *)v22 + 23) = v41;
  *((_QWORD *)v22 + 24) = v40;
  *((_QWORD *)v22 + 25) = v42;
  *((_QWORD *)v22 + 26) = 1;
  v22[216] = v83;
  sub_224DC(v47, type metadata accessor for DefaultBlendModeModifier);
  return sub_1091F0((uint64_t)v22, v66);
}

uint64_t sub_108764@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t (*v15)(uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int16 v31;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int16 v39;
  uint64_t v40;

  type metadata accessor for ListItemMetadataEyebrowView(0, a2, a3, a3);
  v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 16))(a1, a2, a3);
  v10 = v9;
  v12 = v11;
  v14 = v13 & 1;
  v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 24);
  swift_bridgeObjectRetain(v11);
  sub_34B1C(v8, v10, v14);
  v16 = v15(a1, a2, a3);
  v37 = v18;
  v20 = v19 & 1;
  if (v18)
    v21 = v16;
  else
    v21 = 0;
  v38 = v21;
  if (v18)
    v22 = v17;
  else
    v22 = 0;
  if (!v18)
    v20 = 0;
  v40 = v20;
  if (v18)
    v23 = 257;
  else
    v23 = 0;
  v39 = v23;
  v24 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 32))(a1, a2, a3);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v10;
  if (v27)
    v28 = v24;
  else
    v28 = 0;
  v33 = v27;
  v34 = v28;
  if (v27)
    v29 = v25;
  else
    v29 = 0;
  *(_BYTE *)(a4 + 16) = v14;
  if (v27)
    v30 = v26 & 1;
  else
    v30 = 0;
  v35 = v30;
  v36 = v29;
  if (v27)
    v31 = 257;
  else
    v31 = 0;
  *(_QWORD *)(a4 + 24) = v12;
  *(_WORD *)(a4 + 32) = 257;
  *(_QWORD *)(a4 + 40) = v38;
  *(_QWORD *)(a4 + 48) = v22;
  *(_QWORD *)(a4 + 56) = v40;
  *(_QWORD *)(a4 + 64) = v37;
  *(_WORD *)(a4 + 72) = v39;
  *(_QWORD *)(a4 + 80) = v28;
  *(_QWORD *)(a4 + 88) = v29;
  *(_QWORD *)(a4 + 96) = v30;
  *(_QWORD *)(a4 + 104) = v27;
  *(_WORD *)(a4 + 112) = v31;
  *(_QWORD *)(a4 + 120) = v8;
  *(_QWORD *)(a4 + 128) = v10;
  *(_BYTE *)(a4 + 136) = v14;
  *(_QWORD *)(a4 + 144) = v12;
  *(_WORD *)(a4 + 152) = 256;
  sub_34B1C(v8, v10, v14);
  swift_bridgeObjectRetain(v12);
  sub_109238(v38, v22, v40, v37);
  sub_109238(v34, v36, v35, v33);
  sub_34B1C(v8, v10, v14);
  swift_bridgeObjectRetain(v12);
  sub_2B574(v8, v10, v14);
  swift_bridgeObjectRelease(v12);
  sub_109268(v34, v36, v35, v33);
  sub_109268(v38, v22, v40, v37);
  sub_2B574(v8, v10, v14);
  return swift_bridgeObjectRelease(v12);
}

uint64_t type metadata accessor for ListItemMetadataEyebrowView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10E40(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ListItemMetadataEyebrowView);
}

uint64_t sub_1089C0(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  int v15;
  unsigned int v17;
  int v18;
  int v19;
  unsigned int v20;

  v6 = type metadata accessor for DynamicTypeSize(0);
  if (((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64)
       + ((*(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80) + 2) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80))
       + 7) & 0xFFFFFFFFFFFFFFF8)
     + 8 <= 8)
    v7 = 8;
  else
    v7 = ((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64)
         + ((*(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80) + 2) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80))
         + 7) & 0xFFFFFFFFFFFFFFF8)
       + 8;
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v9 = *(_DWORD *)(v8 + 84);
  if (v9 <= 0xFE)
    v10 = 254;
  else
    v10 = *(_DWORD *)(v8 + 84);
  if (!a2)
    return 0;
  v11 = *(unsigned __int8 *)(v8 + 80);
  v12 = v11 + v7 + 1;
  if (a2 <= v10)
    goto LABEL_27;
  v13 = (v12 & ~v11) + *(_QWORD *)(v8 + 64);
  v14 = 8 * v13;
  if (v13 <= 3)
  {
    v17 = ((a2 - v10 + ~(-1 << v14)) >> v14) + 1;
    if (HIWORD(v17))
    {
      v15 = *(_DWORD *)(a1 + v13);
      if (!v15)
        goto LABEL_27;
      goto LABEL_18;
    }
    if (v17 > 0xFF)
    {
      v15 = *(unsigned __int16 *)(a1 + v13);
      if (!*(_WORD *)(a1 + v13))
        goto LABEL_27;
      goto LABEL_18;
    }
    if (v17 < 2)
    {
LABEL_27:
      if (v9 > 0xFE)
        return (*(uint64_t (**)(uint64_t))(v8 + 48))((v12 + a1) & ~v11);
      v20 = *(unsigned __int8 *)(a1 + v7);
      if (v20 >= 2)
        return (v20 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v15 = *(unsigned __int8 *)(a1 + v13);
  if (!*(_BYTE *)(a1 + v13))
    goto LABEL_27;
LABEL_18:
  v18 = (v15 - 1) << v14;
  if (v13 > 3)
    v18 = 0;
  if ((_DWORD)v13)
  {
    if (v13 <= 3)
      v19 = v13;
    else
      v19 = 4;
    __asm { BR              X12 }
  }
  return v10 + v18 + 1;
}

void sub_108B74(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  size_t v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  int v16;

  v8 = type metadata accessor for DynamicTypeSize(0);
  v9 = ((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64)
       + ((*(unsigned __int8 *)(*(_QWORD *)(v8 - 8) + 80) + 2) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v8 - 8) + 80))
       + 7) & 0xFFFFFFFFFFFFFFF8)
     + 8;
  if (v9 <= 8)
    v9 = 8;
  v10 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v10 + 84) <= 0xFEu)
    v11 = 254;
  else
    v11 = *(_DWORD *)(v10 + 84);
  v12 = (((v9 | 1) + *(unsigned __int8 *)(v10 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80))
      + *(_QWORD *)(v10 + 64);
  if (a3 <= v11)
  {
    v13 = 0;
  }
  else if (v12 <= 3)
  {
    v15 = ((a3 - v11 + ~(-1 << (8 * v12))) >> (8 * v12)) + 1;
    if (HIWORD(v15))
    {
      v13 = &dword_4;
    }
    else if (v15 >= 0x100)
    {
      v13 = 2;
    }
    else
    {
      v13 = v15 > 1;
    }
  }
  else
  {
    v13 = &dword_0 + 1;
  }
  if (v11 < a2)
  {
    v14 = ~v11 + a2;
    if (v12 < 4)
    {
      if ((_DWORD)v12)
      {
        v16 = v14 & ~(-1 << (8 * v12));
        bzero(a1, v12);
        if ((_DWORD)v12 == 3)
        {
          *(_WORD *)a1 = v16;
          a1[2] = BYTE2(v16);
        }
        else if ((_DWORD)v12 == 2)
        {
          *(_WORD *)a1 = v16;
        }
        else
        {
          *a1 = v16;
        }
      }
    }
    else
    {
      bzero(a1, v12);
      *(_DWORD *)a1 = v14;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X14 }
}

uint64_t sub_108DEC(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  return swift_getOpaqueTypeConformance2(&v3, &unk_22DD94, 1);
}

uint64_t sub_108E24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  __n128 v15;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = type metadata accessor for ListItemMetadataEyebrowView(0, v5, *(_QWORD *)(v4 + 24), a4);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v8 + 32) & ~v8;
  v10 = *(_QWORD *)(v7 + 64);
  v11 = (char *)(v4 + v9);
  v12 = sub_5440(&qword_25FAD0);
  if (swift_getEnumCaseMultiPayload(v4 + v9, v12) == 1)
  {
    v13 = &v11[*(int *)(type metadata accessor for FontConstants.Environment(0) + 24)];
    v14 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
  }
  else
  {
    v15 = swift_release(*(_QWORD *)v11);
  }
  (*(void (**)(char *, uint64_t, __n128))(*(_QWORD *)(v5 - 8) + 8))(&v11[*(int *)(v6 + 36)], v5, v15);
  return swift_deallocObject(v4, v9 + v10, v8 | 7);
}

uint64_t sub_108F04@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = *(_QWORD *)(v3 + 16);
  v7 = *(_QWORD *)(v3 + 24);
  v8 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ListItemMetadataEyebrowView(0, v6, v7, a2) - 8)
                          + 80);
  return sub_10824C(a1, v3 + ((v8 + 32) & ~v8), v6, v7, a3);
}

unint64_t sub_108F6C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_265B80;
  if (!qword_265B80)
  {
    v1 = sub_7EF8(&qword_265B78);
    sub_108FF0();
    sub_6FD0((unint64_t *)&qword_260958, type metadata accessor for DefaultBlendModeModifier, (uint64_t)&unk_1F136C);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_265B80);
  }
  return result;
}

unint64_t sub_108FF0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_265B88;
  if (!qword_265B88)
  {
    v1 = sub_7EF8(&qword_265B90);
    sub_109074();
    sub_7FD8(&qword_260960, &qword_260968, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_265B88);
  }
  return result;
}

unint64_t sub_109074()
{
  unint64_t result;
  uint64_t v1;

  result = qword_265B98;
  if (!qword_265B98)
  {
    v1 = sub_7EF8(&qword_265BA0);
    sub_1090F8();
    sub_7FD8((unint64_t *)&qword_25FD88, &qword_25FD90, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_265B98);
  }
  return result;
}

unint64_t sub_1090F8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_265BA8;
  if (!qword_265BA8)
  {
    v1 = sub_7EF8(&qword_265BB0);
    sub_7FD8(&qword_265BB8, &qword_265BC0, (uint64_t)&protocol conformance descriptor for ViewThatFits<A>);
    sub_7FD8((unint64_t *)&qword_2600A8, &qword_2600B0, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_265BA8);
  }
  return result;
}

uint64_t sub_109194(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_5440(&qword_25FE08);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1091F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_5440(&qword_265B78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_109238(uint64_t result, uint64_t a2, char a3, uint64_t a4)
{
  if (a4)
  {
    sub_34B1C(result, a2, a3 & 1);
    return swift_bridgeObjectRetain(a4);
  }
  return result;
}

uint64_t sub_109268(uint64_t result, uint64_t a2, char a3, uint64_t a4)
{
  if (a4)
  {
    sub_2B574(result, a2, a3 & 1);
    return swift_bridgeObjectRelease(a4);
  }
  return result;
}

uint64_t sub_109298()
{
  return sub_7FD8(&qword_265BC8, &qword_265BD0, (uint64_t)&protocol conformance descriptor for JetLocalize<A, B, C>);
}

uint64_t static ActionKinds.table.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  if (qword_25DC90 != -1)
    swift_once(&qword_25DC90, sub_109334);
  v0 = qword_265BD8;
  v1 = sub_5440(&qword_265BE8);
  OSAllocatedUnfairLock.valueWithLock.getter(&v3, v0, v1);
  return v3;
}

uint64_t sub_109334()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  if (qword_25DC98 != -1)
    swift_once(&qword_25DC98, sub_1093A8);
  v0 = qword_265BE0;
  v1 = sub_5440(&qword_265C28);
  v2 = swift_allocObject(v1, 28, 7);
  *(_DWORD *)(v2 + 24) = 0;
  *(_QWORD *)(v2 + 16) = v0;
  qword_265BD8 = v2;
  return swift_bridgeObjectRetain(v0);
}

unint64_t sub_1093A8()
{
  uint64_t v0;
  uint64_t inited;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;

  v0 = sub_5440(&qword_265C30);
  inited = swift_initStackObject(v0, &v7);
  *(_OWORD *)(inited + 16) = xmmword_1E0B60;
  *(_QWORD *)(inited + 32) = 0x7463417465737361;
  *(_QWORD *)(inited + 40) = 0xEB000000006E6F69;
  v2 = type metadata accessor for AssetAction(0);
  v3 = sub_6FD0(&qword_261738, type metadata accessor for AssetAction, (uint64_t)&protocol conformance descriptor for AssetAction);
  *(_QWORD *)(inited + 48) = v2;
  *(_QWORD *)(inited + 56) = v3;
  *(_QWORD *)(inited + 64) = 0x69746341776F6C66;
  *(_QWORD *)(inited + 72) = 0xEA00000000006E6FLL;
  v4 = type metadata accessor for FlowAction(0);
  v5 = sub_6FD0(&qword_265C38, type metadata accessor for FlowAction, (uint64_t)&protocol conformance descriptor for FlowAction);
  *(_QWORD *)(inited + 80) = v4;
  *(_QWORD *)(inited + 88) = v5;
  strcpy((char *)(inited + 96), "flowBackAction");
  *(_BYTE *)(inited + 111) = -18;
  *(_QWORD *)(inited + 112) = type metadata accessor for Models.FlowBackAction(0);
  *(_QWORD *)(inited + 120) = &protocol witness table for Models.FlowBackAction;
  result = sub_9520(inited);
  qword_265BE0 = result;
  return result;
}

void static ActionKinds.register<A>(_:name:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v10;
  os_unfair_lock_s *v11;

  if (qword_25DC90 != -1)
    swift_once(&qword_25DC90, sub_109334);
  v10 = (_QWORD *)(qword_265BD8 + 16);
  v11 = (os_unfair_lock_s *)(qword_265BD8 + 24);
  os_unfair_lock_lock((os_unfair_lock_t)(qword_265BD8 + 24));
  sub_109578(v10, a2, a3, a1, a4, a5);
  os_unfair_lock_unlock(v11);
}

uint64_t sub_109578(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  char isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  uint64_t v14;

  swift_bridgeObjectRetain(a3);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a1);
  v14 = *a1;
  *a1 = 0x8000000000000000;
  sub_AF20(a4, a6, a2, a3, isUniquelyReferenced_nonNull_native);
  v12 = *a1;
  *a1 = v14;
  swift_bridgeObjectRelease(a3);
  return swift_bridgeObjectRelease(v12);
}

unint64_t sub_10961C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v8;

  if (qword_25DC90 != -1)
    swift_once(&qword_25DC90, sub_109334);
  v0 = qword_265BD8;
  v1 = sub_5440(&qword_265BE8);
  v2 = OSAllocatedUnfairLock.valueWithLock.getter(&v8, v0, v1);
  v3 = v8;
  v4 = _defaultActionKindLookup.getter(v2);
  v5 = sub_10A000(v4, v3);
  v6 = sub_10A07C(v5);
  swift_bridgeObjectRelease(v5);
  return v6;
}

_QWORD *sub_1096BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_1096D0(a1, a2, a3);
}

_QWORD *sub_1096D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  void (*v42)(char *, char *);
  uint64_t v43;
  char *v44;
  unint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v56;
  char *v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void (*v70)(char *, uint64_t);
  uint64_t v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  char *v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  _QWORD *v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  Swift::String v98;
  void *object;
  Swift::String v100;
  uint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  _QWORD *v107;
  _QWORD *v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  char *v112;
  char *v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  char *v123;
  uint64_t v124;
  __int128 v125;
  uint64_t v126;
  _QWORD v127[5];
  uint64_t v128;
  unint64_t v129;
  __int128 v130;
  uint64_t v131;
  uint64_t v132;

  *(_QWORD *)&v125 = a2;
  v116 = a3;
  v4 = type metadata accessor for JSONObject(0);
  __chkstk_darwin(v4);
  v115 = (char *)&v109 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v120 = type metadata accessor for AnyActionTypes(0);
  v114 = *(_QWORD *)(v120 - 8);
  __chkstk_darwin(v120);
  v112 = (char *)&v109 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_5440(&qword_265BF8);
  __chkstk_darwin(v7);
  v119 = (char *)&v109 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v117 = sub_5440(&qword_265C00);
  v9 = *(_QWORD *)(v117 - 8);
  v10 = __chkstk_darwin(v117);
  v12 = (char *)&v109 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v109 - v13;
  v15 = sub_5440(&qword_265C08);
  v121 = *(_QWORD *)(v15 - 8);
  v122 = (char *)v15;
  v16 = __chkstk_darwin(v15);
  v113 = (char *)&v109 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v19 = (char *)&v109 - v18;
  v126 = type metadata accessor for JSONContext(0);
  v132 = *(_QWORD *)(v126 - 8);
  v20 = __chkstk_darwin(v126);
  v22 = (char *)&v109 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __chkstk_darwin(v20);
  v25 = (char *)&v109 - v24;
  v26 = __chkstk_darwin(v23);
  v123 = (char *)&v109 - v27;
  __chkstk_darwin(v26);
  v29 = (char *)&v109 - v28;
  v30 = a1;
  v31 = sub_93DA4(a1, a1, (uint64_t)&protocol descriptor for ActionModel, (uint64_t)&protocol descriptor for Decodable);
  if (v31)
  {
    v34 = v31;
    v119 = v32;
    v120 = v33;
    v35 = (_QWORD *)v125;
    v36 = *(_QWORD *)(v125 + 24);
    v37 = *(_QWORD *)(v125 + 32);
    sub_5480((_QWORD *)v125, v36);
    v38 = dispatch thunk of Decoder.userInfo.getter(v36, v37);
    v39 = JSONContext.init(userInfo:)(v38);
    static JSONContext.Property<A>.actionKindTable.getter(v39);
    v40 = sub_5440(&qword_265C18);
    JSONContext.subscript.getter(v19, v40);
    v41 = v122;
    v42 = *(void (**)(char *, char *))(v121 + 8);
    v42(v19, v122);
    v43 = v126;
    v44 = v123;
    if (!v128)
    {
      v45 = sub_109FBC();
      v128 = v118;
      v129 = v45;
      v46 = v113;
      static JSONContext.Property<A>.actionKindTable.getter(v45);
      JSONContext.addingValue<A>(_:forProperty:)(&v128, v46, v40);
      v47 = v46;
      v43 = v126;
      v42(v47, v41);
      v48 = v132;
      (*(void (**)(char *, uint64_t))(v132 + 8))(v29, v43);
      (*(void (**)(char *, char *, uint64_t))(v48 + 32))(v29, v44, v43);
    }
    v49 = v35[3];
    v50 = v35[4];
    sub_5480(v35, v49);
    v51 = v132;
    (*(void (**)(char *, char *, uint64_t))(v132 + 16))(v44, v29, v43);
    v52 = Dictionary<>.init(jsonContext:)(v44);
    Decoder.withUserInfo(_:)(v127, v52, v49, v50);
    swift_bridgeObjectRelease(v52);
    v53 = v120;
    *(_QWORD *)&v130 = v34;
    *((_QWORD *)&v130 + 1) = v119;
    v131 = v120;
    sub_C404(&v128);
    v54 = v124;
    dispatch thunk of Decodable.init(from:)(v127, v34, v53);
    if (v54)
    {
      (*(void (**)(char *, uint64_t))(v51 + 8))(v29, v43);
      return sub_93E10(&v128);
    }
    v125 = v130;
    v88 = v130;
    v89 = sub_5480(&v128, v130);
    v90 = (_QWORD *)v116;
    *(_OWORD *)(v116 + 24) = v125;
    v91 = sub_C404(v90);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v88 - 8) + 16))(v91, v89, v88);
    (*(void (**)(char *, uint64_t))(v51 + 8))(v29, v43);
    return (_QWORD *)_s7BooksUI13AnyPagedFrameVwxx_0(&v128);
  }
  v56 = v14;
  v121 = v9;
  v57 = v119;
  v113 = v12;
  v111 = v22;
  v58 = v120;
  v122 = v25;
  v59 = (_QWORD *)v125;
  v60 = sub_93DA4(v30, v30, (uint64_t)&protocol descriptor for ActionModel, (uint64_t)&protocol descriptor for ExpressibleByJSON);
  if (v60)
  {
    v63 = v60;
    v109 = v61;
    v110 = v62;
    v64 = v59[3];
    v65 = v59[4];
    sub_5480(v59, v64);
    v66 = dispatch thunk of Decoder.userInfo.getter(v64, v65);
    v67 = JSONContext.init(userInfo:)(v66);
    static JSONContext.Property<A>.actionTypes.getter(v67);
    v68 = (uint64_t)v57;
    JSONContext.subscript.getter(v14, v58);
    v69 = v58;
    v70 = *(void (**)(char *, uint64_t))(v121 + 8);
    v70(v56, v117);
    v71 = v114;
    v72 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v114 + 48))(v68, 1, v58);
    sub_109F7C(v68);
    v73 = v126;
    v74 = v132;
    if (v72 == 1)
    {
      v75 = sub_109FBC();
      v76 = v112;
      v77 = AnyActionTypes.init(_:)(v118, v75);
      v78 = v113;
      static JSONContext.Property<A>.actionTypes.getter(v77);
      v79 = v123;
      v80 = v69;
      v121 = v63;
      v81 = v73;
      v82 = v69;
      v83 = v122;
      JSONContext.addingValue<A>(_:forProperty:)(v76, v78, v80);
      v84 = v78;
      v74 = v132;
      v70(v84, v117);
      v85 = v82;
      v73 = v81;
      v63 = v121;
      (*(void (**)(char *, uint64_t))(v71 + 8))(v76, v85);
      (*(void (**)(char *, uint64_t))(v74 + 8))(v83, v73);
      (*(void (**)(char *, char *, uint64_t))(v74 + 32))(v83, v79, v73);
    }
    sub_BD00((uint64_t)v59, (uint64_t)v127);
    v86 = v115;
    v87 = v124;
    JSONObject.init(from:)(v127);
    if (v87)
      return (_QWORD *)(*(uint64_t (**)(char *, uint64_t))(v74 + 8))(v122, v73);
    v102 = v111;
    v103 = v122;
    (*(void (**)(char *, char *, uint64_t))(v74 + 16))(v111, v122, v73);
    *(_QWORD *)&v130 = v63;
    *((_QWORD *)&v130 + 1) = v109;
    v104 = v110;
    v131 = v110;
    sub_C404(&v128);
    dispatch thunk of ExpressibleByJSON.init(deserializing:using:)(v86, v102, v63, v104);
    v125 = v130;
    v105 = v130;
    v106 = sub_5480(&v128, v130);
    v107 = (_QWORD *)v116;
    *(_OWORD *)(v116 + 24) = v125;
    v108 = sub_C404(v107);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v105 - 8) + 16))(v108, v106, v105);
    (*(void (**)(char *, uint64_t))(v74 + 8))(v103, v73);
    return (_QWORD *)_s7BooksUI13AnyPagedFrameVwxx_0(&v128);
  }
  v92 = type metadata accessor for DecodingError(0);
  swift_allocError(v92, &protocol witness table for DecodingError, 0, 0);
  v94 = v93;
  sub_5440(&qword_25F8F8);
  *v94 = v30;
  v95 = v59[3];
  v96 = v59[4];
  sub_5480(v59, v95);
  v97 = dispatch thunk of Decoder.codingPath.getter(v95, v96);
  v128 = 0;
  v129 = 0xE000000000000000;
  _StringGuts.grow(_:)(21);
  swift_bridgeObjectRelease(v129);
  v128 = 60;
  v129 = 0xE100000000000000;
  v98._countAndFlagsBits = _typeName(_:qualified:)(v30, 0);
  object = v98._object;
  String.append(_:)(v98);
  swift_bridgeObjectRelease(object);
  v100._object = (void *)0x80000000001FB270;
  v100._countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v100);
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)(v97, v128, v129, 0);
  v101 = (*(uint64_t (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v92 - 8) + 104))(v94, enum case for DecodingError.typeMismatch(_:), v92);
  return (_QWORD *)swift_willThrow(v101);
}

void static ActionModel.registerActionKind(name:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  static ActionKinds.register<A>(_:name:)(a3, a1, a2, a3, a4);
}

unint64_t sub_109F28()
{
  unint64_t result;

  result = qword_265BF0;
  if (!qword_265BF0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ActionKinds, &type metadata for ActionKinds);
    atomic_store(result, (unint64_t *)&qword_265BF0);
  }
  return result;
}

ValueMetadata *type metadata accessor for ActionKinds()
{
  return &type metadata for ActionKinds;
}

uint64_t sub_109F7C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_5440(&qword_265BF8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_109FBC()
{
  unint64_t result;

  result = qword_265C10;
  if (!qword_265C10)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ActionKinds, &type metadata for ActionKinds);
    atomic_store(result, (unint64_t *)&qword_265C10);
  }
  return result;
}

uint64_t sub_10A000(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v8;

  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(a2);
  v8 = a2;
  sub_10A3B8(a1, (uint64_t)sub_10A398, 0, isUniquelyReferenced_nonNull_native, &v8);
  v6 = v8;
  swift_bridgeObjectRelease(0x8000000000000000);
  if (v2)
    swift_bridgeObjectRelease(v6);
  return v6;
}

unint64_t sub_10A07C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t result;
  int64_t i;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  int64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t *v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  unint64_t v37;
  __int128 v38;
  uint64_t v39;

  v1 = a1;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    sub_5440(&qword_262950);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  }
  else
  {
    v3 = &_swiftEmptyDictionarySingleton;
  }
  v36 = v1 + 64;
  v4 = -1 << *(_BYTE *)(v1 + 32);
  if (-v4 < 64)
    v5 = ~(-1 << -(char)v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(v1 + 64);
  v35 = (unint64_t)(63 - v4) >> 6;
  result = swift_bridgeObjectRetain(v1);
  i = 0;
  v9 = (uint64_t *)&unk_265C20;
  v10 = (uint64_t *)&unk_262960;
  if (v6)
    goto LABEL_10;
LABEL_11:
  v18 = i + 1;
  if (__OFADD__(i, 1))
    goto LABEL_36;
  if (v18 >= v35)
    goto LABEL_33;
  v19 = *(_QWORD *)(v36 + 8 * v18);
  v20 = i + 1;
  if (!v19)
  {
    v20 = i + 2;
    if (i + 2 >= v35)
      goto LABEL_33;
    v19 = *(_QWORD *)(v36 + 8 * v20);
    if (!v19)
    {
      v20 = i + 3;
      if (i + 3 >= v35)
        goto LABEL_33;
      v19 = *(_QWORD *)(v36 + 8 * v20);
      if (!v19)
      {
        v20 = i + 4;
        if (i + 4 >= v35)
          goto LABEL_33;
        v19 = *(_QWORD *)(v36 + 8 * v20);
        if (!v19)
        {
          v20 = i + 5;
          if (i + 5 >= v35)
            goto LABEL_33;
          v19 = *(_QWORD *)(v36 + 8 * v20);
          if (!v19)
          {
            v20 = i + 6;
            if (i + 6 >= v35)
              goto LABEL_33;
            v19 = *(_QWORD *)(v36 + 8 * v20);
            v21 = i + 6;
            if (!v19)
            {
              while (1)
              {
                v20 = v21 + 1;
                if (__OFADD__(v21, 1))
                  goto LABEL_37;
                if (v20 >= v35)
                  break;
                v19 = *(_QWORD *)(v36 + 8 * v20);
                ++v21;
                if (v19)
                  goto LABEL_27;
              }
LABEL_33:
              sub_94160(v1);
              return (unint64_t)v3;
            }
          }
        }
      }
    }
  }
LABEL_27:
  v6 = (v19 - 1) & v19;
  v17 = __clz(__rbit64(v19)) + (v20 << 6);
  for (i = v20; ; v17 = v16 | (i << 6))
  {
    v22 = 16 * v17;
    v23 = (uint64_t *)(*(_QWORD *)(v1 + 48) + 16 * v17);
    v25 = *v23;
    v24 = v23[1];
    v38 = *(_OWORD *)(*(_QWORD *)(v1 + 56) + v22);
    swift_bridgeObjectRetain(v24);
    v26 = sub_5440(v9);
    v27 = sub_5440(v10);
    swift_dynamicCast(&v39, &v38, v26, v27, 7);
    v28 = v39;
    result = sub_1B94CC(v25, v24);
    v29 = result;
    if ((v30 & 1) != 0)
    {
      v37 = v6;
      v11 = v1;
      v12 = i;
      v13 = v10;
      v14 = v9;
      v15 = (uint64_t *)(v3[6] + 16 * result);
      result = swift_bridgeObjectRelease(v15[1]);
      *v15 = v25;
      v15[1] = v24;
      v9 = v14;
      v10 = v13;
      i = v12;
      v1 = v11;
      v6 = v37;
      *(_QWORD *)(v3[7] + 8 * v29) = v28;
      if (!v37)
        goto LABEL_11;
      goto LABEL_10;
    }
    if (v3[2] >= v3[3])
      break;
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v31 = (uint64_t *)(v3[6] + 16 * result);
    *v31 = v25;
    v31[1] = v24;
    *(_QWORD *)(v3[7] + 8 * result) = v28;
    v32 = v3[2];
    v33 = __OFADD__(v32, 1);
    v34 = v32 + 1;
    if (v33)
      goto LABEL_35;
    v3[2] = v34;
    if (!v6)
      goto LABEL_11;
LABEL_10:
    v16 = __clz(__rbit64(v6));
    v6 &= v6 - 1;
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_10A398@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __int128 v3;

  v2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)a2 = *(_QWORD *)a1;
  v3 = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 24) = v2;
  return swift_bridgeObjectRetain(v3);
}

void sub_10A3B8(uint64_t a1, uint64_t a2, uint64_t a3, char a4, _QWORD *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  char v17;
  unint64_t v18;
  uint64_t v19;
  _BOOL8 v20;
  uint64_t v21;
  char v22;
  unint64_t v23;
  char v24;
  _QWORD *v25;
  uint64_t *v26;
  _QWORD *v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  unint64_t v44;
  char v45;
  uint64_t v46;
  _BOOL8 v47;
  uint64_t v48;
  char v49;
  char v50;
  _QWORD *v51;
  uint64_t *v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  __int128 v57;
  __int128 v58;

  swift_bridgeObjectRetain(a1);
  swift_retain(a3);
  v9 = sub_10A6D0();
  if (!v10)
    goto LABEL_23;
  v13 = v9;
  v14 = v10;
  v15 = v12;
  v56 = v11;
  v16 = (_QWORD *)*a5;
  v18 = sub_1B94CC(v9, v10);
  v19 = v16[2];
  v20 = (v17 & 1) == 0;
  v21 = v19 + v20;
  if (__OFADD__(v19, v20))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v22 = v17;
  if (v16[3] >= v21)
  {
    if ((a4 & 1) != 0)
    {
      v25 = (_QWORD *)*a5;
      if ((v17 & 1) != 0)
        goto LABEL_9;
    }
    else
    {
      sub_10A880();
      v25 = (_QWORD *)*a5;
      if ((v22 & 1) != 0)
        goto LABEL_9;
    }
LABEL_11:
    v25[(v18 >> 6) + 8] |= 1 << v18;
    v26 = (uint64_t *)(v25[6] + 16 * v18);
    *v26 = v13;
    v26[1] = v14;
    v27 = (_QWORD *)(v25[7] + 16 * v18);
    *v27 = v56;
    v27[1] = v15;
    v28 = v25[2];
    v29 = __OFADD__(v28, 1);
    v30 = v28 + 1;
    if (v29)
    {
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }
    v25[2] = v30;
LABEL_13:
    v31 = sub_10A6D0();
    if (v32)
    {
      v35 = v31;
      v36 = v32;
      v37 = v33;
      v38 = v34;
      do
      {
        v43 = (_QWORD *)*a5;
        v44 = sub_1B94CC(v35, v36);
        v46 = v43[2];
        v47 = (v45 & 1) == 0;
        v29 = __OFADD__(v46, v47);
        v48 = v46 + v47;
        if (v29)
          goto LABEL_24;
        v49 = v45;
        if (v43[3] < v48)
        {
          sub_10AA38(v48, 1);
          v44 = sub_1B94CC(v35, v36);
          if ((v49 & 1) != (v50 & 1))
            goto LABEL_26;
        }
        v51 = (_QWORD *)*a5;
        if ((v49 & 1) != 0)
        {
          v39 = 16 * v44;
          v58 = *(_OWORD *)(v51[7] + 16 * v44);
          swift_bridgeObjectRelease(v36);
          *(_OWORD *)(v51[7] + v39) = v58;
        }
        else
        {
          v51[(v44 >> 6) + 8] |= 1 << v44;
          v52 = (uint64_t *)(v51[6] + 16 * v44);
          *v52 = v35;
          v52[1] = v36;
          v53 = (_QWORD *)(v51[7] + 16 * v44);
          *v53 = v37;
          v53[1] = v38;
          v54 = v51[2];
          v29 = __OFADD__(v54, 1);
          v55 = v54 + 1;
          if (v29)
            goto LABEL_25;
          v51[2] = v55;
        }
        v35 = sub_10A6D0();
        v36 = v40;
        v37 = v41;
        v38 = v42;
      }
      while (v40);
    }
LABEL_23:
    swift_release(a3);
    swift_bridgeObjectRelease(a1);
    sub_94160(a1);
    swift_release(a3);
    return;
  }
  sub_10AA38(v21, a4 & 1);
  v23 = sub_1B94CC(v13, v14);
  if ((v22 & 1) == (v24 & 1))
  {
    v18 = v23;
    v25 = (_QWORD *)*a5;
    if ((v22 & 1) == 0)
      goto LABEL_11;
LABEL_9:
    v57 = *(_OWORD *)(v25[7] + 16 * v18);
    swift_bridgeObjectRelease(v14);
    *(_OWORD *)(v25[7] + 16 * v18) = v57;
    goto LABEL_13;
  }
LABEL_26:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

uint64_t sub_10A6D0()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  int64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  void (*v13)(uint64_t *__return_ptr, _QWORD *);
  __int128 v14;
  uint64_t result;
  int64_t v16;
  int64_t v17;
  uint64_t v18;
  unint64_t v19;
  int64_t v20;
  int64_t v21;
  int64_t v22;
  uint64_t v23;
  _QWORD v24[2];
  __int128 v25;

  v2 = *v1;
  v4 = v1[3];
  v3 = v1[4];
  v5 = v4;
  if (v3)
  {
    v6 = (v3 - 1) & v3;
    v7 = __clz(__rbit64(v3)) | (v4 << 6);
LABEL_3:
    v8 = 16 * v7;
    v10 = *(_QWORD *)(v2 + 48);
    v9 = *(_QWORD *)(v2 + 56);
    v11 = (_QWORD *)(v10 + v8);
    v12 = v11[1];
    v13 = (void (*)(uint64_t *__return_ptr, _QWORD *))v1[5];
    v24[0] = *v11;
    v24[1] = v12;
    v14 = *(_OWORD *)(v9 + v8);
    v1[3] = v5;
    v1[4] = v6;
    v25 = v14;
    swift_bridgeObjectRetain(v12);
    v13(&v23, v24);
    swift_bridgeObjectRelease(v12);
    return v23;
  }
  v16 = v4 + 1;
  if (__OFADD__(v4, 1))
  {
    __break(1u);
LABEL_25:
    v1 = v0;
    goto LABEL_26;
  }
  v17 = (unint64_t)(v1[2] + 64) >> 6;
  if (v16 < v17)
  {
    v18 = v1[1];
    v19 = *(_QWORD *)(v18 + 8 * v16);
    if (v19)
    {
LABEL_7:
      v6 = (v19 - 1) & v19;
      v7 = __clz(__rbit64(v19)) + (v16 << 6);
      v5 = v16;
      goto LABEL_3;
    }
    v20 = v4 + 2;
    v5 = v4 + 1;
    if (v4 + 2 < v17)
    {
      v19 = *(_QWORD *)(v18 + 8 * v20);
      if (v19)
      {
LABEL_10:
        v16 = v20;
        goto LABEL_7;
      }
      v21 = v4 + 3;
      v5 = v4 + 2;
      if (v4 + 3 < v17)
      {
        v19 = *(_QWORD *)(v18 + 8 * v21);
        if (v19)
        {
LABEL_13:
          v16 = v21;
          goto LABEL_7;
        }
        v20 = v4 + 4;
        v5 = v4 + 3;
        if (v4 + 4 < v17)
        {
          v19 = *(_QWORD *)(v18 + 8 * v20);
          if (v19)
            goto LABEL_10;
          v21 = v4 + 5;
          v5 = v4 + 4;
          if (v4 + 5 < v17)
          {
            v19 = *(_QWORD *)(v18 + 8 * v21);
            if (v19)
              goto LABEL_13;
            v16 = v4 + 6;
            v5 = v4 + 5;
            if (v4 + 6 < v17)
            {
              v19 = *(_QWORD *)(v18 + 8 * v16);
              if (v19)
                goto LABEL_7;
              v0 = v1;
              v5 = v17 - 1;
              v22 = v4 + 7;
              while (v17 != v22)
              {
                v19 = *(_QWORD *)(v18 + 8 * v22++);
                if (v19)
                {
                  v16 = v22 - 1;
                  goto LABEL_7;
                }
              }
              goto LABEL_25;
            }
          }
        }
      }
    }
  }
LABEL_26:
  result = 0;
  v1[3] = v5;
  v1[4] = 0;
  return result;
}

void sub_10A880()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  sub_5440(&qword_25E028);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_27:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v22 >= v13)
      goto LABEL_27;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_27;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
      {
        v9 = v22 + 2;
        if (v22 + 2 >= v13)
          goto LABEL_27;
        v23 = *(_QWORD *)(v6 + 8 * v9);
        if (!v23)
        {
          v9 = v22 + 3;
          if (v22 + 3 >= v13)
            goto LABEL_27;
          v23 = *(_QWORD *)(v6 + 8 * v9);
          v24 = v22 + 3;
          if (!v23)
            break;
        }
      }
    }
LABEL_26:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + v16);
    v19 = *v17;
    v18 = v17[1];
    v20 = *(_OWORD *)(*(_QWORD *)(v2 + 56) + v16);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = v19;
    v21[1] = v18;
    *(_OWORD *)(*(_QWORD *)(v4 + 56) + v16) = v20;
    swift_bridgeObjectRetain(v18);
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_27;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_26;
  }
LABEL_29:
  __break(1u);
}

void sub_10AA38(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  Swift::Int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t i;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  _QWORD *v36;
  int64_t v37;
  __int128 v38;
  _QWORD v39[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_5440(&qword_25E028);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (*(_QWORD *)(v5 + 16))
  {
    v9 = 1 << *(_BYTE *)(v5 + 32);
    v35 = v3;
    v36 = (_QWORD *)(v5 + 64);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v37 = (unint64_t)(v9 + 63) >> 6;
    v12 = v7 + 64;
    swift_retain(v5);
    v13 = 0;
    while (1)
    {
      if (v11)
      {
        v21 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v22 = v21 | (v13 << 6);
      }
      else
      {
        v23 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
          return;
        }
        if (v23 >= v37)
          goto LABEL_37;
        v24 = v36[v23];
        ++v13;
        if (!v24)
        {
          v13 = v23 + 1;
          if (v23 + 1 >= v37)
            goto LABEL_37;
          v24 = v36[v13];
          if (!v24)
          {
            v13 = v23 + 2;
            if (v23 + 2 >= v37)
              goto LABEL_37;
            v24 = v36[v13];
            if (!v24)
            {
              v13 = v23 + 3;
              if (v23 + 3 >= v37)
              {
LABEL_37:
                swift_release(v5);
                v3 = v35;
                if ((a2 & 1) != 0)
                {
                  v34 = 1 << *(_BYTE *)(v5 + 32);
                  if (v34 >= 64)
                    bzero(v36, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                  else
                    *v36 = -1 << v34;
                  *(_QWORD *)(v5 + 16) = 0;
                }
                break;
              }
              v24 = v36[v13];
              for (i = v23 + 3; !v24; ++i)
              {
                v13 = i + 1;
                if (__OFADD__(i, 1))
                  goto LABEL_44;
                if (v13 >= v37)
                  goto LABEL_37;
                v24 = v36[v13];
              }
            }
          }
        }
        v11 = (v24 - 1) & v24;
        v22 = __clz(__rbit64(v24)) + (v13 << 6);
      }
      v26 = 16 * v22;
      v27 = (uint64_t *)(*(_QWORD *)(v5 + 48) + v26);
      v29 = *v27;
      v28 = v27[1];
      v38 = *(_OWORD *)(*(_QWORD *)(v5 + 56) + v26);
      if ((a2 & 1) == 0)
        swift_bridgeObjectRetain(v28);
      Hasher.init(_seed:)(v39, *(_QWORD *)(v8 + 40));
      String.hash(into:)(v39, v29, v28);
      v14 = Hasher._finalize()();
      v15 = -1 << *(_BYTE *)(v8 + 32);
      v16 = v14 & ~v15;
      v17 = v16 >> 6;
      if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
      {
        v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v30 = 0;
        v31 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v31 && (v30 & 1) != 0)
          {
            __break(1u);
            goto LABEL_43;
          }
          v32 = v17 == v31;
          if (v17 == v31)
            v17 = 0;
          v30 |= v32;
          v33 = *(_QWORD *)(v12 + 8 * v17);
        }
        while (v33 == -1);
        v18 = __clz(__rbit64(~v33)) + (v17 << 6);
      }
      *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      v19 = 16 * v18;
      v20 = (_QWORD *)(*(_QWORD *)(v8 + 48) + v19);
      *v20 = v29;
      v20[1] = v28;
      *(_OWORD *)(*(_QWORD *)(v8 + 56) + v19) = v38;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  swift_release(v5);
  *v3 = v8;
}

uint64_t FlowAction.init(id:actionMetrics:clickData:destination:origin:sourceViewIdentifer:presentation:shouldInheritFigaroRestriction:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, __int128 *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>, uint64_t a10, uint64_t a11, unsigned __int8 a12)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t);
  uint64_t v28;
  int *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t result;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  __int128 *v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  _BYTE v47[160];

  v45 = a7;
  v46 = a8;
  v41 = a5;
  v44 = a12;
  v43 = a11;
  v42 = a10;
  v18 = type metadata accessor for UUID(0);
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v21 = (char *)&v41 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_167A4(a6, (uint64_t)v47, &qword_263338);
  v23 = UUID.init()(v22);
  v24 = UUID.uuidString.getter(v23);
  v26 = v25;
  v27 = *(void (**)(char *, uint64_t))(v19 + 8);
  v27(v21, v18);
  *a9 = v24;
  a9[1] = v26;
  v28 = type metadata accessor for FlowAction(0);
  v29 = (int *)v28;
  v30 = *(int *)(v28 + 44);
  *((_BYTE *)a9 + v30) = 0;
  if (!a2)
  {
    v31 = UUID.init()(v28);
    a1 = UUID.uuidString.getter(v31);
    a2 = v32;
    v27(v21, v18);
  }
  swift_bridgeObjectRelease(a9[1]);
  *a9 = a1;
  a9[1] = a2;
  v33 = (char *)a9 + v29[5];
  v34 = type metadata accessor for ActionMetrics(0);
  v35 = *(_QWORD *)(v34 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v35 + 16))(v33, a3, v34);
  sub_B3D0(a4, (uint64_t)a9 + v29[6], &qword_25E828);
  sub_AC68(v41, (uint64_t)a9 + v29[7]);
  sub_B414(a4, &qword_25E828);
  (*(void (**)(uint64_t, uint64_t))(v35 + 8))(a3, v34);
  result = sub_167A4((uint64_t)v47, (uint64_t)a9 + v29[8], &qword_263338);
  v37 = (uint64_t *)((char *)a9 + v29[9]);
  v38 = v46;
  *v37 = v45;
  v37[1] = v38;
  v39 = (uint64_t *)((char *)a9 + v29[10]);
  v40 = v43;
  *v39 = v42;
  v39[1] = v40;
  *((_BYTE *)a9 + v30) = v44 & 1;
  return result;
}

uint64_t FlowAction.actionMetrics.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for FlowAction(0) + 20);
  v4 = type metadata accessor for ActionMetrics(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t FlowAction.clickData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for FlowAction(0);
  return sub_B3D0(v1 + *(int *)(v3 + 24), a1, &qword_25E828);
}

uint64_t FlowAction.destination.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  __int128 v5[2];

  v3 = type metadata accessor for FlowAction(0);
  sub_B3D0(v1 + *(int *)(v3 + 28), (uint64_t)v5, &qword_265C40);
  return sub_AC68(v5, a1);
}

uint64_t sub_10B040@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  __int128 v6[2];

  v4 = type metadata accessor for FlowAction(0);
  sub_B3D0(a1 + *(int *)(v4 + 28), (uint64_t)v6, &qword_265C40);
  return sub_AC68(v6, a2);
}

uint64_t sub_10B094(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  __int128 v5[2];

  sub_BD00(a1, (uint64_t)v5);
  v3 = (_QWORD *)(a2 + *(int *)(type metadata accessor for FlowAction(0) + 28));
  _s7BooksUI13AnyPagedFrameVwxx_0(v3);
  return sub_AC68(v5, (uint64_t)v3);
}

uint64_t FlowAction.destination.setter(__int128 *a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)(v1 + *(int *)(type metadata accessor for FlowAction(0) + 28));
  _s7BooksUI13AnyPagedFrameVwxx_0(v3);
  return sub_AC68(a1, (uint64_t)v3);
}

double (*FlowAction.destination.modify())(double)
{
  type metadata accessor for FlowAction(0);
  return KeyedEncodingContainer.encode<A>(_:forKey:);
}

uint64_t FlowAction.origin.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[152];

  v3 = type metadata accessor for FlowAction(0);
  sub_167A4(v1 + *(int *)(v3 + 32), (uint64_t)v5, &qword_263338);
  sub_167A4((uint64_t)v5, a1, &qword_263338);
  return sub_10BDD0((uint64_t)v5, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_10BCEC);
}

uint64_t FlowAction.sourceViewIdentifier.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for FlowAction(0) + 36));
  v2 = *v1;
  swift_bridgeObjectRetain(v1[1]);
  return v2;
}

uint64_t FlowAction.presentation.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for FlowAction(0) + 40));
  v2 = *v1;
  swift_bridgeObjectRetain(v1[1]);
  return v2;
}

uint64_t FlowAction.shouldInheritFigaroRestriction.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for FlowAction(0) + 44));
}

uint64_t FlowAction.shouldInheritFigaroRestriction.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for FlowAction(0);
  *(_BYTE *)(v1 + *(int *)(result + 44)) = a1;
  return result;
}

double (*FlowAction.shouldInheritFigaroRestriction.modify())(double)
{
  type metadata accessor for FlowAction(0);
  return KeyedEncodingContainer.encode<A>(_:forKey:);
}

uint64_t sub_10B29C(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10B2C4 + 4 * a4[a1]))(25705, 0xE200000000000000);
}

uint64_t sub_10B2C4()
{
  return 0x654D6E6F69746361;
}

uint64_t sub_10B2E8()
{
  return 0x7461446B63696C63;
}

uint64_t sub_10B304()
{
  return 0x74616E6974736564;
}

uint64_t sub_10B324()
{
  return 0x6E696769726FLL;
}

unint64_t sub_10B338()
{
  return 0xD000000000000014;
}

uint64_t sub_10B354()
{
  return 0x61746E6573657270;
}

unint64_t sub_10B374()
{
  return 0xD00000000000001ELL;
}

uint64_t sub_10B398()
{
  unsigned __int8 *v0;

  return sub_10B29C(*v0);
}

uint64_t sub_10B3A0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10D370(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10B3C4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10BD8C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10B3EC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10BD8C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t FlowAction.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(_QWORD, _QWORD);
  uint64_t v21;
  uint64_t v22;
  void (*v23)(_QWORD, _QWORD);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  void (*v29)(_QWORD, _QWORD);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  _QWORD *v45;
  char *v46;
  int *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  __int128 v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  _QWORD *v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  void (*v78)(_QWORD, _QWORD);
  int *v79;
  char v80;
  _QWORD v81[2];
  _BYTE v82[151];
  char v83;
  _OWORD v84[2];
  uint64_t v85;
  _QWORD *v86;

  v86 = a1;
  v69 = a2;
  v2 = sub_5440(&qword_25E828);
  __chkstk_darwin(v2);
  v70 = (char *)&v68 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for ActionMetrics(0);
  v74 = *(_QWORD *)(v4 - 8);
  v75 = v4;
  __chkstk_darwin(v4);
  v71 = (uint64_t *)((char *)&v68 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v76 = sub_5440(&qword_265C48);
  v72 = *(_QWORD *)(v76 - 8);
  __chkstk_darwin(v76);
  v7 = (char *)&v68 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v68 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for FlowAction(0);
  v13 = __chkstk_darwin(v12);
  v15 = (uint64_t *)((char *)&v68 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16 = UUID.init()(v13);
  v17 = UUID.uuidString.getter(v16);
  v19 = v18;
  v20 = *(void (**)(_QWORD, _QWORD))(v9 + 8);
  v21 = v8;
  v22 = v8;
  v23 = v20;
  v20(v11, v22);
  *v15 = v17;
  v15[1] = v19;
  v79 = (int *)v12;
  v24 = *(int *)(v12 + 44);
  v77 = v15;
  *((_BYTE *)v15 + v24) = 0;
  v25 = v24;
  v26 = v86[3];
  v27 = v86[4];
  sub_5480(v86, v26);
  v28 = sub_10BD8C();
  v73 = v7;
  v29 = v78;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for FlowAction.CodingKeys, &type metadata for FlowAction.CodingKeys, v28, v26, v27);
  if (v29)
  {
    v33 = v77;
    _s7BooksUI13AnyPagedFrameVwxx_0(v86);
    return swift_bridgeObjectRelease(v33[1]);
  }
  else
  {
    v78 = v23;
    v82[0] = 0;
    v30 = sub_5440(&qword_265C58);
    v31 = sub_7FD8(&qword_265C60, &qword_265C58, (uint64_t)&protocol conformance descriptor for _DecodeDefault_Wrapper<A>);
    v32 = KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v30, v82, v76, v30, v31);
    v35 = v76;
    v36 = *((_QWORD *)&v84[0] + 1);
    v68 = v25;
    if (*((_QWORD *)&v84[0] + 1))
    {
      v37 = *(_QWORD *)&v84[0];
    }
    else
    {
      v38 = UUID.init()(v32);
      v39 = UUID.uuidString.getter(v38);
      v36 = v40;
      v41 = v11;
      v37 = v39;
      v78(v41, v21);
      swift_bridgeObjectRelease(*((_QWORD *)&v84[0] + 1));
    }
    v42 = v75;
    v43 = (char *)v77;
    swift_bridgeObjectRelease(v77[1]);
    *(_QWORD *)v43 = v37;
    *((_QWORD *)v43 + 1) = v36;
    LOBYTE(v84[0]) = 1;
    v44 = sub_6FD0(&qword_2634C0, (uint64_t (*)(uint64_t))&type metadata accessor for ActionMetrics, (uint64_t)&protocol conformance descriptor for ActionMetrics);
    v45 = v71;
    v46 = v73;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v71, v42, v84, v35, v42, v44);
    v47 = v79;
    (*(void (**)(char *, _QWORD *, uint64_t))(v74 + 32))(&v43[v79[5]], v45, v42);
    v48 = type metadata accessor for ClickData(0);
    LOBYTE(v84[0]) = 2;
    v49 = sub_6FD0(&qword_265020, (uint64_t (*)(uint64_t))&type metadata accessor for ClickData, (uint64_t)&protocol conformance descriptor for ClickData);
    v50 = v35;
    v51 = (uint64_t)v70;
    v52 = v50;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v48, v84, v50, v48, v49);
    v53 = v72;
    sub_167A4(v51, (uint64_t)&v43[v47[6]], &qword_25E828);
    v54 = sub_5440(&qword_265C40);
    v82[0] = 3;
    v55 = sub_7FD8(&qword_265C68, &qword_265C40, (uint64_t)&protocol conformance descriptor for CodeByKind<A>);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v84, v54, v82, v52, v54, v55);
    v56 = &v43[v47[7]];
    v57 = v84[1];
    *(_OWORD *)v56 = v84[0];
    *((_OWORD *)v56 + 1) = v57;
    *((_QWORD *)v56 + 4) = v85;
    v83 = 4;
    v58 = sub_B1BE4();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&type metadata for ActionOrigin, &v83, v52, &type metadata for ActionOrigin, v58);
    sub_167A4((uint64_t)v84, (uint64_t)v82, &qword_263338);
    sub_167A4((uint64_t)v82, (uint64_t)&v43[v47[8]], &qword_263338);
    LOBYTE(v81[0]) = 5;
    v59 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v81, v52);
    v60 = (uint64_t *)&v43[v47[9]];
    *v60 = v59;
    v60[1] = v61;
    v80 = 6;
    v62 = sub_10BED4();
    KeyedDecodingContainer.decode<A>(_:forKey:)(v81, &type metadata for FlowActionPresentation, &v80, v52, &type metadata for FlowActionPresentation, v62);
    v63 = v81[1];
    v64 = &v43[v47[10]];
    *(_QWORD *)v64 = v81[0];
    *((_QWORD *)v64 + 1) = v63;
    LOBYTE(v81[0]) = 7;
    v65 = sub_5440(&qword_265C78);
    v66 = sub_7FD8(&qword_265C80, &qword_265C78, (uint64_t)&protocol conformance descriptor for _DecodeDefault_Wrapper<A>);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v65, v81, v52, v65, v66);
    LOBYTE(v65) = v80 & 1;
    (*(void (**)(char *, uint64_t))(v53 + 8))(v46, v52);
    v67 = v69;
    v43[v68] = v65;
    sub_10BF18((uint64_t)v43, v67);
    _s7BooksUI13AnyPagedFrameVwxx_0(v86);
    return sub_10BF5C((uint64_t)v43);
  }
}

uint64_t sub_10BBF8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __int128 v5[2];

  sub_B3D0(v2 + *(int *)(a1 + 28), (uint64_t)v5, &qword_265C40);
  return sub_AC68(v5, a2);
}

uint64_t sub_10BC40(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v2 = (uint64_t *)(v1 + *(int *)(a1 + 40));
  v3 = *v2;
  swift_bridgeObjectRetain(v2[1]);
  return v3;
}

uint64_t sub_10BC74@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_B3D0(v2 + *(int *)(a1 + 24), a2, &qword_25E828);
}

uint64_t sub_10BC9C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return FlowAction.init(from:)(a1, a2);
}

uint64_t type metadata accessor for FlowAction(uint64_t a1)
{
  uint64_t result;

  result = qword_265CE8;
  if (!qword_265CE8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for FlowAction);
  return result;
}

uint64_t sub_10BCEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t result;

  if (a2 != 1)
  {
    swift_bridgeObjectRetain(a18);
    swift_bridgeObjectRetain(a2);
    swift_bridgeObjectRetain(a4);
    swift_bridgeObjectRetain(a6);
    swift_bridgeObjectRetain(a8);
    swift_bridgeObjectRetain(a10);
    swift_bridgeObjectRetain(a12);
    swift_bridgeObjectRetain(a14);
    return swift_bridgeObjectRetain(a16);
  }
  return result;
}

unint64_t sub_10BD8C()
{
  unint64_t result;

  result = qword_265C50;
  if (!qword_265C50)
  {
    result = swift_getWitnessTable(&unk_1ECCAC, &type metadata for FlowAction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_265C50);
  }
  return result;
}

uint64_t sub_10BDD0(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))
{
  char v4;

  v4 = *(_BYTE *)(a1 + 144);
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), v4);
  return a1;
}

uint64_t sub_10BE34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t result;

  if (a2 != 1)
  {
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(a4);
    swift_bridgeObjectRelease(a6);
    swift_bridgeObjectRelease(a8);
    swift_bridgeObjectRelease(a10);
    swift_bridgeObjectRelease(a12);
    swift_bridgeObjectRelease(a14);
    swift_bridgeObjectRelease(a16);
    return swift_bridgeObjectRelease(a18);
  }
  return result;
}

unint64_t sub_10BED4()
{
  unint64_t result;

  result = qword_265C70;
  if (!qword_265C70)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for FlowActionPresentation, &type metadata for FlowActionPresentation);
    atomic_store(result, (unint64_t *)&qword_265C70);
  }
  return result;
}

uint64_t sub_10BF18(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for FlowAction(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10BF5C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for FlowAction(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10BF98()
{
  return sub_6FD0(&qword_265C38, type metadata accessor for FlowAction, (uint64_t)&protocol conformance descriptor for FlowAction);
}

uint64_t sub_10BFC4(uint64_t a1)
{
  uint64_t result;

  result = sub_6FD0(&qword_265C38, type metadata accessor for FlowAction, (uint64_t)&protocol conformance descriptor for FlowAction);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_10C000(uint64_t a1)
{
  uint64_t result;

  result = sub_6FD0(&qword_265C88, type metadata accessor for FlowAction, (uint64_t)&protocol conformance descriptor for FlowAction);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_10C03C@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  v3 = a1[1];
  *a2 = v2;
  a2[1] = v3;
  return swift_bridgeObjectRetain(v3);
}

uint64_t sub_10C048(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = *a1;
  v3 = a1[1];
  v5 = a2[1];
  swift_bridgeObjectRetain(v3);
  result = swift_bridgeObjectRelease(v5);
  *a2 = v4;
  a2[1] = v3;
  return result;
}

uint64_t sub_10C090@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = type metadata accessor for FlowAction(0);
  *a2 = *(_BYTE *)(a1 + *(int *)(result + 44));
  return result;
}

uint64_t sub_10C0C4(char *a1, uint64_t a2)
{
  char v3;
  uint64_t result;

  v3 = *a1;
  result = type metadata accessor for FlowAction(0);
  *(_BYTE *)(a2 + *(int *)(result + 44)) = v3;
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for FlowAction(_QWORD *a1, _QWORD *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v46;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v19 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v19);
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for ActionMetrics(0);
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain(v7);
    v12(v9, v10, v11);
    v13 = a3[6];
    v14 = (char *)v4 + v13;
    v15 = (char *)a2 + v13;
    v16 = type metadata accessor for ClickData(0);
    v17 = *(_QWORD *)(v16 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
    {
      v18 = sub_5440(&qword_25E828);
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v14, v15, v16);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
    }
    v20 = a3[7];
    v21 = *(_OWORD *)((char *)a2 + v20 + 24);
    *(_OWORD *)((char *)v4 + v20 + 24) = v21;
    (**(void (***)(void))(v21 - 8))();
    v22 = a3[8];
    v23 = (char *)v4 + v22;
    v24 = (char *)a2 + v22;
    v25 = *((_QWORD *)v24 + 1);
    if (v25 == 1)
    {
      v26 = *((_OWORD *)v24 + 7);
      *((_OWORD *)v23 + 6) = *((_OWORD *)v24 + 6);
      *((_OWORD *)v23 + 7) = v26;
      *((_OWORD *)v23 + 8) = *((_OWORD *)v24 + 8);
      v23[144] = v24[144];
      v27 = *((_OWORD *)v24 + 3);
      *((_OWORD *)v23 + 2) = *((_OWORD *)v24 + 2);
      *((_OWORD *)v23 + 3) = v27;
      v28 = *((_OWORD *)v24 + 5);
      *((_OWORD *)v23 + 4) = *((_OWORD *)v24 + 4);
      *((_OWORD *)v23 + 5) = v28;
      v29 = *((_OWORD *)v24 + 1);
      *(_OWORD *)v23 = *(_OWORD *)v24;
      *((_OWORD *)v23 + 1) = v29;
    }
    else
    {
      *(_QWORD *)v23 = *(_QWORD *)v24;
      *((_QWORD *)v23 + 1) = v25;
      v30 = *((_QWORD *)v24 + 3);
      *((_QWORD *)v23 + 2) = *((_QWORD *)v24 + 2);
      *((_QWORD *)v23 + 3) = v30;
      v31 = *((_QWORD *)v24 + 5);
      *((_QWORD *)v23 + 4) = *((_QWORD *)v24 + 4);
      *((_QWORD *)v23 + 5) = v31;
      v32 = *((_QWORD *)v24 + 7);
      *((_QWORD *)v23 + 6) = *((_QWORD *)v24 + 6);
      *((_QWORD *)v23 + 7) = v32;
      v33 = *((_QWORD *)v24 + 9);
      *((_QWORD *)v23 + 8) = *((_QWORD *)v24 + 8);
      *((_QWORD *)v23 + 9) = v33;
      v34 = *((_QWORD *)v24 + 11);
      *((_QWORD *)v23 + 10) = *((_QWORD *)v24 + 10);
      *((_QWORD *)v23 + 11) = v34;
      v35 = *((_QWORD *)v24 + 13);
      *((_QWORD *)v23 + 12) = *((_QWORD *)v24 + 12);
      *((_QWORD *)v23 + 13) = v35;
      v36 = *((_QWORD *)v24 + 15);
      *((_QWORD *)v23 + 14) = *((_QWORD *)v24 + 14);
      *((_QWORD *)v23 + 15) = v36;
      v46 = *((_QWORD *)v24 + 17);
      *((_QWORD *)v23 + 16) = *((_QWORD *)v24 + 16);
      *((_QWORD *)v23 + 17) = v46;
      v23[144] = v24[144];
      swift_bridgeObjectRetain(v25);
      swift_bridgeObjectRetain(v30);
      swift_bridgeObjectRetain(v31);
      swift_bridgeObjectRetain(v32);
      swift_bridgeObjectRetain(v33);
      swift_bridgeObjectRetain(v34);
      swift_bridgeObjectRetain(v35);
      swift_bridgeObjectRetain(v36);
      swift_bridgeObjectRetain(v46);
    }
    v37 = a3[9];
    v38 = a3[10];
    v39 = (_QWORD *)((char *)v4 + v37);
    v40 = (_QWORD *)((char *)a2 + v37);
    v41 = v40[1];
    *v39 = *v40;
    v39[1] = v41;
    v42 = (_QWORD *)((char *)v4 + v38);
    v43 = (_QWORD *)((char *)a2 + v38);
    v44 = v43[1];
    *v42 = *v43;
    v42[1] = v44;
    *((_BYTE *)v4 + a3[11]) = *((_BYTE *)a2 + a3[11]);
    swift_bridgeObjectRetain(v41);
    swift_bridgeObjectRetain(v44);
  }
  return v4;
}

uint64_t destroy for FlowAction(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  v4 = a1 + a2[5];
  v5 = type metadata accessor for ActionMetrics(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v6 = a1 + a2[6];
  v7 = type metadata accessor for ClickData(0);
  v8 = *(_QWORD *)(v7 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)(a1 + a2[7]));
  v9 = (_QWORD *)(a1 + a2[8]);
  v10 = v9[1];
  if (v10 != 1)
  {
    swift_bridgeObjectRelease(v10);
    swift_bridgeObjectRelease(v9[3]);
    swift_bridgeObjectRelease(v9[5]);
    swift_bridgeObjectRelease(v9[7]);
    swift_bridgeObjectRelease(v9[9]);
    swift_bridgeObjectRelease(v9[11]);
    swift_bridgeObjectRelease(v9[13]);
    swift_bridgeObjectRelease(v9[15]);
    swift_bridgeObjectRelease(v9[17]);
  }
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[9] + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[10] + 8));
}

_QWORD *initializeWithCopy for FlowAction(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v44;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for ActionMetrics(0);
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  swift_bridgeObjectRetain(v6);
  v11(v8, v9, v10);
  v12 = a3[6];
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = type metadata accessor for ClickData(0);
  v16 = *(_QWORD *)(v15 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
  {
    v17 = sub_5440(&qword_25E828);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v13, v14, v15);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  v18 = a3[7];
  v19 = *(_OWORD *)((char *)a2 + v18 + 24);
  *(_OWORD *)((char *)a1 + v18 + 24) = v19;
  (**(void (***)(void))(v19 - 8))();
  v20 = a3[8];
  v21 = (char *)a1 + v20;
  v22 = (char *)a2 + v20;
  v23 = *((_QWORD *)v22 + 1);
  if (v23 == 1)
  {
    v24 = *((_OWORD *)v22 + 7);
    *((_OWORD *)v21 + 6) = *((_OWORD *)v22 + 6);
    *((_OWORD *)v21 + 7) = v24;
    *((_OWORD *)v21 + 8) = *((_OWORD *)v22 + 8);
    v21[144] = v22[144];
    v25 = *((_OWORD *)v22 + 3);
    *((_OWORD *)v21 + 2) = *((_OWORD *)v22 + 2);
    *((_OWORD *)v21 + 3) = v25;
    v26 = *((_OWORD *)v22 + 5);
    *((_OWORD *)v21 + 4) = *((_OWORD *)v22 + 4);
    *((_OWORD *)v21 + 5) = v26;
    v27 = *((_OWORD *)v22 + 1);
    *(_OWORD *)v21 = *(_OWORD *)v22;
    *((_OWORD *)v21 + 1) = v27;
  }
  else
  {
    *(_QWORD *)v21 = *(_QWORD *)v22;
    *((_QWORD *)v21 + 1) = v23;
    v28 = *((_QWORD *)v22 + 3);
    *((_QWORD *)v21 + 2) = *((_QWORD *)v22 + 2);
    *((_QWORD *)v21 + 3) = v28;
    v29 = *((_QWORD *)v22 + 5);
    *((_QWORD *)v21 + 4) = *((_QWORD *)v22 + 4);
    *((_QWORD *)v21 + 5) = v29;
    v30 = *((_QWORD *)v22 + 7);
    *((_QWORD *)v21 + 6) = *((_QWORD *)v22 + 6);
    *((_QWORD *)v21 + 7) = v30;
    v31 = *((_QWORD *)v22 + 9);
    *((_QWORD *)v21 + 8) = *((_QWORD *)v22 + 8);
    *((_QWORD *)v21 + 9) = v31;
    v32 = *((_QWORD *)v22 + 11);
    *((_QWORD *)v21 + 10) = *((_QWORD *)v22 + 10);
    *((_QWORD *)v21 + 11) = v32;
    v33 = *((_QWORD *)v22 + 13);
    *((_QWORD *)v21 + 12) = *((_QWORD *)v22 + 12);
    *((_QWORD *)v21 + 13) = v33;
    v34 = *((_QWORD *)v22 + 15);
    *((_QWORD *)v21 + 14) = *((_QWORD *)v22 + 14);
    *((_QWORD *)v21 + 15) = v34;
    v44 = *((_QWORD *)v22 + 17);
    *((_QWORD *)v21 + 16) = *((_QWORD *)v22 + 16);
    *((_QWORD *)v21 + 17) = v44;
    v21[144] = v22[144];
    swift_bridgeObjectRetain(v23);
    swift_bridgeObjectRetain(v28);
    swift_bridgeObjectRetain(v29);
    swift_bridgeObjectRetain(v30);
    swift_bridgeObjectRetain(v31);
    swift_bridgeObjectRetain(v32);
    swift_bridgeObjectRetain(v33);
    swift_bridgeObjectRetain(v34);
    swift_bridgeObjectRetain(v44);
  }
  v35 = a3[9];
  v36 = a3[10];
  v37 = (_QWORD *)((char *)a1 + v35);
  v38 = (_QWORD *)((char *)a2 + v35);
  v39 = v38[1];
  *v37 = *v38;
  v37[1] = v39;
  v40 = (_QWORD *)((char *)a1 + v36);
  v41 = (_QWORD *)((char *)a2 + v36);
  v42 = v41[1];
  *v40 = *v41;
  v40[1] = v42;
  *((_BYTE *)a1 + a3[11]) = *((_BYTE *)a2 + a3[11]);
  swift_bridgeObjectRetain(v39);
  swift_bridgeObjectRetain(v42);
  return a1;
}

_QWORD *assignWithCopy for FlowAction(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(char *, uint64_t, uint64_t);
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;

  *a1 = *a2;
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = a3[5];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for ActionMetrics(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 24))(v9, v10, v11);
  v12 = a3[6];
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = type metadata accessor for ClickData(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  v18 = v17(v13, 1, v15);
  v19 = v17(v14, 1, v15);
  if (v18)
  {
    if (!v19)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v13, v14, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v19)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v13, v15);
LABEL_6:
    v20 = sub_5440(&qword_25E828);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v16 + 24))(v13, v14, v15);
LABEL_7:
  sub_142F8((_QWORD *)((char *)a1 + a3[7]), (_QWORD *)((char *)a2 + a3[7]));
  v21 = a3[8];
  v22 = (char *)a1 + v21;
  v23 = (char *)a2 + v21;
  v24 = *(_QWORD *)((char *)a1 + v21 + 8);
  v25 = *(_QWORD *)((char *)a2 + v21 + 8);
  if (v24 == 1)
  {
    if (v25 == 1)
    {
      v26 = *((_OWORD *)v23 + 1);
      *(_OWORD *)v22 = *(_OWORD *)v23;
      *((_OWORD *)v22 + 1) = v26;
      v27 = *((_OWORD *)v23 + 2);
      v28 = *((_OWORD *)v23 + 3);
      v29 = *((_OWORD *)v23 + 5);
      *((_OWORD *)v22 + 4) = *((_OWORD *)v23 + 4);
      *((_OWORD *)v22 + 5) = v29;
      *((_OWORD *)v22 + 2) = v27;
      *((_OWORD *)v22 + 3) = v28;
      v30 = *((_OWORD *)v23 + 6);
      v31 = *((_OWORD *)v23 + 7);
      v32 = *((_OWORD *)v23 + 8);
      v22[144] = v23[144];
      *((_OWORD *)v22 + 7) = v31;
      *((_OWORD *)v22 + 8) = v32;
      *((_OWORD *)v22 + 6) = v30;
    }
    else
    {
      *(_QWORD *)v22 = *(_QWORD *)v23;
      v40 = *((_QWORD *)v23 + 1);
      *((_QWORD *)v22 + 1) = v40;
      *((_QWORD *)v22 + 2) = *((_QWORD *)v23 + 2);
      v41 = *((_QWORD *)v23 + 3);
      *((_QWORD *)v22 + 3) = v41;
      *((_QWORD *)v22 + 4) = *((_QWORD *)v23 + 4);
      v76 = *((_QWORD *)v23 + 5);
      *((_QWORD *)v22 + 5) = v76;
      *((_QWORD *)v22 + 6) = *((_QWORD *)v23 + 6);
      v42 = *((_QWORD *)v23 + 7);
      *((_QWORD *)v22 + 7) = v42;
      *((_QWORD *)v22 + 8) = *((_QWORD *)v23 + 8);
      v43 = *((_QWORD *)v23 + 9);
      *((_QWORD *)v22 + 9) = v43;
      *((_QWORD *)v22 + 10) = *((_QWORD *)v23 + 10);
      v44 = *((_QWORD *)v23 + 11);
      *((_QWORD *)v22 + 11) = v44;
      *((_QWORD *)v22 + 12) = *((_QWORD *)v23 + 12);
      v45 = *((_QWORD *)v23 + 13);
      *((_QWORD *)v22 + 13) = v45;
      *((_QWORD *)v22 + 14) = *((_QWORD *)v23 + 14);
      v75 = *((_QWORD *)v23 + 15);
      *((_QWORD *)v22 + 15) = v75;
      *((_QWORD *)v22 + 16) = *((_QWORD *)v23 + 16);
      v74 = *((_QWORD *)v23 + 17);
      *((_QWORD *)v22 + 17) = v74;
      v22[144] = v23[144];
      swift_bridgeObjectRetain(v40);
      swift_bridgeObjectRetain(v41);
      swift_bridgeObjectRetain(v76);
      swift_bridgeObjectRetain(v42);
      swift_bridgeObjectRetain(v43);
      swift_bridgeObjectRetain(v44);
      swift_bridgeObjectRetain(v45);
      swift_bridgeObjectRetain(v75);
      swift_bridgeObjectRetain(v74);
    }
  }
  else if (v25 == 1)
  {
    sub_10CB70(v22);
    v33 = *((_OWORD *)v23 + 1);
    *(_OWORD *)v22 = *(_OWORD *)v23;
    *((_OWORD *)v22 + 1) = v33;
    v34 = *((_OWORD *)v23 + 5);
    v36 = *((_OWORD *)v23 + 2);
    v35 = *((_OWORD *)v23 + 3);
    *((_OWORD *)v22 + 4) = *((_OWORD *)v23 + 4);
    *((_OWORD *)v22 + 5) = v34;
    *((_OWORD *)v22 + 2) = v36;
    *((_OWORD *)v22 + 3) = v35;
    v38 = *((_OWORD *)v23 + 7);
    v37 = *((_OWORD *)v23 + 8);
    v39 = *((_OWORD *)v23 + 6);
    v22[144] = v23[144];
    *((_OWORD *)v22 + 7) = v38;
    *((_OWORD *)v22 + 8) = v37;
    *((_OWORD *)v22 + 6) = v39;
  }
  else
  {
    *(_QWORD *)v22 = *(_QWORD *)v23;
    v46 = *((_QWORD *)v23 + 1);
    *((_QWORD *)v22 + 1) = v46;
    swift_bridgeObjectRetain(v46);
    swift_bridgeObjectRelease(v24);
    *((_QWORD *)v22 + 2) = *((_QWORD *)v23 + 2);
    v47 = *((_QWORD *)v23 + 3);
    v48 = *((_QWORD *)v22 + 3);
    *((_QWORD *)v22 + 3) = v47;
    swift_bridgeObjectRetain(v47);
    swift_bridgeObjectRelease(v48);
    *((_QWORD *)v22 + 4) = *((_QWORD *)v23 + 4);
    v49 = *((_QWORD *)v23 + 5);
    v50 = *((_QWORD *)v22 + 5);
    *((_QWORD *)v22 + 5) = v49;
    swift_bridgeObjectRetain(v49);
    swift_bridgeObjectRelease(v50);
    *((_QWORD *)v22 + 6) = *((_QWORD *)v23 + 6);
    v51 = *((_QWORD *)v23 + 7);
    v52 = *((_QWORD *)v22 + 7);
    *((_QWORD *)v22 + 7) = v51;
    swift_bridgeObjectRetain(v51);
    swift_bridgeObjectRelease(v52);
    *((_QWORD *)v22 + 8) = *((_QWORD *)v23 + 8);
    v53 = *((_QWORD *)v23 + 9);
    v54 = *((_QWORD *)v22 + 9);
    *((_QWORD *)v22 + 9) = v53;
    swift_bridgeObjectRetain(v53);
    swift_bridgeObjectRelease(v54);
    *((_QWORD *)v22 + 10) = *((_QWORD *)v23 + 10);
    v55 = *((_QWORD *)v23 + 11);
    v56 = *((_QWORD *)v22 + 11);
    *((_QWORD *)v22 + 11) = v55;
    swift_bridgeObjectRetain(v55);
    swift_bridgeObjectRelease(v56);
    *((_QWORD *)v22 + 12) = *((_QWORD *)v23 + 12);
    v57 = *((_QWORD *)v23 + 13);
    v58 = *((_QWORD *)v22 + 13);
    *((_QWORD *)v22 + 13) = v57;
    swift_bridgeObjectRetain(v57);
    swift_bridgeObjectRelease(v58);
    *((_QWORD *)v22 + 14) = *((_QWORD *)v23 + 14);
    v59 = *((_QWORD *)v23 + 15);
    v60 = *((_QWORD *)v22 + 15);
    *((_QWORD *)v22 + 15) = v59;
    swift_bridgeObjectRetain(v59);
    swift_bridgeObjectRelease(v60);
    *((_QWORD *)v22 + 16) = *((_QWORD *)v23 + 16);
    v61 = *((_QWORD *)v23 + 17);
    v62 = *((_QWORD *)v22 + 17);
    *((_QWORD *)v22 + 17) = v61;
    swift_bridgeObjectRetain(v61);
    swift_bridgeObjectRelease(v62);
    v22[144] = v23[144];
  }
  v63 = a3[9];
  v64 = (_QWORD *)((char *)a1 + v63);
  v65 = (_QWORD *)((char *)a2 + v63);
  *v64 = *v65;
  v66 = v65[1];
  v67 = v64[1];
  v64[1] = v66;
  swift_bridgeObjectRetain(v66);
  swift_bridgeObjectRelease(v67);
  v68 = a3[10];
  v69 = (_QWORD *)((char *)a1 + v68);
  v70 = (_QWORD *)((char *)a2 + v68);
  *v69 = *v70;
  v71 = v70[1];
  v72 = v69[1];
  v69[1] = v71;
  swift_bridgeObjectRetain(v71);
  swift_bridgeObjectRelease(v72);
  *((_BYTE *)a1 + a3[11]) = *((_BYTE *)a2 + a3[11]);
  return a1;
}

_QWORD *sub_10CB70(_QWORD *a1)
{
  destroy for ActionOrigin(a1);
  return a1;
}

_OWORD *initializeWithTake for FlowAction(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  __int128 v20;
  char *v21;
  char *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for ActionMetrics(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = a3[6];
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for ClickData(0);
  v14 = *(_QWORD *)(v13 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
  {
    v15 = sub_5440(&qword_25E828);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v12, v13);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
  }
  v16 = a3[7];
  v17 = a3[8];
  v18 = (char *)a1 + v16;
  v19 = (char *)a2 + v16;
  *((_QWORD *)v18 + 4) = *((_QWORD *)v19 + 4);
  v20 = *((_OWORD *)v19 + 1);
  *(_OWORD *)v18 = *(_OWORD *)v19;
  *((_OWORD *)v18 + 1) = v20;
  v21 = (char *)a1 + v17;
  v22 = (char *)a2 + v17;
  v23 = *((_OWORD *)v22 + 1);
  *(_OWORD *)v21 = *(_OWORD *)v22;
  *((_OWORD *)v21 + 1) = v23;
  v24 = *((_OWORD *)v22 + 5);
  *((_OWORD *)v21 + 4) = *((_OWORD *)v22 + 4);
  *((_OWORD *)v21 + 5) = v24;
  v25 = *((_OWORD *)v22 + 3);
  *((_OWORD *)v21 + 2) = *((_OWORD *)v22 + 2);
  *((_OWORD *)v21 + 3) = v25;
  v21[144] = v22[144];
  v26 = *((_OWORD *)v22 + 8);
  v27 = *((_OWORD *)v22 + 6);
  *((_OWORD *)v21 + 7) = *((_OWORD *)v22 + 7);
  *((_OWORD *)v21 + 8) = v26;
  *((_OWORD *)v21 + 6) = v27;
  v28 = a3[10];
  *(_OWORD *)((char *)a1 + a3[9]) = *(_OWORD *)((char *)a2 + a3[9]);
  *(_OWORD *)((char *)a1 + v28) = *(_OWORD *)((char *)a2 + v28);
  *((_BYTE *)a1 + a3[11]) = *((_BYTE *)a2 + a3[11]);
  return a1;
}

_QWORD *assignWithTake for FlowAction(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(char *, uint64_t, uint64_t);
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  __int128 v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v6 = a2[1];
  v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = a3[5];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for ActionMetrics(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  v12 = a3[6];
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = type metadata accessor for ClickData(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  v18 = v17(v13, 1, v15);
  v19 = v17(v14, 1, v15);
  if (v18)
  {
    if (!v19)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v13, v14, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v19)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v13, v15);
LABEL_6:
    v20 = sub_5440(&qword_25E828);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v16 + 40))(v13, v14, v15);
LABEL_7:
  v21 = a3[7];
  v22 = (char *)a1 + v21;
  v23 = (char *)a2 + v21;
  _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)((char *)a1 + v21));
  *((_QWORD *)v22 + 4) = *((_QWORD *)v23 + 4);
  v24 = *((_OWORD *)v23 + 1);
  *(_OWORD *)v22 = *(_OWORD *)v23;
  *((_OWORD *)v22 + 1) = v24;
  v25 = a3[8];
  v26 = (char *)a1 + v25;
  v27 = (char *)a2 + v25;
  v28 = *(_QWORD *)((char *)a1 + v25 + 8);
  if (v28 != 1)
  {
    v29 = *((_QWORD *)v27 + 1);
    if (v29 != 1)
    {
      *(_QWORD *)v26 = *(_QWORD *)v27;
      *((_QWORD *)v26 + 1) = v29;
      swift_bridgeObjectRelease(v28);
      v34 = *((_QWORD *)v27 + 3);
      v35 = *((_QWORD *)v26 + 3);
      *((_QWORD *)v26 + 2) = *((_QWORD *)v27 + 2);
      *((_QWORD *)v26 + 3) = v34;
      swift_bridgeObjectRelease(v35);
      v36 = *((_QWORD *)v27 + 5);
      v37 = *((_QWORD *)v26 + 5);
      *((_QWORD *)v26 + 4) = *((_QWORD *)v27 + 4);
      *((_QWORD *)v26 + 5) = v36;
      swift_bridgeObjectRelease(v37);
      v38 = *((_QWORD *)v27 + 7);
      v39 = *((_QWORD *)v26 + 7);
      *((_QWORD *)v26 + 6) = *((_QWORD *)v27 + 6);
      *((_QWORD *)v26 + 7) = v38;
      swift_bridgeObjectRelease(v39);
      v40 = *((_QWORD *)v27 + 9);
      v41 = *((_QWORD *)v26 + 9);
      *((_QWORD *)v26 + 8) = *((_QWORD *)v27 + 8);
      *((_QWORD *)v26 + 9) = v40;
      swift_bridgeObjectRelease(v41);
      v42 = *((_QWORD *)v27 + 11);
      v43 = *((_QWORD *)v26 + 11);
      *((_QWORD *)v26 + 10) = *((_QWORD *)v27 + 10);
      *((_QWORD *)v26 + 11) = v42;
      swift_bridgeObjectRelease(v43);
      v44 = *((_QWORD *)v27 + 13);
      v45 = *((_QWORD *)v26 + 13);
      *((_QWORD *)v26 + 12) = *((_QWORD *)v27 + 12);
      *((_QWORD *)v26 + 13) = v44;
      swift_bridgeObjectRelease(v45);
      v46 = *((_QWORD *)v27 + 15);
      v47 = *((_QWORD *)v26 + 15);
      *((_QWORD *)v26 + 14) = *((_QWORD *)v27 + 14);
      *((_QWORD *)v26 + 15) = v46;
      swift_bridgeObjectRelease(v47);
      v48 = *((_QWORD *)v27 + 17);
      v49 = *((_QWORD *)v26 + 17);
      *((_QWORD *)v26 + 16) = *((_QWORD *)v27 + 16);
      *((_QWORD *)v26 + 17) = v48;
      swift_bridgeObjectRelease(v49);
      v26[144] = v27[144];
      goto LABEL_12;
    }
    sub_10CB70(v26);
  }
  v30 = *((_OWORD *)v27 + 7);
  *((_OWORD *)v26 + 6) = *((_OWORD *)v27 + 6);
  *((_OWORD *)v26 + 7) = v30;
  *((_OWORD *)v26 + 8) = *((_OWORD *)v27 + 8);
  v26[144] = v27[144];
  v31 = *((_OWORD *)v27 + 3);
  *((_OWORD *)v26 + 2) = *((_OWORD *)v27 + 2);
  *((_OWORD *)v26 + 3) = v31;
  v32 = *((_OWORD *)v27 + 5);
  *((_OWORD *)v26 + 4) = *((_OWORD *)v27 + 4);
  *((_OWORD *)v26 + 5) = v32;
  v33 = *((_OWORD *)v27 + 1);
  *(_OWORD *)v26 = *(_OWORD *)v27;
  *((_OWORD *)v26 + 1) = v33;
LABEL_12:
  v50 = a3[9];
  v51 = (_QWORD *)((char *)a1 + v50);
  v52 = (_QWORD *)((char *)a2 + v50);
  v54 = *v52;
  v53 = v52[1];
  v55 = v51[1];
  *v51 = v54;
  v51[1] = v53;
  swift_bridgeObjectRelease(v55);
  v56 = a3[10];
  v57 = (_QWORD *)((char *)a1 + v56);
  v58 = (_QWORD *)((char *)a2 + v56);
  v60 = *v58;
  v59 = v58[1];
  v61 = v57[1];
  *v57 = v60;
  v57[1] = v59;
  swift_bridgeObjectRelease(v61);
  *((_BYTE *)a1 + a3[11]) = *((_BYTE *)a2 + a3[11]);
  return a1;
}

uint64_t getEnumTagSinglePayload for FlowAction(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10CFC4);
}

uint64_t sub_10CFC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for ActionMetrics(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 20);
    }
    else
    {
      v10 = sub_5440(&qword_25E828);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 24);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for FlowAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10D074);
}

uint64_t sub_10D074(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for ActionMetrics(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 20);
    }
    else
    {
      v10 = sub_5440(&qword_25E828);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 24);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

void sub_10D114(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[8];

  v6[0] = &unk_1ECB70;
  v2 = type metadata accessor for ActionMetrics(319);
  if (v3 <= 0x3F)
  {
    v6[1] = *(_QWORD *)(v2 - 8) + 64;
    sub_F4034(319);
    if (v5 <= 0x3F)
    {
      v6[2] = *(_QWORD *)(v4 - 8) + 64;
      v6[3] = &unk_1ECB88;
      v6[4] = &unk_1ECBA0;
      v6[5] = &unk_1ECBB8;
      v6[6] = &unk_1ECB70;
      v6[7] = &unk_1ECBD0;
      swift_initStructMetadata(a1, 256, 8, v6, a1 + 16);
    }
  }
}

uint64_t storeEnumTagSinglePayload for FlowAction.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_10D218 + 4 * byte_1ECA35[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_10D24C + 4 * byte_1ECA30[v4]))();
}

uint64_t sub_10D24C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10D254(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10D25CLL);
  return result;
}

uint64_t sub_10D268(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10D270);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_10D274(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10D27C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FlowAction.CodingKeys()
{
  return &type metadata for FlowAction.CodingKeys;
}

unint64_t sub_10D29C()
{
  unint64_t result;

  result = qword_265D38;
  if (!qword_265D38)
  {
    result = swift_getWitnessTable(&unk_1ECC84, &type metadata for FlowAction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_265D38);
  }
  return result;
}

unint64_t sub_10D2E4()
{
  unint64_t result;

  result = qword_265D40;
  if (!qword_265D40)
  {
    result = swift_getWitnessTable(&unk_1ECBF4, &type metadata for FlowAction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_265D40);
  }
  return result;
}

unint64_t sub_10D32C()
{
  unint64_t result;

  result = qword_265D48;
  if (!qword_265D48)
  {
    result = swift_getWitnessTable(&unk_1ECC1C, &type metadata for FlowAction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_265D48);
  }
  return result;
}

uint64_t sub_10D370(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char v13;

  if (a1 == 25705 && a2 == 0xE200000000000000)
  {
    v5 = 0xE200000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(25705, 0xE200000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x654D6E6F69746361 && a2 == 0xED00007363697274)
  {
    v7 = 0xED00007363697274;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x654D6E6F69746361, 0xED00007363697274, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x7461446B63696C63 && a2 == 0xE900000000000061)
  {
    v8 = 0xE900000000000061;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7461446B63696C63, 0xE900000000000061, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x74616E6974736564 && a2 == 0xEB000000006E6F69)
  {
    v9 = 0xEB000000006E6F69;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x74616E6974736564, 0xEB000000006E6F69, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_26;
  }
  if (a1 == 0x6E696769726FLL && a2 == 0xE600000000000000)
  {
    v10 = 0xE600000000000000;
LABEL_32:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E696769726FLL, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_32;
  }
  if (a1 == 0xD000000000000014)
  {
    v11 = 0x80000000001FC9C0;
    if (a2 == 0x80000000001FC9C0)
      goto LABEL_37;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014, 0x80000000001FC9C0, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
LABEL_37:
    swift_bridgeObjectRelease(v11);
    return 5;
  }
  if (a1 == 0x61746E6573657270 && a2 == 0xEC0000006E6F6974)
  {
    v12 = 0xEC0000006E6F6974;
LABEL_43:
    swift_bridgeObjectRelease(v12);
    return 6;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x61746E6573657270, 0xEC0000006E6F6974, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
    goto LABEL_43;
  }
  if (a1 == 0xD00000000000001ELL && a2 == 0x80000000001FC9E0)
  {
    swift_bridgeObjectRelease(0x80000000001FC9E0);
    return 7;
  }
  else
  {
    v13 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001ELL, 0x80000000001FC9E0, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v13 & 1) != 0)
      return 7;
    else
      return 8;
  }
}

uint64_t NavigationActionMenuButtonView.init(menuIconKind:menus:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  v5 = *a1;
  v6 = type metadata accessor for NavigationActionMenuButtonView(0);
  v7 = (_QWORD *)(a3 + *(int *)(v6 + 24));
  *v7 = swift_getKeyPath(&unk_1ECD10);
  v8 = sub_5440(&qword_25F1E8);
  swift_storeEnumTagMultiPayload(v7, v8, 0);
  v9 = a3 + *(int *)(v6 + 28);
  result = swift_getKeyPath(&unk_1ECD38);
  *(_QWORD *)v9 = result;
  *(_BYTE *)(v9 + 8) = 0;
  *(_BYTE *)a3 = v5;
  *(_QWORD *)(a3 + 8) = a2;
  return result;
}

uint64_t type metadata accessor for NavigationActionMenuButtonView(uint64_t a1)
{
  return sub_1FE90(a1, qword_265E38, (uint64_t)&nominal type descriptor for NavigationActionMenuButtonView);
}

uint64_t NavigationActionMenuButtonView.body.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v1 = type metadata accessor for NavigationActionMenuButtonView(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 64);
  __chkstk_darwin(v1);
  sub_1E428(v0, (uint64_t)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for NavigationActionMenuButtonView);
  v4 = *(unsigned __int8 *)(v2 + 80);
  v5 = (v4 + 16) & ~v4;
  v6 = swift_allocObject(&unk_252CD8, v5 + v3, v4 | 7);
  sub_21C88((uint64_t)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), v6 + v5, type metadata accessor for NavigationActionMenuButtonView);
  v7 = sub_5440(&qword_265D50);
  v8 = type metadata accessor for _JetLocalizeDefaultWorking(0);
  v9 = type metadata accessor for _JetLocalizeDefaultFailed(0);
  v10 = sub_10F790();
  v11 = sub_6FD0(&qword_25FEE0, (uint64_t (*)(uint64_t))&type metadata accessor for _JetLocalizeDefaultWorking, (uint64_t)&protocol conformance descriptor for _JetLocalizeDefaultWorking);
  v12 = sub_6FD0(&qword_25FEE8, (uint64_t (*)(uint64_t))&type metadata accessor for _JetLocalizeDefaultFailed, (uint64_t)&protocol conformance descriptor for _JetLocalizeDefaultFailed);
  return JetLocalize.init(working:failed:content:)(&j___s18_JetEngine_SwiftUI01_A22LocalizeDefaultWorkingVACycfC, 0, sub_4ED68, 0, sub_10EA64, v6, v7, v8, v9, v10, v11, v12);
}

uint64_t sub_10D910@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  _BYTE *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE *v38;
  _BYTE *v39;
  uint64_t v40;
  char v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  char *v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char v102;
  uint64_t KeyPath;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  char *v115;
  uint64_t OpaqueTypeConformance2;
  char *v117;
  uint64_t v118;
  _BYTE *v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  char *v140;
  uint64_t v141;
  char *v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  _BYTE *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  uint64_t v158;
  uint64_t v159;
  char *v160;
  char *v161;
  char *v162;
  uint64_t v163;
  char *v164;
  uint64_t v165;
  char *v166;
  uint64_t v167;
  uint64_t v168;
  char *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  char *v173;
  uint64_t v174;
  char *v175;
  uint64_t v176;
  uint64_t v177;
  char *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  char *v182;
  char *v183;
  char *v184;
  uint64_t v185;
  char *v186;
  uint64_t v187;
  char *v188;
  uint64_t v189;
  char *v190;
  uint64_t v191;
  uint64_t v192;
  char *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  char *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  unint64_t v206;
  uint64_t v207;

  v198 = a1;
  v203 = a3;
  v202 = type metadata accessor for LiftHoverEffect(0);
  v189 = *(_QWORD *)(v202 - 8);
  __chkstk_darwin(v202);
  v188 = (char *)&v148 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v179 = type metadata accessor for PlainButtonStyle(0);
  v176 = *(_QWORD *)(v179 - 8);
  __chkstk_darwin(v179);
  v175 = (char *)&v148 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v170 = type metadata accessor for ButtonMenuStyle(0);
  v168 = *(_QWORD *)(v170 - 8);
  __chkstk_darwin(v170);
  v166 = (char *)&v148 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v167 = sub_5440(&qword_265DC8);
  v165 = *(_QWORD *)(v167 - 8);
  __chkstk_darwin(v167);
  v164 = (char *)&v148 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v172 = sub_5440(&qword_265DC0);
  v171 = *(_QWORD *)(v172 - 8);
  __chkstk_darwin(v172);
  v169 = (char *)&v148 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v177 = sub_5440(&qword_265DB8);
  v174 = *(_QWORD *)(v177 - 8);
  __chkstk_darwin(v177);
  v173 = (char *)&v148 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v181 = sub_5440(&qword_265F48);
  v180 = *(_QWORD *)(v181 - 8);
  __chkstk_darwin(v181);
  v178 = (char *)&v148 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v197 = sub_5440(&qword_265DA8);
  __chkstk_darwin(v197);
  v182 = (char *)&v148 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v200 = sub_5440(&qword_265DA0);
  v185 = *(_QWORD *)(v200 - 8);
  __chkstk_darwin(v200);
  v184 = (char *)&v148 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v201 = sub_5440(&qword_265F50);
  v187 = *(_QWORD *)(v201 - 8);
  v13 = __chkstk_darwin(v201);
  v183 = (char *)&v148 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v186 = (char *)&v148 - v15;
  v196 = sub_5440(&qword_265F58);
  __chkstk_darwin(v196);
  v199 = (char *)&v148 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for LocalizerRequest(0);
  __chkstk_darwin(v17);
  v193 = (char *)&v148 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for AccessibilityChildBehavior(0);
  v191 = *(_QWORD *)(v19 - 8);
  v192 = v19;
  __chkstk_darwin(v19);
  v190 = (char *)&v148 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v152 = type metadata accessor for UseDarkColorSchemeWhenInVibrantContextViewModifier(0);
  __chkstk_darwin(v152);
  v22 = (char *)&v148 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v150 = sub_5440(&qword_25FF30);
  __chkstk_darwin(v150);
  v24 = (uint64_t *)((char *)&v148 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  v151 = type metadata accessor for Image.Scale(0);
  v25 = *(_QWORD *)(v151 - 8);
  __chkstk_darwin(v151);
  v27 = (char *)&v148 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v148 = sub_5440(&qword_265D90);
  __chkstk_darwin(v148);
  v29 = (char *)&v148 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v153 = sub_5440(&qword_265D78);
  __chkstk_darwin(v153);
  v31 = (char *)&v148 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v156 = sub_5440(&qword_265D70);
  v155 = *(_QWORD *)(v156 - 8);
  __chkstk_darwin(v156);
  v154 = (char *)&v148 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v159 = sub_5440(&qword_265F60);
  v158 = *(_QWORD *)(v159 - 8);
  __chkstk_darwin(v159);
  v157 = (char *)&v148 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v194 = sub_5440(&qword_265D60);
  __chkstk_darwin(v194);
  v161 = (char *)&v148 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v195 = sub_5440(&qword_265F68);
  v163 = *(_QWORD *)(v195 - 8);
  v35 = __chkstk_darwin(v195);
  v160 = (char *)&v148 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v35);
  v162 = (char *)&v148 - v37;
  v38 = a2;
  v39 = &a2[*(int *)(type metadata accessor for NavigationActionMenuButtonView(0) + 28)];
  v40 = *(_QWORD *)v39;
  v41 = v39[8];
  sub_F9E4(*(_QWORD *)v39, v41);
  v42 = sub_31ABC(v40, v41);
  v43 = sub_BE0C(v40, v41);
  if ((v42 & 1) != 0)
  {
    v149 = v38;
    v102 = *v38;
    sub_10EA68();
    KeyPath = swift_getKeyPath(&unk_1ECE90);
    v104 = v151;
    (*(void (**)(char *, char *, uint64_t))(v25 + 16))((char *)v24 + *(int *)(v150 + 28), v27, v151);
    *v24 = KeyPath;
    sub_B3D0((uint64_t)v24, (uint64_t)&v29[*(int *)(v148 + 36)], &qword_25FF30);
    *v29 = v102;
    sub_B414((uint64_t)v24, &qword_25FF30);
    (*(void (**)(char *, uint64_t))(v25 + 8))(v27, v104);
    *(_QWORD *)v22 = swift_getKeyPath(&unk_1ECEB8);
    v22[8] = 0;
    v105 = v152;
    v106 = &v22[*(int *)(v152 + 20)];
    *(_QWORD *)v106 = swift_getKeyPath(&unk_1ECEE0);
    v107 = sub_5440(&qword_25E948);
    swift_storeEnumTagMultiPayload(v106, v107, 0);
    v22[*(int *)(v105 + 24)] = 1;
    sub_B3D0((uint64_t)v29, (uint64_t)v31, &qword_265D90);
    v108 = v153;
    sub_21C88((uint64_t)v22, (uint64_t)&v31[*(int *)(v153 + 36)], type metadata accessor for UseDarkColorSchemeWhenInVibrantContextViewModifier);
    v109 = sub_B414((uint64_t)v29, &qword_265D90);
    __chkstk_darwin(v109);
    *(&v148 - 2) = (uint64_t)v149;
    v110 = type metadata accessor for MenuContentView(0);
    v111 = sub_10FA30();
    v112 = sub_6FD0(&qword_265D98, type metadata accessor for MenuContentView, (uint64_t)&unk_1ECE40);
    v113 = v154;
    View.contextMenu<A>(menuItems:)(sub_1111E8, &v148 - 4, v108, v110, v111, v112);
    v114 = sub_B414((uint64_t)v31, &qword_265D78);
    v115 = v190;
    static AccessibilityChildBehavior.combine.getter(v114);
    v204 = v108;
    v205 = v110;
    v206 = v111;
    v207 = v112;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v204, &opaque type descriptor for <<opaque return type of View.contextMenu<A>(menuItems:)>>, 1);
    v117 = v157;
    v118 = v156;
    View.accessibilityElement(children:)(v115, v156, OpaqueTypeConformance2);
    (*(void (**)(char *, uint64_t))(v191 + 8))(v115, v192);
    (*(void (**)(char *, uint64_t))(v155 + 8))(v113, v118);
    v119 = v149;
    LOBYTE(v204) = *v149;
    v120 = v193;
    SymbolImage.Kind.accessibilityLocalizable.getter();
    v121 = v198;
    sub_BD00(v198, (uint64_t)&v204);
    v122 = Text.init(_:localizer:)(v120, &v204);
    v124 = v123;
    v126 = v125;
    v128 = v127 & 1;
    v204 = v118;
    v205 = OpaqueTypeConformance2;
    v129 = swift_getOpaqueTypeConformance2(&v204, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
    v130 = (uint64_t)v161;
    v131 = v159;
    View.accessibilityLabel(_:)(v122, v124, v128, v126, v159, v129);
    sub_2B574(v122, v124, v128);
    swift_bridgeObjectRelease(v126);
    v132 = (*(uint64_t (**)(char *, uint64_t))(v158 + 8))(v117, v131);
    __chkstk_darwin(v132);
    *(&v148 - 2) = (uint64_t)v119;
    *(&v148 - 1) = v121;
    v133 = sub_5440(&qword_260990);
    v134 = sub_10F904();
    v135 = sub_7FD8(&qword_2609C8, &qword_260990, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    v136 = v160;
    v137 = v194;
    View.accessibilityShowsLargeContentViewer<A>(_:)(sub_1110EC, &v148 - 4, v194, v133, v134, v135);
    sub_B414(v130, &qword_265D60);
    v138 = v163;
    v139 = v162;
    v140 = v136;
    v141 = v195;
    (*(void (**)(char *, char *, uint64_t))(v163 + 32))(v162, v140, v195);
    v142 = v199;
    (*(void (**)(char *, char *, uint64_t))(v138 + 16))(v199, v139, v141);
    swift_storeEnumTagMultiPayload(v142, v196, 0);
    v204 = v137;
    v205 = v133;
    v206 = v134;
    v207 = v135;
    v143 = swift_getOpaqueTypeConformance2(&v204, &opaque type descriptor for <<opaque return type of View.accessibilityShowsLargeContentViewer<A>(_:)>>, 1);
    v144 = sub_10FB38();
    v204 = v197;
    v205 = v133;
    v206 = v144;
    v207 = v135;
    v145 = swift_getOpaqueTypeConformance2(&v204, &opaque type descriptor for <<opaque return type of View.accessibilityShowsLargeContentViewer<A>(_:)>>, 1);
    v146 = sub_6FD0(&qword_263F78, (uint64_t (*)(uint64_t))&type metadata accessor for LiftHoverEffect, (uint64_t)&protocol conformance descriptor for LiftHoverEffect);
    v204 = v200;
    v205 = v202;
    v206 = v145;
    v207 = v146;
    v147 = swift_getOpaqueTypeConformance2(&v204, &opaque type descriptor for <<opaque return type of View.hoverEffect<A>(_:isEnabled:)>>, 1);
    _ConditionalContent<>.init(storage:)(v142, v141, v201, v143, v147);
    return (*(uint64_t (**)(char *, uint64_t))(v138 + 8))(v139, v141);
  }
  else
  {
    v44 = __chkstk_darwin(v43);
    *(&v148 - 2) = (uint64_t)v38;
    __chkstk_darwin(v44);
    *(&v148 - 2) = (uint64_t)v38;
    v45 = sub_5440(&qword_265F70);
    v46 = type metadata accessor for MenuContentView(0);
    v47 = sub_110FCC();
    v48 = sub_6FD0(&qword_265D98, type metadata accessor for MenuContentView, (uint64_t)&unk_1ECE40);
    v49 = v164;
    v50 = Menu.init(content:label:)(sub_110FAC, &v148 - 4, sub_110FC4, &v148 - 4, v45, v46, v47, v48);
    v51 = v166;
    ButtonMenuStyle.init()(v50);
    v52 = sub_7FD8(&qword_265DD0, &qword_265DC8, (uint64_t)&protocol conformance descriptor for Menu<A, B>);
    v53 = sub_6FD0(&qword_265DD8, (uint64_t (*)(uint64_t))&type metadata accessor for ButtonMenuStyle, (uint64_t)&protocol conformance descriptor for ButtonMenuStyle);
    v54 = v169;
    v55 = v167;
    v56 = v170;
    View.menuStyle<A>(_:)(v51, v167, v170, v52, v53);
    (*(void (**)(char *, uint64_t))(v168 + 8))(v51, v56);
    v57 = (*(uint64_t (**)(char *, uint64_t))(v165 + 8))(v49, v55);
    v58 = v175;
    PlainButtonStyle.init()(v57);
    v204 = v55;
    v205 = v56;
    v206 = v52;
    v207 = v53;
    v59 = swift_getOpaqueTypeConformance2(&v204, &opaque type descriptor for <<opaque return type of View.menuStyle<A>(_:)>>, 1);
    v60 = sub_6FD0(&qword_2609C0, (uint64_t (*)(uint64_t))&type metadata accessor for PlainButtonStyle, (uint64_t)&protocol conformance descriptor for PlainButtonStyle);
    v61 = v173;
    v62 = v172;
    v63 = v179;
    View.buttonStyle<A>(_:)(v58, v172, v179, v59, v60);
    (*(void (**)(char *, uint64_t))(v176 + 8))(v58, v63);
    v64 = (*(uint64_t (**)(char *, uint64_t))(v171 + 8))(v54, v62);
    v65 = v190;
    static AccessibilityChildBehavior.combine.getter(v64);
    v204 = v62;
    v205 = v63;
    v206 = v59;
    v207 = v60;
    v66 = swift_getOpaqueTypeConformance2(&v204, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
    v67 = v178;
    v68 = v177;
    View.accessibilityElement(children:)(v65, v177, v66);
    (*(void (**)(char *, uint64_t))(v191 + 8))(v65, v192);
    (*(void (**)(char *, uint64_t))(v174 + 8))(v61, v68);
    LOBYTE(v204) = *v38;
    v69 = v193;
    SymbolImage.Kind.accessibilityLocalizable.getter();
    v70 = v198;
    sub_BD00(v198, (uint64_t)&v204);
    v71 = Text.init(_:localizer:)(v69, &v204);
    v73 = v72;
    v75 = v74;
    v77 = v76 & 1;
    v204 = v68;
    v205 = v66;
    v78 = swift_getOpaqueTypeConformance2(&v204, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
    v79 = (uint64_t)v182;
    v80 = v181;
    View.accessibilityLabel(_:)(v71, v73, v77, v75, v181, v78);
    sub_2B574(v71, v73, v77);
    swift_bridgeObjectRelease(v75);
    v81 = (*(uint64_t (**)(char *, uint64_t))(v180 + 8))(v67, v80);
    __chkstk_darwin(v81);
    *(&v148 - 2) = (uint64_t)v38;
    *(&v148 - 1) = v70;
    v82 = sub_5440(&qword_260990);
    v83 = sub_10FB38();
    v84 = sub_7FD8(&qword_2609C8, &qword_260990, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    v85 = v184;
    v86 = v197;
    v198 = v82;
    View.accessibilityShowsLargeContentViewer<A>(_:)(sub_1111EC, &v148 - 4, v197, v82, v83, v84);
    v87 = sub_B414(v79, &qword_265DA8);
    v88 = v188;
    static CustomHoverEffect<>.lift.getter(v87);
    v204 = v86;
    v205 = v82;
    v206 = v83;
    v207 = v84;
    v89 = swift_getOpaqueTypeConformance2(&v204, &opaque type descriptor for <<opaque return type of View.accessibilityShowsLargeContentViewer<A>(_:)>>, 1);
    v90 = sub_6FD0(&qword_263F78, (uint64_t (*)(uint64_t))&type metadata accessor for LiftHoverEffect, (uint64_t)&protocol conformance descriptor for LiftHoverEffect);
    v91 = v183;
    v92 = v200;
    v93 = v202;
    View.hoverEffect<A>(_:isEnabled:)(v88, 1, v200, v202, v89, v90);
    (*(void (**)(char *, uint64_t))(v189 + 8))(v88, v93);
    (*(void (**)(char *, uint64_t))(v185 + 8))(v85, v92);
    v94 = v187;
    v95 = v186;
    v96 = v201;
    (*(void (**)(char *, char *, uint64_t))(v187 + 32))(v186, v91, v201);
    v97 = v199;
    (*(void (**)(char *, char *, uint64_t))(v94 + 16))(v199, v95, v96);
    swift_storeEnumTagMultiPayload(v97, v196, 1);
    v98 = sub_10F904();
    v204 = v194;
    v205 = v198;
    v206 = v98;
    v207 = v84;
    v99 = swift_getOpaqueTypeConformance2(&v204, &opaque type descriptor for <<opaque return type of View.accessibilityShowsLargeContentViewer<A>(_:)>>, 1);
    v204 = v92;
    v205 = v93;
    v206 = v89;
    v207 = v90;
    v100 = swift_getOpaqueTypeConformance2(&v204, &opaque type descriptor for <<opaque return type of View.hoverEffect<A>(_:isEnabled:)>>, 1);
    _ConditionalContent<>.init(storage:)(v97, v195, v96, v99, v100);
    return (*(uint64_t (**)(char *, uint64_t))(v94 + 8))(v95, v96);
  }
}

void sub_10EA68()
{
  __asm { BR              X11 }
}

uint64_t sub_10EAB8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;
  unsigned int *v3;
  uint64_t v4;
  uint64_t v5;

  v2 = _stringCompareWithSmolCheck(_:_:expecting:)(0x72616D6B63656863, 0xE90000000000006BLL, a1 + 1, 0x80000000001F9730, 0);
  swift_bridgeObjectRelease(0xE90000000000006BLL);
  if ((v2 & 1) != 0)
    v3 = (unsigned int *)&enum case for Image.Scale.large(_:);
  else
    v3 = (unsigned int *)&enum case for Image.Scale.medium(_:);
  v4 = *v3;
  v5 = ((uint64_t (*)(_QWORD))type metadata accessor for Image.Scale)(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(v1, v4, v5);
}

uint64_t sub_10EBC0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = type metadata accessor for ProfileRestrictions(0);
  v5 = sub_6FD0((unint64_t *)&qword_26AF00, type metadata accessor for ProfileRestrictions, (uint64_t)&protocol conformance descriptor for ProfileRestrictions);
  swift_bridgeObjectRetain(v3);
  *(_QWORD *)a2 = EnvironmentObject.init()(v4, v5);
  *(_QWORD *)(a2 + 8) = v6;
  *(_QWORD *)(a2 + 16) = swift_getKeyPath(&unk_1ECF10);
  *(_BYTE *)(a2 + 56) = 0;
  v7 = type metadata accessor for MenuContentView(0);
  v8 = (_QWORD *)(a2 + *(int *)(v7 + 24));
  *v8 = swift_getKeyPath(&unk_1ECF40);
  v9 = sub_5440(&qword_25FAE0);
  result = swift_storeEnumTagMultiPayload(v8, v9, 0);
  *(_QWORD *)(a2 + *(int *)(v7 + 28)) = v3;
  return result;
}

uint64_t sub_10EC88@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  char *v15;
  char v16;
  uint64_t KeyPath;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v29 = a2;
  v28 = type metadata accessor for UseDarkColorSchemeWhenInVibrantContextViewModifier(0);
  __chkstk_darwin(v28);
  v4 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = sub_5440(&qword_25FF30);
  __chkstk_darwin(v27);
  v6 = (uint64_t *)((char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = type metadata accessor for Image.Scale(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_5440(&qword_265D90);
  __chkstk_darwin(v11);
  v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = sub_5440(&qword_265F88);
  __chkstk_darwin(v26);
  v15 = (char *)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *a1;
  sub_10EA68();
  KeyPath = swift_getKeyPath(&unk_1ECE90);
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))((char *)v6 + *(int *)(v27 + 28), v10, v7);
  *v6 = KeyPath;
  sub_B3D0((uint64_t)v6, (uint64_t)&v13[*(int *)(v11 + 36)], &qword_25FF30);
  *v13 = v16;
  sub_B414((uint64_t)v6, &qword_25FF30);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  v18 = swift_getKeyPath(&unk_1ECF70);
  sub_B3D0((uint64_t)v13, (uint64_t)v15, &qword_265D90);
  v19 = &v15[*(int *)(v26 + 36)];
  *(_QWORD *)v19 = v18;
  v19[8] = 2;
  sub_B414((uint64_t)v13, &qword_265D90);
  *(_QWORD *)v4 = swift_getKeyPath(&unk_1ECEB8);
  v4[8] = 0;
  v20 = v28;
  v21 = &v4[*(int *)(v28 + 20)];
  *(_QWORD *)v21 = swift_getKeyPath(&unk_1ECEE0);
  v22 = sub_5440(&qword_25E948);
  swift_storeEnumTagMultiPayload(v21, v22, 0);
  v4[*(int *)(v20 + 24)] = 1;
  v23 = v29;
  sub_B3D0((uint64_t)v15, v29, &qword_265F88);
  v24 = sub_5440(&qword_265F70);
  sub_21C88((uint64_t)v4, v23 + *(int *)(v24 + 36), type metadata accessor for UseDarkColorSchemeWhenInVibrantContextViewModifier);
  return sub_B414((uint64_t)v15, &qword_265F88);
}

void sub_10EF5C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for LocalizerRequest(0);
  __chkstk_darwin(v2);
  __asm { BR              X9 }
}

uint64_t sub_10EFE8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;

  v5 = Image.init(systemName:)(0x72616D6B63656863, 0xE90000000000006BLL);
  *(_BYTE *)(v4 - 88) = v3;
  SymbolImage.Kind.accessibilityLocalizable.getter();
  sub_BD00(v1, v4 - 88);
  v6 = Text.init(_:localizer:)(v2, v4 - 88);
  v8 = v7;
  v10 = v9;
  *(_QWORD *)v0 = v5;
  *(_QWORD *)(v0 + 8) = v6;
  v12 = v11 & 1;
  *(_QWORD *)(v0 + 16) = v7;
  *(_BYTE *)(v0 + 24) = v11 & 1;
  *(_QWORD *)(v0 + 32) = v9;
  swift_retain(v5);
  sub_34B1C(v6, v8, v12);
  swift_bridgeObjectRetain(v10);
  sub_2B574(v6, v8, v12);
  swift_release(v5);
  return swift_bridgeObjectRelease(v10);
}

uint64_t sub_10F124(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v2 = *(_QWORD *)(a1 - 8);
  v3 = *(_QWORD *)(v2 + 64);
  __chkstk_darwin(a1);
  sub_1E428(v1, (uint64_t)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for NavigationActionMenuButtonView);
  v4 = *(unsigned __int8 *)(v2 + 80);
  v5 = (v4 + 16) & ~v4;
  v6 = swift_allocObject(&unk_252D28, v5 + v3, v4 | 7);
  sub_21C88((uint64_t)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), v6 + v5, type metadata accessor for NavigationActionMenuButtonView);
  v7 = sub_5440(&qword_265D50);
  v8 = type metadata accessor for _JetLocalizeDefaultWorking(0);
  v9 = type metadata accessor for _JetLocalizeDefaultFailed(0);
  v10 = sub_10F790();
  v11 = sub_6FD0(&qword_25FEE0, (uint64_t (*)(uint64_t))&type metadata accessor for _JetLocalizeDefaultWorking, (uint64_t)&protocol conformance descriptor for _JetLocalizeDefaultWorking);
  v12 = sub_6FD0(&qword_25FEE8, (uint64_t (*)(uint64_t))&type metadata accessor for _JetLocalizeDefaultFailed, (uint64_t)&protocol conformance descriptor for _JetLocalizeDefaultFailed);
  return JetLocalize.init(working:failed:content:)(&j___s18_JetEngine_SwiftUI01_A22LocalizeDefaultWorkingVACycfC, 0, sub_4ED68, 0, sub_10EA64, v6, v7, v8, v9, v10, v11, v12);
}

uint64_t sub_10F28C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _BYTE v9[16];
  uint64_t v10;

  v2 = sub_5440(&qword_261D00);
  __chkstk_darwin(v2);
  v4 = &v9[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = a1;
  sub_10F4DC(a1, (uint64_t)v4);
  v5 = sub_5440(&qword_262C00);
  v6 = sub_110D18();
  v7 = sub_111184((unint64_t *)&qword_262BF8, &qword_262C00, (void (*)(void))sub_9574C);
  return Section<>.init(header:content:)(v4, sub_110D94, v9, v2, v5, v6, v7);
}

uint64_t sub_10F36C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v2 = type metadata accessor for ToolbarActionMenu(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  v5 = *(_QWORD *)(a1 + *(int *)(__chkstk_darwin(v2) + 24));
  v16 = v5;
  sub_1E428(a1, (uint64_t)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for ToolbarActionMenu);
  v6 = *(unsigned __int8 *)(v3 + 80);
  v7 = (v6 + 16) & ~v6;
  v8 = swift_allocObject(&unk_252D00, v7 + v4, v6 | 7);
  sub_21C88((uint64_t)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v8 + v7, type metadata accessor for ToolbarActionMenu);
  swift_bridgeObjectRetain(v5);
  v9 = sub_5440(&qword_262968);
  v10 = sub_5440(&qword_262970);
  v11 = sub_7FD8(&qword_262978, &qword_262968, (uint64_t)&protocol conformance descriptor for [A]);
  v12 = sub_9574C();
  v13 = sub_6FD0(&qword_2629B0, type metadata accessor for ToolbarActionMenuItem, (uint64_t)&protocol conformance descriptor for ToolbarActionMenuItem);
  return ForEach<>.init(_:content:)(&v16, sub_95700, v8, v9, &type metadata for String, v10, v11, v12, v13);
}

uint64_t sub_10F4DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;

  v23 = a2;
  v3 = type metadata accessor for LocalizedText(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_5440(&qword_25E0C8);
  __chkstk_darwin(v7);
  v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for LocalizerRequest(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v16 = (char *)&v22 - v15;
  v17 = type metadata accessor for ToolbarActionMenu(0);
  sub_B3D0(a1 + *(int *)(v17 + 20), (uint64_t)v9, &qword_25E0C8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    sub_B414((uint64_t)v9, &qword_25E0C8);
    v18 = 1;
    v19 = v23;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v16, v9, v10);
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v14, v16, v10);
    LocalizedText.init(_:)(v14);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v16, v10);
    v20 = v23;
    (*(void (**)(uint64_t, char *, uint64_t))(v4 + 32))(v23, v6, v3);
    v18 = 0;
    v19 = v20;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56))(v19, v18, 1, v3);
}

uint64_t sub_10F6B4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v8 = *(_QWORD *)(v1 + *(int *)(a1 + 28));
  swift_bridgeObjectRetain(v8);
  v2 = sub_5440(&qword_264690);
  v3 = sub_5440(&qword_265F20);
  v4 = sub_7FD8(&qword_265F28, &qword_264690, (uint64_t)&protocol conformance descriptor for [A]);
  v5 = sub_110C88();
  v6 = sub_6FD0(&qword_265F40, type metadata accessor for ToolbarActionMenu, (uint64_t)&protocol conformance descriptor for ToolbarActionMenu);
  return ForEach<>.init(_:content:)(&v8, sub_10F28C, 0, v2, &type metadata for String, v3, v4, v5, v6);
}

unint64_t sub_10F790()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t OpaqueTypeConformance2;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;

  result = qword_265D58;
  if (!qword_265D58)
  {
    v1 = sub_7EF8(&qword_265D50);
    v2 = sub_7EF8(&qword_265D60);
    v3 = sub_7EF8(&qword_260990);
    v4 = sub_10F904();
    v5 = sub_7FD8(&qword_2609C8, &qword_260990, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    v12 = v2;
    v13 = v3;
    v14 = v4;
    v15 = v5;
    swift_getOpaqueTypeConformance2(&v12, &opaque type descriptor for <<opaque return type of View.accessibilityShowsLargeContentViewer<A>(_:)>>, 1);
    v6 = sub_7EF8(&qword_265DA0);
    v7 = type metadata accessor for LiftHoverEffect(255);
    v8 = sub_7EF8(&qword_265DA8);
    v9 = sub_10FB38();
    v12 = v8;
    v13 = v3;
    v14 = v9;
    v15 = v5;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v12, &opaque type descriptor for <<opaque return type of View.accessibilityShowsLargeContentViewer<A>(_:)>>, 1);
    v11 = sub_6FD0(&qword_263F78, (uint64_t (*)(uint64_t))&type metadata accessor for LiftHoverEffect, (uint64_t)&protocol conformance descriptor for LiftHoverEffect);
    v12 = v6;
    v13 = v7;
    v14 = OpaqueTypeConformance2;
    v15 = v11;
    swift_getOpaqueTypeConformance2(&v12, &opaque type descriptor for <<opaque return type of View.hoverEffect<A>(_:isEnabled:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_265D58);
  }
  return result;
}

unint64_t sub_10F904()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t OpaqueTypeConformance2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  result = qword_265D68;
  if (!qword_265D68)
  {
    v1 = sub_7EF8(&qword_265D60);
    v2 = sub_7EF8(&qword_265D70);
    v4 = sub_7EF8(&qword_265D78);
    v5 = type metadata accessor for MenuContentView(255);
    v6 = sub_10FA30();
    v7 = sub_6FD0(&qword_265D98, type metadata accessor for MenuContentView, (uint64_t)&unk_1ECE40);
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v4, &opaque type descriptor for <<opaque return type of View.contextMenu<A>(menuItems:)>>, 1);
    v4 = v2;
    v5 = OpaqueTypeConformance2;
    swift_getOpaqueTypeConformance2(&v4, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
    sub_6FD0((unint64_t *)&qword_25EEA0, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_265D68);
  }
  return result;
}

uint64_t type metadata accessor for MenuContentView(uint64_t a1)
{
  return sub_1FE90(a1, qword_265EE0, (uint64_t)&nominal type descriptor for MenuContentView);
}

unint64_t sub_10FA30()
{
  unint64_t result;
  uint64_t v1;

  result = qword_265D80;
  if (!qword_265D80)
  {
    v1 = sub_7EF8(&qword_265D78);
    sub_10FAB4();
    sub_6FD0((unint64_t *)&qword_260A10, type metadata accessor for UseDarkColorSchemeWhenInVibrantContextViewModifier, (uint64_t)&unk_1E6FE8);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_265D80);
  }
  return result;
}

unint64_t sub_10FAB4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_265D88;
  if (!qword_265D88)
  {
    v1 = sub_7EF8(&qword_265D90);
    sub_4F0A4();
    sub_7FD8((unint64_t *)&qword_260A18, &qword_25FF30, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_265D88);
  }
  return result;
}

unint64_t sub_10FB38()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t OpaqueTypeConformance2;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = qword_265DB0;
  if (!qword_265DB0)
  {
    v1 = sub_7EF8(&qword_265DA8);
    v2 = sub_7EF8(&qword_265DB8);
    v3 = sub_7EF8(&qword_265DC0);
    v4 = type metadata accessor for PlainButtonStyle(255);
    v8 = sub_7EF8(&qword_265DC8);
    v9 = type metadata accessor for ButtonMenuStyle(255);
    v10 = sub_7FD8(&qword_265DD0, &qword_265DC8, (uint64_t)&protocol conformance descriptor for Menu<A, B>);
    v11 = sub_6FD0(&qword_265DD8, (uint64_t (*)(uint64_t))&type metadata accessor for ButtonMenuStyle, (uint64_t)&protocol conformance descriptor for ButtonMenuStyle);
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v8, &opaque type descriptor for <<opaque return type of View.menuStyle<A>(_:)>>, 1);
    v6 = sub_6FD0(&qword_2609C0, (uint64_t (*)(uint64_t))&type metadata accessor for PlainButtonStyle, (uint64_t)&protocol conformance descriptor for PlainButtonStyle);
    v8 = v3;
    v9 = v4;
    v10 = OpaqueTypeConformance2;
    v11 = v6;
    v7 = swift_getOpaqueTypeConformance2(&v8, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
    v8 = v2;
    v9 = v7;
    swift_getOpaqueTypeConformance2(&v8, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
    sub_6FD0((unint64_t *)&qword_25EEA0, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_265DB0);
  }
  return result;
}

uint64_t sub_10FCD4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &opaque type descriptor for <<opaque return type of NavigationActionMenuButtonView.body>>, 1);
}

uint64_t *initializeBufferWithCopyOfBuffer for NavigationActionMenuButtonView(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char v20;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v14 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v14);
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    v7 = a2[1];
    v4[1] = v7;
    v8 = *(int *)(a3 + 24);
    v9 = (uint64_t *)((char *)v4 + v8);
    v10 = (uint64_t *)((char *)a2 + v8);
    swift_bridgeObjectRetain(v7);
    v11 = sub_5440(&qword_25F1E8);
    if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
    {
      v12 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v9, v10, v12);
      v13 = 1;
    }
    else
    {
      v15 = *v10;
      *v9 = *v10;
      swift_retain(v15);
      v13 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v11, v13);
    v16 = *(int *)(a3 + 28);
    v17 = (char *)v4 + v16;
    v18 = (char *)a2 + v16;
    v19 = *(_QWORD *)v18;
    v20 = v18[8];
    sub_F9E4(*(_QWORD *)v18, v20);
    *(_QWORD *)v17 = v19;
    v17[8] = v20;
  }
  return v4;
}

uint64_t destroy for NavigationActionMenuButtonView(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  v4 = (_QWORD *)(a1 + *(int *)(a2 + 24));
  v5 = sub_5440(&qword_25F1E8);
  if (swift_getEnumCaseMultiPayload(v4, v5) == 1)
  {
    v6 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v4, v6);
  }
  else
  {
    swift_release(*v4);
  }
  return sub_BE0C(*(_QWORD *)(a1 + *(int *)(a2 + 28)), *(_BYTE *)(a1 + *(int *)(a2 + 28) + 8));
}

uint64_t initializeWithCopy for NavigationActionMenuButtonView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  v7 = *(int *)(a3 + 24);
  v8 = (uint64_t *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  swift_bridgeObjectRetain(v6);
  v10 = sub_5440(&qword_25F1E8);
  if (swift_getEnumCaseMultiPayload(v9, v10) == 1)
  {
    v11 = type metadata accessor for ColorScheme(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v8, v9, v11);
    v12 = 1;
  }
  else
  {
    v13 = *v9;
    *v8 = *v9;
    swift_retain(v13);
    v12 = 0;
  }
  swift_storeEnumTagMultiPayload(v8, v10, v12);
  v14 = *(int *)(a3 + 28);
  v15 = a1 + v14;
  v16 = a2 + v14;
  v17 = *(_QWORD *)v16;
  v18 = *(_BYTE *)(v16 + 8);
  sub_F9E4(*(_QWORD *)v16, v18);
  *(_QWORD *)v15 = v17;
  *(_BYTE *)(v15 + 8) = v18;
  return a1;
}

uint64_t assignWithCopy for NavigationActionMenuButtonView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  char v21;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  if (a1 != a2)
  {
    v8 = *(int *)(a3 + 24);
    v9 = (uint64_t *)(a1 + v8);
    v10 = (uint64_t *)(a2 + v8);
    sub_B414(a1 + v8, &qword_25F1E8);
    v11 = sub_5440(&qword_25F1E8);
    if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
    {
      v12 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v9, v10, v12);
      v13 = 1;
    }
    else
    {
      v14 = *v10;
      *v9 = *v10;
      swift_retain(v14);
      v13 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v11, v13);
  }
  v15 = *(int *)(a3 + 28);
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = *(_QWORD *)v17;
  v19 = *(_BYTE *)(v17 + 8);
  sub_F9E4(*(_QWORD *)v17, v19);
  v20 = *(_QWORD *)v16;
  v21 = *(_BYTE *)(v16 + 8);
  *(_QWORD *)v16 = v18;
  *(_BYTE *)(v16 + 8) = v19;
  sub_BE0C(v20, v21);
  return a1;
}

uint64_t initializeWithTake for NavigationActionMenuButtonView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v6 = *(int *)(a3 + 24);
  v7 = (void *)(a1 + v6);
  v8 = (const void *)(a2 + v6);
  v9 = sub_5440(&qword_25F1E8);
  if (swift_getEnumCaseMultiPayload(v8, v9) == 1)
  {
    v10 = type metadata accessor for ColorScheme(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v7, v8, v10);
    swift_storeEnumTagMultiPayload(v7, v9, 1);
  }
  else
  {
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  v11 = *(int *)(a3 + 28);
  v12 = a1 + v11;
  v13 = a2 + v11;
  *(_QWORD *)v12 = *(_QWORD *)v13;
  *(_BYTE *)(v12 + 8) = *(_BYTE *)(v13 + 8);
  return a1;
}

uint64_t assignWithTake for NavigationActionMenuButtonView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  char v17;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v6 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease(v6);
  if (a1 != a2)
  {
    v7 = *(int *)(a3 + 24);
    v8 = (void *)(a1 + v7);
    v9 = (const void *)(a2 + v7);
    sub_B414(a1 + v7, &qword_25F1E8);
    v10 = sub_5440(&qword_25F1E8);
    if (swift_getEnumCaseMultiPayload(v9, v10) == 1)
    {
      v11 = type metadata accessor for ColorScheme(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v8, v9, v11);
      swift_storeEnumTagMultiPayload(v8, v10, 1);
    }
    else
    {
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    }
  }
  v12 = *(int *)(a3 + 28);
  v13 = a1 + v12;
  v14 = (uint64_t *)(a2 + v12);
  v15 = *v14;
  LOBYTE(v14) = *((_BYTE *)v14 + 8);
  v16 = *(_QWORD *)v13;
  v17 = *(_BYTE *)(v13 + 8);
  *(_QWORD *)v13 = v15;
  *(_BYTE *)(v13 + 8) = (_BYTE)v14;
  sub_BE0C(v16, v17);
  return a1;
}

uint64_t getEnumTagSinglePayload for NavigationActionMenuButtonView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_110278);
}

uint64_t sub_110278(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_5440(&qword_25F210);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for NavigationActionMenuButtonView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_110304);
}

uint64_t sub_110304(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = sub_5440(&qword_25F210);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

void sub_11037C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = &unk_1ECDD0;
  v4[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
  sub_2ADCC(319, (unint64_t *)&qword_25F298, type metadata accessor for ColorConstants);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(v2 - 8) + 64;
    v4[3] = &unk_1ECDE8;
    swift_initStructMetadata(a1, 256, 4, v4, a1 + 16);
  }
}

uint64_t sub_110414()
{
  return sub_7FD8(&qword_265E78, &qword_265E80, (uint64_t)&protocol conformance descriptor for JetLocalize<A, B, C>);
}

char *sub_110440(char *a1, char **a2, uint64_t a3)
{
  int v4;
  char *v5;
  char **v8;
  char v9;
  char *v10;
  _OWORD *v11;
  char *v12;
  char *v13;
  char *v14;
  __int128 v15;
  uint64_t v16;
  char *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v5 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = &v5[(v4 + 16) & ~(unint64_t)v4];
    swift_retain(v5);
  }
  else
  {
    *((_QWORD *)a1 + 1) = a2[1];
    v8 = a2 + 2;
    v9 = *((_BYTE *)a2 + 56);
    v10 = v5;
    if ((v9 & 1) != 0)
    {
      v11 = a1 + 16;
      v12 = a2[5];
      if (v12)
      {
        v13 = a2[6];
        *((_QWORD *)a1 + 5) = v12;
        *((_QWORD *)a1 + 6) = v13;
        (**((void (***)(_OWORD *, char **))v12 - 1))(v11, v8);
      }
      else
      {
        v15 = *((_OWORD *)v8 + 1);
        *v11 = *(_OWORD *)v8;
        *((_OWORD *)a1 + 2) = v15;
        *((_QWORD *)a1 + 6) = v8[4];
      }
      a1[56] = 1;
    }
    else
    {
      v14 = *v8;
      *((_QWORD *)a1 + 2) = *v8;
      a1[56] = 0;
      swift_retain(v14);
    }
    v16 = *(int *)(a3 + 24);
    v17 = &a1[v16];
    v18 = (uint64_t *)((char *)a2 + v16);
    v19 = sub_5440(&qword_25FAE0);
    if (swift_getEnumCaseMultiPayload(v18, v19) == 1)
    {
      v20 = type metadata accessor for OpaqueMetricsFieldsContext(0);
      (*(void (**)(char *, uint64_t *, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v17, v18, v20);
      v21 = 1;
    }
    else
    {
      v22 = *v18;
      *(_QWORD *)v17 = *v18;
      swift_retain(v22);
      v21 = 0;
    }
    swift_storeEnumTagMultiPayload(v17, v19, v21);
    v23 = *(int *)(a3 + 28);
    v24 = *(uint64_t *)((char *)a2 + v23);
    *(_QWORD *)&a1[v23] = v24;
    swift_bridgeObjectRetain(v24);
  }
  return a1;
}

uint64_t sub_110594(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = (_QWORD *)(a1 + 16);
  if ((*(_BYTE *)(a1 + 56) & 1) != 0)
  {
    if (*(_QWORD *)(a1 + 40))
      _s7BooksUI13AnyPagedFrameVwxx_0(v4);
  }
  else
  {
    swift_release(*v4);
  }
  v5 = (_QWORD *)(a1 + *(int *)(a2 + 24));
  v6 = sub_5440(&qword_25FAE0);
  if (swift_getEnumCaseMultiPayload(v5, v6) == 1)
  {
    v7 = type metadata accessor for OpaqueMetricsFieldsContext(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v5, v7);
  }
  else
  {
    swift_release(*v5);
  }
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(a2 + 28)));
}

uint64_t sub_110640(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  uint64_t v7;
  uint64_t *v8;
  char v9;
  id v10;
  _OWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v6 = *(void **)a2;
  v7 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v7;
  v8 = (uint64_t *)(a2 + 16);
  v9 = *(_BYTE *)(a2 + 56);
  v10 = v6;
  if ((v9 & 1) != 0)
  {
    v11 = (_OWORD *)(a1 + 16);
    v12 = *(_QWORD *)(a2 + 40);
    if (v12)
    {
      v13 = *(_QWORD *)(a2 + 48);
      *(_QWORD *)(a1 + 40) = v12;
      *(_QWORD *)(a1 + 48) = v13;
      (**(void (***)(_OWORD *, uint64_t *))(v12 - 8))(v11, v8);
    }
    else
    {
      v15 = *((_OWORD *)v8 + 1);
      *v11 = *(_OWORD *)v8;
      *(_OWORD *)(a1 + 32) = v15;
      *(_QWORD *)(a1 + 48) = v8[4];
    }
    *(_BYTE *)(a1 + 56) = 1;
  }
  else
  {
    v14 = *v8;
    *(_QWORD *)(a1 + 16) = *v8;
    *(_BYTE *)(a1 + 56) = 0;
    swift_retain(v14);
  }
  v16 = *(int *)(a3 + 24);
  v17 = (uint64_t *)(a1 + v16);
  v18 = (uint64_t *)(a2 + v16);
  v19 = sub_5440(&qword_25FAE0);
  if (swift_getEnumCaseMultiPayload(v18, v19) == 1)
  {
    v20 = type metadata accessor for OpaqueMetricsFieldsContext(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v17, v18, v20);
    v21 = 1;
  }
  else
  {
    v22 = *v18;
    *v17 = *v18;
    swift_retain(v22);
    v21 = 0;
  }
  swift_storeEnumTagMultiPayload(v17, v19, v21);
  v23 = *(int *)(a3 + 28);
  v24 = *(_QWORD *)(a2 + v23);
  *(_QWORD *)(a1 + v23) = v24;
  swift_bridgeObjectRetain(v24);
  return a1;
}

uint64_t sub_110768(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  void *v7;
  id v8;
  __int128 *v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v6 = *(void **)a1;
  v7 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v8 = v7;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  if (a1 != a2)
  {
    v9 = (__int128 *)(a2 + 16);
    sub_B414(a1 + 16, &qword_25FAE8);
    if ((*(_BYTE *)(a2 + 56) & 1) != 0)
    {
      v10 = *(_QWORD *)(a2 + 40);
      if (v10)
      {
        *(_QWORD *)(a1 + 40) = v10;
        *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
        (**(void (***)(uint64_t, uint64_t))(v10 - 8))(a1 + 16, a2 + 16);
      }
      else
      {
        v12 = *v9;
        v13 = *(_OWORD *)(a2 + 32);
        *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
        *(_OWORD *)(a1 + 16) = v12;
        *(_OWORD *)(a1 + 32) = v13;
      }
      *(_BYTE *)(a1 + 56) = 1;
    }
    else
    {
      v11 = *(_QWORD *)v9;
      *(_QWORD *)(a1 + 16) = *(_QWORD *)v9;
      *(_BYTE *)(a1 + 56) = 0;
      swift_retain(v11);
    }
    v14 = *(int *)(a3 + 24);
    v15 = (uint64_t *)(a1 + v14);
    v16 = (uint64_t *)(a2 + v14);
    sub_B414(a1 + v14, &qword_25FAE0);
    v17 = sub_5440(&qword_25FAE0);
    if (swift_getEnumCaseMultiPayload(v16, v17) == 1)
    {
      v18 = type metadata accessor for OpaqueMetricsFieldsContext(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v15, v16, v18);
      v19 = 1;
    }
    else
    {
      v20 = *v16;
      *v15 = *v16;
      swift_retain(v20);
      v19 = 0;
    }
    swift_storeEnumTagMultiPayload(v15, v17, v19);
  }
  v21 = *(int *)(a3 + 28);
  v22 = *(_QWORD *)(a2 + v21);
  v23 = *(_QWORD *)(a1 + v21);
  *(_QWORD *)(a1 + v21) = v22;
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRelease(v23);
  return a1;
}

_OWORD *sub_1108DC(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  a1[2] = a2[2];
  *(_OWORD *)((char *)a1 + 41) = *(_OWORD *)((char *)a2 + 41);
  v7 = *(int *)(a3 + 24);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = sub_5440(&qword_25FAE0);
  if (swift_getEnumCaseMultiPayload(v9, v10) == 1)
  {
    v11 = type metadata accessor for OpaqueMetricsFieldsContext(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v8, v9, v11);
    swift_storeEnumTagMultiPayload(v8, v10, 1);
  }
  else
  {
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  *(_QWORD *)((char *)a1 + *(int *)(a3 + 28)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 28));
  return a1;
}

uint64_t sub_1109B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  __int128 v7;
  uint64_t v8;
  void *v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  if (a1 != a2)
  {
    sub_B414(a1 + 16, &qword_25FAE8);
    v7 = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(a1 + 32) = v7;
    *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
    v8 = *(int *)(a3 + 24);
    v9 = (void *)(a1 + v8);
    v10 = (const void *)(a2 + v8);
    sub_B414(a1 + v8, &qword_25FAE0);
    v11 = sub_5440(&qword_25FAE0);
    if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
    {
      v12 = type metadata accessor for OpaqueMetricsFieldsContext(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v9, v10, v12);
      swift_storeEnumTagMultiPayload(v9, v11, 1);
    }
    else
    {
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    }
  }
  v13 = *(int *)(a3 + 28);
  v14 = *(_QWORD *)(a1 + v13);
  *(_QWORD *)(a1 + v13) = *(_QWORD *)(a2 + v13);
  swift_bridgeObjectRelease(v14);
  return a1;
}

uint64_t sub_110AC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_110AD0);
}

uint64_t sub_110AD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = sub_5440(&qword_264F30);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 24), a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 28));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_110B54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_110B60);
}

uint64_t sub_110B60(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_5440(&qword_264F30);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + *(int *)(a4 + 24), a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 28)) = (a2 - 1);
  return result;
}

void sub_110BE0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = &unk_1ECE10;
  v4[1] = &unk_1ECE28;
  sub_2ADCC(319, (unint64_t *)&qword_2617F8, (uint64_t (*)(uint64_t))&type metadata accessor for OpaqueMetricsFieldsContext);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(v2 - 8) + 64;
    v4[3] = (char *)&value witness table for Builtin.BridgeObject + 64;
    swift_initStructMetadata(a1, 256, 4, v4, a1 + 16);
  }
}

uint64_t sub_110C78(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_22DEB0, 1);
}

unint64_t sub_110C88()
{
  unint64_t result;
  uint64_t v1;

  result = qword_265F30;
  if (!qword_265F30)
  {
    v1 = sub_7EF8(&qword_265F20);
    sub_110D18();
    sub_111184((unint64_t *)&qword_262BF8, &qword_262C00, (void (*)(void))sub_9574C);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> Section<A, B, C>, v1);
    atomic_store(result, (unint64_t *)&qword_265F30);
  }
  return result;
}

unint64_t sub_110D18()
{
  unint64_t result;
  uint64_t v1;

  result = qword_265F38;
  if (!qword_265F38)
  {
    v1 = sub_7EF8(&qword_261D00);
    sub_6FD0((unint64_t *)&qword_25FEA8, (uint64_t (*)(uint64_t))&type metadata accessor for LocalizedText, (uint64_t)&protocol conformance descriptor for LocalizedText);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_265F38);
  }
  return result;
}

uint64_t sub_110D94()
{
  uint64_t v0;

  return sub_10F36C(*(_QWORD *)(v0 + 16));
}

uint64_t sub_110D9C()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;

  v1 = (int *)type metadata accessor for ToolbarActionMenu(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v0 + v4;
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + 8));
  v7 = v0 + v4 + v1[5];
  v8 = type metadata accessor for LocalizerRequest(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8))
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[6]));
  v10 = (_QWORD *)(v6 + v1[7]);
  if (*v10)
    swift_release(v10[1]);
  v11 = (_QWORD *)(v6 + v1[8]);
  if (*v11)
    swift_release(v11[1]);
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_110E8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v1 = type metadata accessor for NavigationActionMenuButtonView(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + 8));
  v6 = (_QWORD *)(v0 + v4 + *(int *)(v1 + 24));
  v7 = sub_5440(&qword_25F1E8);
  if (swift_getEnumCaseMultiPayload(v6, v7) == 1)
  {
    v8 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v6, v8);
  }
  else
  {
    swift_release(*v6);
  }
  sub_BE0C(*(_QWORD *)(v0 + v4 + *(int *)(v1 + 28)), *(_BYTE *)(v0 + v4 + *(int *)(v1 + 28) + 8));
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_110F60@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for NavigationActionMenuButtonView(0) - 8) + 80);
  return sub_10D910(a1, (_BYTE *)(v2 + ((v5 + 16) & ~v5)), a2);
}

uint64_t sub_110FAC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10EBC0(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_110FC4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10EC88(*(char **)(v1 + 16), a1);
}

unint64_t sub_110FCC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_265F78;
  if (!qword_265F78)
  {
    v1 = sub_7EF8(&qword_265F70);
    sub_111050();
    sub_6FD0((unint64_t *)&qword_260A10, type metadata accessor for UseDarkColorSchemeWhenInVibrantContextViewModifier, (uint64_t)&unk_1E6FE8);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_265F78);
  }
  return result;
}

unint64_t sub_111050()
{
  unint64_t result;
  uint64_t v1;

  result = qword_265F80;
  if (!qword_265F80)
  {
    v1 = sub_7EF8(&qword_265F88);
    sub_10FAB4();
    sub_7FD8(&qword_265F90, &qword_265F98, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_265F80);
  }
  return result;
}

void sub_1110EC()
{
  uint64_t v0;

  sub_10EF5C(*(_QWORD *)(v0 + 16));
}

uint64_t sub_11110C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.menuIndicatorVisibility.getter();
  *a1 = result;
  return result;
}

uint64_t sub_111134(unsigned __int8 *a1)
{
  return EnvironmentValues.menuIndicatorVisibility.setter(*a1);
}

uint64_t sub_111158()
{
  return sub_111184(&qword_265FA0, &qword_265FA8, (void (*)(void))sub_110C88);
}

uint64_t sub_111184(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_7EF8(a2);
    a3();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t ThumbOpinionButtonViewModel.init(state:assetInfo:isLikedButton:)@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  char v7;
  uint64_t result;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_BYTE *)(a1 + 16);
  *(_QWORD *)a4 = *(_QWORD *)a1;
  *(_QWORD *)(a4 + 8) = v6;
  *(_BYTE *)(a4 + 16) = v7;
  result = sub_AC68(a2, a4 + 24);
  *(_BYTE *)(a4 + 64) = a3;
  return result;
}

uint64_t ThumbOpinionButton.init(viewModel:nextAction:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  char *v61;
  _QWORD *v62;
  _QWORD *v63;
  _QWORD *v64;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  _BYTE *v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  __int128 v88;
  uint64_t v89;
  void *v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  uint64_t v99;
  uint64_t v100;
  char v101;

  v87 = (_QWORD *)a2;
  v85 = type metadata accessor for DelayAction(0);
  __chkstk_darwin(v85);
  v84 = (char *)&v67 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v79 = type metadata accessor for UUID(0);
  v78 = *(_QWORD *)(v79 - 8);
  __chkstk_darwin(v79);
  v77 = (char *)&v67 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_5440(&qword_25E828);
  __chkstk_darwin(v7);
  v76 = (char *)&v67 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v74 = type metadata accessor for AssetAction.Kind(0);
  __chkstk_darwin(v74);
  v73 = (char *)&v67 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v82 = type metadata accessor for AssetAction(0);
  __chkstk_darwin(v82);
  v75 = (uint64_t)&v67 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for ActionMetrics(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v67 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v80 = type metadata accessor for ClosureAction(0);
  v81 = *(_QWORD *)(v80 - 8);
  __chkstk_darwin(v80);
  v72 = (char *)&v67 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for ThumbOpinionButton(0);
  v16 = *(int *)(v15 + 20);
  v17 = v15;
  v86 = v15;
  v18 = (_QWORD *)(a3 + v16);
  *v18 = swift_getKeyPath(&unk_1ECFB0);
  v19 = sub_5440(&qword_25F548);
  swift_storeEnumTagMultiPayload(v18, v19, 0);
  v20 = (_QWORD *)(a3 + *(int *)(v17 + 24));
  v83 = a3;
  *v20 = swift_getKeyPath(&unk_1ECFD8);
  v21 = sub_5440(&qword_25F1E8);
  swift_storeEnumTagMultiPayload(v20, v21, 0);
  v22 = sub_111930((uint64_t *)a1, a3);
  v23 = *(_BYTE *)(a1 + 64);
  static ActionMetrics.notInstrumented.getter(v22);
  sub_111930((uint64_t *)a1, (uint64_t)&v91);
  v24 = swift_allocObject(&unk_252DA8, 82, 7);
  v25 = v94;
  *(_OWORD *)(v24 + 48) = v93;
  *(_OWORD *)(v24 + 64) = v25;
  *(_BYTE *)(v24 + 80) = v95;
  v26 = v92;
  *(_OWORD *)(v24 + 16) = v91;
  *(_OWORD *)(v24 + 32) = v26;
  *(_BYTE *)(v24 + 81) = v23;
  v27 = (uint64_t)v13;
  ClosureAction.init(actionMetrics:body:)(v13, sub_1119F4, v24);
  v29 = *(_QWORD *)(a1 + 48);
  v28 = *(_QWORD *)(a1 + 56);
  sub_5480((_QWORD *)(a1 + 24), v29);
  v70 = ContentInfo.id.getter(v29, *(_QWORD *)(v28 + 8));
  v69 = v30;
  v32 = *(_QWORD *)(a1 + 48);
  v31 = *(_QWORD *)(a1 + 56);
  sub_5480((_QWORD *)(a1 + 24), v32);
  v33 = ContentInfo.id.getter(v32, *(_QWORD *)(v31 + 8));
  v68 = v34;
  v36 = *(_QWORD *)(a1 + 48);
  v35 = *(_QWORD *)(a1 + 56);
  sub_5480((_QWORD *)(a1 + 24), v36);
  v37 = AssetInfo.isExplicit.getter(v36, v35);
  LOBYTE(v35) = v37;
  static ActionMetrics.notInstrumented.getter(v37);
  v38 = (uint64_t)v73;
  *v73 = v23;
  swift_storeEnumTagMultiPayload(v38, v74, 8);
  v39 = type metadata accessor for ClickData(0);
  v40 = v76;
  v41 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 56))(v76, 1, 1, v39);
  v42 = v77;
  v43 = UUID.init()(v41);
  v44 = UUID.uuidString.getter(v43);
  v46 = v45;
  (*(void (**)(char *, uint64_t))(v78 + 8))(v42, v79);
  v66 = (uint64_t)v40;
  v47 = v75;
  v71 = v27;
  AssetAction.init(id:assetID:instanceID:isExplicit:actionMetrics:kind:clickData:)(v44, v46, v70, v69, v33, v68, v35 & 1, v27, v75, v38, v66);
  v48 = *(_QWORD *)(a1 + 48);
  v49 = *(_QWORD *)(a1 + 56);
  sub_5480((_QWORD *)(a1 + 24), v48);
  v50 = ContentInfo.id.getter(v48, *(_QWORD *)(v49 + 8));
  *(_QWORD *)&v91 = 0xD000000000000010;
  *((_QWORD *)&v91 + 1) = 0x80000000001FCA00;
  v92 = 0u;
  v93 = 0u;
  v94 = 0u;
  v95 = 0u;
  v96 = 0u;
  v97 = 0u;
  v98 = 0u;
  v99 = v50;
  v100 = v51;
  v101 = 2;
  v52 = sub_5DD8(&v91);
  v53 = (uint64_t)v84;
  v54 = static ActionMetrics.notInstrumented.getter(v52);
  v55 = v85;
  *(_QWORD *)(v53 + *(int *)(v85 + 20)) = 0x3FD999999999999ALL;
  static ActionMetrics.notInstrumented.getter(v54);
  v56 = sub_5440(&qword_25ED68);
  v57 = swift_allocObject(v56, 192, 7);
  *(_OWORD *)(v57 + 16) = xmmword_1E1120;
  v58 = v80;
  *(_QWORD *)(v57 + 56) = v80;
  *(_QWORD *)(v57 + 64) = &protocol witness table for ClosureAction;
  v59 = sub_C404((_QWORD *)(v57 + 32));
  v60 = v81;
  v61 = v72;
  (*(void (**)(_QWORD *, char *, uint64_t))(v81 + 16))(v59, v72, v58);
  *(_QWORD *)(v57 + 96) = v82;
  *(_QWORD *)(v57 + 104) = sub_6FD0(&qword_261738, type metadata accessor for AssetAction, (uint64_t)&protocol conformance descriptor for AssetAction);
  v62 = sub_C404((_QWORD *)(v57 + 72));
  sub_1E428(v47, (uint64_t)v62, type metadata accessor for AssetAction);
  *(_QWORD *)(v57 + 136) = v55;
  *(_QWORD *)(v57 + 144) = sub_6FD0(&qword_265FB0, type metadata accessor for DelayAction, (uint64_t)&protocol conformance descriptor for DelayAction);
  v63 = sub_C404((_QWORD *)(v57 + 112));
  sub_1E428(v53, (uint64_t)v63, type metadata accessor for DelayAction);
  v64 = v87;
  sub_BD00((uint64_t)v87, v57 + 152);
  v89 = type metadata accessor for CompoundAction(0);
  v90 = &protocol witness table for CompoundAction;
  sub_C404(&v88);
  CompoundAction.init(actionMetrics:subactions:)(v71, v57);
  _s7BooksUI13AnyPagedFrameVwxx_0(v64);
  sub_224DC(v53, type metadata accessor for DelayAction);
  sub_224DC(v47, type metadata accessor for AssetAction);
  (*(void (**)(char *, uint64_t))(v60 + 8))(v61, v58);
  sub_111A10((_QWORD *)a1);
  return sub_AC68(&v88, v83 + *(int *)(v86 + 28));
}

uint64_t type metadata accessor for ThumbOpinionButton(uint64_t a1)
{
  uint64_t result;

  result = qword_266038;
  if (!qword_266038)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ThumbOpinionButton);
  return result;
}

uint64_t sub_111930(uint64_t *a1, uint64_t a2)
{
  initializeWithCopy for ThumbOpinionButtonViewModel(a2, a1);
  return a2;
}

uint64_t sub_111964(uint64_t *a1, char a2)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v2 = a1[1];
  v3 = *((_BYTE *)a1 + 16);
  v7 = *a1;
  v8 = v2;
  v9 = v3;
  v6 = a2 ^ 1;
  v4 = sub_5440(&qword_2660A0);
  return Binding.wrappedValue.setter(&v6, v4);
}

uint64_t sub_1119C0()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[3]);
  _s7BooksUI13AnyPagedFrameVwxx_0(v0 + 5);
  return swift_deallocObject(v0, 82, 7);
}

uint64_t sub_1119F4()
{
  uint64_t v0;

  return sub_111964((uint64_t *)(v0 + 16), *(_BYTE *)(v0 + 81));
}

_QWORD *sub_111A10(_QWORD *a1)
{
  destroy for ThumbOpinionButtonViewModel(a1);
  return a1;
}

uint64_t ThumbOpinionButton.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t (**v32)@<X0>(uint64_t *@<X8>);
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _OWORD *v42;
  __int128 v43;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _OWORD v51[3];

  v2 = v1;
  v50 = a1;
  v3 = type metadata accessor for PlainButtonStyle(0);
  v4 = *(_QWORD *)(v3 - 8);
  v48 = v3;
  v49 = v4;
  __chkstk_darwin(v3);
  v47 = (char *)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DataStackID(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ThumbOpinionButton(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  __chkstk_darwin(v9);
  v12 = (char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_5440(qword_25E3E8);
  __chkstk_darwin(v13);
  v15 = (char *)&v45 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = (int *)sub_5440(&qword_265FB8);
  __chkstk_darwin(v16);
  v18 = (char *)&v45 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_5440(&qword_265FC0);
  v45 = *(_QWORD *)(v19 - 8);
  v46 = v19;
  __chkstk_darwin(v19);
  v21 = (char *)&v45 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for ButtonRole(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v15, 1, 1, v22);
  sub_BD00(v2 + *(int *)(v9 + 28), (uint64_t)v51);
  sub_1E428(v2, (uint64_t)v12, type metadata accessor for ThumbOpinionButton);
  v23 = *(unsigned __int8 *)(v10 + 80);
  v24 = (v23 + 16) & ~v23;
  v25 = swift_allocObject(&unk_252DD0, v24 + v11, v23 | 7);
  v26 = sub_112344((uint64_t)v12, v25 + v24);
  static DataStackID.additionalEventData.getter(v26);
  AppAnalyticsData.init(_:)(v8);
  v27 = &v18[v16[9]];
  *(_QWORD *)v27 = swift_getKeyPath(&unk_1ED000);
  v27[8] = 0;
  v28 = &v18[v16[10]];
  *(_QWORD *)v28 = swift_getKeyPath(&unk_1ED030);
  v29 = sub_5440(&qword_25E818);
  swift_storeEnumTagMultiPayload(v28, v29, 0);
  v30 = &v18[v16[11]];
  *(_QWORD *)v30 = swift_getKeyPath(&unk_1ED060);
  v30[40] = 0;
  sub_167A4((uint64_t)v15, (uint64_t)&v18[v16[12]], qword_25E3E8);
  v31 = sub_167A4((uint64_t)v51, (uint64_t)&v18[v16[13]], &qword_25E820);
  v32 = (uint64_t (**)@<X0>(uint64_t *@<X8>))&v18[v16[14]];
  *v32 = sub_112388;
  v32[1] = (uint64_t (*)@<X0>(uint64_t *@<X8>))v25;
  v33 = v47;
  PlainButtonStyle.init()(v31);
  v34 = sub_7FD8(&qword_265FC8, &qword_265FB8, (uint64_t)&protocol conformance descriptor for BooksActionButton<A>);
  v35 = sub_6FD0(&qword_2609C0, (uint64_t (*)(uint64_t))&type metadata accessor for PlainButtonStyle, (uint64_t)&protocol conformance descriptor for PlainButtonStyle);
  v36 = v48;
  View.buttonStyle<A>(_:)(v33, v16, v48, v34, v35);
  (*(void (**)(char *, uint64_t))(v49 + 8))(v33, v36);
  sub_B414((uint64_t)v18, &qword_265FB8);
  v37 = _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0();
  _FrameLayout.init(width:height:alignment:)(v51, 0x405F800000000000, 0, 0, 1, v37, v38);
  v40 = v45;
  v39 = v46;
  v41 = v50;
  (*(void (**)(uint64_t, char *, uint64_t))(v45 + 16))(v50, v21, v46);
  v42 = (_OWORD *)(v41 + *(int *)(sub_5440(&qword_265FD0) + 36));
  v43 = v51[1];
  *v42 = v51[0];
  v42[1] = v43;
  v42[2] = v51[2];
  return (*(uint64_t (**)(char *, uint64_t))(v40 + 8))(v21, v39);
}

uint64_t sub_111E20@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  double v26;
  void (*v27)(char *, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  double v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  double v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  double v53;

  v51 = a2;
  v52 = a1;
  v2 = type metadata accessor for FloatingPointRoundingRule(0);
  v49 = *(_QWORD *)(v2 - 8);
  v50 = v2;
  __chkstk_darwin(v2);
  v48 = (char *)&v44 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = sub_5440(&qword_2627D0);
  __chkstk_darwin(v47);
  v46 = (uint64_t)&v44 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = type metadata accessor for SizeConstants.Environment(0);
  __chkstk_darwin(v45);
  v6 = (char *)&v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Font.TextStyle(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v44 - v12;
  v44 = sub_5440(&qword_262710);
  __chkstk_darwin(v44);
  v15 = (char *)&v44 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for SizeConstants(0);
  v17 = __chkstk_darwin(v16);
  v19 = (char *)&v44 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v21 = (char *)&v44 - v20;
  type metadata accessor for ThumbOpinionButton(0);
  sub_3168C((uint64_t)v21);
  (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v13, enum case for Font.TextStyle.body(_:), v7);
  sub_1E428((uint64_t)v21, (uint64_t)v19, type metadata accessor for SizeConstants);
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v11, v13, v7);
  sub_1E428((uint64_t)v19, (uint64_t)v15, type metadata accessor for SizeConstants);
  sub_1E428((uint64_t)v19, (uint64_t)v6, type metadata accessor for SizeConstants.Environment);
  v22 = v45;
  v23 = (uint64_t)&v6[*(int *)(v45 + 24)];
  v24 = sub_173CC((uint64_t)v11, v23);
  v25 = type metadata accessor for DynamicTypeSize(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 8))(v23, v25);
  v26 = 1.0;
  if ((*(_QWORD *)&v24 & 0xFFFFFFFFFFFFFLL) == 0)
    v26 = v24;
  if ((~*(_QWORD *)&v24 & 0x7FF0000000000000) == 0)
    v24 = v26;
  sub_224DC((uint64_t)v19, type metadata accessor for SizeConstants);
  v27 = *(void (**)(char *, uint64_t))(v8 + 8);
  v27(v11, v7);
  v28 = *(int *)(v44 + 36);
  *(double *)&v15[v28] = v24;
  v27(v13, v7);
  sub_224DC((uint64_t)v21, type metadata accessor for SizeConstants);
  v29 = v46;
  sub_1E428((uint64_t)v15, v46, type metadata accessor for SizeConstants.Environment);
  v30 = *(_QWORD *)&v15[v28];
  v31 = *(int *)(v47 + 36);
  *(_QWORD *)(v29 + v31) = v30;
  sub_B414((uint64_t)v15, &qword_262710);
  v32 = KeyedEncodingContainer.encode<A>(_:forKey:)(*(double *)(v29 + v31)) * 8.0;
  v33 = KeyedEncodingContainer.encode<A>(_:forKey:)(*(double *)(v29 + *(int *)(v22 + 28)));
  v35 = (uint64_t)v48;
  v34 = v49;
  v36 = v50;
  (*(void (**)(char *, _QWORD, uint64_t))(v49 + 104))(v48, enum case for FloatingPointRoundingRule.toNearestOrAwayFromZero(_:), v50);
  v53 = v32;
  sub_13603C(v35, v33);
  v37 = v53;
  (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v35, v36);
  v38 = sub_B414(v29, &qword_2627D0);
  v39 = static HorizontalAlignment.center.getter(v38);
  v40 = v51;
  *v51 = v39;
  *((double *)v40 + 1) = v37;
  *((_BYTE *)v40 + 16) = 0;
  v41 = v40;
  v42 = sub_5440(&qword_266080);
  return sub_1123C4(v52, (uint64_t)v41 + *(int *)(v42 + 44));
}

uint64_t sub_112208()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;

  v1 = (int *)type metadata accessor for ThumbOpinionButton(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v0 + v4;
  swift_release(*(_QWORD *)(v0 + v4));
  swift_release(*(_QWORD *)(v0 + v4 + 8));
  _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)(v0 + v4 + 24));
  v7 = (_QWORD *)(v0 + v4 + v1[5]);
  v8 = sub_5440(&qword_25F548);
  if (swift_getEnumCaseMultiPayload(v7, v8) == 1)
  {
    v9 = (char *)v7 + *(int *)(type metadata accessor for SizeConstants.Environment(0) + 24);
    v10 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  }
  else
  {
    swift_release(*v7);
  }
  v11 = (_QWORD *)(v6 + v1[6]);
  v12 = sub_5440(&qword_25F1E8);
  if (swift_getEnumCaseMultiPayload(v11, v12) == 1)
  {
    v13 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v11, v13);
  }
  else
  {
    swift_release(*v11);
  }
  _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)(v6 + v1[7]));
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_112344(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ThumbOpinionButton(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_112388@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ThumbOpinionButton(0) - 8) + 80);
  return sub_111E20(v1 + ((v3 + 16) & ~v3), a1);
}

uint64_t sub_1123C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t KeyPath;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t ObjCClassFromMetadata;
  id v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  const char *v42;
  char *v43;
  id v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  id v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  _BOOL8 v65;
  int v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v80;
  char *v81;
  char *v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD v92[3];

  v91 = a2;
  v3 = type metadata accessor for Locale(0);
  v88 = *(_QWORD *)(v3 - 8);
  v89 = v3;
  v4 = __chkstk_darwin(v3);
  v83 = (char *)&v80 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v87 = (char *)&v80 - v6;
  v7 = type metadata accessor for String.LocalizationValue(0);
  v85 = *(_QWORD *)(v7 - 8);
  v86 = v7;
  v8 = __chkstk_darwin(v7);
  v81 = (char *)&v80 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v84 = (char *)&v80 - v10;
  v82 = (char *)sub_5440(&qword_266088);
  v11 = *((_QWORD *)v82 - 1);
  __chkstk_darwin(v82);
  v13 = (char *)&v80 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v80 = sub_5440(&qword_266090);
  v14 = __chkstk_darwin(v80);
  v90 = (uint64_t)&v80 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v14);
  v18 = (char *)&v80 - v17;
  __chkstk_darwin(v16);
  v20 = (char *)&v80 - v19;
  if (*(_BYTE *)(a1 + 64))
    v21 = 0xD000000000000012;
  else
    v21 = 0xD000000000000014;
  if (*(_BYTE *)(a1 + 64))
    v22 = 0x80000000001FCAE0;
  else
    v22 = 0x80000000001FCA20;
  v23 = Image.init(systemName:)(v21, v22);
  v24 = static Font.largeTitle.getter();
  KeyPath = swift_getKeyPath(&unk_1ED228);
  v92[0] = v23;
  v92[1] = KeyPath;
  v92[2] = v24;
  v26 = sub_5440(&qword_2659C0);
  v27 = sub_106CC0();
  View.bold(_:)(1, v26, v27);
  swift_release(v24);
  swift_release(KeyPath);
  swift_release(v23);
  v28 = sub_112974();
  v29 = (uint64_t)v82;
  (*(void (**)(char *, char *, char *))(v11 + 16))(v18, v13, v82);
  *(_QWORD *)&v18[*(int *)(v80 + 36)] = v28;
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v29);
  v82 = v20;
  sub_167A4((uint64_t)v18, (uint64_t)v20, &qword_266090);
  v30 = v84;
  if (*(_BYTE *)(a1 + 64) == 1)
  {
    v31 = String.LocalizationValue.init(stringLiteral:)(0x64656B694CLL, 0xE500000000000000);
    v32 = v87;
    static Locale.current.getter(v31);
    v34 = v85;
    v33 = v86;
    v35 = v81;
    (*(void (**)(char *, char *, uint64_t))(v85 + 16))(v81, v30, v86);
    v36 = type metadata accessor for BundleFinder();
    ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v36);
    v38 = objc_msgSend((id)objc_opt_self(NSBundle), "bundleForClass:", ObjCClassFromMetadata);
    v40 = v88;
    v39 = v89;
    v41 = v83;
    (*(void (**)(char *, char *, uint64_t))(v88 + 16))(v83, v32, v89);
    v42 = "Label for the thumbs up button in context menu I've Read This sheet";
    v43 = v35;
    v44 = v38;
    v45 = v41;
    v46 = 67;
  }
  else
  {
    v47 = String.LocalizationValue.init(stringLiteral:)(0x64656B696C736944, 0xE800000000000000);
    v32 = v87;
    static Locale.current.getter(v47);
    v34 = v85;
    v33 = v86;
    v48 = v81;
    (*(void (**)(char *, char *, uint64_t))(v85 + 16))(v81, v30, v86);
    v49 = type metadata accessor for BundleFinder();
    v50 = swift_getObjCClassFromMetadata(v49);
    v51 = objc_msgSend((id)objc_opt_self(NSBundle), "bundleForClass:", v50);
    v40 = v88;
    v39 = v89;
    v52 = v83;
    (*(void (**)(char *, char *, uint64_t))(v88 + 16))(v83, v32, v89);
    v42 = "Label for the thumbs down button in context menu I've Read This sheet";
    v43 = v48;
    v44 = v51;
    v45 = v52;
    v46 = 69;
  }
  v53 = String.init(localized:table:bundle:locale:comment:)(v43, 0, 0, v44, v45, v42, v46, 2);
  v55 = v54;
  (*(void (**)(char *, uint64_t))(v40 + 8))(v32, v39);
  v56 = (*(uint64_t (**)(char *, uint64_t))(v34 + 8))(v30, v33);
  v57 = static Font.subheadline.getter(v56);
  v58 = Text.font(_:)(v57, v53, v55, 0, _swiftEmptyArrayStorage);
  v60 = v59;
  v62 = v61;
  v64 = v63;
  swift_bridgeObjectRelease(v55);
  swift_release(v57);
  v65 = sub_112B44();
  if (v65)
    v66 = static HierarchicalShapeStyle.primary.getter(v65);
  else
    v66 = static HierarchicalShapeStyle.secondary.getter(v65);
  v67 = v62 & 1;
  LODWORD(v92[0]) = v66;
  v68 = Text.foregroundStyle<A>(_:)(v92, v58, v60, v62 & 1, v64, &type metadata for HierarchicalShapeStyle, &protocol witness table for HierarchicalShapeStyle);
  v70 = v69;
  v72 = v71;
  v74 = v73 & 1;
  sub_2B574(v58, v60, v67);
  swift_bridgeObjectRelease(v64);
  v75 = (uint64_t)v82;
  v76 = v90;
  sub_113ECC((uint64_t)v82, v90);
  v77 = v91;
  sub_113ECC(v76, v91);
  v78 = v77 + *(int *)(sub_5440(&qword_266098) + 48);
  *(_QWORD *)v78 = v68;
  *(_QWORD *)(v78 + 8) = v70;
  *(_BYTE *)(v78 + 16) = v74;
  *(_QWORD *)(v78 + 24) = v72;
  sub_34B1C(v68, v70, v74);
  swift_bridgeObjectRetain(v72);
  sub_B414(v75, &qword_266090);
  sub_2B574(v68, v70, v74);
  swift_bridgeObjectRelease(v72);
  return sub_B414(v76, &qword_266090);
}

uint64_t sub_112974()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char v11;
  void (*v12)(char *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v17;
  uint64_t v18;

  v0 = type metadata accessor for ColorScheme(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v18 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for ColorConstants.Environment(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for ColorConstants(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (sub_112B44())
  {
    type metadata accessor for ThumbOpinionButton(0);
    _s7BooksUI18BuyButtonExternalsV6colorsAA14ColorConstantsVvg_0((uint64_t)v9);
    sub_1E428((uint64_t)v9, (uint64_t)v6, type metadata accessor for ColorConstants.Environment);
    (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for ColorScheme.dark(_:), v0);
    v10 = sub_6FD0((unint64_t *)&qword_25FD60, (uint64_t (*)(uint64_t))&type metadata accessor for ColorScheme, (uint64_t)&protocol conformance descriptor for ColorScheme);
    v11 = dispatch thunk of static Equatable.== infix(_:_:)(v6, v3, v0, v10);
    v12 = *(void (**)(char *, uint64_t))(v1 + 8);
    v12(v3, v0);
    v13 = ((uint64_t (*)(char *, uint64_t))v12)(v6, v0);
    if ((v11 & 1) != 0)
      v14 = _s7BooksUI14ColorConstantsV25vibrantPrimaryButtonLabel05SwiftB00C0Vvg_0();
    else
      v14 = static Color.black.getter(v13);
    v17 = v14;
    sub_224DC((uint64_t)v9, type metadata accessor for ColorConstants);
    return v17;
  }
  else
  {
    v15 = objc_msgSend((id)objc_opt_self(UIColor), "systemFillColor");
    return Color.init(uiColor:)(v15);
  }
}

BOOL sub_112B44()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  int v11;
  uint64_t (*v12)(_QWORD);
  uint64_t v13;
  char v14;
  uint64_t v15;
  int v16;
  char v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;

  v1 = v0;
  v2 = type metadata accessor for ThumbOpinionButton(0);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __chkstk_darwin(v3);
  v8 = (char *)&v22 - v7;
  __chkstk_darwin(v6);
  v10 = (char *)&v22 - v9;
  v11 = *(unsigned __int8 *)(v0 + 64);
  sub_1E428(v1, (uint64_t)&v22 - v9, v12);
  if (v11 == 1)
  {
    v13 = *((_QWORD *)v10 + 1);
    v14 = v10[16];
    v23 = *(_QWORD *)v10;
    v24 = v13;
    v25 = v14;
    v15 = sub_5440(&qword_2660A0);
    Binding.wrappedValue.getter(&v26, v15);
    sub_224DC((uint64_t)v10, type metadata accessor for ThumbOpinionButton);
    v16 = v26;
    sub_1E428(v1, (uint64_t)v8, type metadata accessor for ThumbOpinionButton);
    if (!v16)
    {
      sub_224DC((uint64_t)v8, type metadata accessor for ThumbOpinionButton);
      return 1;
    }
  }
  else
  {
    sub_224DC((uint64_t)v10, type metadata accessor for ThumbOpinionButton);
    sub_1E428(v1, (uint64_t)v8, type metadata accessor for ThumbOpinionButton);
  }
  v18 = v8[64];
  sub_1E428((uint64_t)v8, (uint64_t)v5, type metadata accessor for ThumbOpinionButton);
  if ((v18 & 1) != 0)
  {
    sub_224DC((uint64_t)v5, type metadata accessor for ThumbOpinionButton);
    sub_224DC((uint64_t)v8, type metadata accessor for ThumbOpinionButton);
    return 0;
  }
  else
  {
    v19 = *((_QWORD *)v5 + 1);
    v20 = v5[16];
    v23 = *(_QWORD *)v5;
    v24 = v19;
    v25 = v20;
    v21 = sub_5440(&qword_2660A0);
    Binding.wrappedValue.getter(&v26, v21);
    sub_224DC((uint64_t)v5, type metadata accessor for ThumbOpinionButton);
    sub_224DC((uint64_t)v8, type metadata accessor for ThumbOpinionButton);
    return v26 == 1;
  }
}

unint64_t sub_112D4C()
{
  unint64_t result;

  result = qword_265FD8;
  if (!qword_265FD8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ThumbOpinionButtonState, &type metadata for ThumbOpinionButtonState);
    atomic_store(result, (unint64_t *)&qword_265FD8);
  }
  return result;
}

uint64_t sub_112D90(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &opaque type descriptor for <<opaque return type of ThumbOpinionButton.body>>, 1);
}

uint64_t storeEnumTagSinglePayload for ThumbOpinionButtonState(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_112DEC + 4 * byte_1ECFA5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_112E20 + 4 * byte_1ECFA0[v4]))();
}

uint64_t sub_112E20(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_112E28(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x112E30);
  return result;
}

uint64_t sub_112E3C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x112E44);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_112E48(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_112E50(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ThumbOpinionButtonState()
{
  return &type metadata for ThumbOpinionButtonState;
}

uint64_t destroy for ThumbOpinionButtonViewModel(_QWORD *a1)
{
  swift_release(*a1);
  swift_release(a1[1]);
  return _s7BooksUI13AnyPagedFrameVwxx_0(a1 + 3);
}

uint64_t initializeWithCopy for ThumbOpinionButtonViewModel(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  __int128 v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t *, uint64_t);

  v4 = *a2;
  v5 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
  v6 = a2 + 3;
  v7 = *((_OWORD *)a2 + 3);
  *(_OWORD *)(a1 + 48) = v7;
  v8 = v7;
  v9 = **(void (***)(uint64_t, uint64_t *, uint64_t))(v7 - 8);
  swift_retain(v4);
  swift_retain(v5);
  v9(a1 + 24, v6, v8);
  *(_BYTE *)(a1 + 64) = *((_BYTE *)a2 + 64);
  return a1;
}

uint64_t *assignWithCopy for ThumbOpinionButtonViewModel(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a1;
  v5 = *a2;
  *a1 = *a2;
  swift_retain(v5);
  swift_release(v4);
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_retain(v6);
  swift_release(v7);
  *((_BYTE *)a1 + 16) = *((_BYTE *)a2 + 16);
  sub_142F8(a1 + 3, a2 + 3);
  *((_BYTE *)a1 + 64) = *((_BYTE *)a2 + 64);
  return a1;
}

__n128 initializeWithTake for ThumbOpinionButtonViewModel(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t *assignWithTake for ThumbOpinionButtonViewModel(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *a1;
  *a1 = *a2;
  swift_release(v4);
  v5 = a1[1];
  a1[1] = a2[1];
  swift_release(v5);
  *((_BYTE *)a1 + 16) = *((_BYTE *)a2 + 16);
  _s7BooksUI13AnyPagedFrameVwxx_0(a1 + 3);
  *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 3);
  *(_OWORD *)(a1 + 5) = *(_OWORD *)(a2 + 5);
  a1[7] = a2[7];
  *((_BYTE *)a1 + 64) = *((_BYTE *)a2 + 64);
  return a1;
}

uint64_t getEnumTagSinglePayload for ThumbOpinionButtonViewModel(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 65))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ThumbOpinionButtonViewModel(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 64) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 65) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 65) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ThumbOpinionButtonViewModel()
{
  return &type metadata for ThumbOpinionButtonViewModel;
}

uint64_t initializeBufferWithCopyOfBuffer for ThumbOpinionButton(uint64_t a1, uint64_t *a2, int *a3)
{
  int v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t *v9;
  __int128 v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t *, uint64_t, __n128);
  __n128 v13;
  uint64_t v14;
  _WORD *v15;
  _WORD *v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;

  v4 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v5 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = v5 + ((v4 + 16) & ~(unint64_t)v4);
    swift_retain(v5);
  }
  else
  {
    v8 = a2[1];
    *(_QWORD *)(a1 + 8) = v8;
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    v9 = a2 + 3;
    v10 = *((_OWORD *)a2 + 3);
    *(_OWORD *)(a1 + 48) = v10;
    v11 = v10;
    v12 = **(void (***)(uint64_t, uint64_t *, uint64_t, __n128))(v10 - 8);
    swift_retain(v5);
    v13 = swift_retain(v8);
    v12(a1 + 24, v9, v11, v13);
    *(_BYTE *)(a1 + 64) = *((_BYTE *)a2 + 64);
    v14 = a3[5];
    v15 = (_WORD *)(a1 + v14);
    v16 = (_WORD *)((char *)a2 + v14);
    v17 = sub_5440(&qword_25F548);
    if (swift_getEnumCaseMultiPayload(v16, v17) == 1)
    {
      *v15 = *v16;
      v18 = (int *)type metadata accessor for SizeConstants.Environment(0);
      v19 = v18[6];
      v20 = (char *)v15 + v19;
      v21 = (char *)v16 + v19;
      v22 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v20, v21, v22);
      *(_QWORD *)((char *)v15 + v18[7]) = *(_QWORD *)((char *)v16 + v18[7]);
      v23 = v18[8];
      v24 = (char *)v15 + v23;
      v25 = (char *)v16 + v23;
      v24[2] = v25[2];
      *(_WORD *)v24 = *(_WORD *)v25;
      v26 = 1;
    }
    else
    {
      v27 = *(_QWORD *)v16;
      *(_QWORD *)v15 = *(_QWORD *)v16;
      swift_retain(v27);
      v26 = 0;
    }
    swift_storeEnumTagMultiPayload(v15, v17, v26);
    v28 = a3[6];
    v29 = (uint64_t *)(a1 + v28);
    v30 = (uint64_t *)((char *)a2 + v28);
    v31 = sub_5440(&qword_25F1E8);
    if (swift_getEnumCaseMultiPayload(v30, v31) == 1)
    {
      v32 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v32 - 8) + 16))(v29, v30, v32);
      v33 = 1;
    }
    else
    {
      v34 = *v30;
      *v29 = *v30;
      swift_retain(v34);
      v33 = 0;
    }
    swift_storeEnumTagMultiPayload(v29, v31, v33);
    v35 = a3[7];
    v36 = *(_OWORD *)((char *)a2 + v35 + 24);
    *(_OWORD *)(a1 + v35 + 24) = v36;
    (**(void (***)(void))(v36 - 8))();
  }
  return a1;
}

uint64_t destroy for ThumbOpinionButton(_QWORD *a1, int *a2)
{
  _QWORD *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;

  swift_release(*a1);
  swift_release(a1[1]);
  _s7BooksUI13AnyPagedFrameVwxx_0(a1 + 3);
  v4 = (_QWORD *)((char *)a1 + a2[5]);
  v5 = sub_5440(&qword_25F548);
  if (swift_getEnumCaseMultiPayload(v4, v5) == 1)
  {
    v6 = (char *)v4 + *(int *)(type metadata accessor for SizeConstants.Environment(0) + 24);
    v7 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  }
  else
  {
    swift_release(*v4);
  }
  v8 = (_QWORD *)((char *)a1 + a2[6]);
  v9 = sub_5440(&qword_25F1E8);
  if (swift_getEnumCaseMultiPayload(v8, v9) == 1)
  {
    v10 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v8, v10);
  }
  else
  {
    swift_release(*v8);
  }
  return _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)((char *)a1 + a2[7]));
}

uint64_t initializeWithCopy for ThumbOpinionButton(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  __int128 v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t *, uint64_t, __n128);
  __n128 v12;
  uint64_t v13;
  _WORD *v14;
  _WORD *v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;

  v6 = *a2;
  v7 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v7;
  *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
  v8 = a2 + 3;
  v9 = *((_OWORD *)a2 + 3);
  *(_OWORD *)(a1 + 48) = v9;
  v10 = v9;
  v11 = **(void (***)(uint64_t, uint64_t *, uint64_t, __n128))(v9 - 8);
  swift_retain(v6);
  v12 = swift_retain(v7);
  v11(a1 + 24, v8, v10, v12);
  *(_BYTE *)(a1 + 64) = *((_BYTE *)a2 + 64);
  v13 = a3[5];
  v14 = (_WORD *)(a1 + v13);
  v15 = (_WORD *)((char *)a2 + v13);
  v16 = sub_5440(&qword_25F548);
  if (swift_getEnumCaseMultiPayload(v15, v16) == 1)
  {
    *v14 = *v15;
    v17 = (int *)type metadata accessor for SizeConstants.Environment(0);
    v18 = v17[6];
    v19 = (char *)v14 + v18;
    v20 = (char *)v15 + v18;
    v21 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v19, v20, v21);
    *(_QWORD *)((char *)v14 + v17[7]) = *(_QWORD *)((char *)v15 + v17[7]);
    v22 = v17[8];
    v23 = (char *)v14 + v22;
    v24 = (char *)v15 + v22;
    v23[2] = v24[2];
    *(_WORD *)v23 = *(_WORD *)v24;
    v25 = 1;
  }
  else
  {
    v26 = *(_QWORD *)v15;
    *(_QWORD *)v14 = *(_QWORD *)v15;
    swift_retain(v26);
    v25 = 0;
  }
  swift_storeEnumTagMultiPayload(v14, v16, v25);
  v27 = a3[6];
  v28 = (uint64_t *)(a1 + v27);
  v29 = (uint64_t *)((char *)a2 + v27);
  v30 = sub_5440(&qword_25F1E8);
  if (swift_getEnumCaseMultiPayload(v29, v30) == 1)
  {
    v31 = type metadata accessor for ColorScheme(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v31 - 8) + 16))(v28, v29, v31);
    v32 = 1;
  }
  else
  {
    v33 = *v29;
    *v28 = *v29;
    swift_retain(v33);
    v32 = 0;
  }
  swift_storeEnumTagMultiPayload(v28, v30, v32);
  v34 = a3[7];
  v35 = *(_OWORD *)((char *)a2 + v34 + 24);
  *(_OWORD *)(a1 + v34 + 24) = v35;
  (**(void (***)(void))(v35 - 8))();
  return a1;
}

uint64_t *assignWithCopy for ThumbOpinionButton(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  _BYTE *v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  _BYTE *v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v6 = *a1;
  v7 = *a2;
  *a1 = *a2;
  swift_retain(v7);
  swift_release(v6);
  v8 = a2[1];
  v9 = a1[1];
  a1[1] = v8;
  swift_retain(v8);
  swift_release(v9);
  *((_BYTE *)a1 + 16) = *((_BYTE *)a2 + 16);
  sub_142F8(a1 + 3, a2 + 3);
  *((_BYTE *)a1 + 64) = *((_BYTE *)a2 + 64);
  if (a1 != a2)
  {
    v10 = a3[5];
    v11 = (char *)a1 + v10;
    v12 = (char *)a2 + v10;
    sub_B414((uint64_t)a1 + v10, &qword_25F548);
    v13 = sub_5440(&qword_25F548);
    if (swift_getEnumCaseMultiPayload(v12, v13) == 1)
    {
      *v11 = *v12;
      v11[1] = v12[1];
      v14 = (int *)type metadata accessor for SizeConstants.Environment(0);
      v15 = v14[6];
      v16 = &v11[v15];
      v17 = &v12[v15];
      v18 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
      *(_QWORD *)&v11[v14[7]] = *(_QWORD *)&v12[v14[7]];
      v19 = v14[8];
      v20 = &v11[v19];
      v21 = &v12[v19];
      v22 = v21[2];
      *(_WORD *)v20 = *(_WORD *)v21;
      v20[2] = v22;
      v23 = 1;
    }
    else
    {
      v24 = *(_QWORD *)v12;
      *(_QWORD *)v11 = *(_QWORD *)v12;
      swift_retain(v24);
      v23 = 0;
    }
    swift_storeEnumTagMultiPayload(v11, v13, v23);
    v25 = a3[6];
    v26 = (uint64_t *)((char *)a1 + v25);
    v27 = (uint64_t *)((char *)a2 + v25);
    sub_B414((uint64_t)a1 + v25, &qword_25F1E8);
    v28 = sub_5440(&qword_25F1E8);
    if (swift_getEnumCaseMultiPayload(v27, v28) == 1)
    {
      v29 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v29 - 8) + 16))(v26, v27, v29);
      v30 = 1;
    }
    else
    {
      v31 = *v27;
      *v26 = *v27;
      swift_retain(v31);
      v30 = 0;
    }
    swift_storeEnumTagMultiPayload(v26, v28, v30);
  }
  sub_142F8((uint64_t *)((char *)a1 + a3[7]), (uint64_t *)((char *)a2 + a3[7]));
  return a1;
}

uint64_t initializeWithTake for ThumbOpinionButton(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  _WORD *v9;
  _WORD *v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  void *v21;
  const void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;

  v6 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v6;
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  v7 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v7;
  v8 = a3[5];
  v9 = (_WORD *)(a1 + v8);
  v10 = (_WORD *)(a2 + v8);
  v11 = sub_5440(&qword_25F548);
  if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
  {
    *v9 = *v10;
    v12 = (int *)type metadata accessor for SizeConstants.Environment(0);
    v13 = v12[6];
    v14 = (char *)v9 + v13;
    v15 = (char *)v10 + v13;
    v16 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v14, v15, v16);
    *(_QWORD *)((char *)v9 + v12[7]) = *(_QWORD *)((char *)v10 + v12[7]);
    v17 = v12[8];
    v18 = (char *)v9 + v17;
    v19 = (char *)v10 + v17;
    v18[2] = v19[2];
    *(_WORD *)v18 = *(_WORD *)v19;
    swift_storeEnumTagMultiPayload(v9, v11, 1);
  }
  else
  {
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  v20 = a3[6];
  v21 = (void *)(a1 + v20);
  v22 = (const void *)(a2 + v20);
  v23 = sub_5440(&qword_25F1E8);
  if (swift_getEnumCaseMultiPayload(v22, v23) == 1)
  {
    v24 = type metadata accessor for ColorScheme(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v24 - 8) + 32))(v21, v22, v24);
    swift_storeEnumTagMultiPayload(v21, v23, 1);
  }
  else
  {
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
  }
  v25 = a3[7];
  v26 = a1 + v25;
  v27 = a2 + v25;
  v28 = *(_OWORD *)(v27 + 16);
  *(_OWORD *)v26 = *(_OWORD *)v27;
  *(_OWORD *)(v26 + 16) = v28;
  *(_QWORD *)(v26 + 32) = *(_QWORD *)(v27 + 32);
  return a1;
}

uint64_t *assignWithTake for ThumbOpinionButton(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _WORD *v9;
  _WORD *v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;

  v6 = *a1;
  *a1 = *a2;
  swift_release(v6);
  v7 = a1[1];
  a1[1] = a2[1];
  swift_release(v7);
  *((_BYTE *)a1 + 16) = *((_BYTE *)a2 + 16);
  _s7BooksUI13AnyPagedFrameVwxx_0(a1 + 3);
  *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 3);
  *(_OWORD *)(a1 + 5) = *(_OWORD *)(a2 + 5);
  a1[7] = a2[7];
  *((_BYTE *)a1 + 64) = *((_BYTE *)a2 + 64);
  if (a1 != a2)
  {
    v8 = a3[5];
    v9 = (_WORD *)((char *)a1 + v8);
    v10 = (_WORD *)((char *)a2 + v8);
    sub_B414((uint64_t)a1 + v8, &qword_25F548);
    v11 = sub_5440(&qword_25F548);
    if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
    {
      *v9 = *v10;
      v12 = (int *)type metadata accessor for SizeConstants.Environment(0);
      v13 = v12[6];
      v14 = (char *)v9 + v13;
      v15 = (char *)v10 + v13;
      v16 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v14, v15, v16);
      *(_QWORD *)((char *)v9 + v12[7]) = *(_QWORD *)((char *)v10 + v12[7]);
      v17 = v12[8];
      v18 = (char *)v9 + v17;
      v19 = (char *)v10 + v17;
      v18[2] = v19[2];
      *(_WORD *)v18 = *(_WORD *)v19;
      swift_storeEnumTagMultiPayload(v9, v11, 1);
    }
    else
    {
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    }
    v20 = a3[6];
    v21 = (char *)a1 + v20;
    v22 = (char *)a2 + v20;
    sub_B414((uint64_t)a1 + v20, &qword_25F1E8);
    v23 = sub_5440(&qword_25F1E8);
    if (swift_getEnumCaseMultiPayload(v22, v23) == 1)
    {
      v24 = type metadata accessor for ColorScheme(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 32))(v21, v22, v24);
      swift_storeEnumTagMultiPayload(v21, v23, 1);
    }
    else
    {
      memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    }
  }
  v25 = a3[7];
  v26 = (uint64_t)a1 + v25;
  v27 = (uint64_t)a2 + v25;
  _s7BooksUI13AnyPagedFrameVwxx_0((uint64_t *)((char *)a1 + v25));
  v28 = *(_OWORD *)(v27 + 16);
  *(_OWORD *)v26 = *(_OWORD *)v27;
  *(_OWORD *)(v26 + 16) = v28;
  *(_QWORD *)(v26 + 32) = *(_QWORD *)(v27 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for ThumbOpinionButton(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_113BC0);
}

uint64_t sub_113BC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_5440(&qword_25F558);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 20);
    }
    else
    {
      v10 = sub_5440(&qword_25F210);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 24);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for ThumbOpinionButton(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_113C74);
}

uint64_t sub_113C74(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v8 = sub_5440(&qword_25F558);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 20);
    }
    else
    {
      v10 = sub_5440(&qword_25F210);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 24);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

void sub_113D18(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[4];

  v6[0] = "A";
  sub_2ADCC(319, (unint64_t *)&qword_25F5C8, type metadata accessor for SizeConstants);
  if (v3 <= 0x3F)
  {
    v6[1] = *(_QWORD *)(v2 - 8) + 64;
    sub_2ADCC(319, (unint64_t *)&qword_25F298, type metadata accessor for ColorConstants);
    if (v5 <= 0x3F)
    {
      v6[2] = *(_QWORD *)(v4 - 8) + 64;
      v6[3] = &unk_1ED210;
      swift_initStructMetadata(a1, 256, 4, v6, a1 + 16);
    }
  }
}

unint64_t sub_113DD4()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[4];

  result = qword_266078;
  if (!qword_266078)
  {
    v1 = sub_7EF8(&qword_265FD0);
    v2[0] = sub_7EF8(&qword_265FB8);
    v2[1] = type metadata accessor for PlainButtonStyle(255);
    v2[2] = sub_7FD8(&qword_265FC8, &qword_265FB8, (uint64_t)&protocol conformance descriptor for BooksActionButton<A>);
    v2[3] = sub_6FD0(&qword_2609C0, (uint64_t (*)(uint64_t))&type metadata accessor for PlainButtonStyle, (uint64_t)&protocol conformance descriptor for PlainButtonStyle);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_266078);
  }
  return result;
}

uint64_t sub_113ECC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_5440(&qword_266090);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

Swift::Bool __swiftcall ListItemThumbnailViewModel.isSmallGenreStyle(isCompact:)(Swift::Bool isCompact)
{
  uint64_t v1;
  unsigned __int8 v3;
  Swift::Bool v4;
  uint64_t v5;
  _QWORD v7[6];
  unsigned __int8 v8;
  unsigned __int8 v9;
  char v10;

  sub_2FA6C(v1, (uint64_t)v7);
  if ((v10 & 1) != 0)
    goto LABEL_5;
  v3 = v8;
  if (!isCompact && v9 != 255)
    v3 = v9;
  if (v3)
  {
LABEL_5:
    v4 = 0;
  }
  else
  {
    v5 = 7;
    if (isCompact || v9 == 255)
      v5 = 5;
    v4 = LOBYTE(v7[v5]) == 1;
  }
  _s7BooksUI13AnyPagedFrameVwxx_0(v7);
  return v4;
}

double ListItemThumbnailViewModel.unscaledThumbnailSize(isCompact:)(char a1)
{
  uint64_t v1;
  int v3;
  unsigned __int8 v6;
  _QWORD v7[5];
  unsigned __int8 v8;
  unsigned __int8 v9;
  unsigned __int8 v10;
  char v11;

  sub_2FA6C(v1, (uint64_t)v7);
  if ((v11 & 1) == 0)
  {
    if (a1 & 1 | (v10 == 255))
      v6 = v9;
    else
      v6 = v10;
    __asm { BR              X10 }
  }
  v3 = v8;
  _s7BooksUI13AnyPagedFrameVwxx_0(v7);
  if (v3)
    return 97.0;
  else
    return 50.0;
}

void sub_114080(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  _s7BooksUI13AnyPagedFrameVwxx_0((uint64_t *)va);
  JUMPOUT(0x114018);
}

void sub_1140A0(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  _s7BooksUI13AnyPagedFrameVwxx_0((uint64_t *)va);
  JUMPOUT(0x114018);
}

void sub_1140C8(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  _s7BooksUI13AnyPagedFrameVwxx_0((uint64_t *)va);
  JUMPOUT(0x114018);
}

void sub_1140FC(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  _s7BooksUI13AnyPagedFrameVwxx_0((uint64_t *)va);
  JUMPOUT(0x114018);
}

void sub_11415C(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  _s7BooksUI13AnyPagedFrameVwxx_0((uint64_t *)va);
  JUMPOUT(0x114018);
}

uint64_t static ListItemThumbnailStyle.single(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  char v5;
  uint64_t result;

  v4 = *a2;
  v5 = *((_BYTE *)a2 + 8);
  result = sub_BD00(a1, a3);
  *(_QWORD *)(a3 + 40) = v4;
  *(_BYTE *)(a3 + 48) = v5;
  *(_QWORD *)(a3 + 56) = 0;
  *(_WORD *)(a3 + 64) = 255;
  return result;
}

uint64_t ListItemThumbnailViewModel.init(style:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2F504(a1, a2);
}

double ListItemThumbnailViewModel.unscaledTrailingPadding(isCompact:)(char a1)
{
  uint64_t v1;
  int v3;
  double result;
  unsigned __int8 v5;
  _QWORD v6[5];
  unsigned __int8 v7;
  unsigned __int8 v8;
  unsigned __int8 v9;
  char v10;

  sub_2FA6C(v1, (uint64_t)v6);
  if ((v10 & 1) == 0)
  {
    v5 = v8;
    if (!(a1 & 1 | (v9 == 255)))
      v5 = v9;
    __asm { BR              X10 }
  }
  v3 = v7;
  _s7BooksUI13AnyPagedFrameVwxx_0(v6);
  result = 10.0;
  if (v3)
    return 12.0;
  return result;
}

uint64_t ListItemThumbnailViewModel.style.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_2FA6C(v1, a1);
}

unint64_t sub_1142A8()
{
  unint64_t result;

  result = qword_2660A8;
  if (!qword_2660A8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for SingleThumbnailSubStyle, &type metadata for SingleThumbnailSubStyle);
    atomic_store(result, (unint64_t *)&qword_2660A8);
  }
  return result;
}

unint64_t sub_1142F0()
{
  unint64_t result;

  result = qword_2660B0;
  if (!qword_2660B0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for SeriesThumbnailStyle, &type metadata for SeriesThumbnailStyle);
    atomic_store(result, (unint64_t *)&qword_2660B0);
  }
  return result;
}

uint64_t initializeWithCopy for ListItemThumbnailViewModel(uint64_t a1, uint64_t a2)
{
  char v4;
  __int128 v5;

  v4 = *(_BYTE *)(a2 + 65);
  v5 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v5;
  (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1, a2);
  if ((v4 & 1) != 0)
  {
    *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  }
  else
  {
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  }
  *(_BYTE *)(a1 + 65) = v4;
  return a1;
}

uint64_t assignWithCopy for ListItemThumbnailViewModel(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;

  if (a1 != a2)
  {
    sub_2EFF0((_QWORD *)a1);
    v4 = *(_BYTE *)(a2 + 65);
    v5 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 24) = v5;
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1, a2);
    if ((v4 & 1) != 0)
    {
      *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
    }
    else
    {
      v6 = *(_QWORD *)(a2 + 40);
      *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
      *(_QWORD *)(a1 + 40) = v6;
      LOBYTE(v6) = *(_BYTE *)(a2 + 64);
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
      *(_BYTE *)(a1 + 64) = v6;
    }
    *(_BYTE *)(a1 + 65) = v4;
  }
  return a1;
}

uint64_t assignWithTake for ListItemThumbnailViewModel(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;

  if (a1 != a2)
  {
    sub_2EFF0((_QWORD *)a1);
    v4 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v4;
    *(_WORD *)(a1 + 64) = *(_WORD *)(a2 + 64);
    v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for ListItemThumbnailViewModel(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 66))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 65);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ListItemThumbnailViewModel(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 64) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 66) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 66) = 0;
    if (a2)
      *(_BYTE *)(result + 65) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for ListItemThumbnailViewModel()
{
  return &type metadata for ListItemThumbnailViewModel;
}

uint64_t initializeWithCopy for ListItemThumbnailStyle(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  __int128 v5;
  char v6;

  v4 = *(unsigned __int8 *)(a2 + 65);
  if (v4 >= 2)
    v4 = *(_DWORD *)a2 + 2;
  v5 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v5;
  if (v4 == 1)
  {
    (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1, a2);
    *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
    v6 = 1;
  }
  else
  {
    (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1, a2);
    v6 = 0;
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  }
  *(_BYTE *)(a1 + 65) = v6;
  return a1;
}

uint64_t assignWithCopy for ListItemThumbnailStyle(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  uint64_t v5;
  char v6;
  uint64_t v7;

  if (a1 != a2)
  {
    _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)a1);
    v4 = *(unsigned __int8 *)(a2 + 65);
    if (v4 >= 2)
      v4 = *(_DWORD *)a2 + 2;
    v5 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 24) = v5;
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    if (v4 == 1)
    {
      (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1, a2);
      *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
      v6 = 1;
    }
    else
    {
      (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1, a2);
      v6 = 0;
      v7 = *(_QWORD *)(a2 + 40);
      *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
      *(_QWORD *)(a1 + 40) = v7;
      LOBYTE(v7) = *(_BYTE *)(a2 + 64);
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
      *(_BYTE *)(a1 + 64) = v7;
    }
    *(_BYTE *)(a1 + 65) = v6;
  }
  return a1;
}

uint64_t assignWithTake for ListItemThumbnailStyle(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  if (a1 != a2)
  {
    _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)a1);
    v4 = *(unsigned __int8 *)(a2 + 65);
    if (v4 >= 2)
      v4 = *(_DWORD *)a2 + 2;
    if (v4 == 1)
    {
      v5 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v5;
      *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
    }
    else
    {
      LOBYTE(v4) = 0;
      v6 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 48) = v6;
      *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
      v7 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v7;
    }
    *(_BYTE *)(a1 + 65) = v4;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for ListItemThumbnailStyle(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 66))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 65);
  if (v3 >= 2)
    return (v3 ^ 0xFF) + 1;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for ListItemThumbnailStyle(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_WORD *)(result + 64) = 0;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 66) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 66) = 0;
    if (a2)
      *(_BYTE *)(result + 65) = -(char)a2;
  }
  return result;
}

uint64_t sub_114828(uint64_t a1)
{
  uint64_t result;

  result = *(unsigned __int8 *)(a1 + 65);
  if (result >= 2)
    return (*(_DWORD *)a1 + 2);
  return result;
}

uint64_t sub_114844(uint64_t result, unsigned int a2)
{
  if (a2 > 1)
  {
    *(_BYTE *)(result + 64) = 0;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 2;
    LOBYTE(a2) = 2;
  }
  *(_BYTE *)(result + 65) = a2;
  return result;
}

ValueMetadata *type metadata accessor for ListItemThumbnailStyle()
{
  return &type metadata for ListItemThumbnailStyle;
}

uint64_t getEnumTagSinglePayload for SingleThumbnailStyle(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFC && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 252);
  v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 4)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SingleThumbnailStyle(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 252;
    if (a3 >= 0xFC)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFC)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

uint64_t sub_11490C(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 8) <= 3u)
    return *(unsigned __int8 *)(a1 + 8);
  else
    return (*(_DWORD *)a1 + 4);
}

uint64_t sub_114924(uint64_t result, unsigned int a2)
{
  if (a2 >= 4)
  {
    *(_QWORD *)result = a2 - 4;
    LOBYTE(a2) = 4;
  }
  *(_BYTE *)(result + 8) = a2;
  return result;
}

ValueMetadata *type metadata accessor for SingleThumbnailStyle()
{
  return &type metadata for SingleThumbnailStyle;
}

uint64_t storeEnumTagSinglePayload for SingleThumbnailSubStyle(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_114998 + 4 * byte_1ED26F[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1149CC + 4 * byte_1ED26A[v4]))();
}

uint64_t sub_1149CC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1149D4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1149DCLL);
  return result;
}

uint64_t sub_1149E8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1149F0);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1149F4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1149FC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SingleThumbnailSubStyle()
{
  return &type metadata for SingleThumbnailSubStyle;
}

uint64_t storeEnumTagSinglePayload for SeriesThumbnailStyle(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_114A64 + 4 * byte_1ED279[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_114A98 + 4 * byte_1ED274[v4]))();
}

uint64_t sub_114A98(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_114AA0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x114AA8);
  return result;
}

uint64_t sub_114AB4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x114ABCLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_114AC0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_114AC8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SeriesThumbnailStyle()
{
  return &type metadata for SeriesThumbnailStyle;
}

uint64_t type metadata accessor for BundleFinder()
{
  return objc_opt_self(_TtC7BooksUIP33_EFE1A2C6CB1153AD44F7739E6B48D3E512BundleFinder);
}

uint64_t Metrics.NavigationType.init(rawValue:)@<X0>(Swift::String string@<0:X0, 8:X1>, char *a2@<X8>)
{
  void *object;
  Swift::String v3;
  unint64_t v5;
  uint64_t result;
  char v7;

  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_249F80, v3);
  result = swift_bridgeObjectRelease(object);
  v7 = 6;
  if (v5 < 6)
    v7 = v5;
  *a2 = v7;
  return result;
}

uint64_t Metrics.NavigationType.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_114B84 + 4 * byte_1ED430[*v0]))(1801675106, 0xE400000000000000);
}

uint64_t sub_114B84()
{
  return 0x64726177726F66;
}

uint64_t sub_114B9C()
{
  return 1752397168;
}

uint64_t sub_114BA8()
{
  return 7368560;
}

uint64_t sub_114BB8()
{
  return 1952867692;
}

uint64_t sub_114BC4()
{
  return 0x7468676972;
}

void sub_114BD8(char *a1)
{
  sub_C5DFC(*a1);
}

void sub_114BE4()
{
  char *v0;

  sub_125160(*v0);
}

void sub_114BEC()
{
  __asm { BR              X10 }
}

uint64_t sub_114C20(uint64_t a1)
{
  String.hash(into:)(a1, 0x64726177726F66, 0xE700000000000000);
  return swift_bridgeObjectRelease(0xE700000000000000);
}

void sub_114C88(uint64_t a1)
{
  char *v1;

  sub_125FFC(a1, *v1);
}

uint64_t sub_114C90@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  return Metrics.NavigationType.init(rawValue:)(*a1, a2);
}

uint64_t sub_114C9C()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_114CC4 + 4 * byte_1ED43C[*v0]))();
}

void sub_114CC4(_QWORD *a1@<X8>)
{
  *a1 = 0x64726177726F66;
  a1[1] = 0xE700000000000000;
}

void sub_114CE0(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = 1752397168;
  a1[1] = v1;
}

void sub_114CF0(_QWORD *a1@<X8>)
{
  *a1 = 7368560;
  a1[1] = 0xE300000000000000;
}

void sub_114D04(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = 1952867692;
  a1[1] = v1;
}

void sub_114D14(_QWORD *a1@<X8>)
{
  *a1 = 0x7468676972;
  a1[1] = 0xE500000000000000;
}

uint64_t sub_114D2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1159A0();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_114D88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1159A0();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

void static Metrics.createPageMetrics(pageType:pageId:navigationType:networkPerformance:includePageInstruction:includeImpressionsInstruction:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unsigned __int8 *a5@<X4>, int a6@<W6>, int a7@<W7>, uint64_t a8@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t inited;
  _QWORD v27[4];
  int v28;
  uint64_t v29;
  int v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  _BYTE v43[12];

  v30 = a7;
  v28 = a6;
  v39 = a4;
  v37 = a3;
  v38 = a2;
  v36 = a1;
  v41 = a8;
  v9 = type metadata accessor for ScalarDictionary(0);
  __chkstk_darwin(v9);
  v40 = (char *)v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = type metadata accessor for PageMetrics.Instruction(0);
  v34 = *(_QWORD *)(v35 - 8);
  v11 = __chkstk_darwin(v35);
  v13 = (char *)v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v27[1] = (char *)v27 - v14;
  v15 = type metadata accessor for UUID(0);
  __chkstk_darwin(v15);
  v16 = sub_5440(&qword_266168);
  __chkstk_darwin(v16);
  v17 = type metadata accessor for JSNetworkPerformanceMetrics(0);
  __chkstk_darwin(v17);
  v33 = type metadata accessor for MetricsData(0);
  v32 = *(_QWORD *)(v33 - 8);
  v18 = __chkstk_darwin(v33);
  v27[2] = (char *)v27 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __chkstk_darwin(v18);
  v27[0] = (char *)v27 - v21;
  v22 = __chkstk_darwin(v20);
  v31 = (char *)v27 - v23;
  __chkstk_darwin(v22);
  v42 = (char *)v27 - v24;
  v25 = *a5;
  v29 = sub_5440(&qword_25DF90);
  inited = swift_initStackObject(v29, v43);
  *(_OWORD *)(inited + 16) = xmmword_1E0B70;
  *(_QWORD *)(inited + 32) = 0x697461676976616ELL;
  *(_QWORD *)(inited + 40) = 0xEA00000000006E6FLL;
  v27[3] = v13;
  __asm { BR              X11 }
}

uint64_t sub_1150AC(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t inited;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  void (*v60)(uint64_t, uint64_t);

  a1[9] = &type metadata for String;
  a1[6] = 0x64726177726F66;
  a1[7] = 0xE700000000000000;
  v10 = sub_8FA0((uint64_t)a1);
  sub_11572C(v3, v2);
  v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v2, 1, v6);
  if ((_DWORD)v11 == 1)
  {
    v12 = UUID.init()(v11);
    v13 = UUID.uuidString.getter(v12);
    v14 = v4;
    v16 = v15;
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v1, v14);
    ((void (*)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, uint64_t, _QWORD, uint64_t, _QWORD, __int16, _QWORD, char, _QWORD, char, _QWORD, char, _QWORD, char, _QWORD, char, _QWORD, char, _QWORD, char, _QWORD, char, _QWORD, char, _QWORD, __int16, _QWORD, char, _QWORD, char, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char, _QWORD, _QWORD))JSNetworkPerformanceMetrics.init(clientCorrelationKey:pageURL:requestStartTime:responseStartTime:responseEndTime:responseWasCached:parseStartTime:parseEndTime:modelConstructionStartTime:modelConstructionEndTime:connectionStartTime:connectionEndTime:domainLookupStartTime:domainLookupEndTime:fetchStartTime:secureConnectionStartTime:connectionReused:requestMessageSize:responseMessageSize:statusCode:edgeNodeCacheStatus:environmentDataCenter:isLowDataMode:appleTimingApp:))(v13, v16, 0, 0, 0, 1, 0, 1, 0, 513, 0, 1, 0, 1, 0, 1, 0, 1, 0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      1,
      0,
      513,
      0,
      1,
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      2,
      0,
      0);
    sub_115774(v2);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))(v5, v2, v6);
  }
  v17 = *(_QWORD *)(v9 - 392);
  if (qword_25DB78 != -1)
    swift_once(&qword_25DB78, sub_2BEBC);
  v18 = type metadata accessor for MetricsData.Configuration(0);
  v19 = sub_7120(v18, (uint64_t)qword_288CE0);
  ((void (*)(unint64_t, uint64_t, uint64_t))static MetricsData.makeMetricsPageData(fields:timingMetrics:configuration:))(v10, v5, v19);
  swift_bridgeObjectRelease(v10);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v5, v6);
  v20 = _swiftEmptyArrayStorage;
  v21 = sub_8FA0((uint64_t)_swiftEmptyArrayStorage);
  ((void (*)(unint64_t, uint64_t, uint64_t))static MetricsData.makeMetricsImpressionsData(fields:configuration:impressionsEventVersion:))(v21, v19, 4);
  swift_bridgeObjectRelease(v21);
  v22 = *(_QWORD *)(v9 - 376);
  v23 = *(_QWORD *)(v9 - 384);
  if ((*(_DWORD *)(v9 - 412) & 1) != 0)
  {
    v24 = *(_QWORD *)(v9 - 448);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(v23 + 16))(v24, *(_QWORD *)(v9 - 304), *(_QWORD *)(v9 - 376));
    v25 = sub_5440(&qword_266170);
    v26 = type metadata accessor for PageMetrics.InvocationPoint(0);
    v27 = *(_QWORD *)(v26 - 8);
    v28 = *(_QWORD *)(v27 + 72);
    v29 = *(unsigned __int8 *)(v27 + 80);
    v30 = (v29 + 32) & ~v29;
    v31 = swift_allocObject(v25, v30 + 2 * v28, v29 | 7);
    *(_OWORD *)(v31 + 16) = xmmword_1E1CE0;
    v32 = v31 + v30;
    ((void (*)(void))static PageMetrics.InvocationPoint.pageEnter.getter)();
    v33 = v32 + v28;
    if (qword_25DCA0 != -1)
      swift_once(&qword_25DCA0, sub_1157B4);
    v34 = sub_7120(v26, (uint64_t)qword_266150);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v27 + 16))(v33, v34, v26);
    v35 = *(_QWORD *)(v31 + 16);
    if (v35)
      v36 = sub_2B5C4(v31);
    else
      v36 = &_swiftEmptySetSingleton;
    swift_setDeallocating(v31);
    swift_arrayDestroy(v32, v35, v26);
    swift_deallocClassInstance(v31, 32, 7);
    v37 = *(_QWORD *)(v9 - 440);
    ((void (*)(uint64_t, void *))PageMetrics.Instruction.init(data:invocationPoints:))(v24, v36);
    v20 = (_QWORD *)sub_AAFF0(0, 1, 1, (unint64_t)_swiftEmptyArrayStorage);
    v39 = v20[2];
    v38 = v20[3];
    if (v39 >= v38 >> 1)
      v20 = (_QWORD *)sub_AAFF0(v38 > 1, v39 + 1, 1, (unint64_t)v20);
    v20[2] = v39 + 1;
    (*(void (**)(unint64_t, uint64_t, _QWORD))(*(_QWORD *)(v9 - 368) + 32))((unint64_t)v20+ ((*(unsigned __int8 *)(*(_QWORD *)(v9 - 368) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v9 - 368) + 80))+ *(_QWORD *)(*(_QWORD *)(v9 - 368) + 72) * v39, v37, *(_QWORD *)(v9 - 360));
  }
  if ((*(_DWORD *)(v9 - 396) & 1) != 0)
  {
    v40 = *(_QWORD *)(v9 - 432);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 16))(v40, v17, v22);
    v41 = sub_5440(&qword_266170);
    v42 = type metadata accessor for PageMetrics.InvocationPoint(0);
    v43 = *(_QWORD *)(v42 - 8);
    v44 = *(_QWORD *)(v43 + 72);
    v45 = *(unsigned __int8 *)(v43 + 80);
    v46 = (v45 + 32) & ~v45;
    v47 = swift_allocObject(v41, v46 + 2 * v44, v45 | 7);
    *(_OWORD *)(v47 + 16) = xmmword_1E1CE0;
    v48 = ((uint64_t (*)(void))static PageMetrics.InvocationPoint.pageExit.getter)();
    ((void (*)(uint64_t))static PageMetrics.InvocationPoint.appExit.getter)(v48);
    v49 = sub_2B5C4(v47);
    swift_setDeallocating(v47);
    swift_arrayDestroy(v47 + v46, 2, v42);
    swift_deallocClassInstance(v47, 32, 7);
    v50 = *(_QWORD *)(v9 - 424);
    ((void (*)(uint64_t, void *))PageMetrics.Instruction.init(data:invocationPoints:))(v40, v49);
    if ((swift_isUniquelyReferenced_nonNull_native(v20) & 1) == 0)
      v20 = (_QWORD *)sub_AAFF0(0, v20[2] + 1, 1, (unint64_t)v20);
    v52 = v20[2];
    v51 = v20[3];
    if (v52 >= v51 >> 1)
      v20 = (_QWORD *)sub_AAFF0(v51 > 1, v52 + 1, 1, (unint64_t)v20);
    v20[2] = v52 + 1;
    (*(void (**)(unint64_t, uint64_t, _QWORD))(*(_QWORD *)(v9 - 368) + 32))((unint64_t)v20+ ((*(unsigned __int8 *)(*(_QWORD *)(v9 - 368) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v9 - 368) + 80))+ *(_QWORD *)(*(_QWORD *)(v9 - 368) + 72) * v52, v50, *(_QWORD *)(v9 - 360));
  }
  inited = swift_initStackObject(*(_QWORD *)(v9 - 408), v9 - 296);
  *(_OWORD *)(inited + 16) = xmmword_1E1CE0;
  *(_QWORD *)(inited + 32) = 0x6570795465676170;
  *(_QWORD *)(inited + 40) = 0xE800000000000000;
  *(_QWORD *)(inited + 48) = *(_QWORD *)(v9 - 352);
  v54 = *(_QWORD *)(v9 - 336);
  *(_QWORD *)(inited + 56) = v54;
  *(_QWORD *)(inited + 72) = &type metadata for String;
  *(_QWORD *)(inited + 80) = 0x644965676170;
  *(_QWORD *)(inited + 120) = &type metadata for String;
  v55 = *(_QWORD *)(v9 - 344);
  *(_QWORD *)(inited + 88) = 0xE600000000000000;
  *(_QWORD *)(inited + 96) = v55;
  v56 = *(_QWORD *)(v9 - 328);
  *(_QWORD *)(inited + 104) = v56;
  swift_bridgeObjectRetain(v54);
  swift_bridgeObjectRetain(v56);
  v57 = sub_8FA0(inited);
  v58 = *(_QWORD *)(v9 - 320);
  ScalarDictionary.init()(v57);
  v59 = sub_B570C((uint64_t)_swiftEmptyArrayStorage);
  ((void (*)(_QWORD *, unint64_t, uint64_t, unint64_t))PageMetrics.init(instructions:pageFields:custom:clickLocationFields:))(v20, v57, v58, v59);
  v60 = *(void (**)(uint64_t, uint64_t))(v23 + 8);
  v60(v17, v22);
  return ((uint64_t (*)(_QWORD, uint64_t))v60)(*(_QWORD *)(v9 - 304), v22);
}

uint64_t sub_11572C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_5440(&qword_266168);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_115774(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_5440(&qword_266168);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1157B4()
{
  uint64_t v0;

  v0 = type metadata accessor for PageMetrics.InvocationPoint(0);
  sub_73A0(v0, qword_266150);
  sub_7120(v0, (uint64_t)qword_266150);
  return PageMetrics.InvocationPoint.init(rawValue:)(0x4164694464726163, 0xED00007261657070);
}

uint64_t static PageMetrics.InvocationPoint.cardDidAppear.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_25DCA0 != -1)
    swift_once(&qword_25DCA0, sub_1157B4);
  v2 = type metadata accessor for PageMetrics.InvocationPoint(0);
  v3 = sub_7120(v2, (uint64_t)qword_266150);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

unint64_t sub_115890()
{
  unint64_t result;

  result = qword_266178;
  if (!qword_266178)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Metrics.NavigationType, &type metadata for Metrics.NavigationType);
    atomic_store(result, (unint64_t *)&qword_266178);
  }
  return result;
}

uint64_t _s14NavigationTypeOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_115920 + 4 * byte_1ED44D[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_115954 + 4 * byte_1ED448[v4]))();
}

uint64_t sub_115954(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_11595C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x115964);
  return result;
}

uint64_t sub_115970(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x115978);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_11597C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_115984(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Metrics.NavigationType()
{
  return &type metadata for Metrics.NavigationType;
}

unint64_t sub_1159A0()
{
  unint64_t result;

  result = qword_266180;
  if (!qword_266180)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Metrics.NavigationType, &type metadata for Metrics.NavigationType);
    atomic_store(result, (unint64_t *)&qword_266180);
  }
  return result;
}

unint64_t static SynchronousNativeIntentDispatcher.Builder.buildBlock(_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t result;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  _BYTE v13[48];

  memset(&v13[8], 0, 40);
  sub_B414((uint64_t)&v13[8], &qword_266188);
  memset(&v13[8], 0, 40);
  result = sub_9894((uint64_t)_swiftEmptyArrayStorage);
  *(_QWORD *)v13 = result;
  v5 = *(_OWORD *)&v13[32];
  v6 = *(_OWORD *)v13;
  *((_OWORD *)a2 + 1) = *(_OWORD *)&v13[16];
  *((_OWORD *)a2 + 2) = v5;
  *(_OWORD *)a2 = v6;
  v7 = *(_QWORD *)(a1 + 16);
  if (v7)
  {
    v8 = (uint64_t *)(a1 + 32);
    swift_bridgeObjectRetain(a1);
    do
    {
      sub_116054(v8, (uint64_t)v13);
      v9 = *(_QWORD *)v13;
      swift_bridgeObjectRetain(*(_QWORD *)v13);
      v10 = *a2;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a2);
      v12 = v10;
      *a2 = 0x8000000000000000;
      sub_115CF4(v9, (uint64_t)sub_115CB4, 0, isUniquelyReferenced_nonNull_native, (uint64_t)&v12);
      *a2 = v12;
      swift_bridgeObjectRelease(0x8000000000000000);
      sub_116090(v13);
      v8 += 6;
      --v7;
    }
    while (v7);
    return swift_bridgeObjectRelease(a1);
  }
  return result;
}

_QWORD *static SynchronousNativeIntentDispatcher.Builder.buildExpression<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  _BYTE v9[48];
  _OWORD v10[3];

  memset(&v9[8], 0, 40);
  sub_B414((uint64_t)&v9[8], &qword_266188);
  memset(&v9[8], 0, 40);
  *(_QWORD *)v9 = sub_9894((uint64_t)_swiftEmptyArrayStorage);
  v10[1] = *(_OWORD *)&v9[16];
  v10[2] = *(_OWORD *)&v9[32];
  v10[0] = *(_OWORD *)v9;
  SynchronousNativeIntentDispatcher.registering<A>(_:)(a1, a2, a3, a4);
  return sub_116090(v10);
}

uint64_t static SynchronousNativeIntentDispatcher.Builder.buildOptional(_:)@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t result;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  _BYTE v7[48];
  _OWORD v8[3];

  result = sub_1160C4(a1, (uint64_t)v8);
  if (*(_QWORD *)&v8[0])
  {
    v4 = v8[1];
    *a2 = v8[0];
    a2[1] = v4;
    a2[2] = v8[2];
  }
  else
  {
    memset(&v7[8], 0, 40);
    sub_B414((uint64_t)&v7[8], &qword_266188);
    memset(&v7[8], 0, 40);
    *(_QWORD *)v7 = sub_9894((uint64_t)_swiftEmptyArrayStorage);
    v5 = *(_OWORD *)&v7[32];
    v6 = *(_OWORD *)v7;
    a2[1] = *(_OWORD *)&v7[16];
    a2[2] = v5;
    *a2 = v6;
    return sub_B414((uint64_t)v8, &qword_266190);
  }
  return result;
}

uint64_t static SynchronousNativeIntentDispatcher.Builder.buildEither(first:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_116054(a1, a2);
}

uint64_t SynchronousNativeIntentDispatcher.init(implementations:)(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_115CB4@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  v4 = *a1;
  v3 = a1[1];
  sub_BD00((uint64_t)(a1 + 2), (uint64_t)(a2 + 2));
  *a2 = v4;
  a2[1] = v3;
  return swift_bridgeObjectRetain(v3);
}

void sub_115CF4(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  char v16;
  unint64_t v17;
  uint64_t v18;
  _BOOL8 v19;
  uint64_t v20;
  char v21;
  unint64_t v22;
  char v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t *v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t i;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  char v34;
  unint64_t v35;
  uint64_t v36;
  _BOOL8 v37;
  uint64_t v38;
  char v39;
  unint64_t v40;
  char v41;
  _QWORD *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v47[2];
  __int128 v48[2];
  uint64_t v49;
  uint64_t v50;
  __int128 v51[2];
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v8 = -1 << *(_BYTE *)(a1 + 32);
  v9 = ~v8;
  v10 = *(_QWORD *)(a1 + 64);
  v11 = -v8;
  v52 = a1;
  v53 = a1 + 64;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  else
    v12 = -1;
  v54 = v9;
  v55 = 0;
  v56 = v12 & v10;
  v57 = a2;
  v58 = a3;
  swift_bridgeObjectRetain(a1);
  swift_retain(a3);
  sub_11611C((uint64_t)&v49);
  v13 = v50;
  if (!v50)
    goto LABEL_27;
  v14 = v49;
  sub_AC68(v51, (uint64_t)v48);
  v15 = *(_QWORD **)a5;
  v17 = sub_9F7C(v14, v13);
  v18 = v15[2];
  v19 = (v16 & 1) == 0;
  v20 = v18 + v19;
  if (__OFADD__(v18, v19))
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  v21 = v16;
  if (v15[3] >= v20)
  {
    if ((a4 & 1) != 0)
    {
      if ((v16 & 1) != 0)
        goto LABEL_12;
    }
    else
    {
      sub_1AE858();
      if ((v21 & 1) != 0)
        goto LABEL_12;
    }
LABEL_14:
    v25 = *(_QWORD **)a5;
    *(_QWORD *)(*(_QWORD *)a5 + 8 * (v17 >> 6) + 64) |= 1 << v17;
    v26 = (uint64_t *)(v25[6] + 16 * v17);
    *v26 = v14;
    v26[1] = v13;
    sub_AC68(v48, v25[7] + 40 * v17);
    v27 = v25[2];
    v28 = __OFADD__(v27, 1);
    v29 = v27 + 1;
    if (v28)
    {
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
    v25[2] = v29;
LABEL_16:
    sub_11611C((uint64_t)&v49);
    for (i = v50; v50; i = v50)
    {
      v32 = v49;
      sub_AC68(v51, (uint64_t)v48);
      v33 = *(_QWORD **)a5;
      v35 = sub_9F7C(v32, i);
      v36 = v33[2];
      v37 = (v34 & 1) == 0;
      v38 = v36 + v37;
      if (__OFADD__(v36, v37))
        goto LABEL_28;
      v39 = v34;
      if (v33[3] < v38)
      {
        sub_1AD1E4(v38, 1);
        v40 = sub_9F7C(v32, i);
        if ((v39 & 1) != (v41 & 1))
          goto LABEL_30;
        v35 = v40;
      }
      if ((v39 & 1) != 0)
      {
        sub_BD00((uint64_t)v48, (uint64_t)v47);
        _s7BooksUI13AnyPagedFrameVwxx_0(v48);
        swift_bridgeObjectRelease(i);
        v31 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)a5 + 56) + 40 * v35);
        _s7BooksUI13AnyPagedFrameVwxx_0(v31);
        sub_AC68(v47, (uint64_t)v31);
      }
      else
      {
        v42 = *(_QWORD **)a5;
        *(_QWORD *)(*(_QWORD *)a5 + 8 * (v35 >> 6) + 64) |= 1 << v35;
        v43 = (uint64_t *)(v42[6] + 16 * v35);
        *v43 = v32;
        v43[1] = i;
        sub_AC68(v48, v42[7] + 40 * v35);
        v44 = v42[2];
        v28 = __OFADD__(v44, 1);
        v45 = v44 + 1;
        if (v28)
          goto LABEL_29;
        v42[2] = v45;
      }
      sub_11611C((uint64_t)&v49);
    }
LABEL_27:
    swift_release(a3);
    swift_bridgeObjectRelease(a1);
    sub_94160(v52);
    swift_release(v58);
    return;
  }
  sub_1AD1E4(v20, a4 & 1);
  v22 = sub_9F7C(v14, v13);
  if ((v21 & 1) == (v23 & 1))
  {
    v17 = v22;
    if ((v21 & 1) == 0)
      goto LABEL_14;
LABEL_12:
    sub_BD00((uint64_t)v48, (uint64_t)v47);
    _s7BooksUI13AnyPagedFrameVwxx_0(v48);
    swift_bridgeObjectRelease(v13);
    v24 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)a5 + 56) + 40 * v17);
    _s7BooksUI13AnyPagedFrameVwxx_0(v24);
    sub_AC68(v47, (uint64_t)v24);
    goto LABEL_16;
  }
LABEL_30:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

uint64_t sub_116054(uint64_t *a1, uint64_t a2)
{
  initializeWithCopy for SynchronousNativeIntentDispatcher(a2, a1);
  return a2;
}

_QWORD *sub_116090(_QWORD *a1)
{
  destroy for SynchronousNativeIntentDispatcher(a1);
  return a1;
}

uint64_t sub_1160C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_5440(&qword_266190);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

ValueMetadata *type metadata accessor for SynchronousNativeIntentDispatcher.Builder()
{
  return &type metadata for SynchronousNativeIntentDispatcher.Builder;
}

uint64_t sub_11611C@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  int64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  int64_t v18;
  void (*v19)(_OWORD *);
  uint64_t result;
  _OWORD v21[3];
  uint64_t v22;
  _OWORD v23[3];
  uint64_t v24;
  __int128 v25;
  _OWORD v26[2];
  uint64_t v27;

  v3 = *v1;
  v4 = v1[1];
  v6 = v1[2];
  v5 = v1[3];
  v7 = v5;
  v8 = v1[4];
  if (v8)
  {
    v9 = (v8 - 1) & v8;
    v10 = __clz(__rbit64(v8)) | (v5 << 6);
LABEL_3:
    v11 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v10);
    v13 = *v11;
    v12 = v11[1];
    sub_BD00(*(_QWORD *)(v3 + 56) + 40 * v10, (uint64_t)v26);
    *(_QWORD *)&v25 = v13;
    *((_QWORD *)&v25 + 1) = v12;
    swift_bridgeObjectRetain(v12);
    goto LABEL_23;
  }
  v14 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
    return result;
  }
  v15 = (unint64_t)(v6 + 64) >> 6;
  if (v14 < v15)
  {
    v16 = *(_QWORD *)(v4 + 8 * v14);
    if (v16)
    {
LABEL_7:
      v9 = (v16 - 1) & v16;
      v10 = __clz(__rbit64(v16)) + (v14 << 6);
      v7 = v14;
      goto LABEL_3;
    }
    v17 = v5 + 2;
    v7 = v5 + 1;
    if (v5 + 2 < v15)
    {
      v16 = *(_QWORD *)(v4 + 8 * v17);
      if (v16)
      {
LABEL_10:
        v14 = v17;
        goto LABEL_7;
      }
      v7 = v5 + 2;
      if (v5 + 3 < v15)
      {
        v16 = *(_QWORD *)(v4 + 8 * (v5 + 3));
        if (v16)
        {
          v14 = v5 + 3;
          goto LABEL_7;
        }
        v17 = v5 + 4;
        v7 = v5 + 3;
        if (v5 + 4 < v15)
        {
          v16 = *(_QWORD *)(v4 + 8 * v17);
          if (v16)
            goto LABEL_10;
          v14 = v5 + 5;
          v7 = v5 + 4;
          if (v5 + 5 < v15)
          {
            v16 = *(_QWORD *)(v4 + 8 * v14);
            if (v16)
              goto LABEL_7;
            v7 = v15 - 1;
            v18 = v5 + 6;
            while (v15 != v18)
            {
              v16 = *(_QWORD *)(v4 + 8 * v18++);
              if (v16)
              {
                v14 = v18 - 1;
                goto LABEL_7;
              }
            }
          }
        }
      }
    }
  }
  v9 = 0;
  v27 = 0;
  memset(v26, 0, sizeof(v26));
  v25 = 0u;
LABEL_23:
  *v1 = v3;
  v1[1] = v4;
  v1[2] = v6;
  v1[3] = v7;
  v1[4] = v9;
  v19 = (void (*)(_OWORD *))v1[5];
  result = sub_116310((uint64_t)&v25, (uint64_t)v23);
  if (*((_QWORD *)&v23[0] + 1))
  {
    v21[0] = v23[0];
    v21[1] = v23[1];
    v21[2] = v23[2];
    v22 = v24;
    v19(v21);
    return sub_B414((uint64_t)v21, &qword_2661A0);
  }
  else
  {
    *(_QWORD *)(a1 + 48) = 0;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)a1 = 0u;
  }
  return result;
}

uint64_t sub_116310(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_5440(&qword_266198);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t View.impressionable(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v12;

  v6 = type metadata accessor for ImpressionsCalculator.Configuration(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  static ImpressionsCalculator.Configuration.half.getter(v8);
  View.impressionable(_:configuration:position:definesParentContext:)(a1, v10, 0, 1, 0, a2, a3);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
}

uint64_t sub_116414(__int128 *a1)
{
  __int128 v2;

  v2 = *a1;
  return swift_getOpaqueTypeConformance2(&v2, &opaque type descriptor for <<opaque return type of View.impressionable(_:configuration:position:definesParentContext:)>>, 1);
}

uint64_t PDFCoverEffect.init(shadowScale:cornerRadius:)@<X0>(double *a1@<X8>, double a2@<D0>, double a3@<D1>)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t result;

  v6 = (_QWORD *)((char *)a1 + *(int *)(type metadata accessor for PDFCoverEffect(0) + 24));
  *v6 = swift_getKeyPath(&unk_1ED5E0);
  v7 = sub_5440(&qword_25E948);
  result = swift_storeEnumTagMultiPayload(v6, v7, 0);
  *a1 = a2;
  a1[1] = a3;
  return result;
}

uint64_t type metadata accessor for PDFCoverEffect(uint64_t a1)
{
  uint64_t result;

  result = qword_266250;
  if (!qword_266250)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for PDFCoverEffect);
  return result;
}

uint64_t PDFCoverEffect.body(cover:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;

  v5 = type metadata accessor for PDFCoverEffect(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  __chkstk_darwin(v5);
  v8 = sub_5440(&qword_2661A8);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  __chkstk_darwin(v8);
  v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a1, v8);
  sub_1E428(v2, (uint64_t)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for PDFCoverEffect);
  v12 = *(unsigned __int8 *)(v9 + 80);
  v13 = (v12 + 16) & ~v12;
  v14 = *(unsigned __int8 *)(v6 + 80);
  v15 = (v10 + v14 + v13) & ~v14;
  v16 = swift_allocObject(&unk_2533F8, v15 + v7, v12 | v14 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(v16 + v13, v11, v8);
  result = sub_116A8C((uint64_t)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v16 + v15);
  *a2 = sub_116AD0;
  a2[1] = v16;
  return result;
}

uint64_t sub_11663C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  double v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  void (*v45)(char *, uint64_t);
  double v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  uint64_t v69;

  v56 = a2;
  v63 = a3;
  v4 = type metadata accessor for ColorScheme(0);
  v61 = *(_QWORD *)(v4 - 8);
  v62 = v4;
  v5 = __chkstk_darwin(v4);
  v60 = (char *)&v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v59 = (uint64_t)&v51 - v7;
  v55 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v55);
  v9 = (uint64_t *)((char *)&v51 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = sub_5440(&qword_2662D0);
  __chkstk_darwin(v10);
  v12 = (uint64_t *)((char *)&v51 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v52 = sub_5440(&qword_2662D8);
  __chkstk_darwin(v52);
  v14 = (char *)&v51 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = sub_5440(&qword_2662E0);
  __chkstk_darwin(v54);
  v53 = (char *)&v51 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58 = sub_5440(&qword_2662E8);
  v16 = __chkstk_darwin(v58);
  v57 = (uint64_t)&v51 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = GeometryProxy.size.getter(v16);
  v20 = v19;
  *v12 = static Alignment.topTrailing.getter();
  v12[1] = v21;
  v22 = sub_5440(&qword_2662F0);
  sub_116AD4(a1, (uint64_t)v12 + *(int *)(v22 + 44), v18, v20);
  v23 = _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0();
  _FrameLayout.init(width:height:alignment:)(&v64, 0, 1, *(_QWORD *)&v20, 0, v23, v24);
  v25 = v64;
  v26 = v65;
  v27 = v66;
  v28 = v67;
  v30 = v68;
  v29 = v69;
  sub_B3D0((uint64_t)v12, (uint64_t)v14, &qword_2662D0);
  v31 = &v14[*(int *)(v52 + 36)];
  *(_OWORD *)v31 = xmmword_1ED580;
  *((_QWORD *)v31 + 2) = v25;
  v31[24] = v26;
  *((_QWORD *)v31 + 4) = v27;
  v31[40] = v28;
  *((_QWORD *)v31 + 6) = v30;
  *((_QWORD *)v31 + 7) = v29;
  sub_B414((uint64_t)v12, &qword_2662D0);
  v32 = *(_QWORD *)(v56 + 8);
  v33 = (char *)v9 + *(int *)(v55 + 20);
  v34 = enum case for RoundedCornerStyle.continuous(_:);
  v35 = type metadata accessor for RoundedCornerStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 104))(v33, v34, v35);
  *v9 = v32;
  v9[1] = v32;
  v36 = (uint64_t)v53;
  v37 = (uint64_t)&v53[*(int *)(v54 + 36)];
  sub_1E428((uint64_t)v9, v37, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  *(_WORD *)(v37 + *(int *)(sub_5440(&qword_25F700) + 36)) = 256;
  sub_B3D0((uint64_t)v14, v36, &qword_2662D8);
  sub_224DC((uint64_t)v9, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  v38 = sub_B414((uint64_t)v14, &qword_2662D8);
  v39 = static Color.black.getter(v38);
  type metadata accessor for PDFCoverEffect(0);
  v40 = v59;
  sub_31378(v59);
  v41 = v60;
  v42 = v61;
  v43 = v62;
  (*(void (**)(char *, _QWORD, uint64_t))(v61 + 104))(v60, enum case for ColorScheme.dark(_:), v62);
  v44 = v41;
  LOBYTE(v41) = static ColorScheme.== infix(_:_:)(v40, v41);
  v45 = *(void (**)(char *, uint64_t))(v42 + 8);
  v45(v44, v43);
  v45((char *)v40, v43);
  v46 = 0.2;
  if ((v41 & 1) != 0)
    v46 = 0.5;
  v47 = Color.opacity(_:)(v46);
  swift_release(v39);
  v48 = v57;
  sub_B3D0(v36, v57, &qword_2662E0);
  v49 = v48 + *(int *)(v58 + 36);
  *(_QWORD *)v49 = v47;
  *(_OWORD *)(v49 + 8) = xmmword_1ED590;
  *(_QWORD *)(v49 + 24) = 0x4000000000000000;
  sub_B414(v36, &qword_2662E0);
  return sub_167A4(v48, v63, &qword_2662E8);
}

uint64_t sub_116A8C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PDFCoverEffect(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_116AD4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  double v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(char *, uint64_t, uint64_t);
  char *v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void (*v66)(char *, _QWORD, void (*)(_QWORD));
  void (*v67)(_QWORD);
  void (*v68)(char *, char *, void (*)(_QWORD));
  uint64_t v69;
  uint64_t KeyPath;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t *v75;
  char *v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _OWORD *v87;
  __int128 v88;
  uint64_t v89;
  double v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int64x2_t *v94;
  uint64_t v95;
  double v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  double v117;
  double v118;
  double v119;
  double v120;
  double v121;
  double v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  uint64_t v145;
  uint64_t *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  int *v153;
  uint64_t v155;
  int v156;
  uint64_t v157;
  uint64_t v158;
  __int128 v159;
  char *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  void (*v165)(_QWORD);
  char *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  __int128 v175;
  uint64_t v176;
  char *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  char *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  char *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  char *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  _OWORD v195[3];
  uint64_t v196;
  __int128 v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  char v201;
  uint64_t v202;
  unsigned __int8 v203;
  uint64_t v204;
  uint64_t v205;
  _OWORD v206[3];
  uint64_t v207;
  __int128 v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  char v212;
  uint64_t v213;
  char v214;
  __int128 v215;
  __int128 v216;
  _OWORD v217[2];
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  _OWORD v222[2];

  v185 = a2;
  v180 = sub_5440(&qword_2662F8);
  __chkstk_darwin(v180);
  v179 = (uint64_t)&v155 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v178 = sub_5440(&qword_266300);
  __chkstk_darwin(v178);
  v177 = (char *)&v155 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v183 = sub_5440(&qword_266308);
  __chkstk_darwin(v183);
  v181 = (uint64_t)&v155 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v184 = sub_5440(&qword_266310);
  v10 = __chkstk_darwin(v184);
  v182 = (char *)&v155 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v193 = (uint64_t)&v155 - v12;
  v191 = type metadata accessor for UnevenRoundedRectangle(0);
  __chkstk_darwin(v191);
  v160 = (char *)&v155 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v170 = sub_5440(&qword_266318);
  __chkstk_darwin(v170);
  v167 = (uint64_t)&v155 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v172 = sub_5440(&qword_266320);
  __chkstk_darwin(v172);
  v168 = (uint64_t)&v155 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v173 = sub_5440(&qword_266328);
  __chkstk_darwin(v173);
  v169 = (uint64_t)&v155 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v175 = sub_5440(&qword_266330);
  __chkstk_darwin(v175);
  v171 = (uint64_t)&v155 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v174 = sub_5440(&qword_266338);
  v18 = __chkstk_darwin(v174);
  v189 = (uint64_t)&v155 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v192 = (uint64_t)&v155 - v20;
  v187 = type metadata accessor for ColorScheme(0);
  v162 = *(_QWORD *)(v187 - 8);
  __chkstk_darwin(v187);
  v186 = (char *)&v155 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for _BlendModeEffect(0);
  __chkstk_darwin(v22);
  v166 = (char *)&v155 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v165 = (void (*)(_QWORD))type metadata accessor for BlendMode(0);
  v24 = *((_QWORD *)v165 - 1);
  __chkstk_darwin(v165);
  v26 = (char *)&v155 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v163 = sub_5440(&qword_260808);
  __chkstk_darwin(v163);
  v28 = (char *)&v155 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v164 = sub_5440(&qword_266340);
  v29 = __chkstk_darwin(v164);
  v188 = (uint64_t)&v155 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v29);
  v194 = (uint64_t)&v155 - v31;
  v32 = sub_5440(&qword_266348);
  v33 = __chkstk_darwin(v32);
  v176 = (uint64_t)&v155 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v33);
  v36 = (char *)&v155 - v35;
  v37 = a4;
  v38 = _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0();
  _FrameLayout.init(width:height:alignment:)(v195, *(_QWORD *)&a3, 0, *(_QWORD *)&a4, 0, v38, v39);
  v40 = sub_5440(&qword_2661A8);
  v41 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 16);
  v190 = v36;
  v41(v36, a1, v40);
  v42 = &v36[*(int *)(v32 + 36)];
  v43 = v195[1];
  *(_OWORD *)v42 = v195[0];
  *((_OWORD *)v42 + 1) = v43;
  *((_OWORD *)v42 + 2) = v195[2];
  v161 = sub_5440(&qword_260828);
  v44 = swift_allocObject(v161, 64, 7);
  *(_OWORD *)(v44 + 16) = xmmword_1E1CE0;
  v45 = _s7BooksUI14ColorConstantsV19booksSecondaryLabel05SwiftB00C0Vvg_0();
  v46 = Color.opacity(_:)(0.5);
  swift_release(v45);
  *(_QWORD *)(v44 + 32) = Gradient.Stop.init(color:location:)(v46, 0.0);
  *(_QWORD *)(v44 + 40) = v47;
  v48 = _s7BooksUI14ColorConstantsV19booksSecondaryLabel05SwiftB00C0Vvg_0();
  v49 = Color.opacity(_:)(0.0);
  swift_release(v48);
  v50 = Gradient.Stop.init(color:location:)(v49, 0.5);
  *(_QWORD *)(v44 + 48) = v50;
  *(_QWORD *)(v44 + 56) = v51;
  v52 = static UnitPoint.top.getter(v50);
  v54 = v53;
  v55 = static UnitPoint.bottom.getter();
  v57 = v56;
  Gradient.init(stops:)(v44);
  LinearGradient.init(gradient:startPoint:endPoint:)(&v196, v52, v54, v55, v57);
  v58 = v196;
  v159 = v197;
  v59 = v198;
  v60 = v199;
  v61 = _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0();
  _FrameLayout.init(width:height:alignment:)(&v200, 0, 1, *(_QWORD *)&v37, 0, v61, v62);
  v157 = v200;
  LOBYTE(v48) = v201;
  v63 = v202;
  v156 = v203;
  v64 = v205;
  v155 = v204;
  v65 = v24;
  v158 = v24;
  v66 = *(void (**)(char *, _QWORD, void (*)(_QWORD)))(v24 + 104);
  v67 = v165;
  v66(v26, enum case for BlendMode.multiply(_:), v165);
  v68 = *(void (**)(char *, char *, void (*)(_QWORD)))(v65 + 16);
  v69 = (uint64_t)v166;
  v68(v166, v26, v67);
  sub_1E428(v69, (uint64_t)&v28[*(int *)(v163 + 36)], (uint64_t (*)(_QWORD))&type metadata accessor for _BlendModeEffect);
  *(_QWORD *)v28 = v58;
  *(_OWORD *)(v28 + 8) = v159;
  *((_QWORD *)v28 + 3) = v59;
  *((_QWORD *)v28 + 4) = v60;
  *((_QWORD *)v28 + 5) = v157;
  v28[48] = v48;
  *((_QWORD *)v28 + 7) = v63;
  v28[64] = v156;
  *((_QWORD *)v28 + 9) = v155;
  *((_QWORD *)v28 + 10) = v64;
  *((_QWORD *)v28 + 11) = 0x3FD999999999999ALL;
  swift_bridgeObjectRetain(v58);
  sub_224DC(v69, (uint64_t (*)(_QWORD))&type metadata accessor for _BlendModeEffect);
  (*(void (**)(char *, void (*)(_QWORD)))(v158 + 8))(v26, v67);
  sub_4C880(&v196);
  KeyPath = swift_getKeyPath(&unk_1ED5E0);
  LODWORD(v166) = enum case for ColorScheme.light(_:);
  v71 = v162;
  v165 = *(void (**)(_QWORD))(v162 + 104);
  v73 = v186;
  v72 = v187;
  v165(v186);
  v74 = v188;
  v75 = (uint64_t *)(v188 + *(int *)(v164 + 36));
  v164 = sub_5440(&qword_25EE58);
  v76 = (char *)v75 + *(int *)(v164 + 28);
  v163 = *(_QWORD *)(v71 + 16);
  ((void (*)(char *, char *, uint64_t))v163)(v76, v73, v72);
  *v75 = KeyPath;
  sub_B3D0((uint64_t)v28, v74, &qword_260808);
  v162 = *(_QWORD *)(v71 + 8);
  ((void (*)(char *, uint64_t))v162)(v73, v72);
  sub_B414((uint64_t)v28, &qword_260808);
  sub_167A4(v74, v194, &qword_266340);
  v77 = (uint64_t)v160;
  v78 = &v160[*(int *)(v191 + 20)];
  v79 = enum case for RoundedCornerStyle.continuous(_:);
  LODWORD(v159) = enum case for RoundedCornerStyle.continuous(_:);
  v80 = type metadata accessor for RoundedCornerStyle(0);
  v158 = *(_QWORD *)(*(_QWORD *)(v80 - 8) + 104);
  ((void (*)(char *, uint64_t, uint64_t))v158)(v78, v79, v80);
  *(double *)v77 = RectangleCornerRadii.init(topLeft:topRight:bottomRight:bottomLeft:)(0.0, 0.0, 0.0, a3 * 0.04);
  *(_QWORD *)(v77 + 8) = v81;
  *(_QWORD *)(v77 + 16) = v82;
  *(_QWORD *)(v77 + 24) = v83;
  v84 = _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0();
  ((void (*)(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))_FrameLayout.init(width:height:alignment:))(v206, a3 * 0.4, 0, a3 * 0.4, 0, v84, v85);
  v86 = v167;
  sub_1E428(v77, v167, (uint64_t (*)(_QWORD))&type metadata accessor for UnevenRoundedRectangle);
  v87 = (_OWORD *)(v86 + *(int *)(v170 + 36));
  v88 = v206[1];
  *v87 = v206[0];
  v87[1] = v88;
  v87[2] = v206[2];
  v89 = sub_224DC(v77, (uint64_t (*)(_QWORD))&type metadata accessor for UnevenRoundedRectangle);
  v90 = static UnitPoint.center.getter(v89);
  v92 = v91;
  v93 = v168;
  sub_B3D0(v86, v168, &qword_266318);
  v94 = (int64x2_t *)(v93 + *(int *)(v172 + 36));
  *v94 = vdupq_n_s64(0x3FEE666666666666uLL);
  *(double *)v94[1].i64 = v90;
  v94[1].i64[1] = v92;
  v95 = sub_B414(v86, &qword_266318);
  v96 = static UnitPoint.center.getter(v95);
  v98 = v97;
  v99 = v169;
  sub_B3D0(v93, v169, &qword_266320);
  v100 = v99 + *(int *)(v173 + 36);
  *(_OWORD *)v100 = xmmword_1ED5A0;
  *(_OWORD *)(v100 + 16) = xmmword_1ED5B0;
  *(double *)(v100 + 32) = v96;
  *(_QWORD *)(v100 + 40) = v98;
  *(_OWORD *)(v100 + 48) = xmmword_1ED5C0;
  sub_B414(v93, &qword_266320);
  v101 = v171;
  sub_B3D0(v99, v171, &qword_266328);
  v102 = v101 + *(int *)(v175 + 36);
  *(_QWORD *)v102 = 0x4028000000000000;
  *(_BYTE *)(v102 + 8) = 0;
  sub_B414(v99, &qword_266328);
  v103 = v189;
  sub_B3D0(v101, v189, &qword_266330);
  *(_QWORD *)(v103 + *(int *)(v174 + 36)) = 0x3FD3333333333333;
  sub_B414(v101, &qword_266330);
  sub_167A4(v103, v192, &qword_266338);
  v104 = _s7BooksUI14ColorConstantsV25vibrantPrimaryButtonLabel05SwiftB00C0Vvg_0();
  v105 = _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0();
  v107 = v106;
  v108 = swift_allocObject(v161, 80, 7);
  *(_OWORD *)(v108 + 16) = xmmword_1E0B60;
  v109 = static Color.black.getter(v108);
  v110 = Gradient.Stop.init(color:location:)(v109, 0.5);
  *(_QWORD *)(v108 + 32) = v110;
  *(_QWORD *)(v108 + 40) = v111;
  v112 = static Color.black.getter(v110);
  v113 = Color.opacity(_:)(0.5);
  swift_release(v112);
  *(_QWORD *)(v108 + 48) = Gradient.Stop.init(color:location:)(v113, 0.67);
  *(_QWORD *)(v108 + 56) = v114;
  v115 = _s7BooksUI14ColorConstantsV25vibrantPrimaryButtonLabel05SwiftB00C0Vvg_0();
  *(_QWORD *)(v108 + 64) = Gradient.Stop.init(color:location:)(v115, 1.0);
  *(_QWORD *)(v108 + 72) = v116;
  v117 = static UnitPoint.topTrailing.getter();
  v119 = v118;
  v120 = static UnitPoint.bottomLeading.getter();
  v122 = v121;
  Gradient.init(stops:)(v108);
  LinearGradient.init(gradient:startPoint:endPoint:)(&v207, v117, v119, v120, v122);
  v123 = v207;
  v175 = v208;
  v124 = v209;
  v125 = v210;
  v126 = _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0();
  ((void (*)(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))_FrameLayout.init(width:height:alignment:))(&v211, a3 * 0.4, 0, a3 * 0.4, 0, v126, v127);
  *(_QWORD *)&v216 = v104;
  *(_QWORD *)&v217[0] = v123;
  *(_OWORD *)((char *)v217 + 8) = v175;
  *((_QWORD *)&v217[1] + 1) = v124;
  *(_QWORD *)&v218 = v125;
  *((_QWORD *)&v218 + 1) = 0x3FC3333333333333;
  LOBYTE(v219) = 1;
  *((_QWORD *)&v219 + 1) = v105;
  *(_QWORD *)&v220 = v107;
  *((_QWORD *)&v220 + 1) = v211;
  LOBYTE(v221) = v212;
  *((_QWORD *)&v221 + 1) = v213;
  LOBYTE(v222[0]) = v214;
  *(_OWORD *)((char *)v222 + 8) = v215;
  v128 = v77 + *(int *)(v191 + 20);
  WORD4(v216) = 256;
  ((void (*)(uint64_t, _QWORD, uint64_t))v158)(v128, v159, v80);
  *(double *)v77 = RectangleCornerRadii.init(topLeft:topRight:bottomRight:bottomLeft:)(0.0, 0.0, 0.0, a3 * 0.04);
  *(_QWORD *)(v77 + 8) = v129;
  *(_QWORD *)(v77 + 16) = v130;
  *(_QWORD *)(v77 + 24) = v131;
  v132 = v179;
  sub_1E428(v77, v179, (uint64_t (*)(_QWORD))&type metadata accessor for UnevenRoundedRectangle);
  *(_WORD *)(v132 + *(int *)(v180 + 36)) = 256;
  v133 = (uint64_t)v177;
  sub_B3D0(v132, (uint64_t)&v177[*(int *)(v178 + 36)], &qword_2662F8);
  v134 = v222[0];
  *(_OWORD *)(v133 + 96) = v221;
  *(_OWORD *)(v133 + 112) = v134;
  *(_QWORD *)(v133 + 128) = *(_QWORD *)&v222[1];
  v135 = v218;
  *(_OWORD *)(v133 + 32) = v217[1];
  *(_OWORD *)(v133 + 48) = v135;
  v136 = v220;
  *(_OWORD *)(v133 + 64) = v219;
  *(_OWORD *)(v133 + 80) = v136;
  v137 = v217[0];
  *(_OWORD *)v133 = v216;
  *(_OWORD *)(v133 + 16) = v137;
  sub_1183FC(&v216);
  sub_B414(v132, &qword_2662F8);
  sub_224DC(v77, (uint64_t (*)(_QWORD))&type metadata accessor for UnevenRoundedRectangle);
  swift_bridgeObjectRelease(v123);
  swift_release(v104);
  v138 = _s7BooksUI14ColorConstantsV19booksSecondaryLabel05SwiftB00C0Vvg_0();
  v139 = Color.opacity(_:)(0.5);
  swift_release(v138);
  v140 = v181;
  sub_B3D0(v133, v181, &qword_266300);
  v141 = v140 + *(int *)(v183 + 36);
  *(_QWORD *)v141 = v139;
  *(double *)(v141 + 8) = a3 * 0.25;
  *(_QWORD *)(v141 + 16) = 0;
  *(double *)(v141 + 24) = a3 * 0.02;
  sub_B414(v133, &qword_266300);
  v142 = swift_getKeyPath(&unk_1ED5E0);
  v144 = v186;
  v143 = v187;
  ((void (*)(char *, _QWORD, uint64_t))v165)(v186, v166, v187);
  v145 = (uint64_t)v182;
  v146 = (uint64_t *)&v182[*(int *)(v184 + 36)];
  ((void (*)(char *, char *, uint64_t))v163)((char *)v146 + *(int *)(v164 + 28), v144, v143);
  *v146 = v142;
  sub_B3D0(v140, v145, &qword_266308);
  ((void (*)(char *, uint64_t))v162)(v144, v143);
  sub_B414(v140, &qword_266308);
  v147 = v193;
  sub_167A4(v145, v193, &qword_266310);
  v148 = v176;
  sub_B3D0((uint64_t)v190, v176, &qword_266348);
  v149 = v188;
  sub_B3D0(v194, v188, &qword_266340);
  v150 = v192;
  v151 = v189;
  sub_B3D0(v192, v189, &qword_266338);
  sub_B3D0(v147, v145, &qword_266310);
  v152 = v185;
  sub_B3D0(v148, v185, &qword_266348);
  v153 = (int *)sub_5440(&qword_266350);
  sub_B3D0(v149, v152 + v153[12], &qword_266340);
  sub_B3D0(v151, v152 + v153[16], &qword_266338);
  sub_B3D0(v145, v152 + v153[20], &qword_266310);
  sub_B414(v193, &qword_266310);
  sub_B414(v150, &qword_266338);
  sub_B414(v194, &qword_266340);
  sub_B414((uint64_t)v190, &qword_266348);
  sub_B414(v145, &qword_266310);
  sub_B414(v151, &qword_266338);
  sub_B414(v149, &qword_266340);
  return sub_B414(v148, &qword_266348);
}

uint64_t sub_117998(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &opaque type descriptor for <<opaque return type of PDFCoverEffect.body(cover:)>>, 1);
}

uint64_t sub_1179A8(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &opaque type descriptor for <<opaque return type of PDFCoverEffect.shape>>, 1);
}

uint64_t sub_1179B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;

  v6 = *(_QWORD *)(a2 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  __chkstk_darwin(a1);
  v8 = sub_5440(&qword_2661A8);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  __chkstk_darwin(v8);
  v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a1, v8);
  sub_1E428(v3, (uint64_t)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for PDFCoverEffect);
  v12 = *(unsigned __int8 *)(v9 + 80);
  v13 = (v12 + 16) & ~v12;
  v14 = *(unsigned __int8 *)(v6 + 80);
  v15 = (v10 + v14 + v13) & ~v14;
  v16 = swift_allocObject(&unk_2534A0, v15 + v7, v12 | v14 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(v16 + v13, v11, v8);
  result = sub_116A8C((uint64_t)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v16 + v15);
  *a3 = sub_116AD0;
  a3[1] = v16;
  return result;
}

uint64_t sub_117AF4(uint64_t a1)
{
  uint64_t result;

  result = sub_6FD0(&qword_2661F0, type metadata accessor for PDFCoverEffect, (uint64_t)&protocol conformance descriptor for PDFCoverEffect);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t getEnumTagSinglePayload for PDFCoverEffect(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_117B3C);
}

uint64_t sub_117B3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a1 + *(int *)(a3 + 24);
  v5 = sub_5440(&qword_25EAE8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, a2, v5);
}

uint64_t storeEnumTagSinglePayload for PDFCoverEffect(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_117B8C);
}

uint64_t sub_117B8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = a1 + *(int *)(a4 + 24);
  v6 = sub_5440(&qword_25EAE8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, a2, a2, v6);
}

uint64_t sub_117BD4()
{
  return sub_7FD8(&qword_266290, &qword_266298, (uint64_t)&protocol conformance descriptor for GeometryReader<A>);
}

ValueMetadata *type metadata accessor for PDFMask()
{
  return &type metadata for PDFMask;
}

uint64_t sub_117C10()
{
  return sub_7FD8(&qword_2662A0, &qword_2662A8, (uint64_t)&protocol conformance descriptor for _ShapeView<A, B>);
}

double sub_117C3C@<D0>(uint64_t a1@<X8>, CGFloat a2@<D0>, CGFloat a3@<D1>, CGFloat a4@<D2>, CGFloat a5@<D3>, double a6@<D4>, double a7@<D5>)
{
  CGFloat v14;
  CGFloat v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double MaxY;
  double v24;
  double v25;
  char v26;
  double result;
  __int128 v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double MaxX;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double MinY;
  double MinX;
  _OWORD v42[2];
  char v43;
  CGRect v44;
  CGRect v45;
  CGRect v46;
  CGRect v47;
  CGRect v48;
  CGRect v49;
  CGRect v50;
  CGRect v51;
  CGRect v52;
  CGRect v53;
  CGRect v54;
  CGRect v55;
  CGRect v56;
  CGRect v57;
  CGRect v58;
  CGRect v59;
  CGRect v60;
  CGRect v61;
  CGRect v62;
  CGRect v63;
  CGRect v64;
  CGRect v65;
  CGRect v66;
  CGRect v67;

  Path.init()(v42);
  v44.origin.x = a2;
  v44.origin.y = a3;
  v44.size.width = a4;
  v44.size.height = a5;
  MinX = CGRectGetMinX(v44);
  v45.origin.x = a2;
  v45.origin.y = a3;
  v45.size.width = a4;
  v45.size.height = a5;
  MinY = CGRectGetMinY(v45);
  v46.origin.x = a2;
  v46.origin.y = a3;
  v46.size.width = a4;
  v46.size.height = a5;
  v14 = CGRectGetWidth(v46) * a6;
  v47.origin.x = a2;
  v47.origin.y = a3;
  v47.size.width = a4;
  v47.size.height = a5;
  v39 = v14 - CGRectGetWidth(v47) * a7;
  v48.origin.x = a2;
  v48.origin.y = a3;
  v48.size.width = a4;
  v48.size.height = a5;
  v38 = CGRectGetMinY(v48);
  v49.origin.x = a2;
  v49.origin.y = a3;
  v49.size.width = a4;
  v49.size.height = a5;
  v37 = CGRectGetWidth(v49) * a6;
  v50.origin.x = a2;
  v50.origin.y = a3;
  v50.size.width = a4;
  v50.size.height = a5;
  v36 = CGRectGetMinY(v50);
  v51.origin.x = a2;
  v51.origin.y = a3;
  v51.size.width = a4;
  v51.size.height = a5;
  v15 = CGRectGetWidth(v51) * a6;
  v52.origin.x = a2;
  v52.origin.y = a3;
  v52.size.width = a4;
  v52.size.height = a5;
  v35 = v15 + CGRectGetWidth(v52) * a7;
  v53.origin.x = a2;
  v53.origin.y = a3;
  v53.size.width = a4;
  v53.size.height = a5;
  v16 = CGRectGetMinY(v53);
  v54.origin.x = a2;
  v54.origin.y = a3;
  v54.size.width = a4;
  v54.size.height = a5;
  v33 = v16 + CGRectGetWidth(v54) * a7;
  v55.origin.x = a2;
  v55.origin.y = a3;
  v55.size.width = a4;
  v55.size.height = a5;
  MaxX = CGRectGetMaxX(v55);
  v56.origin.x = a2;
  v56.origin.y = a3;
  v56.size.width = a4;
  v56.size.height = a5;
  v17 = 1.0 - a6;
  v32 = (1.0 - a6) * CGRectGetWidth(v56);
  v57.origin.x = a2;
  v57.origin.y = a3;
  v57.size.width = a4;
  v57.size.height = a5;
  v18 = CGRectGetMaxX(v57);
  v58.origin.x = a2;
  v58.origin.y = a3;
  v58.size.width = a4;
  v58.size.height = a5;
  v31 = v18 - CGRectGetWidth(v58) * a7;
  v59.origin.x = a2;
  v59.origin.y = a3;
  v59.size.width = a4;
  v59.size.height = a5;
  v19 = v17 * CGRectGetWidth(v59);
  v60.origin.x = a2;
  v60.origin.y = a3;
  v60.size.width = a4;
  v60.size.height = a5;
  v30 = v19 - CGRectGetWidth(v60) * a7;
  v61.origin.x = a2;
  v61.origin.y = a3;
  v61.size.width = a4;
  v61.size.height = a5;
  v29 = CGRectGetMaxX(v61);
  v62.origin.x = a2;
  v62.origin.y = a3;
  v62.size.width = a4;
  v62.size.height = a5;
  v20 = v17 * CGRectGetWidth(v62);
  v63.origin.x = a2;
  v63.origin.y = a3;
  v63.size.width = a4;
  v63.size.height = a5;
  v21 = v20 + CGRectGetWidth(v63) * a7;
  v64.origin.x = a2;
  v64.origin.y = a3;
  v64.size.width = a4;
  v64.size.height = a5;
  v22 = CGRectGetMaxX(v64);
  v65.origin.x = a2;
  v65.origin.y = a3;
  v65.size.width = a4;
  v65.size.height = a5;
  MaxY = CGRectGetMaxY(v65);
  v66.origin.x = a2;
  v66.origin.y = a3;
  v66.size.width = a4;
  v66.size.height = a5;
  v24 = CGRectGetMinX(v66);
  v67.origin.x = a2;
  v67.origin.y = a3;
  v67.size.width = a4;
  v67.size.height = a5;
  v25 = CGRectGetMaxY(v67);
  Path.move(to:)(MinX, MinY);
  Path.addLine(to:)(v39, v38);
  Path.addQuadCurve(to:control:)(v35, v33, v37, v36);
  Path.addLine(to:)(v31, v30);
  Path.addQuadCurve(to:control:)(v29, v21, MaxX, v32);
  Path.addLine(to:)(v22, MaxY);
  Path.addLine(to:)(v24, v25);
  v26 = v43;
  result = *(double *)v42;
  v28 = v42[1];
  *(_OWORD *)a1 = v42[0];
  *(_OWORD *)(a1 + 16) = v28;
  *(_BYTE *)(a1 + 32) = v26;
  return result;
}

double sub_117FA4@<D0>(uint64_t a1@<X8>, CGFloat a2@<D0>, CGFloat a3@<D1>, CGFloat a4@<D2>, CGFloat a5@<D3>)
{
  double *v5;
  double result;
  __int128 v8;
  _OWORD v9[2];
  char v10;

  sub_117C3C((uint64_t)v9, a2, a3, a4, a5, *v5, v5[1]);
  result = *(double *)v9;
  v8 = v9[1];
  *(_OWORD *)a1 = v9[0];
  *(_OWORD *)(a1 + 16) = v8;
  *(_BYTE *)(a1 + 32) = v10;
  return result;
}

uint64_t sub_117FF0()
{
  return Shape.sizeThatFits(_:)();
}

void (*sub_118008(_QWORD *a1))(_QWORD *a1)
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = Animatable<>.animatableData.modify();
  return sub_118064;
}

void sub_118064(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD))(*a1 + 32))(*a1);
  free(v1);
}

uint64_t sub_118094(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_118244();
  return static Shape._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_1180E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_118244();
  return static Shape._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_118134(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_118244();
  return Shape.body.getter(a1, v2);
}

unint64_t sub_118170()
{
  unint64_t result;

  result = qword_2662B0;
  if (!qword_2662B0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for EmptyAnimatableData, &type metadata for EmptyAnimatableData);
    atomic_store(result, (unint64_t *)&qword_2662B0);
  }
  return result;
}

unint64_t sub_1181B8()
{
  unint64_t result;

  result = qword_2662B8;
  if (!qword_2662B8)
  {
    result = swift_getWitnessTable(&unk_1ED6D0, &type metadata for PDFMask);
    atomic_store(result, (unint64_t *)&qword_2662B8);
  }
  return result;
}

unint64_t sub_118200()
{
  unint64_t result;

  result = qword_2662C0;
  if (!qword_2662C0)
  {
    result = swift_getWitnessTable(&unk_1ED680, &type metadata for PDFMask);
    atomic_store(result, (unint64_t *)&qword_2662C0);
  }
  return result;
}

unint64_t sub_118244()
{
  unint64_t result;

  result = qword_2662C8;
  if (!qword_2662C8)
  {
    result = swift_getWitnessTable(&unk_1ED720, &type metadata for PDFMask);
    atomic_store(result, (unint64_t *)&qword_2662C8);
  }
  return result;
}

uint64_t sub_11828C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;

  v1 = sub_5440(&qword_2661A8);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = type metadata accessor for PDFCoverEffect(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v4 + v5 + v8) & ~v8;
  v10 = *(_QWORD *)(v7 + 64);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  v11 = (_QWORD *)(v0 + *(int *)(v6 + 24) + v9);
  v12 = sub_5440(&qword_25E948);
  if (swift_getEnumCaseMultiPayload(v11, v12) == 1)
  {
    v13 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v11, v13);
  }
  else
  {
    swift_release(*v11);
  }
  return swift_deallocObject(v0, v9 + v10, v3 | v8 | 7);
}

uint64_t sub_118380@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(sub_5440(&qword_2661A8) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = *(_QWORD *)(v3 + 64);
  v6 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for PDFCoverEffect(0) - 8) + 80);
  return sub_11663C(v1 + v4, v1 + ((v4 + v5 + v6) & ~v6), a1);
}

_QWORD *sub_1183FC(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[2];
  swift_retain(*a1);
  swift_bridgeObjectRetain(v2);
  return a1;
}

unint64_t static FlowActionDestinationKinds._table.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v5;

  if (qword_25DCA8 != -1)
    swift_once(&qword_25DCA8, sub_1187BC);
  v0 = qword_266358;
  v1 = sub_5440(&qword_266368);
  OSAllocatedUnfairLock.valueWithLock.getter(&v5, v0, v1);
  v2 = v5;
  v3 = sub_1184B8(v5);
  swift_bridgeObjectRelease(v2);
  return v3;
}

unint64_t sub_1184B8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t result;
  int64_t i;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  int64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t *v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  unint64_t v37;
  __int128 v38;
  uint64_t v39;

  v1 = a1;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    sub_5440(&qword_262950);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  }
  else
  {
    v3 = &_swiftEmptyDictionarySingleton;
  }
  v36 = v1 + 64;
  v4 = -1 << *(_BYTE *)(v1 + 32);
  if (-v4 < 64)
    v5 = ~(-1 << -(char)v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(v1 + 64);
  v35 = (unint64_t)(63 - v4) >> 6;
  result = swift_bridgeObjectRetain(v1);
  i = 0;
  v9 = (uint64_t *)&unk_266370;
  v10 = (uint64_t *)&unk_262960;
  if (v6)
    goto LABEL_10;
LABEL_11:
  v18 = i + 1;
  if (__OFADD__(i, 1))
    goto LABEL_35;
  if (v18 >= v35)
    goto LABEL_32;
  v19 = *(_QWORD *)(v36 + 8 * v18);
  v20 = i + 1;
  if (!v19)
  {
    v20 = i + 2;
    if (i + 2 >= v35)
      goto LABEL_32;
    v19 = *(_QWORD *)(v36 + 8 * v20);
    if (!v19)
    {
      v20 = i + 3;
      if (i + 3 >= v35)
        goto LABEL_32;
      v19 = *(_QWORD *)(v36 + 8 * v20);
      if (!v19)
      {
        v20 = i + 4;
        if (i + 4 >= v35)
          goto LABEL_32;
        v19 = *(_QWORD *)(v36 + 8 * v20);
        if (!v19)
        {
          v21 = i + 5;
          if (i + 5 < v35)
          {
            v19 = *(_QWORD *)(v36 + 8 * v21);
            if (v19)
            {
              v20 = i + 5;
              goto LABEL_26;
            }
            while (1)
            {
              v20 = v21 + 1;
              if (__OFADD__(v21, 1))
                goto LABEL_36;
              if (v20 >= v35)
                break;
              v19 = *(_QWORD *)(v36 + 8 * v20);
              ++v21;
              if (v19)
                goto LABEL_26;
            }
          }
LABEL_32:
          sub_94160(v1);
          return (unint64_t)v3;
        }
      }
    }
  }
LABEL_26:
  v6 = (v19 - 1) & v19;
  v17 = __clz(__rbit64(v19)) + (v20 << 6);
  for (i = v20; ; v17 = v16 | (i << 6))
  {
    v22 = 16 * v17;
    v23 = (uint64_t *)(*(_QWORD *)(v1 + 48) + 16 * v17);
    v25 = *v23;
    v24 = v23[1];
    v38 = *(_OWORD *)(*(_QWORD *)(v1 + 56) + v22);
    swift_bridgeObjectRetain(v24);
    v26 = sub_5440(v9);
    v27 = sub_5440(v10);
    swift_dynamicCast(&v39, &v38, v26, v27, 7);
    v28 = v39;
    result = sub_9F7C(v25, v24);
    v29 = result;
    if ((v30 & 1) != 0)
    {
      v37 = v6;
      v11 = v1;
      v12 = i;
      v13 = v10;
      v14 = v9;
      v15 = (uint64_t *)(v3[6] + 16 * result);
      result = swift_bridgeObjectRelease(v15[1]);
      *v15 = v25;
      v15[1] = v24;
      v9 = v14;
      v10 = v13;
      i = v12;
      v1 = v11;
      v6 = v37;
      *(_QWORD *)(v3[7] + 8 * v29) = v28;
      if (!v37)
        goto LABEL_11;
      goto LABEL_10;
    }
    if (v3[2] >= v3[3])
      break;
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v31 = (uint64_t *)(v3[6] + 16 * result);
    *v31 = v25;
    v31[1] = v24;
    *(_QWORD *)(v3[7] + 8 * result) = v28;
    v32 = v3[2];
    v33 = __OFADD__(v32, 1);
    v34 = v32 + 1;
    if (v33)
      goto LABEL_34;
    v3[2] = v34;
    if (!v6)
      goto LABEL_11;
LABEL_10:
    v16 = __clz(__rbit64(v6));
    v6 &= v6 - 1;
  }
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

uint64_t sub_1187BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  if (qword_25DCB0 != -1)
    swift_once(&qword_25DCB0, sub_118830);
  v0 = qword_266360;
  v1 = sub_5440(&qword_266378);
  v2 = swift_allocObject(v1, 28, 7);
  *(_DWORD *)(v2 + 24) = 0;
  *(_QWORD *)(v2 + 16) = v0;
  qword_266358 = v2;
  return swift_bridgeObjectRetain(v0);
}

unint64_t sub_118830()
{
  uint64_t v0;
  uint64_t inited;
  unint64_t result;
  uint64_t v3;

  v0 = sub_5440(&qword_266380);
  inited = swift_initStackObject(v0, &v3);
  *(_OWORD *)(inited + 16) = xmmword_1E0B60;
  *(_QWORD *)(inited + 32) = 1684366694;
  *(_QWORD *)(inited + 40) = 0xE400000000000000;
  *(_QWORD *)(inited + 48) = &type metadata for FlowAction.FeedDestination;
  *(_QWORD *)(inited + 56) = &protocol witness table for FlowAction.FeedDestination;
  *(_QWORD *)(inited + 64) = 0x536472614377656ELL;
  *(_QWORD *)(inited + 72) = 0xEA00000000007465;
  *(_QWORD *)(inited + 80) = &type metadata for FlowAction.NewCardSetDestination;
  *(_QWORD *)(inited + 88) = &protocol witness table for FlowAction.NewCardSetDestination;
  strcpy((char *)(inited + 96), "newSingleCard");
  *(_WORD *)(inited + 110) = -4864;
  *(_QWORD *)(inited + 112) = type metadata accessor for FlowAction.NewSingleCardDestination(0);
  *(_QWORD *)(inited + 120) = &protocol witness table for FlowAction.NewSingleCardDestination;
  result = sub_9538(inited);
  qword_266360 = result;
  return result;
}

void static FlowActionDestinationKinds.register<A>(_:name:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v10;
  os_unfair_lock_s *v11;

  if (qword_25DCA8 != -1)
    swift_once(&qword_25DCA8, sub_1187BC);
  v10 = (_QWORD *)(qword_266358 + 16);
  v11 = (os_unfair_lock_s *)(qword_266358 + 24);
  os_unfair_lock_lock((os_unfair_lock_t)(qword_266358 + 24));
  sub_1189C0(v10, a2, a3, a1, a4, a5);
  os_unfair_lock_unlock(v11);
}

uint64_t sub_1189C0(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  char isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  uint64_t v14;

  swift_bridgeObjectRetain(a3);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a1);
  v14 = *a1;
  *a1 = 0x8000000000000000;
  sub_B070(a4, a6, a2, a3, isUniquelyReferenced_nonNull_native);
  v12 = *a1;
  *a1 = v14;
  swift_bridgeObjectRelease(a3);
  return swift_bridgeObjectRelease(v12);
}

_QWORD *static FlowActionDestinationKinds._decode(_:from:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  Swift::String v37;
  void *object;
  Swift::String v39;
  uint64_t v40;
  __int128 v41;
  _BYTE v42[40];
  uint64_t v43;
  unint64_t v44;
  __int128 v45;
  uint64_t v46;

  v7 = type metadata accessor for JSONContext(0);
  __chkstk_darwin(v7);
  v9 = &v42[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v10 = type metadata accessor for JSONObject(0);
  __chkstk_darwin(v10);
  v12 = &v42[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v13 = sub_93DA4(a1, a1, (uint64_t)&protocol descriptor for FlowActionDestination, (uint64_t)&protocol descriptor for Decodable);
  if (v13)
  {
    v16 = v13;
    v17 = v14;
    v18 = v15;
    sub_BD00((uint64_t)a2, (uint64_t)v42);
    *(_QWORD *)&v45 = v16;
    *((_QWORD *)&v45 + 1) = v17;
    v46 = v18;
    sub_C404(&v43);
    dispatch thunk of Decodable.init(from:)(v42, v16, v18);
    if (v3)
      return sub_93E10(&v43);
LABEL_7:
    v41 = v45;
    v28 = v45;
    v29 = sub_5480(&v43, v45);
    *(_OWORD *)(a3 + 24) = v41;
    v30 = sub_C404((_QWORD *)a3);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v28 - 8) + 16))(v30, v29, v28);
    return (_QWORD *)_s7BooksUI13AnyPagedFrameVwxx_0(&v43);
  }
  v20 = sub_93DA4(a1, a1, (uint64_t)&protocol descriptor for FlowActionDestination, (uint64_t)&protocol descriptor for ExpressibleByJSON);
  if (v20)
  {
    v23 = v20;
    v24 = v21;
    v25 = v22;
    sub_BD00((uint64_t)a2, (uint64_t)v42);
    result = (_QWORD *)JSONObject.init(from:)(v42);
    if (v3)
      return result;
    v26 = a2[3];
    *(_QWORD *)&v41 = a2[4];
    sub_5480(a2, v26);
    v27 = dispatch thunk of Decoder.userInfo.getter(v26, v41);
    JSONContext.init(userInfo:)(v27);
    *(_QWORD *)&v45 = v23;
    *((_QWORD *)&v45 + 1) = v24;
    v46 = v25;
    sub_C404(&v43);
    dispatch thunk of ExpressibleByJSON.init(deserializing:using:)(v12, v9, v23, v25);
    goto LABEL_7;
  }
  v31 = type metadata accessor for DecodingError(0);
  swift_allocError(v31, &protocol witness table for DecodingError, 0, 0);
  v33 = v32;
  sub_5440(&qword_25F8F8);
  *v33 = a1;
  v34 = a2[3];
  v35 = a2[4];
  sub_5480(a2, v34);
  v36 = dispatch thunk of Decoder.codingPath.getter(v34, v35);
  v43 = 0;
  v44 = 0xE000000000000000;
  _StringGuts.grow(_:)(21);
  swift_bridgeObjectRelease(v44);
  v43 = 60;
  v44 = 0xE100000000000000;
  v37._countAndFlagsBits = _typeName(_:qualified:)(a1, 0);
  object = v37._object;
  String.append(_:)(v37);
  swift_bridgeObjectRelease(object);
  v39._object = (void *)0x80000000001FB270;
  v39._countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v39);
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)(v36, v43, v44, 0);
  v40 = (*(uint64_t (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v31 - 8) + 104))(v33, enum case for DecodingError.typeMismatch(_:), v31);
  return (_QWORD *)swift_willThrow(v40);
}

_QWORD *sub_118D94@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  return static FlowActionDestinationKinds._decode(_:from:)(a1, a2, a3);
}

void static FlowActionDestination.registerFlowActionDestination(name:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  static FlowActionDestinationKinds.register<A>(_:name:)(a3, a1, a2, a3, a4);
}

ValueMetadata *type metadata accessor for FlowActionDestinationKinds()
{
  return &type metadata for FlowActionDestinationKinds;
}

uint64_t static ListItemMetadata.recommendationsPage(assetInfo:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t KeyPath;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v27[3];
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[5];
  _OWORD v31[2];
  uint64_t v32;
  __int128 v33[2];
  uint64_t v34;
  _QWORD v35[5];
  _QWORD v36[5];
  _OWORD v37[2];
  uint64_t v38;

  v4 = a1[3];
  v5 = a1[4];
  sub_5480(a1, v4);
  v6 = AssetInfo.title.getter(v4, v5);
  v8 = v7;
  v9 = a1[3];
  v10 = a1[4];
  sub_5480(a1, v9);
  v11 = AssetInfo.author.getter(v9, v10);
  v13 = v12;
  v38 = 0;
  memset(v37, 0, sizeof(v37));
  v36[3] = &type metadata for ListItemMetadataTitleWithSubtitle;
  v36[4] = sub_BC90();
  v14 = swift_allocObject(&unk_2535F8, 49, 7);
  v36[0] = v14;
  *(_QWORD *)(v14 + 16) = v6;
  *(_QWORD *)(v14 + 24) = v8;
  *(_QWORD *)(v14 + 32) = v11;
  *(_QWORD *)(v14 + 40) = v13;
  *(_BYTE *)(v14 + 48) = 3;
  sub_BD00((uint64_t)a1, (uint64_t)v33);
  v35[3] = sub_5440(&qword_25E0D8);
  v35[4] = sub_7FD8((unint64_t *)&qword_25E0E0, &qword_25E0D8, (uint64_t)&protocol conformance descriptor for ListItemMetadataFormatAndDescriptorBase<A>);
  v15 = swift_allocObject(&unk_253620, 160, 7);
  v35[0] = v15;
  KeyPath = swift_getKeyPath(&unk_1ED800);
  v17 = swift_getKeyPath(&unk_1ED828);
  v18 = swift_getKeyPath(&unk_1ED850);
  *(_QWORD *)(v15 + 16) = KeyPath;
  *(_OWORD *)(v15 + 24) = 0u;
  *(_OWORD *)(v15 + 40) = 0u;
  *(_OWORD *)(v15 + 56) = 0u;
  *(_OWORD *)(v15 + 67) = 0u;
  *(_QWORD *)(v15 + 88) = v17;
  *(_BYTE *)(v15 + 96) = 0;
  *(_QWORD *)(v15 + 104) = v18;
  *(_WORD *)(v15 + 112) = 0;
  sub_AC68(v33, v15 + 120);
  v34 = 0;
  memset(v33, 0, sizeof(v33));
  v32 = 0;
  memset(v31, 0, sizeof(v31));
  sub_BD00((uint64_t)a1, (uint64_t)v27);
  v30[3] = sub_5440(&qword_266388);
  v30[4] = sub_7FD8(&qword_266390, &qword_266388, (uint64_t)&protocol conformance descriptor for ListItemMetadataRecommendationCreatorDescriptorBase<A>);
  v19 = swift_allocObject(&unk_253648, 48, 7);
  v30[0] = v19;
  v20 = v28;
  v21 = v29;
  sub_5480(v27, v28);
  v22 = AssetInfo.standardDescription.getter(v20, v21);
  v24 = v23;
  v25 = swift_getKeyPath(&unk_1ED878);
  *(_QWORD *)(v19 + 16) = v25;
  *(_BYTE *)(v19 + 24) = 0;
  *(_QWORD *)(v19 + 32) = v22;
  *(_QWORD *)(v19 + 40) = v24;
  sub_F9E4(v25, 0);
  swift_bridgeObjectRetain(v24);
  _s7BooksUI13AnyPagedFrameVwxx_0(v27);
  sub_BE0C(v25, 0);
  swift_bridgeObjectRelease(v24);
  *(_QWORD *)(a2 + 272) = 0;
  *(_OWORD *)(a2 + 256) = 0u;
  *(_OWORD *)(a2 + 208) = 0u;
  *(_OWORD *)(a2 + 224) = 0u;
  *(_OWORD *)(a2 + 176) = 0u;
  *(_OWORD *)(a2 + 192) = 0u;
  *(_OWORD *)(a2 + 128) = 0u;
  *(_OWORD *)(a2 + 144) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 240) = 0u;
  *(_OWORD *)(a2 + 160) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  sub_C378((uint64_t)v37, a2, &qword_25E0E8);
  sub_C378((uint64_t)v36, a2 + 40, &qword_25E0F0);
  sub_C378((uint64_t)v35, a2 + 80, &qword_25E0F8);
  sub_C378((uint64_t)v33, a2 + 160, &qword_25E100);
  sub_C378((uint64_t)v31, a2 + 200, &qword_25E108);
  return sub_C378((uint64_t)v30, a2 + 240, &qword_25E110);
}

uint64_t sub_119104()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 49, 7);
}

uint64_t sub_119130()
{
  uint64_t v0;

  sub_BDF8(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_WORD *)(v0 + 80), *(_BYTE *)(v0 + 82));
  sub_BE0C(*(_QWORD *)(v0 + 88), *(_BYTE *)(v0 + 96));
  sub_BE0C(*(_QWORD *)(v0 + 104), *(_BYTE *)(v0 + 112));
  _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)(v0 + 120));
  return swift_deallocObject(v0, 160, 7);
}

uint64_t sub_1191AC()
{
  uint64_t v0;

  sub_BE0C(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

void ShelfGridBlurEdgeMaskView.init(insets:)(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>)
{
  *(double *)a1 = a2;
  *(double *)(a1 + 8) = a3;
  *(double *)(a1 + 16) = a4;
  *(double *)(a1 + 24) = a5;
  *(_QWORD *)(a1 + 32) = 0x4028000000000000;
}

void *ShelfGridBlurEdgeMaskView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __int128 v4;
  uint64_t v5;
  _OWORD v7[2];
  uint64_t v8;
  _BYTE __src[296];
  _BYTE v10[303];

  v4 = *(_OWORD *)(v2 + 16);
  v7[0] = *(_OWORD *)v2;
  v7[1] = v4;
  v8 = *(_QWORD *)(v2 + 32);
  v5 = static VerticalAlignment.center.getter(a1);
  sub_119278((double *)v7, (uint64_t)__src);
  memcpy(&v10[7], __src, 0x128uLL);
  *(_QWORD *)a2 = v5;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 0;
  return memcpy((void *)(a2 + 17), v10, 0x12FuLL);
}

double sub_119278@<D0>(double *a1@<X0>, uint64_t a2@<X8>)
{
  double v4;
  double v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  char v50;
  double result;
  __int128 v52;
  char v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  char v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  __int128 v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  uint64_t v81;
  char v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  __int128 v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char v90;
  uint64_t v91;
  char v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char v96;
  uint64_t v97;
  char v98;
  __int128 v99;
  _BYTE v100[7];
  _BYTE v101[7];
  _BYTE v102[7];
  _DWORD v103[3];

  v68 = static Color.clear.getter(a1);
  v4 = a1[3];
  v5 = a1[4];
  v6 = a1[1] - v5;
  v7 = _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0();
  _FrameLayout.init(width:height:alignment:)(&v69, *(_QWORD *)&v6, 0, 0, 1, v7, v8);
  v66 = v71;
  v67 = v69;
  v62 = v72;
  v63 = v70;
  v64 = v74;
  v65 = v73;
  v9 = sub_5440(&qword_2663A8);
  v10 = swift_allocObject(v9, 48, 7);
  *(_OWORD *)(v10 + 16) = xmmword_1E1CE0;
  v11 = static Color.clear.getter(v10);
  *(_QWORD *)(v10 + 32) = v11;
  *(_QWORD *)(v10 + 40) = static Color.black.getter(v11);
  v95 = v10;
  specialized Array._endMutation()();
  Gradient.init(colors:)(v95);
  v12 = ((uint64_t (*)(void))static UnitPoint.leading.getter)();
  v14 = v13;
  v16 = v15;
  v17 = static UnitPoint.trailing.getter(v12);
  LinearGradient.init(gradient:startPoint:endPoint:)(&v75, v14, v16, v17, v18);
  v61 = v75;
  v60 = v76;
  v19 = v77;
  v20 = v78;
  v21 = _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0();
  v23 = _FrameLayout.init(width:height:alignment:)(&v79, 0x4020000000000000, 0, 0, 1, v21, v22);
  v58 = v81;
  v59 = v79;
  v53 = v82;
  v54 = v80;
  v56 = v84;
  v57 = v83;
  v55 = static Color.black.getter(v23);
  v24 = swift_allocObject(v9, 48, 7);
  *(_OWORD *)(v24 + 16) = xmmword_1E1CE0;
  v25 = static Color.clear.getter(v24);
  *(_QWORD *)(v24 + 32) = v25;
  *(_QWORD *)(v24 + 40) = static Color.black.getter(v25);
  v95 = v24;
  specialized Array._endMutation()();
  v26 = Gradient.init(colors:)(v95);
  v27 = static UnitPoint.trailing.getter(v26);
  v29 = v28;
  v30 = static UnitPoint.leading.getter();
  LinearGradient.init(gradient:startPoint:endPoint:)(&v85, v27, v29, v30, v31);
  v32 = v85;
  v52 = v86;
  v33 = v87;
  v34 = v88;
  v35 = _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0();
  v37 = _FrameLayout.init(width:height:alignment:)(&v89, 0x4020000000000000, 0, 0, 1, v35, v36);
  v38 = v89;
  v39 = v90;
  v40 = v91;
  v41 = v92;
  v42 = v93;
  v43 = v94;
  v44 = static Color.clear.getter(v37);
  v45 = _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0();
  ((void (*)(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))_FrameLayout.init(width:height:alignment:))(&v95, v4 - v5, 0, 0, 1, v45, v46);
  v47 = v95;
  v48 = v96;
  v49 = v97;
  v50 = v98;
  *(_QWORD *)a2 = v68;
  *(_QWORD *)(a2 + 8) = v67;
  *(_BYTE *)(a2 + 16) = v63;
  *(_QWORD *)(a2 + 24) = v66;
  *(_BYTE *)(a2 + 32) = v62;
  *(_QWORD *)(a2 + 40) = v65;
  *(_QWORD *)(a2 + 48) = v64;
  *(_QWORD *)(a2 + 56) = v61;
  *(_OWORD *)(a2 + 64) = v60;
  *(_QWORD *)(a2 + 80) = v19;
  *(_QWORD *)(a2 + 88) = v20;
  *(_QWORD *)(a2 + 96) = v59;
  *(_BYTE *)(a2 + 104) = v54;
  *(_QWORD *)(a2 + 112) = v58;
  *(_BYTE *)(a2 + 120) = v53;
  *(_QWORD *)(a2 + 128) = v57;
  *(_QWORD *)(a2 + 136) = v56;
  *(_QWORD *)(a2 + 144) = v55;
  *(_QWORD *)(a2 + 152) = v32;
  *(_OWORD *)(a2 + 160) = v52;
  *(_QWORD *)(a2 + 176) = v33;
  *(_QWORD *)(a2 + 184) = v34;
  *(_QWORD *)(a2 + 192) = v38;
  *(_BYTE *)(a2 + 200) = v39;
  *(_DWORD *)(a2 + 204) = *(_DWORD *)((char *)v103 + 3);
  *(_DWORD *)(a2 + 201) = v103[0];
  *(_QWORD *)(a2 + 208) = v40;
  *(_BYTE *)(a2 + 216) = v41;
  *(_DWORD *)(a2 + 220) = *(_DWORD *)&v102[3];
  *(_DWORD *)(a2 + 217) = *(_DWORD *)v102;
  *(_QWORD *)(a2 + 224) = v42;
  *(_QWORD *)(a2 + 232) = v43;
  *(_QWORD *)(a2 + 240) = v44;
  *(_QWORD *)(a2 + 248) = v47;
  *(_BYTE *)(a2 + 256) = v48;
  *(_DWORD *)(a2 + 257) = *(_DWORD *)v101;
  *(_DWORD *)(a2 + 260) = *(_DWORD *)&v101[3];
  *(_QWORD *)(a2 + 264) = v49;
  *(_BYTE *)(a2 + 272) = v50;
  *(_DWORD *)(a2 + 273) = *(_DWORD *)v100;
  *(_DWORD *)(a2 + 276) = *(_DWORD *)&v100[3];
  result = *(double *)&v99;
  *(_OWORD *)(a2 + 280) = v99;
  return result;
}

uint64_t sub_119640(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &opaque type descriptor for <<opaque return type of ShelfGridBlurEdgeMaskView.body>>, 1);
}

uint64_t getEnumTagSinglePayload for ShelfGridBlurEdgeMaskView(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 40))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for ShelfGridBlurEdgeMaskView(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 40) = v3;
  return result;
}

ValueMetadata *type metadata accessor for ShelfGridBlurEdgeMaskView()
{
  return &type metadata for ShelfGridBlurEdgeMaskView;
}

unint64_t sub_1196B8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_266398;
  if (!qword_266398)
  {
    v1 = sub_7EF8(&qword_2663A0);
    result = swift_getWitnessTable(&protocol conformance descriptor for HStack<A>, v1);
    atomic_store(result, (unint64_t *)&qword_266398);
  }
  return result;
}

uint64_t sub_119704(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  void (*v8)(char *, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t result;

  if (a2 < 0)
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
    __break(1u);
  }
  else
  {
    if (a2)
    {
      v4 = type metadata accessor for GridItem(0);
      v5 = (char *)static Array._allocateBufferUninitialized(minimumCapacity:)(a2, v4);
      *((_QWORD *)v5 + 2) = a2;
      v6 = *(_QWORD *)(v4 - 8);
      v7 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
      v8 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
      v8(&v5[v7], a1, v4);
      v9 = a2 - 1;
      if (a2 != 1)
      {
        v10 = *(_QWORD *)(v6 + 72);
        v11 = &v5[v10 + v7];
        do
        {
          v8(v11, a1, v4);
          v11 += v10;
          --v9;
        }
        while (v9);
      }
    }
    else
    {
      v5 = (char *)&_swiftEmptyArrayStorage;
    }
    v12 = type metadata accessor for GridItem(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(a1, v12);
    return (uint64_t)v5;
  }
  return result;
}

uint64_t BooksFinishedFrameViewModel.init(coverViewModels:localizedYear:userName:exposureData:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  uint64_t v14;
  int *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  char *v20;
  uint64_t v21;

  *a7 = swift_getKeyPath(&unk_1ED998);
  v14 = sub_5440(&qword_25F1F0);
  swift_storeEnumTagMultiPayload(a7, v14, 0);
  v15 = (int *)type metadata accessor for BooksFinishedFrameViewModel(0);
  v16 = (_QWORD *)((char *)a7 + v15[5]);
  *v16 = swift_getKeyPath(&unk_1ED9C8);
  v17 = sub_5440(&qword_25F548);
  swift_storeEnumTagMultiPayload(v16, v17, 0);
  *(_QWORD *)((char *)a7 + v15[10]) = 9;
  *(_OWORD *)((char *)a7 + v15[11]) = xmmword_1ED940;
  *(_QWORD *)((char *)a7 + v15[6]) = a1;
  v18 = (_QWORD *)((char *)a7 + v15[7]);
  *v18 = a2;
  v18[1] = a3;
  v19 = (_QWORD *)((char *)a7 + v15[8]);
  *v19 = a4;
  v19[1] = a5;
  v20 = (char *)a7 + v15[9];
  v21 = type metadata accessor for YIRSourceData(0);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(v20, a6, v21);
}

uint64_t sub_119954()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  int *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t ObjCClassFromMetadata;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  Swift::String v36;
  Swift::String v37;
  Swift::String v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v1 = v0;
  v2 = type metadata accessor for String.LocalizationValue.StringInterpolation(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v44 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Locale(0);
  v46 = *(_QWORD *)(v5 - 8);
  v47 = v5;
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v44 - v9;
  v11 = type metadata accessor for String.LocalizationValue(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v44 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v17 = (char *)&v44 - v16;
  v18 = (int *)type metadata accessor for BooksFinishedFrameViewModel(0);
  v19 = (uint64_t *)(v1 + v18[8]);
  v20 = v19[1];
  v45 = *v19;
  if (v20)
  {
    swift_bridgeObjectRetain(v20);
    v21 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000027, 0x80000000001FD040);
    static Locale.current.getter(v21);
    (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v15, v17, v11);
    v22 = type metadata accessor for BundleFinder();
    ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v22);
    v24 = objc_msgSend((id)objc_opt_self(NSBundle), "bundleForClass:", ObjCClassFromMetadata);
    static Locale.current.getter(v24);
    v25 = String.init(localized:defaultValue:table:bundle:locale:comment:)("YIR_Books_Finished_Frame_Title_With_Name", 40, 2, v15, 0, 0, v24, v8, "Year in Review: Books Finished frame title with user's name", 59, 2);
    v27 = v26;
    (*(void (**)(char *, uint64_t))(v46 + 8))(v10, v47);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v17, v11);
    v28 = sub_5440(&qword_25E310);
    v29 = swift_allocObject(v28, 152, 7);
    *(_OWORD *)(v29 + 16) = xmmword_1E0B60;
    v30 = *(_QWORD *)(*(_QWORD *)(v1 + v18[6]) + 16);
    *(_QWORD *)(v29 + 56) = &type metadata for Int;
    *(_QWORD *)(v29 + 64) = &protocol witness table for Int;
    *(_QWORD *)(v29 + 32) = v30;
    *(_QWORD *)(v29 + 96) = &type metadata for String;
    v31 = sub_578F0();
    *(_QWORD *)(v29 + 104) = v31;
    *(_QWORD *)(v29 + 72) = v45;
    *(_QWORD *)(v29 + 80) = v20;
    v32 = (uint64_t *)(v1 + v18[7]);
    v34 = *v32;
    v33 = v32[1];
    *(_QWORD *)(v29 + 136) = &type metadata for String;
    *(_QWORD *)(v29 + 144) = v31;
    *(_QWORD *)(v29 + 112) = v34;
    *(_QWORD *)(v29 + 120) = v33;
    swift_bridgeObjectRetain(v33);
    v35 = static String.localizedStringWithFormat(_:_:)(v25, v27, v29);
    swift_bridgeObjectRelease(v27);
    swift_bridgeObjectRelease(v29);
  }
  else
  {
    String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)(24, 2);
    v36._countAndFlagsBits = 0x6461657220756F59;
    v36._object = (void *)0xEB000000002A2A20;
    String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v36);
    v48 = *(_QWORD *)(*(_QWORD *)(v1 + v18[6]) + 16);
    String.LocalizationValue.StringInterpolation.appendInterpolation<A>(_:specifier:)(&v48, 1684827173, 0xE400000000000000, &type metadata for Int, &protocol witness table for Int);
    v37._countAndFlagsBits = 0x2A2A736B6F6F6220;
    v37._object = (void *)0xEC000000206E6920;
    String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v37);
    String.LocalizationValue.StringInterpolation.appendInterpolation(_:)(*(Swift::String *)(v1 + v18[7]));
    v38._countAndFlagsBits = 46;
    v38._object = (void *)0xE100000000000000;
    String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v38);
    v39 = String.LocalizationValue.init(stringInterpolation:)(v4);
    static Locale.current.getter(v39);
    (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v15, v17, v11);
    v40 = type metadata accessor for BundleFinder();
    v41 = swift_getObjCClassFromMetadata(v40);
    v42 = objc_msgSend((id)objc_opt_self(NSBundle), "bundleForClass:", v41);
    static Locale.current.getter(v42);
    v35 = String.init(localized:defaultValue:table:bundle:locale:comment:)("YIR_Books_Finished_Frame_Title_Without_Name", 43, 2, v15, v45, 0, v42, v8, "Year in Review: Books Finished frame title without user's name", 62, 2);
    (*(void (**)(char *, uint64_t))(v46 + 8))(v10, v47);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v17, v11);
  }
  return v35;
}

uint64_t sub_119DB8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t ObjCClassFromMetadata;
  id v17;
  uint64_t v18;
  _BYTE v20[16];

  v0 = type metadata accessor for Locale(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = &v20[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v2);
  v6 = &v20[-v5];
  v7 = type metadata accessor for String.LocalizationValue(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = &v20[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v9);
  v13 = &v20[-v12];
  v14 = String.LocalizationValue.init(stringLiteral:)(0xD00000000000001CLL, 0x80000000001FCF50);
  static Locale.current.getter(v14);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v8 + 16))(v11, v13, v7);
  v15 = type metadata accessor for BundleFinder();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v15);
  v17 = objc_msgSend((id)objc_opt_self(NSBundle), "bundleForClass:", ObjCClassFromMetadata);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v1 + 16))(v4, v6, v0);
  v18 = String.init(localized:table:bundle:locale:comment:)(v11, 0, 0, v17, v4, "Year in Review: Books Finished frame subtitle", 45, 2);
  (*(void (**)(_BYTE *, uint64_t))(v1 + 8))(v6, v0);
  (*(void (**)(_BYTE *, uint64_t))(v8 + 8))(v13, v7);
  return v18;
}

uint64_t sub_119F80()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v19;

  v1 = sub_5440(&qword_266600);
  __chkstk_darwin(v1);
  v3 = (uint64_t *)((char *)&v19 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  v4 = sub_5440(&qword_25F1F8);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v19 - v8;
  v10 = type metadata accessor for BooksFinishedFrameViewModel(0);
  v11 = *(_QWORD *)(*(_QWORD *)(v0 + *(int *)(v10 + 24)) + 16);
  sub_3160C((uint64_t)v9);
  v12 = (uint64_t)v3 + *(int *)(v1 + 48);
  *v3 = v11;
  sub_167A4((uint64_t)v9, v12, &qword_25F1F8);
  if (v11 >= *(_QWORD *)(v0 + *(int *)(v10 + 40)))
  {
    v15 = type metadata accessor for UserInterfaceSizeClass(0);
    v16 = *(_QWORD *)(v15 - 8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(v12, 1, v15) != 1)
    {
      sub_B3D0(v12, (uint64_t)v7, &qword_25F1F8);
      v17 = (*(uint64_t (**)(char *, uint64_t))(v16 + 88))(v7, v15);
      if (v17 == enum case for UserInterfaceSizeClass.compact(_:))
      {
        sub_B414(v12, &qword_25F1F8);
        return 3;
      }
      if (v17 == enum case for UserInterfaceSizeClass.regular(_:))
      {
        sub_B414(v12, &qword_25F1F8);
        return 4;
      }
      (*(void (**)(char *, uint64_t))(v16 + 8))(v7, v15);
    }
    v13 = &qword_266600;
    v14 = (uint64_t)v3;
  }
  else
  {
    v13 = &qword_25F1F8;
    v14 = v12;
  }
  sub_B414(v14, v13);
  return 2;
}

uint64_t sub_11A170@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  uint64_t v28;
  _BYTE *v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(_QWORD);
  uint64_t v33;
  uint64_t (*v34)(uint64_t, uint64_t, uint64_t);
  int v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  uint64_t v39;
  _BYTE *v40;
  _QWORD *v41;
  _BYTE *v42;
  uint64_t v43;
  void (*v44)(_BYTE *, uint64_t);
  uint64_t v45;
  double v46;
  _BYTE *v47;
  _QWORD *v48;
  _BYTE *v49;
  uint64_t v50;
  void (*v51)(_BYTE *, uint64_t);
  uint64_t v52;
  uint64_t result;
  double *v54;
  uint64_t v55;
  _BYTE v56[12];
  int v57;
  _BYTE *v58;
  _BYTE *v59;
  void (*v60)(uint64_t, _QWORD, uint64_t);
  unsigned int v61;
  void (*v62)(_BYTE *, _QWORD, uint64_t, uint64_t);
  _BYTE *v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _BYTE *v69;
  uint64_t v70;
  _BYTE *v71;
  uint64_t *v72;
  _BYTE *v73;
  uint64_t v74;

  v72 = a1;
  v2 = type metadata accessor for SizeConstants.Spacing(0);
  __chkstk_darwin(v2);
  v71 = &v56[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = type metadata accessor for SizeConstants(0);
  __chkstk_darwin(v4);
  v6 = &v56[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = type metadata accessor for UserInterfaceSizeClass(0);
  v8 = *(_QWORD **)(v7 - 8);
  __chkstk_darwin(v7);
  v59 = &v56[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = sub_5440(&qword_25F308);
  v11 = __chkstk_darwin(v10);
  v69 = &v56[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v11);
  v14 = &v56[-v13];
  v15 = sub_5440(&qword_25F1F8);
  v16 = __chkstk_darwin(v15);
  v58 = &v56[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v18 = __chkstk_darwin(v16);
  v63 = &v56[-v19];
  v20 = __chkstk_darwin(v18);
  v73 = &v56[-v21];
  v22 = __chkstk_darwin(v20);
  v24 = &v56[-v23];
  v25 = __chkstk_darwin(v22);
  v27 = &v56[-v26];
  __chkstk_darwin(v25);
  v29 = &v56[-v28];
  v30 = type metadata accessor for BooksFinishedFrameViewModel(0);
  v31 = *(_QWORD *)(*(_QWORD *)(v1 + *(int *)(v30 + 24)) + 16);
  v74 = v30;
  v66 = *(_QWORD *)(v1 + *(int *)(v30 + 40));
  v67 = v31;
  v68 = sub_119F80();
  v70 = v1;
  sub_3160C((uint64_t)v29);
  v32 = (void (*)(_QWORD))v8[13];
  v61 = enum case for UserInterfaceSizeClass.compact(_:);
  v60 = (void (*)(uint64_t, _QWORD, uint64_t))v32;
  v32(v27);
  v62 = (void (*)(_BYTE *, _QWORD, uint64_t, uint64_t))v8[7];
  v62(v27, 0, 1, v7);
  v64 = v10;
  v33 = (uint64_t)&v14[*(int *)(v10 + 48)];
  sub_B3D0((uint64_t)v29, (uint64_t)v14, &qword_25F1F8);
  sub_B3D0((uint64_t)v27, v33, &qword_25F1F8);
  v65 = v8;
  v34 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v8[6];
  if (v34((uint64_t)v14, 1, v7) == 1)
  {
    sub_B414((uint64_t)v27, &qword_25F1F8);
    sub_B414((uint64_t)v29, &qword_25F1F8);
    v35 = v34(v33, 1, v7);
    v36 = (uint64_t)v71;
    v37 = (uint64_t)v63;
    if (v35 == 1)
    {
      sub_B414((uint64_t)v14, &qword_25F1F8);
      v38 = 20.0;
      v39 = (uint64_t)v69;
      v40 = v73;
      goto LABEL_9;
    }
  }
  else
  {
    sub_B3D0((uint64_t)v14, (uint64_t)v24, &qword_25F1F8);
    if (v34(v33, 1, v7) != 1)
    {
      v41 = v65;
      v42 = v59;
      ((void (*)(_BYTE *, uint64_t, uint64_t))v65[4])(v59, v33, v7);
      v43 = sub_6FD0((unint64_t *)&qword_25F460, (uint64_t (*)(uint64_t))&type metadata accessor for UserInterfaceSizeClass, (uint64_t)&protocol conformance descriptor for UserInterfaceSizeClass);
      v57 = dispatch thunk of static Equatable.== infix(_:_:)(v24, v42, v7, v43);
      v44 = (void (*)(_BYTE *, uint64_t))v41[1];
      v44(v42, v7);
      sub_B414((uint64_t)v27, &qword_25F1F8);
      sub_B414((uint64_t)v29, &qword_25F1F8);
      v44(v24, v7);
      sub_B414((uint64_t)v14, &qword_25F1F8);
      v38 = 20.0;
      v36 = (uint64_t)v71;
      v39 = (uint64_t)v69;
      v40 = v73;
      v37 = (uint64_t)v63;
      if ((v57 & 1) != 0)
        goto LABEL_9;
      goto LABEL_8;
    }
    sub_B414((uint64_t)v27, &qword_25F1F8);
    sub_B414((uint64_t)v29, &qword_25F1F8);
    ((void (*)(_BYTE *, uint64_t))v65[1])(v24, v7);
    v36 = (uint64_t)v71;
    v37 = (uint64_t)v63;
  }
  sub_B414((uint64_t)v14, &qword_25F308);
  v39 = (uint64_t)v69;
  v40 = v73;
LABEL_8:
  v38 = 24.0;
LABEL_9:
  sub_3168C((uint64_t)v6);
  sub_1E428((uint64_t)v6, v36, type metadata accessor for SizeConstants.Environment);
  sub_224DC((uint64_t)v6, type metadata accessor for SizeConstants);
  sub_224DC(v36, type metadata accessor for SizeConstants.Spacing);
  sub_3160C((uint64_t)v40);
  v60(v37, v61, v7);
  v62((_BYTE *)v37, 0, 1, v7);
  v45 = v39 + *(int *)(v64 + 48);
  sub_B3D0((uint64_t)v40, v39, &qword_25F1F8);
  sub_B3D0(v37, v45, &qword_25F1F8);
  if (v34(v39, 1, v7) == 1)
  {
    sub_B414(v37, &qword_25F1F8);
    sub_B414((uint64_t)v40, &qword_25F1F8);
    if (v34(v45, 1, v7) == 1)
    {
      sub_B414(v39, &qword_25F1F8);
      v46 = 20.0;
      goto LABEL_17;
    }
  }
  else
  {
    v47 = v58;
    sub_B3D0(v39, (uint64_t)v58, &qword_25F1F8);
    if (v34(v45, 1, v7) != 1)
    {
      v48 = v65;
      v49 = v59;
      ((void (*)(_BYTE *, uint64_t, uint64_t))v65[4])(v59, v45, v7);
      v50 = sub_6FD0((unint64_t *)&qword_25F460, (uint64_t (*)(uint64_t))&type metadata accessor for UserInterfaceSizeClass, (uint64_t)&protocol conformance descriptor for UserInterfaceSizeClass);
      LODWORD(v71) = dispatch thunk of static Equatable.== infix(_:_:)(v47, v49, v7, v50);
      v51 = (void (*)(_BYTE *, uint64_t))v48[1];
      v51(v49, v7);
      sub_B414(v37, &qword_25F1F8);
      sub_B414((uint64_t)v73, &qword_25F1F8);
      v51(v47, v7);
      sub_B414(v39, &qword_25F1F8);
      v46 = 20.0;
      if ((v71 & 1) != 0)
        goto LABEL_17;
      goto LABEL_16;
    }
    sub_B414(v37, &qword_25F1F8);
    sub_B414((uint64_t)v40, &qword_25F1F8);
    ((void (*)(_BYTE *, uint64_t))v65[1])(v47, v7);
  }
  sub_B414(v39, &qword_25F308);
LABEL_16:
  v46 = 24.0;
LABEL_17:
  sub_3168C((uint64_t)v6);
  sub_1E428((uint64_t)v6, v36, type metadata accessor for SizeConstants.Environment);
  sub_224DC((uint64_t)v6, type metadata accessor for SizeConstants);
  sub_224DC(v36, type metadata accessor for SizeConstants.Spacing);
  if (v67 < v66)
    v52 = 2;
  else
    v52 = 3;
  sub_3168C((uint64_t)v6);
  sub_1E428((uint64_t)v6, v36, type metadata accessor for SizeConstants.Environment);
  sub_224DC((uint64_t)v6, type metadata accessor for SizeConstants);
  result = sub_224DC(v36, type metadata accessor for SizeConstants.Spacing);
  v54 = (double *)v72;
  v55 = v68;
  *v72 = v52;
  *((_QWORD *)v54 + 1) = v55;
  v54[2] = v38;
  v54[3] = v46;
  v54[4] = 32.0;
  return result;
}

uint64_t sub_11A8E0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t ObjCClassFromMetadata;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(char *, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  void (*v33)(char *, char *, uint64_t);
  id v34;
  uint64_t v35;
  id v36;
  char *v37;
  char *v38;
  void (*v39)(char *, char *, uint64_t);
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t (*v44)(char *, uint64_t);
  uint64_t v45;
  uint64_t v46;
  id v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  char *v60;
  char *v61;
  void (*v62)(char *, char *, uint64_t);
  uint64_t v63;
  id v64;
  id v65;
  uint64_t v66;
  char *v67;
  id v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  id v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t result;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  char *v95;
  id v96;
  uint64_t v97;
  void (*v98)(char *, char *, uint64_t);
  uint64_t v99;
  uint64_t v100;
  uint64_t (*v101)(char *, uint64_t);
  void (*v102)(char *, char *, uint64_t);
  void (*v103)(char *, uint64_t);

  v93 = a1;
  v1 = type metadata accessor for Locale(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = __chkstk_darwin(v1);
  v5 = (char *)&v84 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v7 = (char *)&v84 - v6;
  v8 = type metadata accessor for String.LocalizationValue(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v84 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v84 - v13;
  v15 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000011, 0x80000000001FCB40);
  static Locale.current.getter(v15);
  v98 = *(void (**)(char *, char *, uint64_t))(v9 + 16);
  v98(v12, v14, v8);
  v16 = type metadata accessor for BundleFinder();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v16);
  v97 = ObjCClassFromMetadata;
  v96 = (id)objc_opt_self(NSBundle);
  v18 = objc_msgSend(v96, "bundleForClass:", ObjCClassFromMetadata);
  v102 = *(void (**)(char *, char *, uint64_t))(v2 + 16);
  v102(v5, v7, v1);
  v19 = String.init(localized:table:bundle:locale:comment:)(v12, 0, 0, v18, v5, "Title of the 'Missing Anything' section in Year in Review", 57, 2);
  v91 = v20;
  v92 = v19;
  v103 = *(void (**)(char *, uint64_t))(v2 + 8);
  v103(v7, v1);
  v21 = *(uint64_t (**)(char *, uint64_t))(v9 + 8);
  v100 = v8;
  v101 = v21;
  v21(v14, v8);
  v22 = sub_11AEF4(v99);
  v89 = v23;
  v90 = v22;
  v24 = sub_5440(&qword_2665E0);
  v99 = type metadata accessor for BulletPointStack.Bullet(0);
  v25 = *(_QWORD *)(v99 - 8);
  v87 = *(_QWORD *)(v25 + 72);
  v26 = *(unsigned __int8 *)(v25 + 80);
  v27 = (v26 + 32) & ~v26;
  v28 = swift_allocObject(v24, v27 + 2 * v87, v26 | 7);
  v88 = v28;
  *(_OWORD *)(v28 + 16) = xmmword_1E1CE0;
  v29 = (_QWORD *)(v28 + v27);
  v30 = v14;
  v84 = v14;
  v31 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000017, 0x80000000001FCBC0);
  v32 = v7;
  static Locale.current.getter(v31);
  v33 = v98;
  v98(v12, v30, v8);
  v34 = v96;
  v35 = v97;
  v36 = objc_msgSend(v96, "bundleForClass:", v97);
  v37 = v5;
  v94 = v1;
  v95 = v5;
  v38 = v5;
  v39 = v102;
  v102(v38, v32, v1);
  v40 = String.init(localized:table:bundle:locale:comment:)(v12, 0, 0, v36, v37, "Title of first bullet in the 'Missing Anything' section in Year in Review", 73, 2);
  v85 = v41;
  v86 = v40;
  v42 = v32;
  v103(v32, v1);
  v43 = v84;
  v45 = v100;
  v44 = v101;
  v101(v84, v100);
  v46 = String.LocalizationValue.init(stringLiteral:)(0x100000000000007FLL, 0x80000000001FCC30);
  static Locale.current.getter(v46);
  v33(v12, v43, v45);
  v47 = objc_msgSend(v34, "bundleForClass:", v35);
  v49 = v94;
  v48 = v95;
  v39(v95, v42, v94);
  v50 = String.init(localized:table:bundle:locale:comment:)(v12, 0, 0, v47, v48, "Subtitle of first bullet in the 'Missing Anything' section in Year in Review", 76, 2);
  v52 = v51;
  v103(v42, v49);
  v53 = v43;
  v54 = v43;
  v55 = v100;
  v56 = v44(v54, v100);
  *v29 = 0xD000000000000010;
  v29[1] = 0x80000000001FCBA0;
  v57 = v85;
  v29[2] = v86;
  v29[3] = v57;
  v29[4] = v50;
  v29[5] = v52;
  UUID.init()(v56);
  v58 = (_QWORD *)((char *)v29 + v87);
  v59 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000018, 0x80000000001FCD00);
  v60 = v42;
  static Locale.current.getter(v59);
  v61 = v53;
  v62 = v98;
  v98(v12, v53, v55);
  v64 = v96;
  v63 = v97;
  v65 = objc_msgSend(v96, "bundleForClass:", v97);
  v66 = v94;
  v67 = v95;
  v102(v95, v60, v94);
  v68 = v65;
  v69 = v67;
  v70 = String.init(localized:table:bundle:locale:comment:)(v12, 0, 0, v68, v67, "Title of second bullet in the 'Missing Anything' section in Year in Review", 74, 2);
  v86 = v71;
  v87 = v70;
  v103(v60, v66);
  v72 = v100;
  v101(v61, v100);
  v73 = String.LocalizationValue.init(stringLiteral:)(0xD00000000000003BLL, 0x80000000001FCD70);
  static Locale.current.getter(v73);
  v62(v12, v61, v72);
  v74 = objc_msgSend(v64, "bundleForClass:", v63);
  v102(v69, v60, v66);
  v75 = String.init(localized:table:bundle:locale:comment:)(v12, 0, 0, v74, v69, "Subtitle of second bullet in the 'Missing Anything' section in Year in Review", 77, 2);
  v77 = v76;
  v103(v60, v66);
  v78 = v101(v61, v72);
  *v58 = 0x7261646E656C6163;
  v58[1] = 0xE800000000000000;
  v79 = v86;
  v58[2] = v87;
  v58[3] = v79;
  v58[4] = v75;
  v58[5] = v77;
  result = UUID.init()(v78);
  v81 = v93;
  v82 = v91;
  *v93 = v92;
  v81[1] = v82;
  v83 = v89;
  v81[2] = v90;
  v81[3] = v83;
  v81[4] = v88;
  return result;
}

uint64_t sub_11AEF4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t ObjCClassFromMetadata;
  id v25;
  uint64_t v26;
  _BYTE v28[16];

  v2 = type metadata accessor for Locale(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = &v28[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v4);
  v8 = &v28[-v7];
  v9 = type metadata accessor for String.LocalizationValue(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = &v28[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v11);
  v15 = &v28[-v14];
  v16 = type metadata accessor for String.LocalizationValue.StringInterpolation(0);
  __chkstk_darwin(v16);
  v18 = &v28[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)(127, 1);
  v19._countAndFlagsBits = 0x72757320656B614DLL;
  v19._object = (void *)0xEF2072756F792065;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v19);
  v20 = *(Swift::String *)(a1 + *(int *)(type metadata accessor for BooksFinishedFrameViewModel(0) + 28));
  String.LocalizationValue.StringInterpolation.appendInterpolation(_:)(v20);
  v21._object = (void *)0x80000000001FCE90;
  v21._countAndFlagsBits = 0x1000000000000070;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v21);
  v22 = String.LocalizationValue.init(stringInterpolation:)(v18);
  static Locale.current.getter(v22);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 16))(v13, v15, v9);
  v23 = type metadata accessor for BundleFinder();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v23);
  v25 = objc_msgSend((id)objc_opt_self(NSBundle), "bundleForClass:", ObjCClassFromMetadata);
  static Locale.current.getter(v25);
  v26 = String.init(localized:defaultValue:table:bundle:locale:comment:)("Make sure your %@ Year in Review includes all the books and audiobooks you finished—even if you read them outside Apple\\U00A0Books.", 133, 0, v13, 0, 0, v25, v6, "Subtitle of the 'Missing Anything' section in Year in Review", 60, 2);
  (*(void (**)(_BYTE *, uint64_t))(v3 + 8))(v8, v2);
  (*(void (**)(_BYTE *, uint64_t))(v10 + 8))(v15, v9);
  return v26;
}

uint64_t sub_11B15C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t *v10;
  uint64_t v12;

  v3 = type metadata accessor for GridItem.Size(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (_OWORD *)((char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = type metadata accessor for GridItem(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  *v6 = xmmword_1ED950;
  (*(void (**)(_OWORD *, _QWORD, uint64_t))(v4 + 104))(v6, enum case for GridItem.Size.flexible(_:), v3);
  v10 = (uint64_t *)(v1 + *(int *)(a1 + 68));
  GridItem.init(_:spacing:alignment:)(v6, v10[2], 0, 0, 0, 1);
  return sub_119704((uint64_t)v9, *v10);
}

uint64_t sub_11B254@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  uint64_t WitnessTable;
  uint64_t AssociatedConformanceWitness;
  uint64_t v16;
  uint64_t v17;
  uint64_t OpaqueTypeMetadata2;
  uint64_t OpaqueTypeConformance2;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t TupleTypeMetadata2;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  unsigned int v60;
  uint64_t v61;
  int v62;
  int v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void (*v76)(uint64_t, uint64_t);
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  char *v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  uint64_t v105;
  char v106[16];
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  void *v120;
  uint64_t v121;

  v104 = a2;
  v102 = type metadata accessor for ScrollIndicatorVisibility(0);
  v101 = *(_QWORD *)(v102 - 8);
  __chkstk_darwin(v102);
  v100 = (char *)&v78 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for ViewAlignedScrollTargetBehavior.LimitBehavior(0);
  __chkstk_darwin(v4);
  v97 = (char *)&v78 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for ViewAlignedScrollTargetBehavior(0);
  v99 = *(_QWORD *)(v6 - 8);
  v7 = v6;
  __chkstk_darwin(v6);
  v98 = (char *)&v78 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[2];
  v10 = type metadata accessor for Array(255, v9);
  v96 = a1[5];
  v11 = v96;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v96, v9, &protocol requirements base descriptor for Identifiable, &associated type descriptor for Identifiable.ID);
  v95 = a1[3];
  v13 = v95;
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v10);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v11, v9, AssociatedTypeWitness, &protocol requirements base descriptor for Identifiable, &associated conformance descriptor for Identifiable.Identifiable.ID: Hashable);
  v117 = v10;
  v118 = AssociatedTypeWitness;
  v119 = v13;
  v120 = (void *)WitnessTable;
  v121 = AssociatedConformanceWitness;
  v16 = type metadata accessor for ForEach(255, &v117);
  v93 = a1[6];
  v116 = v93;
  v17 = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v16);
  v117 = v16;
  v118 = v17;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(255, &v117, &opaque type descriptor for <<opaque return type of View.containerRelativeFrame(_:count:span:spacing:alignment:)>>, 0);
  v117 = v16;
  v118 = v17;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v117, &opaque type descriptor for <<opaque return type of View.containerRelativeFrame(_:count:span:spacing:alignment:)>>, 1);
  v20 = type metadata accessor for LazyHGrid(255, OpaqueTypeMetadata2, OpaqueTypeConformance2);
  v21 = swift_getWitnessTable(&protocol conformance descriptor for LazyHGrid<A>, v20);
  v117 = v20;
  v118 = v21;
  v22 = swift_getOpaqueTypeMetadata2(255, &v117, &opaque type descriptor for <<opaque return type of View.scrollTargetLayout(isEnabled:)>>, 0);
  v81 = a1[4];
  v103 = a1;
  v82 = a1[7];
  v117 = v81;
  v118 = v82;
  v23 = swift_getOpaqueTypeMetadata2(255, &v117, &opaque type descriptor for <<opaque return type of View.containerRelativeFrame(_:count:span:spacing:alignment:)>>, 0);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v22, v23, 0, 0);
  v25 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  v26 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v25);
  v27 = type metadata accessor for HStack(255, v25, v26);
  v79 = swift_getWitnessTable(&protocol conformance descriptor for HStack<A>, v27);
  v28 = type metadata accessor for ScrollView(0, v27);
  v80 = *(_QWORD *)(v28 - 8);
  __chkstk_darwin(v28);
  v30 = (char *)&v78 - v29;
  v31 = swift_getWitnessTable(&protocol conformance descriptor for ScrollView<A>, v28);
  v117 = v28;
  v118 = v7;
  v78 = v7;
  v119 = v31;
  v120 = &protocol witness table for ViewAlignedScrollTargetBehavior;
  v32 = swift_getOpaqueTypeMetadata2(0, &v117, &opaque type descriptor for <<opaque return type of View.scrollTargetBehavior<A>(_:)>>, 0);
  v94 = *(_QWORD *)(v32 - 8);
  __chkstk_darwin(v32);
  v34 = (char *)&v78 - v33;
  v117 = v28;
  v118 = v7;
  v119 = v31;
  v120 = &protocol witness table for ViewAlignedScrollTargetBehavior;
  v35 = swift_getOpaqueTypeConformance2(&v117, &opaque type descriptor for <<opaque return type of View.scrollTargetBehavior<A>(_:)>>, 1);
  v117 = v32;
  v118 = v35;
  v36 = swift_getOpaqueTypeMetadata2(0, &v117, &opaque type descriptor for <<opaque return type of View.scrollIndicators(_:axes:)>>, 0);
  v87 = *(_QWORD *)(v36 - 8);
  __chkstk_darwin(v36);
  v85 = (char *)&v78 - v37;
  v117 = v32;
  v118 = v35;
  v83 = v35;
  v38 = swift_getOpaqueTypeConformance2(&v117, &opaque type descriptor for <<opaque return type of View.scrollIndicators(_:axes:)>>, 1);
  v117 = v36;
  v118 = v38;
  v84 = v38;
  v39 = swift_getOpaqueTypeMetadata2(0, &v117, &opaque type descriptor for <<opaque return type of View.scrollClipDisabled(_:)>>, 0);
  v88 = *(_QWORD *)(v39 - 8);
  __chkstk_darwin(v39);
  v86 = (char *)&v78 - v40;
  v41 = type metadata accessor for SafeAreaPaddingModifier(255);
  v89 = v39;
  v42 = type metadata accessor for ModifiedContent(0, v39, v41);
  v92 = *(_QWORD *)(v42 - 8);
  v43 = __chkstk_darwin(v42);
  v90 = (char *)&v78 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = __chkstk_darwin(v43);
  v91 = (uint64_t)&v78 - v46;
  v47 = static Axis.Set.horizontal.getter(v45);
  v107 = v9;
  v108 = v95;
  v109 = v81;
  v110 = v96;
  v111 = v93;
  v112 = v82;
  v113 = v105;
  v48 = v27;
  v49 = v100;
  v50 = ScrollView.init(_:showsIndicators:content:)(v47, 1, sub_122090, v106, v48, v79);
  v51 = v97;
  static ViewAlignedScrollTargetBehavior.LimitBehavior.automatic.getter(v50);
  v52 = v98;
  v53 = v51;
  v54 = v34;
  ViewAlignedScrollTargetBehavior.init(limitBehavior:)(v53);
  v55 = v78;
  View.scrollTargetBehavior<A>(_:)(v52, v28, v78, v31, &protocol witness table for ViewAlignedScrollTargetBehavior);
  (*(void (**)(char *, uint64_t))(v99 + 8))(v52, v55);
  v56 = (*(uint64_t (**)(char *, uint64_t))(v80 + 8))(v30, v28);
  v57 = static ScrollIndicatorVisibility.hidden.getter(v56);
  v58 = static Axis.Set.vertical.getter(v57);
  v59 = v58;
  v60 = static Axis.Set.horizontal.getter(v58);
  v61 = Axis.Set.init(rawValue:)(0);
  v62 = Axis.Set.init(rawValue:)(v61);
  if (Axis.Set.init(rawValue:)(v62 & v59) != v59)
    v61 = Axis.Set.init(rawValue:)(v61 | v59);
  v63 = Axis.Set.init(rawValue:)(v61);
  if (Axis.Set.init(rawValue:)(v63 & v60) != v60)
    v61 = Axis.Set.init(rawValue:)(v61 | v60);
  v64 = v85;
  View.scrollIndicators(_:axes:)(v49, v61, v32, v83);
  (*(void (**)(char *, uint64_t))(v101 + 8))(v49, v102);
  (*(void (**)(char *, uint64_t))(v94 + 8))(v54, v32);
  v65 = v86;
  v66 = v84;
  View.scrollClipDisabled(_:)(1, v36, v84);
  v67 = (*(uint64_t (**)(char *, uint64_t))(v87 + 8))(v64, v36);
  v68 = static Edge.Set.horizontal.getter(v67);
  v69 = *(_QWORD *)(v105 + *((int *)v103 + 17) + 32);
  v117 = v36;
  v118 = v66;
  v70 = swift_getOpaqueTypeConformance2(&v117, &opaque type descriptor for <<opaque return type of View.scrollClipDisabled(_:)>>, 1);
  v71 = (uint64_t)v90;
  v72 = v69;
  v73 = v89;
  sub_11CFB0(v68, v72, 0, v89, v70);
  (*(void (**)(char *, uint64_t))(v88 + 8))(v65, v73);
  v74 = sub_6FD0(&qword_2665B8, (uint64_t (*)(uint64_t))&type metadata accessor for SafeAreaPaddingModifier, (uint64_t)&protocol conformance descriptor for SafeAreaPaddingModifier);
  v114 = v70;
  v115 = v74;
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v42);
  v75 = v91;
  sub_10F80(v71, v42, v91);
  v76 = *(void (**)(uint64_t, uint64_t))(v92 + 8);
  v76(v71, v42);
  sub_C5C0(v75, v42, v104);
  return ((uint64_t (*)(uint64_t, uint64_t))v76)(v75, v42);
}

uint64_t sub_11BA80@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t OpaqueTypeMetadata2;
  uint64_t OpaqueTypeConformance2;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t TupleTypeMetadata2;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42[16];
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t AssociatedTypeWitness;
  uint64_t v52;
  uint64_t WitnessTable;
  uint64_t AssociatedConformanceWitness;
  uint64_t v55;
  uint64_t v56;

  v40 = a1;
  v41 = a8;
  v39 = a5;
  v50 = type metadata accessor for Array(255, a2);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v39, a2, &protocol requirements base descriptor for Identifiable, &associated type descriptor for Identifiable.ID);
  v52 = a3;
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v50);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v39, a2, AssociatedTypeWitness, &protocol requirements base descriptor for Identifiable, &associated conformance descriptor for Identifiable.Identifiable.ID: Hashable);
  v13 = type metadata accessor for ForEach(255, &v50);
  v56 = a6;
  v14 = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v13);
  v50 = v13;
  AssociatedTypeWitness = v14;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(255, &v50, &opaque type descriptor for <<opaque return type of View.containerRelativeFrame(_:count:span:spacing:alignment:)>>, 0);
  v50 = v13;
  AssociatedTypeWitness = v14;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v50, &opaque type descriptor for <<opaque return type of View.containerRelativeFrame(_:count:span:spacing:alignment:)>>, 1);
  v17 = type metadata accessor for LazyHGrid(255, OpaqueTypeMetadata2, OpaqueTypeConformance2);
  v18 = swift_getWitnessTable(&protocol conformance descriptor for LazyHGrid<A>, v17);
  v50 = v17;
  AssociatedTypeWitness = v18;
  v19 = swift_getOpaqueTypeMetadata2(255, &v50, &opaque type descriptor for <<opaque return type of View.scrollTargetLayout(isEnabled:)>>, 0);
  v20 = a4;
  v50 = a4;
  AssociatedTypeWitness = a7;
  v21 = swift_getOpaqueTypeMetadata2(255, &v50, &opaque type descriptor for <<opaque return type of View.containerRelativeFrame(_:count:span:spacing:alignment:)>>, 0);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v19, v21, 0, 0);
  v37 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  v36 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v37);
  v23 = type metadata accessor for HStack(0, v37, v36);
  v38 = *(_QWORD *)(v23 - 8);
  v24 = __chkstk_darwin(v23);
  v26 = (char *)&v36 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  v28 = (char *)&v36 - v27;
  v29 = a2;
  v50 = a2;
  AssociatedTypeWitness = a3;
  v52 = a4;
  v30 = v39;
  WitnessTable = v39;
  AssociatedConformanceWitness = a6;
  v55 = a7;
  v31 = type metadata accessor for HorizontalScrollingGrid(0, (uint64_t)&v50);
  v32 = *(_QWORD *)(v40 + *(int *)(v31 + 68) + 24);
  v43 = v29;
  v44 = a3;
  v45 = v20;
  v46 = v30;
  v47 = a6;
  v48 = a7;
  v49 = v40;
  v33 = static VerticalAlignment.center.getter(v31);
  HStack.init(alignment:spacing:content:)(v33, v32, 0, sub_12209C, v42, v37, v36);
  swift_getWitnessTable(&protocol conformance descriptor for HStack<A>, v23);
  sub_10F80((uint64_t)v26, v23, (uint64_t)v28);
  v34 = *(void (**)(char *, uint64_t))(v38 + 8);
  v34(v26, v23);
  sub_C5C0((uint64_t)v28, v23, v41);
  return ((uint64_t (*)(char *, uint64_t))v34)(v28, v23);
}

uint64_t sub_11BD8C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(_QWORD, _QWORD, _QWORD, _QWORD)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void (*a7)(_QWORD, _QWORD, _QWORD, _QWORD)@<X6>, uint64_t a8@<X8>)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t AssociatedTypeWitness;
  uint64_t WitnessTable;
  uint64_t AssociatedConformanceWitness;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  void (*v55)(_QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v56;
  void (*v57)(_QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  void (*v68)(_QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void (*v79)(uint64_t, uint64_t, uint64_t);
  uint64_t v80;
  uint64_t (*v81)(uint64_t, uint64_t, uint64_t);
  int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void (*v90)(char *, uint64_t);
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  char v99;
  void (*v100)(char *, uint64_t);
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  void (*v106)(_QWORD, _QWORD, _QWORD, _QWORD);
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  void (*v113)(uint64_t, uint64_t);
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  void (*v117)(char *, uint64_t, uint64_t);
  char *v118;
  uint64_t (*v119)(uint64_t, uint64_t);
  uint64_t v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  uint64_t OpaqueTypeConformance2;
  uint64_t v126;
  void (*v127)(_QWORD, _QWORD, _QWORD, _QWORD);
  char *v128;
  char *v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  char *v135;
  char *v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  uint64_t OpaqueTypeMetadata2;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  uint64_t v153;
  void (*v154)(_QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v155;
  char v156[8];
  uint64_t v157;
  void (*v158)(_QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  void (*v162)(_QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  _QWORD v166[2];
  uint64_t v167;
  void (*v168)(_QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  void (*v172)(_QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v173;

  v154 = a7;
  v146 = a4;
  v155 = a1;
  v143 = a8;
  v130 = type metadata accessor for UserInterfaceSizeClass(0);
  v151 = *(_QWORD *)(v130 - 8);
  __chkstk_darwin(v130);
  v123 = (char *)&v122 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v149 = sub_5440(&qword_25F308);
  v15 = __chkstk_darwin(v149);
  v139 = (uint64_t)&v122 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v129 = (char *)&v122 - v17;
  v18 = sub_5440(&qword_25F1F8);
  v19 = __chkstk_darwin(v18);
  v122 = (uint64_t)&v122 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __chkstk_darwin(v19);
  v136 = (char *)&v122 - v22;
  v23 = __chkstk_darwin(v21);
  v145 = (uint64_t)&v122 - v24;
  v25 = __chkstk_darwin(v23);
  v132 = (uint64_t)&v122 - v26;
  v27 = __chkstk_darwin(v25);
  v128 = (char *)&v122 - v28;
  v29 = __chkstk_darwin(v27);
  v144 = (uint64_t)&v122 - v30;
  v153 = *(_QWORD *)(a4 - 8);
  __chkstk_darwin(v29);
  v152 = (char *)&v122 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v167 = a4;
  v168 = a7;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(0, &v167, &opaque type descriptor for <<opaque return type of View.containerRelativeFrame(_:count:span:spacing:alignment:)>>, 0);
  v138 = *(_QWORD *)(OpaqueTypeMetadata2 - 8);
  v32 = __chkstk_darwin(OpaqueTypeMetadata2);
  v141 = (char *)&v122 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = __chkstk_darwin(v32);
  v137 = (char *)&v122 - v35;
  __chkstk_darwin(v34);
  v140 = (uint64_t)&v122 - v36;
  v37 = type metadata accessor for PinnedScrollableViews(0);
  __chkstk_darwin(v37);
  v134 = (char *)&v122 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = type metadata accessor for Array(255, a2);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, a5, a2, &protocol requirements base descriptor for Identifiable, &associated type descriptor for Identifiable.ID);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v39);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a5, a2, AssociatedTypeWitness, &protocol requirements base descriptor for Identifiable, &associated conformance descriptor for Identifiable.Identifiable.ID: Hashable);
  v167 = v39;
  v168 = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD))AssociatedTypeWitness;
  v169 = (uint64_t)a3;
  v170 = WitnessTable;
  v171 = AssociatedConformanceWitness;
  v43 = type metadata accessor for ForEach(255, &v167);
  v44 = a6;
  v173 = a6;
  v45 = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v43);
  v167 = v43;
  v168 = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD))v45;
  v46 = swift_getOpaqueTypeMetadata2(255, &v167, &opaque type descriptor for <<opaque return type of View.containerRelativeFrame(_:count:span:spacing:alignment:)>>, 0);
  v126 = v46;
  v167 = v43;
  v168 = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD))v45;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v167, &opaque type descriptor for <<opaque return type of View.containerRelativeFrame(_:count:span:spacing:alignment:)>>, 1);
  v47 = type metadata accessor for LazyHGrid(0, v46, OpaqueTypeConformance2);
  v133 = *(_QWORD *)(v47 - 8);
  __chkstk_darwin(v47);
  v131 = (char *)&v122 - v48;
  v127 = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD))swift_getWitnessTable(&protocol conformance descriptor for LazyHGrid<A>, v47);
  v167 = v47;
  v168 = v127;
  v150 = swift_getOpaqueTypeMetadata2(0, &v167, &opaque type descriptor for <<opaque return type of View.scrollTargetLayout(isEnabled:)>>, 0);
  v147 = *(_QWORD *)(v150 - 8);
  v49 = __chkstk_darwin(v150);
  v135 = (char *)&v122 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = __chkstk_darwin(v49);
  v53 = (char *)&v122 - v52;
  __chkstk_darwin(v51);
  v148 = (uint64_t)&v122 - v54;
  v167 = a2;
  v168 = a3;
  v55 = a3;
  v56 = v146;
  v169 = v146;
  v170 = a5;
  v57 = v154;
  v171 = v44;
  v172 = v154;
  v58 = type metadata accessor for HorizontalScrollingGrid(0, (uint64_t)&v167);
  v59 = v155;
  v124 = sub_11B15C(v58);
  v60 = v59;
  v61 = *(_QWORD *)(v59 + *(int *)(v58 + 68) + 24);
  v157 = a2;
  v158 = v55;
  v159 = v56;
  v160 = a5;
  v161 = v44;
  v162 = v57;
  v163 = v60;
  v62 = static VerticalAlignment.center.getter(v124);
  v63 = v134;
  v64 = v126;
  v65 = OpaqueTypeConformance2;
  sub_11CF4C();
  v121 = v65;
  v66 = v131;
  v67 = v144;
  LazyHGrid.init(rows:alignment:spacing:pinnedViews:content:)(v124, v62, v61, 0, v63, sub_1220A8, v156, v64, v121);
  v68 = v127;
  View.scrollTargetLayout(isEnabled:)(1, v47, v127);
  v69 = v155;
  (*(void (**)(char *, uint64_t))(v133 + 8))(v66, v47);
  v167 = v47;
  v168 = v68;
  v70 = v130;
  v71 = swift_getOpaqueTypeConformance2(&v167, &opaque type descriptor for <<opaque return type of View.scrollTargetLayout(isEnabled:)>>, 1);
  v72 = (uint64_t)v128;
  v73 = v150;
  v133 = v71;
  sub_10F80((uint64_t)v53, v150, v148);
  v134 = *(char **)(v147 + 8);
  ((void (*)(char *, uint64_t))v134)(v53, v73);
  v74 = v56;
  v75 = (uint64_t)v129;
  v76 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v153 + 16))(v152, v69 + *(int *)(v58 + 80), v74);
  LODWORD(v131) = static Axis.Set.horizontal.getter(v76);
  sub_3160C(v67);
  v77 = enum case for UserInterfaceSizeClass.regular(_:);
  v78 = v151;
  v79 = *(void (**)(uint64_t, uint64_t, uint64_t))(v151 + 104);
  v79(v72, enum case for UserInterfaceSizeClass.regular(_:), v70);
  v127 = *(void (**)(_QWORD, _QWORD, _QWORD, _QWORD))(v78 + 56);
  v127(v72, 0, 1, v70);
  v80 = v75 + *(int *)(v149 + 48);
  sub_B3D0(v67, v75, &qword_25F1F8);
  sub_B3D0(v72, v80, &qword_25F1F8);
  v81 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v78 + 48);
  if (v81(v75, 1, v70) == 1)
  {
    sub_B414(v72, &qword_25F1F8);
    sub_B414(v67, &qword_25F1F8);
    v82 = v81(v80, 1, v70);
    v83 = v145;
    if (v82 == 1)
    {
      sub_B414(v75, &qword_25F1F8);
LABEL_8:
      v91 = 4;
      goto LABEL_10;
    }
    goto LABEL_6;
  }
  sub_B3D0(v75, v132, &qword_25F1F8);
  if (v81(v80, 1, v70) == 1)
  {
    sub_B414(v72, &qword_25F1F8);
    sub_B414(v67, &qword_25F1F8);
    (*(void (**)(uint64_t, uint64_t))(v151 + 8))(v132, v70);
    v83 = v145;
LABEL_6:
    sub_B414(v75, &qword_25F308);
    goto LABEL_9;
  }
  v84 = v75;
  v85 = v151;
  v86 = v123;
  (*(void (**)(char *, uint64_t, uint64_t))(v151 + 32))(v123, v80, v70);
  v87 = sub_6FD0((unint64_t *)&qword_25F460, (uint64_t (*)(uint64_t))&type metadata accessor for UserInterfaceSizeClass, (uint64_t)&protocol conformance descriptor for UserInterfaceSizeClass);
  v88 = v72;
  v89 = v132;
  LODWORD(v126) = dispatch thunk of static Equatable.== infix(_:_:)(v132, v86, v70, v87);
  v90 = *(void (**)(char *, uint64_t))(v85 + 8);
  v90(v86, v70);
  sub_B414(v88, &qword_25F1F8);
  sub_B414(v144, &qword_25F1F8);
  v90((char *)v89, v70);
  sub_B414(v84, &qword_25F1F8);
  v83 = v145;
  if ((v126 & 1) != 0)
    goto LABEL_8;
LABEL_9:
  v91 = 1;
LABEL_10:
  sub_3160C(v83);
  v92 = (uint64_t)v136;
  v79((uint64_t)v136, v77, v70);
  v127(v92, 0, 1, v70);
  v93 = v139;
  v94 = v139 + *(int *)(v149 + 48);
  sub_B3D0(v83, v139, &qword_25F1F8);
  sub_B3D0(v92, v94, &qword_25F1F8);
  if (v81(v93, 1, v70) != 1)
  {
    v95 = v122;
    sub_B3D0(v93, v122, &qword_25F1F8);
    if (v81(v94, 1, v70) != 1)
    {
      v96 = v151;
      v97 = v123;
      (*(void (**)(char *, uint64_t, uint64_t))(v151 + 32))(v123, v94, v70);
      v98 = sub_6FD0((unint64_t *)&qword_25F460, (uint64_t (*)(uint64_t))&type metadata accessor for UserInterfaceSizeClass, (uint64_t)&protocol conformance descriptor for UserInterfaceSizeClass);
      v99 = dispatch thunk of static Equatable.== infix(_:_:)(v95, v97, v70, v98);
      v100 = *(void (**)(char *, uint64_t))(v96 + 8);
      v100(v97, v70);
      sub_B414(v92, &qword_25F1F8);
      sub_B414(v145, &qword_25F1F8);
      v100((char *)v95, v70);
      sub_B414(v93, &qword_25F1F8);
      if ((v99 & 1) != 0)
        goto LABEL_17;
LABEL_18:
      v101 = 1;
      goto LABEL_19;
    }
    sub_B414(v92, &qword_25F1F8);
    sub_B414(v83, &qword_25F1F8);
    (*(void (**)(uint64_t, uint64_t))(v151 + 8))(v95, v70);
LABEL_15:
    sub_B414(v93, &qword_25F308);
    goto LABEL_18;
  }
  sub_B414(v92, &qword_25F1F8);
  sub_B414(v83, &qword_25F1F8);
  if (v81(v94, 1, v70) != 1)
    goto LABEL_15;
  sub_B414(v93, &qword_25F1F8);
LABEL_17:
  v101 = 2;
LABEL_19:
  v102 = _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0();
  v103 = (uint64_t)v137;
  v104 = v101;
  v105 = v146;
  v106 = v154;
  v107 = v152;
  View.containerRelativeFrame(_:count:span:spacing:alignment:)(v131, v91, v104, v102, v108, v146, v154, 0.0);
  (*(void (**)(char *, uint64_t))(v153 + 8))(v107, v105);
  v167 = v105;
  v168 = v106;
  v109 = swift_getOpaqueTypeConformance2(&v167, &opaque type descriptor for <<opaque return type of View.containerRelativeFrame(_:count:span:spacing:alignment:)>>, 1);
  v110 = v140;
  v111 = OpaqueTypeMetadata2;
  sub_10F80(v103, OpaqueTypeMetadata2, v140);
  v112 = v138;
  v113 = *(void (**)(uint64_t, uint64_t))(v138 + 8);
  v113(v103, v111);
  v114 = (uint64_t)v135;
  v115 = v148;
  v116 = v150;
  (*(void (**)(char *, uint64_t, uint64_t))(v147 + 16))(v135, v148, v150);
  v167 = v114;
  v117 = *(void (**)(char *, uint64_t, uint64_t))(v112 + 16);
  v118 = v141;
  v117(v141, v110, v111);
  v168 = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD))v118;
  v166[0] = v116;
  v166[1] = v111;
  v164 = v133;
  v165 = v109;
  sub_DAC78(&v167, 2uLL, (uint64_t)v166);
  v113(v110, v111);
  v119 = (uint64_t (*)(uint64_t, uint64_t))v134;
  ((void (*)(uint64_t, uint64_t))v134)(v115, v116);
  v113((uint64_t)v118, v111);
  return v119(v114, v116);
}

uint64_t sub_11CA74@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t AssociatedTypeWitness;
  uint64_t WitnessTable;
  uint64_t AssociatedConformanceWitness;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  double v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(uint64_t, uint64_t);
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t OpaqueTypeMetadata2;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;

  v65 = a4;
  v66 = a7;
  v67 = a8;
  v68 = a1;
  v70 = a2;
  v71 = a3;
  v72 = a4;
  v73 = a5;
  v55 = a5;
  v74 = a6;
  v75 = a7;
  v51 = a6;
  v12 = type metadata accessor for HorizontalScrollingGrid(0, (uint64_t)&v70);
  v59 = *(_QWORD *)(v12 - 8);
  v13 = *(_QWORD *)(v59 + 64);
  __chkstk_darwin(v12);
  v57 = (char *)&v51 - v14;
  v15 = type metadata accessor for Array(255, a2);
  v62 = v15;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, a5, a2, &protocol requirements base descriptor for Identifiable, &associated type descriptor for Identifiable.ID);
  v61 = AssociatedTypeWitness;
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v15);
  v60 = WitnessTable;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a5, a2, AssociatedTypeWitness, &protocol requirements base descriptor for Identifiable, &associated conformance descriptor for Identifiable.Identifiable.ID: Hashable);
  v70 = v15;
  v71 = AssociatedTypeWitness;
  v72 = a3;
  v73 = WitnessTable;
  v19 = a3;
  v74 = AssociatedConformanceWitness;
  v20 = type metadata accessor for ForEach(0, &v70);
  v64 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20);
  v53 = (char *)&v51 - v21;
  v69 = a6;
  v58 = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v20);
  v70 = v20;
  v71 = v58;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(0, &v70, &opaque type descriptor for <<opaque return type of View.containerRelativeFrame(_:count:span:spacing:alignment:)>>, 0);
  v63 = *(_QWORD *)(OpaqueTypeMetadata2 - 8);
  v22 = __chkstk_darwin(OpaqueTypeMetadata2);
  v52 = (char *)&v51 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v56 = (uint64_t)&v51 - v24;
  v25 = v12;
  v70 = *(_QWORD *)(v68 + *(int *)(v12 + 72));
  v26 = v70;
  v27 = v59;
  v28 = v57;
  (*(void (**)(char *))(v59 + 16))(v57);
  v29 = *(unsigned __int8 *)(v27 + 80);
  v30 = (v29 + 64) & ~v29;
  v31 = (char *)swift_allocObject(&unk_2537D8, v30 + v13, v29 | 7);
  *((_QWORD *)v31 + 2) = a2;
  *((_QWORD *)v31 + 3) = v19;
  v32 = v19;
  v33 = v55;
  *((_QWORD *)v31 + 4) = v65;
  *((_QWORD *)v31 + 5) = v33;
  v34 = v51;
  v35 = v66;
  *((_QWORD *)v31 + 6) = v51;
  *((_QWORD *)v31 + 7) = v35;
  (*(void (**)(char *, char *, uint64_t))(v27 + 32))(&v31[v30], v28, v25);
  swift_bridgeObjectRetain(v26);
  v36 = v53;
  v37 = ForEach<>.init(_:content:)(&v70, sub_1221F0, v31, v62, v61, v32, v60, v34, v33);
  v38 = static Axis.Set.horizontal.getter(v37);
  v39 = v68 + *(int *)(v25 + 68);
  v40 = *(_QWORD *)(v39 + 8);
  v41 = *(double *)(v39 + 16);
  v42 = static Alignment.leading.getter(v38);
  v43 = (uint64_t)v52;
  v44 = v38;
  v45 = v58;
  View.containerRelativeFrame(_:count:span:spacing:alignment:)(v44, v40, 1, v42, v46, v20, v58, v41);
  (*(void (**)(char *, uint64_t))(v64 + 8))(v36, v20);
  v70 = v20;
  v71 = v45;
  swift_getOpaqueTypeConformance2(&v70, &opaque type descriptor for <<opaque return type of View.containerRelativeFrame(_:count:span:spacing:alignment:)>>, 1);
  v47 = v56;
  v48 = OpaqueTypeMetadata2;
  sub_10F80(v43, OpaqueTypeMetadata2, v56);
  v49 = *(void (**)(uint64_t, uint64_t))(v63 + 8);
  v49(v43, v48);
  sub_C5C0(v47, v48, v67);
  return ((uint64_t (*)(uint64_t, uint64_t))v49)(v47, v48);
}

uint64_t sub_11CE44@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t);
  _QWORD v23[6];

  v8 = *(_QWORD *)(a3 - 8);
  v9 = __chkstk_darwin(a1);
  v11 = (char *)v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)v23 - v12;
  v23[0] = v14;
  v23[1] = v15;
  v23[2] = v16;
  v23[3] = v17;
  v23[4] = v18;
  v23[5] = v19;
  v20 = type metadata accessor for HorizontalScrollingGrid(0, (uint64_t)v23);
  (*(void (**)(uint64_t))(a2 + *(int *)(v20 + 76)))(a1);
  sub_10F80((uint64_t)v11, a3, (uint64_t)v13);
  v21 = *(void (**)(char *, uint64_t))(v8 + 8);
  v21(v11, a3);
  sub_C5C0((uint64_t)v13, a3, a4);
  return ((uint64_t (*)(char *, uint64_t))v21)(v13, a3);
}

uint64_t sub_11CF4C()
{
  uint64_t v0;
  uint64_t v1;
  int v3;

  v0 = type metadata accessor for PinnedScrollableViews(0);
  v3 = 0;
  v1 = sub_6FD0(&qword_25EEB0, (uint64_t (*)(uint64_t))&type metadata accessor for PinnedScrollableViews, (uint64_t)&protocol conformance descriptor for PinnedScrollableViews);
  return dispatch thunk of OptionSet.init(rawValue:)(&v3, v0, v1);
}

uint64_t sub_11CFB0(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v21[4];
  char v22;

  v10 = type metadata accessor for SafeAreaPaddingModifier(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v21[-1] - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = 0.0;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  if ((a3 & 1) == 0)
    v15 = EdgeInsets.init(_all:)(v12, *(double *)&a2, 0.0, 0.0, 0.0);
  *(double *)v21 = v15;
  v21[1] = v16;
  v21[2] = v17;
  v21[3] = v18;
  v22 = a3 & 1;
  SafeAreaPaddingModifier.init(edges:insets:)(a1, v21);
  View.modifier<A>(_:)(v14, a4, v10, a5);
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v14, v10);
}

double BooksFinishedFrame.horizontalPadding.getter()
{
  uint64_t v0;

  return *(double *)(v0 + *(int *)(type metadata accessor for BooksFinishedFrame(0) + 20));
}

uint64_t BooksFinishedFrame.exposureData.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v3 = v1 + *(int *)(type metadata accessor for BooksFinishedFrame(0) + 24);
  v4 = v3 + *(int *)(type metadata accessor for BooksFinishedFrameViewModel(0) + 36);
  v5 = type metadata accessor for YIRSourceData(0);
  a1[3] = v5;
  a1[4] = sub_6FD0(&qword_25EFF0, (uint64_t (*)(uint64_t))&type metadata accessor for YIRSourceData, (uint64_t)&protocol conformance descriptor for YIRSourceData);
  a1[5] = sub_6FD0(&qword_25EFF8, (uint64_t (*)(uint64_t))&type metadata accessor for YIRSourceData, (uint64_t)&protocol conformance descriptor for YIRSourceData);
  v6 = sub_C404(a1);
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(v6, v4, v5);
}

uint64_t BooksFinishedFrame.init(model:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = (char *)a2 + *(int *)(sub_5440(&qword_25E930) + 48);
  v5 = objc_msgSend((id)objc_opt_self(UIColor), "secondarySystemBackgroundColor");
  *a2 = Color.init(uiColor:)(v5);
  v6 = enum case for ColorScheme.light(_:);
  v7 = type metadata accessor for ColorScheme(0);
  v8 = *(_QWORD *)(v7 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 104))(v4, v6, v7);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v4, 0, 1, v7);
  v9 = type metadata accessor for PageBackground(0);
  swift_storeEnumTagMultiPayload(a2, v9, 0);
  v10 = type metadata accessor for BooksFinishedFrame(0);
  *(_QWORD *)((char *)a2 + *(int *)(v10 + 20)) = 0;
  return sub_21C88(a1, (uint64_t)a2 + *(int *)(v10 + 24), type metadata accessor for BooksFinishedFrameViewModel);
}

uint64_t BooksFinishedFrame.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  double v22;
  double v23;
  double v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t KeyPath;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v44 = a1;
  v2 = type metadata accessor for ColorScheme(0);
  v42 = *(_QWORD *)(v2 - 8);
  v43 = v2;
  __chkstk_darwin(v2);
  v4 = (char *)&v41 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for SizeConstants.Spacing(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for SizeConstants(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_5440(&qword_2663B0);
  __chkstk_darwin(v11);
  v13 = (char *)&v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_5440(&qword_2663B8);
  __chkstk_darwin(v14);
  v16 = (char *)&v41 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for BooksFinishedFrame(0);
  type metadata accessor for BooksFinishedFrameViewModel(0);
  sub_3168C((uint64_t)v10);
  sub_1E428((uint64_t)v10, (uint64_t)v7, type metadata accessor for SizeConstants.Environment);
  sub_224DC((uint64_t)v10, type metadata accessor for SizeConstants);
  v17 = sub_224DC((uint64_t)v7, type metadata accessor for SizeConstants.Spacing);
  *(_QWORD *)v13 = static HorizontalAlignment.center.getter(v17);
  *((_QWORD *)v13 + 1) = 0x4040000000000000;
  v13[16] = 0;
  v18 = sub_5440(&qword_2663C0);
  v19 = sub_11D59C(v1, (uint64_t)&v13[*(int *)(v18 + 44)]);
  v20 = static Edge.Set.vertical.getter(v19);
  sub_3168C((uint64_t)v10);
  sub_1E428((uint64_t)v10, (uint64_t)v7, type metadata accessor for SizeConstants.Environment);
  sub_224DC((uint64_t)v10, type metadata accessor for SizeConstants);
  v21 = sub_224DC((uint64_t)v7, type metadata accessor for SizeConstants.Spacing);
  v25 = EdgeInsets.init(_all:)(v21, 32.0, v22, v23, v24);
  v27 = v26;
  v29 = v28;
  v31 = v30;
  sub_B3D0((uint64_t)v13, (uint64_t)v16, &qword_2663B0);
  v32 = &v16[*(int *)(v14 + 36)];
  *v32 = v20;
  *((double *)v32 + 1) = v25;
  *((_QWORD *)v32 + 2) = v27;
  *((_QWORD *)v32 + 3) = v29;
  *((_QWORD *)v32 + 4) = v31;
  v32[40] = 0;
  sub_B414((uint64_t)v13, &qword_2663B0);
  KeyPath = swift_getKeyPath(&unk_1ED9F0);
  v35 = v42;
  v34 = v43;
  (*(void (**)(char *, _QWORD, uint64_t))(v42 + 104))(v4, enum case for ColorScheme.light(_:), v43);
  v36 = sub_5440(&qword_2663C8);
  v37 = v44;
  v38 = (uint64_t *)(v44 + *(int *)(v36 + 36));
  v39 = sub_5440(&qword_25EE58);
  (*(void (**)(char *, char *, uint64_t))(v35 + 16))((char *)v38 + *(int *)(v39 + 28), v4, v34);
  *v38 = KeyPath;
  sub_B3D0((uint64_t)v16, v37, &qword_2663B8);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v4, v34);
  return sub_B414((uint64_t)v16, &qword_2663B8);
}

uint64_t sub_11D59C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  char *v37;
  char *v38;
  char *v39;
  char *v40;
  _QWORD *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  double v51;
  double v52;
  double v53;
  double v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int *v69;
  char *v70;
  __int128 v71;
  uint64_t (**v72)@<X0>(uint64_t@<X0>, uint64_t@<X8>);
  uint64_t v73;
  uint64_t v74;
  char *v75;
  _QWORD *v76;
  char *v77;
  __int128 v78;
  uint64_t v79;
  uint64_t KeyPath;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t *v109;
  uint64_t v110;
  uint64_t v111;
  _OWORD v112[2];
  uint64_t v113;
  _OWORD v114[2];
  uint64_t v115;

  v98 = a1;
  v111 = a2;
  v110 = type metadata accessor for ScrollingCardModifier(0);
  __chkstk_darwin(v110);
  v109 = (uint64_t *)((char *)&v89 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v106 = type metadata accessor for BulletPointStack(0);
  v4 = __chkstk_darwin(v106);
  v6 = (uint64_t *)((char *)&v89 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v4);
  v107 = (uint64_t)&v89 - v7;
  v8 = type metadata accessor for BooksFinishedFrame(0);
  v103 = *(_QWORD *)(v8 - 8);
  v104 = *(_QWORD *)(v103 + 64);
  __chkstk_darwin(v8);
  v102 = (uint64_t)&v89 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v105 = sub_5440(&qword_2665C0);
  v10 = __chkstk_darwin(v105);
  v12 = (uint64_t *)((char *)&v89 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v10);
  v108 = (uint64_t)&v89 - v13;
  v14 = type metadata accessor for SizeConstants.Spacing(0);
  __chkstk_darwin(v14);
  v99 = (uint64_t)&v89 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for SizeConstants(0);
  __chkstk_darwin(v16);
  v18 = (char *)&v89 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_5440(&qword_25FE08);
  __chkstk_darwin(v19);
  v21 = (char *)&v89 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = (int *)type metadata accessor for TextLockup(0);
  __chkstk_darwin(v22);
  v24 = (uint64_t *)((char *)&v89 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  v97 = sub_5440(&qword_2665C8);
  v25 = __chkstk_darwin(v97);
  v27 = (char *)&v89 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  v96 = (uint64_t)&v89 - v28;
  v29 = a1 + *(int *)(v8 + 24);
  v95 = sub_119954();
  v94 = v30;
  v93 = static Color.orange.getter() | 0x8000000000000000;
  v92 = sub_119DB8();
  v91 = v31;
  v32 = type metadata accessor for Font.Design(0);
  v33 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(v21, 1, 1, v32);
  v90 = static HorizontalAlignment.leading.getter(v33);
  v89 = static Alignment.leading.getter(v90);
  v35 = v34;
  *v24 = swift_getKeyPath(&unk_1EDC20);
  v101 = sub_5440(&qword_25F1E8);
  swift_storeEnumTagMultiPayload(v24, v101, 0);
  v36 = (_QWORD *)((char *)v24 + v22[5]);
  *v36 = swift_getKeyPath(&unk_1EDC48);
  v100 = sub_5440(&qword_25F208);
  swift_storeEnumTagMultiPayload(v36, v100, 0);
  v37 = (char *)v24 + v22[6];
  *(_QWORD *)v37 = swift_getKeyPath(&unk_1EDC70);
  v37[8] = 0;
  v38 = (char *)v24 + v22[7];
  *(_QWORD *)v38 = swift_getKeyPath(&unk_1EDC98);
  v38[8] = 0;
  v39 = (char *)v24 + v22[8];
  *(_QWORD *)v39 = swift_getKeyPath(&unk_1EDCC0);
  v39[8] = 0;
  v40 = (char *)v24 + v22[9];
  *(_QWORD *)v40 = swift_getKeyPath(&unk_1EDCF0);
  v40[8] = 0;
  *((_BYTE *)v24 + v22[10]) = 2;
  v41 = (_QWORD *)((char *)v24 + v22[11]);
  *v41 = 0;
  v41[1] = 0;
  v42 = (_QWORD *)((char *)v24 + v22[12]);
  v43 = v94;
  *v42 = v95;
  v42[1] = v43;
  v42[2] = v93;
  v44 = (_QWORD *)((char *)v24 + v22[13]);
  v45 = v91;
  *v44 = v92;
  v44[1] = v45;
  v46 = sub_167A4((uint64_t)v21, (uint64_t)v24 + v22[14], &qword_25FE08);
  *(_QWORD *)((char *)v24 + v22[15]) = v90;
  v47 = (_QWORD *)((char *)v24 + v22[16]);
  *v47 = v89;
  v47[1] = v35;
  *((_BYTE *)v24 + v22[17]) = 0;
  LOBYTE(v22) = static Edge.Set.horizontal.getter(v46);
  v48 = type metadata accessor for BooksFinishedFrameViewModel(0);
  sub_3168C((uint64_t)v18);
  v49 = v99;
  sub_1E428((uint64_t)v18, v99, type metadata accessor for SizeConstants.Environment);
  sub_224DC((uint64_t)v18, type metadata accessor for SizeConstants);
  v50 = sub_224DC(v49, type metadata accessor for SizeConstants.Spacing);
  v54 = EdgeInsets.init(_all:)(v50, 32.0, v51, v52, v53);
  v56 = v55;
  v58 = v57;
  v60 = v59;
  sub_1E428((uint64_t)v24, (uint64_t)v27, type metadata accessor for TextLockup);
  v61 = &v27[*(int *)(v97 + 36)];
  *v61 = (char)v22;
  *((double *)v61 + 1) = v54;
  *((_QWORD *)v61 + 2) = v56;
  *((_QWORD *)v61 + 3) = v58;
  *((_QWORD *)v61 + 4) = v60;
  v61[40] = 0;
  sub_224DC((uint64_t)v24, type metadata accessor for TextLockup);
  v62 = v96;
  sub_167A4((uint64_t)v27, v96, &qword_2665C8);
  sub_11A170((uint64_t *)v112);
  v63 = *(_QWORD *)(v29 + *(int *)(v48 + 24));
  v64 = v102;
  sub_1E428(v98, v102, type metadata accessor for BooksFinishedFrame);
  v65 = *(unsigned __int8 *)(v103 + 80);
  v66 = (v65 + 16) & ~v65;
  v67 = swift_allocObject(&unk_253800, v66 + v104, v65 | 7);
  sub_21C88(v64, v67 + v66, type metadata accessor for BooksFinishedFrame);
  *v12 = swift_getKeyPath(&unk_1ED998);
  v68 = sub_5440(&qword_25F1F0);
  swift_storeEnumTagMultiPayload(v12, v68, 0);
  v69 = (int *)v105;
  v70 = (char *)v12 + *(int *)(v105 + 68);
  v71 = v112[1];
  *(_OWORD *)v70 = v112[0];
  *((_OWORD *)v70 + 1) = v71;
  *((_QWORD *)v70 + 4) = v113;
  *(_QWORD *)((char *)v12 + v69[18]) = v63;
  v72 = (uint64_t (**)@<X0>(uint64_t@<X0>, uint64_t@<X8>))((char *)v12 + v69[19]);
  *v72 = sub_1224F0;
  v72[1] = (uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X8>))v67;
  v73 = (uint64_t)v12 + v69[20];
  swift_bridgeObjectRetain(v63);
  sub_11A8E0((uint64_t *)v114);
  *v6 = swift_getKeyPath(&unk_1ED998);
  swift_storeEnumTagMultiPayload(v6, v68, 0);
  v74 = v106;
  v75 = (char *)v6 + *(int *)(v106 + 20);
  *(_QWORD *)v75 = swift_getKeyPath(&unk_1EDD20);
  v75[8] = 0;
  v76 = (_QWORD *)((char *)v6 + *(int *)(v74 + 24));
  *v76 = swift_getKeyPath(&unk_1EDC48);
  swift_storeEnumTagMultiPayload(v76, v100, 0);
  v77 = (char *)v6 + *(int *)(v74 + 28);
  v78 = v114[1];
  *(_OWORD *)v77 = v114[0];
  *((_OWORD *)v77 + 1) = v78;
  *((_QWORD *)v77 + 4) = v115;
  v79 = v107;
  sub_21C88((uint64_t)v6, v107, type metadata accessor for BulletPointStack);
  KeyPath = swift_getKeyPath(&unk_1EDC20);
  v81 = (uint64_t)v109;
  *v109 = KeyPath;
  swift_storeEnumTagMultiPayload(v81, v101, 0);
  v82 = (_QWORD *)(v81 + *(int *)(v110 + 20));
  *v82 = swift_getKeyPath(&unk_1EDD68);
  v83 = sub_5440(&qword_25F200);
  swift_storeEnumTagMultiPayload(v82, v83, 0);
  v84 = sub_5440(&qword_2665D0);
  sub_21C88(v81, v73 + *(int *)(v84 + 36), type metadata accessor for ScrollingCardModifier);
  sub_21C88(v79, v73, type metadata accessor for BulletPointStack);
  v85 = v108;
  sub_167A4((uint64_t)v12, v108, &qword_2665C0);
  sub_B3D0(v62, (uint64_t)v27, &qword_2665C8);
  sub_B3D0(v85, (uint64_t)v12, &qword_2665C0);
  v86 = v111;
  sub_B3D0((uint64_t)v27, v111, &qword_2665C8);
  v87 = sub_5440(&qword_2665D8);
  sub_B3D0((uint64_t)v12, v86 + *(int *)(v87 + 48), &qword_2665C0);
  sub_B414(v85, &qword_2665C0);
  sub_B414(v62, &qword_2665C8);
  sub_B414((uint64_t)v12, &qword_2665C0);
  return sub_B414((uint64_t)v27, &qword_2665C8);
}

uint64_t sub_11DE44@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;

  *(_QWORD *)a3 = static HorizontalAlignment.center.getter(a1);
  *(_QWORD *)(a3 + 8) = 0;
  *(_BYTE *)(a3 + 16) = 1;
  v6 = sub_5440(&qword_2665E8);
  return sub_11DEA0(a1, a2, a3 + *(int *)(v6 + 44));
}

uint64_t sub_11DEA0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  _QWORD v44[2];
  uint64_t v45;
  char v46;
  _QWORD v47[2];
  _OWORD v48[10];
  uint64_t v49;

  v45 = a2;
  v44[1] = a1;
  v5 = (int *)type metadata accessor for CoverView(0);
  __chkstk_darwin(v5);
  v7 = (char *)v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_5440(&qword_262ED0);
  __chkstk_darwin(v8);
  v10 = (char *)v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_5440(&qword_2665F0);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v16 = (char *)v44 - v15;
  sub_51C90(a1, (uint64_t)v48);
  *(_QWORD *)v7 = swift_getKeyPath(&unk_1EDDA0);
  v7[40] = 0;
  *((_QWORD *)v7 + 6) = swift_getKeyPath(&unk_1EDDC8);
  v7[56] = 0;
  v17 = &v7[v5[6]];
  *(_QWORD *)v17 = swift_getKeyPath(&unk_1EDC20);
  v18 = sub_5440(&qword_25F1E8);
  swift_storeEnumTagMultiPayload(v17, v18, 0);
  v19 = &v7[v5[7]];
  *(_QWORD *)v19 = swift_getKeyPath(&unk_1EDDF8);
  v20 = sub_5440(&qword_25F758);
  swift_storeEnumTagMultiPayload(v19, v20, 0);
  v21 = &v7[v5[8]];
  v22 = type metadata accessor for ProfileRestrictions(0);
  v23 = sub_6FD0((unint64_t *)&qword_26AF00, type metadata accessor for ProfileRestrictions, (uint64_t)&protocol conformance descriptor for ProfileRestrictions);
  *(_QWORD *)v21 = EnvironmentObject.init()(v22, v23);
  *((_QWORD *)v21 + 1) = v24;
  v25 = &v7[v5[9]];
  v46 = 1;
  State.init(wrappedValue:)(v47, &v46, &type metadata for Bool);
  v26 = v47[1];
  *v25 = v47[0];
  *((_QWORD *)v25 + 1) = v26;
  v27 = &v7[v5[10]];
  v28 = v48[7];
  v29 = v48[9];
  *((_OWORD *)v27 + 8) = v48[8];
  *((_OWORD *)v27 + 9) = v29;
  *((_QWORD *)v27 + 20) = v49;
  v30 = v48[5];
  *((_OWORD *)v27 + 4) = v48[4];
  *((_OWORD *)v27 + 5) = v30;
  *((_OWORD *)v27 + 6) = v48[6];
  *((_OWORD *)v27 + 7) = v28;
  v31 = v48[1];
  *(_OWORD *)v27 = v48[0];
  *((_OWORD *)v27 + 1) = v31;
  v32 = v48[3];
  *((_OWORD *)v27 + 2) = v48[2];
  *((_OWORD *)v27 + 3) = v32;
  v7[v5[11]] = 0;
  v33 = v45 + *(int *)(type metadata accessor for BooksFinishedFrame(0) + 24);
  v34 = type metadata accessor for BooksFinishedFrameViewModel(0);
  v35 = *(double *)(v33 + *(int *)(v34 + 44)) / *(double *)(v33 + *(int *)(v34 + 44) + 8);
  sub_1E428((uint64_t)v7, (uint64_t)v10, type metadata accessor for CoverView);
  v36 = &v10[*(int *)(v8 + 36)];
  *(double *)v36 = v35;
  *((_WORD *)v36 + 4) = 0;
  sub_224DC((uint64_t)v7, type metadata accessor for CoverView);
  v37 = CoverViewModel.axLabel.getter();
  v39 = v38;
  *(_QWORD *)&v48[0] = v37;
  *((_QWORD *)&v48[0] + 1) = v38;
  v40 = sub_A4020();
  v41 = sub_C57C();
  View.accessibilityLabel<A>(_:)(v48, v8, &type metadata for String, v40, v41);
  swift_bridgeObjectRelease(v39);
  sub_B414((uint64_t)v10, &qword_262ED0);
  sub_167A4((uint64_t)v14, (uint64_t)v16, &qword_2665F0);
  sub_B3D0((uint64_t)v16, (uint64_t)v14, &qword_2665F0);
  *(_QWORD *)a3 = 0;
  *(_BYTE *)(a3 + 8) = 1;
  v42 = sub_5440(&qword_2665F8);
  sub_B3D0((uint64_t)v14, a3 + *(int *)(v42 + 48), &qword_2665F0);
  sub_B414((uint64_t)v16, &qword_2665F0);
  return sub_B414((uint64_t)v14, &qword_2665F0);
}

uint64_t sub_11E268@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v2 + *(int *)(a1 + 24);
  v5 = v4 + *(int *)(type metadata accessor for BooksFinishedFrameViewModel(0) + 36);
  v6 = type metadata accessor for YIRSourceData(0);
  a2[3] = v6;
  a2[4] = sub_6FD0(&qword_25EFF0, (uint64_t (*)(uint64_t))&type metadata accessor for YIRSourceData, (uint64_t)&protocol conformance descriptor for YIRSourceData);
  a2[5] = sub_6FD0(&qword_25EFF8, (uint64_t (*)(uint64_t))&type metadata accessor for YIRSourceData, (uint64_t)&protocol conformance descriptor for YIRSourceData);
  v7 = sub_C404(a2);
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(v7, v5, v6);
}

uint64_t sub_11E310()
{
  return EnvironmentValues.horizontalSizeClass.getter();
}

uint64_t sub_11E330()
{
  return EnvironmentValues.horizontalSizeClass.getter();
}

uint64_t sub_11E350(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v6;

  v2 = sub_5440(&qword_25F1F8);
  __chkstk_darwin(v2);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_B3D0(a1, (uint64_t)v4, &qword_25F1F8);
  return EnvironmentValues.horizontalSizeClass.setter(v4);
}

uint64_t type metadata accessor for BooksFinishedFrameViewModel(uint64_t a1)
{
  return sub_1FE90(a1, qword_266438, (uint64_t)&nominal type descriptor for BooksFinishedFrameViewModel);
}

uint64_t type metadata accessor for BooksFinishedFrame(uint64_t a1)
{
  return sub_1FE90(a1, qword_2664E0, (uint64_t)&nominal type descriptor for BooksFinishedFrame);
}

uint64_t sub_11E408(uint64_t a1)
{
  uint64_t result;

  result = sub_6FD0(&qword_2663D0, type metadata accessor for BooksFinishedFrame, (uint64_t)&protocol conformance descriptor for BooksFinishedFrame);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_11E444(uint64_t a1)
{
  uint64_t result;

  result = sub_6FD0(&qword_2663D8, type metadata accessor for BooksFinishedFrame, (uint64_t)&protocol conformance descriptor for BooksFinishedFrame);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_11E480(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &opaque type descriptor for <<opaque return type of BooksFinishedFrame.body>>, 1);
}

uint64_t *initializeBufferWithCopyOfBuffer for BooksFinishedFrameViewModel(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _WORD *v17;
  _WORD *v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  void (*v44)(char *, char *, uint64_t);
  uint64_t v45;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v11);
  }
  else
  {
    v7 = sub_5440(&qword_25F1F0);
    if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
    {
      v8 = type metadata accessor for UserInterfaceSizeClass(0);
      v9 = *(_QWORD *)(v8 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v9 + 48))(a2, 1, v8))
      {
        v10 = sub_5440(&qword_25F1F8);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v9 + 16))(a1, a2, v8);
        (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v9 + 56))(a1, 0, 1, v8);
      }
      v13 = a1;
      v14 = v7;
      v15 = 1;
    }
    else
    {
      v12 = *a2;
      *a1 = *a2;
      swift_retain(v12);
      v13 = a1;
      v14 = v7;
      v15 = 0;
    }
    swift_storeEnumTagMultiPayload(v13, v14, v15);
    v16 = a3[5];
    v17 = (_WORD *)((char *)a1 + v16);
    v18 = (_WORD *)((char *)a2 + v16);
    v19 = sub_5440(&qword_25F548);
    if (swift_getEnumCaseMultiPayload(v18, v19) == 1)
    {
      *v17 = *v18;
      v20 = (int *)type metadata accessor for SizeConstants.Environment(0);
      v21 = v20[6];
      v22 = (char *)v17 + v21;
      v23 = (char *)v18 + v21;
      v24 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 16))(v22, v23, v24);
      *(_QWORD *)((char *)v17 + v20[7]) = *(_QWORD *)((char *)v18 + v20[7]);
      v25 = v20[8];
      v26 = (char *)v17 + v25;
      v27 = (char *)v18 + v25;
      v26[2] = v27[2];
      *(_WORD *)v26 = *(_WORD *)v27;
      v28 = 1;
    }
    else
    {
      v29 = *(_QWORD *)v18;
      *(_QWORD *)v17 = *(_QWORD *)v18;
      swift_retain(v29);
      v28 = 0;
    }
    swift_storeEnumTagMultiPayload(v17, v19, v28);
    v30 = a3[6];
    v31 = a3[7];
    v32 = *(uint64_t *)((char *)a2 + v30);
    *(uint64_t *)((char *)a1 + v30) = v32;
    v33 = (uint64_t *)((char *)a1 + v31);
    v34 = (uint64_t *)((char *)a2 + v31);
    v35 = v34[1];
    *v33 = *v34;
    v33[1] = v35;
    v36 = a3[8];
    v37 = a3[9];
    v38 = (uint64_t *)((char *)a1 + v36);
    v39 = (uint64_t *)((char *)a2 + v36);
    v40 = v39[1];
    *v38 = *v39;
    v38[1] = v40;
    v41 = (char *)a1 + v37;
    v42 = (char *)a2 + v37;
    v43 = type metadata accessor for YIRSourceData(0);
    v44 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v43 - 8) + 16);
    swift_bridgeObjectRetain(v32);
    swift_bridgeObjectRetain(v35);
    swift_bridgeObjectRetain(v40);
    v44(v41, v42, v43);
    v45 = a3[11];
    *(uint64_t *)((char *)a1 + a3[10]) = *(uint64_t *)((char *)a2 + a3[10]);
    *(_OWORD *)((char *)a1 + v45) = *(_OWORD *)((char *)a2 + v45);
  }
  return a1;
}

uint64_t destroy for BooksFinishedFrameViewModel(_QWORD *a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;

  v4 = sub_5440(&qword_25F1F0);
  if (swift_getEnumCaseMultiPayload(a1, v4) == 1)
  {
    v5 = type metadata accessor for UserInterfaceSizeClass(0);
    v6 = *(_QWORD *)(v5 - 8);
    if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v6 + 48))(a1, 1, v5))
      (*(void (**)(_QWORD *, uint64_t))(v6 + 8))(a1, v5);
  }
  else
  {
    swift_release(*a1);
  }
  v7 = (_QWORD *)((char *)a1 + a2[5]);
  v8 = sub_5440(&qword_25F548);
  if (swift_getEnumCaseMultiPayload(v7, v8) == 1)
  {
    v9 = (char *)v7 + *(int *)(type metadata accessor for SizeConstants.Environment(0) + 24);
    v10 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  }
  else
  {
    swift_release(*v7);
  }
  swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + a2[6]));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + a2[7] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + a2[8] + 8));
  v11 = (char *)a1 + a2[9];
  v12 = type metadata accessor for YIRSourceData(0);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
}

uint64_t *initializeWithCopy for BooksFinishedFrameViewModel(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _WORD *v15;
  _WORD *v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  void (*v42)(char *, char *, uint64_t);
  uint64_t v43;

  v6 = sub_5440(&qword_25F1F0);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for UserInterfaceSizeClass(0);
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      v9 = sub_5440(&qword_25F1F8);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    v11 = a1;
    v12 = v6;
    v13 = 1;
  }
  else
  {
    v10 = *a2;
    *a1 = *a2;
    swift_retain(v10);
    v11 = a1;
    v12 = v6;
    v13 = 0;
  }
  swift_storeEnumTagMultiPayload(v11, v12, v13);
  v14 = a3[5];
  v15 = (_WORD *)((char *)a1 + v14);
  v16 = (_WORD *)((char *)a2 + v14);
  v17 = sub_5440(&qword_25F548);
  if (swift_getEnumCaseMultiPayload(v16, v17) == 1)
  {
    *v15 = *v16;
    v18 = (int *)type metadata accessor for SizeConstants.Environment(0);
    v19 = v18[6];
    v20 = (char *)v15 + v19;
    v21 = (char *)v16 + v19;
    v22 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v20, v21, v22);
    *(_QWORD *)((char *)v15 + v18[7]) = *(_QWORD *)((char *)v16 + v18[7]);
    v23 = v18[8];
    v24 = (char *)v15 + v23;
    v25 = (char *)v16 + v23;
    v24[2] = v25[2];
    *(_WORD *)v24 = *(_WORD *)v25;
    v26 = 1;
  }
  else
  {
    v27 = *(_QWORD *)v16;
    *(_QWORD *)v15 = *(_QWORD *)v16;
    swift_retain(v27);
    v26 = 0;
  }
  swift_storeEnumTagMultiPayload(v15, v17, v26);
  v28 = a3[6];
  v29 = a3[7];
  v30 = *(uint64_t *)((char *)a2 + v28);
  *(uint64_t *)((char *)a1 + v28) = v30;
  v31 = (uint64_t *)((char *)a1 + v29);
  v32 = (uint64_t *)((char *)a2 + v29);
  v33 = v32[1];
  *v31 = *v32;
  v31[1] = v33;
  v34 = a3[8];
  v35 = a3[9];
  v36 = (uint64_t *)((char *)a1 + v34);
  v37 = (uint64_t *)((char *)a2 + v34);
  v38 = v37[1];
  *v36 = *v37;
  v36[1] = v38;
  v39 = (char *)a1 + v35;
  v40 = (char *)a2 + v35;
  v41 = type metadata accessor for YIRSourceData(0);
  v42 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v41 - 8) + 16);
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRetain(v33);
  swift_bridgeObjectRetain(v38);
  v42(v39, v40, v41);
  v43 = a3[11];
  *(uint64_t *)((char *)a1 + a3[10]) = *(uint64_t *)((char *)a2 + a3[10]);
  *(_OWORD *)((char *)a1 + v43) = *(_OWORD *)((char *)a2 + v43);
  return a1;
}

uint64_t *assignWithCopy for BooksFinishedFrameViewModel(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  _BYTE *v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  _BYTE *v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  _BYTE *v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;

  if (a1 != a2)
  {
    sub_B414((uint64_t)a1, &qword_25F1F0);
    v6 = sub_5440(&qword_25F1F0);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for UserInterfaceSizeClass(0);
      v8 = *(_QWORD *)(v7 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
      {
        v9 = sub_5440(&qword_25F1F8);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
        (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
      }
      v11 = a1;
      v12 = v6;
      v13 = 1;
    }
    else
    {
      v10 = *a2;
      *a1 = *a2;
      swift_retain(v10);
      v11 = a1;
      v12 = v6;
      v13 = 0;
    }
    swift_storeEnumTagMultiPayload(v11, v12, v13);
    v14 = a3[5];
    v15 = (char *)a1 + v14;
    v16 = (char *)a2 + v14;
    sub_B414((uint64_t)a1 + v14, &qword_25F548);
    v17 = sub_5440(&qword_25F548);
    if (swift_getEnumCaseMultiPayload(v16, v17) == 1)
    {
      *v15 = *v16;
      v15[1] = v16[1];
      v18 = (int *)type metadata accessor for SizeConstants.Environment(0);
      v19 = v18[6];
      v20 = &v15[v19];
      v21 = &v16[v19];
      v22 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v20, v21, v22);
      *(_QWORD *)&v15[v18[7]] = *(_QWORD *)&v16[v18[7]];
      v23 = v18[8];
      v24 = &v15[v23];
      v25 = &v16[v23];
      v26 = v25[2];
      *(_WORD *)v24 = *(_WORD *)v25;
      v24[2] = v26;
      v27 = 1;
    }
    else
    {
      v28 = *(_QWORD *)v16;
      *(_QWORD *)v15 = *(_QWORD *)v16;
      swift_retain(v28);
      v27 = 0;
    }
    swift_storeEnumTagMultiPayload(v15, v17, v27);
  }
  v29 = a3[6];
  v30 = *(uint64_t *)((char *)a2 + v29);
  v31 = *(uint64_t *)((char *)a1 + v29);
  *(uint64_t *)((char *)a1 + v29) = v30;
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRelease(v31);
  v32 = a3[7];
  v33 = (uint64_t *)((char *)a1 + v32);
  v34 = (uint64_t *)((char *)a2 + v32);
  *v33 = *v34;
  v35 = v34[1];
  v36 = v33[1];
  v33[1] = v35;
  swift_bridgeObjectRetain(v35);
  swift_bridgeObjectRelease(v36);
  v37 = a3[8];
  v38 = (uint64_t *)((char *)a1 + v37);
  v39 = (uint64_t *)((char *)a2 + v37);
  *v38 = *v39;
  v40 = v39[1];
  v41 = v38[1];
  v38[1] = v40;
  swift_bridgeObjectRetain(v40);
  swift_bridgeObjectRelease(v41);
  v42 = a3[9];
  v43 = (char *)a1 + v42;
  v44 = (char *)a2 + v42;
  v45 = type metadata accessor for YIRSourceData(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v45 - 8) + 24))(v43, v44, v45);
  *(uint64_t *)((char *)a1 + a3[10]) = *(uint64_t *)((char *)a2 + a3[10]);
  v46 = a3[11];
  v47 = (uint64_t *)((char *)a1 + v46);
  v48 = (uint64_t *)((char *)a2 + v46);
  *v47 = *v48;
  v47[1] = v48[1];
  return a1;
}

char *initializeWithTake for BooksFinishedFrameViewModel(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;

  v6 = sub_5440(&qword_25F1F0);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for UserInterfaceSizeClass(0);
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      v9 = sub_5440(&qword_25F1F8);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v8 + 32))(a1, a2, v7);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v10 = a3[5];
  v11 = &a1[v10];
  v12 = &a2[v10];
  v13 = sub_5440(&qword_25F548);
  if (swift_getEnumCaseMultiPayload(v12, v13) == 1)
  {
    *(_WORD *)v11 = *(_WORD *)v12;
    v14 = (int *)type metadata accessor for SizeConstants.Environment(0);
    v15 = v14[6];
    v16 = &v11[v15];
    v17 = &v12[v15];
    v18 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v16, v17, v18);
    *(_QWORD *)&v11[v14[7]] = *(_QWORD *)&v12[v14[7]];
    v19 = v14[8];
    v20 = &v11[v19];
    v21 = &v12[v19];
    v20[2] = v21[2];
    *(_WORD *)v20 = *(_WORD *)v21;
    swift_storeEnumTagMultiPayload(v11, v13, 1);
  }
  else
  {
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  v22 = a3[7];
  *(_QWORD *)&a1[a3[6]] = *(_QWORD *)&a2[a3[6]];
  *(_OWORD *)&a1[v22] = *(_OWORD *)&a2[v22];
  v23 = a3[9];
  *(_OWORD *)&a1[a3[8]] = *(_OWORD *)&a2[a3[8]];
  v24 = &a1[v23];
  v25 = &a2[v23];
  v26 = type metadata accessor for YIRSourceData(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v26 - 8) + 32))(v24, v25, v26);
  v27 = a3[11];
  *(_QWORD *)&a1[a3[10]] = *(_QWORD *)&a2[a3[10]];
  *(_OWORD *)&a1[v27] = *(_OWORD *)&a2[v27];
  return a1;
}

char *assignWithTake for BooksFinishedFrameViewModel(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;

  if (a1 != a2)
  {
    sub_B414((uint64_t)a1, &qword_25F1F0);
    v6 = sub_5440(&qword_25F1F0);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for UserInterfaceSizeClass(0);
      v8 = *(_QWORD *)(v7 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
      {
        v9 = sub_5440(&qword_25F1F8);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v8 + 32))(a1, a2, v7);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
      }
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
    v10 = a3[5];
    v11 = &a1[v10];
    v12 = &a2[v10];
    sub_B414((uint64_t)&a1[v10], &qword_25F548);
    v13 = sub_5440(&qword_25F548);
    if (swift_getEnumCaseMultiPayload(v12, v13) == 1)
    {
      *(_WORD *)v11 = *(_WORD *)v12;
      v14 = (int *)type metadata accessor for SizeConstants.Environment(0);
      v15 = v14[6];
      v16 = &v11[v15];
      v17 = &v12[v15];
      v18 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v16, v17, v18);
      *(_QWORD *)&v11[v14[7]] = *(_QWORD *)&v12[v14[7]];
      v19 = v14[8];
      v20 = &v11[v19];
      v21 = &v12[v19];
      v20[2] = v21[2];
      *(_WORD *)v20 = *(_WORD *)v21;
      swift_storeEnumTagMultiPayload(v11, v13, 1);
    }
    else
    {
      memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
  }
  v22 = a3[6];
  v23 = *(_QWORD *)&a1[v22];
  *(_QWORD *)&a1[v22] = *(_QWORD *)&a2[v22];
  swift_bridgeObjectRelease(v23);
  v24 = a3[7];
  v25 = &a1[v24];
  v26 = &a2[v24];
  v28 = *(_QWORD *)v26;
  v27 = *((_QWORD *)v26 + 1);
  v29 = *((_QWORD *)v25 + 1);
  *(_QWORD *)v25 = v28;
  *((_QWORD *)v25 + 1) = v27;
  swift_bridgeObjectRelease(v29);
  v30 = a3[8];
  v31 = &a1[v30];
  v32 = &a2[v30];
  v34 = *(_QWORD *)v32;
  v33 = *((_QWORD *)v32 + 1);
  v35 = *((_QWORD *)v31 + 1);
  *(_QWORD *)v31 = v34;
  *((_QWORD *)v31 + 1) = v33;
  swift_bridgeObjectRelease(v35);
  v36 = a3[9];
  v37 = &a1[v36];
  v38 = &a2[v36];
  v39 = type metadata accessor for YIRSourceData(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v39 - 8) + 40))(v37, v38, v39);
  v40 = a3[11];
  *(_QWORD *)&a1[a3[10]] = *(_QWORD *)&a2[a3[10]];
  *(_OWORD *)&a1[v40] = *(_OWORD *)&a2[v40];
  return a1;
}

uint64_t getEnumTagSinglePayload for BooksFinishedFrameViewModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_11F214);
}

uint64_t sub_11F214(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;

  v6 = sub_5440(&qword_25F218);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = sub_5440(&qword_25F558);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v13 = a3[5];
LABEL_10:
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v8 = type metadata accessor for YIRSourceData(0);
    v12 = *(_QWORD *)(v8 - 8);
    v13 = a3[9];
    goto LABEL_10;
  }
  v14 = *(_QWORD *)(a1 + a3[6]);
  if (v14 >= 0xFFFFFFFF)
    LODWORD(v14) = -1;
  return (v14 + 1);
}

uint64_t storeEnumTagSinglePayload for BooksFinishedFrameViewModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_11F2F4);
}

uint64_t sub_11F2F4(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;

  v8 = sub_5440(&qword_25F218);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    result = sub_5440(&qword_25F558);
    v14 = *(_QWORD *)(result - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = result;
      v15 = a4[5];
    }
    else
    {
      if (a3 == 0x7FFFFFFF)
      {
        *(_QWORD *)(a1 + a4[6]) = (a2 - 1);
        return result;
      }
      v10 = type metadata accessor for YIRSourceData(0);
      v14 = *(_QWORD *)(v10 - 8);
      v15 = a4[9];
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_11F3C4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[8];

  sub_2AD74(319);
  if (v3 <= 0x3F)
  {
    v8[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_2F448(319);
    if (v5 <= 0x3F)
    {
      v8[1] = *(_QWORD *)(v4 - 8) + 64;
      v8[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
      v8[3] = &unk_1EDB20;
      v8[4] = &unk_1EDB38;
      v6 = type metadata accessor for YIRSourceData(319);
      if (v7 <= 0x3F)
      {
        v8[5] = *(_QWORD *)(v6 - 8) + 64;
        v8[6] = (char *)&value witness table for Builtin.Int64 + 64;
        v8[7] = &unk_1EDB50;
        swift_initStructMetadata(a1, 256, 8, v8, a1 + 16);
      }
    }
  }
}

uint64_t initializeBufferWithCopyOfBuffer for BooksFinishedFrame(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t *, _QWORD, uint64_t, uint64_t);
  int *v35;
  uint64_t v36;
  _WORD *v37;
  _WORD *v38;
  uint64_t v39;
  int *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  void (*v64)(char *, char *, uint64_t);
  uint64_t v66;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v9 = *a2;
    *(_QWORD *)a1 = *a2;
    v10 = v9 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain(v9);
  }
  else
  {
    v7 = type metadata accessor for PageBackground(0);
    if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
    {
      if (*((_BYTE *)a2 + 56))
      {
        v8 = *((_OWORD *)a2 + 1);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v8;
        *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
        *(_OWORD *)(a1 + 41) = *(_OWORD *)((char *)a2 + 41);
      }
      else
      {
        v19 = *(_OWORD *)(a2 + 3);
        *(_OWORD *)(a1 + 24) = v19;
        (**(void (***)(uint64_t, uint64_t *))(v19 - 8))(a1, a2);
        *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 5);
        *(_BYTE *)(a1 + 56) = 0;
      }
      *(_OWORD *)(a1 + 64) = *((_OWORD *)a2 + 4);
      *(_BYTE *)(a1 + 80) = *((_BYTE *)a2 + 80);
      *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 11);
      v20 = a2[13];
      *(_QWORD *)(a1 + 104) = v20;
      v21 = a2[15];
      swift_bridgeObjectRetain(v20);
      if (v21)
      {
        *(_QWORD *)(a1 + 112) = a2[14];
        *(_QWORD *)(a1 + 120) = v21;
        v22 = a2[17];
        *(_QWORD *)(a1 + 128) = a2[16];
        *(_QWORD *)(a1 + 136) = v22;
        *(_BYTE *)(a1 + 144) = *((_BYTE *)a2 + 144);
        v23 = a2[20];
        *(_QWORD *)(a1 + 152) = a2[19];
        *(_QWORD *)(a1 + 160) = v23;
        swift_bridgeObjectRetain(v21);
        swift_bridgeObjectRetain(v22);
        swift_bridgeObjectRetain(v23);
      }
      else
      {
        v24 = *((_OWORD *)a2 + 8);
        *(_OWORD *)(a1 + 112) = *((_OWORD *)a2 + 7);
        *(_OWORD *)(a1 + 128) = v24;
        *(_OWORD *)(a1 + 144) = *((_OWORD *)a2 + 9);
        *(_QWORD *)(a1 + 160) = a2[20];
      }
      v18 = 1;
    }
    else
    {
      v11 = *a2;
      *(_QWORD *)a1 = *a2;
      swift_retain(v11);
      v12 = *(int *)(sub_5440(&qword_25E930) + 48);
      v13 = (void *)(a1 + v12);
      v14 = (char *)a2 + v12;
      v15 = type metadata accessor for ColorScheme(0);
      v16 = *(_QWORD *)(v15 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
      {
        v17 = sub_5440(&qword_25E928);
        memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, char *, uint64_t))(v16 + 16))(v13, v14, v15);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
      }
      v18 = 0;
    }
    swift_storeEnumTagMultiPayload(a1, v7, v18);
    v25 = *(int *)(a3 + 24);
    *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
    v26 = (uint64_t *)(a1 + v25);
    v27 = (uint64_t *)((char *)a2 + v25);
    v28 = sub_5440(&qword_25F1F0);
    if (swift_getEnumCaseMultiPayload(v27, v28) == 1)
    {
      v29 = type metadata accessor for UserInterfaceSizeClass(0);
      v30 = *(_QWORD *)(v29 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v30 + 48))(v27, 1, v29))
      {
        v31 = sub_5440(&qword_25F1F8);
        memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
        v32 = 1;
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v30 + 16))(v26, v27, v29);
        v34 = *(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v30 + 56);
        v32 = 1;
        v34(v26, 0, 1, v29);
      }
    }
    else
    {
      v33 = *v27;
      *v26 = *v27;
      swift_retain(v33);
      v32 = 0;
    }
    swift_storeEnumTagMultiPayload(v26, v28, v32);
    v35 = (int *)type metadata accessor for BooksFinishedFrameViewModel(0);
    v36 = v35[5];
    v37 = (_WORD *)((char *)v26 + v36);
    v38 = (_WORD *)((char *)v27 + v36);
    v39 = sub_5440(&qword_25F548);
    v66 = a1;
    if (swift_getEnumCaseMultiPayload(v38, v39) == 1)
    {
      *v37 = *v38;
      v40 = (int *)type metadata accessor for SizeConstants.Environment(0);
      v41 = v40[6];
      v42 = (char *)v37 + v41;
      v43 = (char *)v38 + v41;
      v44 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v44 - 8) + 16))(v42, v43, v44);
      *(_QWORD *)((char *)v37 + v40[7]) = *(_QWORD *)((char *)v38 + v40[7]);
      v45 = v40[8];
      v46 = (char *)v37 + v45;
      v47 = (char *)v38 + v45;
      v46[2] = v47[2];
      *(_WORD *)v46 = *(_WORD *)v47;
      v48 = 1;
    }
    else
    {
      v49 = *(_QWORD *)v38;
      *(_QWORD *)v37 = *(_QWORD *)v38;
      swift_retain(v49);
      v48 = 0;
    }
    swift_storeEnumTagMultiPayload(v37, v39, v48);
    v50 = v35[6];
    v51 = *(uint64_t *)((char *)v27 + v50);
    *(uint64_t *)((char *)v26 + v50) = v51;
    v52 = v35[7];
    v53 = (uint64_t *)((char *)v26 + v52);
    v54 = (uint64_t *)((char *)v27 + v52);
    v55 = v54[1];
    *v53 = *v54;
    v53[1] = v55;
    v56 = v35[8];
    v57 = (uint64_t *)((char *)v26 + v56);
    v58 = (uint64_t *)((char *)v27 + v56);
    v59 = v58[1];
    *v57 = *v58;
    v57[1] = v59;
    v60 = v35[9];
    v61 = (char *)v26 + v60;
    v62 = (char *)v27 + v60;
    v63 = type metadata accessor for YIRSourceData(0);
    v64 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v63 - 8) + 16);
    swift_bridgeObjectRetain(v51);
    swift_bridgeObjectRetain(v55);
    swift_bridgeObjectRetain(v59);
    v64(v61, v62, v63);
    *(uint64_t *)((char *)v26 + v35[10]) = *(uint64_t *)((char *)v27 + v35[10]);
    *(_OWORD *)((char *)v26 + v35[11]) = *(_OWORD *)((char *)v27 + v35[11]);
    return v66;
  }
  return v10;
}

uint64_t destroy for BooksFinishedFrame(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  _QWORD *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;

  v4 = type metadata accessor for PageBackground(0);
  if (swift_getEnumCaseMultiPayload(a1, v4) == 1)
  {
    if (!*((_BYTE *)a1 + 56))
      _s7BooksUI13AnyPagedFrameVwxx_0(a1);
    swift_bridgeObjectRelease(a1[13]);
    v5 = a1[15];
    if (v5)
    {
      swift_bridgeObjectRelease(v5);
      swift_bridgeObjectRelease(a1[17]);
      swift_bridgeObjectRelease(a1[20]);
    }
  }
  else
  {
    swift_release(*a1);
    v6 = (char *)a1 + *(int *)(sub_5440(&qword_25E930) + 48);
    v7 = type metadata accessor for ColorScheme(0);
    v8 = *(_QWORD *)(v7 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
      (*(void (**)(char *, uint64_t))(v8 + 8))(v6, v7);
  }
  v9 = (_QWORD *)((char *)a1 + *(int *)(a2 + 24));
  v10 = sub_5440(&qword_25F1F0);
  if (swift_getEnumCaseMultiPayload(v9, v10) == 1)
  {
    v11 = type metadata accessor for UserInterfaceSizeClass(0);
    v12 = *(_QWORD *)(v11 - 8);
    if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v12 + 48))(v9, 1, v11))
      (*(void (**)(_QWORD *, uint64_t))(v12 + 8))(v9, v11);
  }
  else
  {
    swift_release(*v9);
  }
  v13 = (int *)type metadata accessor for BooksFinishedFrameViewModel(0);
  v14 = (_QWORD *)((char *)v9 + v13[5]);
  v15 = sub_5440(&qword_25F548);
  if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
  {
    v16 = (char *)v14 + *(int *)(type metadata accessor for SizeConstants.Environment(0) + 24);
    v17 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(v16, v17);
  }
  else
  {
    swift_release(*v14);
  }
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v9 + v13[6]));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v9 + v13[7] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v9 + v13[8] + 8));
  v18 = (char *)v9 + v13[9];
  v19 = type metadata accessor for YIRSourceData(0);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(v18, v19);
}

uint64_t initializeWithCopy for BooksFinishedFrame(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t *, _QWORD, uint64_t, uint64_t);
  int *v32;
  uint64_t v33;
  _WORD *v34;
  _WORD *v35;
  uint64_t v36;
  int *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  void (*v61)(char *, char *, uint64_t);
  uint64_t v63;

  v6 = type metadata accessor for PageBackground(0);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    if (*((_BYTE *)a2 + 56))
    {
      v7 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v7;
      *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
      *(_OWORD *)(a1 + 41) = *(_OWORD *)((char *)a2 + 41);
    }
    else
    {
      v16 = *(_OWORD *)(a2 + 3);
      *(_OWORD *)(a1 + 24) = v16;
      (**(void (***)(uint64_t, uint64_t *))(v16 - 8))(a1, a2);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 5);
      *(_BYTE *)(a1 + 56) = 0;
    }
    *(_OWORD *)(a1 + 64) = *((_OWORD *)a2 + 4);
    *(_BYTE *)(a1 + 80) = *((_BYTE *)a2 + 80);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 11);
    v17 = a2[13];
    *(_QWORD *)(a1 + 104) = v17;
    v18 = a2[15];
    swift_bridgeObjectRetain(v17);
    if (v18)
    {
      *(_QWORD *)(a1 + 112) = a2[14];
      *(_QWORD *)(a1 + 120) = v18;
      v19 = a2[17];
      *(_QWORD *)(a1 + 128) = a2[16];
      *(_QWORD *)(a1 + 136) = v19;
      *(_BYTE *)(a1 + 144) = *((_BYTE *)a2 + 144);
      v20 = a2[20];
      *(_QWORD *)(a1 + 152) = a2[19];
      *(_QWORD *)(a1 + 160) = v20;
      swift_bridgeObjectRetain(v18);
      swift_bridgeObjectRetain(v19);
      swift_bridgeObjectRetain(v20);
    }
    else
    {
      v21 = *((_OWORD *)a2 + 8);
      *(_OWORD *)(a1 + 112) = *((_OWORD *)a2 + 7);
      *(_OWORD *)(a1 + 128) = v21;
      *(_OWORD *)(a1 + 144) = *((_OWORD *)a2 + 9);
      *(_QWORD *)(a1 + 160) = a2[20];
    }
    v15 = 1;
  }
  else
  {
    v8 = *a2;
    *(_QWORD *)a1 = *a2;
    swift_retain(v8);
    v9 = *(int *)(sub_5440(&qword_25E930) + 48);
    v10 = (void *)(a1 + v9);
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for ColorScheme(0);
    v13 = *(_QWORD *)(v12 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
    {
      v14 = sub_5440(&qword_25E928);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
    }
    v15 = 0;
  }
  swift_storeEnumTagMultiPayload(a1, v6, v15);
  v22 = *(int *)(a3 + 24);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
  v23 = (uint64_t *)(a1 + v22);
  v24 = (uint64_t *)((char *)a2 + v22);
  v25 = sub_5440(&qword_25F1F0);
  if (swift_getEnumCaseMultiPayload(v24, v25) == 1)
  {
    v26 = type metadata accessor for UserInterfaceSizeClass(0);
    v27 = *(_QWORD *)(v26 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v27 + 48))(v24, 1, v26))
    {
      v28 = sub_5440(&qword_25F1F8);
      memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
      v29 = 1;
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v27 + 16))(v23, v24, v26);
      v31 = *(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v27 + 56);
      v29 = 1;
      v31(v23, 0, 1, v26);
    }
  }
  else
  {
    v30 = *v24;
    *v23 = *v24;
    swift_retain(v30);
    v29 = 0;
  }
  swift_storeEnumTagMultiPayload(v23, v25, v29);
  v32 = (int *)type metadata accessor for BooksFinishedFrameViewModel(0);
  v33 = v32[5];
  v34 = (_WORD *)((char *)v23 + v33);
  v35 = (_WORD *)((char *)v24 + v33);
  v36 = sub_5440(&qword_25F548);
  v63 = a1;
  if (swift_getEnumCaseMultiPayload(v35, v36) == 1)
  {
    *v34 = *v35;
    v37 = (int *)type metadata accessor for SizeConstants.Environment(0);
    v38 = v37[6];
    v39 = (char *)v34 + v38;
    v40 = (char *)v35 + v38;
    v41 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v41 - 8) + 16))(v39, v40, v41);
    *(_QWORD *)((char *)v34 + v37[7]) = *(_QWORD *)((char *)v35 + v37[7]);
    v42 = v37[8];
    v43 = (char *)v34 + v42;
    v44 = (char *)v35 + v42;
    v43[2] = v44[2];
    *(_WORD *)v43 = *(_WORD *)v44;
    v45 = 1;
  }
  else
  {
    v46 = *(_QWORD *)v35;
    *(_QWORD *)v34 = *(_QWORD *)v35;
    swift_retain(v46);
    v45 = 0;
  }
  swift_storeEnumTagMultiPayload(v34, v36, v45);
  v47 = v32[6];
  v48 = *(uint64_t *)((char *)v24 + v47);
  *(uint64_t *)((char *)v23 + v47) = v48;
  v49 = v32[7];
  v50 = (uint64_t *)((char *)v23 + v49);
  v51 = (uint64_t *)((char *)v24 + v49);
  v52 = v51[1];
  *v50 = *v51;
  v50[1] = v52;
  v53 = v32[8];
  v54 = (uint64_t *)((char *)v23 + v53);
  v55 = (uint64_t *)((char *)v24 + v53);
  v56 = v55[1];
  *v54 = *v55;
  v54[1] = v56;
  v57 = v32[9];
  v58 = (char *)v23 + v57;
  v59 = (char *)v24 + v57;
  v60 = type metadata accessor for YIRSourceData(0);
  v61 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v60 - 8) + 16);
  swift_bridgeObjectRetain(v48);
  swift_bridgeObjectRetain(v52);
  swift_bridgeObjectRetain(v56);
  v61(v58, v59, v60);
  *(uint64_t *)((char *)v23 + v32[10]) = *(uint64_t *)((char *)v24 + v32[10]);
  *(_OWORD *)((char *)v23 + v32[11]) = *(_OWORD *)((char *)v24 + v32[11]);
  return v63;
}

uint64_t assignWithCopy for BooksFinishedFrame(uint64_t a1, __int128 *a2, uint64_t a3)
{
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(uint64_t *, _QWORD, uint64_t, uint64_t);
  uint64_t v39;
  _BYTE *v40;
  _BYTE *v41;
  uint64_t v42;
  int *v43;
  uint64_t v44;
  _BYTE *v45;
  _BYTE *v46;
  uint64_t v47;
  uint64_t v48;
  _BYTE *v49;
  _BYTE *v50;
  char v51;
  _BYTE *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  _QWORD *v75;

  if ((__int128 *)a1 == a2)
  {
    *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 20));
    v10 = *(int *)(a3 + 24);
    v11 = (uint64_t *)(a1 + v10);
    v12 = (uint64_t *)((char *)a2 + v10);
    v13 = (int *)type metadata accessor for BooksFinishedFrameViewModel(0);
  }
  else
  {
    sub_224DC(a1, type metadata accessor for PageBackground);
    v6 = type metadata accessor for PageBackground(0);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      if (*((_BYTE *)a2 + 56))
      {
        v7 = *a2;
        v8 = a2[1];
        v9 = a2[2];
        *(_OWORD *)(a1 + 41) = *(__int128 *)((char *)a2 + 41);
        *(_OWORD *)(a1 + 16) = v8;
        *(_OWORD *)(a1 + 32) = v9;
        *(_OWORD *)a1 = v7;
      }
      else
      {
        v22 = *((_QWORD *)a2 + 3);
        *(_QWORD *)(a1 + 24) = v22;
        *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
        (**(void (***)(uint64_t, __int128 *))(v22 - 8))(a1, a2);
        *(_OWORD *)(a1 + 40) = *(__int128 *)((char *)a2 + 40);
        *(_BYTE *)(a1 + 56) = 0;
      }
      *(_OWORD *)(a1 + 64) = a2[4];
      *(_BYTE *)(a1 + 80) = *((_BYTE *)a2 + 80);
      *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 11);
      *(_QWORD *)(a1 + 96) = *((_QWORD *)a2 + 12);
      v23 = *((_QWORD *)a2 + 13);
      *(_QWORD *)(a1 + 104) = v23;
      v24 = *((_QWORD *)a2 + 15);
      swift_bridgeObjectRetain(v23);
      if (v24)
      {
        *(_QWORD *)(a1 + 112) = *((_QWORD *)a2 + 14);
        v25 = *((_QWORD *)a2 + 15);
        *(_QWORD *)(a1 + 120) = v25;
        *(_QWORD *)(a1 + 128) = *((_QWORD *)a2 + 16);
        v26 = *((_QWORD *)a2 + 17);
        *(_QWORD *)(a1 + 136) = v26;
        *(_BYTE *)(a1 + 144) = *((_BYTE *)a2 + 144);
        *(_QWORD *)(a1 + 152) = *((_QWORD *)a2 + 19);
        v27 = *((_QWORD *)a2 + 20);
        *(_QWORD *)(a1 + 160) = v27;
        swift_bridgeObjectRetain(v25);
        swift_bridgeObjectRetain(v26);
        swift_bridgeObjectRetain(v27);
      }
      else
      {
        v28 = a2[7];
        v29 = a2[8];
        v30 = a2[9];
        *(_QWORD *)(a1 + 160) = *((_QWORD *)a2 + 20);
        *(_OWORD *)(a1 + 128) = v29;
        *(_OWORD *)(a1 + 144) = v30;
        *(_OWORD *)(a1 + 112) = v28;
      }
      v21 = 1;
    }
    else
    {
      v14 = *(_QWORD *)a2;
      *(_QWORD *)a1 = *(_QWORD *)a2;
      swift_retain(v14);
      v15 = *(int *)(sub_5440(&qword_25E930) + 48);
      v16 = (void *)(a1 + v15);
      v17 = (char *)a2 + v15;
      v18 = type metadata accessor for ColorScheme(0);
      v19 = *(_QWORD *)(v18 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
      {
        v20 = sub_5440(&qword_25E928);
        memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, char *, uint64_t))(v19 + 16))(v16, v17, v18);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
      }
      v21 = 0;
    }
    swift_storeEnumTagMultiPayload(a1, v6, v21);
    *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 20));
    v31 = *(int *)(a3 + 24);
    v11 = (uint64_t *)(a1 + v31);
    v12 = (uint64_t *)((char *)a2 + v31);
    sub_B414(a1 + v31, &qword_25F1F0);
    v32 = sub_5440(&qword_25F1F0);
    if (swift_getEnumCaseMultiPayload(v12, v32) == 1)
    {
      v33 = type metadata accessor for UserInterfaceSizeClass(0);
      v34 = *(_QWORD *)(v33 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v34 + 48))(v12, 1, v33))
      {
        v35 = sub_5440(&qword_25F1F8);
        memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
        v36 = 1;
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v34 + 16))(v11, v12, v33);
        v38 = *(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v34 + 56);
        v36 = 1;
        v38(v11, 0, 1, v33);
      }
    }
    else
    {
      v37 = *v12;
      *v11 = *v12;
      swift_retain(v37);
      v36 = 0;
    }
    swift_storeEnumTagMultiPayload(v11, v32, v36);
    v13 = (int *)type metadata accessor for BooksFinishedFrameViewModel(0);
    v39 = v13[5];
    v40 = (char *)v11 + v39;
    v41 = (char *)v12 + v39;
    sub_B414((uint64_t)v11 + v39, &qword_25F548);
    v42 = sub_5440(&qword_25F548);
    if (swift_getEnumCaseMultiPayload(v41, v42) == 1)
    {
      *v40 = *v41;
      v40[1] = v41[1];
      v43 = (int *)type metadata accessor for SizeConstants.Environment(0);
      v44 = v43[6];
      v45 = &v40[v44];
      v46 = &v41[v44];
      v47 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v47 - 8) + 16))(v45, v46, v47);
      *(_QWORD *)&v40[v43[7]] = *(_QWORD *)&v41[v43[7]];
      v48 = v43[8];
      v49 = &v40[v48];
      v50 = &v41[v48];
      v51 = v50[2];
      *(_WORD *)v49 = *(_WORD *)v50;
      v49[2] = v51;
      v52 = v40;
      v53 = v42;
      v54 = 1;
    }
    else
    {
      v55 = *(_QWORD *)v41;
      *(_QWORD *)v40 = *(_QWORD *)v41;
      swift_retain(v55);
      v52 = v40;
      v53 = v42;
      v54 = 0;
    }
    swift_storeEnumTagMultiPayload(v52, v53, v54);
  }
  v56 = v13[6];
  v57 = *(uint64_t *)((char *)v12 + v56);
  v58 = *(uint64_t *)((char *)v11 + v56);
  *(uint64_t *)((char *)v11 + v56) = v57;
  swift_bridgeObjectRetain(v57);
  swift_bridgeObjectRelease(v58);
  v59 = v13[7];
  v60 = (uint64_t *)((char *)v11 + v59);
  v61 = (uint64_t *)((char *)v12 + v59);
  *v60 = *v61;
  v62 = v61[1];
  v63 = v60[1];
  v60[1] = v62;
  swift_bridgeObjectRetain(v62);
  swift_bridgeObjectRelease(v63);
  v64 = v13[8];
  v65 = (uint64_t *)((char *)v11 + v64);
  v66 = (uint64_t *)((char *)v12 + v64);
  *v65 = *v66;
  v67 = v66[1];
  v68 = v65[1];
  v65[1] = v67;
  swift_bridgeObjectRetain(v67);
  swift_bridgeObjectRelease(v68);
  v69 = v13[9];
  v70 = (char *)v11 + v69;
  v71 = (char *)v12 + v69;
  v72 = type metadata accessor for YIRSourceData(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v72 - 8) + 24))(v70, v71, v72);
  *(uint64_t *)((char *)v11 + v13[10]) = *(uint64_t *)((char *)v12 + v13[10]);
  v73 = v13[11];
  v74 = (uint64_t *)((char *)v11 + v73);
  v75 = (uint64_t *)((char *)v12 + v73);
  *v74 = *v75;
  v74[1] = v75[1];
  return a1;
}

_QWORD *initializeWithTake for BooksFinishedFrame(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  int *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;

  v6 = type metadata accessor for PageBackground(0);
  if (swift_getEnumCaseMultiPayload(a2, v6))
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  else
  {
    *a1 = *a2;
    v7 = *(int *)(sub_5440(&qword_25E930) + 48);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for ColorScheme(0);
    v11 = *(_QWORD *)(v10 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
    {
      v12 = sub_5440(&qword_25E928);
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
    }
    swift_storeEnumTagMultiPayload(a1, v6, 0);
  }
  v13 = *(int *)(a3 + 24);
  *(_QWORD *)((char *)a1 + *(int *)(a3 + 20)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 20));
  v14 = (char *)a1 + v13;
  v15 = (char *)a2 + v13;
  v16 = sub_5440(&qword_25F1F0);
  if (swift_getEnumCaseMultiPayload(v15, v16) == 1)
  {
    v17 = type metadata accessor for UserInterfaceSizeClass(0);
    v18 = *(_QWORD *)(v17 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v15, 1, v17))
    {
      v19 = sub_5440(&qword_25F1F8);
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v14, v15, v17);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v14, 0, 1, v17);
    }
    swift_storeEnumTagMultiPayload(v14, v16, 1);
  }
  else
  {
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  v20 = (int *)type metadata accessor for BooksFinishedFrameViewModel(0);
  v21 = v20[5];
  v22 = &v14[v21];
  v23 = &v15[v21];
  v24 = sub_5440(&qword_25F548);
  if (swift_getEnumCaseMultiPayload(v23, v24) == 1)
  {
    *(_WORD *)v22 = *(_WORD *)v23;
    v25 = (int *)type metadata accessor for SizeConstants.Environment(0);
    v26 = v25[6];
    v27 = &v22[v26];
    v28 = &v23[v26];
    v29 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v29 - 8) + 32))(v27, v28, v29);
    *(_QWORD *)&v22[v25[7]] = *(_QWORD *)&v23[v25[7]];
    v30 = v25[8];
    v31 = &v22[v30];
    v32 = &v23[v30];
    v31[2] = v32[2];
    *(_WORD *)v31 = *(_WORD *)v32;
    swift_storeEnumTagMultiPayload(v22, v24, 1);
  }
  else
  {
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
  }
  *(_QWORD *)&v14[v20[6]] = *(_QWORD *)&v15[v20[6]];
  *(_OWORD *)&v14[v20[7]] = *(_OWORD *)&v15[v20[7]];
  *(_OWORD *)&v14[v20[8]] = *(_OWORD *)&v15[v20[8]];
  v33 = v20[9];
  v34 = &v14[v33];
  v35 = &v15[v33];
  v36 = type metadata accessor for YIRSourceData(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v36 - 8) + 32))(v34, v35, v36);
  *(_QWORD *)&v14[v20[10]] = *(_QWORD *)&v15[v20[10]];
  *(_OWORD *)&v14[v20[11]] = *(_OWORD *)&v15[v20[11]];
  return a1;
}

_QWORD *assignWithTake for BooksFinishedFrame(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  int *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;

  if (a1 == a2)
  {
    v7 = *(int *)(a3 + 24);
    *(_QWORD *)((char *)a1 + *(int *)(a3 + 20)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 20));
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = (int *)type metadata accessor for BooksFinishedFrameViewModel(0);
  }
  else
  {
    sub_224DC((uint64_t)a1, type metadata accessor for PageBackground);
    v6 = type metadata accessor for PageBackground(0);
    if (swift_getEnumCaseMultiPayload(a2, v6))
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
    else
    {
      *a1 = *a2;
      v11 = *(int *)(sub_5440(&qword_25E930) + 48);
      v12 = (char *)a1 + v11;
      v13 = (char *)a2 + v11;
      v14 = type metadata accessor for ColorScheme(0);
      v15 = *(_QWORD *)(v14 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
      {
        v16 = sub_5440(&qword_25E928);
        memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v12, v13, v14);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
      }
      swift_storeEnumTagMultiPayload(a1, v6, 0);
    }
    v17 = *(int *)(a3 + 24);
    *(_QWORD *)((char *)a1 + *(int *)(a3 + 20)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 20));
    v8 = (char *)a1 + v17;
    v9 = (char *)a2 + v17;
    sub_B414((uint64_t)a1 + v17, &qword_25F1F0);
    v18 = sub_5440(&qword_25F1F0);
    if (swift_getEnumCaseMultiPayload(v9, v18) == 1)
    {
      v19 = type metadata accessor for UserInterfaceSizeClass(0);
      v20 = *(_QWORD *)(v19 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v9, 1, v19))
      {
        v21 = sub_5440(&qword_25F1F8);
        memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v8, v9, v19);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v8, 0, 1, v19);
      }
      swift_storeEnumTagMultiPayload(v8, v18, 1);
    }
    else
    {
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    v10 = (int *)type metadata accessor for BooksFinishedFrameViewModel(0);
    v22 = v10[5];
    v23 = &v8[v22];
    v24 = &v9[v22];
    sub_B414((uint64_t)&v8[v22], &qword_25F548);
    v25 = sub_5440(&qword_25F548);
    if (swift_getEnumCaseMultiPayload(v24, v25) == 1)
    {
      *(_WORD *)v23 = *(_WORD *)v24;
      v26 = (int *)type metadata accessor for SizeConstants.Environment(0);
      v27 = v26[6];
      v28 = &v23[v27];
      v29 = &v24[v27];
      v30 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v30 - 8) + 32))(v28, v29, v30);
      *(_QWORD *)&v23[v26[7]] = *(_QWORD *)&v24[v26[7]];
      v31 = v26[8];
      v32 = &v23[v31];
      v33 = &v24[v31];
      v32[2] = v33[2];
      *(_WORD *)v32 = *(_WORD *)v33;
      swift_storeEnumTagMultiPayload(v23, v25, 1);
    }
    else
    {
      memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    }
  }
  v34 = v10[6];
  v35 = *(_QWORD *)&v8[v34];
  *(_QWORD *)&v8[v34] = *(_QWORD *)&v9[v34];
  swift_bridgeObjectRelease(v35);
  v36 = v10[7];
  v37 = &v8[v36];
  v38 = &v9[v36];
  v40 = *(_QWORD *)v38;
  v39 = *((_QWORD *)v38 + 1);
  v41 = *((_QWORD *)v37 + 1);
  *(_QWORD *)v37 = v40;
  *((_QWORD *)v37 + 1) = v39;
  swift_bridgeObjectRelease(v41);
  v42 = v10[8];
  v43 = &v8[v42];
  v44 = &v9[v42];
  v46 = *(_QWORD *)v44;
  v45 = *((_QWORD *)v44 + 1);
  v47 = *((_QWORD *)v43 + 1);
  *(_QWORD *)v43 = v46;
  *((_QWORD *)v43 + 1) = v45;
  swift_bridgeObjectRelease(v47);
  v48 = v10[9];
  v49 = &v8[v48];
  v50 = &v9[v48];
  v51 = type metadata accessor for YIRSourceData(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v51 - 8) + 40))(v49, v50, v51);
  *(_QWORD *)&v8[v10[10]] = *(_QWORD *)&v9[v10[10]];
  *(_OWORD *)&v8[v10[11]] = *(_OWORD *)&v9[v10[11]];
  return a1;
}

uint64_t getEnumTagSinglePayload for BooksFinishedFrame(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_120B28);
}

uint64_t sub_120B28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v6 = type metadata accessor for PageBackground(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v8 = type metadata accessor for BooksFinishedFrameViewModel(0);
    v10 = a1 + *(int *)(a3 + 24);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for BooksFinishedFrame(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_120BA8);
}

uint64_t sub_120BA8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v8 = type metadata accessor for PageBackground(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v10 = type metadata accessor for BooksFinishedFrameViewModel(0);
    v12 = a1 + *(int *)(a4 + 24);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t sub_120C24(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[3];

  result = type metadata accessor for PageBackground(319);
  if (v3 <= 0x3F)
  {
    v5[0] = *(_QWORD *)(result - 8) + 64;
    v5[1] = (char *)&value witness table for Builtin.Int64 + 64;
    result = type metadata accessor for BooksFinishedFrameViewModel(319);
    if (v4 <= 0x3F)
    {
      v5[2] = *(_QWORD *)(result - 8) + 64;
      swift_initStructMetadata(a1, 256, 3, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

unint64_t sub_120CB8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_266520;
  if (!qword_266520)
  {
    v1 = sub_7EF8(&qword_2663C8);
    sub_120D3C();
    sub_7FD8((unint64_t *)&qword_25EE78, &qword_25EE58, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_266520);
  }
  return result;
}

unint64_t sub_120D3C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_266528;
  if (!qword_266528)
  {
    v1 = sub_7EF8(&qword_2663B8);
    sub_7FD8(qword_266530, &qword_2663B0, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_266528);
  }
  return result;
}

uint64_t sub_120DC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 72);
}

void sub_120DC8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[5];

  sub_2AD74(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    v6[1] = "(";
    v6[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v6[3] = (char *)&value witness table for () + 64;
    v4 = swift_checkMetadataState(319, *(_QWORD *)(a1 + 32));
    if (v5 <= 0x3F)
    {
      v6[4] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 0, 5, v6, a1 + 64);
    }
  }
}

uint64_t *sub_120E74(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  __int128 v25;
  __int128 v26;
  _QWORD *v27;
  uint64_t *v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  void (*v35)(unint64_t, unint64_t, uint64_t);

  v6 = type metadata accessor for UserInterfaceSizeClass(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84))
    v8 = *(_QWORD *)(v7 + 64);
  else
    v8 = *(_QWORD *)(v7 + 64) + 1;
  if (v8 <= 8)
    v9 = 8;
  else
    v9 = v8;
  v10 = *(_QWORD *)(a3 + 32);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_DWORD *)(v11 + 80);
  v13 = v12 + 16;
  v14 = v12 | *(_DWORD *)(v7 + 80) & 0xF8;
  if (v14 > 7
    || ((*(_DWORD *)(v7 + 80) | *(_DWORD *)(v11 + 80)) & 0x100000) != 0
    || ((v12 + 16 + (((((v9 & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v12)
     + *(_QWORD *)(v11 + 64) > 0x18)
  {
    v17 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v17 + (((v14 | 7) + 16) & ~(unint64_t)(v14 | 7)));
    swift_retain(v17);
  }
  else
  {
    v18 = v6;
    v19 = *((unsigned __int8 *)a2 + v9);
    if (v19 >= 2)
    {
      if (v9 <= 3)
        v20 = v9;
      else
        v20 = 4;
      __asm { BR              X13 }
    }
    v21 = ~v12;
    if (v19 == 1)
    {
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
      {
        memcpy(a1, a2, v8);
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(a1, a2, v18);
        (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v18);
      }
      *((_BYTE *)a1 + v9) = 1;
    }
    else
    {
      v22 = *a2;
      *a1 = *a2;
      *((_BYTE *)a1 + v9) = 0;
      swift_retain(v22);
    }
    v23 = ((unint64_t)a1 + v9 + 8) & 0xFFFFFFFFFFFFFFF8;
    v24 = ((unint64_t)a2 + v9 + 8) & 0xFFFFFFFFFFFFFFF8;
    v25 = *(_OWORD *)v24;
    v26 = *(_OWORD *)(v24 + 16);
    *(_QWORD *)(v23 + 32) = *(_QWORD *)(v24 + 32);
    *(_OWORD *)v23 = v25;
    *(_OWORD *)(v23 + 16) = v26;
    v27 = (_QWORD *)((v23 + 47) & 0xFFFFFFFFFFFFF8);
    v28 = (uint64_t *)((v24 + 47) & 0xFFFFFFFFFFFFF8);
    v29 = *v28;
    *v27 = *v28;
    v30 = (_QWORD *)(((unint64_t)v27 + 15) & 0xFFFFFFFFFFFFFFF8);
    v31 = (_QWORD *)(((unint64_t)v28 + 15) & 0xFFFFFFFFFFFFFFF8);
    v32 = v31[1];
    *v30 = *v31;
    v30[1] = v32;
    v33 = ((unint64_t)v30 + v13) & v21;
    v34 = ((unint64_t)v31 + v13) & v21;
    v35 = *(void (**)(unint64_t, unint64_t, uint64_t))(v11 + 16);
    swift_bridgeObjectRetain(v29);
    swift_retain(v32);
    v35(v33, v34, v10);
  }
  return a1;
}

uint64_t sub_1210E4(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v4 = type metadata accessor for UserInterfaceSizeClass(0);
  v5 = *(_QWORD *)(v4 - 8);
  if (*(_DWORD *)(v5 + 84))
    v6 = *(_QWORD *)(v5 + 64);
  else
    v6 = *(_QWORD *)(v5 + 64) + 1;
  if (v6 <= 8)
    v7 = 8;
  else
    v7 = v6;
  v8 = *((unsigned __int8 *)a1 + v7);
  if (v8 >= 2)
  {
    if (v7 <= 3)
      v9 = v7;
    else
      v9 = 4;
    __asm { BR              X12 }
  }
  if (v8 == 1)
  {
    if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v5 + 48))(a1, 1, v4))
      (*(void (**)(_QWORD *, uint64_t))(v5 + 8))(a1, v4);
  }
  else
  {
    swift_release(*a1);
  }
  v10 = (((unint64_t)a1 + v7 + 8) & 0xFFFFFFFFFFFFFFF8) + 47;
  v11 = (v10 & 0xFFFFFFFFFFFFFFF8) + 15;
  swift_bridgeObjectRelease(*(_QWORD *)(v10 & 0xFFFFFFFFFFFFFFF8));
  v11 &= 0xFFFFFFFFFFFFFFF8;
  swift_release(*(_QWORD *)(v11 + 8));
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 32) - 8) + 8))((v11 + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 32) - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 32) - 8) + 80));
}

uint64_t *sub_121230(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t, uint64_t);

  v6 = type metadata accessor for UserInterfaceSizeClass(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84))
    v8 = *(_QWORD *)(v7 + 64);
  else
    v8 = *(_QWORD *)(v7 + 64) + 1;
  if (v8 <= 8)
    v9 = 8;
  else
    v9 = v8;
  v10 = *((unsigned __int8 *)a2 + v9);
  if (v10 >= 2)
  {
    if (v9 <= 3)
      v11 = v9;
    else
      v11 = 4;
    __asm { BR              X12 }
  }
  if (v10 == 1)
  {
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
    {
      memcpy(a1, a2, v8);
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(a1, a2, v6);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
    }
    *((_BYTE *)a1 + v9) = 1;
  }
  else
  {
    v12 = *a2;
    *a1 = *a2;
    *((_BYTE *)a1 + v9) = 0;
    swift_retain(v12);
  }
  v13 = ((unint64_t)a1 + v9 + 8) & 0xFFFFFFFFFFFFFFF8;
  v14 = ((unint64_t)a2 + v9 + 8) & 0xFFFFFFFFFFFFFFF8;
  v15 = *(_OWORD *)v14;
  v16 = *(_OWORD *)(v14 + 16);
  *(_QWORD *)(v13 + 32) = *(_QWORD *)(v14 + 32);
  *(_OWORD *)v13 = v15;
  *(_OWORD *)(v13 + 16) = v16;
  v17 = (uint64_t *)((v14 + 47) & 0xFFFFFFFFFFFFF8);
  v18 = *v17;
  v19 = (_QWORD *)((v13 + 47) & 0xFFFFFFFFFFFFF8);
  *v19 = *v17;
  v20 = (_QWORD *)(((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFFFF8);
  v21 = (_QWORD *)(((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFFFF8);
  v22 = v21[1];
  *v20 = *v21;
  v20[1] = v22;
  v23 = *(_QWORD *)(a3 + 32);
  v24 = *(_QWORD *)(v23 - 8);
  v25 = *(unsigned __int8 *)(v24 + 80);
  v26 = ((unint64_t)v20 + v25 + 16) & ~v25;
  v27 = ((unint64_t)v21 + v25 + 16) & ~v25;
  v28 = *(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 16);
  swift_bridgeObjectRetain(v18);
  swift_retain(v22);
  v28(v26, v27, v23);
  return a1;
}

uint64_t *sub_121430(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  if (a1 != a2)
  {
    v6 = type metadata accessor for UserInterfaceSizeClass(0);
    v7 = *(_QWORD *)(v6 - 8);
    if (*(_DWORD *)(v7 + 84))
      v8 = *(_QWORD *)(v7 + 64);
    else
      v8 = *(_QWORD *)(v7 + 64) + 1;
    if (v8 <= 8)
      v9 = 8;
    else
      v9 = v8;
    v10 = *((unsigned __int8 *)a1 + v9);
    if (v10 >= 2)
    {
      if (v9 <= 3)
        v11 = v9;
      else
        v11 = 4;
      __asm { BR              X12 }
    }
    if (v10 == 1)
    {
      if (!(*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6))
        (*(void (**)(uint64_t *, uint64_t))(v7 + 8))(a1, v6);
    }
    else
    {
      swift_release(*a1);
    }
    v12 = *((unsigned __int8 *)a2 + v9);
    if (v12 >= 2)
    {
      if (v9 <= 3)
        v13 = v9;
      else
        v13 = 4;
      __asm { BR              X12 }
    }
    if (v12 == 1)
    {
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
      {
        memcpy(a1, a2, v8);
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(a1, a2, v6);
        (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      }
      *((_BYTE *)a1 + v9) = 1;
    }
    else
    {
      v14 = *a2;
      *a1 = *a2;
      *((_BYTE *)a1 + v9) = 0;
      swift_retain(v14);
    }
  }
  v15 = *(_QWORD *)(type metadata accessor for UserInterfaceSizeClass(0) - 8);
  v16 = *(_DWORD *)(v15 + 84);
  v17 = *(_QWORD *)(v15 + 64);
  if (!v16)
    ++v17;
  if (v17 <= 8)
    v17 = 8;
  v18 = v17 + 8;
  v19 = ((unint64_t)a1 + v18) & 0xFFFFFFFFFFFFFFF8;
  v20 = ((unint64_t)a2 + v18) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v19 = *(_QWORD *)v20;
  *(_QWORD *)(v19 + 8) = *(_QWORD *)(v20 + 8);
  *(_QWORD *)(v19 + 16) = *(_QWORD *)(v20 + 16);
  *(_QWORD *)(v19 + 24) = *(_QWORD *)(v20 + 24);
  *(_QWORD *)(v19 + 32) = *(_QWORD *)(v20 + 32);
  v19 += 47;
  v20 += 47;
  v22 = (v20 & 0xFFFFFFFFFFFFF8) + 15;
  v21 = *(_QWORD *)(v20 & 0xFFFFFFFFFFFFF8);
  v23 = *(_QWORD *)(v19 & 0xFFFFFFFFFFFFFFF8);
  *(_QWORD *)(v19 & 0xFFFFFFFFFFFFFFF8) = v21;
  v24 = (v19 & 0xFFFFFFFFFFFFFFF8) + 15;
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRelease(v23);
  v24 &= 0xFFFFFFFFFFFFFFF8;
  v22 &= 0xFFFFFFFFFFFFFFF8;
  v25 = *(_QWORD *)(v22 + 8);
  v26 = *(_QWORD *)(v24 + 8);
  *(_QWORD *)v24 = *(_QWORD *)v22;
  *(_QWORD *)(v24 + 8) = v25;
  swift_retain(v25);
  swift_release(v26);
  v27 = *(_QWORD *)(*(_QWORD *)(a3 + 32) - 8);
  (*(void (**)(unint64_t, unint64_t))(v27 + 24))((*(unsigned __int8 *)(v27 + 80) + 16 + v24) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80), (*(unsigned __int8 *)(v27 + 80) + 16 + v22) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80));
  return a1;
}

_QWORD *sub_121748(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  char v12;
  unint64_t v13;
  unint64_t v14;
  __int128 v15;
  __int128 v16;
  _QWORD *v17;
  _QWORD *v18;
  _OWORD *v19;
  _OWORD *v20;
  uint64_t v21;

  v6 = type metadata accessor for UserInterfaceSizeClass(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84))
    v8 = *(_QWORD *)(v7 + 64);
  else
    v8 = *(_QWORD *)(v7 + 64) + 1;
  if (v8 <= 8)
    v9 = 8;
  else
    v9 = v8;
  v10 = *((unsigned __int8 *)a2 + v9);
  if (v10 >= 2)
  {
    if (v9 <= 3)
      v11 = v9;
    else
      v11 = 4;
    __asm { BR              X12 }
  }
  if (v10 == 1)
  {
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
    {
      memcpy(a1, a2, v8);
      v12 = 1;
    }
    else
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 32))(a1, a2, v6);
      v12 = 1;
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
    }
  }
  else
  {
    v12 = 0;
    *a1 = *a2;
  }
  *((_BYTE *)a1 + v9) = v12;
  v13 = ((unint64_t)a1 + v9 + 8) & 0xFFFFFFFFFFFFFFF8;
  v14 = ((unint64_t)a2 + v9 + 8) & 0xFFFFFFFFFFFFFFF8;
  v15 = *(_OWORD *)v14;
  v16 = *(_OWORD *)(v14 + 16);
  *(_QWORD *)(v13 + 32) = *(_QWORD *)(v14 + 32);
  *(_OWORD *)v13 = v15;
  *(_OWORD *)(v13 + 16) = v16;
  v17 = (_QWORD *)((v13 + 47) & 0xFFFFFFFFFFFFF8);
  v18 = (_QWORD *)((v14 + 47) & 0xFFFFFFFFFFFFF8);
  *v17 = *v18;
  v19 = (_OWORD *)(((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFFFF8);
  v20 = (_OWORD *)(((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v19 = *v20;
  v21 = *(_QWORD *)(*(_QWORD *)(a3 + 32) - 8);
  (*(void (**)(unint64_t, unint64_t))(v21 + 32))(((unint64_t)v19 + *(unsigned __int8 *)(v21 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80), ((unint64_t)v20 + *(unsigned __int8 *)(v21 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80));
  return a1;
}

_QWORD *sub_121914(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  _OWORD *v24;
  uint64_t v25;
  uint64_t v26;

  if (a1 != a2)
  {
    v6 = type metadata accessor for UserInterfaceSizeClass(0);
    v7 = *(_QWORD *)(v6 - 8);
    if (*(_DWORD *)(v7 + 84))
      v8 = *(_QWORD *)(v7 + 64);
    else
      v8 = *(_QWORD *)(v7 + 64) + 1;
    if (v8 <= 8)
      v9 = 8;
    else
      v9 = v8;
    v10 = *((unsigned __int8 *)a1 + v9);
    if (v10 >= 2)
    {
      if (v9 <= 3)
        v11 = v9;
      else
        v11 = 4;
      __asm { BR              X12 }
    }
    if (v10 == 1)
    {
      if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6))
        (*(void (**)(_QWORD *, uint64_t))(v7 + 8))(a1, v6);
    }
    else
    {
      swift_release(*a1);
    }
    v12 = *((unsigned __int8 *)a2 + v9);
    if (v12 >= 2)
    {
      if (v9 <= 3)
        v13 = v9;
      else
        v13 = 4;
      __asm { BR              X12 }
    }
    if (v12 == 1)
    {
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
      {
        memcpy(a1, a2, v8);
        v14 = 1;
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 32))(a1, a2, v6);
        v14 = 1;
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      }
    }
    else
    {
      v14 = 0;
      *a1 = *a2;
    }
    *((_BYTE *)a1 + v9) = v14;
  }
  v15 = *(_QWORD *)(type metadata accessor for UserInterfaceSizeClass(0) - 8);
  v16 = *(_DWORD *)(v15 + 84);
  v17 = *(_QWORD *)(v15 + 64);
  if (!v16)
    ++v17;
  if (v17 <= 8)
    v17 = 8;
  v18 = v17 + 8;
  v19 = ((unint64_t)a1 + v18) & 0xFFFFFFFFFFFFFFF8;
  v20 = (_QWORD *)(((unint64_t)a2 + v18) & 0xFFFFFFFFFFFFFFF8);
  *(_QWORD *)v19 = *v20;
  *(_QWORD *)(v19 + 8) = v20[1];
  *(_QWORD *)(v19 + 16) = v20[2];
  *(_QWORD *)(v19 + 24) = v20[3];
  *(_QWORD *)(v19 + 32) = v20[4];
  v19 += 47;
  v21 = (_QWORD *)(((unint64_t)v20 + 47) & 0xFFFFFFFFFFFFF8);
  v22 = *(_QWORD *)(v19 & 0xFFFFFFFFFFFFFFF8);
  *(_QWORD *)(v19 & 0xFFFFFFFFFFFFFFF8) = *v21;
  v23 = (v19 & 0xFFFFFFFFFFFFFFF8) + 15;
  swift_bridgeObjectRelease(v22);
  v23 &= 0xFFFFFFFFFFFFFFF8;
  v24 = (_OWORD *)(((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8);
  v25 = *(_QWORD *)(v23 + 8);
  *(_OWORD *)v23 = *v24;
  swift_release(v25);
  v26 = *(_QWORD *)(*(_QWORD *)(a3 + 32) - 8);
  (*(void (**)(unint64_t, unint64_t))(v26 + 40))((*(unsigned __int8 *)(v26 + 80) + 16 + v23) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80), ((unint64_t)v24 + *(unsigned __int8 *)(v26 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80));
  return a1;
}

uint64_t sub_121C1C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  int v18;
  unsigned int v20;
  int v21;
  int v22;
  unint64_t *v23;
  unint64_t v24;

  v6 = *(_QWORD *)(type metadata accessor for UserInterfaceSizeClass(0) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = *(_QWORD *)(*(_QWORD *)(a3 + 32) - 8);
  v10 = *(_DWORD *)(v9 + 84);
  if (v10 <= 0x7FFFFFFF)
    v11 = 0x7FFFFFFF;
  else
    v11 = *(_DWORD *)(v9 + 84);
  if (v7)
    v12 = v8;
  else
    v12 = v8 + 1;
  if (v12 <= 8)
    v13 = 8;
  else
    v13 = v12;
  if (!a2)
    return 0;
  v14 = *(unsigned __int8 *)(v9 + 80);
  v15 = v14 + 16;
  if (a2 <= v11)
    goto LABEL_30;
  v16 = ((v15 + (((((v13 & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v14)
      + *(_QWORD *)(v9 + 64);
  v17 = 8 * v16;
  if (v16 <= 3)
  {
    v20 = ((a2 - v11 + ~(-1 << v17)) >> v17) + 1;
    if (HIWORD(v20))
    {
      v18 = *(_DWORD *)(a1 + v16);
      if (!v18)
        goto LABEL_30;
      goto LABEL_21;
    }
    if (v20 > 0xFF)
    {
      v18 = *(unsigned __int16 *)(a1 + v16);
      if (!*(_WORD *)(a1 + v16))
        goto LABEL_30;
      goto LABEL_21;
    }
    if (v20 < 2)
    {
LABEL_30:
      v23 = (unint64_t *)((((a1 + v13 + 8) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8);
      if ((v10 & 0x80000000) != 0)
        return (*(uint64_t (**)(unint64_t))(v9 + 48))((v15
                                                                      + (((unint64_t)v23 + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v14);
      v24 = *v23;
      if (v24 >= 0xFFFFFFFF)
        LODWORD(v24) = -1;
      return (v24 + 1);
    }
  }
  v18 = *(unsigned __int8 *)(a1 + v16);
  if (!*(_BYTE *)(a1 + v16))
    goto LABEL_30;
LABEL_21:
  v21 = (v18 - 1) << v17;
  if (v16 > 3)
    v21 = 0;
  if ((_DWORD)v16)
  {
    if (v16 <= 3)
      v22 = v16;
    else
      v22 = 4;
    __asm { BR              X12 }
  }
  return v11 + v21 + 1;
}

void sub_121DF0(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v8;
  int v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unint64_t v13;
  uint64_t v14;
  size_t v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  int v19;

  v8 = *(_QWORD *)(type metadata accessor for UserInterfaceSizeClass(0) - 8);
  v9 = *(_DWORD *)(v8 + 84);
  v10 = *(_QWORD *)(v8 + 64);
  v11 = *(_QWORD *)(*(_QWORD *)(a4 + 32) - 8);
  if (*(_DWORD *)(v11 + 84) <= 0x7FFFFFFFu)
    v12 = 0x7FFFFFFF;
  else
    v12 = *(_DWORD *)(v11 + 84);
  if (v9)
    v13 = v10;
  else
    v13 = v10 + 1;
  v14 = 8;
  if (v13 > 8)
    v14 = v13;
  v15 = ((*(unsigned __int8 *)(v11 + 80)
        + 16
        + (((((v14 & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80))
      + *(_QWORD *)(v11 + 64);
  if (a3 <= v12)
  {
    v16 = 0;
  }
  else if (v15 <= 3)
  {
    v18 = ((a3 - v12 + ~(-1 << (8 * v15))) >> (8 * v15)) + 1;
    if (HIWORD(v18))
    {
      v16 = &dword_4;
    }
    else if (v18 >= 0x100)
    {
      v16 = 2;
    }
    else
    {
      v16 = v18 > 1;
    }
  }
  else
  {
    v16 = &dword_0 + 1;
  }
  if (v12 < a2)
  {
    v17 = ~v12 + a2;
    if (v15 < 4)
    {
      if ((_DWORD)v15)
      {
        v19 = v17 & ~(-1 << (8 * v15));
        bzero(a1, v15);
        if ((_DWORD)v15 == 3)
        {
          *(_WORD *)a1 = v19;
          a1[2] = BYTE2(v19);
        }
        else if ((_DWORD)v15 == 2)
        {
          *(_WORD *)a1 = v19;
        }
        else
        {
          *a1 = v19;
        }
      }
    }
    else
    {
      bzero(a1, v15);
      *(_DWORD *)a1 = v17;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X14 }
}

uint64_t type metadata accessor for HorizontalScrollingGrid(uint64_t a1, uint64_t a2)
{
  return swift_getGenericMetadata(a1, a2, &nominal type descriptor for HorizontalScrollingGrid);
}

uint64_t sub_122054(uint64_t a1, _OWORD *a2)
{
  __int128 v2;
  _OWORD v4[3];

  v2 = a2[2];
  v4[0] = a2[1];
  v4[1] = v2;
  v4[2] = a2[3];
  return swift_getOpaqueTypeConformance2(v4, &unk_22E2D8, 1);
}

uint64_t sub_122090()
{
  return sub_1220B4((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_11BA80);
}

uint64_t sub_12209C()
{
  return sub_1220B4((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_11BD8C);
}

uint64_t sub_1220A8()
{
  return sub_1220B4((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_11CA74);
}

uint64_t sub_1220B4(uint64_t (*a1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v1;

  return a1(v1[8], v1[2], v1[3], v1[4], v1[5], v1[6], v1[7]);
}

uint64_t sub_1220CC()
{
  char *v0;
  __int128 v1;
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v12;
  _OWORD v13[3];

  v12 = *((_OWORD *)v0 + 2);
  v13[0] = *((_OWORD *)v0 + 1);
  v1 = *((_OWORD *)v0 + 3);
  v13[1] = v12;
  v13[2] = v1;
  v2 = (int *)type metadata accessor for HorizontalScrollingGrid(0, (uint64_t)v13);
  v3 = *((_QWORD *)v2 - 1);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v5 = (v4 + 64) & ~v4;
  v6 = *(_QWORD *)(v3 + 64);
  v7 = &v0[v5];
  v8 = sub_5440(&qword_25F1F0);
  if (swift_getEnumCaseMultiPayload(&v0[v5], v8) == 1)
  {
    v9 = type metadata accessor for UserInterfaceSizeClass(0);
    v10 = *(_QWORD *)(v9 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(&v0[v5], 1, v9))
      (*(void (**)(char *, uint64_t))(v10 + 8))(&v0[v5], v9);
  }
  else
  {
    swift_release(*(_QWORD *)v7);
  }
  swift_bridgeObjectRelease(*(_QWORD *)&v7[v2[18]]);
  swift_release(*(_QWORD *)&v7[v2[19] + 8]);
  (*(void (**)(char *))(*(_QWORD *)(v12 - 8) + 8))(&v7[v2[20]]);
  return swift_deallocObject(v0, v5 + v6, v4 | 7);
}

uint64_t sub_1221F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[6];

  v5 = v2[3];
  v6 = v2[4];
  v7 = v2[5];
  v8 = v2[6];
  v9 = v2[7];
  v12[0] = v2[2];
  v12[1] = v5;
  v12[2] = v6;
  v12[3] = v7;
  v12[4] = v8;
  v12[5] = v9;
  v10 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for HorizontalScrollingGrid(0, (uint64_t)v12) - 8)
                           + 80);
  return sub_11CE44(a1, (uint64_t)v2 + ((v10 + 64) & ~v10), v5, a2);
}

uint64_t sub_1222B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  _QWORD *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;

  v1 = type metadata accessor for BooksFinishedFrame(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v0 + v4;
  v7 = type metadata accessor for PageBackground(0);
  if (swift_getEnumCaseMultiPayload(v0 + v4, v7) == 1)
  {
    if (!*(_BYTE *)(v6 + 56))
      _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)(v0 + v4));
    swift_bridgeObjectRelease(*(_QWORD *)(v6 + 104));
    v8 = *(_QWORD *)(v6 + 120);
    if (v8)
    {
      swift_bridgeObjectRelease(v8);
      swift_bridgeObjectRelease(*(_QWORD *)(v6 + 136));
      swift_bridgeObjectRelease(*(_QWORD *)(v6 + 160));
    }
  }
  else
  {
    swift_release(*(_QWORD *)v6);
    v9 = v6 + *(int *)(sub_5440(&qword_25E930) + 48);
    v10 = type metadata accessor for ColorScheme(0);
    v11 = *(_QWORD *)(v10 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
  }
  v12 = (_QWORD *)(v6 + *(int *)(v1 + 24));
  v13 = sub_5440(&qword_25F1F0);
  if (swift_getEnumCaseMultiPayload(v12, v13) == 1)
  {
    v14 = type metadata accessor for UserInterfaceSizeClass(0);
    v15 = *(_QWORD *)(v14 - 8);
    if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v15 + 48))(v12, 1, v14))
      (*(void (**)(_QWORD *, uint64_t))(v15 + 8))(v12, v14);
  }
  else
  {
    swift_release(*v12);
  }
  v16 = (int *)type metadata accessor for BooksFinishedFrameViewModel(0);
  v17 = (_QWORD *)((char *)v12 + v16[5]);
  v18 = sub_5440(&qword_25F548);
  if (swift_getEnumCaseMultiPayload(v17, v18) == 1)
  {
    v19 = (char *)v17 + *(int *)(type metadata accessor for SizeConstants.Environment(0) + 24);
    v20 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(v19, v20);
  }
  else
  {
    swift_release(*v17);
  }
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v12 + v16[6]));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v12 + v16[7] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v12 + v16[8] + 8));
  v21 = (char *)v12 + v16[9];
  v22 = type metadata accessor for YIRSourceData(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v22 - 8) + 8))(v21, v22);
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_1224F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for BooksFinishedFrame(0) - 8) + 80);
  return sub_11DE44(a1, v2 + ((v5 + 16) & ~v5), a2);
}

ValueMetadata *type metadata accessor for HorizontalScrollingGridLayoutViewModel()
{
  return &type metadata for HorizontalScrollingGridLayoutViewModel;
}

uint64_t sub_122578(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t OpaqueTypeMetadata2;
  uint64_t OpaqueTypeConformance2;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t TupleTypeMetadata2;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t AssociatedTypeWitness;
  uint64_t v31;
  void *WitnessTable;
  uint64_t AssociatedConformanceWitness;

  v1 = *a1;
  v2 = a1[1];
  v4 = a1[2];
  v3 = a1[3];
  v5 = a1[5];
  v29 = type metadata accessor for Array(255, *a1);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v3, v1, &protocol requirements base descriptor for Identifiable, &associated type descriptor for Identifiable.ID);
  v31 = v2;
  WitnessTable = (void *)swift_getWitnessTable(&protocol conformance descriptor for [A], v29);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v3, v1, AssociatedTypeWitness, &protocol requirements base descriptor for Identifiable, &associated conformance descriptor for Identifiable.Identifiable.ID: Hashable);
  v6 = type metadata accessor for ForEach(255, &v29);
  v7 = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v6);
  v29 = v6;
  AssociatedTypeWitness = v7;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(255, &v29, &opaque type descriptor for <<opaque return type of View.containerRelativeFrame(_:count:span:spacing:alignment:)>>, 0);
  v29 = v6;
  AssociatedTypeWitness = v7;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v29, &opaque type descriptor for <<opaque return type of View.containerRelativeFrame(_:count:span:spacing:alignment:)>>, 1);
  v10 = type metadata accessor for LazyHGrid(255, OpaqueTypeMetadata2, OpaqueTypeConformance2);
  v11 = swift_getWitnessTable(&protocol conformance descriptor for LazyHGrid<A>, v10);
  v29 = v10;
  AssociatedTypeWitness = v11;
  v12 = swift_getOpaqueTypeMetadata2(255, &v29, &opaque type descriptor for <<opaque return type of View.scrollTargetLayout(isEnabled:)>>, 0);
  v29 = v4;
  AssociatedTypeWitness = v5;
  v13 = swift_getOpaqueTypeMetadata2(255, &v29, &opaque type descriptor for <<opaque return type of View.containerRelativeFrame(_:count:span:spacing:alignment:)>>, 0);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v12, v13, 0, 0);
  v15 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  v16 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v15);
  v17 = type metadata accessor for HStack(255, v15, v16);
  swift_getWitnessTable(&protocol conformance descriptor for HStack<A>, v17);
  v18 = type metadata accessor for ScrollView(255, v17);
  v19 = type metadata accessor for ViewAlignedScrollTargetBehavior(255);
  v20 = swift_getWitnessTable(&protocol conformance descriptor for ScrollView<A>, v18);
  v29 = v18;
  AssociatedTypeWitness = v19;
  v31 = v20;
  WitnessTable = &protocol witness table for ViewAlignedScrollTargetBehavior;
  v21 = swift_getOpaqueTypeMetadata2(255, &v29, &opaque type descriptor for <<opaque return type of View.scrollTargetBehavior<A>(_:)>>, 0);
  v29 = v18;
  AssociatedTypeWitness = v19;
  v31 = v20;
  WitnessTable = &protocol witness table for ViewAlignedScrollTargetBehavior;
  v22 = swift_getOpaqueTypeConformance2(&v29, &opaque type descriptor for <<opaque return type of View.scrollTargetBehavior<A>(_:)>>, 1);
  v29 = v21;
  AssociatedTypeWitness = v22;
  v23 = swift_getOpaqueTypeMetadata2(255, &v29, &opaque type descriptor for <<opaque return type of View.scrollIndicators(_:axes:)>>, 0);
  v29 = v21;
  AssociatedTypeWitness = v22;
  v24 = swift_getOpaqueTypeConformance2(&v29, &opaque type descriptor for <<opaque return type of View.scrollIndicators(_:axes:)>>, 1);
  v29 = v23;
  AssociatedTypeWitness = v24;
  v25 = swift_getOpaqueTypeMetadata2(255, &v29, &opaque type descriptor for <<opaque return type of View.scrollClipDisabled(_:)>>, 0);
  v26 = type metadata accessor for SafeAreaPaddingModifier(255);
  v27 = type metadata accessor for ModifiedContent(255, v25, v26);
  v29 = v23;
  AssociatedTypeWitness = v24;
  swift_getOpaqueTypeConformance2(&v29, &opaque type descriptor for <<opaque return type of View.scrollClipDisabled(_:)>>, 1);
  sub_6FD0(&qword_2665B8, (uint64_t (*)(uint64_t))&type metadata accessor for SafeAreaPaddingModifier, (uint64_t)&protocol conformance descriptor for SafeAreaPaddingModifier);
  return swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v27);
}

void static Metrics.createClickMetrics(targetId:targetType:actionType:actionDetails:actionUrl:location:)(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned __int8 *a3@<X2>, char *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, _OWORD *a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  void *v24;
  char isUniquelyReferenced_nonNull_native;
  char v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  void *v41;
  _OWORD v42[2];
  __int128 v43;
  void *v44;
  _OWORD v45[11];

  v38 = a2;
  v37 = a1;
  v40 = a9;
  v15 = type metadata accessor for ScalarDictionary(0);
  __chkstk_darwin(v15);
  v39 = (char *)&v35 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for MetricsData(0);
  __chkstk_darwin(v17);
  v36 = *a3;
  v18 = *a4;
  v19 = a8[9];
  v45[8] = a8[8];
  v45[9] = v19;
  v45[10] = a8[10];
  v20 = a8[5];
  v45[4] = a8[4];
  v45[5] = v20;
  v21 = a8[7];
  v45[6] = a8[6];
  v45[7] = v21;
  v22 = a8[1];
  v45[0] = *a8;
  v23 = a8[2];
  v45[3] = a8[3];
  v45[1] = v22;
  v45[2] = v23;
  v24 = &_swiftEmptyDictionarySingleton;
  if (a5)
  {
    v44 = (void *)sub_5440(&qword_25DF98);
    *(_QWORD *)&v43 = a5;
    sub_8C4C(&v43, v42);
    swift_bridgeObjectRetain(a5);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
    v41 = &_swiftEmptyDictionarySingleton;
    sub_A7C8(v42, 0x65446E6F69746361, 0xED0000736C696174, isUniquelyReferenced_nonNull_native);
    v24 = v41;
    swift_bridgeObjectRelease(0x8000000000000000);
  }
  if (a7)
  {
    v44 = &type metadata for String;
    *(_QWORD *)&v43 = a6;
    *((_QWORD *)&v43 + 1) = a7;
    sub_8C4C(&v43, v42);
    swift_bridgeObjectRetain(a7);
    v26 = swift_isUniquelyReferenced_nonNull_native(v24);
    v41 = v24;
    sub_A7C8(v42, 0x72556E6F69746361, 0xE90000000000006CLL, v26);
    v24 = v41;
    swift_bridgeObjectRelease(0x8000000000000000);
  }
  LOBYTE(v43) = v18;
  v27 = Metrics.ClickActionType.rawValue.getter();
  v44 = &type metadata for String;
  *(_QWORD *)&v43 = v27;
  *((_QWORD *)&v43 + 1) = v28;
  sub_8C4C(&v43, v42);
  v29 = swift_isUniquelyReferenced_nonNull_native(v24);
  v41 = v24;
  sub_A7C8(v42, 0x79546E6F69746361, 0xEA00000000006570, v29);
  v30 = v41;
  swift_bridgeObjectRelease(0x8000000000000000);
  v31 = sub_5440(&qword_25ED48);
  v32 = swift_allocObject(v31, 40, 7);
  v35 = xmmword_1E0B70;
  *(_OWORD *)(v32 + 16) = xmmword_1E0B70;
  sub_7E3E4(v45);
  v33 = sub_123848();
  sub_7E498(v45);
  *(_QWORD *)(v32 + 32) = v33;
  v44 = (void *)sub_5440(&qword_266608);
  *(_QWORD *)&v43 = v32;
  sub_8C4C(&v43, v42);
  v34 = swift_isUniquelyReferenced_nonNull_native(v30);
  v41 = v30;
  sub_A7C8(v42, 0x6E6F697461636F6CLL, 0xE800000000000000, v34);
  swift_bridgeObjectRelease(0x8000000000000000);
  __asm { BR              X9 }
}

uint64_t sub_122C24()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (qword_25DB78 != -1)
    swift_once(&qword_25DB78, sub_2BEBC);
  v5 = type metadata accessor for MetricsData.Configuration(0);
  v6 = sub_7120(v5, (uint64_t)qword_288CE0);
  ((void (*)(_QWORD, _QWORD, uint64_t, unint64_t, uint64_t, uint64_t))static MetricsData.makeMetricsClickData(targetID:targetType:fields:configuration:))(*(_QWORD *)(v4 - 376), *(_QWORD *)(v4 - 368), 0x6954656C62627562, 0xE900000000000070, v0, v6);
  swift_bridgeObjectRelease(0xE900000000000070);
  swift_bridgeObjectRelease(v0);
  v7 = sub_5440(&qword_25DFA0);
  v8 = *(unsigned __int8 *)(v3 + 80);
  v9 = (v8 + 32) & ~v8;
  v10 = swift_allocObject(v7, v9 + *(_QWORD *)(v3 + 72), v8 | 7);
  *(_OWORD *)(v10 + 16) = *(_OWORD *)(v4 - 400);
  v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v10 + v9, v2, v1);
  v12 = *(_QWORD *)(v4 - 360);
  ScalarDictionary.init()(v11);
  ActionMetrics.init(data:custom:)(v10, v12);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v2, v1);
}

unint64_t static Metrics.actionDetails(assetInfo:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t inited;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v8;

  v2 = sub_5440(&qword_25DF90);
  inited = swift_initStackObject(v2, &v8);
  *(_OWORD *)(inited + 16) = xmmword_1E0B70;
  *(_QWORD *)(inited + 32) = 0x5050557369;
  *(_QWORD *)(inited + 40) = 0xE500000000000000;
  v4 = a1[3];
  v5 = a1[4];
  sub_5480(a1, v4);
  v6 = AssetInfo.supportsUnifiedProductPage.getter(v4, v5);
  *(_QWORD *)(inited + 72) = &type metadata for Bool;
  *(_BYTE *)(inited + 48) = v6 & 1;
  return sub_8FA0(inited);
}

uint64_t sub_122E40@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  uint64_t result;
  uint64_t v15[2];
  __int128 v16;
  __int128 v17;

  v2 = sub_5440(&qword_266620);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = ActionMetrics.data.getter(v3);
  v7 = *(_QWORD *)(v6 + 16);
  v8 = type metadata accessor for MetricsData(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (v7)
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v9 + 16))(v5, v6 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80)), v8);
    v10 = 0;
  }
  else
  {
    v10 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5, v10, 1, v8);
  swift_bridgeObjectRelease(v6);
  type metadata accessor for MetricsData(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v5, 1, v8) == 1)
  {
    sub_B414((uint64_t)v5, &qword_266620);
    v16 = 0u;
    v17 = 0u;
LABEL_13:
    result = sub_B414((uint64_t)&v16, &qword_25E0C0);
    goto LABEL_14;
  }
  v11 = MetricsData.fields.getter();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v5, v8);
  if (*(_QWORD *)(v11 + 16) && (v12 = sub_9F7C(0x79546E6F69746361, 0xEA00000000006570), (v13 & 1) != 0))
  {
    sub_93194(*(_QWORD *)(v11 + 56) + 32 * v12, (uint64_t)&v16);
  }
  else
  {
    v16 = 0u;
    v17 = 0u;
  }
  swift_bridgeObjectRelease(v11);
  if (!*((_QWORD *)&v17 + 1))
    goto LABEL_13;
  result = swift_dynamicCast(v15, &v16, (char *)&type metadata for Any + 8, &type metadata for String, 6);
  if ((result & 1) != 0)
    return Metrics.ClickActionType.init(rawValue:)(v15[0], v15[1], a1);
LABEL_14:
  *a1 = 34;
  return result;
}

uint64_t Metrics.ClickActionType.init(rawValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v5;
  uint64_t result;
  char v7;
  char v8;

  v5 = _findStringSwitchCaseWithCache(cases:string:cache:)(&off_2492A0, a1, a2, &unk_25DD68);
  result = swift_bridgeObjectRelease(a2);
  v7 = 0;
  v8 = 16;
  switch(v5)
  {
    case 0:
      goto LABEL_18;
    case 1:
      v7 = 1;
      goto LABEL_18;
    case 2:
      v7 = 2;
      goto LABEL_18;
    case 3:
      v7 = 3;
      goto LABEL_18;
    case 4:
      v7 = 4;
      goto LABEL_18;
    case 5:
      v7 = 5;
      goto LABEL_18;
    case 6:
      v7 = 6;
      goto LABEL_18;
    case 7:
      v7 = 7;
      goto LABEL_18;
    case 8:
      v7 = 8;
      goto LABEL_18;
    case 9:
      v7 = 9;
      goto LABEL_18;
    case 10:
      v7 = 10;
      goto LABEL_18;
    case 11:
      v7 = 11;
      goto LABEL_18;
    case 12:
      v7 = 12;
      goto LABEL_18;
    case 13:
      v7 = 13;
      goto LABEL_18;
    case 14:
      v7 = 14;
      goto LABEL_18;
    case 15:
      v7 = 15;
LABEL_18:
      v8 = v7;
      break;
    case 16:
      break;
    case 17:
      v8 = 17;
      break;
    case 18:
      v8 = 18;
      break;
    case 19:
      v8 = 19;
      break;
    case 20:
      v8 = 20;
      break;
    case 21:
      v8 = 21;
      break;
    case 22:
      v8 = 22;
      break;
    case 23:
      v8 = 23;
      break;
    case 24:
      v8 = 24;
      break;
    case 25:
      v8 = 25;
      break;
    case 26:
      v8 = 26;
      break;
    case 27:
      v8 = 27;
      break;
    case 28:
      v8 = 28;
      break;
    case 29:
      v8 = 29;
      break;
    case 30:
      v8 = 30;
      break;
    case 31:
      v8 = 31;
      break;
    case 32:
      v8 = 32;
      break;
    case 33:
      v8 = 33;
      break;
    default:
      v8 = 34;
      break;
  }
  *a3 = v8;
  return result;
}

uint64_t Metrics.ClickActionType.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1231C4 + 4 * byte_1EDE70[*v0]))(6579297, 0xE300000000000000);
}

uint64_t sub_1231C4()
{
  return 0x6E61576F54646461;
}

uint64_t sub_1231E8()
{
  return 0x6D61536F69647561;
}

uint64_t sub_123208()
{
  return 1801675106;
}

uint64_t sub_123218()
{
  return 7959906;
}

uint64_t sub_123224()
{
  return 0x6974696E49797562;
}

uint64_t sub_123248()
{
  return 0x6F446C65636E6163;
}

uint64_t sub_12326C()
{
  return 0x657461657263;
}

uint64_t sub_123280()
{
  return 0x6574656C6564;
}

uint64_t sub_123294()
{
  return 0x676F6C616964;
}

uint64_t sub_1232A8()
{
  return 0x7373696D736964;
}

uint64_t sub_1232C0()
{
  return 0x64616F6C6E776F64;
}

uint64_t sub_1232D8()
{
  return 0x657469726F766166;
}

uint64_t sub_1232F0()
{
  return 0x7375636F66;
}

uint64_t sub_123304()
{
  return 1702125928;
}

uint64_t sub_123314()
{
  return 1702260588;
}

uint64_t sub_123324()
{
  return 1701998445;
}

uint64_t sub_123334()
{
  return 1702260589;
}

uint64_t sub_123348()
{
  return 0x657461676976616ELL;
}

uint64_t sub_123360()
{
  return 1954047342;
}

uint64_t sub_123370()
{
  return 1852141679;
}

uint64_t sub_123380()
{
  return 0x6573756170;
}

uint64_t sub_123394()
{
  return 2036427888;
}

uint64_t sub_1233A4()
{
  return 1702125938;
}

uint64_t sub_1233B8()
{
  return 0x706D615364616572;
}

uint64_t sub_1233D4()
{
  return 0x64616F6C6572;
}

unint64_t sub_1233E8()
{
  return 0xD000000000000014;
}

uint64_t sub_123404()
{
  return 0x7463656C6573;
}

uint64_t sub_123418()
{
  return 0x6572616873;
}

uint64_t sub_12342C()
{
  return 0x7465656873;
}

uint64_t sub_123440()
{
  return 1953656691;
}

uint64_t sub_123450()
{
  return 1886352499;
}

uint64_t sub_123460()
{
  return 0x69726F7661666E75;
}

uint64_t sub_123480()
{
  return 0x657461647075;
}

uint64_t sub_123494()
{
  return sub_C5D68();
}

Swift::Int sub_1234A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[9];

  Hasher.init(_seed:)(v4, 0);
  v0 = Metrics.ClickActionType.rawValue.getter();
  v2 = v1;
  String.hash(into:)(v4, v0, v1);
  swift_bridgeObjectRelease(v2);
  return Hasher._finalize()();
}

uint64_t sub_123504(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = Metrics.ClickActionType.rawValue.getter();
  v4 = v3;
  String.hash(into:)(a1, v2, v3);
  return swift_bridgeObjectRelease(v4);
}

Swift::Int sub_123554(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[9];

  Hasher.init(_seed:)(v5, a1);
  v1 = Metrics.ClickActionType.rawValue.getter();
  v3 = v2;
  String.hash(into:)(v5, v1, v2);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_1235B4@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  return Metrics.ClickActionType.init(rawValue:)(*a1, a1[1], a2);
}

uint64_t sub_1235C0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = Metrics.ClickActionType.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t Metrics.TargetType.init(rawValue:)@<X0>(Swift::String string@<0:X0, 8:X1>, char *a2@<X8>)
{
  void *object;
  Swift::String v3;
  unint64_t v5;
  uint64_t result;
  char v7;

  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_24A030, v3);
  result = swift_bridgeObjectRelease(object);
  v7 = 6;
  if (v5 < 6)
    v7 = v5;
  *a2 = v7;
  return result;
}

uint64_t Metrics.TargetType.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_123668 + 4 * byte_1EDE92[*v0]))(0x6E6F74747562, 0xE600000000000000);
}

uint64_t sub_123668()
{
  return 0x6954656C62627562;
}

uint64_t sub_123684()
{
  return 0x7265746C6966;
}

uint64_t sub_123694()
{
  return 1802398060;
}

uint64_t sub_1236A4()
{
  return 0x70756B636F6CLL;
}

uint64_t sub_1236B4()
{
  return 0x77656976657270;
}

void sub_1236CC(char *a1)
{
  sub_C6344(*a1);
}

void sub_1236D8()
{
  char *v0;

  sub_125224(*v0);
}

void sub_1236E0()
{
  __asm { BR              X10 }
}

uint64_t sub_123718(uint64_t a1)
{
  String.hash(into:)(a1, 0x6954656C62627562, 0xE900000000000070);
  return swift_bridgeObjectRelease(0xE900000000000070);
}

void sub_123790(uint64_t a1)
{
  char *v1;

  sub_125E48(a1, *v1);
}

uint64_t sub_123798@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  return Metrics.TargetType.init(rawValue:)(*a1, a2);
}

uint64_t sub_1237A4()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1237D0 + 4 * byte_1EDE9E[*v0]))();
}

void sub_1237D0(_QWORD *a1@<X8>)
{
  *a1 = 0x6954656C62627562;
  a1[1] = 0xE900000000000070;
}

void sub_1237F0(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = 0x7265746C6966;
  a1[1] = v1;
}

void sub_123804(_QWORD *a1@<X8>)
{
  *a1 = 1802398060;
  a1[1] = 0xE400000000000000;
}

void sub_123818(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = 0x70756B636F6CLL;
  a1[1] = v1;
}

void sub_12382C(_QWORD *a1@<X8>)
{
  *a1 = 0x77656976657270;
  a1[1] = 0xE700000000000000;
}

unint64_t sub_123848()
{
  _OWORD *v0;
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  _QWORD *v14;
  void *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  void *v21;
  Class isa;
  id v23;
  id v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  id v33;
  uint64_t v34;
  _OWORD v35[11];

  v1 = v0[9];
  v35[8] = v0[8];
  v35[9] = v1;
  v35[10] = v0[10];
  v2 = v0[5];
  v35[4] = v0[4];
  v35[5] = v2;
  v3 = v0[7];
  v35[6] = v0[6];
  v35[7] = v3;
  v4 = v0[1];
  v35[0] = *v0;
  v35[1] = v4;
  v5 = v0[3];
  v35[2] = v0[2];
  v35[3] = v5;
  v6 = type metadata accessor for JSONEncoder(0);
  swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
  v7 = JSONEncoder.init()();
  v8 = sub_7E5F0();
  v18 = dispatch thunk of JSONEncoder.encode<A>(_:)(v35, &type metadata for Metrics.Location, v8);
  v20 = v19;
  swift_release(v7);
  v21 = (void *)objc_opt_self(NSJSONSerialization);
  isa = Data._bridgeToObjectiveC()().super.isa;
  v33 = 0;
  v23 = objc_msgSend(v21, "JSONObjectWithData:options:error:", isa, 0, &v33);

  v24 = v33;
  if (v23)
  {
    v25 = v33;
    _bridgeAnyObjectToAny(_:)(&v33, v23);
    swift_unknownObjectRelease(v23);
    v26 = sub_5440(&qword_266630);
    if ((swift_dynamicCast(&v32, &v33, (char *)&type metadata for Any + 8, v26, 6) & 1) != 0)
    {
      v27 = v32;
      v17 = sub_157890(v32);
      swift_bridgeObjectRelease(v27);
    }
    else
    {
      v17 = sub_8FA0((uint64_t)&_swiftEmptyArrayStorage);
    }
    sub_124488(v18, v20);
  }
  else
  {
    v28 = v33;
    v29 = _convertNSErrorToError(_:)(v24);

    swift_willThrow(v30);
    sub_124488(v18, v20);
    if (qword_25DAF0 != -1)
      swift_once(&qword_25DAF0, sub_71E0);
    v9 = type metadata accessor for Logger(0);
    sub_7120(v9, (uint64_t)qword_25DEA0);
    swift_errorRetain(v29);
    v10 = swift_errorRetain(v29);
    v11 = Logger.logObject.getter(v10);
    v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc(12, -1);
      v14 = (_QWORD *)swift_slowAlloc(8, -1);
      *(_DWORD *)v13 = 138412290;
      swift_errorRetain(v29);
      v15 = (void *)_swift_stdlib_bridgeErrorToNSError(v29);
      v33 = v15;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, &v34, v13 + 4, v13 + 12);
      *v14 = v15;
      swift_errorRelease(v29);
      swift_errorRelease(v29);
      _os_log_impl(&dword_0, v11, v12, "Failed to convert metrics model into MetricsFields: %@", v13, 0xCu);
      v16 = sub_5440(&qword_25E368);
      swift_arrayDestroy(v14, 1, v16);
      swift_slowDealloc(v14, -1, -1);
      swift_slowDealloc(v13, -1, -1);
    }
    else
    {
      swift_errorRelease(v29);
      swift_errorRelease(v29);
    }

    v17 = sub_8FA0((uint64_t)&_swiftEmptyArrayStorage);
    swift_errorRelease(v29);
  }
  return v17;
}

unint64_t sub_123BD4()
{
  uint64_t v0;
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  _QWORD *v13;
  void *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  void *v20;
  Class isa;
  id v22;
  id v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  id v32;
  uint64_t v33;
  _OWORD v34[9];
  uint64_t v35;

  v1 = *(_OWORD *)(v0 + 112);
  v34[6] = *(_OWORD *)(v0 + 96);
  v34[7] = v1;
  v34[8] = *(_OWORD *)(v0 + 128);
  v35 = *(_QWORD *)(v0 + 144);
  v2 = *(_OWORD *)(v0 + 48);
  v34[2] = *(_OWORD *)(v0 + 32);
  v34[3] = v2;
  v3 = *(_OWORD *)(v0 + 80);
  v34[4] = *(_OWORD *)(v0 + 64);
  v34[5] = v3;
  v4 = *(_OWORD *)(v0 + 16);
  v34[0] = *(_OWORD *)v0;
  v34[1] = v4;
  v5 = type metadata accessor for JSONEncoder(0);
  swift_allocObject(v5, *(unsigned int *)(v5 + 48), *(unsigned __int16 *)(v5 + 52));
  v6 = JSONEncoder.init()();
  v7 = sub_124444();
  v17 = dispatch thunk of JSONEncoder.encode<A>(_:)(v34, &type metadata for Metrics.Impression, v7);
  v19 = v18;
  swift_release(v6);
  v20 = (void *)objc_opt_self(NSJSONSerialization);
  isa = Data._bridgeToObjectiveC()().super.isa;
  v32 = 0;
  v22 = objc_msgSend(v20, "JSONObjectWithData:options:error:", isa, 0, &v32);

  v23 = v32;
  if (v22)
  {
    v24 = v32;
    _bridgeAnyObjectToAny(_:)(&v32, v22);
    swift_unknownObjectRelease(v22);
    v25 = sub_5440(&qword_266630);
    if ((swift_dynamicCast(&v31, &v32, (char *)&type metadata for Any + 8, v25, 6) & 1) != 0)
    {
      v26 = v31;
      v16 = sub_157890(v31);
      swift_bridgeObjectRelease(v26);
    }
    else
    {
      v16 = sub_8FA0((uint64_t)_swiftEmptyArrayStorage);
    }
    sub_124488(v17, v19);
  }
  else
  {
    v27 = v32;
    v28 = _convertNSErrorToError(_:)(v23);

    swift_willThrow(v29);
    sub_124488(v17, v19);
    if (qword_25DAF0 != -1)
      swift_once(&qword_25DAF0, sub_71E0);
    v8 = type metadata accessor for Logger(0);
    sub_7120(v8, (uint64_t)qword_25DEA0);
    swift_errorRetain(v28);
    v9 = swift_errorRetain(v28);
    v10 = Logger.logObject.getter(v9);
    v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc(12, -1);
      v13 = (_QWORD *)swift_slowAlloc(8, -1);
      *(_DWORD *)v12 = 138412290;
      swift_errorRetain(v28);
      v14 = (void *)_swift_stdlib_bridgeErrorToNSError(v28);
      v32 = v14;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, &v33, v12 + 4, v12 + 12);
      *v13 = v14;
      swift_errorRelease(v28);
      swift_errorRelease(v28);
      _os_log_impl(&dword_0, v10, v11, "Failed to convert metrics model into MetricsFields: %@", v12, 0xCu);
      v15 = sub_5440(&qword_25E368);
      swift_arrayDestroy(v13, 1, v15);
      swift_slowDealloc(v13, -1, -1);
      swift_slowDealloc(v12, -1, -1);
    }
    else
    {
      swift_errorRelease(v28);
      swift_errorRelease(v28);
    }

    v16 = sub_8FA0((uint64_t)_swiftEmptyArrayStorage);
    swift_errorRelease(v28);
  }
  return v16;
}

unint64_t static Metrics.actionDetails(with:)(double a1)
{
  uint64_t v2;
  uint64_t inited;
  uint64_t v5;

  v2 = sub_5440(&qword_25DF90);
  inited = swift_initStackObject(v2, &v5);
  *(_OWORD *)(inited + 16) = xmmword_1E0B70;
  *(_QWORD *)(inited + 32) = 0x676E69746172;
  *(_QWORD *)(inited + 40) = 0xE600000000000000;
  *(_QWORD *)(inited + 72) = &type metadata for Double;
  *(double *)(inited + 48) = a1;
  return sub_8FA0(inited);
}

unint64_t _s7BooksUI7MetricsO13actionDetails3for9assetInfoSDySSypGSgAC15ClickActionTypeO_14BookFoundation05AssetH0_ptFZ_0(_BYTE *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  char v7;
  uint64_t v9;
  uint64_t inited;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  id v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  _BYTE v23[136];

  v23[135] = *a1;
  v3 = Metrics.ClickActionType.rawValue.getter();
  if (v3 == 7959906 && v4 == 0xE300000000000000)
  {
    swift_bridgeObjectRelease(0xE300000000000000);
  }
  else
  {
    v6 = v4;
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, 7959906, 0xE300000000000000, 0);
    swift_bridgeObjectRelease(v6);
    if ((v7 & 1) == 0)
      return 0;
  }
  v9 = sub_5440(&qword_25DF90);
  inited = swift_initStackObject(v9, v23);
  *(_OWORD *)(inited + 16) = xmmword_1E1CE0;
  *(_QWORD *)(inited + 32) = 0x6D61726150797562;
  *(_QWORD *)(inited + 40) = 0xE900000000000073;
  v11 = a2[3];
  v12 = a2[4];
  sub_5480(a2, v11);
  v13 = (void *)ContentInfo.storeData.getter(v11, *(_QWORD *)(v12 + 8));
  if (!v13
    || (v14 = v13, v15 = objc_msgSend(v13, "buyParams"), v14, !v15))
  {
    v19 = (uint64_t *)(inited + 48);
    *(_QWORD *)(inited + 72) = &type metadata for String;
    goto LABEL_13;
  }
  v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
  v18 = v17;

  v19 = (uint64_t *)(inited + 48);
  *(_QWORD *)(inited + 72) = &type metadata for String;
  if (!v18)
  {
LABEL_13:
    *v19 = 0;
    v18 = 0xE000000000000000;
    goto LABEL_14;
  }
  *v19 = v16;
LABEL_14:
  *(_QWORD *)(inited + 56) = v18;
  *(_QWORD *)(inited + 80) = 0x5050557369;
  *(_QWORD *)(inited + 88) = 0xE500000000000000;
  v20 = a2[3];
  v21 = a2[4];
  sub_5480(a2, v20);
  v22 = AssetInfo.supportsUnifiedProductPage.getter(v20, v21);
  *(_QWORD *)(inited + 120) = &type metadata for Bool;
  *(_BYTE *)(inited + 96) = v22 & 1;
  return sub_8FA0(inited);
}

unint64_t sub_124190()
{
  unint64_t result;

  result = qword_266610;
  if (!qword_266610)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Metrics.ClickActionType, &type metadata for Metrics.ClickActionType);
    atomic_store(result, (unint64_t *)&qword_266610);
  }
  return result;
}

unint64_t sub_1241D8()
{
  unint64_t result;

  result = qword_266618;
  if (!qword_266618)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Metrics.TargetType, &type metadata for Metrics.TargetType);
    atomic_store(result, (unint64_t *)&qword_266618);
  }
  return result;
}

uint64_t _s15ClickActionTypeOwet(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xDF)
    goto LABEL_17;
  if (a2 + 33 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 33) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 33;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 33;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 33;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x22;
  v8 = v6 - 34;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s15ClickActionTypeOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 33 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 33) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xDF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xDE)
    return ((uint64_t (*)(void))((char *)&loc_1242F8 + 4 * byte_1EDEA9[v4]))();
  *a1 = a2 + 33;
  return ((uint64_t (*)(void))((char *)sub_12432C + 4 * byte_1EDEA4[v4]))();
}

uint64_t sub_12432C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_124334(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x12433CLL);
  return result;
}

uint64_t sub_124348(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x124350);
  *(_BYTE *)result = a2 + 33;
  return result;
}

uint64_t sub_124354(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_12435C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Metrics.ClickActionType()
{
  return &type metadata for Metrics.ClickActionType;
}

uint64_t _s10TargetTypeOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_1243C4 + 4 * byte_1EDEB3[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_1243F8 + 4 * byte_1EDEAE[v4]))();
}

uint64_t sub_1243F8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_124400(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x124408);
  return result;
}

uint64_t sub_124414(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x12441CLL);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_124420(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_124428(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Metrics.TargetType()
{
  return &type metadata for Metrics.TargetType;
}

unint64_t sub_124444()
{
  unint64_t result;

  result = qword_266628;
  if (!qword_266628)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Metrics.Impression, &type metadata for Metrics.Impression);
    atomic_store(result, (unint64_t *)&qword_266628);
  }
  return result;
}

uint64_t sub_124488(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release(result);
  }
  return swift_release(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t DelayActionImplementation.perform(_:asPartOf:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v18;

  v2 = sub_5440(&qword_25E2E8);
  __chkstk_darwin(v2);
  v4 = (char *)&v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DelayAction(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  __chkstk_darwin(v5);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_124858(a1, (uint64_t)v8);
  v9 = *(unsigned __int8 *)(v6 + 80);
  v10 = (v9 + 16) & ~v9;
  v11 = swift_allocObject(&unk_253AE0, v10 + v7, v9 | 7);
  sub_1248A0((uint64_t)v8, v11 + v10);
  sub_5440(&qword_263F00);
  v13 = Promise.__allocating_init()(v12);
  v14 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v4, 1, 1, v14);
  v15 = (_QWORD *)swift_allocObject(&unk_253B08, 56, 7);
  v15[2] = 0;
  v15[3] = 0;
  v15[4] = &unk_266640;
  v15[5] = v11;
  v15[6] = v13;
  swift_retain(v13);
  v16 = sub_C3A3C((uint64_t)v4, (uint64_t)&unk_263F10, (uint64_t)v15);
  swift_release(v16);
  return v13;
}

uint64_t sub_124630(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[2] = a1;
  v2[3] = a2;
  v3 = type metadata accessor for ContinuousClock(0);
  v2[4] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[5] = v4;
  v2[6] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_124690, 0, 0);
}

uint64_t sub_124690()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t, uint64_t, char);

  v1 = *(_QWORD *)(v0 + 24);
  v2 = type metadata accessor for DelayAction(0);
  v3 = static Duration.seconds(_:)(*(double *)(v1 + *(int *)(v2 + 20)));
  v5 = v4;
  ContinuousClock.init()();
  v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char))((char *)&dword_266650 + dword_266650);
  v6 = (_QWORD *)swift_task_alloc(unk_266654);
  *(_QWORD *)(v0 + 56) = v6;
  *v6 = v0;
  v6[1] = sub_124734;
  return v8(v3, v5, 0, 0, 1);
}

uint64_t sub_124734()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 48);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 56);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 32);
  v5 = *(_QWORD *)(*(_QWORD *)v1 + 40);
  *(_QWORD *)(*(_QWORD *)v1 + 64) = v0;
  swift_task_dealloc(v2);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
  if (v0)
    v6 = sub_124824;
  else
    v6 = sub_1247B4;
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_1247B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 48);
  v2 = *(_QWORD *)(v0 + 16);
  v3 = enum case for ActionOutcome.performed(_:);
  v4 = type metadata accessor for ActionOutcome(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 104))(v2, v3, v4);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_124824()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 48));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_124858(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DelayAction(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1248A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DelayAction(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1248E4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for DelayAction(0) - 8) + 80);
  v5 = v1 + ((v4 + 16) & ~v4);
  v6 = (_QWORD *)swift_task_alloc(dword_26663C);
  *(_QWORD *)(v2 + 16) = v6;
  *v6 = v2;
  v6[1] = sub_10F84;
  return sub_124630(a1, v5);
}

uint64_t sub_124954(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v18;

  v2 = sub_5440(&qword_25E2E8);
  __chkstk_darwin(v2);
  v4 = (char *)&v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DelayAction(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  __chkstk_darwin(v5);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_124858(a1, (uint64_t)v8);
  v9 = *(unsigned __int8 *)(v6 + 80);
  v10 = (v9 + 16) & ~v9;
  v11 = swift_allocObject(&unk_253B50, v10 + v7, v9 | 7);
  sub_1248A0((uint64_t)v8, v11 + v10);
  sub_5440(&qword_263F00);
  v13 = Promise.__allocating_init()(v12);
  v14 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v4, 1, 1, v14);
  v15 = (_QWORD *)swift_allocObject(&unk_253B78, 56, 7);
  v15[2] = 0;
  v15[3] = 0;
  v15[4] = &unk_266648;
  v15[5] = v11;
  v15[6] = v13;
  swift_retain(v13);
  v16 = sub_C3A3C((uint64_t)v4, (uint64_t)&unk_263F28, (uint64_t)v15);
  swift_release(v16);
  return v13;
}

uint64_t sub_124AB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;

  *(_QWORD *)(v6 + 56) = v5;
  v12 = type metadata accessor for ContinuousClock.Instant(0);
  *(_QWORD *)(v6 + 64) = v12;
  v13 = *(_QWORD *)(v12 - 8);
  *(_QWORD *)(v6 + 72) = v13;
  v14 = (*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v6 + 80) = swift_task_alloc(v14);
  *(_QWORD *)(v6 + 88) = swift_task_alloc(v14);
  *(_QWORD *)(v6 + 40) = a1;
  *(_QWORD *)(v6 + 48) = a2;
  *(_QWORD *)(v6 + 16) = a3;
  *(_QWORD *)(v6 + 24) = a4;
  *(_BYTE *)(v6 + 32) = a5 & 1;
  return swift_task_switch(sub_124B5C, 0, 0);
}

uint64_t sub_124B5C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  _QWORD *v8;

  v1 = v0[10];
  v2 = v0[8];
  v3 = v0[9];
  v4 = type metadata accessor for ContinuousClock(0);
  v5 = sub_6FD0(&qword_266658, (uint64_t (*)(uint64_t))&type metadata accessor for ContinuousClock, (uint64_t)&protocol conformance descriptor for ContinuousClock);
  dispatch thunk of Clock.now.getter(v4, v5);
  v6 = sub_6FD0(&qword_266660, (uint64_t (*)(uint64_t))&type metadata accessor for ContinuousClock.Instant, (uint64_t)&protocol conformance descriptor for ContinuousClock.Instant);
  dispatch thunk of InstantProtocol.advanced(by:)(v0 + 5, v2, v6);
  v7 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v0[12] = v7;
  v7(v1, v2);
  v8 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of Clock.sleep(until:tolerance:)[1]);
  v0[13] = v8;
  *v8 = v0;
  v8[1] = sub_124C74;
  return dispatch thunk of Clock.sleep(until:tolerance:)(v0[11], v0 + 2, v4, v5);
}

uint64_t sub_124C74()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v3 = *(void (**)(uint64_t, uint64_t))(*v1 + 96);
  v2 = *(_QWORD *)(*v1 + 104);
  v4 = *(_QWORD *)(*v1 + 88);
  v5 = *(_QWORD *)(*v1 + 64);
  v6 = *v1;
  *(_QWORD *)(v6 + 112) = v0;
  swift_task_dealloc(v2);
  v3(v4, v5);
  if (v0)
    return swift_task_switch(sub_124D20, 0, 0);
  v8 = *(_QWORD *)(v6 + 80);
  swift_task_dealloc(*(_QWORD *)(v6 + 88));
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v6 + 8))();
}

uint64_t sub_124D20()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 80);
  swift_task_dealloc(*(_QWORD *)(v0 + 88));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_124D60()
{
  return sub_6FD0(&qword_265FB0, type metadata accessor for DelayAction, (uint64_t)&protocol conformance descriptor for DelayAction);
}

ValueMetadata *type metadata accessor for DelayActionImplementation()
{
  return &type metadata for DelayActionImplementation;
}

uint64_t sub_124DA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(type metadata accessor for DelayAction(0) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 16) & ~v2;
  v4 = v3 + *(_QWORD *)(v1 + 64);
  v5 = v2 | 7;
  v6 = v0 + v3;
  v7 = type metadata accessor for ActionMetrics(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  return swift_deallocObject(v0, v4, v5);
}

uint64_t sub_124E10(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for DelayAction(0) - 8) + 80);
  v5 = v1 + ((v4 + 16) & ~v4);
  v6 = (_QWORD *)swift_task_alloc(dword_26663C);
  *(_QWORD *)(v2 + 16) = v6;
  *v6 = v2;
  v6[1] = sub_108B0;
  return sub_124630(a1, v5);
}

void sub_124E84(char a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, 0);
  __asm { BR              X10 }
}

Swift::Int sub_124ED4()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x656372756F736572, 0xE800000000000000);
  swift_bridgeObjectRelease(0xE800000000000000);
  return Hasher._finalize()();
}

void sub_124F88(char a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, 0);
  __asm { BR              X10 }
}

Swift::Int sub_124FDC()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0xD000000000000012, 0x80000000001F94E0);
  swift_bridgeObjectRelease(0x80000000001F94E0);
  return Hasher._finalize()();
}

void sub_12505C(char a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, 0);
  __asm { BR              X10 }
}

Swift::Int sub_1250B4()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x69576E6F74747562, 0xEF6567616D496874);
  swift_bridgeObjectRelease(0xEF6567616D496874);
  return Hasher._finalize()();
}

void sub_125160(char a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, 0);
  __asm { BR              X10 }
}

Swift::Int sub_1251A8()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x64726177726F66, 0xE700000000000000);
  swift_bridgeObjectRelease(0xE700000000000000);
  return Hasher._finalize()();
}

void sub_125224(char a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, 0);
  __asm { BR              X10 }
}

Swift::Int sub_125270()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x6954656C62627562, 0xE900000000000070);
  swift_bridgeObjectRelease(0xE900000000000070);
  return Hasher._finalize()();
}

Swift::Int sub_1252FC(char a1)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  Hasher.init(_seed:)(v5, 0);
  if (a1)
  {
    v2 = 0xD000000000000012;
    if (a1 == 1)
      v3 = 0x80000000001F9650;
    else
      v3 = 0x80000000001F9670;
  }
  else
  {
    v3 = 0xE400000000000000;
    v2 = 1953394534;
  }
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

void sub_12539C(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1253D8(uint64_t a1)
{
  uint64_t v1;

  String.hash(into:)(a1, 0x7265746C6966, v1);
  return swift_bridgeObjectRelease(v1);
}

void sub_125488(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1254CC(uint64_t a1)
{
  String.hash(into:)(a1, 0xD000000000000012, 0x80000000001F94E0);
  return swift_bridgeObjectRelease(0x80000000001F94E0);
}

void sub_125538(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_125578(uint64_t a1)
{
  String.hash(into:)(a1, 0x656372756F736572, 0xE800000000000000);
  return swift_bridgeObjectRelease(0xE800000000000000);
}

void sub_125618(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_125654(uint64_t a1)
{
  String.hash(into:)(a1, 0x656C746974627573, 0xE800000000000000);
  return swift_bridgeObjectRelease(0xE800000000000000);
}

void sub_125720(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_125768(uint64_t a1)
{
  String.hash(into:)(a1, 0x69576E6F74747562, 0xEF6567616D496874);
  return swift_bridgeObjectRelease(0xEF6567616D496874);
}

void sub_125800(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_125844(uint64_t a1)
{
  String.hash(into:)(a1, 0x72616D6B63656863, 0xE90000000000006BLL);
  return swift_bridgeObjectRelease(0xE90000000000006BLL);
}

void sub_1258EC(uint64_t a1, char a2)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X10 }
}

Swift::Int sub_125940()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x72616D6B63656863, 0xE90000000000006BLL);
  swift_bridgeObjectRelease(0xE90000000000006BLL);
  return Hasher._finalize()();
}

void sub_125A04(uint64_t a1, char a2)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X10 }
}

Swift::Int sub_125A58()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x69576E6F74747562, 0xEF6567616D496874);
  swift_bridgeObjectRelease(0xEF6567616D496874);
  return Hasher._finalize()();
}

void sub_125B04(uint64_t a1, char a2)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X10 }
}

Swift::Int sub_125B4C()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x656C746974627573, 0xE800000000000000);
  swift_bridgeObjectRelease(0xE800000000000000);
  return Hasher._finalize()();
}

void sub_125C2C(uint64_t a1, char a2)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X10 }
}

Swift::Int sub_125C78()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x656372756F736572, 0xE800000000000000);
  swift_bridgeObjectRelease(0xE800000000000000);
  return Hasher._finalize()();
}

void sub_125D2C(uint64_t a1, char a2)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X10 }
}

Swift::Int sub_125D7C()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0xD000000000000012, 0x80000000001F94E0);
  swift_bridgeObjectRelease(0x80000000001F94E0);
  return Hasher._finalize()();
}

Swift::Int sub_125DFC(uint64_t a1, char a2)
{
  _QWORD v4[9];

  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(qword_1EE488[a2]);
  return Hasher._finalize()();
}

void sub_125E48(uint64_t a1, char a2)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X10 }
}

Swift::Int sub_125E90()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x6954656C62627562, 0xE900000000000070);
  swift_bridgeObjectRelease(0xE900000000000070);
  return Hasher._finalize()();
}

void sub_125F1C(uint64_t a1, char a2)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X10 }
}

Swift::Int sub_125F64()
{
  uint64_t v0;
  uint64_t v2;

  String.hash(into:)(&v2, 0x6E6D756C6F63, v0);
  swift_bridgeObjectRelease(v0);
  return Hasher._finalize()();
}

void sub_125FFC(uint64_t a1, char a2)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X10 }
}

Swift::Int sub_126040()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x64726177726F66, 0xE700000000000000);
  swift_bridgeObjectRelease(0xE700000000000000);
  return Hasher._finalize()();
}

Swift::Int sub_1260BC(uint64_t a1, char a2)
{
  unint64_t v3;
  unint64_t v4;
  _QWORD v6[9];

  Hasher.init(_seed:)(v6, a1);
  if (a2)
  {
    v3 = 0xD000000000000012;
    if (a2 == 1)
      v4 = 0x80000000001F9650;
    else
      v4 = 0x80000000001F9670;
  }
  else
  {
    v4 = 0xE400000000000000;
    v3 = 1953394534;
  }
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

void sub_126158(char *a1)
{
  sub_C5B90(*a1);
}

void sub_126164()
{
  unsigned __int8 *v0;
  uint64_t v1;
  _QWORD v2[9];

  v1 = *v0;
  Hasher.init(_seed:)(v2, 0);
  __asm { BR              X9 }
}

Swift::Int sub_1261AC()
{
  uint64_t v1;

  String.hash(into:)(&v1, 1702521203, 0xE400000000000000);
  swift_bridgeObjectRelease(0xE400000000000000);
  return Hasher._finalize()();
}

void sub_12620C()
{
  __asm { BR              X10 }
}

uint64_t sub_126244(uint64_t a1)
{
  String.hash(into:)(a1, 1702521203, 0xE400000000000000);
  return swift_bridgeObjectRelease(0xE400000000000000);
}

void sub_126290(uint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t v2;
  _QWORD v3[9];

  v2 = *v1;
  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X9 }
}

Swift::Int sub_1262D4()
{
  uint64_t v1;

  String.hash(into:)(&v1, 1702521203, 0xE400000000000000);
  swift_bridgeObjectRelease(0xE400000000000000);
  return Hasher._finalize()();
}

unint64_t sub_126334@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_128340(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_126360()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_12638C + 4 * byte_1EE1A4[*v0]))();
}

void sub_12638C(_QWORD *a1@<X8>)
{
  *a1 = 1702521203;
  a1[1] = 0xE400000000000000;
}

void sub_1263A0(_QWORD *a1@<X8>)
{
  *a1 = 0x6E6769736564;
  a1[1] = 0xE600000000000000;
}

void sub_1263B8(_QWORD *a1@<X8>)
{
  *a1 = 0x746867696577;
  a1[1] = 0xE600000000000000;
}

uint64_t sub_1263D0()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1263FC + 4 * byte_1EE1A8[*v0]))(0x656C797473, 0xE500000000000000);
}

uint64_t sub_1263FC()
{
  return 1702521203;
}

uint64_t sub_12640C()
{
  return 0x6E6769736564;
}

uint64_t sub_126420()
{
  return 0x746867696577;
}

unint64_t sub_126434@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_128340(a1);
  *a2 = result;
  return result;
}

uint64_t sub_126458(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_126C9C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_126480(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_126C9C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1264A8(char *a1, unsigned __int8 *a2)
{
  return sub_C5AA0(*a1, *a2);
}

Swift::Int sub_1264B4()
{
  char *v0;

  return sub_1252FC(*v0);
}

uint64_t sub_1264BC(uint64_t a1)
{
  _BYTE *v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = 0x80000000001F9650;
  if (*v1 != 1)
    v2 = 0x80000000001F9670;
  if (*v1)
    v3 = 0xD000000000000012;
  else
    v3 = 1953394534;
  if (*v1)
    v4 = v2;
  else
    v4 = 0xE400000000000000;
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v4);
}

Swift::Int sub_126538(uint64_t a1)
{
  char *v1;

  return sub_1260BC(a1, *v1);
}

unint64_t sub_126540@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_128388(*a1);
  *a2 = result;
  return result;
}

void sub_12656C(unint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;

  v2 = *v1;
  v3 = 0xE400000000000000;
  v4 = 0x80000000001F9650;
  if (v2 != 1)
    v4 = 0x80000000001F9670;
  v5 = v2 == 0;
  if (*v1)
    v6 = 0xD000000000000012;
  else
    v6 = 1953394534;
  if (!v5)
    v3 = v4;
  *a1 = v6;
  a1[1] = v3;
}

uint64_t sub_1265CC()
{
  _BYTE *v0;

  if (*v0)
    return 0xD000000000000012;
  else
    return 1953394534;
}

unint64_t sub_126628@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_128388(a1);
  *a2 = result;
  return result;
}

uint64_t sub_12664C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_126C58();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_126674(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_126C58();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t FontSpec.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  char *v20;
  uint64_t v21;
  void (*v22)(void);
  char *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v36;
  char v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t *v62;
  _QWORD *v63;
  double v64;
  unsigned int v65;
  char v66;
  char v67;
  char v68;

  v63 = a1;
  v55 = a2;
  v2 = sub_5440(&qword_25E778);
  v3 = __chkstk_darwin(v2);
  v53 = (uint64_t)&v49 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v54 = (uint64_t)&v49 - v5;
  v6 = type metadata accessor for Font.TextStyle(0);
  v51 = *(_QWORD *)(v6 - 8);
  v52 = v6;
  __chkstk_darwin(v6);
  v56 = (uint64_t)&v49 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_5440(&qword_25FE08);
  __chkstk_darwin(v8);
  v58 = (uint64_t)&v49 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = sub_5440(&qword_266668);
  v57 = *(_QWORD *)(v59 - 8);
  __chkstk_darwin(v59);
  v11 = (char *)&v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_5440(&qword_266670);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v49 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for FontSpec(0);
  v17 = __chkstk_darwin(v16);
  v19 = (uint64_t *)((char *)&v49 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  v20 = (char *)v19 + *(int *)(v17 + 20);
  v21 = type metadata accessor for DynamicTypeSize(0);
  v22 = *(void (**)(void))(*(_QWORD *)(v21 - 8) + 56);
  v60 = (uint64_t)v20;
  v23 = v20;
  v24 = v63;
  ((void (*)(char *, uint64_t, uint64_t, uint64_t))v22)(v23, 1, 1, v21);
  v61 = (char *)v19 + *(int *)(v16 + 24);
  v22();
  v25 = v24[3];
  v26 = v24[4];
  sub_5480(v24, v25);
  v27 = sub_126C58();
  v28 = v62;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&_s10CodingKeysON, &_s10CodingKeysON, v27, v25, v26);
  if (v28)
  {
    v30 = v60;
    v29 = (uint64_t)v61;
    _s7BooksUI13AnyPagedFrameVwxx_0(v24);
    sub_B414(v30, &qword_25E778);
    return sub_B414(v29, &qword_25E778);
  }
  else
  {
    v62 = v19;
    v31 = v59;
    v68 = 0;
    v32 = sub_126C9C();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(&_s10CodingKeysO14FontCodingKeysON, &v68, v12, &_s10CodingKeysO14FontCodingKeysON, v32);
    v33 = v12;
    v34 = v15;
    sub_126CE0(v58);
    v36 = v13;
    v50 = sub_127B5C();
    v65 = v37 & 1;
    v38 = v11;
    v67 = 1;
    v39 = v31;
    if ((KeyedDecodingContainer.contains(_:)(&v67, v31) & 1) != 0)
    {
      v66 = 1;
      v40 = sub_127FB4();
      KeyedDecodingContainer.decode<A>(_:forKey:)(&v64, &type metadata for CGFloat, &v66, v31, &type metadata for CGFloat, v40);
      v42 = v60;
      v41 = (uint64_t)v61;
      v49 = v11;
      v44 = static Font.system(size:weight:design:)(v50, v65, v58, v64);
    }
    else
    {
      v43 = v56;
      sub_126FC8(v56);
      v49 = v38;
      v44 = static Font.system(_:design:weight:)(v43, v58, v50, v65);
      (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v43, v52);
      v42 = v60;
      v41 = (uint64_t)v61;
    }
    v45 = (uint64_t)v62;
    *v62 = v44;
    v46 = v54;
    sub_127554(1, v54);
    v47 = v46;
    v48 = v55;
    sub_A77A8(v47, v42);
    sub_127554(2, v53);
    sub_B414(v58, &qword_25FE08);
    (*(void (**)(char *, uint64_t))(v57 + 8))(v49, v39);
    (*(void (**)(char *, uint64_t))(v36 + 8))(v34, v33);
    sub_A77A8(v53, v41);
    sub_127F70(v45, v48);
    _s7BooksUI13AnyPagedFrameVwxx_0(v63);
    return sub_D8820(v45);
  }
}

unint64_t sub_126C58()
{
  unint64_t result;

  result = qword_266678;
  if (!qword_266678)
  {
    result = swift_getWitnessTable(&unk_1EE434, &_s10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_266678);
  }
  return result;
}

unint64_t sub_126C9C()
{
  unint64_t result;

  result = qword_266680;
  if (!qword_266680)
  {
    result = swift_getWitnessTable(&unk_1EE3E4, &_s10CodingKeysO14FontCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_266680);
  }
  return result;
}

uint64_t sub_126CE0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;

  v20 = 2;
  v3 = sub_5440(&qword_266668);
  result = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v20, v3);
  if (!v1)
  {
    v6 = v5;
    if (v5)
    {
      v7 = result;
      v8 = result == 0x746C7561666564 && v5 == 0xE700000000000000;
      if (v8
        || (_stringCompareWithSmolCheck(_:_:expecting:)(0x746C7561666564, 0xE700000000000000, result, v5, 0) & 1) != 0)
      {
        swift_bridgeObjectRelease(v6);
        v9 = (unsigned int *)&enum case for Font.Design.default(_:);
LABEL_9:
        v10 = *v9;
        v11 = type metadata accessor for Font.Design(0);
        v12 = *(_QWORD *)(v11 - 8);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 104))(a1, v10, v11);
        return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v12 + 56))(a1, 0, 1, v11);
      }
      if (v7 == 0x6669726573 && v6 == 0xE500000000000000
        || (_stringCompareWithSmolCheck(_:_:expecting:)(0x6669726573, 0xE500000000000000, v7, v6, 0) & 1) != 0)
      {
        swift_bridgeObjectRelease(v6);
        v9 = (unsigned int *)&enum case for Font.Design.serif (_:);
        goto LABEL_9;
      }
      if (v7 == 0x6465646E756F72 && v6 == 0xE700000000000000
        || (_stringCompareWithSmolCheck(_:_:expecting:)(0x6465646E756F72, 0xE700000000000000, v7, v6, 0) & 1) != 0)
      {
        swift_bridgeObjectRelease(v6);
        v9 = (unsigned int *)&enum case for Font.Design.rounded(_:);
        goto LABEL_9;
      }
      if (v7 == 0x636170736F6E6F6DLL && v6 == 0xEA00000000006465)
      {
        swift_bridgeObjectRelease(0xEA00000000006465);
LABEL_24:
        v9 = (unsigned int *)&enum case for Font.Design.monospaced(_:);
        goto LABEL_9;
      }
      v14 = _stringCompareWithSmolCheck(_:_:expecting:)(0x636170736F6E6F6DLL, 0xEA00000000006465, v7, v6, 0);
      swift_bridgeObjectRelease(v6);
      if ((v14 & 1) != 0)
        goto LABEL_24;
      v15 = type metadata accessor for DecodingError(0);
      swift_allocError(v15, &protocol witness table for DecodingError, 0, 0);
      v17 = v16;
      v18 = KeyedDecodingContainer.codingPath.getter(v3);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)(v18, 0xD000000000000013, 0x80000000001FD110, 0);
      v19 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v15 - 8) + 104))(v17, enum case for DecodingError.dataCorrupted(_:), v15);
      return swift_willThrow(v19);
    }
    else
    {
      v13 = type metadata accessor for Font.Design(0);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(a1, 1, 1, v13);
    }
  }
  return result;
}

uint64_t sub_126FC8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;

  v28 = 0;
  v3 = sub_5440(&qword_266668);
  result = KeyedDecodingContainer.decode(_:forKey:)(&v28, v3);
  if (!v1)
  {
    v6 = result;
    v7 = v5;
    if (result == 0x746954656772616CLL && v5 == 0xEA0000000000656CLL)
    {
      v9 = 0xEA0000000000656CLL;
    }
    else
    {
      if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x746954656772616CLL, 0xEA0000000000656CLL, result, v5, 0) & 1) == 0)
      {
        if (v6 == 0x656C746974 && v7 == 0xE500000000000000)
        {
          v13 = 0xE500000000000000;
        }
        else
        {
          if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656C746974, 0xE500000000000000, v6, v7, 0) & 1) == 0)
          {
            if (v6 == 0x32656C746974 && v7 == 0xE600000000000000)
            {
              v14 = 0xE600000000000000;
            }
            else
            {
              if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x32656C746974, 0xE600000000000000, v6, v7, 0) & 1) == 0)
              {
                if (v6 == 0x33656C746974 && v7 == 0xE600000000000000)
                {
                  v15 = 0xE600000000000000;
                }
                else
                {
                  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x33656C746974, 0xE600000000000000, v6, v7, 0) & 1) == 0)
                  {
                    if (v6 == 0x656E696C64616568 && v7 == 0xE800000000000000)
                    {
                      v16 = 0xE800000000000000;
                    }
                    else
                    {
                      if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656E696C64616568, 0xE800000000000000, v6, v7, 0) & 1) == 0)
                      {
                        if (v6 == 0x6C64616568627573 && v7 == 0xEB00000000656E69)
                        {
                          v17 = 0xEB00000000656E69;
                        }
                        else
                        {
                          if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6C64616568627573, 0xEB00000000656E69, v6, v7, 0) & 1) == 0)
                          {
                            if (v6 == 2036625250 && v7 == 0xE400000000000000)
                            {
                              v18 = 0xE400000000000000;
                            }
                            else
                            {
                              if ((_stringCompareWithSmolCheck(_:_:expecting:)(2036625250, 0xE400000000000000, v6, v7, 0) & 1) == 0)
                              {
                                if (v6 == 0x74756F6C6C6163 && v7 == 0xE700000000000000)
                                {
                                  v19 = 0xE700000000000000;
                                }
                                else
                                {
                                  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x74756F6C6C6163, 0xE700000000000000, v6, v7, 0) & 1) == 0)
                                  {
                                    if (v6 == 0x65746F6E746F6F66 && v7 == 0xE800000000000000)
                                    {
                                      v20 = 0xE800000000000000;
                                    }
                                    else
                                    {
                                      if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x65746F6E746F6F66, 0xE800000000000000, v6, v7, 0) & 1) == 0)
                                      {
                                        if (v6 == 0x6E6F6974706163 && v7 == 0xE700000000000000)
                                        {
                                          v21 = 0xE700000000000000;
                                        }
                                        else
                                        {
                                          if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F6974706163, 0xE700000000000000, v6, v7, 0) & 1) == 0)
                                          {
                                            if (v6 == 0x326E6F6974706163 && v7 == 0xE800000000000000)
                                            {
                                              swift_bridgeObjectRelease(0xE800000000000000);
                                            }
                                            else
                                            {
                                              v22 = _stringCompareWithSmolCheck(_:_:expecting:)(0x326E6F6974706163, 0xE800000000000000, v6, v7, 0);
                                              swift_bridgeObjectRelease(v7);
                                              if ((v22 & 1) == 0)
                                              {
                                                v23 = type metadata accessor for DecodingError(0);
                                                swift_allocError(v23, &protocol witness table for DecodingError, 0, 0);
                                                v25 = v24;
                                                v26 = KeyedDecodingContainer.codingPath.getter(v3);
                                                DecodingError.Context.init(codingPath:debugDescription:underlyingError:)(v26, 0xD000000000000012, 0x80000000001FD0D0, 0);
                                                v27 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v23 - 8) + 104))(v25, enum case for DecodingError.dataCorrupted(_:), v23);
                                                return swift_willThrow(v27);
                                              }
                                            }
                                            v10 = (unsigned int *)&enum case for Font.TextStyle.caption2(_:);
                                            goto LABEL_10;
                                          }
                                          v21 = v7;
                                        }
                                        swift_bridgeObjectRelease(v21);
                                        v10 = (unsigned int *)&enum case for Font.TextStyle.caption(_:);
LABEL_10:
                                        v11 = *v10;
                                        v12 = type metadata accessor for Font.TextStyle(0);
                                        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 104))(a1, v11, v12);
                                      }
                                      v20 = v7;
                                    }
                                    swift_bridgeObjectRelease(v20);
                                    v10 = (unsigned int *)&enum case for Font.TextStyle.footnote(_:);
                                    goto LABEL_10;
                                  }
                                  v19 = v7;
                                }
                                swift_bridgeObjectRelease(v19);
                                v10 = (unsigned int *)&enum case for Font.TextStyle.callout(_:);
                                goto LABEL_10;
                              }
                              v18 = v7;
                            }
                            swift_bridgeObjectRelease(v18);
                            v10 = (unsigned int *)&enum case for Font.TextStyle.body(_:);
                            goto LABEL_10;
                          }
                          v17 = v7;
                        }
                        swift_bridgeObjectRelease(v17);
                        v10 = (unsigned int *)&enum case for Font.TextStyle.subheadline(_:);
                        goto LABEL_10;
                      }
                      v16 = v7;
                    }
                    swift_bridgeObjectRelease(v16);
                    v10 = (unsigned int *)&enum case for Font.TextStyle.headline(_:);
                    goto LABEL_10;
                  }
                  v15 = v7;
                }
                swift_bridgeObjectRelease(v15);
                v10 = (unsigned int *)&enum case for Font.TextStyle.title3(_:);
                goto LABEL_10;
              }
              v14 = v7;
            }
            swift_bridgeObjectRelease(v14);
            v10 = (unsigned int *)&enum case for Font.TextStyle.title2(_:);
            goto LABEL_10;
          }
          v13 = v7;
        }
        swift_bridgeObjectRelease(v13);
        v10 = (unsigned int *)&enum case for Font.TextStyle.title(_:);
        goto LABEL_10;
      }
      v9 = v7;
    }
    swift_bridgeObjectRelease(v9);
    v10 = (unsigned int *)&enum case for Font.TextStyle.largeTitle(_:);
    goto LABEL_10;
  }
  return result;
}

uint64_t sub_127554@<X0>(char a1@<W1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;

  v21 = a1;
  v4 = sub_5440(&qword_266670);
  result = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v21, v4);
  if (!v2)
  {
    v7 = v6;
    if (v6)
    {
      v8 = result;
      v9 = result == 0x6C6C616D5378 && v6 == 0xE600000000000000;
      if (v9
        || (_stringCompareWithSmolCheck(_:_:expecting:)(0x6C6C616D5378, 0xE600000000000000, result, v6, 0) & 1) != 0)
      {
        swift_bridgeObjectRelease(v7);
        v10 = (unsigned int *)&enum case for DynamicTypeSize.xSmall(_:);
LABEL_9:
        v11 = *v10;
        v12 = type metadata accessor for DynamicTypeSize(0);
        v13 = *(_QWORD *)(v12 - 8);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 104))(a2, v11, v12);
        return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v13 + 56))(a2, 0, 1, v12);
      }
      if (v8 == 0x6C6C616D73 && v7 == 0xE500000000000000
        || (_stringCompareWithSmolCheck(_:_:expecting:)(0x6C6C616D73, 0xE500000000000000, v8, v7, 0) & 1) != 0)
      {
        swift_bridgeObjectRelease(v7);
        v10 = (unsigned int *)&enum case for DynamicTypeSize.small(_:);
        goto LABEL_9;
      }
      if (v8 == 0x6D756964656DLL && v7 == 0xE600000000000000
        || (_stringCompareWithSmolCheck(_:_:expecting:)(0x6D756964656DLL, 0xE600000000000000, v8, v7, 0) & 1) != 0)
      {
        swift_bridgeObjectRelease(v7);
        v10 = (unsigned int *)&enum case for DynamicTypeSize.medium(_:);
        goto LABEL_9;
      }
      if (v8 == 0x656772616CLL && v7 == 0xE500000000000000
        || (_stringCompareWithSmolCheck(_:_:expecting:)(0x656772616CLL, 0xE500000000000000, v8, v7, 0) & 1) != 0)
      {
        swift_bridgeObjectRelease(v7);
        v10 = (unsigned int *)&enum case for DynamicTypeSize.large(_:);
        goto LABEL_9;
      }
      if (v8 == 0x656772614C78 && v7 == 0xE600000000000000
        || (_stringCompareWithSmolCheck(_:_:expecting:)(0x656772614C78, 0xE600000000000000, v8, v7, 0) & 1) != 0)
      {
        swift_bridgeObjectRelease(v7);
        v10 = (unsigned int *)&enum case for DynamicTypeSize.xLarge(_:);
        goto LABEL_9;
      }
      if (v8 == 0x656772614C7878 && v7 == 0xE700000000000000
        || (_stringCompareWithSmolCheck(_:_:expecting:)(0x656772614C7878, 0xE700000000000000, v8, v7, 0) & 1) != 0)
      {
        swift_bridgeObjectRelease(v7);
        v10 = (unsigned int *)&enum case for DynamicTypeSize.xxLarge(_:);
        goto LABEL_9;
      }
      if (v8 == 0x656772614C787878 && v7 == 0xE800000000000000
        || (_stringCompareWithSmolCheck(_:_:expecting:)(0x656772614C787878, 0xE800000000000000, v8, v7, 0) & 1) != 0)
      {
        swift_bridgeObjectRelease(v7);
        v10 = (unsigned int *)&enum case for DynamicTypeSize.xxxLarge(_:);
        goto LABEL_9;
      }
      if (v8 == 0x6269737365636361 && v7 == 0xEE00317974696C69
        || (_stringCompareWithSmolCheck(_:_:expecting:)(0x6269737365636361, 0xEE00317974696C69, v8, v7, 0) & 1) != 0)
      {
        swift_bridgeObjectRelease(v7);
        v10 = (unsigned int *)&enum case for DynamicTypeSize.accessibility1(_:);
        goto LABEL_9;
      }
      if (v8 == 0x6269737365636361 && v7 == 0xEE00327974696C69
        || (_stringCompareWithSmolCheck(_:_:expecting:)(0x6269737365636361, 0xEE00327974696C69, v8, v7, 0) & 1) != 0)
      {
        swift_bridgeObjectRelease(v7);
        v10 = (unsigned int *)&enum case for DynamicTypeSize.accessibility2(_:);
        goto LABEL_9;
      }
      if (v8 == 0x6269737365636361 && v7 == 0xEE00337974696C69
        || (_stringCompareWithSmolCheck(_:_:expecting:)(0x6269737365636361, 0xEE00337974696C69, v8, v7, 0) & 1) != 0)
      {
        swift_bridgeObjectRelease(v7);
        v10 = (unsigned int *)&enum case for DynamicTypeSize.accessibility3(_:);
        goto LABEL_9;
      }
      if (v8 == 0x6269737365636361 && v7 == 0xEE00347974696C69
        || (_stringCompareWithSmolCheck(_:_:expecting:)(0x6269737365636361, 0xEE00347974696C69, v8, v7, 0) & 1) != 0)
      {
        swift_bridgeObjectRelease(v7);
        v10 = (unsigned int *)&enum case for DynamicTypeSize.accessibility4(_:);
        goto LABEL_9;
      }
      if (v8 == 0x6269737365636361 && v7 == 0xEE00357974696C69)
      {
        swift_bridgeObjectRelease(0xEE00357974696C69);
LABEL_56:
        v10 = (unsigned int *)&enum case for DynamicTypeSize.accessibility5(_:);
        goto LABEL_9;
      }
      v15 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6269737365636361, 0xEE00357974696C69, v8, v7, 0);
      swift_bridgeObjectRelease(v7);
      if ((v15 & 1) != 0)
        goto LABEL_56;
      v16 = type metadata accessor for DecodingError(0);
      swift_allocError(v16, &protocol witness table for DecodingError, 0, 0);
      v18 = v17;
      v19 = KeyedDecodingContainer.codingPath.getter(v4);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)(v19, 0xD000000000000019, 0x80000000001FD0B0, 0);
      v20 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v16 - 8) + 104))(v18, enum case for DecodingError.dataCorrupted(_:), v16);
      return swift_willThrow(v20);
    }
    else
    {
      v14 = type metadata accessor for DynamicTypeSize(0);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(a2, 1, 1, v14);
    }
  }
  return result;
}

uint64_t sub_127B48@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return FontSpec.init(from:)(a1, a2);
}

uint64_t sub_127B5C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;

  v23 = 3;
  v1 = sub_5440(&qword_266668);
  result = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v23, v1);
  if (!v0)
  {
    v4 = v3;
    if (v3)
    {
      v5 = result;
      v6 = result == 0x67694C6172746C75 && v3 == 0xEA00000000007468;
      if (v6
        || (_stringCompareWithSmolCheck(_:_:expecting:)(0x67694C6172746C75, 0xEA00000000007468, result, v3, 0) & 1) != 0)
      {
        v7 = swift_bridgeObjectRelease(v4);
        v8 = static Font.Weight.ultraLight.getter(v7);
        return *(_QWORD *)&v8;
      }
      if (v5 == 1852401780 && v4 == 0xE400000000000000
        || (_stringCompareWithSmolCheck(_:_:expecting:)(1852401780, 0xE400000000000000, v5, v4, 0) & 1) != 0)
      {
        v9 = swift_bridgeObjectRelease(v4);
        static Font.Weight.thin.getter(v9);
        return *(_QWORD *)&v8;
      }
      if (v5 == 0x746867696CLL && v4 == 0xE500000000000000
        || (_stringCompareWithSmolCheck(_:_:expecting:)(0x746867696CLL, 0xE500000000000000, v5, v4, 0) & 1) != 0)
      {
        v10 = swift_bridgeObjectRelease(v4);
        static Font.Weight.light.getter(v10);
        return *(_QWORD *)&v8;
      }
      if (v5 == 0x72616C75676572 && v4 == 0xE700000000000000
        || (_stringCompareWithSmolCheck(_:_:expecting:)(0x72616C75676572, 0xE700000000000000, v5, v4, 0) & 1) != 0)
      {
        v11 = swift_bridgeObjectRelease(v4);
        static Font.Weight.regular.getter(v11);
        return *(_QWORD *)&v8;
      }
      if (v5 == 0x6D756964656DLL && v4 == 0xE600000000000000
        || (_stringCompareWithSmolCheck(_:_:expecting:)(0x6D756964656DLL, 0xE600000000000000, v5, v4, 0) & 1) != 0)
      {
        v12 = swift_bridgeObjectRelease(v4);
        v8 = static Font.Weight.medium.getter(v12);
        return *(_QWORD *)&v8;
      }
      if (v5 == 0x646C6F62696D6573 && v4 == 0xE800000000000000
        || (_stringCompareWithSmolCheck(_:_:expecting:)(0x646C6F62696D6573, 0xE800000000000000, v5, v4, 0) & 1) != 0)
      {
        v13 = swift_bridgeObjectRelease(v4);
        v8 = static Font.Weight.semibold.getter(v13);
        return *(_QWORD *)&v8;
      }
      if (v5 == 1684828002 && v4 == 0xE400000000000000
        || (_stringCompareWithSmolCheck(_:_:expecting:)(1684828002, 0xE400000000000000, v5, v4, 0) & 1) != 0)
      {
        v14 = swift_bridgeObjectRelease(v4);
        static Font.Weight.bold.getter(v14);
        return *(_QWORD *)&v8;
      }
      if (v5 == 0x7976616568 && v4 == 0xE500000000000000
        || (_stringCompareWithSmolCheck(_:_:expecting:)(0x7976616568, 0xE500000000000000, v5, v4, 0) & 1) != 0)
      {
        v15 = swift_bridgeObjectRelease(v4);
        static Font.Weight.heavy.getter(v15);
        return *(_QWORD *)&v8;
      }
      if (v5 == 0x6B63616C62 && v4 == 0xE500000000000000)
      {
        v16 = swift_bridgeObjectRelease(0xE500000000000000);
LABEL_44:
        static Font.Weight.black.getter(v16);
        return *(_QWORD *)&v8;
      }
      v17 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6B63616C62, 0xE500000000000000, v5, v4, 0);
      v16 = swift_bridgeObjectRelease(v4);
      if ((v17 & 1) != 0)
        goto LABEL_44;
      v18 = type metadata accessor for DecodingError(0);
      swift_allocError(v18, &protocol witness table for DecodingError, 0, 0);
      v20 = v19;
      v21 = KeyedDecodingContainer.codingPath.getter(v1);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)(v21, 0xD000000000000013, 0x80000000001FD0F0, 0);
      v22 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v18 - 8) + 104))(v20, enum case for DecodingError.dataCorrupted(_:), v18);
      return swift_willThrow(v22);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_127F70(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for FontSpec(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_127FB4()
{
  unint64_t result;

  result = qword_266688;
  if (!qword_266688)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CGFloat, &type metadata for CGFloat);
    atomic_store(result, (unint64_t *)&qword_266688);
  }
  return result;
}

uint64_t _s10CodingKeysOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_128044 + 4 * byte_1EE1B1[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_128078 + 4 * byte_1EE1AC[v4]))();
}

uint64_t sub_128078(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_128080(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x128088);
  return result;
}

uint64_t sub_128094(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x12809CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1280A0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1280A8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s10CodingKeysOMa_3()
{
  return &_s10CodingKeysON;
}

uint64_t _s10CodingKeysO14FontCodingKeysOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_128110 + 4 * byte_1EE1BB[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_128144 + 4 * byte_1EE1B6[v4]))();
}

uint64_t sub_128144(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_12814C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x128154);
  return result;
}

uint64_t sub_128160(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x128168);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_12816C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_128174(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s10CodingKeysO14FontCodingKeysOMa()
{
  return &_s10CodingKeysO14FontCodingKeysON;
}

unint64_t sub_128194()
{
  unint64_t result;

  result = qword_266690;
  if (!qword_266690)
  {
    result = swift_getWitnessTable(&unk_1EE2CC, &_s10CodingKeysO14FontCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_266690);
  }
  return result;
}

unint64_t sub_1281DC()
{
  unint64_t result;

  result = qword_266698;
  if (!qword_266698)
  {
    result = swift_getWitnessTable(&unk_1EE3BC, &_s10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_266698);
  }
  return result;
}

unint64_t sub_128224()
{
  unint64_t result;

  result = qword_2666A0;
  if (!qword_2666A0)
  {
    result = swift_getWitnessTable(&unk_1EE204, &_s10CodingKeysO14FontCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_2666A0);
  }
  return result;
}

unint64_t sub_12826C()
{
  unint64_t result;

  result = qword_2666A8;
  if (!qword_2666A8)
  {
    result = swift_getWitnessTable(&unk_1EE22C, &_s10CodingKeysO14FontCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_2666A8);
  }
  return result;
}

unint64_t sub_1282B4()
{
  unint64_t result;

  result = qword_2666B0;
  if (!qword_2666B0)
  {
    result = swift_getWitnessTable(&unk_1EE2F4, &_s10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_2666B0);
  }
  return result;
}

unint64_t sub_1282FC()
{
  unint64_t result;

  result = qword_2666B8;
  if (!qword_2666B8)
  {
    result = swift_getWitnessTable(&unk_1EE31C, &_s10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_2666B8);
  }
  return result;
}

unint64_t sub_128340(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_24A0E0, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 4)
    return 4;
  else
    return v3;
}

unint64_t sub_128388(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_24A160, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 3)
    return 3;
  else
    return v3;
}

uint64_t sub_1283D0()
{
  return EnvironmentValues.layoutDirection.getter();
}

uint64_t sub_1283F0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v7;

  v2 = type metadata accessor for LayoutDirection(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v5 + 16))(v4, a1);
  return EnvironmentValues.layoutDirection.setter(v4);
}

uint64_t DeterminateProgressViewStyle.init(_:cancelIconConfig:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, _QWORD *a5@<X8>)
{
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t result;
  char *v18;

  v9 = *a1;
  v10 = *((_BYTE *)a1 + 8);
  v11 = a1[2];
  v12 = a1[3];
  *a5 = swift_getKeyPath(&unk_1EE4F0);
  v13 = sub_5440(&qword_25FA98);
  swift_storeEnumTagMultiPayload(a5, v13, 0);
  v14 = (int *)type metadata accessor for DeterminateProgressViewStyle(0);
  v15 = (_QWORD *)((char *)a5 + v14[5]);
  *v15 = swift_getKeyPath(&unk_1EE520);
  v16 = sub_5440(&qword_25F208);
  result = swift_storeEnumTagMultiPayload(v15, v16, 0);
  v18 = (char *)a5 + v14[6];
  *(_QWORD *)v18 = a2;
  *((_QWORD *)v18 + 1) = a3;
  v18[16] = a4 & 1;
  *(_QWORD *)((char *)a5 + v14[7]) = v9;
  *((_BYTE *)a5 + v14[8]) = v10;
  *(_QWORD *)((char *)a5 + v14[9]) = v11;
  *(_QWORD *)((char *)a5 + v14[10]) = v12;
  return result;
}

uint64_t sub_128560()
{
  return EnvironmentValues.layoutDirection.getter();
}

uint64_t type metadata accessor for DeterminateProgressViewStyle(uint64_t a1)
{
  return sub_1FE90(a1, qword_266740, (uint64_t)&nominal type descriptor for DeterminateProgressViewStyle);
}

uint64_t DeterminateProgressViewStyle.makeBody(configuration:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  double v15;
  char v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v23;
  uint64_t v24;

  v24 = a1;
  v2 = type metadata accessor for BlendMode(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_5440(&qword_2666C0);
  __chkstk_darwin(v6);
  v8 = (uint64_t *)((char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = sub_5440(&qword_2666C8);
  __chkstk_darwin(v9);
  v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = sub_5440(&qword_2666D0);
  v12 = __chkstk_darwin(v23);
  v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = COERCE_DOUBLE(ProgressViewStyleConfiguration.fractionCompleted.getter(v12));
  if ((v16 & 1) != 0)
    v17 = 0.0;
  else
    v17 = v15;
  *v8 = _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0();
  v8[1] = v18;
  v19 = sub_5440(&qword_2666D8);
  sub_128804(v1, (char *)v8 + *(int *)(v19 + 44), v17);
  v20 = *(int *)(type metadata accessor for DeterminateProgressViewStyle(0) + 32);
  if (*(_BYTE *)(v1 + v20) == 1)
    sub_31660((uint64_t)v5);
  else
    (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for BlendMode.normal(_:), v2);
  (*(void (**)(char *, char *, uint64_t))(v3 + 16))(&v11[*(int *)(v9 + 36)], v5, v2);
  sub_B3D0((uint64_t)v8, (uint64_t)v11, &qword_2666C0);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  sub_B414((uint64_t)v8, &qword_2666C0);
  if (*(_BYTE *)(v1 + v20))
    v21 = 0.7;
  else
    v21 = 1.0;
  sub_B3D0((uint64_t)v11, (uint64_t)v14, &qword_2666C8);
  *(double *)&v14[*(int *)(v23 + 36)] = v21;
  sub_B414((uint64_t)v11, &qword_2666C8);
  return sub_167A4((uint64_t)v14, v24, &qword_2666D0);
}

_QWORD *sub_128804@<X0>(uint64_t a1@<X0>, void *a2@<X8>, double a3@<D0>)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int *v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t KeyPath;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _OWORD *v42;
  __int128 v43;
  unsigned __int8 v44;
  unsigned __int8 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  unsigned int v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t v73;
  _OWORD v74[23];
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char v97;
  _BYTE v98[7];
  uint64_t v99;
  char v100;
  _BYTE v101[7];
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unsigned int v105;
  unsigned int v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unsigned __int8 v111;
  uint64_t v112;
  unsigned __int8 v113;
  uint64_t v114;
  uint64_t v115;
  _OWORD v116[3];
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  _BYTE v131[7];
  unsigned __int8 v132;
  _BYTE v133[7];
  unsigned __int8 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  int v149;
  __int16 v150;

  v68 = a2;
  v56 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v56);
  v6 = (uint64_t *)((char *)&v56 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v57 = (char *)sub_5440(&qword_2668F0);
  __chkstk_darwin(v57);
  v8 = (char *)&v56 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = sub_5440(&qword_2668F8);
  v63 = *(_QWORD *)(v61 - 8);
  __chkstk_darwin(v61);
  v58 = (uint64_t)&v56 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_5440(&qword_266900);
  v11 = __chkstk_darwin(v10);
  v67 = (uint64_t)&v56 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v14 = (char *)&v56 - v13;
  v15 = (int *)type metadata accessor for DeterminateProgressViewStyle(0);
  v16 = *(_QWORD *)(a1 + v15[7]);
  v17 = *(double *)(a1 + v15[10]);
  swift_retain(v16);
  StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)(&v104, 0, 0, _swiftEmptyArrayStorage, v17, 10.0, 0.0);
  v18 = v104;
  v70 = v106;
  v71 = v105;
  v19 = v107;
  v69 = v108;
  v20 = v109;
  v21 = _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0();
  v72 = v22;
  v73 = v21;
  sub_128FD0((uint64_t)&v75, a3);
  v127 = v85;
  v128 = v86;
  v129 = v87;
  v130 = v88;
  v123 = v81;
  v124 = v82;
  v125 = v83;
  v126 = v84;
  v119 = v77;
  v120 = v78;
  v121 = v79;
  v122 = v80;
  v117 = v75;
  v118 = v76;
  v23 = _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0();
  v65 = v24;
  v66 = v23;
  v25 = *(double *)(a1 + v15[9]) - v17;
  v26 = _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0();
  _FrameLayout.init(width:height:alignment:)(&v110, *(_QWORD *)&v25, 0, *(_QWORD *)&v25, 0, v26, v27);
  v140 = v122;
  v139 = v121;
  v138 = v120;
  v137 = v119;
  v144 = v126;
  v143 = v125;
  v142 = v124;
  v141 = v123;
  v148 = v130;
  v147 = v129;
  v146 = v128;
  v145 = v127;
  v136 = v118;
  v59 = v110;
  v60 = v112;
  v62 = v114;
  v64 = v115;
  v135 = v117;
  v134 = v111;
  v132 = v113;
  v28 = (uint64_t *)(a1 + v15[6]);
  if ((v28[2] & 1) != 0)
  {
    v29 = 1;
    v30 = v61;
  }
  else
  {
    v31 = v28[1];
    v32 = *v28;
    v33 = (char *)v6 + *(int *)(v56 + 20);
    v34 = enum case for RoundedCornerStyle.continuous(_:);
    v35 = type metadata accessor for RoundedCornerStyle(0);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 104))(v33, v34, v35);
    *v6 = v31;
    v6[1] = v31;
    KeyPath = swift_getKeyPath(&unk_1EE6D8);
    sub_1E428((uint64_t)v6, (uint64_t)v8, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
    v37 = (uint64_t *)&v8[*((int *)v57 + 9)];
    *v37 = KeyPath;
    v37[1] = v16;
    swift_retain(v16);
    sub_224DC((uint64_t)v6, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
    v38 = _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0();
    _FrameLayout.init(width:height:alignment:)(v116, v32, 0, v32, 0, v38, v39);
    v40 = v58;
    sub_B3D0((uint64_t)v8, v58, &qword_2668F0);
    v41 = v61;
    v42 = (_OWORD *)(v40 + *(int *)(v61 + 36));
    v43 = v116[1];
    *v42 = v116[0];
    v42[1] = v43;
    v42[2] = v116[2];
    sub_B414((uint64_t)v8, &qword_2668F0);
    sub_167A4(v40, (uint64_t)v14, &qword_2668F8);
    v29 = 0;
    v30 = v41;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v63 + 56))(v14, v29, 1, v30);
  v44 = v134;
  LODWORD(v63) = v134;
  v45 = v132;
  LODWORD(v61) = v132;
  v46 = v67;
  sub_B3D0((uint64_t)v14, v67, &qword_266900);
  *(_QWORD *)&v74[0] = v18;
  *((_QWORD *)&v74[0] + 1) = __PAIR64__(v70, v71);
  *(_QWORD *)&v74[1] = v19;
  *((_QWORD *)&v74[1] + 1) = v69;
  *(_QWORD *)&v74[2] = v20;
  *((_QWORD *)&v74[2] + 1) = v16;
  LOWORD(v74[3]) = 256;
  *(_DWORD *)((char *)&v74[3] + 2) = v149;
  WORD3(v74[3]) = v150;
  v57 = v14;
  v58 = v16;
  *((_QWORD *)&v74[3] + 1) = v73;
  *(_QWORD *)&v74[4] = v72;
  *((_QWORD *)&v74[4] + 1) = 0x3FC999999999999ALL;
  v74[6] = v136;
  v74[5] = v135;
  v74[10] = v140;
  v74[9] = v139;
  v74[8] = v138;
  v74[7] = v137;
  v74[14] = v144;
  v74[13] = v143;
  v74[12] = v142;
  v74[11] = v141;
  v74[18] = v148;
  v74[17] = v147;
  v74[16] = v146;
  v74[15] = v145;
  v48 = v65;
  v47 = v66;
  *(_QWORD *)&v74[19] = v66;
  *((_QWORD *)&v74[19] + 1) = v65;
  v50 = v59;
  v49 = v60;
  *(_QWORD *)&v74[20] = v59;
  BYTE8(v74[20]) = v44;
  *(_DWORD *)((char *)&v74[20] + 9) = *(_DWORD *)v133;
  HIDWORD(v74[20]) = *(_DWORD *)&v133[3];
  *(_QWORD *)&v74[21] = v60;
  BYTE8(v74[21]) = v45;
  *(_DWORD *)((char *)&v74[21] + 9) = *(_DWORD *)v131;
  HIDWORD(v74[21]) = *(_DWORD *)&v131[3];
  v51 = v62;
  v52 = v64;
  *(_QWORD *)&v74[22] = v62;
  *((_QWORD *)&v74[22] + 1) = v64;
  v53 = v68;
  memcpy(v68, v74, 0x170uLL);
  v54 = sub_5440(&qword_266908);
  sub_B3D0(v46, (uint64_t)v53 + *(int *)(v54 + 48), &qword_266900);
  sub_12BB94(v74);
  sub_B414((uint64_t)v57, &qword_266900);
  sub_B414(v46, &qword_266900);
  *(_QWORD *)&v75 = v18;
  *((_QWORD *)&v75 + 1) = __PAIR64__(v70, v71);
  *(_QWORD *)&v76 = v19;
  *((_QWORD *)&v76 + 1) = v69;
  *(_QWORD *)&v77 = v20;
  *((_QWORD *)&v77 + 1) = v58;
  LOWORD(v78) = 256;
  *(_DWORD *)((char *)&v78 + 2) = v149;
  WORD3(v78) = v150;
  *((_QWORD *)&v78 + 1) = v73;
  *(_QWORD *)&v79 = v72;
  *((_QWORD *)&v79 + 1) = 0x3FC999999999999ALL;
  v81 = v136;
  v80 = v135;
  v85 = v140;
  v84 = v139;
  v83 = v138;
  v82 = v137;
  v89 = v144;
  v88 = v143;
  v87 = v142;
  v86 = v141;
  v93 = v148;
  v92 = v147;
  v91 = v146;
  v90 = v145;
  v94 = v47;
  v95 = v48;
  v96 = v50;
  v97 = v63;
  *(_DWORD *)v98 = *(_DWORD *)v133;
  *(_DWORD *)&v98[3] = *(_DWORD *)&v133[3];
  v99 = v49;
  v100 = v61;
  *(_DWORD *)v101 = *(_DWORD *)v131;
  *(_DWORD *)&v101[3] = *(_DWORD *)&v131[3];
  v102 = v51;
  v103 = v52;
  return sub_12BBE8(&v75);
}

void sub_128FD0(uint64_t a1@<X8>, double a2@<D0>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  _BYTE *v10;
  int *v11;
  double v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  void (*v23)(_BYTE *, uint64_t, uint64_t);
  uint64_t v24;
  char v25;
  void (*v26)(_BYTE *, uint64_t);
  uint64_t v27;
  double v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  char v34;
  char v35;
  double v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE v40[12];
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  double v50;
  _BYTE v51[7];
  char v52;
  _BYTE v53[7];
  char v54;
  int v55;
  __int16 v56;
  _QWORD v57[5];
  uint64_t v58;
  unsigned __int8 v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;

  v50 = a2;
  v4 = type metadata accessor for LayoutDirection(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = &v40[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v6);
  v10 = &v40[-v9];
  v11 = (int *)type metadata accessor for DeterminateProgressViewStyle(0);
  v49 = *(_QWORD *)(v2 + v11[7]);
  v12 = *(double *)(v2 + v11[10]);
  swift_retain(v49);
  v13 = 0.0;
  StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)(v57, 1, 0, _swiftEmptyArrayStorage, v12, 10.0, 0.0);
  v14 = v57[0];
  v15 = v57[2];
  v46 = v57[3];
  v16 = v57[4];
  v48 = _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0();
  v47 = v17;
  v18 = *(_QWORD *)(v2 + v11[9]);
  v19 = _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0();
  _FrameLayout.init(width:height:alignment:)(&v58, v18, 0, 0, 1, v19, v20);
  v42 = v58;
  v41 = v59;
  v43 = v60;
  v21 = v61;
  v45 = v62;
  v44 = v63;
  sub_31C80((uint64_t)v10);
  v22 = enum case for LayoutDirection.leftToRight(_:);
  v23 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 104);
  v24 = v57[1];
  v23(v8, enum case for LayoutDirection.leftToRight(_:), v4);
  v25 = static LayoutDirection.== infix(_:_:)(v10, v8);
  v26 = *(void (**)(_BYTE *, uint64_t))(v5 + 8);
  v26(v8, v4);
  v27 = ((uint64_t (*)(_BYTE *, uint64_t))v26)(v10, v4);
  v54 = v41;
  v52 = v21;
  if ((v25 & 1) != 0)
    v28 = -1.57079633;
  else
    v28 = -4.71238898;
  v29 = static UnitPoint.center.getter(v27);
  v31 = v30;
  sub_31C80((uint64_t)v10);
  v23(v8, v22, v4);
  v32 = static LayoutDirection.== infix(_:_:)(v10, v8);
  v26(v8, v4);
  v33 = ((uint64_t (*)(_BYTE *, uint64_t))v26)(v10, v4);
  if ((v32 & 1) == 0)
    v13 = 3.14159265;
  v34 = v54;
  v35 = v52;
  v36 = static UnitPoint.center.getter(v33);
  *(_QWORD *)a1 = 0;
  *(double *)(a1 + 8) = v50;
  *(_QWORD *)(a1 + 16) = v14;
  *(_QWORD *)(a1 + 24) = v24;
  *(_QWORD *)(a1 + 32) = v15;
  *(_QWORD *)(a1 + 40) = v46;
  *(_QWORD *)(a1 + 48) = v16;
  *(_QWORD *)(a1 + 56) = v49;
  *(_WORD *)(a1 + 64) = 256;
  *(_DWORD *)(a1 + 66) = v55;
  *(_WORD *)(a1 + 70) = v56;
  v37 = v47;
  *(_QWORD *)(a1 + 72) = v48;
  *(_QWORD *)(a1 + 80) = v37;
  *(_QWORD *)(a1 + 88) = v42;
  *(_BYTE *)(a1 + 96) = v34;
  *(_DWORD *)(a1 + 100) = *(_DWORD *)&v53[3];
  *(_DWORD *)(a1 + 97) = *(_DWORD *)v53;
  *(_QWORD *)(a1 + 104) = v43;
  *(_BYTE *)(a1 + 112) = v35;
  *(_DWORD *)(a1 + 116) = *(_DWORD *)&v51[3];
  *(_DWORD *)(a1 + 113) = *(_DWORD *)v51;
  v38 = v44;
  *(_QWORD *)(a1 + 120) = v45;
  *(_QWORD *)(a1 + 128) = v38;
  *(double *)(a1 + 136) = v28;
  *(double *)(a1 + 144) = v29;
  *(_QWORD *)(a1 + 152) = v31;
  *(double *)(a1 + 160) = v13;
  *(_OWORD *)(a1 + 168) = xmmword_1ED5C0;
  *(_QWORD *)(a1 + 184) = 0;
  *(double *)(a1 + 192) = v36;
  *(_QWORD *)(a1 + 200) = v39;
  *(_OWORD *)(a1 + 208) = xmmword_1ED5C0;
}

uint64_t InDeterminateProgressViewStyle.init(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t result;
  char v12;
  _QWORD v13[2];

  v3 = *a1;
  v4 = *((_BYTE *)a1 + 8);
  v5 = a1[2];
  v6 = a1[3];
  v12 = 1;
  State.init(wrappedValue:)(v13, &v12, &type metadata for Bool);
  v7 = v13[1];
  *(_BYTE *)a2 = v13[0];
  *(_QWORD *)(a2 + 8) = v7;
  v8 = (int *)type metadata accessor for InDeterminateProgressViewStyle(0);
  v9 = (_QWORD *)(a2 + v8[5]);
  *v9 = swift_getKeyPath(&unk_1EE520);
  v10 = sub_5440(&qword_25F208);
  result = swift_storeEnumTagMultiPayload(v9, v10, 0);
  *(_QWORD *)(a2 + v8[6]) = v3;
  *(_BYTE *)(a2 + v8[7]) = v4;
  *(_QWORD *)(a2 + v8[8]) = v5;
  *(_QWORD *)(a2 + v8[9]) = v6;
  return result;
}

uint64_t sub_129414@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __n128 v32;
  uint64_t v33;
  char v34;
  _BYTE *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  uint64_t v41;
  uint64_t v42;
  double v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  double v51;
  uint64_t v52;
  _BYTE v54[4];
  int v55;
  uint64_t v56;
  int v57;
  int v58;
  _BYTE *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _BYTE *v73;
  _BYTE *v74;
  uint64_t v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  uint64_t v89;
  unsigned __int8 v90;
  unsigned __int8 v91;
  _BYTE v92[7];
  _BYTE v93[11];
  __int16 v94;
  _QWORD v95[5];
  uint64_t v96;
  unsigned __int8 v97;
  uint64_t v98;
  unsigned __int8 v99;
  uint64_t v100;
  uint64_t v101;

  v2 = v1;
  v75 = a1;
  v3 = type metadata accessor for _BlendModeEffect(0);
  __chkstk_darwin(v3);
  v74 = &v54[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = type metadata accessor for BlendMode(0);
  v70 = *(_QWORD *)(v5 - 8);
  v71 = v5;
  __chkstk_darwin(v5);
  v73 = &v54[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = (int *)type metadata accessor for InDeterminateProgressViewStyle(0);
  v8 = *(_QWORD *)(*((_QWORD *)v7 - 1) + 64);
  v64 = *((_QWORD *)v7 - 1);
  v65 = v8;
  __chkstk_darwin(v7);
  v59 = &v54[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v72 = sub_5440(&qword_266860);
  __chkstk_darwin(v72);
  v11 = &v54[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = *(double *)(v1 + v7[9]);
  v69 = *(_QWORD *)(v1 + v7[6]);
  swift_retain(v69);
  StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)(v95, 1, 0, _swiftEmptyArrayStorage, v12, 10.0, 0.0);
  v13 = v95[0];
  v14 = v95[1];
  v15 = v95[2];
  v66 = v95[3];
  v16 = v95[4];
  v17 = _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0();
  v67 = v18;
  v68 = v17;
  v19 = *(double *)(v1 + v7[8]) - v12;
  v20 = _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0();
  _FrameLayout.init(width:height:alignment:)(&v96, *(_QWORD *)&v19, 0, *(_QWORD *)&v19, 0, v20, v21);
  v22 = v97;
  v60 = v96;
  v61 = v98;
  v23 = v99;
  v62 = v101;
  v63 = v100;
  v25 = *(_QWORD *)(v2 + 8);
  LOBYTE(v76) = *(_BYTE *)v2;
  v24 = v76;
  *((_QWORD *)&v76 + 1) = v25;
  v26 = sub_5440(&qword_2668E8);
  v27 = State.wrappedValue.getter(v93, v26);
  v55 = v93[0];
  v91 = v22;
  v90 = v23;
  v28 = static UnitPoint.center.getter(v27);
  v30 = v29;
  v57 = v91;
  v58 = v90;
  v31 = static Animation.linear.getter();
  v33 = Animation.repeatForever(autoreverses:)(0, v31, v32);
  swift_release(v31);
  v56 = Animation.speed(_:)(v33, 0.25);
  swift_release(v33);
  LOBYTE(v76) = v24;
  *((_QWORD *)&v76 + 1) = v25;
  State.wrappedValue.getter(v93, v26);
  v34 = v93[0];
  v35 = v59;
  sub_1E428(v2, (uint64_t)v59, type metadata accessor for InDeterminateProgressViewStyle);
  v36 = *(unsigned __int8 *)(v64 + 80);
  v37 = (v36 + 16) & ~v36;
  v38 = swift_allocObject(&unk_253EC8, v37 + v65, v36 | 7);
  sub_21C88((uint64_t)v35, v38 + v37, type metadata accessor for InDeterminateProgressViewStyle);
  v39 = v7[7];
  if (*(_BYTE *)(v2 + v39) == 1)
  {
    v40 = v73;
    sub_31660((uint64_t)v73);
    v42 = v70;
    v41 = v71;
  }
  else
  {
    v42 = v70;
    v41 = v71;
    v40 = v73;
    (*(void (**)(_BYTE *, _QWORD, uint64_t))(v70 + 104))(v73, enum case for BlendMode.normal(_:), v71);
  }
  v43 = -6.28318531;
  if (!v55)
    v43 = 0.0;
  v76 = xmmword_1EE4D0;
  *(_QWORD *)&v77 = v13;
  *((_QWORD *)&v77 + 1) = v14;
  *(_QWORD *)&v78 = v15;
  *((_QWORD *)&v78 + 1) = v66;
  *(_QWORD *)&v79 = v16;
  *((_QWORD *)&v79 + 1) = v69;
  LOWORD(v80) = 256;
  *(_DWORD *)((char *)&v80 + 2) = *(_DWORD *)&v93[7];
  WORD3(v80) = v94;
  *((_QWORD *)&v80 + 1) = v68;
  *(_QWORD *)&v81 = v67;
  *((_QWORD *)&v81 + 1) = 0x3FC999999999999ALL;
  *(_QWORD *)&v82 = v60;
  BYTE8(v82) = v57;
  HIDWORD(v82) = *(_DWORD *)&v93[3];
  *(_DWORD *)((char *)&v82 + 9) = *(_DWORD *)v93;
  *(_QWORD *)&v83 = v61;
  BYTE8(v83) = v58;
  HIDWORD(v83) = *(_DWORD *)&v92[3];
  *(_DWORD *)((char *)&v83 + 9) = *(_DWORD *)v92;
  *(_QWORD *)&v84 = v63;
  *((_QWORD *)&v84 + 1) = v62;
  *(double *)&v85 = v43;
  *((double *)&v85 + 1) = v28;
  *(_QWORD *)&v86 = v30;
  *((_QWORD *)&v86 + 1) = v56;
  LOBYTE(v87) = v34;
  *((_QWORD *)&v87 + 1) = sub_12BA78;
  v88 = (unint64_t)v38;
  v89 = 0;
  v44 = (uint64_t)v74;
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v42 + 16))(v74, v40, v41);
  sub_1E428(v44, (uint64_t)&v11[*(int *)(v72 + 36)], (uint64_t (*)(_QWORD))&type metadata accessor for _BlendModeEffect);
  v45 = v87;
  *((_OWORD *)v11 + 10) = v86;
  *((_OWORD *)v11 + 11) = v45;
  *((_OWORD *)v11 + 12) = v88;
  *((_QWORD *)v11 + 26) = v89;
  v46 = v83;
  *((_OWORD *)v11 + 6) = v82;
  *((_OWORD *)v11 + 7) = v46;
  v47 = v85;
  *((_OWORD *)v11 + 8) = v84;
  *((_OWORD *)v11 + 9) = v47;
  v48 = v79;
  *((_OWORD *)v11 + 2) = v78;
  *((_OWORD *)v11 + 3) = v48;
  v49 = v81;
  *((_OWORD *)v11 + 4) = v80;
  *((_OWORD *)v11 + 5) = v49;
  v50 = v77;
  *(_OWORD *)v11 = v76;
  *((_OWORD *)v11 + 1) = v50;
  sub_12BAA4(&v76);
  sub_224DC(v44, (uint64_t (*)(_QWORD))&type metadata accessor for _BlendModeEffect);
  (*(void (**)(_BYTE *, uint64_t))(v42 + 8))(v40, v41);
  sub_12BB1C(&v76);
  if (*(_BYTE *)(v2 + v39))
    v51 = 0.7;
  else
    v51 = 1.0;
  v52 = v75;
  sub_B3D0((uint64_t)v11, v75, &qword_266860);
  *(double *)(v52 + *(int *)(sub_5440(&qword_266850) + 36)) = v51;
  return sub_B414((uint64_t)v11, &qword_266860);
}

double sub_129950(char *a1)
{
  char v1;
  uint64_t v2;
  uint64_t v3;
  double result;
  _BYTE v5[9];
  uint64_t v6;
  uint64_t v7;

  v1 = *a1;
  v2 = *((_QWORD *)a1 + 1);
  swift_retain(v2);
  v3 = sub_5440(&qword_2668E8);
  State.wrappedValue.getter(&v7, v3);
  v5[1] = v1;
  v6 = v2;
  v5[0] = (v7 & 1) == 0;
  State.wrappedValue.setter(v5, v3);
  *(_QWORD *)&result = swift_release(v2).n128_u64[0];
  return result;
}

uint64_t ProgressViewModel.init(foregroundColor:style:size:lineWidth:)@<X0>(uint64_t result@<X0>, char *a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>)
{
  char v5;

  v5 = *a2;
  *(_QWORD *)a3 = result;
  *(_BYTE *)(a3 + 8) = v5;
  *(double *)(a3 + 16) = a4;
  *(double *)(a3 + 24) = a5;
  return result;
}

uint64_t sub_1299F0@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>)
{
  int *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  char v28;
  _QWORD v29[2];

  v27 = a3;
  v9 = (int *)type metadata accessor for InDeterminateProgressViewStyle(0);
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v27 - v13;
  v15 = sub_5440(&qword_2668C8);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = __chkstk_darwin(v15);
  v19 = (char *)&v27 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = *a2;
  ProgressView<>.init<>()(v17);
  v28 = 1;
  swift_retain(a1);
  State.init(wrappedValue:)(v29, &v28, &type metadata for Bool);
  v21 = v29[1];
  *v12 = v29[0];
  *((_QWORD *)v12 + 1) = v21;
  v22 = &v12[v9[5]];
  *(_QWORD *)v22 = swift_getKeyPath(&unk_1EE520);
  v23 = sub_5440(&qword_25F208);
  swift_storeEnumTagMultiPayload(v22, v23, 0);
  *(_QWORD *)&v12[v9[6]] = a1;
  v12[v9[7]] = v20;
  *(double *)&v12[v9[8]] = a4;
  *(double *)&v12[v9[9]] = a5;
  sub_21C88((uint64_t)v12, (uint64_t)v14, type metadata accessor for InDeterminateProgressViewStyle);
  v24 = sub_7FD8(&qword_2668D0, &qword_2668C8, (uint64_t)&protocol conformance descriptor for ProgressView<A, B>);
  v25 = sub_6FD0(&qword_2668D8, type metadata accessor for InDeterminateProgressViewStyle, (uint64_t)&protocol conformance descriptor for InDeterminateProgressViewStyle);
  View.progressViewStyle<A>(_:)(v14, v15, v9, v24, v25);
  sub_224DC((uint64_t)v14, type metadata accessor for InDeterminateProgressViewStyle);
  return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v19, v15);
}

uint64_t sub_129BFC@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X8>, double a7@<D0>, double a8@<D1>, double a9@<D2>)
{
  int *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char v25;
  unint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  double v39;
  char v40;

  v36 = a5;
  v35 = a4;
  v37 = a6;
  v15 = (int *)type metadata accessor for DeterminateProgressViewStyle(0);
  v16 = __chkstk_darwin(v15);
  v18 = (uint64_t *)((char *)&v35 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v16);
  v20 = (char *)&v35 - v19;
  v21 = sub_5440(&qword_2668C8);
  v22 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  v24 = (char *)&v35 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = *a2;
  v39 = a7;
  v40 = 0;
  v38 = 0x3FF0000000000000;
  v26 = sub_3CB54();
  ProgressView.init<A>(value:total:)(&v39, &v38, &type metadata for Double, v26);
  *v18 = swift_getKeyPath(&unk_1EE4F0);
  v27 = sub_5440(&qword_25FA98);
  swift_storeEnumTagMultiPayload(v18, v27, 0);
  v28 = (_QWORD *)((char *)v18 + v15[5]);
  *v28 = swift_getKeyPath(&unk_1EE520);
  v29 = sub_5440(&qword_25F208);
  swift_storeEnumTagMultiPayload(v28, v29, 0);
  v30 = (char *)v18 + v15[6];
  v31 = v35;
  *(_QWORD *)v30 = a3;
  *((_QWORD *)v30 + 1) = v31;
  v30[16] = v36 & 1;
  *(_QWORD *)((char *)v18 + v15[7]) = a1;
  *((_BYTE *)v18 + v15[8]) = v25;
  *(double *)((char *)v18 + v15[9]) = a8;
  *(double *)((char *)v18 + v15[10]) = a9;
  sub_21C88((uint64_t)v18, (uint64_t)v20, type metadata accessor for DeterminateProgressViewStyle);
  v32 = sub_7FD8(&qword_2668D0, &qword_2668C8, (uint64_t)&protocol conformance descriptor for ProgressView<A, B>);
  v33 = sub_6FD0(&qword_2668E0, type metadata accessor for DeterminateProgressViewStyle, (uint64_t)&protocol conformance descriptor for DeterminateProgressViewStyle);
  swift_retain(a1);
  View.progressViewStyle<A>(_:)(v20, v21, v15, v32, v33);
  sub_224DC((uint64_t)v20, type metadata accessor for DeterminateProgressViewStyle);
  return (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v24, v21);
}

uint64_t sub_129E68@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  int *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  char v25;
  _QWORD v26[2];

  v24 = a2;
  v3 = (int *)type metadata accessor for InDeterminateProgressViewStyle(0);
  v4 = __chkstk_darwin(v3);
  v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v24 - v7;
  v9 = sub_5440(&qword_2668C8);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *a1;
  v15 = *((_BYTE *)a1 + 8);
  v16 = a1[2];
  v17 = a1[3];
  ProgressView<>.init<>()(v11);
  v25 = 1;
  swift_retain(v14);
  State.init(wrappedValue:)(v26, &v25, &type metadata for Bool);
  v18 = v26[1];
  *v6 = v26[0];
  *((_QWORD *)v6 + 1) = v18;
  v19 = &v6[v3[5]];
  *(_QWORD *)v19 = swift_getKeyPath(&unk_1EE520);
  v20 = sub_5440(&qword_25F208);
  swift_storeEnumTagMultiPayload(v19, v20, 0);
  *(_QWORD *)&v6[v3[6]] = v14;
  v6[v3[7]] = v15;
  *(_QWORD *)&v6[v3[8]] = v16;
  *(_QWORD *)&v6[v3[9]] = v17;
  sub_21C88((uint64_t)v6, (uint64_t)v8, type metadata accessor for InDeterminateProgressViewStyle);
  v21 = sub_7FD8(&qword_2668D0, &qword_2668C8, (uint64_t)&protocol conformance descriptor for ProgressView<A, B>);
  v22 = sub_6FD0(&qword_2668D8, type metadata accessor for InDeterminateProgressViewStyle, (uint64_t)&protocol conformance descriptor for InDeterminateProgressViewStyle);
  View.progressViewStyle<A>(_:)(v8, v9, v3, v21, v22);
  sub_224DC((uint64_t)v8, type metadata accessor for InDeterminateProgressViewStyle);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, v9);
}

uint64_t sub_12A074@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>, double a6@<D0>)
{
  int *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  char v37;

  v33 = a4;
  v32 = a3;
  v34 = a5;
  v9 = (int *)type metadata accessor for DeterminateProgressViewStyle(0);
  v10 = __chkstk_darwin(v9);
  v12 = (uint64_t *)((char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v10);
  v14 = (char *)&v32 - v13;
  v15 = sub_5440(&qword_2668C8);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v32 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = *a1;
  v20 = *((_BYTE *)a1 + 8);
  v22 = a1[2];
  v21 = a1[3];
  v36 = a6;
  v37 = 0;
  v35 = 0x3FF0000000000000;
  v23 = sub_3CB54();
  ProgressView.init<A>(value:total:)(&v36, &v35, &type metadata for Double, v23);
  *v12 = swift_getKeyPath(&unk_1EE4F0);
  v24 = sub_5440(&qword_25FA98);
  swift_storeEnumTagMultiPayload(v12, v24, 0);
  v25 = (_QWORD *)((char *)v12 + v9[5]);
  *v25 = swift_getKeyPath(&unk_1EE520);
  v26 = sub_5440(&qword_25F208);
  swift_storeEnumTagMultiPayload(v25, v26, 0);
  v27 = (char *)v12 + v9[6];
  v28 = v32;
  *(_QWORD *)v27 = a2;
  *((_QWORD *)v27 + 1) = v28;
  v27[16] = v33 & 1;
  *(_QWORD *)((char *)v12 + v9[7]) = v19;
  *((_BYTE *)v12 + v9[8]) = v20;
  *(_QWORD *)((char *)v12 + v9[9]) = v22;
  *(_QWORD *)((char *)v12 + v9[10]) = v21;
  sub_21C88((uint64_t)v12, (uint64_t)v14, type metadata accessor for DeterminateProgressViewStyle);
  v29 = sub_7FD8(&qword_2668D0, &qword_2668C8, (uint64_t)&protocol conformance descriptor for ProgressView<A, B>);
  v30 = sub_6FD0(&qword_2668E0, type metadata accessor for DeterminateProgressViewStyle, (uint64_t)&protocol conformance descriptor for DeterminateProgressViewStyle);
  swift_retain(v19);
  View.progressViewStyle<A>(_:)(v14, v15, v9, v29, v30);
  sub_224DC((uint64_t)v14, type metadata accessor for DeterminateProgressViewStyle);
  return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v18, v15);
}

uint64_t type metadata accessor for InDeterminateProgressViewStyle(uint64_t a1)
{
  return sub_1FE90(a1, qword_2667E8, (uint64_t)&nominal type descriptor for InDeterminateProgressViewStyle);
}

uint64_t sub_12A2F4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &opaque type descriptor for <<opaque return type of DeterminateProgressViewStyle.makeBody(configuration:)>>, 1);
}

uint64_t sub_12A304(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &opaque type descriptor for <<opaque return type of InDeterminateProgressViewStyle.makeBody(configuration:)>>, 1);
}

unint64_t sub_12A318()
{
  unint64_t result;

  result = qword_2666E0;
  if (!qword_2666E0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for SpinnerStyle, &type metadata for SpinnerStyle);
    atomic_store(result, (unint64_t *)&qword_2666E0);
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for DeterminateProgressViewStyle(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = sub_5440(&qword_25FA98);
    if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
    {
      v8 = type metadata accessor for LayoutDirection(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      v9 = a1;
      v10 = v7;
      v11 = 1;
    }
    else
    {
      v13 = *a2;
      *a1 = *a2;
      swift_retain(v13);
      v9 = a1;
      v10 = v7;
      v11 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v10, v11);
    v14 = a3[5];
    v15 = (_QWORD *)((char *)a1 + v14);
    v16 = (_QWORD *)((char *)a2 + v14);
    v17 = sub_5440(&qword_25F208);
    if (swift_getEnumCaseMultiPayload(v16, v17) == 1)
    {
      v18 = type metadata accessor for BlendMode(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v15, v16, v18);
      v19 = v15;
      v20 = v17;
      v21 = 1;
    }
    else
    {
      v22 = *v16;
      *v15 = *v16;
      swift_retain(v22);
      v19 = v15;
      v20 = v17;
      v21 = 0;
    }
    swift_storeEnumTagMultiPayload(v19, v20, v21);
    v23 = a3[6];
    v24 = a3[7];
    v25 = (char *)a1 + v23;
    v26 = (char *)a2 + v23;
    *(_OWORD *)v25 = *(_OWORD *)v26;
    v25[16] = v26[16];
    v12 = *(_QWORD *)((char *)a2 + v24);
    *(_QWORD *)((char *)a1 + v24) = v12;
    v27 = a3[9];
    *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
    *(_QWORD *)((char *)a1 + v27) = *(_QWORD *)((char *)a2 + v27);
    *(_QWORD *)((char *)a1 + a3[10]) = *(_QWORD *)((char *)a2 + a3[10]);
  }
  swift_retain(v12);
  return a1;
}

double destroy for DeterminateProgressViewStyle(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  double result;

  v4 = sub_5440(&qword_25FA98);
  if (swift_getEnumCaseMultiPayload(a1, v4) == 1)
  {
    v5 = type metadata accessor for LayoutDirection(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  }
  else
  {
    swift_release(*a1);
  }
  v6 = (_QWORD *)((char *)a1 + *(int *)(a2 + 20));
  v7 = sub_5440(&qword_25F208);
  if (swift_getEnumCaseMultiPayload(v6, v7) == 1)
  {
    v8 = type metadata accessor for BlendMode(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v6, v8);
  }
  else
  {
    swift_release(*v6);
  }
  *(_QWORD *)&result = swift_release(*(_QWORD *)((char *)a1 + *(int *)(a2 + 28))).n128_u64[0];
  return result;
}

_QWORD *initializeWithCopy for DeterminateProgressViewStyle(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;

  v6 = sub_5440(&qword_25FA98);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for LayoutDirection(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a1;
    v9 = v6;
    v10 = 1;
  }
  else
  {
    v11 = *a2;
    *a1 = *a2;
    swift_retain(v11);
    v8 = a1;
    v9 = v6;
    v10 = 0;
  }
  swift_storeEnumTagMultiPayload(v8, v9, v10);
  v12 = a3[5];
  v13 = (_QWORD *)((char *)a1 + v12);
  v14 = (_QWORD *)((char *)a2 + v12);
  v15 = sub_5440(&qword_25F208);
  if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
  {
    v16 = type metadata accessor for BlendMode(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v13, v14, v16);
    v17 = v13;
    v18 = v15;
    v19 = 1;
  }
  else
  {
    v20 = *v14;
    *v13 = *v14;
    swift_retain(v20);
    v17 = v13;
    v18 = v15;
    v19 = 0;
  }
  swift_storeEnumTagMultiPayload(v17, v18, v19);
  v21 = a3[6];
  v22 = a3[7];
  v23 = (char *)a1 + v21;
  v24 = (char *)a2 + v21;
  *(_OWORD *)v23 = *(_OWORD *)v24;
  v23[16] = v24[16];
  v25 = *(_QWORD *)((char *)a2 + v22);
  *(_QWORD *)((char *)a1 + v22) = v25;
  v26 = a3[9];
  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  *(_QWORD *)((char *)a1 + v26) = *(_QWORD *)((char *)a2 + v26);
  *(_QWORD *)((char *)a1 + a3[10]) = *(_QWORD *)((char *)a2 + a3[10]);
  swift_retain(v25);
  return a1;
}

_QWORD *assignWithCopy for DeterminateProgressViewStyle(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  if (a1 != a2)
  {
    sub_B414((uint64_t)a1, &qword_25FA98);
    v6 = sub_5440(&qword_25FA98);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for LayoutDirection(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = v6;
      v10 = 1;
    }
    else
    {
      v11 = *a2;
      *a1 = *a2;
      swift_retain(v11);
      v8 = a1;
      v9 = v6;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
    v12 = a3[5];
    v13 = (_QWORD *)((char *)a1 + v12);
    v14 = (_QWORD *)((char *)a2 + v12);
    sub_B414((uint64_t)a1 + v12, &qword_25F208);
    v15 = sub_5440(&qword_25F208);
    if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
    {
      v16 = type metadata accessor for BlendMode(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v13, v14, v16);
      v17 = v13;
      v18 = v15;
      v19 = 1;
    }
    else
    {
      v20 = *v14;
      *v13 = *v14;
      swift_retain(v20);
      v17 = v13;
      v18 = v15;
      v19 = 0;
    }
    swift_storeEnumTagMultiPayload(v17, v18, v19);
  }
  v21 = a3[6];
  v22 = (char *)a1 + v21;
  v23 = (char *)a2 + v21;
  v24 = *(_OWORD *)v23;
  v22[16] = v23[16];
  *(_OWORD *)v22 = v24;
  v25 = a3[7];
  v26 = *(_QWORD *)((char *)a2 + v25);
  v27 = *(_QWORD *)((char *)a1 + v25);
  *(_QWORD *)((char *)a1 + v25) = v26;
  swift_retain(v26);
  swift_release(v27);
  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  *(_QWORD *)((char *)a1 + a3[9]) = *(_QWORD *)((char *)a2 + a3[9]);
  *(_QWORD *)((char *)a1 + a3[10]) = *(_QWORD *)((char *)a2 + a3[10]);
  return a1;
}

char *initializeWithTake for DeterminateProgressViewStyle(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;

  v6 = sub_5440(&qword_25FA98);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for LayoutDirection(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v8 = a3[5];
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = sub_5440(&qword_25F208);
  if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
  {
    v12 = type metadata accessor for BlendMode(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v9, v10, v12);
    swift_storeEnumTagMultiPayload(v9, v11, 1);
  }
  else
  {
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  v13 = a3[6];
  v14 = a3[7];
  v15 = &a1[v13];
  v16 = &a2[v13];
  *(_OWORD *)v15 = *(_OWORD *)v16;
  v15[16] = v16[16];
  *(_QWORD *)&a1[v14] = *(_QWORD *)&a2[v14];
  v17 = a3[9];
  a1[a3[8]] = a2[a3[8]];
  *(_QWORD *)&a1[v17] = *(_QWORD *)&a2[v17];
  *(_QWORD *)&a1[a3[10]] = *(_QWORD *)&a2[a3[10]];
  return a1;
}

char *assignWithTake for DeterminateProgressViewStyle(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;

  if (a1 != a2)
  {
    sub_B414((uint64_t)a1, &qword_25FA98);
    v6 = sub_5440(&qword_25FA98);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for LayoutDirection(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
    v8 = a3[5];
    v9 = &a1[v8];
    v10 = &a2[v8];
    sub_B414((uint64_t)&a1[v8], &qword_25F208);
    v11 = sub_5440(&qword_25F208);
    if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
    {
      v12 = type metadata accessor for BlendMode(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v9, v10, v12);
      swift_storeEnumTagMultiPayload(v9, v11, 1);
    }
    else
    {
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    }
  }
  v13 = a3[6];
  v14 = a3[7];
  v15 = &a1[v13];
  v16 = &a2[v13];
  *(_OWORD *)v15 = *(_OWORD *)v16;
  v15[16] = v16[16];
  v17 = *(_QWORD *)&a1[v14];
  *(_QWORD *)&a1[v14] = *(_QWORD *)&a2[v14];
  swift_release(v17);
  v18 = a3[9];
  a1[a3[8]] = a2[a3[8]];
  *(_QWORD *)&a1[v18] = *(_QWORD *)&a2[v18];
  *(_QWORD *)&a1[a3[10]] = *(_QWORD *)&a2[a3[10]];
  return a1;
}

uint64_t getEnumTagSinglePayload for DeterminateProgressViewStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_12ABC8);
}

uint64_t sub_12ABC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v14;

  v6 = sub_5440(&qword_260A20);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = sub_5440(&qword_25F228);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = *(_QWORD *)(a1 + *(int *)(a3 + 28));
  if (v14 >= 0xFFFFFFFF)
    LODWORD(v14) = -1;
  return (v14 + 1);
}

uint64_t storeEnumTagSinglePayload for DeterminateProgressViewStyle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_12AC84);
}

uint64_t sub_12AC84(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v8 = sub_5440(&qword_260A20);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  result = sub_5440(&qword_25F228);
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  *(_QWORD *)(a1 + *(int *)(a4 + 28)) = (a2 - 1);
  return result;
}

void sub_12AD30(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[7];

  sub_2ADCC(319, (unint64_t *)&qword_260A90, (uint64_t (*)(uint64_t))&type metadata accessor for LayoutDirection);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_2ADCC(319, (unint64_t *)&qword_25F2B0, (uint64_t (*)(uint64_t))&type metadata accessor for BlendMode);
    if (v5 <= 0x3F)
    {
      v6[1] = *(_QWORD *)(v4 - 8) + 64;
      v6[2] = &unk_1EE640;
      v6[3] = (char *)&value witness table for Builtin.NativeObject + 64;
      v6[4] = &unk_1EE658;
      v6[5] = (char *)&value witness table for Builtin.Int64 + 64;
      v6[6] = (char *)&value witness table for Builtin.Int64 + 64;
      swift_initStructMetadata(a1, 256, 7, v6, a1 + 16);
    }
  }
}

_QWORD *initializeBufferWithCopyOfBuffer for InDeterminateProgressViewStyle(_BYTE *a1, _QWORD *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v14 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    *a1 = *(_BYTE *)a2;
    v7 = a2[1];
    v4[1] = v7;
    v8 = a3[5];
    v9 = (_QWORD *)((char *)v4 + v8);
    v10 = (_QWORD *)((char *)a2 + v8);
    swift_retain(v7);
    v11 = sub_5440(&qword_25F208);
    if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
    {
      v12 = type metadata accessor for BlendMode(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v9, v10, v12);
      v13 = 1;
    }
    else
    {
      v15 = *v10;
      *v9 = *v10;
      swift_retain(v15);
      v13 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v11, v13);
    v16 = a3[6];
    v17 = a3[7];
    v14 = *(_QWORD *)((char *)a2 + v16);
    *(_QWORD *)((char *)v4 + v16) = v14;
    *((_BYTE *)v4 + v17) = *((_BYTE *)a2 + v17);
    v18 = a3[9];
    *(_QWORD *)((char *)v4 + a3[8]) = *(_QWORD *)((char *)a2 + a3[8]);
    *(_QWORD *)((char *)v4 + v18) = *(_QWORD *)((char *)a2 + v18);
  }
  swift_retain(v14);
  return v4;
}

double destroy for InDeterminateProgressViewStyle(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  double result;

  swift_release(*(_QWORD *)(a1 + 8));
  v4 = (_QWORD *)(a1 + *(int *)(a2 + 20));
  v5 = sub_5440(&qword_25F208);
  if (swift_getEnumCaseMultiPayload(v4, v5) == 1)
  {
    v6 = type metadata accessor for BlendMode(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v4, v6);
  }
  else
  {
    swift_release(*v4);
  }
  *(_QWORD *)&result = swift_release(*(_QWORD *)(a1 + *(int *)(a2 + 24))).n128_u64[0];
  return result;
}

uint64_t initializeWithCopy for InDeterminateProgressViewStyle(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  v7 = a3[5];
  v8 = (uint64_t *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  swift_retain(v6);
  v10 = sub_5440(&qword_25F208);
  if (swift_getEnumCaseMultiPayload(v9, v10) == 1)
  {
    v11 = type metadata accessor for BlendMode(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v8, v9, v11);
    v12 = 1;
  }
  else
  {
    v13 = *v9;
    *v8 = *v9;
    swift_retain(v13);
    v12 = 0;
  }
  swift_storeEnumTagMultiPayload(v8, v10, v12);
  v14 = a3[6];
  v15 = a3[7];
  v16 = *(_QWORD *)(a2 + v14);
  *(_QWORD *)(a1 + v14) = v16;
  *(_BYTE *)(a1 + v15) = *(_BYTE *)(a2 + v15);
  v17 = a3[9];
  *(_QWORD *)(a1 + a3[8]) = *(_QWORD *)(a2 + a3[8]);
  *(_QWORD *)(a1 + v17) = *(_QWORD *)(a2 + v17);
  swift_retain(v16);
  return a1;
}

uint64_t assignWithCopy for InDeterminateProgressViewStyle(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v7;
  swift_retain(v7);
  swift_release(v6);
  if (a1 != a2)
  {
    v8 = a3[5];
    v9 = (uint64_t *)(a1 + v8);
    v10 = (uint64_t *)(a2 + v8);
    sub_B414(a1 + v8, &qword_25F208);
    v11 = sub_5440(&qword_25F208);
    if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
    {
      v12 = type metadata accessor for BlendMode(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v9, v10, v12);
      v13 = 1;
    }
    else
    {
      v14 = *v10;
      *v9 = *v10;
      swift_retain(v14);
      v13 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v11, v13);
  }
  v15 = a3[6];
  v16 = *(_QWORD *)(a2 + v15);
  v17 = *(_QWORD *)(a1 + v15);
  *(_QWORD *)(a1 + v15) = v16;
  swift_retain(v16);
  swift_release(v17);
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_QWORD *)(a1 + a3[8]) = *(_QWORD *)(a2 + a3[8]);
  *(_QWORD *)(a1 + a3[9]) = *(_QWORD *)(a2 + a3[9]);
  return a1;
}

_OWORD *initializeWithTake for InDeterminateProgressViewStyle(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_5440(&qword_25F208);
  if (swift_getEnumCaseMultiPayload(v8, v9) == 1)
  {
    v10 = type metadata accessor for BlendMode(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v7, v8, v10);
    swift_storeEnumTagMultiPayload(v7, v9, 1);
  }
  else
  {
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  v11 = a3[7];
  *(_QWORD *)((char *)a1 + a3[6]) = *(_QWORD *)((char *)a2 + a3[6]);
  *((_BYTE *)a1 + v11) = *((_BYTE *)a2 + v11);
  v12 = a3[9];
  *(_QWORD *)((char *)a1 + a3[8]) = *(_QWORD *)((char *)a2 + a3[8]);
  *(_QWORD *)((char *)a1 + v12) = *(_QWORD *)((char *)a2 + v12);
  return a1;
}

uint64_t assignWithTake for InDeterminateProgressViewStyle(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v6 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_release(v6);
  if (a1 != a2)
  {
    v7 = a3[5];
    v8 = (void *)(a1 + v7);
    v9 = (const void *)(a2 + v7);
    sub_B414(a1 + v7, &qword_25F208);
    v10 = sub_5440(&qword_25F208);
    if (swift_getEnumCaseMultiPayload(v9, v10) == 1)
    {
      v11 = type metadata accessor for BlendMode(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v8, v9, v11);
      swift_storeEnumTagMultiPayload(v8, v10, 1);
    }
    else
    {
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    }
  }
  v12 = a3[6];
  v13 = *(_QWORD *)(a1 + v12);
  *(_QWORD *)(a1 + v12) = *(_QWORD *)(a2 + v12);
  swift_release(v13);
  v14 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_QWORD *)(a1 + v14) = *(_QWORD *)(a2 + v14);
  *(_QWORD *)(a1 + a3[9]) = *(_QWORD *)(a2 + a3[9]);
  return a1;
}

uint64_t getEnumTagSinglePayload for InDeterminateProgressViewStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_12B3B0);
}

uint64_t sub_12B3B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = sub_5440(&qword_25F228);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 20), a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 24));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for InDeterminateProgressViewStyle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_12B440);
}

uint64_t sub_12B440(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_5440(&qword_25F228);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + *(int *)(a4 + 20), a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 24)) = (a2 - 1);
  return result;
}

void sub_12B4C0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[6];

  v4[0] = &unk_1EE690;
  sub_2ADCC(319, (unint64_t *)&qword_25F2B0, (uint64_t (*)(uint64_t))&type metadata accessor for BlendMode);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(v2 - 8) + 64;
    v4[2] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[3] = &unk_1EE658;
    v4[4] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[5] = (char *)&value witness table for Builtin.Int64 + 64;
    swift_initStructMetadata(a1, 256, 6, v4, a1 + 16);
  }
}

uint64_t destroy for ProgressViewModel(_QWORD *a1)
{
  return swift_release(*a1);
}

uint64_t initializeWithCopy for ProgressViewModel(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a2;
  *(_QWORD *)a1 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
  swift_retain(v3);
  return a1;
}

uint64_t *assignWithCopy for ProgressViewModel(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_retain(v4);
  swift_release(v5);
  *((_BYTE *)a1 + 8) = *((_BYTE *)a2 + 8);
  a1[2] = a2[2];
  a1[3] = a2[3];
  return a1;
}

uint64_t *assignWithTake for ProgressViewModel(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a1;
  *a1 = *a2;
  swift_release(v4);
  *((_BYTE *)a1 + 8) = *((_BYTE *)a2 + 8);
  *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
  return a1;
}

ValueMetadata *type metadata accessor for ProgressViewModel()
{
  return &type metadata for ProgressViewModel;
}

uint64_t storeEnumTagSinglePayload for SpinnerStyle(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_12B6AC + 4 * byte_1EE4E5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_12B6E0 + 4 * byte_1EE4E0[v4]))();
}

uint64_t sub_12B6E0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_12B6E8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x12B6F0);
  return result;
}

uint64_t sub_12B6FC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x12B704);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_12B708(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_12B710(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SpinnerStyle()
{
  return &type metadata for SpinnerStyle;
}

uint64_t sub_12B72C()
{
  return sub_3CC54(&qword_266830, &qword_2666D0, (void (*)(void))sub_12B760);
}

unint64_t sub_12B760()
{
  unint64_t result;
  uint64_t v1;

  result = qword_266838;
  if (!qword_266838)
  {
    v1 = sub_7EF8(&qword_2666C8);
    sub_7FD8(&qword_266840, &qword_2666C0, (uint64_t)&protocol conformance descriptor for ZStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_266838);
  }
  return result;
}

uint64_t sub_12B7E4()
{
  return sub_3CC54(&qword_266848, &qword_266850, (void (*)(void))sub_12B818);
}

uint64_t sub_12B818()
{
  return sub_3CC54(&qword_266858, &qword_266860, (void (*)(void))sub_12B83C);
}

uint64_t sub_12B83C()
{
  return sub_3CC54(&qword_266868, &qword_266870, (void (*)(void))sub_12B860);
}

unint64_t sub_12B860()
{
  unint64_t result;
  uint64_t v1;

  result = qword_266878;
  if (!qword_266878)
  {
    v1 = sub_7EF8(&qword_266880);
    sub_3CC54(&qword_266888, &qword_266890, (void (*)(void))sub_12B904);
    sub_7FD8(&qword_25F440, &qword_25F448, (uint64_t)&protocol conformance descriptor for _AnimationModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_266878);
  }
  return result;
}

uint64_t sub_12B904()
{
  return sub_3CC54(&qword_266898, &qword_2668A0, (void (*)(void))sub_12B928);
}

unint64_t sub_12B928()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2668A8;
  if (!qword_2668A8)
  {
    v1 = sub_7EF8(&qword_2668B0);
    sub_7FD8(&qword_2668B8, &qword_2668C0, (uint64_t)&protocol conformance descriptor for StrokeShapeView<A, B, C>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_2668A8);
  }
  return result;
}

uint64_t sub_12B9AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v1 = type metadata accessor for InDeterminateProgressViewStyle(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release(*(_QWORD *)(v0 + v4 + 8));
  v6 = (_QWORD *)(v0 + v4 + *(int *)(v1 + 20));
  v7 = sub_5440(&qword_25F208);
  if (swift_getEnumCaseMultiPayload(v6, v7) == 1)
  {
    v8 = type metadata accessor for BlendMode(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v6, v8);
  }
  else
  {
    swift_release(*v6);
  }
  swift_release(*(_QWORD *)(v0 + v4 + *(int *)(v1 + 24)));
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

double sub_12BA78()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for InDeterminateProgressViewStyle(0) - 8) + 80);
  return sub_129950((char *)(v0 + ((v1 + 16) & ~v1)));
}

_QWORD *sub_12BAA4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[5];
  v3 = a1[7];
  v4 = a1[23];
  v5 = a1[24];
  v6 = a1[25];
  v7 = a1[26];
  swift_retain(a1[21]);
  swift_bridgeObjectRetain(v2);
  swift_retain(v3);
  sub_64644(v4, v5);
  sub_64644(v6, v7);
  return a1;
}

_QWORD *sub_12BB1C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[5];
  v3 = a1[21];
  v4 = a1[23];
  v5 = a1[24];
  v6 = a1[25];
  v7 = a1[26];
  swift_release(a1[7]);
  swift_bridgeObjectRelease(v2);
  swift_release(v3);
  sub_64654(v4, v5);
  sub_64654(v6, v7);
  return a1;
}

_QWORD *sub_12BB94(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = a1[5];
  v3 = a1[15];
  v4 = a1[17];
  swift_bridgeObjectRetain(a1[3]);
  swift_retain(v2);
  swift_bridgeObjectRetain(v3);
  swift_retain(v4);
  return a1;
}

_QWORD *sub_12BBE8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = a1[3];
  v3 = a1[5];
  v4 = a1[15];
  swift_release(a1[17]);
  swift_bridgeObjectRelease(v4);
  swift_release(v3);
  swift_bridgeObjectRelease(v2);
  return a1;
}

uint64_t YearInReviewErrorView.init(retry:localizedYear:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  _QWORD *v10;
  uint64_t v11;
  uint64_t result;

  v10 = (_QWORD *)((char *)a5 + *(int *)(type metadata accessor for YearInReviewErrorView(0) + 24));
  *v10 = swift_getKeyPath(&unk_1EE710);
  v11 = sub_5440(&qword_25F548);
  result = swift_storeEnumTagMultiPayload(v10, v11, 0);
  *a5 = a1;
  a5[1] = a2;
  a5[2] = a3;
  a5[3] = a4;
  return result;
}

uint64_t type metadata accessor for YearInReviewErrorView(uint64_t a1)
{
  uint64_t result;

  result = qword_2669E8;
  if (!qword_2669E8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for YearInReviewErrorView);
  return result;
}

uint64_t YearInReviewErrorView.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  double v36;
  double v37;
  double v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  unsigned int v49;
  uint64_t v50;
  int v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  double v75;
  double v76;
  double v77;
  double v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t KeyPath;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t *v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;

  v123 = a1;
  v2 = type metadata accessor for ColorScheme(0);
  v121 = *(_QWORD *)(v2 - 8);
  v122 = v2;
  __chkstk_darwin(v2);
  v120 = (char *)&v103 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v119 = type metadata accessor for ToolbarButtonStyle(0);
  v4 = __chkstk_darwin(v119);
  v117 = (uint64_t *)((char *)&v103 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v4);
  v118 = (uint64_t)&v103 - v6;
  v7 = type metadata accessor for SizeConstants.Spacing(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v103 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for SizeConstants(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v103 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_5440(&qword_266910);
  __chkstk_darwin(v13);
  v15 = (char *)&v103 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_5440(&qword_266918);
  __chkstk_darwin(v16);
  v18 = (char *)&v103 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v107 = sub_5440(&qword_266920);
  v106 = *(_QWORD *)(v107 - 8);
  __chkstk_darwin(v107);
  v20 = (char *)&v103 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v104 = sub_5440(&qword_266928);
  __chkstk_darwin(v104);
  v22 = (char *)&v103 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v108 = sub_5440(&qword_266930);
  __chkstk_darwin(v108);
  v24 = (char *)&v103 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v110 = sub_5440(&qword_266938);
  __chkstk_darwin(v110);
  v111 = (uint64_t)&v103 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = sub_5440(&qword_266940);
  v115 = *(_QWORD *)(v26 - 8);
  v116 = v26;
  __chkstk_darwin(v26);
  v113 = (char *)&v103 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v109 = sub_5440(&qword_266948);
  v28 = __chkstk_darwin(v109);
  v112 = (char *)&v103 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v15 = static HorizontalAlignment.center.getter(v28);
  *((_QWORD *)v15 + 1) = 0;
  v15[16] = 1;
  v30 = sub_5440(&qword_266950);
  v31 = sub_12C4B8(v1, &v15[*(int *)(v30 + 44)]);
  v32 = static Edge.Set.horizontal.getter(v31);
  v33 = *(int *)(type metadata accessor for YearInReviewErrorView(0) + 24);
  v114 = v1;
  v103 = v1 + v33;
  sub_3168C((uint64_t)v12);
  sub_1E428((uint64_t)v12, (uint64_t)v9, type metadata accessor for SizeConstants.Environment);
  sub_224DC((uint64_t)v12, type metadata accessor for SizeConstants);
  v105 = v9;
  v34 = sub_224DC((uint64_t)v9, type metadata accessor for SizeConstants.Spacing);
  v38 = EdgeInsets.init(_all:)(v34, 32.0, v35, v36, v37);
  v40 = v39;
  v42 = v41;
  v44 = v43;
  sub_B3D0((uint64_t)v15, (uint64_t)v18, &qword_266910);
  v45 = &v18[*(int *)(v16 + 36)];
  *v45 = v32;
  *((double *)v45 + 1) = v38;
  *((_QWORD *)v45 + 2) = v40;
  *((_QWORD *)v45 + 3) = v42;
  *((_QWORD *)v45 + 4) = v44;
  v45[40] = 0;
  v46 = sub_B414((uint64_t)v15, &qword_266910);
  v47 = static Axis.Set.horizontal.getter(v46);
  v48 = v47;
  v49 = static Axis.Set.vertical.getter(v47);
  v50 = Axis.Set.init(rawValue:)(0);
  v51 = Axis.Set.init(rawValue:)(v50);
  if (Axis.Set.init(rawValue:)(v51 & v48) != v48)
    v50 = Axis.Set.init(rawValue:)(v50 | v48);
  v52 = Axis.Set.init(rawValue:)(v50);
  v53 = Axis.Set.init(rawValue:)(v52 & v49);
  if (v53 != v49)
  {
    v53 = Axis.Set.init(rawValue:)(v50 | v49);
    v50 = v53;
  }
  v54 = static Alignment.top.getter(v53);
  v56 = v55;
  v57 = sub_12DB08();
  View.containerRelativeFrame(_:alignment:)(v50, v54, v56, v16, v57);
  sub_B414((uint64_t)v18, &qword_266918);
  v58 = _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0();
  v60 = v59;
  v61 = Color.init(hexString:)(0x423243374246, 0xE600000000000000);
  LOBYTE(v56) = static Edge.Set.all.getter(v61);
  v62 = v106;
  v63 = v107;
  (*(void (**)(char *, char *, uint64_t))(v106 + 16))(v22, v20, v107);
  v64 = &v22[*(int *)(v104 + 36)];
  *(_QWORD *)v64 = v61;
  v64[8] = v56;
  *((_QWORD *)v64 + 2) = v58;
  *((_QWORD *)v64 + 3) = v60;
  v65 = (*(uint64_t (**)(char *, uint64_t))(v62 + 8))(v20, v63);
  v66 = static Alignment.top.getter(v65);
  v68 = v67;
  v70 = *(_QWORD *)(v114 + 16);
  v69 = *(_QWORD *)(v114 + 24);
  v71 = swift_bridgeObjectRetain(v69);
  v72 = static Edge.Set.horizontal.getter(v71);
  sub_3168C((uint64_t)v12);
  v73 = (uint64_t)v105;
  sub_1E428((uint64_t)v12, (uint64_t)v105, type metadata accessor for SizeConstants.Environment);
  sub_224DC((uint64_t)v12, type metadata accessor for SizeConstants);
  v74 = sub_224DC(v73, type metadata accessor for SizeConstants.Spacing);
  v78 = EdgeInsets.init(_all:)(v74, 32.0, v75, v76, v77);
  v80 = v79;
  v82 = v81;
  v84 = v83;
  sub_B3D0((uint64_t)v22, (uint64_t)v24, &qword_266928);
  v85 = &v24[*(int *)(v108 + 36)];
  *(_QWORD *)v85 = v70;
  *((_QWORD *)v85 + 1) = v69;
  v85[16] = v72;
  *((double *)v85 + 3) = v78;
  *((_QWORD *)v85 + 4) = v80;
  *((_QWORD *)v85 + 5) = v82;
  *((_QWORD *)v85 + 6) = v84;
  v85[56] = 0;
  *((_QWORD *)v85 + 8) = v66;
  *((_QWORD *)v85 + 9) = v68;
  sub_B414((uint64_t)v22, &qword_266928);
  v86 = v111;
  sub_B3D0((uint64_t)v24, v111, &qword_266930);
  sub_B414((uint64_t)v24, &qword_266930);
  KeyPath = swift_getKeyPath(&unk_1EE738);
  v88 = (uint64_t)v117;
  *v117 = KeyPath;
  v89 = sub_5440(&qword_25E948);
  swift_storeEnumTagMultiPayload(v88, v89, 0);
  v90 = v118;
  sub_21C88(v88, v118, type metadata accessor for ToolbarButtonStyle);
  v91 = sub_12DB94();
  sub_6FD0((unint64_t *)&qword_2655F8, type metadata accessor for ToolbarButtonStyle, (uint64_t)&protocol conformance descriptor for ToolbarButtonStyle);
  v92 = v113;
  View.buttonStyle<A>(_:)(v90, v110, v119, v91);
  sub_224DC(v90, type metadata accessor for ToolbarButtonStyle);
  sub_B414(v86, &qword_266938);
  v93 = swift_getKeyPath(&unk_1EE738);
  v95 = v120;
  v94 = v121;
  v96 = v122;
  (*(void (**)(char *, _QWORD, uint64_t))(v121 + 104))(v120, enum case for ColorScheme.dark(_:), v122);
  v97 = (uint64_t)v112;
  v98 = (uint64_t *)&v112[*(int *)(v109 + 36)];
  v99 = sub_5440(&qword_25EE58);
  (*(void (**)(char *, char *, uint64_t))(v94 + 16))((char *)v98 + *(int *)(v99 + 28), v95, v96);
  *v98 = v93;
  v101 = v115;
  v100 = v116;
  (*(void (**)(uint64_t, char *, uint64_t))(v115 + 16))(v97, v92, v116);
  (*(void (**)(char *, uint64_t))(v94 + 8))(v95, v96);
  (*(void (**)(char *, uint64_t))(v101 + 8))(v92, v100);
  return sub_167A4(v97, v123, &qword_266948);
}

uint64_t sub_12C4B8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(_QWORD);
  void (*v56)(char *, uint64_t);
  void (*v57)(char *, uint64_t);
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t KeyPath;
  char *v62;
  uint64_t *v63;
  void (*v64)(char *, uint64_t);
  unint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t OpaqueTypeConformance2;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  void (**v75)(char *, char *, uint64_t);
  uint64_t v76;
  uint64_t v77;
  char *v78;
  void (*v79)(char *, uint64_t);
  int v80;
  void (**v81)(char *, char *, uint64_t);
  char *v82;
  int v83;
  char *v84;
  uint64_t v85;
  uint64_t result;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  char *v90;
  void (*v91)(char *, char *, uint64_t);
  uint64_t v92;
  char *v93;
  char *v94;
  void (*v95)(char *, char *, uint64_t);
  uint64_t v96;
  void (*v97)(char *, uint64_t);
  char *v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  char *v107;
  char *v108;
  uint64_t v109;
  char *v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  void (**v129)(char *, char *, uint64_t);
  char *v130;
  uint64_t v131;
  char *v132;
  char *v133;
  char *v134;
  char *v135;
  uint64_t v136;
  void (*v137)(char *, uint64_t);
  char *v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  char *v158;
  uint64_t v159;
  char *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  char *v170;
  unint64_t v171;
  uint64_t v172;
  char *v173;
  uint64_t v174;
  uint64_t v175;
  char *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t *v188;
  uint64_t v189;
  void (*v190)(char *, char *, uint64_t);
  char *v191;
  uint64_t v192;
  uint64_t v193;
  _QWORD *v194;
  int *v195;
  char *v196;
  void (*v197)(char *, uint64_t);
  uint64_t v198;
  uint64_t v199;
  char *v200;
  uint64_t v201;
  uint64_t v202;
  char *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  char *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  char *v215;
  char *v216;
  char *v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  char *v221;
  uint64_t v222;
  char *v223;
  uint64_t v224;
  char *v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  char *v230;
  uint64_t v231;
  uint64_t v232;
  _QWORD *v233;
  void (*v234)(char *, uint64_t);
  void (*v235)(uint64_t, char *, uint64_t);
  void (*v236)(char *, uint64_t);
  unsigned int v237;
  void (*v238)(char *, uint64_t);
  void (*v239)(char *, _QWORD, uint64_t);
  uint64_t v240;
  char *v241;
  char *v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  char *v248;
  char *v249;
  char *v250;
  char *v251;
  uint64_t v252;
  void (**v253)(char *, char *, uint64_t);
  uint64_t v254;
  uint64_t v255;
  char *v256;
  void (*v257)(char *, uint64_t);
  uint64_t v258;
  char *v259;
  uint64_t v260;
  char *v261;
  uint64_t v262;
  uint64_t v263;
  char *v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  char *v268;
  uint64_t v269;
  uint64_t v270;
  char *v271;
  uint64_t v272;
  char *v273;
  uint64_t v274;
  char *v275;
  char *v276;
  _QWORD v277[2];

  v211 = a1;
  v233 = a2;
  v232 = type metadata accessor for ButtonBorderShape(0);
  v231 = *(_QWORD *)(v232 - 8);
  __chkstk_darwin(v232);
  v230 = (char *)&v198 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v227 = type metadata accessor for BorderedButtonStyle(0);
  v226 = *(_QWORD *)(v227 - 8);
  __chkstk_darwin(v227);
  v225 = (char *)&v198 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v219 = type metadata accessor for ControlSize(0);
  v218 = *(_QWORD *)(v219 - 8);
  __chkstk_darwin(v219);
  v217 = (char *)&v198 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for YearInReviewErrorView(0);
  v206 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v207 = v6;
  v208 = (uint64_t)&v198 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v212 = sub_5440(&qword_266A30);
  v210 = *(_QWORD *)(v212 - 8);
  __chkstk_darwin(v212);
  v209 = (char *)&v198 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v214 = sub_5440(&qword_266A38);
  __chkstk_darwin(v214);
  v215 = (char *)&v198 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v224 = sub_5440(&qword_266A40);
  v222 = *(_QWORD *)(v224 - 8);
  __chkstk_darwin(v224);
  v221 = (char *)&v198 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v213 = sub_5440(&qword_266A48);
  __chkstk_darwin(v213);
  v223 = (char *)&v198 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v220 = sub_5440(&qword_266A50);
  v11 = __chkstk_darwin(v220);
  v229 = (uint64_t)&v198 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v228 = (uint64_t)&v198 - v13;
  v205 = type metadata accessor for BlendMode(0);
  v204 = *(_QWORD *)(v205 - 8);
  __chkstk_darwin(v205);
  v203 = (char *)&v198 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v244 = sub_5440(&qword_25FE18);
  __chkstk_darwin(v244);
  v246 = (uint64_t)&v198 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v245 = sub_5440(&qword_266A58);
  __chkstk_darwin(v245);
  v247 = (uint64_t)&v198 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v266 = sub_5440(&qword_266A60);
  __chkstk_darwin(v266);
  v267 = (uint64_t)&v198 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v202 = sub_5440(&qword_266A68);
  v201 = *(_QWORD *)(v202 - 8);
  __chkstk_darwin(v202);
  v200 = (char *)&v198 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v199 = sub_5440(&qword_266A70);
  v19 = __chkstk_darwin(v199);
  v216 = (char *)&v198 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v258 = (uint64_t)&v198 - v21;
  v263 = sub_5440(&qword_25FE38);
  v22 = __chkstk_darwin(v263);
  v264 = (char *)&v198 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v261 = (char *)&v198 - v24;
  v25 = type metadata accessor for DynamicTypeSize(0);
  v257 = *(void (**)(char *, uint64_t))(v25 - 8);
  v26 = __chkstk_darwin(v25);
  v276 = (char *)&v198 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  v275 = (char *)&v198 - v28;
  v262 = sub_5440(&qword_25FE40);
  v29 = __chkstk_darwin(v262);
  v259 = (char *)&v198 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v29);
  v260 = (uint64_t)&v198 - v31;
  v32 = sub_5440(&qword_25FE08);
  __chkstk_darwin(v32);
  v256 = (char *)&v198 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = type metadata accessor for LocalizerLookupStrategy(0);
  v35 = *(_QWORD *)(v34 - 8);
  __chkstk_darwin(v34);
  v37 = (char *)&v198 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v272 = type metadata accessor for LocalizerDefaultValue(0);
  v250 = *(char **)(v272 - 8);
  __chkstk_darwin(v272);
  v39 = (char *)&v198 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = type metadata accessor for LocalizerRequest(0);
  __chkstk_darwin(v40);
  v42 = (char *)&v198 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = type metadata accessor for LocalizedText(0);
  v249 = *(char **)(v43 - 8);
  __chkstk_darwin(v43);
  v45 = (char *)&v198 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = sub_5440(&qword_25FE10);
  __chkstk_darwin(v46);
  v271 = (char *)&v198 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  v252 = sub_5440(&qword_266A78);
  v255 = *(_QWORD *)(v252 - 8);
  __chkstk_darwin(v252);
  v248 = (char *)&v198 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  v254 = sub_5440(&qword_266A80);
  v253 = *(void (***)(char *, char *, uint64_t))(v254 - 8);
  __chkstk_darwin(v254);
  v251 = (char *)&v198 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
  v270 = sub_5440(&qword_266A88);
  __chkstk_darwin(v270);
  v51 = (char *)&v198 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  v269 = sub_5440(&qword_266A90);
  v274 = *(_QWORD *)(v269 - 8);
  v52 = __chkstk_darwin(v269);
  v268 = (char *)&v198 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v52);
  v273 = (char *)&v198 - v54;
  LocalizerDefaultValue.init(stringLiteral:)("Sorry…", 8, 0);
  v55 = *(void (**)(_QWORD))(v35 + 104);
  v237 = enum case for LocalizerLookupStrategy.default(_:);
  v239 = (void (*)(char *, _QWORD, uint64_t))v55;
  v55(v37);
  static LocalizerRequest.string(forKey:with:defaultValue:using:)(0xD000000000000011, 0x80000000001FD130, 0, v39, v37);
  v56 = *(void (**)(char *, uint64_t))(v35 + 8);
  v242 = v37;
  v243 = v34;
  v238 = v56;
  v56(v37, v34);
  v57 = (void (*)(char *, uint64_t))*((_QWORD *)v250 + 1);
  v250 = v39;
  v58 = (uint64_t)v271;
  v236 = v57;
  v57(v39, v272);
  v241 = v42;
  v59 = LocalizedText.init(_:)(v42);
  v60 = static Font.title2.getter(v59);
  KeyPath = swift_getKeyPath(&unk_1EE7F0);
  v62 = v249;
  v235 = (void (*)(uint64_t, char *, uint64_t))*((_QWORD *)v249 + 2);
  v235(v58, v45, v43);
  v63 = (uint64_t *)(v58 + *(int *)(v46 + 36));
  *v63 = KeyPath;
  v63[1] = v60;
  v64 = (void (*)(char *, uint64_t))*((_QWORD *)v62 + 1);
  v249 = v45;
  v265 = v43;
  v234 = v64;
  v64(v45, v43);
  v65 = sub_7A518();
  v66 = v248;
  View.bold(_:)(1, v46, v65);
  sub_B414(v58, &qword_25FE10);
  v67 = enum case for Font.Design.serif (_:);
  v68 = type metadata accessor for Font.Design(0);
  v69 = *(_QWORD *)(v68 - 8);
  v70 = (uint64_t)v256;
  (*(void (**)(char *, uint64_t, uint64_t))(v69 + 104))(v256, v67, v68);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v69 + 56))(v70, 0, 1, v68);
  v240 = v46;
  v277[0] = v46;
  v277[1] = v65;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v277, &opaque type descriptor for <<opaque return type of View.bold(_:)>>, 1);
  v72 = v251;
  v73 = v252;
  View.fontDesign(_:)(v70, v252, OpaqueTypeConformance2);
  sub_B414(v70, &qword_25FE08);
  (*(void (**)(char *, uint64_t))(v255 + 8))(v66, v73);
  v74 = swift_getKeyPath(&unk_1EE820);
  v75 = v253;
  v76 = v254;
  v253[2](v51, v72, v254);
  v77 = *(int *)(v270 + 36);
  v256 = v51;
  v78 = &v51[v77];
  *(_QWORD *)v78 = v74;
  *((_QWORD *)v78 + 1) = 3;
  v78[16] = 0;
  v79 = v257;
  ((void (*)(char *, uint64_t))v75[1])(v72, v76);
  v80 = enum case for DynamicTypeSize.small(_:);
  v81 = (void (**)(char *, char *, uint64_t))*((_QWORD *)v79 + 13);
  v82 = v275;
  ((void (*)(char *, _QWORD, uint64_t))v81)(v275, enum case for DynamicTypeSize.small(_:), v25);
  v83 = enum case for DynamicTypeSize.accessibility1(_:);
  v84 = v276;
  ((void (*)(char *, _QWORD, uint64_t))v81)(v276, enum case for DynamicTypeSize.accessibility1(_:), v25);
  v85 = sub_6FD0(&qword_25FE98, (uint64_t (*)(uint64_t))&type metadata accessor for DynamicTypeSize, (uint64_t)&protocol conformance descriptor for DynamicTypeSize);
  result = dispatch thunk of static Comparable.<= infix(_:_:)(v82, v84, v25, v85);
  if ((result & 1) != 0)
  {
    v87 = v263;
    v88 = *(int *)(v263 + 48);
    LODWORD(v255) = v83;
    v89 = v261;
    v90 = &v261[v88];
    LODWORD(v254) = v80;
    v91 = (void (*)(char *, char *, uint64_t))*((_QWORD *)v79 + 4);
    v91(v261, v275, v25);
    v91(v90, v276, v25);
    v92 = *(int *)(v87 + 48);
    v253 = v81;
    v93 = v264;
    v94 = &v264[v92];
    v95 = (void (*)(char *, char *, uint64_t))*((_QWORD *)v79 + 2);
    v95(v264, v89, v25);
    v95(v94, v90, v25);
    v252 = v85;
    v96 = (uint64_t)v259;
    v91(v259, v93, v25);
    v97 = (void (*)(char *, uint64_t))*((_QWORD *)v79 + 1);
    v97(v94, v25);
    v98 = &v93[*(int *)(v87 + 48)];
    v91(v93, v89, v25);
    v91(v98, v90, v25);
    v99 = v262;
    v91((char *)(v96 + *(int *)(v262 + 36)), v98, v25);
    v257 = v97;
    v97(v93, v25);
    v100 = v260;
    sub_167A4(v96, v260, &qword_25FE40);
    v101 = sub_12E7B4();
    v102 = sub_7FD8(&qword_25FEA0, &qword_25FE40, (uint64_t)&protocol conformance descriptor for ClosedRange<A>);
    v103 = v268;
    v104 = v270;
    v105 = v101;
    v270 = v102;
    v106 = (uint64_t)v256;
    View.dynamicTypeSize<A>(_:)(v100, v104, v99, v105, v102);
    sub_B414(v100, &qword_25FE40);
    sub_B414(v106, &qword_266A88);
    (*(void (**)(char *, char *, uint64_t))(v274 + 32))(v273, v103, v269);
    v107 = v250;
    LocalizerDefaultValue.init(stringLiteral:)("Something went wrong. Please try again.", 39, 2);
    v108 = v242;
    v109 = v243;
    v239(v242, v237, v243);
    v110 = v241;
    static LocalizerRequest.string(forKey:with:defaultValue:using:)(0xD00000000000001ALL, 0x80000000001FD150, 0, v107, v108);
    v238(v108, v109);
    v236(v107, v272);
    v111 = v249;
    v112 = LocalizedText.init(_:)(v110);
    v113 = static Font.subheadline.getter(v112);
    v114 = swift_getKeyPath(&unk_1EE7F0);
    v115 = (uint64_t)v271;
    v116 = v265;
    v235((uint64_t)v271, v111, v265);
    v117 = (uint64_t *)(v115 + *(int *)(v240 + 36));
    *v117 = v114;
    v117[1] = v113;
    v234(v111, v116);
    v118 = _s7BooksUI14ColorConstantsV19booksSecondaryLabel05SwiftB00C0Vvg_0();
    v119 = swift_getKeyPath(&unk_1EE850);
    v120 = v246;
    sub_B3D0(v115, v246, &qword_25FE10);
    v121 = (uint64_t *)(v120 + *(int *)(v244 + 36));
    *v121 = v119;
    v121[1] = v118;
    sub_B414(v115, &qword_25FE10);
    v122 = swift_getKeyPath(&unk_1EE880);
    v123 = v247;
    sub_B3D0(v120, v247, &qword_25FE18);
    v124 = v123 + *(int *)(v245 + 36);
    *(_QWORD *)v124 = v122;
    *(_BYTE *)(v124 + 8) = 1;
    sub_B414(v120, &qword_25FE18);
    v125 = swift_getKeyPath(&unk_1EE820);
    v126 = v267;
    sub_B3D0(v123, v267, &qword_266A58);
    v127 = v126 + *(int *)(v266 + 36);
    *(_QWORD *)v127 = v125;
    *(_QWORD *)(v127 + 8) = 3;
    *(_BYTE *)(v127 + 16) = 0;
    sub_B414(v123, &qword_266A58);
    v128 = v275;
    v129 = v253;
    ((void (*)(char *, _QWORD, uint64_t))v253)(v275, v254, v25);
    v130 = v276;
    ((void (*)(char *, _QWORD, uint64_t))v129)(v276, v255, v25);
    result = dispatch thunk of static Comparable.<= infix(_:_:)(v128, v130, v25, v252);
    if ((result & 1) != 0)
    {
      v131 = v263;
      v132 = v261;
      v133 = &v261[*(int *)(v263 + 48)];
      v91(v261, v275, v25);
      v91(v133, v276, v25);
      v134 = v264;
      v135 = &v264[*(int *)(v131 + 48)];
      v95(v264, v132, v25);
      v95(v135, v133, v25);
      v136 = (uint64_t)v259;
      v91(v259, v134, v25);
      v137 = v257;
      v257(v135, v25);
      v138 = &v134[*(int *)(v131 + 48)];
      v91(v134, v132, v25);
      v91(v138, v133, v25);
      v139 = v262;
      v91((char *)(v136 + *(int *)(v262 + 36)), v138, v25);
      v137(v134, v25);
      v140 = v260;
      sub_167A4(v136, v260, &qword_25FE40);
      v141 = sub_12E8A0();
      v142 = v200;
      v143 = v267;
      View.dynamicTypeSize<A>(_:)(v140, v266, v139, v141, v270);
      sub_B414(v140, &qword_25FE40);
      sub_B414(v143, &qword_266A60);
      v144 = v204;
      v145 = v203;
      v146 = v205;
      (*(void (**)(char *, _QWORD, uint64_t))(v204 + 104))(v203, enum case for BlendMode.plusLighter(_:), v205);
      v147 = (uint64_t)v216;
      (*(void (**)(char *, char *, uint64_t))(v144 + 16))(&v216[*(int *)(v199 + 36)], v145, v146);
      v148 = v201;
      v149 = v202;
      (*(void (**)(uint64_t, char *, uint64_t))(v201 + 16))(v147, v142, v202);
      (*(void (**)(char *, uint64_t))(v144 + 8))(v145, v146);
      (*(void (**)(char *, uint64_t))(v148 + 8))(v142, v149);
      v150 = v147;
      sub_167A4(v147, v258, &qword_266A70);
      v151 = v211;
      v152 = v208;
      sub_1E428(v211, v208, type metadata accessor for YearInReviewErrorView);
      v153 = *(unsigned __int8 *)(v206 + 80);
      v154 = (v153 + 16) & ~v153;
      v155 = swift_allocObject(&unk_253F60, v154 + v207, v153 | 7);
      v156 = sub_21C88(v152, v155 + v154, type metadata accessor for YearInReviewErrorView);
      __chkstk_darwin(v156);
      *(&v198 - 2) = v151;
      v157 = sub_6FD0((unint64_t *)&qword_25FEA8, (uint64_t (*)(uint64_t))&type metadata accessor for LocalizedText, (uint64_t)&protocol conformance descriptor for LocalizedText);
      v158 = v209;
      Button.init(action:label:)(sub_12EA70, v155, sub_12EAAC, &v198 - 4, v265, v157);
      v159 = v218;
      v160 = v217;
      v161 = v219;
      (*(void (**)(char *, _QWORD, uint64_t))(v218 + 104))(v217, enum case for ControlSize.regular(_:), v219);
      v162 = swift_getKeyPath(&unk_1EE8B0);
      v163 = v214;
      v164 = (uint64_t)v215;
      v165 = (uint64_t *)&v215[*(int *)(v214 + 36)];
      v166 = sub_5440(&qword_266AB0);
      (*(void (**)(char *, char *, uint64_t))(v159 + 16))((char *)v165 + *(int *)(v166 + 28), v160, v161);
      *v165 = v162;
      v167 = v210;
      v168 = v212;
      (*(void (**)(uint64_t, char *, uint64_t))(v210 + 16))(v164, v158, v212);
      (*(void (**)(char *, uint64_t))(v159 + 8))(v160, v161);
      v169 = (*(uint64_t (**)(char *, uint64_t))(v167 + 8))(v158, v168);
      v170 = v225;
      BorderedButtonStyle.init()(v169);
      v171 = sub_12EB74();
      v172 = sub_6FD0(&qword_266AD0, (uint64_t (*)(uint64_t))&type metadata accessor for BorderedButtonStyle, (uint64_t)&protocol conformance descriptor for BorderedButtonStyle);
      v173 = v221;
      v174 = v227;
      View.buttonStyle<A>(_:)(v170, v163, v227, v171, v172);
      (*(void (**)(char *, uint64_t))(v226 + 8))(v170, v174);
      v175 = sub_B414(v164, &qword_266A38);
      v176 = v230;
      static ButtonBorderShape.capsule.getter(v175);
      v177 = swift_getKeyPath(&unk_1EE8E0);
      v178 = (uint64_t)v223;
      v179 = (uint64_t *)&v223[*(int *)(v213 + 36)];
      v180 = sub_5440(&qword_262CA8);
      v181 = v231;
      v182 = v232;
      (*(void (**)(char *, char *, uint64_t))(v231 + 16))((char *)v179 + *(int *)(v180 + 28), v176, v232);
      *v179 = v177;
      v183 = v222;
      v184 = v224;
      (*(void (**)(uint64_t, char *, uint64_t))(v222 + 16))(v178, v173, v224);
      (*(void (**)(char *, uint64_t))(v181 + 8))(v176, v182);
      (*(void (**)(char *, uint64_t))(v183 + 8))(v173, v184);
      v185 = _s7BooksUI14ColorConstantsV25vibrantPrimaryButtonLabel05SwiftB00C0Vvg_0();
      v186 = swift_getKeyPath(&unk_1EE910);
      v187 = v229;
      sub_B3D0(v178, v229, &qword_266A48);
      v188 = (uint64_t *)(v187 + *(int *)(v220 + 36));
      *v188 = v186;
      v188[1] = v185;
      sub_B414(v178, &qword_266A48);
      v189 = v228;
      sub_167A4(v187, v228, &qword_266A50);
      v190 = *(void (**)(char *, char *, uint64_t))(v274 + 16);
      v191 = v268;
      v192 = v269;
      v190(v268, v273, v269);
      v193 = v258;
      sub_B3D0(v258, v150, &qword_266A70);
      sub_B3D0(v189, v187, &qword_266A50);
      v194 = v233;
      *v233 = 0;
      *((_BYTE *)v194 + 8) = 1;
      v195 = (int *)sub_5440(&qword_266AD8);
      v190((char *)v194 + v195[12], v191, v192);
      sub_B3D0(v150, (uint64_t)v194 + v195[16], &qword_266A70);
      sub_B3D0(v187, (uint64_t)v194 + v195[20], &qword_266A50);
      v196 = (char *)v194 + v195[24];
      *(_QWORD *)v196 = 0;
      v196[8] = 1;
      sub_B414(v189, &qword_266A50);
      sub_B414(v193, &qword_266A70);
      v197 = *(void (**)(char *, uint64_t))(v274 + 8);
      v197(v273, v192);
      sub_B414(v187, &qword_266A50);
      sub_B414(v150, &qword_266A70);
      return ((uint64_t (*)(char *, uint64_t))v197)(v191, v192);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

unint64_t sub_12DB08()
{
  unint64_t result;
  uint64_t v1;

  result = qword_266958;
  if (!qword_266958)
  {
    v1 = sub_7EF8(&qword_266918);
    sub_7FD8(&qword_266960, &qword_266910, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_266958);
  }
  return result;
}

unint64_t sub_12DB94()
{
  unint64_t result;
  uint64_t v1;

  result = qword_266968;
  if (!qword_266968)
  {
    v1 = sub_7EF8(&qword_266938);
    sub_12DC00();
    sub_11764();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_266968);
  }
  return result;
}

unint64_t sub_12DC00()
{
  unint64_t result;
  uint64_t v1;

  result = qword_266970;
  if (!qword_266970)
  {
    v1 = sub_7EF8(&qword_266930);
    sub_12DC84();
    sub_7FD8(&qword_266980, &qword_266988, (uint64_t)&protocol conformance descriptor for _OverlayModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_266970);
  }
  return result;
}

unint64_t sub_12DC84()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_266978;
  if (!qword_266978)
  {
    v1 = sub_7EF8(&qword_266928);
    v2[0] = sub_7EF8(&qword_266918);
    v2[1] = sub_12DB08();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.containerRelativeFrame(_:alignment:)>>, 1);
    sub_7FD8(&qword_2655E8, &qword_2655F0, (uint64_t)&protocol conformance descriptor for _BackgroundModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_266978);
  }
  return result;
}

uint64_t sub_12DD30(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &opaque type descriptor for <<opaque return type of YearInReviewErrorView.body>>, 1);
}

uint64_t sub_12DD40()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v12;

  v0 = type metadata accessor for LocalizerLookupStrategy(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v12 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for LocalizerDefaultValue(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for LocalizerRequest(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  LocalizerDefaultValue.init(stringLiteral:)("Try Again", 9, 2);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for LocalizerLookupStrategy.default(_:), v0);
  static LocalizerRequest.string(forKey:with:defaultValue:using:)(0xD000000000000016, 0x80000000001FD1A0, 0, v7, v3);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return LocalizedText.init(_:)(v10);
}

_QWORD *initializeBufferWithCopyOfBuffer for YearInReviewErrorView(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _WORD *v10;
  _WORD *v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  _WORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v5 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    *a1 = v5;
    a1 = (_QWORD *)(v5 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain(v5);
  }
  else
  {
    v6 = a2[1];
    v7 = a2[2];
    *a1 = v5;
    a1[1] = v6;
    v8 = a2[3];
    a1[2] = v7;
    a1[3] = v8;
    v9 = *(int *)(a3 + 24);
    v10 = (_WORD *)((char *)a1 + v9);
    v11 = (_WORD *)((char *)a2 + v9);
    swift_retain(v6);
    swift_bridgeObjectRetain(v8);
    v12 = sub_5440(&qword_25F548);
    if (swift_getEnumCaseMultiPayload(v11, v12) == 1)
    {
      *v10 = *v11;
      v13 = (int *)type metadata accessor for SizeConstants.Environment(0);
      v14 = v13[6];
      v15 = (char *)v10 + v14;
      v16 = (char *)v11 + v14;
      v17 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v15, v16, v17);
      *(_QWORD *)((char *)v10 + v13[7]) = *(_QWORD *)((char *)v11 + v13[7]);
      v18 = v13[8];
      v19 = (char *)v10 + v18;
      v20 = (char *)v11 + v18;
      v19[2] = v20[2];
      *(_WORD *)v19 = *(_WORD *)v20;
      v21 = v10;
      v22 = v12;
      v23 = 1;
    }
    else
    {
      v24 = *(_QWORD *)v11;
      *(_QWORD *)v10 = *(_QWORD *)v11;
      swift_retain(v24);
      v21 = v10;
      v22 = v12;
      v23 = 0;
    }
    swift_storeEnumTagMultiPayload(v21, v22, v23);
  }
  return a1;
}

double destroy for YearInReviewErrorView(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  double result;

  swift_release(*(_QWORD *)(a1 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
  v4 = (_QWORD *)(a1 + *(int *)(a2 + 24));
  v5 = sub_5440(&qword_25F548);
  if (swift_getEnumCaseMultiPayload(v4, v5) == 1)
  {
    v6 = (char *)v4 + *(int *)(type metadata accessor for SizeConstants.Environment(0) + 24);
    v7 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  }
  else
  {
    *(_QWORD *)&result = swift_release(*v4).n128_u64[0];
  }
  return result;
}

_QWORD *initializeWithCopy for YearInReviewErrorView(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _WORD *v7;
  _WORD *v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  v6 = *(int *)(a3 + 24);
  v7 = (_WORD *)((char *)a1 + v6);
  v8 = (_WORD *)((char *)a2 + v6);
  swift_retain(v4);
  swift_bridgeObjectRetain(v5);
  v9 = sub_5440(&qword_25F548);
  if (swift_getEnumCaseMultiPayload(v8, v9) == 1)
  {
    *v7 = *v8;
    v10 = (int *)type metadata accessor for SizeConstants.Environment(0);
    v11 = v10[6];
    v12 = (char *)v7 + v11;
    v13 = (char *)v8 + v11;
    v14 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
    *(_QWORD *)((char *)v7 + v10[7]) = *(_QWORD *)((char *)v8 + v10[7]);
    v15 = v10[8];
    v16 = (char *)v7 + v15;
    v17 = (char *)v8 + v15;
    v16[2] = v17[2];
    *(_WORD *)v16 = *(_WORD *)v17;
    v18 = 1;
  }
  else
  {
    v19 = *(_QWORD *)v8;
    *(_QWORD *)v7 = *(_QWORD *)v8;
    swift_retain(v19);
    v18 = 0;
  }
  swift_storeEnumTagMultiPayload(v7, v9, v18);
  return a1;
}

_QWORD *assignWithCopy for YearInReviewErrorView(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  _BYTE *v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  _BYTE *v21;
  char v22;
  uint64_t v23;
  uint64_t v24;

  v6 = a2[1];
  v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_retain(v6);
  swift_release(v7);
  a1[2] = a2[2];
  v8 = a2[3];
  v9 = a1[3];
  a1[3] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  if (a1 != a2)
  {
    v10 = *(int *)(a3 + 24);
    v11 = (char *)a1 + v10;
    v12 = (char *)a2 + v10;
    sub_B414((uint64_t)a1 + v10, &qword_25F548);
    v13 = sub_5440(&qword_25F548);
    if (swift_getEnumCaseMultiPayload(v12, v13) == 1)
    {
      *v11 = *v12;
      v11[1] = v12[1];
      v14 = (int *)type metadata accessor for SizeConstants.Environment(0);
      v15 = v14[6];
      v16 = &v11[v15];
      v17 = &v12[v15];
      v18 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
      *(_QWORD *)&v11[v14[7]] = *(_QWORD *)&v12[v14[7]];
      v19 = v14[8];
      v20 = &v11[v19];
      v21 = &v12[v19];
      v22 = v21[2];
      *(_WORD *)v20 = *(_WORD *)v21;
      v20[2] = v22;
      v23 = 1;
    }
    else
    {
      v24 = *(_QWORD *)v12;
      *(_QWORD *)v11 = *(_QWORD *)v12;
      swift_retain(v24);
      v23 = 0;
    }
    swift_storeEnumTagMultiPayload(v11, v13, v23);
  }
  return a1;
}

_OWORD *initializeWithTake for YearInReviewErrorView(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  _WORD *v6;
  _WORD *v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = *(int *)(a3 + 24);
  v6 = (_WORD *)((char *)a1 + v5);
  v7 = (_WORD *)((char *)a2 + v5);
  v8 = sub_5440(&qword_25F548);
  if (swift_getEnumCaseMultiPayload(v7, v8) == 1)
  {
    *v6 = *v7;
    v9 = (int *)type metadata accessor for SizeConstants.Environment(0);
    v10 = v9[6];
    v11 = (char *)v6 + v10;
    v12 = (char *)v7 + v10;
    v13 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v11, v12, v13);
    *(_QWORD *)((char *)v6 + v9[7]) = *(_QWORD *)((char *)v7 + v9[7]);
    v14 = v9[8];
    v15 = (char *)v6 + v14;
    v16 = (char *)v7 + v14;
    v15[2] = v16[2];
    *(_WORD *)v15 = *(_WORD *)v16;
    swift_storeEnumTagMultiPayload(v6, v8, 1);
  }
  else
  {
    memcpy(v6, v7, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  return a1;
}

uint64_t assignWithTake for YearInReviewErrorView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _WORD *v10;
  _WORD *v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;

  v6 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release(v6);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v7;
  swift_bridgeObjectRelease(v8);
  if (a1 != a2)
  {
    v9 = *(int *)(a3 + 24);
    v10 = (_WORD *)(a1 + v9);
    v11 = (_WORD *)(a2 + v9);
    sub_B414(a1 + v9, &qword_25F548);
    v12 = sub_5440(&qword_25F548);
    if (swift_getEnumCaseMultiPayload(v11, v12) == 1)
    {
      *v10 = *v11;
      v13 = (int *)type metadata accessor for SizeConstants.Environment(0);
      v14 = v13[6];
      v15 = (char *)v10 + v14;
      v16 = (char *)v11 + v14;
      v17 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v15, v16, v17);
      *(_QWORD *)((char *)v10 + v13[7]) = *(_QWORD *)((char *)v11 + v13[7]);
      v18 = v13[8];
      v19 = (char *)v10 + v18;
      v20 = (char *)v11 + v18;
      v19[2] = v20[2];
      *(_WORD *)v19 = *(_WORD *)v20;
      swift_storeEnumTagMultiPayload(v10, v12, 1);
    }
    else
    {
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for YearInReviewErrorView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_12E52C);
}

uint64_t sub_12E52C(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_5440(&qword_25F558);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 24)], a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for YearInReviewErrorView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_12E5B8);
}

char *sub_12E5B8(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = sub_5440(&qword_25F558);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 24)], a2, a2, v7);
  }
  return result;
}

void sub_12E630(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = (char *)&value witness table for () + 64;
  v4[1] = &unk_1EE7D8;
  sub_2F448(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(v2 - 8) + 64;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
  }
}

unint64_t sub_12E6B4()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[4];

  result = qword_266A28;
  if (!qword_266A28)
  {
    v1 = sub_7EF8(&qword_266948);
    v2[0] = sub_7EF8(&qword_266938);
    v2[1] = type metadata accessor for ToolbarButtonStyle(255);
    v2[2] = sub_12DB94();
    v2[3] = sub_6FD0((unint64_t *)&qword_2655F8, type metadata accessor for ToolbarButtonStyle, (uint64_t)&protocol conformance descriptor for ToolbarButtonStyle);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
    sub_7FD8((unint64_t *)&qword_25EE78, &qword_25EE58, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_266A28);
  }
  return result;
}

unint64_t sub_12E7B4()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t OpaqueTypeConformance2;
  uint64_t v4;
  unint64_t v5;

  result = qword_266A98;
  if (!qword_266A98)
  {
    v1 = sub_7EF8(&qword_266A88);
    v2 = sub_7EF8(&qword_266A78);
    v4 = sub_7EF8(&qword_25FE10);
    v5 = sub_7A518();
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v4, &opaque type descriptor for <<opaque return type of View.bold(_:)>>, 1);
    v4 = v2;
    v5 = OpaqueTypeConformance2;
    swift_getOpaqueTypeConformance2(&v4, &opaque type descriptor for <<opaque return type of View.fontDesign(_:)>>, 1);
    sub_7FD8(&qword_260960, &qword_260968, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_266A98);
  }
  return result;
}

unint64_t sub_12E8A0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_266AA0;
  if (!qword_266AA0)
  {
    v1 = sub_7EF8(&qword_266A60);
    sub_12E924();
    sub_7FD8(&qword_260960, &qword_260968, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_266AA0);
  }
  return result;
}

unint64_t sub_12E924()
{
  unint64_t result;
  uint64_t v1;

  result = qword_266AA8;
  if (!qword_266AA8)
  {
    v1 = sub_7EF8(&qword_266A58);
    sub_7A494();
    sub_7FD8((unint64_t *)&qword_261BF0, &qword_261BF8, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_266AA8);
  }
  return result;
}

uint64_t sub_12E9A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;

  v1 = type metadata accessor for YearInReviewErrorView(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release(*(_QWORD *)(v0 + v4 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + 24));
  v6 = (_QWORD *)(v0 + v4 + *(int *)(v1 + 24));
  v7 = sub_5440(&qword_25F548);
  if (swift_getEnumCaseMultiPayload(v6, v7) == 1)
  {
    v8 = (char *)v6 + *(int *)(type metadata accessor for SizeConstants.Environment(0) + 24);
    v9 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  }
  else
  {
    swift_release(*v6);
  }
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_12EA70()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for YearInReviewErrorView(0) - 8) + 80);
  return (*(uint64_t (**)(void))(v0 + ((v1 + 16) & ~v1)))();
}

uint64_t sub_12EAAC()
{
  return sub_12DD40();
}

uint64_t sub_12EAB4()
{
  return EnvironmentValues.controlSize.getter();
}

uint64_t sub_12EAD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD), uint64_t (*a6)(char *))
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v13;

  v8 = a5(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v13 - v9;
  (*(void (**)(char *, uint64_t))(v11 + 16))((char *)&v13 - v9, a1);
  return a6(v10);
}

uint64_t sub_12EB50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_12EAD4(a1, a2, a3, a4, (uint64_t (*)(_QWORD))&type metadata accessor for ControlSize, (uint64_t (*)(char *))&EnvironmentValues.controlSize.setter);
}

unint64_t sub_12EB74()
{
  unint64_t result;
  uint64_t v1;

  result = qword_266AB8;
  if (!qword_266AB8)
  {
    v1 = sub_7EF8(&qword_266A38);
    sub_7FD8(&qword_266AC0, &qword_266A30, (uint64_t)&protocol conformance descriptor for Button<A>);
    sub_7FD8(&qword_266AC8, &qword_266AB0, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_266AB8);
  }
  return result;
}

uint64_t sub_12EC10()
{
  return EnvironmentValues._buttonBorderShape.getter();
}

uint64_t sub_12EC30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_12EAD4(a1, a2, a3, a4, (uint64_t (*)(_QWORD))&type metadata accessor for ButtonBorderShape, (uint64_t (*)(char *))&EnvironmentValues._buttonBorderShape.setter);
}

uint64_t sub_12EC54@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.tintColor.getter();
  *a1 = result;
  return result;
}

uint64_t sub_12EC7C(_QWORD *a1)
{
  uint64_t v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.tintColor.setter(v1);
}

uint64_t NothingToReviewFrameViewModel.init(localizedYear:exposureData:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  char *v5;
  uint64_t v6;

  *a4 = a1;
  a4[1] = a2;
  v5 = (char *)a4 + *(int *)(type metadata accessor for NothingToReviewFrameViewModel(0) + 20);
  v6 = type metadata accessor for YIRSourceData(0);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(v5, a3, v6);
}

uint64_t type metadata accessor for NothingToReviewFrameViewModel(uint64_t a1)
{
  return sub_1FE90(a1, qword_266B60, (uint64_t)&nominal type descriptor for NothingToReviewFrameViewModel);
}

uint64_t sub_12ED08@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t ObjCClassFromMetadata;
  id v18;
  void (*v19)(char *, char *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  void (*v23)(char *, uint64_t);
  uint64_t v24;
  id v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(char *, uint64_t);
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  char *v50;
  id v51;
  id v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(char *, uint64_t);
  uint64_t v57;
  id v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t result;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  id v82;
  void (*v83)(char *, uint64_t);
  void (*v84)(char *, uint64_t);
  uint64_t v85;
  void (*v86)(char *, char *, uint64_t);
  void (*v87)(char *, char *, uint64_t);

  v80 = a1;
  v1 = type metadata accessor for Locale(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = __chkstk_darwin(v1);
  v5 = (char *)&v68 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v7 = (char *)&v68 - v6;
  v8 = type metadata accessor for String.LocalizationValue(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v68 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v68 - v13;
  v15 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000017, 0x80000000001FD1D0);
  static Locale.current.getter(v15);
  v87 = *(void (**)(char *, char *, uint64_t))(v9 + 16);
  v87(v12, v14, v8);
  v16 = type metadata accessor for BundleFinder();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v16);
  v85 = ObjCClassFromMetadata;
  v82 = (id)objc_opt_self(NSBundle);
  v18 = objc_msgSend(v82, "bundleForClass:", ObjCClassFromMetadata);
  v19 = *(void (**)(char *, char *, uint64_t))(v2 + 16);
  v19(v5, v7, v1);
  v86 = v19;
  v20 = String.init(localized:table:bundle:locale:comment:)(v12, 0, 0, v18, v5, "Title of the 'Nothing to Explore Yet' section in Year in Review", 63, 2);
  v78 = v21;
  v79 = v20;
  v84 = *(void (**)(char *, uint64_t))(v2 + 8);
  v84(v7, v1);
  v22 = *(void (**)(char *, uint64_t))(v9 + 8);
  v69 = v8;
  v22(v14, v8);
  v23 = v22;
  v83 = v22;
  v24 = String.LocalizationValue.init(stringLiteral:)(0x1000000000000059, 0x80000000001FD230);
  static Locale.current.getter(v24);
  v87(v12, v14, v8);
  v25 = v82;
  v26 = v85;
  v27 = objc_msgSend(v82, "bundleForClass:", v85);
  v81 = v1;
  v19(v5, v7, v1);
  v28 = String.init(localized:table:bundle:locale:comment:)(v12, 0, 0, v27, v5, "Subtitle of the 'Nothing to Explore Yet' section in Year in Review", 66, 2);
  v75 = v29;
  v76 = v28;
  v84(v7, v1);
  v30 = v69;
  v23(v14, v69);
  v31 = sub_5440(&qword_2665E0);
  v32 = type metadata accessor for BulletPointStack.Bullet(0);
  v33 = *(_QWORD *)(v32 - 8);
  v72 = *(_QWORD *)(v33 + 72);
  v73 = v32;
  v34 = *(unsigned __int8 *)(v33 + 80);
  v35 = (v34 + 32) & ~v34;
  v36 = swift_allocObject(v31, v35 + 2 * v72, v34 | 7);
  v74 = v36;
  *(_OWORD *)(v36 + 16) = xmmword_1E1CE0;
  v37 = (_QWORD *)(v36 + v35);
  v38 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000021, 0x80000000001FD2E0);
  static Locale.current.getter(v38);
  v70 = v12;
  v87(v12, v14, v30);
  v39 = objc_msgSend(v25, "bundleForClass:", v26);
  v71 = v5;
  v40 = v81;
  v86(v5, v7, v81);
  v41 = String.init(localized:table:bundle:locale:comment:)(v12, 0, 0, v39, v5, "Title of first bullet in the 'Nothing to Explore Yet' section in Year in Review", 79, 2);
  v43 = v42;
  v84(v7, v40);
  v44 = v30;
  v45 = v83;
  v83(v14, v30);
  v46 = sub_12F308(v77);
  *v37 = 0xD000000000000010;
  v37[1] = 0x80000000001FCBA0;
  v37[2] = v41;
  v37[3] = v43;
  v37[4] = v46;
  v37[5] = v47;
  UUID.init()(v46);
  v48 = (_QWORD *)((char *)v37 + v72);
  v49 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000013, 0x80000000001FD360);
  static Locale.current.getter(v49);
  v50 = v70;
  v87(v70, v14, v30);
  v51 = v82;
  v52 = objc_msgSend(v82, "bundleForClass:", v85);
  v53 = v71;
  v54 = v81;
  v86(v71, v7, v81);
  v77 = (uint64_t *)String.init(localized:table:bundle:locale:comment:)(v50, 0, 0, v52, v53, "Title of second bullet in the 'Nothing to Explore Yet' section in Year in Review", 80, 2);
  v72 = v55;
  v56 = v84;
  v84(v7, v54);
  v45(v14, v44);
  v57 = String.LocalizationValue.init(stringLiteral:)(0xD00000000000005FLL, 0x80000000001FD3E0);
  static Locale.current.getter(v57);
  v87(v50, v14, v44);
  v58 = objc_msgSend(v51, "bundleForClass:", v85);
  v86(v53, v7, v54);
  v59 = String.init(localized:table:bundle:locale:comment:)(v50, 0, 0, v58, v53, "Subtitle of second bullet in the 'Nothing to Explore Yet' section in Year in Review", 83, 2);
  v61 = v60;
  v56(v7, v54);
  v62 = ((uint64_t (*)(char *, uint64_t))v83)(v14, v44);
  *v48 = 0x7261646E656C6163;
  v48[1] = 0xE800000000000000;
  v63 = v72;
  v48[2] = v77;
  v48[3] = v63;
  v48[4] = v59;
  v48[5] = v61;
  result = UUID.init()(v62);
  v65 = v80;
  v66 = v78;
  *v80 = v79;
  v65[1] = v66;
  v67 = v75;
  v65[2] = v76;
  v65[3] = v67;
  v65[4] = v74;
  return result;
}

uint64_t sub_12F308(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t ObjCClassFromMetadata;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE v29[16];

  v2 = type metadata accessor for Locale(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = &v29[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v4);
  v8 = &v29[-v7];
  v9 = type metadata accessor for String.LocalizationValue(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = &v29[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v11);
  v15 = &v29[-v14];
  v16 = String.LocalizationValue.init(stringLiteral:)(0x1000000000000090, 0x80000000001FD4A0);
  static Locale.current.getter(v16);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 16))(v13, v15, v9);
  v17 = type metadata accessor for BundleFinder();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v17);
  v19 = objc_msgSend((id)objc_opt_self(NSBundle), "bundleForClass:", ObjCClassFromMetadata);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v3 + 16))(v6, v8, v2);
  v20 = String.init(localized:table:bundle:locale:comment:)(v13, 0, 0, v19, v6, "Subtitle of first bullet in the 'Nothing to Explore Yet' section in Year in Review", 82, 2);
  v22 = v21;
  (*(void (**)(_BYTE *, uint64_t))(v3 + 8))(v8, v2);
  (*(void (**)(_BYTE *, uint64_t))(v10 + 8))(v15, v9);
  v23 = sub_5440(&qword_25E310);
  v24 = swift_allocObject(v23, 72, 7);
  *(_OWORD *)(v24 + 16) = xmmword_1E0B70;
  v26 = *a1;
  v25 = a1[1];
  *(_QWORD *)(v24 + 56) = &type metadata for String;
  *(_QWORD *)(v24 + 64) = sub_578F0();
  *(_QWORD *)(v24 + 32) = v26;
  *(_QWORD *)(v24 + 40) = v25;
  swift_bridgeObjectRetain(v25);
  v27 = static String.localizedStringWithFormat(_:_:)(v20, v22, v24);
  swift_bridgeObjectRelease(v22);
  swift_bridgeObjectRelease(v24);
  return v27;
}

uint64_t NothingToReviewFrame.background.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_12F554(v1, a1);
}

uint64_t sub_12F554(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PageBackground(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t NothingToReviewFrame.exposureData.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v3 = v1 + *(int *)(type metadata accessor for NothingToReviewFrame(0) + 20);
  v4 = v3 + *(int *)(type metadata accessor for NothingToReviewFrameViewModel(0) + 20);
  v5 = type metadata accessor for YIRSourceData(0);
  a1[3] = v5;
  a1[4] = sub_6FD0(&qword_25EFF0, (uint64_t (*)(uint64_t))&type metadata accessor for YIRSourceData, (uint64_t)&protocol conformance descriptor for YIRSourceData);
  a1[5] = sub_6FD0(&qword_25EFF8, (uint64_t (*)(uint64_t))&type metadata accessor for YIRSourceData, (uint64_t)&protocol conformance descriptor for YIRSourceData);
  v6 = sub_C404(a1);
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(v6, v4, v5);
}

uint64_t type metadata accessor for NothingToReviewFrame(uint64_t a1)
{
  return sub_1FE90(a1, qword_266BF0, (uint64_t)&nominal type descriptor for NothingToReviewFrame);
}

uint64_t NothingToReviewFrame.init(model:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = Color.init(hexString:)(0x423243374246, 0xE600000000000000);
  if (!v4)
    v4 = static Color.orange.getter();
  *a2 = v4;
  v5 = (char *)a2 + *(int *)(sub_5440(&qword_25E930) + 48);
  v6 = enum case for ColorScheme.dark(_:);
  v7 = type metadata accessor for ColorScheme(0);
  v8 = *(_QWORD *)(v7 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 104))(v5, v6, v7);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v5, 0, 1, v7);
  v9 = type metadata accessor for PageBackground(0);
  swift_storeEnumTagMultiPayload(a2, v9, 0);
  v10 = type metadata accessor for NothingToReviewFrame(0);
  return sub_21C88(a1, (uint64_t)a2 + *(int *)(v10 + 20), type metadata accessor for NothingToReviewFrameViewModel);
}

uint64_t NothingToReviewFrame.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t KeyPath;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v17;

  v2 = v1;
  v4 = type metadata accessor for ColorScheme(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_5440(&qword_266AE0);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v11 = static HorizontalAlignment.center.getter(v9);
  *((_QWORD *)v11 + 1) = 0;
  v11[16] = 1;
  v12 = sub_5440(&qword_266AE8);
  sub_12F8AC(v2, &v11[*(int *)(v12 + 44)]);
  KeyPath = swift_getKeyPath(&unk_1EE940);
  (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for ColorScheme.dark(_:), v4);
  v14 = (uint64_t *)(a1 + *(int *)(sub_5440(&qword_266AF0) + 36));
  v15 = sub_5440(&qword_25EE58);
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))((char *)v14 + *(int *)(v15 + 28), v7, v4);
  *v14 = KeyPath;
  sub_B3D0((uint64_t)v11, a1, &qword_266AE0);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return sub_B414((uint64_t)v11, &qword_266AE0);
}

uint64_t sub_12F8AC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  int *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  _QWORD *v21;
  uint64_t v22;
  char *v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  _OWORD v30[2];
  uint64_t v31;

  v4 = (int *)type metadata accessor for BulletPointStack(0);
  v5 = __chkstk_darwin(v4);
  v7 = (uint64_t *)((char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v5);
  v9 = (char *)&v29 - v8;
  v10 = sub_5440(&qword_2626F8);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v29 - v14;
  v16 = (uint64_t *)(a1 + *(int *)(type metadata accessor for NothingToReviewFrame(0) + 20));
  v17 = *v16;
  v18 = v16[1];
  swift_bridgeObjectRetain(v18);
  sub_12ED08((uint64_t *)v30);
  *v7 = swift_getKeyPath(&unk_1EEA68);
  v19 = sub_5440(&qword_25F1F0);
  swift_storeEnumTagMultiPayload(v7, v19, 0);
  v20 = (char *)v7 + v4[5];
  *(_QWORD *)v20 = swift_getKeyPath(&unk_1EEA98);
  v20[8] = 0;
  v21 = (_QWORD *)((char *)v7 + v4[6]);
  *v21 = swift_getKeyPath(&unk_1EEAE0);
  v22 = sub_5440(&qword_25F208);
  swift_storeEnumTagMultiPayload(v21, v22, 0);
  v23 = (char *)v7 + v4[7];
  v24 = v30[1];
  *(_OWORD *)v23 = v30[0];
  *((_OWORD *)v23 + 1) = v24;
  *((_QWORD *)v23 + 4) = v31;
  sub_21C88((uint64_t)v7, (uint64_t)v9, type metadata accessor for BulletPointStack);
  v25 = _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0();
  sub_87D7C(0.0, 1, 0.0, 1, 0.0, 1, 0.0, 1, (uint64_t)v13, 0.0, 1, INFINITY, 0, v25, v26);
  sub_224DC((uint64_t)v9, type metadata accessor for BulletPointStack);
  sub_130DFC((uint64_t)v13, (uint64_t)v15);
  sub_B3D0((uint64_t)v15, (uint64_t)v13, &qword_2626F8);
  *a2 = v17;
  a2[1] = v18;
  v27 = sub_5440(&qword_266C38);
  sub_B3D0((uint64_t)v13, (uint64_t)a2 + *(int *)(v27 + 48), &qword_2626F8);
  swift_bridgeObjectRetain(v18);
  sub_B414((uint64_t)v15, &qword_2626F8);
  sub_B414((uint64_t)v13, &qword_2626F8);
  return swift_bridgeObjectRelease(v18);
}

uint64_t sub_12FB44(uint64_t a1)
{
  uint64_t result;

  result = sub_6FD0(&qword_266AF8, type metadata accessor for NothingToReviewFrame, (uint64_t)&protocol conformance descriptor for NothingToReviewFrame);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_12FB80@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v2 + *(int *)(a1 + 20);
  v5 = v4 + *(int *)(type metadata accessor for NothingToReviewFrameViewModel(0) + 20);
  v6 = type metadata accessor for YIRSourceData(0);
  a2[3] = v6;
  a2[4] = sub_6FD0(&qword_25EFF0, (uint64_t (*)(uint64_t))&type metadata accessor for YIRSourceData, (uint64_t)&protocol conformance descriptor for YIRSourceData);
  a2[5] = sub_6FD0(&qword_25EFF8, (uint64_t (*)(uint64_t))&type metadata accessor for YIRSourceData, (uint64_t)&protocol conformance descriptor for YIRSourceData);
  v7 = sub_C404(a2);
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(v7, v5, v6);
}

uint64_t sub_12FC24(uint64_t a1)
{
  uint64_t result;

  result = sub_6FD0(&qword_266B00, type metadata accessor for NothingToReviewFrame, (uint64_t)&protocol conformance descriptor for NothingToReviewFrame);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_12FC60(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &opaque type descriptor for <<opaque return type of NothingToReviewFrame.body>>, 1);
}

uint64_t *initializeBufferWithCopyOfBuffer for NothingToReviewFrameViewModel(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v11 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain(v11);
  }
  else
  {
    v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    v6 = *(int *)(a3 + 20);
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    v9 = type metadata accessor for YIRSourceData(0);
    v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
    swift_bridgeObjectRetain(v5);
    v10(v7, v8, v9);
  }
  return v3;
}

uint64_t destroy for NothingToReviewFrameViewModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for YIRSourceData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

_QWORD *initializeWithCopy for NothingToReviewFrameViewModel(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *, char *, uint64_t);

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = *(int *)(a3 + 20);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = type metadata accessor for YIRSourceData(0);
  v9 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
  swift_bridgeObjectRetain(v4);
  v9(v6, v7, v8);
  return a1;
}

_QWORD *assignWithCopy for NothingToReviewFrameViewModel(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  *a1 = *a2;
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = *(int *)(a3 + 20);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for YIRSourceData(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 24))(v9, v10, v11);
  return a1;
}

_OWORD *initializeWithTake for NothingToReviewFrameViewModel(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for YIRSourceData(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

_QWORD *assignWithTake for NothingToReviewFrameViewModel(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  v6 = a2[1];
  v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(int *)(a3 + 20);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for YIRSourceData(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for NothingToReviewFrameViewModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_12FF14);
}

uint64_t sub_12FF14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for YIRSourceData(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for NothingToReviewFrameViewModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_12FF9C);
}

uint64_t sub_12FF9C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for YIRSourceData(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 20), a2, a2, v7);
  }
  return result;
}

uint64_t sub_130010(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = &unk_1EEA30;
  result = type metadata accessor for YIRSourceData(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for NothingToReviewFrame(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t, uint64_t);

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v9 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v9 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain(v9);
  }
  else
  {
    v7 = type metadata accessor for PageBackground(0);
    if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
    {
      if (*((_BYTE *)a2 + 56))
      {
        v8 = *((_OWORD *)a2 + 1);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v8;
        *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
        *(_OWORD *)(a1 + 41) = *(_OWORD *)((char *)a2 + 41);
      }
      else
      {
        v18 = *(_OWORD *)(a2 + 3);
        *(_OWORD *)(a1 + 24) = v18;
        (**(void (***)(uint64_t, uint64_t *))(v18 - 8))(a1, a2);
        *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 5);
        *(_BYTE *)(a1 + 56) = 0;
      }
      *(_OWORD *)(a1 + 64) = *((_OWORD *)a2 + 4);
      *(_BYTE *)(a1 + 80) = *((_BYTE *)a2 + 80);
      *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 11);
      v19 = a2[13];
      *(_QWORD *)(a1 + 104) = v19;
      v20 = a2[15];
      swift_bridgeObjectRetain(v19);
      if (v20)
      {
        *(_QWORD *)(a1 + 112) = a2[14];
        *(_QWORD *)(a1 + 120) = v20;
        v21 = a2[17];
        *(_QWORD *)(a1 + 128) = a2[16];
        *(_QWORD *)(a1 + 136) = v21;
        *(_BYTE *)(a1 + 144) = *((_BYTE *)a2 + 144);
        v22 = a2[20];
        *(_QWORD *)(a1 + 152) = a2[19];
        *(_QWORD *)(a1 + 160) = v22;
        swift_bridgeObjectRetain(v20);
        swift_bridgeObjectRetain(v21);
        swift_bridgeObjectRetain(v22);
      }
      else
      {
        v23 = *((_OWORD *)a2 + 8);
        *(_OWORD *)(a1 + 112) = *((_OWORD *)a2 + 7);
        *(_OWORD *)(a1 + 128) = v23;
        *(_OWORD *)(a1 + 144) = *((_OWORD *)a2 + 9);
        *(_QWORD *)(a1 + 160) = a2[20];
      }
      v17 = 1;
    }
    else
    {
      v10 = *a2;
      *(_QWORD *)a1 = *a2;
      swift_retain(v10);
      v11 = *(int *)(sub_5440(&qword_25E930) + 48);
      v12 = (void *)(a1 + v11);
      v13 = (char *)a2 + v11;
      v14 = type metadata accessor for ColorScheme(0);
      v15 = *(_QWORD *)(v14 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
      {
        v16 = sub_5440(&qword_25E928);
        memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, char *, uint64_t))(v15 + 16))(v12, v13, v14);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
      }
      v17 = 0;
    }
    swift_storeEnumTagMultiPayload(a1, v7, v17);
    v24 = *(int *)(a3 + 20);
    v25 = (_QWORD *)(a1 + v24);
    v26 = (uint64_t)a2 + v24;
    v27 = *(uint64_t *)((char *)a2 + v24);
    v28 = *(_QWORD *)(v26 + 8);
    *v25 = v27;
    v25[1] = v28;
    v29 = *(int *)(type metadata accessor for NothingToReviewFrameViewModel(0) + 20);
    v30 = (char *)v25 + v29;
    v31 = v26 + v29;
    v32 = type metadata accessor for YIRSourceData(0);
    v33 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 16);
    swift_bridgeObjectRetain(v28);
    v33(v30, v31, v32);
  }
  return a1;
}

uint64_t destroy for NothingToReviewFrame(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  v4 = type metadata accessor for PageBackground(0);
  if (swift_getEnumCaseMultiPayload(a1, v4) == 1)
  {
    if (!*((_BYTE *)a1 + 56))
      _s7BooksUI13AnyPagedFrameVwxx_0(a1);
    swift_bridgeObjectRelease(a1[13]);
    v5 = a1[15];
    if (v5)
    {
      swift_bridgeObjectRelease(v5);
      swift_bridgeObjectRelease(a1[17]);
      swift_bridgeObjectRelease(a1[20]);
    }
  }
  else
  {
    swift_release(*a1);
    v6 = (char *)a1 + *(int *)(sub_5440(&qword_25E930) + 48);
    v7 = type metadata accessor for ColorScheme(0);
    v8 = *(_QWORD *)(v7 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
      (*(void (**)(char *, uint64_t))(v8 + 8))(v6, v7);
  }
  v9 = (char *)a1 + *(int *)(a2 + 20);
  swift_bridgeObjectRelease(*((_QWORD *)v9 + 1));
  v10 = &v9[*(int *)(type metadata accessor for NothingToReviewFrameViewModel(0) + 20)];
  v11 = type metadata accessor for YIRSourceData(0);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
}

uint64_t initializeWithCopy for NothingToReviewFrame(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t, uint64_t);

  v6 = type metadata accessor for PageBackground(0);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    if (*((_BYTE *)a2 + 56))
    {
      v7 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v7;
      *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
      *(_OWORD *)(a1 + 41) = *(_OWORD *)((char *)a2 + 41);
    }
    else
    {
      v16 = *(_OWORD *)(a2 + 3);
      *(_OWORD *)(a1 + 24) = v16;
      (**(void (***)(uint64_t, uint64_t *))(v16 - 8))(a1, a2);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 5);
      *(_BYTE *)(a1 + 56) = 0;
    }
    *(_OWORD *)(a1 + 64) = *((_OWORD *)a2 + 4);
    *(_BYTE *)(a1 + 80) = *((_BYTE *)a2 + 80);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 11);
    v17 = a2[13];
    *(_QWORD *)(a1 + 104) = v17;
    v18 = a2[15];
    swift_bridgeObjectRetain(v17);
    if (v18)
    {
      *(_QWORD *)(a1 + 112) = a2[14];
      *(_QWORD *)(a1 + 120) = v18;
      v19 = a2[17];
      *(_QWORD *)(a1 + 128) = a2[16];
      *(_QWORD *)(a1 + 136) = v19;
      *(_BYTE *)(a1 + 144) = *((_BYTE *)a2 + 144);
      v20 = a2[20];
      *(_QWORD *)(a1 + 152) = a2[19];
      *(_QWORD *)(a1 + 160) = v20;
      swift_bridgeObjectRetain(v18);
      swift_bridgeObjectRetain(v19);
      swift_bridgeObjectRetain(v20);
    }
    else
    {
      v21 = *((_OWORD *)a2 + 8);
      *(_OWORD *)(a1 + 112) = *((_OWORD *)a2 + 7);
      *(_OWORD *)(a1 + 128) = v21;
      *(_OWORD *)(a1 + 144) = *((_OWORD *)a2 + 9);
      *(_QWORD *)(a1 + 160) = a2[20];
    }
    v15 = 1;
  }
  else
  {
    v8 = *a2;
    *(_QWORD *)a1 = *a2;
    swift_retain(v8);
    v9 = *(int *)(sub_5440(&qword_25E930) + 48);
    v10 = (void *)(a1 + v9);
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for ColorScheme(0);
    v13 = *(_QWORD *)(v12 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
    {
      v14 = sub_5440(&qword_25E928);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
    }
    v15 = 0;
  }
  swift_storeEnumTagMultiPayload(a1, v6, v15);
  v22 = *(int *)(a3 + 20);
  v23 = (_QWORD *)(a1 + v22);
  v24 = (uint64_t)a2 + v22;
  v25 = *(uint64_t *)((char *)a2 + v22);
  v26 = *(_QWORD *)(v24 + 8);
  *v23 = v25;
  v23[1] = v26;
  v27 = *(int *)(type metadata accessor for NothingToReviewFrameViewModel(0) + 20);
  v28 = (char *)v23 + v27;
  v29 = v24 + v27;
  v30 = type metadata accessor for YIRSourceData(0);
  v31 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 16);
  swift_bridgeObjectRetain(v26);
  v31(v28, v29, v30);
  return a1;
}

uint64_t assignWithCopy for NothingToReviewFrame(uint64_t a1, __int128 *a2, uint64_t a3)
{
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;

  if ((__int128 *)a1 != a2)
  {
    sub_224DC(a1, type metadata accessor for PageBackground);
    v6 = type metadata accessor for PageBackground(0);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      if (*((_BYTE *)a2 + 56))
      {
        v7 = *a2;
        v8 = a2[1];
        v9 = a2[2];
        *(_OWORD *)(a1 + 41) = *(__int128 *)((char *)a2 + 41);
        *(_OWORD *)(a1 + 16) = v8;
        *(_OWORD *)(a1 + 32) = v9;
        *(_OWORD *)a1 = v7;
      }
      else
      {
        v18 = *((_QWORD *)a2 + 3);
        *(_QWORD *)(a1 + 24) = v18;
        *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
        (**(void (***)(uint64_t, __int128 *))(v18 - 8))(a1, a2);
        *(_OWORD *)(a1 + 40) = *(__int128 *)((char *)a2 + 40);
        *(_BYTE *)(a1 + 56) = 0;
      }
      *(_OWORD *)(a1 + 64) = a2[4];
      *(_BYTE *)(a1 + 80) = *((_BYTE *)a2 + 80);
      *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 11);
      *(_QWORD *)(a1 + 96) = *((_QWORD *)a2 + 12);
      v19 = *((_QWORD *)a2 + 13);
      *(_QWORD *)(a1 + 104) = v19;
      v20 = *((_QWORD *)a2 + 15);
      swift_bridgeObjectRetain(v19);
      if (v20)
      {
        *(_QWORD *)(a1 + 112) = *((_QWORD *)a2 + 14);
        v21 = *((_QWORD *)a2 + 15);
        *(_QWORD *)(a1 + 120) = v21;
        *(_QWORD *)(a1 + 128) = *((_QWORD *)a2 + 16);
        v22 = *((_QWORD *)a2 + 17);
        *(_QWORD *)(a1 + 136) = v22;
        *(_BYTE *)(a1 + 144) = *((_BYTE *)a2 + 144);
        *(_QWORD *)(a1 + 152) = *((_QWORD *)a2 + 19);
        v23 = *((_QWORD *)a2 + 20);
        *(_QWORD *)(a1 + 160) = v23;
        swift_bridgeObjectRetain(v21);
        swift_bridgeObjectRetain(v22);
        swift_bridgeObjectRetain(v23);
      }
      else
      {
        v24 = a2[7];
        v25 = a2[8];
        v26 = a2[9];
        *(_QWORD *)(a1 + 160) = *((_QWORD *)a2 + 20);
        *(_OWORD *)(a1 + 128) = v25;
        *(_OWORD *)(a1 + 144) = v26;
        *(_OWORD *)(a1 + 112) = v24;
      }
      v17 = 1;
    }
    else
    {
      v10 = *(_QWORD *)a2;
      *(_QWORD *)a1 = *(_QWORD *)a2;
      swift_retain(v10);
      v11 = *(int *)(sub_5440(&qword_25E930) + 48);
      v12 = (void *)(a1 + v11);
      v13 = (char *)a2 + v11;
      v14 = type metadata accessor for ColorScheme(0);
      v15 = *(_QWORD *)(v14 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
      {
        v16 = sub_5440(&qword_25E928);
        memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, char *, uint64_t))(v15 + 16))(v12, v13, v14);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
      }
      v17 = 0;
    }
    swift_storeEnumTagMultiPayload(a1, v6, v17);
  }
  v27 = *(int *)(a3 + 20);
  v28 = (_QWORD *)(a1 + v27);
  v29 = (uint64_t)a2 + v27;
  *v28 = *(_QWORD *)((char *)a2 + v27);
  v30 = *(_QWORD *)((char *)a2 + v27 + 8);
  v31 = *(_QWORD *)(a1 + v27 + 8);
  v28[1] = v30;
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRelease(v31);
  v32 = *(int *)(type metadata accessor for NothingToReviewFrameViewModel(0) + 20);
  v33 = (char *)v28 + v32;
  v34 = v29 + v32;
  v35 = type metadata accessor for YIRSourceData(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 24))(v33, v34, v35);
  return a1;
}

_QWORD *initializeWithTake for NothingToReviewFrame(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = type metadata accessor for PageBackground(0);
  if (swift_getEnumCaseMultiPayload(a2, v6))
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  else
  {
    *a1 = *a2;
    v7 = *(int *)(sub_5440(&qword_25E930) + 48);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for ColorScheme(0);
    v11 = *(_QWORD *)(v10 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
    {
      v12 = sub_5440(&qword_25E928);
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
    }
    swift_storeEnumTagMultiPayload(a1, v6, 0);
  }
  v13 = *(int *)(a3 + 20);
  v14 = (char *)a1 + v13;
  v15 = (char *)a2 + v13;
  *(_OWORD *)((char *)a1 + v13) = *(_OWORD *)((char *)a2 + v13);
  v16 = *(int *)(type metadata accessor for NothingToReviewFrameViewModel(0) + 20);
  v17 = &v14[v16];
  v18 = &v15[v16];
  v19 = type metadata accessor for YIRSourceData(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v17, v18, v19);
  return a1;
}

_QWORD *assignWithTake for NothingToReviewFrame(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;

  if (a1 != a2)
  {
    sub_224DC((uint64_t)a1, type metadata accessor for PageBackground);
    v6 = type metadata accessor for PageBackground(0);
    if (swift_getEnumCaseMultiPayload(a2, v6))
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
    else
    {
      *a1 = *a2;
      v7 = *(int *)(sub_5440(&qword_25E930) + 48);
      v8 = (char *)a1 + v7;
      v9 = (char *)a2 + v7;
      v10 = type metadata accessor for ColorScheme(0);
      v11 = *(_QWORD *)(v10 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
      {
        v12 = sub_5440(&qword_25E928);
        memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      }
      swift_storeEnumTagMultiPayload(a1, v6, 0);
    }
  }
  v13 = *(int *)(a3 + 20);
  v14 = (_QWORD *)((char *)a1 + v13);
  v15 = (char *)a2 + v13;
  v16 = *(_QWORD *)((char *)a2 + v13 + 8);
  v17 = *(_QWORD *)((char *)a1 + v13 + 8);
  *v14 = *(_QWORD *)((char *)a2 + v13);
  v14[1] = v16;
  swift_bridgeObjectRelease(v17);
  v18 = *(int *)(type metadata accessor for NothingToReviewFrameViewModel(0) + 20);
  v19 = (char *)v14 + v18;
  v20 = &v15[v18];
  v21 = type metadata accessor for YIRSourceData(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 40))(v19, v20, v21);
  return a1;
}

uint64_t getEnumTagSinglePayload for NothingToReviewFrame(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_130BC4);
}

uint64_t sub_130BC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v6 = type metadata accessor for PageBackground(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v8 = type metadata accessor for NothingToReviewFrameViewModel(0);
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for NothingToReviewFrame(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_130C44);
}

uint64_t sub_130C44(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v8 = type metadata accessor for PageBackground(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v10 = type metadata accessor for NothingToReviewFrameViewModel(0);
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t sub_130CC0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[2];

  result = type metadata accessor for PageBackground(319);
  if (v3 <= 0x3F)
  {
    v5[0] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for NothingToReviewFrameViewModel(319);
    if (v4 <= 0x3F)
    {
      v5[1] = *(_QWORD *)(result - 8) + 64;
      swift_initStructMetadata(a1, 256, 2, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

unint64_t sub_130D48()
{
  unint64_t result;
  uint64_t v1;

  result = qword_266C28;
  if (!qword_266C28)
  {
    v1 = sub_7EF8(&qword_266AF0);
    sub_7FD8(&qword_266C30, &qword_266AE0, (uint64_t)&protocol conformance descriptor for VStack<A>);
    sub_7FD8((unint64_t *)&qword_25EE78, &qword_25EE58, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_266C28);
  }
  return result;
}

uint64_t sub_130DFC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_5440(&qword_2626F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_130E44@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  __int128 v25;
  uint64_t v26;
  char v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t KeyPath;
  uint64_t *v34;
  _OWORD *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t (**v50)(char);
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _OWORD v67[3];

  v66 = a1;
  v58 = type metadata accessor for ShelfGridPaddleButtonView.PaddleOnFillButtonStyle(0);
  v63 = *(_QWORD *)(v58 - 8);
  __chkstk_darwin(v58);
  v64 = v1;
  v65 = (uint64_t)&v52 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v61);
  v62 = (char *)&v52 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for ColorConstants(0);
  __chkstk_darwin(v3);
  v55 = (char *)&v52 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for ButtonStyleConfiguration.Label(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v52 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_5440(&qword_25FD08);
  __chkstk_darwin(v9);
  v11 = (char *)&v52 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = sub_5440(&qword_266E08);
  __chkstk_darwin(v53);
  v13 = (char *)&v52 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = sub_5440(&qword_266E10);
  __chkstk_darwin(v54);
  v15 = (char *)&v52 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = sub_5440(&qword_266E18);
  __chkstk_darwin(v56);
  v17 = (char *)&v52 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = sub_5440(&qword_266E20);
  v18 = __chkstk_darwin(v59);
  v60 = (uint64_t)&v52 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  ButtonStyleConfiguration.label.getter(v18);
  v20 = _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0();
  _FrameLayout.init(width:height:alignment:)(v67, 0x403C000000000000, 0, 0x4050000000000000, 0, v20, v21);
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v11, v8, v5);
  v22 = *(int *)(v9 + 36);
  v23 = v57;
  v24 = &v11[v22];
  v25 = v67[1];
  *(_OWORD *)v24 = v67[0];
  *((_OWORD *)v24 + 1) = v25;
  *((_OWORD *)v24 + 2) = v67[2];
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v26 = sub_131350();
  v27 = static Edge.Set.all.getter(v26);
  sub_B3D0((uint64_t)v11, (uint64_t)v13, &qword_25FD08);
  v28 = &v13[*(int *)(v53 + 36)];
  *(_QWORD *)v28 = v26;
  v28[8] = v27;
  v29 = sub_B414((uint64_t)v11, &qword_25FD08);
  v30 = (uint64_t)v55;
  LOBYTE(v26) = ButtonStyleConfiguration.isPressed.getter(v29);
  _s7BooksUI18BuyButtonExternalsV6colorsAA14ColorConstantsVvg_0(v30);
  if ((v26 & 1) != 0)
    v31 = _s7BooksUI14ColorConstantsV14vibrantPrimary05SwiftB00C0Vvg_0();
  else
    v31 = _s7BooksUI14ColorConstantsV19booksSecondaryLabel05SwiftB00C0Vvg_0();
  v32 = v31;
  sub_224DC(v30, type metadata accessor for ColorConstants);
  KeyPath = swift_getKeyPath(&unk_1EEDB0);
  sub_B3D0((uint64_t)v13, (uint64_t)v15, &qword_266E08);
  v34 = (uint64_t *)&v15[*(int *)(v54 + 36)];
  *v34 = KeyPath;
  v34[1] = v32;
  sub_B414((uint64_t)v13, &qword_266E08);
  v35 = v62;
  v36 = &v62[*(int *)(v61 + 20)];
  v37 = enum case for RoundedCornerStyle.continuous(_:);
  v38 = type metadata accessor for RoundedCornerStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 104))(v36, v37, v38);
  __asm { FMOV            V0.2D, #6.0 }
  *v35 = _Q0;
  v44 = (uint64_t)&v17[*(int *)(v56 + 36)];
  sub_1E428((uint64_t)v35, v44, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  *(_WORD *)(v44 + *(int *)(sub_5440(&qword_25F700) + 36)) = 256;
  sub_B3D0((uint64_t)v15, (uint64_t)v17, &qword_266E10);
  sub_224DC((uint64_t)v35, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  sub_B414((uint64_t)v15, &qword_266E10);
  v45 = v65;
  sub_1E428(v23, v65, type metadata accessor for ShelfGridPaddleButtonView.PaddleOnFillButtonStyle);
  v46 = *(unsigned __int8 *)(v63 + 80);
  v47 = (v46 + 16) & ~v46;
  v48 = swift_allocObject(&unk_254290, v47 + v64, v46 | 7);
  sub_21C88(v45, v48 + v47, type metadata accessor for ShelfGridPaddleButtonView.PaddleOnFillButtonStyle);
  v49 = v60;
  sub_B3D0((uint64_t)v17, v60, &qword_266E18);
  v50 = (uint64_t (**)(char))(v49 + *(int *)(v59 + 36));
  *v50 = sub_133B30;
  v50[1] = (uint64_t (*)(char))v48;
  sub_B414((uint64_t)v17, &qword_266E18);
  return sub_167A4(v49, v66, &qword_266E20);
}

uint64_t sub_131350()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char v14;
  void (*v15)(_BYTE *, uint64_t);
  void *v16;
  id v17;
  uint64_t v18;
  _BYTE v20[16];
  uint64_t v21;
  uint64_t v22;

  v1 = type metadata accessor for ColorConstants(0);
  __chkstk_darwin(v1);
  v3 = &v20[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = type metadata accessor for ColorScheme(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = &v20[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v6);
  v10 = &v20[-v9];
  v11 = *(_QWORD *)(v0 + 8);
  v20[8] = *(_BYTE *)v0;
  v21 = v11;
  v12 = sub_5440(&qword_2668E8);
  v13 = State.wrappedValue.getter(&v22, v12);
  if (v22 != 1)
    return static Color.clear.getter(v13);
  type metadata accessor for ShelfGridPaddleButtonView.PaddleOnFillButtonStyle(0);
  sub_31378((uint64_t)v10);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v5 + 104))(v8, enum case for ColorScheme.dark(_:), v4);
  v14 = static ColorScheme.== infix(_:_:)(v10, v8);
  v15 = *(void (**)(_BYTE *, uint64_t))(v5 + 8);
  v15(v8, v4);
  v15(v10, v4);
  _s7BooksUI18BuyButtonExternalsV6colorsAA14ColorConstantsVvg_0((uint64_t)v3);
  v16 = (void *)objc_opt_self(UIColor);
  if ((v14 & 1) != 0)
    v17 = objc_msgSend(v16, "tertiarySystemFillColor");
  else
    v17 = objc_msgSend(v16, "quaternarySystemFillColor");
  v18 = Color.init(_:)(v17);
  sub_224DC((uint64_t)v3, type metadata accessor for ColorConstants);
  return v18;
}

uint64_t sub_131528@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  __int128 v26;
  void (*v27)(char *, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t KeyPath;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  _OWORD *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t (**v60)(char);
  char *v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  uint64_t v79;
  char v80;
  _OWORD v81[3];

  v76 = a1;
  v71 = type metadata accessor for ShelfGridPaddleButtonView.PaddleOnArtworkButtonStyle(0);
  v74 = *(_QWORD *)(v71 - 8);
  __chkstk_darwin(v71);
  v75 = v1;
  v64 = (char *)&v62 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v72 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v72);
  v73 = (char *)&v62 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for ColorConstants(0);
  __chkstk_darwin(v3);
  v77 = (uint64_t)&v62 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_5440(&qword_266DE0);
  __chkstk_darwin(v5);
  v7 = (char *)&v62 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for ButtonStyleConfiguration.Label(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v62 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_5440(&qword_25FD08);
  __chkstk_darwin(v12);
  v14 = (char *)&v62 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_5440(&qword_266DE8);
  v68 = *(_QWORD *)(v15 - 8);
  v69 = v15;
  __chkstk_darwin(v15);
  v17 = (char *)&v62 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v66 = sub_5440(&qword_266DF0);
  __chkstk_darwin(v66);
  v19 = (char *)&v62 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v67 = sub_5440(&qword_266DF8);
  __chkstk_darwin(v67);
  v62 = (char *)&v62 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v70 = sub_5440(&qword_266E00);
  v21 = __chkstk_darwin(v70);
  v63 = (char *)&v62 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  ButtonStyleConfiguration.label.getter(v21);
  v23 = _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0();
  _FrameLayout.init(width:height:alignment:)(v81, 0x403C000000000000, 0, 0x4050000000000000, 0, v23, v24);
  (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v14, v11, v8);
  v25 = &v14[*(int *)(v12 + 36)];
  v26 = v81[1];
  *(_OWORD *)v25 = v81[0];
  *((_OWORD *)v25 + 1) = v26;
  *((_OWORD *)v25 + 2) = v81[2];
  v27 = *(void (**)(char *, uint64_t))(v9 + 8);
  v28 = v65;
  v27(v11, v8);
  v29 = *(_QWORD *)(v28 + 8);
  v78 = *(_BYTE *)v28;
  v79 = v29;
  v30 = sub_5440(&qword_2668E8);
  v31 = State.wrappedValue.getter(&v80, v30);
  if (v80 == 1)
  {
    if ((ButtonStyleConfiguration.isPressed.getter(v31) & 1) != 0)
      static Material.thin.getter();
    else
      static Material.regular.getter();
    v32 = type metadata accessor for Material(0);
    v33 = (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(v7, 0, 1, v32);
  }
  else
  {
    v32 = type metadata accessor for Material(0);
    v33 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(v7, 1, 1, v32);
  }
  v34 = static Edge.Set.all.getter(v33);
  type metadata accessor for Material(0);
  v35 = sub_3CCBC();
  View.background<A>(_:ignoresSafeAreaEdges:)(v7, v34, v12, v32, v35, &protocol witness table for Material);
  sub_B414((uint64_t)v7, &qword_266DE0);
  v36 = sub_B414((uint64_t)v14, &qword_25FD08);
  v37 = ButtonStyleConfiguration.isPressed.getter(v36);
  _s7BooksUI18BuyButtonExternalsV6colorsAA14ColorConstantsVvg_0(v77);
  v38 = _s7BooksUI14ColorConstantsV14vibrantPrimary05SwiftB00C0Vvg_0();
  v39 = (uint64_t)v62;
  if ((v37 & 1) == 0)
  {
    v40 = Color.opacity(_:)(0.7);
    swift_release(v38);
    v38 = v40;
  }
  v41 = (uint64_t)v64;
  v42 = (uint64_t)v63;
  sub_224DC(v77, type metadata accessor for ColorConstants);
  KeyPath = swift_getKeyPath(&unk_1EEDB0);
  v45 = v68;
  v44 = v69;
  (*(void (**)(char *, char *, uint64_t))(v68 + 16))(v19, v17, v69);
  v46 = (uint64_t *)&v19[*(int *)(v66 + 36)];
  *v46 = KeyPath;
  v46[1] = v38;
  (*(void (**)(char *, uint64_t))(v45 + 8))(v17, v44);
  v47 = v73;
  v48 = &v73[*(int *)(v72 + 20)];
  v49 = enum case for RoundedCornerStyle.continuous(_:);
  v50 = type metadata accessor for RoundedCornerStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 104))(v48, v49, v50);
  __asm { FMOV            V0.2D, #6.0 }
  *v47 = _Q0;
  v56 = v39 + *(int *)(v67 + 36);
  sub_1E428((uint64_t)v47, v56, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  *(_WORD *)(v56 + *(int *)(sub_5440(&qword_25F700) + 36)) = 256;
  sub_B3D0((uint64_t)v19, v39, &qword_266DF0);
  sub_224DC((uint64_t)v47, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  sub_B414((uint64_t)v19, &qword_266DF0);
  sub_1E428(v28, v41, type metadata accessor for ShelfGridPaddleButtonView.PaddleOnArtworkButtonStyle);
  v57 = *(unsigned __int8 *)(v74 + 80);
  v58 = (v57 + 16) & ~v57;
  v59 = swift_allocObject(&unk_254268, v58 + v75, v57 | 7);
  sub_21C88(v41, v59 + v58, type metadata accessor for ShelfGridPaddleButtonView.PaddleOnArtworkButtonStyle);
  sub_B3D0(v39, v42, &qword_266DF8);
  v60 = (uint64_t (**)(char))(v42 + *(int *)(v70 + 36));
  *v60 = sub_133A1C;
  v60[1] = (uint64_t (*)(char))v59;
  sub_B414(v39, &qword_266DF8);
  return sub_167A4(v42, v76, &qword_266E00);
}

uint64_t sub_131B64(char a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE v5[9];
  uint64_t v6;

  v2 = *(_QWORD *)(a2 + 8);
  v5[1] = *(_BYTE *)a2;
  v6 = v2;
  v5[0] = a1;
  v3 = sub_5440(&qword_2668E8);
  return State.wrappedValue.setter(v5, v3);
}

void ShelfGridPaddleButtonView.context.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 1);
}

uint64_t ShelfGridPaddleButtonView.action.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  swift_retain(*(_QWORD *)(v0 + 16));
  return v1;
}

_BYTE *ShelfGridPaddleButtonView.init(direction:context:action:)@<X0>(_BYTE *result@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  char v5;

  v5 = *a2;
  *(_BYTE *)a5 = *result;
  *(_BYTE *)(a5 + 1) = v5;
  *(_QWORD *)(a5 + 8) = a3;
  *(_QWORD *)(a5 + 16) = a4;
  return result;
}

void sub_131C08(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char v2;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  double v10;
  double v11;
  double v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  char v20;

  v2 = a1;
  v4 = static VerticalAlignment.center.getter(a1);
  sub_131CB4(v2 & 1, (uint64_t)&v18);
  v17 = v18;
  v5 = v19;
  v6 = v20;
  v8 = static Edge.Set.horizontal.getter(v7);
  v9 = v8;
  v13 = EdgeInsets.init(_all:)(v8, 6.0, v10, v11, v12);
  *(_QWORD *)a2 = v4;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 1;
  *(_OWORD *)(a2 + 24) = v17;
  *(_QWORD *)(a2 + 40) = v5;
  *(_BYTE *)(a2 + 48) = v6;
  *(_BYTE *)(a2 + 56) = v9;
  *(double *)(a2 + 64) = v13;
  *(_QWORD *)(a2 + 72) = v14;
  *(_QWORD *)(a2 + 80) = v15;
  *(_QWORD *)(a2 + 88) = v16;
  *(_BYTE *)(a2 + 96) = 0;
}

double sub_131CB4@<D0>(char a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t KeyPath;
  uint64_t v15;
  unint64_t v16;
  double result;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  __int128 v24;
  uint64_t v25;
  char v26;

  v4 = sub_5440(&qword_25FE08);
  __chkstk_darwin(v4);
  v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a1 & 1) != 0)
  {
    v11 = Image.init(systemName:)(0xD000000000000015, 0x80000000001FD5A0);
    v12 = type metadata accessor for Font.Design(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v6, 1, 1, v12);
    v13 = static Font.system(size:weight:design:)(0, 1, v6, 34.0);
    sub_B414((uint64_t)v6, &qword_25FE08);
    KeyPath = swift_getKeyPath(&unk_1EEDE0);
    v20 = v11;
    v21 = KeyPath;
    v22 = v13;
    v23 = 1;
  }
  else
  {
    v7 = Image.init(systemName:)(0xD000000000000014, 0x80000000001FD5C0);
    v8 = type metadata accessor for Font.Design(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v6, 1, 1, v8);
    v9 = static Font.system(size:weight:design:)(0, 1, v6, 34.0);
    sub_B414((uint64_t)v6, &qword_25FE08);
    v10 = swift_getKeyPath(&unk_1EEDE0);
    v20 = v7;
    v21 = v10;
    v22 = v9;
    v23 = 0;
  }
  v15 = sub_5440(&qword_2659C0);
  v16 = sub_106CC0();
  _ConditionalContent<>.init(storage:)(&v20, v15, v15, v16, v16);
  result = *(double *)&v24;
  v18 = v25;
  v19 = v26;
  *(_OWORD *)a2 = v24;
  *(_QWORD *)(a2 + 16) = v18;
  *(_BYTE *)(a2 + 24) = v19;
  return result;
}

uint64_t ShelfGridPaddleButtonView.body.getter@<X0>(uint64_t a1@<X8>)
{
  char *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t OpaqueTypeConformance2;
  uint64_t v44;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _BYTE v75[17];
  char v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _BYTE v83[9];

  v74 = a1;
  v72 = type metadata accessor for ShelfGridPaddleButtonView.PaddleOnArtworkButtonStyle(0);
  v2 = __chkstk_darwin(v72);
  v4 = (char *)&v63 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  v6 = (char *)&v63 - v5;
  v73 = sub_5440(&qword_266C40);
  v65 = *(_QWORD *)(v73 - 8);
  v7 = __chkstk_darwin(v73);
  v63 = (char *)&v63 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v64 = (char *)&v63 - v9;
  v67 = sub_5440(&qword_266C48);
  __chkstk_darwin(v67);
  v71 = (char *)&v63 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v68 = type metadata accessor for ShelfGridPaddleButtonView.PaddleOnFillButtonStyle(0);
  v11 = __chkstk_darwin(v68);
  v13 = (char *)&v63 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v63 - v14;
  v69 = sub_5440(&qword_266C50);
  v66 = *(_QWORD *)(v69 - 8);
  __chkstk_darwin(v69);
  v17 = (char *)&v63 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v70 = sub_5440(&qword_266C58);
  v18 = __chkstk_darwin(v70);
  v20 = (char *)&v63 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v23 = (char *)&v63 - v22;
  v24 = *v1;
  v25 = v1[1];
  v27 = *((_QWORD *)v1 + 1);
  v26 = *((_QWORD *)v1 + 2);
  v75[16] = v24;
  if ((v25 & 1) != 0)
  {
    v76 = 1;
    v77 = v27;
    v78 = v26;
    swift_retain(v26);
    v28 = sub_5440(&qword_266C60);
    v29 = sub_13256C();
    Button.init(action:label:)(v27, v26, sub_132568, v75, v28, v29);
    v83[0] = 0;
    State.init(wrappedValue:)(&v79, v83, &type metadata for Bool);
    v30 = v80;
    *v4 = v79;
    *((_QWORD *)v4 + 1) = v30;
    v31 = v72;
    v32 = &v4[*(int *)(v72 + 20)];
    *(_QWORD *)v32 = swift_getKeyPath(&unk_1EEB20);
    v33 = sub_5440(&qword_25F1E8);
    swift_storeEnumTagMultiPayload(v32, v33, 0);
    sub_21C88((uint64_t)v4, (uint64_t)v6, type metadata accessor for ShelfGridPaddleButtonView.PaddleOnArtworkButtonStyle);
    v34 = sub_7FD8(&qword_266C80, &qword_266C50, (uint64_t)&protocol conformance descriptor for Button<A>);
    v35 = sub_6FD0(&qword_266C88, type metadata accessor for ShelfGridPaddleButtonView.PaddleOnArtworkButtonStyle, (uint64_t)&unk_1EED74);
    v36 = v63;
    v37 = v69;
    View.buttonStyle<A>(_:)(v6, v69, v31, v34);
    sub_224DC((uint64_t)v6, type metadata accessor for ShelfGridPaddleButtonView.PaddleOnArtworkButtonStyle);
    (*(void (**)(char *, uint64_t))(v66 + 8))(v17, v37);
    v38 = v65;
    v39 = v64;
    v40 = v73;
    (*(void (**)(char *, char *, uint64_t))(v65 + 32))(v64, v36, v73);
    v41 = v71;
    (*(void (**)(char *, char *, uint64_t))(v38 + 16))(v71, v39, v40);
    swift_storeEnumTagMultiPayload(v41, v67, 1);
    v42 = sub_6FD0(&qword_266C90, type metadata accessor for ShelfGridPaddleButtonView.PaddleOnFillButtonStyle, (uint64_t)&unk_1EED3C);
    v79 = v37;
    v80 = v68;
    v81 = v34;
    v82 = v42;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v79, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
    v79 = v37;
    v80 = v31;
    v81 = v34;
    v82 = v35;
    v44 = swift_getOpaqueTypeConformance2(&v79, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
    _ConditionalContent<>.init(storage:)(v41, v70, v40, OpaqueTypeConformance2, v44);
    return (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v39, v40);
  }
  else
  {
    v76 = 0;
    v77 = v27;
    v78 = v26;
    v65 = v21;
    swift_retain(v26);
    v46 = sub_5440(&qword_266C60);
    v47 = sub_13256C();
    Button.init(action:label:)(v27, v26, sub_132568, v75, v46, v47);
    v83[0] = 0;
    State.init(wrappedValue:)(&v79, v83, &type metadata for Bool);
    v48 = v80;
    *v13 = v79;
    *((_QWORD *)v13 + 1) = v48;
    v49 = v68;
    v50 = &v13[*(int *)(v68 + 20)];
    *(_QWORD *)v50 = swift_getKeyPath(&unk_1EEB20);
    v51 = sub_5440(&qword_25F1E8);
    swift_storeEnumTagMultiPayload(v50, v51, 0);
    v52 = &v13[*(int *)(v49 + 24)];
    *(_QWORD *)v52 = swift_getKeyPath(&unk_1EEB48);
    v53 = sub_5440(&qword_25E948);
    swift_storeEnumTagMultiPayload(v52, v53, 0);
    sub_21C88((uint64_t)v13, (uint64_t)v15, type metadata accessor for ShelfGridPaddleButtonView.PaddleOnFillButtonStyle);
    v54 = sub_7FD8(&qword_266C80, &qword_266C50, (uint64_t)&protocol conformance descriptor for Button<A>);
    v55 = sub_6FD0(&qword_266C90, type metadata accessor for ShelfGridPaddleButtonView.PaddleOnFillButtonStyle, (uint64_t)&unk_1EED3C);
    v56 = v69;
    View.buttonStyle<A>(_:)(v15, v69, v49, v54);
    sub_224DC((uint64_t)v15, type metadata accessor for ShelfGridPaddleButtonView.PaddleOnFillButtonStyle);
    (*(void (**)(char *, uint64_t))(v66 + 8))(v17, v56);
    v57 = v65;
    v58 = v70;
    (*(void (**)(char *, char *, uint64_t))(v65 + 32))(v23, v20, v70);
    v59 = v71;
    (*(void (**)(char *, char *, uint64_t))(v57 + 16))(v71, v23, v58);
    swift_storeEnumTagMultiPayload(v59, v67, 0);
    v79 = v56;
    v80 = v49;
    v81 = v54;
    v82 = v55;
    v60 = swift_getOpaqueTypeConformance2(&v79, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
    v61 = sub_6FD0(&qword_266C88, type metadata accessor for ShelfGridPaddleButtonView.PaddleOnArtworkButtonStyle, (uint64_t)&unk_1EED74);
    v79 = v56;
    v80 = v72;
    v81 = v54;
    v82 = v61;
    v62 = swift_getOpaqueTypeConformance2(&v79, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
    _ConditionalContent<>.init(storage:)(v59, v58, v73, v60, v62);
    return (*(uint64_t (**)(char *, uint64_t))(v57 + 8))(v23, v58);
  }
}

uint64_t type metadata accessor for ShelfGridPaddleButtonView.PaddleOnArtworkButtonStyle(uint64_t a1)
{
  return sub_1FE90(a1, qword_266DA8, (uint64_t)&nominal type descriptor for ShelfGridPaddleButtonView.PaddleOnArtworkButtonStyle);
}

uint64_t type metadata accessor for ShelfGridPaddleButtonView.PaddleOnFillButtonStyle(uint64_t a1)
{
  return sub_1FE90(a1, qword_266D10, (uint64_t)&nominal type descriptor for ShelfGridPaddleButtonView.PaddleOnFillButtonStyle);
}

unint64_t sub_13256C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_266C68;
  if (!qword_266C68)
  {
    v1 = sub_7EF8(&qword_266C60);
    sub_7FD8(&qword_266C70, &qword_266C78, (uint64_t)&protocol conformance descriptor for HStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_266C68);
  }
  return result;
}

void sub_1325F4(uint64_t a1@<X8>)
{
  uint64_t v1;
  int v2;

  if (*(_BYTE *)(v1 + 17))
    v2 = 256;
  else
    v2 = 0;
  sub_131C08(v2 | *(unsigned __int8 *)(v1 + 16), a1);
}

unint64_t sub_132620()
{
  unint64_t result;

  result = qword_266C98;
  if (!qword_266C98)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ShelfGridPaddleButtonView.Context, &type metadata for ShelfGridPaddleButtonView.Context);
    atomic_store(result, (unint64_t *)&qword_266C98);
  }
  return result;
}

unint64_t sub_132668()
{
  unint64_t result;

  result = qword_266CA0;
  if (!qword_266CA0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ShelfGridPaddleButtonView.Direction, &type metadata for ShelfGridPaddleButtonView.Direction);
    atomic_store(result, (unint64_t *)&qword_266CA0);
  }
  return result;
}

uint64_t sub_1326AC(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &opaque type descriptor for <<opaque return type of ShelfGridPaddleButtonView.body>>, 1);
}

uint64_t sub_1326C4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  swift_retain(v3);
  return a1;
}

uint64_t assignWithCopy for ShelfGridPaddleButtonView(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  swift_retain(v3);
  swift_release(v4);
  return a1;
}

uint64_t assignWithTake for ShelfGridPaddleButtonView(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  v3 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release(v3);
  return a1;
}

ValueMetadata *type metadata accessor for ShelfGridPaddleButtonView()
{
  return &type metadata for ShelfGridPaddleButtonView;
}

ValueMetadata *type metadata accessor for ShelfGridPaddleButtonView.Context()
{
  return &type metadata for ShelfGridPaddleButtonView.Context;
}

uint64_t _s7BooksUI25ShelfGridPaddleButtonViewV9DirectionOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1327F8 + 4 * byte_1EEB15[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_13282C + 4 * byte_1EEB10[v4]))();
}

uint64_t sub_13282C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_132834(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x13283CLL);
  return result;
}

uint64_t sub_132848(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x132850);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_132854(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_13285C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ShelfGridPaddleButtonView.Direction()
{
  return &type metadata for ShelfGridPaddleButtonView.Direction;
}

unint64_t sub_13287C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  result = qword_266CA8;
  if (!qword_266CA8)
  {
    v1 = sub_7EF8(&qword_266CB0);
    v2 = sub_7EF8(&qword_266C50);
    v3 = type metadata accessor for ShelfGridPaddleButtonView.PaddleOnFillButtonStyle(255);
    v4 = sub_7FD8(&qword_266C80, &qword_266C50, (uint64_t)&protocol conformance descriptor for Button<A>);
    v7 = v2;
    v8 = v3;
    v9 = v4;
    v10 = sub_6FD0(&qword_266C90, type metadata accessor for ShelfGridPaddleButtonView.PaddleOnFillButtonStyle, (uint64_t)&unk_1EED3C);
    swift_getOpaqueTypeConformance2(&v7, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
    v5 = type metadata accessor for ShelfGridPaddleButtonView.PaddleOnArtworkButtonStyle(255);
    v6 = sub_6FD0(&qword_266C88, type metadata accessor for ShelfGridPaddleButtonView.PaddleOnArtworkButtonStyle, (uint64_t)&unk_1EED74);
    v7 = v2;
    v8 = v5;
    v9 = v4;
    v10 = v6;
    swift_getOpaqueTypeConformance2(&v7, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_266CA8);
  }
  return result;
}

uint64_t *sub_1329AC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v14 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v14);
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    v7 = a2[1];
    v4[1] = v7;
    v8 = *(int *)(a3 + 20);
    v9 = (uint64_t *)((char *)v4 + v8);
    v10 = (uint64_t *)((char *)a2 + v8);
    swift_retain(v7);
    v11 = sub_5440(&qword_25F1E8);
    if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
    {
      v12 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v9, v10, v12);
      v13 = 1;
    }
    else
    {
      v15 = *v10;
      *v9 = *v10;
      swift_retain(v15);
      v13 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v11, v13);
    v16 = *(int *)(a3 + 24);
    v17 = (uint64_t *)((char *)v4 + v16);
    v18 = (uint64_t *)((char *)a2 + v16);
    v19 = sub_5440(&qword_25E948);
    if (swift_getEnumCaseMultiPayload(v18, v19) == 1)
    {
      v20 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v17, v18, v20);
      v21 = v17;
      v22 = v19;
      v23 = 1;
    }
    else
    {
      v24 = *v18;
      *v17 = *v18;
      swift_retain(v24);
      v21 = v17;
      v22 = v19;
      v23 = 0;
    }
    swift_storeEnumTagMultiPayload(v21, v22, v23);
  }
  return v4;
}

double sub_132B14(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  double result;

  swift_release(*(_QWORD *)(a1 + 8));
  v4 = (_QWORD *)(a1 + *(int *)(a2 + 20));
  v5 = sub_5440(&qword_25F1E8);
  if (swift_getEnumCaseMultiPayload(v4, v5) == 1)
  {
    v6 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v4, v6);
  }
  else
  {
    swift_release(*v4);
  }
  v7 = (_QWORD *)(a1 + *(int *)(a2 + 24));
  v8 = sub_5440(&qword_25E948);
  if (swift_getEnumCaseMultiPayload(v7, v8) == 1)
  {
    v9 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v7, v9);
  }
  else
  {
    *(_QWORD *)&result = swift_release(*v7).n128_u64[0];
  }
  return result;
}

uint64_t sub_132BE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  v7 = *(int *)(a3 + 20);
  v8 = (uint64_t *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  swift_retain(v6);
  v10 = sub_5440(&qword_25F1E8);
  if (swift_getEnumCaseMultiPayload(v9, v10) == 1)
  {
    v11 = type metadata accessor for ColorScheme(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v8, v9, v11);
    v12 = 1;
  }
  else
  {
    v13 = *v9;
    *v8 = *v9;
    swift_retain(v13);
    v12 = 0;
  }
  swift_storeEnumTagMultiPayload(v8, v10, v12);
  v14 = *(int *)(a3 + 24);
  v15 = (uint64_t *)(a1 + v14);
  v16 = (uint64_t *)(a2 + v14);
  v17 = sub_5440(&qword_25E948);
  if (swift_getEnumCaseMultiPayload(v16, v17) == 1)
  {
    v18 = type metadata accessor for ColorScheme(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v15, v16, v18);
    v19 = 1;
  }
  else
  {
    v20 = *v16;
    *v15 = *v16;
    swift_retain(v20);
    v19 = 0;
  }
  swift_storeEnumTagMultiPayload(v15, v17, v19);
  return a1;
}

uint64_t sub_132D1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v7;
  swift_retain(v7);
  swift_release(v6);
  if (a1 != a2)
  {
    v8 = *(int *)(a3 + 20);
    v9 = (uint64_t *)(a1 + v8);
    v10 = (uint64_t *)(a2 + v8);
    sub_B414(a1 + v8, &qword_25F1E8);
    v11 = sub_5440(&qword_25F1E8);
    if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
    {
      v12 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v9, v10, v12);
      v13 = 1;
    }
    else
    {
      v14 = *v10;
      *v9 = *v10;
      swift_retain(v14);
      v13 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v11, v13);
    v15 = *(int *)(a3 + 24);
    v16 = (uint64_t *)(a1 + v15);
    v17 = (uint64_t *)(a2 + v15);
    sub_B414(a1 + v15, &qword_25E948);
    v18 = sub_5440(&qword_25E948);
    if (swift_getEnumCaseMultiPayload(v17, v18) == 1)
    {
      v19 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v16, v17, v19);
      v20 = 1;
    }
    else
    {
      v21 = *v17;
      *v16 = *v17;
      swift_retain(v21);
      v20 = 0;
    }
    swift_storeEnumTagMultiPayload(v16, v18, v20);
  }
  return a1;
}

_OWORD *sub_132E84(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_5440(&qword_25F1E8);
  if (swift_getEnumCaseMultiPayload(v8, v9) == 1)
  {
    v10 = type metadata accessor for ColorScheme(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v7, v8, v10);
    swift_storeEnumTagMultiPayload(v7, v9, 1);
  }
  else
  {
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  v11 = *(int *)(a3 + 24);
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  v14 = sub_5440(&qword_25E948);
  if (swift_getEnumCaseMultiPayload(v13, v14) == 1)
  {
    v15 = type metadata accessor for ColorScheme(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v12, v13, v15);
    swift_storeEnumTagMultiPayload(v12, v14, 1);
  }
  else
  {
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  return a1;
}

uint64_t sub_132FB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v6 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_release(v6);
  if (a1 != a2)
  {
    v7 = *(int *)(a3 + 20);
    v8 = (void *)(a1 + v7);
    v9 = (const void *)(a2 + v7);
    sub_B414(a1 + v7, &qword_25F1E8);
    v10 = sub_5440(&qword_25F1E8);
    if (swift_getEnumCaseMultiPayload(v9, v10) == 1)
    {
      v11 = type metadata accessor for ColorScheme(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v8, v9, v11);
      swift_storeEnumTagMultiPayload(v8, v10, 1);
    }
    else
    {
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    }
    v12 = *(int *)(a3 + 24);
    v13 = (void *)(a1 + v12);
    v14 = (const void *)(a2 + v12);
    sub_B414(a1 + v12, &qword_25E948);
    v15 = sub_5440(&qword_25E948);
    if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
    {
      v16 = type metadata accessor for ColorScheme(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v13, v14, v16);
      swift_storeEnumTagMultiPayload(v13, v15, 1);
    }
    else
    {
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_13311C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_133128);
}

uint64_t sub_133128(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  int v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if ((_DWORD)a2 == 2147483646)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    v5 = v4 - 1;
    if (v5 < 0)
      v5 = -1;
    return (v5 + 1);
  }
  else
  {
    v9 = sub_5440(&qword_25F210);
    v10 = *(_QWORD *)(v9 - 8);
    if (*(_DWORD *)(v10 + 84) == (_DWORD)a2)
    {
      v11 = v9;
      v12 = *(int *)(a3 + 20);
    }
    else
    {
      v11 = sub_5440(&qword_25EAE8);
      v10 = *(_QWORD *)(v11 - 8);
      v12 = *(int *)(a3 + 24);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1 + v12, a2, v11);
  }
}

uint64_t sub_1331DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1331E8);
}

uint64_t sub_1331E8(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 2147483646)
  {
    *(_QWORD *)(result + 8) = a2;
  }
  else
  {
    v8 = sub_5440(&qword_25F210);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 20);
    }
    else
    {
      v10 = sub_5440(&qword_25EAE8);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 24);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

void sub_13328C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[3];

  v6[0] = &unk_1EED08;
  sub_2ADCC(319, (unint64_t *)&qword_25F298, type metadata accessor for ColorConstants);
  if (v3 <= 0x3F)
  {
    v6[1] = *(_QWORD *)(v2 - 8) + 64;
    sub_2ADCC(319, (unint64_t *)&qword_25EB58, (uint64_t (*)(uint64_t))&type metadata accessor for ColorScheme);
    if (v5 <= 0x3F)
    {
      v6[2] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 256, 3, v6, a1 + 16);
    }
  }
}

uint64_t *sub_13333C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v14 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v14 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain(v14);
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    v5 = a2[1];
    v3[1] = v5;
    v6 = *(int *)(a3 + 20);
    v7 = (uint64_t *)((char *)v3 + v6);
    v8 = (uint64_t *)((char *)a2 + v6);
    swift_retain(v5);
    v9 = sub_5440(&qword_25F1E8);
    if (swift_getEnumCaseMultiPayload(v8, v9) == 1)
    {
      v10 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v7, v8, v10);
      v11 = v7;
      v12 = v9;
      v13 = 1;
    }
    else
    {
      v15 = *v8;
      *v7 = *v8;
      swift_retain(v15);
      v11 = v7;
      v12 = v9;
      v13 = 0;
    }
    swift_storeEnumTagMultiPayload(v11, v12, v13);
  }
  return v3;
}

double sub_133420(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  double result;

  swift_release(*(_QWORD *)(a1 + 8));
  v4 = (_QWORD *)(a1 + *(int *)(a2 + 20));
  v5 = sub_5440(&qword_25F1E8);
  if (swift_getEnumCaseMultiPayload(v4, v5) == 1)
  {
    v6 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v4, v6);
  }
  else
  {
    *(_QWORD *)&result = swift_release(*v4).n128_u64[0];
  }
  return result;
}

uint64_t sub_133498(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(int *)(a3 + 20);
  v6 = (uint64_t *)(a1 + v5);
  v7 = (uint64_t *)(a2 + v5);
  swift_retain(v4);
  v8 = sub_5440(&qword_25F1E8);
  if (swift_getEnumCaseMultiPayload(v7, v8) == 1)
  {
    v9 = type metadata accessor for ColorScheme(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v6, v7, v9);
    v10 = 1;
  }
  else
  {
    v11 = *v7;
    *v6 = *v7;
    swift_retain(v11);
    v10 = 0;
  }
  swift_storeEnumTagMultiPayload(v6, v8, v10);
  return a1;
}

uint64_t sub_133548(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v7;
  swift_retain(v7);
  swift_release(v6);
  if (a1 != a2)
  {
    v8 = *(int *)(a3 + 20);
    v9 = (uint64_t *)(a1 + v8);
    v10 = (uint64_t *)(a2 + v8);
    sub_B414(a1 + v8, &qword_25F1E8);
    v11 = sub_5440(&qword_25F1E8);
    if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
    {
      v12 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v9, v10, v12);
      v13 = 1;
    }
    else
    {
      v14 = *v10;
      *v9 = *v10;
      swift_retain(v14);
      v13 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v11, v13);
  }
  return a1;
}

_OWORD *sub_133624(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = sub_5440(&qword_25F1E8);
  if (swift_getEnumCaseMultiPayload(v6, v7) == 1)
  {
    v8 = type metadata accessor for ColorScheme(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v5, v6, v8);
    swift_storeEnumTagMultiPayload(v5, v7, 1);
  }
  else
  {
    memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
  }
  return a1;
}

uint64_t sub_1336CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v6 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_release(v6);
  if (a1 != a2)
  {
    v7 = *(int *)(a3 + 20);
    v8 = (void *)(a1 + v7);
    v9 = (const void *)(a2 + v7);
    sub_B414(a1 + v7, &qword_25F1E8);
    v10 = sub_5440(&qword_25F1E8);
    if (swift_getEnumCaseMultiPayload(v9, v10) == 1)
    {
      v11 = type metadata accessor for ColorScheme(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v8, v9, v11);
      swift_storeEnumTagMultiPayload(v8, v10, 1);
    }
    else
    {
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_1337A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1337B0);
}

uint64_t sub_1337B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  int v5;
  uint64_t v9;

  if ((_DWORD)a2 == 2147483646)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    v5 = v4 - 1;
    if (v5 < 0)
      v5 = -1;
    return (v5 + 1);
  }
  else
  {
    v9 = sub_5440(&qword_25F210);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v9);
  }
}

uint64_t sub_13383C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_133848);
}

uint64_t sub_133848(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 2147483646)
  {
    *(_QWORD *)(result + 8) = a2;
  }
  else
  {
    v7 = sub_5440(&qword_25F210);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 20), a2, a2, v7);
  }
  return result;
}

void sub_1338C0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = &unk_1EED08;
  sub_2ADCC(319, (unint64_t *)&qword_25F298, type metadata accessor for ColorConstants);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(v2 - 8) + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
  }
}

uint64_t sub_133944(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_22E65C, 1);
}

uint64_t sub_133954(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_22E634, 1);
}

uint64_t sub_13396C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v1 = type metadata accessor for ShelfGridPaddleButtonView.PaddleOnArtworkButtonStyle(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release(*(_QWORD *)(v0 + v4 + 8));
  v6 = (_QWORD *)(v0 + v4 + *(int *)(v1 + 20));
  v7 = sub_5440(&qword_25F1E8);
  if (swift_getEnumCaseMultiPayload(v6, v7) == 1)
  {
    v8 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v6, v8);
  }
  else
  {
    swift_release(*v6);
  }
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_133A1C(char a1)
{
  return sub_133B3C(a1, type metadata accessor for ShelfGridPaddleButtonView.PaddleOnArtworkButtonStyle);
}

uint64_t sub_133A28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  v1 = type metadata accessor for ShelfGridPaddleButtonView.PaddleOnFillButtonStyle(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release(*(_QWORD *)(v0 + v4 + 8));
  v6 = (_QWORD *)(v0 + v4 + *(int *)(v1 + 20));
  v7 = sub_5440(&qword_25F1E8);
  if (swift_getEnumCaseMultiPayload(v6, v7) == 1)
  {
    v8 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v6, v8);
  }
  else
  {
    swift_release(*v6);
  }
  v9 = (_QWORD *)(v0 + v4 + *(int *)(v1 + 24));
  v10 = sub_5440(&qword_25E948);
  if (swift_getEnumCaseMultiPayload(v9, v10) == 1)
  {
    v11 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v9, v11);
  }
  else
  {
    swift_release(*v9);
  }
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_133B30(char a1)
{
  return sub_133B3C(a1, type metadata accessor for ShelfGridPaddleButtonView.PaddleOnFillButtonStyle);
}

uint64_t sub_133B3C(char a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;
  uint64_t v4;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(a2(0) - 8) + 80);
  return sub_131B64(a1, v2 + ((v4 + 16) & ~v4));
}

uint64_t sub_133B84()
{
  return sub_133D70(&qword_266E28, &qword_266E00, (void (*)(void))sub_133BB0);
}

unint64_t sub_133BB0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_266E30;
  if (!qword_266E30)
  {
    v1 = sub_7EF8(&qword_266DF8);
    sub_133C34();
    sub_7FD8(&qword_25F6F8, &qword_25F700, (uint64_t)&protocol conformance descriptor for _ClipEffect<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_266E30);
  }
  return result;
}

unint64_t sub_133C34()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[4];

  result = qword_266E38;
  if (!qword_266E38)
  {
    v1 = sub_7EF8(&qword_266DF0);
    v2[0] = sub_7EF8(&qword_25FD08);
    v2[1] = type metadata accessor for Material(255);
    v2[2] = sub_3CCBC();
    v2[3] = &protocol witness table for Material;
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.background<A>(_:ignoresSafeAreaEdges:)>>, 1);
    sub_7FD8((unint64_t *)&qword_25FD88, &qword_25FD90, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_266E38);
  }
  return result;
}

unint64_t sub_133D00()
{
  unint64_t result;

  result = qword_266E40;
  if (!qword_266E40)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for _HoverRegionModifier, &type metadata for _HoverRegionModifier);
    atomic_store(result, (unint64_t *)&qword_266E40);
  }
  return result;
}

uint64_t sub_133D44()
{
  return sub_133D70(&qword_266E48, &qword_266E20, (void (*)(void))sub_133DDC);
}

uint64_t sub_133D70(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_7EF8(a2);
    a3();
    sub_133D00();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v6);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_133DDC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_266E50;
  if (!qword_266E50)
  {
    v1 = sub_7EF8(&qword_266E18);
    sub_133E60();
    sub_7FD8(&qword_25F6F8, &qword_25F700, (uint64_t)&protocol conformance descriptor for _ClipEffect<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_266E50);
  }
  return result;
}

unint64_t sub_133E60()
{
  unint64_t result;
  uint64_t v1;

  result = qword_266E58;
  if (!qword_266E58)
  {
    v1 = sub_7EF8(&qword_266E10);
    sub_133EE4();
    sub_7FD8((unint64_t *)&qword_25FD88, &qword_25FD90, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_266E58);
  }
  return result;
}

unint64_t sub_133EE4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_266E60;
  if (!qword_266E60)
  {
    v1 = sub_7EF8(&qword_266E08);
    sub_3CCBC();
    sub_7FD8(&qword_260498, &qword_2604A0, (uint64_t)&protocol conformance descriptor for _BackgroundStyleModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_266E60);
  }
  return result;
}

uint64_t ListItemAccessoryMoreButtonView.init(assetInfo:contextActionMenuView:showDownloadProgress:)@<X0>(__int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(char *, uint64_t, uint64_t);
  unint64_t v13;
  int *v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;

  v29 = a4;
  v27 = a2;
  v28 = a3;
  v7 = type metadata accessor for Font.TextStyle(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = 0x4034000000000000;
  v10 = enum case for Font.TextStyle.subheadline(_:);
  v12 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 104);
  v12(v9, enum case for Font.TextStyle.subheadline(_:), v7);
  v13 = sub_3CB54();
  ScaledMetric.init(wrappedValue:relativeTo:)(&v30, v9, &type metadata for Double, v13);
  v14 = (int *)type metadata accessor for ListItemAccessoryMoreButtonView(0);
  v30 = 0x4000000000000000;
  v12(v9, v10, v7);
  ScaledMetric.init(wrappedValue:relativeTo:)(&v30, v9, &type metadata for Double, v13);
  v15 = (_QWORD *)(a5 + v14[6]);
  *v15 = swift_getKeyPath(&unk_1EEE10);
  v16 = sub_5440(&qword_25F548);
  swift_storeEnumTagMultiPayload(v15, v16, 0);
  v17 = (_QWORD *)(a5 + v14[7]);
  *v17 = swift_getKeyPath(&unk_1EEE38);
  v18 = sub_5440(&qword_25F1E8);
  swift_storeEnumTagMultiPayload(v17, v18, 0);
  v19 = a5 + v14[8];
  *(_QWORD *)v19 = swift_getKeyPath(&unk_1EEE60);
  *(_OWORD *)(v19 + 8) = 0u;
  *(_OWORD *)(v19 + 24) = 0u;
  *(_OWORD *)(v19 + 40) = 0u;
  *(_OWORD *)(v19 + 51) = 0u;
  v20 = (_QWORD *)(a5 + v14[9]);
  v21 = type metadata accessor for ProfileRestrictions(0);
  v22 = sub_6FD0((unint64_t *)&qword_26AF00, type metadata accessor for ProfileRestrictions, (uint64_t)&protocol conformance descriptor for ProfileRestrictions);
  *v20 = EnvironmentObject.init()(v21, v22);
  v20[1] = v23;
  result = sub_AC68(a1, a5 + v14[10]);
  v25 = (_QWORD *)(a5 + v14[11]);
  v26 = v28;
  *v25 = v27;
  v25[1] = v26;
  *(_BYTE *)(a5 + v14[12]) = v29;
  return result;
}

uint64_t type metadata accessor for ListItemAccessoryMoreButtonView(uint64_t a1)
{
  uint64_t result;

  result = qword_266EE0;
  if (!qword_266EE0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ListItemAccessoryMoreButtonView);
  return result;
}

uint64_t ListItemAccessoryMoreButtonView.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  void *v29;
  uint64_t KeyPath;
  uint64_t v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t result;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  double v43;
  uint64_t v44;
  double v45;
  void (*v46)(uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  double v50;
  double v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  double v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  double v85;

  v2 = v1;
  v83 = a1;
  v3 = type metadata accessor for FloatingPointRoundingRule(0);
  v78 = *(_QWORD *)(v3 - 8);
  v79 = v3;
  __chkstk_darwin(v3);
  v77 = (char *)&v65 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v75 = sub_5440(&qword_2627D0);
  __chkstk_darwin(v75);
  v76 = (uint64_t)&v65 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v74 = type metadata accessor for SizeConstants.Environment(0);
  __chkstk_darwin(v74);
  v69 = (uint64_t)&v65 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Font.TextStyle(0);
  v72 = *(_QWORD *)(v7 - 8);
  v73 = v7;
  v8 = __chkstk_darwin(v7);
  v71 = (char *)&v65 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v70 = (char *)&v65 - v10;
  v11 = type metadata accessor for SizeConstants(0);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v65 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v16 = (char *)&v65 - v15;
  v67 = sub_5440(&qword_262710);
  __chkstk_darwin(v67);
  v18 = (char *)&v65 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v82 = sub_5440(&qword_266E68);
  __chkstk_darwin(v82);
  v68 = (uint64_t *)((char *)&v65 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  v80 = sub_5440(&qword_266E70);
  __chkstk_darwin(v80);
  v81 = (uint64_t)&v65 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for ListItemAccessoryMoreButtonView(0);
  v22 = __chkstk_darwin(v21);
  v24 = (char *)&v65 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = (_QWORD *)(v1 + *(int *)(v22 + 40));
  v26 = v25[3];
  v27 = v25[4];
  sub_5480(v25, v26);
  LOBYTE(v26) = AssetInfo.isExplicit.getter(v26, v27);
  sub_1E428(v2, (uint64_t)v24, type metadata accessor for ListItemAccessoryMoreButtonView);
  if ((v26 & 1) != 0)
  {
    v28 = &v24[*(int *)(v21 + 36)];
    v29 = *(void **)v28;
    if (!*(_QWORD *)v28)
    {
      v62 = *((_QWORD *)v28 + 1);
      v63 = type metadata accessor for ProfileRestrictions(0);
      v64 = sub_6FD0((unint64_t *)&qword_26AF00, type metadata accessor for ProfileRestrictions, (uint64_t)&protocol conformance descriptor for ProfileRestrictions);
      result = EnvironmentObject.error()(0, v62, v63, v64);
      __break(1u);
      return result;
    }
    KeyPath = swift_getKeyPath(&unk_1EEE88);
    v31 = swift_getKeyPath(&unk_1EEEB0);
    v32 = v29;
    static Published.subscript.getter(&v84, v32, KeyPath, v31);

    swift_release(KeyPath);
    swift_release(v31);
    LOBYTE(KeyPath) = v84;
    sub_224DC((uint64_t)v24, type metadata accessor for ListItemAccessoryMoreButtonView);
    if ((KeyPath & 1) == 0)
    {
      v33 = v81;
      swift_storeEnumTagMultiPayload(v81, v80, 0);
      v34 = sub_7FD8(&qword_266E80, &qword_266E68, (uint64_t)&protocol conformance descriptor for HStack<A>);
      return _ConditionalContent<>.init(storage:)(v33, &type metadata for EmptyView, v82, &protocol witness table for EmptyView, v34);
    }
  }
  else
  {
    sub_224DC((uint64_t)v24, type metadata accessor for ListItemAccessoryMoreButtonView);
  }
  v66 = v2;
  sub_3168C((uint64_t)v16);
  v36 = v72;
  v37 = v73;
  v38 = v70;
  (*(void (**)(char *, _QWORD, uint64_t))(v72 + 104))(v70, enum case for Font.TextStyle.subheadline(_:), v73);
  sub_1E428((uint64_t)v16, (uint64_t)v14, type metadata accessor for SizeConstants);
  v39 = (uint64_t)v71;
  (*(void (**)(char *, char *, uint64_t))(v36 + 16))(v71, v38, v37);
  sub_1E428((uint64_t)v14, (uint64_t)v18, type metadata accessor for SizeConstants);
  v40 = v69;
  sub_1E428((uint64_t)v14, v69, type metadata accessor for SizeConstants.Environment);
  v41 = v74;
  v42 = v40 + *(int *)(v74 + 24);
  v43 = sub_173CC(v39, v42);
  v44 = type metadata accessor for DynamicTypeSize(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 8))(v42, v44);
  v45 = 1.0;
  if ((*(_QWORD *)&v43 & 0xFFFFFFFFFFFFFLL) == 0)
    v45 = v43;
  if ((~*(_QWORD *)&v43 & 0x7FF0000000000000) == 0)
    v43 = v45;
  sub_224DC((uint64_t)v14, type metadata accessor for SizeConstants);
  v46 = *(void (**)(uint64_t, uint64_t))(v36 + 8);
  v46(v39, v37);
  v47 = *(int *)(v67 + 36);
  *(double *)&v18[v47] = v43;
  v46((uint64_t)v38, v37);
  sub_224DC((uint64_t)v16, type metadata accessor for SizeConstants);
  v48 = v76;
  sub_1E428((uint64_t)v18, v76, type metadata accessor for SizeConstants.Environment);
  v49 = *(int *)(v75 + 36);
  *(_QWORD *)(v48 + v49) = *(_QWORD *)&v18[v47];
  sub_B414((uint64_t)v18, &qword_262710);
  v50 = *(double *)(v48 + v49) * 12.0;
  v51 = *(double *)(v48 + *(int *)(v41 + 28));
  v53 = (uint64_t)v77;
  v52 = v78;
  v54 = v79;
  (*(void (**)(char *, _QWORD, uint64_t))(v78 + 104))(v77, enum case for FloatingPointRoundingRule.toNearestOrAwayFromZero(_:), v79);
  v85 = v50;
  sub_13603C(v53, v51);
  v55 = v85;
  (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v53, v54);
  v56 = sub_B414(v48, &qword_2627D0);
  v57 = static VerticalAlignment.center.getter(v56);
  v58 = (uint64_t)v68;
  *v68 = v57;
  *(double *)(v58 + 8) = v55;
  *(_BYTE *)(v58 + 16) = 0;
  v59 = sub_5440(&qword_266E78);
  sub_134854(v66, v58 + *(int *)(v59 + 44));
  v60 = v81;
  sub_B3D0(v58, v81, &qword_266E68);
  swift_storeEnumTagMultiPayload(v60, v80, 1);
  v61 = sub_7FD8(&qword_266E80, &qword_266E68, (uint64_t)&protocol conformance descriptor for HStack<A>);
  _ConditionalContent<>.init(storage:)(v60, &type metadata for EmptyView, v82, &protocol witness table for EmptyView, v61);
  return sub_B414(v58, &qword_266E68);
}

uint64_t sub_134854@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  double v47;
  __n128 v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  double v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  double v68;
  uint64_t v69;
  __n128 v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t OpaqueTypeConformance2;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  double v115;
  double v116;
  double v117;
  double v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char *v134;
  __int128 v135;
  __int128 v136;
  unint64_t v137;
  uint64_t v138;
  double v139;
  char *v140;
  uint64_t v141;
  uint64_t KeyPath;
  uint64_t v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t *v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  char *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  char *v164;
  uint64_t v165;
  char *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  char *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  char *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  char *v179;
  uint64_t v180;
  char *v181;
  uint64_t v182;
  uint64_t v183;
  char *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  char *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  char *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  _BYTE v205[19];
  _OWORD v206[3];
  _BYTE v207[19];

  v196 = a2;
  v3 = type metadata accessor for SizeConstants(0);
  __chkstk_darwin(v3);
  v195 = (uint64_t)&v155 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v176 = type metadata accessor for AutomaticHoverEffect(0);
  v194 = *(_QWORD *)(v176 - 8);
  __chkstk_darwin(v176);
  v193 = (char *)&v155 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v187 = type metadata accessor for PlainButtonStyle(0);
  v183 = *(_QWORD *)(v187 - 8);
  __chkstk_darwin(v187);
  v181 = (char *)&v155 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v182 = sub_5440(&qword_266F48);
  v180 = *(_QWORD *)(v182 - 8);
  __chkstk_darwin(v182);
  v179 = (char *)&v155 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v188 = sub_5440(&qword_266F50);
  v185 = *(_QWORD *)(v188 - 8);
  __chkstk_darwin(v188);
  v184 = (char *)&v155 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v191 = sub_5440(&qword_266F58);
  v190 = *(_QWORD *)(v191 - 8);
  __chkstk_darwin(v191);
  v189 = (char *)&v155 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v186 = sub_5440(&qword_266F60);
  v10 = __chkstk_darwin(v186);
  v175 = (char *)&v155 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v192 = (uint64_t)&v155 - v12;
  v169 = sub_5440(&qword_266F68);
  __chkstk_darwin(v169);
  v14 = (char *)&v155 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v174 = sub_5440(&qword_266F70);
  __chkstk_darwin(v174);
  v170 = (char *)&v155 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v160 = sub_5440(&qword_266F78);
  v159 = *(_QWORD *)(v160 - 8);
  __chkstk_darwin(v160);
  v158 = (char *)&v155 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v168 = sub_5440(&qword_266F80);
  v17 = __chkstk_darwin(v168);
  v157 = (char *)&v155 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v161 = (uint64_t)&v155 - v19;
  v20 = type metadata accessor for ListItemAccessoryMoreButtonView(0);
  __chkstk_darwin(v20);
  v22 = (char *)&v155 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v167 = sub_5440(&qword_266F88);
  v163 = *(_QWORD *)(v167 - 8);
  __chkstk_darwin(v167);
  v162 = (uint64_t)&v155 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v171 = sub_5440(&qword_266F90);
  __chkstk_darwin(v171);
  v173 = (uint64_t)&v155 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = sub_5440(&qword_266F98);
  __chkstk_darwin(v25);
  v164 = (char *)&v155 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v172 = sub_5440(&qword_266FA0);
  __chkstk_darwin(v172);
  v166 = (char *)&v155 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = type metadata accessor for ColorConstants(0);
  __chkstk_darwin(v28);
  v30 = (char *)&v155 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v165 = sub_5440(&qword_266FA8);
  v31 = *(_QWORD *)(v165 - 8);
  __chkstk_darwin(v165);
  v33 = (char *)&v155 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = sub_5440(&qword_266FB0);
  v35 = __chkstk_darwin(v34);
  v178 = (uint64_t)&v155 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v35);
  v197 = (uint64_t)&v155 - v37;
  v38 = v20;
  v39 = *(int *)(v20 + 32);
  v40 = a1;
  v41 = a1 + v39;
  v42 = *(_OWORD *)(v41 + 48);
  v206[2] = *(_OWORD *)(v41 + 32);
  *(_OWORD *)v207 = v42;
  *(_DWORD *)&v207[15] = *(_DWORD *)(v41 + 63);
  v43 = *(_OWORD *)(v41 + 16);
  v206[0] = *(_OWORD *)v41;
  v206[1] = v43;
  sub_34820((uint64_t)v206, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))sub_3480C);
  sub_316C0((uint64_t)&v202);
  sub_34820((uint64_t)v206, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))sub_BDF8);
  v177 = v38;
  if (!*((_QWORD *)&v202 + 1)
    || (v44 = v203, swift_bridgeObjectRelease(*((_QWORD *)&v202 + 1)), v44 != 3)
    || *(_BYTE *)(v40 + *(int *)(v38 + 48)) != 1)
  {
    sub_34820((uint64_t)v206, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))sub_3480C);
    sub_316C0((uint64_t)&v202);
    sub_34820((uint64_t)v206, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))sub_BDF8);
    if (*((_QWORD *)&v202 + 1))
    {
      v64 = *(double *)&v205[8];
      v65 = v205[16];
      swift_bridgeObjectRelease(*((_QWORD *)&v202 + 1));
      if ((v65 & 1) == 0 && *(_BYTE *)(v40 + *(int *)(v38 + 48)) == 1)
      {
        _s7BooksUI18BuyButtonExternalsV6colorsAA14ColorConstantsVvg_0((uint64_t)v30);
        v66 = _s7BooksUI14ColorConstantsV14vibrantPrimary05SwiftB00C0Vvg_0();
        sub_224DC((uint64_t)v30, type metadata accessor for ColorConstants);
        LOBYTE(v198) = 0;
        v67 = sub_5440(&qword_25FC38);
        ScaledMetric.wrappedValue.getter(&v202, v67);
        v68 = *(double *)&v202;
        ScaledMetric.wrappedValue.getter(&v202, v67);
        v69 = v162;
        sub_129BFC(v66, (char *)&v198, 0, 0, 1, v162, v64, v68, *(double *)&v202);
        v70 = swift_release(v66);
        v71 = v164;
        v72 = v167;
        (*(void (**)(char *, uint64_t, uint64_t, __n128))(v163 + 16))(v164, v69, v167, v70);
        swift_storeEnumTagMultiPayload(v71, v25, 1);
        v73 = sub_7EF8(&qword_2668C8);
        v74 = type metadata accessor for InDeterminateProgressViewStyle(255);
        v75 = sub_7FD8(&qword_2668D0, &qword_2668C8, (uint64_t)&protocol conformance descriptor for ProgressView<A, B>);
        v76 = sub_6FD0(&qword_2668D8, type metadata accessor for InDeterminateProgressViewStyle, (uint64_t)&protocol conformance descriptor for InDeterminateProgressViewStyle);
        *(_QWORD *)&v202 = v73;
        *((_QWORD *)&v202 + 1) = v74;
        *(_QWORD *)&v203 = v75;
        *((_QWORD *)&v203 + 1) = v76;
        OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v202, &opaque type descriptor for <<opaque return type of View.progressViewStyle<A>(_:)>>, 1);
        v78 = type metadata accessor for DeterminateProgressViewStyle(255);
        v79 = sub_6FD0(&qword_2668E0, type metadata accessor for DeterminateProgressViewStyle, (uint64_t)&protocol conformance descriptor for DeterminateProgressViewStyle);
        *(_QWORD *)&v202 = v73;
        *((_QWORD *)&v202 + 1) = v78;
        *(_QWORD *)&v203 = v75;
        *((_QWORD *)&v203 + 1) = v79;
        v80 = swift_getOpaqueTypeConformance2(&v202, &opaque type descriptor for <<opaque return type of View.progressViewStyle<A>(_:)>>, 1);
        v81 = (uint64_t)v166;
        _ConditionalContent<>.init(storage:)(v71, v165, v72, OpaqueTypeConformance2, v80);
        v82 = v173;
        sub_B3D0(v81, v173, &qword_266FA0);
        swift_storeEnumTagMultiPayload(v82, v171, 0);
        v83 = sub_1375A0();
        v84 = sub_13779C(&qword_266FC8, &qword_266F70, (uint64_t)&protocol witness table for Text, (uint64_t)&protocol conformance descriptor for <> _ConditionalContent<A, B>);
        _ConditionalContent<>.init(storage:)(v82, v172, v174, v83, v84);
        sub_B414(v81, &qword_266FA0);
        v63 = (*(uint64_t (**)(uint64_t, uint64_t))(v163 + 8))(v69, v72);
        goto LABEL_17;
      }
    }
    sub_34820((uint64_t)v206, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))sub_3480C);
    sub_316C0((uint64_t)&v202);
    sub_34820((uint64_t)v206, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))sub_BDF8);
    if (*((_QWORD *)&v202 + 1))
    {
      v85 = *((_QWORD *)&v203 + 1);
      v86 = v204;
      if ((v204 & 1) == 0 || *((_QWORD *)&v203 + 1) != 1)
      {
        swift_bridgeObjectRelease(*((_QWORD *)&v202 + 1));
        sub_1E428(v40, (uint64_t)v22, type metadata accessor for ListItemAccessoryMoreButtonView);
        if (v85 || (v86 & 1) == 0)
        {
          v134 = &v22[*(int *)(v38 + 32)];
          v135 = *((_OWORD *)v134 + 3);
          v204 = *((_OWORD *)v134 + 2);
          *(_OWORD *)v205 = v135;
          *(_DWORD *)&v205[15] = *(_DWORD *)(v134 + 63);
          v136 = *(_OWORD *)v134;
          v203 = *((_OWORD *)v134 + 1);
          v202 = v136;
          sub_34820((uint64_t)&v202, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))sub_3480C);
          sub_316C0((uint64_t)&v198);
          sub_34820((uint64_t)&v202, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))sub_BDF8);
          sub_224DC((uint64_t)v22, type metadata accessor for ListItemAccessoryMoreButtonView);
          if (v199)
          {
            v137 = v200;
            swift_bridgeObjectRelease(v199);
            if (v137 <= 1)
            {
              v138 = Image.init(systemName:)(0x64756F6C6369, 0xE600000000000000);
              v198 = v138;
              v139 = static Font.Weight.semibold.getter(v138);
              v140 = v158;
              View.fontWeight(_:)(*(_QWORD *)&v139, 0, &type metadata for Image, &protocol witness table for Image);
              swift_release(v138);
              _s7BooksUI18BuyButtonExternalsV6colorsAA14ColorConstantsVvg_0((uint64_t)v30);
              v141 = _s7BooksUI14ColorConstantsV19booksSecondaryLabel05SwiftB00C0Vvg_0();
              sub_224DC((uint64_t)v30, type metadata accessor for ColorConstants);
              KeyPath = swift_getKeyPath(&unk_1EEFB0);
              v143 = v159;
              v144 = v157;
              v145 = v160;
              (*(void (**)(char *, char *, uint64_t))(v159 + 16))(v157, v140, v160);
              v146 = v168;
              v147 = (uint64_t *)&v144[*(int *)(v168 + 36)];
              *v147 = KeyPath;
              v147[1] = v141;
              (*(void (**)(char *, uint64_t))(v143 + 8))(v140, v145);
              v148 = (uint64_t)v144;
              v149 = v161;
              sub_167A4(v148, v161, &qword_266F80);
              sub_B3D0(v149, (uint64_t)v14, &qword_266F80);
              swift_storeEnumTagMultiPayload(v14, v169, 0);
              v150 = sub_1374F8();
              v151 = (uint64_t)v170;
              _ConditionalContent<>.init(storage:)(v14, v146, &type metadata for Text, v150, &protocol witness table for Text);
              v152 = v173;
              sub_B3D0(v151, v173, &qword_266F70);
              swift_storeEnumTagMultiPayload(v152, v171, 1);
              v153 = sub_1375A0();
              v154 = sub_13779C(&qword_266FC8, &qword_266F70, (uint64_t)&protocol witness table for Text, (uint64_t)&protocol conformance descriptor for <> _ConditionalContent<A, B>);
              _ConditionalContent<>.init(storage:)(v152, v172, v174, v153, v154);
              sub_B414(v151, &qword_266F70);
              v92 = v149;
              v93 = &qword_266F80;
              goto LABEL_16;
            }
          }
LABEL_15:
          *(_OWORD *)v14 = xmmword_1E50E0;
          v14[16] = 0;
          *((_QWORD *)v14 + 3) = _swiftEmptyArrayStorage;
          swift_storeEnumTagMultiPayload(v14, v169, 1);
          v87 = sub_1374F8();
          v88 = (uint64_t)v170;
          _ConditionalContent<>.init(storage:)(v14, v168, &type metadata for Text, v87, &protocol witness table for Text);
          v89 = v173;
          sub_B3D0(v88, v173, &qword_266F70);
          swift_storeEnumTagMultiPayload(v89, v171, 1);
          v90 = sub_1375A0();
          v91 = sub_13779C(&qword_266FC8, &qword_266F70, (uint64_t)&protocol witness table for Text, (uint64_t)&protocol conformance descriptor for <> _ConditionalContent<A, B>);
          _ConditionalContent<>.init(storage:)(v89, v172, v174, v90, v91);
          v92 = v88;
          v93 = &qword_266F70;
LABEL_16:
          v63 = sub_B414(v92, v93);
          goto LABEL_17;
        }
LABEL_14:
        sub_224DC((uint64_t)v22, type metadata accessor for ListItemAccessoryMoreButtonView);
        goto LABEL_15;
      }
      swift_bridgeObjectRelease(*((_QWORD *)&v202 + 1));
    }
    sub_1E428(v40, (uint64_t)v22, type metadata accessor for ListItemAccessoryMoreButtonView);
    goto LABEL_14;
  }
  v156 = v40;
  _s7BooksUI18BuyButtonExternalsV6colorsAA14ColorConstantsVvg_0((uint64_t)v30);
  v45 = _s7BooksUI14ColorConstantsV14vibrantPrimary05SwiftB00C0Vvg_0();
  sub_224DC((uint64_t)v30, type metadata accessor for ColorConstants);
  LOBYTE(v198) = 0;
  v46 = sub_5440(&qword_25FC38);
  ScaledMetric.wrappedValue.getter(&v202, v46);
  v47 = *(double *)&v202;
  ScaledMetric.wrappedValue.getter(&v202, v46);
  sub_1299F0(v45, (char *)&v198, (uint64_t)v33, v47, *(double *)&v202);
  v48 = swift_release(v45);
  v49 = v164;
  v50 = v165;
  (*(void (**)(char *, char *, uint64_t, __n128))(v31 + 16))(v164, v33, v165, v48);
  swift_storeEnumTagMultiPayload(v49, v25, 0);
  v51 = sub_7EF8(&qword_2668C8);
  v52 = type metadata accessor for InDeterminateProgressViewStyle(255);
  v53 = sub_7FD8(&qword_2668D0, &qword_2668C8, (uint64_t)&protocol conformance descriptor for ProgressView<A, B>);
  v54 = sub_6FD0(&qword_2668D8, type metadata accessor for InDeterminateProgressViewStyle, (uint64_t)&protocol conformance descriptor for InDeterminateProgressViewStyle);
  *(_QWORD *)&v202 = v51;
  *((_QWORD *)&v202 + 1) = v52;
  *(_QWORD *)&v203 = v53;
  *((_QWORD *)&v203 + 1) = v54;
  v55 = swift_getOpaqueTypeConformance2(&v202, &opaque type descriptor for <<opaque return type of View.progressViewStyle<A>(_:)>>, 1);
  v56 = type metadata accessor for DeterminateProgressViewStyle(255);
  v57 = sub_6FD0(&qword_2668E0, type metadata accessor for DeterminateProgressViewStyle, (uint64_t)&protocol conformance descriptor for DeterminateProgressViewStyle);
  *(_QWORD *)&v202 = v51;
  *((_QWORD *)&v202 + 1) = v56;
  *(_QWORD *)&v203 = v53;
  *((_QWORD *)&v203 + 1) = v57;
  v58 = swift_getOpaqueTypeConformance2(&v202, &opaque type descriptor for <<opaque return type of View.progressViewStyle<A>(_:)>>, 1);
  v59 = (uint64_t)v166;
  _ConditionalContent<>.init(storage:)(v49, v50, v167, v55, v58);
  v60 = v173;
  sub_B3D0(v59, v173, &qword_266FA0);
  swift_storeEnumTagMultiPayload(v60, v171, 0);
  v61 = sub_1375A0();
  v62 = sub_13779C(&qword_266FC8, &qword_266F70, (uint64_t)&protocol witness table for Text, (uint64_t)&protocol conformance descriptor for <> _ConditionalContent<A, B>);
  _ConditionalContent<>.init(storage:)(v60, v172, v174, v61, v62);
  sub_B414(v59, &qword_266FA0);
  v40 = v156;
  v63 = (*(uint64_t (**)(char *, uint64_t))(v31 + 8))(v33, v50);
LABEL_17:
  v94 = v176;
  v95 = (uint64_t)v175;
  __chkstk_darwin(v63);
  *(&v155 - 2) = v40;
  v96 = sub_5440(&qword_266FD0);
  v97 = sub_7FD8(&qword_266FD8, &qword_266FD0, (uint64_t)&protocol conformance descriptor for Menu<A, B>);
  v98 = v179;
  v99 = Button.init(action:label:)(KeyedEncodingContainer.encode<A>(_:forKey:), 0, sub_1376D0, &v155 - 4, v96, v97);
  v100 = v181;
  PlainButtonStyle.init()(v99);
  v101 = sub_7FD8(&qword_266FE0, &qword_266F48, (uint64_t)&protocol conformance descriptor for Button<A>);
  v102 = sub_6FD0(&qword_2609C0, (uint64_t (*)(uint64_t))&type metadata accessor for PlainButtonStyle, (uint64_t)&protocol conformance descriptor for PlainButtonStyle);
  v103 = v184;
  v104 = v182;
  v105 = v187;
  View.buttonStyle<A>(_:)(v100, v182, v187, v101, v102);
  (*(void (**)(char *, uint64_t))(v183 + 8))(v100, v105);
  v106 = (*(uint64_t (**)(char *, uint64_t))(v180 + 8))(v98, v104);
  v107 = v193;
  static CustomHoverEffect<>.automatic.getter(v106);
  v198 = v104;
  v199 = v105;
  v200 = v101;
  v201 = v102;
  v108 = swift_getOpaqueTypeConformance2(&v198, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
  v109 = sub_6FD0((unint64_t *)&qword_25FDF0, (uint64_t (*)(uint64_t))&type metadata accessor for AutomaticHoverEffect, (uint64_t)&protocol conformance descriptor for AutomaticHoverEffect);
  v110 = v189;
  v111 = v188;
  View.hoverEffect<A>(_:isEnabled:)(v107, 1, v188, v94, v108, v109);
  (*(void (**)(char *, uint64_t))(v194 + 8))(v107, v94);
  (*(void (**)(char *, uint64_t))(v185 + 8))(v103, v111);
  v112 = v195;
  sub_3168C(v195);
  v113 = sub_224DC(v112, type metadata accessor for SizeConstants);
  v114 = static Edge.Set.all.getter(v113);
  LOBYTE(v112) = v114;
  v118 = EdgeInsets.init(_all:)(v114, -20.0, v115, v116, v117);
  v120 = v119;
  v122 = v121;
  v124 = v123;
  v125 = v190;
  v126 = v191;
  (*(void (**)(uint64_t, char *, uint64_t))(v190 + 16))(v95, v110, v191);
  v127 = v95 + *(int *)(v186 + 36);
  *(_BYTE *)v127 = v112;
  *(double *)(v127 + 8) = v118;
  *(_QWORD *)(v127 + 16) = v120;
  *(_QWORD *)(v127 + 24) = v122;
  *(_QWORD *)(v127 + 32) = v124;
  *(_BYTE *)(v127 + 40) = 0;
  (*(void (**)(char *, uint64_t))(v125 + 8))(v110, v126);
  v128 = v192;
  sub_167A4(v95, v192, &qword_266F60);
  v129 = v197;
  v130 = v178;
  sub_B3D0(v197, v178, &qword_266FB0);
  sub_B3D0(v128, v95, &qword_266F60);
  v131 = v196;
  sub_B3D0(v130, v196, &qword_266FB0);
  v132 = sub_5440(&qword_266FE8);
  sub_B3D0(v95, v131 + *(int *)(v132 + 48), &qword_266F60);
  sub_B414(v128, &qword_266F60);
  sub_B414(v129, &qword_266FB0);
  sub_B414(v95, &qword_266F60);
  return sub_B414(v130, &qword_266FB0);
}

uint64_t sub_135C04(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  _QWORD v4[4];
  _BYTE v5[16];
  uint64_t v6;

  v6 = a1;
  v4[2] = a1;
  v1 = sub_5440(&qword_266FF0);
  v2 = sub_1376F0();
  return Menu.init(content:label:)(sub_1376E0, v5, sub_1376E8, v4, v1, &type metadata for AnyView, v2, &protocol witness table for AnyView);
}

uint64_t sub_135C7C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  _QWORD v14[3];
  uint64_t v15;
  uint64_t v16;

  v4 = type metadata accessor for ListItemAccessoryMoreButtonView(0);
  (*(void (**)(_QWORD *__return_ptr, uint64_t))(a1 + *(int *)(v4 + 44)))(v14, a1 + *(int *)(v4 + 40));
  v5 = v15;
  v6 = v16;
  v7 = sub_5480(v14, v15);
  __chkstk_darwin(v7);
  v9 = (char *)&v14[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v10 + 16))(v9);
  v11 = AnyView.init<A>(_:)(v9, v5, v6);
  result = _s7BooksUI13AnyPagedFrameVwxx_0(v14);
  *a2 = v11;
  return result;
}

uint64_t sub_135D3C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  uint64_t KeyPath;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  double v24;
  double v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v38 = a1;
  v1 = type metadata accessor for SizeConstants(0);
  __chkstk_darwin(v1);
  v37 = (uint64_t)&v36 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for ColorConstants(0);
  __chkstk_darwin(v3);
  v5 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_5440(&qword_266F78);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_5440(&qword_266F80);
  __chkstk_darwin(v10);
  v12 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = sub_5440(&qword_267008);
  __chkstk_darwin(v36);
  v14 = (char *)&v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = Image.init(systemName:)(0x73697370696C6C65, 0xE800000000000000);
  v39 = v15;
  v16 = static Font.Weight.semibold.getter(v15);
  View.fontWeight(_:)(*(_QWORD *)&v16, 0, &type metadata for Image, &protocol witness table for Image);
  swift_release(v15);
  type metadata accessor for ListItemAccessoryMoreButtonView(0);
  _s7BooksUI18BuyButtonExternalsV6colorsAA14ColorConstantsVvg_0((uint64_t)v5);
  v17 = _s7BooksUI14ColorConstantsV19booksSecondaryLabel05SwiftB00C0Vvg_0();
  sub_224DC((uint64_t)v5, type metadata accessor for ColorConstants);
  KeyPath = swift_getKeyPath(&unk_1EEFB0);
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v12, v9, v6);
  v19 = (uint64_t *)&v12[*(int *)(v10 + 36)];
  *v19 = KeyPath;
  v19[1] = v17;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  v20 = v37;
  sub_3168C(v37);
  v21 = sub_224DC(v20, type metadata accessor for SizeConstants);
  v22 = static Edge.Set.all.getter(v21);
  LOBYTE(v20) = v22;
  v26 = EdgeInsets.init(_all:)(v22, 20.0, v23, v24, v25);
  v28 = v27;
  v30 = v29;
  v32 = v31;
  sub_B3D0((uint64_t)v12, (uint64_t)v14, &qword_266F80);
  v33 = &v14[*(int *)(v36 + 36)];
  *v33 = v20;
  *((double *)v33 + 1) = v26;
  *((_QWORD *)v33 + 2) = v28;
  *((_QWORD *)v33 + 3) = v30;
  *((_QWORD *)v33 + 4) = v32;
  v33[40] = 0;
  sub_B414((uint64_t)v12, &qword_266F80);
  v34 = v38;
  sub_B3D0((uint64_t)v14, v38, &qword_267008);
  *(_BYTE *)(v34 + *(int *)(sub_5440(&qword_266FF0) + 36)) = 0;
  return sub_B414((uint64_t)v14, &qword_267008);
}

uint64_t sub_13603C(uint64_t a1, double a2)
{
  double *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t result;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  uint64_t v18;

  v5 = type metadata accessor for FloatingPointRoundingRule(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v18 - v10;
  if (a2 != 1.0)
  {
    v14 = *v2 / a2;
    *v2 = v14;
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, a1, v5);
    result = (*(uint64_t (**)(char *, uint64_t))(v6 + 88))(v9, v5);
    if ((_DWORD)result == enum case for FloatingPointRoundingRule.toNearestOrAwayFromZero(_:))
    {
      v15 = round(v14);
    }
    else if ((_DWORD)result == enum case for FloatingPointRoundingRule.toNearestOrEven(_:))
    {
      v15 = rint(v14);
    }
    else if ((_DWORD)result == enum case for FloatingPointRoundingRule.up(_:))
    {
      v15 = ceil(v14);
    }
    else if ((_DWORD)result == enum case for FloatingPointRoundingRule.down(_:))
    {
      v15 = floor(v14);
    }
    else if ((_DWORD)result == enum case for FloatingPointRoundingRule.towardZero(_:))
    {
      v15 = trunc(v14);
    }
    else if ((_DWORD)result == enum case for FloatingPointRoundingRule.awayFromZero(_:))
    {
      v15 = ceil(v14);
      v17 = floor(v14);
      if (v14 < 0.0)
        v15 = v17;
    }
    else
    {
      Double._roundSlowPath(_:)(a1);
      result = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
      v15 = *v2;
    }
    v13 = v15 * a2;
    goto LABEL_34;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)&v18 - v10, a1, v5);
  result = (*(uint64_t (**)(char *, uint64_t))(v6 + 88))(v11, v5);
  if ((_DWORD)result != enum case for FloatingPointRoundingRule.toNearestOrAwayFromZero(_:))
  {
    if ((_DWORD)result == enum case for FloatingPointRoundingRule.toNearestOrEven(_:))
    {
      v13 = rint(*v2);
      goto LABEL_34;
    }
    if ((_DWORD)result == enum case for FloatingPointRoundingRule.up(_:))
    {
      v16 = *v2;
LABEL_12:
      v13 = ceil(v16);
      goto LABEL_34;
    }
    if ((_DWORD)result == enum case for FloatingPointRoundingRule.down(_:))
    {
      v16 = *v2;
    }
    else
    {
      if ((_DWORD)result == enum case for FloatingPointRoundingRule.towardZero(_:))
      {
        v13 = trunc(*v2);
        goto LABEL_34;
      }
      if ((_DWORD)result != enum case for FloatingPointRoundingRule.awayFromZero(_:))
      {
        Double._roundSlowPath(_:)(a1);
        return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v11, v5);
      }
      v16 = *v2;
      if ((*(_QWORD *)v2 & 0x8000000000000000) == 0)
        goto LABEL_12;
    }
    v13 = floor(v16);
    goto LABEL_34;
  }
  v13 = round(*v2);
LABEL_34:
  *v2 = v13;
  return result;
}

uint64_t sub_1362F0(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &opaque type descriptor for <<opaque return type of ListItemAccessoryMoreButtonView.body>>, 1);
}

_QWORD *initializeBufferWithCopyOfBuffer for ListItemAccessoryMoreButtonView(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(_QWORD *, _QWORD *, uint64_t);
  uint64_t v9;
  _WORD *v10;
  _WORD *v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int16 v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  char *v49;
  uint64_t v50;
  void *v51;
  char *v52;
  char *v53;
  __int128 v54;
  uint64_t v55;
  void (*v56)(char *, char *, uint64_t);
  id v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  char v63;
  int *v64;
  _QWORD *v65;
  _QWORD *v66;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v22 = *a2;
    *a1 = *a2;
    v23 = (_QWORD *)(v22 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = sub_5440(&qword_25FC38);
    v8 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v8((_QWORD *)((char *)a1 + a3[5]), (_QWORD *)((char *)a2 + a3[5]), v7);
    v9 = a3[6];
    v10 = (_WORD *)((char *)a1 + v9);
    v11 = (_WORD *)((char *)a2 + v9);
    v12 = sub_5440(&qword_25F548);
    if (swift_getEnumCaseMultiPayload(v11, v12) == 1)
    {
      *v10 = *v11;
      v13 = (int *)type metadata accessor for SizeConstants.Environment(0);
      v14 = v13[6];
      v15 = (char *)v10 + v14;
      v16 = (char *)v11 + v14;
      v17 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v15, v16, v17);
      *(_QWORD *)((char *)v10 + v13[7]) = *(_QWORD *)((char *)v11 + v13[7]);
      v18 = v13[8];
      v19 = (char *)v10 + v18;
      v20 = (char *)v11 + v18;
      v19[2] = v20[2];
      *(_WORD *)v19 = *(_WORD *)v20;
      v21 = 1;
    }
    else
    {
      v24 = *(_QWORD *)v11;
      *(_QWORD *)v10 = *(_QWORD *)v11;
      swift_retain(v24);
      v21 = 0;
    }
    swift_storeEnumTagMultiPayload(v10, v12, v21);
    v25 = a3[7];
    v26 = (_QWORD *)((char *)a1 + v25);
    v27 = (_QWORD *)((char *)a2 + v25);
    v28 = sub_5440(&qword_25F1E8);
    if (swift_getEnumCaseMultiPayload(v27, v28) == 1)
    {
      v29 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v29 - 8) + 16))(v26, v27, v29);
      v30 = v26;
      v31 = v28;
      v32 = 1;
    }
    else
    {
      v33 = *v27;
      *v26 = *v27;
      swift_retain(v33);
      v30 = v26;
      v31 = v28;
      v32 = 0;
    }
    swift_storeEnumTagMultiPayload(v30, v31, v32);
    v34 = a3[8];
    v64 = a3;
    v65 = a2;
    v35 = (char *)a1 + v34;
    v36 = (char *)a2 + v34;
    v37 = *(_QWORD *)v36;
    v38 = *((_QWORD *)v36 + 1);
    v39 = *((_QWORD *)v36 + 2);
    v40 = *((_QWORD *)v36 + 3);
    v41 = *((_QWORD *)v36 + 4);
    v42 = *((_QWORD *)v36 + 5);
    v44 = *((_QWORD *)v36 + 6);
    v43 = *((_QWORD *)v36 + 7);
    v66 = a1;
    v45 = *((_WORD *)v36 + 32);
    sub_3480C(*(_QWORD *)v36, v38, v39, v40, v41, v42, v44, v43, v45, v36[66]);
    *(_QWORD *)v35 = v37;
    *((_QWORD *)v35 + 1) = v38;
    *((_QWORD *)v35 + 2) = v39;
    *((_QWORD *)v35 + 3) = v40;
    *((_QWORD *)v35 + 4) = v41;
    *((_QWORD *)v35 + 5) = v42;
    *((_QWORD *)v35 + 6) = v44;
    *((_QWORD *)v35 + 7) = v43;
    *((_WORD *)v35 + 32) = v45;
    v35[66] = v63;
    v46 = v64[9];
    v47 = v64[10];
    v48 = (_QWORD *)((char *)v66 + v46);
    v49 = (char *)v65 + v46;
    v51 = *(void **)v49;
    v50 = *((_QWORD *)v49 + 1);
    *v48 = v51;
    v48[1] = v50;
    v52 = (char *)v66 + v47;
    v53 = (char *)v65 + v47;
    v54 = *(_OWORD *)((char *)v65 + v47 + 24);
    *(_OWORD *)((char *)v66 + v47 + 24) = v54;
    v55 = v54;
    v56 = **(void (***)(char *, char *, uint64_t))(v54 - 8);
    v57 = v51;
    v56(v52, v53, v55);
    v23 = v66;
    v58 = v64[11];
    v59 = v64[12];
    v60 = (_QWORD *)((char *)v66 + v58);
    v61 = (_QWORD *)((char *)v65 + v58);
    v22 = v61[1];
    *v60 = *v61;
    v60[1] = v22;
    *((_BYTE *)v66 + v59) = *((_BYTE *)v65 + v59);
  }
  swift_retain(v22);
  return v23;
}

double destroy for ListItemAccessoryMoreButtonView(uint64_t a1, int *a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double result;

  v4 = sub_5440(&qword_25FC38);
  v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v5(a1, v4);
  v5(a1 + a2[5], v4);
  v6 = (_QWORD *)(a1 + a2[6]);
  v7 = sub_5440(&qword_25F548);
  if (swift_getEnumCaseMultiPayload(v6, v7) == 1)
  {
    v8 = (char *)v6 + *(int *)(type metadata accessor for SizeConstants.Environment(0) + 24);
    v9 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  }
  else
  {
    swift_release(*v6);
  }
  v10 = (_QWORD *)(a1 + a2[7]);
  v11 = sub_5440(&qword_25F1E8);
  if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
  {
    v12 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v10, v12);
  }
  else
  {
    swift_release(*v10);
  }
  v13 = a1 + a2[8];
  sub_BDF8(*(_QWORD *)v13, *(_QWORD *)(v13 + 8), *(_QWORD *)(v13 + 16), *(_QWORD *)(v13 + 24), *(_QWORD *)(v13 + 32), *(_QWORD *)(v13 + 40), *(_QWORD *)(v13 + 48), *(_QWORD *)(v13 + 56), *(_WORD *)(v13 + 64), *(_BYTE *)(v13 + 66));

  _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)(a1 + a2[10]));
  *(_QWORD *)&result = swift_release(*(_QWORD *)(a1 + a2[11] + 8)).n128_u64[0];
  return result;
}

uint64_t initializeWithCopy for ListItemAccessoryMoreButtonView(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  _WORD *v9;
  _WORD *v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  void (*v52)(uint64_t, uint64_t, uint64_t);
  id v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  uint64_t v58;
  __int16 v60;
  char v61;
  int *v62;
  uint64_t v63;

  v6 = sub_5440(&qword_25FC38);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v8 = a3[6];
  v9 = (_WORD *)(a1 + v8);
  v10 = (_WORD *)(a2 + v8);
  v11 = sub_5440(&qword_25F548);
  if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
  {
    *v9 = *v10;
    v12 = (int *)type metadata accessor for SizeConstants.Environment(0);
    v13 = v12[6];
    v14 = (char *)v9 + v13;
    v15 = (char *)v10 + v13;
    v16 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v14, v15, v16);
    *(_QWORD *)((char *)v9 + v12[7]) = *(_QWORD *)((char *)v10 + v12[7]);
    v17 = v12[8];
    v18 = (char *)v9 + v17;
    v19 = (char *)v10 + v17;
    v18[2] = v19[2];
    *(_WORD *)v18 = *(_WORD *)v19;
    v20 = 1;
  }
  else
  {
    v21 = *(_QWORD *)v10;
    *(_QWORD *)v9 = *(_QWORD *)v10;
    swift_retain(v21);
    v20 = 0;
  }
  swift_storeEnumTagMultiPayload(v9, v11, v20);
  v22 = a3[7];
  v23 = (uint64_t *)(a1 + v22);
  v24 = (uint64_t *)(a2 + v22);
  v25 = sub_5440(&qword_25F1E8);
  if (swift_getEnumCaseMultiPayload(v24, v25) == 1)
  {
    v26 = type metadata accessor for ColorScheme(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v26 - 8) + 16))(v23, v24, v26);
    v27 = v23;
    v28 = v25;
    v29 = 1;
  }
  else
  {
    v30 = *v24;
    *v23 = *v24;
    swift_retain(v30);
    v27 = v23;
    v28 = v25;
    v29 = 0;
  }
  swift_storeEnumTagMultiPayload(v27, v28, v29);
  v31 = a3[8];
  v62 = a3;
  v63 = a2;
  v32 = a1 + v31;
  v33 = a2 + v31;
  v34 = *(_QWORD *)v33;
  v35 = *(_QWORD *)(v33 + 8);
  v36 = *(_QWORD *)(v33 + 16);
  v37 = *(_QWORD *)(v33 + 24);
  v38 = *(_QWORD *)(v33 + 32);
  v39 = *(_QWORD *)(v33 + 40);
  v41 = *(_QWORD *)(v33 + 48);
  v40 = *(_QWORD *)(v33 + 56);
  v60 = *(_WORD *)(v33 + 64);
  v61 = *(_BYTE *)(v33 + 66);
  sub_3480C(*(_QWORD *)v33, v35, v36, v37, v38, v39, v41, v40, v60, v61);
  *(_QWORD *)v32 = v34;
  *(_QWORD *)(v32 + 8) = v35;
  *(_QWORD *)(v32 + 16) = v36;
  *(_QWORD *)(v32 + 24) = v37;
  *(_QWORD *)(v32 + 32) = v38;
  *(_QWORD *)(v32 + 40) = v39;
  *(_QWORD *)(v32 + 48) = v41;
  *(_QWORD *)(v32 + 56) = v40;
  *(_WORD *)(v32 + 64) = v60;
  *(_BYTE *)(v32 + 66) = v61;
  v42 = v62[9];
  v43 = v62[10];
  v44 = (_QWORD *)(a1 + v42);
  v45 = v63 + v42;
  v47 = *(void **)v45;
  v46 = *(_QWORD *)(v45 + 8);
  *v44 = v47;
  v44[1] = v46;
  v48 = a1 + v43;
  v49 = v63 + v43;
  v50 = *(_OWORD *)(v63 + v43 + 24);
  *(_OWORD *)(a1 + v43 + 24) = v50;
  v51 = v50;
  v52 = **(void (***)(uint64_t, uint64_t, uint64_t))(v50 - 8);
  v53 = v47;
  v52(v48, v49, v51);
  v54 = v62[11];
  v55 = v62[12];
  v56 = (_QWORD *)(a1 + v54);
  v57 = (_QWORD *)(v63 + v54);
  v58 = v57[1];
  *v56 = *v57;
  v56[1] = v58;
  *(_BYTE *)(a1 + v55) = *(_BYTE *)(v63 + v55);
  swift_retain(v58);
  return a1;
}

uint64_t assignWithCopy for ListItemAccessoryMoreButtonView(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  _BYTE *v9;
  _BYTE *v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  _BYTE *v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  _BYTE *v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int16 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __int16 v52;
  char v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  void *v57;
  void *v58;
  id v59;
  uint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t result;
  char v66;
  uint64_t v67;
  uint64_t v68;
  int *v69;

  v6 = sub_5440(&qword_25FC38);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  if (a1 != a2)
  {
    v8 = a3[6];
    v9 = (_BYTE *)(a1 + v8);
    v10 = (_BYTE *)(a2 + v8);
    sub_B414(a1 + v8, &qword_25F548);
    v11 = sub_5440(&qword_25F548);
    if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
    {
      *v9 = *v10;
      v9[1] = v10[1];
      v12 = (int *)type metadata accessor for SizeConstants.Environment(0);
      v13 = v12[6];
      v14 = &v9[v13];
      v15 = &v10[v13];
      v16 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v14, v15, v16);
      *(_QWORD *)&v9[v12[7]] = *(_QWORD *)&v10[v12[7]];
      v17 = v12[8];
      v18 = &v9[v17];
      v19 = &v10[v17];
      v20 = v19[2];
      *(_WORD *)v18 = *(_WORD *)v19;
      v18[2] = v20;
      v21 = 1;
    }
    else
    {
      v22 = *(_QWORD *)v10;
      *(_QWORD *)v9 = *(_QWORD *)v10;
      swift_retain(v22);
      v21 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v11, v21);
    v23 = a3[7];
    v24 = (uint64_t *)(a1 + v23);
    v25 = (uint64_t *)(a2 + v23);
    sub_B414(a1 + v23, &qword_25F1E8);
    v26 = sub_5440(&qword_25F1E8);
    if (swift_getEnumCaseMultiPayload(v25, v26) == 1)
    {
      v27 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v27 - 8) + 16))(v24, v25, v27);
      v28 = v24;
      v29 = v26;
      v30 = 1;
    }
    else
    {
      v31 = *v25;
      *v24 = *v25;
      swift_retain(v31);
      v28 = v24;
      v29 = v26;
      v30 = 0;
    }
    swift_storeEnumTagMultiPayload(v28, v29, v30);
  }
  v32 = a3[8];
  v68 = a2;
  v69 = a3;
  v33 = a1 + v32;
  v34 = a2 + v32;
  v35 = *(_QWORD *)v34;
  v36 = *(_QWORD *)(v34 + 8);
  v37 = *(_QWORD *)(v34 + 16);
  v38 = *(_QWORD *)(v34 + 24);
  v39 = *(_QWORD *)(v34 + 32);
  v40 = *(_QWORD *)(v34 + 40);
  v42 = *(_QWORD *)(v34 + 48);
  v41 = *(_QWORD *)(v34 + 56);
  v67 = a1;
  v43 = *(_WORD *)(v34 + 64);
  sub_3480C(*(_QWORD *)v34, v36, v37, v38, v39, v40, v42, v41, v43, *(_BYTE *)(v34 + 66));
  v44 = *(_QWORD *)v33;
  v45 = *(_QWORD *)(v33 + 8);
  v46 = *(_QWORD *)(v33 + 16);
  v47 = *(_QWORD *)(v33 + 24);
  v48 = *(_QWORD *)(v33 + 32);
  v49 = *(_QWORD *)(v33 + 40);
  v50 = *(_QWORD *)(v33 + 48);
  v51 = *(_QWORD *)(v33 + 56);
  v52 = *(_WORD *)(v33 + 64);
  v53 = *(_BYTE *)(v33 + 66);
  *(_QWORD *)v33 = v35;
  *(_QWORD *)(v33 + 8) = v36;
  *(_QWORD *)(v33 + 16) = v37;
  *(_QWORD *)(v33 + 24) = v38;
  *(_QWORD *)(v33 + 32) = v39;
  *(_QWORD *)(v33 + 40) = v40;
  *(_QWORD *)(v33 + 48) = v42;
  *(_QWORD *)(v33 + 56) = v41;
  *(_WORD *)(v33 + 64) = v43;
  *(_BYTE *)(v33 + 66) = v66;
  sub_BDF8(v44, v45, v46, v47, v48, v49, v50, v51, v52, v53);
  v54 = v69[9];
  v55 = (_QWORD *)(v67 + v54);
  v56 = v68 + v54;
  v57 = *(void **)(v67 + v54);
  v58 = *(void **)(v68 + v54);
  *v55 = v58;
  v59 = v58;

  v55[1] = *(_QWORD *)(v56 + 8);
  sub_142F8((_QWORD *)(v67 + v69[10]), (_QWORD *)(v68 + v69[10]));
  v60 = v69[11];
  v61 = (_QWORD *)(v67 + v60);
  v62 = (_QWORD *)(v68 + v60);
  v63 = v62[1];
  v64 = v61[1];
  *v61 = *v62;
  v61[1] = v63;
  swift_retain(v63);
  swift_release(v64);
  result = v67;
  *(_BYTE *)(v67 + v69[12]) = *(_BYTE *)(v68 + v69[12]);
  return result;
}

uint64_t initializeWithTake for ListItemAccessoryMoreButtonView(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  _WORD *v9;
  _WORD *v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  void *v21;
  const void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;

  v6 = sub_5440(&qword_25FC38);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v8 = a3[6];
  v9 = (_WORD *)(a1 + v8);
  v10 = (_WORD *)(a2 + v8);
  v11 = sub_5440(&qword_25F548);
  if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
  {
    *v9 = *v10;
    v12 = (int *)type metadata accessor for SizeConstants.Environment(0);
    v13 = v12[6];
    v14 = (char *)v9 + v13;
    v15 = (char *)v10 + v13;
    v16 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v14, v15, v16);
    *(_QWORD *)((char *)v9 + v12[7]) = *(_QWORD *)((char *)v10 + v12[7]);
    v17 = v12[8];
    v18 = (char *)v9 + v17;
    v19 = (char *)v10 + v17;
    v18[2] = v19[2];
    *(_WORD *)v18 = *(_WORD *)v19;
    swift_storeEnumTagMultiPayload(v9, v11, 1);
  }
  else
  {
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  v20 = a3[7];
  v21 = (void *)(a1 + v20);
  v22 = (const void *)(a2 + v20);
  v23 = sub_5440(&qword_25F1E8);
  if (swift_getEnumCaseMultiPayload(v22, v23) == 1)
  {
    v24 = type metadata accessor for ColorScheme(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v24 - 8) + 32))(v21, v22, v24);
    swift_storeEnumTagMultiPayload(v21, v23, 1);
  }
  else
  {
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
  }
  v25 = a3[8];
  v26 = a3[9];
  v27 = a1 + v25;
  v28 = a2 + v25;
  v29 = *(_OWORD *)(v28 + 48);
  *(_OWORD *)(v27 + 32) = *(_OWORD *)(v28 + 32);
  *(_OWORD *)(v27 + 48) = v29;
  *(_DWORD *)(v27 + 63) = *(_DWORD *)(v28 + 63);
  v30 = *(_OWORD *)(v28 + 16);
  *(_OWORD *)v27 = *(_OWORD *)v28;
  *(_OWORD *)(v27 + 16) = v30;
  *(_OWORD *)(a1 + v26) = *(_OWORD *)(a2 + v26);
  v31 = a3[10];
  v32 = a3[11];
  v33 = a1 + v31;
  v34 = a2 + v31;
  v35 = *(_OWORD *)(v34 + 16);
  *(_OWORD *)v33 = *(_OWORD *)v34;
  *(_OWORD *)(v33 + 16) = v35;
  *(_QWORD *)(v33 + 32) = *(_QWORD *)(v34 + 32);
  *(_OWORD *)(a1 + v32) = *(_OWORD *)(a2 + v32);
  *(_BYTE *)(a1 + a3[12]) = *(_BYTE *)(a2 + a3[12]);
  return a1;
}

uint64_t assignWithTake for ListItemAccessoryMoreButtonView(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  _WORD *v9;
  _WORD *v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  void *v21;
  const void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int16 v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int16 v38;
  char v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;

  v6 = sub_5440(&qword_25FC38);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  if (a1 != a2)
  {
    v8 = a3[6];
    v9 = (_WORD *)(a1 + v8);
    v10 = (_WORD *)(a2 + v8);
    sub_B414(a1 + v8, &qword_25F548);
    v11 = sub_5440(&qword_25F548);
    if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
    {
      *v9 = *v10;
      v12 = (int *)type metadata accessor for SizeConstants.Environment(0);
      v13 = v12[6];
      v14 = (char *)v9 + v13;
      v15 = (char *)v10 + v13;
      v16 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v14, v15, v16);
      *(_QWORD *)((char *)v9 + v12[7]) = *(_QWORD *)((char *)v10 + v12[7]);
      v17 = v12[8];
      v18 = (char *)v9 + v17;
      v19 = (char *)v10 + v17;
      v18[2] = v19[2];
      *(_WORD *)v18 = *(_WORD *)v19;
      swift_storeEnumTagMultiPayload(v9, v11, 1);
    }
    else
    {
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    }
    v20 = a3[7];
    v21 = (void *)(a1 + v20);
    v22 = (const void *)(a2 + v20);
    sub_B414(a1 + v20, &qword_25F1E8);
    v23 = sub_5440(&qword_25F1E8);
    if (swift_getEnumCaseMultiPayload(v22, v23) == 1)
    {
      v24 = type metadata accessor for ColorScheme(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v24 - 8) + 32))(v21, v22, v24);
      swift_storeEnumTagMultiPayload(v21, v23, 1);
    }
    else
    {
      memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    }
  }
  v25 = a3[8];
  v26 = a1 + v25;
  v27 = a2 + v25;
  v28 = *(_WORD *)(v27 + 64);
  v29 = *(_BYTE *)(v27 + 66);
  v30 = *(_QWORD *)v26;
  v31 = *(_QWORD *)(v26 + 8);
  v32 = *(_QWORD *)(v26 + 16);
  v33 = *(_QWORD *)(v26 + 24);
  v34 = *(_QWORD *)(v26 + 32);
  v35 = *(_QWORD *)(v26 + 40);
  v36 = *(_QWORD *)(v26 + 48);
  v37 = *(_QWORD *)(v26 + 56);
  v38 = *(_WORD *)(v26 + 64);
  v39 = *(_BYTE *)(v26 + 66);
  v40 = *(_OWORD *)(v27 + 16);
  *(_OWORD *)v26 = *(_OWORD *)v27;
  *(_OWORD *)(v26 + 16) = v40;
  v41 = *(_OWORD *)(v27 + 48);
  *(_OWORD *)(v26 + 32) = *(_OWORD *)(v27 + 32);
  *(_OWORD *)(v26 + 48) = v41;
  *(_WORD *)(v26 + 64) = v28;
  *(_BYTE *)(v26 + 66) = v29;
  sub_BDF8(v30, v31, v32, v33, v34, v35, v36, v37, v38, v39);
  v42 = a3[9];
  v43 = (_QWORD *)(a1 + v42);
  v44 = (_QWORD *)(a2 + v42);
  v45 = *(void **)(a1 + v42);
  *v43 = *v44;

  v43[1] = v44[1];
  v46 = a3[10];
  v47 = a1 + v46;
  v48 = a2 + v46;
  _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)(a1 + v46));
  v49 = *(_OWORD *)(v48 + 16);
  *(_OWORD *)v47 = *(_OWORD *)v48;
  *(_OWORD *)(v47 + 16) = v49;
  *(_QWORD *)(v47 + 32) = *(_QWORD *)(v48 + 32);
  v50 = a3[11];
  v51 = *(_QWORD *)(a1 + v50 + 8);
  *(_OWORD *)(a1 + v50) = *(_OWORD *)(a2 + v50);
  swift_release(v51);
  *(_BYTE *)(a1 + a3[12]) = *(_BYTE *)(a2 + a3[12]);
  return a1;
}

uint64_t getEnumTagSinglePayload for ListItemAccessoryMoreButtonView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1371BC);
}

uint64_t sub_1371BC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v16;

  v6 = sub_5440(&qword_25FC38);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = sub_5440(&qword_25F558);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v13 = a3[6];
LABEL_7:
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = sub_5440(&qword_25F210);
  v12 = *(_QWORD *)(v14 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v14;
    v13 = a3[7];
    goto LABEL_7;
  }
  v16 = *(_QWORD *)(a1 + a3[10] + 24);
  if (v16 >= 0xFFFFFFFF)
    LODWORD(v16) = -1;
  return (v16 + 1);
}

uint64_t storeEnumTagSinglePayload for ListItemAccessoryMoreButtonView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1372A4);
}

uint64_t sub_1372A4(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;

  v8 = sub_5440(&qword_25FC38);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  v13 = sub_5440(&qword_25F558);
  v14 = *(_QWORD *)(v13 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = v13;
    v15 = a4[6];
LABEL_7:
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  result = sub_5440(&qword_25F210);
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v15 = a4[7];
    goto LABEL_7;
  }
  *(_QWORD *)(a1 + a4[10] + 24) = (a2 - 1);
  return result;
}

void sub_13737C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[9];

  sub_3CAFC(319);
  if (v3 <= 0x3F)
  {
    v8[0] = *(_QWORD *)(v2 - 8) + 64;
    v8[1] = v8[0];
    sub_2ADCC(319, (unint64_t *)&qword_25F5C8, type metadata accessor for SizeConstants);
    if (v5 <= 0x3F)
    {
      v8[2] = *(_QWORD *)(v4 - 8) + 64;
      sub_2ADCC(319, (unint64_t *)&qword_25F298, type metadata accessor for ColorConstants);
      if (v7 <= 0x3F)
      {
        v8[3] = *(_QWORD *)(v6 - 8) + 64;
        v8[4] = "C";
        v8[5] = &unk_1EEF68;
        v8[6] = &unk_1EEF80;
        v8[7] = (char *)&value witness table for () + 64;
        v8[8] = &unk_1EEF98;
        swift_initStructMetadata(a1, 256, 9, v8, a1 + 16);
      }
    }
  }
}

unint64_t sub_137474()
{
  unint64_t result;
  uint64_t v1;

  result = qword_266F38;
  if (!qword_266F38)
  {
    v1 = sub_7EF8(&qword_266F40);
    sub_7FD8(&qword_266E80, &qword_266E68, (uint64_t)&protocol conformance descriptor for HStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_266F38);
  }
  return result;
}

unint64_t sub_1374F8()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_266FB8;
  if (!qword_266FB8)
  {
    v1 = sub_7EF8(&qword_266F80);
    v2[0] = &type metadata for Image;
    v2[1] = &protocol witness table for Image;
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.fontWeight(_:)>>, 1);
    sub_7FD8((unint64_t *)&qword_25FD88, &qword_25FD90, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_266FB8);
  }
  return result;
}

unint64_t sub_1375A0()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  result = qword_266FC0;
  if (!qword_266FC0)
  {
    v1 = sub_7EF8(&qword_266FA0);
    v2 = sub_7EF8(&qword_2668C8);
    v3 = type metadata accessor for InDeterminateProgressViewStyle(255);
    v4 = sub_7FD8(&qword_2668D0, &qword_2668C8, (uint64_t)&protocol conformance descriptor for ProgressView<A, B>);
    v7 = v2;
    v8 = v3;
    v9 = v4;
    v10 = sub_6FD0(&qword_2668D8, type metadata accessor for InDeterminateProgressViewStyle, (uint64_t)&protocol conformance descriptor for InDeterminateProgressViewStyle);
    swift_getOpaqueTypeConformance2(&v7, &opaque type descriptor for <<opaque return type of View.progressViewStyle<A>(_:)>>, 1);
    v5 = type metadata accessor for DeterminateProgressViewStyle(255);
    v6 = sub_6FD0(&qword_2668E0, type metadata accessor for DeterminateProgressViewStyle, (uint64_t)&protocol conformance descriptor for DeterminateProgressViewStyle);
    v7 = v2;
    v8 = v5;
    v9 = v4;
    v10 = v6;
    swift_getOpaqueTypeConformance2(&v7, &opaque type descriptor for <<opaque return type of View.progressViewStyle<A>(_:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_266FC0);
  }
  return result;
}

uint64_t sub_1376D0()
{
  uint64_t v0;

  return sub_135C04(*(_QWORD *)(v0 + 16));
}

uint64_t sub_1376E0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return sub_135C7C(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_1376E8@<X0>(uint64_t a1@<X8>)
{
  return sub_135D3C(a1);
}

unint64_t sub_1376F0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_266FF8;
  if (!qword_266FF8)
  {
    v1 = sub_7EF8(&qword_266FF0);
    sub_13779C(&qword_267000, &qword_267008, (uint64_t)&protocol witness table for _PaddingLayout, (uint64_t)&protocol conformance descriptor for <> ModifiedContent<A, B>);
    sub_7FD8(&qword_267010, qword_267018, (uint64_t)&protocol conformance descriptor for _ContentShapeModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_266FF8);
  }
  return result;
}

uint64_t sub_13779C(unint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v7 = sub_7EF8(a2);
    sub_1374F8();
    result = swift_getWitnessTable(a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t SeriesCardCoverStackLayout.axIsSeries.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 40);
}

uint64_t FlowAction.PageDestination.init(intent:hidesDefaultBackButton:navigationBarTitle:)@<X0>(__int128 *a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t result;

  result = sub_AC68(a1, a5);
  *(_BYTE *)(a5 + 40) = a2;
  *(_QWORD *)(a5 + 48) = a3;
  *(_QWORD *)(a5 + 56) = a4;
  return result;
}

unint64_t sub_137848(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_24A1C8, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 4)
    return 4;
  else
    return v3;
}

uint64_t sub_137894(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1378C0 + 4 * byte_1EEFE0[a1]))(1701273968, 0xE400000000000000);
}

uint64_t sub_1378C0()
{
  return 0x746E65746E69;
}

unint64_t sub_1378D4()
{
  return 0xD000000000000016;
}

unint64_t sub_1378F4()
{
  return 0xD000000000000012;
}

uint64_t sub_137910(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_13793C + 4 * byte_1EEFE4[a1]))(1701273968, 0xE400000000000000);
}

uint64_t sub_13793C()
{
  return 0x746E65746E69;
}

unint64_t sub_137950()
{
  return 0xD000000000000016;
}

unint64_t sub_137970()
{
  return 0xD000000000000012;
}

unint64_t sub_13798C(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_24A248, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 3)
    return 3;
  else
    return v3;
}

uint64_t sub_1379D8(char a1)
{
  if (!a1)
    return 12383;
  if (a1 == 1)
    return 0xD000000000000016;
  return 0xD000000000000012;
}

uint64_t sub_137A30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_1EF228, a3);
  return == infix<A>(_:_:)(a1, a2, a3, WitnessTable, &protocol witness table for String);
}

uint64_t sub_137A84(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_1EF228, a1);
  return RawRepresentable<>.hashValue.getter(a1, a2, WitnessTable, &protocol witness table for String);
}

uint64_t sub_137AD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_1EF228, a2);
  return RawRepresentable<>.hash(into:)(a1, a2, a3, WitnessTable, &protocol witness table for String);
}

uint64_t sub_137B20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_1EF228, a2);
  return RawRepresentable<>._rawHashValue(seed:)(a1, a2, a3, WitnessTable, &protocol witness table for String);
}

unint64_t sub_137B70@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  void *v3;
  unint64_t result;
  Swift::String v5;

  v3 = (void *)a1[1];
  v5._countAndFlagsBits = *a1;
  v5._object = v3;
  result = sub_137848(v5);
  *a2 = result;
  return result;
}

uint64_t sub_137BA4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_137DF8(a1, (uint64_t (*)(_QWORD, _QWORD, _QWORD))sub_137894, a2);
}

uint64_t sub_137BB0()
{
  unsigned __int8 *v0;

  return sub_137910(*v0);
}

uint64_t sub_137BBC@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_137890(a1);
  *a2 = result;
  return result;
}

uint64_t sub_137BE8@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_13870C();
  *a1 = result;
  return result;
}

uint64_t sub_137C10(uint64_t a1)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_1EF2C8, a1);
  return CodingKey.description.getter(a1, WitnessTable);
}

uint64_t sub_137C44(uint64_t a1)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_1EF2C8, a1);
  return CodingKey.debugDescription.getter(a1, WitnessTable);
}

uint64_t sub_137C78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_1EF138, a3);
  return == infix<A>(_:_:)(a1, a2, a3, WitnessTable, &protocol witness table for String);
}

uint64_t sub_137CCC(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_1EF138, a1);
  return RawRepresentable<>.hashValue.getter(a1, a2, WitnessTable, &protocol witness table for String);
}

uint64_t sub_137D18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_1EF138, a2);
  return RawRepresentable<>.hash(into:)(a1, a2, a3, WitnessTable, &protocol witness table for String);
}

uint64_t sub_137D68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_1EF138, a2);
  return RawRepresentable<>._rawHashValue(seed:)(a1, a2, a3, WitnessTable, &protocol witness table for String);
}

unint64_t sub_137DB8@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  void *v3;
  unint64_t result;
  Swift::String v5;

  v3 = (void *)a1[1];
  v5._countAndFlagsBits = *a1;
  v5._object = v3;
  result = sub_13798C(v5);
  *a2 = result;
  return result;
}

uint64_t sub_137DEC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_137DF8(a1, (uint64_t (*)(_QWORD, _QWORD, _QWORD))sub_1379D8, a2);
}

uint64_t sub_137DF8@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(_QWORD, _QWORD, _QWORD)@<X2>, uint64_t *a3@<X8>)
{
  unsigned __int8 *v3;
  uint64_t result;
  uint64_t v6;

  result = a2(*v3, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  *a3 = result;
  a3[1] = v6;
  return result;
}

uint64_t sub_137E28()
{
  char *v0;

  return sub_1379D8(*v0);
}

uint64_t sub_137E34@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_1379D4(a1);
  *a2 = result;
  return result;
}

uint64_t sub_137E60@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_B9878();
  *a1 = result;
  return result;
}

uint64_t sub_137E88(uint64_t a1)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_1EF318, a1);
  return CodingKey.description.getter(a1, WitnessTable);
}

uint64_t sub_137EBC(uint64_t a1)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_1EF318, a1);
  return CodingKey.debugDescription.getter(a1, WitnessTable);
}

uint64_t FlowAction.PageDestination.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t WitnessTable;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  __int128 v51[2];
  _BYTE v52[40];
  char v53;
  uint64_t v54;
  uint64_t v55;
  char v56;

  v43 = a5;
  v8 = _s15PageDestinationV16LegacyCodingKeysOMa(255, a2, a3, a4);
  WitnessTable = swift_getWitnessTable(&unk_1EF318, v8);
  v9 = type metadata accessor for KeyedDecodingContainer(0, v8);
  v44 = *(_QWORD *)(v9 - 8);
  v45 = v9;
  __chkstk_darwin(v9);
  v46 = (char *)&v41 - v10;
  v48 = a2;
  v42 = a3;
  v12 = _s15PageDestinationV10CodingKeysOMa(255, a2, a3, v11);
  v13 = swift_getWitnessTable(&unk_1EF2C8, v12);
  v14 = type metadata accessor for KeyedDecodingContainer(0, v12);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v41 - v16;
  v19 = a1[3];
  v18 = a1[4];
  v49 = a1;
  sub_5480(a1, v19);
  v20 = v50;
  dispatch thunk of Decoder.container<A>(keyedBy:)(v12, v12, v13, v19, v18);
  if (v20)
    return _s7BooksUI13AnyPagedFrameVwxx_0(v49);
  v21 = v46;
  v22 = WitnessTable;
  v23 = v48;
  LOBYTE(v51[0]) = 0;
  if ((KeyedDecodingContainer.contains(_:)(v51, v14) & 1) != 0)
  {
    LOBYTE(v51[0]) = 0;
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(v8, v51, v14, v8, v22);
    v28 = type metadata accessor for CodeAnyIntentModel(0, v23, v26, v27);
    v56 = 0;
    v29 = swift_getWitnessTable(&protocol conformance descriptor for CodeAnyIntentModel<A>, v28);
    v30 = v45;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v51, v28, &v56, v45, v28, v29);
    sub_AC68(v51, (uint64_t)v52);
    LOBYTE(v51[0]) = 1;
    v53 = KeyedDecodingContainer.decode(_:forKey:)(v51, v30) & 1;
    LOBYTE(v51[0]) = 2;
    v35 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v51, v30);
    v37 = v36;
    (*(void (**)(char *, uint64_t))(v44 + 8))(v21, v30);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
    v23 = v48;
  }
  else
  {
    v31 = type metadata accessor for CodeAnyIntentModel(0, v23, v24, v25);
    v56 = 1;
    v32 = swift_getWitnessTable(&protocol conformance descriptor for CodeAnyIntentModel<A>, v31);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v51, v31, &v56, v14, v31, v32);
    sub_AC68(v51, (uint64_t)v52);
    LOBYTE(v51[0]) = 2;
    v53 = KeyedDecodingContainer.decode(_:forKey:)(v51, v14) & 1;
    LOBYTE(v51[0]) = 3;
    v35 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v51, v14);
    v37 = v33;
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  }
  v54 = v35;
  v55 = v37;
  v39 = type metadata accessor for FlowAction.PageDestination(0, v23, v42, v38);
  v40 = *(_QWORD *)(v39 - 8);
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v40 + 16))(v43, v52, v39);
  _s7BooksUI13AnyPagedFrameVwxx_0(v49);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v40 + 8))(v52, v39);
}

uint64_t _s15PageDestinationV16LegacyCodingKeysOMa(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10E40(a1, a2, a3, a4, (uint64_t)&_s15PageDestinationV16LegacyCodingKeysOMn);
}

uint64_t _s15PageDestinationV10CodingKeysOMa(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10E40(a1, a2, a3, a4, (uint64_t)&_s15PageDestinationV10CodingKeysOMn);
}

uint64_t type metadata accessor for FlowAction.PageDestination(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10E40(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FlowAction.PageDestination);
}

uint64_t sub_138340(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = swift_getWitnessTable(&protocol conformance descriptor for FlowAction.PageDestination<A>, a2);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_13836C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  return FlowAction.PageDestination.init(from:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a3, a4);
}

uint64_t sub_138388(_QWORD *a1)
{
  _s7BooksUI13AnyPagedFrameVwxx_0(a1);
  return swift_bridgeObjectRelease(a1[7]);
}

uint64_t sub_1383AC(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;

  v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v5 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v5;
  swift_bridgeObjectRetain(v5);
  return a1;
}

uint64_t sub_1383FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  sub_142F8((_QWORD *)a1, (_QWORD *)a2);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v4 = *(_QWORD *)(a2 + 56);
  v5 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  return a1;
}

uint64_t sub_13844C(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;

  _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v5 = *(_QWORD *)(a2 + 56);
  v6 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v5;
  swift_bridgeObjectRelease(v6);
  return a1;
}

uint64_t sub_13849C(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 64))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_1384E4(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 64) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t sub_138534(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_138580 + 4 * byte_1EEFED[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1385B4 + 4 * byte_1EEFE8[v4]))();
}

uint64_t sub_1385B4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1385BC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1385C4);
  return result;
}

uint64_t sub_1385D0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1385D8);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1385DC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1385E4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1385F0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_13863C + 4 * byte_1EEFF7[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_138670 + 4 * byte_1EEFF2[v4]))();
}

uint64_t sub_138670(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_138678(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x138680);
  return result;
}

uint64_t sub_13868C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x138694);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_138698(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1386A0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1386AC(uint64_t a1)
{
  return swift_getWitnessTable(&unk_1EF1B0, a1);
}

uint64_t sub_1386BC(uint64_t a1)
{
  return swift_getWitnessTable(&unk_1EF2A0, a1);
}

uint64_t sub_1386CC(uint64_t a1)
{
  return swift_getWitnessTable(&unk_1EF1D8, a1);
}

uint64_t sub_1386DC(uint64_t a1)
{
  return swift_getWitnessTable(&unk_1EF200, a1);
}

uint64_t sub_1386EC(uint64_t a1)
{
  return swift_getWitnessTable(&unk_1EF0E8, a1);
}

uint64_t sub_1386FC(uint64_t a1)
{
  return swift_getWitnessTable(&unk_1EF110, a1);
}

uint64_t sub_13870C()
{
  return 4;
}

_QWORD *sub_138714(uint64_t a1)
{
  int64_t v1;
  _QWORD *v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  __int128 v8[2];
  _QWORD *v9;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = _swiftEmptyArrayStorage;
  if (v1)
  {
    v9 = _swiftEmptyArrayStorage;
    sub_20F18(0, v1, 0);
    v2 = _swiftEmptyArrayStorage;
    v4 = a1 + 32;
    do
    {
      sub_BD00(v4, (uint64_t)v8);
      v9 = v2;
      v6 = v2[2];
      v5 = v2[3];
      if (v6 >= v5 >> 1)
      {
        sub_20F18(v5 > 1, v6 + 1, 1);
        v2 = v9;
      }
      v2[2] = v6 + 1;
      sub_AC68(v8, (uint64_t)&v2[5 * v6 + 4]);
      v4 += 40;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t _CodeAnyComponentModel_Many.description.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *v0;
  swift_bridgeObjectRetain(*v0);
  v2 = sub_5440(&qword_25ED60);
  v3 = Array.description.getter(v1, v2);
  swift_bridgeObjectRelease(v1);
  return v3;
}

uint64_t _CodeAnyComponentModel_Many.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  _QWORD *v9;
  _BYTE v10[40];

  sub_BD00((uint64_t)a1, (uint64_t)v10);
  v5 = sub_5DF14();
  v6 = Array<A>.init(from:)(v10, &type metadata for CodeAnyComponentModel, v5);
  if (v2)
    return _s7BooksUI13AnyPagedFrameVwxx_0(a1);
  v8 = v6;
  v9 = sub_138714(v6);
  _s7BooksUI13AnyPagedFrameVwxx_0(a1);
  result = swift_bridgeObjectRelease(v8);
  *a2 = v9;
  return result;
}

uint64_t _CodeAnyComponentModel_Many.init(_partiallyFrom:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t result;
  _BYTE v8[40];

  sub_BD00((uint64_t)a1, (uint64_t)v8);
  v4 = sub_5DF14();
  v5 = Array<A>.init(_partiallyFrom:)(v8, &type metadata for CodeAnyComponentModel, v4);
  v6 = sub_138714(v5);
  _s7BooksUI13AnyPagedFrameVwxx_0(a1);
  result = swift_bridgeObjectRelease(v5);
  *a2 = v6;
  return result;
}

ValueMetadata *type metadata accessor for _CodeAnyComponentModel_Many()
{
  return &type metadata for _CodeAnyComponentModel_Many;
}

uint64_t LocalizerRequest.init(from:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[3];
  uint64_t v12;
  uint64_t v13;

  v3 = a1[3];
  v4 = a1[4];
  sub_5480(a1, v3);
  dispatch thunk of Decoder.singleValueContainer()(v11, v3, v4);
  if (!v1)
  {
    v5 = v12;
    v6 = v13;
    sub_5480(v11, v12);
    v7 = dispatch thunk of SingleValueDecodingContainer.decode(_:)(v5, v6);
    v9 = v8;
    static LocalizerRequest.verbatim(_:)(v7, v8);
    swift_bridgeObjectRelease(v9);
    _s7BooksUI13AnyPagedFrameVwxx_0(v11);
  }
  return _s7BooksUI13AnyPagedFrameVwxx_0(a1);
}

uint64_t static LocalizerRequest.string(forKey:with:defaultValue:macDefaultValue:comment:using:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return static LocalizerRequest.string(forKey:with:defaultValue:using:)(a1, a2, a3, a4, a8);
}

uint64_t static LocalizerRequest.string(withCount:forKey:with:defaultValue:defaultOneValue:macDefaultValue:macDefaultOneValue:comment:using:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return static LocalizerRequest.string(withCount:forKey:with:defaultValue:using:)(a1, a2, a3, a4, a5, a11);
}

uint64_t static LocalizerRequest.decimal(forNumber:in:)(uint64_t a1, uint64_t a2)
{
  return static LocalizerRequest.decimal(forNumber:minimumFractionDigits:maximumFractionDigits:in:)(a1, 0, 1, 0, 1, a2);
}

uint64_t SymbolImage.init(kind:)@<X0>(char *a1@<X0>, _BYTE *a2@<X8>)
{
  char v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t result;

  v3 = *a1;
  v4 = &a2[*(int *)(type metadata accessor for SymbolImage(0) + 20)];
  *v4 = swift_getKeyPath(&unk_1EF470);
  v5 = sub_5440(&qword_25FAD8);
  result = swift_storeEnumTagMultiPayload(v4, v5, 0);
  *a2 = v3;
  return result;
}

uint64_t type metadata accessor for SymbolImage(uint64_t a1)
{
  uint64_t result;

  result = qword_267220;
  if (!qword_267220)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SymbolImage);
  return result;
}

uint64_t SymbolImage.Kind.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_138B38 + 4 * byte_1EF440[*v0]))(0xD000000000000010, 0x80000000001F96D0);
}

uint64_t sub_138B38()
{
  return 0x72616D6B63656863;
}

uint64_t sub_138B54()
{
  return 0x73697370696C6C65;
}

uint64_t sub_138B80()
{
  return 1937075312;
}

uint64_t sub_138B90(uint64_t a1)
{
  return a1 + 3;
}

uint64_t View.symbol(imageScale:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t KeyPath;

  KeyPath = swift_getKeyPath(&unk_1EF470);
  View.environment<A>(_:_:)(KeyPath, a1, a2, a3);
  return swift_release(KeyPath);
}

uint64_t SymbolImage.Kind.accessibilityText(localizer:)(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  _BYTE v8[40];

  v3 = type metadata accessor for LocalizerRequest(0);
  __chkstk_darwin(v3);
  v5 = &v8[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v8[0] = *v1;
  SymbolImage.Kind.accessibilityLocalizable.getter();
  sub_BD00(a1, (uint64_t)v8);
  return Text.init(_:localizer:)(v5, v8);
}

void SymbolImage.Kind.image.getter()
{
  __asm { BR              X10 }
}

uint64_t sub_138D00()
{
  uint64_t *v0;
  uint64_t result;

  result = Image.init(systemName:)(0x72616D6B63656863, 0xE90000000000006BLL);
  *v0 = result;
  return result;
}

void SymbolImage.Kind.accessibilityLocalizable.getter()
{
  uint64_t v1;
  uint64_t v2;

  v1 = type metadata accessor for LocalizerLookupStrategy(0);
  __chkstk_darwin(v1);
  v2 = type metadata accessor for LocalizerDefaultValue(0);
  __chkstk_darwin(v2);
  __asm { BR              X10 }
}

uint64_t sub_138E4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  LocalizerDefaultValue.init(stringLiteral:)("More", 4, 2);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v4 + 104))(v3, enum case for LocalizerLookupStrategy.default(_:), v0);
  static LocalizerRequest.string(forKey:with:defaultValue:using:)(0xD000000000000024, 0x80000000001FD6B0, 0, v2, v3);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v2, v1);
}

BooksUI::SymbolImage::Kind_optional __swiftcall SymbolImage.Kind.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  unint64_t v5;
  BooksUI::SymbolImage::Kind_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_24A2B0, v3);
  result.value = swift_bridgeObjectRelease(object);
  v7 = 8;
  if (v5 < 8)
    v7 = v5;
  *v4 = v7;
  return result;
}

void sub_139110(char *a1)
{
  sub_C71D0(*a1);
}

void sub_13911C()
{
  char *v0;

  sub_1258EC(0, *v0);
}

void sub_139128(uint64_t a1)
{
  char *v1;

  sub_125800(a1, *v1);
}

void sub_139130(uint64_t a1)
{
  char *v1;

  sub_1258EC(a1, *v1);
}

BooksUI::SymbolImage::Kind_optional sub_139138(Swift::String *a1)
{
  return SymbolImage.Kind.init(rawValue:)(*a1);
}

uint64_t sub_139144@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = SymbolImage.Kind.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_139168(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_13A034();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

void SymbolImage.body.getter()
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = sub_5440(&qword_25FF30);
  __chkstk_darwin(v1);
  v2 = type metadata accessor for Image.Scale(0);
  __chkstk_darwin(v2);
  v3 = sub_5440(&qword_25FF38);
  __chkstk_darwin(v3);
  __asm { BR              X10 }
}

uint64_t sub_1392C8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t KeyPath;

  v8 = Image.init(systemName:)(0x72616D6B63656863, 0xE90000000000006BLL);
  type metadata accessor for SymbolImage(0);
  sub_32298(v4);
  KeyPath = swift_getKeyPath(&unk_1EF498);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)v1 + *(int *)(v3 + 28), v4, v2);
  *v1 = KeyPath;
  sub_139784((uint64_t)v1, (uint64_t)v5 + *(int *)(v6 + 36));
  *v5 = v8;
  swift_retain(v8);
  sub_B414((uint64_t)v1, &qword_25FF30);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v4, v2);
  swift_release(v8);
  return sub_1397CC((uint64_t)v5, v0);
}

uint64_t sub_13941C()
{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for Image.Scale(0);
  sub_73A0(v0, qword_2671A0);
  v1 = sub_7120(v0, (uint64_t)qword_2671A0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v0 - 8) + 104))(v1, enum case for Image.Scale.small(_:), v0);
}

uint64_t sub_139474@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_25DCB8 != -1)
    swift_once(&qword_25DCB8, sub_13941C);
  v2 = type metadata accessor for Image.Scale(0);
  v3 = sub_7120(v2, (uint64_t)qword_2671A0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t sub_1394E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8;

  v8 = sub_13A0CC();
  return static EnvironmentKey<>._valuesEqual(_:_:)(a1, a2, a3, a4, v8);
}

_QWORD *sub_139534@<X0>(_QWORD *a1@<X8>)
{
  unint64_t v2;

  v2 = sub_13A078();
  return EnvironmentValues.subscript.getter(a1, &type metadata for SymbolImageScaleKey, &type metadata for SymbolImageScaleKey, v2);
}

_QWORD *sub_139568@<X0>(_QWORD *a1@<X8>)
{
  unint64_t v2;

  v2 = sub_13A078();
  return EnvironmentValues.subscript.getter(a1, &type metadata for SymbolImageScaleKey, &type metadata for SymbolImageScaleKey, v2);
}

_QWORD *sub_1395A4@<X0>(_QWORD *a1@<X8>)
{
  unint64_t v2;

  v2 = sub_13A078();
  return EnvironmentValues.subscript.getter(a1, &type metadata for SymbolImageScaleKey, &type metadata for SymbolImageScaleKey, v2);
}

uint64_t sub_1395E0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  void (*v9)(char *, uint64_t, uint64_t);
  unint64_t v10;
  uint64_t v12;

  v2 = type metadata accessor for Image.Scale(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v12 - v7;
  v9 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
  v9((char *)&v12 - v7, a1, v2);
  v9(v6, (uint64_t)v8, v2);
  v10 = sub_13A078();
  EnvironmentValues.subscript.setter(v6, &type metadata for SymbolImageScaleKey, &type metadata for SymbolImageScaleKey, v10);
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v8, v2);
}

uint64_t sub_1396C4()
{
  return EnvironmentValues.imageScale.getter();
}

uint64_t sub_1396E4()
{
  return EnvironmentValues.imageScale.getter();
}

uint64_t sub_139704(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v7;

  v2 = type metadata accessor for Image.Scale(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v5 + 16))(v4, a1);
  return EnvironmentValues.imageScale.setter(v4);
}

uint64_t sub_139784(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_5440(&qword_25FF30);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1397CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_5440(&qword_25FF38);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_139818()
{
  unint64_t result;

  result = qword_2671B8;
  if (!qword_2671B8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for SymbolImage.Kind, &type metadata for SymbolImage.Kind);
    atomic_store(result, (unint64_t *)&qword_2671B8);
  }
  return result;
}

uint64_t sub_13985C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &opaque type descriptor for <<opaque return type of SymbolImage.body>>, 1);
}

uint64_t *initializeBufferWithCopyOfBuffer for SymbolImage(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v13 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v13 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain(v13);
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    v5 = *(int *)(a3 + 20);
    v6 = (uint64_t *)((char *)a1 + v5);
    v7 = (uint64_t *)((char *)a2 + v5);
    v8 = sub_5440(&qword_25FAD8);
    if (swift_getEnumCaseMultiPayload(v7, v8) == 1)
    {
      v9 = type metadata accessor for Image.Scale(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v6, v7, v9);
      v10 = v6;
      v11 = v8;
      v12 = 1;
    }
    else
    {
      v14 = *v7;
      *v6 = *v7;
      swift_retain(v14);
      v10 = v6;
      v11 = v8;
      v12 = 0;
    }
    swift_storeEnumTagMultiPayload(v10, v11, v12);
  }
  return v3;
}

double destroy for SymbolImage(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  double result;

  v2 = (_QWORD *)(a1 + *(int *)(a2 + 20));
  v3 = sub_5440(&qword_25FAD8);
  if (swift_getEnumCaseMultiPayload(v2, v3) == 1)
  {
    v4 = type metadata accessor for Image.Scale(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v2, v4);
  }
  else
  {
    *(_QWORD *)&result = swift_release(*v2).n128_u64[0];
  }
  return result;
}

_BYTE *initializeWithCopy for SymbolImage(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (uint64_t *)&a1[v4];
  v6 = (uint64_t *)&a2[v4];
  v7 = sub_5440(&qword_25FAD8);
  if (swift_getEnumCaseMultiPayload(v6, v7) == 1)
  {
    v8 = type metadata accessor for Image.Scale(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v5, v6, v8);
    v9 = 1;
  }
  else
  {
    v10 = *v6;
    *v5 = *v6;
    swift_retain(v10);
    v9 = 0;
  }
  swift_storeEnumTagMultiPayload(v5, v7, v9);
  return a1;
}

_BYTE *assignWithCopy for SymbolImage(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *a1 = *a2;
  if (a1 != a2)
  {
    v4 = *(int *)(a3 + 20);
    v5 = (uint64_t *)&a1[v4];
    v6 = (uint64_t *)&a2[v4];
    sub_B414((uint64_t)&a1[v4], &qword_25FAD8);
    v7 = sub_5440(&qword_25FAD8);
    if (swift_getEnumCaseMultiPayload(v6, v7) == 1)
    {
      v8 = type metadata accessor for Image.Scale(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v5, v6, v8);
      v9 = 1;
    }
    else
    {
      v10 = *v6;
      *v5 = *v6;
      swift_retain(v10);
      v9 = 0;
    }
    swift_storeEnumTagMultiPayload(v5, v7, v9);
  }
  return a1;
}

_BYTE *initializeWithTake for SymbolImage(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = &a1[v4];
  v6 = &a2[v4];
  v7 = sub_5440(&qword_25FAD8);
  if (swift_getEnumCaseMultiPayload(v6, v7) == 1)
  {
    v8 = type metadata accessor for Image.Scale(0);
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v5, v6, v8);
    swift_storeEnumTagMultiPayload(v5, v7, 1);
  }
  else
  {
    memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
  }
  return a1;
}

_BYTE *assignWithTake for SymbolImage(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;

  *a1 = *a2;
  if (a1 != a2)
  {
    v4 = *(int *)(a3 + 20);
    v5 = &a1[v4];
    v6 = &a2[v4];
    sub_B414((uint64_t)&a1[v4], &qword_25FAD8);
    v7 = sub_5440(&qword_25FAD8);
    if (swift_getEnumCaseMultiPayload(v6, v7) == 1)
    {
      v8 = type metadata accessor for Image.Scale(0);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v5, v6, v8);
      swift_storeEnumTagMultiPayload(v5, v7, 1);
    }
    else
    {
      memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for SymbolImage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_139C80);
}

uint64_t sub_139C80(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4;
  uint64_t v8;

  if ((_DWORD)a2 == 248)
  {
    v4 = *a1;
    if (v4 >= 8)
      return v4 - 7;
    else
      return 0;
  }
  else
  {
    v8 = sub_5440(&qword_2671C0);
    return (*(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 20)], a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for SymbolImage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_139D04);
}

_BYTE *sub_139D04(_BYTE *result, uint64_t a2, int a3, uint64_t a4)
{
  _BYTE *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 248)
  {
    *result = a2 + 7;
  }
  else
  {
    v7 = sub_5440(&qword_2671C0);
    return (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

void sub_139D78(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = &unk_1EF5F8;
  sub_139DEC(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(v2 - 8) + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
  }
}

void sub_139DEC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_267230)
  {
    v2 = type metadata accessor for Image.Scale(255);
    v3 = type metadata accessor for Environment.Content(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_267230);
  }
}

uint64_t storeEnumTagSinglePayload for SymbolImage.Kind(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_139E8C + 4 * byte_1EF465[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_139EC0 + 4 * byte_1EF460[v4]))();
}

uint64_t sub_139EC0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_139EC8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x139ED0);
  return result;
}

uint64_t sub_139EDC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x139EE4);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_139EE8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_139EF0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SymbolImage.Kind()
{
  return &type metadata for SymbolImage.Kind;
}

void *sub_139F0C()
{
  return &protocol witness table for Image;
}

unint64_t sub_139F1C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_267260;
  if (!qword_267260)
  {
    v1 = sub_7EF8(&qword_25FF38);
    sub_139F88();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_267260);
  }
  return result;
}

unint64_t sub_139F88()
{
  unint64_t result;
  uint64_t v1;

  result = qword_260A18;
  if (!qword_260A18)
  {
    v1 = sub_7EF8(&qword_25FF30);
    result = swift_getWitnessTable(&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>, v1);
    atomic_store(result, (unint64_t *)&qword_260A18);
  }
  return result;
}

uint64_t sub_139FD4(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *a1;
  v2 = sub_7EF8(&qword_25FF30);
  v3 = type metadata accessor for ModifiedContent(255, v1, v2);
  sub_139F88();
  return swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v3);
}

unint64_t sub_13A034()
{
  unint64_t result;

  result = qword_267268;
  if (!qword_267268)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for SymbolImage.Kind, &type metadata for SymbolImage.Kind);
    atomic_store(result, (unint64_t *)&qword_267268);
  }
  return result;
}

unint64_t sub_13A078()
{
  unint64_t result;

  result = qword_267270;
  if (!qword_267270)
  {
    result = swift_getWitnessTable(&unk_1EF654, &type metadata for SymbolImageScaleKey);
    atomic_store(result, (unint64_t *)&qword_267270);
  }
  return result;
}

ValueMetadata *type metadata accessor for SymbolImageScaleKey()
{
  return &type metadata for SymbolImageScaleKey;
}

unint64_t sub_13A0CC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_267278;
  if (!qword_267278)
  {
    v1 = type metadata accessor for Image.Scale(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for Image.Scale, v1);
    atomic_store(result, (unint64_t *)&qword_267278);
  }
  return result;
}

uint64_t sub_13A118(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  return swift_release(*(_QWORD *)(a1 + 16));
}

_QWORD *sub_13A140(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[2];
  a1[2] = v4;
  swift_bridgeObjectRetain(v3);
  swift_retain(v4);
  return a1;
}

_QWORD *sub_13A17C(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = a1[2];
  v7 = a2[2];
  a1[2] = v7;
  swift_retain(v7);
  swift_release(v6);
  return a1;
}

_QWORD *sub_13A1E0(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;

  *a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease(a1[1]);
  v4 = a1[2];
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 8);
  swift_release(v4);
  return a1;
}

uint64_t sub_13A224(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 24))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t sub_13A280(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 24) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

uint64_t type metadata accessor for AccessibilityHintFromPreference(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10E40(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AccessibilityHintFromPreference);
}

uint64_t getEnumTagSinglePayload for AccessibilityConditionalTraits(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && a1[16])
    return (*(_DWORD *)a1 + 255);
  v3 = *a1;
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for AccessibilityConditionalTraits(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessibilityConditionalTraits()
{
  return &type metadata for AccessibilityConditionalTraits;
}

uint64_t destroy for AccessibilityConditionalHint(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));
}

uint64_t _s7BooksUI28AccessibilityConditionalHintVwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t assignWithCopy for AccessibilityConditionalHint(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t assignWithTake for AccessibilityConditionalHint(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessibilityConditionalHint(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AccessibilityConditionalHint(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessibilityConditionalHint()
{
  return &type metadata for AccessibilityConditionalHint;
}

uint64_t getEnumTagSinglePayload for AccessibilityConditionallySelected(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = (v6 + 2147483646) & 0x7FFFFFFF;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for AccessibilityConditionallySelected(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_13A5C8 + 4 * byte_1EF695[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_13A5FC + 4 * byte_1EF690[v4]))();
}

uint64_t sub_13A5FC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_13A604(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x13A60CLL);
  return result;
}

uint64_t sub_13A618(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x13A620);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_13A624(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_13A62C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AccessibilityConditionallySelected()
{
  return &type metadata for AccessibilityConditionallySelected;
}

uint64_t sub_13A648(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_22EAB0, 1);
}

uint64_t sub_13A658(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v8 = type metadata accessor for _JetLocalizeDefaultWorking(0);
  v9 = type metadata accessor for _JetLocalizeDefaultFailed(0);
  v10 = sub_6FD0(&qword_25FEE0, (uint64_t (*)(uint64_t))&type metadata accessor for _JetLocalizeDefaultWorking, (uint64_t)&protocol conformance descriptor for _JetLocalizeDefaultWorking);
  v11 = sub_6FD0(&qword_25FEE8, (uint64_t (*)(uint64_t))&type metadata accessor for _JetLocalizeDefaultFailed, (uint64_t)&protocol conformance descriptor for _JetLocalizeDefaultFailed);
  return JetLocalize.init(working:failed:content:)(&j___s18_JetEngine_SwiftUI01_A22LocalizeDefaultWorkingVACycfC, 0, sub_4ED68, 0, a1, a2, a3, v8, v9, a4, v10, v11);
}

uint64_t sub_13A740@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(char *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v31[2];
  uint64_t v32;
  _QWORD *v33;

  v31[1] = a1;
  v5 = type metadata accessor for AccessibilityTraits(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)v31 - v10;
  v32 = sub_5440(&qword_267360);
  v12 = __chkstk_darwin(v32);
  v14 = (char *)v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v12);
  v17 = (char *)v31 - v16;
  if ((a2 & 1) != 0)
  {
    static AccessibilityTraits.isSelected.getter(v15);
  }
  else
  {
    v33 = _swiftEmptyArrayStorage;
    v31[0] = sub_6FD0(&qword_267338, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityTraits, (uint64_t)&protocol conformance descriptor for AccessibilityTraits);
    v18 = a2;
    v19 = a3;
    v20 = sub_5440(&qword_267340);
    v21 = sub_7FD8(&qword_267348, &qword_267340, (uint64_t)&protocol conformance descriptor for [A]);
    v22 = v20;
    a3 = v19;
    a2 = v18;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v33, v22, v21, v5, v31[0]);
  }
  v23 = sub_5440(&qword_267368);
  v24 = sub_7FD8(&qword_267370, &qword_267368, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
  View.accessibilityAddTraits(_:)(v11, v23, v24);
  v25 = *(uint64_t (**)(char *, uint64_t))(v6 + 8);
  v26 = v25(v11, v5);
  if ((a2 & 1) != 0)
  {
    v33 = _swiftEmptyArrayStorage;
    v27 = sub_6FD0(&qword_267338, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityTraits, (uint64_t)&protocol conformance descriptor for AccessibilityTraits);
    v28 = sub_5440(&qword_267340);
    v29 = sub_7FD8(&qword_267348, &qword_267340, (uint64_t)&protocol conformance descriptor for [A]);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v33, v28, v29, v5, v27);
  }
  else
  {
    static AccessibilityTraits.isSelected.getter(v26);
  }
  ModifiedContent<>.accessibilityRemoveTraits(_:)(v9, v32);
  v25(v9, v5);
  sub_B414((uint64_t)v14, &qword_267360);
  return sub_167A4((uint64_t)v17, a3, &qword_267360);
}

uint64_t sub_13A9F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char *v2;

  return sub_13A740(a1, *v2, a2);
}

uint64_t sub_13A9F8(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_22EA88, 1);
}

uint64_t sub_13AA08@<X0>(int a1@<W1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  _QWORD v24[2];

  v21 = a2;
  v22 = a3;
  v23 = a1;
  v5 = sub_5440(&qword_267330);
  __chkstk_darwin(v5);
  v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for AccessibilityTraits(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24[0] = _swiftEmptyArrayStorage;
  v13 = sub_6FD0(&qword_267338, v12, (uint64_t)&protocol conformance descriptor for AccessibilityTraits);
  v14 = sub_5440(&qword_267340);
  v15 = sub_7FD8(&qword_267348, &qword_267340, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(v24, v14, v15, v8, v13);
  v16 = sub_5440(&qword_267350);
  v17 = sub_7FD8(&qword_267358, &qword_267350, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
  View.accessibilityAddTraits(_:)(v11, v16, v17);
  result = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  if ((v23 & 1) != 0)
  {
    v24[0] = v21;
    v24[1] = v22;
    v19 = sub_C57C();
    ModifiedContent<>.accessibilityHint<A>(_:)(v24, v5, &type metadata for String, v19);
    sub_B414(a4, &qword_267330);
    return sub_167A4((uint64_t)v7, a4, &qword_267330);
  }
  return result;
}

uint64_t sub_13ABF4@<X0>(uint64_t a1@<X8>)
{
  unsigned __int8 *v1;

  return sub_13AA08(*v1, *((_QWORD *)v1 + 1), *((_QWORD *)v1 + 2), a1);
}

uint64_t sub_13AC00(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  return swift_getOpaqueTypeConformance2(&v3, &unk_22EA48, 1);
}

uint64_t sub_13AC34@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t (*v13)(uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  unint64_t v20;
  _QWORD v21[2];
  _QWORD v22[2];

  v21[0] = a2;
  v21[1] = a1;
  v6 = sub_5440(&qword_267390);
  __chkstk_darwin(v6);
  v8 = (char *)v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for AccessibilityTraits(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22[0] = _swiftEmptyArrayStorage;
  v14 = sub_6FD0(&qword_267338, v13, (uint64_t)&protocol conformance descriptor for AccessibilityTraits);
  v15 = sub_5440(&qword_267340);
  v16 = sub_7FD8(&qword_267348, &qword_267340, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(v22, v15, v16, v9, v14);
  v17 = sub_5440(&qword_267398);
  v18 = sub_7FD8(&qword_2673A0, &qword_267398, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
  View.accessibilityAddTraits(_:)(v12, v17, v18);
  result = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  if (a3)
  {
    v22[0] = v21[0];
    v22[1] = a3;
    v20 = sub_C57C();
    ModifiedContent<>.accessibilityHint<A>(_:)(v22, v6, &type metadata for String, v20);
    sub_B414(a4, &qword_267390);
    return sub_167A4((uint64_t)v8, a4, &qword_267390);
  }
  return result;
}

uint64_t sub_13AE14@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return sub_13AC34(a1, *v2, v2[1], a2);
}

uint64_t sub_13AE1C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v9;
  uint64_t WitnessTable;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(char *, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD v56[11];

  v53 = a3;
  v54 = a4;
  v51 = a1;
  v52 = a2;
  v55 = a7;
  v49 = a5;
  v50 = a6;
  v9 = type metadata accessor for AccessibilityHintFromPreference(255, a5, a6, a4);
  WitnessTable = swift_getWitnessTable(&unk_1EF7F4, v9);
  v11 = type metadata accessor for _ViewModifier_Content(0, v9, WitnessTable);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  __chkstk_darwin(v11);
  v15 = (char *)&v47 - v14;
  v16 = type metadata accessor for ModifiedContent(255, v11, &type metadata for AccessibilityOptionalHint);
  v17 = sub_13B674();
  v18 = type metadata accessor for _PreferenceActionModifier(255, a5, a6, v17);
  v19 = type metadata accessor for ModifiedContent(255, v16, v18);
  v20 = type metadata accessor for _JetLocalizeDefaultWorking(255);
  v21 = type metadata accessor for _JetLocalizeDefaultFailed(255);
  v22 = swift_getWitnessTable(&protocol conformance descriptor for _ViewModifier_Content<A>, v11);
  v23 = sub_13B6F0();
  v56[8] = v22;
  v56[9] = v23;
  v24 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v16);
  v25 = swift_getWitnessTable(&protocol conformance descriptor for _PreferenceActionModifier<A>, v18);
  v56[6] = v24;
  v56[7] = v25;
  v48 = v19;
  v26 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v19);
  v47 = v26;
  v27 = sub_6FD0(&qword_25FEE0, (uint64_t (*)(uint64_t))&type metadata accessor for _JetLocalizeDefaultWorking, (uint64_t)&protocol conformance descriptor for _JetLocalizeDefaultWorking);
  v28 = sub_6FD0(&qword_25FEE8, (uint64_t (*)(uint64_t))&type metadata accessor for _JetLocalizeDefaultFailed, (uint64_t)&protocol conformance descriptor for _JetLocalizeDefaultFailed);
  v56[0] = v19;
  v56[1] = v20;
  v56[2] = v21;
  v56[3] = v26;
  v56[4] = v27;
  v56[5] = v28;
  v29 = type metadata accessor for JetLocalize(0, v56);
  v30 = *(_QWORD *)(v29 - 8);
  v31 = __chkstk_darwin(v29);
  v33 = (char *)&v47 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v31);
  v35 = (char *)&v47 - v34;
  v36 = v15;
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, v51, v11);
  v37 = *(unsigned __int8 *)(v12 + 80);
  v38 = (v37 + 32) & ~v37;
  v39 = (v13 + v38 + 7) & 0xFFFFFFFFFFFFFFF8;
  v40 = swift_allocObject(&unk_254990, v39 + 24, v37 | 7);
  v41 = v50;
  *(_QWORD *)(v40 + 16) = v49;
  *(_QWORD *)(v40 + 24) = v41;
  (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v40 + v38, v36, v11);
  v42 = (_QWORD *)(v40 + v39);
  v43 = v53;
  *v42 = v52;
  v42[1] = v43;
  v44 = v54;
  v42[2] = v54;
  swift_retain(v44);
  swift_bridgeObjectRetain(v43);
  sub_13A658((uint64_t)sub_13B7DC, v40, v48, v47);
  swift_getWitnessTable(&protocol conformance descriptor for JetLocalize<A, B, C>, v29);
  sub_10F80((uint64_t)v33, v29, (uint64_t)v35);
  v45 = *(void (**)(char *, uint64_t))(v30 + 8);
  v45(v33, v29);
  sub_C5C0((uint64_t)v35, v29, v55);
  return ((uint64_t (*)(char *, uint64_t))v45)(v35, v29);
}

uint64_t sub_13B13C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v13;
  uint64_t WitnessTable;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  __n128 v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  __int128 v54;
  uint64_t v55;
  _QWORD v56[3];

  v40 = a5;
  v39 = a3;
  v42 = a2;
  v43 = a1;
  v49 = a8;
  v41 = a7;
  v13 = type metadata accessor for AccessibilityHintFromPreference(255, a6, a7, a4);
  WitnessTable = swift_getWitnessTable(&unk_1EF7F4, v13);
  v15 = type metadata accessor for _ViewModifier_Content(255, v13, WitnessTable);
  v16 = type metadata accessor for ModifiedContent(0, v15, &type metadata for AccessibilityOptionalHint);
  v48 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v18 = (char *)&v38 - v17;
  v44 = sub_13B674();
  v46 = type metadata accessor for _PreferenceActionModifier(255, a6, a7, v44);
  v19 = type metadata accessor for ModifiedContent(0, v16, v46);
  v47 = *(_QWORD *)(v19 - 8);
  v20 = __chkstk_darwin(v19);
  v22 = (char *)&v38 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v45 = (uint64_t)&v38 - v23;
  *(_QWORD *)&v54 = a3;
  *((_QWORD *)&v54 + 1) = a4;
  v55 = a5;
  v24 = sub_5440(&qword_25EE08);
  State.wrappedValue.getter(v56, v24);
  v25 = v56[0];
  v26 = v56[1];
  v27 = swift_getWitnessTable(&protocol conformance descriptor for _ViewModifier_Content<A>, v15);
  *(_QWORD *)&v54 = v25;
  *((_QWORD *)&v54 + 1) = v26;
  View.modifier<A>(_:)(&v54, v15, &type metadata for AccessibilityOptionalHint, v27);
  swift_bridgeObjectRelease(v26);
  sub_BD00(v43, (uint64_t)&v54);
  v28 = (_QWORD *)swift_allocObject(&unk_2549B8, 96, 7);
  v30 = v40;
  v29 = v41;
  v28[2] = a6;
  v28[3] = v29;
  v28[4] = v39;
  v28[5] = a4;
  v28[6] = v30;
  sub_AC68(&v54, (uint64_t)(v28 + 7));
  v31 = sub_13B6F0();
  v52 = v27;
  v53 = v31;
  swift_bridgeObjectRetain(a4);
  swift_retain(v30);
  v32 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v16);
  View.onPreferenceChange<A>(_:perform:)(a6, sub_13B8B8, v28, v16, a6, v32, v29, v44);
  v33 = swift_release(v28);
  (*(void (**)(char *, uint64_t, __n128))(v48 + 8))(v18, v16, v33);
  v34 = swift_getWitnessTable(&protocol conformance descriptor for _PreferenceActionModifier<A>, v46);
  v50 = v32;
  v51 = v34;
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v19);
  v35 = v45;
  sub_10F80((uint64_t)v22, v19, v45);
  v36 = *(void (**)(char *, uint64_t))(v47 + 8);
  v36(v22, v19);
  sub_C5C0(v35, v19, v49);
  return ((uint64_t (*)(uint64_t, uint64_t))v36)(v35, v19);
}

uint64_t sub_13B448(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v21[5];

  v10 = sub_5440(&qword_25E0C8);
  __chkstk_darwin(v10);
  v12 = (char *)&v21[-1] - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_BC48(a1, (uint64_t)v12);
  v13 = type metadata accessor for LocalizerRequest(0);
  v14 = *(_QWORD *)(v13 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
  {
    sub_B414((uint64_t)v12, &qword_25E0C8);
    v15 = 0;
    v16 = 0;
  }
  else
  {
    v15 = LocalizerRequest.perform(using:)(a5);
    v16 = v17;
    (*(void (**)(char *, uint64_t))(v14 + 8))(v12, v13);
  }
  v21[2] = a2;
  v21[3] = a3;
  v21[4] = a4;
  v21[0] = v15;
  v21[1] = v16;
  v18 = sub_5440(&qword_25EE08);
  return State.wrappedValue.setter(v21, v18);
}

uint64_t sub_13B56C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;

  return sub_13AE1C(a1, *v3, v3[1], v3[2], *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a3);
}

uint64_t sub_13B580(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_22E9F4, 1);
}

uint64_t sub_13B590@<X0>(uint64_t a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v3 = sub_5440(&qword_267300);
  __chkstk_darwin(v3);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *v1;
  v7 = *((_QWORD *)v1 + 1);
  v8 = sub_5440(&qword_267308);
  v9 = sub_7FD8(&qword_267310, &qword_267308, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
  if (v6 == 1)
    View.accessibilityAddTraits(uiTraits:)(v7, v8, v9);
  else
    View.accessibilityRemoveTraits(uiTraits:)(v7, v8, v9);
  return sub_167A4((uint64_t)v5, a1, &qword_267300);
}

unint64_t sub_13B674()
{
  unint64_t result;
  uint64_t v1;

  result = qword_267318;
  if (!qword_267318)
  {
    v1 = sub_7EF8(&qword_25E0C8);
    sub_6FD0(&qword_267320, (uint64_t (*)(uint64_t))&type metadata accessor for LocalizerRequest, (uint64_t)&protocol conformance descriptor for LocalizerRequest);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_267318);
  }
  return result;
}

unint64_t sub_13B6F0()
{
  unint64_t result;

  result = qword_267328;
  if (!qword_267328)
  {
    result = swift_getWitnessTable(&unk_1EF8BC, &type metadata for AccessibilityOptionalHint);
    atomic_store(result, (unint64_t *)&qword_267328);
  }
  return result;
}

uint64_t sub_13B734(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t WitnessTable;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;

  v5 = type metadata accessor for AccessibilityHintFromPreference(255, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a4);
  WitnessTable = swift_getWitnessTable(&unk_1EF7F4, v5);
  v7 = type metadata accessor for _ViewModifier_Content(0, v5, WitnessTable);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (v9 + 32) & ~v9;
  v11 = v9 | 7;
  v12 = (*(_QWORD *)(v8 + 64) + v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  v13 = v12 + 24;
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v4 + v10, v7);
  v14 = v4 + v12;
  swift_bridgeObjectRelease(*(_QWORD *)(v14 + 8));
  swift_release(*(_QWORD *)(v14 + 16));
  return swift_deallocObject(v4, v13, v11);
}

uint64_t sub_13B7DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t WitnessTable;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;

  v6 = *(_QWORD *)(v3 + 16);
  v7 = *(_QWORD *)(v3 + 24);
  v8 = type metadata accessor for AccessibilityHintFromPreference(255, v6, v7, a2);
  WitnessTable = swift_getWitnessTable(&unk_1EF7F4, v8);
  v10 = *(_QWORD *)(type metadata accessor for _ViewModifier_Content(0, v8, WitnessTable) - 8);
  v11 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v12 = (uint64_t *)(v3 + ((*(_QWORD *)(v10 + 64) + v11 + 7) & 0xFFFFFFFFFFFFFFF8));
  return sub_13B13C(a1, v3 + v11, *v12, v12[1], v12[2], v6, v7, a3);
}

uint64_t sub_13B884()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[5]);
  swift_release(v0[6]);
  _s7BooksUI13AnyPagedFrameVwxx_0(v0 + 7);
  return swift_deallocObject(v0, 96, 7);
}

uint64_t sub_13B8B8(uint64_t a1)
{
  uint64_t *v1;

  return sub_13B448(a1, v1[4], v1[5], v1[6], (uint64_t)(v1 + 7));
}

ValueMetadata *type metadata accessor for AccessibilityOptionalHint()
{
  return &type metadata for AccessibilityOptionalHint;
}

uint64_t sub_13B8DC()
{
  return sub_13BAE4(&qword_267378, &qword_267300, &qword_267310, &qword_267308);
}

uint64_t sub_13B910(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t WitnessTable;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v17[10];

  v4 = *a1;
  v5 = a1[1];
  v6 = type metadata accessor for AccessibilityHintFromPreference(255, *a1, v5, a4);
  WitnessTable = swift_getWitnessTable(&unk_1EF7F4, v6);
  v8 = type metadata accessor for _ViewModifier_Content(255, v6, WitnessTable);
  v9 = type metadata accessor for ModifiedContent(255, v8, &type metadata for AccessibilityOptionalHint);
  v10 = sub_13B674();
  v11 = type metadata accessor for _PreferenceActionModifier(255, v4, v5, v10);
  v12 = type metadata accessor for ModifiedContent(255, v9, v11);
  v13 = type metadata accessor for _JetLocalizeDefaultWorking(255);
  v14 = type metadata accessor for _JetLocalizeDefaultFailed(255);
  v17[8] = swift_getWitnessTable(&protocol conformance descriptor for _ViewModifier_Content<A>, v8);
  v17[9] = sub_13B6F0();
  v17[6] = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v9);
  v17[7] = swift_getWitnessTable(&protocol conformance descriptor for _PreferenceActionModifier<A>, v11);
  v17[0] = v12;
  v17[1] = v13;
  v17[2] = v14;
  v17[3] = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v12);
  v17[4] = sub_6FD0(&qword_25FEE0, (uint64_t (*)(uint64_t))&type metadata accessor for _JetLocalizeDefaultWorking, (uint64_t)&protocol conformance descriptor for _JetLocalizeDefaultWorking);
  v17[5] = sub_6FD0(&qword_25FEE8, (uint64_t (*)(uint64_t))&type metadata accessor for _JetLocalizeDefaultFailed, (uint64_t)&protocol conformance descriptor for _JetLocalizeDefaultFailed);
  v15 = type metadata accessor for JetLocalize(255, v17);
  return swift_getWitnessTable(&protocol conformance descriptor for JetLocalize<A, B, C>, v15);
}

uint64_t sub_13BAB0()
{
  return sub_13BAE4(&qword_267380, &qword_267330, &qword_267358, &qword_267350);
}

uint64_t sub_13BAE4(unint64_t *a1, uint64_t *a2, unint64_t *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v8 = sub_7EF8(a2);
    sub_7FD8(a3, a4, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
    sub_6FD0((unint64_t *)&qword_25EEA0, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v8);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_13BB7C()
{
  return sub_13BAE4(&qword_267388, &qword_267360, &qword_267370, &qword_267368);
}

uint64_t sub_13BBB0(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_22EAD8, 1);
}

uint64_t sub_13BBC0()
{
  return sub_13BAE4(&qword_2673A8, &qword_267390, &qword_2673A0, &qword_267398);
}

uint64_t NativeIntentDispatcher.withBuiltInIntentImplementations.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for NativeIntentDispatcher(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t sub_13BC30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ObjectType;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD v19[4];

  v6 = type metadata accessor for TaskPriority(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) == 1)
  {
    sub_B414(a1, &qword_25E2E8);
    v8 = 7168;
    v9 = *(_QWORD *)(a3 + 16);
    if (v9)
    {
LABEL_3:
      v10 = *(_QWORD *)(a3 + 24);
      ObjectType = swift_getObjectType(v9);
      swift_unknownObjectRetain(v9);
      v12 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v10);
      v14 = v13;
      swift_unknownObjectRelease(v9);
      goto LABEL_6;
    }
  }
  else
  {
    v15 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    v8 = v15 | 0x1C00;
    v9 = *(_QWORD *)(a3 + 16);
    if (v9)
      goto LABEL_3;
  }
  v12 = 0;
  v14 = 0;
LABEL_6:
  v16 = swift_allocObject(&unk_254AD0, 32, 7);
  *(_QWORD *)(v16 + 16) = a2;
  *(_QWORD *)(v16 + 24) = a3;
  if (v14 | v12)
  {
    v19[0] = 0;
    v19[1] = 0;
    v17 = v19;
    v19[2] = v12;
    v19[3] = v14;
  }
  else
  {
    v17 = 0;
  }
  return swift_task_create(v8, v17, (char *)&type metadata for () + 8, &unk_25E330, v16);
}

uint64_t HighlightAttributionViewLoader.__allocating_init(id:provider:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;

  v7 = swift_allocObject(v3, *(unsigned int *)(v3 + 48), *(unsigned __int16 *)(v3 + 52));
  HighlightAttributionViewLoader.init(id:provider:)(a1, a2, a3);
  return v7;
}

void *sub_13BDD0()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  void *v3;
  id v4;
  uint64_t v6;

  KeyPath = swift_getKeyPath(&unk_1EF910);
  v6 = v0;
  v2 = sub_6FD0((unint64_t *)&qword_261C78, type metadata accessor for HighlightAttributionViewLoader, (uint64_t)&protocol conformance descriptor for HighlightAttributionViewLoader);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v2);
  swift_release(KeyPath);
  v3 = *(void **)(v0 + 16);
  v4 = v3;
  return v3;
}

id sub_13BE5C@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  void *v6;
  uint64_t v8;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1EF910);
  v8 = v3;
  v5 = sub_6FD0((unint64_t *)&qword_261C78, type metadata accessor for HighlightAttributionViewLoader, (uint64_t)&protocol conformance descriptor for HighlightAttributionViewLoader);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v5);
  swift_release(KeyPath);
  v6 = *(void **)(v3 + 16);
  *a2 = v6;
  return v6;
}

double sub_13BEE8(void **a1, uint64_t *a2)
{
  void *v2;
  uint64_t v3;
  uint64_t KeyPath;
  id v5;
  double result;
  uint64_t v7;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1EF910);
  v7 = v3;
  sub_6FD0((unint64_t *)&qword_261C78, type metadata accessor for HighlightAttributionViewLoader, (uint64_t)&protocol conformance descriptor for HighlightAttributionViewLoader);
  v5 = v2;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v7, KeyPath, sub_5DD58);

  *(_QWORD *)&result = swift_release(KeyPath).n128_u64[0];
  return result;
}

_QWORD *HighlightAttributionViewLoader.init(id:provider:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t KeyPath;
  _BYTE v20[16];
  __int128 v21;
  uint64_t v22;
  _QWORD v23[5];

  v4 = v3;
  v8 = *v3;
  v9 = sub_5440(&qword_25E2E8);
  v10 = __chkstk_darwin(v9);
  v12 = &v20[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v3[2] = 0;
  v3[3] = &_swiftEmptySetSingleton;
  ObservationRegistrar.init()(v10);
  sub_13C1D4(a3, (uint64_t)&v21);
  if (v22)
  {
    sub_AC68(&v21, (uint64_t)v23);
    v13 = type metadata accessor for TaskPriority(0);
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v12, 1, 1, v13);
    sub_BD00((uint64_t)v23, (uint64_t)&v21);
    type metadata accessor for MainActor(0);
    swift_retain(v3);
    v15 = static MainActor.shared.getter(v14);
    v16 = (_QWORD *)swift_allocObject(&unk_254AA8, 104, 7);
    v16[2] = v15;
    v16[3] = &protocol witness table for MainActor;
    v16[4] = v4;
    v16[5] = a1;
    v16[6] = a2;
    sub_AC68(&v21, (uint64_t)(v16 + 7));
    v16[12] = v8;
    v17 = sub_13BC30((uint64_t)v12, (uint64_t)&unk_2673C0, (uint64_t)v16);
    swift_release(v17);
    sub_B414(a3, &qword_25FAB8);
    _s7BooksUI13AnyPagedFrameVwxx_0(v23);
  }
  else
  {
    swift_bridgeObjectRelease(a2);
    sub_B414((uint64_t)&v21, &qword_25FAB8);
    KeyPath = swift_getKeyPath(&unk_1EF910);
    __chkstk_darwin(KeyPath);
    *(_QWORD *)&v20[-16] = v3;
    *(_QWORD *)&v20[-8] = 0;
    v23[0] = v3;
    sub_6FD0((unint64_t *)&qword_261C78, type metadata accessor for HighlightAttributionViewLoader, (uint64_t)&protocol conformance descriptor for HighlightAttributionViewLoader);
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v23, KeyPath, sub_5DD58);
    swift_release(KeyPath);
    sub_B414(a3, &qword_25FAB8);
  }
  return v4;
}

uint64_t sub_13C1D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_5440(&qword_25FAB8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for HighlightAttributionViewLoader(uint64_t a1)
{
  uint64_t result;

  result = qword_2673F8;
  if (!qword_2673F8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for HighlightAttributionViewLoader);
  return result;
}

uint64_t sub_13C260(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v8[11] = a7;
  v8[12] = a8;
  v8[9] = a5;
  v8[10] = a6;
  v8[8] = a4;
  v9 = sub_5440(&qword_267508);
  v8[13] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_5440(&qword_267510);
  v8[14] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v8[15] = v11;
  v8[16] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for MainActor(0);
  v8[17] = static MainActor.shared.getter(v12);
  v13 = dispatch thunk of Actor.unownedExecutor.getter(v12, &protocol witness table for MainActor);
  return swift_task_switch(sub_13C324, v13, v14);
}

uint64_t sub_13C324()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t KeyPath;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  __n128 v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v1 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD **)(v0 + 88);
  v3 = *(_QWORD *)(v0 + 72);
  swift_release(*(_QWORD *)(v0 + 136));
  v4 = v2[3];
  v5 = v2[4];
  sub_5480(v2, v4);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 16))(v3, v1, v4, v5);
  if (v7)
  {
    v8 = v6;
    v9 = v7;
    v10 = v2[3];
    v11 = v2[4];
    sub_5480(*(_QWORD **)(v0 + 88), v10);
    v12 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 24))(v8, v9, v10, v11);
    swift_bridgeObjectRelease(v9);
  }
  else
  {
    v12 = 0;
  }
  v13 = *(_QWORD *)(v0 + 128);
  v36 = *(_QWORD *)(v0 + 120);
  v14 = *(_QWORD **)(v0 + 88);
  v34 = *(_QWORD *)(v0 + 96);
  v35 = *(_QWORD *)(v0 + 112);
  v33 = *(_QWORD *)(v0 + 80);
  v15 = *(_QWORD *)(v0 + 64);
  v31 = *(_QWORD *)(v0 + 104);
  v32 = *(_QWORD *)(v0 + 72);
  KeyPath = swift_getKeyPath(&unk_1EF910);
  v17 = swift_task_alloc(32);
  *(_QWORD *)(v17 + 16) = v15;
  *(_QWORD *)(v17 + 24) = v12;
  *(_QWORD *)(v0 + 40) = v15;
  sub_6FD0((unint64_t *)&qword_261C78, type metadata accessor for HighlightAttributionViewLoader, (uint64_t)&protocol conformance descriptor for HighlightAttributionViewLoader);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v0 + 40, KeyPath, sub_5DD58);
  swift_release(KeyPath);

  swift_task_dealloc(v17);
  v18 = v2[3];
  v19 = v2[4];
  sub_5480(v14, v18);
  *(_QWORD *)(v0 + 48) = (*(uint64_t (**)(uint64_t, uint64_t))(v19 + 8))(v18, v19);
  v20 = sub_13CD7C();
  *(_QWORD *)(v0 + 56) = static OS_dispatch_queue.main.getter();
  v21 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v31, 1, 1, v21);
  v22 = sub_5440(&qword_267518);
  v23 = sub_7FD8(&qword_267520, &qword_267518, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
  v24 = sub_6FD0(&qword_267528, (uint64_t (*)(uint64_t))sub_13CD7C, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
  Publisher.receive<A>(on:options:)(v0 + 56, v31, v22, v20, v23, v24);
  sub_B414(v31, &qword_267508);

  swift_release(*(_QWORD *)(v0 + 48));
  v25 = swift_allocObject(&unk_254AF8, 24, 7);
  swift_weakInit(v25 + 16, v15);
  v26 = (_QWORD *)swift_allocObject(&unk_254B20, 48, 7);
  v26[2] = v25;
  v26[3] = v32;
  v26[4] = v33;
  v26[5] = v34;
  v27 = sub_7FD8(&qword_267530, &qword_267510, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  swift_bridgeObjectRetain(v33);
  v28 = Publisher<>.sink(receiveValue:)(sub_13CE08, v26, v35, v27);
  v29 = swift_release(v26);
  (*(void (**)(uint64_t, uint64_t, __n128))(v36 + 8))(v13, v35, v29);
  swift_beginAccess(v15 + 24, v0 + 16, 33, 0);
  AnyCancellable.store(in:)(v15 + 24);
  swift_endAccess(v0 + 16);
  swift_release(v28);
  swift_task_dealloc(v13);
  swift_task_dealloc(v31);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_13C6B0()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[2]);
  swift_release(v0[4]);
  swift_bridgeObjectRelease(v0[6]);
  _s7BooksUI13AnyPagedFrameVwxx_0(v0 + 7);
  return swift_deallocObject(v0, 104, 7);
}

uint64_t sub_13C6EC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = (uint64_t)(v1 + 7);
  v10 = v1[12];
  v11 = (_QWORD *)swift_task_alloc(dword_2673BC);
  *(_QWORD *)(v2 + 16) = v11;
  *v11 = v2;
  v11[1] = sub_108B0;
  return sub_13C260(a1, v4, v5, v6, v7, v8, v9, v10);
}

void sub_13C784(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t Strong;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t KeyPath;
  uint64_t v20;
  char v21[24];

  v7 = a2 + 16;
  swift_beginAccess(a2 + 16, v21, 0, 0);
  Strong = swift_weakLoadStrong(v7);
  if (Strong)
  {
    v9 = Strong;
    v10 = a1[3];
    v11 = a1[4];
    sub_5480(a1, v10);
    v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 16))(a3, a4, v10, v11);
    if (v13)
    {
      v14 = v12;
      v15 = v13;
      v16 = a1[3];
      v17 = a1[4];
      sub_5480(a1, v16);
      v18 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v17 + 24))(v14, v15, v16, v17);
      swift_bridgeObjectRelease(v15);
    }
    else
    {
      v18 = 0;
    }
    KeyPath = swift_getKeyPath(&unk_1EF910);
    __chkstk_darwin(KeyPath);
    v20 = v9;
    sub_6FD0((unint64_t *)&qword_261C78, type metadata accessor for HighlightAttributionViewLoader, (uint64_t)&protocol conformance descriptor for HighlightAttributionViewLoader);
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v20, KeyPath, sub_5DD58);
    swift_release(KeyPath);
    swift_release(v9);

  }
}

uint64_t HighlightAttributionViewLoader.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  v1 = v0 + OBJC_IVAR____TtC7BooksUI30HighlightAttributionViewLoader___observationRegistrar;
  v2 = type metadata accessor for ObservationRegistrar(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t HighlightAttributionViewLoader.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  v1 = v0 + OBJC_IVAR____TtC7BooksUI30HighlightAttributionViewLoader___observationRegistrar;
  v2 = type metadata accessor for ObservationRegistrar(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

double sub_13C9C0()
{
  double result;

  qword_288D30 = 0;
  result = 0.0;
  xmmword_288D10 = 0u;
  unk_288D20 = 0u;
  return result;
}

uint64_t sub_13C9D8@<X0>(uint64_t a1@<X8>)
{
  if (qword_25DCC0 != -1)
    swift_once(&qword_25DCC0, sub_13C9C0);
  return sub_13C1D4((uint64_t)&xmmword_288D10, a1);
}

uint64_t View.sharedWithYouController(from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t KeyPath;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[5];

  KeyPath = swift_getKeyPath(&unk_1EF938);
  v7 = sub_5440(&qword_2673C8);
  v8 = type metadata accessor for BaseObjectGraph(0);
  inject<A, B>(_:from:)(v10, v7, a1, v7, v8);
  View.environment<A>(_:_:)(KeyPath, v10, a2, a3);
  swift_release(KeyPath);
  return sub_B414((uint64_t)v10, &qword_25FAB8);
}

_QWORD *sub_13CAE0@<X0>(_QWORD *a1@<X8>)
{
  unint64_t v2;

  v2 = sub_13CD14();
  return EnvironmentValues.subscript.getter(a1, &type metadata for SharedWithYouControllerKey, &type metadata for SharedWithYouControllerKey, v2);
}

_QWORD *sub_13CB14@<X0>(_QWORD *a1@<X8>)
{
  unint64_t v2;

  v2 = sub_13CD14();
  return EnvironmentValues.subscript.getter(a1, &type metadata for SharedWithYouControllerKey, &type metadata for SharedWithYouControllerKey, v2);
}

_QWORD *sub_13CB50@<X0>(_QWORD *a1@<X8>)
{
  unint64_t v2;

  v2 = sub_13CD14();
  return EnvironmentValues.subscript.getter(a1, &type metadata for SharedWithYouControllerKey, &type metadata for SharedWithYouControllerKey, v2);
}

uint64_t sub_13CB8C(uint64_t a1)
{
  unint64_t v1;
  _BYTE v3[40];
  _BYTE v4[40];

  sub_13C1D4(a1, (uint64_t)v4);
  sub_13C1D4((uint64_t)v4, (uint64_t)v3);
  v1 = sub_13CD14();
  EnvironmentValues.subscript.setter(v3, &type metadata for SharedWithYouControllerKey, &type metadata for SharedWithYouControllerKey, v1);
  return sub_B414((uint64_t)v4, &qword_25FAB8);
}

uint64_t sub_13CBF4()
{
  return type metadata accessor for HighlightAttributionViewLoader(0);
}

uint64_t sub_13CBFC(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = &unk_1EF9F0;
  v4[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
  result = type metadata accessor for ObservationRegistrar(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 3, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for HighlightAttributionViewLoader(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for HighlightAttributionViewLoader);
}

uint64_t dispatch thunk of HighlightAttributionViewLoader.__allocating_init(id:provider:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 176))();
}

uint64_t sub_13CC94(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *a1;
  v2 = sub_7EF8(&qword_2674E8);
  v3 = type metadata accessor for ModifiedContent(255, v1, v2);
  sub_7FD8(&qword_2674F0, &qword_2674E8, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
  return swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v3);
}

unint64_t sub_13CD14()
{
  unint64_t result;

  result = qword_2674F8;
  if (!qword_2674F8)
  {
    result = swift_getWitnessTable(&unk_1EFA2C, &type metadata for SharedWithYouControllerKey);
    atomic_store(result, (unint64_t *)&qword_2674F8);
  }
  return result;
}

uint64_t sub_13CD58()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

unint64_t sub_13CD7C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25E338;
  if (!qword_25E338)
  {
    v1 = objc_opt_self(OS_dispatch_queue);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_25E338);
  }
  return result;
}

uint64_t sub_13CDB8()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_13CDDC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 48, 7);
}

void sub_13CE08(_QWORD *a1)
{
  uint64_t *v1;

  sub_13C784(a1, v1[2], v1[3], v1[4]);
}

ValueMetadata *type metadata accessor for SharedWithYouControllerKey()
{
  return &type metadata for SharedWithYouControllerKey;
}

uint64_t ButtonViewModel.init(size:shape:kind:style:content:isEnabled:action:)@<X0>(char *a1@<X0>, unsigned __int8 *a2@<X1>, unsigned __int8 *a3@<X2>, __int128 *a4@<X3>, uint64_t a5@<X4>, int a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t, uint64_t);
  unint64_t v21;
  int *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;

  v38 = a7;
  v37 = a6;
  v36 = a5;
  v13 = type metadata accessor for Font.TextStyle(0);
  __chkstk_darwin(v13);
  v15 = (char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *a1;
  LODWORD(v14) = *a3;
  v31 = *a2;
  v32 = v14;
  v35 = *a4;
  v17 = *((_QWORD *)a4 + 2);
  v33 = *((_QWORD *)a4 + 3);
  v34 = v17;
  v39 = 0x403C000000000000;
  v18 = enum case for Font.TextStyle.subheadline(_:);
  v20 = *(void (**)(char *, uint64_t, uint64_t))(v19 + 104);
  v20(v15, enum case for Font.TextStyle.subheadline(_:), v13);
  v21 = sub_3CB54();
  ScaledMetric.init(wrappedValue:relativeTo:)(&v39, v15, &type metadata for Double, v21);
  v22 = (int *)type metadata accessor for ButtonViewModel(0);
  v39 = 0x4008000000000000;
  v20(v15, v18, v13);
  ScaledMetric.init(wrappedValue:relativeTo:)(&v39, v15, &type metadata for Double, v21);
  v23 = (_QWORD *)(a8 + v22[6]);
  *v23 = swift_getKeyPath(&unk_1EFAF0);
  v24 = sub_5440(&qword_25F1E8);
  swift_storeEnumTagMultiPayload(v23, v24, 0);
  v25 = a8 + v22[14];
  v26 = type metadata accessor for LocalizerRequest(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v25, 1, 1, v26);
  *(_BYTE *)(a8 + v22[7]) = v16;
  *(_BYTE *)(a8 + v22[8]) = v31;
  *(_BYTE *)(a8 + v22[9]) = v32;
  v27 = a8 + v22[10];
  *(_OWORD *)v27 = v35;
  v28 = v33;
  *(_QWORD *)(v27 + 16) = v34;
  *(_QWORD *)(v27 + 24) = v28;
  sub_21C88(v36, a8 + v22[11], type metadata accessor for ButtonViewModel.Content);
  *(_BYTE *)(a8 + v22[12]) = v37;
  return sub_21C88(v38, a8 + v22[13], type metadata accessor for ButtonViewModel.ActionKind);
}

uint64_t type metadata accessor for ButtonViewModel(uint64_t a1)
{
  return sub_1FE90(a1, qword_2675A0, (uint64_t)&nominal type descriptor for ButtonViewModel);
}

void ButtonViewModel.theme.getter(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int EnumCaseMultiPayload;
  BOOL v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;

  v2 = v1;
  v64 = type metadata accessor for ButtonViewModel.Content(0);
  v4 = __chkstk_darwin(v64);
  v61 = (uint64_t)&v60 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v60 - v7;
  __chkstk_darwin(v6);
  v63 = (uint64_t)&v60 - v9;
  v10 = type metadata accessor for ColorConstants(0);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v60 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v11);
  v16 = (char *)&v60 - v15;
  v17 = __chkstk_darwin(v14);
  v19 = (char *)&v60 - v18;
  v20 = __chkstk_darwin(v17);
  v22 = (char *)&v60 - v21;
  __chkstk_darwin(v20);
  v24 = (char *)&v60 - v23;
  v25 = type metadata accessor for ButtonViewModel(0);
  v26 = v25;
  v27 = (unint64_t *)(v2 + *(int *)(v25 + 40));
  v29 = *v27;
  v28 = v27[1];
  v31 = v27[2];
  v30 = v27[3];
  v68 = v28;
  v69 = v31;
  v62 = v8;
  v67 = v30;
  switch(v29)
  {
    case 0uLL:
      v65 = sub_13D8B4();
      _s7BooksUI18BuyButtonExternalsV6colorsAA14ColorConstantsVvg_0((uint64_t)v24);
      v66 = ColorConstants.booksButtonBackground.getter();
      sub_224DC((uint64_t)v24, type metadata accessor for ColorConstants);
      _s7BooksUI18BuyButtonExternalsV6colorsAA14ColorConstantsVvg_0((uint64_t)v22);
      v36 = sub_13DA7C();
      sub_224DC((uint64_t)v22, type metadata accessor for ColorConstants);
      _s7BooksUI18BuyButtonExternalsV6colorsAA14ColorConstantsVvg_0((uint64_t)v19);
      v40 = objc_msgSend((id)objc_opt_self(UIColor), "tertiaryLabelColor");
      v38 = Color.init(_:)(v40);
      v39 = (uint64_t)v19;
      goto LABEL_8;
    case 1uLL:
      v60 = a1;
      _s7BooksUI18BuyButtonExternalsV6colorsAA14ColorConstantsVvg_0((uint64_t)v24);
      v65 = _s7BooksUI14ColorConstantsV14vibrantPrimary05SwiftB00C0Vvg_0();
      sub_224DC((uint64_t)v24, type metadata accessor for ColorConstants);
      _s7BooksUI18BuyButtonExternalsV6colorsAA14ColorConstantsVvg_0((uint64_t)v22);
      v66 = ColorConstants.booksSecondaryButtonBackground.getter();
      sub_224DC((uint64_t)v22, type metadata accessor for ColorConstants);
      _s7BooksUI18BuyButtonExternalsV6colorsAA14ColorConstantsVvg_0((uint64_t)v19);
      v36 = sub_13DA7C();
      sub_224DC((uint64_t)v19, type metadata accessor for ColorConstants);
      a1 = v60;
      _s7BooksUI18BuyButtonExternalsV6colorsAA14ColorConstantsVvg_0((uint64_t)v16);
      v37 = objc_msgSend((id)objc_opt_self(UIColor), "tertiaryLabelColor");
      v38 = Color.init(_:)(v37);
      v39 = (uint64_t)v16;
LABEL_8:
      sub_224DC(v39, type metadata accessor for ColorConstants);
      break;
    case 2uLL:
      v32 = a1;
      v33 = *(int *)(v25 + 36);
      v34 = *(unsigned __int8 *)(v2 + v33);
      _s7BooksUI18BuyButtonExternalsV6colorsAA14ColorConstantsVvg_0((uint64_t)v24);
      if (v34 == 1)
      {
        v35 = _s7BooksUI14ColorConstantsV14vibrantPrimary05SwiftB00C0Vvg_0();
        v65 = Color.opacity(_:)(0.7);
        swift_release(v35);
      }
      else
      {
        v65 = _s7BooksUI14ColorConstantsV25vibrantPrimaryButtonLabel05SwiftB00C0Vvg_0();
      }
      sub_224DC((uint64_t)v24, type metadata accessor for ColorConstants);
      _s7BooksUI18BuyButtonExternalsV6colorsAA14ColorConstantsVvg_0((uint64_t)v13);
      v66 = ColorConstants.vibrantButtonBackground.getter();
      sub_224DC((uint64_t)v13, type metadata accessor for ColorConstants);
      _s7BooksUI18BuyButtonExternalsV6colorsAA14ColorConstantsVvg_0((uint64_t)v24);
      v41 = ColorConstants.vibrantButtonBackground.getter();
      sub_224DC((uint64_t)v24, type metadata accessor for ColorConstants);
      v36 = Color.opacity(_:)(0.5);
      swift_release(v41);
      v42 = *(unsigned __int8 *)(v2 + v33);
      _s7BooksUI18BuyButtonExternalsV6colorsAA14ColorConstantsVvg_0((uint64_t)v24);
      if (v42 == 1)
      {
        v43 = _s7BooksUI14ColorConstantsV14vibrantPrimary05SwiftB00C0Vvg_0();
        v44 = Color.opacity(_:)(0.7);
        swift_release(v43);
      }
      else
      {
        v44 = _s7BooksUI14ColorConstantsV25vibrantPrimaryButtonLabel05SwiftB00C0Vvg_0();
      }
      a1 = v32;
      sub_224DC((uint64_t)v24, type metadata accessor for ColorConstants);
      v38 = Color.opacity(_:)(0.15);
      swift_release(v44);
      break;
    default:
      v38 = v30;
      v36 = v69;
      v65 = v29;
      v66 = v68;
      break;
  }
  if (*(_BYTE *)(v2 + *(int *)(v26 + 28)) == 2)
  {
    v45 = v2 + *(int *)(v26 + 44);
    v46 = v63;
    sub_1E428(v45, v63, type metadata accessor for ButtonViewModel.Content);
    v47 = v64;
    v48 = a1;
    if (swift_getEnumCaseMultiPayload(v46, v64) == 1)
    {
      v49 = *(_QWORD *)(v46 + 8);
      sub_13DDA0(v29, v68, v69, v67);
      v50 = swift_bridgeObjectRelease(v49);
      v51 = v65;
      v52 = v66;
    }
    else
    {
      sub_13DDA0(v29, v68, v69, v67);
      sub_224DC(v46, type metadata accessor for ButtonViewModel.Content);
      v53 = (uint64_t)v62;
      sub_1E428(v45, (uint64_t)v62, type metadata accessor for ButtonViewModel.Content);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v53, v47);
      v50 = sub_224DC(v53, type metadata accessor for ButtonViewModel.Content);
      v55 = EnumCaseMultiPayload == 7;
      v51 = v65;
      v52 = v66;
      if (!v55)
      {
        v56 = v61;
        sub_1E428(v45, v61, type metadata accessor for ButtonViewModel.Content);
        v50 = swift_getEnumCaseMultiPayload(v56, v47);
        if ((_DWORD)v50 != 6)
        {
          sub_224DC(v61, type metadata accessor for ButtonViewModel.Content);
          goto LABEL_22;
        }
      }
    }
    v57 = static Color.clear.getter(v50);
    swift_release(v52);
    v59 = static Color.clear.getter(v58);
    swift_release(v36);
    v36 = v59;
    v52 = v57;
LABEL_22:
    a1 = v48;
    goto LABEL_23;
  }
  sub_13DDA0(v29, v68, v69, v67);
  v51 = v65;
  v52 = v66;
LABEL_23:
  *a1 = v51;
  a1[1] = v52;
  a1[2] = v36;
  a1[3] = v38;
}

uint64_t static ButtonViewModel.Size.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2;
  char v3;
  int v4;

  v2 = *a1;
  v3 = v2 == 2;
  v4 = *a2;
  if (v4 != 2)
    v3 = 0;
  if (v2 != 2 && v4 != 2)
    v3 = ((v2 & 1) == 0) ^ v4;
  return v3 & 1;
}

uint64_t type metadata accessor for ButtonViewModel.Content(uint64_t a1)
{
  return sub_1FE90(a1, qword_267718, (uint64_t)&nominal type descriptor for ButtonViewModel.Content);
}

uint64_t type metadata accessor for ButtonViewModel.ActionKind(uint64_t a1)
{
  return sub_1FE90(a1, qword_267670, (uint64_t)&nominal type descriptor for ButtonViewModel.ActionKind);
}

void ButtonViewModel.progressViewModel(foregroundColor:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int *v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v5 = type metadata accessor for ColorConstants(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (int *)type metadata accessor for ButtonViewModel(0);
  v9 = v8;
  if ((*(_BYTE *)(v2 + v8[9]) & 1) != 0 || *(_BYTE *)(v2 + v8[7]) == 2)
  {
    _s7BooksUI18BuyButtonExternalsV6colorsAA14ColorConstantsVvg_0((uint64_t)v7);
    v10 = _s7BooksUI14ColorConstantsV14vibrantPrimary05SwiftB00C0Vvg_0();
    sub_224DC((uint64_t)v7, type metadata accessor for ColorConstants);
    v11 = v2 + v9[10];
    v13 = *(_QWORD *)v11;
    v12 = *(_QWORD *)(v11 + 8);
    v14 = *(_QWORD *)(v11 + 16);
    v15 = *(_QWORD *)(v11 + 24);
    if (*(_QWORD *)v11 == 2)
    {
      v16 = 2;
    }
    else
    {
      sub_13DDA0(*(_QWORD *)v11, *(_QWORD *)(v11 + 8), *(_QWORD *)(v11 + 16), *(_QWORD *)(v11 + 24));
      v16 = v13;
    }
    sub_13E100(v16, v12, v14, v15);
    sub_13E100(2uLL, 0, 0, 0);
    v17 = sub_5440(&qword_25FC38);
    ScaledMetric.wrappedValue.getter(&v30, v17);
    v18 = v30;
    ScaledMetric.wrappedValue.getter(&v30, v17);
    v19 = v30;
    *(_QWORD *)a2 = v10;
    *(_BYTE *)(a2 + 8) = v13 == 2;
    *(_QWORD *)(a2 + 16) = v18;
    *(_QWORD *)(a2 + 24) = v19;
  }
  else
  {
    v20 = v2 + v8[10];
    v22 = *(_QWORD *)v20;
    v21 = *(_QWORD *)(v20 + 8);
    v23 = *(_QWORD *)(v20 + 16);
    v24 = *(_QWORD *)(v20 + 24);
    if (*(_QWORD *)v20 == 2)
    {
      v25 = 2;
    }
    else
    {
      sub_13DDA0(*(_QWORD *)v20, *(_QWORD *)(v20 + 8), *(_QWORD *)(v20 + 16), *(_QWORD *)(v20 + 24));
      v25 = v22;
    }
    sub_13E100(v25, v21, v23, v24);
    sub_13E100(2uLL, 0, 0, 0);
    v26 = sub_5440(&qword_25FC38);
    ScaledMetric.wrappedValue.getter(&v30, v26);
    v27 = v30;
    ScaledMetric.wrappedValue.getter(&v30, v26);
    v28 = v30;
    *(_QWORD *)a2 = a1;
    *(_BYTE *)(a2 + 8) = v22 == 2;
    *(_QWORD *)(a2 + 16) = v27;
    *(_QWORD *)(a2 + 24) = v28;
    swift_retain(a1);
  }
}

uint64_t sub_13D8B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  char v15;
  void (*v16)(char *, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;

  v1 = type metadata accessor for ColorScheme(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for ColorConstants.Environment(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for ColorConstants(0);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v20 - v12;
  if (*(_BYTE *)(v0 + *(int *)(type metadata accessor for ButtonViewModel(0) + 36)) == 1)
  {
    _s7BooksUI18BuyButtonExternalsV6colorsAA14ColorConstantsVvg_0((uint64_t)v13);
    sub_1E428((uint64_t)v13, (uint64_t)v7, type metadata accessor for ColorConstants.Environment);
    (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, enum case for ColorScheme.dark(_:), v1);
    v14 = sub_4928C();
    v15 = dispatch thunk of static Equatable.== infix(_:_:)(v7, v4, v1, v14);
    v16 = *(void (**)(char *, uint64_t))(v2 + 8);
    v16(v4, v1);
    v16(v7, v1);
    if ((v15 & 1) != 0)
      v17 = _s7BooksUI14ColorConstantsV25vibrantPrimaryButtonLabel05SwiftB00C0Vvg_0();
    else
      v17 = ColorConstants.booksButtonBackground.getter();
    v18 = v17;
  }
  else
  {
    _s7BooksUI18BuyButtonExternalsV6colorsAA14ColorConstantsVvg_0((uint64_t)v11);
    v18 = _s7BooksUI14ColorConstantsV25vibrantPrimaryButtonLabel05SwiftB00C0Vvg_0();
    v13 = v11;
  }
  sub_224DC((uint64_t)v13, type metadata accessor for ColorConstants);
  return v18;
}

uint64_t sub_13DA7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t (*v13)(_QWORD);
  unint64_t v14;
  void (*v15)(char *, uint64_t);
  __n128 v16;
  __n128 v17;
  uint64_t v19;

  v1 = v0;
  v2 = type metadata accessor for Color.RGBColorSpace(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for ColorScheme(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for ColorConstants.Environment(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1E428(v1, (uint64_t)v12, v13);
  (*(void (**)(char *, _QWORD, uint64_t))(v7 + 104))(v9, enum case for ColorScheme.dark(_:), v6);
  v14 = sub_4928C();
  LOBYTE(v1) = dispatch thunk of static Equatable.== infix(_:_:)(v12, v9, v6, v14);
  v15 = *(void (**)(char *, uint64_t))(v7 + 8);
  v15(v9, v6);
  v15(v12, v6);
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for Color.RGBColorSpace.sRGB(_:), v2);
  if ((v1 & 1) != 0)
  {
    v16.n128_u64[0] = 0x3FC3131313131313;
    v17.n128_u64[0] = 0x3FC4949494949495;
  }
  else
  {
    v16.n128_u64[0] = 0x3FED3D3D3D3D3D3DLL;
    v17.n128_u64[0] = 0x3FED7D7D7D7D7D7DLL;
  }
  return Color.init(_:red:green:blue:opacity:)(v5, v16, v16.n128_f64[0], v17, 1.0);
}

uint64_t ButtonTheme.init(foregroundColor:backgroundColor:disabledBackgroundColor:disabledForegroundColor:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  *a5 = result;
  a5[1] = a2;
  a5[2] = a3;
  a5[3] = a4;
  return result;
}

uint64_t ButtonViewModel.useClearBackgroundColor.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  int EnumCaseMultiPayload;
  uint64_t v14;

  v1 = type metadata accessor for ButtonViewModel.Content(0);
  v2 = __chkstk_darwin(v1);
  v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __chkstk_darwin(v2);
  v7 = (char *)&v14 - v6;
  __chkstk_darwin(v5);
  v9 = (char *)&v14 - v8;
  v10 = type metadata accessor for ButtonViewModel(0);
  if (*(_BYTE *)(v0 + *(int *)(v10 + 28)) == 2)
  {
    v11 = v0 + *(int *)(v10 + 44);
    sub_1E428(v11, (uint64_t)v9, type metadata accessor for ButtonViewModel.Content);
    if (swift_getEnumCaseMultiPayload(v9, v1) == 1)
    {
      swift_bridgeObjectRelease(*((_QWORD *)v9 + 1));
      return 1;
    }
    sub_224DC((uint64_t)v9, type metadata accessor for ButtonViewModel.Content);
    sub_1E428(v11, (uint64_t)v7, type metadata accessor for ButtonViewModel.Content);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v7, v1);
    sub_224DC((uint64_t)v7, type metadata accessor for ButtonViewModel.Content);
    if (EnumCaseMultiPayload == 7)
      return 1;
    sub_1E428(v11, (uint64_t)v4, type metadata accessor for ButtonViewModel.Content);
    if (swift_getEnumCaseMultiPayload(v4, v1) == 6)
      return 1;
    sub_224DC((uint64_t)v4, type metadata accessor for ButtonViewModel.Content);
  }
  return 0;
}

unint64_t sub_13DDA0(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (result >= 3)
  {
    swift_retain(result);
    swift_retain(a2);
    swift_retain(a3);
    return swift_retain(a4);
  }
  return result;
}

uint64_t _s7BooksUI11ButtonThemeV2eeoiySbAC_ACtFZ_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[1];
  v4 = a1[2];
  v3 = a1[3];
  v5 = a2[1];
  v7 = a2[2];
  v6 = a2[3];
  if ((static Color.== infix(_:_:)(*a1, *a2) & 1) != 0
    && (static Color.== infix(_:_:)(v2, v5) & 1) != 0
    && (static Color.== infix(_:_:)(v4, v7) & 1) != 0)
  {
    return static Color.== infix(_:_:)(v3, v6);
  }
  else
  {
    return 0;
  }
}

BOOL _s7BooksUI15ButtonViewModelV5StyleO2eeoiySbAE_AEtFZ_0(unint64_t *a1, unint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v17;

  v3 = *a1;
  v2 = a1[1];
  v5 = a1[2];
  v4 = a1[3];
  v7 = *a2;
  v6 = a2[1];
  v9 = a2[2];
  v8 = a2[3];
  if (!*a1)
  {
    if (!v7)
    {
      sub_13E100(0, v2, v5, v4);
      v10 = 0;
      goto LABEL_8;
    }
    goto LABEL_12;
  }
  if (v3 == 1)
  {
    if (v7 == 1)
    {
      v11 = 1;
      sub_13E100(1uLL, v2, v5, v4);
      sub_13E100(1uLL, v6, v9, v8);
      return v11;
    }
    goto LABEL_12;
  }
  if (v3 != 2)
  {
    if (v7 >= 3)
    {
      sub_13DDA0(*a2, a2[1], v9, v8);
      sub_13DDA0(v3, v2, v5, v4);
      sub_13DDA0(v7, v6, v9, v8);
      sub_13DDA0(v3, v2, v5, v4);
      if ((static Color.== infix(_:_:)(v3, v7) & 1) != 0
        && (static Color.== infix(_:_:)(v2, v6) & 1) != 0
        && (static Color.== infix(_:_:)(v5, v9) & 1) != 0)
      {
        v17 = static Color.== infix(_:_:)(v4, v8);
        sub_13E100(v3, v2, v5, v4);
        sub_13E100(v7, v6, v9, v8);
        sub_13E100(v7, v6, v9, v8);
        sub_13E100(v3, v2, v5, v4);
        return (v17 & 1) != 0;
      }
      sub_13E100(v3, v2, v5, v4);
      sub_13E100(v7, v6, v9, v8);
      sub_13E100(v7, v6, v9, v8);
      v12 = v3;
      v13 = v2;
      v14 = v5;
      v15 = v4;
LABEL_13:
      sub_13E100(v12, v13, v14, v15);
      return 0;
    }
LABEL_12:
    sub_13DDA0(*a2, a2[1], v9, v8);
    sub_13DDA0(v3, v2, v5, v4);
    sub_13E100(v3, v2, v5, v4);
    v12 = v7;
    v13 = v6;
    v14 = v9;
    v15 = v8;
    goto LABEL_13;
  }
  if (v7 != 2)
    goto LABEL_12;
  sub_13E100(2uLL, v2, v5, v4);
  v10 = 2;
LABEL_8:
  sub_13E100(v10, v6, v9, v8);
  return 1;
}

unint64_t sub_13E100(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (result >= 3)
  {
    swift_release(result);
    swift_release(a2);
    swift_release(a3);
    return swift_release(a4);
  }
  return result;
}

unint64_t sub_13E154()
{
  unint64_t result;

  result = qword_267538;
  if (!qword_267538)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ButtonViewModel.Shape, &type metadata for ButtonViewModel.Shape);
    atomic_store(result, (unint64_t *)&qword_267538);
  }
  return result;
}

unint64_t sub_13E19C()
{
  unint64_t result;

  result = qword_267540;
  if (!qword_267540)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ButtonViewModel.Kind, &type metadata for ButtonViewModel.Kind);
    atomic_store(result, (unint64_t *)&qword_267540);
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for ButtonViewModel(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(_QWORD *, _QWORD *, uint64_t);
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  id v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(_QWORD *, _QWORD *, uint64_t);
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __int128 v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v17 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v17);
  }
  else
  {
    v7 = sub_5440(&qword_25FC38);
    v8 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v8((_QWORD *)((char *)a1 + a3[5]), (_QWORD *)((char *)a2 + a3[5]), v7);
    v9 = a3[6];
    v10 = (_QWORD *)((char *)a1 + v9);
    v11 = (_QWORD *)((char *)a2 + v9);
    v12 = sub_5440(&qword_25F1E8);
    if (swift_getEnumCaseMultiPayload(v11, v12) == 1)
    {
      v13 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v10, v11, v13);
      v14 = v10;
      v15 = v12;
      v16 = 1;
    }
    else
    {
      v18 = *v11;
      *v10 = *v11;
      swift_retain(v18);
      v14 = v10;
      v15 = v12;
      v16 = 0;
    }
    swift_storeEnumTagMultiPayload(v14, v15, v16);
    v19 = a3[8];
    *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
    *((_BYTE *)a1 + v19) = *((_BYTE *)a2 + v19);
    v20 = a3[10];
    *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
    v21 = (_QWORD *)((char *)a1 + v20);
    v22 = (_QWORD *)((char *)a2 + v20);
    v23 = *v22;
    if (*v22 >= 3uLL)
    {
      v25 = v22[1];
      v26 = v22[2];
      *v21 = v23;
      v21[1] = v25;
      v27 = v22[3];
      v21[2] = v26;
      v21[3] = v27;
      swift_retain(v23);
      swift_retain(v25);
      swift_retain(v26);
      swift_retain(v27);
    }
    else
    {
      v24 = *((_OWORD *)v22 + 1);
      *(_OWORD *)v21 = *(_OWORD *)v22;
      *((_OWORD *)v21 + 1) = v24;
    }
    v28 = a3[11];
    v29 = (_QWORD *)((char *)a1 + v28);
    v30 = (_QWORD *)((char *)a2 + v28);
    v31 = type metadata accessor for ButtonViewModel.Content(0);
    switch(swift_getEnumCaseMultiPayload(v30, v31))
    {
      case 0u:
        v32 = type metadata accessor for LocalizerRequest(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v32 - 8) + 16))(v29, v30, v32);
        v33 = v29;
        v34 = v31;
        v35 = 0;
        goto LABEL_17;
      case 1u:
        v36 = v30[1];
        *v29 = *v30;
        v29[1] = v36;
        swift_bridgeObjectRetain(v36);
        v33 = v29;
        v34 = v31;
        v35 = 1;
        goto LABEL_17;
      case 2u:
        v37 = v30[1];
        *v29 = *v30;
        v29[1] = v37;
        v38 = (void *)v30[2];
        v29[2] = v38;
        swift_bridgeObjectRetain(v37);
        v39 = v38;
        v40 = *(int *)(sub_5440(&qword_2621A8) + 64);
        v41 = (char *)v29 + v40;
        v42 = (char *)v30 + v40;
        v43 = type metadata accessor for LocalizerRequest(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v43 - 8) + 16))(v41, v42, v43);
        v33 = v29;
        v34 = v31;
        v35 = 2;
        goto LABEL_17;
      case 3u:
        v44 = v30[1];
        *v29 = *v30;
        v29[1] = v44;
        swift_bridgeObjectRetain(v44);
        v45 = *(int *)(sub_5440(&qword_2621B0) + 48);
        v46 = (char *)v29 + v45;
        v47 = (char *)v30 + v45;
        v48 = type metadata accessor for LocalizerRequest(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v48 - 8) + 16))(v46, v47, v48);
        v33 = v29;
        v34 = v31;
        v35 = 3;
        goto LABEL_17;
      case 4u:
        v49 = type metadata accessor for LocalizerRequest(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v49 - 8) + 16))(v29, v30, v49);
        v50 = *(int *)(sub_5440(&qword_2621B8) + 48);
        v51 = (_QWORD *)((char *)v29 + v50);
        v52 = (_QWORD *)((char *)v30 + v50);
        v53 = v52[1];
        *v51 = *v52;
        v51[1] = v53;
        swift_bridgeObjectRetain(v53);
        v33 = v29;
        v34 = v31;
        v35 = 4;
        goto LABEL_17;
      case 5u:
        v54 = type metadata accessor for LocalizerRequest(0);
        v55 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v54 - 8) + 16);
        v55(v29, v30, v54);
        v56 = sub_5440(&qword_2621C0);
        v55((_QWORD *)((char *)v29 + *(int *)(v56 + 48)), (_QWORD *)((char *)v30 + *(int *)(v56 + 48)), v54);
        v33 = v29;
        v34 = v31;
        v35 = 5;
LABEL_17:
        swift_storeEnumTagMultiPayload(v33, v34, v35);
        break;
      default:
        memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
        break;
    }
    v57 = a3[13];
    *((_BYTE *)a1 + a3[12]) = *((_BYTE *)a2 + a3[12]);
    v58 = (char *)a1 + v57;
    v59 = (char *)a2 + v57;
    v60 = type metadata accessor for ButtonViewModel.ActionKind(0);
    if (swift_getEnumCaseMultiPayload(v59, v60) == 1)
    {
      v61 = type metadata accessor for URL(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v61 - 8) + 16))(v58, v59, v61);
      v62 = 1;
    }
    else
    {
      v62 = *((_QWORD *)v59 + 3);
      if (v62)
      {
        v63 = *((_QWORD *)v59 + 4);
        *((_QWORD *)v58 + 3) = v62;
        *((_QWORD *)v58 + 4) = v63;
        (**(void (***)(char *, char *))(v62 - 8))(v58, v59);
        v62 = 0;
      }
      else
      {
        v64 = *((_OWORD *)v59 + 1);
        *(_OWORD *)v58 = *(_OWORD *)v59;
        *((_OWORD *)v58 + 1) = v64;
        *((_QWORD *)v58 + 4) = *((_QWORD *)v59 + 4);
      }
    }
    swift_storeEnumTagMultiPayload(v58, v60, v62);
    v65 = a3[14];
    v66 = (char *)a1 + v65;
    v67 = (char *)a2 + v65;
    v68 = type metadata accessor for LocalizerRequest(0);
    v69 = *(_QWORD *)(v68 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v69 + 48))(v67, 1, v68))
    {
      v70 = sub_5440(&qword_25E0C8);
      memcpy(v66, v67, *(_QWORD *)(*(_QWORD *)(v70 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v69 + 16))(v66, v67, v68);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v69 + 56))(v66, 0, 1, v68);
    }
  }
  return a1;
}

uint64_t destroy for ButtonViewModel(uint64_t a1, int *a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t);
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;

  v4 = sub_5440(&qword_25FC38);
  v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v5(a1, v4);
  v5(a1 + a2[5], v4);
  v6 = (_QWORD *)(a1 + a2[6]);
  v7 = sub_5440(&qword_25F1E8);
  if (swift_getEnumCaseMultiPayload(v6, v7) == 1)
  {
    v8 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v6, v8);
  }
  else
  {
    swift_release(*v6);
  }
  v9 = (_QWORD *)(a1 + a2[10]);
  if (*v9 >= 3uLL)
  {
    swift_release(*v9);
    swift_release(v9[1]);
    swift_release(v9[2]);
    swift_release(v9[3]);
  }
  v10 = a1 + a2[11];
  v11 = type metadata accessor for ButtonViewModel.Content(0);
  switch(swift_getEnumCaseMultiPayload(v10, v11))
  {
    case 0u:
      goto LABEL_11;
    case 1u:
      swift_bridgeObjectRelease(*(_QWORD *)(v10 + 8));
      break;
    case 2u:
      swift_bridgeObjectRelease(*(_QWORD *)(v10 + 8));

      v12 = *(int *)(sub_5440(&qword_2621A8) + 64);
      goto LABEL_10;
    case 3u:
      swift_bridgeObjectRelease(*(_QWORD *)(v10 + 8));
      v12 = *(int *)(sub_5440(&qword_2621B0) + 48);
LABEL_10:
      v10 += v12;
LABEL_11:
      v13 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v10, v13);
      break;
    case 4u:
      v14 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v10, v14);
      v15 = sub_5440(&qword_2621B8);
      swift_bridgeObjectRelease(*(_QWORD *)(v10 + *(int *)(v15 + 48) + 8));
      break;
    case 5u:
      v16 = type metadata accessor for LocalizerRequest(0);
      v17 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8);
      v17(v10, v16);
      v18 = sub_5440(&qword_2621C0);
      v17(v10 + *(int *)(v18 + 48), v16);
      break;
    default:
      break;
  }
  v19 = (_QWORD *)(a1 + a2[13]);
  v20 = type metadata accessor for ButtonViewModel.ActionKind(0);
  if (swift_getEnumCaseMultiPayload(v19, v20) == 1)
  {
    v21 = type metadata accessor for URL(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v21 - 8) + 8))(v19, v21);
  }
  else if (v19[3])
  {
    _s7BooksUI13AnyPagedFrameVwxx_0(v19);
  }
  v22 = a1 + a2[14];
  v23 = type metadata accessor for LocalizerRequest(0);
  v24 = *(_QWORD *)(v23 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v24 + 8))(v22, v23);
  return result;
}

uint64_t initializeWithCopy for ButtonViewModel(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  id v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(_QWORD *, _QWORD *, uint64_t);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  void *v64;
  const void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;

  v6 = sub_5440(&qword_25FC38);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v8 = a3[6];
  v9 = (uint64_t *)(a1 + v8);
  v10 = (uint64_t *)(a2 + v8);
  v11 = sub_5440(&qword_25F1E8);
  if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
  {
    v12 = type metadata accessor for ColorScheme(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v9, v10, v12);
    v13 = v9;
    v14 = v11;
    v15 = 1;
  }
  else
  {
    v16 = *v10;
    *v9 = *v10;
    swift_retain(v16);
    v13 = v9;
    v14 = v11;
    v15 = 0;
  }
  swift_storeEnumTagMultiPayload(v13, v14, v15);
  v17 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v17) = *(_BYTE *)(a2 + v17);
  v18 = a3[10];
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  v19 = (_QWORD *)(a1 + v18);
  v20 = (_QWORD *)(a2 + v18);
  v21 = *v20;
  if (*v20 >= 3uLL)
  {
    v23 = v20[1];
    v24 = v20[2];
    *v19 = v21;
    v19[1] = v23;
    v25 = v20[3];
    v19[2] = v24;
    v19[3] = v25;
    swift_retain(v21);
    swift_retain(v23);
    swift_retain(v24);
    swift_retain(v25);
  }
  else
  {
    v22 = *((_OWORD *)v20 + 1);
    *(_OWORD *)v19 = *(_OWORD *)v20;
    *((_OWORD *)v19 + 1) = v22;
  }
  v26 = a3[11];
  v27 = (_QWORD *)(a1 + v26);
  v28 = (_QWORD *)(a2 + v26);
  v29 = type metadata accessor for ButtonViewModel.Content(0);
  switch(swift_getEnumCaseMultiPayload(v28, v29))
  {
    case 0u:
      v30 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v30 - 8) + 16))(v27, v28, v30);
      v31 = v27;
      v32 = v29;
      v33 = 0;
      goto LABEL_15;
    case 1u:
      v34 = v28[1];
      *v27 = *v28;
      v27[1] = v34;
      swift_bridgeObjectRetain(v34);
      v31 = v27;
      v32 = v29;
      v33 = 1;
      goto LABEL_15;
    case 2u:
      v35 = v28[1];
      *v27 = *v28;
      v27[1] = v35;
      v36 = (void *)v28[2];
      v27[2] = v36;
      swift_bridgeObjectRetain(v35);
      v37 = v36;
      v38 = *(int *)(sub_5440(&qword_2621A8) + 64);
      v39 = (char *)v27 + v38;
      v40 = (char *)v28 + v38;
      v41 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v41 - 8) + 16))(v39, v40, v41);
      v31 = v27;
      v32 = v29;
      v33 = 2;
      goto LABEL_15;
    case 3u:
      v42 = v28[1];
      *v27 = *v28;
      v27[1] = v42;
      swift_bridgeObjectRetain(v42);
      v43 = *(int *)(sub_5440(&qword_2621B0) + 48);
      v44 = (char *)v27 + v43;
      v45 = (char *)v28 + v43;
      v46 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v46 - 8) + 16))(v44, v45, v46);
      v31 = v27;
      v32 = v29;
      v33 = 3;
      goto LABEL_15;
    case 4u:
      v47 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v47 - 8) + 16))(v27, v28, v47);
      v48 = *(int *)(sub_5440(&qword_2621B8) + 48);
      v49 = (_QWORD *)((char *)v27 + v48);
      v50 = (_QWORD *)((char *)v28 + v48);
      v51 = v50[1];
      *v49 = *v50;
      v49[1] = v51;
      swift_bridgeObjectRetain(v51);
      v31 = v27;
      v32 = v29;
      v33 = 4;
      goto LABEL_15;
    case 5u:
      v52 = type metadata accessor for LocalizerRequest(0);
      v53 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v52 - 8) + 16);
      v53(v27, v28, v52);
      v54 = sub_5440(&qword_2621C0);
      v53((_QWORD *)((char *)v27 + *(int *)(v54 + 48)), (_QWORD *)((char *)v28 + *(int *)(v54 + 48)), v52);
      v31 = v27;
      v32 = v29;
      v33 = 5;
LABEL_15:
      swift_storeEnumTagMultiPayload(v31, v32, v33);
      break;
    default:
      memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
      break;
  }
  v55 = a3[13];
  *(_BYTE *)(a1 + a3[12]) = *(_BYTE *)(a2 + a3[12]);
  v56 = a1 + v55;
  v57 = a2 + v55;
  v58 = type metadata accessor for ButtonViewModel.ActionKind(0);
  if (swift_getEnumCaseMultiPayload(v57, v58) == 1)
  {
    v59 = type metadata accessor for URL(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v59 - 8) + 16))(v56, v57, v59);
    v60 = 1;
  }
  else
  {
    v60 = *(_QWORD *)(v57 + 24);
    if (v60)
    {
      v61 = *(_QWORD *)(v57 + 32);
      *(_QWORD *)(v56 + 24) = v60;
      *(_QWORD *)(v56 + 32) = v61;
      (**(void (***)(uint64_t, uint64_t))(v60 - 8))(v56, v57);
      v60 = 0;
    }
    else
    {
      v62 = *(_OWORD *)(v57 + 16);
      *(_OWORD *)v56 = *(_OWORD *)v57;
      *(_OWORD *)(v56 + 16) = v62;
      *(_QWORD *)(v56 + 32) = *(_QWORD *)(v57 + 32);
    }
  }
  swift_storeEnumTagMultiPayload(v56, v58, v60);
  v63 = a3[14];
  v64 = (void *)(a1 + v63);
  v65 = (const void *)(a2 + v63);
  v66 = type metadata accessor for LocalizerRequest(0);
  v67 = *(_QWORD *)(v66 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v67 + 48))(v65, 1, v66))
  {
    v68 = sub_5440(&qword_25E0C8);
    memcpy(v64, v65, *(_QWORD *)(*(_QWORD *)(v68 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v67 + 16))(v64, v65, v66);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v67 + 56))(v64, 0, 1, v66);
  }
  return a1;
}

uint64_t assignWithCopy for ButtonViewModel(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  id v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  void (*v60)(_QWORD *, _QWORD *, uint64_t);
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __int128 *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  void *v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t (*v78)(void *, uint64_t, uint64_t);
  int v79;
  int v80;
  uint64_t v81;

  v6 = sub_5440(&qword_25FC38);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  if (a1 != a2)
  {
    v8 = a3[6];
    v9 = (uint64_t *)(a1 + v8);
    v10 = (uint64_t *)(a2 + v8);
    sub_B414(a1 + v8, &qword_25F1E8);
    v11 = sub_5440(&qword_25F1E8);
    if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
    {
      v12 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v9, v10, v12);
      v13 = v9;
      v14 = v11;
      v15 = 1;
    }
    else
    {
      v16 = *v10;
      *v9 = *v10;
      swift_retain(v16);
      v13 = v9;
      v14 = v11;
      v15 = 0;
    }
    swift_storeEnumTagMultiPayload(v13, v14, v15);
  }
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  v17 = a3[10];
  v18 = a1 + v17;
  v19 = a2 + v17;
  v20 = *(_QWORD *)(a1 + v17);
  v21 = *(_QWORD *)(a2 + v17);
  if (v20 >= 3)
  {
    if (v21 < 3)
    {
      sub_B414(a1 + v17, &qword_2624C0);
      v23 = *(_OWORD *)(v19 + 16);
      *(_OWORD *)v18 = *(_OWORD *)v19;
      *(_OWORD *)(v18 + 16) = v23;
      if (a1 == a2)
        goto LABEL_17;
      goto LABEL_14;
    }
    *(_QWORD *)v18 = v21;
    swift_retain(v21);
    swift_release(v20);
    v35 = *(_QWORD *)(v19 + 8);
    v36 = *(_QWORD *)(v18 + 8);
    *(_QWORD *)(v18 + 8) = v35;
    swift_retain(v35);
    swift_release(v36);
    v37 = *(_QWORD *)(v19 + 16);
    v38 = *(_QWORD *)(v18 + 16);
    *(_QWORD *)(v18 + 16) = v37;
    swift_retain(v37);
    swift_release(v38);
    v39 = *(_QWORD *)(v19 + 24);
    v40 = *(_QWORD *)(v18 + 24);
    *(_QWORD *)(v18 + 24) = v39;
    swift_retain(v39);
    swift_release(v40);
    if (a1 != a2)
      goto LABEL_14;
LABEL_17:
    *(_BYTE *)(a1 + a3[12]) = *(_BYTE *)(a2 + a3[12]);
    goto LABEL_31;
  }
  if (v21 >= 3)
  {
    *(_QWORD *)v18 = v21;
    v24 = *(_QWORD *)(v19 + 8);
    *(_QWORD *)(v18 + 8) = v24;
    v25 = *(_QWORD *)(v19 + 16);
    *(_QWORD *)(v18 + 16) = v25;
    v26 = *(_QWORD *)(v19 + 24);
    *(_QWORD *)(v18 + 24) = v26;
    swift_retain(v21);
    swift_retain(v24);
    swift_retain(v25);
    swift_retain(v26);
    if (a1 != a2)
      goto LABEL_14;
    goto LABEL_17;
  }
  v22 = *(_OWORD *)(v19 + 16);
  *(_OWORD *)v18 = *(_OWORD *)v19;
  *(_OWORD *)(v18 + 16) = v22;
  if (a1 == a2)
    goto LABEL_17;
LABEL_14:
  v27 = a3[11];
  v28 = (_QWORD *)(a1 + v27);
  v29 = (_QWORD *)(a2 + v27);
  sub_224DC(a1 + v27, type metadata accessor for ButtonViewModel.Content);
  v30 = type metadata accessor for ButtonViewModel.Content(0);
  switch(swift_getEnumCaseMultiPayload(v29, v30))
  {
    case 0u:
      v31 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v31 - 8) + 16))(v28, v29, v31);
      v32 = v28;
      v33 = v30;
      v34 = 0;
      goto LABEL_23;
    case 1u:
      *v28 = *v29;
      v41 = v29[1];
      v28[1] = v41;
      swift_bridgeObjectRetain(v41);
      v32 = v28;
      v33 = v30;
      v34 = 1;
      goto LABEL_23;
    case 2u:
      *v28 = *v29;
      v42 = v29[1];
      v28[1] = v42;
      v43 = (void *)v29[2];
      v28[2] = v43;
      swift_bridgeObjectRetain(v42);
      v44 = v43;
      v45 = *(int *)(sub_5440(&qword_2621A8) + 64);
      v46 = (char *)v28 + v45;
      v47 = (char *)v29 + v45;
      v48 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v48 - 8) + 16))(v46, v47, v48);
      v32 = v28;
      v33 = v30;
      v34 = 2;
      goto LABEL_23;
    case 3u:
      *v28 = *v29;
      v49 = v29[1];
      v28[1] = v49;
      swift_bridgeObjectRetain(v49);
      v50 = *(int *)(sub_5440(&qword_2621B0) + 48);
      v51 = (char *)v28 + v50;
      v52 = (char *)v29 + v50;
      v53 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v53 - 8) + 16))(v51, v52, v53);
      v32 = v28;
      v33 = v30;
      v34 = 3;
      goto LABEL_23;
    case 4u:
      v54 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v54 - 8) + 16))(v28, v29, v54);
      v55 = *(int *)(sub_5440(&qword_2621B8) + 48);
      v56 = (_QWORD *)((char *)v28 + v55);
      v57 = (_QWORD *)((char *)v29 + v55);
      *v56 = *v57;
      v58 = v57[1];
      v56[1] = v58;
      swift_bridgeObjectRetain(v58);
      v32 = v28;
      v33 = v30;
      v34 = 4;
      goto LABEL_23;
    case 5u:
      v59 = type metadata accessor for LocalizerRequest(0);
      v60 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v59 - 8) + 16);
      v60(v28, v29, v59);
      v61 = sub_5440(&qword_2621C0);
      v60((_QWORD *)((char *)v28 + *(int *)(v61 + 48)), (_QWORD *)((char *)v29 + *(int *)(v61 + 48)), v59);
      v32 = v28;
      v33 = v30;
      v34 = 5;
LABEL_23:
      swift_storeEnumTagMultiPayload(v32, v33, v34);
      break;
    default:
      memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
      break;
  }
  *(_BYTE *)(a1 + a3[12]) = *(_BYTE *)(a2 + a3[12]);
  v62 = a3[13];
  v63 = a1 + v62;
  v64 = (__int128 *)(a2 + v62);
  sub_224DC(a1 + v62, type metadata accessor for ButtonViewModel.ActionKind);
  v65 = type metadata accessor for ButtonViewModel.ActionKind(0);
  if (swift_getEnumCaseMultiPayload(v64, v65) == 1)
  {
    v66 = type metadata accessor for URL(0);
    (*(void (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)(v66 - 8) + 16))(v63, v64, v66);
    v67 = v63;
    v68 = v65;
    v69 = 1;
  }
  else
  {
    v70 = *((_QWORD *)v64 + 3);
    if (v70)
    {
      *(_QWORD *)(v63 + 24) = v70;
      *(_QWORD *)(v63 + 32) = *((_QWORD *)v64 + 4);
      (**(void (***)(uint64_t, __int128 *))(v70 - 8))(v63, v64);
    }
    else
    {
      v71 = *v64;
      v72 = v64[1];
      *(_QWORD *)(v63 + 32) = *((_QWORD *)v64 + 4);
      *(_OWORD *)v63 = v71;
      *(_OWORD *)(v63 + 16) = v72;
    }
    v67 = v63;
    v68 = v65;
    v69 = 0;
  }
  swift_storeEnumTagMultiPayload(v67, v68, v69);
LABEL_31:
  v73 = a3[14];
  v74 = (void *)(a1 + v73);
  v75 = (void *)(a2 + v73);
  v76 = type metadata accessor for LocalizerRequest(0);
  v77 = *(_QWORD *)(v76 - 8);
  v78 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v77 + 48);
  v79 = v78(v74, 1, v76);
  v80 = v78(v75, 1, v76);
  if (!v79)
  {
    if (!v80)
    {
      (*(void (**)(void *, void *, uint64_t))(v77 + 24))(v74, v75, v76);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v77 + 8))(v74, v76);
    goto LABEL_36;
  }
  if (v80)
  {
LABEL_36:
    v81 = sub_5440(&qword_25E0C8);
    memcpy(v74, v75, *(_QWORD *)(*(_QWORD *)(v81 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v77 + 16))(v74, v75, v76);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v77 + 56))(v74, 0, 1, v76);
  return a1;
}

uint64_t initializeWithTake for ButtonViewModel(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  void *v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  __int128 v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(_QWORD *, _QWORD *, uint64_t);
  uint64_t v38;
  uint64_t v39;
  void *v40;
  const void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  const void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v6 = sub_5440(&qword_25FC38);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v8 = a3[6];
  v9 = (void *)(a1 + v8);
  v10 = (const void *)(a2 + v8);
  v11 = sub_5440(&qword_25F1E8);
  if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
  {
    v12 = type metadata accessor for ColorScheme(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v9, v10, v12);
    swift_storeEnumTagMultiPayload(v9, v11, 1);
  }
  else
  {
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  v13 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v13) = *(_BYTE *)(a2 + v13);
  v14 = a3[10];
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  v15 = (_OWORD *)(a1 + v14);
  v16 = (_OWORD *)(a2 + v14);
  v17 = v16[1];
  *v15 = *v16;
  v15[1] = v17;
  v18 = a3[11];
  v19 = (_QWORD *)(a1 + v18);
  v20 = (_QWORD *)(a2 + v18);
  v21 = type metadata accessor for ButtonViewModel.Content(0);
  switch(swift_getEnumCaseMultiPayload(v20, v21))
  {
    case 0u:
      v22 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v19, v20, v22);
      v23 = v19;
      v24 = v21;
      v25 = 0;
      goto LABEL_11;
    case 2u:
      *(_OWORD *)v19 = *(_OWORD *)v20;
      v19[2] = v20[2];
      v26 = *(int *)(sub_5440(&qword_2621A8) + 64);
      v27 = (char *)v19 + v26;
      v28 = (char *)v20 + v26;
      v29 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v29 - 8) + 32))(v27, v28, v29);
      v23 = v19;
      v24 = v21;
      v25 = 2;
      goto LABEL_11;
    case 3u:
      *(_OWORD *)v19 = *(_OWORD *)v20;
      v30 = *(int *)(sub_5440(&qword_2621B0) + 48);
      v31 = (char *)v19 + v30;
      v32 = (char *)v20 + v30;
      v33 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v33 - 8) + 32))(v31, v32, v33);
      v23 = v19;
      v24 = v21;
      v25 = 3;
      goto LABEL_11;
    case 4u:
      v34 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v34 - 8) + 32))(v19, v20, v34);
      v35 = sub_5440(&qword_2621B8);
      *(_OWORD *)((char *)v19 + *(int *)(v35 + 48)) = *(_OWORD *)((char *)v20 + *(int *)(v35 + 48));
      v23 = v19;
      v24 = v21;
      v25 = 4;
      goto LABEL_11;
    case 5u:
      v36 = type metadata accessor for LocalizerRequest(0);
      v37 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v36 - 8) + 32);
      v37(v19, v20, v36);
      v38 = sub_5440(&qword_2621C0);
      v37((_QWORD *)((char *)v19 + *(int *)(v38 + 48)), (_QWORD *)((char *)v20 + *(int *)(v38 + 48)), v36);
      v23 = v19;
      v24 = v21;
      v25 = 5;
LABEL_11:
      swift_storeEnumTagMultiPayload(v23, v24, v25);
      break;
    default:
      memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
      break;
  }
  v39 = a3[13];
  *(_BYTE *)(a1 + a3[12]) = *(_BYTE *)(a2 + a3[12]);
  v40 = (void *)(a1 + v39);
  v41 = (const void *)(a2 + v39);
  v42 = type metadata accessor for ButtonViewModel.ActionKind(0);
  if (swift_getEnumCaseMultiPayload(v41, v42) == 1)
  {
    v43 = type metadata accessor for URL(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v43 - 8) + 32))(v40, v41, v43);
    swift_storeEnumTagMultiPayload(v40, v42, 1);
  }
  else
  {
    memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
  }
  v44 = a3[14];
  v45 = (void *)(a1 + v44);
  v46 = (const void *)(a2 + v44);
  v47 = type metadata accessor for LocalizerRequest(0);
  v48 = *(_QWORD *)(v47 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v48 + 48))(v46, 1, v47))
  {
    v49 = sub_5440(&qword_25E0C8);
    memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v48 + 32))(v45, v46, v47);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v48 + 56))(v45, 0, 1, v47);
  }
  return a1;
}

uint64_t assignWithTake for ButtonViewModel(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  void *v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  unint64_t v17;
  __int128 v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(_QWORD *, _QWORD *, uint64_t);
  uint64_t v42;
  uint64_t v43;
  void *v44;
  const void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t (*v53)(void *, uint64_t, uint64_t);
  int v54;
  int v55;
  uint64_t v56;

  v6 = sub_5440(&qword_25FC38);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  if (a1 != a2)
  {
    v8 = a3[6];
    v9 = (void *)(a1 + v8);
    v10 = (const void *)(a2 + v8);
    sub_B414(a1 + v8, &qword_25F1E8);
    v11 = sub_5440(&qword_25F1E8);
    if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
    {
      v12 = type metadata accessor for ColorScheme(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v9, v10, v12);
      swift_storeEnumTagMultiPayload(v9, v11, 1);
    }
    else
    {
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    }
  }
  v13 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v13) = *(_BYTE *)(a2 + v13);
  v14 = a3[10];
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  v15 = (_QWORD *)(a1 + v14);
  v16 = (_QWORD *)(a2 + v14);
  v17 = *(_QWORD *)(a1 + v14);
  if (v17 >= 3)
  {
    if (*v16 >= 3uLL)
    {
      *v15 = *v16;
      swift_release(v17);
      v27 = v15[1];
      v15[1] = v16[1];
      swift_release(v27);
      v28 = v15[2];
      v15[2] = v16[2];
      swift_release(v28);
      v29 = v15[3];
      v15[3] = v16[3];
      swift_release(v29);
      if (a1 != a2)
        goto LABEL_9;
LABEL_12:
      *(_BYTE *)(a1 + a3[12]) = *(_BYTE *)(a2 + a3[12]);
      goto LABEL_22;
    }
    sub_B414(a1 + v14, &qword_2624C0);
  }
  v18 = *((_OWORD *)v16 + 1);
  *(_OWORD *)v15 = *(_OWORD *)v16;
  *((_OWORD *)v15 + 1) = v18;
  if (a1 == a2)
    goto LABEL_12;
LABEL_9:
  v19 = a3[11];
  v20 = (_QWORD *)(a1 + v19);
  v21 = (_QWORD *)(a2 + v19);
  sub_224DC(a1 + v19, type metadata accessor for ButtonViewModel.Content);
  v22 = type metadata accessor for ButtonViewModel.Content(0);
  switch(swift_getEnumCaseMultiPayload(v21, v22))
  {
    case 0u:
      v23 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v23 - 8) + 32))(v20, v21, v23);
      v24 = v20;
      v25 = v22;
      v26 = 0;
      goto LABEL_18;
    case 2u:
      *(_OWORD *)v20 = *(_OWORD *)v21;
      v20[2] = v21[2];
      v30 = *(int *)(sub_5440(&qword_2621A8) + 64);
      v31 = (char *)v20 + v30;
      v32 = (char *)v21 + v30;
      v33 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v33 - 8) + 32))(v31, v32, v33);
      v24 = v20;
      v25 = v22;
      v26 = 2;
      goto LABEL_18;
    case 3u:
      *(_OWORD *)v20 = *(_OWORD *)v21;
      v34 = *(int *)(sub_5440(&qword_2621B0) + 48);
      v35 = (char *)v20 + v34;
      v36 = (char *)v21 + v34;
      v37 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v37 - 8) + 32))(v35, v36, v37);
      v24 = v20;
      v25 = v22;
      v26 = 3;
      goto LABEL_18;
    case 4u:
      v38 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v38 - 8) + 32))(v20, v21, v38);
      v39 = sub_5440(&qword_2621B8);
      *(_OWORD *)((char *)v20 + *(int *)(v39 + 48)) = *(_OWORD *)((char *)v21 + *(int *)(v39 + 48));
      v24 = v20;
      v25 = v22;
      v26 = 4;
      goto LABEL_18;
    case 5u:
      v40 = type metadata accessor for LocalizerRequest(0);
      v41 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v40 - 8) + 32);
      v41(v20, v21, v40);
      v42 = sub_5440(&qword_2621C0);
      v41((_QWORD *)((char *)v20 + *(int *)(v42 + 48)), (_QWORD *)((char *)v21 + *(int *)(v42 + 48)), v40);
      v24 = v20;
      v25 = v22;
      v26 = 5;
LABEL_18:
      swift_storeEnumTagMultiPayload(v24, v25, v26);
      break;
    default:
      memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
      break;
  }
  v43 = a3[13];
  *(_BYTE *)(a1 + a3[12]) = *(_BYTE *)(a2 + a3[12]);
  v44 = (void *)(a1 + v43);
  v45 = (const void *)(a2 + v43);
  sub_224DC(a1 + v43, type metadata accessor for ButtonViewModel.ActionKind);
  v46 = type metadata accessor for ButtonViewModel.ActionKind(0);
  if (swift_getEnumCaseMultiPayload(v45, v46) == 1)
  {
    v47 = type metadata accessor for URL(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v47 - 8) + 32))(v44, v45, v47);
    swift_storeEnumTagMultiPayload(v44, v46, 1);
  }
  else
  {
    memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
  }
LABEL_22:
  v48 = a3[14];
  v49 = (void *)(a1 + v48);
  v50 = (void *)(a2 + v48);
  v51 = type metadata accessor for LocalizerRequest(0);
  v52 = *(_QWORD *)(v51 - 8);
  v53 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v52 + 48);
  v54 = v53(v49, 1, v51);
  v55 = v53(v50, 1, v51);
  if (!v54)
  {
    if (!v55)
    {
      (*(void (**)(void *, void *, uint64_t))(v52 + 40))(v49, v50, v51);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v52 + 8))(v49, v51);
    goto LABEL_27;
  }
  if (v55)
  {
LABEL_27:
    v56 = sub_5440(&qword_25E0C8);
    memcpy(v49, v50, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v52 + 32))(v49, v50, v51);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v52 + 56))(v49, 0, 1, v51);
  return a1;
}

uint64_t getEnumTagSinglePayload for ButtonViewModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_13FCE4);
}

uint64_t sub_13FCE4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;

  v6 = sub_5440(&qword_25FC38);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = sub_5440(&qword_25F210);
  v10 = *(_QWORD *)(v9 - 8);
  if (*(_DWORD *)(v10 + 84) == (_DWORD)a2)
  {
    v11 = v9;
    v12 = a3[6];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1 + v12, a2, v11);
  }
  if ((_DWORD)a2 != 2147483644)
  {
    v15 = type metadata accessor for ButtonViewModel.Content(0);
    v10 = *(_QWORD *)(v15 - 8);
    if (*(_DWORD *)(v10 + 84) == (_DWORD)a2)
    {
      v11 = v15;
      v12 = a3[11];
    }
    else
    {
      v16 = type metadata accessor for ButtonViewModel.ActionKind(0);
      v10 = *(_QWORD *)(v16 - 8);
      if (*(_DWORD *)(v10 + 84) == (_DWORD)a2)
      {
        v11 = v16;
        v12 = a3[13];
      }
      else
      {
        v11 = sub_5440(&qword_25E0C8);
        v10 = *(_QWORD *)(v11 - 8);
        v12 = a3[14];
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1 + v12, a2, v11);
  }
  v13 = *(_QWORD *)(a1 + a3[10]);
  if (v13 >= 0xFFFFFFFF)
    LODWORD(v13) = -1;
  v14 = v13 - 3;
  if (v14 < 0)
    v14 = -1;
  return (v14 + 1);
}

uint64_t storeEnumTagSinglePayload for ButtonViewModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_13FE1C);
}

uint64_t sub_13FE1C(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v8 = sub_5440(&qword_25FC38);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    result = sub_5440(&qword_25F210);
    v14 = *(_QWORD *)(result - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = result;
      v15 = a4[6];
    }
    else
    {
      if (a3 == 2147483644)
      {
        *(_QWORD *)(a1 + a4[10]) = (a2 + 2);
        return result;
      }
      v16 = type metadata accessor for ButtonViewModel.Content(0);
      v14 = *(_QWORD *)(v16 - 8);
      if (*(_DWORD *)(v14 + 84) == a3)
      {
        v10 = v16;
        v15 = a4[11];
      }
      else
      {
        v17 = type metadata accessor for ButtonViewModel.ActionKind(0);
        v14 = *(_QWORD *)(v17 - 8);
        if (*(_DWORD *)(v14 + 84) == a3)
        {
          v10 = v17;
          v15 = a4[13];
        }
        else
        {
          v10 = sub_5440(&qword_25E0C8);
          v14 = *(_QWORD *)(v10 - 8);
          v15 = a4[14];
        }
      }
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_13FF38(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD v12[11];

  sub_3CAFC(319);
  if (v3 <= 0x3F)
  {
    v12[0] = *(_QWORD *)(v2 - 8) + 64;
    v12[1] = v12[0];
    sub_19B38(319, (unint64_t *)&qword_25F298, type metadata accessor for ColorConstants, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
    if (v5 <= 0x3F)
    {
      v12[2] = *(_QWORD *)(v4 - 8) + 64;
      v12[3] = &unk_1EFCA8;
      v12[4] = &unk_1EFCC0;
      v12[5] = &unk_1EFCC0;
      v12[6] = &unk_1EFCD8;
      v6 = type metadata accessor for ButtonViewModel.Content(319);
      if (v7 <= 0x3F)
      {
        v12[7] = *(_QWORD *)(v6 - 8) + 64;
        v12[8] = &unk_1EFCC0;
        v8 = type metadata accessor for ButtonViewModel.ActionKind(319);
        if (v9 <= 0x3F)
        {
          v12[9] = *(_QWORD *)(v8 - 8) + 64;
          sub_19B38(319, (unint64_t *)&qword_261BA0, (uint64_t (*)(uint64_t))&type metadata accessor for LocalizerRequest, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
          if (v11 <= 0x3F)
          {
            v12[10] = *(_QWORD *)(v10 - 8) + 64;
            swift_initStructMetadata(a1, 256, 11, v12, a1 + 16);
          }
        }
      }
    }
  }
}

uint64_t initializeBufferWithCopyOfBuffer for ButtonViewModel.ActionKind(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v11 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain(v11);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
    {
      v7 = type metadata accessor for URL(0);
      (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = a3;
      v10 = 1;
    }
    else
    {
      v12 = a2[3];
      if (v12)
      {
        v13 = a2[4];
        *(_QWORD *)(a1 + 24) = v12;
        *(_QWORD *)(a1 + 32) = v13;
        (**(void (***)(uint64_t, uint64_t *))(v12 - 8))(a1, a2);
      }
      else
      {
        v14 = *((_OWORD *)a2 + 1);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v14;
        *(_QWORD *)(a1 + 32) = a2[4];
      }
      v8 = a1;
      v9 = a3;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
  }
  return a1;
}

uint64_t destroy for ButtonViewModel.ActionKind(_QWORD *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;

  result = swift_getEnumCaseMultiPayload(a1, a2);
  if ((_DWORD)result == 1)
  {
    v4 = type metadata accessor for URL(0);
    return (*(uint64_t (**)(_QWORD *, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  }
  else if (a1[3])
  {
    return _s7BooksUI13AnyPagedFrameVwxx_0(a1);
  }
  return result;
}

uint64_t initializeWithCopy for ButtonViewModel.ActionKind(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;

  if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
  {
    v6 = type metadata accessor for URL(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
    v7 = a1;
    v8 = a3;
    v9 = 1;
  }
  else
  {
    v10 = *(_QWORD *)(a2 + 24);
    if (v10)
    {
      v11 = *(_QWORD *)(a2 + 32);
      *(_QWORD *)(a1 + 24) = v10;
      *(_QWORD *)(a1 + 32) = v11;
      (**(void (***)(uint64_t, uint64_t))(v10 - 8))(a1, a2);
    }
    else
    {
      v12 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v12;
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    }
    v7 = a1;
    v8 = a3;
    v9 = 0;
  }
  swift_storeEnumTagMultiPayload(v7, v8, v9);
  return a1;
}

uint64_t assignWithCopy for ButtonViewModel.ActionKind(uint64_t a1, __int128 *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;

  if ((__int128 *)a1 != a2)
  {
    sub_224DC(a1, type metadata accessor for ButtonViewModel.ActionKind);
    if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
    {
      v6 = type metadata accessor for URL(0);
      (*(void (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
      v7 = a1;
      v8 = a3;
      v9 = 1;
    }
    else
    {
      v10 = *((_QWORD *)a2 + 3);
      if (v10)
      {
        *(_QWORD *)(a1 + 24) = v10;
        *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
        (**(void (***)(uint64_t, __int128 *))(v10 - 8))(a1, a2);
      }
      else
      {
        v11 = *a2;
        v12 = a2[1];
        *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
        *(_OWORD *)a1 = v11;
        *(_OWORD *)(a1 + 16) = v12;
      }
      v7 = a1;
      v8 = a3;
      v9 = 0;
    }
    swift_storeEnumTagMultiPayload(v7, v8, v9);
  }
  return a1;
}

void *initializeWithTake for ButtonViewModel.ActionKind(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
  {
    v6 = type metadata accessor for URL(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload(a1, a3, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

void *assignWithTake for ButtonViewModel.ActionKind(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (a1 != a2)
  {
    sub_224DC((uint64_t)a1, type metadata accessor for ButtonViewModel.ActionKind);
    if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
    {
      v6 = type metadata accessor for URL(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload(a1, a3, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_140470(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = "(";
  result = type metadata accessor for URL(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    swift_initEnumMetadataMultiPayload(a1, 256, 2, v4);
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for ButtonViewModel.Shape()
{
  return &type metadata for ButtonViewModel.Shape;
}

uint64_t getEnumTagSinglePayload for ButtonViewModel.Size(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v6;
  BOOL v7;
  unsigned int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
  {
    v6 = *a1;
    v7 = v6 >= 2;
    v8 = (v6 + 2147483646) & 0x7FFFFFFF;
    if (!v7)
      v8 = -1;
    if (v8 + 1 >= 2)
      return v8;
    else
      return 0;
  }
  else
  {
    v2 = a2 + 2;
    if (a2 + 2 >= 0xFFFF00)
      v3 = 4;
    else
      v3 = 2;
    if (v2 >> 8 < 0xFF)
      v3 = 1;
    if (v2 >= 0x100)
      v4 = v3;
    else
      v4 = 0;
    return ((uint64_t (*)(void))((char *)&loc_140544 + 4 * byte_1EFAAC[v4]))();
  }
}

uint64_t storeEnumTagSinglePayload for ButtonViewModel.Size(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  unsigned int v3;
  int v4;
  uint64_t v5;

  v3 = a3 + 2;
  if (a3 + 2 >= 0xFFFF00)
    v4 = 4;
  else
    v4 = 2;
  if (v3 >> 8 < 0xFF)
    v4 = 1;
  if (v3 >= 0x100)
    LODWORD(v5) = v4;
  else
    LODWORD(v5) = 0;
  if (a3 >= 0xFE)
    v5 = v5;
  else
    v5 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1405FC + 4 * byte_1EFAB6[v5]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_140630 + 4 * byte_1EFAB1[v5]))();
}

uint64_t sub_140630(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_140638(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x140640);
  return result;
}

uint64_t sub_14064C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x140654);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_140658(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_140660(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_14066C(unsigned __int8 *a1)
{
  unsigned int v1;
  BOOL v2;
  int v3;

  v1 = *a1;
  v2 = v1 >= 2;
  v3 = (v1 + 2147483646) & 0x7FFFFFFF;
  if (v2)
    return (v3 + 1);
  else
    return 0;
}

_BYTE *sub_140688(_BYTE *result, int a2)
{
  if (a2)
    *result = a2 + 1;
  return result;
}

ValueMetadata *type metadata accessor for ButtonViewModel.Size()
{
  return &type metadata for ButtonViewModel.Size;
}

uint64_t _s7BooksUI15ButtonViewModelV5ShapeOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1406FC + 4 * byte_1EFAC0[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_140730 + 4 * byte_1EFABB[v4]))();
}

uint64_t sub_140730(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_140738(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x140740);
  return result;
}

uint64_t sub_14074C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x140754);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_140758(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_140760(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ButtonViewModel.Kind()
{
  return &type metadata for ButtonViewModel.Kind;
}

unint64_t destroy for ButtonViewModel.Style(unint64_t *a1)
{
  unint64_t result;

  result = *a1;
  if (result >= 0xFFFFFFFF)
  {
    swift_release(result);
    swift_release(a1[1]);
    swift_release(a1[2]);
    return swift_release(a1[3]);
  }
  return result;
}

uint64_t initializeWithCopy for ButtonViewModel.Style(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;

  v3 = *a2;
  if ((unint64_t)*a2 < 0xFFFFFFFF)
  {
    v7 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v7;
  }
  else
  {
    v4 = a2[1];
    v5 = a2[2];
    *(_QWORD *)a1 = v3;
    *(_QWORD *)(a1 + 8) = v4;
    v6 = a2[3];
    *(_QWORD *)(a1 + 16) = v5;
    *(_QWORD *)(a1 + 24) = v6;
    swift_retain(v3);
    swift_retain(v4);
    swift_retain(v5);
    swift_retain(v6);
  }
  return a1;
}

unint64_t *assignWithCopy for ButtonViewModel.Style(unint64_t *a1, unint64_t *a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  __int128 v15;

  v4 = *a1;
  v5 = *a2;
  if (v4 < 0xFFFFFFFF)
  {
    if (v5 >= 0xFFFFFFFF)
    {
      *a1 = v5;
      v12 = a2[1];
      a1[1] = v12;
      v13 = a2[2];
      a1[2] = v13;
      v14 = a2[3];
      a1[3] = v14;
      swift_retain(v5);
      swift_retain(v12);
      swift_retain(v13);
      swift_retain(v14);
      return a1;
    }
LABEL_7:
    v15 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *((_OWORD *)a1 + 1) = v15;
    return a1;
  }
  if (v5 < 0xFFFFFFFF)
  {
    swift_release(v4);
    swift_release(a1[1]);
    swift_release(a1[2]);
    swift_release(a1[3]);
    goto LABEL_7;
  }
  *a1 = v5;
  swift_retain(v5);
  swift_release(v4);
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_retain(v6);
  swift_release(v7);
  v8 = a2[2];
  v9 = a1[2];
  a1[2] = v8;
  swift_retain(v8);
  swift_release(v9);
  v10 = a2[3];
  v11 = a1[3];
  a1[3] = v10;
  swift_retain(v10);
  swift_release(v11);
  return a1;
}

_QWORD *assignWithTake for ButtonViewModel.Style(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;

  v4 = *a1;
  if (v4 < 0xFFFFFFFF)
    goto LABEL_5;
  if (*(_QWORD *)a2 < 0xFFFFFFFFuLL)
  {
    swift_release(v4);
    swift_release(a1[1]);
    swift_release(a1[2]);
    swift_release(a1[3]);
LABEL_5:
    v7 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *((_OWORD *)a1 + 1) = v7;
    return a1;
  }
  *a1 = *(_QWORD *)a2;
  swift_release(v4);
  swift_release(a1[1]);
  v5 = a1[2];
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 8);
  swift_release(v5);
  v6 = a1[3];
  a1[3] = *(_QWORD *)(a2 + 24);
  swift_release(v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for ButtonViewModel.Style(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFD && *((_BYTE *)a1 + 32))
    return (*(_DWORD *)a1 + 2147483645);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 + 1;
  v5 = v3 - 2;
  if (v4 >= 4)
    return v5;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for ButtonViewModel.Style(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFFD)
  {
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 2147483645;
    if (a3 >= 0x7FFFFFFD)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFD)
      *(_BYTE *)(result + 32) = 0;
    if (a2)
      *(_QWORD *)result = a2 + 2;
  }
  return result;
}

uint64_t sub_140AA0(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

_QWORD *sub_140AB8(_QWORD *result, int a2)
{
  uint64_t v2;

  if (a2 < 0)
  {
    v2 = a2 ^ 0x80000000;
    result[2] = 0;
    result[3] = 0;
    result[1] = 0;
  }
  else
  {
    if (!a2)
      return result;
    v2 = (a2 - 1);
  }
  *result = v2;
  return result;
}

ValueMetadata *type metadata accessor for ButtonViewModel.Style()
{
  return &type metadata for ButtonViewModel.Style;
}

uint64_t *initializeBufferWithCopyOfBuffer for ButtonViewModel.Content(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v31;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain(v9);
  }
  else
  {
    switch(swift_getEnumCaseMultiPayload(a2, a3))
    {
      case 0u:
        v8 = type metadata accessor for LocalizerRequest(0);
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
        swift_storeEnumTagMultiPayload(a1, a3, 0);
        break;
      case 1u:
        v11 = a2[1];
        *a1 = *a2;
        a1[1] = v11;
        swift_bridgeObjectRetain(v11);
        swift_storeEnumTagMultiPayload(a1, a3, 1);
        break;
      case 2u:
        v12 = a2[1];
        *a1 = *a2;
        a1[1] = v12;
        v13 = (void *)a2[2];
        a1[2] = (uint64_t)v13;
        swift_bridgeObjectRetain(v12);
        v14 = v13;
        v15 = *(int *)(sub_5440(&qword_2621A8) + 64);
        v16 = (char *)a1 + v15;
        v17 = (char *)a2 + v15;
        v18 = type metadata accessor for LocalizerRequest(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
        swift_storeEnumTagMultiPayload(a1, a3, 2);
        break;
      case 3u:
        v19 = a2[1];
        *a1 = *a2;
        a1[1] = v19;
        swift_bridgeObjectRetain(v19);
        v20 = *(int *)(sub_5440(&qword_2621B0) + 48);
        v21 = (char *)a1 + v20;
        v22 = (char *)a2 + v20;
        v23 = type metadata accessor for LocalizerRequest(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v21, v22, v23);
        swift_storeEnumTagMultiPayload(a1, a3, 3);
        break;
      case 4u:
        v24 = type metadata accessor for LocalizerRequest(0);
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v24 - 8) + 16))(a1, a2, v24);
        v25 = *(int *)(sub_5440(&qword_2621B8) + 48);
        v26 = (uint64_t *)((char *)a1 + v25);
        v27 = (uint64_t *)((char *)a2 + v25);
        v28 = v27[1];
        *v26 = *v27;
        v26[1] = v28;
        swift_bridgeObjectRetain(v28);
        swift_storeEnumTagMultiPayload(a1, a3, 4);
        break;
      case 5u:
        v29 = type metadata accessor for LocalizerRequest(0);
        v30 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v29 - 8) + 16);
        v30(a1, a2, v29);
        v31 = sub_5440(&qword_2621C0);
        v30((uint64_t *)((char *)a1 + *(int *)(v31 + 48)), (uint64_t *)((char *)a2 + *(int *)(v31 + 48)), v29);
        swift_storeEnumTagMultiPayload(a1, a3, 5);
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(v5 + 64));
        break;
    }
  }
  return a1;
}

uint64_t destroy for ButtonViewModel.Content(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);

  v2 = a1;
  result = swift_getEnumCaseMultiPayload(a1, a2);
  switch((int)result)
  {
    case 0:
      goto LABEL_6;
    case 1:
      v4 = *(_QWORD *)(v2 + 8);
      goto LABEL_8;
    case 2:
      swift_bridgeObjectRelease(*(_QWORD *)(v2 + 8));

      v5 = *(int *)(sub_5440(&qword_2621A8) + 64);
      goto LABEL_5;
    case 3:
      swift_bridgeObjectRelease(*(_QWORD *)(v2 + 8));
      v5 = *(int *)(sub_5440(&qword_2621B0) + 48);
LABEL_5:
      v2 += v5;
LABEL_6:
      v6 = type metadata accessor for LocalizerRequest(0);
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v2, v6);
      break;
    case 4:
      v7 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v2, v7);
      v4 = *(_QWORD *)(v2 + *(int *)(sub_5440(&qword_2621B8) + 48) + 8);
LABEL_8:
      result = swift_bridgeObjectRelease(v4);
      break;
    case 5:
      v8 = type metadata accessor for LocalizerRequest(0);
      v10 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8);
      v10(v2, v8);
      v9 = v2 + *(int *)(sub_5440(&qword_2621C0) + 48);
      result = ((uint64_t (*)(uint64_t, uint64_t))v10)(v9, v8);
      break;
    default:
      return result;
  }
  return result;
}

_QWORD *initializeWithCopy for ButtonViewModel.Content(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  id v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(_QWORD *, _QWORD *, uint64_t);
  uint64_t v30;

  switch(swift_getEnumCaseMultiPayload(a2, a3))
  {
    case 0u:
      v6 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
      v7 = a1;
      v8 = a3;
      v9 = 0;
      goto LABEL_9;
    case 1u:
      v10 = a2[1];
      *a1 = *a2;
      a1[1] = v10;
      swift_bridgeObjectRetain(v10);
      v7 = a1;
      v8 = a3;
      v9 = 1;
      goto LABEL_9;
    case 2u:
      v11 = a2[1];
      *a1 = *a2;
      a1[1] = v11;
      v12 = (void *)a2[2];
      a1[2] = v12;
      swift_bridgeObjectRetain(v11);
      v13 = v12;
      v14 = *(int *)(sub_5440(&qword_2621A8) + 64);
      v15 = (char *)a1 + v14;
      v16 = (char *)a2 + v14;
      v17 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v15, v16, v17);
      v7 = a1;
      v8 = a3;
      v9 = 2;
      goto LABEL_9;
    case 3u:
      v18 = a2[1];
      *a1 = *a2;
      a1[1] = v18;
      swift_bridgeObjectRetain(v18);
      v19 = *(int *)(sub_5440(&qword_2621B0) + 48);
      v20 = (char *)a1 + v19;
      v21 = (char *)a2 + v19;
      v22 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v20, v21, v22);
      v7 = a1;
      v8 = a3;
      v9 = 3;
      goto LABEL_9;
    case 4u:
      v23 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(a1, a2, v23);
      v24 = *(int *)(sub_5440(&qword_2621B8) + 48);
      v25 = (_QWORD *)((char *)a1 + v24);
      v26 = (_QWORD *)((char *)a2 + v24);
      v27 = v26[1];
      *v25 = *v26;
      v25[1] = v27;
      swift_bridgeObjectRetain(v27);
      v7 = a1;
      v8 = a3;
      v9 = 4;
      goto LABEL_9;
    case 5u:
      v28 = type metadata accessor for LocalizerRequest(0);
      v29 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v28 - 8) + 16);
      v29(a1, a2, v28);
      v30 = sub_5440(&qword_2621C0);
      v29((_QWORD *)((char *)a1 + *(int *)(v30 + 48)), (_QWORD *)((char *)a2 + *(int *)(v30 + 48)), v28);
      v7 = a1;
      v8 = a3;
      v9 = 5;
LABEL_9:
      swift_storeEnumTagMultiPayload(v7, v8, v9);
      break;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

_QWORD *assignWithCopy for ButtonViewModel.Content(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(_QWORD *, _QWORD *, uint64_t);
  uint64_t v27;

  if (a1 != a2)
  {
    sub_224DC((uint64_t)a1, type metadata accessor for ButtonViewModel.Content);
    switch(swift_getEnumCaseMultiPayload(a2, a3))
    {
      case 0u:
        v6 = type metadata accessor for LocalizerRequest(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
        swift_storeEnumTagMultiPayload(a1, a3, 0);
        break;
      case 1u:
        *a1 = *a2;
        v7 = a2[1];
        a1[1] = v7;
        swift_bridgeObjectRetain(v7);
        swift_storeEnumTagMultiPayload(a1, a3, 1);
        break;
      case 2u:
        *a1 = *a2;
        v8 = a2[1];
        a1[1] = v8;
        v9 = (void *)a2[2];
        a1[2] = v9;
        swift_bridgeObjectRetain(v8);
        v10 = v9;
        v11 = *(int *)(sub_5440(&qword_2621A8) + 64);
        v12 = (char *)a1 + v11;
        v13 = (char *)a2 + v11;
        v14 = type metadata accessor for LocalizerRequest(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
        swift_storeEnumTagMultiPayload(a1, a3, 2);
        break;
      case 3u:
        *a1 = *a2;
        v15 = a2[1];
        a1[1] = v15;
        swift_bridgeObjectRetain(v15);
        v16 = *(int *)(sub_5440(&qword_2621B0) + 48);
        v17 = (char *)a1 + v16;
        v18 = (char *)a2 + v16;
        v19 = type metadata accessor for LocalizerRequest(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v17, v18, v19);
        swift_storeEnumTagMultiPayload(a1, a3, 3);
        break;
      case 4u:
        v20 = type metadata accessor for LocalizerRequest(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(a1, a2, v20);
        v21 = *(int *)(sub_5440(&qword_2621B8) + 48);
        v22 = (_QWORD *)((char *)a1 + v21);
        v23 = (_QWORD *)((char *)a2 + v21);
        *v22 = *v23;
        v24 = v23[1];
        v22[1] = v24;
        swift_bridgeObjectRetain(v24);
        swift_storeEnumTagMultiPayload(a1, a3, 4);
        break;
      case 5u:
        v25 = type metadata accessor for LocalizerRequest(0);
        v26 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v25 - 8) + 16);
        v26(a1, a2, v25);
        v27 = sub_5440(&qword_2621C0);
        v26((_QWORD *)((char *)a1 + *(int *)(v27 + 48)), (_QWORD *)((char *)a2 + *(int *)(v27 + 48)), v25);
        swift_storeEnumTagMultiPayload(a1, a3, 5);
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

_QWORD *initializeWithTake for ButtonViewModel.Content(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(_QWORD *, _QWORD *, uint64_t);
  uint64_t v22;

  switch(swift_getEnumCaseMultiPayload(a2, a3))
  {
    case 0u:
      v6 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      v7 = a1;
      v8 = a3;
      v9 = 0;
      goto LABEL_8;
    case 2u:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      a1[2] = a2[2];
      v10 = *(int *)(sub_5440(&qword_2621A8) + 64);
      v11 = (char *)a1 + v10;
      v12 = (char *)a2 + v10;
      v13 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v11, v12, v13);
      v7 = a1;
      v8 = a3;
      v9 = 2;
      goto LABEL_8;
    case 3u:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      v14 = *(int *)(sub_5440(&qword_2621B0) + 48);
      v15 = (char *)a1 + v14;
      v16 = (char *)a2 + v14;
      v17 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v15, v16, v17);
      v7 = a1;
      v8 = a3;
      v9 = 3;
      goto LABEL_8;
    case 4u:
      v18 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(a1, a2, v18);
      v19 = sub_5440(&qword_2621B8);
      *(_OWORD *)((char *)a1 + *(int *)(v19 + 48)) = *(_OWORD *)((char *)a2 + *(int *)(v19 + 48));
      v7 = a1;
      v8 = a3;
      v9 = 4;
      goto LABEL_8;
    case 5u:
      v20 = type metadata accessor for LocalizerRequest(0);
      v21 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v20 - 8) + 32);
      v21(a1, a2, v20);
      v22 = sub_5440(&qword_2621C0);
      v21((_QWORD *)((char *)a1 + *(int *)(v22 + 48)), (_QWORD *)((char *)a2 + *(int *)(v22 + 48)), v20);
      v7 = a1;
      v8 = a3;
      v9 = 5;
LABEL_8:
      swift_storeEnumTagMultiPayload(v7, v8, v9);
      break;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

_QWORD *assignWithTake for ButtonViewModel.Content(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(_QWORD *, _QWORD *, uint64_t);
  uint64_t v22;

  if (a1 != a2)
  {
    sub_224DC((uint64_t)a1, type metadata accessor for ButtonViewModel.Content);
    switch(swift_getEnumCaseMultiPayload(a2, a3))
    {
      case 0u:
        v6 = type metadata accessor for LocalizerRequest(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
        v7 = a1;
        v8 = a3;
        v9 = 0;
        goto LABEL_9;
      case 2u:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        a1[2] = a2[2];
        v10 = *(int *)(sub_5440(&qword_2621A8) + 64);
        v11 = (char *)a1 + v10;
        v12 = (char *)a2 + v10;
        v13 = type metadata accessor for LocalizerRequest(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v11, v12, v13);
        v7 = a1;
        v8 = a3;
        v9 = 2;
        goto LABEL_9;
      case 3u:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        v14 = *(int *)(sub_5440(&qword_2621B0) + 48);
        v15 = (char *)a1 + v14;
        v16 = (char *)a2 + v14;
        v17 = type metadata accessor for LocalizerRequest(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v15, v16, v17);
        v7 = a1;
        v8 = a3;
        v9 = 3;
        goto LABEL_9;
      case 4u:
        v18 = type metadata accessor for LocalizerRequest(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(a1, a2, v18);
        v19 = sub_5440(&qword_2621B8);
        *(_OWORD *)((char *)a1 + *(int *)(v19 + 48)) = *(_OWORD *)((char *)a2 + *(int *)(v19 + 48));
        v7 = a1;
        v8 = a3;
        v9 = 4;
        goto LABEL_9;
      case 5u:
        v20 = type metadata accessor for LocalizerRequest(0);
        v21 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v20 - 8) + 32);
        v21(a1, a2, v20);
        v22 = sub_5440(&qword_2621C0);
        v21((_QWORD *)((char *)a1 + *(int *)(v22 + 48)), (_QWORD *)((char *)a2 + *(int *)(v22 + 48)), v20);
        v7 = a1;
        v8 = a3;
        v9 = 5;
LABEL_9:
        swift_storeEnumTagMultiPayload(v7, v8, v9);
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

uint64_t sub_141734(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;
  _BYTE v5[32];
  _BYTE v6[32];
  _BYTE v7[32];
  _BYTE v8[32];
  _QWORD v9[7];

  result = type metadata accessor for LocalizerRequest(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    v9[0] = v4;
    v9[1] = &unk_1EFD70;
    swift_getTupleTypeLayout3(v8, &unk_1EFD70, (char *)&value witness table for Builtin.UnknownObject + 64, v4);
    v9[2] = v8;
    swift_getTupleTypeLayout2(v7, &unk_1EFD70, v4);
    v9[3] = v7;
    swift_getTupleTypeLayout2(v6, v4, &unk_1EFD70);
    v9[4] = v6;
    swift_getTupleTypeLayout2(v5, v4, v4);
    v9[5] = v5;
    v9[6] = (char *)&value witness table for Builtin.Int64 + 64;
    swift_initEnumMetadataMultiPayload(a1, 256, 7, v9);
    return 0;
  }
  return result;
}

uint64_t destroy for ButtonTheme(_QWORD *a1)
{
  swift_release(*a1);
  swift_release(a1[1]);
  swift_release(a1[2]);
  return swift_release(a1[3]);
}

uint64_t *initializeWithCopy for ButtonTheme(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *a2;
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[2];
  v6 = a2[3];
  a1[2] = v5;
  a1[3] = v6;
  swift_retain(v3);
  swift_retain(v4);
  swift_retain(v5);
  swift_retain(v6);
  return a1;
}

uint64_t *assignWithCopy for ButtonTheme(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_retain(v4);
  swift_release(v5);
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_retain(v6);
  swift_release(v7);
  v8 = a2[2];
  v9 = a1[2];
  a1[2] = v8;
  swift_retain(v8);
  swift_release(v9);
  v10 = a2[3];
  v11 = a1[3];
  a1[3] = v10;
  swift_retain(v10);
  swift_release(v11);
  return a1;
}

_QWORD *assignWithTake for ButtonTheme(_QWORD *a1, _OWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_release(*a1);
  v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  swift_release(v4);
  swift_release(a1[2]);
  v5 = a1[3];
  *((_OWORD *)a1 + 1) = a2[1];
  swift_release(v5);
  return a1;
}

ValueMetadata *type metadata accessor for ButtonTheme()
{
  return &type metadata for ButtonTheme;
}

uint64_t ListItemMetadataEditionsDescriptor.init<>(authorName:assetInfo:additionalDescriptors:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v18;

  v10 = type metadata accessor for ListItemEditionsDescriptorExternals(0);
  __chkstk_darwin(v10);
  v12 = (uint64_t *)((char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  a5[5] = a1;
  a5[6] = a2;
  sub_AC68(a3, (uint64_t)a5);
  a5[7] = a4;
  v13 = (uint64_t)a5 + *(int *)(sub_5440(&qword_264108) + 44);
  *v12 = swift_getKeyPath(&unk_1EFDD8);
  v14 = sub_5440(&qword_25F200);
  swift_storeEnumTagMultiPayload(v12, v14, 0);
  v15 = (_QWORD *)((char *)v12 + *(int *)(v10 + 20));
  *v15 = swift_getKeyPath(&unk_1EFE10);
  v16 = sub_5440(&qword_25FAD0);
  swift_storeEnumTagMultiPayload(v15, v16, 0);
  return sub_21C88((uint64_t)v12, v13, type metadata accessor for ListItemEditionsDescriptorExternals);
}

uint64_t ListItemEditionsDescriptorExternals.fonts.getter@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for ListItemEditionsDescriptorExternals(0);
  return sub_30978(a1);
}

uint64_t ListItemEditionsDescriptorExternals.init()@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = swift_getKeyPath(&unk_1EFDD8);
  v2 = sub_5440(&qword_25F200);
  swift_storeEnumTagMultiPayload(a1, v2, 0);
  v3 = (_QWORD *)((char *)a1 + *(int *)(type metadata accessor for ListItemEditionsDescriptorExternals(0) + 20));
  *v3 = swift_getKeyPath(&unk_1EFE10);
  v4 = sub_5440(&qword_25FAD0);
  return swift_storeEnumTagMultiPayload(v3, v4, 0);
}

uint64_t type metadata accessor for ListItemEditionsDescriptorExternals(uint64_t a1)
{
  uint64_t result;

  result = qword_267840;
  if (!qword_267840)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ListItemEditionsDescriptorExternals);
  return result;
}

uint64_t sub_141BC8@<X0>(uint64_t a1@<X8>)
{
  return sub_30978(a1);
}

uint64_t ListItemMetadataEditionsDescriptor.externals.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2 + *(int *)(a1 + 44));
}

uint64_t ListItemMetadataEditionsDescriptor.content(localizer:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *KeyPath;
  uint64_t v15;
  _QWORD v17[2];

  v7 = type metadata accessor for SizeConstants.Spacing(0);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = static HorizontalAlignment.leading.getter(v8);
  v13 = *(_QWORD *)(a2 + 24);
  v17[0] = *(_QWORD *)(a2 + 16);
  v12 = v17[0];
  v17[1] = v13;
  KeyPath = (_QWORD *)swift_getKeyPath(&unk_1EFE48);
  swift_getWitnessTable(&protocol conformance descriptor for ListItemMetadataEditionsDescriptor<A>, a2);
  ViewModelWithExternals.subscript.getter(KeyPath);
  swift_release(KeyPath);
  sub_224DC((uint64_t)v10, type metadata accessor for SizeConstants.Spacing);
  *(_QWORD *)a3 = v11;
  *(_QWORD *)(a3 + 8) = 0x4000000000000000;
  *(_BYTE *)(a3 + 16) = 0;
  v15 = sub_5440(&qword_267750);
  return sub_141D68(v3, a1, v12, v13, a3 + *(int *)(v15 + 44));
}

uint64_t sub_141D20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(a3 + a2 - 8) + 16))(*(_QWORD *)(a3 + a2 - 16));
}

uint64_t sub_141D50()
{
  return 16;
}

__n128 sub_141D5C(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_141D68@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *KeyPath;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __n128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  char v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  id v72;
  NSString v73;
  unsigned __int8 v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  __n128 v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  void (*v101)(char *, char *, uint64_t);
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  void (*v106)(char *, uint64_t);
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  __int128 v132[2];
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  uint64_t v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  uint64_t v144;

  v111 = a2;
  v125 = a5;
  v131 = a4;
  v7 = type metadata accessor for ListItemMetadataEditionsDescriptor(0, a3, a4, a4);
  v121 = *(_QWORD *)(v7 - 8);
  v119 = *(_QWORD *)(v121 + 64);
  __chkstk_darwin(v7);
  v120 = (char *)&v108 - v8;
  v129 = sub_5440(&qword_2679A0);
  v127 = *(_QWORD *)(v129 - 8);
  v9 = __chkstk_darwin(v129);
  v128 = (char *)&v108 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v126 = (char *)&v108 - v11;
  v12 = type metadata accessor for DefaultBlendModeModifier(0);
  v13 = __chkstk_darwin(v12);
  v112 = (uint64_t *)((char *)&v108 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v13);
  v113 = (uint64_t)&v108 - v15;
  v118 = type metadata accessor for Font.Leading(0);
  v16 = *(_QWORD *)(v118 - 8);
  __chkstk_darwin(v118);
  v18 = (char *)&v108 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for FontConstants.ListItem(0);
  __chkstk_darwin(v19);
  v21 = (char *)&v108 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v114 = sub_5440(&qword_261600);
  v115 = *(_QWORD *)(v114 - 8);
  __chkstk_darwin(v114);
  v23 = (char *)&v108 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = sub_5440(&qword_2615F8);
  v25 = __chkstk_darwin(v24);
  v123 = (uint64_t)&v108 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __chkstk_darwin(v25);
  v29 = (char *)&v108 - v28;
  v30 = a1;
  v31 = *(_QWORD *)(a1 + 48);
  v130 = (char *)&v108 - v28;
  v124 = a3;
  v122 = v7;
  v117 = v16;
  v116 = v21;
  if (v31)
  {
    v109 = *(_QWORD *)(v30 + 40);
    v110 = v30;
    __chkstk_darwin(v27);
    KeyPath = (_QWORD *)swift_getKeyPath(&unk_1F03B0);
    swift_bridgeObjectRetain(v31);
    swift_getWitnessTable(&protocol conformance descriptor for ListItemMetadataEditionsDescriptor<A>, v7);
    ViewModelWithExternals.subscript.getter(KeyPath);
    swift_release(KeyPath);
    v34 = static Font.footnote.getter(v33);
    v35 = v118;
    (*(void (**)(char *, _QWORD, uint64_t))(v16 + 104))(v18, enum case for Font.Leading.tight(_:), v118);
    v36 = Font.leading(_:)(v18, v34);
    v37 = swift_release(v34);
    (*(void (**)(char *, uint64_t, __n128))(v16 + 8))(v18, v35, v37);
    sub_224DC((uint64_t)v21, type metadata accessor for FontConstants.ListItem);
    v38 = Text.font(_:)(v36, v109, v31, 0, _swiftEmptyArrayStorage);
    v40 = v39;
    v42 = v41;
    v44 = v43;
    swift_release(v36);
    v45 = swift_bridgeObjectRelease(v31);
    v46 = v42 & 1;
    LODWORD(v139) = static HierarchicalShapeStyle.secondary.getter(v45);
    v47 = Text.foregroundStyle<A>(_:)(&v139, v38, v40, v42 & 1, v44, &type metadata for HierarchicalShapeStyle, &protocol witness table for HierarchicalShapeStyle);
    v49 = v48;
    v51 = v50;
    v52 = v18;
    v54 = v53;
    sub_2B574(v38, v40, v46);
    swift_bridgeObjectRelease(v44);
    v55 = swift_getKeyPath(&unk_1F0410);
    v56 = swift_getKeyPath(&unk_1F0440);
    v57 = v112;
    *v112 = v56;
    v58 = sub_5440(&qword_25F208);
    swift_storeEnumTagMultiPayload(v57, v58, 0);
    v59 = (uint64_t)v57;
    v60 = v113;
    sub_21C88(v59, v113, type metadata accessor for DefaultBlendModeModifier);
    v61 = v114;
    sub_4E1D0(v60, (uint64_t)&v23[*(int *)(v114 + 36)]);
    *(_QWORD *)v23 = v47;
    *((_QWORD *)v23 + 1) = v49;
    v62 = v51 & 1;
    v29 = v130;
    v23[16] = v62;
    *((_QWORD *)v23 + 3) = v54;
    *((_QWORD *)v23 + 4) = v55;
    v18 = v52;
    v30 = v110;
    *((_QWORD *)v23 + 5) = 2;
    v23[48] = 0;
    sub_224DC(v60, type metadata accessor for DefaultBlendModeModifier);
    sub_167A4((uint64_t)v23, (uint64_t)v29, &qword_261600);
    v63 = 0;
    v64 = v61;
  }
  else
  {
    v63 = 1;
    v64 = v114;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v115 + 56))(v29, v63, 1, v64);
  v65 = sub_14275C();
  v67 = v117;
  v68 = (uint64_t)v116;
  if ((v69 & 1) != 0)
    goto LABEL_10;
  v70 = v65;
  v71 = v66;
  if (qword_25DC10 != -1)
    swift_once(&qword_25DC10, sub_AD7D8);
  if (byte_2632E8 == 1
    && (v72 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults"),
        v73 = String._bridgeToObjectiveC()(),
        v74 = objc_msgSend(v72, "integerForKey:", v73),
        v72,
        v73,
        (v74 & 0x10) != 0))
  {
LABEL_10:
    v144 = 0;
    v142 = 0u;
    v143 = 0u;
    v140 = 0u;
    v141 = 0u;
    v139 = 0u;
    v76 = v124;
    v78 = v122;
  }
  else
  {
    sub_BD00(v111, (uint64_t)v132);
    *(_QWORD *)&v133 = swift_getKeyPath(&unk_1F0388);
    BYTE8(v133) = 0;
    *(_QWORD *)&v134 = v70;
    *((_QWORD *)&v134 + 1) = v71;
    v75 = sub_AC68(v132, (uint64_t)&v135);
    v141 = v135;
    v142 = v136;
    *(_QWORD *)&v143 = v137;
    v139 = v133;
    v140 = v134;
    __chkstk_darwin(v75);
    v76 = v124;
    v77 = (_QWORD *)swift_getKeyPath(&unk_1F03B0);
    v78 = v122;
    swift_getWitnessTable(&protocol conformance descriptor for ListItemMetadataEditionsDescriptor<A>, v122);
    ViewModelWithExternals.subscript.getter(v77);
    swift_release(v77);
    v80 = static Font.caption2.getter(v79);
    v81 = v118;
    (*(void (**)(char *, _QWORD, uint64_t))(v67 + 104))(v18, enum case for Font.Leading.tight(_:), v118);
    v82 = Font.leading(_:)(v18, v80);
    v83 = swift_release(v80);
    (*(void (**)(char *, uint64_t, __n128))(v67 + 8))(v18, v81, v83);
    sub_224DC(v68, type metadata accessor for FontConstants.ListItem);
    v84 = swift_getKeyPath(&unk_1F03E0);
    sub_34AAC((uint64_t)&v139, (uint64_t)&v133);
    *((_QWORD *)&v137 + 1) = v84;
    v138 = v82;
    sub_34AE8((uint64_t)&v139);
    v141 = v135;
    v142 = v136;
    v143 = v137;
    v144 = v138;
    v139 = v133;
    v140 = v134;
  }
  *(_QWORD *)&v133 = *(_QWORD *)(v30 + 56);
  v85 = v133;
  v86 = v121;
  v87 = v120;
  (*(void (**)(char *, uint64_t, uint64_t))(v121 + 16))(v120, v30, v78);
  v88 = *(unsigned __int8 *)(v86 + 80);
  v89 = (v88 + 32) & ~v88;
  v90 = swift_allocObject(&unk_2550F8, v89 + v119, v88 | 7);
  v91 = v131;
  *(_QWORD *)(v90 + 16) = v76;
  *(_QWORD *)(v90 + 24) = v91;
  (*(void (**)(uint64_t, char *, uint64_t))(v86 + 32))(v90 + v89, v87, v78);
  swift_bridgeObjectRetain(v85);
  v92 = sub_5440(&qword_2640F8);
  v93 = sub_5440(&qword_2679A8);
  v94 = sub_7FD8(&qword_2679B0, &qword_2640F8, (uint64_t)&protocol conformance descriptor for [A]);
  v95 = sub_1456E8();
  v96 = sub_145790();
  v97 = v126;
  ForEach<>.init(_:content:)(&v133, sub_145680, v90, v92, &type metadata for String, v93, v94, v95, v96);
  v98 = (uint64_t)v130;
  v99 = v123;
  sub_B3D0((uint64_t)v130, v123, &qword_2615F8);
  sub_B3D0((uint64_t)&v139, (uint64_t)&v133, &qword_2679C8);
  v100 = v127;
  v101 = *(void (**)(char *, char *, uint64_t))(v127 + 16);
  v102 = v128;
  v103 = v129;
  v101(v128, v97, v129);
  v104 = v125;
  sub_B3D0(v99, v125, &qword_2615F8);
  v105 = sub_5440(&qword_2679D0);
  sub_B3D0((uint64_t)&v133, v104 + *(int *)(v105 + 48), &qword_2679C8);
  v101((char *)(v104 + *(int *)(v105 + 64)), v102, v103);
  v106 = *(void (**)(char *, uint64_t))(v100 + 8);
  v106(v97, v103);
  sub_B414((uint64_t)&v139, &qword_2679C8);
  sub_B414(v98, &qword_2615F8);
  v106(v102, v103);
  sub_B414((uint64_t)&v133, &qword_2679C8);
  return sub_B414(v99, &qword_2615F8);
}

uint64_t sub_14275C()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  double v6;
  double v7;
  _BOOL4 v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  id v14;
  _BOOL4 v15;

  v1 = v0;
  v2 = v0[3];
  v3 = v1[4];
  sub_5480(v1, v2);
  v4 = (void *)ContentInfo.storeData.getter(v2, *(_QWORD *)(v3 + 8));
  if (v4)
  {
    v5 = v4;
    objc_msgSend(v4, "averageRating");
    v7 = v6;

    v8 = v7 == 0.0;
    if (v7 == 0.0)
      v9 = 0.0;
    else
      v9 = v7 * 5.0;
  }
  else
  {
    v9 = 0.0;
    v8 = 1;
  }
  v10 = v1[3];
  v11 = v1[4];
  sub_5480(v1, v10);
  v12 = (void *)ContentInfo.storeData.getter(v10, *(_QWORD *)(v11 + 8));
  if (v12)
  {
    v13 = v12;
    v14 = objc_msgSend(v12, "ratingCount");

    v15 = v14 == 0;
  }
  else
  {
    v15 = 1;
  }
  if (v8 || v15)
    return 0;
  else
    return *(_QWORD *)&v9;
}

uint64_t sub_14285C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *KeyPath;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  __n128 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t OpaqueTypeConformance2;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD v81[2];
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD v102[2];
  uint64_t v103;
  uint64_t v104;
  char v105;
  uint64_t v106;
  char v107;
  char v108;

  v86 = a4;
  v85 = a3;
  v92 = a2;
  v99 = a5;
  v6 = type metadata accessor for AccessibilityChildBehavior(0);
  v94 = *(_QWORD *)(v6 - 8);
  v95 = v6;
  __chkstk_darwin(v6);
  v93 = (char *)v81 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v90 = type metadata accessor for Font.Leading(0);
  v89 = *(_QWORD *)(v90 - 8);
  __chkstk_darwin(v90);
  v87 = (char *)v81 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for FontConstants.ListItem(0);
  __chkstk_darwin(v9);
  v84 = (char *)v81 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_5440(qword_2679D8);
  v97 = *(_QWORD *)(v11 - 8);
  v98 = v11;
  __chkstk_darwin(v11);
  v88 = (char *)v81 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_5440(&qword_2679A8);
  __chkstk_darwin(v13);
  v96 = (char *)v81 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *a1;
  v15 = a1[1];
  v18 = a1[2];
  v17 = a1[3];
  v83 = a1[4];
  v91 = a1[5];
  swift_bridgeObjectRetain(v15);
  v19 = Image.init(systemName:)(v16, v15);
  v20 = Text.init(_:)(v19);
  v22 = v21;
  v24 = v23;
  v26 = v25 & 1;
  v27 = static Text.+ infix(_:_:)(v20, v21, v25 & 1, v23, 32, 0xE100000000000000, 0, _swiftEmptyArrayStorage);
  v29 = v28;
  v31 = v30;
  v33 = v32 & 1;
  sub_2B574(v20, v22, v26);
  swift_bridgeObjectRelease(v24);
  swift_bridgeObjectRetain(v17);
  v81[1] = v18;
  v34 = static Text.+ infix(_:_:)(v27, v29, v33, v31, v18, v17, 0, _swiftEmptyArrayStorage);
  v36 = v35;
  LODWORD(v22) = v37;
  v39 = v38;
  v82 = v17;
  swift_bridgeObjectRelease(v17);
  sub_2B574(v27, v29, v33);
  swift_bridgeObjectRelease(v31);
  v40 = v85;
  v41 = v86;
  v100 = v85;
  v101 = v86;
  KeyPath = (_QWORD *)swift_getKeyPath(&unk_1F03B0);
  v44 = type metadata accessor for ListItemMetadataEditionsDescriptor(0, v40, v41, v43);
  swift_getWitnessTable(&protocol conformance descriptor for ListItemMetadataEditionsDescriptor<A>, v44);
  v45 = (uint64_t)v84;
  ViewModelWithExternals.subscript.getter(KeyPath);
  swift_release(KeyPath);
  v47 = static Font.caption2.getter(v46);
  v48 = v89;
  v49 = v87;
  v50 = v90;
  (*(void (**)(char *, _QWORD, uint64_t))(v89 + 104))(v87, enum case for Font.Leading.tight(_:), v90);
  v51 = Font.leading(_:)(v49, v47);
  v52 = swift_release(v47);
  (*(void (**)(char *, uint64_t, __n128))(v48 + 8))(v49, v50, v52);
  sub_224DC(v45, type metadata accessor for FontConstants.ListItem);
  LODWORD(v89) = v22;
  v53 = v22 & 1;
  v54 = v34;
  v90 = v36;
  v92 = v39;
  v55 = Text.font(_:)(v51, v34, v36, v53, v39);
  v57 = v56;
  LOBYTE(v50) = v58;
  v60 = v59;
  swift_release(v51);
  v61 = v50 & 1;
  v62 = _s7BooksUI14ColorConstantsV19booksSecondaryLabel05SwiftB00C0Vvg_0();
  v63 = Text.foregroundColor(_:)(v62, v55, v57, v61, v60);
  v65 = v64;
  LOBYTE(v34) = v66;
  v68 = v67;
  swift_release(v62);
  sub_2B574(v55, v57, v61);
  v69 = v60;
  v70 = v88;
  v71 = swift_bridgeObjectRelease(v69);
  v103 = v63;
  v104 = v65;
  v105 = v34 & 1;
  v106 = v68;
  v72 = v93;
  static AccessibilityChildBehavior.ignore.getter(v71);
  View.accessibilityElement(children:)(v72, &type metadata for Text, &protocol witness table for Text);
  (*(void (**)(char *, uint64_t))(v94 + 8))(v72, v95);
  sub_2B574(v103, v104, v105);
  swift_bridgeObjectRelease(v106);
  v73 = v91;
  if (v91)
  {
    v74 = v91;
    v75 = &v108;
  }
  else
  {
    v74 = v82;
    swift_bridgeObjectRetain(v82);
    v73 = 0;
    v75 = &v107;
  }
  v103 = *((_QWORD *)v75 - 32);
  v104 = v74;
  swift_bridgeObjectRetain(v73);
  v102[0] = &type metadata for Text;
  v102[1] = &protocol witness table for Text;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v102, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
  v77 = sub_C57C();
  v78 = (uint64_t)v96;
  v79 = v98;
  View.accessibilityLabel<A>(_:)(&v103, v98, &type metadata for String, OpaqueTypeConformance2, v77);
  sub_2B574(v54, v90, v89 & 1);
  swift_bridgeObjectRelease(v74);
  swift_bridgeObjectRelease(v92);
  (*(void (**)(char *, uint64_t))(v97 + 8))(v70, v79);
  return sub_167A4(v78, v99, &qword_2679A8);
}

unint64_t sub_142DDC(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_24A390, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 3)
    return 3;
  else
    return v3;
}

uint64_t sub_142E28(char a1)
{
  if (!a1)
    return 0x614E726F68747561;
  if (a1 == 1)
    return 0x666E497465737361;
  return 0xD000000000000015;
}

uint64_t sub_142E94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_1F0190, a3);
  return == infix<A>(_:_:)(a1, a2, a3, WitnessTable, &protocol witness table for String);
}

uint64_t sub_142EE8(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_1F0190, a1);
  return RawRepresentable<>.hashValue.getter(a1, a2, WitnessTable, &protocol witness table for String);
}

uint64_t sub_142F34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_1F0190, a2);
  return RawRepresentable<>.hash(into:)(a1, a2, a3, WitnessTable, &protocol witness table for String);
}

uint64_t sub_142F84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_1F0190, a2);
  return RawRepresentable<>._rawHashValue(seed:)(a1, a2, a3, WitnessTable, &protocol witness table for String);
}

unint64_t sub_142FD4@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  void *v3;
  unint64_t result;
  Swift::String v5;

  v3 = (void *)a1[1];
  v5._countAndFlagsBits = *a1;
  v5._object = v3;
  result = sub_142DDC(v5);
  *a2 = result;
  return result;
}

uint64_t sub_143008@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_142E28(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_143034()
{
  char *v0;

  return sub_142E28(*v0);
}

uint64_t sub_143040@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_142E24(a1);
  *a2 = result;
  return result;
}

uint64_t sub_14306C(uint64_t a1)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_1F0338, a1);
  return CodingKey.description.getter(a1, WitnessTable);
}

uint64_t sub_1430A0(uint64_t a1)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_1F0338, a1);
  return CodingKey.debugDescription.getter(a1, WitnessTable);
}

uint64_t ListItemMetadataEditionsDescriptor.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char v31;
  void (*v32)(char *, uint64_t, uint64_t, uint64_t);
  void (*v33)(void);
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  void (*v41)(char *, uint64_t);
  uint64_t v42;
  uint64_t *v43;
  uint64_t *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  Swift::String v49;
  Swift::String v50;
  void *object;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void (*v59)(char *, uint64_t);
  uint64_t v60;
  char *v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  _BYTE *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t WitnessTable;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  _QWORD *v87;
  __int128 v88;
  uint64_t v89;
  void *v90;
  unint64_t v91;
  char v92;

  v87 = a1;
  v77 = a5;
  v7 = type metadata accessor for ListItemMetadataEditionsDescriptor.CodingKeys(255, a2, a3, a4);
  WitnessTable = swift_getWitnessTable(&unk_1F0338, v7);
  v83 = (char *)v7;
  v8 = type metadata accessor for KeyedDecodingContainer(0, v7);
  v78 = *(_QWORD *)(v8 - 8);
  v79 = v8;
  __chkstk_darwin(v8);
  v86 = (char *)&v75 - v9;
  v10 = type metadata accessor for Optional(0, a2);
  v80 = *(_QWORD *)(v10 - 8);
  v81 = (char *)v10;
  __chkstk_darwin(v10);
  v12 = (char *)&v75 - v11;
  v13 = type metadata accessor for ListItemEditionsDescriptorExternals(0);
  v14 = __chkstk_darwin(v13);
  v16 = (uint64_t *)((char *)&v75 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  v17 = __chkstk_darwin(v14);
  v19 = (char *)&v75 - v18;
  v20 = *(_QWORD *)(a2 - 8);
  __chkstk_darwin(v17);
  v22 = (char *)&v75 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v85 = type metadata accessor for ListItemMetadataEditionsDescriptor(0, a2, a3, v23);
  v76 = *(_QWORD *)(v85 - 8);
  __chkstk_darwin(v85);
  v25 = (uint64_t *)((char *)&v75 - v24);
  *v16 = swift_getKeyPath(&unk_1EFDD8);
  v26 = sub_5440(&qword_25F200);
  swift_storeEnumTagMultiPayload(v16, v26, 0);
  v27 = (_QWORD *)((char *)v16 + *(int *)(v13 + 20));
  *v27 = swift_getKeyPath(&unk_1EFE10);
  v28 = sub_5440(&qword_25FAD0);
  swift_storeEnumTagMultiPayload(v27, v28, 0);
  sub_21C88((uint64_t)v16, (uint64_t)v19, type metadata accessor for ListItemEditionsDescriptorExternals);
  v29 = v19;
  v30 = a2;
  v31 = swift_dynamicCast(v12, v29, v13, a2, 6);
  v32 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v20 + 56);
  if ((v31 & 1) != 0)
  {
    v32(v12, 0, 1, a2);
    (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v22, v12, a2);
    v33 = *(void (**)(void))(v20 + 16);
    v81 = (char *)v25 + *(int *)(v85 + 44);
    v33();
    v34 = v20;
    v35 = v87;
    v36 = v87[3];
    v37 = v87[4];
    sub_5480(v87, v36);
    v38 = v86;
    v39 = v84;
    dispatch thunk of Decoder.container<A>(keyedBy:)(v83, v83, WitnessTable, v36, v37);
    if (v39)
    {
      v41 = *(void (**)(char *, uint64_t))(v20 + 8);
      v41(v22, v30);
      _s7BooksUI13AnyPagedFrameVwxx_0(v35);
      return ((uint64_t (*)(char *, uint64_t))v41)(v81, v30);
    }
    else
    {
      v53 = v38;
      v84 = v30;
      LOBYTE(v90) = 0;
      v54 = v79;
      v55 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v90, v79);
      v83 = v22;
      v25[5] = v55;
      v25[6] = v56;
      v57 = sub_5440(&qword_25F900);
      LOBYTE(v88) = 1;
      v58 = sub_7FD8((unint64_t *)&qword_25F908, &qword_25F900, (uint64_t)&protocol conformance descriptor for MResourceDecoder<A>);
      KeyedDecodingContainer.decode<A>(_:forKey:)(&v90, v57, &v88, v54, v57, v58);
      v62 = v90;
      static ContentInfoUtilities.assetInfo(storeAsset:)(&v88, v90);
      if (v89)
      {
        sub_AC68(&v88, (uint64_t)&v90);
        sub_BD00((uint64_t)&v90, (uint64_t)v25);
        v63 = sub_5440(&qword_2640F8);
        v92 = 2;
        v64 = sub_CAF68(&qword_267758, &qword_2640F8, (void (*)(void))sub_CAFCC, (uint64_t)&protocol conformance descriptor for <A> [A]);
        KeyedDecodingContainer.decode<A>(_:forKey:)(&v88, v63, &v92, v54, v63, v64);

        _s7BooksUI13AnyPagedFrameVwxx_0(&v90);
        (*(void (**)(char *, uint64_t))(v78 + 8))(v53, v54);
        (*(void (**)(char *, uint64_t))(v34 + 8))(v83, v84);
        v25[7] = v88;
        v73 = v76;
        v74 = v85;
        (*(void (**)(uint64_t, _QWORD *, uint64_t))(v76 + 16))(v77, v25, v85);
        _s7BooksUI13AnyPagedFrameVwxx_0(v35);
        return (*(uint64_t (**)(_QWORD *, uint64_t))(v73 + 8))(v25, v74);
      }
      else
      {
        sub_B414((uint64_t)&v88, &qword_25F910);
        v65 = type metadata accessor for DecodingError(0);
        swift_allocError(v65, &protocol witness table for DecodingError, 0, 0);
        v67 = v66;
        v68 = KeyedDecodingContainer.codingPath.getter(v54);
        v69 = sub_34EE8();
        v70 = swift_allocError(&type metadata for ListItemDecodingError, v69, 0, 0);
        *v71 = 0;
        DecodingError.Context.init(codingPath:debugDescription:underlyingError:)(v68, 0xD00000000000001ALL, 0x80000000001F9FF0, v70);
        v72 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v65 - 8) + 104))(v67, enum case for DecodingError.dataCorrupted(_:), v65);
        swift_willThrow(v72);

        (*(void (**)(char *, uint64_t))(v78 + 8))(v86, v54);
        v59 = *(void (**)(char *, uint64_t))(v34 + 8);
        v60 = v84;
        v59(v83, v84);
        v61 = v81;
        _s7BooksUI13AnyPagedFrameVwxx_0(v35);
        swift_bridgeObjectRelease(v25[6]);
        return ((uint64_t (*)(char *, uint64_t))v59)(v61, v60);
      }
    }
  }
  else
  {
    v32(v12, 1, 1, a2);
    (*(void (**)(char *, char *))(v80 + 8))(v12, v81);
    v42 = type metadata accessor for DecodingError(0);
    swift_allocError(v42, &protocol witness table for DecodingError, 0, 0);
    v44 = v43;
    sub_5440(&qword_25F8F8);
    *v44 = a2;
    v45 = v87;
    v46 = v87[3];
    v47 = v87[4];
    sub_5480(v87, v46);
    v48 = dispatch thunk of Decoder.codingPath.getter(v46, v47);
    v90 = 0;
    v91 = 0xE000000000000000;
    _StringGuts.grow(_:)(88);
    v49._countAndFlagsBits = 0xD000000000000056;
    v49._object = (void *)0x80000000001FD7A0;
    String.append(_:)(v49);
    v50._countAndFlagsBits = _typeName(_:qualified:)(a2, 0);
    object = v50._object;
    String.append(_:)(v50);
    swift_bridgeObjectRelease(object);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)(v48, v90, v91, 0);
    v52 = (*(uint64_t (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v42 - 8) + 104))(v44, enum case for DecodingError.typeMismatch(_:), v42);
    swift_willThrow(v52);
    return _s7BooksUI13AnyPagedFrameVwxx_0(v45);
  }
}

uint64_t type metadata accessor for ListItemMetadataEditionsDescriptor.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10E40(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ListItemMetadataEditionsDescriptor.CodingKeys);
}

uint64_t type metadata accessor for ListItemMetadataEditionsDescriptor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10E40(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ListItemMetadataEditionsDescriptor);
}

uint64_t sub_143818@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  return ListItemMetadataEditionsDescriptor.init(from:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a3, a4);
}

uint64_t sub_143834()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 1954047348;
  if (*v0 != 1)
    v1 = 0xD000000000000012;
  if (*v0)
    return v1;
  else
    return 0x614E6C6F626D7973;
}

uint64_t sub_143890@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_14549C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1438B4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_143B84();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1438DC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_143B84();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t ListItemMetadataDescriptorModel.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;

  v5 = sub_5440(&qword_267760);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_5480(a1, v9);
  v11 = sub_143B84();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ListItemMetadataDescriptorModel.CodingKeys, &type metadata for ListItemMetadataDescriptorModel.CodingKeys, v11, v9, v10);
  if (v2)
  {
    _s7BooksUI13AnyPagedFrameVwxx_0(a1);
    v24 = 0;
  }
  else
  {
    LOBYTE(v29) = 0;
    v12 = KeyedDecodingContainer.decode(_:forKey:)(&v29, v5);
    v15 = v14;
    v28 = v12;
    LOBYTE(v29) = 1;
    swift_bridgeObjectRetain(v14);
    v16 = KeyedDecodingContainer.decode(_:forKey:)(&v29, v5);
    v18 = v17;
    v26 = v16;
    v19 = sub_5440(&qword_267770);
    v31 = 2;
    v20 = sub_CAF68(&qword_267778, &qword_267770, (void (*)(void))sub_143BC8, (uint64_t)&protocol conformance descriptor for <A> DiscardOnError<A>);
    v27 = v18;
    swift_bridgeObjectRetain(v18);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v29, v19, &v31, v5, v19, v20);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v22 = v29;
    v21 = v30;
    swift_bridgeObjectRetain(v30);
    swift_bridgeObjectRelease(0);
    v23 = v27;
    *a2 = v28;
    a2[1] = v15;
    a2[2] = v26;
    a2[3] = v23;
    a2[4] = v22;
    a2[5] = v21;
    _s7BooksUI13AnyPagedFrameVwxx_0(a1);
    swift_bridgeObjectRelease(v21);
    swift_bridgeObjectRelease(v23);
    v24 = v15;
  }
  return swift_bridgeObjectRelease(v24);
}

unint64_t sub_143B84()
{
  unint64_t result;

  result = qword_267768;
  if (!qword_267768)
  {
    result = swift_getWitnessTable(&unk_1F02E8, &type metadata for ListItemMetadataDescriptorModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_267768);
  }
  return result;
}

unint64_t sub_143BC8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_267780;
  if (!qword_267780)
  {
    v1 = sub_7EF8(&qword_25E950);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_267780);
  }
  return result;
}

uint64_t sub_143C24(uint64_t a1)
{
  uint64_t result;

  result = sub_6FD0(&qword_267788, type metadata accessor for ListItemEditionsDescriptorExternals, (uint64_t)&protocol conformance descriptor for ListItemEditionsDescriptorExternals);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_143C60(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  return swift_getOpaqueTypeConformance2(&v3, &opaque type descriptor for <<opaque return type of ListItemMetadataEditionsDescriptor.content(localizer:)>>, 1);
}

uint64_t sub_143C94(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = swift_getWitnessTable(&protocol conformance descriptor for ListItemMetadataEditionsDescriptor<A>, a2);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_143CC0(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8);
}

uint64_t sub_143CCC(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = swift_getWitnessTable(&protocol conformance descriptor for ListItemMetadataEditionsDescriptor<A>, a2);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_143CF8(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = swift_getWitnessTable(&protocol conformance descriptor for ListItemMetadataEditionsDescriptor<A>, a2);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_143D24(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = swift_getWitnessTable(&protocol conformance descriptor for ListItemMetadataEditionsDescriptor<A>, a2);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_143D50(uint64_t a1)
{
  unint64_t result;

  result = sub_CAFCC();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_143D74@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 24);
  *a1 = *(_QWORD *)(v1 + 16);
  a1[1] = v2;
  return swift_bridgeObjectRetain(v2);
}

uint64_t sub_143D80@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return ListItemMetadataDescriptorModel.init(from:)(a1, a2);
}

uint64_t sub_143D94@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  *a2 = v2;
  a2[1] = v3;
  return swift_bridgeObjectRetain(v3);
}

uint64_t sub_143DA0(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = *a1;
  v3 = a1[1];
  v5 = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain(v3);
  result = swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a2 + 32) = v4;
  *(_QWORD *)(a2 + 40) = v3;
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for ListItemEditionsDescriptorExternals(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _WORD *v20;
  _WORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  _WORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v17 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v17);
  }
  else
  {
    v7 = sub_5440(&qword_25F200);
    if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
    {
      *(_WORD *)a1 = *(_WORD *)a2;
      v8 = (int *)type metadata accessor for SizeConstants.Environment(0);
      v9 = v8[6];
      v10 = (char *)a1 + v9;
      v11 = (char *)a2 + v9;
      v12 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
      *(uint64_t *)((char *)a1 + v8[7]) = *(uint64_t *)((char *)a2 + v8[7]);
      v13 = v8[8];
      v14 = (char *)a1 + v13;
      v15 = (char *)a2 + v13;
      v14[2] = v15[2];
      *(_WORD *)v14 = *(_WORD *)v15;
      v16 = 1;
    }
    else
    {
      v18 = *a2;
      *a1 = *a2;
      swift_retain(v18);
      v16 = 0;
    }
    swift_storeEnumTagMultiPayload(a1, v7, v16);
    v19 = *(int *)(a3 + 20);
    v20 = (_WORD *)((char *)a1 + v19);
    v21 = (_WORD *)((char *)a2 + v19);
    v22 = sub_5440(&qword_25FAD0);
    if (swift_getEnumCaseMultiPayload(v21, v22) == 1)
    {
      *v20 = *v21;
      v23 = type metadata accessor for FontConstants.Environment(0);
      v24 = *(int *)(v23 + 24);
      v25 = (char *)v20 + v24;
      v26 = (char *)v21 + v24;
      v27 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 16))(v25, v26, v27);
      *(_QWORD *)((char *)v20 + *(int *)(v23 + 28)) = *(_QWORD *)((char *)v21 + *(int *)(v23 + 28));
      v28 = v20;
      v29 = v22;
      v30 = 1;
    }
    else
    {
      v31 = *(_QWORD *)v21;
      *(_QWORD *)v20 = *(_QWORD *)v21;
      swift_retain(v31);
      v28 = v20;
      v29 = v22;
      v30 = 0;
    }
    swift_storeEnumTagMultiPayload(v28, v29, v30);
  }
  return a1;
}

double destroy for ListItemEditionsDescriptorExternals(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  double result;

  v4 = sub_5440(&qword_25F200);
  if (swift_getEnumCaseMultiPayload(a1, v4) == 1)
  {
    v5 = (char *)a1 + *(int *)(type metadata accessor for SizeConstants.Environment(0) + 24);
    v6 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  }
  else
  {
    swift_release(*a1);
  }
  v7 = (_QWORD *)((char *)a1 + *(int *)(a2 + 20));
  v8 = sub_5440(&qword_25FAD0);
  if (swift_getEnumCaseMultiPayload(v7, v8) == 1)
  {
    v9 = (char *)v7 + *(int *)(type metadata accessor for FontConstants.Environment(0) + 24);
    v10 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  }
  else
  {
    *(_QWORD *)&result = swift_release(*v7).n128_u64[0];
  }
  return result;
}

_WORD *initializeWithCopy for ListItemEditionsDescriptorExternals(_WORD *a1, _WORD *a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _WORD *v18;
  _WORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v6 = sub_5440(&qword_25F200);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    *a1 = *a2;
    v7 = (int *)type metadata accessor for SizeConstants.Environment(0);
    v8 = v7[6];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    *(_QWORD *)((char *)a1 + v7[7]) = *(_QWORD *)((char *)a2 + v7[7]);
    v12 = v7[8];
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    v13[2] = v14[2];
    *(_WORD *)v13 = *(_WORD *)v14;
    v15 = 1;
  }
  else
  {
    v16 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    swift_retain(v16);
    v15 = 0;
  }
  swift_storeEnumTagMultiPayload(a1, v6, v15);
  v17 = *(int *)(a3 + 20);
  v18 = (_WORD *)((char *)a1 + v17);
  v19 = (_WORD *)((char *)a2 + v17);
  v20 = sub_5440(&qword_25FAD0);
  if (swift_getEnumCaseMultiPayload(v19, v20) == 1)
  {
    *v18 = *v19;
    v21 = type metadata accessor for FontConstants.Environment(0);
    v22 = *(int *)(v21 + 24);
    v23 = (char *)v18 + v22;
    v24 = (char *)v19 + v22;
    v25 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 16))(v23, v24, v25);
    *(_QWORD *)((char *)v18 + *(int *)(v21 + 28)) = *(_QWORD *)((char *)v19 + *(int *)(v21 + 28));
    v26 = 1;
  }
  else
  {
    v27 = *(_QWORD *)v19;
    *(_QWORD *)v18 = *(_QWORD *)v19;
    swift_retain(v27);
    v26 = 0;
  }
  swift_storeEnumTagMultiPayload(v18, v20, v26);
  return a1;
}

_BYTE *assignWithCopy for ListItemEditionsDescriptorExternals(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  _BYTE *v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  if (a1 != a2)
  {
    sub_B414((uint64_t)a1, &qword_25F200);
    v6 = sub_5440(&qword_25F200);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      v7 = (int *)type metadata accessor for SizeConstants.Environment(0);
      v8 = v7[6];
      v9 = &a1[v8];
      v10 = &a2[v8];
      v11 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
      *(_QWORD *)&a1[v7[7]] = *(_QWORD *)&a2[v7[7]];
      v12 = v7[8];
      v13 = &a1[v12];
      v14 = &a2[v12];
      v15 = v14[2];
      *(_WORD *)v13 = *(_WORD *)v14;
      v13[2] = v15;
      v16 = 1;
    }
    else
    {
      v17 = *(_QWORD *)a2;
      *(_QWORD *)a1 = *(_QWORD *)a2;
      swift_retain(v17);
      v16 = 0;
    }
    swift_storeEnumTagMultiPayload(a1, v6, v16);
    v18 = *(int *)(a3 + 20);
    v19 = &a1[v18];
    v20 = &a2[v18];
    sub_B414((uint64_t)&a1[v18], &qword_25FAD0);
    v21 = sub_5440(&qword_25FAD0);
    if (swift_getEnumCaseMultiPayload(v20, v21) == 1)
    {
      *v19 = *v20;
      v19[1] = v20[1];
      v22 = type metadata accessor for FontConstants.Environment(0);
      v23 = *(int *)(v22 + 24);
      v24 = &v19[v23];
      v25 = &v20[v23];
      v26 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v26 - 8) + 16))(v24, v25, v26);
      *(_QWORD *)&v19[*(int *)(v22 + 28)] = *(_QWORD *)&v20[*(int *)(v22 + 28)];
      v27 = 1;
    }
    else
    {
      v28 = *(_QWORD *)v20;
      *(_QWORD *)v19 = *(_QWORD *)v20;
      swift_retain(v28);
      v27 = 0;
    }
    swift_storeEnumTagMultiPayload(v19, v21, v27);
  }
  return a1;
}

_WORD *initializeWithTake for ListItemEditionsDescriptorExternals(_WORD *a1, _WORD *a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  _WORD *v16;
  _WORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;

  v6 = sub_5440(&qword_25F200);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    *a1 = *a2;
    v7 = (int *)type metadata accessor for SizeConstants.Environment(0);
    v8 = v7[6];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
    *(_QWORD *)((char *)a1 + v7[7]) = *(_QWORD *)((char *)a2 + v7[7]);
    v12 = v7[8];
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    v13[2] = v14[2];
    *(_WORD *)v13 = *(_WORD *)v14;
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v15 = *(int *)(a3 + 20);
  v16 = (_WORD *)((char *)a1 + v15);
  v17 = (_WORD *)((char *)a2 + v15);
  v18 = sub_5440(&qword_25FAD0);
  if (swift_getEnumCaseMultiPayload(v17, v18) == 1)
  {
    *v16 = *v17;
    v19 = type metadata accessor for FontConstants.Environment(0);
    v20 = *(int *)(v19 + 24);
    v21 = (char *)v16 + v20;
    v22 = (char *)v17 + v20;
    v23 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 32))(v21, v22, v23);
    *(_QWORD *)((char *)v16 + *(int *)(v19 + 28)) = *(_QWORD *)((char *)v17 + *(int *)(v19 + 28));
    swift_storeEnumTagMultiPayload(v16, v18, 1);
  }
  else
  {
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  return a1;
}

_WORD *assignWithTake for ListItemEditionsDescriptorExternals(_WORD *a1, _WORD *a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  _WORD *v16;
  _WORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;

  if (a1 != a2)
  {
    sub_B414((uint64_t)a1, &qword_25F200);
    v6 = sub_5440(&qword_25F200);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      *a1 = *a2;
      v7 = (int *)type metadata accessor for SizeConstants.Environment(0);
      v8 = v7[6];
      v9 = (char *)a1 + v8;
      v10 = (char *)a2 + v8;
      v11 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
      *(_QWORD *)((char *)a1 + v7[7]) = *(_QWORD *)((char *)a2 + v7[7]);
      v12 = v7[8];
      v13 = (char *)a1 + v12;
      v14 = (char *)a2 + v12;
      v13[2] = v14[2];
      *(_WORD *)v13 = *(_WORD *)v14;
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
    v15 = *(int *)(a3 + 20);
    v16 = (_WORD *)((char *)a1 + v15);
    v17 = (_WORD *)((char *)a2 + v15);
    sub_B414((uint64_t)a1 + v15, &qword_25FAD0);
    v18 = sub_5440(&qword_25FAD0);
    if (swift_getEnumCaseMultiPayload(v17, v18) == 1)
    {
      *v16 = *v17;
      v19 = type metadata accessor for FontConstants.Environment(0);
      v20 = *(int *)(v19 + 24);
      v21 = (char *)v16 + v20;
      v22 = (char *)v17 + v20;
      v23 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 32))(v21, v22, v23);
      *(_QWORD *)((char *)v16 + *(int *)(v19 + 28)) = *(_QWORD *)((char *)v17 + *(int *)(v19 + 28));
      swift_storeEnumTagMultiPayload(v16, v18, 1);
    }
    else
    {
      memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for ListItemEditionsDescriptorExternals(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_144744);
}

uint64_t sub_144744(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v6 = sub_5440(&qword_25F220);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v8 = sub_5440(&qword_2677E0);
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for ListItemEditionsDescriptorExternals(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1447CC);
}

uint64_t sub_1447CC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v8 = sub_5440(&qword_25F220);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v10 = sub_5440(&qword_2677E0);
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_144850(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[2];

  sub_2ADCC(319, (unint64_t *)&qword_25F2A8, type metadata accessor for SizeConstants.Spacing);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_2ADCC(319, (unint64_t *)&qword_260910, type metadata accessor for FontConstants.ListItem);
    if (v5 <= 0x3F)
    {
      v6[1] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 256, 2, v6, a1 + 16);
    }
  }
}

uint64_t sub_1448F4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = "(";
  v4[1] = &unk_1F00D0;
  v4[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
  result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 16));
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 0, 4, v4, a1 + 32);
    return 0;
  }
  return result;
}

_QWORD *sub_144984(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t, uint64_t);

  v4 = (_QWORD *)a1;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_DWORD *)(v6 + 80);
  if (v7 > 7
    || (*(_DWORD *)(v6 + 80) & 0x100000) != 0
    || ((v7 + 64) & (unint64_t)~v7) + *(_QWORD *)(v6 + 64) > 0x18)
  {
    v10 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v10 + ((v7 & 0xF8 ^ 0x1F8) & (v7 + 16)));
    swift_retain(v10);
  }
  else
  {
    v11 = ~v7;
    v12 = *(_OWORD *)(a2 + 3);
    *(_OWORD *)(a1 + 24) = v12;
    (**(void (***)(uint64_t, uint64_t *))(v12 - 8))(a1, a2);
    v13 = (_QWORD *)(((unint64_t)v4 + 47) & 0xFFFFFFFFFFFFFFF8);
    v14 = (_QWORD *)(((unint64_t)a2 + 47) & 0xFFFFFFFFFFFFFFF8);
    *v13 = *v14;
    v15 = v14[1];
    v13[1] = v15;
    v16 = (_QWORD *)(((unint64_t)v13 + 23) & 0xFFFFFFFFFFFFFFF8);
    v17 = (uint64_t *)(((unint64_t)v14 + 23) & 0xFFFFFFFFFFFFFFF8);
    v18 = *v17;
    *v16 = *v17;
    v19 = (char *)v17 + v7;
    v20 = ((unint64_t)v16 + v7 + 8) & ~v7;
    v21 = (unint64_t)(v19 + 8) & v11;
    v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
    swift_bridgeObjectRetain(v15);
    swift_bridgeObjectRetain(v18);
    v22(v20, v21, v5);
  }
  return v4;
}

uint64_t sub_144AA4(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  _QWORD *v5;

  _s7BooksUI13AnyPagedFrameVwxx_0(a1);
  v4 = ((unint64_t)a1 + 47) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + 8));
  v5 = (_QWORD *)((v4 + 23) & 0xFFFFFFFFFFFFFFF8);
  swift_bridgeObjectRelease(*v5);
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))(((unint64_t)v5 + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
}

uint64_t sub_144B04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t, uint64_t);

  v6 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v6;
  (**(void (***)(void))(v6 - 8))();
  v7 = (_QWORD *)((a1 + 47) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((a2 + 47) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  v9 = v8[1];
  v7[1] = v9;
  v10 = (_QWORD *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8);
  v11 = (uint64_t *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8);
  v12 = *v11;
  *v10 = *v11;
  v13 = *(_QWORD *)(a3 + 16);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(unsigned __int8 *)(v14 + 80);
  v16 = ((unint64_t)v10 + v15 + 8) & ~v15;
  v17 = ((unint64_t)v11 + v15 + 8) & ~v15;
  v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v12);
  v18(v16, v17, v13);
  return a1;
}

_QWORD *sub_144BCC(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  sub_142F8(a1, a2);
  v6 = (_QWORD *)(((unint64_t)a1 + 47) & 0xFFFFFFFFFFFFFFF8);
  v7 = (_QWORD *)(((unint64_t)a2 + 47) & 0xFFFFFFFFFFFFFFF8);
  *v6 = *v7;
  v8 = v7[1];
  v9 = v6[1];
  v6[1] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  v10 = (uint64_t *)(((unint64_t)v6 + 23) & 0xFFFFFFFFFFFFFFF8);
  v11 = (uint64_t *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8);
  v12 = *v11;
  v13 = *v10;
  *v10 = *v11;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  v14 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v14 + 24))(((unint64_t)v10 + *(unsigned __int8 *)(v14 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80), ((unint64_t)v11 + *(unsigned __int8 *)(v14 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
  return a1;
}

uint64_t sub_144C88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  _OWORD *v5;
  _OWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v5 = (_OWORD *)((a1 + 47) & 0xFFFFFFFFFFFFFFF8);
  v6 = (_OWORD *)((a2 + 47) & 0xFFFFFFFFFFFFFFF8);
  *v5 = *v6;
  v7 = (_QWORD *)(((unint64_t)v5 + 23) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)(((unint64_t)v6 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  v9 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v9 + 32))(((unint64_t)v7 + *(unsigned __int8 *)(v9 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80), ((unint64_t)v8 + *(unsigned __int8 *)(v9 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
  return a1;
}

uint64_t sub_144D08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;

  _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)a1);
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v7 = (_QWORD *)((a1 + 47) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((a2 + 47) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  v9 = v7[1];
  v7[1] = v8[1];
  swift_bridgeObjectRelease(v9);
  v10 = (uint64_t *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8);
  v11 = (uint64_t *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8);
  v12 = *v10;
  *v10 = *v11;
  swift_bridgeObjectRelease(v12);
  v13 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v13 + 40))(((unint64_t)v10 + *(unsigned __int8 *)(v13 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80), ((unint64_t)v11 + *(unsigned __int8 *)(v13 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
  return a1;
}

uint64_t sub_144DBC(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v13;
  int v14;
  unint64_t v15;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_22;
  v9 = ((v7 + 64) & ~v7) + *(_QWORD *)(v4 + 64);
  v10 = 8 * v9;
  if (v9 <= 3)
  {
    v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      v11 = *(_DWORD *)(a1 + v9);
      if (!v11)
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      v11 = *(unsigned __int16 *)(a1 + v9);
      if (!*(_WORD *)(a1 + v9))
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_22:
      if ((v5 & 0x80000000) != 0)
        return (*(uint64_t (**)(unint64_t))(v4 + 48))((((((a1 + 47) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
                                                                      + v7
                                                                      + 8) & ~v7);
      v15 = *(_QWORD *)(a1 + 24);
      if (v15 >= 0xFFFFFFFF)
        LODWORD(v15) = -1;
      return (v15 + 1);
    }
  }
  v11 = *(unsigned __int8 *)(a1 + v9);
  if (!*(_BYTE *)(a1 + v9))
    goto LABEL_22;
LABEL_15:
  v14 = (v11 - 1) << v10;
  if (v9 > 3)
    v14 = 0;
  if (!(_DWORD)v9)
    return v6 + v14 + 1;
  if (v9 > 3)
    LODWORD(v9) = 4;
  return ((uint64_t (*)(void))((char *)&loc_144E90 + 4 * byte_1EFDC0[(v9 - 1)]))();
}

void sub_144F10(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((*(unsigned __int8 *)(v5 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
     + *(_QWORD *)(v5 + 64);
  if (a3 > v6)
  {
    if (v7 <= 3)
    {
      v10 = ((a3 - v6 + ~(-1 << (8 * v7))) >> (8 * v7)) + 1;
      if (HIWORD(v10))
      {
        v8 = &dword_4;
      }
      else if (v10 >= 0x100)
      {
        v8 = 2;
      }
      else
      {
        v8 = v10 > 1;
      }
    }
    else
    {
      v8 = &dword_0 + 1;
    }
  }
  else
  {
    v8 = 0;
  }
  if (v6 < a2)
  {
    v9 = ~v6 + a2;
    if (v7 < 4)
    {
      if ((_DWORD)v7)
      {
        v11 = v9 & ~(-1 << (8 * v7));
        bzero(a1, v7);
        if ((_DWORD)v7 == 3)
        {
          *a1 = v11;
          *((_BYTE *)a1 + 2) = BYTE2(v11);
        }
        else if ((_DWORD)v7 == 2)
        {
          *a1 = v11;
        }
        else
        {
          *(_BYTE *)a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v7);
      *(_DWORD *)a1 = v9;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

uint64_t destroy for ListItemMetadataDescriptorModel(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  return swift_bridgeObjectRelease(a1[5]);
}

_QWORD *initializeWithCopy for ListItemMetadataDescriptorModel(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

_QWORD *assignWithCopy for ListItemMetadataDescriptorModel(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  v6 = a2[3];
  v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[4] = a2[4];
  v8 = a2[5];
  v9 = a1[5];
  a1[5] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  return a1;
}

_QWORD *assignWithTake for ListItemMetadataDescriptorModel(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = a2[1];
  v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  v6 = a2[3];
  v7 = a1[3];
  a1[2] = a2[2];
  a1[3] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = a2[5];
  v9 = a1[5];
  a1[4] = a2[4];
  a1[5] = v8;
  swift_bridgeObjectRelease(v9);
  return a1;
}

ValueMetadata *type metadata accessor for ListItemMetadataDescriptorModel()
{
  return &type metadata for ListItemMetadataDescriptorModel;
}

uint64_t sub_145298()
{
  return sub_7FD8(&qword_2678F8, qword_267900, (uint64_t)&protocol conformance descriptor for VStack<A>);
}

ValueMetadata *type metadata accessor for ListItemMetadataDescriptorModel.CodingKeys()
{
  return &type metadata for ListItemMetadataDescriptorModel.CodingKeys;
}

uint64_t _s7BooksUI31ListItemMetadataDescriptorModelV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_145324 + 4 * byte_1EFDD3[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_145358 + 4 * byte_1EFDCE[v4]))();
}

uint64_t sub_145358(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_145360(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x145368);
  return result;
}

uint64_t sub_145374(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x14537CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_145380(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_145388(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_145394(uint64_t a1)
{
  return swift_getWitnessTable(&unk_1F0208, a1);
}

unint64_t sub_1453A8()
{
  unint64_t result;

  result = qword_267988;
  if (!qword_267988)
  {
    result = swift_getWitnessTable(&unk_1F02C0, &type metadata for ListItemMetadataDescriptorModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_267988);
  }
  return result;
}

unint64_t sub_1453F0()
{
  unint64_t result;

  result = qword_267990;
  if (!qword_267990)
  {
    result = swift_getWitnessTable(&unk_1F0230, &type metadata for ListItemMetadataDescriptorModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_267990);
  }
  return result;
}

unint64_t sub_145438()
{
  unint64_t result;

  result = qword_267998;
  if (!qword_267998)
  {
    result = swift_getWitnessTable(&unk_1F0258, &type metadata for ListItemMetadataDescriptorModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_267998);
  }
  return result;
}

uint64_t sub_14547C(uint64_t a1)
{
  return swift_getWitnessTable(&unk_1F0140, a1);
}

uint64_t sub_14548C(uint64_t a1)
{
  return swift_getWitnessTable(&unk_1F0168, a1);
}

uint64_t sub_14549C(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  char v8;

  if (a1 == 0x614E6C6F626D7973 && a2 == 0xEA0000000000656DLL)
  {
    v5 = 0xEA0000000000656DLL;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x614E6C6F626D7973, 0xEA0000000000656DLL, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 1954047348 && a2 == 0xE400000000000000)
  {
    v7 = 0xE400000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1954047348, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0xD000000000000012 && a2 == 0x80000000001FD800)
  {
    swift_bridgeObjectRelease(0x80000000001FD800);
    return 2;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012, 0x80000000001FD800, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_1455E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = type metadata accessor for ListItemMetadataEditionsDescriptor(0, v5, *(_QWORD *)(v4 + 24), a4);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v8 + 32) & ~v8;
  v10 = v9 + *(_QWORD *)(v7 + 64);
  v11 = v8 | 7;
  v12 = v4 + v9;
  _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)(v4 + v9));
  swift_bridgeObjectRelease(*(_QWORD *)(v12 + 48));
  swift_bridgeObjectRelease(*(_QWORD *)(v12 + 56));
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v12 + *(int *)(v6 + 44), v5);
  return swift_deallocObject(v4, v10, v11);
}

uint64_t sub_145680@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = *(_QWORD *)(v3 + 16);
  v7 = *(_QWORD *)(v3 + 24);
  v8 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ListItemMetadataEditionsDescriptor(0, v6, v7, a2)
                                      - 8)
                          + 80);
  return sub_14285C(a1, v3 + ((v8 + 32) & ~v8), v6, v7, a3);
}

unint64_t sub_1456E8()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_2679B8;
  if (!qword_2679B8)
  {
    v1 = sub_7EF8(&qword_2679A8);
    v2[0] = &type metadata for Text;
    v2[1] = &protocol witness table for Text;
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
    sub_6FD0((unint64_t *)&qword_25EEA0, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_2679B8);
  }
  return result;
}

unint64_t sub_145790()
{
  unint64_t result;

  result = qword_2679C0;
  if (!qword_2679C0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ListItemMetadataDescriptorModel, &type metadata for ListItemMetadataDescriptorModel);
    atomic_store(result, (unint64_t *)&qword_2679C0);
  }
  return result;
}

uint64_t sub_1457DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(a3 + a2 - 8) + 24))(*(_QWORD *)(a3 + a2 - 16));
}

uint64_t sub_14580C()
{
  return 16;
}

__n128 sub_145818(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

unint64_t static SynchronousStaticIntent.kind.getter()
{
  return 0xD000000000000012;
}

uint64_t SynchronousStaticIntent.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1);
}

uint64_t sub_145870(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = swift_getWitnessTable(&protocol conformance descriptor for SynchronousStaticIntent<A>, a2);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_14589C@<X0>(_QWORD *a1@<X8>)
{
  unint64_t result;
  uint64_t v3;

  result = static SynchronousStaticIntent.kind.getter();
  *a1 = 0xD000000000000012;
  a1[1] = v3;
  return result;
}

uint64_t sub_1458D4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 16));
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 0, 1, &v4, a1 + 24);
    return 0;
  }
  return result;
}

uint64_t *sub_145940(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;

  v3 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 80);
  if (v5 <= 7 && *(_QWORD *)(v4 + 64) <= 0x18uLL && (*(_DWORD *)(v4 + 80) & 0x100000) == 0)
  {
    (*(void (**)(uint64_t *))(v4 + 16))(a1);
  }
  else
  {
    v8 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v8 + ((v5 + 16) & ~v5));
    swift_retain(v8);
  }
  return v3;
}

uint64_t sub_1459B0(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))();
}

uint64_t sub_1459C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 16))();
  return a1;
}

uint64_t sub_1459F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 24))();
  return a1;
}

uint64_t sub_145A20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 32))();
  return a1;
}

uint64_t sub_145A50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 40))();
  return a1;
}

uint64_t sub_145A80(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_145B30 + 4 * byte_1F0470[(v7 - 1)]))();
}

void sub_145B80(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = &dword_4;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = &dword_0 + 1;
    }
  }
  else
  {
    v11 = 0;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t type metadata accessor for SynchronousStaticIntent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10E40(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SynchronousStaticIntent);
}

double sub_145D3C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _OWORD *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  double result;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  char v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  _BYTE v44[25];

  v5 = v4;
  sub_B3D0(a1, (uint64_t)&v30, &qword_260AF0);
  if (*((_QWORD *)&v36 + 1))
  {
    v26 = v38;
    v27 = v39;
    v28 = v40;
    v22 = v34;
    v23 = v35;
    v24 = v36;
    v25 = v37;
    v18 = v30;
    v19 = v31;
    v20 = v32;
    v21 = v33;
    v29 = 0;
  }
  else
  {
    sub_B414((uint64_t)&v30, &qword_260AF0);
    v18 = 0u;
    v19 = 0u;
    v20 = 0u;
    v21 = 0u;
    v22 = 0u;
    v23 = 0u;
    v24 = 0u;
    v25 = 0u;
    v26 = 0u;
    v27 = 0u;
    v28 = 0;
    v29 = -1;
  }
  sub_167A4((uint64_t)&v18, (uint64_t)&v30, &qword_261850);
  *(_QWORD *)&v41 = a2;
  BYTE8(v41) = a3 & 1;
  *(_QWORD *)&v42 = swift_getKeyPath(&unk_1F06E8);
  v44[8] = 0;
  *(_QWORD *)&v44[16] = swift_getKeyPath(&unk_1F0710);
  v44[24] = 0;
  sub_B3D0(v5, a4, &qword_267A60);
  v9 = (_OWORD *)(a4 + *(int *)(sub_5440(&qword_267A68) + 36));
  v10 = v43;
  v9[12] = v42;
  v9[13] = v10;
  v9[14] = *(_OWORD *)v44;
  *(_OWORD *)((char *)v9 + 233) = *(_OWORD *)&v44[9];
  v11 = v39;
  v9[8] = v38;
  v9[9] = v11;
  v12 = v41;
  v9[10] = v40;
  v9[11] = v12;
  v13 = v35;
  v9[4] = v34;
  v9[5] = v13;
  v14 = v37;
  v9[6] = v36;
  v9[7] = v14;
  v15 = v31;
  *v9 = v30;
  v9[1] = v15;
  v16 = v33;
  v9[2] = v32;
  v9[3] = v16;
  *(_QWORD *)&result = swift_retain(a2).n128_u64[0];
  return result;
}

uint64_t SeriesEntityCardView.init(seriesIDForLogging:preheader:title:subtitle:footnote:coverViewModels:allowDoubleWide:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, int a8@<W7>, uint64_t a9@<X8>)
{
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  int *v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t, uint64_t);
  uint64_t result;
  uint64_t v30;
  uint64_t v31;

  HIDWORD(v30) = a8;
  v17 = type metadata accessor for Font.TextStyle(0);
  __chkstk_darwin(v17);
  v19 = (char *)&v30 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = 0x3FF0000000000000;
  (*(void (**)(char *, _QWORD))(v20 + 104))(v19, enum case for Font.TextStyle.largeTitle(_:));
  v21 = sub_62860();
  ScaledMetric.init(wrappedValue:relativeTo:)(&v31, v19, &type metadata for CGFloat, v21);
  v22 = (int *)type metadata accessor for SeriesEntityCardView(0);
  v23 = (_QWORD *)(a9 + v22[5]);
  *v23 = swift_getKeyPath(&unk_1F0550);
  v24 = sub_5440(&qword_25F548);
  swift_storeEnumTagMultiPayload(v23, v24, 0);
  v25 = (_QWORD *)(a9 + v22[6]);
  *v25 = a1;
  v25[1] = a2;
  v26 = a9 + v22[7];
  v27 = type metadata accessor for LocalizerRequest(0);
  v28 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 32);
  v28(v26, a3, v27);
  v28(a9 + v22[8], a4, v27);
  sub_167A4(a5, a9 + v22[9], &qword_25E0C8);
  result = sub_167A4(a6, a9 + v22[10], &qword_25E0C8);
  *(_QWORD *)(a9 + v22[11]) = a7;
  *(_BYTE *)(a9 + v22[12]) = BYTE4(v30);
  return result;
}

uint64_t type metadata accessor for SeriesEntityCardView(uint64_t a1)
{
  return sub_1FE90(a1, qword_267B40, (uint64_t)&nominal type descriptor for SeriesEntityCardView);
}

uint64_t sub_146088()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  int v18;
  int v19;
  uint64_t v20;
  char *v21;
  char v22;
  uint64_t v23;
  char v24;
  uint64_t result;
  uint64_t v26;

  v1 = v0;
  v2 = type metadata accessor for SizeConstants.Environment(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for SeriesEntityCardView(0);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v26 - v9;
  v11 = type metadata accessor for SizeConstants(0);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v16 = (char *)&v26 - v15;
  sub_3168C((uint64_t)&v26 - v15);
  v17 = &v16[*(int *)(v2 + 32)];
  v18 = *(unsigned __int16 *)v17 | (v17[2] << 16);
  if (*(_WORD *)v17 != 2)
  {
    sub_224DC((uint64_t)v16, type metadata accessor for SizeConstants.Environment);
    sub_1E428(v1, (uint64_t)v10, type metadata accessor for SeriesEntityCardView);
    if ((v18 & 0x10000) != 0)
    {
      v19 = v10[*(int *)(v5 + 48)];
      sub_224DC((uint64_t)v10, type metadata accessor for SeriesEntityCardView);
      sub_1E428(v1, (uint64_t)v8, type metadata accessor for SeriesEntityCardView);
      if (v19 == 1)
      {
        sub_3168C((uint64_t)v14);
        v20 = sub_21C88((uint64_t)v14, (uint64_t)v4, type metadata accessor for SizeConstants.Environment);
        v21 = &v4[*(int *)(v2 + 24)];
        v22 = DynamicTypeSize.isAccessibilitySize.getter(v20);
        sub_224DC((uint64_t)v8, type metadata accessor for SeriesEntityCardView);
        v23 = type metadata accessor for DynamicTypeSize(0);
        (*(void (**)(char *, uint64_t))(*(_QWORD *)(v23 - 8) + 8))(v21, v23);
        v24 = v22 ^ 1;
        return v24 & 1;
      }
    }
    else
    {
      sub_224DC((uint64_t)v10, type metadata accessor for SeriesEntityCardView);
      sub_1E428(v1, (uint64_t)v8, type metadata accessor for SeriesEntityCardView);
    }
    sub_224DC((uint64_t)v8, type metadata accessor for SeriesEntityCardView);
    v24 = 0;
    return v24 & 1;
  }
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD00000000000007DLL, 0x80000000001FDA40, "BooksUI/SizeConstants.swift", 27, 2, 39, 0);
  __break(1u);
  return result;
}

uint64_t SeriesEntityCardView.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  _BOOL4 v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  int *v42;
  BOOL *v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(uint64_t, uint64_t, uint64_t);
  int *v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  int *v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  double v58;
  double v59;
  uint64_t v60;
  double v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  id v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  _OWORD *v72;
  char *v73;
  uint64_t v74;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  unint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t *v101;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  __int128 v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  int *v131;
  uint64_t v132;
  uint64_t v133;
  _OWORD v134[10];
  uint64_t v135;

  v2 = v1;
  v126 = a1;
  v123 = type metadata accessor for ColorRenderingMode(0);
  v122 = *(_QWORD *)(v123 - 8);
  __chkstk_darwin(v123);
  v121 = (char *)&v103 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for SizeConstants.CornerRadius(0);
  __chkstk_darwin(v4);
  v124 = (uint64_t)&v103 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for SizeConstants(0);
  __chkstk_darwin(v6);
  v120 = (uint64_t)&v103 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v132 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v132);
  v125 = (char *)&v103 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v115 = type metadata accessor for ContentShapeKinds(0);
  v114 = *(_QWORD *)(v115 - 8);
  __chkstk_darwin(v115);
  v113 = (char *)&v103 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v105 = type metadata accessor for SeriesEntityCardView.TextLockupViewModel(0);
  __chkstk_darwin(v105);
  *(_QWORD *)&v127 = (char *)&v103 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v106 = type metadata accessor for SeriesEntityCardView.CardContents(0);
  __chkstk_darwin(v106);
  v12 = (uint64_t *)((char *)&v103 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = sub_5440(&qword_2626F0);
  __chkstk_darwin(v13);
  v129 = (uint64_t)&v103 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v128 = sub_5440(&qword_267A60);
  __chkstk_darwin(v128);
  v16 = (char *)&v103 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_5440(&qword_267A68);
  __chkstk_darwin(v17);
  v108 = (uint64_t)&v103 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v107 = sub_5440(&qword_267A70);
  __chkstk_darwin(v107);
  v109 = (char *)&v103 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v111 = sub_5440(&qword_267A78);
  __chkstk_darwin(v111);
  v112 = (char *)&v103 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v119 = sub_5440(&qword_267A80);
  v118 = *(_QWORD *)(v119 - 8);
  __chkstk_darwin(v119);
  v117 = (char *)&v103 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v110 = sub_5440(&qword_267A88);
  __chkstk_darwin(v110);
  v116 = (char *)&v103 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for SeriesEntityCardView(0);
  __chkstk_darwin(v23);
  v25 = (char *)&v103 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_25DB10 != -1)
    swift_once(&qword_25DB10, sub_72E8);
  v26 = type metadata accessor for Logger(0);
  sub_7120(v26, (uint64_t)qword_25DF00);
  v27 = sub_1E428(v1, (uint64_t)v25, type metadata accessor for SeriesEntityCardView);
  v28 = Logger.logObject.getter(v27);
  v29 = static os_log_type_t.debug.getter();
  v30 = os_log_type_enabled(v28, v29);
  v131 = (int *)v23;
  v130 = v16;
  if (v30)
  {
    v31 = (uint8_t *)swift_slowAlloc(12, -1);
    v32 = swift_slowAlloc(32, -1);
    *(_DWORD *)v31 = 136315138;
    *(_QWORD *)&v134[0] = v32;
    v33 = (uint64_t *)&v25[*(int *)(v23 + 24)];
    v104 = v2;
    v34 = *v33;
    v35 = v33[1];
    swift_bridgeObjectRetain(v35);
    v36 = v34;
    v23 = (uint64_t)v131;
    v133 = sub_14AC3C(v36, v35, (uint64_t *)v134);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v133, v134, v31 + 4, v31 + 12);
    v37 = v35;
    v2 = v104;
    swift_bridgeObjectRelease(v37);
    sub_224DC((uint64_t)v25, type metadata accessor for SeriesEntityCardView);
    _os_log_impl(&dword_0, v28, v29, "SwiftUI::SeriesEntityCardView::body evaluated, series=%s", v31, 0xCu);
    swift_arrayDestroy(v32, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v32, -1, -1);
    swift_slowDealloc(v31, -1, -1);
  }
  else
  {
    sub_224DC((uint64_t)v25, type metadata accessor for SeriesEntityCardView);
  }

  v38 = (uint64_t *)(v2 + *(int *)(v23 + 24));
  v39 = v38[1];
  v104 = *v38;
  swift_bridgeObjectRetain(v39);
  v40 = sub_146088();
  v41 = v2 + *(int *)(v23 + 28);
  v42 = (int *)v105;
  v43 = (BOOL *)v127;
  v44 = v127 + *(int *)(v105 + 20);
  v45 = type metadata accessor for LocalizerRequest(0);
  v46 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 16);
  v46(v44, v41, v45);
  v46((uint64_t)&v43[v42[6]], v2 + v131[8], v45);
  v47 = v131;
  sub_B3D0(v2 + v131[9], (uint64_t)&v43[v42[7]], &qword_25E0C8);
  sub_B3D0(v2 + v47[10], (uint64_t)&v43[v42[8]], &qword_25E0C8);
  *v43 = (v40 & 1) == 0;
  v48 = v47[11];
  v49 = *(_QWORD *)(v2 + v48);
  swift_bridgeObjectRetain(v49);
  v50 = sub_146088();
  *v12 = swift_getKeyPath(&unk_1F0550);
  v51 = sub_5440(&qword_25F548);
  swift_storeEnumTagMultiPayload(v12, v51, 0);
  v52 = (int *)v106;
  v53 = (_QWORD *)((char *)v12 + *(int *)(v106 + 20));
  *v53 = v104;
  v53[1] = v39;
  sub_21C88((uint64_t)v43, (uint64_t)v12 + v52[6], type metadata accessor for SeriesEntityCardView.TextLockupViewModel);
  *(_QWORD *)((char *)v12 + v52[7]) = v49;
  *((_BYTE *)v12 + v52[8]) = v50 & 1;
  v54 = _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0();
  v55 = v129;
  sub_87DE0(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v129, 0.0, 1, 0.0, 1, v54, v56);
  sub_224DC((uint64_t)v12, type metadata accessor for SeriesEntityCardView.CardContents);
  if ((sub_146088() & 1) != 0)
  {
    v57 = sub_5440(&qword_261660);
    ScaledMetric.wrappedValue.getter(v134, v57);
    v58 = *(double *)v134;
    v59 = 2.0;
  }
  else
  {
    v60 = sub_5440(&qword_261660);
    ScaledMetric.wrappedValue.getter(v134, v60);
    v58 = *(double *)v134 * 4.0;
    v59 = 3.0;
  }
  v61 = v59 / v58;
  v62 = (uint64_t)v130;
  sub_B3D0(v55, (uint64_t)v130, &qword_2626F0);
  v63 = v62 + *(int *)(v128 + 36);
  *(double *)v63 = v61;
  *(_WORD *)(v63 + 8) = 0;
  sub_B414(v55, &qword_2626F0);
  v64 = *(_QWORD *)(v2 + v48);
  if (*(_QWORD *)(v64 + 16))
  {
    sub_51C90(v64 + 32, (uint64_t)v134);
  }
  else
  {
    v135 = 0;
    memset(v134, 0, sizeof(v134));
  }
  v65 = objc_msgSend((id)objc_opt_self(UIColor), "systemGroupedBackgroundColor");
  v66 = Color.init(uiColor:)(v65);
  v67 = v108;
  sub_145D3C((uint64_t)v134, v66, 1, v108);
  swift_release(v66);
  sub_B414((uint64_t)v134, &qword_260AF0);
  v68 = sub_B414(v62, &qword_267A60);
  v69 = v113;
  static ContentShapeKinds.contextMenuPreview.getter(v68);
  v131 = (int *)(v2 + v47[5]);
  v70 = v120;
  sub_3168C(v120);
  v71 = v124;
  sub_1E428(v70, v124, type metadata accessor for SizeConstants.Environment);
  sub_224DC(v70, type metadata accessor for SizeConstants);
  sub_224DC(v71, type metadata accessor for SizeConstants.CornerRadius);
  v72 = v125;
  v73 = &v125[*(int *)(v132 + 20)];
  v74 = enum case for RoundedCornerStyle.continuous(_:);
  LODWORD(v130) = enum case for RoundedCornerStyle.continuous(_:);
  v129 = type metadata accessor for RoundedCornerStyle(0);
  v128 = *(_QWORD *)(*(_QWORD *)(v129 - 8) + 104);
  ((void (*)(char *, uint64_t, uint64_t))v128)(v73, v74, v129);
  __asm { FMOV            V0.2D, #16.0 }
  v127 = _Q0;
  *v72 = _Q0;
  v80 = (uint64_t)v109;
  v81 = (uint64_t)&v109[*(int *)(v107 + 36)];
  sub_1E428((uint64_t)v72, v81, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  v82 = sub_5440(&qword_267A90);
  v83 = v114;
  v84 = v115;
  (*(void (**)(uint64_t, char *, uint64_t))(v114 + 16))(v81 + *(int *)(v82 + 40), v69, v115);
  *(_BYTE *)(v81 + *(int *)(v82 + 36)) = 0;
  sub_B3D0(v67, v80, &qword_267A68);
  sub_224DC((uint64_t)v72, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  (*(void (**)(char *, uint64_t))(v83 + 8))(v69, v84);
  sub_B414(v67, &qword_267A68);
  sub_3168C(v70);
  sub_1E428(v70, v71, type metadata accessor for SizeConstants.Environment);
  sub_224DC(v70, type metadata accessor for SizeConstants);
  sub_224DC(v71, type metadata accessor for SizeConstants.CornerRadius);
  ((void (*)(char *, _QWORD, uint64_t))v128)((char *)v72 + *(int *)(v132 + 20), v130, v129);
  *v72 = v127;
  v85 = v111;
  v86 = (uint64_t)v112;
  v87 = (uint64_t)&v112[*(int *)(v111 + 36)];
  sub_1E428((uint64_t)v72, v87, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  *(_WORD *)(v87 + *(int *)(sub_5440(&qword_25F700) + 36)) = 256;
  sub_B3D0(v80, v86, &qword_267A70);
  sub_224DC((uint64_t)v72, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  sub_B414(v80, &qword_267A70);
  v88 = v122;
  v89 = v121;
  v90 = v123;
  (*(void (**)(char *, _QWORD, uint64_t))(v122 + 104))(v121, enum case for ColorRenderingMode.nonLinear(_:), v123);
  v91 = sub_1470D0();
  v92 = v117;
  View.drawingGroup(opaque:colorMode:)(0, v89, v85, v91);
  (*(void (**)(char *, uint64_t))(v88 + 8))(v89, v90);
  sub_B414(v86, &qword_267A78);
  v123 = _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0();
  v94 = v93;
  v95 = (uint64_t)v116;
  v96 = (uint64_t)&v116[*(int *)(v110 + 36)];
  sub_3168C(v70);
  sub_1E428(v70, v71, type metadata accessor for SizeConstants.Environment);
  sub_224DC(v70, type metadata accessor for SizeConstants);
  sub_224DC(v71, type metadata accessor for SizeConstants.CornerRadius);
  v97 = ((uint64_t (*)(char *, _QWORD, uint64_t))v128)((char *)v72 + *(int *)(v132 + 20), v130, v129);
  *v72 = v127;
  v98 = static Color.black.getter(v97);
  v99 = Color.opacity(_:)(0.22);
  swift_release(v98);
  sub_1E428((uint64_t)v72, v96, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  v100 = v96 + *(int *)(sub_5440(&qword_267AD0) + 36);
  *(_QWORD *)v100 = v99;
  *(_OWORD *)(v100 + 8) = xmmword_1ED590;
  *(_QWORD *)(v100 + 24) = 0x4018000000000000;
  sub_224DC((uint64_t)v72, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  v101 = (uint64_t *)(v96 + *(int *)(sub_5440(&qword_267AD8) + 36));
  *v101 = v123;
  v101[1] = v94;
  (*(void (**)(uint64_t, char *, uint64_t))(v118 + 32))(v95, v92, v119);
  return sub_167A4(v95, v126, &qword_267A88);
}

uint64_t type metadata accessor for SeriesEntityCardView.TextLockupViewModel(uint64_t a1)
{
  return sub_1FE90(a1, qword_267CA0, (uint64_t)&nominal type descriptor for SeriesEntityCardView.TextLockupViewModel);
}

uint64_t type metadata accessor for SeriesEntityCardView.CardContents(uint64_t a1)
{
  return sub_1FE90(a1, qword_267C00, (uint64_t)&nominal type descriptor for SeriesEntityCardView.CardContents);
}

unint64_t sub_1470D0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_267A98;
  if (!qword_267A98)
  {
    v1 = sub_7EF8(&qword_267A78);
    sub_147154();
    sub_7FD8(&qword_25F6F8, &qword_25F700, (uint64_t)&protocol conformance descriptor for _ClipEffect<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_267A98);
  }
  return result;
}

unint64_t sub_147154()
{
  unint64_t result;
  uint64_t v1;

  result = qword_267AA0;
  if (!qword_267AA0)
  {
    v1 = sub_7EF8(&qword_267A70);
    sub_1471D8();
    sub_7FD8(&qword_267AC8, &qword_267A90, (uint64_t)&protocol conformance descriptor for _ContentShapeKindModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_267AA0);
  }
  return result;
}

unint64_t sub_1471D8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_267AA8;
  if (!qword_267AA8)
  {
    v1 = sub_7EF8(&qword_267A68);
    sub_147244();
    sub_68468();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_267AA8);
  }
  return result;
}

unint64_t sub_147244()
{
  unint64_t result;
  uint64_t v1;

  result = qword_267AB0;
  if (!qword_267AB0)
  {
    v1 = sub_7EF8(&qword_267A60);
    sub_1472B0();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_267AB0);
  }
  return result;
}

unint64_t sub_1472B0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_267AB8;
  if (!qword_267AB8)
  {
    v1 = sub_7EF8(&qword_2626F0);
    sub_6FD0(&qword_267AC0, type metadata accessor for SeriesEntityCardView.CardContents, (uint64_t)&unk_1F0644);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_267AB8);
  }
  return result;
}

uint64_t sub_147338@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  double v26;
  double v27;
  double v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v51 = a1;
  v2 = type metadata accessor for SeriesEntityCardView.CardContents(0);
  v48 = *(_QWORD *)(v2 - 8);
  v3 = *(_QWORD *)(v48 + 64);
  __chkstk_darwin(v2);
  v4 = (char *)&v48 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = sub_5440(&qword_267CE8);
  __chkstk_darwin(v50);
  v6 = (uint64_t *)((char *)&v48 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = type metadata accessor for SizeConstants.Spacing(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for SizeConstants(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_5440(&qword_267CF0);
  __chkstk_darwin(v13);
  v15 = (char *)&v48 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = sub_5440(&qword_267CF8);
  v16 = __chkstk_darwin(v49);
  v18 = (char *)&v48 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v20 = (char *)&v48 - v19;
  if (*(_BYTE *)(v1 + *(int *)(v2 + 32)) == 1)
  {
    sub_3168C((uint64_t)v12);
    sub_1E428((uint64_t)v12, (uint64_t)v9, type metadata accessor for SizeConstants.Environment);
    sub_224DC((uint64_t)v12, type metadata accessor for SizeConstants);
    v21 = sub_224DC((uint64_t)v9, type metadata accessor for SizeConstants.Spacing);
    *(_QWORD *)v15 = static VerticalAlignment.center.getter(v21);
    *((_QWORD *)v15 + 1) = 0x4034000000000000;
    v15[16] = 0;
    v22 = sub_5440(&qword_267D20);
    v23 = sub_147768(v1, (uint64_t)&v15[*(int *)(v22 + 44)]);
    v24 = static Edge.Set.leading.getter(v23);
    sub_3168C((uint64_t)v12);
    sub_1E428((uint64_t)v12, (uint64_t)v9, type metadata accessor for SizeConstants.Environment);
    sub_224DC((uint64_t)v12, type metadata accessor for SizeConstants);
    v25 = sub_224DC((uint64_t)v9, type metadata accessor for SizeConstants.Spacing);
    v29 = EdgeInsets.init(_all:)(v25, 32.0, v26, v27, v28);
    v31 = v30;
    v33 = v32;
    v35 = v34;
    sub_B3D0((uint64_t)v15, (uint64_t)v18, &qword_267CF0);
    v36 = v49;
    v37 = &v18[*(int *)(v49 + 36)];
    *v37 = v24;
    *((double *)v37 + 1) = v29;
    *((_QWORD *)v37 + 2) = v31;
    *((_QWORD *)v37 + 3) = v33;
    *((_QWORD *)v37 + 4) = v35;
    v37[40] = 0;
    sub_B414((uint64_t)v15, &qword_267CF0);
    sub_167A4((uint64_t)v18, (uint64_t)v20, &qword_267CF8);
    sub_B3D0((uint64_t)v20, (uint64_t)v6, &qword_267CF8);
    swift_storeEnumTagMultiPayload(v6, v50, 0);
    v38 = sub_5440(&qword_267D00);
    v39 = sub_14E48C();
    v40 = sub_7FD8(&qword_267D18, &qword_267D00, (uint64_t)&protocol conformance descriptor for GeometryReader<A>);
    _ConditionalContent<>.init(storage:)(v6, v36, v38, v39, v40);
    return sub_B414((uint64_t)v20, &qword_267CF8);
  }
  else
  {
    sub_1E428(v1, (uint64_t)&v48 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for SeriesEntityCardView.CardContents);
    v42 = *(unsigned __int8 *)(v48 + 80);
    v43 = (v42 + 16) & ~v42;
    v44 = swift_allocObject(&unk_255350, v43 + v3, v42 | 7);
    sub_21C88((uint64_t)v4, v44 + v43, type metadata accessor for SeriesEntityCardView.CardContents);
    *v6 = sub_14E440;
    v6[1] = v44;
    swift_storeEnumTagMultiPayload(v6, v50, 1);
    v45 = sub_5440(&qword_267D00);
    v46 = sub_14E48C();
    v47 = sub_7FD8(&qword_267D18, &qword_267D00, (uint64_t)&protocol conformance descriptor for GeometryReader<A>);
    return _ConditionalContent<>.init(storage:)(v6, v49, v45, v46, v47);
  }
}

uint64_t sub_147768@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  double v41;
  double v42;
  double v43;
  double v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  double (**v57)@<D0>(uint64_t@<X8>);
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;

  v64 = a2;
  v3 = type metadata accessor for SeriesEntityCardView.CardContents(0);
  v4 = *(_QWORD *)(*(_QWORD *)(v3 - 8) + 64);
  v62 = *(_QWORD *)(v3 - 8);
  v63 = v4;
  __chkstk_darwin(v3);
  v61 = (uint64_t)&v59 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for SizeConstants.Spacing(0);
  __chkstk_darwin(v6);
  v60 = (uint64_t)&v59 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for SizeConstants(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v59 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for SeriesEntityCardView.TextLockupViewModel(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v59 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = (int *)type metadata accessor for SeriesEntityCardView.TextLockupView(0);
  __chkstk_darwin(v14);
  v16 = (uint64_t *)((char *)&v59 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  v17 = sub_5440(&qword_262630);
  v18 = __chkstk_darwin(v17);
  v20 = (char *)&v59 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v22 = (char *)&v59 - v21;
  v59 = sub_5440(&qword_267D28);
  v23 = __chkstk_darwin(v59);
  v25 = (char *)&v59 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  v27 = (char *)&v59 - v26;
  sub_1E428(a1 + *(int *)(v3 + 24), (uint64_t)v13, type metadata accessor for SeriesEntityCardView.TextLockupViewModel);
  *v16 = swift_getKeyPath(&unk_1F0550);
  v28 = sub_5440(&qword_25F548);
  swift_storeEnumTagMultiPayload(v16, v28, 0);
  v29 = (_QWORD *)((char *)v16 + v14[5]);
  *v29 = swift_getKeyPath(&unk_1F0698);
  v30 = sub_5440(&qword_25FAA0);
  swift_storeEnumTagMultiPayload(v29, v30, 0);
  v31 = (_QWORD *)((char *)v16 + v14[6]);
  *v31 = swift_getKeyPath(&unk_1F06C0);
  v32 = sub_5440(&qword_25F1E8);
  swift_storeEnumTagMultiPayload(v31, v32, 0);
  v33 = sub_21C88((uint64_t)v13, (uint64_t)v16 + v14[7], type metadata accessor for SeriesEntityCardView.TextLockupViewModel);
  v34 = static Alignment.leading.getter(v33);
  sub_87E44(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v20, 0.0, 1, 0.0, 1, v34, v35);
  v36 = sub_224DC((uint64_t)v16, type metadata accessor for SeriesEntityCardView.TextLockupView);
  v37 = static Color.mint.getter(v36);
  sub_B3D0((uint64_t)v20, (uint64_t)v22, &qword_262630);
  swift_release(v37);
  v38 = sub_B414((uint64_t)v20, &qword_262630);
  LOBYTE(v37) = static Edge.Set.vertical.getter(v38);
  sub_3168C((uint64_t)v10);
  v39 = v60;
  sub_1E428((uint64_t)v10, v60, type metadata accessor for SizeConstants.Environment);
  sub_224DC((uint64_t)v10, type metadata accessor for SizeConstants);
  v40 = sub_224DC(v39, type metadata accessor for SizeConstants.Spacing);
  v44 = EdgeInsets.init(_all:)(v40, 32.0, v41, v42, v43);
  v46 = v45;
  v48 = v47;
  v50 = v49;
  sub_B3D0((uint64_t)v22, (uint64_t)v25, &qword_262630);
  v51 = &v25[*(int *)(v59 + 36)];
  *v51 = v37;
  *((double *)v51 + 1) = v44;
  *((_QWORD *)v51 + 2) = v46;
  *((_QWORD *)v51 + 3) = v48;
  *((_QWORD *)v51 + 4) = v50;
  v51[40] = 0;
  sub_B414((uint64_t)v22, &qword_262630);
  sub_167A4((uint64_t)v25, (uint64_t)v27, &qword_267D28);
  v52 = v61;
  sub_1E428(a1, v61, type metadata accessor for SeriesEntityCardView.CardContents);
  v53 = *(unsigned __int8 *)(v62 + 80);
  v54 = (v53 + 16) & ~v53;
  v55 = swift_allocObject(&unk_255378, v54 + v63, v53 | 7);
  sub_21C88(v52, v55 + v54, type metadata accessor for SeriesEntityCardView.CardContents);
  sub_B3D0((uint64_t)v27, (uint64_t)v25, &qword_267D28);
  v56 = v64;
  sub_B3D0((uint64_t)v25, v64, &qword_267D28);
  v57 = (double (**)@<D0>(uint64_t@<X8>))(v56 + *(int *)(sub_5440(&qword_267D30) + 48));
  *v57 = sub_14E6C4;
  v57[1] = (double (*)@<D0>(uint64_t@<X8>))v55;
  swift_retain(v55);
  sub_B414((uint64_t)v27, &qword_267D28);
  swift_release(v55);
  return sub_B414((uint64_t)v25, &qword_267D28);
}

double sub_147C58@<D0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  unsigned __int8 v16;
  uint64_t v17;
  double v18;
  double v19;
  double v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  double result;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  char v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  _QWORD *v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int16 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  char v61;
  char v62;

  v4 = type metadata accessor for SizeConstants.Spacing(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for SizeConstants(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for SeriesEntityCardView.CardContents(0) + 28));
  v11 = swift_bridgeObjectRetain(v10);
  v12 = GeometryProxy.size.getter(v11);
  if (v12 <= 50.0)
    v12 = 50.0;
  SeriesCardCoverStackLayout.init(covers:containingWidth:)(v10, (uint64_t)&v54, v12);
  v14 = v55;
  if ((_QWORD)v55)
  {
    v44 = v57;
    v42 = (_QWORD *)*((_QWORD *)&v55 + 1);
    v43 = v56;
    v15 = v54;
    v41 = BYTE8(v56) & 1;
    v16 = static Edge.Set.top.getter(v13);
    sub_3168C((uint64_t)v9);
    sub_1E428((uint64_t)v9, (uint64_t)v6, type metadata accessor for SizeConstants.Environment);
    sub_224DC((uint64_t)v9, type metadata accessor for SizeConstants);
    v17 = sub_224DC((uint64_t)v6, type metadata accessor for SizeConstants.Spacing);
    v21 = EdgeInsets.init(_all:)(v17, 32.0, v18, v19, v20);
    v23 = v22;
    v25 = v24;
    v27 = v26;
    v28 = static Color.blue.getter();
    swift_release(v28);
    v45 = v15;
    v46 = v14;
    v47 = v42;
    *(_QWORD *)&v48 = v43;
    *((_QWORD *)&v48 + 1) = v41;
    v49 = v44;
    *(_QWORD *)&v50 = 0;
    *((_QWORD *)&v50 + 1) = v16;
    *(double *)&v51 = v21;
    *((_QWORD *)&v51 + 1) = v23;
    *(_QWORD *)&v52 = v25;
    *((_QWORD *)&v52 + 1) = v27;
    v53 = 0;
  }
  else
  {
    v45 = xmmword_1E50E0;
    v46 = 0;
    v47 = _swiftEmptyArrayStorage;
    v48 = 0u;
    v49 = 0u;
    v50 = 0u;
    v51 = 0u;
    v52 = 0u;
    v53 = 256;
  }
  v29 = sub_5440(&qword_267D38);
  v30 = sub_14E710();
  _ConditionalContent<>.init(storage:)(&v45, v29, &type metadata for Text, v30, &protocol witness table for Text);
  result = *(double *)&v54;
  v32 = v55;
  v33 = v56;
  v34 = v57;
  v35 = v58;
  v36 = v59;
  v37 = v60;
  v38 = v61;
  v39 = v62;
  *(_OWORD *)a2 = v54;
  *(_OWORD *)(a2 + 16) = v32;
  *(_OWORD *)(a2 + 32) = v33;
  *(_OWORD *)(a2 + 48) = v34;
  *(_OWORD *)(a2 + 64) = v35;
  *(_OWORD *)(a2 + 80) = v36;
  *(_OWORD *)(a2 + 96) = v37;
  *(_BYTE *)(a2 + 112) = v38;
  *(_BYTE *)(a2 + 113) = v39;
  return result;
}

uint64_t sub_147EC4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _OWORD *v30;
  uint64_t v31;
  uint64_t v32;

  v30 = a3;
  v5 = type metadata accessor for GeometryProxy(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for SeriesEntityCardView.CardContents(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_25DB10 != -1)
    swift_once(&qword_25DB10, sub_72E8);
  v12 = type metadata accessor for Logger(0);
  sub_7120(v12, (uint64_t)qword_25DF00);
  sub_1E428(a2, (uint64_t)v11, type metadata accessor for SeriesEntityCardView.CardContents);
  v13 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a1, v5);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v14, v15))
  {
    v16 = swift_slowAlloc(22, -1);
    v28 = a2;
    v17 = v16;
    v27 = swift_slowAlloc(32, -1);
    v32 = v27;
    *(_DWORD *)v17 = 136315394;
    v18 = (uint64_t *)&v11[*(int *)(v9 + 20)];
    v29 = a1;
    v20 = *v18;
    v19 = v18[1];
    swift_bridgeObjectRetain(v19);
    v31 = sub_14AC3C(v20, v19, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32, v17 + 4, v17 + 12);
    swift_bridgeObjectRelease(v19);
    v21 = sub_224DC((uint64_t)v11, type metadata accessor for SeriesEntityCardView.CardContents);
    *(_WORD *)(v17 + 12) = 2048;
    v31 = GeometryProxy.size.getter(v21);
    a1 = v29;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32, v17 + 14, v17 + 22);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    _os_log_impl(&dword_0, v14, v15, "SwiftUI::SeriesEntityCardView::body evaluated, series=%s, width=%f", (uint8_t *)v17, 0x16u);
    v22 = v27;
    swift_arrayDestroy(v27, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v22, -1, -1);
    v23 = v17;
    a2 = v28;
    swift_slowDealloc(v23, -1, -1);
  }
  else
  {
    sub_224DC((uint64_t)v11, type metadata accessor for SeriesEntityCardView.CardContents);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }

  v24 = v30;
  *v30 = xmmword_1F0530;
  *((_QWORD *)v24 + 2) = 0x4018000000000000;
  v25 = sub_5440(&qword_267D58);
  return sub_1481A4(a2, a1, (uint64_t)v24 + *(int *)(v25 + 44));
}

uint64_t sub_1481A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  double v34;
  double v35;
  double v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  double v45;
  double v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned __int8 v56;
  uint64_t v57;
  double v58;
  double v59;
  double v60;
  double v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  char *v109;
  __int128 v110;
  uint64_t v111;
  _QWORD *v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int16 v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unsigned __int8 v133;
  unsigned __int8 v134;

  v106 = a2;
  v107 = a3;
  v4 = type metadata accessor for SizeConstants.Spacing(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v91 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for SizeConstants(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v91 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for SeriesEntityCardView.TextLockupViewModel(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v91 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (int *)type metadata accessor for SeriesEntityCardView.TextLockupView(0);
  v14 = __chkstk_darwin(v13);
  v16 = (uint64_t *)((char *)&v91 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v14);
  v18 = (char *)&v91 - v17;
  v108 = (char *)sub_5440(&qword_267D60);
  v19 = __chkstk_darwin(v108);
  v21 = (char *)&v91 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v23 = (char *)&v91 - v22;
  v105 = type metadata accessor for SeriesEntityCardView.CardContents(0);
  sub_1E428(a1 + *(int *)(v105 + 24), (uint64_t)v12, type metadata accessor for SeriesEntityCardView.TextLockupViewModel);
  *v16 = swift_getKeyPath(&unk_1F0550);
  v24 = sub_5440(&qword_25F548);
  swift_storeEnumTagMultiPayload(v16, v24, 0);
  v25 = (_QWORD *)((char *)v16 + v13[5]);
  *v25 = swift_getKeyPath(&unk_1F0698);
  v26 = sub_5440(&qword_25FAA0);
  swift_storeEnumTagMultiPayload(v25, v26, 0);
  v27 = (_QWORD *)((char *)v16 + v13[6]);
  *v27 = swift_getKeyPath(&unk_1F06C0);
  v28 = sub_5440(&qword_25F1E8);
  swift_storeEnumTagMultiPayload(v27, v28, 0);
  v29 = sub_21C88((uint64_t)v12, (uint64_t)v16 + v13[7], type metadata accessor for SeriesEntityCardView.TextLockupViewModel);
  v30 = static Color.mint.getter(v29);
  sub_1E428((uint64_t)v16, (uint64_t)v18, type metadata accessor for SeriesEntityCardView.TextLockupView);
  swift_release(v30);
  v31 = sub_224DC((uint64_t)v16, type metadata accessor for SeriesEntityCardView.TextLockupView);
  LOBYTE(v30) = static Edge.Set.horizontal.getter(v31);
  sub_3168C((uint64_t)v9);
  sub_1E428((uint64_t)v9, (uint64_t)v6, type metadata accessor for SizeConstants.Environment);
  sub_224DC((uint64_t)v9, type metadata accessor for SizeConstants);
  v32 = sub_224DC((uint64_t)v6, type metadata accessor for SizeConstants.Spacing);
  v36 = EdgeInsets.init(_all:)(v32, 16.0, v33, v34, v35);
  v38 = v37;
  v40 = v39;
  v42 = v41;
  sub_1E428((uint64_t)v18, (uint64_t)v21, type metadata accessor for SeriesEntityCardView.TextLockupView);
  v43 = &v21[*((int *)v108 + 9)];
  *v43 = v30;
  *((double *)v43 + 1) = v36;
  *((_QWORD *)v43 + 2) = v38;
  *((_QWORD *)v43 + 3) = v40;
  *((_QWORD *)v43 + 4) = v42;
  v43[40] = 0;
  sub_224DC((uint64_t)v18, type metadata accessor for SeriesEntityCardView.TextLockupView);
  v109 = v21;
  v108 = v23;
  v44 = sub_167A4((uint64_t)v21, (uint64_t)v23, &qword_267D60);
  v45 = GeometryProxy.size.getter(v44);
  sub_3168C((uint64_t)v9);
  sub_1E428((uint64_t)v9, (uint64_t)v6, type metadata accessor for SizeConstants.Environment);
  sub_224DC((uint64_t)v9, type metadata accessor for SizeConstants);
  sub_224DC((uint64_t)v6, type metadata accessor for SizeConstants.Spacing);
  if (v45 + -48.0 > 50.0)
    v46 = v45 + -48.0;
  else
    v46 = 50.0;
  v47 = swift_bridgeObjectRetain(*(_QWORD *)(a1 + *(int *)(v105 + 28)));
  SeriesCardCoverStackLayout.init(covers:containingWidth:)(v47, (uint64_t)&v119, v46);
  v48 = v121;
  if (v121)
  {
    v49 = v126;
    v106 = v125;
    v105 = v123;
    v50 = (_QWORD *)v122;
    v52 = v119;
    v51 = v120;
    v53 = v124 & 1;
    v54 = static Color.blue.getter();
    swift_release(v54);
    v56 = static Edge.Set.horizontal.getter(v55);
    sub_3168C((uint64_t)v9);
    sub_1E428((uint64_t)v9, (uint64_t)v6, type metadata accessor for SizeConstants.Environment);
    sub_224DC((uint64_t)v9, type metadata accessor for SizeConstants);
    v57 = sub_224DC((uint64_t)v6, type metadata accessor for SizeConstants.Spacing);
    v61 = EdgeInsets.init(_all:)(v57, 24.0, v58, v59, v60);
    *(_QWORD *)&v110 = v52;
    *((_QWORD *)&v110 + 1) = v51;
    v111 = v48;
    v112 = v50;
    *(_QWORD *)&v113 = v105;
    *((_QWORD *)&v113 + 1) = v53;
    *(_QWORD *)&v114 = v106;
    *((_QWORD *)&v114 + 1) = v49;
    *(_QWORD *)&v115 = 0;
    *((_QWORD *)&v115 + 1) = v56;
    *(double *)&v116 = v61;
    *((_QWORD *)&v116 + 1) = v62;
    *(_QWORD *)&v117 = v63;
    *((_QWORD *)&v117 + 1) = v64;
    v118 = 0;
  }
  else
  {
    v110 = xmmword_1E50E0;
    v111 = 0;
    v112 = _swiftEmptyArrayStorage;
    v113 = 0u;
    v114 = 0u;
    v115 = 0u;
    v116 = 0u;
    v117 = 0u;
    v118 = 256;
  }
  v65 = sub_5440(&qword_267D38);
  v66 = sub_14E710();
  _ConditionalContent<>.init(storage:)(&v110, v65, &type metadata for Text, v66, &protocol witness table for Text);
  v67 = v120;
  v106 = v119;
  v68 = v121;
  v69 = v122;
  v70 = v123;
  v71 = v124;
  v72 = v125;
  v73 = v126;
  v105 = v127;
  v104 = v128;
  v103 = v129;
  v102 = v130;
  v101 = v131;
  v100 = v132;
  v99 = v133;
  v98 = v134;
  v74 = (uint64_t)v109;
  sub_B3D0((uint64_t)v108, (uint64_t)v109, &qword_267D60);
  v75 = v107;
  sub_B3D0(v74, v107, &qword_267D60);
  v76 = v75 + *(int *)(sub_5440(&qword_267D68) + 48);
  v77 = v106;
  *(_QWORD *)v76 = v106;
  *(_QWORD *)(v76 + 8) = v67;
  v78 = v67;
  v97 = v67;
  *(_QWORD *)(v76 + 16) = v68;
  *(_QWORD *)(v76 + 24) = v69;
  v79 = v68;
  v96 = v68;
  v80 = v69;
  v95 = v69;
  *(_QWORD *)(v76 + 32) = v70;
  *(_QWORD *)(v76 + 40) = v71;
  v81 = v70;
  v94 = v70;
  v82 = v71;
  v93 = v71;
  *(_QWORD *)(v76 + 48) = v72;
  *(_QWORD *)(v76 + 56) = v73;
  v83 = v72;
  v92 = v72;
  v84 = v105;
  v85 = v104;
  *(_QWORD *)(v76 + 64) = v105;
  *(_QWORD *)(v76 + 72) = v85;
  v86 = v103;
  v87 = v102;
  *(_QWORD *)(v76 + 80) = v103;
  *(_QWORD *)(v76 + 88) = v87;
  v88 = v101;
  v89 = v100;
  *(_QWORD *)(v76 + 96) = v101;
  *(_QWORD *)(v76 + 104) = v89;
  LOBYTE(v71) = v99;
  *(_BYTE *)(v76 + 112) = v99;
  LOBYTE(v72) = v98;
  *(_BYTE *)(v76 + 113) = v98;
  sub_14E794(v77, v78, v79, v80, v81, v82, v83, v73, v84, v85, v86, v87, v88, v89, v71, v72);
  sub_B414((uint64_t)v108, &qword_267D60);
  sub_14E7D8(v77, v97, v96, v95, v94, v93, v92, v73, v84, v85, v86, v87, v88, v89, v71, v72);
  return sub_B414((uint64_t)v109, &qword_267D60);
}

void sub_14897C(uint64_t a1, char a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, double a7, double a8, double a9)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  double v26;
  void (*v27)(char *, uint64_t);
  double v28;
  CGFloat MidX;
  double v30;
  double v31;
  uint64_t v32;
  double v33;
  double v34;
  double v35;
  CGFloat Height;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  uint64_t v42;
  double v43;
  double v44;
  uint64_t v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  uint64_t v51;
  _BYTE v52[8];
  CGRect v53;
  CGRect v54;
  CGRect v55;
  CGRect v56;
  CGRect v57;
  CGRect v58;

  v18 = type metadata accessor for LayoutSubview(0);
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v21 = (char *)&v45 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for LayoutSubviews(0);
  v23 = sub_6FD0(&qword_267E30, (uint64_t (*)(uint64_t))&type metadata accessor for LayoutSubviews, (uint64_t)&protocol conformance descriptor for LayoutSubviews);
  dispatch thunk of Collection.startIndex.getter(v22);
  dispatch thunk of Collection.endIndex.getter(&v51, v22, v23);
  if (dispatch thunk of Collection.distance(from:to:)(v52, &v51, v22, v23) == 2)
  {
    v53.origin.x = a3;
    v53.origin.y = a4;
    v53.size.width = a5;
    v53.size.height = a6;
    if (CGRectGetHeight(v53) > 0.0)
    {
      LayoutSubviews.subscript.getter(0);
      v24 = a2 & 1;
      v52[0] = v24;
      LOBYTE(v51) = 0;
      v47 = LayoutSubview.sizeThatFits(_:)(a1, v24, 0x7FF0000000000000, 0);
      v49 = a9;
      v26 = v25;
      v27 = *(void (**)(char *, uint64_t))(v19 + 8);
      v27(v21, v18);
      LayoutSubviews.subscript.getter(1);
      v52[0] = v24;
      LOBYTE(v51) = 0;
      v50 = LayoutSubview.sizeThatFits(_:)(a1, v24, 0x7FF0000000000000, 0);
      v48 = v28;
      v27(v21, v18);
      LayoutSubviews.subscript.getter(0);
      v54.origin.x = a3;
      v54.origin.y = a4;
      v54.size.width = a5;
      v54.size.height = a6;
      MidX = CGRectGetMidX(v54);
      v46 = a8;
      v30 = MidX;
      v55.origin.x = a3;
      v55.origin.y = a4;
      v55.size.width = a5;
      v55.size.height = a6;
      v31 = CGRectGetMinY(v55) + a7;
      v33 = static UnitPoint.top.getter(v32);
      v52[0] = 0;
      LOBYTE(v51) = 0;
      LayoutSubview.place(at:anchor:proposal:)(*(_QWORD *)&v47, 0, *(_QWORD *)&v26, 0, v30, v31, v33, v34);
      v27(v21, v18);
      v35 = v26 + a7 + v46;
      v56.origin.x = a3;
      v56.origin.y = a4;
      v56.size.width = a5;
      v56.size.height = a6;
      Height = CGRectGetHeight(v56);
      v37 = v48;
      v38 = Height - v48 + v49;
      if (v35 > v38)
        v39 = v35;
      else
        v39 = v38;
      LayoutSubviews.subscript.getter(1);
      v57.origin.x = a3;
      v57.origin.y = a4;
      v57.size.width = a5;
      v57.size.height = a6;
      v40 = CGRectGetMidX(v57);
      v58.origin.x = a3;
      v58.origin.y = a4;
      v58.size.width = a5;
      v58.size.height = a6;
      v41 = CGRectGetMinY(v58) + v39;
      v43 = static UnitPoint.top.getter(v42);
      v52[0] = 0;
      LOBYTE(v51) = 0;
      LayoutSubview.place(at:anchor:proposal:)(*(_QWORD *)&v50, 0, *(_QWORD *)&v37, 0, v40, v41, v43, v44);
      v27(v21, v18);
    }
  }
}

double sub_148CA0(uint64_t a1, char a2)
{
  double result;

  result = *(double *)&a1;
  if ((a2 & 1) != 0)
    return 10.0;
  return result;
}

void sub_148CC0(uint64_t a1, char a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6)
{
  double *v6;

  sub_14897C(a1, a2 & 1, a3, a4, a5, a6, *v6, v6[1], v6[2]);
}

uint64_t sub_148CE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_148D38(a1, a2, a3, a4, a5, a6, a7, a8, a9, (uint64_t (*)(uint64_t))&Layout.explicitAlignment(of:in:proposal:subviews:cache:));
}

uint64_t sub_148D0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_148D38(a1, a2, a3, a4, a5, a6, a7, a8, a9, (uint64_t (*)(uint64_t))&Layout.explicitAlignment(of:in:proposal:subviews:cache:));
}

uint64_t sub_148D38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t (*a10)(uint64_t))
{
  return a10(a1);
}

uint64_t sub_148D78@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t KeyPath;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;

  v2 = v1;
  v27 = a1;
  v26 = type metadata accessor for ColorScheme(0);
  v3 = *(_QWORD *)(v26 - 8);
  __chkstk_darwin(v26);
  v5 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_5440(&qword_267E38);
  __chkstk_darwin(v6);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_5440(&qword_267E40);
  __chkstk_darwin(v9);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_5440(&qword_267E48);
  __chkstk_darwin(v12);
  v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for SeriesEntityCardView.TextLockupView(0);
  v16 = *(_BYTE *)(v1 + *(int *)(v15 + 28));
  if ((v16 & 1) != 0)
    v17 = static HorizontalAlignment.center.getter(v15);
  else
    v17 = static HorizontalAlignment.leading.getter(v15);
  *(_QWORD *)v8 = v17;
  *((_QWORD *)v8 + 1) = 0;
  v8[16] = 0;
  v18 = sub_5440(&qword_267E50);
  sub_148FD8(v2, (uint64_t)&v8[*(int *)(v18 + 44)]);
  KeyPath = swift_getKeyPath(&unk_1F08F8);
  sub_B3D0((uint64_t)v8, (uint64_t)v11, &qword_267E38);
  v20 = &v11[*(int *)(v9 + 36)];
  *(_QWORD *)v20 = KeyPath;
  v20[8] = v16;
  sub_B414((uint64_t)v8, &qword_267E38);
  v21 = swift_getKeyPath(&unk_1F0928);
  v22 = v26;
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for ColorScheme.dark(_:), v26);
  v23 = (uint64_t *)&v14[*(int *)(v12 + 36)];
  v24 = sub_5440(&qword_25EE58);
  (*(void (**)(char *, char *, uint64_t))(v3 + 16))((char *)v23 + *(int *)(v24 + 28), v5, v22);
  *v23 = v21;
  sub_B3D0((uint64_t)v11, (uint64_t)v14, &qword_267E40);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v22);
  sub_B414((uint64_t)v11, &qword_267E40);
  return sub_167A4((uint64_t)v14, v27, &qword_267E48);
}

uint64_t sub_148FD8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  void (*v57)(_QWORD);
  uint64_t v58;
  uint64_t v59;
  uint64_t (*v60)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v61;
  double v62;
  uint64_t v63;
  void (*v64)(char *, uint64_t);
  uint64_t v65;
  void (*v66)(_QWORD);
  char *v67;
  uint64_t v68;
  uint64_t v69;
  __n128 v70;
  uint64_t KeyPath;
  char *v72;
  uint64_t v73;
  uint64_t *v74;
  void (*v75)(char *, uint64_t);
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  double v91;
  double v92;
  double v93;
  double v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  double v117;
  double v118;
  double v119;
  double v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  char *v134;
  char *v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  double v141;
  uint64_t v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  __n128 v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  char v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  int *v170;
  uint64_t v171;
  void (*v173)(char *, uint64_t);
  void (*v174)(char *, uint64_t, __n128);
  void (*v175)(char *, char *, uint64_t);
  unsigned int v176;
  void (*v177)(char *, _QWORD, uint64_t);
  void (*v178)(char *, uint64_t);
  uint64_t (*v179)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v180;
  unsigned int v181;
  void (*v182)(char *, _QWORD, uint64_t);
  uint64_t v183;
  void (*v184)(char *, uint64_t, uint64_t);
  char *v185;
  char *v186;
  char *v187;
  char *v188;
  uint64_t v189;
  char *v190;
  uint64_t v191;
  char *v192;
  char *v193;
  uint64_t v194;
  uint64_t v195;
  char *v196;
  char *v197;
  unsigned __int8 *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  char *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  char *v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;

  v212 = a2;
  v3 = sub_5440(&qword_25E0C8);
  __chkstk_darwin(v3);
  v207 = (char *)&v173 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_5440(&qword_267E58);
  v6 = __chkstk_darwin(v5);
  v211 = (uint64_t)&v173 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v209 = (uint64_t)&v173 - v8;
  v9 = sub_5440(&qword_267E60);
  __chkstk_darwin(v9);
  v202 = (uint64_t)&v173 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v204 = sub_5440(&qword_267E68);
  __chkstk_darwin(v204);
  v203 = (uint64_t)&v173 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v206 = sub_5440(&qword_267E70);
  v12 = __chkstk_darwin(v206);
  v210 = (uint64_t)&v173 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v12);
  v205 = (uint64_t)&v173 - v15;
  __chkstk_darwin(v14);
  v222 = (uint64_t)&v173 - v16;
  v17 = type metadata accessor for SizeConstants.Spacing(0);
  __chkstk_darwin(v17);
  v201 = (uint64_t)&v173 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for SizeConstants(0);
  __chkstk_darwin(v19);
  v200 = (uint64_t)&v173 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for ColorConstants(0);
  __chkstk_darwin(v21);
  v197 = (char *)&v173 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v219 = type metadata accessor for Font.Leading(0);
  v196 = *(char **)(v219 - 8);
  __chkstk_darwin(v219);
  v218 = (char *)&v173 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = sub_5440(&qword_25FE08);
  __chkstk_darwin(v24);
  v26 = (char *)&v173 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v216 = type metadata accessor for Font.TextStyle(0);
  v192 = *(char **)(v216 - 8);
  __chkstk_darwin(v216);
  v28 = (char *)&v173 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = type metadata accessor for FontConstants(0);
  __chkstk_darwin(v29);
  v31 = (char *)&v173 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = type metadata accessor for LocalizerRequest(0);
  v33 = *(_QWORD *)(v32 - 8);
  v220 = v32;
  v221 = v33;
  v34 = __chkstk_darwin(v32);
  v190 = (char *)&v173 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v34);
  v37 = (char *)&v173 - v36;
  v215 = type metadata accessor for LocalizedText(0);
  v193 = *(char **)(v215 - 8);
  __chkstk_darwin(v215);
  v39 = (char *)&v173 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v213 = sub_5440(&qword_25FE10);
  __chkstk_darwin(v213);
  v41 = (char *)&v173 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  v214 = sub_5440(&qword_267E78);
  __chkstk_darwin(v214);
  v43 = (char *)&v173 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  v224 = sub_5440(&qword_267E80);
  v208 = *(_QWORD *)(v224 - 8);
  v44 = __chkstk_darwin(v224);
  v189 = (uint64_t)&v173 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v44);
  v217 = (uint64_t)&v173 - v46;
  v195 = sub_5440(&qword_267E88);
  v47 = __chkstk_darwin(v195);
  v194 = (uint64_t)&v173 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = __chkstk_darwin(v47);
  v225 = (uint64_t)&v173 - v50;
  __chkstk_darwin(v49);
  v223 = (uint64_t)&v173 - v51;
  v52 = (int *)type metadata accessor for SeriesEntityCardView.TextLockupView(0);
  v53 = v52[7];
  v191 = a1;
  v54 = a1 + v53;
  v198 = (unsigned __int8 *)(a1 + v53);
  v199 = type metadata accessor for SeriesEntityCardView.TextLockupViewModel(0);
  v55 = v54 + *(int *)(v199 + 20);
  v184 = *(void (**)(char *, uint64_t, uint64_t))(v221 + 16);
  v184(v37, v55, v220);
  v185 = v37;
  LocalizedText.init(_:)(v37);
  v183 = a1 + v52[5];
  sub_32164((uint64_t)v31);
  v56 = v192;
  v57 = (void (*)(_QWORD))*((_QWORD *)v192 + 13);
  v181 = enum case for Font.TextStyle.footnote(_:);
  v58 = v216;
  v182 = (void (*)(char *, _QWORD, uint64_t))v57;
  v57(v28);
  v59 = type metadata accessor for Font.Design(0);
  v60 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v59 - 8) + 56);
  v180 = v59;
  v179 = v60;
  v61 = ((uint64_t (*)(char *, uint64_t, uint64_t))v60)(v26, 1, 1);
  v62 = static Font.Weight.semibold.getter(v61);
  v63 = static Font.system(_:design:weight:)(v28, v26, *(_QWORD *)&v62, 0);
  v188 = v26;
  sub_B414((uint64_t)v26, &qword_25FE08);
  v64 = (void (*)(char *, uint64_t))*((_QWORD *)v56 + 1);
  v192 = v28;
  v178 = v64;
  v64(v28, v58);
  v65 = (uint64_t)v196;
  v66 = (void (*)(_QWORD))*((_QWORD *)v196 + 13);
  v67 = v218;
  v176 = enum case for Font.Leading.tight(_:);
  v68 = v219;
  v177 = (void (*)(char *, _QWORD, uint64_t))v66;
  v66(v218);
  v69 = Font.leading(_:)(v67, v63);
  v70 = swift_release(v63);
  v174 = *(void (**)(char *, uint64_t, __n128))(v65 + 8);
  v174(v67, v68, v70);
  v187 = v31;
  sub_224DC((uint64_t)v31, type metadata accessor for FontConstants);
  KeyPath = swift_getKeyPath(&unk_1F0958);
  v72 = v193;
  v73 = v215;
  v175 = (void (*)(char *, char *, uint64_t))*((_QWORD *)v193 + 2);
  v175(v41, v39, v215);
  v74 = (uint64_t *)&v41[*(int *)(v213 + 36)];
  *v74 = KeyPath;
  v74[1] = v69;
  v75 = (void (*)(char *, uint64_t))*((_QWORD *)v72 + 1);
  v76 = (uint64_t)v197;
  v186 = v39;
  v173 = v75;
  v75(v39, v73);
  v77 = swift_getKeyPath(&unk_1F0988);
  sub_B3D0((uint64_t)v41, (uint64_t)v43, &qword_25FE10);
  v78 = &v43[*(int *)(v214 + 36)];
  *(_QWORD *)v78 = v77;
  *((_QWORD *)v78 + 1) = 1;
  v78[16] = 0;
  v193 = v41;
  sub_B414((uint64_t)v41, &qword_25FE10);
  v79 = v191;
  v80 = v191 + v52[6];
  _s7BooksUI18BuyButtonExternalsV6colorsAA14ColorConstantsVvg_0(v76);
  v81 = _s7BooksUI14ColorConstantsV19booksSecondaryLabel05SwiftB00C0Vvg_0();
  v82 = Color.opacity(_:)(0.8);
  swift_release(v81);
  sub_224DC(v76, type metadata accessor for ColorConstants);
  v83 = swift_getKeyPath(&unk_1F09B8);
  v84 = v217;
  sub_B3D0((uint64_t)v43, v217, &qword_267E78);
  v85 = (uint64_t *)(v84 + *(int *)(v224 + 36));
  *v85 = v83;
  v85[1] = v82;
  v196 = v43;
  v86 = sub_B414((uint64_t)v43, &qword_267E78);
  LOBYTE(v43) = static Edge.Set.bottom.getter(v86);
  v87 = v200;
  v88 = v79;
  sub_3168C(v200);
  v89 = v201;
  sub_1E428(v87, v201, type metadata accessor for SizeConstants.Environment);
  sub_224DC(v87, type metadata accessor for SizeConstants);
  v90 = sub_224DC(v89, type metadata accessor for SizeConstants.Spacing);
  v94 = EdgeInsets.init(_all:)(v90, 8.0, v91, v92, v93);
  v96 = v95;
  v98 = v97;
  v100 = v99;
  v101 = v194;
  sub_B3D0(v84, v194, &qword_267E80);
  v102 = v101 + *(int *)(v195 + 36);
  *(_BYTE *)v102 = (_BYTE)v43;
  *(double *)(v102 + 8) = v94;
  *(_QWORD *)(v102 + 16) = v96;
  *(_QWORD *)(v102 + 24) = v98;
  *(_QWORD *)(v102 + 32) = v100;
  *(_BYTE *)(v102 + 40) = 0;
  v103 = sub_B414(v84, &qword_267E80);
  v104 = static Color.brown.getter(v103);
  v105 = v225;
  sub_B3D0(v101, v225, &qword_267E88);
  swift_release(v104);
  sub_B414(v101, &qword_267E88);
  sub_167A4(v105, v223, &qword_267E88);
  v106 = v202;
  sub_149FD4(v88, v202);
  v195 = v80;
  _s7BooksUI18BuyButtonExternalsV6colorsAA14ColorConstantsVvg_0(v76);
  v107 = _s7BooksUI14ColorConstantsV14vibrantPrimary05SwiftB00C0Vvg_0();
  sub_224DC(v76, type metadata accessor for ColorConstants);
  v108 = swift_getKeyPath(&unk_1F09B8);
  v109 = v106;
  v110 = v106;
  v111 = v203;
  sub_B3D0(v109, v203, &qword_267E60);
  v112 = (uint64_t *)(v111 + *(int *)(v204 + 36));
  *v112 = v108;
  v112[1] = v107;
  v113 = sub_B414(v110, &qword_267E60);
  LOBYTE(v108) = static Edge.Set.bottom.getter(v113);
  sub_3168C(v87);
  v114 = v220;
  sub_1E428(v87, v89, type metadata accessor for SizeConstants.Environment);
  v115 = v221;
  sub_224DC(v87, type metadata accessor for SizeConstants);
  v116 = sub_224DC(v89, type metadata accessor for SizeConstants.Spacing);
  v120 = EdgeInsets.init(_all:)(v116, 2.0, v117, v118, v119);
  v122 = v121;
  v124 = v123;
  v126 = v125;
  v127 = v205;
  sub_B3D0(v111, v205, &qword_267E68);
  v128 = v127 + *(int *)(v206 + 36);
  *(_BYTE *)v128 = v108;
  v129 = (uint64_t)v207;
  *(double *)(v128 + 8) = v120;
  *(_QWORD *)(v128 + 16) = v122;
  *(_QWORD *)(v128 + 24) = v124;
  *(_QWORD *)(v128 + 32) = v126;
  *(_BYTE *)(v128 + 40) = 0;
  sub_B414(v111, &qword_267E68);
  sub_167A4(v127, v222, &qword_267E70);
  LODWORD(v206) = *v198;
  sub_B3D0((uint64_t)&v198[*(int *)(v199 + 32)], v129, &qword_25E0C8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v115 + 48))(v129, 1, v114) == 1)
  {
    sub_B414(v129, &qword_25E0C8);
    v130 = 1;
    v131 = v209;
    v132 = v224;
  }
  else
  {
    v133 = v190;
    (*(void (**)(char *, uint64_t, uint64_t))(v115 + 32))(v190, v129, v114);
    v134 = v185;
    v184(v185, (uint64_t)v133, v114);
    v135 = v186;
    LocalizedText.init(_:)(v134);
    v136 = (uint64_t)v187;
    sub_32164((uint64_t)v187);
    v137 = v192;
    v138 = v216;
    v182(v192, v181, v216);
    v139 = (uint64_t)v188;
    v140 = v179(v188, 1, 1, v180);
    v141 = static Font.Weight.medium.getter(v140);
    v142 = static Font.system(_:design:weight:)(v137, v139, *(_QWORD *)&v141, 0);
    sub_B414(v139, &qword_25FE08);
    v178(v137, v138);
    v143 = v218;
    v144 = v219;
    v177(v218, v176, v219);
    v145 = Font.leading(_:)(v143, v142);
    v146 = swift_release(v142);
    v174(v143, v144, v146);
    sub_224DC(v136, type metadata accessor for FontConstants);
    v147 = swift_getKeyPath(&unk_1F0958);
    v148 = (uint64_t)v193;
    v149 = v215;
    v175(v193, v135, v215);
    v150 = (uint64_t *)(v148 + *(int *)(v213 + 36));
    *v150 = v147;
    v150[1] = v145;
    v173(v135, v149);
    v151 = swift_getKeyPath(&unk_1F0988);
    v152 = (uint64_t)v196;
    sub_B3D0(v148, (uint64_t)v196, &qword_25FE10);
    v153 = v152 + *(int *)(v214 + 36);
    *(_QWORD *)v153 = v151;
    *(_QWORD *)(v153 + 8) = 1;
    *(_BYTE *)(v153 + 16) = 0;
    sub_B414(v148, &qword_25FE10);
    _s7BooksUI18BuyButtonExternalsV6colorsAA14ColorConstantsVvg_0(v76);
    v154 = _s7BooksUI14ColorConstantsV19booksSecondaryLabel05SwiftB00C0Vvg_0();
    v155 = Color.opacity(_:)(0.8);
    swift_release(v154);
    sub_224DC(v76, type metadata accessor for ColorConstants);
    v156 = swift_getKeyPath(&unk_1F09B8);
    v157 = v189;
    sub_B3D0(v152, v189, &qword_267E78);
    v158 = v224;
    v159 = (uint64_t *)(v157 + *(int *)(v224 + 36));
    *v159 = v156;
    v159[1] = v155;
    v160 = sub_B414(v152, &qword_267E78);
    v161 = static Color.brown.getter(v160);
    v162 = v217;
    sub_B3D0(v157, v217, &qword_267E80);
    swift_release(v161);
    sub_B414(v157, &qword_267E80);
    (*(void (**)(char *, uint64_t))(v115 + 8))(v133, v114);
    v131 = v209;
    sub_167A4(v162, v209, &qword_267E80);
    v130 = 0;
    v132 = v158;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v208 + 56))(v131, v130, 1, v132);
  v163 = v206;
  LODWORD(v224) = v206 ^ 1;
  v164 = v223;
  v165 = v225;
  sub_B3D0(v223, v225, &qword_267E88);
  v166 = v222;
  v167 = v210;
  sub_B3D0(v222, v210, &qword_267E70);
  v168 = v211;
  sub_B3D0(v131, v211, &qword_267E58);
  v169 = v212;
  sub_B3D0(v165, v212, &qword_267E88);
  v170 = (int *)sub_5440(&qword_267E90);
  sub_B3D0(v167, v169 + v170[12], &qword_267E70);
  v171 = v169 + v170[16];
  *(_QWORD *)v171 = 0;
  *(_BYTE *)(v171 + 8) = v224;
  *(_BYTE *)(v171 + 9) = v163;
  sub_B3D0(v168, v169 + v170[20], &qword_267E58);
  sub_B414(v131, &qword_267E58);
  sub_B414(v166, &qword_267E70);
  sub_B414(v164, &qword_267E88);
  sub_B414(v168, &qword_267E58);
  sub_B414(v167, &qword_267E70);
  return sub_B414(v165, &qword_267E88);
}

uint64_t sub_149FD4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t (*v39)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  void (*v42)(_QWORD);
  char *v43;
  uint64_t v44;
  uint64_t v45;
  __n128 v46;
  uint64_t KeyPath;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  void (*v53)(char *, uint64_t);
  uint64_t v54;
  char *v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  char *v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  double v74;
  uint64_t v75;
  char *v76;
  void (*v77)(char *, uint64_t);
  uint64_t v78;
  uint64_t v79;
  __n128 v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v96;
  void (*v97)(char *, uint64_t, __n128);
  void (*v98)(char *, char *, uint64_t);
  unsigned int v99;
  void (*v100)(char *, _QWORD, uint64_t);
  uint64_t (*v101)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v102;
  void (*v103)(char *, _QWORD, uint64_t);
  void (*v104)(char *, uint64_t, uint64_t);
  char *v105;
  char *v106;
  char *v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  char *v114;
  char *v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;

  v120 = a2;
  v3 = sub_5440(&qword_25E0C8);
  __chkstk_darwin(v3);
  v115 = (char *)&v96 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_5440(&qword_267E98);
  v6 = __chkstk_darwin(v5);
  v119 = (uint64_t)&v96 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v118 = (uint64_t)&v96 - v8;
  v127 = type metadata accessor for Font.Leading(0);
  v114 = *(char **)(v127 - 8);
  __chkstk_darwin(v127);
  v126 = (char *)&v96 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_5440(&qword_25FE08);
  __chkstk_darwin(v10);
  v12 = (char *)&v96 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v125 = type metadata accessor for Font.TextStyle(0);
  v109 = *(_QWORD *)(v125 - 8);
  __chkstk_darwin(v125);
  v123 = (char *)&v96 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for FontConstants(0);
  __chkstk_darwin(v14);
  v130 = (uint64_t)&v96 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for LocalizerRequest(0);
  v17 = *(_QWORD *)(v16 - 8);
  v110 = v16;
  v121 = v17;
  v18 = __chkstk_darwin(v16);
  v117 = (char *)&v96 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v21 = (char *)&v96 - v20;
  v124 = type metadata accessor for LocalizedText(0);
  v113 = *(char **)(v124 - 8);
  __chkstk_darwin(v124);
  v107 = (char *)&v96 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v122 = sub_5440(&qword_25FE10);
  __chkstk_darwin(v122);
  v24 = (char *)&v96 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v128 = sub_5440(&qword_267E78);
  v116 = *(_QWORD *)(v128 - 8);
  v25 = __chkstk_darwin(v128);
  v27 = (char *)&v96 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __chkstk_darwin(v25);
  v108 = (char *)&v96 - v29;
  __chkstk_darwin(v28);
  v129 = (uint64_t)&v96 - v30;
  v31 = a1 + *(int *)(type metadata accessor for SeriesEntityCardView.TextLockupView(0) + 28);
  v112 = v31;
  v111 = type metadata accessor for SeriesEntityCardView.TextLockupViewModel(0);
  v32 = v31 + *(int *)(v111 + 24);
  v104 = *(void (**)(char *, uint64_t, uint64_t))(v17 + 16);
  v104(v21, v32, v16);
  v105 = v21;
  LocalizedText.init(_:)(v21);
  sub_32164(v130);
  v33 = v109;
  v34 = v123;
  v35 = v125;
  v103 = *(void (**)(char *, _QWORD, uint64_t))(v109 + 104);
  v103(v123, enum case for Font.TextStyle.title3(_:), v125);
  v36 = enum case for Font.Design.serif (_:);
  v37 = type metadata accessor for Font.Design(0);
  v38 = *(_QWORD *)(v37 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v38 + 104))(v12, v36, v37);
  v39 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v38 + 56);
  v102 = v37;
  v101 = v39;
  v39(v12, 0, 1, v37);
  v40 = static Font.system(_:design:weight:)(v34, v12, 0, 1);
  v106 = v12;
  sub_B414((uint64_t)v12, &qword_25FE08);
  v109 = *(_QWORD *)(v33 + 8);
  ((void (*)(char *, uint64_t))v109)(v34, v35);
  v41 = (uint64_t)v114;
  v42 = (void (*)(_QWORD))*((_QWORD *)v114 + 13);
  v43 = v126;
  v99 = enum case for Font.Leading.tight(_:);
  v44 = v127;
  v100 = (void (*)(char *, _QWORD, uint64_t))v42;
  v42(v126);
  v45 = Font.leading(_:)(v43, v40);
  v46 = swift_release(v40);
  v97 = *(void (**)(char *, uint64_t, __n128))(v41 + 8);
  v97(v43, v44, v46);
  sub_224DC(v130, type metadata accessor for FontConstants);
  KeyPath = swift_getKeyPath(&unk_1F0958);
  v48 = v113;
  v49 = v107;
  v50 = v124;
  v98 = (void (*)(char *, char *, uint64_t))*((_QWORD *)v113 + 2);
  v98(v24, v107, v124);
  v51 = v121;
  v52 = (uint64_t *)&v24[*(int *)(v122 + 36)];
  *v52 = KeyPath;
  v52[1] = v45;
  v53 = (void (*)(char *, uint64_t))*((_QWORD *)v48 + 1);
  v54 = (uint64_t)v108;
  v55 = v49;
  v53(v49, v50);
  v56 = swift_getKeyPath(&unk_1F0988);
  sub_B3D0((uint64_t)v24, (uint64_t)v27, &qword_25FE10);
  v57 = &v27[*(int *)(v128 + 36)];
  *(_QWORD *)v57 = v56;
  *((_QWORD *)v57 + 1) = 3;
  v57[16] = 0;
  v113 = v24;
  v58 = sub_B414((uint64_t)v24, &qword_25FE10);
  v59 = static Color.brown.getter(v58);
  sub_B3D0((uint64_t)v27, v54, &qword_267E78);
  v60 = v59;
  v61 = v110;
  swift_release(v60);
  v114 = v27;
  sub_B414((uint64_t)v27, &qword_267E78);
  v62 = (uint64_t)v115;
  sub_167A4(v54, v129, &qword_267E78);
  sub_B3D0(v112 + *(int *)(v111 + 28), v62, &qword_25E0C8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v51 + 48))(v62, 1, v61) == 1)
  {
    sub_B414(v62, &qword_25E0C8);
    v63 = 1;
    v64 = v118;
    v65 = v128;
  }
  else
  {
    v66 = v117;
    (*(void (**)(char *, uint64_t, uint64_t))(v51 + 32))(v117, v62, v61);
    v67 = v105;
    v104(v105, (uint64_t)v66, v61);
    v68 = v55;
    LocalizedText.init(_:)(v67);
    v69 = v130;
    sub_32164(v130);
    v70 = v123;
    v71 = v125;
    v103(v123, enum case for Font.TextStyle.subheadline(_:), v125);
    v72 = (uint64_t)v106;
    v73 = v101(v106, 1, 1, v102);
    v74 = static Font.Weight.medium.getter(v73);
    v75 = static Font.system(_:design:weight:)(v70, v72, *(_QWORD *)&v74, 0);
    sub_B414(v72, &qword_25FE08);
    ((void (*)(char *, uint64_t))v109)(v70, v71);
    v76 = v126;
    v77 = v53;
    v78 = v127;
    v100(v126, v99, v127);
    v79 = Font.leading(_:)(v76, v75);
    v80 = swift_release(v75);
    v97(v76, v78, v80);
    sub_224DC(v69, type metadata accessor for FontConstants);
    v81 = swift_getKeyPath(&unk_1F0958);
    v82 = (uint64_t)v113;
    v83 = v124;
    v98(v113, v68, v124);
    v84 = (uint64_t *)(v82 + *(int *)(v122 + 36));
    *v84 = v81;
    v84[1] = v79;
    v77(v68, v83);
    v85 = swift_getKeyPath(&unk_1F0988);
    v86 = (uint64_t)v114;
    sub_B3D0(v82, (uint64_t)v114, &qword_25FE10);
    v87 = v128;
    v88 = v86 + *(int *)(v128 + 36);
    *(_QWORD *)v88 = v85;
    *(_QWORD *)(v88 + 8) = 2;
    *(_BYTE *)(v88 + 16) = 0;
    v89 = sub_B414(v82, &qword_25FE10);
    v90 = static Color.brown.getter(v89);
    sub_B3D0(v86, v54, &qword_267E78);
    swift_release(v90);
    sub_B414(v86, &qword_267E78);
    (*(void (**)(char *, uint64_t))(v121 + 8))(v117, v61);
    v64 = v118;
    sub_167A4(v54, v118, &qword_267E78);
    v63 = 0;
    v65 = v87;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v116 + 56))(v64, v63, 1, v65);
  v91 = v129;
  sub_B3D0(v129, v54, &qword_267E78);
  v92 = v119;
  sub_B3D0(v64, v119, &qword_267E98);
  v93 = v120;
  sub_B3D0(v54, v120, &qword_267E78);
  v94 = sub_5440(&qword_267EA0);
  sub_B3D0(v92, v93 + *(int *)(v94 + 48), &qword_267E98);
  sub_B414(v64, &qword_267E98);
  sub_B414(v91, &qword_267E78);
  sub_B414(v92, &qword_267E98);
  return sub_B414(v54, &qword_267E78);
}

uint64_t static ShelfGridLayout.seriesEntityCard(context:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t (**v13)@<X0>(uint64_t@<X0>, double *@<X8>);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD v20[2];
  char v21;

  v4 = type metadata accessor for ShelfGridLayoutContext(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  __chkstk_darwin(v4);
  v7 = (char *)v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1E428(a1, (uint64_t)v7, type metadata accessor for ShelfGridLayoutContext);
  v8 = *(unsigned __int8 *)(v5 + 80);
  v9 = (v8 + 16) & ~v8;
  v10 = swift_allocObject(&unk_255300, v9 + v6, v8 | 7);
  sub_21C88((uint64_t)v7, v10 + v9, type metadata accessor for ShelfGridLayoutContext);
  v21 = *(_BYTE *)(a1 + 8);
  v11 = *(_OWORD *)(a1 + 32);
  v20[0] = *(_OWORD *)(a1 + 16);
  v20[1] = v11;
  v12 = ShelfGridBreakpoint.resolveColumns(for:dynamicTypeSize:)((uint64_t *)v20);
  v13 = (uint64_t (**)@<X0>(uint64_t@<X0>, double *@<X8>))((char *)a2 + *(int *)(sub_5440(&qword_267AE0) + 48));
  *a2 = 1;
  v14 = swift_allocObject(&unk_255328, 41, 7);
  *(_QWORD *)(v14 + 16) = v12;
  *(_QWORD *)(v14 + 24) = sub_14B39C;
  *(_QWORD *)(v14 + 32) = v10;
  *(_BYTE *)(v14 + 40) = 1;
  *v13 = sub_14B420;
  v13[1] = (uint64_t (*)@<X0>(uint64_t@<X0>, double *@<X8>))v14;
  v15 = enum case for ShelfGridItemWidth.calculate(_:);
  v16 = type metadata accessor for ShelfGridItemWidth(0);
  (*(void (**)(uint64_t (**)@<X0>(uint64_t@<X0>, double *@<X8>), uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 104))(v13, v15, v16);
  v17 = enum case for ShelfGridLayout.horizontal(_:);
  v18 = type metadata accessor for ShelfGridLayout(0);
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 104))(a2, v17, v18);
}

uint64_t sub_14AAB4@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t result;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  char v15;
  uint64_t v16;

  v4 = type metadata accessor for ShelfGridLayoutContext(0);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = __chkstk_darwin(v5);
  v10 = (char *)&v16 - v9;
  if (*(_BYTE *)(a1 + 8) == 2)
    goto LABEL_10;
  if (*(_BYTE *)(a1 + 8))
  {
    v12 = *(_QWORD *)a1;
    sub_1E428(a1, (uint64_t)&v16 - v9, type metadata accessor for ShelfGridLayoutContext);
    if (v12 > 3)
    {
      sub_224DC((uint64_t)v10, type metadata accessor for ShelfGridLayoutContext);
      sub_1E428(a1, (uint64_t)v7, type metadata accessor for ShelfGridLayoutContext);
LABEL_11:
      result = sub_224DC((uint64_t)v7, type metadata accessor for ShelfGridLayoutContext);
      goto LABEL_12;
    }
    v13 = v10[*(int *)(v4 + 32) + 2];
    sub_224DC((uint64_t)v10, type metadata accessor for ShelfGridLayoutContext);
    v14 = sub_1E428(a1, (uint64_t)v7, type metadata accessor for ShelfGridLayoutContext);
    if (v13 != 1)
      goto LABEL_11;
    v15 = DynamicTypeSize.isAccessibilitySize.getter(v14);
    result = sub_224DC((uint64_t)v7, type metadata accessor for ShelfGridLayoutContext);
    if ((v15 & 1) != 0)
    {
LABEL_12:
      v11 = 0x3FF0000000000000;
      goto LABEL_13;
    }
LABEL_10:
    v11 = 0x4000000000000000;
    goto LABEL_13;
  }
  result = DynamicTypeSize.isAccessibilitySize.getter(result);
  v11 = 0x4008000000000000;
  if ((result & 1) != 0)
    v11 = 0x3FF0000000000000;
LABEL_13:
  *(_QWORD *)a2 = v11;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 0;
  return result;
}

uint64_t sub_14AC3C(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  void *ObjectType;

  v6 = sub_14AD0C(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = (void *)swift_getObjectType(v6);
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      sub_93194((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      sub_93194((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain(a2);
  }
  _s7BooksUI13AnyPagedFrameVwxx_0(v12);
  return v7;
}

uint64_t sub_14AD0C(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        v12 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v12)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (_QWORD *)&__dst[v12] || (char *)__src + v12 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter(0, HIBYTE(a6) & 0xF, __dst, a3);
            result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    result = sub_14AEC4(a5, a6);
    *a1 = v13;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0)
    goto LABEL_13;
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  v8 = _StringObject.sharedUTF8.getter(a5, a6);
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringTesting.swift", 25, 2, 151, 0);
    __break(1u);
LABEL_17:
    LOBYTE(v14) = 2;
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableRawPointer.initializeMemory overlapping range", 58, 2, "Swift/UnsafeRawPointer.swift", 28, v14, 1173, 0);
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_unknownObjectRetain(a6 & 0xFFFFFFFFFFFFFFFLL);
}

uint64_t sub_14AEC4(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = (uint64_t)sub_14AF58(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
    v2 = sub_14B1A8(0, *(_QWORD *)(v2 + 16) + 1, 1, (char *)v2);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = sub_14B1A8(v3 > 1, v4 + 1, 1, (char *)v2);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

_QWORD *sub_14AF58(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  char v8;
  _QWORD *result;
  int v10;

  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_10;
  if ((a2 & 0x2000000000000000) != 0)
    v4 = HIBYTE(a2) & 0xF;
  else
    v4 = a1 & 0xFFFFFFFFFFFFLL;
  if (v4)
  {
    while (1)
    {
      v5 = sub_14B0CC(v4, 0);
      if (v4 < 0)
        break;
      v6 = v5;
      v7 = _StringGuts.copyUTF8(into:)(v5 + 4, v4, a1, a2);
      if ((v8 & 1) != 0)
        goto LABEL_14;
      if (v7 == v4)
        return v6;
      LOBYTE(v10) = 2;
      _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "invalid Collection: less than 'count' elements in collection", 60, 2, "Swift/ContiguousArrayBuffer.swift", 33, v10, 1122, 0);
      __break(1u);
LABEL_10:
      v4 = String.UTF8View._foreignCount()();
      if (!v4)
        return &_swiftEmptyArrayStorage;
    }
    LOBYTE(v10) = 2;
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableBufferPointer with negative count", 46, 2, "Swift/UnsafeBufferPointer.swift", 31, v10, 71, 0);
    __break(1u);
LABEL_14:
    LOBYTE(v10) = 2;
    result = (_QWORD *)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Insufficient space allocated to copy string contents", 52, 2, "Swift/StringUTF8View.swift", 26, v10, 430, 0);
    __break(1u);
  }
  else
  {
    return &_swiftEmptyArrayStorage;
  }
  return result;
}

_QWORD *sub_14B0CC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  size_t v6;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return &_swiftEmptyArrayStorage;
  v4 = sub_5440(&qword_267D70);
  v5 = (_QWORD *)swift_allocObject(v4, v2 + 32, 7);
  v6 = j__malloc_size(v5);
  v5[2] = a1;
  v5[3] = 2 * v6 - 64;
  return v5;
}

uint64_t sub_14B130(unint64_t a1, uint64_t a2, uint64_t a3)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;

  v5 = a1;
  v6 = a1 >> 16;
  v7 = (unsigned __int16)a1 >> 14;
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    v13 = String.UTF16View.index(_:offsetBy:)(15, v6, a2);
    v14 = v13 + (v7 << 16);
    v15 = v13 & 0xFFFFFFFFFFFFFFFCLL | v5 & 3;
    v16 = v14 & 0xFFFFFFFFFFFF0000;
    if (!v7)
      v16 = v15;
    return v16 | 4;
  }
  else
  {
    v8 = String.UTF8View._foreignIndex(_:offsetBy:)(15, v6);
    v9 = v8 + (v7 << 16);
    v10 = v8 & 0xFFFFFFFFFFFFFFFCLL | v5 & 3;
    v11 = v9 & 0xFFFFFFFFFFFF0000;
    if (!v7)
      v11 = v10;
    return v11 | 8;
  }
}

uint64_t sub_14B1A8(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_5440(&qword_267D70);
    v11 = (char *)swift_allocObject(v10, v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * v12 - 64;
  }
  else
  {
    v11 = (char *)&_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v8])
      memmove(v13, v14, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[v8] || v13 >= &v14[v8])
  {
    memcpy(v13, v14, v8);
LABEL_28:
    swift_bridgeObjectRelease(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_14B2F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = type metadata accessor for ShelfGridLayoutContext(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v0 + v4;
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + 24));
  v7 = *(_QWORD *)(v0 + v4 + 32);
  if (v7)
  {
    swift_bridgeObjectRelease(v7);
    swift_bridgeObjectRelease(*(_QWORD *)(v6 + 40));
  }
  v8 = v6 + *(int *)(v1 + 28);
  v9 = type metadata accessor for DynamicTypeSize(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_14B39C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ShelfGridLayoutContext(0) - 8) + 80);
  return sub_14AAB4(v1 + ((v3 + 16) & ~v3), a1);
}

uint64_t sub_14B3E8()
{
  uint64_t v0;

  sub_14B410(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_BYTE *)(v0 + 40));
  return swift_deallocObject(v0, 41, 7);
}

uint64_t sub_14B410(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if ((a3 & 1) != 0)
    return swift_release(a2);
  return result;
}

uint64_t sub_14B420@<X0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  uint64_t v2;

  return sub_1C53A0(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(unsigned __int8 *)(v2 + 40), a2);
}

uint64_t sub_14B430(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &opaque type descriptor for <<opaque return type of SeriesEntityCardView.body>>, 1);
}

char *initializeBufferWithCopyOfBuffer for SeriesEntityCardView(char *a1, char *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, char *, uint64_t);
  uint64_t v33;
  char *v34;
  char *v35;
  unsigned int (*v36)(char *, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v21 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = (char *)(v21 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v21);
  }
  else
  {
    v7 = sub_5440(&qword_261660);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = &a1[v8];
    v10 = &a2[v8];
    v11 = sub_5440(&qword_25F548);
    if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
    {
      *(_WORD *)v9 = *(_WORD *)v10;
      v12 = (int *)type metadata accessor for SizeConstants.Environment(0);
      v13 = v12[6];
      v14 = &v9[v13];
      v15 = &v10[v13];
      v16 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v14, v15, v16);
      *(_QWORD *)&v9[v12[7]] = *(_QWORD *)&v10[v12[7]];
      v17 = v12[8];
      v18 = &v9[v17];
      v19 = &v10[v17];
      v18[2] = v19[2];
      *(_WORD *)v18 = *(_WORD *)v19;
      v20 = 1;
    }
    else
    {
      v22 = *(_QWORD *)v10;
      *(_QWORD *)v9 = *(_QWORD *)v10;
      swift_retain(v22);
      v20 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v11, v20);
    v23 = a3[6];
    v24 = a3[7];
    v25 = &a1[v23];
    v26 = &a2[v23];
    v27 = *((_QWORD *)v26 + 1);
    *(_QWORD *)v25 = *(_QWORD *)v26;
    *((_QWORD *)v25 + 1) = v27;
    v28 = &a1[v24];
    v29 = &a2[v24];
    v30 = type metadata accessor for LocalizerRequest(0);
    v31 = *(_QWORD *)(v30 - 8);
    v32 = *(void (**)(char *, char *, uint64_t))(v31 + 16);
    swift_bridgeObjectRetain(v27);
    v32(v28, v29, v30);
    v32(&a1[a3[8]], &a2[a3[8]], v30);
    v33 = a3[9];
    v34 = &a1[v33];
    v35 = &a2[v33];
    v36 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48);
    if (v36(&a2[v33], 1, v30))
    {
      v37 = sub_5440(&qword_25E0C8);
      memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
    }
    else
    {
      v32(v34, v35, v30);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v34, 0, 1, v30);
    }
    v38 = a3[10];
    v39 = &a1[v38];
    v40 = &a2[v38];
    if (v36(&a2[v38], 1, v30))
    {
      v41 = sub_5440(&qword_25E0C8);
      memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
    }
    else
    {
      v32(v39, v40, v30);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v39, 0, 1, v30);
    }
    v42 = a3[11];
    v43 = a3[12];
    v44 = *(_QWORD *)&a2[v42];
    *(_QWORD *)&a1[v42] = v44;
    a1[v43] = a2[v43];
    swift_bridgeObjectRetain(v44);
  }
  return a1;
}

uint64_t destroy for SeriesEntityCardView(uint64_t a1, int *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  unsigned int (*v14)(uint64_t, uint64_t, uint64_t);
  uint64_t v15;

  v4 = sub_5440(&qword_261660);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = (_QWORD *)(a1 + a2[5]);
  v6 = sub_5440(&qword_25F548);
  if (swift_getEnumCaseMultiPayload(v5, v6) == 1)
  {
    v7 = (char *)v5 + *(int *)(type metadata accessor for SizeConstants.Environment(0) + 24);
    v8 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  }
  else
  {
    swift_release(*v5);
  }
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[6] + 8));
  v9 = a1 + a2[7];
  v10 = type metadata accessor for LocalizerRequest(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
  v12(v9, v10);
  v12(a1 + a2[8], v10);
  v13 = a1 + a2[9];
  v14 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
  if (!v14(v13, 1, v10))
    v12(v13, v10);
  v15 = a1 + a2[10];
  if (!v14(v15, 1, v10))
    v12(v15, v10);
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[11]));
}

uint64_t initializeWithCopy for SeriesEntityCardView(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _WORD *v8;
  _WORD *v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t, uint64_t);
  uint64_t v31;
  void *v32;
  const void *v33;
  unsigned int (*v34)(uint64_t, uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  void *v37;
  const void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v6 = sub_5440(&qword_261660);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = (_WORD *)(a1 + v7);
  v9 = (_WORD *)(a2 + v7);
  v10 = sub_5440(&qword_25F548);
  if (swift_getEnumCaseMultiPayload(v9, v10) == 1)
  {
    *v8 = *v9;
    v11 = (int *)type metadata accessor for SizeConstants.Environment(0);
    v12 = v11[6];
    v13 = (char *)v8 + v12;
    v14 = (char *)v9 + v12;
    v15 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
    *(_QWORD *)((char *)v8 + v11[7]) = *(_QWORD *)((char *)v9 + v11[7]);
    v16 = v11[8];
    v17 = (char *)v8 + v16;
    v18 = (char *)v9 + v16;
    v17[2] = v18[2];
    *(_WORD *)v17 = *(_WORD *)v18;
    v19 = 1;
  }
  else
  {
    v20 = *(_QWORD *)v9;
    *(_QWORD *)v8 = *(_QWORD *)v9;
    swift_retain(v20);
    v19 = 0;
  }
  swift_storeEnumTagMultiPayload(v8, v10, v19);
  v21 = a3[6];
  v22 = a3[7];
  v23 = (_QWORD *)(a1 + v21);
  v24 = (_QWORD *)(a2 + v21);
  v25 = v24[1];
  *v23 = *v24;
  v23[1] = v25;
  v26 = a1 + v22;
  v27 = a2 + v22;
  v28 = type metadata accessor for LocalizerRequest(0);
  v29 = *(_QWORD *)(v28 - 8);
  v30 = *(void (**)(uint64_t, uint64_t, uint64_t))(v29 + 16);
  swift_bridgeObjectRetain(v25);
  v30(v26, v27, v28);
  v30(a1 + a3[8], a2 + a3[8], v28);
  v31 = a3[9];
  v32 = (void *)(a1 + v31);
  v33 = (const void *)(a2 + v31);
  v34 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v29 + 48);
  if (v34(a2 + v31, 1, v28))
  {
    v35 = sub_5440(&qword_25E0C8);
    memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
  }
  else
  {
    v30((uint64_t)v32, (uint64_t)v33, v28);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v32, 0, 1, v28);
  }
  v36 = a3[10];
  v37 = (void *)(a1 + v36);
  v38 = (const void *)(a2 + v36);
  if (v34(a2 + v36, 1, v28))
  {
    v39 = sub_5440(&qword_25E0C8);
    memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
  }
  else
  {
    v30((uint64_t)v37, (uint64_t)v38, v28);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v37, 0, 1, v28);
  }
  v40 = a3[11];
  v41 = a3[12];
  v42 = *(_QWORD *)(a2 + v40);
  *(_QWORD *)(a1 + v40) = v42;
  *(_BYTE *)(a1 + v41) = *(_BYTE *)(a2 + v41);
  swift_bridgeObjectRetain(v42);
  return a1;
}

uint64_t assignWithCopy for SeriesEntityCardView(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  _BYTE *v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(uint64_t, uint64_t, uint64_t);
  uint64_t v33;
  void *v34;
  const void *v35;
  uint64_t (*v36)(uint64_t, uint64_t, uint64_t);
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  const void *v42;
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v6 = sub_5440(&qword_261660);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  if (a1 != a2)
  {
    v7 = a3[5];
    v8 = (_BYTE *)(a1 + v7);
    v9 = (_BYTE *)(a2 + v7);
    sub_B414(a1 + v7, &qword_25F548);
    v10 = sub_5440(&qword_25F548);
    if (swift_getEnumCaseMultiPayload(v9, v10) == 1)
    {
      *v8 = *v9;
      v8[1] = v9[1];
      v11 = (int *)type metadata accessor for SizeConstants.Environment(0);
      v12 = v11[6];
      v13 = &v8[v12];
      v14 = &v9[v12];
      v15 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
      *(_QWORD *)&v8[v11[7]] = *(_QWORD *)&v9[v11[7]];
      v16 = v11[8];
      v17 = &v8[v16];
      v18 = &v9[v16];
      v19 = v18[2];
      *(_WORD *)v17 = *(_WORD *)v18;
      v17[2] = v19;
      v20 = 1;
    }
    else
    {
      v21 = *(_QWORD *)v9;
      *(_QWORD *)v8 = *(_QWORD *)v9;
      swift_retain(v21);
      v20 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v10, v20);
  }
  v22 = a3[6];
  v23 = (_QWORD *)(a1 + v22);
  v24 = (_QWORD *)(a2 + v22);
  *v23 = *v24;
  v25 = v24[1];
  v26 = v23[1];
  v23[1] = v25;
  swift_bridgeObjectRetain(v25);
  swift_bridgeObjectRelease(v26);
  v27 = a3[7];
  v28 = a1 + v27;
  v29 = a2 + v27;
  v30 = type metadata accessor for LocalizerRequest(0);
  v31 = *(_QWORD *)(v30 - 8);
  v32 = *(void (**)(uint64_t, uint64_t, uint64_t))(v31 + 24);
  v32(v28, v29, v30);
  v32(a1 + a3[8], a2 + a3[8], v30);
  v33 = a3[9];
  v34 = (void *)(a1 + v33);
  v35 = (const void *)(a2 + v33);
  v36 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v31 + 48);
  v37 = v36(a1 + v33, 1, v30);
  v38 = v36((uint64_t)v35, 1, v30);
  if (v37)
  {
    if (!v38)
    {
      (*(void (**)(void *, const void *, uint64_t))(v31 + 16))(v34, v35, v30);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v34, 0, 1, v30);
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  if (v38)
  {
    (*(void (**)(void *, uint64_t))(v31 + 8))(v34, v30);
LABEL_11:
    v39 = sub_5440(&qword_25E0C8);
    memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
    goto LABEL_12;
  }
  v32((uint64_t)v34, (uint64_t)v35, v30);
LABEL_12:
  v40 = a3[10];
  v41 = (void *)(a1 + v40);
  v42 = (const void *)(a2 + v40);
  v43 = v36(a1 + v40, 1, v30);
  v44 = v36((uint64_t)v42, 1, v30);
  if (!v43)
  {
    if (!v44)
    {
      v32((uint64_t)v41, (uint64_t)v42, v30);
      goto LABEL_18;
    }
    (*(void (**)(void *, uint64_t))(v31 + 8))(v41, v30);
    goto LABEL_17;
  }
  if (v44)
  {
LABEL_17:
    v45 = sub_5440(&qword_25E0C8);
    memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
    goto LABEL_18;
  }
  (*(void (**)(void *, const void *, uint64_t))(v31 + 16))(v41, v42, v30);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v41, 0, 1, v30);
LABEL_18:
  v46 = a3[11];
  v47 = *(_QWORD *)(a2 + v46);
  v48 = *(_QWORD *)(a1 + v46);
  *(_QWORD *)(a1 + v46) = v47;
  swift_bridgeObjectRetain(v47);
  swift_bridgeObjectRelease(v48);
  *(_BYTE *)(a1 + a3[12]) = *(_BYTE *)(a2 + a3[12]);
  return a1;
}

uint64_t initializeWithTake for SeriesEntityCardView(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _WORD *v8;
  _WORD *v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t, uint64_t);
  uint64_t v25;
  void *v26;
  const void *v27;
  unsigned int (*v28)(uint64_t, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  void *v31;
  const void *v32;
  uint64_t v33;
  uint64_t v34;

  v6 = sub_5440(&qword_261660);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = (_WORD *)(a1 + v7);
  v9 = (_WORD *)(a2 + v7);
  v10 = sub_5440(&qword_25F548);
  if (swift_getEnumCaseMultiPayload(v9, v10) == 1)
  {
    *v8 = *v9;
    v11 = (int *)type metadata accessor for SizeConstants.Environment(0);
    v12 = v11[6];
    v13 = (char *)v8 + v12;
    v14 = (char *)v9 + v12;
    v15 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v13, v14, v15);
    *(_QWORD *)((char *)v8 + v11[7]) = *(_QWORD *)((char *)v9 + v11[7]);
    v16 = v11[8];
    v17 = (char *)v8 + v16;
    v18 = (char *)v9 + v16;
    v17[2] = v18[2];
    *(_WORD *)v17 = *(_WORD *)v18;
    swift_storeEnumTagMultiPayload(v8, v10, 1);
  }
  else
  {
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  v19 = a3[7];
  *(_OWORD *)(a1 + a3[6]) = *(_OWORD *)(a2 + a3[6]);
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = type metadata accessor for LocalizerRequest(0);
  v23 = *(_QWORD *)(v22 - 8);
  v24 = *(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 32);
  v24(v20, v21, v22);
  v24(a1 + a3[8], a2 + a3[8], v22);
  v25 = a3[9];
  v26 = (void *)(a1 + v25);
  v27 = (const void *)(a2 + v25);
  v28 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v23 + 48);
  if (v28(a2 + v25, 1, v22))
  {
    v29 = sub_5440(&qword_25E0C8);
    memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
  }
  else
  {
    v24((uint64_t)v26, (uint64_t)v27, v22);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v26, 0, 1, v22);
  }
  v30 = a3[10];
  v31 = (void *)(a1 + v30);
  v32 = (const void *)(a2 + v30);
  if (v28(a2 + v30, 1, v22))
  {
    v33 = sub_5440(&qword_25E0C8);
    memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
  }
  else
  {
    v24((uint64_t)v31, (uint64_t)v32, v22);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v31, 0, 1, v22);
  }
  v34 = a3[12];
  *(_QWORD *)(a1 + a3[11]) = *(_QWORD *)(a2 + a3[11]);
  *(_BYTE *)(a1 + v34) = *(_BYTE *)(a2 + v34);
  return a1;
}

uint64_t assignWithTake for SeriesEntityCardView(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _WORD *v8;
  _WORD *v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t, uint64_t);
  uint64_t v31;
  void *v32;
  const void *v33;
  uint64_t (*v34)(uint64_t, uint64_t, uint64_t);
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  const void *v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v6 = sub_5440(&qword_261660);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  if (a1 != a2)
  {
    v7 = a3[5];
    v8 = (_WORD *)(a1 + v7);
    v9 = (_WORD *)(a2 + v7);
    sub_B414(a1 + v7, &qword_25F548);
    v10 = sub_5440(&qword_25F548);
    if (swift_getEnumCaseMultiPayload(v9, v10) == 1)
    {
      *v8 = *v9;
      v11 = (int *)type metadata accessor for SizeConstants.Environment(0);
      v12 = v11[6];
      v13 = (char *)v8 + v12;
      v14 = (char *)v9 + v12;
      v15 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v13, v14, v15);
      *(_QWORD *)((char *)v8 + v11[7]) = *(_QWORD *)((char *)v9 + v11[7]);
      v16 = v11[8];
      v17 = (char *)v8 + v16;
      v18 = (char *)v9 + v16;
      v17[2] = v18[2];
      *(_WORD *)v17 = *(_WORD *)v18;
      swift_storeEnumTagMultiPayload(v8, v10, 1);
    }
    else
    {
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    }
  }
  v19 = a3[6];
  v20 = (_QWORD *)(a1 + v19);
  v21 = (uint64_t *)(a2 + v19);
  v23 = *v21;
  v22 = v21[1];
  v24 = v20[1];
  *v20 = v23;
  v20[1] = v22;
  swift_bridgeObjectRelease(v24);
  v25 = a3[7];
  v26 = a1 + v25;
  v27 = a2 + v25;
  v28 = type metadata accessor for LocalizerRequest(0);
  v29 = *(_QWORD *)(v28 - 8);
  v30 = *(void (**)(uint64_t, uint64_t, uint64_t))(v29 + 40);
  v30(v26, v27, v28);
  v30(a1 + a3[8], a2 + a3[8], v28);
  v31 = a3[9];
  v32 = (void *)(a1 + v31);
  v33 = (const void *)(a2 + v31);
  v34 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v29 + 48);
  v35 = v34(a1 + v31, 1, v28);
  v36 = v34((uint64_t)v33, 1, v28);
  if (v35)
  {
    if (!v36)
    {
      (*(void (**)(void *, const void *, uint64_t))(v29 + 32))(v32, v33, v28);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v32, 0, 1, v28);
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  if (v36)
  {
    (*(void (**)(void *, uint64_t))(v29 + 8))(v32, v28);
LABEL_10:
    v37 = sub_5440(&qword_25E0C8);
    memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
    goto LABEL_11;
  }
  v30((uint64_t)v32, (uint64_t)v33, v28);
LABEL_11:
  v38 = a3[10];
  v39 = (void *)(a1 + v38);
  v40 = (const void *)(a2 + v38);
  v41 = v34(a1 + v38, 1, v28);
  v42 = v34((uint64_t)v40, 1, v28);
  if (!v41)
  {
    if (!v42)
    {
      v30((uint64_t)v39, (uint64_t)v40, v28);
      goto LABEL_17;
    }
    (*(void (**)(void *, uint64_t))(v29 + 8))(v39, v28);
    goto LABEL_16;
  }
  if (v42)
  {
LABEL_16:
    v43 = sub_5440(&qword_25E0C8);
    memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
    goto LABEL_17;
  }
  (*(void (**)(void *, const void *, uint64_t))(v29 + 32))(v39, v40, v28);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v39, 0, 1, v28);
LABEL_17:
  v44 = a3[11];
  v45 = *(_QWORD *)(a1 + v44);
  *(_QWORD *)(a1 + v44) = *(_QWORD *)(a2 + v44);
  swift_bridgeObjectRelease(v45);
  *(_BYTE *)(a1 + a3[12]) = *(_BYTE *)(a2 + a3[12]);
  return a1;
}

uint64_t getEnumTagSinglePayload for SeriesEntityCardView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_14C390);
}

uint64_t sub_14C390(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v16;

  v6 = sub_5440(&qword_261660);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = sub_5440(&qword_25F558);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v13 = a3[5];
LABEL_12:
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v16 = type metadata accessor for LocalizerRequest(0);
    v12 = *(_QWORD *)(v16 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v16;
      v13 = a3[7];
    }
    else
    {
      v8 = sub_5440(&qword_25E0C8);
      v12 = *(_QWORD *)(v8 - 8);
      v13 = a3[9];
    }
    goto LABEL_12;
  }
  v14 = *(_QWORD *)(a1 + a3[6] + 8);
  if (v14 >= 0xFFFFFFFF)
    LODWORD(v14) = -1;
  return (v14 + 1);
}

uint64_t storeEnumTagSinglePayload for SeriesEntityCardView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_14C49C);
}

uint64_t sub_14C49C(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = sub_5440(&qword_261660);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    result = sub_5440(&qword_25F558);
    v14 = *(_QWORD *)(result - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = result;
      v15 = a4[5];
    }
    else
    {
      if (a3 == 0x7FFFFFFF)
      {
        *(_QWORD *)(a1 + a4[6] + 8) = (a2 - 1);
        return result;
      }
      v16 = type metadata accessor for LocalizerRequest(0);
      v14 = *(_QWORD *)(v16 - 8);
      if (*(_DWORD *)(v14 + 84) == a3)
      {
        v10 = v16;
        v15 = a4[7];
      }
      else
      {
        v10 = sub_5440(&qword_25E0C8);
        v14 = *(_QWORD *)(v10 - 8);
        v15 = a4[9];
      }
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_14C598(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD v10[3];
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  void *v16;

  sub_62808(319);
  if (v3 <= 0x3F)
  {
    v10[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_19B38(319, (unint64_t *)&qword_25F5C8, type metadata accessor for SizeConstants, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
    if (v5 <= 0x3F)
    {
      v10[1] = *(_QWORD *)(v4 - 8) + 64;
      v10[2] = &unk_1F05E8;
      v6 = type metadata accessor for LocalizerRequest(319);
      if (v7 <= 0x3F)
      {
        v11 = *(_QWORD *)(v6 - 8) + 64;
        v12 = v11;
        sub_19B38(319, (unint64_t *)&qword_261BA0, (uint64_t (*)(uint64_t))&type metadata accessor for LocalizerRequest, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
        if (v9 <= 0x3F)
        {
          v13 = *(_QWORD *)(v8 - 8) + 64;
          v14 = v13;
          v15 = (char *)&value witness table for Builtin.BridgeObject + 64;
          v16 = &unk_1F0600;
          swift_initStructMetadata(a1, 256, 9, v10, a1 + 16);
        }
      }
    }
  }
}

unint64_t sub_14C6A8()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_267B98;
  if (!qword_267B98)
  {
    v1 = sub_7EF8(&qword_267A88);
    v2[0] = sub_7EF8(&qword_267A78);
    v2[1] = sub_1470D0();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.drawingGroup(opaque:colorMode:)>>, 1);
    sub_7FD8(&qword_267BA0, &qword_267AD8, (uint64_t)&protocol conformance descriptor for _BackgroundModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_267B98);
  }
  return result;
}

_QWORD *sub_14C754(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  int *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, char *, uint64_t);
  uint64_t v33;
  char *v34;
  char *v35;
  unsigned int (*v36)(char *, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v46;
  uint64_t v47;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v17 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v17);
  }
  else
  {
    v7 = sub_5440(&qword_25F548);
    if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
    {
      *(_WORD *)a1 = *(_WORD *)a2;
      v8 = (int *)type metadata accessor for SizeConstants.Environment(0);
      v9 = v8[6];
      v10 = (char *)a1 + v9;
      v11 = (char *)a2 + v9;
      v12 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
      *(_QWORD *)((char *)a1 + v8[7]) = *(_QWORD *)((char *)a2 + v8[7]);
      v13 = v8[8];
      v14 = (char *)a1 + v13;
      v15 = (char *)a2 + v13;
      v14[2] = v15[2];
      *(_WORD *)v14 = *(_WORD *)v15;
      v16 = 1;
    }
    else
    {
      v18 = *a2;
      *a1 = *a2;
      swift_retain(v18);
      v16 = 0;
    }
    swift_storeEnumTagMultiPayload(a1, v7, v16);
    v19 = *(int *)(a3 + 20);
    v20 = *(int *)(a3 + 24);
    v46 = a2;
    v47 = a3;
    v21 = (_QWORD *)((char *)a1 + v19);
    v22 = (_QWORD *)((char *)a2 + v19);
    v23 = v22[1];
    *v21 = *v22;
    v21[1] = v23;
    v24 = (char *)a1 + v20;
    v25 = (char *)a2 + v20;
    *((_BYTE *)a1 + v20) = *((_BYTE *)a2 + v20);
    v26 = (int *)type metadata accessor for SeriesEntityCardView.TextLockupViewModel(0);
    v27 = v26[5];
    v28 = &v24[v27];
    v29 = &v25[v27];
    v30 = type metadata accessor for LocalizerRequest(0);
    v31 = *(_QWORD *)(v30 - 8);
    v32 = *(void (**)(char *, char *, uint64_t))(v31 + 16);
    swift_bridgeObjectRetain(v23);
    v32(v28, v29, v30);
    v32(&v24[v26[6]], &v25[v26[6]], v30);
    v33 = v26[7];
    v34 = &v24[v33];
    v35 = &v25[v33];
    v36 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48);
    if (v36(&v25[v33], 1, v30))
    {
      v37 = sub_5440(&qword_25E0C8);
      memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
    }
    else
    {
      v32(v34, v35, v30);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v34, 0, 1, v30);
    }
    v38 = v26[8];
    v39 = &v24[v38];
    v40 = &v25[v38];
    if (v36(&v25[v38], 1, v30))
    {
      v41 = sub_5440(&qword_25E0C8);
      memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
    }
    else
    {
      v32(v39, v40, v30);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v39, 0, 1, v30);
    }
    v42 = *(int *)(v47 + 28);
    v43 = *(int *)(v47 + 32);
    v44 = *(_QWORD *)((char *)v46 + v42);
    *(_QWORD *)((char *)a1 + v42) = v44;
    *((_BYTE *)a1 + v43) = *((_BYTE *)v46 + v43);
    swift_bridgeObjectRetain(v44);
  }
  return a1;
}

uint64_t sub_14C9F8(_QWORD *a1, int *a2)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  int *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(char *, uint64_t);
  char *v13;
  unsigned int (*v14)(char *, uint64_t, uint64_t);
  char *v15;

  v4 = sub_5440(&qword_25F548);
  if (swift_getEnumCaseMultiPayload(a1, v4) == 1)
  {
    v5 = (char *)a1 + *(int *)(type metadata accessor for SizeConstants.Environment(0) + 24);
    v6 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  }
  else
  {
    swift_release(*a1);
  }
  swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + a2[5] + 8));
  v7 = (char *)a1 + a2[6];
  v8 = (int *)type metadata accessor for SeriesEntityCardView.TextLockupViewModel(0);
  v9 = &v7[v8[5]];
  v10 = type metadata accessor for LocalizerRequest(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(void (**)(char *, uint64_t))(v11 + 8);
  v12(v9, v10);
  v12(&v7[v8[6]], v10);
  v13 = &v7[v8[7]];
  v14 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  if (!v14(v13, 1, v10))
    v12(v13, v10);
  v15 = &v7[v8[8]];
  if (!v14(v15, 1, v10))
    v12(v15, v10);
  return swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + a2[7]));
}

_WORD *sub_14CB40(_WORD *a1, _WORD *a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  int *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, char *, uint64_t);
  uint64_t v31;
  char *v32;
  char *v33;
  unsigned int (*v34)(char *, uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _WORD *v44;
  uint64_t v45;

  v6 = sub_5440(&qword_25F548);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    *a1 = *a2;
    v7 = (int *)type metadata accessor for SizeConstants.Environment(0);
    v8 = v7[6];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    *(_QWORD *)((char *)a1 + v7[7]) = *(_QWORD *)((char *)a2 + v7[7]);
    v12 = v7[8];
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    v13[2] = v14[2];
    *(_WORD *)v13 = *(_WORD *)v14;
    v15 = 1;
  }
  else
  {
    v16 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    swift_retain(v16);
    v15 = 0;
  }
  swift_storeEnumTagMultiPayload(a1, v6, v15);
  v17 = *(int *)(a3 + 20);
  v18 = *(int *)(a3 + 24);
  v44 = a2;
  v45 = a3;
  v19 = (_QWORD *)((char *)a1 + v17);
  v20 = (_QWORD *)((char *)a2 + v17);
  v21 = v20[1];
  *v19 = *v20;
  v19[1] = v21;
  v22 = (char *)a1 + v18;
  v23 = (char *)a2 + v18;
  *((_BYTE *)a1 + v18) = *((_BYTE *)a2 + v18);
  v24 = (int *)type metadata accessor for SeriesEntityCardView.TextLockupViewModel(0);
  v25 = v24[5];
  v26 = &v22[v25];
  v27 = &v23[v25];
  v28 = type metadata accessor for LocalizerRequest(0);
  v29 = *(_QWORD *)(v28 - 8);
  v30 = *(void (**)(char *, char *, uint64_t))(v29 + 16);
  swift_bridgeObjectRetain(v21);
  v30(v26, v27, v28);
  v30(&v22[v24[6]], &v23[v24[6]], v28);
  v31 = v24[7];
  v32 = &v22[v31];
  v33 = &v23[v31];
  v34 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48);
  if (v34(&v23[v31], 1, v28))
  {
    v35 = sub_5440(&qword_25E0C8);
    memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
  }
  else
  {
    v30(v32, v33, v28);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v32, 0, 1, v28);
  }
  v36 = v24[8];
  v37 = &v22[v36];
  v38 = &v23[v36];
  if (v34(&v23[v36], 1, v28))
  {
    v39 = sub_5440(&qword_25E0C8);
    memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
  }
  else
  {
    v30(v37, v38, v28);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v37, 0, 1, v28);
  }
  v40 = *(int *)(v45 + 28);
  v41 = *(int *)(v45 + 32);
  v42 = *(_QWORD *)((char *)v44 + v40);
  *(_QWORD *)((char *)a1 + v40) = v42;
  *((_BYTE *)a1 + v41) = *((_BYTE *)v44 + v41);
  swift_bridgeObjectRetain(v42);
  return a1;
}

_BYTE *sub_14CDB8(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  _BYTE *v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  _BYTE *v25;
  int *v26;
  uint64_t v27;
  _BYTE *v28;
  _BYTE *v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v33;
  _BYTE *v34;
  _BYTE *v35;
  uint64_t (*v36)(_BYTE *, uint64_t, uint64_t);
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE *v41;
  _BYTE *v42;
  int v43;
  int v44;
  _BYTE *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void (*v52)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v53;
  _BYTE *v54;

  if (a1 != a2)
  {
    sub_B414((uint64_t)a1, &qword_25F548);
    v6 = sub_5440(&qword_25F548);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      v7 = (int *)type metadata accessor for SizeConstants.Environment(0);
      v8 = v7[6];
      v9 = &a1[v8];
      v10 = &a2[v8];
      v11 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
      *(_QWORD *)&a1[v7[7]] = *(_QWORD *)&a2[v7[7]];
      v12 = v7[8];
      v13 = &a1[v12];
      v14 = &a2[v12];
      v15 = v14[2];
      *(_WORD *)v13 = *(_WORD *)v14;
      v13[2] = v15;
      v16 = 1;
    }
    else
    {
      v17 = *(_QWORD *)a2;
      *(_QWORD *)a1 = *(_QWORD *)a2;
      swift_retain(v17);
      v16 = 0;
    }
    swift_storeEnumTagMultiPayload(a1, v6, v16);
  }
  v18 = *(int *)(a3 + 20);
  v19 = &a1[v18];
  v20 = &a2[v18];
  *v19 = *v20;
  v21 = v20[1];
  v22 = v19[1];
  v19[1] = v21;
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRelease(v22);
  v53 = a3;
  v54 = a2;
  v23 = *(int *)(a3 + 24);
  v24 = &a1[v23];
  v25 = &a2[v23];
  a1[v23] = a2[v23];
  v26 = (int *)type metadata accessor for SeriesEntityCardView.TextLockupViewModel(0);
  v27 = v26[5];
  v28 = &v24[v27];
  v29 = &v25[v27];
  v30 = type metadata accessor for LocalizerRequest(0);
  v31 = *(_QWORD *)(v30 - 8);
  v32 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v31 + 24);
  v32(v28, v29, v30);
  v52 = v32;
  v32(&v24[v26[6]], &v25[v26[6]], v30);
  v33 = v26[7];
  v34 = &v24[v33];
  v35 = &v25[v33];
  v36 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v31 + 48);
  v37 = v36(&v24[v33], 1, v30);
  v38 = v36(v35, 1, v30);
  if (v37)
  {
    if (!v38)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v31 + 16))(v34, v35, v30);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v34, 0, 1, v30);
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  if (v38)
  {
    (*(void (**)(_BYTE *, uint64_t))(v31 + 8))(v34, v30);
LABEL_11:
    v39 = sub_5440(&qword_25E0C8);
    memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
    goto LABEL_12;
  }
  v52(v34, v35, v30);
LABEL_12:
  v40 = v26[8];
  v41 = &v24[v40];
  v42 = &v25[v40];
  v43 = v36(&v24[v40], 1, v30);
  v44 = v36(v42, 1, v30);
  if (!v43)
  {
    v46 = v53;
    v45 = v54;
    if (!v44)
    {
      v52(v41, v42, v30);
      goto LABEL_18;
    }
    (*(void (**)(_BYTE *, uint64_t))(v31 + 8))(v41, v30);
    goto LABEL_17;
  }
  v46 = v53;
  v45 = v54;
  if (v44)
  {
LABEL_17:
    v47 = sub_5440(&qword_25E0C8);
    memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
    goto LABEL_18;
  }
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v31 + 16))(v41, v42, v30);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v41, 0, 1, v30);
LABEL_18:
  v48 = *(int *)(v46 + 28);
  v49 = *(_QWORD *)&v45[v48];
  v50 = *(_QWORD *)&a1[v48];
  *(_QWORD *)&a1[v48] = v49;
  swift_bridgeObjectRetain(v49);
  swift_bridgeObjectRelease(v50);
  a1[*(int *)(v46 + 32)] = v45[*(int *)(v46 + 32)];
  return a1;
}

_WORD *sub_14D10C(_WORD *a1, _WORD *a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  int *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, char *, uint64_t);
  uint64_t v25;
  char *v26;
  char *v27;
  unsigned int (*v28)(char *, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  _WORD *v36;
  uint64_t v37;

  v6 = sub_5440(&qword_25F548);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    *a1 = *a2;
    v7 = (int *)type metadata accessor for SizeConstants.Environment(0);
    v8 = v7[6];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
    *(_QWORD *)((char *)a1 + v7[7]) = *(_QWORD *)((char *)a2 + v7[7]);
    v12 = v7[8];
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    v13[2] = v14[2];
    *(_WORD *)v13 = *(_WORD *)v14;
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v15 = *(int *)(a3 + 24);
  v36 = a2;
  v37 = a3;
  *(_OWORD *)((char *)a1 + *(int *)(a3 + 20)) = *(_OWORD *)((char *)a2 + *(int *)(a3 + 20));
  v16 = (char *)a1 + v15;
  v17 = (char *)a2 + v15;
  *((_BYTE *)a1 + v15) = *((_BYTE *)a2 + v15);
  v18 = (int *)type metadata accessor for SeriesEntityCardView.TextLockupViewModel(0);
  v19 = v18[5];
  v20 = &v16[v19];
  v21 = &v17[v19];
  v22 = type metadata accessor for LocalizerRequest(0);
  v23 = *(_QWORD *)(v22 - 8);
  v24 = *(void (**)(char *, char *, uint64_t))(v23 + 32);
  v24(v20, v21, v22);
  v24(&v16[v18[6]], &v17[v18[6]], v22);
  v25 = v18[7];
  v26 = &v16[v25];
  v27 = &v17[v25];
  v28 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48);
  if (v28(&v17[v25], 1, v22))
  {
    v29 = sub_5440(&qword_25E0C8);
    memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
  }
  else
  {
    v24(v26, v27, v22);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v26, 0, 1, v22);
  }
  v30 = v18[8];
  v31 = &v16[v30];
  v32 = &v17[v30];
  if (v28(&v17[v30], 1, v22))
  {
    v33 = sub_5440(&qword_25E0C8);
    memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
  }
  else
  {
    v24(v31, v32, v22);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v31, 0, 1, v22);
  }
  v34 = *(int *)(v37 + 32);
  *(_QWORD *)((char *)a1 + *(int *)(v37 + 28)) = *(_QWORD *)((char *)v36 + *(int *)(v37 + 28));
  *((_BYTE *)a1 + v34) = *((_BYTE *)v36 + v34);
  return a1;
}

_WORD *sub_14D374(_WORD *a1, _WORD *a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  int *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, char *, uint64_t);
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t (*v34)(char *, uint64_t, uint64_t);
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  int v41;
  int v42;
  _WORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (*v49)(char *, char *, uint64_t);
  uint64_t v50;
  _WORD *v51;

  if (a1 != a2)
  {
    sub_B414((uint64_t)a1, &qword_25F548);
    v6 = sub_5440(&qword_25F548);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      *a1 = *a2;
      v7 = (int *)type metadata accessor for SizeConstants.Environment(0);
      v8 = v7[6];
      v9 = (char *)a1 + v8;
      v10 = (char *)a2 + v8;
      v11 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
      *(_QWORD *)((char *)a1 + v7[7]) = *(_QWORD *)((char *)a2 + v7[7]);
      v12 = v7[8];
      v13 = (char *)a1 + v12;
      v14 = (char *)a2 + v12;
      v13[2] = v14[2];
      *(_WORD *)v13 = *(_WORD *)v14;
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
  }
  v15 = *(int *)(a3 + 20);
  v16 = (_QWORD *)((char *)a1 + v15);
  v17 = (uint64_t *)((char *)a2 + v15);
  v19 = *v17;
  v18 = v17[1];
  v20 = v16[1];
  *v16 = v19;
  v16[1] = v18;
  swift_bridgeObjectRelease(v20);
  v50 = a3;
  v51 = a2;
  v21 = *(int *)(a3 + 24);
  v22 = (char *)a1 + v21;
  v23 = (char *)a2 + v21;
  *((_BYTE *)a1 + v21) = *((_BYTE *)a2 + v21);
  v24 = (int *)type metadata accessor for SeriesEntityCardView.TextLockupViewModel(0);
  v25 = v24[5];
  v26 = &v22[v25];
  v27 = &v23[v25];
  v28 = type metadata accessor for LocalizerRequest(0);
  v29 = *(_QWORD *)(v28 - 8);
  v30 = *(void (**)(char *, char *, uint64_t))(v29 + 40);
  v30(v26, v27, v28);
  v49 = v30;
  v30(&v22[v24[6]], &v23[v24[6]], v28);
  v31 = v24[7];
  v32 = &v22[v31];
  v33 = &v23[v31];
  v34 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v29 + 48);
  v35 = v34(&v22[v31], 1, v28);
  v36 = v34(v33, 1, v28);
  if (v35)
  {
    if (!v36)
    {
      (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v32, v33, v28);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v32, 0, 1, v28);
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  if (v36)
  {
    (*(void (**)(char *, uint64_t))(v29 + 8))(v32, v28);
LABEL_10:
    v37 = sub_5440(&qword_25E0C8);
    memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
    goto LABEL_11;
  }
  v49(v32, v33, v28);
LABEL_11:
  v38 = v24[8];
  v39 = &v22[v38];
  v40 = &v23[v38];
  v41 = v34(&v22[v38], 1, v28);
  v42 = v34(v40, 1, v28);
  if (!v41)
  {
    v44 = v50;
    v43 = v51;
    if (!v42)
    {
      v49(v39, v40, v28);
      goto LABEL_17;
    }
    (*(void (**)(char *, uint64_t))(v29 + 8))(v39, v28);
    goto LABEL_16;
  }
  v44 = v50;
  v43 = v51;
  if (v42)
  {
LABEL_16:
    v45 = sub_5440(&qword_25E0C8);
    memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
    goto LABEL_17;
  }
  (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v39, v40, v28);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v39, 0, 1, v28);
LABEL_17:
  v46 = *(int *)(v44 + 28);
  v47 = *(_QWORD *)((char *)a1 + v46);
  *(_QWORD *)((char *)a1 + v46) = *(_QWORD *)((char *)v43 + v46);
  swift_bridgeObjectRelease(v47);
  *((_BYTE *)a1 + *(int *)(v44 + 32)) = *((_BYTE *)v43 + *(int *)(v44 + 32));
  return a1;
}

uint64_t sub_14D6AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_14D6B8);
}

uint64_t sub_14D6B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  unint64_t v11;

  v6 = sub_5440(&qword_25F558);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v8 = type metadata accessor for SeriesEntityCardView.TextLockupViewModel(0);
    v10 = a1 + *(int *)(a3 + 24);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
    return v9(v10, a2, v8);
  }
  v11 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
  if (v11 >= 0xFFFFFFFF)
    LODWORD(v11) = -1;
  return (v11 + 1);
}

uint64_t sub_14D768(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_14D774);
}

uint64_t sub_14D774(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  result = sub_5440(&qword_25F558);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
      return result;
    }
    v10 = type metadata accessor for SeriesEntityCardView.TextLockupViewModel(0);
    v12 = a1 + *(int *)(a4 + 24);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_14D820(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[5];

  sub_19B38(319, (unint64_t *)&qword_25F5C8, type metadata accessor for SizeConstants, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    v6[1] = &unk_1F05E8;
    v4 = type metadata accessor for SeriesEntityCardView.TextLockupViewModel(319);
    if (v5 <= 0x3F)
    {
      v6[2] = *(_QWORD *)(v4 - 8) + 64;
      v6[3] = (char *)&value witness table for Builtin.BridgeObject + 64;
      v6[4] = &unk_1F0600;
      swift_initStructMetadata(a1, 256, 5, v6, a1 + 16);
    }
  }
}

uint64_t *sub_14D8DC(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  char *v14;
  char *v15;
  unsigned int (*v16)(char *, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v18 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v18);
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    v7 = a3[5];
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for LocalizerRequest(0);
    v11 = *(_QWORD *)(v10 - 8);
    v12 = *(void (**)(char *, char *, uint64_t))(v11 + 16);
    v12(v8, v9, v10);
    v12((char *)v4 + a3[6], (char *)a2 + a3[6], v10);
    v13 = a3[7];
    v14 = (char *)v4 + v13;
    v15 = (char *)a2 + v13;
    v16 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
    if (v16((char *)a2 + v13, 1, v10))
    {
      v17 = sub_5440(&qword_25E0C8);
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    else
    {
      v12(v14, v15, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v14, 0, 1, v10);
    }
    v19 = a3[8];
    v20 = (char *)v4 + v19;
    v21 = (char *)a2 + v19;
    if (v16(v21, 1, v10))
    {
      v22 = sub_5440(&qword_25E0C8);
      memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    }
    else
    {
      v12(v20, v21, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v20, 0, 1, v10);
    }
  }
  return v4;
}

uint64_t sub_14DA78(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t result;
  void (*v11)(uint64_t, uint64_t);

  v4 = a1 + a2[5];
  v5 = type metadata accessor for LocalizerRequest(0);
  v6 = *(_QWORD *)(v5 - 8);
  v11 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v11(v4, v5);
  v11(a1 + a2[6], v5);
  v7 = a1 + a2[7];
  v8 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  if (!v8(v7, 1, v5))
    v11(v7, v5);
  v9 = a1 + a2[8];
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v8)(v9, 1, v5);
  if (!(_DWORD)result)
    return ((uint64_t (*)(uint64_t, uint64_t))v11)(v9, v5);
  return result;
}

_BYTE *sub_14DB64(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  unsigned int (*v15)(_BYTE *, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  _BYTE *v19;
  uint64_t v20;

  *a1 = *a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for LocalizerRequest(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 16);
  v11(v7, v8, v9);
  v11(&a1[a3[6]], &a2[a3[6]], v9);
  v12 = a3[7];
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v10 + 48);
  if (v15(&a2[v12], 1, v9))
  {
    v16 = sub_5440(&qword_25E0C8);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    v11(v13, v14, v9);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v13, 0, 1, v9);
  }
  v17 = a3[8];
  v18 = &a1[v17];
  v19 = &a2[v17];
  if (v15(v19, 1, v9))
  {
    v20 = sub_5440(&qword_25E0C8);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
  }
  else
  {
    v11(v18, v19, v9);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v18, 0, 1, v9);
  }
  return a1;
}

_BYTE *sub_14DCD4(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  uint64_t (*v15)(_BYTE *, uint64_t, uint64_t);
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  _BYTE *v21;
  int v22;
  int v23;
  uint64_t v24;

  *a1 = *a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for LocalizerRequest(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 24);
  v11(v7, v8, v9);
  v11(&a1[a3[6]], &a2[a3[6]], v9);
  v12 = a3[7];
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v10 + 48);
  v16 = v15(&a1[v12], 1, v9);
  v17 = v15(v14, 1, v9);
  if (v16)
  {
    if (!v17)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 16))(v13, v14, v9);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v13, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v17)
  {
    (*(void (**)(_BYTE *, uint64_t))(v10 + 8))(v13, v9);
LABEL_6:
    v18 = sub_5440(&qword_25E0C8);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  v11(v13, v14, v9);
LABEL_7:
  v19 = a3[8];
  v20 = &a1[v19];
  v21 = &a2[v19];
  v22 = v15(&a1[v19], 1, v9);
  v23 = v15(v21, 1, v9);
  if (!v22)
  {
    if (!v23)
    {
      v11(v20, v21, v9);
      return a1;
    }
    (*(void (**)(_BYTE *, uint64_t))(v10 + 8))(v20, v9);
    goto LABEL_12;
  }
  if (v23)
  {
LABEL_12:
    v24 = sub_5440(&qword_25E0C8);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    return a1;
  }
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 16))(v20, v21, v9);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v20, 0, 1, v9);
  return a1;
}

_BYTE *sub_14DECC(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  unsigned int (*v15)(_BYTE *, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  _BYTE *v19;
  uint64_t v20;

  *a1 = *a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for LocalizerRequest(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 32);
  v11(v7, v8, v9);
  v11(&a1[a3[6]], &a2[a3[6]], v9);
  v12 = a3[7];
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v10 + 48);
  if (v15(&a2[v12], 1, v9))
  {
    v16 = sub_5440(&qword_25E0C8);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    v11(v13, v14, v9);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v13, 0, 1, v9);
  }
  v17 = a3[8];
  v18 = &a1[v17];
  v19 = &a2[v17];
  if (v15(v19, 1, v9))
  {
    v20 = sub_5440(&qword_25E0C8);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
  }
  else
  {
    v11(v18, v19, v9);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v18, 0, 1, v9);
  }
  return a1;
}

_BYTE *sub_14E03C(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  uint64_t (*v15)(_BYTE *, uint64_t, uint64_t);
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  _BYTE *v21;
  int v22;
  int v23;
  uint64_t v24;

  *a1 = *a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for LocalizerRequest(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 40);
  v11(v7, v8, v9);
  v11(&a1[a3[6]], &a2[a3[6]], v9);
  v12 = a3[7];
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v10 + 48);
  v16 = v15(&a1[v12], 1, v9);
  v17 = v15(v14, 1, v9);
  if (v16)
  {
    if (!v17)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 32))(v13, v14, v9);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v13, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v17)
  {
    (*(void (**)(_BYTE *, uint64_t))(v10 + 8))(v13, v9);
LABEL_6:
    v18 = sub_5440(&qword_25E0C8);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  v11(v13, v14, v9);
LABEL_7:
  v19 = a3[8];
  v20 = &a1[v19];
  v21 = &a2[v19];
  v22 = v15(&a1[v19], 1, v9);
  v23 = v15(v21, 1, v9);
  if (!v22)
  {
    if (!v23)
    {
      v11(v20, v21, v9);
      return a1;
    }
    (*(void (**)(_BYTE *, uint64_t))(v10 + 8))(v20, v9);
    goto LABEL_12;
  }
  if (v23)
  {
LABEL_12:
    v24 = sub_5440(&qword_25E0C8);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    return a1;
  }
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 32))(v20, v21, v9);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v20, 0, 1, v9);
  return a1;
}

uint64_t sub_14E234(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_14E240);
}

uint64_t sub_14E240(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 254)
  {
    v4 = *a1;
    if (v4 >= 2)
      return v4 - 1;
    else
      return 0;
  }
  else
  {
    v8 = type metadata accessor for LocalizerRequest(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 20);
    }
    else
    {
      v10 = sub_5440(&qword_25E0C8);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 28);
    }
    return (*(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(v9 + 48))(&a1[v11], a2, v10);
  }
}

uint64_t sub_14E2DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_14E2E8);
}

_BYTE *sub_14E2E8(_BYTE *result, uint64_t a2, int a3, uint64_t a4)
{
  _BYTE *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 254)
  {
    *result = a2 + 1;
  }
  else
  {
    v8 = type metadata accessor for LocalizerRequest(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 20);
    }
    else
    {
      v10 = sub_5440(&qword_25E0C8);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 28);
    }
    return (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v9 + 56))(&v5[v11], a2, a2, v10);
  }
  return result;
}

void sub_14E384(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = &unk_1F0600;
  v2 = type metadata accessor for LocalizerRequest(319);
  if (v3 <= 0x3F)
  {
    v7 = *(_QWORD *)(v2 - 8) + 64;
    v8 = v7;
    sub_19B38(319, (unint64_t *)&qword_261BA0, (uint64_t (*)(uint64_t))&type metadata accessor for LocalizerRequest, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    if (v5 <= 0x3F)
    {
      v9 = *(_QWORD *)(v4 - 8) + 64;
      v10 = v9;
      swift_initStructMetadata(a1, 256, 5, &v6, a1 + 16);
    }
  }
}

uint64_t sub_14E42C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_22F024, 1);
}

uint64_t sub_14E440@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for SeriesEntityCardView.CardContents(0) - 8) + 80);
  return sub_147EC4(a1, v2 + ((v5 + 16) & ~v5), a2);
}

unint64_t sub_14E48C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_267D08;
  if (!qword_267D08)
  {
    v1 = sub_7EF8(&qword_267CF8);
    sub_7FD8(&qword_267D10, &qword_267CF0, (uint64_t)&protocol conformance descriptor for HStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_267D08);
  }
  return result;
}

uint64_t type metadata accessor for SeriesEntityCardView.TextLockupView(uint64_t a1)
{
  return sub_1FE90(a1, qword_267DD0, (uint64_t)&nominal type descriptor for SeriesEntityCardView.TextLockupView);
}

uint64_t sub_14E530()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  int *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t);
  char *v16;
  unsigned int (*v17)(char *, uint64_t, uint64_t);
  char *v18;
  uint64_t v20;
  uint64_t v21;

  v1 = (int *)type metadata accessor for SeriesEntityCardView.CardContents(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = (_QWORD *)(v0 + v4);
  v7 = sub_5440(&qword_25F548);
  v20 = v5;
  v21 = v0;
  if (swift_getEnumCaseMultiPayload(v0 + v4, v7) == 1)
  {
    v8 = (char *)v6 + *(int *)(type metadata accessor for SizeConstants.Environment(0) + 24);
    v9 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  }
  else
  {
    swift_release(*v6);
  }
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v6 + v1[5] + 8));
  v10 = (char *)v6 + v1[6];
  v11 = (int *)type metadata accessor for SeriesEntityCardView.TextLockupViewModel(0);
  v12 = &v10[v11[5]];
  v13 = type metadata accessor for LocalizerRequest(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(void (**)(char *, uint64_t))(v14 + 8);
  v15(v12, v13);
  v15(&v10[v11[6]], v13);
  v16 = &v10[v11[7]];
  v17 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48);
  if (!v17(v16, 1, v13))
    v15(v16, v13);
  v18 = &v10[v11[8]];
  if (!v17(v18, 1, v13))
    v15(v18, v13);
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v6 + v1[7]));
  return swift_deallocObject(v21, v4 + v20, v3 | 7);
}

double sub_14E6C4@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for SeriesEntityCardView.CardContents(0) - 8) + 80);
  return sub_147C58(v1 + ((v3 + 16) & ~v3), a1);
}

unint64_t sub_14E710()
{
  unint64_t result;
  uint64_t v1;

  result = qword_267D40;
  if (!qword_267D40)
  {
    v1 = sub_7EF8(&qword_267D38);
    sub_7FD8(&qword_267D48, &qword_267D50, (uint64_t)&protocol conformance descriptor for CoverStackView<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_267D40);
  }
  return result;
}

uint64_t sub_14E794(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, char a16)
{
  uint64_t v17;

  if ((a16 & 1) != 0)
  {
    sub_34B1C(a1, a2, a3 & 1);
    v17 = a4;
  }
  else
  {
    v17 = a8;
    swift_bridgeObjectRetain(a3);
  }
  return swift_bridgeObjectRetain(v17);
}

uint64_t sub_14E7D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, char a16)
{
  uint64_t v17;

  if ((a16 & 1) != 0)
  {
    sub_2B574(a1, a2, a3 & 1);
    v17 = a4;
  }
  else
  {
    v17 = a8;
    swift_bridgeObjectRelease(a3);
  }
  return swift_bridgeObjectRelease(v17);
}

uint64_t getEnumTagSinglePayload for SeriesEntityCardView.RegularCardLayout(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 24))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for SeriesEntityCardView.RegularCardLayout(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 24) = v3;
  return result;
}

ValueMetadata *type metadata accessor for SeriesEntityCardView.RegularCardLayout()
{
  return &type metadata for SeriesEntityCardView.RegularCardLayout;
}

_QWORD *sub_14E888(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _WORD *v20;
  _WORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  int *v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(char *, char *, uint64_t);
  uint64_t v49;
  char *v50;
  char *v51;
  unsigned int (*v52)(char *, uint64_t, uint64_t);
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v17 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v17);
  }
  else
  {
    v7 = sub_5440(&qword_25F548);
    if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
    {
      *(_WORD *)a1 = *(_WORD *)a2;
      v8 = (int *)type metadata accessor for SizeConstants.Environment(0);
      v9 = v8[6];
      v10 = (char *)a1 + v9;
      v11 = (char *)a2 + v9;
      v12 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
      *(_QWORD *)((char *)a1 + v8[7]) = *(_QWORD *)((char *)a2 + v8[7]);
      v13 = v8[8];
      v14 = (char *)a1 + v13;
      v15 = (char *)a2 + v13;
      v14[2] = v15[2];
      *(_WORD *)v14 = *(_WORD *)v15;
      v16 = 1;
    }
    else
    {
      v18 = *a2;
      *a1 = *a2;
      swift_retain(v18);
      v16 = 0;
    }
    swift_storeEnumTagMultiPayload(a1, v7, v16);
    v19 = a3[5];
    v20 = (_WORD *)((char *)a1 + v19);
    v21 = (_WORD *)((char *)a2 + v19);
    v22 = sub_5440(&qword_25FAA0);
    if (swift_getEnumCaseMultiPayload(v21, v22) == 1)
    {
      *v20 = *v21;
      v23 = type metadata accessor for FontConstants.Environment(0);
      v24 = *(int *)(v23 + 24);
      v25 = (char *)v20 + v24;
      v26 = (char *)v21 + v24;
      v27 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 16))(v25, v26, v27);
      *(_QWORD *)((char *)v20 + *(int *)(v23 + 28)) = *(_QWORD *)((char *)v21 + *(int *)(v23 + 28));
      v28 = 1;
    }
    else
    {
      v29 = *(_QWORD *)v21;
      *(_QWORD *)v20 = *(_QWORD *)v21;
      swift_retain(v29);
      v28 = 0;
    }
    swift_storeEnumTagMultiPayload(v20, v22, v28);
    v30 = a3[6];
    v31 = (_QWORD *)((char *)a1 + v30);
    v32 = (_QWORD *)((char *)a2 + v30);
    v33 = sub_5440(&qword_25F1E8);
    if (swift_getEnumCaseMultiPayload(v32, v33) == 1)
    {
      v34 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v34 - 8) + 16))(v31, v32, v34);
      v35 = v31;
      v36 = v33;
      v37 = 1;
    }
    else
    {
      v38 = *v32;
      *v31 = *v32;
      swift_retain(v38);
      v35 = v31;
      v36 = v33;
      v37 = 0;
    }
    swift_storeEnumTagMultiPayload(v35, v36, v37);
    v39 = a3[7];
    v40 = (char *)a1 + v39;
    v41 = (char *)a2 + v39;
    *((_BYTE *)a1 + v39) = *((_BYTE *)a2 + v39);
    v42 = (int *)type metadata accessor for SeriesEntityCardView.TextLockupViewModel(0);
    v43 = v42[5];
    v44 = &v40[v43];
    v45 = &v41[v43];
    v46 = type metadata accessor for LocalizerRequest(0);
    v47 = *(_QWORD *)(v46 - 8);
    v48 = *(void (**)(char *, char *, uint64_t))(v47 + 16);
    v48(v44, v45, v46);
    v48(&v40[v42[6]], &v41[v42[6]], v46);
    v49 = v42[7];
    v50 = &v40[v49];
    v51 = &v41[v49];
    v52 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v47 + 48);
    if (v52(&v41[v49], 1, v46))
    {
      v53 = sub_5440(&qword_25E0C8);
      memcpy(v50, v51, *(_QWORD *)(*(_QWORD *)(v53 - 8) + 64));
    }
    else
    {
      v48(v50, v51, v46);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v47 + 56))(v50, 0, 1, v46);
    }
    v54 = v42[8];
    v55 = &v40[v54];
    v56 = &v41[v54];
    if (v52(&v41[v54], 1, v46))
    {
      v57 = sub_5440(&qword_25E0C8);
      memcpy(v55, v56, *(_QWORD *)(*(_QWORD *)(v57 - 8) + 64));
    }
    else
    {
      v48(v55, v56, v46);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v47 + 56))(v55, 0, 1, v46);
    }
  }
  return a1;
}

uint64_t sub_14EC08(_QWORD *a1, int *a2)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  unsigned int (*v20)(char *, uint64_t, uint64_t);
  char *v21;
  uint64_t result;
  void (*v23)(char *, uint64_t);

  v4 = sub_5440(&qword_25F548);
  if (swift_getEnumCaseMultiPayload(a1, v4) == 1)
  {
    v5 = (char *)a1 + *(int *)(type metadata accessor for SizeConstants.Environment(0) + 24);
    v6 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  }
  else
  {
    swift_release(*a1);
  }
  v7 = (_QWORD *)((char *)a1 + a2[5]);
  v8 = sub_5440(&qword_25FAA0);
  if (swift_getEnumCaseMultiPayload(v7, v8) == 1)
  {
    v9 = (char *)v7 + *(int *)(type metadata accessor for FontConstants.Environment(0) + 24);
    v10 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  }
  else
  {
    swift_release(*v7);
  }
  v11 = (_QWORD *)((char *)a1 + a2[6]);
  v12 = sub_5440(&qword_25F1E8);
  if (swift_getEnumCaseMultiPayload(v11, v12) == 1)
  {
    v13 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v11, v13);
  }
  else
  {
    swift_release(*v11);
  }
  v14 = (char *)a1 + a2[7];
  v15 = (int *)type metadata accessor for SeriesEntityCardView.TextLockupViewModel(0);
  v16 = &v14[v15[5]];
  v17 = type metadata accessor for LocalizerRequest(0);
  v18 = *(_QWORD *)(v17 - 8);
  v23 = *(void (**)(char *, uint64_t))(v18 + 8);
  v23(v16, v17);
  v23(&v14[v15[6]], v17);
  v19 = &v14[v15[7]];
  v20 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48);
  if (!v20(v19, 1, v17))
    v23(v19, v17);
  v21 = &v14[v15[8]];
  result = ((uint64_t (*)(char *, uint64_t, uint64_t))v20)(v21, 1, v17);
  if (!(_DWORD)result)
    return ((uint64_t (*)(char *, uint64_t))v23)(v21, v17);
  return result;
}

_WORD *sub_14EE10(_WORD *a1, _WORD *a2, int *a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _WORD *v18;
  _WORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  int *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(char *, char *, uint64_t);
  uint64_t v47;
  char *v48;
  char *v49;
  unsigned int (*v50)(char *, uint64_t, uint64_t);
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;

  v6 = sub_5440(&qword_25F548);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    *a1 = *a2;
    v7 = (int *)type metadata accessor for SizeConstants.Environment(0);
    v8 = v7[6];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    *(_QWORD *)((char *)a1 + v7[7]) = *(_QWORD *)((char *)a2 + v7[7]);
    v12 = v7[8];
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    v13[2] = v14[2];
    *(_WORD *)v13 = *(_WORD *)v14;
    v15 = 1;
  }
  else
  {
    v16 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    swift_retain(v16);
    v15 = 0;
  }
  swift_storeEnumTagMultiPayload(a1, v6, v15);
  v17 = a3[5];
  v18 = (_WORD *)((char *)a1 + v17);
  v19 = (_WORD *)((char *)a2 + v17);
  v20 = sub_5440(&qword_25FAA0);
  if (swift_getEnumCaseMultiPayload(v19, v20) == 1)
  {
    *v18 = *v19;
    v21 = type metadata accessor for FontConstants.Environment(0);
    v22 = *(int *)(v21 + 24);
    v23 = (char *)v18 + v22;
    v24 = (char *)v19 + v22;
    v25 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 16))(v23, v24, v25);
    *(_QWORD *)((char *)v18 + *(int *)(v21 + 28)) = *(_QWORD *)((char *)v19 + *(int *)(v21 + 28));
    v26 = 1;
  }
  else
  {
    v27 = *(_QWORD *)v19;
    *(_QWORD *)v18 = *(_QWORD *)v19;
    swift_retain(v27);
    v26 = 0;
  }
  swift_storeEnumTagMultiPayload(v18, v20, v26);
  v28 = a3[6];
  v29 = (uint64_t *)((char *)a1 + v28);
  v30 = (uint64_t *)((char *)a2 + v28);
  v31 = sub_5440(&qword_25F1E8);
  if (swift_getEnumCaseMultiPayload(v30, v31) == 1)
  {
    v32 = type metadata accessor for ColorScheme(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v32 - 8) + 16))(v29, v30, v32);
    v33 = v29;
    v34 = v31;
    v35 = 1;
  }
  else
  {
    v36 = *v30;
    *v29 = *v30;
    swift_retain(v36);
    v33 = v29;
    v34 = v31;
    v35 = 0;
  }
  swift_storeEnumTagMultiPayload(v33, v34, v35);
  v37 = a3[7];
  v38 = (char *)a1 + v37;
  v39 = (char *)a2 + v37;
  *((_BYTE *)a1 + v37) = *((_BYTE *)a2 + v37);
  v40 = (int *)type metadata accessor for SeriesEntityCardView.TextLockupViewModel(0);
  v41 = v40[5];
  v42 = &v38[v41];
  v43 = &v39[v41];
  v44 = type metadata accessor for LocalizerRequest(0);
  v45 = *(_QWORD *)(v44 - 8);
  v46 = *(void (**)(char *, char *, uint64_t))(v45 + 16);
  v46(v42, v43, v44);
  v46(&v38[v40[6]], &v39[v40[6]], v44);
  v47 = v40[7];
  v48 = &v38[v47];
  v49 = &v39[v47];
  v50 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v45 + 48);
  if (v50(&v39[v47], 1, v44))
  {
    v51 = sub_5440(&qword_25E0C8);
    memcpy(v48, v49, *(_QWORD *)(*(_QWORD *)(v51 - 8) + 64));
  }
  else
  {
    v46(v48, v49, v44);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v45 + 56))(v48, 0, 1, v44);
  }
  v52 = v40[8];
  v53 = &v38[v52];
  v54 = &v39[v52];
  if (v50(&v39[v52], 1, v44))
  {
    v55 = sub_5440(&qword_25E0C8);
    memcpy(v53, v54, *(_QWORD *)(*(_QWORD *)(v55 - 8) + 64));
  }
  else
  {
    v46(v53, v54, v44);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v45 + 56))(v53, 0, 1, v44);
  }
  return a1;
}

_BYTE *sub_14F164(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  _BYTE *v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE *v39;
  _BYTE *v40;
  int *v41;
  uint64_t v42;
  _BYTE *v43;
  _BYTE *v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v48;
  _BYTE *v49;
  _BYTE *v50;
  uint64_t (*v51)(_BYTE *, uint64_t, uint64_t);
  int v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  _BYTE *v56;
  _BYTE *v57;
  int v58;
  int v59;
  _BYTE *v60;
  uint64_t v61;
  _BYTE *v63;

  if (a1 != a2)
  {
    sub_B414((uint64_t)a1, &qword_25F548);
    v6 = sub_5440(&qword_25F548);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      v7 = (int *)type metadata accessor for SizeConstants.Environment(0);
      v8 = v7[6];
      v9 = &a1[v8];
      v10 = &a2[v8];
      v11 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
      *(_QWORD *)&a1[v7[7]] = *(_QWORD *)&a2[v7[7]];
      v12 = v7[8];
      v13 = &a1[v12];
      v14 = &a2[v12];
      v15 = v14[2];
      *(_WORD *)v13 = *(_WORD *)v14;
      v13[2] = v15;
      v16 = 1;
    }
    else
    {
      v17 = *(_QWORD *)a2;
      *(_QWORD *)a1 = *(_QWORD *)a2;
      swift_retain(v17);
      v16 = 0;
    }
    swift_storeEnumTagMultiPayload(a1, v6, v16);
    v18 = a3[5];
    v19 = &a1[v18];
    v20 = &a2[v18];
    sub_B414((uint64_t)&a1[v18], &qword_25FAA0);
    v21 = sub_5440(&qword_25FAA0);
    if (swift_getEnumCaseMultiPayload(v20, v21) == 1)
    {
      *v19 = *v20;
      v19[1] = v20[1];
      v22 = type metadata accessor for FontConstants.Environment(0);
      v23 = *(int *)(v22 + 24);
      v24 = &v19[v23];
      v25 = &v20[v23];
      v26 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v26 - 8) + 16))(v24, v25, v26);
      *(_QWORD *)&v19[*(int *)(v22 + 28)] = *(_QWORD *)&v20[*(int *)(v22 + 28)];
      v27 = 1;
    }
    else
    {
      v28 = *(_QWORD *)v20;
      *(_QWORD *)v19 = *(_QWORD *)v20;
      swift_retain(v28);
      v27 = 0;
    }
    swift_storeEnumTagMultiPayload(v19, v21, v27);
    v29 = a3[6];
    v30 = (uint64_t *)&a1[v29];
    v31 = (uint64_t *)&a2[v29];
    sub_B414((uint64_t)&a1[v29], &qword_25F1E8);
    v32 = sub_5440(&qword_25F1E8);
    if (swift_getEnumCaseMultiPayload(v31, v32) == 1)
    {
      v33 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v33 - 8) + 16))(v30, v31, v33);
      v34 = v30;
      v35 = v32;
      v36 = 1;
    }
    else
    {
      v37 = *v31;
      *v30 = *v31;
      swift_retain(v37);
      v34 = v30;
      v35 = v32;
      v36 = 0;
    }
    swift_storeEnumTagMultiPayload(v34, v35, v36);
  }
  v38 = a3[7];
  v63 = a1;
  v39 = &a1[v38];
  v40 = &a2[v38];
  a1[v38] = a2[v38];
  v41 = (int *)type metadata accessor for SeriesEntityCardView.TextLockupViewModel(0);
  v42 = v41[5];
  v43 = &v39[v42];
  v44 = &v40[v42];
  v45 = type metadata accessor for LocalizerRequest(0);
  v46 = *(_QWORD *)(v45 - 8);
  v47 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v46 + 24);
  v47(v43, v44, v45);
  v47(&v39[v41[6]], &v40[v41[6]], v45);
  v48 = v41[7];
  v49 = &v39[v48];
  v50 = &v40[v48];
  v51 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v46 + 48);
  v52 = v51(&v39[v48], 1, v45);
  v53 = v51(v50, 1, v45);
  if (v52)
  {
    if (!v53)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v46 + 16))(v49, v50, v45);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v46 + 56))(v49, 0, 1, v45);
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  if (v53)
  {
    (*(void (**)(_BYTE *, uint64_t))(v46 + 8))(v49, v45);
LABEL_17:
    v54 = sub_5440(&qword_25E0C8);
    memcpy(v49, v50, *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64));
    goto LABEL_18;
  }
  v47(v49, v50, v45);
LABEL_18:
  v55 = v41[8];
  v56 = &v39[v55];
  v57 = &v40[v55];
  v58 = v51(&v39[v55], 1, v45);
  v59 = v51(v57, 1, v45);
  if (!v58)
  {
    v60 = v63;
    if (!v59)
    {
      v47(v56, v57, v45);
      return v60;
    }
    (*(void (**)(_BYTE *, uint64_t))(v46 + 8))(v56, v45);
    goto LABEL_23;
  }
  v60 = v63;
  if (v59)
  {
LABEL_23:
    v61 = sub_5440(&qword_25E0C8);
    memcpy(v56, v57, *(_QWORD *)(*(_QWORD *)(v61 - 8) + 64));
    return v60;
  }
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v46 + 16))(v56, v57, v45);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v46 + 56))(v56, 0, 1, v45);
  return v60;
}

_WORD *sub_14F59C(_WORD *a1, _WORD *a2, int *a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  _WORD *v16;
  _WORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  int *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, char *, uint64_t);
  uint64_t v39;
  char *v40;
  char *v41;
  unsigned int (*v42)(char *, uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;

  v6 = sub_5440(&qword_25F548);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    *a1 = *a2;
    v7 = (int *)type metadata accessor for SizeConstants.Environment(0);
    v8 = v7[6];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
    *(_QWORD *)((char *)a1 + v7[7]) = *(_QWORD *)((char *)a2 + v7[7]);
    v12 = v7[8];
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    v13[2] = v14[2];
    *(_WORD *)v13 = *(_WORD *)v14;
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v15 = a3[5];
  v16 = (_WORD *)((char *)a1 + v15);
  v17 = (_WORD *)((char *)a2 + v15);
  v18 = sub_5440(&qword_25FAA0);
  if (swift_getEnumCaseMultiPayload(v17, v18) == 1)
  {
    *v16 = *v17;
    v19 = type metadata accessor for FontConstants.Environment(0);
    v20 = *(int *)(v19 + 24);
    v21 = (char *)v16 + v20;
    v22 = (char *)v17 + v20;
    v23 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 32))(v21, v22, v23);
    *(_QWORD *)((char *)v16 + *(int *)(v19 + 28)) = *(_QWORD *)((char *)v17 + *(int *)(v19 + 28));
    swift_storeEnumTagMultiPayload(v16, v18, 1);
  }
  else
  {
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  v24 = a3[6];
  v25 = (char *)a1 + v24;
  v26 = (char *)a2 + v24;
  v27 = sub_5440(&qword_25F1E8);
  if (swift_getEnumCaseMultiPayload(v26, v27) == 1)
  {
    v28 = type metadata accessor for ColorScheme(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v28 - 8) + 32))(v25, v26, v28);
    swift_storeEnumTagMultiPayload(v25, v27, 1);
  }
  else
  {
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
  }
  v29 = a3[7];
  v30 = (char *)a1 + v29;
  v31 = (char *)a2 + v29;
  *((_BYTE *)a1 + v29) = *((_BYTE *)a2 + v29);
  v32 = (int *)type metadata accessor for SeriesEntityCardView.TextLockupViewModel(0);
  v33 = v32[5];
  v34 = &v30[v33];
  v35 = &v31[v33];
  v36 = type metadata accessor for LocalizerRequest(0);
  v37 = *(_QWORD *)(v36 - 8);
  v38 = *(void (**)(char *, char *, uint64_t))(v37 + 32);
  v38(v34, v35, v36);
  v38(&v30[v32[6]], &v31[v32[6]], v36);
  v39 = v32[7];
  v40 = &v30[v39];
  v41 = &v31[v39];
  v42 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48);
  if (v42(&v31[v39], 1, v36))
  {
    v43 = sub_5440(&qword_25E0C8);
    memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
  }
  else
  {
    v38(v40, v41, v36);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v37 + 56))(v40, 0, 1, v36);
  }
  v44 = v32[8];
  v45 = &v30[v44];
  v46 = &v31[v44];
  if (v42(&v31[v44], 1, v36))
  {
    v47 = sub_5440(&qword_25E0C8);
    memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
  }
  else
  {
    v38(v45, v46, v36);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v37 + 56))(v45, 0, 1, v36);
  }
  return a1;
}

_WORD *sub_14F8F4(_WORD *a1, _WORD *a2, int *a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  _WORD *v16;
  _WORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  int *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, char *, uint64_t);
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t (*v42)(char *, uint64_t, uint64_t);
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  int v49;
  int v50;
  _WORD *v51;
  uint64_t v52;
  _WORD *v54;

  if (a1 != a2)
  {
    sub_B414((uint64_t)a1, &qword_25F548);
    v6 = sub_5440(&qword_25F548);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      *a1 = *a2;
      v7 = (int *)type metadata accessor for SizeConstants.Environment(0);
      v8 = v7[6];
      v9 = (char *)a1 + v8;
      v10 = (char *)a2 + v8;
      v11 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
      *(_QWORD *)((char *)a1 + v7[7]) = *(_QWORD *)((char *)a2 + v7[7]);
      v12 = v7[8];
      v13 = (char *)a1 + v12;
      v14 = (char *)a2 + v12;
      v13[2] = v14[2];
      *(_WORD *)v13 = *(_WORD *)v14;
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
    v15 = a3[5];
    v16 = (_WORD *)((char *)a1 + v15);
    v17 = (_WORD *)((char *)a2 + v15);
    sub_B414((uint64_t)a1 + v15, &qword_25FAA0);
    v18 = sub_5440(&qword_25FAA0);
    if (swift_getEnumCaseMultiPayload(v17, v18) == 1)
    {
      *v16 = *v17;
      v19 = type metadata accessor for FontConstants.Environment(0);
      v20 = *(int *)(v19 + 24);
      v21 = (char *)v16 + v20;
      v22 = (char *)v17 + v20;
      v23 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 32))(v21, v22, v23);
      *(_QWORD *)((char *)v16 + *(int *)(v19 + 28)) = *(_QWORD *)((char *)v17 + *(int *)(v19 + 28));
      swift_storeEnumTagMultiPayload(v16, v18, 1);
    }
    else
    {
      memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    v24 = a3[6];
    v25 = (char *)a1 + v24;
    v26 = (char *)a2 + v24;
    sub_B414((uint64_t)a1 + v24, &qword_25F1E8);
    v27 = sub_5440(&qword_25F1E8);
    if (swift_getEnumCaseMultiPayload(v26, v27) == 1)
    {
      v28 = type metadata accessor for ColorScheme(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v28 - 8) + 32))(v25, v26, v28);
      swift_storeEnumTagMultiPayload(v25, v27, 1);
    }
    else
    {
      memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    }
  }
  v29 = a3[7];
  v54 = a1;
  v30 = (char *)a1 + v29;
  v31 = (char *)a2 + v29;
  *((_BYTE *)a1 + v29) = *((_BYTE *)a2 + v29);
  v32 = (int *)type metadata accessor for SeriesEntityCardView.TextLockupViewModel(0);
  v33 = v32[5];
  v34 = &v30[v33];
  v35 = &v31[v33];
  v36 = type metadata accessor for LocalizerRequest(0);
  v37 = *(_QWORD *)(v36 - 8);
  v38 = *(void (**)(char *, char *, uint64_t))(v37 + 40);
  v38(v34, v35, v36);
  v38(&v30[v32[6]], &v31[v32[6]], v36);
  v39 = v32[7];
  v40 = &v30[v39];
  v41 = &v31[v39];
  v42 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v37 + 48);
  v43 = v42(&v30[v39], 1, v36);
  v44 = v42(v41, 1, v36);
  if (v43)
  {
    if (!v44)
    {
      (*(void (**)(char *, char *, uint64_t))(v37 + 32))(v40, v41, v36);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v37 + 56))(v40, 0, 1, v36);
      goto LABEL_17;
    }
    goto LABEL_16;
  }
  if (v44)
  {
    (*(void (**)(char *, uint64_t))(v37 + 8))(v40, v36);
LABEL_16:
    v45 = sub_5440(&qword_25E0C8);
    memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
    goto LABEL_17;
  }
  v38(v40, v41, v36);
LABEL_17:
  v46 = v32[8];
  v47 = &v30[v46];
  v48 = &v31[v46];
  v49 = v42(&v30[v46], 1, v36);
  v50 = v42(v48, 1, v36);
  if (!v49)
  {
    v51 = v54;
    if (!v50)
    {
      v38(v47, v48, v36);
      return v51;
    }
    (*(void (**)(char *, uint64_t))(v37 + 8))(v47, v36);
    goto LABEL_22;
  }
  v51 = v54;
  if (v50)
  {
LABEL_22:
    v52 = sub_5440(&qword_25E0C8);
    memcpy(v47, v48, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
    return v51;
  }
  (*(void (**)(char *, char *, uint64_t))(v37 + 32))(v47, v48, v36);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v37 + 56))(v47, 0, 1, v36);
  return v51;
}

uint64_t sub_14FD20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_14FD2C);
}

uint64_t sub_14FD2C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_5440(&qword_25F558);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v11 = sub_5440(&qword_261A40);
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v11;
      v13 = a3[5];
    }
    else
    {
      v14 = sub_5440(&qword_25F210);
      v12 = *(_QWORD *)(v14 - 8);
      if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
      {
        v8 = v14;
        v13 = a3[6];
      }
      else
      {
        v8 = type metadata accessor for SeriesEntityCardView.TextLockupViewModel(0);
        v12 = *(_QWORD *)(v8 - 8);
        v13 = a3[7];
      }
    }
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t sub_14FDF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_14FE00);
}

uint64_t sub_14FE00(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = sub_5440(&qword_25F558);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v13 = sub_5440(&qword_261A40);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = a4[5];
    }
    else
    {
      v16 = sub_5440(&qword_25F210);
      v14 = *(_QWORD *)(v16 - 8);
      if (*(_DWORD *)(v14 + 84) == a3)
      {
        v10 = v16;
        v15 = a4[6];
      }
      else
      {
        v10 = type metadata accessor for SeriesEntityCardView.TextLockupViewModel(0);
        v14 = *(_QWORD *)(v10 - 8);
        v15 = a4[7];
      }
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_14FED0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD v10[4];

  sub_19B38(319, (unint64_t *)&qword_25F5C8, type metadata accessor for SizeConstants, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  if (v3 <= 0x3F)
  {
    v10[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_19B38(319, &qword_261AB0, type metadata accessor for FontConstants, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
    if (v5 <= 0x3F)
    {
      v10[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_19B38(319, (unint64_t *)&qword_25F298, type metadata accessor for ColorConstants, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
      if (v7 <= 0x3F)
      {
        v10[2] = *(_QWORD *)(v6 - 8) + 64;
        v8 = type metadata accessor for SeriesEntityCardView.TextLockupViewModel(319);
        if (v9 <= 0x3F)
        {
          v10[3] = *(_QWORD *)(v8 - 8) + 64;
          swift_initStructMetadata(a1, 256, 4, v10, a1 + 16);
        }
      }
    }
  }
}

uint64_t storeEnumTagSinglePayload for SeriesEntityCardView.TextLockupViewModel.LayoutDirection(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_150020 + 4 * byte_1F0545[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_150054 + 4 * byte_1F0540[v4]))();
}

uint64_t sub_150054(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_15005C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x150064);
  return result;
}

uint64_t sub_150070(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x150078);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_15007C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_150084(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SeriesEntityCardView.TextLockupViewModel.LayoutDirection()
{
  return &type metadata for SeriesEntityCardView.TextLockupViewModel.LayoutDirection;
}

unint64_t sub_1500A4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_267E10;
  if (!qword_267E10)
  {
    v1 = sub_7EF8(&qword_267E18);
    sub_14E48C();
    sub_7FD8(&qword_267D18, &qword_267D00, (uint64_t)&protocol conformance descriptor for GeometryReader<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_267E10);
  }
  return result;
}

unint64_t sub_15012C()
{
  unint64_t result;

  result = qword_267E20;
  if (!qword_267E20)
  {
    result = swift_getWitnessTable(&unk_1F07B4, &type metadata for SeriesEntityCardView.TextLockupViewModel.LayoutDirection);
    atomic_store(result, (unint64_t *)&qword_267E20);
  }
  return result;
}

uint64_t sub_150170(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_22F04C, 1);
}

unint64_t sub_150184()
{
  unint64_t result;

  result = qword_267E28;
  if (!qword_267E28)
  {
    result = swift_getWitnessTable(&unk_1F082C, &type metadata for SeriesEntityCardView.RegularCardLayout);
    atomic_store(result, (unint64_t *)&qword_267E28);
  }
  return result;
}

unint64_t sub_1501F4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_267EA8;
  if (!qword_267EA8)
  {
    v1 = sub_7EF8(&qword_267E48);
    sub_150278();
    sub_7FD8((unint64_t *)&qword_25EE78, &qword_25EE58, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_267EA8);
  }
  return result;
}

unint64_t sub_150278()
{
  unint64_t result;
  uint64_t v1;

  result = qword_267EB0;
  if (!qword_267EB0)
  {
    v1 = sub_7EF8(&qword_267E40);
    sub_7FD8(qword_267EB8, &qword_267E38, (uint64_t)&protocol conformance descriptor for VStack<A>);
    sub_7FD8((unint64_t *)&qword_261BF0, &qword_261BF8, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_267EB0);
  }
  return result;
}

uint64_t _CodeAnyActionModel_KeyedBy.description.getter(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t WitnessTable;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v3 = *v1;
  v10 = 0;
  v11 = 0xE000000000000000;
  v9 = v3;
  v4 = *(_QWORD *)(a1 + 16);
  v5 = sub_7EF8(&qword_25E848);
  v6 = type metadata accessor for Dictionary(0, v4, v5, *(_QWORD *)(a1 + 32));
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A : B], v6);
  DefaultStringInterpolation.appendInterpolation<A>(_:)(&v9, v6, WitnessTable);
  return v10;
}

uint64_t _CodeAnyActionModel_KeyedBy.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v5;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v17[40];

  sub_BD00((uint64_t)a1, (uint64_t)v17);
  v11 = sub_30268();
  v12 = Dictionary<>.init(from:)(v17, a2, &type metadata for CodeAnyActionModel, a3, a4, v11);
  if (v5)
    return _s7BooksUI13AnyPagedFrameVwxx_0(a1);
  v14 = v12;
  v15 = sub_5440(&qword_25E848);
  v16 = Dictionary.mapValues<A>(_:)(sub_5DF58, 0, v14, a2, &type metadata for CodeAnyActionModel, v15, a4);
  swift_bridgeObjectRelease(v14);
  result = _s7BooksUI13AnyPagedFrameVwxx_0(a1);
  *a5 = v16;
  return result;
}

uint64_t sub_150484@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  return _CodeAnyActionModel_KeyedBy.init(from:)(a1, a2[2], a2[3], a2[4], a3);
}

uint64_t _CodeAnyActionModel_KeyedBy<>.init(_partiallyFrom:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  _BYTE v8[40];

  sub_BD00((uint64_t)a1, (uint64_t)v8);
  v4 = sub_30268();
  v5 = Dictionary<>.init(_partiallyFrom:)(v8, &type metadata for CodeAnyActionModel, v4);
  v6 = sub_150518(v5);
  swift_bridgeObjectRelease(v5);
  result = _s7BooksUI13AnyPagedFrameVwxx_0(a1);
  *a2 = v6;
  return result;
}

uint64_t sub_150518(uint64_t a1)
{
  uint64_t result;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t i;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  int64_t v23;
  __int128 v24[2];
  _QWORD v25[5];
  uint64_t v26;

  sub_5440(&qword_267F40);
  result = static _DictionaryStorage.copy(original:)(a1);
  v3 = (_QWORD *)result;
  v4 = 0;
  v26 = a1;
  v5 = *(_QWORD *)(a1 + 64);
  v22 = a1 + 64;
  v6 = 1 << *(_BYTE *)(a1 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & v5;
  v23 = (unint64_t)(v6 + 63) >> 6;
  v9 = result + 64;
  if ((v7 & v5) == 0)
    goto LABEL_5;
LABEL_4:
  v10 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  for (i = v10 | (v4 << 6); ; i = __clz(__rbit64(v13)) + (v4 << 6))
  {
    v15 = (uint64_t *)(*(_QWORD *)(v26 + 48) + 16 * i);
    v17 = *v15;
    v16 = v15[1];
    sub_958C8(*(_QWORD *)(v26 + 56) + 40 * i, (uint64_t)v25);
    sub_BD00((uint64_t)v25, (uint64_t)v24);
    swift_bridgeObjectRetain(v16);
    sub_302DC(v25);
    *(_QWORD *)(v9 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    v18 = (_QWORD *)(v3[6] + 16 * i);
    *v18 = v17;
    v18[1] = v16;
    result = sub_AC68(v24, v3[7] + 40 * i);
    v19 = v3[2];
    v20 = __OFADD__(v19, 1);
    v21 = v19 + 1;
    if (v20)
    {
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v3[2] = v21;
    if (v8)
      goto LABEL_4;
LABEL_5:
    v12 = v4 + 1;
    if (__OFADD__(v4, 1))
      goto LABEL_24;
    if (v12 >= v23)
      return (uint64_t)v3;
    v13 = *(_QWORD *)(v22 + 8 * v12);
    ++v4;
    if (!v13)
    {
      v4 = v12 + 1;
      if (v12 + 1 >= v23)
        return (uint64_t)v3;
      v13 = *(_QWORD *)(v22 + 8 * v4);
      if (!v13)
      {
        v4 = v12 + 2;
        if (v12 + 2 >= v23)
          return (uint64_t)v3;
        v13 = *(_QWORD *)(v22 + 8 * v4);
        if (!v13)
          break;
      }
    }
LABEL_18:
    v8 = (v13 - 1) & v13;
  }
  v14 = v12 + 3;
  if (v14 >= v23)
    return (uint64_t)v3;
  v13 = *(_QWORD *)(v22 + 8 * v14);
  if (v13)
  {
    v4 = v14;
    goto LABEL_18;
  }
  while (1)
  {
    v4 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v4 >= v23)
      return (uint64_t)v3;
    v13 = *(_QWORD *)(v22 + 8 * v4);
    ++v14;
    if (v13)
      goto LABEL_18;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t type metadata accessor for _CodeAnyActionModel_KeyedBy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10E40(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _CodeAnyActionModel_KeyedBy);
}

uint64_t ViewModelWithExternals.subscript.getter(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v2 = *(_QWORD *)(*a1 + class metadata base offset for KeyPath);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(a1);
  v5 = (char *)&v9 - v4;
  (*(void (**)(uint64_t, uint64_t))(v6 + 32))(v7, v6);
  swift_getAtKeyPath(v5, a1);
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t sub_1507E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  void (*v25)(char *, uint64_t, uint64_t);
  unint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v29 = a1;
  v30 = a2;
  v2 = sub_5440(&qword_267FF8);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_5440(&qword_268000);
  __chkstk_darwin(v6);
  v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_5440(&qword_268008);
  __chkstk_darwin(v9);
  v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_5440(&qword_263A08);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_25DC18 != -1)
    swift_once(&qword_25DC18, sub_B9B50);
  v16 = sub_7120(v12, (uint64_t)qword_2639F0);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, v16, v12);
  UserDefault.wrappedValue.getter(&v31, v12);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  if (v31 == 1)
  {
    v17 = _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0();
    v19 = v18;
    v20 = (uint64_t)&v11[*(int *)(v9 + 36)];
    sub_150ADC(v28, v20);
    v21 = (uint64_t *)(v20 + *(int *)(sub_5440(&qword_268028) + 36));
    *v21 = v17;
    v21[1] = v19;
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v11, v29, v2);
    sub_B3D0((uint64_t)v11, (uint64_t)v8, &qword_268008);
    swift_storeEnumTagMultiPayload(v8, v6, 0);
    v22 = sub_151ED4();
    v23 = sub_7FD8(&qword_268018, &qword_267FF8, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
    _ConditionalContent<>.init(storage:)(v8, v9, v2, v22, v23);
    return sub_B414((uint64_t)v11, &qword_268008);
  }
  else
  {
    v25 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    v25(v5, v29, v2);
    v25(v8, (uint64_t)v5, v2);
    swift_storeEnumTagMultiPayload(v8, v6, 1);
    v26 = sub_151ED4();
    v27 = sub_7FD8(&qword_268018, &qword_267FF8, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
    _ConditionalContent<>.init(storage:)(v8, v9, v2, v26, v27);
    return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
}

uint64_t sub_150ADC@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;

  v4 = sub_5440(&qword_262638);
  __chkstk_darwin(v4);
  v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_5440(&qword_262640);
  __chkstk_darwin(v7);
  v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_5440(&qword_268030);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v6 = static VerticalAlignment.center.getter(v11);
  *((_QWORD *)v6 + 1) = 0;
  v6[16] = 0;
  v14 = sub_5440(&qword_268038);
  sub_150CA0(a1, (uint64_t)&v6[*(int *)(v14 + 44)]);
  v15 = &a1[*(int *)(type metadata accessor for ShelfGridDebugOverlayViewModifier(0) + 36)];
  if (v15[8])
    v16 = INFINITY;
  else
    v16 = *(double *)v15;
  v17 = _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0();
  sub_87EA8(0.0, 1, 0.0, 1, v16, 0, 0.0, 1, (uint64_t)v9, 0.0, 1, 0.0, 1, v17, v18);
  sub_B414((uint64_t)v6, &qword_262638);
  sub_B3D0((uint64_t)v9, (uint64_t)v13, &qword_262640);
  v13[*(int *)(v10 + 36)] = 0;
  sub_B414((uint64_t)v9, &qword_262640);
  return sub_151F70((uint64_t)v13, a2);
}

void sub_150CA0(char *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  __int128 v21;
  uint64_t v22;
  uint64_t KeyPath;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  int v52;
  char v53;
  uint64_t v54;
  unsigned __int8 v55;
  uint64_t v56;
  unsigned __int8 v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  uint64_t v63;

  v4 = sub_5440(&qword_268040);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v5);
  v10 = (char *)&v43 - v9;
  v11 = static Color.orange.getter(v8);
  type metadata accessor for ShelfGridDebugOverlayViewModifier(0);
  v12 = ShelfGridPadding.leading.getter();
  v14 = v13 & 1;
  v15 = _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0();
  v17 = _FrameLayout.init(width:height:alignment:)(&v54, v12, v14, 0, 1, v15, v16);
  v18 = v54;
  v52 = v55;
  v51 = v56;
  v50 = v57;
  v48 = v59;
  v49 = v58;
  v19 = ShelfGridSpacing.horizontal.getter(v17);
  LOBYTE(v14) = v20;
  *(_QWORD *)v10 = static VerticalAlignment.center.getter(v19);
  *((_QWORD *)v10 + 1) = v19;
  v10[16] = v14 & 1;
  sub_5440(&qword_268048);
  v53 = *a1;
  v21 = *(_OWORD *)(a1 + 24);
  v60 = *(_OWORD *)(a1 + 8);
  v61 = v21;
  v22 = ShelfGridBreakpoint.resolveColumns(for:dynamicTypeSize:)((uint64_t *)&v60);
  if (v22 < 0)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)&v60 = 0;
    *((_QWORD *)&v60 + 1) = v22;
    KeyPath = swift_getKeyPath(&unk_1F0C48);
    v24 = sub_5440(&qword_262E68);
    v25 = sub_5440(&qword_268050);
    v26 = sub_A3DE4();
    v47 = v18;
    v27 = v26;
    v28 = sub_151FB8();
    v29 = ForEach<>.init(_:id:content:)(&v60, KeyPath, sub_150FE8, 0, v24, v25, v27, &protocol witness table for Int, v28);
    v30 = static Color.orange.getter(v29);
    v31 = ShelfGridPadding.trailing.getter();
    v33 = v32 & 1;
    v34 = _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0();
    _FrameLayout.init(width:height:alignment:)(&v60, v31, v33, 0, 1, v34, v35);
    v36 = v60;
    LOBYTE(v25) = BYTE8(v60);
    v37 = v61;
    v46 = BYTE8(v61);
    v45 = v62;
    v44 = v63;
    sub_B3D0((uint64_t)v10, (uint64_t)v7, &qword_268040);
    *(_QWORD *)a2 = v11;
    *(_WORD *)(a2 + 8) = 256;
    v38 = v47;
    *(_QWORD *)(a2 + 16) = 0x3FE0000000000000;
    *(_QWORD *)(a2 + 24) = v38;
    *(_BYTE *)(a2 + 32) = v52;
    *(_QWORD *)(a2 + 40) = v51;
    *(_BYTE *)(a2 + 48) = v50;
    v39 = v48;
    *(_QWORD *)(a2 + 56) = v49;
    *(_QWORD *)(a2 + 64) = v39;
    v40 = sub_5440(&qword_268060);
    sub_B3D0((uint64_t)v7, a2 + *(int *)(v40 + 48), &qword_268040);
    v41 = a2 + *(int *)(v40 + 64);
    *(_QWORD *)v41 = v30;
    *(_WORD *)(v41 + 8) = 256;
    *(_QWORD *)(v41 + 16) = 0x3FE0000000000000;
    *(_QWORD *)(v41 + 24) = v36;
    *(_BYTE *)(v41 + 32) = v25;
    *(_QWORD *)(v41 + 40) = v37;
    *(_BYTE *)(v41 + 48) = v46;
    v42 = v44;
    *(_QWORD *)(v41 + 56) = v45;
    *(_QWORD *)(v41 + 64) = v42;
    swift_retain(v11);
    swift_retain(v30);
    sub_B414((uint64_t)v10, &qword_268040);
    swift_release(v30);
    sub_B414((uint64_t)v7, &qword_268040);
    swift_release(v11);
  }
}

uint64_t sub_150FE8@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;

  result = static Color.teal.getter();
  *(_QWORD *)a1 = result;
  *(_WORD *)(a1 + 8) = 256;
  *(_QWORD *)(a1 + 16) = 0x3FE0000000000000;
  return result;
}

uint64_t sub_151020@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  unint64_t v27;
  uint64_t v28;
  void (*v30)(char *, uint64_t, uint64_t);
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[5];

  v34 = a1;
  v35 = a2;
  v2 = sub_5440(&qword_268068);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_5440(&qword_268070);
  __chkstk_darwin(v6);
  v8 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_5440(&qword_268078);
  __chkstk_darwin(v9);
  v11 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_5440(&qword_263A08);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_25DC18 != -1)
    swift_once(&qword_25DC18, sub_B9B50);
  v16 = sub_7120(v12, (uint64_t)qword_2639F0);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, v16, v12);
  UserDefault.wrappedValue.getter(v36, v12);
  v17 = (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  if (LOBYTE(v36[0]) == 1)
  {
    v18 = static Color.red.getter(v17);
    StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)(v36, 0, 0, _swiftEmptyArrayStorage, 1.0, 10.0, 0.0);
    v19 = *(double *)v36;
    v20 = v36[2];
    v21 = v36[3];
    v22 = v36[4];
    swift_retain(v18);
    v23 = _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0();
    v25 = v24;
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v11, v34, v2);
    swift_release(v18);
    v26 = &v11[*(int *)(v9 + 36)];
    *(double *)v26 = v19 * 0.5;
    *((double *)v26 + 1) = v19;
    *((_QWORD *)v26 + 2) = v36[1];
    *((_QWORD *)v26 + 3) = v20;
    *((_QWORD *)v26 + 4) = v21;
    *((_QWORD *)v26 + 5) = v22;
    *((_QWORD *)v26 + 6) = v18;
    *((_WORD *)v26 + 28) = 256;
    *((_QWORD *)v26 + 8) = v23;
    *((_QWORD *)v26 + 9) = v25;
    sub_B3D0((uint64_t)v11, (uint64_t)v8, &qword_268078);
    swift_storeEnumTagMultiPayload(v8, v6, 0);
    v27 = sub_15203C();
    v28 = sub_7FD8(&qword_268088, &qword_268068, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
    _ConditionalContent<>.init(storage:)(v8, v9, v2, v27, v28);
    return sub_B414((uint64_t)v11, &qword_268078);
  }
  else
  {
    v30 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    v30(v5, v34, v2);
    v30(v8, (uint64_t)v5, v2);
    swift_storeEnumTagMultiPayload(v8, v6, 1);
    v31 = sub_15203C();
    v32 = sub_7FD8(&qword_268088, &qword_268068, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
    _ConditionalContent<>.init(storage:)(v8, v9, v2, v31, v32);
    return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
}

uint64_t View.shelfGridDebugOverlay(breakpoint:gridType:dynamicTypeSize:padding:spacing:maxContentWidth:)@<X0>(uint64_t a1@<X7>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;

  v5 = type metadata accessor for ShelfGridDebugOverlayViewModifier(255);
  v6 = type metadata accessor for ModifiedContent(0, a1, v5);
  sub_15143C();
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v6);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(a2, v2, a1);
}

uint64_t type metadata accessor for ShelfGridDebugOverlayViewModifier(uint64_t a1)
{
  uint64_t result;

  result = qword_267FB0;
  if (!qword_267FB0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ShelfGridDebugOverlayViewModifier);
  return result;
}

unint64_t sub_15143C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_267F48;
  if (!qword_267F48)
  {
    v1 = type metadata accessor for ShelfGridDebugOverlayViewModifier(255);
    result = swift_getWitnessTable(&unk_1F0BF0, v1);
    atomic_store(result, (unint64_t *)&qword_267F48);
  }
  return result;
}

uint64_t View.shelfItemDebugBorder()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;

  v5 = type metadata accessor for ModifiedContent(0, a1, &type metadata for ShelfGridItemDebugBorder);
  sub_151508();
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v5);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(a2, v2, a1);
}

unint64_t sub_151508()
{
  unint64_t result;

  result = qword_267F50;
  if (!qword_267F50)
  {
    result = swift_getWitnessTable(&unk_1F0BA0, &type metadata for ShelfGridItemDebugBorder);
    atomic_store(result, (unint64_t *)&qword_267F50);
  }
  return result;
}

uint64_t sub_15154C(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

ValueMetadata *type metadata accessor for ShelfGridItemDebugBorder()
{
  return &type metadata for ShelfGridItemDebugBorder;
}

_QWORD *sub_151564(_BYTE *a1, _QWORD *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    *a1 = *(_BYTE *)a2;
    v7 = a2[1];
    v8 = a2[2];
    v4[1] = v7;
    v4[2] = v8;
    v10 = a2 + 3;
    v9 = a2[3];
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    if (v9)
    {
      v11 = a2[4];
      v4[3] = v9;
      v4[4] = v11;
      swift_bridgeObjectRetain(v9);
      swift_bridgeObjectRetain(v11);
    }
    else
    {
      *(_OWORD *)(v4 + 3) = *v10;
    }
    v13 = a3[6];
    v14 = (char *)v4 + v13;
    v15 = (char *)a2 + v13;
    v16 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v14, v15, v16);
    v17 = a3[7];
    v18 = (char *)v4 + v17;
    v19 = (char *)a2 + v17;
    v20 = type metadata accessor for ShelfGridPadding(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v18, v19, v20);
    v21 = a3[8];
    v22 = (char *)v4 + v21;
    v23 = (char *)a2 + v21;
    v24 = type metadata accessor for ShelfGridSpacing(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 16))(v22, v23, v24);
    v25 = a3[9];
    v26 = (char *)v4 + v25;
    v27 = (char *)a2 + v25;
    *(_QWORD *)v26 = *(_QWORD *)v27;
    v26[8] = v27[8];
  }
  return v4;
}

uint64_t sub_1516B8(_QWORD *a1, int *a2)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;

  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[2]);
  v4 = a1[3];
  if (v4)
  {
    swift_bridgeObjectRelease(v4);
    swift_bridgeObjectRelease(a1[4]);
  }
  v5 = (char *)a1 + a2[6];
  v6 = type metadata accessor for DynamicTypeSize(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = (char *)a1 + a2[7];
  v8 = type metadata accessor for ShelfGridPadding(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  v9 = (char *)a1 + a2[8];
  v10 = type metadata accessor for ShelfGridSpacing(0);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
}

uint64_t sub_15176C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = v7;
  v9 = (_OWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  if (v8)
  {
    v10 = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 24) = v8;
    *(_QWORD *)(a1 + 32) = v10;
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v10);
  }
  else
  {
    *(_OWORD *)(a1 + 24) = *v9;
  }
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = type metadata accessor for DynamicTypeSize(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = type metadata accessor for ShelfGridPadding(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = type metadata accessor for ShelfGridSpacing(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v20, v21, v22);
  v23 = a3[9];
  v24 = a1 + v23;
  v25 = a2 + v23;
  *(_QWORD *)v24 = *(_QWORD *)v25;
  *(_BYTE *)(v24 + 8) = *(_BYTE *)(v25 + 8);
  return a1;
}

uint64_t sub_151894(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = *(_QWORD *)(a2 + 24);
  if (!v10)
  {
    if (v11)
    {
      *(_QWORD *)(a1 + 24) = v11;
      v14 = *(_QWORD *)(a2 + 32);
      *(_QWORD *)(a1 + 32) = v14;
      swift_bridgeObjectRetain(v11);
      swift_bridgeObjectRetain(v14);
      goto LABEL_8;
    }
LABEL_7:
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    goto LABEL_8;
  }
  if (!v11)
  {
    sub_B414(a1 + 24, &qword_260E38);
    goto LABEL_7;
  }
  *(_QWORD *)(a1 + 24) = v11;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRelease(v10);
  v12 = *(_QWORD *)(a2 + 32);
  v13 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
LABEL_8:
  v15 = a3[6];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = type metadata accessor for DynamicTypeSize(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 24))(v16, v17, v18);
  v19 = a3[7];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = type metadata accessor for ShelfGridPadding(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 24))(v20, v21, v22);
  v23 = a3[8];
  v24 = a1 + v23;
  v25 = a2 + v23;
  v26 = type metadata accessor for ShelfGridSpacing(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 24))(v24, v25, v26);
  v27 = a3[9];
  v28 = a1 + v27;
  v29 = a2 + v27;
  v30 = *(_BYTE *)(v29 + 8);
  *(_QWORD *)v28 = *(_QWORD *)v29;
  *(_BYTE *)(v28 + 8) = v30;
  return a1;
}

uint64_t sub_151A20(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v6 = a3[6];
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for DynamicTypeSize(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = a3[7];
  v11 = a1 + v10;
  v12 = a2 + v10;
  v13 = type metadata accessor for ShelfGridPadding(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v11, v12, v13);
  v14 = a3[8];
  v15 = a1 + v14;
  v16 = a2 + v14;
  v17 = type metadata accessor for ShelfGridSpacing(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v15, v16, v17);
  v18 = a3[9];
  v19 = a1 + v18;
  v20 = a2 + v18;
  *(_QWORD *)v19 = *(_QWORD *)v20;
  *(_BYTE *)(v19 + 8) = *(_BYTE *)(v20 + 8);
  return a1;
}

uint64_t sub_151B10(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v6 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease(v6);
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_QWORD *)(a2 + 24);
  if (!v8)
    goto LABEL_5;
  if (!v9)
  {
    sub_B414(a1 + 24, &qword_260E38);
LABEL_5:
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    goto LABEL_6;
  }
  *(_QWORD *)(a1 + 24) = v9;
  swift_bridgeObjectRelease(v8);
  v10 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease(v10);
LABEL_6:
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = type metadata accessor for DynamicTypeSize(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = type metadata accessor for ShelfGridPadding(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 40))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = type metadata accessor for ShelfGridSpacing(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 40))(v20, v21, v22);
  v23 = a3[9];
  v24 = a1 + v23;
  v25 = a2 + v23;
  *(_QWORD *)v24 = *(_QWORD *)v25;
  *(_BYTE *)(v24 + 8) = *(_BYTE *)(v25 + 8);
  return a1;
}

uint64_t sub_151C5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_151C68);
}

uint64_t sub_151C68(uint64_t a1, uint64_t a2, int *a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for DynamicTypeSize(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = a3[6];
    }
    else
    {
      v12 = type metadata accessor for ShelfGridPadding(0);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
      {
        v10 = v12;
        v11 = a3[7];
      }
      else
      {
        v10 = type metadata accessor for ShelfGridSpacing(0);
        v9 = *(_QWORD *)(v10 - 8);
        v11 = a3[8];
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t sub_151D2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_151D38);
}

uint64_t sub_151D38(uint64_t result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for DynamicTypeSize(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = a4[6];
    }
    else
    {
      v12 = type metadata accessor for ShelfGridPadding(0);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == a3)
      {
        v10 = v12;
        v11 = a4[7];
      }
      else
      {
        v10 = type metadata accessor for ShelfGridSpacing(0);
        v9 = *(_QWORD *)(v10 - 8);
        v11 = a4[8];
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

uint64_t sub_151DF8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD v6[6];

  v6[0] = &unk_1F0B58;
  v6[1] = &unk_1F0B70;
  result = type metadata accessor for DynamicTypeSize(319);
  if (v3 <= 0x3F)
  {
    v6[2] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for ShelfGridPadding(319);
    if (v4 <= 0x3F)
    {
      v6[3] = *(_QWORD *)(result - 8) + 64;
      result = type metadata accessor for ShelfGridSpacing(319);
      if (v5 <= 0x3F)
      {
        v6[4] = *(_QWORD *)(result - 8) + 64;
        v6[5] = &unk_1F0B88;
        swift_initStructMetadata(a1, 256, 6, v6, a1 + 16);
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_151EB4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_22F228, 1);
}

uint64_t sub_151EC4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_22F200, 1);
}

unint64_t sub_151ED4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_268010;
  if (!qword_268010)
  {
    v1 = sub_7EF8(&qword_268008);
    sub_7FD8(&qword_268018, &qword_267FF8, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
    sub_7FD8(&qword_268020, &qword_268028, (uint64_t)&protocol conformance descriptor for _OverlayModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_268010);
  }
  return result;
}

uint64_t sub_151F70(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_5440(&qword_268030);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_151FB8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_268058;
  if (!qword_268058)
  {
    v1 = sub_7EF8(&qword_268050);
    sub_7FD8(&qword_2630D8, &qword_2630E0, (uint64_t)&protocol conformance descriptor for _ShapeView<A, B>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_268058);
  }
  return result;
}

unint64_t sub_15203C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_268080;
  if (!qword_268080)
  {
    v1 = sub_7EF8(&qword_268078);
    sub_7FD8(&qword_268088, &qword_268068, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
    sub_7FD8(&qword_268090, &qword_268098, (uint64_t)&protocol conformance descriptor for _OverlayModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_268080);
  }
  return result;
}

unint64_t sub_1520DC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2680A0;
  if (!qword_2680A0)
  {
    v1 = sub_7EF8(&qword_2680A8);
    sub_151ED4();
    sub_7FD8(&qword_268018, &qword_267FF8, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_2680A0);
  }
  return result;
}

unint64_t sub_152164()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2680B0;
  if (!qword_2680B0)
  {
    v1 = sub_7EF8(&qword_2680B8);
    sub_15203C();
    sub_7FD8(&qword_268088, &qword_268068, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_2680B0);
  }
  return result;
}

uint64_t static FlowActionDestination<>.newSingleCard(cardInfo:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_B54C0(a1, a2);
}

uint64_t FlowAction.NewSingleCardDestination.cardInfo.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_B54C0(v1, a1);
}

uint64_t FlowAction.NewSingleCardDestination.init(cardInfo:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_21C88(a1, a2, type metadata accessor for CardInfo);
}

uint64_t sub_15221C(char *a1, char *a2)
{
  return sub_C74C8(*a1, *a2);
}

Swift::Int sub_152228()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5, 0);
  if (v1)
    v2 = 0x6F666E4964726163;
  else
    v2 = 0x536472614377656ELL;
  if (v1)
    v3 = 0xE800000000000000;
  else
    v3 = 0xEA00000000007465;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_1522AC(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  if (*v1)
    v2 = 0x6F666E4964726163;
  else
    v2 = 0x536472614377656ELL;
  if (*v1)
    v3 = 0xE800000000000000;
  else
    v3 = 0xEA00000000007465;
  String.hash(into:)(a1, v2, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_15230C(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD v6[9];

  v2 = *v1;
  Hasher.init(_seed:)(v6, a1);
  if (v2)
    v3 = 0x6F666E4964726163;
  else
    v3 = 0x536472614377656ELL;
  if (v2)
    v4 = 0xE800000000000000;
  else
    v4 = 0xEA00000000007465;
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_15238C@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  Swift::String v3;
  void *v4;
  Swift::Int v5;
  uint64_t result;
  char v7;

  v3._countAndFlagsBits = *a1;
  v4 = (void *)a1[1];
  v3._object = v4;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_24A3F8, v3);
  result = swift_bridgeObjectRelease(v4);
  if (v5 == 1)
    v7 = 1;
  else
    v7 = 2;
  if (!v5)
    v7 = 0;
  *a2 = v7;
  return result;
}

void sub_1523E8(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 0x536472614377656ELL;
  if (*v1)
    v2 = 0x6F666E4964726163;
  v3 = 0xEA00000000007465;
  if (*v1)
    v3 = 0xE800000000000000;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_15242C()
{
  _BYTE *v0;

  if (*v0)
    return 0x6F666E4964726163;
  else
    return 0x536472614377656ELL;
}

uint64_t sub_15246C@<X0>(Swift::String string@<0:X0, 8:X1>, char *a2@<X8>)
{
  void *object;
  Swift::String v3;
  Swift::Int v5;
  uint64_t result;
  char v7;

  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_24A3F8, v3);
  result = swift_bridgeObjectRelease(object);
  if (v5 == 1)
    v7 = 1;
  else
    v7 = 2;
  if (!v5)
    v7 = 0;
  *a2 = v7;
  return result;
}

uint64_t sub_1524CC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_152DD0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1524F4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_152DD0();
  return CodingKey.debugDescription.getter(a1, v2);
}

Swift::Int sub_15251C()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1, 0);
  String.hash(into:)(v1, 0x6F666E4964726163, 0xE800000000000000);
  return Hasher._finalize()();
}

uint64_t sub_15256C(uint64_t a1)
{
  return String.hash(into:)(a1, 0x6F666E4964726163, 0xE800000000000000);
}

Swift::Int sub_152584(uint64_t a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, a1);
  String.hash(into:)(v2, 0x6F666E4964726163, 0xE800000000000000);
  return Hasher._finalize()();
}

uint64_t sub_1525D0@<X0>(uint64_t *a1@<X0>, BOOL *a2@<X8>)
{
  Swift::String v3;
  void *v4;
  Swift::Int v5;
  uint64_t result;

  v3._countAndFlagsBits = *a1;
  v4 = (void *)a1[1];
  v3._object = v4;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_24A448, v3);
  result = swift_bridgeObjectRelease(v4);
  *a2 = v5 != 0;
  return result;
}

void sub_152620(_QWORD *a1@<X8>)
{
  *a1 = 0x6F666E4964726163;
  a1[1] = 0xE800000000000000;
}

uint64_t sub_15263C()
{
  return 0x6F666E4964726163;
}

uint64_t sub_152654@<X0>(Swift::String string@<0:X0, 8:X1>, BOOL *a2@<X8>)
{
  void *object;
  Swift::String v3;
  Swift::Int v5;
  uint64_t result;

  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_24A480, v3);
  result = swift_bridgeObjectRelease(object);
  *a2 = v5 != 0;
  return result;
}

uint64_t sub_1526A8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_152E54();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1526D0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_152E54();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t FlowAction.NewSingleCardDestination.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  char *v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  _QWORD *v68;
  char *v69;
  char *v70;
  uint64_t *v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  char v82;
  char v83;
  char v84;

  v81 = a1;
  v76 = a2;
  v79 = type metadata accessor for CardInfo(0);
  __chkstk_darwin(v79);
  v71 = (uint64_t *)((char *)&v66 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v78 = type metadata accessor for JSONObject(0);
  v74 = *(_QWORD *)(v78 - 8);
  v4 = __chkstk_darwin(v78);
  v77 = (char *)&v66 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v7 = (char **)((char *)&v66 - v6);
  v8 = sub_5440(&qword_2680C0);
  v9 = __chkstk_darwin(v8);
  v73 = (char *)&v66 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v70 = (char *)&v66 - v11;
  v75 = sub_5440(&qword_2680C8);
  v72 = *(_QWORD *)(v75 - 8);
  __chkstk_darwin(v75);
  v13 = (char *)&v66 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_5440(&qword_2680D0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v66 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for FlowAction.NewSingleCardDestination(0);
  __chkstk_darwin(v18);
  v20 = (char *)&v66 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = a1[3];
  v22 = a1[4];
  sub_5480(a1, v21);
  v23 = sub_152DD0();
  v24 = v80;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&_s24NewSingleCardDestinationV10CodingKeysON, &_s24NewSingleCardDestinationV10CodingKeysON, v23, v21, v22);
  if (!v24)
  {
    v68 = v7;
    v69 = v13;
    v25 = v77;
    v26 = v78;
    v67 = v20;
    v80 = v15;
    v84 = 0;
    v27 = (char *)v14;
    if ((KeyedDecodingContainer.contains(_:)(&v84, v14) & 1) != 0)
    {
      v82 = 0;
      v28 = sub_152E54();
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(&_s24NewSingleCardDestinationV16LegacyCodingKeysON, &v82, v14, &_s24NewSingleCardDestinationV16LegacyCodingKeysON, v28);
      v77 = (char *)v14;
      v29 = sub_6FD0((unint64_t *)&qword_2680E0, (uint64_t (*)(uint64_t))&type metadata accessor for JSONObject, (uint64_t)&protocol conformance descriptor for JSONObject);
      v30 = v68;
      v31 = v26;
      v33 = KeyedDecodingContainer.decode<A>(_:forKey:)(v68, v26, v32, v75, v26, v29);
      v66 = v17;
      v52 = (uint64_t)v70;
      JSONObject.dictionary.getter(v33);
      (*(void (**)(_QWORD *, uint64_t))(v74 + 8))(v30, v31);
      v53 = type metadata accessor for JSONDictionary(0);
      v54 = *(_QWORD *)(v53 - 8);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v54 + 48))(v52, 1, v53) == 1)
      {
        sub_152E14(v52);
        v41 = v80;
        v27 = v77;
        goto LABEL_17;
      }
      v55 = sub_5440(&qword_2680E8);
      v56 = JSONDictionary.bridgedPrimitiveValues<A, B>()(&type metadata for String, v55, &protocol witness table for String);
      v57 = (*(uint64_t (**)(uint64_t, uint64_t))(v54 + 8))(v52, v53);
      v41 = v80;
      v27 = v77;
      if (!v56)
      {
LABEL_17:
        v59 = type metadata accessor for DecodingError(0);
        swift_allocError(v59, &protocol witness table for DecodingError, 0, 0);
        v61 = v60;
        v62 = v75;
        v63 = v69;
        v64 = KeyedDecodingContainer.codingPath.getter(v75);
        DecodingError.Context.init(codingPath:debugDescription:underlyingError:)(v64, 0xD00000000000001CLL, 0x80000000001FDAC0, 0);
        v65 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v59 - 8) + 104))(v61, enum case for DecodingError.dataCorrupted(_:), v59);
        swift_willThrow(v65);
        (*(void (**)(char *, uint64_t))(v72 + 8))(v63, v62);
        (*(void (**)(char *, char *))(v41 + 8))(v66, v27);
        return _s7BooksUI13AnyPagedFrameVwxx_0(v81);
      }
      v45 = v71;
      UUID.init()(v57);
      *v45 = v56;
      (*(void (**)(char *, uint64_t))(v72 + 8))(v69, v75);
      v36 = v76;
LABEL_16:
      (*(void (**)(char *, char *))(v41 + 8))(v66, v27);
      v58 = (uint64_t)v67;
      sub_21C88((uint64_t)v45, (uint64_t)v67, type metadata accessor for CardInfo);
      sub_21C88(v58, v36, type metadata accessor for FlowAction.NewSingleCardDestination);
      return _s7BooksUI13AnyPagedFrameVwxx_0(v81);
    }
    v83 = 1;
    v34 = sub_6FD0((unint64_t *)&qword_2680E0, (uint64_t (*)(uint64_t))&type metadata accessor for JSONObject, (uint64_t)&protocol conformance descriptor for JSONObject);
    v35 = KeyedDecodingContainer.decode<A>(_:forKey:)(v25, v26, &v83, v14, v26, v34);
    v36 = v76;
    v66 = v17;
    v38 = (uint64_t)v73;
    JSONObject.dictionary.getter(v35);
    (*(void (**)(_QWORD *, uint64_t))(v74 + 8))(v25, v26);
    v39 = type metadata accessor for JSONDictionary(0);
    v40 = *(_QWORD *)(v39 - 8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v40 + 48))(v38, 1, v39) == 1)
    {
      sub_152E14(v38);
      v41 = v80;
    }
    else
    {
      v42 = sub_5440(&qword_2680E8);
      v43 = JSONDictionary.bridgedPrimitiveValues<A, B>()(&type metadata for String, v42, &protocol witness table for String);
      v44 = (*(uint64_t (**)(uint64_t, uint64_t))(v40 + 8))(v38, v39);
      v41 = v80;
      if (v43)
      {
        v45 = v71;
        UUID.init()(v44);
        *v45 = v43;
        goto LABEL_16;
      }
    }
    v46 = type metadata accessor for DecodingError(0);
    swift_allocError(v46, &protocol witness table for DecodingError, 0, 0);
    v48 = v47;
    v49 = v66;
    v50 = KeyedDecodingContainer.codingPath.getter(v27);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)(v50, 0xD00000000000001CLL, 0x80000000001FDAC0, 0);
    v51 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v46 - 8) + 104))(v48, enum case for DecodingError.dataCorrupted(_:), v46);
    swift_willThrow(v51);
    (*(void (**)(char *, char *))(v41 + 8))(v49, v27);
  }
  return _s7BooksUI13AnyPagedFrameVwxx_0(v81);
}

uint64_t type metadata accessor for FlowAction.NewSingleCardDestination(uint64_t a1)
{
  uint64_t result;

  result = qword_268158;
  if (!qword_268158)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for FlowAction.NewSingleCardDestination);
  return result;
}

unint64_t sub_152DD0()
{
  unint64_t result;

  result = qword_2680D8;
  if (!qword_2680D8)
  {
    result = swift_getWitnessTable(&unk_1F0F44, &_s24NewSingleCardDestinationV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_2680D8);
  }
  return result;
}

uint64_t sub_152E14(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_5440(&qword_2680C0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_152E54()
{
  unint64_t result;

  result = qword_2680F0;
  if (!qword_2680F0)
  {
    result = swift_getWitnessTable(&unk_1F0EF4, &_s24NewSingleCardDestinationV16LegacyCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_2680F0);
  }
  return result;
}

uint64_t sub_152E98(uint64_t a1)
{
  uint64_t result;

  result = sub_6FD0(&qword_2680F8, type metadata accessor for FlowAction.NewSingleCardDestination, (uint64_t)&protocol conformance descriptor for FlowAction.NewSingleCardDestination);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_152ED4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return FlowAction.NewSingleCardDestination.init(from:)(a1, a2);
}

uint64_t *_s24NewSingleCardDestinationVwCP(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);

  v4 = type metadata accessor for CardInfo(0);
  v5 = *(_DWORD *)(*(_QWORD *)(v4 - 8) + 80);
  v6 = *a2;
  *a1 = *a2;
  if ((v5 & 0x20000) != 0)
  {
    a1 = (uint64_t *)(v6 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v6);
  }
  else
  {
    v7 = *(int *)(v4 + 20);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for UUID(0);
    v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
    swift_bridgeObjectRetain(v6);
    v11(v8, v9, v10);
  }
  return a1;
}

uint64_t _s24NewSingleCardDestinationVwxx(_QWORD *a1)
{
  char *v2;
  uint64_t v3;

  swift_bridgeObjectRelease(*a1);
  v2 = (char *)a1 + *(int *)(type metadata accessor for CardInfo(0) + 20);
  v3 = type metadata accessor for UUID(0);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
}

uint64_t *_s24NewSingleCardDestinationVwcp(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *, char *, uint64_t);

  v4 = *a2;
  *a1 = *a2;
  v5 = *(int *)(type metadata accessor for CardInfo(0) + 20);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = type metadata accessor for UUID(0);
  v9 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
  swift_bridgeObjectRetain(v4);
  v9(v6, v7, v8);
  return a1;
}

uint64_t *_s24NewSingleCardDestinationVwca(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = *(int *)(type metadata accessor for CardInfo(0) + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UUID(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

_QWORD *_s24NewSingleCardDestinationVwtk(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(type metadata accessor for CardInfo(0) + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for UUID(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t *_s24NewSingleCardDestinationVwta(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;

  v4 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v4);
  v5 = *(int *)(type metadata accessor for CardInfo(0) + 20);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = type metadata accessor for UUID(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 40))(v6, v7, v8);
  return a1;
}

uint64_t _s24NewSingleCardDestinationVwet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1531B0);
}

uint64_t sub_1531B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CardInfo(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t _s24NewSingleCardDestinationVwst(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1531F8);
}

uint64_t sub_1531F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CardInfo(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t sub_153238(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  result = type metadata accessor for CardInfo(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 1, &v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t _s24NewSingleCardDestinationV10CodingKeysOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1532EC + 4 * byte_1F0C65[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_153320 + 4 * byte_1F0C60[v4]))();
}

uint64_t sub_153320(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_153328(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x153330);
  return result;
}

uint64_t sub_15333C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x153344);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_153348(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_153350(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s24NewSingleCardDestinationV10CodingKeysOMa()
{
  return &_s24NewSingleCardDestinationV10CodingKeysON;
}

uint64_t _s24NewSingleCardDestinationV16LegacyCodingKeysOwst(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1533AC + 4 * byte_1F0C6A[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1533CC + 4 * byte_1F0C6F[v4]))();
}

_BYTE *sub_1533AC(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1533CC(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1533D4(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1533DC(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1533E4(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1533EC(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *_s24NewSingleCardDestinationV16LegacyCodingKeysOMa()
{
  return &_s24NewSingleCardDestinationV16LegacyCodingKeysON;
}

unint64_t sub_15340C()
{
  unint64_t result;

  result = qword_268190;
  if (!qword_268190)
  {
    result = swift_getWitnessTable(&unk_1F0DDC, &_s24NewSingleCardDestinationV16LegacyCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_268190);
  }
  return result;
}

unint64_t sub_153454()
{
  unint64_t result;

  result = qword_268198;
  if (!qword_268198)
  {
    result = swift_getWitnessTable(&unk_1F0ECC, &_s24NewSingleCardDestinationV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_268198);
  }
  return result;
}

unint64_t sub_15349C()
{
  unint64_t result;

  result = qword_2681A0;
  if (!qword_2681A0)
  {
    result = swift_getWitnessTable(&unk_1F0D14, &_s24NewSingleCardDestinationV16LegacyCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_2681A0);
  }
  return result;
}

unint64_t sub_1534E4()
{
  unint64_t result;

  result = qword_2681A8;
  if (!qword_2681A8)
  {
    result = swift_getWitnessTable(&unk_1F0D3C, &_s24NewSingleCardDestinationV16LegacyCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_2681A8);
  }
  return result;
}

unint64_t sub_15352C()
{
  unint64_t result;

  result = qword_2681B0;
  if (!qword_2681B0)
  {
    result = swift_getWitnessTable(&unk_1F0E04, &_s24NewSingleCardDestinationV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_2681B0);
  }
  return result;
}

unint64_t sub_153574()
{
  unint64_t result;

  result = qword_2681B8;
  if (!qword_2681B8)
  {
    result = swift_getWitnessTable(&unk_1F0E2C, &_s24NewSingleCardDestinationV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_2681B8);
  }
  return result;
}

unint64_t static Models.FlowBackAction.Dismissal.cardSetCloseTappedDismiss.getter()
{
  return 0xD000000000000019;
}

uint64_t static Models.FlowBackAction.Dismissal.cardSetDismiss.getter()
{
  return 0x4474655364726163;
}

unint64_t static Models.FlowBackAction.Dismissal.cardStackDismiss.getter()
{
  return 0xD000000000000010;
}

uint64_t PageScrollAction.clickData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_C7F0C(v1, a1);
}

uint64_t PageScrollAction.actionMetrics.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PageScrollAction(0) + 20);
  v4 = type metadata accessor for ActionMetrics(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for PageScrollAction(uint64_t a1)
{
  uint64_t result;

  result = qword_268218;
  if (!qword_268218)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for PageScrollAction);
  return result;
}

uint64_t PageScrollAction.location.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for PageScrollAction(0);
  *a1 = *(_QWORD *)(v1 + *(int *)(result + 24));
  return result;
}

uint64_t PageScrollAction.init(location:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v3 = *a1;
  v4 = type metadata accessor for ClickData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a2, 1, 1, v4);
  v5 = type metadata accessor for PageScrollAction(0);
  result = static ActionMetrics.notInstrumented.getter(v5);
  *(_QWORD *)(a2 + *(int *)(v5 + 24)) = v3;
  return result;
}

unint64_t sub_153740(uint64_t a1)
{
  unint64_t result;

  result = sub_C3B84();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for PageScrollAction(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v10);
  }
  else
  {
    v7 = type metadata accessor for ClickData(0);
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      v9 = sub_5440(&qword_25E828);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    v11 = *(int *)(a3 + 20);
    v12 = (char *)a1 + v11;
    v13 = (char *)a2 + v11;
    v14 = type metadata accessor for ActionMetrics(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 24)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 24));
  }
  return a1;
}

uint64_t destroy for PageScrollAction(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = type metadata accessor for ClickData(0);
  v5 = *(_QWORD *)(v4 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v4))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  v6 = a1 + *(int *)(a2 + 20);
  v7 = type metadata accessor for ActionMetrics(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
}

char *initializeWithCopy for PageScrollAction(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;

  v6 = type metadata accessor for ClickData(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = sub_5440(&qword_25E828);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v9 = *(int *)(a3 + 20);
  v10 = &a1[v9];
  v11 = &a2[v9];
  v12 = type metadata accessor for ActionMetrics(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
  *(_QWORD *)&a1[*(int *)(a3 + 24)] = *(_QWORD *)&a2[*(int *)(a3 + 24)];
  return a1;
}

char *assignWithCopy for PageScrollAction(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;

  v6 = type metadata accessor for ClickData(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    v11 = sub_5440(&qword_25E828);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  v12 = *(int *)(a3 + 20);
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = type metadata accessor for ActionMetrics(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 24))(v13, v14, v15);
  *(_QWORD *)&a1[*(int *)(a3 + 24)] = *(_QWORD *)&a2[*(int *)(a3 + 24)];
  return a1;
}

char *initializeWithTake for PageScrollAction(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;

  v6 = type metadata accessor for ClickData(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = sub_5440(&qword_25E828);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v9 = *(int *)(a3 + 20);
  v10 = &a1[v9];
  v11 = &a2[v9];
  v12 = type metadata accessor for ActionMetrics(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v10, v11, v12);
  *(_QWORD *)&a1[*(int *)(a3 + 24)] = *(_QWORD *)&a2[*(int *)(a3 + 24)];
  return a1;
}

char *assignWithTake for PageScrollAction(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;

  v6 = type metadata accessor for ClickData(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    v11 = sub_5440(&qword_25E828);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  v12 = *(int *)(a3 + 20);
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = type metadata accessor for ActionMetrics(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 40))(v13, v14, v15);
  *(_QWORD *)&a1[*(int *)(a3 + 24)] = *(_QWORD *)&a2[*(int *)(a3 + 24)];
  return a1;
}

uint64_t getEnumTagSinglePayload for PageScrollAction(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_153D3C);
}

uint64_t sub_153D3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v6 = sub_5440(&qword_25E828);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v8 = type metadata accessor for ActionMetrics(0);
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for PageScrollAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_153DC0);
}

uint64_t sub_153DC0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v8 = sub_5440(&qword_25E828);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v10 = type metadata accessor for ActionMetrics(0);
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_153E40(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[3];

  sub_F4034(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    v4 = type metadata accessor for ActionMetrics(319);
    if (v5 <= 0x3F)
    {
      v6[1] = *(_QWORD *)(v4 - 8) + 64;
      v6[2] = (char *)&value witness table for Builtin.Int64 + 64;
      swift_initStructMetadata(a1, 256, 3, v6, a1 + 16);
    }
  }
}

_QWORD *initializeBufferWithCopyOfBuffer for PageScrollAction.Location(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for PageScrollAction.Location(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for PageScrollAction.Location(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 8) = v3;
  return result;
}

ValueMetadata *type metadata accessor for PageScrollAction.Location()
{
  return &type metadata for PageScrollAction.Location;
}

uint64_t sub_153F38@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  void (*v28)(char *, char *, uint64_t);
  uint64_t v29;
  void (*v30)(char *, uint64_t);
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  unint64_t v41;
  char *v42;
  char *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(char *, uint64_t);
  uint64_t v52;
  char *v53;
  void (*v54)(char *, uint64_t);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  char *v66;
  char *v67;
  _QWORD v68[6];

  v63 = a1;
  v1 = sub_5440(&qword_268260);
  v2 = *(_QWORD *)(v1 - 8);
  v61 = v1;
  v62 = v2;
  __chkstk_darwin(v1);
  v59 = (char *)&v52 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_5440(&qword_268268);
  v5 = *(_QWORD *)(v4 - 8);
  v57 = v4;
  v58 = v5;
  __chkstk_darwin(v4);
  v7 = (char *)&v52 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_5440(&qword_268270);
  v55 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v10 = (char *)&v52 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_5440(&qword_265AD8);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v60 = (char *)&v52 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v13);
  v67 = (char *)&v52 - v16;
  v17 = __chkstk_darwin(v15);
  v66 = (char *)&v52 - v18;
  v19 = __chkstk_darwin(v17);
  v21 = (char *)&v52 - v20;
  v22 = __chkstk_darwin(v19);
  v24 = (char *)&v52 - v23;
  __chkstk_darwin(v22);
  v26 = (char *)&v52 - v25;
  v68[3] = type metadata accessor for SyncTaskScheduler(0);
  v68[4] = &protocol witness table for SyncTaskScheduler;
  sub_C404(v68);
  SyncTaskScheduler.init()();
  v27 = type metadata accessor for BaseObjectGraph(0);
  ClosureActionImplementation.init(scheduler:)(v68, v27);
  ActionDispatcher.init()(v27);
  v56 = v12;
  v28 = *(void (**)(char *, char *, uint64_t))(v12 + 16);
  v65 = v26;
  v28(v26, v24, v11);
  v29 = sub_7FD8(&qword_268278, &qword_268270, (uint64_t)&protocol conformance descriptor for ClosureActionImplementation<A>);
  ActionDispatcher.add<A>(_:)(v10, v11, v8, v29);
  v30 = *(void (**)(char *, uint64_t))(v12 + 8);
  v30(v24, v11);
  (*(void (**)(char *, uint64_t))(v55 + 8))(v10, v8);
  CompoundActionImplementation.init()(v27);
  ActionDispatcher.init()(v27);
  v31 = v21;
  v28(v24, v21, v11);
  v32 = sub_7FD8(&qword_268280, &qword_268268, (uint64_t)&protocol conformance descriptor for CompoundActionImplementation<A>);
  v33 = v57;
  v53 = v24;
  ActionDispatcher.add<A>(_:)(v7, v11, v57, v32);
  v34 = v31;
  v30(v31, v11);
  (*(void (**)(char *, uint64_t))(v58 + 8))(v7, v33);
  v35 = v59;
  EmptyActionImplementation.init()(v27);
  v36 = v66;
  ActionDispatcher.init()(v27);
  v64 = v34;
  v37 = v36;
  v28(v34, v36, v11);
  v38 = sub_7FD8(&qword_268288, &qword_268260, (uint64_t)&protocol conformance descriptor for EmptyActionImplementation<A>);
  v39 = v61;
  ActionDispatcher.add<A>(_:)(v35, v11, v61, v38);
  v30(v37, v11);
  (*(void (**)(char *, uint64_t))(v62 + 8))(v35, v39);
  v40 = v67;
  ActionDispatcher.init()(v27);
  v28(v37, v40, v11);
  v41 = sub_154698();
  ActionDispatcher.add<A>(_:)(v41, v11, &type metadata for DelayActionImplementation, v41);
  v42 = v40;
  v54 = v30;
  v30(v40, v11);
  v43 = v60;
  ActionDispatcher.init()(v27);
  v28(v42, v43, v11);
  v44 = sub_1546DC();
  ActionDispatcher.add<A>(_:)(v44, v11, &type metadata for PageScrollActionImplementation, v44);
  v30(v43, v11);
  v45 = sub_5440((uint64_t *)&unk_2682A0);
  v46 = *(_QWORD *)(v56 + 72);
  v47 = *(unsigned __int8 *)(v56 + 80);
  v48 = (v47 + 32) & ~v47;
  v49 = swift_allocObject(v45, v48 + 5 * v46, v47 | 7);
  v28((char *)(v49 + v48), v65, v11);
  v28((char *)(v49 + v48 + v46), v24, v11);
  v28((char *)(v49 + v48 + 2 * v46), v64, v11);
  v28((char *)(v49 + v48 + 3 * v46), v66, v11);
  v28((char *)(v49 + v48 + 4 * v46), v67, v11);
  ActionDispatcher.init()(v27);
  ActionDispatcher.add(contentsOf:)(v49 + v48, v11);
  ActionDispatcher.add(contentsOf:)(v49 + v48 + v46, v11);
  ActionDispatcher.add(contentsOf:)(v49 + v48 + 2 * v46, v11);
  ActionDispatcher.add(contentsOf:)(v49 + v48 + 3 * v46, v11);
  ActionDispatcher.add(contentsOf:)(v49 + v48 + 4 * v46, v11);
  swift_setDeallocating(v49);
  swift_arrayDestroy(v49 + v48, 5, v11);
  swift_deallocClassInstance(v49, 32, 7);
  v50 = v54;
  v54(v67, v11);
  v50(v66, v11);
  v50(v64, v11);
  v50(v53, v11);
  return ((uint64_t (*)(char *, uint64_t))v50)(v65, v11);
}

uint64_t ActionDispatcher<>.withBuiltInActionImplementations.getter@<X0>(char *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  void (*v14)(char *, uint64_t, uint64_t);
  uint64_t v16;

  v2 = v1;
  v4 = sub_5440(&qword_268258);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v16 - v8;
  v10 = sub_5440(&qword_265AD8);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_153F38((uint64_t)v13);
  v14 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v14(v9, v2, v10);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v9, 0, 1, v10);
  v14(a1, (uint64_t)v13, v10);
  sub_154610((uint64_t)v9, (uint64_t)v7);
  ActionDispatcher.next.setter(v7, v10);
  sub_154658((uint64_t)v9);
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
}

uint64_t sub_154610(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_5440(&qword_268258);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_154658(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_5440(&qword_268258);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_154698()
{
  unint64_t result;

  result = qword_268290;
  if (!qword_268290)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for DelayActionImplementation, &type metadata for DelayActionImplementation);
    atomic_store(result, (unint64_t *)&qword_268290);
  }
  return result;
}

unint64_t sub_1546DC()
{
  unint64_t result;

  result = qword_268298;
  if (!qword_268298)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for PageScrollActionImplementation, &type metadata for PageScrollActionImplementation);
    atomic_store(result, (unint64_t *)&qword_268298);
  }
  return result;
}

double AttributedString.init(html:font:)@<D0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  char *v8;
  char *v9;
  uint64_t v10;
  double result;
  _BYTE v12[24];

  objc_allocWithZone((Class)type metadata accessor for BooksHTMLConverter(0));
  swift_retain(a3);
  v8 = sub_154830(a1, a2, a3);
  objc_msgSend(*(id *)&v8[OBJC_IVAR____TtC7BooksUIP33_E4697B72F90B920AD6B6858623E47B6D18BooksHTMLConverter_parser], "parse");
  v9 = &v8[OBJC_IVAR____TtC7BooksUIP33_E4697B72F90B920AD6B6858623E47B6D18BooksHTMLConverter_currentString];
  swift_beginAccess(&v8[OBJC_IVAR____TtC7BooksUIP33_E4697B72F90B920AD6B6858623E47B6D18BooksHTMLConverter_currentString], v12, 0, 0);
  v10 = type metadata accessor for AttributedString(0);
  (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(a4, v9, v10);

  *(_QWORD *)&result = swift_release(a3).n128_u64[0];
  return result;
}

uint64_t type metadata accessor for BooksHTMLConverter(uint64_t a1)
{
  uint64_t result;

  result = qword_268300;
  if (!qword_268300)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for BooksHTMLConverter);
  return result;
}

char *sub_154830(uint64_t a1, void *a2, uint64_t a3)
{
  void *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  Swift::String v12;
  Swift::String v13;
  unint64_t v14;
  id v15;
  NSString v16;
  id v17;
  uint64_t *v18;
  char *v19;
  void *v20;
  char *v21;
  id v22;
  uint64_t v24;
  objc_class *ObjectType;
  objc_super v26;
  uint64_t v27;
  unint64_t v28;

  ObjectType = (objc_class *)swift_getObjectType(v3);
  v7 = type metadata accessor for AttributedString(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = 0x3E79646F623CLL;
  v28 = 0xE600000000000000;
  v11 = v3;
  v12._countAndFlagsBits = a1;
  v12._object = a2;
  String.append(_:)(v12);
  v13._countAndFlagsBits = 0x3E79646F622F3CLL;
  v13._object = (void *)0xE700000000000000;
  String.append(_:)(v13);
  v14 = v28;
  v15 = objc_allocWithZone((Class)BUINQMLParser);
  v16 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v14);
  v17 = objc_msgSend(v15, "initWithString:", v16);

  *(_QWORD *)&v11[OBJC_IVAR____TtC7BooksUIP33_E4697B72F90B920AD6B6858623E47B6D18BooksHTMLConverter_parser] = v17;
  *(_QWORD *)&v11[OBJC_IVAR____TtC7BooksUIP33_E4697B72F90B920AD6B6858623E47B6D18BooksHTMLConverter_tagStack] = &_swiftEmptyArrayStorage;
  v18 = (uint64_t *)&v11[OBJC_IVAR____TtC7BooksUIP33_E4697B72F90B920AD6B6858623E47B6D18BooksHTMLConverter_html];
  *v18 = a1;
  v18[1] = (uint64_t)a2;
  *(_QWORD *)&v11[OBJC_IVAR____TtC7BooksUIP33_E4697B72F90B920AD6B6858623E47B6D18BooksHTMLConverter_font] = a3;
  swift_retain(a3);
  AttributedString.init(stringLiteral:)(0, 0xE000000000000000);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(&v11[OBJC_IVAR____TtC7BooksUIP33_E4697B72F90B920AD6B6858623E47B6D18BooksHTMLConverter_currentString], v10, v7);

  v26.receiver = v11;
  v26.super_class = ObjectType;
  v19 = (char *)objc_msgSendSuper2(&v26, "init");
  v20 = *(void **)&v19[OBJC_IVAR____TtC7BooksUIP33_E4697B72F90B920AD6B6858623E47B6D18BooksHTMLConverter_parser];
  v21 = v19;
  v22 = v20;
  objc_msgSend(v22, "setDelegate:", v21);

  swift_release(a3);
  return v21;
}

id sub_154A40()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType(v0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_154AF8()
{
  return type metadata accessor for BooksHTMLConverter(0);
}

uint64_t sub_154B00(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[5];

  v4[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  result = type metadata accessor for AttributedString(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    v4[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[3] = &unk_1F1068;
    v4[4] = (char *)&value witness table for Builtin.NativeObject + 64;
    result = swift_updateClassMetadata2(a1, 256, 5, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_154CDC(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;

  v4 = *a2;
  v7 = *a1;
  v8 = v4;
  v5 = sub_5440(a4);
  return dispatch thunk of static Equatable.== infix(_:_:)(&v8, &v7, v5, &protocol witness table for AnyKeyPath) & 1;
}

uint64_t initializeBufferWithCopyOfBuffer for BooksHTMLConverter.TagElement(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v3;
  swift_bridgeObjectRetain(v3);
  return a1;
}

_QWORD *assignWithCopy for BooksHTMLConverter.TagElement(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = *a2;
  a1[1] = a2[1];
  v3 = a2[2];
  v4 = a1[2];
  a1[2] = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t assignWithTake for BooksHTMLConverter.TagElement(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for BooksHTMLConverter.TagElement(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 24))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for BooksHTMLConverter.TagElement(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 24) = 0;
    if (a2)
      *(_QWORD *)(result + 16) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for BooksHTMLConverter.TagElement()
{
  return &type metadata for BooksHTMLConverter.TagElement;
}

uint64_t sub_155044(unint64_t a1)
{
  _QWORD *v1;
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  char v10;

  v3 = (_QWORD *)*v1;
  if ((swift_isUniquelyReferenced_nonNull_native(*v1) & 1) == 0)
    v3 = sub_1AEC4C(v3);
  v4 = v3[2];
  if (v4 <= a1)
  {
    __break(1u);
  }
  else
  {
    v5 = v4 - 1;
    v6 = v4 - 1 - a1;
    if (v6 >= 0)
    {
      v7 = &v3[3 * a1];
      v8 = v7[4];
      memmove(v7 + 4, v7 + 7, 24 * v6);
      v3[2] = v5;
      *v1 = v3;
      return v8;
    }
  }
  v10 = 2;
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v10, 1046, 0);
  __break(1u);
  return result;
}

uint64_t sub_155130()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  v1 = (_QWORD *)*v0;
  result = swift_isUniquelyReferenced_nonNull_native(*v0);
  if ((result & 1) != 0)
  {
    v3 = v1[2];
    if (v3)
    {
LABEL_3:
      v4 = v3 - 1;
      result = v1[3 * v4 + 4];
      v1[2] = v4;
      *v0 = v1;
      return result;
    }
  }
  else
  {
    result = (uint64_t)sub_1AEC4C(v1);
    v1 = (_QWORD *)result;
    v3 = *(_QWORD *)(result + 16);
    if (v3)
      goto LABEL_3;
  }
  __break(1u);
  return result;
}

uint64_t sub_155194(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  __CFString *v5;
  unint64_t v6;
  char v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  _BYTE v25[24];

  v3 = v2;
  if (a1 == 4)
  {
    if (*(_QWORD *)(a2 + 16))
    {
      v5 = CFSTR("href");
      v6 = sub_A138((uint64_t)v5);
      if ((v7 & 1) != 0)
      {
        v8 = (uint64_t *)(*(_QWORD *)(a2 + 56) + 16 * v6);
        v10 = *v8;
        v9 = v8[1];
        swift_bridgeObjectRetain(v9);
      }
      else
      {
        v10 = 0;
        v9 = 0;
      }

    }
    else
    {
      v10 = 0;
      v9 = 0;
    }
    v18 = (_QWORD *)(v3 + OBJC_IVAR____TtC7BooksUIP33_E4697B72F90B920AD6B6858623E47B6D18BooksHTMLConverter_tagStack);
    swift_beginAccess(v3 + OBJC_IVAR____TtC7BooksUIP33_E4697B72F90B920AD6B6858623E47B6D18BooksHTMLConverter_tagStack, v25, 33, 0);
    v19 = (_QWORD *)*v18;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v18);
    *v18 = v19;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v19 = sub_AB338(0, v19[2] + 1, 1, v19);
      *v18 = v19;
    }
    v22 = v19[2];
    v21 = v19[3];
    if (v22 >= v21 >> 1)
    {
      v19 = sub_AB338((_QWORD *)(v21 > 1), v22 + 1, 1, v19);
      *v18 = v19;
    }
    v19[2] = v22 + 1;
    v23 = &v19[3 * v22];
    v23[4] = 4;
    v23[5] = v10;
    v23[6] = v9;
  }
  else
  {
    v12 = (_QWORD *)(v2 + OBJC_IVAR____TtC7BooksUIP33_E4697B72F90B920AD6B6858623E47B6D18BooksHTMLConverter_tagStack);
    swift_beginAccess(v3 + OBJC_IVAR____TtC7BooksUIP33_E4697B72F90B920AD6B6858623E47B6D18BooksHTMLConverter_tagStack, v25, 33, 0);
    v13 = (_QWORD *)*v12;
    v14 = swift_isUniquelyReferenced_nonNull_native(*v12);
    *v12 = v13;
    if ((v14 & 1) == 0)
    {
      v13 = sub_AB338(0, v13[2] + 1, 1, v13);
      *v12 = v13;
    }
    v16 = v13[2];
    v15 = v13[3];
    if (v16 >= v15 >> 1)
    {
      v13 = sub_AB338((_QWORD *)(v15 > 1), v16 + 1, 1, v13);
      *v12 = v13;
    }
    v13[2] = v16 + 1;
    v17 = &v13[3 * v16];
    v17[5] = 0;
    v17[6] = 0;
    v17[4] = a1;
  }
  return swift_endAccess(v25);
}

uint64_t sub_15537C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  __n128 v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  __n128 v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t KeyPath;
  _QWORD v63[3];
  _QWORD v64[3];

  v3 = v2;
  v6 = sub_5440(&qword_268370);
  __chkstk_darwin(v6);
  v61 = (char *)&v56 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_5440(&qword_268378);
  __chkstk_darwin(v8);
  v10 = (char *)&v56 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for AttributeContainer(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v56 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for AttributedString(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v56 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = swift_bridgeObjectRetain(a2);
  AttributeContainer.init()(v18);
  AttributedString.init(_:attributes:)(a1, a2, v13);
  KeyPath = swift_getKeyPath(&unk_1F1090);
  v19 = swift_getKeyPath(&unk_1F10C0);
  v64[0] = *(_QWORD *)(v3 + OBJC_IVAR____TtC7BooksUIP33_E4697B72F90B920AD6B6858623E47B6D18BooksHTMLConverter_font);
  v20 = v64[0];
  v21 = sub_155B7C();
  v22 = swift_retain(v20);
  AttributedString.subscript.setter(v64, v19, v21, v22);
  v23 = (uint64_t *)(v3 + OBJC_IVAR____TtC7BooksUIP33_E4697B72F90B920AD6B6858623E47B6D18BooksHTMLConverter_tagStack);
  swift_beginAccess(v3 + OBJC_IVAR____TtC7BooksUIP33_E4697B72F90B920AD6B6858623E47B6D18BooksHTMLConverter_tagStack, v64, 0, 0);
  v24 = *v23;
  v25 = *(_QWORD *)(*v23 + 16);
  if (v25)
  {
    v58 = v15;
    v59 = v14;
    v60 = v3;
    v57 = swift_bridgeObjectRetain(v24);
    v26 = (uint64_t *)(v57 + 48);
    while (2)
    {
      v36 = *v26;
      switch(*(v26 - 2))
      {
        case 0:
          v37 = swift_getKeyPath(&unk_1F1090);
          *(&v56 - 2) = __chkstk_darwin(v37);
          v38 = swift_getKeyPath(&unk_1F10C0);
          v39 = swift_getKeyPath(&unk_1F1090);
          *(&v56 - 2) = __chkstk_darwin(v39);
          v40 = swift_getKeyPath(&unk_1F10C0);
          swift_bridgeObjectRetain(v36);
          AttributedString.subscript.getter(v63, v40, v21);
          v32 = swift_release(v40);
          v41 = v63[0];
          if (!v63[0])
            goto LABEL_16;
          v42 = Font.bold()(v63[0]);
          goto LABEL_12;
        case 1:
          v43 = swift_getKeyPath(&unk_1F1090);
          *(&v56 - 2) = __chkstk_darwin(v43);
          v38 = swift_getKeyPath(&unk_1F10C0);
          v44 = swift_getKeyPath(&unk_1F1090);
          *(&v56 - 2) = __chkstk_darwin(v44);
          v45 = swift_getKeyPath(&unk_1F10C0);
          swift_bridgeObjectRetain(v36);
          AttributedString.subscript.getter(v63, v45, v21);
          v32 = swift_release(v45);
          v41 = v63[0];
          if (v63[0])
          {
            v42 = Font.italic()(v63[0], v32);
LABEL_12:
            v46 = v42;
            v32 = swift_release(v41);
          }
          else
          {
LABEL_16:
            v46 = 0;
          }
          v63[0] = v46;
          v34 = (char *)v63;
          v35 = v38;
          v33 = v21;
          goto LABEL_5;
        case 2:
          v47 = swift_getKeyPath(&unk_1F1170);
          *(&v56 - 2) = __chkstk_darwin(v47);
          v28 = swift_getKeyPath(&unk_1F11A0);
          v48 = swift_bridgeObjectRetain(v36);
          static Text.LineStyle.single.getter(v48);
          v49 = type metadata accessor for Text.LineStyle(0);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 56))(v10, 0, 1, v49);
          v31 = sub_155D14();
          goto LABEL_4;
        case 3:
          v27 = swift_getKeyPath(&unk_1F11E0);
          *(&v56 - 2) = __chkstk_darwin(v27);
          v28 = swift_getKeyPath(&unk_1F1210);
          v29 = swift_bridgeObjectRetain(v36);
          static Text.LineStyle.single.getter(v29);
          v30 = type metadata accessor for Text.LineStyle(0);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v10, 0, 1, v30);
          v31 = sub_155DD0();
LABEL_4:
          v33 = v31;
          v34 = v10;
          v35 = v28;
          goto LABEL_5;
        case 4:
          if (!v36)
            goto LABEL_6;
          v50 = *(v26 - 1);
          v51 = swift_getKeyPath(&unk_1F1100);
          *(&v56 - 2) = __chkstk_darwin(v51);
          v52 = swift_getKeyPath(&unk_1F1130);
          swift_bridgeObjectRetain(v36);
          v53 = v61;
          URL.init(string:)(v50, v36);
          v33 = sub_155C58();
          v34 = v53;
          v35 = v52;
LABEL_5:
          AttributedString.subscript.setter(v34, v35, v33, v32);
          swift_bridgeObjectRelease(v36);
LABEL_6:
          v26 += 3;
          if (--v25)
            continue;
          swift_bridgeObjectRelease(v57);
          v14 = v59;
          v3 = v60;
          v15 = v58;
          break;
        default:
          goto LABEL_6;
      }
      break;
    }
  }
  v54 = v3 + OBJC_IVAR____TtC7BooksUIP33_E4697B72F90B920AD6B6858623E47B6D18BooksHTMLConverter_currentString;
  swift_beginAccess(v3 + OBJC_IVAR____TtC7BooksUIP33_E4697B72F90B920AD6B6858623E47B6D18BooksHTMLConverter_currentString, v63, 33, 0);
  static AttributedString.+= infix(_:_:)(v54, v17);
  swift_endAccess(v63);
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v17, v14);
}

void sub_155924(uint64_t a1)
{
  void *v1;
  uint64_t v3;
  char *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  NSObject *oslog;
  _QWORD v14[3];
  _BYTE v15[8];
  uint64_t v16;
  uint64_t v17;

  if (qword_25DAE8 != -1)
    swift_once(&qword_25DAE8, sub_7138);
  v3 = type metadata accessor for Logger(0);
  sub_7120(v3, (uint64_t)qword_25DE88);
  swift_errorRetain(a1);
  swift_errorRetain(a1);
  v4 = v1;
  oslog = Logger.logObject.getter(v4);
  v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(oslog, v5))
  {
    v6 = swift_slowAlloc(22, -1);
    v7 = swift_slowAlloc(64, -1);
    v17 = v7;
    *(_DWORD *)v6 = 136315394;
    v8 = *(_QWORD *)&v4[OBJC_IVAR____TtC7BooksUIP33_E4697B72F90B920AD6B6858623E47B6D18BooksHTMLConverter_html];
    v9 = *(_QWORD *)&v4[OBJC_IVAR____TtC7BooksUIP33_E4697B72F90B920AD6B6858623E47B6D18BooksHTMLConverter_html + 8];
    swift_bridgeObjectRetain(v9);
    v16 = sub_14AC3C(v8, v9, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v16, &v17, v6 + 4, v6 + 12);

    swift_bridgeObjectRelease(v9);
    *(_WORD *)(v6 + 12) = 2080;
    swift_getErrorValue(a1, v15, v14);
    v10 = Error.localizedDescription.getter(v14[1], v14[2]);
    v12 = v11;
    v16 = sub_14AC3C(v10, v11, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v16, &v17, v6 + 14, v6 + 22);
    swift_bridgeObjectRelease(v12);
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    _os_log_impl(&dword_0, oslog, v5, "Failed to parse the provided HTML string \"%s\" with error: %s", (uint8_t *)v6, 0x16u);
    swift_arrayDestroy(v7, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);

  }
  else
  {

    swift_errorRelease(a1);
    swift_errorRelease(a1);

  }
}

void sub_155B60()
{
  AttributeScopes.SwiftUIAttributes.font.getter();
  __break(1u);
}

unint64_t sub_155B7C()
{
  unint64_t result;

  result = qword_268380;
  if (!qword_268380)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for AttributeScopes.SwiftUIAttributes.FontAttribute, &type metadata for AttributeScopes.SwiftUIAttributes.FontAttribute);
    atomic_store(result, (unint64_t *)&qword_268380);
  }
  return result;
}

void sub_155BC0(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;

  v2 = *a2;
  v3 = sub_155B7C();
  AttributeDynamicLookup.subscript.getter(v2, v3);
  __break(1u);
}

uint64_t sub_155BE4()
{
  return 8;
}

uint64_t sub_155BF0(_QWORD *a1)
{
  return swift_release(*a1);
}

uint64_t sub_155BF8(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *a1;
  *a2 = v2;
  return swift_retain(v2);
}

uint64_t sub_155C04(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_154CDC(a1, a2, a3, &qword_2683B8) & 1;
}

uint64_t sub_155C24(uint64_t a1, uint64_t a2)
{
  return sub_155E70(a1, a2, &qword_2683B8);
}

_QWORD *sub_155C30(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

void sub_155C3C()
{
  AttributeScopes.FoundationAttributes.link.getter();
  __break(1u);
}

unint64_t sub_155C58()
{
  unint64_t result;

  result = qword_268388;
  if (!qword_268388)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for AttributeScopes.FoundationAttributes.LinkAttribute, &type metadata for AttributeScopes.FoundationAttributes.LinkAttribute);
    atomic_store(result, (unint64_t *)&qword_268388);
  }
  return result;
}

void sub_155C9C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;

  v2 = *a2;
  v3 = sub_155C58();
  AttributeDynamicLookup.subscript.getter(v2, v3);
  __break(1u);
}

uint64_t sub_155CC0()
{
  return 8;
}

uint64_t sub_155CCC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_154CDC(a1, a2, a3, &qword_2683B0) & 1;
}

uint64_t sub_155CEC(uint64_t a1, uint64_t a2)
{
  return sub_155E70(a1, a2, &qword_2683B0);
}

void sub_155CF8()
{
  AttributeScopes.SwiftUIAttributes.underlineStyle.getter();
  __break(1u);
}

unint64_t sub_155D14()
{
  unint64_t result;

  result = qword_268390;
  if (!qword_268390)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for AttributeScopes.SwiftUIAttributes.UnderlineStyleAttribute, &type metadata for AttributeScopes.SwiftUIAttributes.UnderlineStyleAttribute);
    atomic_store(result, (unint64_t *)&qword_268390);
  }
  return result;
}

void sub_155D58(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;

  v2 = *a2;
  v3 = sub_155D14();
  AttributeDynamicLookup.subscript.getter(v2, v3);
  __break(1u);
}

uint64_t sub_155D7C()
{
  return 8;
}

uint64_t sub_155D88(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_154CDC(a1, a2, a3, &qword_2683A8) & 1;
}

uint64_t sub_155DA8(uint64_t a1, uint64_t a2)
{
  return sub_155E70(a1, a2, &qword_2683A8);
}

void sub_155DB4()
{
  AttributeScopes.SwiftUIAttributes.strikethroughStyle.getter();
  __break(1u);
}

unint64_t sub_155DD0()
{
  unint64_t result;

  result = qword_268398;
  if (!qword_268398)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for AttributeScopes.SwiftUIAttributes.StrikethroughStyleAttribute, &type metadata for AttributeScopes.SwiftUIAttributes.StrikethroughStyleAttribute);
    atomic_store(result, (unint64_t *)&qword_268398);
  }
  return result;
}

void sub_155E14(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;

  v2 = *a2;
  v3 = sub_155DD0();
  AttributeDynamicLookup.subscript.getter(v2, v3);
  __break(1u);
}

uint64_t sub_155E38()
{
  return 8;
}

uint64_t sub_155E44(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_154CDC(a1, a2, a3, &qword_2683A0) & 1;
}

uint64_t sub_155E64(uint64_t a1, uint64_t a2)
{
  return sub_155E70(a1, a2, &qword_2683A0);
}

uint64_t sub_155E70(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = sub_5440(a3);
  return dispatch thunk of Hashable.hashValue.getter(v3, &protocol witness table for AnyKeyPath);
}

unint64_t sub_155EB0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2683C0;
  if (!qword_2683C0)
  {
    type metadata accessor for NQMLAttributeName(255);
    result = swift_getWitnessTable(&unk_1E09F8, v1);
    atomic_store(result, (unint64_t *)&qword_2683C0);
  }
  return result;
}

double View.synchronousNativeIntentDispatcher(_:with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t KeyPath;
  uint64_t v9;
  __n128 v10;
  double result;
  __int128 v12[2];

  KeyPath = swift_getKeyPath(&unk_1F1250);
  sub_BD00(a1, (uint64_t)v12);
  v9 = swift_allocObject(&unk_255AB8, 64, 7);
  sub_AC68(v12, v9 + 16);
  *(_QWORD *)(v9 + 56) = a2;
  v10 = swift_retain(a2);
  View.transformEnvironment<A>(_:transform:)(KeyPath, sub_15628C, v9, a3, a4, v10);
  swift_release(KeyPath);
  *(_QWORD *)&result = swift_release(v9).n128_u64[0];
  return result;
}

_QWORD *EnvironmentValues.dispatchSynchronousNativeIntent.getter@<X0>(_QWORD *a1@<X8>)
{
  unint64_t v2;

  v2 = sub_156298();
  return EnvironmentValues.subscript.getter(a1, &type metadata for SynchronousNativeIntentDispatchActionKey, &type metadata for SynchronousNativeIntentDispatchActionKey, v2);
}

_QWORD *sub_15601C@<X0>(_QWORD *a1@<X8>)
{
  unint64_t v2;
  _QWORD *result;
  uint64_t v4;

  v2 = sub_156298();
  result = EnvironmentValues.subscript.getter(&v4, &type metadata for SynchronousNativeIntentDispatchActionKey, &type metadata for SynchronousNativeIntentDispatchActionKey, v2);
  *a1 = v4;
  return result;
}

_QWORD *sub_156068@<X0>(_QWORD *a1@<X8>)
{
  unint64_t v2;
  _QWORD *result;
  uint64_t v4;

  v2 = sub_156298();
  result = EnvironmentValues.subscript.getter(&v4, &type metadata for SynchronousNativeIntentDispatchActionKey, &type metadata for SynchronousNativeIntentDispatchActionKey, v2);
  *a1 = v4;
  return result;
}

uint64_t sub_1560B4(uint64_t *a1)
{
  unint64_t v1;
  uint64_t v3;

  v3 = *a1;
  v1 = sub_156298();
  swift_retain(v3);
  return EnvironmentValues.subscript.setter(&v3, &type metadata for SynchronousNativeIntentDispatchActionKey, &type metadata for SynchronousNativeIntentDispatchActionKey, v1);
}

uint64_t sub_156114(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  __n128 v15;
  uint64_t result;
  uint64_t v17;
  __int128 v18[2];

  v6 = type metadata accessor for Dependency(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_BD00(a2, (uint64_t)v18);
  v10 = swift_allocObject(&unk_255B88, 56, 7);
  sub_AC68(v18, v10 + 16);
  v11 = *a1;
  v12 = sub_5440(&qword_268438);
  v13 = (_QWORD *)swift_allocObject(&unk_255BB0, 40, 7);
  v13[2] = sub_156890;
  v13[3] = v10;
  v13[4] = v11;
  swift_retain(a3);
  swift_retain(v10);
  Dependency.init<A>(satisfying:with:)(v12, sub_1568CC, v13, v12);
  v14 = dispatch thunk of BaseObjectGraph.adding(dependency:)(v9);
  swift_release(v10);
  v15 = swift_release(a3);
  result = (*(uint64_t (**)(char *, uint64_t, __n128))(v7 + 8))(v9, v6, v15);
  *a1 = v14;
  return result;
}

uint64_t sub_156260()
{
  uint64_t v0;

  _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 56));
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_15628C(uint64_t *a1)
{
  uint64_t v1;

  return sub_156114(a1, v1 + 16, *(_QWORD *)(v1 + 56));
}

unint64_t sub_156298()
{
  unint64_t result;

  result = qword_268430;
  if (!qword_268430)
  {
    result = swift_getWitnessTable(&unk_1F12DC, &type metadata for SynchronousNativeIntentDispatchActionKey);
    atomic_store(result, (unint64_t *)&qword_268430);
  }
  return result;
}

double View.synchronousNativeIntentDispatcher(from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t KeyPath;
  __n128 v7;
  double result;

  KeyPath = swift_getKeyPath(&unk_1F1250);
  v7 = swift_retain(a1);
  View.transformEnvironment<A>(_:transform:)(KeyPath, sub_156458, a1, a2, a3, v7);
  swift_release(KeyPath);
  *(_QWORD *)&result = swift_release(a1).n128_u64[0];
  return result;
}

uint64_t sub_156358(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  __n128 v12;
  uint64_t result;
  uint64_t v14;

  v4 = type metadata accessor for Dependency(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *a1;
  v9 = sub_5440(&qword_268438);
  v10 = (_QWORD *)swift_allocObject(&unk_255B60, 40, 7);
  v10[2] = sub_156814;
  v10[3] = a2;
  v10[4] = v8;
  swift_retain_n(a2, 2);
  Dependency.init<A>(satisfying:with:)(v9, sub_156820, v10, v9);
  v11 = dispatch thunk of BaseObjectGraph.adding(dependency:)(v7);
  v12 = swift_release(a2);
  result = (*(uint64_t (**)(char *, uint64_t, __n128))(v5 + 8))(v7, v4, v12);
  *a1 = v11;
  return result;
}

uint64_t sub_156458(uint64_t *a1)
{
  uint64_t v1;

  return sub_156358(a1, v1);
}

_QWORD *sub_156460@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;

  v4 = sub_5440(&qword_268438);
  v5 = type metadata accessor for BaseObjectGraph(0);
  return inject<A, B>(_:from:)(a2, v4, a1, v4, v5);
}

uint64_t View.synchronousNativeIntentDispatcher(with:implementations:)(uint64_t a1, void (*a2)(void), uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v10[5];

  v10[3] = &type metadata for SynchronousNativeIntentDispatcher;
  v10[4] = &protocol witness table for SynchronousNativeIntentDispatcher;
  v10[0] = swift_allocObject(&unk_255AE0, 64, 7);
  a2();
  View.synchronousNativeIntentDispatcher(_:with:)((uint64_t)v10, a1, a4, a5);
  return _s7BooksUI13AnyPagedFrameVwxx_0(v10);
}

uint64_t sub_156560()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[2]);
  if (v0[6])
    _s7BooksUI13AnyPagedFrameVwxx_0(v0 + 3);
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_156594@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v10[40];
  __int128 v11[2];
  _QWORD v12[5];

  result = a1();
  if (a2)
  {
    v6 = sub_5440(&qword_268438);
    v7 = type metadata accessor for BaseObjectGraph(0);
    swift_retain(a2);
    inject<A, B>(_:from:)(v12, v6, a2, v6, v7);
    v8 = a3[3];
    v9 = a3[4];
    sub_5480(a3, v8);
    sub_BD00((uint64_t)v12, (uint64_t)v10);
    (*(void (**)(__int128 *__return_ptr, _BYTE *, uint64_t, uint64_t))(v9 + 16))(v11, v10, v8, v9);
    swift_release(a2);
    sub_15682C((uint64_t)v10);
    _s7BooksUI13AnyPagedFrameVwxx_0(v12);
    _s7BooksUI13AnyPagedFrameVwxx_0(a3);
    return sub_AC68(v11, (uint64_t)a3);
  }
  return result;
}

uint64_t SynchronousNativeIntentDispatchAction.callAsFunction<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[3];
  uint64_t v14;
  uint64_t v15;

  v7 = *v3;
  v8 = sub_5440(&qword_268438);
  v9 = type metadata accessor for BaseObjectGraph(0);
  inject<A, B>(_:from:)(v13, v8, v7, v8, v9);
  v10 = v14;
  v11 = v15;
  sub_5480(v13, v14);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 8))(a1, v7, a2, a3, v10, v11);
  return _s7BooksUI13AnyPagedFrameVwxx_0(v13);
}

ValueMetadata *type metadata accessor for SynchronousNativeIntentDispatchAction()
{
  return &type metadata for SynchronousNativeIntentDispatchAction;
}

uint64_t sub_156758(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *a1;
  v2 = sub_7EF8(&qword_268440);
  v3 = type metadata accessor for ModifiedContent(255, v1, v2);
  sub_1567B8();
  return swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v3);
}

unint64_t sub_1567B8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_268448;
  if (!qword_268448)
  {
    v1 = sub_7EF8(&qword_268440);
    result = swift_getWitnessTable(&protocol conformance descriptor for _EnvironmentKeyTransformModifier<A>, v1);
    atomic_store(result, (unint64_t *)&qword_268448);
  }
  return result;
}

ValueMetadata *type metadata accessor for SynchronousNativeIntentDispatchActionKey()
{
  return &type metadata for SynchronousNativeIntentDispatchActionKey;
}

_QWORD *sub_156814@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return sub_156460(v1, a1);
}

uint64_t sub_156820@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return sub_156594(*(uint64_t (**)(void))(v1 + 16), *(_QWORD *)(v1 + 32), a1);
}

uint64_t sub_15682C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_5440(&qword_266188);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_15686C()
{
  uint64_t v0;

  _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_156890@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_BD00(v1 + 16, a1);
}

uint64_t sub_1568A0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t View.defaultBlendMode()(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v12;

  v4 = type metadata accessor for DefaultBlendModeModifier(0);
  v5 = __chkstk_darwin(v4);
  v7 = (uint64_t *)((char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v5);
  v9 = (char *)&v12 - v8;
  *v7 = swift_getKeyPath(&unk_1F1320);
  v10 = sub_5440(&qword_25F208);
  swift_storeEnumTagMultiPayload(v7, v10, 0);
  sub_4E18C((uint64_t)v7, (uint64_t)v9);
  View.modifier<A>(_:)(v9, a1, v4, a2);
  return sub_604E0((uint64_t)v9);
}

uint64_t type metadata accessor for DefaultBlendModeModifier(uint64_t a1)
{
  uint64_t result;

  result = qword_2684A8;
  if (!qword_2684A8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for DefaultBlendModeModifier);
  return result;
}

uint64_t sub_1569F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v4 = type metadata accessor for BlendMode(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_31660((uint64_t)v7);
  v8 = sub_5440(&qword_2684E0);
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 16))(a2 + *(int *)(v8 + 36), v7, v4);
  v9 = sub_5440(&qword_2684E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a2, a1, v9);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_156AC8(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *a1;
  v2 = type metadata accessor for DefaultBlendModeModifier(255);
  v3 = type metadata accessor for ModifiedContent(255, v1, v2);
  sub_156B24();
  return swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v3);
}

unint64_t sub_156B24()
{
  unint64_t result;
  uint64_t v1;

  result = qword_260958;
  if (!qword_260958)
  {
    v1 = type metadata accessor for DefaultBlendModeModifier(255);
    result = swift_getWitnessTable(&unk_1F136C, v1);
    atomic_store(result, (unint64_t *)&qword_260958);
  }
  return result;
}

uint64_t *sub_156B6C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = sub_5440(&qword_25F208);
  v5 = *(_DWORD *)(*(_QWORD *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v11);
  }
  else
  {
    v6 = v4;
    if (swift_getEnumCaseMultiPayload(a2, v4) == 1)
    {
      v7 = type metadata accessor for BlendMode(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = v6;
      v10 = 1;
    }
    else
    {
      v12 = *a2;
      *a1 = *a2;
      swift_retain(v12);
      v8 = a1;
      v9 = v6;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
  }
  return a1;
}

double sub_156C34(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  double result;

  v2 = sub_5440(&qword_25F208);
  if (swift_getEnumCaseMultiPayload(a1, v2) == 1)
  {
    v3 = type metadata accessor for BlendMode(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  }
  else
  {
    *(_QWORD *)&result = swift_release(*a1).n128_u64[0];
  }
  return result;
}

uint64_t *sub_156C98(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = sub_5440(&qword_25F208);
  if (swift_getEnumCaseMultiPayload(a2, v4) == 1)
  {
    v5 = type metadata accessor for BlendMode(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a1, a2, v5);
    v6 = a1;
    v7 = v4;
    v8 = 1;
  }
  else
  {
    v9 = *a2;
    *a1 = *a2;
    swift_retain(v9);
    v6 = a1;
    v7 = v4;
    v8 = 0;
  }
  swift_storeEnumTagMultiPayload(v6, v7, v8);
  return a1;
}

uint64_t *sub_156D34(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (a1 != a2)
  {
    sub_156DE0((uint64_t)a1);
    v4 = sub_5440(&qword_25F208);
    if (swift_getEnumCaseMultiPayload(a2, v4) == 1)
    {
      v5 = type metadata accessor for BlendMode(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a1, a2, v5);
      v6 = a1;
      v7 = v4;
      v8 = 1;
    }
    else
    {
      v9 = *a2;
      *a1 = *a2;
      swift_retain(v9);
      v6 = a1;
      v7 = v4;
      v8 = 0;
    }
    swift_storeEnumTagMultiPayload(v6, v7, v8);
  }
  return a1;
}

uint64_t sub_156DE0(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_5440(&qword_25F208);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void *sub_156E20(void *a1, const void *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = sub_5440(&qword_25F208);
  if (swift_getEnumCaseMultiPayload(a2, v4) == 1)
  {
    v5 = type metadata accessor for BlendMode(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a1, a2, v5);
    swift_storeEnumTagMultiPayload(a1, v4, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  }
  return a1;
}

void *sub_156EB8(void *a1, const void *a2)
{
  uint64_t v4;
  uint64_t v5;

  if (a1 != a2)
  {
    sub_156DE0((uint64_t)a1);
    v4 = sub_5440(&qword_25F208);
    if (swift_getEnumCaseMultiPayload(a2, v4) == 1)
    {
      v5 = type metadata accessor for BlendMode(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a1, a2, v5);
      swift_storeEnumTagMultiPayload(a1, v4, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_156F60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_156F6C);
}

uint64_t sub_156F6C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_5440(&qword_25F228);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_156FAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_156FB8);
}

uint64_t sub_156FB8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_5440(&qword_25F228);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

void sub_156FFC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  sub_157064(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(v2 - 8) + 64;
    swift_initStructMetadata(a1, 256, 1, &v4, a1 + 16);
  }
}

void sub_157064(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_25F2B0)
  {
    v2 = type metadata accessor for BlendMode(255);
    v3 = type metadata accessor for Environment.Content(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_25F2B0);
  }
}

uint64_t sub_1570B8(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_22F530, 1);
}

unint64_t sub_1570CC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2684F0;
  if (!qword_2684F0)
  {
    v1 = sub_7EF8(&qword_2684E0);
    sub_157138();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_2684F0);
  }
  return result;
}

unint64_t sub_157138()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2684F8;
  if (!qword_2684F8)
  {
    v1 = sub_7EF8(&qword_2684E8);
    result = swift_getWitnessTable(&protocol conformance descriptor for _ViewModifier_Content<A>, v1);
    atomic_store(result, (unint64_t *)&qword_2684F8);
  }
  return result;
}

uint64_t IntentResult.dispatchState.getter@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char v9;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = type metadata accessor for Optional(0, v4);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v13 - v7;
  IntentResult.data.getter(a1);
  v9 = 1;
  LODWORD(v4) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(v8, 1, v4);
  result = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  if ((_DWORD)v4 == 1)
  {
    v11 = IntentResult.error.getter(a1);
    v12 = v11 != 0;
    result = swift_errorRelease(v11);
    v9 = 2 * v12;
  }
  *a2 = v9;
  return result;
}

uint64_t sub_15725C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8;

  v8 = sub_1574D4();
  return static EnvironmentKey<>._valuesEqual(_:_:)(a1, a2, a3, a4, v8);
}

_QWORD *EnvironmentValues.pageIntentDispatchState.getter@<X0>(_QWORD *a1@<X8>)
{
  unint64_t v2;

  v2 = sub_C4C8();
  return EnvironmentValues.subscript.getter(a1, &type metadata for PageIntentDispatchStateKey, &type metadata for PageIntentDispatchStateKey, v2);
}

uint64_t EnvironmentValues.pageIntentDispatchState.setter(char *a1)
{
  unint64_t v1;
  char v3;

  v3 = *a1;
  v1 = sub_C4C8();
  return EnvironmentValues.subscript.setter(&v3, &type metadata for PageIntentDispatchStateKey, &type metadata for PageIntentDispatchStateKey, v1);
}

uint64_t (*EnvironmentValues.pageIntentDispatchState.modify(_QWORD *a1))(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  unint64_t v4;

  v3 = a1 + 2;
  *a1 = v1;
  v4 = sub_C4C8();
  a1[1] = v4;
  EnvironmentValues.subscript.getter(v3, &type metadata for PageIntentDispatchStateKey, &type metadata for PageIntentDispatchStateKey, v4);
  return sub_157374;
}

uint64_t sub_157374(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a1 + 16);
  return EnvironmentValues.subscript.setter(a1 + 17, &type metadata for PageIntentDispatchStateKey, &type metadata for PageIntentDispatchStateKey, v1);
}

unint64_t sub_1573AC()
{
  unint64_t result;

  result = qword_268500;
  if (!qword_268500)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for IntentDispatchState, &type metadata for IntentDispatchState);
    atomic_store(result, (unint64_t *)&qword_268500);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for IntentDispatchState(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_157444 + 4 * byte_1F13C5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_157478 + 4 * byte_1F13C0[v4]))();
}

uint64_t sub_157478(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_157480(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x157488);
  return result;
}

uint64_t sub_157494(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x15749CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1574A0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1574A8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for IntentDispatchState()
{
  return &type metadata for IntentDispatchState;
}

ValueMetadata *type metadata accessor for PageIntentDispatchStateKey()
{
  return &type metadata for PageIntentDispatchStateKey;
}

unint64_t sub_1574D4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_268508;
  if (!qword_268508)
  {
    v1 = sub_7EF8(qword_268510);
    sub_1573AC();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_268508);
  }
  return result;
}

unint64_t MetricsFieldsConvertible.metricsFields.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  _QWORD *v12;
  void *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  void *v19;
  Class isa;
  id v21;
  id v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  id v31;
  uint64_t v32;

  v5 = type metadata accessor for JSONEncoder(0);
  swift_allocObject(v5, *(unsigned int *)(v5 + 48), *(unsigned __int16 *)(v5 + 52));
  v6 = JSONEncoder.init()();
  v16 = dispatch thunk of JSONEncoder.encode<A>(_:)(v2, a1, *(_QWORD *)(a2 + 8));
  v18 = v17;
  swift_release(v6);
  v19 = (void *)objc_opt_self(NSJSONSerialization);
  isa = Data._bridgeToObjectiveC()().super.isa;
  v31 = 0;
  v21 = objc_msgSend(v19, "JSONObjectWithData:options:error:", isa, 0, &v31);

  v22 = v31;
  if (v21)
  {
    v23 = v31;
    _bridgeAnyObjectToAny(_:)(&v31, v21);
    swift_unknownObjectRelease(v21);
    v24 = sub_5440(&qword_266630);
    if (swift_dynamicCast(&v30, &v31, (char *)&type metadata for Any + 8, v24, 6))
    {
      v25 = v30;
      v15 = sub_157890(v30);
      swift_bridgeObjectRelease(v25);
    }
    else
    {
      v15 = sub_8FA0((uint64_t)_swiftEmptyArrayStorage);
    }
    sub_124488(v16, v18);
  }
  else
  {
    v26 = v31;
    v27 = _convertNSErrorToError(_:)(v22);

    swift_willThrow(v28);
    sub_124488(v16, v18);
    if (qword_25DAF0 != -1)
      swift_once(&qword_25DAF0, sub_71E0);
    v7 = type metadata accessor for Logger(0);
    sub_7120(v7, (uint64_t)qword_25DEA0);
    swift_errorRetain(v27);
    v8 = swift_errorRetain(v27);
    v9 = Logger.logObject.getter(v8);
    v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc(12, -1);
      v12 = (_QWORD *)swift_slowAlloc(8, -1);
      *(_DWORD *)v11 = 138412290;
      swift_errorRetain(v27);
      v13 = (void *)_swift_stdlib_bridgeErrorToNSError(v27);
      v31 = v13;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32, v11 + 4, v11 + 12);
      *v12 = v13;
      swift_errorRelease(v27);
      swift_errorRelease(v27);
      _os_log_impl(&dword_0, v9, v10, "Failed to convert metrics model into MetricsFields: %@", v11, 0xCu);
      v14 = sub_5440(&qword_25E368);
      swift_arrayDestroy(v12, 1, v14);
      swift_slowDealloc(v12, -1, -1);
      swift_slowDealloc(v11, -1, -1);
    }
    else
    {
      swift_errorRelease(v27);
      swift_errorRelease(v27);
    }

    v15 = sub_8FA0((uint64_t)_swiftEmptyArrayStorage);
    swift_errorRelease(v27);
  }
  return v15;
}

Swift::Int sub_157890(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  Swift::Int result;
  int64_t v7;
  __int128 *v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  int64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  unint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  int64_t v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  _OWORD v34[3];
  uint64_t v35;
  _OWORD v36[2];
  __int128 v37;
  _OWORD v38[2];
  __int128 v39;
  _OWORD v40[2];
  _QWORD *v41;
  uint64_t *v42;

  v2 = &_swiftEmptyDictionarySingleton;
  v41 = &_swiftEmptyDictionarySingleton;
  v31 = a1 + 64;
  v3 = -1 << *(_BYTE *)(a1 + 32);
  if (-v3 < 64)
    v4 = ~(-1 << -(char)v3);
  else
    v4 = -1;
  v5 = v4 & *(_QWORD *)(a1 + 64);
  v30 = (unint64_t)(63 - v3) >> 6;
  v42 = &v35;
  result = swift_bridgeObjectRetain(a1);
  v7 = 0;
  while (1)
  {
    if (v5)
    {
      v9 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      v10 = v9 | (v7 << 6);
      goto LABEL_25;
    }
    v11 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
LABEL_41:
      __break(1u);
      goto LABEL_42;
    }
    if (v11 >= v30)
      goto LABEL_40;
    v12 = *(_QWORD *)(v31 + 8 * v11);
    v13 = v7 + 1;
    if (!v12)
    {
      v13 = v7 + 2;
      if (v7 + 2 >= v30)
        goto LABEL_40;
      v12 = *(_QWORD *)(v31 + 8 * v13);
      if (!v12)
      {
        v13 = v7 + 3;
        if (v7 + 3 >= v30)
          goto LABEL_40;
        v12 = *(_QWORD *)(v31 + 8 * v13);
        if (!v12)
        {
          v13 = v7 + 4;
          if (v7 + 4 >= v30)
            goto LABEL_40;
          v12 = *(_QWORD *)(v31 + 8 * v13);
          if (!v12)
            break;
        }
      }
    }
LABEL_24:
    v5 = (v12 - 1) & v12;
    v10 = __clz(__rbit64(v12)) + (v13 << 6);
    v7 = v13;
LABEL_25:
    v15 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v10);
    v17 = *v15;
    v16 = v15[1];
    sub_1589BC(*(_QWORD *)(a1 + 56) + 32 * v10, (uint64_t)v40);
    *(_QWORD *)&v39 = v17;
    *((_QWORD *)&v39 + 1) = v16;
    v37 = v39;
    v38[0] = v40[0];
    v38[1] = v40[1];
    sub_1589BC((uint64_t)v38, (uint64_t)&v32);
    if (v33)
    {
      sub_8C4C(&v32, v36);
      v18 = v37;
      v34[2] = v37;
      sub_158A04((uint64_t)v38, (uint64_t)v42);
      sub_8C4C(v36, v34);
      v19 = v2[2];
      if (v2[3] <= v19)
      {
        v20 = v19 + 1;
        swift_bridgeObjectRetain(v16);
        sub_1AC3B0(v20, 1);
        v2 = v41;
      }
      else
      {
        swift_bridgeObjectRetain(v16);
      }
      Hasher.init(_seed:)(&v32, v2[5]);
      String.hash(into:)(&v32, v18, *((_QWORD *)&v18 + 1));
      result = Hasher._finalize()();
      v21 = (char *)(v2 + 8);
      v22 = -1 << *((_BYTE *)v2 + 32);
      v23 = result & ~v22;
      v24 = v23 >> 6;
      if (((-1 << v23) & ~v2[(v23 >> 6) + 8]) != 0)
      {
        v25 = __clz(__rbit64((-1 << v23) & ~v2[(v23 >> 6) + 8])) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v26 = 0;
        v27 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v28 = v24 == v27;
          if (v24 == v27)
            v24 = 0;
          v26 |= v28;
          v29 = *(_QWORD *)&v21[8 * v24];
        }
        while (v29 == -1);
        v25 = __clz(__rbit64(~v29)) + (v24 << 6);
      }
      *(_QWORD *)&v21[(v25 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v25;
      *(_OWORD *)(v2[6] + 16 * v25) = v18;
      sub_8C4C(v34, (_OWORD *)(v2[7] + 32 * v25));
      ++v2[2];
      v8 = (__int128 *)v42;
    }
    else
    {
      swift_bridgeObjectRetain(v16);
      sub_B414((uint64_t)&v37, &qword_268618);
      v8 = &v32;
    }
    result = sub_B414((uint64_t)v8, &qword_25E0C0);
  }
  v14 = v7 + 5;
  if (v7 + 5 >= v30)
  {
LABEL_40:
    sub_94160(a1);
    return (Swift::Int)v2;
  }
  v12 = *(_QWORD *)(v31 + 8 * v14);
  if (v12)
  {
    v13 = v7 + 5;
    goto LABEL_24;
  }
  while (1)
  {
    v13 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v13 >= v30)
      goto LABEL_40;
    v12 = *(_QWORD *)(v31 + 8 * v13);
    ++v14;
    if (v12)
      goto LABEL_24;
  }
LABEL_42:
  __break(1u);
  return result;
}

uint64_t NotEncoded.wrappedValue.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t NotEncoded.encode(to:)(_QWORD *a1)
{
  return sub_157ED0(a1);
}

uint64_t NotEncoded<A>.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t result;
  _BYTE v15[40];

  v9 = *(_QWORD *)(a2 - 8);
  v10 = __chkstk_darwin(a1);
  v12 = &v15[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  sub_BD00(v10, (uint64_t)v15);
  dispatch thunk of Decodable.init(from:)(v15, a2, a3);
  result = _s7BooksUI13AnyPagedFrameVwxx_0(a1);
  if (!v4)
    return (*(uint64_t (**)(uint64_t, _BYTE *, uint64_t))(v9 + 32))(a4, v12, a2);
  return result;
}

uint64_t sub_157D38@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return NotEncoded<A>.init(from:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a3 - 8), a4);
}

uint64_t NotDecoded.wrappedValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;

  v4 = type metadata accessor for Optional(0, *(_QWORD *)(a1 + 16));
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, v2, v4);
}

uint64_t NotDecoded.wrappedValue.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  v4 = type metadata accessor for Optional(0, *(_QWORD *)(a2 + 16));
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v2, a1, v4);
}

uint64_t NotDecoded.init(wrappedValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;

  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 56))(a3, 1, 1, a2);
  v6 = type metadata accessor for Optional(0, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a3, a1, v6);
}

uint64_t NotDecoded.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void (*v5)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v6;

  _s7BooksUI13AnyPagedFrameVwxx_0(a1);
  v5 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 56);
  v5(a3, 1, 1, a2);
  v6 = type metadata accessor for Optional(0, a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a3, v6);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v5)(a3, 1, 1, a2);
}

uint64_t sub_157EB8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return NotDecoded.init(from:)(a1, *(_QWORD *)(a2 + 16), a3);
}

uint64_t sub_157ED0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[3];
  uint64_t v7;
  uint64_t v8;

  v1 = a1[3];
  v2 = a1[4];
  sub_5480(a1, v1);
  dispatch thunk of Encoder.singleValueContainer()(v6, v1, v2);
  v3 = v7;
  v4 = v8;
  sub_1244C((uint64_t)v6, v7);
  dispatch thunk of SingleValueEncodingContainer.encodeNil()(v3, v4);
  return _s7BooksUI13AnyPagedFrameVwxx_0(v6);
}

uint64_t sub_157F50(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_158000 + 4 * byte_1F14C0[(v7 - 1)]))();
}

void sub_158050(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = &dword_4;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = &dword_0 + 1;
    }
  }
  else
  {
    v11 = 0;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t type metadata accessor for NotEncoded(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10E40(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for NotEncoded);
}

uint64_t sub_15820C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  result = type metadata accessor for Optional(319, *(_QWORD *)(a1 + 16));
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 0, 1, &v4, a1 + 24);
    return 0;
  }
  return result;
}

uint64_t *sub_158278(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  size_t v8;
  uint64_t v11;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_DWORD *)(v6 + 80);
  if (*(_DWORD *)(v6 + 84))
    v8 = *(_QWORD *)(v6 + 64);
  else
    v8 = *(_QWORD *)(v6 + 64) + 1;
  if (*(_DWORD *)(v6 + 80) > 7u || (v7 & 0x100000) != 0 || v8 > 0x18)
  {
    v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v7 + 16) & ~(unint64_t)v7));
    swift_retain(v11);
  }
  else if ((*(unsigned int (**)(uint64_t *, uint64_t, _QWORD))(v6 + 48))(a2, 1, *(_QWORD *)(a3 + 16)))
  {
    memcpy(a1, a2, v8);
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
  }
  return a1;
}

uint64_t sub_158350(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(a1, 1, v3);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  return result;
}

void *sub_1583AC(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  size_t v7;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
  {
    if (*(_DWORD *)(v6 + 84))
      v7 = *(_QWORD *)(v6 + 64);
    else
      v7 = *(_QWORD *)(v6 + 64) + 1;
    memcpy(a1, a2, v7);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
  }
  return a1;
}

void *sub_158444(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void *, uint64_t, uint64_t);
  int v8;
  int v9;
  size_t v10;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  v8 = v7(a1, 1, v5);
  v9 = v7(a2, 1, v5);
  if (v8)
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 16))(a1, a2, v5);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      return a1;
    }
  }
  else
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 24))(a1, a2, v5);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v6 + 8))(a1, v5);
  }
  if (*(_DWORD *)(v6 + 84))
    v10 = *(_QWORD *)(v6 + 64);
  else
    v10 = *(_QWORD *)(v6 + 64) + 1;
  memcpy(a1, a2, v10);
  return a1;
}

void *sub_158524(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  size_t v7;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
  {
    if (*(_DWORD *)(v6 + 84))
      v7 = *(_QWORD *)(v6 + 64);
    else
      v7 = *(_QWORD *)(v6 + 64) + 1;
    memcpy(a1, a2, v7);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 32))(a1, a2, v5);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
  }
  return a1;
}

void *sub_1585BC(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void *, uint64_t, uint64_t);
  int v8;
  int v9;
  size_t v10;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  v8 = v7(a1, 1, v5);
  v9 = v7(a2, 1, v5);
  if (v8)
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 32))(a1, a2, v5);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      return a1;
    }
  }
  else
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 40))(a1, a2, v5);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v6 + 8))(a1, v5);
  }
  if (*(_DWORD *)(v6 + 84))
    v10 = *(_QWORD *)(v6 + 64);
  else
    v10 = *(_QWORD *)(v6 + 64) + 1;
  memcpy(a1, a2, v10);
  return a1;
}

uint64_t sub_15869C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  char v9;
  int v10;
  unsigned int v11;
  int v12;
  int v13;
  unsigned int v14;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = v5 - 1;
  if (!v5)
    v6 = 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (!v5)
    ++v7;
  if (!a2)
    return 0;
  v8 = a2 - v6;
  if (a2 > v6)
  {
    v9 = 8 * v7;
    if (v7 > 3)
      goto LABEL_8;
    v11 = ((v8 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      v10 = *(_DWORD *)(a1 + v7);
      if (v10)
        goto LABEL_15;
    }
    else
    {
      if (v11 <= 0xFF)
      {
        if (v11 < 2)
          goto LABEL_24;
LABEL_8:
        v10 = *(unsigned __int8 *)(a1 + v7);
        if (!*(_BYTE *)(a1 + v7))
          goto LABEL_24;
LABEL_15:
        v12 = (v10 - 1) << v9;
        if (v7 > 3)
          v12 = 0;
        if ((_DWORD)v7)
        {
          if (v7 <= 3)
            v13 = v7;
          else
            v13 = 4;
          __asm { BR              X12 }
        }
        return v6 + v12 + 1;
      }
      v10 = *(unsigned __int16 *)(a1 + v7);
      if (*(_WORD *)(a1 + v7))
        goto LABEL_15;
    }
  }
LABEL_24:
  if (v5 < 2)
    return 0;
  v14 = (*(uint64_t (**)(void))(v4 + 48))();
  if (v14 >= 2)
    return v14 - 1;
  else
    return 0;
}

void sub_1587DC(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unsigned int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  size_t v10;
  BOOL v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;

  v6 = 0;
  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  v9 = v8 - 1;
  if (v8)
  {
    v10 = *(_QWORD *)(v7 + 64);
  }
  else
  {
    v9 = 0;
    v10 = *(_QWORD *)(v7 + 64) + 1;
  }
  v11 = a3 >= v9;
  v12 = a3 - v9;
  if (v12 != 0 && v11)
  {
    if (v10 > 3)
    {
      v6 = &dword_0 + 1;
      if (v9 < a2)
        goto LABEL_14;
      goto LABEL_21;
    }
    v13 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
    if (HIWORD(v13))
    {
      v6 = &dword_4;
      if (v9 < a2)
      {
LABEL_14:
        v14 = ~v9 + a2;
        if (v10 < 4)
        {
          if ((_DWORD)v10)
          {
            v15 = v14 & ~(-1 << (8 * v10));
            bzero(a1, v10);
            if ((_DWORD)v10 == 3)
            {
              *a1 = v15;
              *((_BYTE *)a1 + 2) = BYTE2(v15);
            }
            else if ((_DWORD)v10 == 2)
            {
              *a1 = v15;
            }
            else
            {
              *(_BYTE *)a1 = v15;
            }
          }
        }
        else
        {
          bzero(a1, v10);
          *(_DWORD *)a1 = v14;
        }
        __asm { BR              X10 }
      }
LABEL_21:
      __asm { BR              X11 }
    }
    if (v13 >= 0x100)
      v6 = 2;
    else
      v6 = v13 > 1;
  }
  if (v9 < a2)
    goto LABEL_14;
  goto LABEL_21;
}

void sub_158984()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_15898C()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

uint64_t type metadata accessor for NotDecoded(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10E40(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for NotDecoded);
}

uint64_t sub_1589BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_5440(&qword_25E0C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_158A04(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_5440(&qword_25E0C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_158A4C(void (*a1)(uint64_t *__return_ptr, _QWORD *), _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t result;
  int64_t v9;
  int v10;
  int v11;
  char v12;
  char v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  char v23;
  char v24;
  uint64_t v25;
  char v26;
  char v27;
  char v28;
  char v29;
  char v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char v34;
  char v35;
  _QWORD *v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  char v40;
  char v41;
  char v42;
  char v43;
  char v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v54;
  int v55;
  _QWORD v56[2];
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  char v63;
  char v64;
  uint64_t v65;
  char v66;
  char v67;
  char v68;
  char v69;
  char v70;
  uint64_t v71;
  char v72;
  char v73;
  _QWORD *v74;

  v4 = v3;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = _swiftEmptyArrayStorage;
  if (!v5)
    return (uint64_t)v6;
  v7 = a3;
  v74 = _swiftEmptyArrayStorage;
  sub_20F98(0, v5, 0);
  v6 = _swiftEmptyArrayStorage;
  result = sub_15BC6C(v7);
  v9 = result;
  v11 = v10;
  v13 = v12 & 1;
  v50 = v7;
  v51 = v7 + 56;
  while ((v9 & 0x8000000000000000) == 0 && v9 < 1 << *(_BYTE *)(v7 + 32))
  {
    if (((*(_QWORD *)(v51 + (((unint64_t)v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
      goto LABEL_15;
    if (*(_DWORD *)(v7 + 36) != v11)
      goto LABEL_16;
    v14 = v6;
    v15 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v9);
    v16 = v15[1];
    v56[0] = *v15;
    v56[1] = v16;
    swift_bridgeObjectRetain(v16);
    v6 = a2;
    a1(&v57, v56);
    if (v4)
    {
      swift_release(v14);
      swift_bridgeObjectRelease(v16);
      return (uint64_t)v6;
    }
    v54 = v13;
    v55 = v11;
    swift_bridgeObjectRelease(v16);
    v17 = v57;
    v18 = v58;
    v19 = v59;
    v20 = v60;
    v21 = v61;
    v22 = v62;
    v23 = v63;
    v24 = v64;
    v25 = v65;
    v26 = v66;
    v27 = v67;
    v28 = v68;
    v29 = v69;
    v30 = v70;
    v31 = v71;
    v6 = v14;
    v32 = v14[2];
    v33 = v6[3];
    v34 = v72;
    v35 = v73;
    v74 = v6;
    if (v32 >= v33 >> 1)
    {
      v40 = v70;
      v39 = v71;
      v48 = v58;
      v49 = v57;
      v46 = v62;
      v47 = v59;
      v44 = v64;
      v45 = v63;
      v42 = v67;
      v43 = v66;
      v41 = v68;
      sub_20F98(v33 > 1, v32 + 1, 1);
      v31 = v39;
      v30 = v40;
      v28 = v41;
      v27 = v42;
      v26 = v43;
      v24 = v44;
      v23 = v45;
      v22 = v46;
      v19 = v47;
      v18 = v48;
      v17 = v49;
      v6 = v74;
    }
    v6[2] = v32 + 1;
    v36 = &v6[11 * v32];
    v36[4] = v17;
    v36[5] = v18;
    v36[6] = v19;
    v36[7] = v20;
    *((_BYTE *)v36 + 64) = v21;
    v36[9] = v22;
    *((_BYTE *)v36 + 80) = v23;
    *((_BYTE *)v36 + 81) = v24;
    v36[11] = v25;
    *((_BYTE *)v36 + 96) = v26;
    *((_BYTE *)v36 + 97) = v27;
    *((_BYTE *)v36 + 98) = v28;
    *((_BYTE *)v36 + 99) = v29;
    *((_BYTE *)v36 + 100) = v30;
    v36[13] = v31;
    *((_BYTE *)v36 + 112) = v34;
    *((_BYTE *)v36 + 113) = v35;
    v7 = v50;
    result = sub_15BD0C(v9, v55, v54 & 1, v50);
    v9 = result;
    v11 = v37;
    v13 = v38 & 1;
    --v5;
    v4 = 0;
    if (!v5)
    {
      sub_15C488(result, v37, v38 & 1);
      return (uint64_t)v6;
    }
  }
  __break(1u);
LABEL_15:
  __break(1u);
LABEL_16:
  __break(1u);
  return result;
}

uint64_t sub_158CD4(void (*a1)(_OWORD *__return_ptr, _QWORD *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t result;
  int64_t v9;
  int v10;
  int v11;
  char v12;
  char v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  _QWORD v27[2];
  _OWORD v28[3];
  uint64_t v29;
  _QWORD *v30;

  v4 = v3;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = _swiftEmptyArrayStorage;
  if (!v5)
    return (uint64_t)v6;
  v7 = a3;
  v30 = _swiftEmptyArrayStorage;
  sub_20FB4(0, v5, 0);
  v6 = _swiftEmptyArrayStorage;
  result = sub_15BC6C(v7);
  v9 = result;
  v11 = v10;
  v13 = v12 & 1;
  v25 = v7 + 56;
  while ((v9 & 0x8000000000000000) == 0 && v9 < 1 << *(_BYTE *)(v7 + 32))
  {
    if (((*(_QWORD *)(v25 + (((unint64_t)v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
      goto LABEL_15;
    if (*(_DWORD *)(v7 + 36) != v11)
      goto LABEL_16;
    v14 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v9);
    v15 = v14[1];
    v27[0] = *v14;
    v27[1] = v15;
    swift_bridgeObjectRetain(v15);
    a1(v28, v27);
    if (v4)
    {
      swift_release(v6);
      swift_bridgeObjectRelease(v15);
      return (uint64_t)v6;
    }
    v16 = v7;
    swift_bridgeObjectRelease(v15);
    v30 = v6;
    v18 = v6[2];
    v17 = v6[3];
    if (v18 >= v17 >> 1)
    {
      sub_20FB4(v17 > 1, v18 + 1, 1);
      v6 = v30;
    }
    v6[2] = v18 + 1;
    v19 = &v6[7 * v18];
    v20 = v28[0];
    v21 = v28[1];
    v22 = v28[2];
    v19[10] = v29;
    *((_OWORD *)v19 + 3) = v21;
    *((_OWORD *)v19 + 4) = v22;
    *((_OWORD *)v19 + 2) = v20;
    v7 = v16;
    result = sub_15BD0C(v9, v11, v13 & 1, v16);
    v9 = result;
    v11 = v23;
    v13 = v24 & 1;
    --v5;
    v4 = 0;
    if (!v5)
    {
      sub_15C488(result, v23, v24 & 1);
      return (uint64_t)v6;
    }
  }
  __break(1u);
LABEL_15:
  __break(1u);
LABEL_16:
  __break(1u);
  return result;
}

_QWORD *sub_158EB0(uint64_t a1)
{
  int64_t v1;
  _QWORD *result;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  int64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  int64_t v24;
  int v25;
  uint64_t v26;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return _swiftEmptyArrayStorage;
  sub_20F44(0, v1, 0);
  result = (_QWORD *)sub_15BAE0(a1);
  v5 = (uint64_t)result;
  v6 = 0;
  v7 = a1 + 64;
  v23 = a1 + 80;
  v24 = v1;
  v8 = a1;
  v25 = v4;
  v26 = a1 + 64;
  while ((v5 & 0x8000000000000000) == 0 && v5 < 1 << *(_BYTE *)(v8 + 32))
  {
    v11 = (unint64_t)v5 >> 6;
    if ((*(_QWORD *)(v7 + 8 * ((unint64_t)v5 >> 6)) & (1 << v5)) == 0)
      goto LABEL_23;
    if (*(_DWORD *)(v8 + 36) != v4)
      goto LABEL_24;
    v12 = (uint64_t *)(*(_QWORD *)(v8 + 48) + 16 * v5);
    v13 = *v12;
    v14 = v12[1];
    result = (_QWORD *)swift_bridgeObjectRetain(v14);
    v16 = _swiftEmptyArrayStorage[2];
    v15 = _swiftEmptyArrayStorage[3];
    if (v16 >= v15 >> 1)
      result = (_QWORD *)sub_20F44(v15 > 1, v16 + 1, 1);
    _swiftEmptyArrayStorage[2] = v16 + 1;
    v17 = &_swiftEmptyArrayStorage[2 * v16];
    v17[4] = v13;
    v17[5] = v14;
    v9 = 1 << *(_BYTE *)(v8 + 32);
    if (v5 >= v9)
      goto LABEL_25;
    v7 = v26;
    v18 = *(_QWORD *)(v26 + 8 * v11);
    if ((v18 & (1 << v5)) == 0)
      goto LABEL_26;
    v4 = v25;
    if (*(_DWORD *)(v8 + 36) != v25)
      goto LABEL_27;
    v19 = v18 & (-2 << (v5 & 0x3F));
    if (v19)
    {
      v9 = __clz(__rbit64(v19)) | v5 & 0xFFFFFFFFFFFFFFC0;
      v10 = v24;
    }
    else
    {
      v20 = v11 + 1;
      v21 = (unint64_t)(v9 + 63) >> 6;
      v10 = v24;
      if (v11 + 1 < v21)
      {
        v22 = *(_QWORD *)(v26 + 8 * v20);
        if (v22)
        {
LABEL_20:
          v9 = __clz(__rbit64(v22)) + (v20 << 6);
        }
        else
        {
          while (v21 - 2 != v11)
          {
            v22 = *(_QWORD *)(v23 + 8 * v11++);
            if (v22)
            {
              v20 = v11 + 1;
              goto LABEL_20;
            }
          }
        }
      }
    }
    ++v6;
    v5 = v9;
    if (v6 == v10)
      return _swiftEmptyArrayStorage;
  }
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_1590BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  int v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  char v14;
  char v15;
  char v16;
  char v17;
  char v18;
  uint64_t v19;
  char v20;
  char v21;
  uint64_t v22;
  _QWORD v23[2];
  char v24;
  uint64_t v25;
  char v26;
  char v27;
  uint64_t v28;
  char v29;
  char v30;
  char v31;
  char v32;
  char v33;
  uint64_t v34;
  char v35;
  char v36;

  result = sub_15BAE0(a1);
  if ((v6 & 1) != 0)
    goto LABEL_8;
  if (*(_DWORD *)(a1 + 36) != v5)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    return result;
  }
  if (result == 1 << *(_BYTE *)(a1 + 32))
  {
    *(_WORD *)(a2 + 80) = 0;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)(a2 + 64) = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)a2 = 0u;
  }
  else
  {
    result = sub_15BB68((uint64_t)v23, result, v5, 0, a1);
    v7 = v23[0];
    v8 = v23[1];
    v9 = v24;
    v10 = v25;
    v11 = v26;
    v12 = v27;
    v13 = v28;
    v14 = v29;
    v15 = v30;
    v16 = v31;
    v17 = v32;
    v18 = v33;
    v19 = v34;
    v20 = v35;
    v21 = v36;
    *(_QWORD *)a2 = result;
    *(_QWORD *)(a2 + 8) = v22;
    *(_QWORD *)(a2 + 16) = v7;
    *(_QWORD *)(a2 + 24) = v8;
    *(_BYTE *)(a2 + 32) = v9;
    *(_QWORD *)(a2 + 40) = v10;
    *(_BYTE *)(a2 + 48) = v11;
    *(_BYTE *)(a2 + 49) = v12;
    *(_QWORD *)(a2 + 56) = v13;
    *(_BYTE *)(a2 + 64) = v14;
    *(_BYTE *)(a2 + 65) = v15;
    *(_BYTE *)(a2 + 66) = v16;
    *(_BYTE *)(a2 + 67) = v17;
    *(_BYTE *)(a2 + 68) = v18;
    *(_QWORD *)(a2 + 72) = v19;
    *(_BYTE *)(a2 + 80) = v20;
    *(_BYTE *)(a2 + 81) = v21;
  }
  return result;
}

double EnvironmentValues.libraryAssetState.getter@<D0>(uint64_t a1@<X8>)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int16 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int16 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int16 v25;

  v2 = sub_159954();
  EnvironmentValues.subscript.getter(&v15, &type metadata for LibraryAssetStatesKey, &type metadata for LibraryAssetStatesKey, v2);
  v3 = *(_QWORD *)(v15 + 16);
  swift_bridgeObjectRelease(v15);
  if (v3 == 1
    && (EnvironmentValues.subscript.getter(&v15, &type metadata for LibraryAssetStatesKey, &type metadata for LibraryAssetStatesKey, v2), v4 = v15, sub_1590BC(v15, (uint64_t)&v15), swift_bridgeObjectRelease(v4), v16))
  {
    v5 = v25;
    v7 = v23;
    v6 = v24;
    v9 = v21;
    v8 = v22;
    v10 = v20;
    v11 = v19;
    v13 = v17;
    v12 = v18;
    swift_bridgeObjectRelease(v16);
    *(_QWORD *)a1 = v13;
    *(_QWORD *)(a1 + 8) = v12;
    *(_QWORD *)(a1 + 16) = v11;
    *(_QWORD *)(a1 + 24) = v10;
    *(_QWORD *)(a1 + 32) = v9 & 0xFF01;
    *(_QWORD *)(a1 + 40) = v8;
    *(_QWORD *)(a1 + 48) = v7 & 0x101010101;
    *(_QWORD *)(a1 + 56) = v6;
    *(_WORD *)(a1 + 64) = v5 & 0x101;
  }
  else
  {
    *(_WORD *)(a1 + 64) = 0;
    result = 0.0;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

uint64_t View.observeLibraryAssetState(for:libraryAssetStateObserverProvider:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t inited;
  uint64_t v19;
  unint64_t v20;
  void (*v21)(char *, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t WitnessTable;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  _BYTE v30[48];

  v23 = a3;
  v25 = a6;
  v10 = type metadata accessor for ModifiedContent(255, a4, &type metadata for ObserveLibraryAssetStateViewModifier);
  v11 = type metadata accessor for _ConditionalContent(0, v10, a4);
  v24 = *(_QWORD *)(v11 - 8);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v16 = (char *)&v23 - v15;
  v17 = sub_5440(&qword_25ED50);
  inited = swift_initStackObject(v17, v30);
  *(_OWORD *)(inited + 16) = xmmword_1E0B70;
  *(_QWORD *)(inited + 32) = a1;
  *(_QWORD *)(inited + 40) = a2;
  swift_bridgeObjectRetain(a2);
  v19 = sub_EE94C(inited);
  swift_setDeallocating(inited);
  swift_arrayDestroy(inited + 32, 1, &type metadata for String);
  View.observeLibraryAssetStates(for:libraryAssetStateObserverProvider:)(v19, v23, a4, a5, (uint64_t)v14);
  swift_bridgeObjectRelease(v19);
  v20 = sub_ECBEC();
  v28 = a5;
  v29 = v20;
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v10);
  v27 = a5;
  swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v11);
  sub_10F80((uint64_t)v14, v11, (uint64_t)v16);
  v21 = *(void (**)(char *, uint64_t))(v24 + 8);
  v21(v14, v11);
  sub_C5C0((uint64_t)v16, v11, v25);
  return ((uint64_t (*)(char *, uint64_t))v21)(v16, v11);
}

uint64_t LibraryAssetStateRequiring.assetIDsToObserveState.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t inited;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v4 = sub_5440(&qword_25ED50);
  inited = swift_initStackObject(v4, &v9);
  *(_OWORD *)(inited + 16) = xmmword_1E0B70;
  *(_QWORD *)(inited + 32) = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
  *(_QWORD *)(inited + 40) = v6;
  v7 = sub_EE94C(inited);
  swift_setDeallocating(inited);
  swift_arrayDestroy(inited + 32, 1, &type metadata for String);
  return v7;
}

uint64_t sub_15953C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  _QWORD v13[3];
  uint64_t v14;
  __int128 v15;

  v14 = 0;
  v6 = sub_5440(&qword_2686A0);
  State.init(wrappedValue:)(&v15, &v14, v6);
  *(_OWORD *)(a3 + 24) = v15;
  *(_QWORD *)(a3 + 40) = swift_getKeyPath(&unk_1F17E0);
  *(_BYTE *)(a3 + 80) = 0;
  *(_QWORD *)a3 = a1;
  v13[2] = a2;
  swift_bridgeObjectRetain(a1);
  v7 = sub_158A4C((void (*)(uint64_t *__return_ptr, _QWORD *))sub_15C49C, v13, a1);
  swift_bridgeObjectRelease(a1);
  v8 = *(_QWORD *)(v7 + 16);
  if (v8)
  {
    sub_5440(&qword_25DFB8);
    v9 = (void *)static _DictionaryStorage.allocate(capacity:)(v8);
  }
  else
  {
    v9 = &_swiftEmptyDictionarySingleton;
  }
  *(_QWORD *)&v15 = v9;
  v10 = swift_bridgeObjectRetain(v7);
  sub_15AD34(v10, 1, &v15);
  swift_bridgeObjectRelease(v7);
  v11 = v15;
  result = _s7BooksUI13AnyPagedFrameVwxx_0(a2);
  *(_QWORD *)(a3 + 8) = v11;
  *(_QWORD *)(a3 + 16) = 0;
  return result;
}

uint64_t sub_159670@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t, uint64_t);

  v3 = *a1;
  v4 = a1[1];
  *a3 = *a1;
  a3[1] = v4;
  v5 = a2[3];
  v6 = a2[4];
  sub_5480(a2, v5);
  v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 16);
  swift_bridgeObjectRetain(v4);
  return v7(v3, v4, v5, v6);
}

uint64_t sub_1596F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t KeyPath;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t (**v22)();
  uint64_t v25[2];
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  char v32;

  v3 = (uint64_t *)v2;
  v6 = sub_5440(&qword_268670);
  __chkstk_darwin(v6);
  v8 = (char *)&v25[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_5440(&qword_268678);
  __chkstk_darwin(v9);
  v11 = (char *)&v25[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  KeyPath = swift_getKeyPath(&unk_1F17B8);
  v27 = *(_OWORD *)(v2 + 24);
  v13 = sub_5440(&qword_268680);
  State.wrappedValue.getter(v25, v13);
  v14 = v25[0];
  if (!v25[0])
  {
    sub_15C388((uint64_t *)v2, (uint64_t)&v27);
    goto LABEL_5;
  }
  v15 = sub_15AA80(v25[0]);
  swift_bridgeObjectRelease(v14);
  sub_15C388(v3, (uint64_t)&v27);
  if (!v15)
  {
LABEL_5:
    v25[0] = *((_QWORD *)&v27 + 1);
    v25[1] = v28;
    v16 = sub_5440(&qword_268688);
    State.wrappedValue.getter(&v26, v16);
    sub_15BDF0((uint64_t)&v27);
    v15 = v26;
    goto LABEL_6;
  }
  sub_15BDF0((uint64_t)&v27);
LABEL_6:
  v17 = sub_5440(&qword_268690);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v8, a1, v17);
  v18 = (uint64_t *)&v8[*(int *)(v6 + 36)];
  *v18 = KeyPath;
  v18[1] = v15;
  sub_15C388(v3, (uint64_t)&v27);
  v19 = swift_allocObject(&unk_255F10, 97, 7);
  v20 = v30;
  *(_OWORD *)(v19 + 48) = v29;
  *(_OWORD *)(v19 + 64) = v20;
  *(_OWORD *)(v19 + 80) = v31;
  *(_BYTE *)(v19 + 96) = v32;
  v21 = v28;
  *(_OWORD *)(v19 + 16) = v27;
  *(_OWORD *)(v19 + 32) = v21;
  sub_B3D0((uint64_t)v8, (uint64_t)v11, &qword_268670);
  v22 = (uint64_t (**)())&v11[*(int *)(v9 + 36)];
  *v22 = sub_15C41C;
  v22[1] = (uint64_t (*)())v19;
  v22[2] = 0;
  v22[3] = 0;
  sub_B414((uint64_t)v8, &qword_268670);
  return sub_15C424((uint64_t)v11, a2);
}

uint64_t EnvironmentValues.libraryAssetStates.getter()
{
  unint64_t v0;
  uint64_t v2;

  v0 = sub_159954();
  EnvironmentValues.subscript.getter(&v2, &type metadata for LibraryAssetStatesKey, &type metadata for LibraryAssetStatesKey, v0);
  return v2;
}

unint64_t sub_159954()
{
  unint64_t result;

  result = qword_268648;
  if (!qword_268648)
  {
    result = swift_getWitnessTable(&unk_1F1780, &type metadata for LibraryAssetStatesKey);
    atomic_store(result, (unint64_t *)&qword_268648);
  }
  return result;
}

_QWORD *sub_159998@<X0>(_QWORD *a1@<X8>)
{
  unint64_t v2;
  _QWORD *result;
  uint64_t v4;

  v2 = sub_159954();
  result = EnvironmentValues.subscript.getter(&v4, &type metadata for LibraryAssetStatesKey, &type metadata for LibraryAssetStatesKey, v2);
  *a1 = v4;
  return result;
}

uint64_t sub_1599E4(uint64_t *a1)
{
  unint64_t v1;
  uint64_t v3;

  v3 = *a1;
  v1 = sub_159954();
  swift_bridgeObjectRetain(v3);
  return EnvironmentValues.subscript.setter(&v3, &type metadata for LibraryAssetStatesKey, &type metadata for LibraryAssetStatesKey, v1);
}

uint64_t EnvironmentValues.libraryAssetStates.setter(uint64_t a1)
{
  unint64_t v1;
  uint64_t v3;

  v3 = a1;
  v1 = sub_159954();
  return EnvironmentValues.subscript.setter(&v3, &type metadata for LibraryAssetStatesKey, &type metadata for LibraryAssetStatesKey, v1);
}

uint64_t sub_159A78(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[4];
  __int128 v12;
  uint64_t v13;

  v12 = *(_OWORD *)(a1 + 24);
  v2 = sub_5440(&qword_268680);
  State.wrappedValue.getter(&v13, v2);
  v3 = v13;
  result = swift_bridgeObjectRelease(v13);
  if (!v3)
  {
    v5 = *(_QWORD *)a1;
    __chkstk_darwin(result);
    v11[2] = a1;
    swift_bridgeObjectRetain(v5);
    v6 = sub_158CD4((void (*)(_OWORD *__return_ptr, _QWORD *))sub_15C46C, (uint64_t)v11, v5);
    swift_bridgeObjectRelease(v5);
    v7 = *(_QWORD *)(v6 + 16);
    if (v7)
    {
      sub_5440(&qword_268698);
      v8 = (void *)static _DictionaryStorage.allocate(capacity:)(v7);
    }
    else
    {
      v8 = &_swiftEmptyDictionarySingleton;
    }
    *(_QWORD *)&v12 = v8;
    v9 = swift_bridgeObjectRetain(v6);
    sub_15B0E4(v9, 1, &v12);
    swift_bridgeObjectRelease(v6);
    v10 = v12;
    v12 = *(_OWORD *)(a1 + 24);
    v13 = v10;
    return State.wrappedValue.setter(&v13, v2);
  }
  return result;
}

uint64_t sub_159BD0@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  char v19;
  uint64_t result;
  char v21;
  char v22;
  uint64_t v23;
  char v24;
  char v25;
  char v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  char v35;
  char v36;
  uint64_t v37;
  char v38;
  char v39;
  char v40;
  char v41;
  char v42;
  uint64_t v43;
  char v44;
  char v45;
  uint64_t v46;
  _QWORD v47[3];
  uint64_t v48;
  uint64_t v49;

  v4 = *a1;
  v5 = a1[1];
  *a3 = *a1;
  a3[1] = v5;
  swift_bridgeObjectRetain(v5);
  sub_322BC((uint64_t)v47);
  v29 = v49;
  v30 = v48;
  sub_5480(v47, v48);
  v6 = *(_QWORD *)(a2 + 16);
  v31 = *(_QWORD *)(a2 + 8);
  v32 = v6;
  swift_bridgeObjectRetain(v5);
  v7 = sub_5440(&qword_268688);
  State.wrappedValue.getter(&v46, v7);
  v8 = v46;
  if (*(_QWORD *)(v46 + 16) && (v9 = sub_9F7C(v4, v5), (v10 & 1) != 0))
  {
    v28 = v4;
    v11 = *(_QWORD *)(v8 + 56) + 72 * v9;
    v12 = *(_QWORD *)v11;
    v13 = *(_QWORD *)(v11 + 8);
    v14 = *(_BYTE *)(v11 + 16);
    v15 = *(_QWORD *)(v11 + 24);
    v16 = *(_BYTE *)(v11 + 32);
    v17 = *(_BYTE *)(v11 + 33);
    v18 = *(_QWORD *)(v11 + 40);
    v19 = *(_BYTE *)(v11 + 48);
    v26 = *(_BYTE *)(v11 + 50);
    v27 = *(_BYTE *)(v11 + 49);
    v24 = *(_BYTE *)(v11 + 52);
    v25 = *(_BYTE *)(v11 + 51);
    v23 = *(_QWORD *)(v11 + 56);
    v21 = *(_BYTE *)(v11 + 65);
    v22 = *(_BYTE *)(v11 + 64);
    swift_bridgeObjectRetain(v13);
    swift_bridgeObjectRelease(v5);
    swift_bridgeObjectRelease(v8);
    v31 = v12;
    v32 = v13;
    v33 = v14;
    v34 = v15;
    v35 = v16;
    v36 = v17;
    v37 = v18;
    v38 = v19;
    v39 = v27;
    v40 = v26;
    v41 = v25;
    v42 = v24;
    v43 = v23;
    v44 = v22;
    v45 = v21;
    (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t))(v29 + 8))(v28, v5, &v31, v30);
    swift_bridgeObjectRelease(v13);
    return _s7BooksUI13AnyPagedFrameVwxx_0(v47);
  }
  else
  {
    swift_bridgeObjectRelease(v5);
    result = swift_bridgeObjectRelease(v8);
    __break(1u);
  }
  return result;
}

uint64_t View.observeLibraryAssetStates(for:libraryAssetStateObserverProvider:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  id v21;
  id v22;
  NSString v23;
  uint64_t v24;
  char *v25;
  void *v26;
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t);
  uint64_t v35;
  unint64_t v36;
  uint64_t WitnessTable;
  void (*v38)(uint64_t, uint64_t);
  unint64_t v39;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  _QWORD v58[5];
  _BYTE v59[80];

  v44 = a2;
  v45 = a1;
  v49 = a5;
  v8 = *(_QWORD *)(a3 - 8);
  v9 = __chkstk_darwin(a1);
  v11 = (char *)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v43 = (uint64_t)&v41 - v12;
  v13 = type metadata accessor for ModifiedContent(0, a3, &type metadata for ObserveLibraryAssetStateViewModifier);
  v46 = *(_QWORD *)(v13 - 8);
  v14 = __chkstk_darwin(v13);
  v16 = (char *)&v41 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v47 = (uint64_t)&v41 - v17;
  v18 = type metadata accessor for _ConditionalContent(0, v13, a3);
  v48 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v20 = (char *)&v41 - v19;
  if (qword_25DC10 != -1)
    swift_once(&qword_25DC10, sub_AD7D8);
  if (byte_2632E8 != 1)
    goto LABEL_5;
  v21 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v41 = v8;
  v22 = v21;
  v23 = String._bridgeToObjectiveC()();
  v42 = v20;
  v24 = a4;
  v25 = v11;
  v26 = v23;
  v27 = objc_msgSend(v22, "integerForKey:", v23);

  v28 = v41;
  v29 = (uint64_t)v25;
  a4 = v24;
  v20 = v42;
  if ((v27 & 0x20) != 0)
  {
    v35 = v43;
    sub_10F80(v5, a3, v43);
    sub_C5C0(v35, a3, v29);
    v36 = sub_ECBEC();
    v50 = a4;
    v51 = v36;
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v13);
    sub_17D40(v29, v13, a3, WitnessTable, a4);
    v38 = *(void (**)(uint64_t, uint64_t))(v28 + 8);
    v38(v29, a3);
    v38(v35, a3);
  }
  else
  {
LABEL_5:
    sub_BD00(v44, (uint64_t)v58);
    v30 = swift_bridgeObjectRetain(v45);
    sub_15953C(v30, v58, (uint64_t)v59);
    View.modifier<A>(_:)(v59, a3, &type metadata for ObserveLibraryAssetStateViewModifier, a4);
    sub_15BDF0((uint64_t)v59);
    v31 = sub_ECBEC();
    v56 = a4;
    v57 = v31;
    v32 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v13);
    v33 = v47;
    sub_10F80((uint64_t)v16, v13, v47);
    v34 = *(void (**)(char *, uint64_t))(v46 + 8);
    v34(v16, v13);
    sub_C5C0(v33, v13, (uint64_t)v16);
    sub_17C7C((uint64_t)v16, v13, a3, v32, a4);
    v34(v16, v13);
    v34((char *)v33, v13);
  }
  v39 = sub_ECBEC();
  v54 = a4;
  v55 = v39;
  v52 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v13);
  v53 = a4;
  swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v18);
  sub_C5C0((uint64_t)v20, v18, v49);
  return (*(uint64_t (**)(char *, uint64_t))(v48 + 8))(v20, v18);
}

{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  NSString v23;
  void *v24;
  unsigned __int8 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t);
  uint64_t v33;
  unint64_t v34;
  uint64_t WitnessTable;
  void (*v36)(char *, uint64_t);
  unint64_t v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  unint64_t v51;
  _QWORD v52[5];
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;

  v44 = a2;
  v10 = *(_QWORD *)(a3 - 8);
  v11 = __chkstk_darwin(a1);
  v13 = (char *)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v40 - v14;
  v16 = type metadata accessor for ModifiedContent(0, a3, &type metadata for ObserveLibraryAssetStateViewModifier);
  v45 = *(_QWORD *)(v16 - 8);
  v17 = __chkstk_darwin(v16);
  v19 = (char *)&v40 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v46 = (uint64_t)&v40 - v20;
  v48 = type metadata accessor for _ConditionalContent(0, v16, a3);
  v47 = *(_QWORD *)(v48 - 8);
  __chkstk_darwin(v48);
  v49 = (char *)&v40 - v21;
  sub_B3D0(a1, (uint64_t)&v53, &qword_268650);
  if (!v54)
  {
    sub_B414((uint64_t)&v53, &qword_268650);
    v33 = (uint64_t)v49;
LABEL_9:
    sub_10F80(v5, a3, (uint64_t)v15);
    sub_C5C0((uint64_t)v15, a3, (uint64_t)v13);
    v34 = sub_ECBEC();
    v59 = a4;
    v60 = v34;
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v16);
    sub_17D40((uint64_t)v13, v16, a3, WitnessTable, a4);
    v36 = *(void (**)(char *, uint64_t))(v10 + 8);
    v36(v13, a3);
    v36(v15, a3);
    goto LABEL_10;
  }
  v42 = v10;
  v43 = v5;
  sub_AC68(&v53, (uint64_t)&v61);
  if (qword_25DC10 != -1)
    swift_once(&qword_25DC10, sub_AD7D8);
  if (byte_2632E8 == 1)
  {
    v22 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
    v23 = String._bridgeToObjectiveC()();
    v41 = a5;
    v24 = v23;
    v25 = objc_msgSend(v22, "integerForKey:", v23);

    a5 = v41;
    if ((v25 & 0x20) != 0)
    {
      _s7BooksUI13AnyPagedFrameVwxx_0(&v61);
      v5 = v43;
      v33 = (uint64_t)v49;
      v10 = v42;
      goto LABEL_9;
    }
  }
  v26 = v62;
  v27 = v63;
  sub_5480(&v61, v62);
  v28 = (*(uint64_t (**)(uint64_t, uint64_t))(v27 + 8))(v26, v27);
  sub_BD00(v44, (uint64_t)v52);
  sub_15953C(v28, v52, (uint64_t)&v53);
  View.modifier<A>(_:)(&v53, a3, &type metadata for ObserveLibraryAssetStateViewModifier, a4);
  sub_15BDF0((uint64_t)&v53);
  v29 = sub_ECBEC();
  v50 = a4;
  v51 = v29;
  v30 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v16);
  v31 = v46;
  sub_10F80((uint64_t)v19, v16, v46);
  v32 = *(void (**)(char *, uint64_t))(v45 + 8);
  v32(v19, v16);
  sub_C5C0(v31, v16, (uint64_t)v19);
  v33 = (uint64_t)v49;
  sub_17C7C((uint64_t)v19, v16, a3, v30, a4);
  v32(v19, v16);
  v32((char *)v31, v16);
  _s7BooksUI13AnyPagedFrameVwxx_0(&v61);
LABEL_10:
  v37 = sub_ECBEC();
  v57 = a4;
  v58 = v37;
  v55 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v16);
  v56 = a4;
  v38 = v48;
  swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v48);
  sub_C5C0(v33, v38, a5);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v47 + 8))(v33, v38);
}

unint64_t sub_15A65C@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result;

  result = sub_99D4((uint64_t)_swiftEmptyArrayStorage);
  *a1 = result;
  return result;
}

uint64_t sub_15A688(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8;

  v8 = sub_15C2E0();
  return static EnvironmentKey<>._valuesEqual(_:_:)(a1, a2, a3, a4, v8);
}

uint64_t (*EnvironmentValues.libraryAssetStates.modify(_QWORD *a1))(_QWORD *a1, char a2)
{
  uint64_t v1;
  unint64_t v3;

  a1[2] = v1;
  v3 = sub_159954();
  a1[3] = v3;
  EnvironmentValues.subscript.getter(a1, &type metadata for LibraryAssetStatesKey, &type metadata for LibraryAssetStatesKey, v3);
  return sub_15A724;
}

uint64_t sub_15A724(_QWORD *a1, char a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a1;
  a1[1] = v3;
  v4 = a1[3];
  if ((a2 & 1) == 0)
    return EnvironmentValues.subscript.setter(a1 + 1, &type metadata for LibraryAssetStatesKey, &type metadata for LibraryAssetStatesKey, a1[3]);
  swift_bridgeObjectRetain(v3);
  EnvironmentValues.subscript.setter(a1 + 1, &type metadata for LibraryAssetStatesKey, &type metadata for LibraryAssetStatesKey, v4);
  return swift_bridgeObjectRelease(*a1);
}

uint64_t EnvironmentValues.ownedAssetIDs.getter()
{
  unint64_t v0;
  uint64_t v1;
  unint64_t *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v6;

  v0 = sub_159954();
  EnvironmentValues.subscript.getter(&v6, &type metadata for LibraryAssetStatesKey, &type metadata for LibraryAssetStatesKey, v0);
  v1 = v6;
  v2 = sub_15B4BC(v6);
  swift_bridgeObjectRelease(v1);
  v3 = sub_158EB0((uint64_t)v2);
  swift_release(v2);
  v4 = sub_EE94C((uint64_t)v3);
  swift_bridgeObjectRelease(v3);
  return v4;
}

double sub_15A834()
{
  double result;

  qword_268640 = 0;
  result = 0.0;
  xmmword_268620 = 0u;
  *(_OWORD *)algn_268630 = 0u;
  return result;
}

uint64_t sub_15A84C@<X0>(uint64_t a1@<X8>)
{
  if (qword_25DCC8 != -1)
    swift_once(&qword_25DCC8, sub_15A834);
  return sub_B3D0((uint64_t)&xmmword_268620, a1, &qword_25FB00);
}

_QWORD *EnvironmentValues.libraryAssetStateObserverProvider.getter@<X0>(_QWORD *a1@<X8>)
{
  unint64_t v2;

  v2 = sub_F0FA8();
  return EnvironmentValues.subscript.getter(a1, &type metadata for LibraryAssetStateObserverProviderKey, &type metadata for LibraryAssetStateObserverProviderKey, v2);
}

uint64_t EnvironmentValues.libraryAssetStateObserverProvider.setter(uint64_t a1)
{
  unint64_t v2;
  _BYTE v4[40];

  sub_B3D0(a1, (uint64_t)v4, &qword_25FB00);
  v2 = sub_F0FA8();
  EnvironmentValues.subscript.setter(v4, &type metadata for LibraryAssetStateObserverProviderKey, &type metadata for LibraryAssetStateObserverProviderKey, v2);
  return sub_B414(a1, &qword_25FB00);
}

void (*EnvironmentValues.libraryAssetStateObserverProvider.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  unint64_t v4;

  v3 = malloc(0x88uLL);
  *a1 = v3;
  v3[15] = v1;
  v4 = sub_F0FA8();
  v3[16] = v4;
  EnvironmentValues.subscript.getter(v3, &type metadata for LibraryAssetStateObserverProviderKey, &type metadata for LibraryAssetStateObserverProviderKey, v4);
  return sub_15A9A8;
}

void sub_15A9A8(uint64_t *a1, char a2)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = (char *)*a1;
  v3 = *a1 + 40;
  v4 = *(_QWORD *)(*a1 + 128);
  if ((a2 & 1) != 0)
  {
    sub_B3D0(*a1, v3, &qword_25FB00);
    sub_B3D0(v3, (uint64_t)(v2 + 80), &qword_25FB00);
    EnvironmentValues.subscript.setter(v2 + 80, &type metadata for LibraryAssetStateObserverProviderKey, &type metadata for LibraryAssetStateObserverProviderKey, v4);
    sub_B414(v3, &qword_25FB00);
  }
  else
  {
    sub_B3D0(*a1, v3, &qword_25FB00);
    EnvironmentValues.subscript.setter(v3, &type metadata for LibraryAssetStateObserverProviderKey, &type metadata for LibraryAssetStateObserverProviderKey, v4);
  }
  sub_B414((uint64_t)v2, &qword_25FB00);
  free(v2);
}

uint64_t sub_15AA80(uint64_t a1)
{
  uint64_t result;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t i;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(_QWORD *__return_ptr, uint64_t, uint64_t);
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  char v28;
  char v29;
  uint64_t v30;
  char v31;
  char v32;
  char v33;
  uint64_t v34;
  char v35;
  char v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  int64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD v44[2];
  char v45;
  uint64_t v46;
  char v47;
  char v48;
  uint64_t v49;
  char v50;
  char v51;
  char v52;
  char v53;
  unsigned __int8 v54;
  uint64_t v55;
  char v56;
  char v57;
  _QWORD v58[3];
  uint64_t v59;
  uint64_t v60;
  int64_t v61;

  sub_5440(&qword_25DFB8);
  result = static _DictionaryStorage.copy(original:)(a1);
  v3 = (_QWORD *)result;
  v4 = 0;
  v43 = a1;
  v7 = *(_QWORD *)(a1 + 64);
  v6 = a1 + 64;
  v5 = v7;
  v8 = 1 << *(_BYTE *)(v6 - 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & v5;
  v40 = v6;
  v41 = (unint64_t)(v8 + 63) >> 6;
  v42 = result + 64;
  if ((v9 & v5) == 0)
    goto LABEL_5;
LABEL_4:
  v11 = __clz(__rbit64(v10));
  v10 &= v10 - 1;
  v61 = v4;
  for (i = v11 | (v4 << 6); ; i = __clz(__rbit64(v14)) + (v15 << 6))
  {
    v17 = (uint64_t *)(*(_QWORD *)(v43 + 48) + 16 * i);
    v18 = *v17;
    v19 = v17[1];
    sub_BD00(*(_QWORD *)(v43 + 56) + 40 * i, (uint64_t)v58);
    v20 = v59;
    v21 = v60;
    sub_5480(v58, v59);
    v22 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v21 + 16);
    swift_bridgeObjectRetain(v19);
    v22(v44, v20, v21);
    _s7BooksUI13AnyPagedFrameVwxx_0(v58);
    *(_QWORD *)(v42 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    v23 = (_QWORD *)(v3[6] + 16 * i);
    *v23 = v18;
    v23[1] = v19;
    v24 = v3[7] + 72 * i;
    v25 = v44[1];
    v26 = v45;
    v27 = v46;
    v28 = v47;
    v29 = v48;
    v30 = v49;
    v31 = v50;
    v32 = v51;
    v33 = v52;
    LOBYTE(v22) = v53;
    result = v54;
    v34 = v55;
    v35 = v56;
    v36 = v57;
    *(_QWORD *)v24 = v44[0];
    *(_QWORD *)(v24 + 8) = v25;
    *(_BYTE *)(v24 + 16) = v26;
    *(_QWORD *)(v24 + 24) = v27;
    *(_BYTE *)(v24 + 32) = v28;
    *(_BYTE *)(v24 + 33) = v29;
    *(_QWORD *)(v24 + 40) = v30;
    *(_BYTE *)(v24 + 48) = v31;
    *(_BYTE *)(v24 + 49) = v32;
    *(_BYTE *)(v24 + 50) = v33;
    *(_BYTE *)(v24 + 51) = (_BYTE)v22;
    *(_BYTE *)(v24 + 52) = result;
    *(_QWORD *)(v24 + 56) = v34;
    *(_BYTE *)(v24 + 64) = v35;
    *(_BYTE *)(v24 + 65) = v36;
    v37 = v3[2];
    v38 = __OFADD__(v37, 1);
    v39 = v37 + 1;
    if (v38)
    {
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v3[2] = v39;
    v4 = v61;
    if (v10)
      goto LABEL_4;
LABEL_5:
    v13 = v4 + 1;
    if (__OFADD__(v4, 1))
      goto LABEL_24;
    if (v13 >= v41)
      return (uint64_t)v3;
    v14 = *(_QWORD *)(v40 + 8 * v13);
    v15 = v4 + 1;
    if (!v14)
    {
      v15 = v4 + 2;
      if (v4 + 2 >= v41)
        return (uint64_t)v3;
      v14 = *(_QWORD *)(v40 + 8 * v15);
      if (!v14)
      {
        v15 = v4 + 3;
        if (v4 + 3 >= v41)
          return (uint64_t)v3;
        v14 = *(_QWORD *)(v40 + 8 * v15);
        if (!v14)
          break;
      }
    }
LABEL_18:
    v10 = (v14 - 1) & v14;
    v61 = v15;
  }
  v16 = v4 + 4;
  if (v4 + 4 >= v41)
    return (uint64_t)v3;
  v14 = *(_QWORD *)(v40 + 8 * v16);
  if (v14)
  {
    v15 = v4 + 4;
    goto LABEL_18;
  }
  while (1)
  {
    v15 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v15 >= v41)
      return (uint64_t)v3;
    v14 = *(_QWORD *)(v40 + 8 * v15);
    ++v16;
    if (v14)
      goto LABEL_18;
  }
LABEL_25:
  __break(1u);
  return result;
}

void sub_15AD34(uint64_t a1, char a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  _QWORD *v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  _BOOL8 v18;
  uint64_t v19;
  char v20;
  unint64_t v21;
  char v22;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  Swift::String v31;
  Swift::String v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  char v39;
  uint64_t v40;
  char v41;
  char v42;
  char v43;
  char v44;
  char v45;
  uint64_t v46;
  char v47;
  uint64_t v50;
  unint64_t v51;
  _QWORD v52[3];
  uint64_t v53;

  v3 = a1;
  v4 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain(a1);
  v34 = v4;
  if (!v4)
  {
LABEL_18:
    swift_bridgeObjectRelease_n(v3, 2);
    return;
  }
  v5 = 0;
  v6 = 0;
  v33 = v3;
  while (1)
  {
    if (v6 >= *(_QWORD *)(v3 + 16))
    {
      __break(1u);
LABEL_21:
      __break(1u);
LABEL_22:
      __break(1u);
LABEL_23:
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
      __break(1u);
      goto LABEL_24;
    }
    v8 = *(_QWORD *)(v3 + v5 + 32);
    v7 = *(_QWORD *)(v3 + v5 + 40);
    v10 = *(_QWORD *)(v3 + v5 + 48);
    v9 = *(_QWORD *)(v3 + v5 + 56);
    v11 = *(_BYTE *)(v3 + v5 + 64);
    v12 = *(_QWORD *)(v3 + v5 + 72);
    v13 = *(_BYTE *)(v3 + v5 + 80);
    v47 = *(_BYTE *)(v3 + v5 + 81);
    v46 = *(_QWORD *)(v3 + v5 + 88);
    v44 = *(_BYTE *)(v3 + v5 + 97);
    v45 = *(_BYTE *)(v3 + v5 + 96);
    v42 = *(_BYTE *)(v3 + v5 + 99);
    v43 = *(_BYTE *)(v3 + v5 + 98);
    v41 = *(_BYTE *)(v3 + v5 + 100);
    v40 = *(_QWORD *)(v3 + v5 + 104);
    v38 = *(_BYTE *)(v3 + v5 + 113);
    v39 = *(_BYTE *)(v3 + v5 + 112);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v9);
    if (!v7)
      goto LABEL_18;
    v35 = v13;
    v36 = v12;
    v37 = v9;
    v52[0] = v8;
    v52[1] = v7;
    v14 = (_QWORD *)*a3;
    v16 = sub_9F7C(v8, v7);
    v17 = v14[2];
    v18 = (v15 & 1) == 0;
    v19 = v17 + v18;
    if (__OFADD__(v17, v18))
      goto LABEL_21;
    v20 = v15;
    if (v14[3] < v19)
      break;
    if ((a2 & 1) != 0)
    {
      if ((v15 & 1) != 0)
        goto LABEL_16;
    }
    else
    {
      sub_1AE624();
      if ((v20 & 1) != 0)
        goto LABEL_16;
    }
LABEL_12:
    v23 = (_QWORD *)*a3;
    *(_QWORD *)(*a3 + 8 * (v16 >> 6) + 64) |= 1 << v16;
    v24 = (uint64_t *)(v23[6] + 16 * v16);
    *v24 = v8;
    v24[1] = v7;
    v25 = v23[7] + 72 * v16;
    *(_QWORD *)v25 = v10;
    *(_QWORD *)(v25 + 8) = v37;
    *(_BYTE *)(v25 + 16) = v11;
    *(_QWORD *)(v25 + 24) = v36;
    *(_BYTE *)(v25 + 32) = v35;
    *(_BYTE *)(v25 + 33) = v47;
    *(_QWORD *)(v25 + 40) = v46;
    *(_BYTE *)(v25 + 48) = v45;
    *(_BYTE *)(v25 + 49) = v44;
    *(_BYTE *)(v25 + 50) = v43;
    *(_BYTE *)(v25 + 51) = v42;
    *(_BYTE *)(v25 + 52) = v41;
    *(_QWORD *)(v25 + 56) = v40;
    *(_BYTE *)(v25 + 64) = v39;
    *(_BYTE *)(v25 + 65) = v38;
    v26 = v23[2];
    v27 = __OFADD__(v26, 1);
    v28 = v26 + 1;
    if (v27)
      goto LABEL_22;
    ++v6;
    v23[2] = v28;
    v5 += 88;
    a2 = 1;
    v3 = v33;
    if (v34 == v6)
      goto LABEL_18;
  }
  sub_1ACE04(v19, a2 & 1);
  v21 = sub_9F7C(v8, v7);
  if ((v20 & 1) != (v22 & 1))
    goto LABEL_23;
  v16 = v21;
  if ((v20 & 1) == 0)
    goto LABEL_12;
LABEL_16:
  v29 = swift_allocError(&type metadata for _MergeError, &protocol witness table for _MergeError, 0, 0);
  swift_willThrow(v29);
  v53 = v29;
  swift_errorRetain(v29);
  v30 = sub_5440(&qword_265AE0);
  if ((swift_dynamicCast(v30, &v53, v30, &type metadata for _MergeError, 0) & 1) == 0)
  {
    swift_bridgeObjectRelease(v7);
    swift_bridgeObjectRelease(v37);
    swift_bridgeObjectRelease_n(v33, 2);
    swift_errorRelease(v53);
    return;
  }
LABEL_24:
  v50 = 0;
  v51 = 0xE000000000000000;
  _StringGuts.grow(_:)(30);
  v31._object = (void *)0x80000000001FDC20;
  v31._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v31);
  _print_unlocked<A, B>(_:_:)(v52, &v50, &type metadata for String, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v32._countAndFlagsBits = 39;
  v32._object = (void *)0xE100000000000000;
  String.append(_:)(v32);
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v50, v51, "Swift/NativeDictionary.swift", 28, 2, 783, 0);
  __break(1u);
}

void sub_15B0E4(uint64_t a1, char a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  _BOOL8 v13;
  uint64_t v14;
  char v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  char v32;
  uint64_t v33;
  _BOOL8 v34;
  uint64_t v35;
  char v36;
  char v37;
  _QWORD *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  Swift::String v42;
  Swift::String v43;
  uint64_t v44;
  unint64_t v45;
  __int128 v46[2];
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51[3];
  uint64_t v52;

  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
    swift_bridgeObjectRelease(a1);
    return;
  }
  swift_bridgeObjectRetain(a1);
  sub_B3D0(a1 + 32, (uint64_t)&v49, &qword_25ECD8);
  v7 = v49;
  v8 = v50;
  v47 = v49;
  v48 = v50;
  sub_AC68(v51, (uint64_t)v46);
  v9 = (_QWORD *)*a3;
  v11 = sub_9F7C(v7, v8);
  v12 = v9[2];
  v13 = (v10 & 1) == 0;
  v14 = v12 + v13;
  if (__OFADD__(v12, v13))
    goto LABEL_23;
  v15 = v10;
  if (v9[3] >= v14)
  {
    if ((a2 & 1) != 0)
    {
      if ((v10 & 1) != 0)
        goto LABEL_10;
    }
    else
    {
      sub_1AE878();
      if ((v15 & 1) != 0)
        goto LABEL_10;
    }
LABEL_13:
    v21 = (_QWORD *)*a3;
    *(_QWORD *)(*a3 + 8 * (v11 >> 6) + 64) |= 1 << v11;
    v22 = (uint64_t *)(v21[6] + 16 * v11);
    *v22 = v7;
    v22[1] = v8;
    sub_AC68(v46, v21[7] + 40 * v11);
    v23 = v21[2];
    v24 = __OFADD__(v23, 1);
    v25 = v23 + 1;
    if (v24)
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v21[2] = v25;
    v26 = v4 - 1;
    if (!v26)
    {
LABEL_22:
      swift_bridgeObjectRelease_n(a1, 2);
      return;
    }
    v27 = a1 + 88;
    while (1)
    {
      sub_B3D0(v27, (uint64_t)&v49, &qword_25ECD8);
      v28 = v49;
      v29 = v50;
      v47 = v49;
      v48 = v50;
      sub_AC68(v51, (uint64_t)v46);
      v30 = (_QWORD *)*a3;
      v31 = sub_9F7C(v28, v29);
      v33 = v30[2];
      v34 = (v32 & 1) == 0;
      v24 = __OFADD__(v33, v34);
      v35 = v33 + v34;
      if (v24)
        break;
      v36 = v32;
      if (v30[3] < v35)
      {
        sub_1AD204(v35, 1);
        v31 = sub_9F7C(v28, v29);
        if ((v36 & 1) != (v37 & 1))
          goto LABEL_25;
      }
      if ((v36 & 1) != 0)
        goto LABEL_10;
      v38 = (_QWORD *)*a3;
      *(_QWORD *)(*a3 + 8 * (v31 >> 6) + 64) |= 1 << v31;
      v39 = (uint64_t *)(v38[6] + 16 * v31);
      *v39 = v28;
      v39[1] = v29;
      sub_AC68(v46, v38[7] + 40 * v31);
      v40 = v38[2];
      v24 = __OFADD__(v40, 1);
      v41 = v40 + 1;
      if (v24)
        goto LABEL_24;
      v38[2] = v41;
      v27 += 56;
      if (!--v26)
        goto LABEL_22;
    }
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  sub_1AD204(v14, a2 & 1);
  v16 = sub_9F7C(v7, v8);
  if ((v15 & 1) == (v17 & 1))
  {
    v11 = v16;
    if ((v15 & 1) == 0)
      goto LABEL_13;
LABEL_10:
    v18 = swift_allocError(&type metadata for _MergeError, &protocol witness table for _MergeError, 0, 0);
    swift_willThrow(v18);
    v52 = v18;
    swift_errorRetain(v18);
    v19 = sub_5440(&qword_265AE0);
    if ((swift_dynamicCast(v19, &v52, v19, &type metadata for _MergeError, 0) & 1) == 0)
    {
      swift_bridgeObjectRelease(a1);
      _s7BooksUI13AnyPagedFrameVwxx_0(v46);
      v20 = v48;
      swift_bridgeObjectRelease(a1);
      swift_bridgeObjectRelease(v20);
      swift_errorRelease(v52);
      return;
    }
    goto LABEL_26;
  }
LABEL_25:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
LABEL_26:
  v44 = 0;
  v45 = 0xE000000000000000;
  _StringGuts.grow(_:)(30);
  v42._object = (void *)0x80000000001FDC20;
  v42._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v42);
  _print_unlocked<A, B>(_:_:)(&v47, &v44, &type metadata for String, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v43._countAndFlagsBits = 39;
  v43._object = (void *)0xE100000000000000;
  String.append(_:)(v43);
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v44, v45, "Swift/NativeDictionary.swift", 28, 2, 783, 0);
  __break(1u);
}

unint64_t *sub_15B4BC(uint64_t isStackAllocationSafe)
{
  uint64_t v1;
  unint64_t *v2;
  char v3;
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  size_t v7;
  unint64_t *v8;
  void *v9;
  uint64_t v11;

  v2 = (unint64_t *)isStackAllocationSafe;
  v3 = *(_BYTE *)(isStackAllocationSafe + 32);
  v4 = v3 & 0x3F;
  v5 = (1 << v3) + 63;
  v6 = v5 >> 6;
  v7 = 8 * (v5 >> 6);
  if (v4 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v5 >> 6), 8), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v11 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0), v7);
    v8 = sub_15B60C((unint64_t *)((char *)&v11 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0)), v6, (uint64_t)v2);
    if (v1)
      swift_willThrow(v8);
    else
      return v8;
  }
  else
  {
    v9 = (void *)swift_slowAlloc(v7, -1);
    bzero(v9, v7);
    v2 = sub_15B60C((unint64_t *)v9, v6, (uint64_t)v2);
    swift_slowDealloc(v9, -1, -1);
  }
  return v2;
}

unint64_t *sub_15B60C(unint64_t *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;

  v4 = 0;
  v5 = 0;
  v6 = a3 + 64;
  v7 = 1 << *(_BYTE *)(a3 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & *(_QWORD *)(a3 + 64);
  v10 = (unint64_t)(v7 + 63) >> 6;
  while (1)
  {
    if (v9)
    {
      v11 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v12 = v11 | (v5 << 6);
      goto LABEL_5;
    }
    v13 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v13 >= v10)
      return (unint64_t *)sub_15B760(result, a2, v4, a3);
    v14 = *(_QWORD *)(v6 + 8 * v13);
    ++v5;
    if (!v14)
    {
      v5 = v13 + 1;
      if (v13 + 1 >= v10)
        return (unint64_t *)sub_15B760(result, a2, v4, a3);
      v14 = *(_QWORD *)(v6 + 8 * v5);
      if (!v14)
      {
        v5 = v13 + 2;
        if (v13 + 2 >= v10)
          return (unint64_t *)sub_15B760(result, a2, v4, a3);
        v14 = *(_QWORD *)(v6 + 8 * v5);
        if (!v14)
          break;
      }
    }
LABEL_20:
    v9 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v5 << 6);
LABEL_5:
    if (*(unsigned __int8 *)(*(_QWORD *)(a3 + 56) + 72 * v12 + 16) <= 1u)
    {
      *(unint64_t *)((char *)result + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      if (__OFADD__(v4++, 1))
      {
        __break(1u);
        return (unint64_t *)sub_15B760(result, a2, v4, a3);
      }
    }
  }
  v15 = v13 + 3;
  if (v15 >= v10)
    return (unint64_t *)sub_15B760(result, a2, v4, a3);
  v14 = *(_QWORD *)(v6 + 8 * v15);
  if (v14)
  {
    v5 = v15;
    goto LABEL_20;
  }
  while (1)
  {
    v5 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v5 >= v10)
      return (unint64_t *)sub_15B760(result, a2, v4, a3);
    v14 = *(_QWORD *)(v6 + 8 * v5);
    ++v15;
    if (v14)
      goto LABEL_20;
  }
LABEL_26:
  __break(1u);
  return result;
}

Swift::Int sub_15B760(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  Swift::Int result;
  Swift::Int v8;
  unint64_t v9;
  uint64_t v10;
  Swift::Int v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  char v41;
  char v42;
  uint64_t v43;
  char v44;
  char v45;
  char v46;
  char v47;
  char v48;
  char v49;
  char v50;
  char v51;
  _QWORD v52[10];

  if (!a3)
    return (Swift::Int)&_swiftEmptyDictionarySingleton;
  v4 = a4;
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
  {
    swift_retain(a4);
    return v4;
  }
  sub_5440(&qword_25DFB8);
  result = static _DictionaryStorage.allocate(capacity:)(v5);
  v8 = result;
  v37 = a2;
  if (a2 < 1)
    v9 = 0;
  else
    v9 = *a1;
  v10 = 0;
  v11 = result + 64;
  v39 = v4;
  while (1)
  {
    if (v9)
    {
      v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v40 = v10;
      v13 = v12 | (v10 << 6);
    }
    else
    {
      v14 = v10 + 1;
      if (__OFADD__(v10, 1))
        goto LABEL_40;
      if (v14 >= v37)
        return v8;
      v15 = a1[v14];
      v16 = v10 + 1;
      if (!v15)
      {
        v16 = v10 + 2;
        if (v10 + 2 >= v37)
          return v8;
        v15 = a1[v16];
        if (!v15)
        {
          v16 = v10 + 3;
          if (v10 + 3 >= v37)
            return v8;
          v15 = a1[v16];
          if (!v15)
          {
            v17 = v10 + 4;
            if (v10 + 4 >= v37)
              return v8;
            v15 = a1[v17];
            if (!v15)
            {
              while (1)
              {
                v16 = v17 + 1;
                if (__OFADD__(v17, 1))
                  goto LABEL_41;
                if (v16 >= v37)
                  return v8;
                v15 = a1[v16];
                ++v17;
                if (v15)
                  goto LABEL_24;
              }
            }
            v16 = v10 + 4;
          }
        }
      }
LABEL_24:
      v9 = (v15 - 1) & v15;
      v40 = v16;
      v13 = __clz(__rbit64(v15)) + (v16 << 6);
    }
    v18 = (uint64_t *)(*(_QWORD *)(v4 + 48) + 16 * v13);
    v20 = *v18;
    v19 = v18[1];
    v21 = *(_QWORD *)(v4 + 56) + 72 * v13;
    v22 = *(_QWORD *)v21;
    v23 = *(_QWORD *)(v21 + 8);
    v24 = *(_QWORD *)(v21 + 24);
    v50 = *(_BYTE *)(v21 + 32);
    v51 = *(_BYTE *)(v21 + 16);
    v25 = *(_QWORD *)(v21 + 40);
    v48 = *(_BYTE *)(v21 + 48);
    v49 = *(_BYTE *)(v21 + 33);
    v46 = *(_BYTE *)(v21 + 50);
    v47 = *(_BYTE *)(v21 + 49);
    v44 = *(_BYTE *)(v21 + 52);
    v45 = *(_BYTE *)(v21 + 51);
    v43 = *(_QWORD *)(v21 + 56);
    v41 = *(_BYTE *)(v21 + 65);
    v42 = *(_BYTE *)(v21 + 64);
    Hasher.init(_seed:)(v52, *(_QWORD *)(v8 + 40));
    swift_bridgeObjectRetain(v19);
    swift_bridgeObjectRetain(v23);
    String.hash(into:)(v52, v20, v19);
    result = Hasher._finalize()();
    v26 = -1 << *(_BYTE *)(v8 + 32);
    v27 = result & ~v26;
    v28 = v27 >> 6;
    if (((-1 << v27) & ~*(_QWORD *)(v11 + 8 * (v27 >> 6))) != 0)
    {
      v29 = __clz(__rbit64((-1 << v27) & ~*(_QWORD *)(v11 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v30 = 0;
      v31 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v31 && (v30 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v32 = v28 == v31;
        if (v28 == v31)
          v28 = 0;
        v30 |= v32;
        v33 = *(_QWORD *)(v11 + 8 * v28);
      }
      while (v33 == -1);
      v29 = __clz(__rbit64(~v33)) + (v28 << 6);
    }
    *(_QWORD *)(v11 + ((v29 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v29;
    v34 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v29);
    *v34 = v20;
    v34[1] = v19;
    v35 = *(_QWORD *)(v8 + 56) + 72 * v29;
    *(_QWORD *)v35 = v22;
    *(_QWORD *)(v35 + 8) = v23;
    *(_BYTE *)(v35 + 16) = v51;
    *(_QWORD *)(v35 + 24) = v24;
    *(_BYTE *)(v35 + 32) = v50;
    *(_BYTE *)(v35 + 33) = v49;
    *(_QWORD *)(v35 + 40) = v25;
    *(_BYTE *)(v35 + 48) = v48;
    *(_BYTE *)(v35 + 49) = v47;
    *(_BYTE *)(v35 + 50) = v46;
    *(_BYTE *)(v35 + 51) = v45;
    *(_BYTE *)(v35 + 52) = v44;
    *(_QWORD *)(v35 + 56) = v43;
    *(_BYTE *)(v35 + 64) = v42;
    *(_BYTE *)(v35 + 65) = v41;
    ++*(_QWORD *)(v8 + 16);
    if (__OFSUB__(v5--, 1))
      break;
    v4 = v39;
    v10 = v40;
    if (!v5)
      return v8;
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_15BAE0(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2)
    v7 = 2;
  v8 = v7 - 2;
  v9 = (unint64_t *)(a1 + 80);
  v2 = 64;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

uint64_t sub_15BB68(uint64_t result, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  char v16;
  char v17;
  char v18;
  char v19;
  char v20;
  uint64_t v21;
  char v22;

  if (a2 < 0 || 1 << *(_BYTE *)(a5 + 32) <= a2)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(_QWORD *)(a5 + (((unint64_t)a2 >> 3) & 0xFFFFFFFFFFFFF8) + 64) >> a2) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a5 + 36) == a3)
  {
    v5 = (uint64_t *)(*(_QWORD *)(a5 + 48) + 16 * a2);
    v6 = *v5;
    v7 = v5[1];
    v8 = *(_QWORD *)(a5 + 56) + 72 * a2;
    v9 = *(_QWORD *)v8;
    v10 = *(_QWORD *)(v8 + 8);
    v11 = *(_BYTE *)(v8 + 16);
    v12 = *(_QWORD *)(v8 + 24);
    v13 = *(_BYTE *)(v8 + 32);
    v14 = *(_BYTE *)(v8 + 33);
    v15 = *(_QWORD *)(v8 + 40);
    v16 = *(_BYTE *)(v8 + 48);
    v17 = *(_BYTE *)(v8 + 49);
    v18 = *(_BYTE *)(v8 + 50);
    v19 = *(_BYTE *)(v8 + 51);
    v20 = *(_BYTE *)(v8 + 52);
    v21 = *(_QWORD *)(v8 + 56);
    v22 = *(_BYTE *)(v8 + 64);
    LOBYTE(v8) = *(_BYTE *)(v8 + 65);
    *(_QWORD *)result = v9;
    *(_QWORD *)(result + 8) = v10;
    *(_BYTE *)(result + 16) = v11;
    *(_QWORD *)(result + 24) = v12;
    *(_BYTE *)(result + 32) = v13;
    *(_BYTE *)(result + 33) = v14;
    *(_QWORD *)(result + 40) = v15;
    *(_BYTE *)(result + 48) = v16;
    *(_BYTE *)(result + 49) = v17;
    *(_BYTE *)(result + 50) = v18;
    *(_BYTE *)(result + 51) = v19;
    *(_BYTE *)(result + 52) = v20;
    *(_QWORD *)(result + 56) = v21;
    *(_BYTE *)(result + 64) = v22;
    *(_BYTE *)(result + 65) = v8;
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v10);
    return v6;
  }
LABEL_8:
  __break(1u);
  return result;
}

uint64_t sub_15BC6C(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 56);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 3)
    v7 = 3;
  v8 = v7 - 3;
  v9 = (unint64_t *)(a1 + 80);
  v2 = 128;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

int64_t sub_15BD0C(int64_t result, int a2, char a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  if ((a3 & 1) != 0)
    goto LABEL_20;
  v4 = result;
  if (result < 0 || (result = 1 << *(_BYTE *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  v5 = v4 >> 6;
  v6 = a4 + 56;
  v7 = *(_QWORD *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  v8 = v7 & (-2 << (v4 & 0x3F));
  if (v8)
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0;
  v9 = v5 + 1;
  v10 = (unint64_t)(result + 63) >> 6;
  if (v5 + 1 < v10)
  {
    v11 = *(_QWORD *)(v6 + 8 * v9);
    if (v11)
      return __clz(__rbit64(v11)) + (v9 << 6);
    v9 = v5 + 2;
    if (v5 + 2 < v10)
    {
      v11 = *(_QWORD *)(v6 + 8 * v9);
      if (v11)
        return __clz(__rbit64(v11)) + (v9 << 6);
      while (v10 - 3 != v5)
      {
        v11 = *(_QWORD *)(a4 + 80 + 8 * v5++);
        if (v11)
        {
          v9 = v5 + 2;
          return __clz(__rbit64(v11)) + (v9 << 6);
        }
      }
    }
  }
  return result;
}

uint64_t sub_15BDF0(uint64_t a1)
{
  destroy for ObserveLibraryAssetStateViewModifier(a1);
  return a1;
}

_QWORD *sub_15BE1C@<X0>(_QWORD *a1@<X8>)
{
  unint64_t v2;
  _QWORD *result;
  uint64_t v4;

  v2 = sub_159954();
  result = EnvironmentValues.subscript.getter(&v4, &type metadata for LibraryAssetStatesKey, &type metadata for LibraryAssetStatesKey, v2);
  *a1 = v4;
  return result;
}

uint64_t dispatch thunk of LibraryAssetStateObserverProviding.libraryAssetStateObserver(for:initialState:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 8))();
}

uint64_t sub_15BE7C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *a1;
  v2 = type metadata accessor for ModifiedContent(255, *a1, &type metadata for ObserveLibraryAssetStateViewModifier);
  v3 = type metadata accessor for _ConditionalContent(255, v2, v1);
  sub_ECBEC();
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v2);
  return swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v3);
}

ValueMetadata *type metadata accessor for LibraryAssetStateObserverProviderKey()
{
  return &type metadata for LibraryAssetStateObserverProviderKey;
}

double destroy for ObserveLibraryAssetStateViewModifier(uint64_t a1)
{
  _QWORD *v2;
  double result;

  swift_bridgeObjectRelease(*(_QWORD *)a1);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  swift_release(*(_QWORD *)(a1 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
  swift_release(*(_QWORD *)(a1 + 32));
  v2 = (_QWORD *)(a1 + 40);
  if ((*(_BYTE *)(a1 + 80) & 1) != 0)
    _s7BooksUI13AnyPagedFrameVwxx_0(v2);
  else
    *(_QWORD *)&result = swift_release(*v2).n128_u64[0];
  return result;
}

uint64_t initializeWithCopy for ObserveLibraryAssetStateViewModifier(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  char v10;
  __int128 v11;
  uint64_t v12;

  v4 = *a2;
  v5 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v5;
  v6 = a2[2];
  v7 = a2[3];
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  v8 = a2[4];
  *(_QWORD *)(a1 + 32) = v8;
  v9 = a2 + 5;
  v10 = *((_BYTE *)a2 + 80);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_retain(v6);
  swift_bridgeObjectRetain(v7);
  swift_retain(v8);
  if ((v10 & 1) != 0)
  {
    v11 = *((_OWORD *)a2 + 4);
    *(_OWORD *)(a1 + 64) = v11;
    (**(void (***)(uint64_t, uint64_t *))(v11 - 8))(a1 + 40, v9);
  }
  else
  {
    v12 = *v9;
    *(_QWORD *)(a1 + 40) = *v9;
    swift_retain(v12);
  }
  *(_BYTE *)(a1 + 80) = v10;
  return a1;
}

uint64_t *assignWithCopy for ObserveLibraryAssetStateViewModifier(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = a1[2];
  v9 = a2[2];
  a1[2] = v9;
  swift_retain(v9);
  swift_release(v8);
  v10 = a1[3];
  v11 = a2[3];
  a1[3] = v11;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRelease(v10);
  v12 = a1[4];
  v13 = a2[4];
  a1[4] = v13;
  swift_retain(v13);
  swift_release(v12);
  if (a1 != a2)
  {
    v14 = a2 + 5;
    sub_B414((uint64_t)(a1 + 5), &qword_25FA90);
    if ((a2[10] & 1) != 0)
    {
      v15 = a2[8];
      a1[8] = v15;
      a1[9] = a2[9];
      (**(void (***)(uint64_t, uint64_t))(v15 - 8))((uint64_t)(a1 + 5), (uint64_t)(a2 + 5));
      *((_BYTE *)a1 + 80) = 1;
    }
    else
    {
      v16 = *v14;
      a1[5] = *v14;
      *((_BYTE *)a1 + 80) = 0;
      swift_retain(v16);
    }
  }
  return a1;
}

__n128 initializeWithTake for ObserveLibraryAssetStateViewModifier(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t *assignWithTake for ObserveLibraryAssetStateViewModifier(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v4);
  v5 = a1[1];
  a1[1] = a2[1];
  swift_bridgeObjectRelease(v5);
  v6 = a1[2];
  a1[2] = a2[2];
  swift_release(v6);
  v7 = a1[3];
  a1[3] = a2[3];
  swift_bridgeObjectRelease(v7);
  v8 = a1[4];
  a1[4] = a2[4];
  swift_release(v8);
  if (a1 != a2)
  {
    sub_B414((uint64_t)(a1 + 5), &qword_25FA90);
    *(_OWORD *)(a1 + 5) = *(_OWORD *)(a2 + 5);
    *(_OWORD *)(a1 + 7) = *(_OWORD *)(a2 + 7);
    *(_OWORD *)((char *)a1 + 65) = *(_OWORD *)((char *)a2 + 65);
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for ObserveLibraryAssetStateViewModifier(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 81))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ObserveLibraryAssetStateViewModifier(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 80) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 81) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 81) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ObserveLibraryAssetStateViewModifier()
{
  return &type metadata for ObserveLibraryAssetStateViewModifier;
}

ValueMetadata *type metadata accessor for LibraryAssetStatesKey()
{
  return &type metadata for LibraryAssetStatesKey;
}

uint64_t sub_15C2D0(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_22F83C, 1);
}

unint64_t sub_15C2E0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_268658;
  if (!qword_268658)
  {
    v1 = sub_7EF8(&qword_268660);
    sub_15C344();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_268658);
  }
  return result;
}

unint64_t sub_15C344()
{
  unint64_t result;

  result = qword_268668;
  if (!qword_268668)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for LibraryAssetState, &type metadata for LibraryAssetState);
    atomic_store(result, (unint64_t *)&qword_268668);
  }
  return result;
}

uint64_t sub_15C388(uint64_t *a1, uint64_t a2)
{
  initializeWithCopy for ObserveLibraryAssetStateViewModifier(a2, a1);
  return a2;
}

uint64_t sub_15C3BC()
{
  uint64_t v0;
  _QWORD *v1;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  swift_release(*(_QWORD *)(v0 + 48));
  v1 = (_QWORD *)(v0 + 56);
  if ((*(_BYTE *)(v0 + 96) & 1) != 0)
    _s7BooksUI13AnyPagedFrameVwxx_0(v1);
  else
    swift_release(*v1);
  return swift_deallocObject(v0, 97, 7);
}

uint64_t sub_15C41C()
{
  uint64_t v0;

  return sub_159A78(v0 + 16);
}

uint64_t sub_15C424(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_5440(&qword_268678);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_15C46C@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_159BD0(a1, *(_QWORD *)(v2 + 16), a2);
}

uint64_t sub_15C488(uint64_t result, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_bridgeObjectRelease(result);
  return result;
}

uint64_t sub_15C49C@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_159670(a1, *(_QWORD **)(v2 + 16), a2);
}

unint64_t sub_15C4BC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2686A8;
  if (!qword_2686A8)
  {
    v1 = sub_7EF8(&qword_268678);
    sub_15C528();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_2686A8);
  }
  return result;
}

unint64_t sub_15C528()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2686B0;
  if (!qword_2686B0)
  {
    v1 = sub_7EF8(&qword_268670);
    sub_7FD8(&qword_2686B8, &qword_268690, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
    sub_7FD8(&qword_2686C0, qword_2686C8, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_2686B0);
  }
  return result;
}

uint64_t sub_15C5C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;

  *a4 = swift_getKeyPath(&unk_1F1820);
  v8 = sub_5440(&qword_25FAD0);
  swift_storeEnumTagMultiPayload(a4, v8, 0);
  v10 = (char *)a4 + *(int *)(type metadata accessor for ListItemMetadataFormatAndDescriptorView(0, a2, a3, v9) + 36);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(v10, a1, a2);
}

uint64_t type metadata accessor for ListItemMetadataFormatAndDescriptorView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10E40(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ListItemMetadataFormatAndDescriptorView);
}

uint64_t sub_15C65C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  int v15;
  unsigned int v17;
  int v18;
  int v19;
  unsigned int v20;

  v6 = type metadata accessor for DynamicTypeSize(0);
  if (((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64)
       + ((*(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80) + 2) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80))
       + 7) & 0xFFFFFFFFFFFFFFF8)
     + 8 <= 8)
    v7 = 8;
  else
    v7 = ((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64)
         + ((*(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80) + 2) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80))
         + 7) & 0xFFFFFFFFFFFFFFF8)
       + 8;
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v9 = *(_DWORD *)(v8 + 84);
  if (v9 <= 0xFE)
    v10 = 254;
  else
    v10 = *(_DWORD *)(v8 + 84);
  if (!a2)
    return 0;
  v11 = *(unsigned __int8 *)(v8 + 80);
  v12 = v11 + v7 + 1;
  if (a2 <= v10)
    goto LABEL_27;
  v13 = (v12 & ~v11) + *(_QWORD *)(v8 + 64);
  v14 = 8 * v13;
  if (v13 <= 3)
  {
    v17 = ((a2 - v10 + ~(-1 << v14)) >> v14) + 1;
    if (HIWORD(v17))
    {
      v15 = *(_DWORD *)(a1 + v13);
      if (!v15)
        goto LABEL_27;
      goto LABEL_18;
    }
    if (v17 > 0xFF)
    {
      v15 = *(unsigned __int16 *)(a1 + v13);
      if (!*(_WORD *)(a1 + v13))
        goto LABEL_27;
      goto LABEL_18;
    }
    if (v17 < 2)
    {
LABEL_27:
      if (v9 > 0xFE)
        return (*(uint64_t (**)(uint64_t))(v8 + 48))((v12 + a1) & ~v11);
      v20 = *(unsigned __int8 *)(a1 + v7);
      if (v20 >= 2)
        return (v20 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v15 = *(unsigned __int8 *)(a1 + v13);
  if (!*(_BYTE *)(a1 + v13))
    goto LABEL_27;
LABEL_18:
  v18 = (v15 - 1) << v14;
  if (v13 > 3)
    v18 = 0;
  if ((_DWORD)v13)
  {
    if (v13 <= 3)
      v19 = v13;
    else
      v19 = 4;
    __asm { BR              X12 }
  }
  return v10 + v18 + 1;
}

void sub_15C810(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  size_t v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  int v16;

  v8 = type metadata accessor for DynamicTypeSize(0);
  v9 = ((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64)
       + ((*(unsigned __int8 *)(*(_QWORD *)(v8 - 8) + 80) + 2) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v8 - 8) + 80))
       + 7) & 0xFFFFFFFFFFFFFFF8)
     + 8;
  if (v9 <= 8)
    v9 = 8;
  v10 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v10 + 84) <= 0xFEu)
    v11 = 254;
  else
    v11 = *(_DWORD *)(v10 + 84);
  v12 = (((v9 | 1) + *(unsigned __int8 *)(v10 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80))
      + *(_QWORD *)(v10 + 64);
  if (a3 <= v11)
  {
    v13 = 0;
  }
  else if (v12 <= 3)
  {
    v15 = ((a3 - v11 + ~(-1 << (8 * v12))) >> (8 * v12)) + 1;
    if (HIWORD(v15))
    {
      v13 = &dword_4;
    }
    else if (v15 >= 0x100)
    {
      v13 = 2;
    }
    else
    {
      v13 = v15 > 1;
    }
  }
  else
  {
    v13 = &dword_0 + 1;
  }
  if (v11 < a2)
  {
    v14 = ~v11 + a2;
    if (v12 < 4)
    {
      if ((_DWORD)v12)
      {
        v16 = v14 & ~(-1 << (8 * v12));
        bzero(a1, v12);
        if ((_DWORD)v12 == 3)
        {
          *(_WORD *)a1 = v16;
          a1[2] = BYTE2(v16);
        }
        else if ((_DWORD)v12 == 2)
        {
          *(_WORD *)a1 = v16;
        }
        else
        {
          *a1 = v16;
        }
      }
    }
    else
    {
      bzero(a1, v12);
      *(_DWORD *)a1 = v14;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X14 }
}

uint64_t sub_15CA88(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  return swift_getOpaqueTypeConformance2(&v3, &unk_22F8A0, 1);
}

uint64_t sub_15CABC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t AssociatedConformanceWitness;
  uint64_t v18;
  uint64_t WitnessTable;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t, uint64_t);
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(char *, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD v49[13];

  v3 = *(_QWORD *)(a1 - 8);
  v47 = *(_QWORD *)(v3 + 64);
  v48 = a2;
  v4 = __chkstk_darwin(a1);
  v45 = (char *)&v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(v4 + 16);
  v6 = *(_QWORD *)(v4 + 24);
  v43 = v7;
  v44 = v6;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v6, v7, &protocol requirements base descriptor for ListItemMetadata.FormatAndDescriptorModel, &associated type descriptor for ListItemMetadata.FormatAndDescriptorModel.Content);
  v9 = sub_7EF8(&qword_2600B0);
  v10 = type metadata accessor for ModifiedContent(255, AssociatedTypeWitness, v9);
  v11 = sub_7EF8(&qword_260968);
  v12 = type metadata accessor for ModifiedContent(255, v10, v11);
  v13 = type metadata accessor for DefaultBlendModeModifier(255);
  v14 = type metadata accessor for ModifiedContent(255, v12, v13);
  v15 = type metadata accessor for _JetLocalizeDefaultWorking(255);
  v16 = type metadata accessor for _JetLocalizeDefaultFailed(255);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v6, v7, AssociatedTypeWitness, &protocol requirements base descriptor for ListItemMetadata.FormatAndDescriptorModel, &associated conformance descriptor for ListItemMetadata.FormatAndDescriptorModel.ListItemMetadata.FormatAndDescriptorModel.Content: View);
  v18 = sub_15D284((unint64_t *)&qword_2600A8, &qword_2600B0);
  v49[10] = AssociatedConformanceWitness;
  v49[11] = v18;
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v10);
  v20 = sub_15D284(&qword_260960, &qword_260968);
  v49[8] = WitnessTable;
  v49[9] = v20;
  v21 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v12);
  v22 = sub_6FD0((unint64_t *)&qword_260958, type metadata accessor for DefaultBlendModeModifier, (uint64_t)&unk_1F136C);
  v49[6] = v21;
  v49[7] = v22;
  v42 = v14;
  v23 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v14);
  v24 = sub_6FD0(&qword_25FEE0, (uint64_t (*)(uint64_t))&type metadata accessor for _JetLocalizeDefaultWorking, (uint64_t)&protocol conformance descriptor for _JetLocalizeDefaultWorking);
  v25 = sub_6FD0(&qword_25FEE8, (uint64_t (*)(uint64_t))&type metadata accessor for _JetLocalizeDefaultFailed, (uint64_t)&protocol conformance descriptor for _JetLocalizeDefaultFailed);
  v49[0] = v14;
  v49[1] = v15;
  v49[2] = v16;
  v49[3] = v23;
  v49[4] = v24;
  v49[5] = v25;
  v26 = type metadata accessor for JetLocalize(0, v49);
  v27 = *(_QWORD *)(v26 - 8);
  v28 = __chkstk_darwin(v26);
  v30 = (char *)&v42 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28);
  v32 = (char *)&v42 - v31;
  v33 = v3;
  v34 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
  v35 = v45;
  v34(v45, v46, a1);
  v36 = *(unsigned __int8 *)(v33 + 80);
  v37 = (v36 + 32) & ~v36;
  v38 = swift_allocObject(&unk_255FF8, v37 + v47, v36 | 7);
  v39 = v44;
  *(_QWORD *)(v38 + 16) = v43;
  *(_QWORD *)(v38 + 24) = v39;
  (*(void (**)(uint64_t, char *, uint64_t))(v33 + 32))(v38 + v37, v35, a1);
  sub_13A658((uint64_t)sub_15D3A4, v38, v42, v23);
  swift_getWitnessTable(&protocol conformance descriptor for JetLocalize<A, B, C>, v26);
  sub_10F80((uint64_t)v30, v26, (uint64_t)v32);
  v40 = *(void (**)(char *, uint64_t))(v27 + 8);
  v40(v30, v26);
  sub_C5C0((uint64_t)v32, v26, v48);
  return ((uint64_t (*)(char *, uint64_t))v40)(v32, v26);
}

uint64_t sub_15CE08@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t AssociatedTypeWitness;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  __n128 v40;
  uint64_t AssociatedConformanceWitness;
  char *v42;
  char *v43;
  __n128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t WitnessTable;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(uint64_t, uint64_t);
  uint64_t v57;
  char *v58;
  char *v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;

  v71 = a4;
  v7 = type metadata accessor for Font.Leading(0);
  v64 = *(_QWORD *)(v7 - 8);
  v65 = v7;
  __chkstk_darwin(v7);
  v9 = (char *)&v57 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for FontConstants.ListItem(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v57 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a3, a2, &protocol requirements base descriptor for ListItemMetadata.FormatAndDescriptorModel, &associated type descriptor for ListItemMetadata.FormatAndDescriptorModel.Content);
  v66 = *(_QWORD *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  v58 = (char *)&v57 - v15;
  v16 = sub_7EF8(&qword_2600B0);
  v17 = type metadata accessor for ModifiedContent(0, AssociatedTypeWitness, v16);
  v18 = *(_QWORD *)(v17 - 8);
  v62 = v17;
  v68 = v18;
  __chkstk_darwin(v17);
  v59 = (char *)&v57 - v19;
  v20 = sub_7EF8(&qword_260968);
  v21 = type metadata accessor for ModifiedContent(0, v17, v20);
  v22 = *(_QWORD *)(v21 - 8);
  v63 = v21;
  v69 = v22;
  __chkstk_darwin(v21);
  v60 = (char *)&v57 - v23;
  v24 = type metadata accessor for DefaultBlendModeModifier(255);
  v25 = type metadata accessor for ModifiedContent(0, v21, v24);
  v70 = *(_QWORD *)(v25 - 8);
  v26 = __chkstk_darwin(v25);
  v61 = (char *)&v57 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  v67 = (uint64_t)&v57 - v28;
  type metadata accessor for ListItemMetadataFormatAndDescriptorView(0, v13, a3, v29);
  v30 = a1;
  v31 = v13;
  v32 = a3;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v32 + 32))(v30, v13, v32);
  v33 = (uint64_t)v12;
  v34 = sub_30978((uint64_t)v12);
  v35 = static Font.footnote.getter(v34);
  v36 = v64;
  v37 = v65;
  v38 = v9;
  (*(void (**)(char *, _QWORD, uint64_t))(v64 + 104))(v9, enum case for Font.Leading.tight(_:), v65);
  v39 = Font.leading(_:)(v9, v35);
  v40 = swift_release(v35);
  (*(void (**)(char *, uint64_t, __n128))(v36 + 8))(v38, v37, v40);
  sub_15D40C(v33);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v32, v31, AssociatedTypeWitness, &protocol requirements base descriptor for ListItemMetadata.FormatAndDescriptorModel, &associated conformance descriptor for ListItemMetadata.FormatAndDescriptorModel.ListItemMetadata.FormatAndDescriptorModel.Content: View);
  v42 = v58;
  v43 = v59;
  View.font(_:)(v39, AssociatedTypeWitness, AssociatedConformanceWitness);
  v44 = swift_release(v39);
  (*(void (**)(char *, uint64_t, __n128))(v66 + 8))(v42, AssociatedTypeWitness, v44);
  v45 = sub_15D284((unint64_t *)&qword_2600A8, &qword_2600B0);
  v76 = AssociatedConformanceWitness;
  v77 = v45;
  v46 = v62;
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v62);
  v48 = v60;
  View.lineLimit(_:)(2, 0, v46, WitnessTable);
  (*(void (**)(char *, uint64_t))(v68 + 8))(v43, v46);
  v49 = sub_15D284(&qword_260960, &qword_260968);
  v74 = WitnessTable;
  v75 = v49;
  v50 = v63;
  v51 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v63);
  v52 = (uint64_t)v61;
  View.defaultBlendMode()(v50, v51);
  (*(void (**)(char *, uint64_t))(v69 + 8))(v48, v50);
  v53 = sub_6FD0((unint64_t *)&qword_260958, type metadata accessor for DefaultBlendModeModifier, (uint64_t)&unk_1F136C);
  v72 = v51;
  v73 = v53;
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v25);
  v54 = v67;
  sub_10F80(v52, v25, v67);
  v55 = *(void (**)(uint64_t, uint64_t))(v70 + 8);
  v55(v52, v25);
  sub_C5C0(v54, v25, v71);
  return ((uint64_t (*)(uint64_t, uint64_t))v55)(v54, v25);
}

uint64_t sub_15D284(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = sub_7EF8(a2);
    result = swift_getWitnessTable(&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>, v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_15D2C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  __n128 v15;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = type metadata accessor for ListItemMetadataFormatAndDescriptorView(0, v5, *(_QWORD *)(v4 + 24), a4);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v8 + 32) & ~v8;
  v10 = *(_QWORD *)(v7 + 64);
  v11 = (char *)(v4 + v9);
  v12 = sub_5440(&qword_25FAD0);
  if (swift_getEnumCaseMultiPayload(v4 + v9, v12) == 1)
  {
    v13 = &v11[*(int *)(type metadata accessor for FontConstants.Environment(0) + 24)];
    v14 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
  }
  else
  {
    v15 = swift_release(*(_QWORD *)v11);
  }
  (*(void (**)(char *, uint64_t, __n128))(*(_QWORD *)(v5 - 8) + 8))(&v11[*(int *)(v6 + 36)], v5, v15);
  return swift_deallocObject(v4, v9 + v10, v8 | 7);
}

uint64_t sub_15D3A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;

  v6 = *(_QWORD *)(v3 + 16);
  v7 = *(_QWORD *)(v3 + 24);
  type metadata accessor for ListItemMetadataFormatAndDescriptorView(0, v6, v7, a2);
  return sub_15CE08(a1, v6, v7, a3);
}

uint64_t sub_15D40C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for FontConstants.ListItem(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_15D448(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t AssociatedTypeWitness;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[12];

  v2 = *a1;
  v1 = a1[1];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v1, *a1, &protocol requirements base descriptor for ListItemMetadata.FormatAndDescriptorModel, &associated type descriptor for ListItemMetadata.FormatAndDescriptorModel.Content);
  v4 = sub_7EF8(&qword_2600B0);
  v5 = type metadata accessor for ModifiedContent(255, AssociatedTypeWitness, v4);
  v6 = sub_7EF8(&qword_260968);
  v7 = type metadata accessor for ModifiedContent(255, v5, v6);
  v8 = type metadata accessor for DefaultBlendModeModifier(255);
  v9 = type metadata accessor for ModifiedContent(255, v7, v8);
  v10 = type metadata accessor for _JetLocalizeDefaultWorking(255);
  v11 = type metadata accessor for _JetLocalizeDefaultFailed(255);
  v14[10] = swift_getAssociatedConformanceWitness(v1, v2, AssociatedTypeWitness, &protocol requirements base descriptor for ListItemMetadata.FormatAndDescriptorModel, &associated conformance descriptor for ListItemMetadata.FormatAndDescriptorModel.ListItemMetadata.FormatAndDescriptorModel.Content: View);
  v14[11] = sub_15D284((unint64_t *)&qword_2600A8, &qword_2600B0);
  v14[8] = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v5);
  v14[9] = sub_15D284(&qword_260960, &qword_260968);
  v14[6] = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v7);
  v14[7] = sub_6FD0((unint64_t *)&qword_260958, type metadata accessor for DefaultBlendModeModifier, (uint64_t)&unk_1F136C);
  v14[0] = v9;
  v14[1] = v10;
  v14[2] = v11;
  v14[3] = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v9);
  v14[4] = sub_6FD0(&qword_25FEE0, (uint64_t (*)(uint64_t))&type metadata accessor for _JetLocalizeDefaultWorking, (uint64_t)&protocol conformance descriptor for _JetLocalizeDefaultWorking);
  v14[5] = sub_6FD0(&qword_25FEE8, (uint64_t (*)(uint64_t))&type metadata accessor for _JetLocalizeDefaultFailed, (uint64_t)&protocol conformance descriptor for _JetLocalizeDefaultFailed);
  v12 = type metadata accessor for JetLocalize(255, v14);
  return swift_getWitnessTable(&protocol conformance descriptor for JetLocalize<A, B, C>, v12);
}

uint64_t sub_15D640(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t AssociatedTypeWitness;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  Swift::Int v23;
  char *v24;
  uint64_t result;
  char *v26;
  char *v27;
  void (*v28)(_BYTE *, _QWORD);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  void (*v39)(char *, char *);
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  _BYTE v44[32];
  uint64_t v45;

  v33 = a5;
  v34 = a8;
  v39 = a1;
  v40 = a2;
  v32 = *(_QWORD *)(a5 - 8);
  __chkstk_darwin(a1);
  v41 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(_QWORD *)(v12 + 8), v13, &protocol requirements base descriptor for Sequence, &associated type descriptor for Sequence.Element);
  v15 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v16 = __chkstk_darwin(AssociatedTypeWitness);
  v37 = (char *)&v30 - v17;
  v42 = a4;
  __chkstk_darwin(v16);
  v36 = (char *)&v30 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = swift_getAssociatedTypeWitness(0, a6, a3, &protocol requirements base descriptor for Collection, &associated type descriptor for Collection.Index);
  v35 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v21 = (char *)&v30 - v20;
  v22 = dispatch thunk of Collection.count.getter(a3, a6);
  if (!v22)
    return static Array._allocateUninitialized(_:)(0, v42);
  v23 = v22;
  v31 = v19;
  v24 = v42;
  v45 = ContiguousArray.init()(v42);
  v38 = type metadata accessor for ContiguousArray(0, v24);
  ContiguousArray.reserveCapacity(_:)(v23);
  v42 = v21;
  result = dispatch thunk of Collection.startIndex.getter(a3);
  if (v23 < 0)
  {
    __break(1u);
  }
  else
  {
    v27 = v36;
    v26 = v37;
    while (1)
    {
      v28 = (void (*)(_BYTE *, _QWORD))dispatch thunk of Collection.subscript.read(v44, v42, a3, a6);
      (*(void (**)(char *))(v15 + 16))(v26);
      v28(v44, 0);
      v29 = v43;
      v39(v26, v41);
      if (v29)
        break;
      v43 = 0;
      (*(void (**)(char *, uint64_t))(v15 + 8))(v26, AssociatedTypeWitness);
      ContiguousArray.append(_:)(v27, v38);
      dispatch thunk of Collection.formIndex(after:)(v42, a3, a6);
      if (!--v23)
      {
        (*(void (**)(char *, uint64_t))(v35 + 8))(v42, v31);
        return v45;
      }
    }
    (*(void (**)(char *, uint64_t))(v15 + 8))(v26, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v35 + 8))(v42, v31);
    swift_release(v45);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v32 + 32))(v34, v41, v33);
  }
  return result;
}

id MResourceDecoder.wrappedValue.getter()
{
  return (id)ShelfGridItemColumnSpan.Context.offset.getter();
}

void _MResourceDecoder_OrNil.wrappedValue.setter(void *a1)
{
  id *v1;

  *v1 = a1;
}

uint64_t sub_15D958()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_5440(&qword_268768);
  sub_73A0(v0, qword_268750);
  sub_7120(v0, (uint64_t)qword_268750);
  v1 = type metadata accessor for MCatalogServiceConfig(0);
  return JSONContext.Property.init(_:)(0xD000000000000025, 0x80000000001FDC60, v1);
}

uint64_t static JSONContext.Property<A>.catalogServiceConfig.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_25DCD0 != -1)
    swift_once(&qword_25DCD0, sub_15D958);
  v2 = sub_5440(&qword_268768);
  v3 = sub_7120(v2, (uint64_t)qword_268750);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

void MResourceDecoder.MResourceDecoderError.hash(into:)()
{
  Hasher._combine(_:)(0);
}

Swift::Int MResourceDecoder.MResourceDecoderError.hashValue.getter()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1, 0);
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

Swift::Int sub_15DAA4(uint64_t a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, a1);
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

uint64_t MResourceDecoder.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t WitnessTable;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  Swift::String v46;
  Swift::String v47;
  void *object;
  Swift::String v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  char *v65;
  _QWORD *v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;

  v72 = a2;
  v63 = a3;
  v4 = type metadata accessor for JSONError(0);
  v70 = *(_QWORD *)(v4 - 8);
  v5 = __chkstk_darwin(v4);
  v68 = (char *)&v62 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v71 = (char *)&v62 - v7;
  v8 = sub_5440(&qword_2680C0);
  __chkstk_darwin(v8);
  v65 = (char *)&v62 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v67 = type metadata accessor for JSONObject(0);
  v64 = *(_QWORD *)(v67 - 8);
  __chkstk_darwin(v67);
  v66 = (uint64_t *)((char *)&v62 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = sub_5440(&qword_268770);
  __chkstk_darwin(v11);
  v13 = (uint64_t *)((char *)&v62 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = type metadata accessor for MCatalogServiceConfig(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v62 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = a1[3];
  v18 = a1[4];
  sub_5480(a1, v19);
  v20 = dispatch thunk of Decoder.userInfo.getter(v19, v18);
  if (qword_25DCD0 != -1)
    swift_once(&qword_25DCD0, sub_15D958);
  v21 = sub_5440(&qword_268768);
  v22 = sub_7120(v21, (uint64_t)qword_268750);
  Dictionary<>.subscript.getter(v13, v22, v20, v14);
  swift_bridgeObjectRelease(v20);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) != 1)
  {
    (*(void (**)(char *, _QWORD *, uint64_t))(v15 + 32))(v17, v13, v14);
    v28 = a1[3];
    v29 = a1[4];
    sub_5480(a1, v28);
    v30 = v69;
    dispatch thunk of Decoder.singleValueContainer()(&v73, v28, v29);
    v27 = v30;
    if (v30)
    {
      (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
      goto LABEL_13;
    }
    v31 = v75;
    v69 = v76;
    sub_5480(&v73, v75);
    v32 = sub_6FD0((unint64_t *)&qword_2680E0, (uint64_t (*)(uint64_t))&type metadata accessor for JSONObject, (uint64_t)&protocol conformance descriptor for JSONObject);
    v33 = dispatch thunk of SingleValueDecodingContainer.decode<A>(_:)(v66, v67, v67, v32, v31, v69);
    v34 = (uint64_t)v65;
    JSONObject.dictionary.getter(v33);
    v35 = type metadata accessor for JSONDictionary(0);
    v36 = *(_QWORD *)(v35 - 8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v36 + 48))(v34, 1, v35) == 1)
    {
      sub_B414(v34, &qword_2680C0);
      v37 = v64;
    }
    else
    {
      v69 = v35;
      v38 = JSONDictionary.bridgedPrimitiveValues<A, B>()(&type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);
      (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v34, v69);
      v37 = v64;
      if (v38)
      {
        v39 = v38;
LABEL_12:
        type metadata accessor for MResource(0);
        v61 = static MResource.from<A>(response:config:)(v39, v17, v72);
        swift_bridgeObjectRelease(v39);
        (*(void (**)(_QWORD *, uint64_t))(v37 + 8))(v66, v67);
        (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
        _s7BooksUI13AnyPagedFrameVwxx_0(&v73);
        *v63 = v61;
        return _s7BooksUI13AnyPagedFrameVwxx_0(a1);
      }
    }
    v39 = sub_93E0((uint64_t)_swiftEmptyArrayStorage);
    swift_bridgeObjectRelease(0);
    goto LABEL_12;
  }
  sub_B414((uint64_t)v13, &qword_268770);
  v25 = type metadata accessor for MResourceDecoder.MResourceDecoderError(0, v72, v23, v24);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for MResourceDecoder<A>.MResourceDecoderError, v25);
  v27 = swift_allocError(v25, WitnessTable, 0, 0);
  swift_willThrow(v27);
LABEL_13:
  v77 = v27;
  swift_errorRetain(v27);
  v40 = sub_5440(&qword_265AE0);
  v41 = v71;
  if (swift_dynamicCast(v71, &v77, v40, v4, 0))
  {
    swift_errorRelease(v27);
    v42 = v68;
    (*(void (**)(char *, char *, uint64_t))(v70 + 32))(v68, v41, v4);
    v71 = (char *)type metadata accessor for DecodingError(0);
    swift_allocError(v71, &protocol witness table for DecodingError, 0, 0);
    v69 = v43;
    v44 = a1[3];
    v45 = a1[4];
    sub_5480(a1, v44);
    v67 = dispatch thunk of Decoder.codingPath.getter(v44, v45);
    v73 = 0;
    v74 = 0xE000000000000000;
    _StringGuts.grow(_:)(23);
    v46._object = (void *)0x80000000001FDC40;
    v46._countAndFlagsBits = 0xD000000000000011;
    String.append(_:)(v46);
    v47._countAndFlagsBits = _typeName(_:qualified:)(v72, 0);
    object = v47._object;
    String.append(_:)(v47);
    swift_bridgeObjectRelease(object);
    v49._countAndFlagsBits = 8250;
    v49._object = (void *)0xE200000000000000;
    String.append(_:)(v49);
    _print_unlocked<A, B>(_:_:)(v42, &v73, v4, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    v50 = v73;
    v51 = v74;
    v52 = sub_6FD0(qword_268778, (uint64_t (*)(uint64_t))&type metadata accessor for JSONError, (uint64_t)&protocol conformance descriptor for JSONError);
    v53 = swift_allocError(v4, v52, 0, 0);
    v54 = v70;
    (*(void (**)(uint64_t, char *, uint64_t))(v70 + 16))(v55, v42, v4);
    v56 = a1;
    v57 = v69;
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)(v67, v50, v51, v53);
    v58 = v57;
    a1 = v56;
    v59 = (*(uint64_t (**)(uint64_t, _QWORD))(*((_QWORD *)v71 - 1) + 104))(v58, enum case for DecodingError.dataCorrupted(_:));
    swift_willThrow(v59);
    (*(void (**)(char *, uint64_t))(v54 + 8))(v42, v4);
  }
  swift_errorRelease(v77);
  return _s7BooksUI13AnyPagedFrameVwxx_0(a1);
}

uint64_t sub_15E14C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return MResourceDecoder.init(from:)(a1, *(_QWORD *)(a2 + 16), a3);
}

uint64_t _MResourceDecoder_Many.init(from:)(_QWORD *a1, char *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t WitnessTable;
  uint64_t v9;
  uint64_t v10;
  uint64_t KeyPath;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[5];

  sub_BD00((uint64_t)a1, (uint64_t)v16);
  v7 = type metadata accessor for MResourceDecoder(0, (uint64_t)a2, v5, v6);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for MResourceDecoder<A>, v7);
  v9 = Array<A>.init(from:)(v16, v7, WitnessTable);
  if (v2)
  {
    _s7BooksUI13AnyPagedFrameVwxx_0(a1);
  }
  else
  {
    v10 = v9;
    v16[0] = v9;
    __chkstk_darwin(v9);
    KeyPath = swift_getKeyPath(&unk_1F1900);
    v12 = type metadata accessor for Array(0, v7);
    v13 = swift_getWitnessTable(&protocol conformance descriptor for [A], v12);
    v7 = sub_15D640((void (*)(char *, char *))sub_D9864, KeyPath, v12, a2, (uint64_t)&type metadata for Never, v13, (uint64_t)&protocol witness table for Never, v14);
    _s7BooksUI13AnyPagedFrameVwxx_0(a1);
    swift_bridgeObjectRelease(v10);
    swift_release(KeyPath);
  }
  return v7;
}

id sub_15E2B8@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  void *v5;

  type metadata accessor for MResourceDecoder(0, *(_QWORD *)(a2 + a1 - 8), a2, a3);
  v5 = (void *)ShelfGridItemColumnSpan.Context.offset.getter();
  *a4 = v5;
  return v5;
}

void sub_15E2F0(id *a1)
{
  _MResourceDecoder_OrNil.wrappedValue.setter(*a1);
}

uint64_t _MResourceDecoder_Many.init(_partiallyFrom:)(_QWORD *a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t WitnessTable;
  uint64_t v8;
  uint64_t KeyPath;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[5];

  sub_BD00((uint64_t)a1, (uint64_t)v15);
  v6 = type metadata accessor for MResourceDecoder(0, (uint64_t)a2, v4, v5);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for MResourceDecoder<A>, v6);
  v8 = Array<A>.init(_partiallyFrom:)(v15, v6, WitnessTable);
  v15[0] = v8;
  KeyPath = swift_getKeyPath(&unk_1F1900);
  v10 = type metadata accessor for Array(0, v6);
  v11 = swift_getWitnessTable(&protocol conformance descriptor for [A], v10);
  v13 = sub_15D640((void (*)(char *, char *))sub_D9864, KeyPath, v10, a2, (uint64_t)&type metadata for Never, v11, (uint64_t)&protocol witness table for Never, v12);
  _s7BooksUI13AnyPagedFrameVwxx_0(a1);
  swift_bridgeObjectRelease(v8);
  swift_release(KeyPath);
  return v13;
}

uint64_t sub_15E41C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t result;

  result = _MResourceDecoder_Many.init(from:)(a1, *(char **)(a2 + 16));
  if (!v3)
    *a3 = result;
  return result;
}

uint64_t sub_15E448@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;

  result = _MResourceDecoder_Many.init(_partiallyFrom:)(a1, *(char **)(a2 + 16));
  *a3 = result;
  return result;
}

void *_MResourceDecoder_OrNil.wrappedValue.getter(void *a1)
{
  id v2;

  v2 = a1;
  return a1;
}

uint64_t _MResourceDecoder_OrNil.init(from:)(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t WitnessTable;
  uint64_t result;
  _BYTE v10[40];
  uint64_t v11;

  sub_BD00((uint64_t)a1, (uint64_t)v10);
  v7 = type metadata accessor for MResourceDecoder(0, a2, v5, v6);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for MResourceDecoder<A>, v7);
  Optional<A>.init(from:)(&v11, v10, v7, WitnessTable);
  result = _s7BooksUI13AnyPagedFrameVwxx_0(a1);
  if (!v2)
    return v11;
  return result;
}

uint64_t sub_15E524@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t result;

  result = _MResourceDecoder_OrNil.init(from:)(a1, *(_QWORD *)(a2 + 16));
  if (!v3)
    *a3 = result;
  return result;
}

uint64_t type metadata accessor for MResourceDecoder.MResourceDecoderError(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10E40(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for MResourceDecoder.MResourceDecoderError);
}

uint64_t type metadata accessor for MResourceDecoder(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10E40(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for MResourceDecoder);
}

uint64_t sub_15E570()
{
  return 8;
}

_QWORD *sub_15E57C(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_15E588(uint64_t a1)
{
  return swift_getWitnessTable(&protocol conformance descriptor for MResourceDecoder<A>.MResourceDecoderError, a1);
}

uint64_t sub_15E598(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_15E5D8 + 4 * byte_1F18F0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_15E5F8 + 4 * byte_1F18F5[v4]))();
}

_BYTE *sub_15E5D8(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_15E5F8(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_15E600(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_15E608(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_15E610(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_15E618(_DWORD *result)
{
  *result = 0;
  return result;
}

uint64_t type metadata accessor for _MResourceDecoder_Many(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10E40(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _MResourceDecoder_Many);
}

void **sub_15E630(void **a1, void **a2)
{
  void *v3;
  id v4;

  v3 = *a2;
  *a1 = *a2;
  v4 = v3;
  return a1;
}

void destroy for SharedWithYouView(id *a1)
{

}

void **sub_15E664(void **a1, void **a2)
{
  void *v3;
  void *v4;
  id v5;

  v3 = *a1;
  v4 = *a2;
  *a1 = *a2;
  v5 = v4;

  return a1;
}

void **sub_15E698(void **a1, void **a2)
{
  void *v3;

  v3 = *a1;
  *a1 = *a2;

  return a1;
}

uint64_t sub_15E6C8(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 8))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t sub_15E724(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

uint64_t type metadata accessor for _MResourceDecoder_OrNil(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10E40(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _MResourceDecoder_OrNil);
}

uint64_t CircularIconView.init(kind:)@<X0>(char *a1@<X0>, _QWORD *a2@<X8>)
{
  char v3;
  uint64_t v4;
  int *v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  v3 = *a1;
  *a2 = swift_getKeyPath(&unk_1F1B90);
  v4 = sub_5440(&qword_25F1E8);
  swift_storeEnumTagMultiPayload(a2, v4, 0);
  v5 = (int *)type metadata accessor for CircularIconView(0);
  v6 = (_QWORD *)((char *)a2 + v5[5]);
  *v6 = swift_getKeyPath(&unk_1F1BB8);
  v7 = sub_5440(&qword_25FAC8);
  swift_storeEnumTagMultiPayload(v6, v7, 0);
  v8 = (char *)a2 + v5[6];
  *(_QWORD *)v8 = swift_getKeyPath(&unk_1F1BF0);
  v8[8] = 0;
  v9 = (_QWORD *)((char *)a2 + v5[7]);
  *v9 = swift_getKeyPath(&unk_1F1C38);
  v10 = sub_5440(&qword_25E948);
  swift_storeEnumTagMultiPayload(v9, v10, 0);
  v11 = (_QWORD *)((char *)a2 + v5[8]);
  *v11 = swift_getKeyPath(&unk_1F1C68);
  v12 = sub_5440(&qword_25F208);
  swift_storeEnumTagMultiPayload(v11, v12, 0);
  v13 = (char *)a2 + v5[9];
  *(_QWORD *)v13 = swift_getKeyPath(&unk_1F1C90);
  v13[8] = 0;
  v14 = (char *)a2 + v5[11];
  result = swift_getKeyPath(&unk_1F1CB8);
  *(_QWORD *)v14 = result;
  v14[8] = 0;
  *((_BYTE *)a2 + v5[10]) = v3;
  return result;
}

uint64_t type metadata accessor for CircularIconView(uint64_t a1)
{
  uint64_t result;

  result = qword_268A08;
  if (!qword_268A08)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CircularIconView);
  return result;
}

uint64_t CircularIconView.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  unsigned int *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  __int128 v32;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _OWORD v42[3];

  v41 = a1;
  v2 = type metadata accessor for DynamicTypeSize(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = sub_5440(&qword_268980);
  __chkstk_darwin(v37);
  v7 = (uint64_t *)((char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = sub_5440(&qword_268988);
  v39 = *(_QWORD *)(v8 - 8);
  v40 = v8;
  __chkstk_darwin(v8);
  v36 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = sub_5440(&qword_268990);
  __chkstk_darwin(v38);
  v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  *v7 = _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0();
  v7[1] = v12;
  v13 = (uint64_t)v7 + *(int *)(sub_5440(&qword_268998) + 44);
  v35 = v1;
  sub_15EC38(v1, v13);
  v14 = type metadata accessor for CircularIconView(0);
  v15 = v1 + *(int *)(v14 + 24);
  v16 = *(_QWORD *)v15;
  v17 = *(_BYTE *)(v15 + 8);
  sub_35D60(*(_QWORD *)v15, v17);
  v18 = sub_30DB4(v16, v17);
  sub_35D64(v16, v17);
  v19 = (unsigned int *)&enum case for DynamicTypeSize.large(_:);
  if ((v18 & 1) == 0)
    v19 = (unsigned int *)&enum case for DynamicTypeSize.medium(_:);
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, *v19, v2);
  v20 = sub_7FD8(&qword_2689A0, &qword_268980, (uint64_t)&protocol conformance descriptor for ZStack<A>);
  v21 = v36;
  View.dynamicTypeSize(_:)(v5, v37, v20);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  sub_B414((uint64_t)v7, &qword_268980);
  v22 = v35 + *(int *)(v14 + 36);
  v23 = *(_QWORD *)v22;
  v24 = *(_BYTE *)(v22 + 8);
  sub_35D60(*(_QWORD *)v22, v24);
  sub_324D0(v23, v24, v42);
  sub_35D64(v23, v24);
  v25 = qword_1F1EE0[SLOBYTE(v42[0])];
  sub_35D60(v23, v24);
  sub_324D0(v23, v24, v42);
  sub_35D64(v23, v24);
  v26 = qword_1F1EE0[SLOBYTE(v42[0])];
  v27 = _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0();
  _FrameLayout.init(width:height:alignment:)(v42, v25, 0, v26, 0, v27, v28);
  v30 = v39;
  v29 = v40;
  (*(void (**)(char *, char *, uint64_t))(v39 + 16))(v11, v21, v40);
  v31 = &v11[*(int *)(v38 + 36)];
  v32 = v42[1];
  *(_OWORD *)v31 = v42[0];
  *((_OWORD *)v31 + 1) = v32;
  *((_OWORD *)v31 + 2) = v42[2];
  (*(void (**)(char *, uint64_t))(v30 + 8))(v21, v29);
  return sub_167A4((uint64_t)v11, v41, &qword_268990);
}

uint64_t sub_15EC38@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char v45;
  void (*v46)(char *, uint64_t);
  unsigned int *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(char *, uint64_t);
  uint64_t v52;
  char v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void (*v59)(char *, uint64_t, uint64_t);
  char *v60;
  uint64_t v61;
  unint64_t v62;
  char v63;
  void (*v64)(char *, uint64_t);
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t KeyPath;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v87;
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;

  v108 = a2;
  v3 = sub_5440(&qword_260650);
  __chkstk_darwin(v3);
  v105 = (uint64_t)&v87 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v102 = sub_5440(&qword_260658);
  v5 = __chkstk_darwin(v102);
  v107 = (uint64_t)&v87 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v5);
  v104 = (char *)&v87 - v8;
  __chkstk_darwin(v7);
  v106 = (uint64_t)&v87 - v9;
  v10 = type metadata accessor for _BlendModeEffect(0);
  __chkstk_darwin(v10);
  v94 = (char *)&v87 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v109 = type metadata accessor for ColorScheme(0);
  v93 = *(_QWORD *)(v109 - 8);
  v12 = __chkstk_darwin(v109);
  v100 = (uint64_t)&v87 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v15 = (char *)&v87 - v14;
  v16 = type metadata accessor for ColorConstants.Environment(0);
  __chkstk_darwin(v16);
  v18 = (char *)&v87 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for ColorConstants(0);
  __chkstk_darwin(v19);
  v21 = (char *)&v87 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for BlendMode(0);
  v91 = *(_QWORD *)(v22 - 8);
  v23 = __chkstk_darwin(v22);
  v99 = (uint64_t)&v87 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  v26 = (char *)&v87 - v25;
  v92 = sub_5440(&qword_268A70);
  __chkstk_darwin(v92);
  v111 = (uint64_t)&v87 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v95 = sub_5440(&qword_268A78);
  v28 = __chkstk_darwin(v95);
  v101 = (uint64_t)&v87 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = __chkstk_darwin(v28);
  v97 = (char *)&v87 - v31;
  __chkstk_darwin(v30);
  v98 = (uint64_t)&v87 - v32;
  sub_15F470();
  v90 = v33;
  v96 = type metadata accessor for CircularIconView(0);
  v34 = a1;
  v35 = a1 + *(int *)(v96 + 44);
  v36 = *(_QWORD *)v35;
  v37 = *(_BYTE *)(v35 + 8);
  sub_35D60(*(_QWORD *)v35, v37);
  v38 = sub_30DB4(v36, v37);
  sub_35D64(v36, v37);
  v103 = v34;
  v110 = v22;
  v89 = v15;
  v88 = v18;
  v87 = v21;
  if ((v38 & 1) != 0)
  {
    v39 = v93;
    v40 = v91;
    v41 = *(char **)(v91 + 104);
    ((void (*)(char *, _QWORD, uint64_t))v41)(v26, enum case for BlendMode.normal(_:), v22);
  }
  else
  {
    _s7BooksUI18BuyButtonExternalsV6colorsAA14ColorConstantsVvg_0((uint64_t)v21);
    sub_1E428((uint64_t)v21, (uint64_t)v18, type metadata accessor for ColorConstants.Environment);
    v42 = v93;
    v43 = v109;
    (*(void (**)(char *, _QWORD, uint64_t))(v93 + 104))(v15, enum case for ColorScheme.dark(_:), v109);
    v44 = sub_4928C();
    v45 = dispatch thunk of static Equatable.== infix(_:_:)(v18, v15, v43, v44);
    v39 = v42;
    v46 = *(void (**)(char *, uint64_t))(v42 + 8);
    v46(v15, v43);
    v46(v18, v43);
    sub_224DC((uint64_t)v21, type metadata accessor for ColorConstants);
    v40 = v91;
    v41 = *(char **)(v91 + 104);
    if ((v45 & 1) != 0)
      v47 = (unsigned int *)&enum case for BlendMode.plusLighter(_:);
    else
      v47 = (unsigned int *)&enum case for BlendMode.plusDarker(_:);
    v22 = v110;
    ((void (*)(char *, _QWORD, uint64_t))v41)(v26, *v47, v110);
  }
  v48 = (uint64_t)v94;
  v93 = *(_QWORD *)(v40 + 16);
  ((void (*)(char *, char *, uint64_t))v93)(v94, v26, v22);
  v49 = v111;
  sub_1E428(v48, v111 + *(int *)(v92 + 36), (uint64_t (*)(_QWORD))&type metadata accessor for _BlendModeEffect);
  v50 = v90;
  *(_QWORD *)v49 = v90;
  *(_WORD *)(v49 + 8) = 256;
  swift_retain(v50);
  sub_224DC(v48, (uint64_t (*)(_QWORD))&type metadata accessor for _BlendModeEffect);
  v51 = *(void (**)(char *, uint64_t))(v40 + 8);
  v51(v26, v22);
  swift_release(v50);
  v52 = *(_QWORD *)v35;
  v53 = *(_BYTE *)(v35 + 8);
  sub_35D60(v52, v53);
  v54 = sub_30DB4(v52, v53);
  sub_35D64(v52, v53);
  if ((v54 & 1) != 0)
  {
    v92 = (uint64_t)v51;
    v94 = v41;
    v55 = (uint64_t)v87;
    v56 = v103;
    _s7BooksUI18BuyButtonExternalsV6colorsAA14ColorConstantsVvg_0((uint64_t)v87);
    v57 = (uint64_t)v88;
    sub_1E428(v55, (uint64_t)v88, type metadata accessor for ColorConstants.Environment);
    v58 = enum case for ColorScheme.dark(_:);
    v59 = *(void (**)(char *, uint64_t, uint64_t))(v39 + 104);
    v60 = v89;
    v61 = v109;
    v59(v89, enum case for ColorScheme.dark(_:), v109);
    v62 = sub_4928C();
    v63 = dispatch thunk of static Equatable.== infix(_:_:)(v57, v60, v61, v62);
    v64 = *(void (**)(char *, uint64_t))(v39 + 8);
    v64(v60, v61);
    v64((char *)v57, v61);
    sub_224DC(v55, type metadata accessor for ColorConstants);
    v65 = v96;
    if ((v63 & 1) != 0)
    {
      v66 = enum case for ColorScheme.light(_:);
      v67 = v100;
      v68 = v100;
    }
    else
    {
      v67 = v100;
      v68 = v100;
      v66 = v58;
    }
    v59((char *)v68, v66, v61);
    v69 = v61;
    v41 = v94;
    v51 = (void (*)(char *, uint64_t))v92;
  }
  else
  {
    v65 = v96;
    v56 = v103;
    v67 = v100;
    sub_31378(v100);
    v69 = v109;
  }
  KeyPath = swift_getKeyPath(&unk_1F1E00);
  v71 = (uint64_t)v97;
  v72 = (uint64_t *)&v97[*(int *)(v95 + 36)];
  v73 = sub_5440(&qword_25EE58);
  (*(void (**)(char *, uint64_t, uint64_t))(v39 + 16))((char *)v72 + *(int *)(v73 + 28), v67, v69);
  *v72 = KeyPath;
  v74 = v111;
  sub_B3D0(v111, v71, &qword_268A70);
  (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v67, v69);
  sub_B414(v74, &qword_268A70);
  v75 = v98;
  sub_167A4(v71, v98, &qword_268A78);
  v76 = v105;
  sub_15F6B4(v105);
  v77 = v99;
  if (*(_BYTE *)(v56 + *(int *)(v65 + 40)) == 6)
  {
    sub_31660(v99);
    v78 = v110;
  }
  else
  {
    v78 = v110;
    ((void (*)(uint64_t, _QWORD, uint64_t))v41)(v99, enum case for BlendMode.normal(_:), v110);
  }
  v79 = (uint64_t)v104;
  ((void (*)(char *, uint64_t, uint64_t))v93)(&v104[*(int *)(v102 + 36)], v77, v78);
  sub_B3D0(v76, v79, &qword_260650);
  v51((char *)v77, v78);
  sub_B414(v76, &qword_260650);
  v80 = v79;
  v81 = v106;
  sub_167A4(v80, v106, &qword_260658);
  v82 = v101;
  sub_B3D0(v75, v101, &qword_268A78);
  v83 = v107;
  sub_B3D0(v81, v107, &qword_260658);
  v84 = v108;
  sub_B3D0(v82, v108, &qword_268A78);
  v85 = sub_5440(&qword_268A80);
  sub_B3D0(v83, v84 + *(int *)(v85 + 48), &qword_260658);
  sub_B414(v81, &qword_260658);
  sub_B414(v75, &qword_268A78);
  sub_B414(v83, &qword_260658);
  return sub_B414(v82, &qword_268A78);
}

void sub_15F470()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;

  v1 = type metadata accessor for Material(0);
  __chkstk_darwin(v1);
  v2 = (char *)&loc_15F500
     + dword_15F694[*(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for CircularIconView(0) + 40))];
  __asm { BR              X10 }
}

uint64_t sub_15F510()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;
  id v16;
  uint64_t v17;

  v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x72616D6B63656863, 0xE90000000000006BLL, v4 + 1, 0x80000000001F9730, 0);
  v7 = swift_bridgeObjectRelease(0xE90000000000006BLL);
  if ((v6 & 1) != 0)
  {
    v17 = static Color.clear.getter(v7);
    goto LABEL_6;
  }
  v8 = v1 + *(int *)(v3 + 44);
  v9 = *(_QWORD *)v8;
  v10 = *(_BYTE *)(v8 + 8);
  sub_35D60(*(_QWORD *)v8, v10);
  v11 = sub_30DB4(v9, v10);
  v12 = sub_35D64(v9, v10);
  if ((v11 & 1) == 0)
  {
    v16 = objc_msgSend((id)objc_opt_self(UIColor), "tertiarySystemFillColor");
    v17 = Color.init(_:)(v16);
LABEL_6:
    *(_QWORD *)(v5 - 72) = v17;
    v15 = &type metadata for Color;
    v13 = &protocol witness table for Color;
    v14 = v5 - 72;
    return AnyShapeStyle.init<A>(_:)(v14, v15, v13);
  }
  static Material.ultraThin.getter(v12);
  v13 = &protocol witness table for Material;
  v14 = v2;
  v15 = v0;
  return AnyShapeStyle.init<A>(_:)(v14, v15, v13);
}

uint64_t sub_15F6B4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t KeyPath;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v34;

  v3 = type metadata accessor for SymbolImage(0);
  v4 = __chkstk_darwin(v3);
  v6 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v34 - v7;
  v9 = sub_5440(&qword_260678);
  __chkstk_darwin(v9);
  v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_5440(&qword_260680);
  __chkstk_darwin(v12);
  v14 = (char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(_BYTE *)(v1 + *(int *)(type metadata accessor for CircularIconView(0) + 40));
  v16 = &v6[*(int *)(v3 + 20)];
  *v16 = swift_getKeyPath(&unk_1F1E30);
  v17 = sub_5440(&qword_25FAD8);
  swift_storeEnumTagMultiPayload(v16, v17, 0);
  *v6 = v15;
  sub_492DC((uint64_t)v6, (uint64_t)v8);
  v18 = sub_15F904();
  sub_1E428((uint64_t)v8, (uint64_t)v11, type metadata accessor for SymbolImage);
  *(_QWORD *)&v11[*(int *)(v9 + 36)] = v18;
  sub_224DC((uint64_t)v8, type metadata accessor for SymbolImage);
  v19 = sub_15FB44();
  KeyPath = swift_getKeyPath(&unk_1F1E58);
  sub_B3D0((uint64_t)v11, (uint64_t)v14, &qword_260678);
  v21 = (uint64_t *)&v14[*(int *)(v12 + 36)];
  *v21 = KeyPath;
  v21[1] = v19;
  sub_B414((uint64_t)v11, &qword_260678);
  sub_15FCEC();
  v23 = v22;
  v25 = v24;
  v27 = v26;
  v29 = v28;
  v31 = static Edge.Set.all.getter(v30);
  sub_B3D0((uint64_t)v14, a1, &qword_260680);
  v32 = a1 + *(int *)(sub_5440(&qword_260650) + 36);
  *(_BYTE *)v32 = v31;
  *(_QWORD *)(v32 + 8) = v23;
  *(_QWORD *)(v32 + 16) = v25;
  *(_QWORD *)(v32 + 24) = v27;
  *(_QWORD *)(v32 + 32) = v29;
  *(_BYTE *)(v32 + 40) = 0;
  return sub_B414((uint64_t)v14, &qword_260680);
}

uint64_t sub_15F904()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  void (*v24)(char *, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;

  v1 = type metadata accessor for ColorScheme(0);
  v29 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v3 = (char *)&v28 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for ColorConstants.Environment(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for ColorConstants(0);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v28 - v11;
  v13 = type metadata accessor for CircularIconView(0);
  v14 = *(int *)(v13 + 44);
  v15 = *(unsigned __int8 *)(v0 + *(int *)(v13 + 40));
  v16 = *(_QWORD *)(v0 + v14);
  v17 = *(_BYTE *)(v0 + v14 + 8);
  sub_35D60(v16, v17);
  v18 = sub_30DB4(v16, v17);
  sub_35D64(v16, v17);
  if (v15 == 6)
  {
    _s7BooksUI18BuyButtonExternalsV6colorsAA14ColorConstantsVvg_0((uint64_t)v12);
    v19 = _s7BooksUI14ColorConstantsV19booksSecondaryLabel05SwiftB00C0Vvg_0();
    if ((v18 & 1) != 0)
    {
      v20 = Color.opacity(_:)(0.8);
      swift_release(v19);
      v19 = v20;
    }
  }
  else if ((v18 & 1) != 0)
  {
    _s7BooksUI18BuyButtonExternalsV6colorsAA14ColorConstantsVvg_0((uint64_t)v12);
    v19 = _s7BooksUI14ColorConstantsV25vibrantPrimaryButtonLabel05SwiftB00C0Vvg_0();
  }
  else
  {
    _s7BooksUI18BuyButtonExternalsV6colorsAA14ColorConstantsVvg_0((uint64_t)v10);
    sub_1E428((uint64_t)v10, (uint64_t)v6, type metadata accessor for ColorConstants.Environment);
    v21 = v29;
    (*(void (**)(char *, _QWORD, uint64_t))(v29 + 104))(v3, enum case for ColorScheme.dark(_:), v1);
    v22 = sub_4928C();
    v23 = dispatch thunk of static Equatable.== infix(_:_:)(v6, v3, v1, v22);
    v24 = *(void (**)(char *, uint64_t))(v21 + 8);
    v24(v3, v1);
    v25 = ((uint64_t (*)(char *, uint64_t))v24)(v6, v1);
    if ((v23 & 1) != 0)
      v26 = _s7BooksUI14ColorConstantsV25vibrantPrimaryButtonLabel05SwiftB00C0Vvg_0();
    else
      v26 = static Color.black.getter(v25);
    v19 = v26;
    v12 = v10;
  }
  sub_224DC((uint64_t)v12, type metadata accessor for ColorConstants);
  return v19;
}

uint64_t sub_15FB44()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  uint64_t v16;

  v1 = sub_5440(&qword_25FE08);
  __chkstk_darwin(v1);
  v3 = (char *)&v16 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Font.TextStyle(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for FontConstants.Navigation(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_BYTE *)(v0 + *(int *)(type metadata accessor for CircularIconView(0) + 40)) == 6)
    return static Font.headline.getter();
  sub_3226C((uint64_t)v10);
  (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for Font.TextStyle.callout(_:), v4);
  v12 = type metadata accessor for Font.Design(0);
  v13 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v3, 1, 1, v12);
  v14 = static Font.Weight.semibold.getter(v13);
  v15 = static Font.system(_:design:weight:)(v7, v3, *(_QWORD *)&v14, 0);
  sub_B414((uint64_t)v3, &qword_25FE08);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  sub_224DC((uint64_t)v10, type metadata accessor for FontConstants.Navigation);
  return v15;
}

void sub_15FCEC()
{
  uint64_t v0;
  char *v1;

  v1 = (char *)&loc_15FD40
     + dword_15FF84[*(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for CircularIconView(0) + 40))];
  __asm { BR              X9 }
}

uint64_t sub_15FD50()
{
  char v1;
  uint64_t result;

  v1 = _stringCompareWithSmolCheck(_:_:expecting:)(0x72616D6B63656863, 0xE90000000000006BLL, 0xD000000000000013, 0x80000000001F9710, 0);
  result = swift_bridgeObjectRelease(0xE90000000000006BLL);
  if ((v1 & 1) != 0)
    __asm { BR              X10 }
  return result;
}

uint64_t sub_15FFC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8;

  v8 = sub_1600EC();
  return static EnvironmentKey<>._valuesEqual(_:_:)(a1, a2, a3, a4, v8);
}

_QWORD *sub_160018@<X0>(_QWORD *a1@<X8>)
{
  unint64_t v2;

  v2 = sub_C88C8();
  return EnvironmentValues.subscript.getter(a1, &type metadata for CircularIconSizeKey, &type metadata for CircularIconSizeKey, v2);
}

uint64_t View.circularIcon(size:)(char *a1, uint64_t a2, uint64_t a3)
{
  char v5;
  uint64_t KeyPath;
  char v8;

  v5 = *a1;
  KeyPath = swift_getKeyPath(&unk_1F1C90);
  v8 = v5;
  View.environment<A>(_:_:)(KeyPath, &v8, a2, a3);
  return swift_release(KeyPath);
}

unint64_t sub_1600EC()
{
  unint64_t result;

  result = qword_2689A8;
  if (!qword_2689A8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CircularIconView.Size, &type metadata for CircularIconView.Size);
    atomic_store(result, (unint64_t *)&qword_2689A8);
  }
  return result;
}

uint64_t sub_160130(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &opaque type descriptor for <<opaque return type of CircularIconView.body>>, 1);
}

_QWORD *initializeBufferWithCopyOfBuffer for CircularIconView(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _WORD *v15;
  _WORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  char v55;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = sub_5440(&qword_25F1E8);
    if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
    {
      v8 = type metadata accessor for ColorScheme(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      v9 = a1;
      v10 = v7;
      v11 = 1;
    }
    else
    {
      v13 = *a2;
      *a1 = *a2;
      swift_retain(v13);
      v9 = a1;
      v10 = v7;
      v11 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v10, v11);
    v14 = a3[5];
    v15 = (_WORD *)((char *)a1 + v14);
    v16 = (_WORD *)((char *)a2 + v14);
    v17 = sub_5440(&qword_25FAC8);
    if (swift_getEnumCaseMultiPayload(v16, v17) == 1)
    {
      *v15 = *v16;
      v18 = type metadata accessor for FontConstants.Environment(0);
      v19 = *(int *)(v18 + 24);
      v20 = (char *)v15 + v19;
      v21 = (char *)v16 + v19;
      v22 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v20, v21, v22);
      *(_QWORD *)((char *)v15 + *(int *)(v18 + 28)) = *(_QWORD *)((char *)v16 + *(int *)(v18 + 28));
      v23 = 1;
    }
    else
    {
      v24 = *(_QWORD *)v16;
      *(_QWORD *)v15 = *(_QWORD *)v16;
      swift_retain(v24);
      v23 = 0;
    }
    swift_storeEnumTagMultiPayload(v15, v17, v23);
    v25 = a3[6];
    v26 = (char *)a1 + v25;
    v27 = (char *)a2 + v25;
    v28 = *(_QWORD *)v27;
    v29 = v27[8];
    sub_35D60(*(_QWORD *)v27, v29);
    *(_QWORD *)v26 = v28;
    v26[8] = v29;
    v30 = a3[7];
    v31 = (_QWORD *)((char *)a1 + v30);
    v32 = (_QWORD *)((char *)a2 + v30);
    v33 = sub_5440(&qword_25E948);
    if (swift_getEnumCaseMultiPayload(v32, v33) == 1)
    {
      v34 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v34 - 8) + 16))(v31, v32, v34);
      v35 = 1;
    }
    else
    {
      v36 = *v32;
      *v31 = *v32;
      swift_retain(v36);
      v35 = 0;
    }
    swift_storeEnumTagMultiPayload(v31, v33, v35);
    v37 = a3[8];
    v38 = (_QWORD *)((char *)a1 + v37);
    v39 = (_QWORD *)((char *)a2 + v37);
    v40 = sub_5440(&qword_25F208);
    if (swift_getEnumCaseMultiPayload(v39, v40) == 1)
    {
      v41 = type metadata accessor for BlendMode(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v41 - 8) + 16))(v38, v39, v41);
      v42 = v38;
      v43 = v40;
      v44 = 1;
    }
    else
    {
      v45 = *v39;
      *v38 = *v39;
      swift_retain(v45);
      v42 = v38;
      v43 = v40;
      v44 = 0;
    }
    swift_storeEnumTagMultiPayload(v42, v43, v44);
    v46 = a3[9];
    v47 = (char *)a1 + v46;
    v48 = (char *)a2 + v46;
    v49 = *(_QWORD *)v48;
    v50 = v48[8];
    sub_35D60(*(_QWORD *)v48, v50);
    *(_QWORD *)v47 = v49;
    v47[8] = v50;
    v51 = a3[11];
    *((_BYTE *)a1 + a3[10]) = *((_BYTE *)a2 + a3[10]);
    v52 = (char *)a1 + v51;
    v53 = (char *)a2 + v51;
    v54 = *(_QWORD *)((char *)a2 + v51);
    v55 = v53[8];
    sub_35D60(v54, v55);
    *(_QWORD *)v52 = v54;
    v52[8] = v55;
  }
  return a1;
}

uint64_t destroy for CircularIconView(_QWORD *a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;

  v4 = sub_5440(&qword_25F1E8);
  if (swift_getEnumCaseMultiPayload(a1, v4) == 1)
  {
    v5 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  }
  else
  {
    swift_release(*a1);
  }
  v6 = (_QWORD *)((char *)a1 + a2[5]);
  v7 = sub_5440(&qword_25FAC8);
  if (swift_getEnumCaseMultiPayload(v6, v7) == 1)
  {
    v8 = (char *)v6 + *(int *)(type metadata accessor for FontConstants.Environment(0) + 24);
    v9 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  }
  else
  {
    swift_release(*v6);
  }
  sub_35D64(*(_QWORD *)((char *)a1 + a2[6]), *((_BYTE *)a1 + a2[6] + 8));
  v10 = (_QWORD *)((char *)a1 + a2[7]);
  v11 = sub_5440(&qword_25E948);
  if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
  {
    v12 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v10, v12);
  }
  else
  {
    swift_release(*v10);
  }
  v13 = (_QWORD *)((char *)a1 + a2[8]);
  v14 = sub_5440(&qword_25F208);
  if (swift_getEnumCaseMultiPayload(v13, v14) == 1)
  {
    v15 = type metadata accessor for BlendMode(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v13, v15);
  }
  else
  {
    swift_release(*v13);
  }
  sub_35D64(*(_QWORD *)((char *)a1 + a2[9]), *((_BYTE *)a1 + a2[9] + 8));
  return sub_35D64(*(_QWORD *)((char *)a1 + a2[11]), *((_BYTE *)a1 + a2[11] + 8));
}

_QWORD *initializeWithCopy for CircularIconView(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _WORD *v13;
  _WORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  char v53;

  v6 = sub_5440(&qword_25F1E8);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a1;
    v9 = v6;
    v10 = 1;
  }
  else
  {
    v11 = *a2;
    *a1 = *a2;
    swift_retain(v11);
    v8 = a1;
    v9 = v6;
    v10 = 0;
  }
  swift_storeEnumTagMultiPayload(v8, v9, v10);
  v12 = a3[5];
  v13 = (_WORD *)((char *)a1 + v12);
  v14 = (_WORD *)((char *)a2 + v12);
  v15 = sub_5440(&qword_25FAC8);
  if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
  {
    *v13 = *v14;
    v16 = type metadata accessor for FontConstants.Environment(0);
    v17 = *(int *)(v16 + 24);
    v18 = (char *)v13 + v17;
    v19 = (char *)v14 + v17;
    v20 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v18, v19, v20);
    *(_QWORD *)((char *)v13 + *(int *)(v16 + 28)) = *(_QWORD *)((char *)v14 + *(int *)(v16 + 28));
    v21 = 1;
  }
  else
  {
    v22 = *(_QWORD *)v14;
    *(_QWORD *)v13 = *(_QWORD *)v14;
    swift_retain(v22);
    v21 = 0;
  }
  swift_storeEnumTagMultiPayload(v13, v15, v21);
  v23 = a3[6];
  v24 = (char *)a1 + v23;
  v25 = (char *)a2 + v23;
  v26 = *(_QWORD *)v25;
  v27 = v25[8];
  sub_35D60(*(_QWORD *)v25, v27);
  *(_QWORD *)v24 = v26;
  v24[8] = v27;
  v28 = a3[7];
  v29 = (_QWORD *)((char *)a1 + v28);
  v30 = (_QWORD *)((char *)a2 + v28);
  v31 = sub_5440(&qword_25E948);
  if (swift_getEnumCaseMultiPayload(v30, v31) == 1)
  {
    v32 = type metadata accessor for ColorScheme(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v32 - 8) + 16))(v29, v30, v32);
    v33 = 1;
  }
  else
  {
    v34 = *v30;
    *v29 = *v30;
    swift_retain(v34);
    v33 = 0;
  }
  swift_storeEnumTagMultiPayload(v29, v31, v33);
  v35 = a3[8];
  v36 = (_QWORD *)((char *)a1 + v35);
  v37 = (_QWORD *)((char *)a2 + v35);
  v38 = sub_5440(&qword_25F208);
  if (swift_getEnumCaseMultiPayload(v37, v38) == 1)
  {
    v39 = type metadata accessor for BlendMode(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v39 - 8) + 16))(v36, v37, v39);
    v40 = v36;
    v41 = v38;
    v42 = 1;
  }
  else
  {
    v43 = *v37;
    *v36 = *v37;
    swift_retain(v43);
    v40 = v36;
    v41 = v38;
    v42 = 0;
  }
  swift_storeEnumTagMultiPayload(v40, v41, v42);
  v44 = a3[9];
  v45 = (char *)a1 + v44;
  v46 = (char *)a2 + v44;
  v47 = *(_QWORD *)v46;
  v48 = v46[8];
  sub_35D60(*(_QWORD *)v46, v48);
  *(_QWORD *)v45 = v47;
  v45[8] = v48;
  v49 = a3[11];
  *((_BYTE *)a1 + a3[10]) = *((_BYTE *)a2 + a3[10]);
  v50 = (char *)a1 + v49;
  v51 = (char *)a2 + v49;
  v52 = *(_QWORD *)((char *)a2 + v49);
  v53 = v51[8];
  sub_35D60(v52, v53);
  *(_QWORD *)v50 = v52;
  v50[8] = v53;
  return a1;
}

_QWORD *assignWithCopy for CircularIconView(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  char v59;

  if (a1 != a2)
  {
    sub_B414((uint64_t)a1, &qword_25F1E8);
    v6 = sub_5440(&qword_25F1E8);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for ColorScheme(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = v6;
      v10 = 1;
    }
    else
    {
      v11 = *a2;
      *a1 = *a2;
      swift_retain(v11);
      v8 = a1;
      v9 = v6;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
    v12 = a3[5];
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    sub_B414((uint64_t)a1 + v12, &qword_25FAC8);
    v15 = sub_5440(&qword_25FAC8);
    if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
    {
      *v13 = *v14;
      v13[1] = v14[1];
      v16 = type metadata accessor for FontConstants.Environment(0);
      v17 = *(int *)(v16 + 24);
      v18 = &v13[v17];
      v19 = &v14[v17];
      v20 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v18, v19, v20);
      *(_QWORD *)&v13[*(int *)(v16 + 28)] = *(_QWORD *)&v14[*(int *)(v16 + 28)];
      v21 = 1;
    }
    else
    {
      v22 = *(_QWORD *)v14;
      *(_QWORD *)v13 = *(_QWORD *)v14;
      swift_retain(v22);
      v21 = 0;
    }
    swift_storeEnumTagMultiPayload(v13, v15, v21);
  }
  v23 = a3[6];
  v24 = (char *)a1 + v23;
  v25 = (char *)a2 + v23;
  v26 = *(_QWORD *)v25;
  v27 = v25[8];
  sub_35D60(*(_QWORD *)v25, v27);
  v28 = *(_QWORD *)v24;
  v29 = v24[8];
  *(_QWORD *)v24 = v26;
  v24[8] = v27;
  sub_35D64(v28, v29);
  if (a1 != a2)
  {
    v30 = a3[7];
    v31 = (_QWORD *)((char *)a1 + v30);
    v32 = (_QWORD *)((char *)a2 + v30);
    sub_B414((uint64_t)a1 + v30, &qword_25E948);
    v33 = sub_5440(&qword_25E948);
    if (swift_getEnumCaseMultiPayload(v32, v33) == 1)
    {
      v34 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v34 - 8) + 16))(v31, v32, v34);
      v35 = 1;
    }
    else
    {
      v36 = *v32;
      *v31 = *v32;
      swift_retain(v36);
      v35 = 0;
    }
    swift_storeEnumTagMultiPayload(v31, v33, v35);
    v37 = a3[8];
    v38 = (_QWORD *)((char *)a1 + v37);
    v39 = (_QWORD *)((char *)a2 + v37);
    sub_B414((uint64_t)a1 + v37, &qword_25F208);
    v40 = sub_5440(&qword_25F208);
    if (swift_getEnumCaseMultiPayload(v39, v40) == 1)
    {
      v41 = type metadata accessor for BlendMode(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v41 - 8) + 16))(v38, v39, v41);
      v42 = v38;
      v43 = v40;
      v44 = 1;
    }
    else
    {
      v45 = *v39;
      *v38 = *v39;
      swift_retain(v45);
      v42 = v38;
      v43 = v40;
      v44 = 0;
    }
    swift_storeEnumTagMultiPayload(v42, v43, v44);
  }
  v46 = a3[9];
  v47 = (char *)a1 + v46;
  v48 = (char *)a2 + v46;
  v49 = *(_QWORD *)v48;
  v50 = v48[8];
  sub_35D60(*(_QWORD *)v48, v50);
  v51 = *(_QWORD *)v47;
  v52 = v47[8];
  *(_QWORD *)v47 = v49;
  v47[8] = v50;
  sub_35D64(v51, v52);
  *((_BYTE *)a1 + a3[10]) = *((_BYTE *)a2 + a3[10]);
  v53 = a3[11];
  v54 = (char *)a1 + v53;
  v55 = (char *)a2 + v53;
  v56 = *(_QWORD *)v55;
  v57 = v55[8];
  sub_35D60(*(_QWORD *)v55, v57);
  v58 = *(_QWORD *)v54;
  v59 = v54[8];
  *(_QWORD *)v54 = v56;
  v54[8] = v57;
  sub_35D64(v58, v59);
  return a1;
}

char *initializeWithTake for CircularIconView(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  char *v35;
  char *v36;

  v6 = sub_5440(&qword_25F1E8);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for ColorScheme(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v8 = a3[5];
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = sub_5440(&qword_25FAC8);
  if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
  {
    *(_WORD *)v9 = *(_WORD *)v10;
    v12 = type metadata accessor for FontConstants.Environment(0);
    v13 = *(int *)(v12 + 24);
    v14 = &v9[v13];
    v15 = &v10[v13];
    v16 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v14, v15, v16);
    *(_QWORD *)&v9[*(int *)(v12 + 28)] = *(_QWORD *)&v10[*(int *)(v12 + 28)];
    swift_storeEnumTagMultiPayload(v9, v11, 1);
  }
  else
  {
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  v17 = a3[6];
  v18 = a3[7];
  v19 = &a1[v17];
  v20 = &a2[v17];
  *(_QWORD *)v19 = *(_QWORD *)v20;
  v19[8] = v20[8];
  v21 = &a1[v18];
  v22 = &a2[v18];
  v23 = sub_5440(&qword_25E948);
  if (swift_getEnumCaseMultiPayload(v22, v23) == 1)
  {
    v24 = type metadata accessor for ColorScheme(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 32))(v21, v22, v24);
    swift_storeEnumTagMultiPayload(v21, v23, 1);
  }
  else
  {
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
  }
  v25 = a3[8];
  v26 = &a1[v25];
  v27 = &a2[v25];
  v28 = sub_5440(&qword_25F208);
  if (swift_getEnumCaseMultiPayload(v27, v28) == 1)
  {
    v29 = type metadata accessor for BlendMode(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v29 - 8) + 32))(v26, v27, v29);
    swift_storeEnumTagMultiPayload(v26, v28, 1);
  }
  else
  {
    memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
  }
  v30 = a3[9];
  v31 = a3[10];
  v32 = &a1[v30];
  v33 = &a2[v30];
  *(_QWORD *)v32 = *(_QWORD *)v33;
  v32[8] = v33[8];
  a1[v31] = a2[v31];
  v34 = a3[11];
  v35 = &a1[v34];
  v36 = &a2[v34];
  *(_QWORD *)v35 = *(_QWORD *)v36;
  v35[8] = v36[8];
  return a1;
}

char *assignWithTake for CircularIconView(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char v44;

  if (a1 != a2)
  {
    sub_B414((uint64_t)a1, &qword_25F1E8);
    v6 = sub_5440(&qword_25F1E8);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for ColorScheme(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
    v8 = a3[5];
    v9 = &a1[v8];
    v10 = &a2[v8];
    sub_B414((uint64_t)&a1[v8], &qword_25FAC8);
    v11 = sub_5440(&qword_25FAC8);
    if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
    {
      *(_WORD *)v9 = *(_WORD *)v10;
      v12 = type metadata accessor for FontConstants.Environment(0);
      v13 = *(int *)(v12 + 24);
      v14 = &v9[v13];
      v15 = &v10[v13];
      v16 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v14, v15, v16);
      *(_QWORD *)&v9[*(int *)(v12 + 28)] = *(_QWORD *)&v10[*(int *)(v12 + 28)];
      swift_storeEnumTagMultiPayload(v9, v11, 1);
    }
    else
    {
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    }
  }
  v17 = a3[6];
  v18 = &a1[v17];
  v19 = &a2[v17];
  v20 = *(_QWORD *)v19;
  LOBYTE(v19) = v19[8];
  v21 = *(_QWORD *)v18;
  v22 = v18[8];
  *(_QWORD *)v18 = v20;
  v18[8] = (char)v19;
  sub_35D64(v21, v22);
  if (a1 != a2)
  {
    v23 = a3[7];
    v24 = &a1[v23];
    v25 = &a2[v23];
    sub_B414((uint64_t)&a1[v23], &qword_25E948);
    v26 = sub_5440(&qword_25E948);
    if (swift_getEnumCaseMultiPayload(v25, v26) == 1)
    {
      v27 = type metadata accessor for ColorScheme(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 32))(v24, v25, v27);
      swift_storeEnumTagMultiPayload(v24, v26, 1);
    }
    else
    {
      memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    }
    v28 = a3[8];
    v29 = &a1[v28];
    v30 = &a2[v28];
    sub_B414((uint64_t)&a1[v28], &qword_25F208);
    v31 = sub_5440(&qword_25F208);
    if (swift_getEnumCaseMultiPayload(v30, v31) == 1)
    {
      v32 = type metadata accessor for BlendMode(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v32 - 8) + 32))(v29, v30, v32);
      swift_storeEnumTagMultiPayload(v29, v31, 1);
    }
    else
    {
      memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
    }
  }
  v33 = a3[9];
  v34 = &a1[v33];
  v35 = &a2[v33];
  v36 = *(_QWORD *)v35;
  LOBYTE(v35) = v35[8];
  v37 = *(_QWORD *)v34;
  v38 = v34[8];
  *(_QWORD *)v34 = v36;
  v34[8] = (char)v35;
  sub_35D64(v37, v38);
  v39 = a3[11];
  a1[a3[10]] = a2[a3[10]];
  v40 = &a1[v39];
  v41 = &a2[v39];
  v42 = *(_QWORD *)v41;
  LOBYTE(v41) = v41[8];
  v43 = *(_QWORD *)v40;
  v44 = v40[8];
  *(_QWORD *)v40 = v42;
  v40[8] = (char)v41;
  sub_35D64(v43, v44);
  return a1;
}

uint64_t getEnumTagSinglePayload for CircularIconView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1611B0);
}

uint64_t sub_1611B0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;

  v6 = sub_5440(&qword_25F210);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = sub_5440(&qword_260578);
  v10 = *(_QWORD *)(v9 - 8);
  if (*(_DWORD *)(v10 + 84) == (_DWORD)a2)
  {
    v11 = v9;
    v12 = a3[5];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1 + v12, a2, v11);
  }
  if ((_DWORD)a2 != 254)
  {
    v14 = sub_5440(&qword_25EAE8);
    v10 = *(_QWORD *)(v14 - 8);
    if (*(_DWORD *)(v10 + 84) == (_DWORD)a2)
    {
      v11 = v14;
      v12 = a3[7];
    }
    else
    {
      v11 = sub_5440(&qword_25F228);
      v10 = *(_QWORD *)(v11 - 8);
      v12 = a3[8];
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1 + v12, a2, v11);
  }
  v13 = *(unsigned __int8 *)(a1 + a3[6] + 8);
  if (v13 > 1)
    return (v13 ^ 0xFF) + 1;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for CircularIconView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1612B8);
}

uint64_t sub_1612B8(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = sub_5440(&qword_25F210);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    result = sub_5440(&qword_260578);
    v14 = *(_QWORD *)(result - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = result;
      v15 = a4[5];
    }
    else
    {
      if (a3 == 254)
      {
        *(_BYTE *)(a1 + a4[6] + 8) = -(char)a2;
        return result;
      }
      v16 = sub_5440(&qword_25EAE8);
      v14 = *(_QWORD *)(v16 - 8);
      if (*(_DWORD *)(v14 + 84) == a3)
      {
        v10 = v16;
        v15 = a4[7];
      }
      else
      {
        v10 = sub_5440(&qword_25F228);
        v14 = *(_QWORD *)(v10 - 8);
        v15 = a4[8];
      }
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_1613B4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD v10[8];

  sub_2ADCC(319, (unint64_t *)&qword_25F298, type metadata accessor for ColorConstants);
  if (v3 <= 0x3F)
  {
    v10[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_2ADCC(319, (unint64_t *)&unk_2605E8, type metadata accessor for FontConstants.Navigation);
    if (v5 <= 0x3F)
    {
      v10[1] = *(_QWORD *)(v4 - 8) + 64;
      v10[2] = "\t";
      sub_2ADCC(319, (unint64_t *)&qword_25EB58, (uint64_t (*)(uint64_t))&type metadata accessor for ColorScheme);
      if (v7 <= 0x3F)
      {
        v10[3] = *(_QWORD *)(v6 - 8) + 64;
        sub_2ADCC(319, (unint64_t *)&qword_25F2B0, (uint64_t (*)(uint64_t))&type metadata accessor for BlendMode);
        if (v9 <= 0x3F)
        {
          v10[4] = *(_QWORD *)(v8 - 8) + 64;
          v10[5] = "\t";
          v10[6] = &unk_1F1DD0;
          v10[7] = "\t";
          swift_initStructMetadata(a1, 256, 8, v10, a1 + 16);
        }
      }
    }
  }
}

uint64_t storeEnumTagSinglePayload for CircularIconView.Size(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_161510 + 4 * byte_1F1B85[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_161544 + 4 * byte_1F1B80[v4]))();
}

uint64_t sub_161544(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_16154C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x161554);
  return result;
}

uint64_t sub_161560(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x161568);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_16156C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_161574(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CircularIconView.Size()
{
  return &type metadata for CircularIconView.Size;
}

unint64_t sub_161594()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_268A58;
  if (!qword_268A58)
  {
    v1 = sub_7EF8(&qword_268990);
    v2[0] = sub_7EF8(&qword_268980);
    v2[1] = sub_7FD8(&qword_2689A0, &qword_268980, (uint64_t)&protocol conformance descriptor for ZStack<A>);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.dynamicTypeSize(_:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_268A58);
  }
  return result;
}

uint64_t sub_161648(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *a1;
  v2 = sub_7EF8(&qword_268A60);
  v3 = type metadata accessor for ModifiedContent(255, v1, v2);
  sub_7FD8(&qword_268A68, &qword_268A60, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
  return swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v3);
}

ValueMetadata *type metadata accessor for CircularIconSizeKey()
{
  return &type metadata for CircularIconSizeKey;
}

uint64_t SeriesHeaderCoverStackCoverLayout.model.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_51C90(v1 + 64, a1);
}

double SeriesHeaderCoverStackCoverLayout.zIndex.getter()
{
  unsigned __int8 *v0;

  return (double)-(uint64_t)*v0;
}

uint64_t sub_161710()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(double, double))((char *)sub_161734 + 4 * byte_1F1F10[*v0]))(0.0, 0.0);
}

uint64_t sub_161734@<X0>(int a1@<W8>)
{
  double *v1;

  return ((uint64_t (*)(double))((char *)sub_1617D8 + 4 * byte_1F1F15[a1 - 1]))((v1[3] * v1[2]
                                                                                         - v1[3] * 0.7 * v1[1])
                                                                                        * 0.5 + v1[3] * v1[7] * 0.45);
}

double sub_1617D8(double a1)
{
  return a1 * 1.0;
}

uint64_t sub_161808()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_161824 + 4 * byte_1F1F19[*v0]))();
}

double sub_161824()
{
  uint64_t v0;

  return *(double *)(v0 + 24) * 0.7;
}

double sub_16183C()
{
  uint64_t v0;

  return *(double *)(v0 + 24);
}

double sub_161844()
{
  uint64_t v0;

  return *(double *)(v0 + 24) * 0.86;
}

double sub_161858()
{
  uint64_t v0;
  unint64_t v1;
  double v2;

  v1 = *(_QWORD *)(v0 + 32) - 3;
  v2 = 0.0;
  if (v1 <= 2)
    v2 = dbl_1F2050[v1];
  return v2 * *(double *)(v0 + 24);
}

void SeriesHeaderCoverStackCoverLayout.scale(forOverscrollOffset:)(double a1)
{
  uint64_t v1;
  double v2;
  unint64_t v3;
  _QWORD v4[3];
  uint64_t v5;

  *(double *)&v4[2] = a1 / *(double *)(v1 + 24);
  v2 = *(double *)(v1 + 40);
  if (v2 < 0.0)
  {
    __break(1u);
  }
  else
  {
    v4[0] = 0;
    *(double *)&v4[1] = v2;
    v3 = sub_C26BC();
    Comparable.clamped(_:)(&v5, v4, &type metadata for CGFloat, v3);
  }
}

void SeriesHeaderCoverStackCoverLayout.offset(forOverscrollOffset:)(double a1)
{
  double *v1;
  double v2;
  unint64_t v3;
  int v4;
  _QWORD v5[3];
  uint64_t v6;

  *(double *)&v5[2] = a1 / v1[3];
  v2 = v1[5];
  if (v2 < 0.0)
  {
    __break(1u);
  }
  else
  {
    v5[0] = 0;
    *(double *)&v5[1] = v2;
    v3 = sub_C26BC();
    Comparable.clamped(_:)(&v6, v5, &type metadata for CGFloat, v3);
    v4 = *(unsigned __int8 *)v1;
    sub_161710();
    if (v4)
      sub_161808();
  }
}

unint64_t sub_1619F4@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_161ABC(*a1);
  *a2 = result;
  return result;
}

void sub_161A1C(_QWORD *a1@<X8>)
{
  unsigned __int8 *v1;

  *a1 = *v1;
}

BOOL _s7BooksUI022SeriesHeaderCoverStackE6LayoutV2eeoiySbAC_ACtFZ_0(double *a1, double *a2)
{
  return *(unsigned __int8 *)a1 == *(unsigned __int8 *)a2
      && a1[1] == a2[1]
      && a1[2] == a2[2]
      && a1[3] == a2[3]
      && *((_QWORD *)a1 + 4) == *((_QWORD *)a2 + 4)
      && a1[5] == a2[5]
      && a1[6] == a2[6]
      && a1[7] == a2[7]
      && _s7BooksUI14CoverViewModelV2eeoiySbAC_ACtFZ_0((uint64_t)(a1 + 8), (uint64_t)(a2 + 8));
}

unint64_t sub_161ABC(unint64_t result)
{
  if (result >= 5)
    return 5;
  return result;
}

uint64_t _s7BooksUI022SeriesHeaderCoverStackE6LayoutV6height3for12CoreGraphics7CGFloatVSo6CGSizeV_tF_0()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_161AE8 + 4 * byte_1F1F1E[*v0]))();
}

double sub_161AE8()
{
  uint64_t v0;

  return *(double *)(v0 + 24) * 0.7;
}

double sub_161B00()
{
  uint64_t v0;

  return *(double *)(v0 + 24);
}

double sub_161B08()
{
  uint64_t v0;

  return *(double *)(v0 + 24) * 0.86;
}

double sub_161B1C()
{
  uint64_t v0;
  unint64_t v1;
  double v2;

  v1 = *(_QWORD *)(v0 + 32) - 3;
  v2 = 0.0;
  if (v1 < 3)
    v2 = dbl_1F2050[v1];
  return v2 * *(double *)(v0 + 24);
}

unint64_t sub_161B48(uint64_t a1)
{
  unint64_t result;

  result = sub_161B6C();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_161B6C()
{
  unint64_t result;

  result = qword_268A88;
  if (!qword_268A88)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for SeriesHeaderCoverStackCoverLayout, &type metadata for SeriesHeaderCoverStackCoverLayout);
    atomic_store(result, (unint64_t *)&qword_268A88);
  }
  return result;
}

uint64_t destroy for SeriesHeaderCoverStackCoverLayout(uint64_t a1)
{
  uint64_t result;

  if (!*(_BYTE *)(a1 + 120))
    _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)(a1 + 64));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 168));
  result = *(_QWORD *)(a1 + 184);
  if (result)
  {
    swift_bridgeObjectRelease(result);
    swift_bridgeObjectRelease(*(_QWORD *)(a1 + 200));
    return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 224));
  }
  return result;
}

uint64_t initializeWithCopy for SeriesHeaderCoverStackCoverLayout(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  _OWORD *v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v4 = (_OWORD *)(a1 + 64);
  v5 = (_OWORD *)(a2 + 64);
  if (*(_BYTE *)(a2 + 120))
  {
    v6 = v5[1];
    *v4 = *v5;
    v4[1] = v6;
    v4[2] = v5[2];
    *(_OWORD *)((char *)v4 + 41) = *(_OWORD *)((char *)v5 + 41);
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 88) = v7;
    (**(void (***)(_OWORD *, _OWORD *))(v7 - 8))(v4, v5);
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
    *(_BYTE *)(a1 + 120) = 0;
  }
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  v8 = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 168) = v8;
  v9 = *(_QWORD *)(a2 + 184);
  swift_bridgeObjectRetain(v8);
  if (v9)
  {
    *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
    *(_QWORD *)(a1 + 184) = v9;
    v10 = *(_QWORD *)(a2 + 200);
    *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
    *(_QWORD *)(a1 + 200) = v10;
    *(_BYTE *)(a1 + 208) = *(_BYTE *)(a2 + 208);
    v11 = *(_QWORD *)(a2 + 216);
    v12 = *(_QWORD *)(a2 + 224);
    *(_QWORD *)(a1 + 216) = v11;
    *(_QWORD *)(a1 + 224) = v12;
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v10);
    swift_bridgeObjectRetain(v12);
  }
  else
  {
    v13 = *(_OWORD *)(a2 + 192);
    *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
    *(_OWORD *)(a1 + 192) = v13;
    *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
    *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  }
  return a1;
}

uint64_t assignWithCopy for SeriesHeaderCoverStackCoverLayout(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  __int128 *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  __int128 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  if (a1 != a2)
  {
    v4 = (_OWORD *)(a1 + 64);
    v5 = (__int128 *)(a2 + 64);
    sub_C4388(a1 + 64);
    if (*(_BYTE *)(a2 + 120))
    {
      v6 = *v5;
      v7 = *(_OWORD *)(a2 + 80);
      v8 = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 105) = *(_OWORD *)(a2 + 105);
      *(_OWORD *)(a1 + 80) = v7;
      *(_OWORD *)(a1 + 96) = v8;
      *v4 = v6;
    }
    else
    {
      v9 = *(_QWORD *)(a2 + 88);
      *(_QWORD *)(a1 + 88) = v9;
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      (**(void (***)(uint64_t, uint64_t))(v9 - 8))(a1 + 64, a2 + 64);
      *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
      *(_BYTE *)(a1 + 120) = 0;
    }
  }
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  v10 = *(_QWORD *)(a2 + 168);
  v11 = *(_QWORD *)(a1 + 168);
  *(_QWORD *)(a1 + 168) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  v12 = (_OWORD *)(a1 + 176);
  v13 = (__int128 *)(a2 + 176);
  v14 = *(_QWORD *)(a1 + 184);
  v15 = *(_QWORD *)(a2 + 184);
  if (v14)
  {
    if (v15)
    {
      *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
      v16 = *(_QWORD *)(a2 + 184);
      *(_QWORD *)(a1 + 184) = v16;
      swift_bridgeObjectRetain(v16);
      swift_bridgeObjectRelease(v14);
      *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
      v17 = *(_QWORD *)(a2 + 200);
      v18 = *(_QWORD *)(a1 + 200);
      *(_QWORD *)(a1 + 200) = v17;
      swift_bridgeObjectRetain(v17);
      swift_bridgeObjectRelease(v18);
      *(_BYTE *)(a1 + 208) = *(_BYTE *)(a2 + 208);
      *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
      v19 = *(_QWORD *)(a2 + 224);
      v20 = *(_QWORD *)(a1 + 224);
      *(_QWORD *)(a1 + 224) = v19;
      swift_bridgeObjectRetain(v19);
      swift_bridgeObjectRelease(v20);
    }
    else
    {
      sub_C5344((_QWORD *)(a1 + 176));
      v25 = *(_OWORD *)(a2 + 192);
      v24 = *(_OWORD *)(a2 + 208);
      v26 = *v13;
      *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
      *(_OWORD *)(a1 + 192) = v25;
      *(_OWORD *)(a1 + 208) = v24;
      *v12 = v26;
    }
  }
  else if (v15)
  {
    *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
    v21 = *(_QWORD *)(a2 + 184);
    *(_QWORD *)(a1 + 184) = v21;
    *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
    v22 = *(_QWORD *)(a2 + 200);
    *(_QWORD *)(a1 + 200) = v22;
    *(_BYTE *)(a1 + 208) = *(_BYTE *)(a2 + 208);
    *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
    v23 = *(_QWORD *)(a2 + 224);
    *(_QWORD *)(a1 + 224) = v23;
    swift_bridgeObjectRetain(v21);
    swift_bridgeObjectRetain(v22);
    swift_bridgeObjectRetain(v23);
  }
  else
  {
    v27 = *v13;
    v28 = *(_OWORD *)(a2 + 192);
    v29 = *(_OWORD *)(a2 + 208);
    *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
    *(_OWORD *)(a1 + 192) = v28;
    *(_OWORD *)(a1 + 208) = v29;
    *v12 = v27;
  }
  return a1;
}

__n128 initializeWithTake for SeriesHeaderCoverStackCoverLayout(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __n128 result;
  __int128 v11;
  __int128 v12;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  v4 = a2[3];
  v5 = a2[4];
  v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  v7 = a2[7];
  v8 = a2[8];
  v9 = a2[10];
  *(_OWORD *)(a1 + 144) = a2[9];
  *(_OWORD *)(a1 + 160) = v9;
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  result = (__n128)a2[11];
  v11 = a2[12];
  v12 = a2[13];
  *(_QWORD *)(a1 + 224) = *((_QWORD *)a2 + 28);
  *(_OWORD *)(a1 + 192) = v11;
  *(_OWORD *)(a1 + 208) = v12;
  *(__n128 *)(a1 + 176) = result;
  return result;
}

uint64_t assignWithTake for SeriesHeaderCoverStackCoverLayout(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  if (a1 != a2)
  {
    sub_C4388(a1 + 64);
    v4 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v4;
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 105) = *(_OWORD *)(a2 + 105);
  }
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  v5 = *(_QWORD *)(a2 + 168);
  v6 = *(_QWORD *)(a1 + 168);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = v5;
  swift_bridgeObjectRelease(v6);
  v7 = *(_QWORD *)(a1 + 184);
  if (!v7)
    goto LABEL_7;
  v8 = *(_QWORD *)(a2 + 184);
  if (!v8)
  {
    sub_C5344((_QWORD *)(a1 + 176));
LABEL_7:
    v13 = *(_OWORD *)(a2 + 192);
    *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
    *(_OWORD *)(a1 + 192) = v13;
    *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
    *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
    return a1;
  }
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 184) = v8;
  swift_bridgeObjectRelease(v7);
  v9 = *(_QWORD *)(a2 + 200);
  v10 = *(_QWORD *)(a1 + 200);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 200) = v9;
  swift_bridgeObjectRelease(v10);
  *(_BYTE *)(a1 + 208) = *(_BYTE *)(a2 + 208);
  v11 = *(_QWORD *)(a2 + 224);
  v12 = *(_QWORD *)(a1 + 224);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 224) = v11;
  swift_bridgeObjectRelease(v12);
  return a1;
}

uint64_t getEnumTagSinglePayload for SeriesHeaderCoverStackCoverLayout(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 232))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 168);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SeriesHeaderCoverStackCoverLayout(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 232) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 168) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 232) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SeriesHeaderCoverStackCoverLayout()
{
  return &type metadata for SeriesHeaderCoverStackCoverLayout;
}

uint64_t storeEnumTagSinglePayload for SeriesHeaderCoverStackCoverLayout.Position(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1621E8 + 4 * byte_1F1F28[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_16221C + 4 * byte_1F1F23[v4]))();
}

uint64_t sub_16221C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_162224(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x16222CLL);
  return result;
}

uint64_t sub_162238(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x162240);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_162244(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_16224C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SeriesHeaderCoverStackCoverLayout.Position()
{
  return &type metadata for SeriesHeaderCoverStackCoverLayout.Position;
}

unint64_t sub_16226C()
{
  unint64_t result;

  result = qword_268A90;
  if (!qword_268A90)
  {
    result = swift_getWitnessTable(&unk_1F2024, &type metadata for SeriesHeaderCoverStackCoverLayout.Position);
    atomic_store(result, (unint64_t *)&qword_268A90);
  }
  return result;
}

uint64_t ReadingSummaryFrameViewModel.init(longestStreak:totalCompletedGoalDays:exposureData:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int *v11;
  uint64_t v12;
  id v13;
  Class isa;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;

  v19 = a3;
  v7 = type metadata accessor for Calendar(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (int *)type metadata accessor for ReadingSummaryFrameViewModel(0);
  v12 = v11[7];
  v13 = objc_msgSend(objc_allocWithZone((Class)NSDateComponentsFormatter), "init");
  static Calendar.gregorian.getter();
  isa = Calendar._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  objc_msgSend(v13, "setCalendar:", isa);

  objc_msgSend(v13, "setAllowedUnits:", 16);
  objc_msgSend(v13, "setMaximumUnitCount:", 1);
  objc_msgSend(v13, "setUnitsStyle:", 3);
  *(_QWORD *)(a4 + v12) = v13;
  sub_167A4(a1, a4, &qword_268AE0);
  *(_QWORD *)(a4 + v11[5]) = a2;
  v15 = a4 + v11[6];
  v16 = type metadata accessor for YIRSourceData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v15, v19, v16);
}

uint64_t type metadata accessor for ReadingSummaryFrameViewModel(uint64_t a1)
{
  return sub_1FE90(a1, (uint64_t *)&unk_268B70, (uint64_t)&nominal type descriptor for ReadingSummaryFrameViewModel);
}

id sub_162434()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  Class isa;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD v54[2];
  _QWORD v55[4];

  v1 = sub_5440(&qword_268E50);
  __chkstk_darwin(v1);
  v51 = (char *)&v44 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_5440(&qword_25F468);
  __chkstk_darwin(v3);
  v47 = (char *)&v44 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DateComponents(0);
  v48 = *(_QWORD *)(v5 - 8);
  v49 = v5;
  __chkstk_darwin(v5);
  v7 = (char *)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Calendar(0);
  v9 = *(_QWORD *)(v8 - 8);
  v52 = v8;
  v53 = v9;
  __chkstk_darwin(v8);
  v11 = (char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = type metadata accessor for Calendar.Component(0);
  v12 = *(_QWORD *)(v50 - 8);
  __chkstk_darwin(v50);
  v14 = (char *)&v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_5440(&qword_268AE0);
  __chkstk_darwin(v15);
  v17 = (char *)&v44 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for DateInterval(0);
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v21 = (char *)&v44 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = v22;
  sub_B3D0(v0, (uint64_t)v17, &qword_268AE0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v23) == 1)
  {
    sub_B414((uint64_t)v17, &qword_268AE0);
    return 0;
  }
  else
  {
    v45 = v0;
    v46 = v7;
    v25 = v51;
    (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v21, v17, v23);
    v26 = v50;
    v27 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v12 + 104))(v14, enum case for Calendar.Component.day(_:), v50);
    static Calendar.gregorian.getter(v27);
    v44 = DateInterval.distance(_:calendar:)(v14, v11);
    v28 = v23;
    v30 = v29;
    v31 = v52;
    (*(void (**)(char *, uint64_t))(v53 + 8))(v11, v52);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v26);
    if ((v30 & 1) != 0)
    {
      (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v28);
      return 0;
    }
    else
    {
      v32 = v28;
      v33 = type metadata accessor for ReadingSummaryFrameViewModel(0);
      v34 = *(void **)(v45 + *(int *)(v33 + 28));
      v35 = v47;
      static Calendar.gregorian.getter(v33);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v53 + 56))(v35, 0, 1, v31);
      v36 = type metadata accessor for TimeZone(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 56))(v25, 1, 1, v36);
      v37 = v46;
      DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)(v35, v25, 0, 1, 0, 1, 0, 1, v44, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1);
      isa = DateComponents._bridgeToObjectiveC()().super.isa;
      (*(void (**)(char *, uint64_t))(v48 + 8))(v37, v49);
      v24 = objc_msgSend(v34, "stringFromDateComponents:", isa);

      if (v24)
      {
        v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
        v41 = v40;

        v55[2] = v39;
        v55[3] = v41;
        v55[0] = 32;
        v55[1] = 0xE100000000000000;
        v54[0] = 10;
        v54[1] = 0xE100000000000000;
        v42 = sub_C57C();
        v24 = (id)StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(v55, v54, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v42, v42, v42);
        (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v32);
        swift_bridgeObjectRelease(v41);
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v32);
      }
    }
  }
  return v24;
}

uint64_t sub_1628E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  id v14;
  NSString v15;
  Class isa;
  uint64_t (*v17)(char *, uint64_t);
  uint64_t v18;
  Class v19;
  id v20;
  uint64_t v22;

  v1 = v0;
  v2 = type metadata accessor for Date(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_5440(&qword_268AE0);
  __chkstk_darwin(v6);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DateInterval(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_B3D0(v1, (uint64_t)v8, &qword_268AE0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    sub_B414((uint64_t)v8, &qword_268AE0);
    return 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v8, v9);
    v14 = objc_msgSend(objc_allocWithZone((Class)NSDateIntervalFormatter), "init");
    v15 = String._bridgeToObjectiveC()();
    objc_msgSend(v14, "setDateTemplate:", v15);

    DateInterval.start.getter();
    isa = Date._bridgeToObjectiveC()().super.isa;
    v17 = *(uint64_t (**)(char *, uint64_t))(v3 + 8);
    v18 = v17(v5, v2);
    DateInterval.end.getter(v18);
    v19 = Date._bridgeToObjectiveC()().super.isa;
    v17(v5, v2);
    v20 = objc_msgSend(v14, "stringFromDate:toDate:", isa, v19);

    v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }
  return v13;
}

uint64_t sub_162B18@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t ObjCClassFromMetadata;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  Class isa;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  _QWORD v53[2];
  _QWORD v54[5];

  v52 = a1;
  v1 = sub_5440(&qword_268E50);
  __chkstk_darwin(v1);
  v49 = (char *)&v46 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_5440(&qword_25F468);
  __chkstk_darwin(v3);
  v46 = (char *)&v46 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DateComponents(0);
  v50 = *(_QWORD *)(v5 - 8);
  v51 = v5;
  __chkstk_darwin(v5);
  v7 = (char *)&v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Locale(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v46 - v13;
  v15 = type metadata accessor for String.LocalizationValue(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = __chkstk_darwin(v15);
  v19 = (char *)&v46 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v21 = (char *)&v46 - v20;
  v22 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000010, 0x80000000001FDDE0);
  static Locale.current.getter(v22);
  (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v19, v21, v15);
  v23 = type metadata accessor for BundleFinder();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v23);
  v25 = objc_msgSend((id)objc_opt_self(NSBundle), "bundleForClass:", ObjCClassFromMetadata);
  (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v12, v14, v8);
  v47 = String.init(localized:table:bundle:locale:comment:)(v19, 0, 0, v25, v12, "Year in Review: Reading summary reading goal met grid tile title", 64, 2);
  v27 = v26;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v8);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v21, v15);
  v28 = type metadata accessor for ReadingSummaryFrameViewModel(0);
  v29 = v48;
  v30 = *(void **)(v48 + *(int *)(v28 + 28));
  v31 = v46;
  static Calendar.gregorian.getter();
  v32 = type metadata accessor for Calendar(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(v31, 0, 1, v32);
  v33 = type metadata accessor for TimeZone(0);
  v34 = v49;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56))(v49, 1, 1, v33);
  DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)(v31, v34, 0, 1, 0, 1, 0, 1, *(_QWORD *)(v29 + *(int *)(v28 + 20)), 0, 0, 1, 0, 1, 0, 1, 0, 1, 0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1);
  isa = DateComponents._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v50 + 8))(v7, v51);
  v36 = objc_msgSend(v30, "stringFromDateComponents:", isa);

  if (v36)
  {
    v37 = static String._unconditionallyBridgeFromObjectiveC(_:)(v36);
    v39 = v38;

    v54[2] = v37;
    v54[3] = v39;
    v54[0] = 32;
    v54[1] = 0xE100000000000000;
    v53[0] = 10;
    v53[1] = 0xE100000000000000;
    v40 = sub_C57C();
    v36 = (id)StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(v54, v53, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v40, v40, v40);
    v42 = v41;
    swift_bridgeObjectRelease(v39);
  }
  else
  {
    v42 = 0;
  }
  v43 = v52;
  *v52 = v47;
  v43[1] = v27;
  v43[2] = (uint64_t)v36;
  v43[3] = v42;
  v44 = type metadata accessor for PlatterItem.Configuration(0);
  v43[4] = 0;
  v43[5] = 0;
  return swift_storeEnumTagMultiPayload(v43, v44, 1);
}

uint64_t sub_162F88@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t ObjCClassFromMetadata;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v30[2];

  v2 = type metadata accessor for Locale(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)v30 - v7;
  v9 = type metadata accessor for String.LocalizationValue(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)v30 - v14;
  v16 = String.LocalizationValue.init(stringLiteral:)(0x20747365676E6F4CLL, 0xEE006B6165727453);
  static Locale.current.getter(v16);
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v13, v15, v9);
  v17 = type metadata accessor for BundleFinder();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v17);
  v19 = objc_msgSend((id)objc_opt_self(NSBundle), "bundleForClass:", ObjCClassFromMetadata);
  (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v6, v8, v2);
  v20 = String.init(localized:table:bundle:locale:comment:)(v13, 0, 0, v19, v6, "Year in Review: Reading Summary Frame peheader", 46, 2);
  v22 = v21;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v15, v9);
  v23 = sub_162434();
  v25 = v24;
  v26 = sub_1628E0();
  *a1 = v20;
  a1[1] = v22;
  a1[2] = (uint64_t)v23;
  a1[3] = v25;
  a1[4] = v26;
  a1[5] = v27;
  v28 = type metadata accessor for PlatterItem.Configuration(0);
  return swift_storeEnumTagMultiPayload(a1, v28, 1);
}

uint64_t sub_163190()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t ObjCClassFromMetadata;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  _BYTE v22[16];

  v0 = type metadata accessor for Locale(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = &v22[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v2);
  v6 = &v22[-v5];
  v7 = type metadata accessor for String.LocalizationValue(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = &v22[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v9);
  v13 = &v22[-v12];
  v14 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000037, 0x80000000001FDCE0);
  static Locale.current.getter(v14);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v8 + 16))(v11, v13, v7);
  v15 = type metadata accessor for BundleFinder();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v15);
  v17 = objc_msgSend((id)objc_opt_self(NSBundle), "bundleForClass:", ObjCClassFromMetadata);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v1 + 16))(v4, v6, v0);
  v18 = String.init(localized:table:bundle:locale:comment:)(v11, 0, 0, v17, v4, "Accessibility label for reading reading insights icon", 53, 2);
  v20 = v19;
  (*(void (**)(_BYTE *, uint64_t))(v1 + 8))(v6, v0);
  result = (*(uint64_t (**)(_BYTE *, uint64_t))(v8 + 8))(v13, v7);
  qword_268A98 = v18;
  unk_268AA0 = v20;
  return result;
}

uint64_t sub_16335C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t ObjCClassFromMetadata;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  _BYTE v22[16];

  v0 = type metadata accessor for Locale(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = &v22[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v2);
  v6 = &v22[-v5];
  v7 = type metadata accessor for String.LocalizationValue(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = &v22[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v9);
  v13 = &v22[-v12];
  v14 = String.LocalizationValue.init(stringLiteral:)(0xD00000000000002ALL, 0x80000000001FDD80);
  static Locale.current.getter(v14);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v8 + 16))(v11, v13, v7);
  v15 = type metadata accessor for BundleFinder();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v15);
  v17 = objc_msgSend((id)objc_opt_self(NSBundle), "bundleForClass:", ObjCClassFromMetadata);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v1 + 16))(v4, v6, v0);
  v18 = String.init(localized:table:bundle:locale:comment:)(v11, 0, 0, v17, v4, "Accessibility label for reading insights icon", 45, 2);
  v20 = v19;
  (*(void (**)(_BYTE *, uint64_t))(v1 + 8))(v6, v0);
  result = (*(uint64_t (**)(_BYTE *, uint64_t))(v8 + 8))(v13, v7);
  qword_268AA8 = v18;
  unk_268AB0 = v20;
  return result;
}

uint64_t sub_163528@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t (*v23)(_QWORD);
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t (**v29)@<X0>(uint64_t@<X8>);
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __n128 v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t KeyPath;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t (**v52)@<X0>(uint64_t@<X8>);
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  uint64_t (**v62)@<X0>(uint64_t@<X8>);
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;

  v65 = a1;
  v64 = sub_5440(&qword_268D98);
  __chkstk_darwin(v64);
  v62 = (uint64_t (**)@<X0>(uint64_t@<X8>))((char *)&v56 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0));
  v2 = sub_5440(&qword_25F228);
  __chkstk_darwin(v2);
  v58 = (uint64_t *)((char *)&v56 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v57 = type metadata accessor for PlatterModifier(0);
  __chkstk_darwin(v57);
  v5 = (uint64_t *)((char *)&v56 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = type metadata accessor for Image.ResizingMode(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v56 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = sub_5440(&qword_268DA0);
  v10 = __chkstk_darwin(v63);
  v12 = (char *)&v56 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v59 = (uint64_t)&v56 - v13;
  *(_QWORD *)&v61 = type metadata accessor for ImageResource(0);
  v14 = *(_QWORD *)(v61 - 8);
  v15 = __chkstk_darwin(v61);
  v17 = (char *)&v56 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v19 = (char *)&v56 - v18;
  v20 = type metadata accessor for PlatterItem.Configuration(0);
  __chkstk_darwin(v20);
  v22 = (char *)&v56 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1E428(v60, (uint64_t)v22, v23);
  if (swift_getEnumCaseMultiPayload(v22, v20) == 1)
  {
    v24 = *(_OWORD *)v22;
    v60 = *((_OWORD *)v22 + 1);
    v61 = v24;
    v25 = *((_QWORD *)v22 + 4);
    v26 = *((_QWORD *)v22 + 5);
    v27 = swift_allocObject(&unk_256540, 64, 7);
    v28 = v60;
    *(_OWORD *)(v27 + 16) = v61;
    *(_OWORD *)(v27 + 32) = v28;
    *(_QWORD *)(v27 + 48) = v25;
    *(_QWORD *)(v27 + 56) = v26;
    v29 = v62;
    *v62 = sub_167D30;
    v29[1] = (uint64_t (*)@<X0>(uint64_t@<X8>))v27;
    swift_storeEnumTagMultiPayload(v29, v64, 1);
    v30 = sub_5440(&qword_268DA8);
    v31 = sub_167D40();
    v32 = sub_7FD8(&qword_268DE0, &qword_268DA8, (uint64_t)&protocol conformance descriptor for GeometryReader<A>);
    return _ConditionalContent<>.init(storage:)(v29, v63, v30, v31, v32);
  }
  else
  {
    v56 = v14;
    v34 = v22;
    v35 = v61;
    (*(void (**)(char *, char *, _QWORD))(v14 + 32))(v19, v34, v61);
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v17, v19, v35);
    v36 = Image.init(_:)(v17);
    (*(void (**)(char *, _QWORD, uint64_t))(v7 + 104))(v9, enum case for Image.ResizingMode.stretch(_:), v6);
    v37 = Image.resizable(capInsets:resizingMode:)(v9, v36, 0.0, 0.0, 0.0, 0.0);
    v38 = swift_release(v36);
    v39 = (*(uint64_t (**)(char *, uint64_t, __n128))(v7 + 8))(v9, v6, v38);
    v40 = static HierarchicalShapeStyle.primary.getter(v39);
    v41 = _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0();
    v43 = v42;
    KeyPath = swift_getKeyPath(&unk_1F2280);
    v45 = (uint64_t)v58;
    *v58 = KeyPath;
    v46 = sub_5440(&qword_25F208);
    swift_storeEnumTagMultiPayload(v45, v46, 0);
    *v5 = swift_getKeyPath(&unk_1F22A8);
    v47 = sub_5440(&qword_25F1E8);
    swift_storeEnumTagMultiPayload(v5, v47, 0);
    v48 = v57;
    sub_167A4(v45, (uint64_t)v5 + *(int *)(v57 + 20), &qword_25F228);
    v49 = (_QWORD *)((char *)v5 + *(int *)(v48 + 24));
    *v49 = v41;
    v49[1] = v43;
    v50 = v63;
    sub_1E428((uint64_t)v5, (uint64_t)&v12[*(int *)(v63 + 36)], type metadata accessor for PlatterModifier);
    *(_QWORD *)v12 = v37;
    *((_QWORD *)v12 + 1) = 0;
    *((_WORD *)v12 + 8) = 1;
    *((_DWORD *)v12 + 5) = v40;
    sub_224DC((uint64_t)v5, type metadata accessor for PlatterModifier);
    v51 = v59;
    sub_167A4((uint64_t)v12, v59, &qword_268DA0);
    v52 = v62;
    sub_B3D0(v51, (uint64_t)v62, &qword_268DA0);
    swift_storeEnumTagMultiPayload(v52, v64, 0);
    v53 = sub_5440(&qword_268DA8);
    v54 = sub_167D40();
    v55 = sub_7FD8(&qword_268DE0, &qword_268DA8, (uint64_t)&protocol conformance descriptor for GeometryReader<A>);
    _ConditionalContent<>.init(storage:)(v52, v50, v53, v54, v55);
    sub_B414(v51, &qword_268DA0);
    return (*(uint64_t (**)(char *, _QWORD))(v56 + 8))(v19, v61);
  }
}

uint64_t sub_163A30@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  char *v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;

  v54 = a6;
  v61 = a3;
  v62 = a5;
  v57 = a4;
  v59 = a1;
  v60 = a2;
  v64 = a7;
  v8 = sub_5440(&qword_25F228);
  __chkstk_darwin(v8);
  v10 = (uint64_t *)((char *)&v51 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v63 = type metadata accessor for PlatterModifier(0);
  __chkstk_darwin(v63);
  v12 = (uint64_t *)((char *)&v51 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = sub_5440(&qword_25FE08);
  __chkstk_darwin(v13);
  v15 = (char *)&v51 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = (int *)type metadata accessor for TextLockup(0);
  __chkstk_darwin(v16);
  v18 = (uint64_t *)((char *)&v51 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  v58 = sub_5440(&qword_268DE8);
  v19 = __chkstk_darwin(v58);
  v21 = (char *)&v51 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (GeometryProxy.size.getter(v19) <= 200.0)
    v22 = 1;
  else
    v22 = 2;
  v56 = v22;
  v23 = enum case for Font.Design.default(_:);
  v24 = type metadata accessor for Font.Design(0);
  v25 = *(_QWORD *)(v24 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v25 + 104))(v15, v23, v24);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v15, 0, 1, v24);
  swift_bridgeObjectRetain(a6);
  v26 = v57;
  v27 = swift_bridgeObjectRetain(v57);
  v55 = static HorizontalAlignment.leading.getter(v27);
  v28 = static Alignment.leading.getter(v55);
  v52 = v29;
  v53 = v28;
  *v18 = swift_getKeyPath(&unk_1F22A8);
  v30 = sub_5440(&qword_25F1E8);
  swift_storeEnumTagMultiPayload(v18, v30, 0);
  v31 = (_QWORD *)((char *)v18 + v16[5]);
  *v31 = swift_getKeyPath(&unk_1F2280);
  v32 = sub_5440(&qword_25F208);
  swift_storeEnumTagMultiPayload(v31, v32, 0);
  v33 = (char *)v18 + v16[6];
  *(_QWORD *)v33 = swift_getKeyPath(&unk_1F2070);
  v33[8] = 0;
  v34 = (char *)v18 + v16[7];
  *(_QWORD *)v34 = swift_getKeyPath(&unk_1F22D0);
  v34[8] = 0;
  v35 = (char *)v18 + v16[8];
  *(_QWORD *)v35 = swift_getKeyPath(&unk_1F2098);
  v35[8] = 0;
  v36 = (char *)v18 + v16[9];
  *(_QWORD *)v36 = swift_getKeyPath(&unk_1F20C8);
  v36[8] = 0;
  *((_BYTE *)v18 + v16[10]) = v56;
  v37 = (_QWORD *)((char *)v18 + v16[11]);
  v38 = v60;
  *v37 = v59;
  v37[1] = v38;
  v39 = (_QWORD *)((char *)v18 + v16[12]);
  *v39 = v61;
  v39[1] = v26;
  v39[2] = 0;
  v40 = (_QWORD *)((char *)v18 + v16[13]);
  v41 = v54;
  *v40 = v62;
  v40[1] = v41;
  sub_167A4((uint64_t)v15, (uint64_t)v18 + v16[14], &qword_25FE08);
  *(_QWORD *)((char *)v18 + v16[15]) = v55;
  v42 = (_QWORD *)((char *)v18 + v16[16]);
  v43 = v52;
  *v42 = v53;
  v42[1] = v43;
  *((_BYTE *)v18 + v16[17]) = 0;
  v44 = swift_bridgeObjectRetain(v38);
  v45 = static Alignment.topLeading.getter(v44);
  v47 = v46;
  *v10 = swift_getKeyPath(&unk_1F2280);
  swift_storeEnumTagMultiPayload(v10, v32, 0);
  *v12 = swift_getKeyPath(&unk_1F22A8);
  swift_storeEnumTagMultiPayload(v12, v30, 0);
  v48 = v63;
  sub_167A4((uint64_t)v10, (uint64_t)v12 + *(int *)(v63 + 20), &qword_25F228);
  v49 = (_QWORD *)((char *)v12 + *(int *)(v48 + 24));
  *v49 = v45;
  v49[1] = v47;
  sub_1E428((uint64_t)v18, (uint64_t)v21, type metadata accessor for TextLockup);
  sub_21C88((uint64_t)v12, (uint64_t)&v21[*(int *)(v58 + 36)], type metadata accessor for PlatterModifier);
  sub_224DC((uint64_t)v18, type metadata accessor for TextLockup);
  return sub_167A4((uint64_t)v21, v64, &qword_268DE8);
}

void sub_163E60()
{
  qword_268AB8 = 0x4028000000000000;
}

void sub_163E70()
{
  qword_268AC0 = 0x4030000000000000;
}

uint64_t sub_163E80@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  double v21;
  uint64_t v22;
  char v23;
  double v24;
  double v25;
  double v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  v60 = a2;
  v59 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v59);
  v4 = (uint64_t *)((char *)&v53 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v58 = type metadata accessor for BlendMode(0);
  v56 = *(_QWORD *)(v58 - 8);
  __chkstk_darwin(v58);
  v6 = (char *)&v53 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for ColorConstants(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v53 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_5440(&qword_2628B8);
  __chkstk_darwin(v10);
  v12 = (char *)&v53 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_5440(&qword_2628C0);
  __chkstk_darwin(v13);
  v15 = (char *)&v53 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = sub_5440(&qword_268F08);
  __chkstk_darwin(v55);
  v17 = (char *)&v53 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = sub_5440(&qword_268F10);
  v18 = __chkstk_darwin(v54);
  v20 = (char *)&v53 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_25DCF0 != -1)
    v18 = swift_once(&qword_25DCF0, sub_163E70);
  v21 = *(double *)&qword_268AC0;
  v22 = static Edge.Set.all.getter(v18);
  v23 = v22;
  v27 = EdgeInsets.init(_all:)(v22, v21, v24, v25, v26);
  v29 = v28;
  v31 = v30;
  v33 = v32;
  v34 = sub_5440(&qword_268F18);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 16))(v12, a1, v34);
  v35 = &v12[*(int *)(v10 + 36)];
  *v35 = v23;
  *((double *)v35 + 1) = v27;
  *((_QWORD *)v35 + 2) = v29;
  *((_QWORD *)v35 + 3) = v31;
  *((_QWORD *)v35 + 4) = v33;
  v35[40] = 0;
  v36 = type metadata accessor for PlatterModifier(0);
  sub_87F0C(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v15, 0.0, 1, INFINITY, 0, *(_QWORD *)(v57 + *(int *)(v36 + 24)), *(_QWORD *)(v57 + *(int *)(v36 + 24) + 8));
  sub_B414((uint64_t)v12, &qword_2628B8);
  _s7BooksUI18BuyButtonExternalsV6colorsAA14ColorConstantsVvg_0((uint64_t)v9);
  v37 = objc_msgSend((id)objc_opt_self(UIColor), "quaternaryLabelColor");
  v38 = Color.init(_:)(v37);
  v39 = Color.opacity(_:)(0.5);
  swift_release(v38);
  sub_224DC((uint64_t)v9, type metadata accessor for ColorConstants);
  v40 = Color.opacity(_:)(0.45);
  swift_release(v39);
  LOBYTE(v39) = static Edge.Set.all.getter(v41);
  sub_B3D0((uint64_t)v15, (uint64_t)v17, &qword_2628C0);
  v42 = &v17[*(int *)(v55 + 36)];
  *(_QWORD *)v42 = v40;
  v42[8] = v39;
  sub_B414((uint64_t)v15, &qword_2628C0);
  sub_31660((uint64_t)v6);
  v43 = v56;
  v44 = v58;
  (*(void (**)(char *, char *, uint64_t))(v56 + 16))(&v20[*(int *)(v54 + 36)], v6, v58);
  sub_B3D0((uint64_t)v17, (uint64_t)v20, &qword_268F08);
  (*(void (**)(char *, uint64_t))(v43 + 8))(v6, v44);
  sub_B414((uint64_t)v17, &qword_268F08);
  if (qword_25DCE8 != -1)
    swift_once(&qword_25DCE8, sub_163E60);
  v45 = qword_268AB8;
  v46 = (char *)v4 + *(int *)(v59 + 20);
  v47 = enum case for RoundedCornerStyle.continuous(_:);
  v48 = type metadata accessor for RoundedCornerStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v48 - 8) + 104))(v46, v47, v48);
  *v4 = v45;
  v4[1] = v45;
  v49 = sub_5440(&qword_268F20);
  v50 = v60;
  v51 = v60 + *(int *)(v49 + 36);
  sub_1E428((uint64_t)v4, v51, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  *(_WORD *)(v51 + *(int *)(sub_5440(&qword_25F700) + 36)) = 256;
  sub_B3D0((uint64_t)v20, v50, &qword_268F10);
  sub_224DC((uint64_t)v4, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  return sub_B414((uint64_t)v20, &qword_268F10);
}

uint64_t ReadingSummaryFrame.alignment.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 48);
}

uint64_t ReadingSummaryFrame.background.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for ReadingSummaryFrame(0);
  return sub_1E428(v1 + *(int *)(v3 + 32), a1, type metadata accessor for PageBackground);
}

uint64_t ReadingSummaryFrame.sharableView.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v6;

  v1 = type metadata accessor for ReadingSummaryFrame(0);
  __chkstk_darwin(v1);
  v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1E428(v0, (uint64_t)v3, type metadata accessor for ReadingSummaryFrame);
  v4 = sub_6FD0(&qword_268AE8, type metadata accessor for ReadingSummaryFrame, (uint64_t)&protocol conformance descriptor for ReadingSummaryFrame);
  return AnyView.init<A>(_:)(v3, v1, v4);
}

uint64_t ReadingSummaryFrame.exposureData.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v3 = v1 + *(int *)(type metadata accessor for ReadingSummaryFrame(0) + 36);
  v4 = v3 + *(int *)(type metadata accessor for ReadingSummaryFrameViewModel(0) + 24);
  v5 = type metadata accessor for YIRSourceData(0);
  a1[3] = v5;
  a1[4] = sub_6FD0(&qword_25EFF0, (uint64_t (*)(uint64_t))&type metadata accessor for YIRSourceData, (uint64_t)&protocol conformance descriptor for YIRSourceData);
  a1[5] = sub_6FD0(&qword_25EFF8, (uint64_t (*)(uint64_t))&type metadata accessor for YIRSourceData, (uint64_t)&protocol conformance descriptor for YIRSourceData);
  v6 = sub_C404(a1);
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(v6, v4, v5);
}

uint64_t ReadingSummaryFrame.init(model:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)a2 = swift_getKeyPath(&unk_1F2070);
  *(_BYTE *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = swift_getKeyPath(&unk_1F2098);
  *(_BYTE *)(a2 + 24) = 0;
  KeyPath = swift_getKeyPath(&unk_1F20C8);
  *(_QWORD *)(a2 + 32) = KeyPath;
  *(_BYTE *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = static Alignment.top.getter(KeyPath);
  *(_QWORD *)(a2 + 56) = v5;
  v6 = type metadata accessor for ReadingSummaryFrame(0);
  v7 = (_QWORD *)(a2 + *(int *)(v6 + 32));
  v8 = (char *)v7 + *(int *)(sub_5440(&qword_25E930) + 48);
  *v7 = static Color.cyan.getter();
  v9 = enum case for ColorScheme.light(_:);
  v10 = type metadata accessor for ColorScheme(0);
  v11 = *(_QWORD *)(v10 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 104))(v8, v9, v10);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  v12 = type metadata accessor for PageBackground(0);
  swift_storeEnumTagMultiPayload(v7, v12, 0);
  return sub_21C88(a1, a2 + *(int *)(v6 + 36), type metadata accessor for ReadingSummaryFrameViewModel);
}

void sub_164628()
{
  qword_268AC8 = 0x3FF0000000000000;
}

void sub_164638()
{
  qword_268AD0 = 0x4030000000000000;
}

void sub_164648()
{
  qword_268AD8 = 0x4030000000000000;
}

uint64_t ReadingSummaryFrame.body.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t result;
  uint64_t v21;

  v2 = v1;
  v4 = sub_5440(&qword_268AF0);
  __chkstk_darwin(v4);
  v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ReadingSummaryFrame(0);
  v7 = sub_9B418(0x20676E6964616552, 0xED0000736C616F47, (uint64_t)"Year in Review: Reading Summary Frame reading goals title", 57);
  v9 = v8;
  v10 = sub_9B418(0x1000000000000016, 0x80000000001FDE50, (uint64_t)"Year in Review: Reading Summary Frame summary subtitle", 54);
  *a1 = v7;
  a1[1] = v9;
  a1[2] = v10;
  a1[3] = v11;
  v12 = (int *)sub_5440(&qword_268AF8);
  v13 = v12[10];
  if (qword_25DD00 != -1)
    swift_once(&qword_25DD00, sub_164638);
  v14 = qword_268AD0;
  if (qword_25DD08 != -1)
    swift_once(&qword_25DD08, sub_164648);
  v15 = qword_268AD8;
  *(_QWORD *)v6 = _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0();
  *((_QWORD *)v6 + 1) = v16;
  *((_QWORD *)v6 + 2) = v14;
  v6[24] = 0;
  *((_QWORD *)v6 + 4) = v15;
  v6[40] = 0;
  v17 = sub_5440(&qword_268B00);
  sub_164888(v2, (uint64_t)&v6[*(int *)(v17 + 44)]);
  if (qword_25DCF8 != -1)
    swift_once(&qword_25DCF8, sub_164628);
  v18 = qword_268AC8;
  sub_B3D0((uint64_t)v6, (uint64_t)a1 + v13, &qword_268AF0);
  v19 = (char *)a1 + v13 + *(int *)(sub_5440(&qword_268B08) + 36);
  *(_QWORD *)v19 = v18;
  *((_WORD *)v19 + 4) = 0;
  result = sub_B414((uint64_t)v6, &qword_268AF0);
  *(uint64_t *)((char *)a1 + v12[11]) = 0x3FC999999999999ALL;
  *(uint64_t *)((char *)a1 + v12[12]) = 0x4040000000000000;
  *(uint64_t *)((char *)a1 + v12[13]) = 0x4040000000000000;
  return result;
}

uint64_t sub_164888@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v26 = a2;
  v3 = sub_5440(&qword_268DF0);
  __chkstk_darwin(v3);
  v25 = (uint64_t)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_5440(&qword_268DF8);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v25 - v9;
  v11 = sub_5440(&qword_268E00);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v16 = (char *)&v25 - v15;
  v17 = *(_QWORD *)a1;
  v18 = *(_BYTE *)(a1 + 8);
  sub_F9E4(*(_QWORD *)a1, v18);
  v19 = sub_30DB4(v17, v18);
  sub_BE0C(v17, v18);
  if ((v19 & 1) != 0)
  {
    *(_QWORD *)v16 = 0;
    v16[8] = 1;
    sub_164B38((uint64_t)&v16[*(int *)(v11 + 36)]);
    *(_QWORD *)v10 = 0;
    v10[8] = 1;
    sub_165044((uint64_t)&v10[*(int *)(v5 + 36)]);
    sub_B3D0((uint64_t)v16, (uint64_t)v14, &qword_268E00);
    sub_B3D0((uint64_t)v10, (uint64_t)v8, &qword_268DF8);
    v20 = v25;
    sub_B3D0((uint64_t)v14, v25, &qword_268E00);
    v21 = sub_5440(&qword_268E10);
    sub_B3D0((uint64_t)v8, v20 + *(int *)(v21 + 48), &qword_268DF8);
    sub_B414((uint64_t)v10, &qword_268DF8);
    sub_B414((uint64_t)v16, &qword_268E00);
    sub_B414((uint64_t)v8, &qword_268DF8);
    sub_B414((uint64_t)v14, &qword_268E00);
    v22 = sub_5440(&qword_268E08);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v20, 0, 1, v22);
    return sub_167A4(v20, v26, &qword_268DF0);
  }
  else
  {
    v24 = sub_5440(&qword_268E08);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v26, 1, 1, v24);
  }
}

uint64_t sub_164B38@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t ObjCClassFromMetadata;
  id v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[2];

  v28 = a1;
  v1 = sub_5440(&qword_268E20);
  v2 = __chkstk_darwin(v1);
  v4 = (char *)&v27 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  v6 = (char *)&v27 - v5;
  v7 = type metadata accessor for PlatterItem(0);
  __chkstk_darwin(v7);
  v9 = (uint64_t *)((char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = sub_5440(&qword_268E18);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v27 - v14;
  type metadata accessor for ReadingSummaryFrame(0);
  sub_162B18(v9);
  v16 = sub_164E8C(0.1);
  sub_1E428((uint64_t)v9, (uint64_t)v13, type metadata accessor for PlatterItem);
  *(_QWORD *)&v13[*(int *)(v10 + 36)] = v16;
  sub_224DC((uint64_t)v9, type metadata accessor for PlatterItem);
  sub_167A4((uint64_t)v13, (uint64_t)v15, &qword_268E18);
  v17 = type metadata accessor for BundleFinder();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v17);
  v19 = objc_msgSend((id)objc_opt_self(NSBundle), "bundleForClass:", ObjCClassFromMetadata);
  ImageResource.init(name:bundle:)(0xD000000000000019, 0x80000000001FDD60, v19);
  v20 = type metadata accessor for PlatterItem.Configuration(0);
  swift_storeEnumTagMultiPayload(v9, v20, 0);
  v21 = sub_164E8C(0.2);
  sub_1E428((uint64_t)v9, (uint64_t)v13, type metadata accessor for PlatterItem);
  *(_QWORD *)&v13[*(int *)(v10 + 36)] = v21;
  sub_224DC((uint64_t)v9, type metadata accessor for PlatterItem);
  if (qword_25DCE0 != -1)
    swift_once(&qword_25DCE0, sub_16335C);
  v29[0] = qword_268AA8;
  v29[1] = unk_268AB0;
  v22 = sub_167E58();
  v23 = sub_C57C();
  View.accessibilityLabel<A>(_:)(v29, v10, &type metadata for String, v22, v23);
  sub_B414((uint64_t)v13, &qword_268E18);
  sub_167A4((uint64_t)v4, (uint64_t)v6, &qword_268E20);
  sub_B3D0((uint64_t)v15, (uint64_t)v13, &qword_268E18);
  sub_B3D0((uint64_t)v6, (uint64_t)v4, &qword_268E20);
  v24 = v28;
  sub_B3D0((uint64_t)v13, v28, &qword_268E18);
  v25 = sub_5440(&qword_268E58);
  sub_B3D0((uint64_t)v4, v24 + *(int *)(v25 + 48), &qword_268E20);
  sub_B414((uint64_t)v6, &qword_268E20);
  sub_B414((uint64_t)v15, &qword_268E18);
  sub_B414((uint64_t)v4, &qword_268E20);
  return sub_B414((uint64_t)v13, &qword_268E18);
}

uint64_t sub_164E8C(double a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  double v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  __n128 v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;

  v2 = v1;
  v4 = type metadata accessor for ReadingSummaryFrame(0);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = static UnitPoint.center.getter(v5);
  v10 = static AnyTransition.scale(scale:anchor:)(0.8, v8, v9);
  v11 = static AnyTransition.opacity.getter();
  v12 = AnyTransition.combined(with:)(v11, v10);
  swift_release(v10);
  swift_release(v11);
  v13 = *(_QWORD *)(v2 + 16);
  LOBYTE(v11) = *(_BYTE *)(v2 + 24);
  sub_F9E4(v13, v11);
  v14 = sub_30DB4(v13, v11);
  sub_BE0C(v13, v11);
  sub_1E428(v2, (uint64_t)v7, type metadata accessor for ReadingSummaryFrame);
  if ((v14 & 1) != 0)
  {
    sub_224DC((uint64_t)v7, type metadata accessor for ReadingSummaryFrame);
    v16 = 0;
  }
  else
  {
    v17 = *((_QWORD *)v7 + 4);
    v18 = v7[40];
    sub_F9E4(v17, v18);
    v19 = sub_30DB4(v17, v18);
    sub_BE0C(v17, v18);
    sub_224DC((uint64_t)v7, type metadata accessor for ReadingSummaryFrame);
    if ((v19 & 1) != 0 || UIAccessibilityIsReduceMotionEnabled())
    {
      v16 = 0;
    }
    else
    {
      v20 = static Animation.easeOut.getter();
      v16 = Animation.delay(_:)(a1);
      v15 = swift_release(v20);
    }
  }
  v21 = AnyTransition.animation(_:)(v16, v12, v15);
  swift_release(v12);
  swift_release(v16);
  return v21;
}

uint64_t sub_165044@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t ObjCClassFromMetadata;
  id v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[2];

  v28 = a1;
  v1 = type metadata accessor for PlatterItem(0);
  __chkstk_darwin(v1);
  v3 = (uint64_t *)((char *)&v27 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  v4 = sub_5440(&qword_268E18);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v27 - v8;
  v10 = sub_5440(&qword_268E20);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v27 - v14;
  v16 = type metadata accessor for BundleFinder();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v16);
  v18 = objc_msgSend((id)objc_opt_self(NSBundle), "bundleForClass:", ObjCClassFromMetadata);
  ImageResource.init(name:bundle:)(0xD000000000000018, 0x80000000001FDC90, v18);
  v19 = type metadata accessor for PlatterItem.Configuration(0);
  swift_storeEnumTagMultiPayload(v3, v19, 0);
  v20 = sub_164E8C(0.3);
  sub_1E428((uint64_t)v3, (uint64_t)v9, type metadata accessor for PlatterItem);
  *(_QWORD *)&v9[*(int *)(v4 + 36)] = v20;
  sub_224DC((uint64_t)v3, type metadata accessor for PlatterItem);
  if (qword_25DCD8 != -1)
    swift_once(&qword_25DCD8, sub_163190);
  v29[0] = qword_268A98;
  v29[1] = unk_268AA0;
  v21 = sub_167E58();
  v22 = sub_C57C();
  View.accessibilityLabel<A>(_:)(v29, v4, &type metadata for String, v21, v22);
  sub_B414((uint64_t)v9, &qword_268E18);
  sub_167A4((uint64_t)v13, (uint64_t)v15, &qword_268E20);
  type metadata accessor for ReadingSummaryFrame(0);
  sub_162F88(v3);
  v23 = sub_164E8C(0.4);
  sub_1E428((uint64_t)v3, (uint64_t)v7, type metadata accessor for PlatterItem);
  *(_QWORD *)&v7[*(int *)(v4 + 36)] = v23;
  sub_224DC((uint64_t)v3, type metadata accessor for PlatterItem);
  sub_167A4((uint64_t)v7, (uint64_t)v9, &qword_268E18);
  sub_B3D0((uint64_t)v15, (uint64_t)v13, &qword_268E20);
  sub_B3D0((uint64_t)v9, (uint64_t)v7, &qword_268E18);
  v24 = v28;
  sub_B3D0((uint64_t)v13, v28, &qword_268E20);
  v25 = sub_5440(&qword_268E48);
  sub_B3D0((uint64_t)v7, v24 + *(int *)(v25 + 48), &qword_268E18);
  sub_B414((uint64_t)v9, &qword_268E18);
  sub_B414((uint64_t)v15, &qword_268E20);
  sub_B414((uint64_t)v7, &qword_268E18);
  return sub_B414((uint64_t)v13, &qword_268E20);
}

uint64_t sub_1653A0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v8;

  v3 = __chkstk_darwin(v1);
  v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1E428(v3, (uint64_t)v5, type metadata accessor for ReadingSummaryFrame);
  v6 = sub_6FD0(&qword_268AE8, type metadata accessor for ReadingSummaryFrame, (uint64_t)&protocol conformance descriptor for ReadingSummaryFrame);
  return AnyView.init<A>(_:)(v5, a1, v6);
}

uint64_t sub_165434@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1E428(v2 + *(int *)(a1 + 32), a2, type metadata accessor for PageBackground);
}

uint64_t sub_16545C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v2 + *(int *)(a1 + 36);
  v5 = v4 + *(int *)(type metadata accessor for ReadingSummaryFrameViewModel(0) + 24);
  v6 = type metadata accessor for YIRSourceData(0);
  a2[3] = v6;
  a2[4] = sub_6FD0(&qword_25EFF0, (uint64_t (*)(uint64_t))&type metadata accessor for YIRSourceData, (uint64_t)&protocol conformance descriptor for YIRSourceData);
  a2[5] = sub_6FD0(&qword_25EFF8, (uint64_t (*)(uint64_t))&type metadata accessor for YIRSourceData, (uint64_t)&protocol conformance descriptor for YIRSourceData);
  v7 = sub_C404(a2);
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(v7, v5, v6);
}

uint64_t sub_165500@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t result;
  uint64_t v21;

  v2 = v1;
  v4 = sub_5440(&qword_268AF0);
  __chkstk_darwin(v4);
  v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_9B418(0x20676E6964616552, 0xED0000736C616F47, (uint64_t)"Year in Review: Reading Summary Frame reading goals title", 57);
  v9 = v8;
  v10 = sub_9B418(0x1000000000000016, 0x80000000001FDE50, (uint64_t)"Year in Review: Reading Summary Frame summary subtitle", 54);
  *a1 = v7;
  a1[1] = v9;
  a1[2] = v10;
  a1[3] = v11;
  v12 = (int *)sub_5440(&qword_268AF8);
  v13 = v12[10];
  if (qword_25DD00 != -1)
    swift_once(&qword_25DD00, sub_164638);
  v14 = qword_268AD0;
  if (qword_25DD08 != -1)
    swift_once(&qword_25DD08, sub_164648);
  v15 = qword_268AD8;
  *(_QWORD *)v6 = _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0();
  *((_QWORD *)v6 + 1) = v16;
  *((_QWORD *)v6 + 2) = v14;
  v6[24] = 0;
  *((_QWORD *)v6 + 4) = v15;
  v6[40] = 0;
  v17 = sub_5440(&qword_268B00);
  sub_164888(v2, (uint64_t)&v6[*(int *)(v17 + 44)]);
  if (qword_25DCF8 != -1)
    swift_once(&qword_25DCF8, sub_164628);
  v18 = qword_268AC8;
  sub_B3D0((uint64_t)v6, (uint64_t)a1 + v13, &qword_268AF0);
  v19 = (char *)a1 + v13 + *(int *)(sub_5440(&qword_268B08) + 36);
  *(_QWORD *)v19 = v18;
  *((_WORD *)v19 + 4) = 0;
  result = sub_B414((uint64_t)v6, &qword_268AF0);
  *(uint64_t *)((char *)a1 + v12[11]) = 0x3FC999999999999ALL;
  *(uint64_t *)((char *)a1 + v12[12]) = 0x4040000000000000;
  *(uint64_t *)((char *)a1 + v12[13]) = 0x4040000000000000;
  return result;
}

uint64_t type metadata accessor for ReadingSummaryFrame(uint64_t a1)
{
  return sub_1FE90(a1, qword_268C10, (uint64_t)&nominal type descriptor for ReadingSummaryFrame);
}

uint64_t sub_165750(uint64_t a1)
{
  uint64_t result;

  result = sub_6FD0(&qword_268B10, type metadata accessor for ReadingSummaryFrame, (uint64_t)&protocol conformance descriptor for ReadingSummaryFrame);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_16578C(uint64_t a1)
{
  uint64_t result;

  result = sub_6FD0(&qword_268AE8, type metadata accessor for ReadingSummaryFrame, (uint64_t)&protocol conformance descriptor for ReadingSummaryFrame);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1657C8(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &opaque type descriptor for <<opaque return type of ReadingSummaryFrame.body>>, 1);
}

uint64_t *initializeBufferWithCopyOfBuffer for ReadingSummaryFrameViewModel(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  id v17;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v10);
  }
  else
  {
    v7 = type metadata accessor for DateInterval(0);
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      v9 = sub_5440(&qword_268AE0);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    v11 = a3[6];
    *(uint64_t *)((char *)a1 + a3[5]) = *(uint64_t *)((char *)a2 + a3[5]);
    v12 = (char *)a1 + v11;
    v13 = (char *)a2 + v11;
    v14 = type metadata accessor for YIRSourceData(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
    v15 = a3[7];
    v16 = *(void **)((char *)a2 + v15);
    *(uint64_t *)((char *)a1 + v15) = (uint64_t)v16;
    v17 = v16;
  }
  return a1;
}

void destroy for ReadingSummaryFrameViewModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = type metadata accessor for DateInterval(0);
  v5 = *(_QWORD *)(v4 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v4))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  v6 = a1 + *(int *)(a2 + 24);
  v7 = type metadata accessor for YIRSourceData(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);

}

char *initializeWithCopy for ReadingSummaryFrameViewModel(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;

  v6 = type metadata accessor for DateInterval(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = sub_5440(&qword_268AE0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v9 = a3[6];
  *(_QWORD *)&a1[a3[5]] = *(_QWORD *)&a2[a3[5]];
  v10 = &a1[v9];
  v11 = &a2[v9];
  v12 = type metadata accessor for YIRSourceData(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
  v13 = a3[7];
  v14 = *(void **)&a2[v13];
  *(_QWORD *)&a1[v13] = v14;
  v15 = v14;
  return a1;
}

char *assignWithCopy for ReadingSummaryFrameViewModel(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  id v19;

  v6 = type metadata accessor for DateInterval(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    v11 = sub_5440(&qword_268AE0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  *(_QWORD *)&a1[a3[5]] = *(_QWORD *)&a2[a3[5]];
  v12 = a3[6];
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = type metadata accessor for YIRSourceData(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 24))(v13, v14, v15);
  v16 = a3[7];
  v17 = *(void **)&a2[v16];
  v18 = *(void **)&a1[v16];
  *(_QWORD *)&a1[v16] = v17;
  v19 = v17;

  return a1;
}

char *initializeWithTake for ReadingSummaryFrameViewModel(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;

  v6 = type metadata accessor for DateInterval(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = sub_5440(&qword_268AE0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v9 = a3[6];
  *(_QWORD *)&a1[a3[5]] = *(_QWORD *)&a2[a3[5]];
  v10 = &a1[v9];
  v11 = &a2[v9];
  v12 = type metadata accessor for YIRSourceData(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v10, v11, v12);
  *(_QWORD *)&a1[a3[7]] = *(_QWORD *)&a2[a3[7]];
  return a1;
}

char *assignWithTake for ReadingSummaryFrameViewModel(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;

  v6 = type metadata accessor for DateInterval(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    v11 = sub_5440(&qword_268AE0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  v12 = a3[6];
  *(_QWORD *)&a1[a3[5]] = *(_QWORD *)&a2[a3[5]];
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = type metadata accessor for YIRSourceData(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 40))(v13, v14, v15);
  v16 = a3[7];
  v17 = *(void **)&a1[v16];
  *(_QWORD *)&a1[v16] = *(_QWORD *)&a2[v16];

  return a1;
}

uint64_t getEnumTagSinglePayload for ReadingSummaryFrameViewModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_165E04);
}

uint64_t sub_165E04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v14;

  v6 = sub_5440(&qword_268AE0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = type metadata accessor for YIRSourceData(0);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v10 = a1 + *(int *)(a3 + 24);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = *(_QWORD *)(a1 + *(int *)(a3 + 28));
  if (v14 >= 0xFFFFFFFF)
    LODWORD(v14) = -1;
  return (v14 + 1);
}

uint64_t storeEnumTagSinglePayload for ReadingSummaryFrameViewModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_165EBC);
}

uint64_t sub_165EBC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v8 = sub_5440(&qword_268AE0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  result = type metadata accessor for YIRSourceData(0);
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v12 = a1 + *(int *)(a4 + 24);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  *(_QWORD *)(a1 + *(int *)(a4 + 28)) = (a2 - 1);
  return result;
}

void sub_165F64(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[4];

  sub_19B38(319, (unint64_t *)&unk_268B80, (uint64_t (*)(uint64_t))&type metadata accessor for DateInterval, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    v6[1] = (char *)&value witness table for Builtin.Int64 + 64;
    v4 = type metadata accessor for YIRSourceData(319);
    if (v5 <= 0x3F)
    {
      v6[2] = *(_QWORD *)(v4 - 8) + 64;
      v6[3] = (char *)&value witness table for Builtin.UnknownObject + 64;
      swift_initStructMetadata(a1, 256, 4, v6, a1 + 16);
    }
  }
}

unint64_t initializeBufferWithCopyOfBuffer for ReadingSummaryFrame(unint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  id v47;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v18 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = v18 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain(v18);
  }
  else
  {
    v7 = *(_QWORD *)a2;
    v8 = *(_BYTE *)(a2 + 8);
    sub_F9E4(*(_QWORD *)a2, v8);
    *(_QWORD *)a1 = v7;
    *(_BYTE *)(a1 + 8) = v8;
    v9 = *(_QWORD *)(a2 + 16);
    v10 = *(_BYTE *)(a2 + 24);
    sub_F9E4(v9, v10);
    *(_QWORD *)(a1 + 16) = v9;
    *(_BYTE *)(a1 + 24) = v10;
    v11 = *(_QWORD *)(a2 + 32);
    v12 = *(_BYTE *)(a2 + 40);
    sub_F9E4(v11, v12);
    *(_QWORD *)(a1 + 32) = v11;
    *(_BYTE *)(a1 + 40) = v12;
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    v13 = *(int *)(a3 + 32);
    v14 = a1 + v13;
    v15 = (uint64_t *)(a2 + v13);
    v16 = type metadata accessor for PageBackground(0);
    if (swift_getEnumCaseMultiPayload(v15, v16) == 1)
    {
      if (*((_BYTE *)v15 + 56))
      {
        v17 = *((_OWORD *)v15 + 1);
        *(_OWORD *)v14 = *(_OWORD *)v15;
        *(_OWORD *)(v14 + 16) = v17;
        *(_OWORD *)(v14 + 32) = *((_OWORD *)v15 + 2);
        *(_OWORD *)(v14 + 41) = *(_OWORD *)((char *)v15 + 41);
      }
      else
      {
        v27 = *(_OWORD *)(v15 + 3);
        *(_OWORD *)(v14 + 24) = v27;
        (**(void (***)(uint64_t, uint64_t *))(v27 - 8))(v14, v15);
        *(_OWORD *)(v14 + 40) = *(_OWORD *)(v15 + 5);
        *(_BYTE *)(v14 + 56) = 0;
      }
      *(_OWORD *)(v14 + 64) = *((_OWORD *)v15 + 4);
      *(_BYTE *)(v14 + 80) = *((_BYTE *)v15 + 80);
      *(_OWORD *)(v14 + 88) = *(_OWORD *)(v15 + 11);
      v28 = v15[13];
      *(_QWORD *)(v14 + 104) = v28;
      v29 = v15[15];
      swift_bridgeObjectRetain(v28);
      if (v29)
      {
        *(_QWORD *)(v14 + 112) = v15[14];
        *(_QWORD *)(v14 + 120) = v29;
        v30 = v15[17];
        *(_QWORD *)(v14 + 128) = v15[16];
        *(_QWORD *)(v14 + 136) = v30;
        *(_BYTE *)(v14 + 144) = *((_BYTE *)v15 + 144);
        v31 = v15[19];
        v32 = v15[20];
        *(_QWORD *)(v14 + 152) = v31;
        *(_QWORD *)(v14 + 160) = v32;
        swift_bridgeObjectRetain(v29);
        swift_bridgeObjectRetain(v30);
        swift_bridgeObjectRetain(v32);
      }
      else
      {
        v33 = *((_OWORD *)v15 + 8);
        *(_OWORD *)(v14 + 112) = *((_OWORD *)v15 + 7);
        *(_OWORD *)(v14 + 128) = v33;
        *(_OWORD *)(v14 + 144) = *((_OWORD *)v15 + 9);
        *(_QWORD *)(v14 + 160) = v15[20];
      }
      v26 = 1;
    }
    else
    {
      v19 = *v15;
      *(_QWORD *)v14 = *v15;
      swift_retain(v19);
      v20 = *(int *)(sub_5440(&qword_25E930) + 48);
      v21 = (void *)(v14 + v20);
      v22 = (char *)v15 + v20;
      v23 = type metadata accessor for ColorScheme(0);
      v24 = *(_QWORD *)(v23 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
      {
        v25 = sub_5440(&qword_25E928);
        memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, char *, uint64_t))(v24 + 16))(v21, v22, v23);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
      }
      v26 = 0;
    }
    swift_storeEnumTagMultiPayload(v14, v16, v26);
    v34 = *(int *)(a3 + 36);
    v35 = (char *)(a1 + v34);
    v36 = (char *)(a2 + v34);
    v37 = type metadata accessor for DateInterval(0);
    v38 = *(_QWORD *)(v37 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48))(v36, 1, v37))
    {
      v39 = sub_5440(&qword_268AE0);
      memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v38 + 16))(v35, v36, v37);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v37);
    }
    v40 = (int *)type metadata accessor for ReadingSummaryFrameViewModel(0);
    *(_QWORD *)&v35[v40[5]] = *(_QWORD *)&v36[v40[5]];
    v41 = v40[6];
    v42 = &v35[v41];
    v43 = &v36[v41];
    v44 = type metadata accessor for YIRSourceData(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v44 - 8) + 16))(v42, v43, v44);
    v45 = v40[7];
    v46 = *(void **)&v36[v45];
    *(_QWORD *)&v35[v45] = v46;
    v47 = v46;
  }
  return a1;
}

void destroy for ReadingSummaryFrame(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  sub_BE0C(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
  sub_BE0C(*(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24));
  sub_BE0C(*(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
  v4 = (_QWORD *)(a1 + *(int *)(a2 + 32));
  v5 = type metadata accessor for PageBackground(0);
  if (swift_getEnumCaseMultiPayload(v4, v5) == 1)
  {
    if (!*((_BYTE *)v4 + 56))
      _s7BooksUI13AnyPagedFrameVwxx_0(v4);
    swift_bridgeObjectRelease(v4[13]);
    v6 = v4[15];
    if (v6)
    {
      swift_bridgeObjectRelease(v6);
      swift_bridgeObjectRelease(v4[17]);
      swift_bridgeObjectRelease(v4[20]);
    }
  }
  else
  {
    swift_release(*v4);
    v7 = (char *)v4 + *(int *)(sub_5440(&qword_25E930) + 48);
    v8 = type metadata accessor for ColorScheme(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8))
      (*(void (**)(char *, uint64_t))(v9 + 8))(v7, v8);
  }
  v10 = a1 + *(int *)(a2 + 36);
  v11 = type metadata accessor for DateInterval(0);
  v12 = *(_QWORD *)(v11 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v10, v11);
  v13 = type metadata accessor for ReadingSummaryFrameViewModel(0);
  v14 = v10 + *(int *)(v13 + 24);
  v15 = type metadata accessor for YIRSourceData(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14, v15);

}

uint64_t initializeWithCopy for ReadingSummaryFrame(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  id v45;

  v6 = *(_QWORD *)a2;
  v7 = *(_BYTE *)(a2 + 8);
  sub_F9E4(*(_QWORD *)a2, v7);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(_BYTE *)(a2 + 24);
  sub_F9E4(v8, v9);
  *(_QWORD *)(a1 + 16) = v8;
  *(_BYTE *)(a1 + 24) = v9;
  v10 = *(_QWORD *)(a2 + 32);
  v11 = *(_BYTE *)(a2 + 40);
  sub_F9E4(v10, v11);
  *(_QWORD *)(a1 + 32) = v10;
  *(_BYTE *)(a1 + 40) = v11;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  v12 = *(int *)(a3 + 32);
  v13 = a1 + v12;
  v14 = (uint64_t *)(a2 + v12);
  v15 = type metadata accessor for PageBackground(0);
  if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
  {
    if (*((_BYTE *)v14 + 56))
    {
      v16 = *((_OWORD *)v14 + 1);
      *(_OWORD *)v13 = *(_OWORD *)v14;
      *(_OWORD *)(v13 + 16) = v16;
      *(_OWORD *)(v13 + 32) = *((_OWORD *)v14 + 2);
      *(_OWORD *)(v13 + 41) = *(_OWORD *)((char *)v14 + 41);
    }
    else
    {
      v25 = *(_OWORD *)(v14 + 3);
      *(_OWORD *)(v13 + 24) = v25;
      (**(void (***)(uint64_t, uint64_t *))(v25 - 8))(v13, v14);
      *(_OWORD *)(v13 + 40) = *(_OWORD *)(v14 + 5);
      *(_BYTE *)(v13 + 56) = 0;
    }
    *(_OWORD *)(v13 + 64) = *((_OWORD *)v14 + 4);
    *(_BYTE *)(v13 + 80) = *((_BYTE *)v14 + 80);
    *(_OWORD *)(v13 + 88) = *(_OWORD *)(v14 + 11);
    v26 = v14[13];
    *(_QWORD *)(v13 + 104) = v26;
    v27 = v14[15];
    swift_bridgeObjectRetain(v26);
    if (v27)
    {
      *(_QWORD *)(v13 + 112) = v14[14];
      *(_QWORD *)(v13 + 120) = v27;
      v28 = v14[17];
      *(_QWORD *)(v13 + 128) = v14[16];
      *(_QWORD *)(v13 + 136) = v28;
      *(_BYTE *)(v13 + 144) = *((_BYTE *)v14 + 144);
      v29 = v14[19];
      v30 = v14[20];
      *(_QWORD *)(v13 + 152) = v29;
      *(_QWORD *)(v13 + 160) = v30;
      swift_bridgeObjectRetain(v27);
      swift_bridgeObjectRetain(v28);
      swift_bridgeObjectRetain(v30);
    }
    else
    {
      v31 = *((_OWORD *)v14 + 8);
      *(_OWORD *)(v13 + 112) = *((_OWORD *)v14 + 7);
      *(_OWORD *)(v13 + 128) = v31;
      *(_OWORD *)(v13 + 144) = *((_OWORD *)v14 + 9);
      *(_QWORD *)(v13 + 160) = v14[20];
    }
    v24 = 1;
  }
  else
  {
    v17 = *v14;
    *(_QWORD *)v13 = *v14;
    swift_retain(v17);
    v18 = *(int *)(sub_5440(&qword_25E930) + 48);
    v19 = (void *)(v13 + v18);
    v20 = (char *)v14 + v18;
    v21 = type metadata accessor for ColorScheme(0);
    v22 = *(_QWORD *)(v21 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
    {
      v23 = sub_5440(&qword_25E928);
      memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v22 + 16))(v19, v20, v21);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
    }
    v24 = 0;
  }
  swift_storeEnumTagMultiPayload(v13, v15, v24);
  v32 = *(int *)(a3 + 36);
  v33 = (char *)(a1 + v32);
  v34 = (char *)(a2 + v32);
  v35 = type metadata accessor for DateInterval(0);
  v36 = *(_QWORD *)(v35 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48))(v34, 1, v35))
  {
    v37 = sub_5440(&qword_268AE0);
    memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v36 + 16))(v33, v34, v35);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v35);
  }
  v38 = (int *)type metadata accessor for ReadingSummaryFrameViewModel(0);
  *(_QWORD *)&v33[v38[5]] = *(_QWORD *)&v34[v38[5]];
  v39 = v38[6];
  v40 = &v33[v39];
  v41 = &v34[v39];
  v42 = type metadata accessor for YIRSourceData(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v42 - 8) + 16))(v40, v41, v42);
  v43 = v38[7];
  v44 = *(void **)&v34[v43];
  *(_QWORD *)&v33[v43] = v44;
  v45 = v44;
  return a1;
}

uint64_t assignWithCopy for ReadingSummaryFrame(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  __int128 *v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t (*v47)(char *, uint64_t, uint64_t);
  int v48;
  int v49;
  uint64_t v50;
  int *v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  void *v58;
  id v59;

  v6 = *(_QWORD *)a2;
  v7 = *(_BYTE *)(a2 + 8);
  sub_F9E4(*(_QWORD *)a2, v7);
  v8 = *(_QWORD *)a1;
  v9 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  sub_BE0C(v8, v9);
  v10 = *(_QWORD *)(a2 + 16);
  v11 = *(_BYTE *)(a2 + 24);
  sub_F9E4(v10, v11);
  v12 = *(_QWORD *)(a1 + 16);
  v13 = *(_BYTE *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v10;
  *(_BYTE *)(a1 + 24) = v11;
  sub_BE0C(v12, v13);
  v14 = *(_QWORD *)(a2 + 32);
  v15 = *(_BYTE *)(a2 + 40);
  sub_F9E4(v14, v15);
  v16 = *(_QWORD *)(a1 + 32);
  v17 = *(_BYTE *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = v14;
  *(_BYTE *)(a1 + 40) = v15;
  sub_BE0C(v16, v17);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  if (a1 != a2)
  {
    v18 = *(int *)(a3 + 32);
    v19 = a1 + v18;
    v20 = (__int128 *)(a2 + v18);
    sub_224DC(a1 + v18, type metadata accessor for PageBackground);
    v21 = type metadata accessor for PageBackground(0);
    if (swift_getEnumCaseMultiPayload(v20, v21) == 1)
    {
      if (*((_BYTE *)v20 + 56))
      {
        v22 = *v20;
        v23 = v20[1];
        v24 = v20[2];
        *(_OWORD *)(v19 + 41) = *(__int128 *)((char *)v20 + 41);
        *(_OWORD *)(v19 + 16) = v23;
        *(_OWORD *)(v19 + 32) = v24;
        *(_OWORD *)v19 = v22;
      }
      else
      {
        v33 = *((_QWORD *)v20 + 3);
        *(_QWORD *)(v19 + 24) = v33;
        *(_QWORD *)(v19 + 32) = *((_QWORD *)v20 + 4);
        (**(void (***)(uint64_t, __int128 *))(v33 - 8))(v19, v20);
        *(_OWORD *)(v19 + 40) = *(__int128 *)((char *)v20 + 40);
        *(_BYTE *)(v19 + 56) = 0;
      }
      *(_OWORD *)(v19 + 64) = v20[4];
      *(_BYTE *)(v19 + 80) = *((_BYTE *)v20 + 80);
      *(_QWORD *)(v19 + 88) = *((_QWORD *)v20 + 11);
      *(_QWORD *)(v19 + 96) = *((_QWORD *)v20 + 12);
      v34 = *((_QWORD *)v20 + 13);
      *(_QWORD *)(v19 + 104) = v34;
      v35 = *((_QWORD *)v20 + 15);
      swift_bridgeObjectRetain(v34);
      if (v35)
      {
        *(_QWORD *)(v19 + 112) = *((_QWORD *)v20 + 14);
        v36 = *((_QWORD *)v20 + 15);
        *(_QWORD *)(v19 + 120) = v36;
        *(_QWORD *)(v19 + 128) = *((_QWORD *)v20 + 16);
        v37 = *((_QWORD *)v20 + 17);
        *(_QWORD *)(v19 + 136) = v37;
        *(_BYTE *)(v19 + 144) = *((_BYTE *)v20 + 144);
        *(_QWORD *)(v19 + 152) = *((_QWORD *)v20 + 19);
        v38 = *((_QWORD *)v20 + 20);
        *(_QWORD *)(v19 + 160) = v38;
        swift_bridgeObjectRetain(v36);
        swift_bridgeObjectRetain(v37);
        swift_bridgeObjectRetain(v38);
      }
      else
      {
        v39 = v20[7];
        v40 = v20[8];
        v41 = v20[9];
        *(_QWORD *)(v19 + 160) = *((_QWORD *)v20 + 20);
        *(_OWORD *)(v19 + 128) = v40;
        *(_OWORD *)(v19 + 144) = v41;
        *(_OWORD *)(v19 + 112) = v39;
      }
      v32 = 1;
    }
    else
    {
      v25 = *(_QWORD *)v20;
      *(_QWORD *)v19 = *(_QWORD *)v20;
      swift_retain(v25);
      v26 = *(int *)(sub_5440(&qword_25E930) + 48);
      v27 = (void *)(v19 + v26);
      v28 = (char *)v20 + v26;
      v29 = type metadata accessor for ColorScheme(0);
      v30 = *(_QWORD *)(v29 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29))
      {
        v31 = sub_5440(&qword_25E928);
        memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, char *, uint64_t))(v30 + 16))(v27, v28, v29);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
      }
      v32 = 0;
    }
    swift_storeEnumTagMultiPayload(v19, v21, v32);
  }
  v42 = *(int *)(a3 + 36);
  v43 = (char *)(a1 + v42);
  v44 = (char *)(a2 + v42);
  v45 = type metadata accessor for DateInterval(0);
  v46 = *(_QWORD *)(v45 - 8);
  v47 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v46 + 48);
  v48 = v47(v43, 1, v45);
  v49 = v47(v44, 1, v45);
  if (!v48)
  {
    if (!v49)
    {
      (*(void (**)(char *, char *, uint64_t))(v46 + 24))(v43, v44, v45);
      goto LABEL_21;
    }
    (*(void (**)(char *, uint64_t))(v46 + 8))(v43, v45);
    goto LABEL_20;
  }
  if (v49)
  {
LABEL_20:
    v50 = sub_5440(&qword_268AE0);
    memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v50 - 8) + 64));
    goto LABEL_21;
  }
  (*(void (**)(char *, char *, uint64_t))(v46 + 16))(v43, v44, v45);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v46 + 56))(v43, 0, 1, v45);
LABEL_21:
  v51 = (int *)type metadata accessor for ReadingSummaryFrameViewModel(0);
  *(_QWORD *)&v43[v51[5]] = *(_QWORD *)&v44[v51[5]];
  v52 = v51[6];
  v53 = &v43[v52];
  v54 = &v44[v52];
  v55 = type metadata accessor for YIRSourceData(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v55 - 8) + 24))(v53, v54, v55);
  v56 = v51[7];
  v57 = *(void **)&v44[v56];
  v58 = *(void **)&v43[v56];
  *(_QWORD *)&v43[v56] = v57;
  v59 = v57;

  return a1;
}

uint64_t initializeWithTake for ReadingSummaryFrame(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v6 = *(int *)(a3 + 32);
  v7 = (_QWORD *)(a1 + v6);
  v8 = (_QWORD *)(a2 + v6);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  v9 = type metadata accessor for PageBackground(0);
  if (swift_getEnumCaseMultiPayload(v8, v9))
  {
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  else
  {
    *v7 = *v8;
    v10 = *(int *)(sub_5440(&qword_25E930) + 48);
    v11 = (char *)v7 + v10;
    v12 = (char *)v8 + v10;
    v13 = type metadata accessor for ColorScheme(0);
    v14 = *(_QWORD *)(v13 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
    {
      v15 = sub_5440(&qword_25E928);
      memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v12, v13);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
    }
    swift_storeEnumTagMultiPayload(v7, v9, 0);
  }
  v16 = *(int *)(a3 + 36);
  v17 = (char *)(a1 + v16);
  v18 = (char *)(a2 + v16);
  v19 = type metadata accessor for DateInterval(0);
  v20 = *(_QWORD *)(v19 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
  {
    v21 = sub_5440(&qword_268AE0);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v17, v18, v19);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
  }
  v22 = (int *)type metadata accessor for ReadingSummaryFrameViewModel(0);
  *(_QWORD *)&v17[v22[5]] = *(_QWORD *)&v18[v22[5]];
  v23 = v22[6];
  v24 = &v17[v23];
  v25 = &v18[v23];
  v26 = type metadata accessor for YIRSourceData(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v26 - 8) + 32))(v24, v25, v26);
  *(_QWORD *)&v17[v22[7]] = *(_QWORD *)&v18[v22[7]];
  return a1;
}

uint64_t assignWithTake for ReadingSummaryFrame(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(char *, uint64_t, uint64_t);
  int v32;
  int v33;
  uint64_t v34;
  int *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;

  v6 = *a2;
  v7 = *((_BYTE *)a2 + 8);
  v8 = *(_QWORD *)a1;
  v9 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  sub_BE0C(v8, v9);
  v10 = *((_BYTE *)a2 + 24);
  v11 = *(_QWORD *)(a1 + 16);
  v12 = *(_BYTE *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = a2[2];
  *(_BYTE *)(a1 + 24) = v10;
  sub_BE0C(v11, v12);
  v13 = *((_BYTE *)a2 + 40);
  v14 = *(_QWORD *)(a1 + 32);
  v15 = *(_BYTE *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = a2[4];
  *(_BYTE *)(a1 + 40) = v13;
  sub_BE0C(v14, v15);
  *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
  if ((uint64_t *)a1 != a2)
  {
    v16 = *(int *)(a3 + 32);
    v17 = (_QWORD *)(a1 + v16);
    v18 = (uint64_t *)((char *)a2 + v16);
    sub_224DC(a1 + v16, type metadata accessor for PageBackground);
    v19 = type metadata accessor for PageBackground(0);
    if (swift_getEnumCaseMultiPayload(v18, v19))
    {
      memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    }
    else
    {
      *v17 = *v18;
      v20 = *(int *)(sub_5440(&qword_25E930) + 48);
      v21 = (char *)v17 + v20;
      v22 = (char *)v18 + v20;
      v23 = type metadata accessor for ColorScheme(0);
      v24 = *(_QWORD *)(v23 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
      {
        v25 = sub_5440(&qword_25E928);
        memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v21, v22, v23);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
      }
      swift_storeEnumTagMultiPayload(v17, v19, 0);
    }
  }
  v26 = *(int *)(a3 + 36);
  v27 = (char *)(a1 + v26);
  v28 = (char *)a2 + v26;
  v29 = type metadata accessor for DateInterval(0);
  v30 = *(_QWORD *)(v29 - 8);
  v31 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v30 + 48);
  v32 = v31(v27, 1, v29);
  v33 = v31(v28, 1, v29);
  if (!v32)
  {
    if (!v33)
    {
      (*(void (**)(char *, char *, uint64_t))(v30 + 40))(v27, v28, v29);
      goto LABEL_14;
    }
    (*(void (**)(char *, uint64_t))(v30 + 8))(v27, v29);
    goto LABEL_13;
  }
  if (v33)
  {
LABEL_13:
    v34 = sub_5440(&qword_268AE0);
    memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
    goto LABEL_14;
  }
  (*(void (**)(char *, char *, uint64_t))(v30 + 32))(v27, v28, v29);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
LABEL_14:
  v35 = (int *)type metadata accessor for ReadingSummaryFrameViewModel(0);
  *(_QWORD *)&v27[v35[5]] = *(_QWORD *)&v28[v35[5]];
  v36 = v35[6];
  v37 = &v27[v36];
  v38 = &v28[v36];
  v39 = type metadata accessor for YIRSourceData(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v39 - 8) + 40))(v37, v38, v39);
  v40 = v35[7];
  v41 = *(void **)&v27[v40];
  *(_QWORD *)&v27[v40] = *(_QWORD *)&v28[v40];

  return a1;
}

uint64_t getEnumTagSinglePayload for ReadingSummaryFrame(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_167124);
}

uint64_t sub_167124(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 254)
  {
    v4 = *(unsigned __int8 *)(a1 + 8);
    if (v4 > 1)
      return (v4 ^ 0xFF) + 1;
    else
      return 0;
  }
  else
  {
    v8 = type metadata accessor for PageBackground(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 32);
    }
    else
    {
      v10 = type metadata accessor for ReadingSummaryFrameViewModel(0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 36);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for ReadingSummaryFrame(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1671C8);
}

uint64_t sub_1671C8(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 254)
  {
    *(_BYTE *)(result + 8) = -(char)a2;
  }
  else
  {
    v8 = type metadata accessor for PageBackground(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 32);
    }
    else
    {
      v10 = type metadata accessor for ReadingSummaryFrameViewModel(0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 36);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

uint64_t sub_167260(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[6];

  v5[0] = "\t";
  v5[1] = "\t";
  v5[2] = "\t";
  v5[3] = &unk_1F21E0;
  result = type metadata accessor for PageBackground(319);
  if (v3 <= 0x3F)
  {
    v5[4] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for ReadingSummaryFrameViewModel(319);
    if (v4 <= 0x3F)
    {
      v5[5] = *(_QWORD *)(result - 8) + 64;
      swift_initStructMetadata(a1, 256, 6, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

uint64_t sub_1672FC()
{
  return sub_7FD8(&qword_268C58, &qword_268AF8, (uint64_t)&unk_1EAAB8);
}

uint64_t *sub_167328(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = type metadata accessor for PlatterItem.Configuration(0);
  v5 = *(_DWORD *)(*(_QWORD *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v14 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v14);
  }
  else
  {
    v6 = v4;
    if (swift_getEnumCaseMultiPayload(a2, v4) == 1)
    {
      v7 = a2[1];
      *a1 = *a2;
      a1[1] = v7;
      v8 = a2[3];
      a1[2] = a2[2];
      a1[3] = v8;
      v9 = a2[4];
      v10 = a2[5];
      a1[4] = v9;
      a1[5] = v10;
      swift_bridgeObjectRetain(v7);
      swift_bridgeObjectRetain(v8);
      swift_bridgeObjectRetain(v10);
      v11 = a1;
      v12 = v6;
      v13 = 1;
    }
    else
    {
      v15 = type metadata accessor for ImageResource(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(a1, a2, v15);
      v11 = a1;
      v12 = v6;
      v13 = 0;
    }
    swift_storeEnumTagMultiPayload(v11, v12, v13);
  }
  return a1;
}

uint64_t type metadata accessor for PlatterItem.Configuration(uint64_t a1)
{
  return sub_1FE90(a1, qword_268D60, (uint64_t)&nominal type descriptor for PlatterItem.Configuration);
}

uint64_t sub_167420(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v4;

  v2 = type metadata accessor for PlatterItem.Configuration(0);
  if (swift_getEnumCaseMultiPayload(a1, v2) == 1)
  {
    swift_bridgeObjectRelease(a1[1]);
    swift_bridgeObjectRelease(a1[3]);
    return swift_bridgeObjectRelease(a1[5]);
  }
  else
  {
    v4 = type metadata accessor for ImageResource(0);
    return (*(uint64_t (**)(_QWORD *, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  }
}

_QWORD *sub_167490(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = type metadata accessor for PlatterItem.Configuration(0);
  if (swift_getEnumCaseMultiPayload(a2, v4) == 1)
  {
    v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    v6 = a2[3];
    a1[2] = a2[2];
    a1[3] = v6;
    v7 = a2[4];
    v8 = a2[5];
    a1[4] = v7;
    a1[5] = v8;
    swift_bridgeObjectRetain(v5);
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v8);
    v9 = a1;
    v10 = v4;
    v11 = 1;
  }
  else
  {
    v12 = type metadata accessor for ImageResource(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(a1, a2, v12);
    v9 = a1;
    v10 = v4;
    v11 = 0;
  }
  swift_storeEnumTagMultiPayload(v9, v10, v11);
  return a1;
}

_QWORD *sub_167548(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (a1 != a2)
  {
    sub_224DC((uint64_t)a1, type metadata accessor for PlatterItem.Configuration);
    v4 = type metadata accessor for PlatterItem.Configuration(0);
    if (swift_getEnumCaseMultiPayload(a2, v4) == 1)
    {
      *a1 = *a2;
      v5 = a2[1];
      a1[1] = v5;
      a1[2] = a2[2];
      v6 = a2[3];
      a1[3] = v6;
      a1[4] = a2[4];
      v7 = a2[5];
      a1[5] = v7;
      swift_bridgeObjectRetain(v5);
      swift_bridgeObjectRetain(v6);
      swift_bridgeObjectRetain(v7);
      v8 = a1;
      v9 = v4;
      v10 = 1;
    }
    else
    {
      v11 = type metadata accessor for ImageResource(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a1, a2, v11);
      v8 = a1;
      v9 = v4;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
  }
  return a1;
}

void *sub_167630(void *a1, const void *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = type metadata accessor for PlatterItem.Configuration(0);
  if (swift_getEnumCaseMultiPayload(a2, v4))
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  }
  else
  {
    v5 = type metadata accessor for ImageResource(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a1, a2, v5);
    swift_storeEnumTagMultiPayload(a1, v4, 0);
  }
  return a1;
}

void *sub_1676C0(void *a1, const void *a2)
{
  uint64_t v4;
  uint64_t v5;

  if (a1 != a2)
  {
    sub_224DC((uint64_t)a1, type metadata accessor for PlatterItem.Configuration);
    v4 = type metadata accessor for PlatterItem.Configuration(0);
    if (swift_getEnumCaseMultiPayload(a2, v4))
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
    }
    else
    {
      v5 = type metadata accessor for ImageResource(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a1, a2, v5);
      swift_storeEnumTagMultiPayload(a1, v4, 0);
    }
  }
  return a1;
}

uint64_t sub_167768(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_167774);
}

uint64_t sub_167774(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PlatterItem.Configuration(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_1677B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1677BC);
}

uint64_t sub_1677BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PlatterItem.Configuration(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for PlatterItem(uint64_t a1)
{
  return sub_1FE90(a1, qword_268CB8, (uint64_t)&nominal type descriptor for PlatterItem);
}

uint64_t sub_167810(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  result = type metadata accessor for PlatterItem.Configuration(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 1, &v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t *sub_167878(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v14 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v14);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
    {
      v7 = a2[1];
      *a1 = *a2;
      a1[1] = v7;
      v8 = a2[3];
      a1[2] = a2[2];
      a1[3] = v8;
      v9 = a2[4];
      v10 = a2[5];
      a1[4] = v9;
      a1[5] = v10;
      swift_bridgeObjectRetain(v7);
      swift_bridgeObjectRetain(v8);
      swift_bridgeObjectRetain(v10);
      v11 = a1;
      v12 = a3;
      v13 = 1;
    }
    else
    {
      v15 = type metadata accessor for ImageResource(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(a1, a2, v15);
      v11 = a1;
      v12 = a3;
      v13 = 0;
    }
    swift_storeEnumTagMultiPayload(v11, v12, v13);
  }
  return a1;
}

uint64_t sub_167954(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;

  if (swift_getEnumCaseMultiPayload(a1, a2) == 1)
  {
    swift_bridgeObjectRelease(a1[1]);
    swift_bridgeObjectRelease(a1[3]);
    return swift_bridgeObjectRelease(a1[5]);
  }
  else
  {
    v4 = type metadata accessor for ImageResource(0);
    return (*(uint64_t (**)(_QWORD *, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  }
}

_QWORD *sub_1679B4(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
  {
    v6 = a2[1];
    *a1 = *a2;
    a1[1] = v6;
    v7 = a2[3];
    a1[2] = a2[2];
    a1[3] = v7;
    v8 = a2[4];
    v9 = a2[5];
    a1[4] = v8;
    a1[5] = v9;
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v9);
    v10 = a1;
    v11 = a3;
    v12 = 1;
  }
  else
  {
    v13 = type metadata accessor for ImageResource(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(a1, a2, v13);
    v10 = a1;
    v11 = a3;
    v12 = 0;
  }
  swift_storeEnumTagMultiPayload(v10, v11, v12);
  return a1;
}

_QWORD *sub_167A64(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (a1 != a2)
  {
    sub_224DC((uint64_t)a1, type metadata accessor for PlatterItem.Configuration);
    if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
    {
      *a1 = *a2;
      v6 = a2[1];
      a1[1] = v6;
      a1[2] = a2[2];
      v7 = a2[3];
      a1[3] = v7;
      a1[4] = a2[4];
      v8 = a2[5];
      a1[5] = v8;
      swift_bridgeObjectRetain(v6);
      swift_bridgeObjectRetain(v7);
      swift_bridgeObjectRetain(v8);
      v9 = a1;
      v10 = a3;
      v11 = 1;
    }
    else
    {
      v12 = type metadata accessor for ImageResource(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(a1, a2, v12);
      v9 = a1;
      v10 = a3;
      v11 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v10, v11);
  }
  return a1;
}

void *sub_167B44(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (swift_getEnumCaseMultiPayload(a2, a3))
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v6 = type metadata accessor for ImageResource(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload(a1, a3, 0);
  }
  return a1;
}

void *sub_167BCC(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (a1 != a2)
  {
    sub_224DC((uint64_t)a1, type metadata accessor for PlatterItem.Configuration);
    if (swift_getEnumCaseMultiPayload(a2, a3))
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
    else
    {
      v6 = type metadata accessor for ImageResource(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload(a1, a3, 0);
    }
  }
  return a1;
}

uint64_t sub_167C6C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = type metadata accessor for ImageResource(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = "0";
    swift_initEnumMetadataMultiPayload(a1, 256, 2, v4);
    return 0;
  }
  return result;
}

uint64_t sub_167CD8(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_22FBE8, 1);
}

uint64_t type metadata accessor for PlatterModifier(uint64_t a1)
{
  return sub_1FE90(a1, qword_268EB8, (uint64_t)&nominal type descriptor for PlatterModifier);
}

uint64_t sub_167CFC()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[3]);
  swift_bridgeObjectRelease(v0[5]);
  swift_bridgeObjectRelease(v0[7]);
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_167D30@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_163A30(v1[2], v1[3], v1[4], v1[5], v1[6], v1[7], a1);
}

unint64_t sub_167D40()
{
  unint64_t result;
  uint64_t v1;

  result = qword_268DB0;
  if (!qword_268DB0)
  {
    v1 = sub_7EF8(&qword_268DA0);
    sub_167DC4();
    sub_6FD0(&qword_268DD8, type metadata accessor for PlatterModifier, (uint64_t)&unk_1F2308);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_268DB0);
  }
  return result;
}

unint64_t sub_167DC4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_268DB8;
  if (!qword_268DB8)
  {
    v1 = sub_7EF8(&qword_268DC0);
    sub_4522C();
    sub_7FD8(&qword_268DC8, &qword_268DD0, (uint64_t)&protocol conformance descriptor for _ForegroundStyleModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_268DB8);
  }
  return result;
}

unint64_t sub_167E58()
{
  unint64_t result;
  uint64_t v1;

  result = qword_268E28;
  if (!qword_268E28)
  {
    v1 = sub_7EF8(&qword_268E18);
    sub_6FD0(&qword_268E30, type metadata accessor for PlatterItem, (uint64_t)&unk_1F2230);
    sub_7FD8(&qword_268E38, &qword_268E40, (uint64_t)&protocol conformance descriptor for _TraitWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_268E28);
  }
  return result;
}

uint64_t *sub_167EF4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = sub_5440(&qword_25F1E8);
    if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
    {
      v8 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      v9 = a1;
      v10 = v7;
      v11 = 1;
    }
    else
    {
      v13 = *a2;
      *a1 = *a2;
      swift_retain(v13);
      v9 = a1;
      v10 = v7;
      v11 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v10, v11);
    v14 = *(int *)(a3 + 20);
    v15 = (uint64_t *)((char *)a1 + v14);
    v16 = (uint64_t *)((char *)a2 + v14);
    v17 = sub_5440(&qword_25F208);
    if (swift_getEnumCaseMultiPayload(v16, v17) == 1)
    {
      v18 = type metadata accessor for BlendMode(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v15, v16, v18);
      v19 = v15;
      v20 = v17;
      v21 = 1;
    }
    else
    {
      v22 = *v16;
      *v15 = *v16;
      swift_retain(v22);
      v19 = v15;
      v20 = v17;
      v21 = 0;
    }
    swift_storeEnumTagMultiPayload(v19, v20, v21);
    *(_OWORD *)((char *)a1 + *(int *)(a3 + 24)) = *(_OWORD *)((char *)a2 + *(int *)(a3 + 24));
  }
  return a1;
}

double sub_168050(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  double result;

  v4 = sub_5440(&qword_25F1E8);
  if (swift_getEnumCaseMultiPayload(a1, v4) == 1)
  {
    v5 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  }
  else
  {
    swift_release(*a1);
  }
  v6 = (_QWORD *)((char *)a1 + *(int *)(a2 + 20));
  v7 = sub_5440(&qword_25F208);
  if (swift_getEnumCaseMultiPayload(v6, v7) == 1)
  {
    v8 = type metadata accessor for BlendMode(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v6, v8);
  }
  else
  {
    *(_QWORD *)&result = swift_release(*v6).n128_u64[0];
  }
  return result;
}

uint64_t *sub_168108(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v6 = sub_5440(&qword_25F1E8);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for ColorScheme(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a1;
    v9 = v6;
    v10 = 1;
  }
  else
  {
    v11 = *a2;
    *a1 = *a2;
    swift_retain(v11);
    v8 = a1;
    v9 = v6;
    v10 = 0;
  }
  swift_storeEnumTagMultiPayload(v8, v9, v10);
  v12 = *(int *)(a3 + 20);
  v13 = (uint64_t *)((char *)a1 + v12);
  v14 = (uint64_t *)((char *)a2 + v12);
  v15 = sub_5440(&qword_25F208);
  if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
  {
    v16 = type metadata accessor for BlendMode(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v13, v14, v16);
    v17 = v13;
    v18 = v15;
    v19 = 1;
  }
  else
  {
    v20 = *v14;
    *v13 = *v14;
    swift_retain(v20);
    v17 = v13;
    v18 = v15;
    v19 = 0;
  }
  swift_storeEnumTagMultiPayload(v17, v18, v19);
  *(_OWORD *)((char *)a1 + *(int *)(a3 + 24)) = *(_OWORD *)((char *)a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t *sub_168238(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;

  if (a1 != a2)
  {
    sub_B414((uint64_t)a1, &qword_25F1E8);
    v6 = sub_5440(&qword_25F1E8);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = v6;
      v10 = 1;
    }
    else
    {
      v11 = *a2;
      *a1 = *a2;
      swift_retain(v11);
      v8 = a1;
      v9 = v6;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
    v12 = *(int *)(a3 + 20);
    v13 = (uint64_t *)((char *)a1 + v12);
    v14 = (uint64_t *)((char *)a2 + v12);
    sub_B414((uint64_t)a1 + v12, &qword_25F208);
    v15 = sub_5440(&qword_25F208);
    if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
    {
      v16 = type metadata accessor for BlendMode(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v13, v14, v16);
      v17 = v13;
      v18 = v15;
      v19 = 1;
    }
    else
    {
      v20 = *v14;
      *v13 = *v14;
      swift_retain(v20);
      v17 = v13;
      v18 = v15;
      v19 = 0;
    }
    swift_storeEnumTagMultiPayload(v17, v18, v19);
  }
  v21 = *(int *)(a3 + 24);
  v22 = (uint64_t *)((char *)a1 + v21);
  v23 = (uint64_t *)((char *)a2 + v21);
  *v22 = *v23;
  v22[1] = v23[1];
  return a1;
}

char *sub_1683A0(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;

  v6 = sub_5440(&qword_25F1E8);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for ColorScheme(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v8 = *(int *)(a3 + 20);
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = sub_5440(&qword_25F208);
  if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
  {
    v12 = type metadata accessor for BlendMode(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v9, v10, v12);
    swift_storeEnumTagMultiPayload(v9, v11, 1);
  }
  else
  {
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  *(_OWORD *)&a1[*(int *)(a3 + 24)] = *(_OWORD *)&a2[*(int *)(a3 + 24)];
  return a1;
}

char *sub_1684C8(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;

  if (a1 != a2)
  {
    sub_B414((uint64_t)a1, &qword_25F1E8);
    v6 = sub_5440(&qword_25F1E8);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for ColorScheme(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
    v8 = *(int *)(a3 + 20);
    v9 = &a1[v8];
    v10 = &a2[v8];
    sub_B414((uint64_t)&a1[v8], &qword_25F208);
    v11 = sub_5440(&qword_25F208);
    if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
    {
      v12 = type metadata accessor for BlendMode(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v9, v10, v12);
      swift_storeEnumTagMultiPayload(v9, v11, 1);
    }
    else
    {
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    }
  }
  *(_OWORD *)&a1[*(int *)(a3 + 24)] = *(_OWORD *)&a2[*(int *)(a3 + 24)];
  return a1;
}

uint64_t sub_168618(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_168624);
}

uint64_t sub_168624(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v6 = sub_5440(&qword_25F210);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v8 = sub_5440(&qword_25F228);
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t sub_1686A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1686AC);
}

uint64_t sub_1686AC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v8 = sub_5440(&qword_25F210);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v10 = sub_5440(&qword_25F228);
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_168730(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[3];

  sub_19B38(319, (unint64_t *)&qword_25F298, type metadata accessor for ColorConstants, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_19B38(319, (unint64_t *)&qword_25F2B0, (uint64_t (*)(uint64_t))&type metadata accessor for BlendMode, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
    if (v5 <= 0x3F)
    {
      v6[1] = *(_QWORD *)(v4 - 8) + 64;
      v6[2] = &unk_1F21E0;
      swift_initStructMetadata(a1, 256, 3, v6, a1 + 16);
    }
  }
}

unint64_t sub_1687F0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_268EF8;
  if (!qword_268EF8)
  {
    v1 = sub_7EF8(&qword_268F00);
    sub_167D40();
    sub_7FD8(&qword_268DE0, &qword_268DA8, (uint64_t)&protocol conformance descriptor for GeometryReader<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_268EF8);
  }
  return result;
}

uint64_t sub_168874(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_22FC10, 1);
}

unint64_t sub_168888()
{
  unint64_t result;
  uint64_t v1;

  result = qword_268F28;
  if (!qword_268F28)
  {
    v1 = sub_7EF8(&qword_268F20);
    sub_3CC54(&qword_268F30, &qword_268F10, (void (*)(void))sub_16892C);
    sub_7FD8(&qword_25F6F8, &qword_25F700, (uint64_t)&protocol conformance descriptor for _ClipEffect<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_268F28);
  }
  return result;
}

unint64_t sub_16892C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_268F38;
  if (!qword_268F38)
  {
    v1 = sub_7EF8(&qword_268F08);
    sub_3CC54(&qword_268F40, &qword_2628C0, (void (*)(void))sub_1689D0);
    sub_7FD8(&qword_260498, &qword_2604A0, (uint64_t)&protocol conformance descriptor for _BackgroundStyleModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_268F38);
  }
  return result;
}

unint64_t sub_1689D0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_268F48;
  if (!qword_268F48)
  {
    v1 = sub_7EF8(&qword_2628B8);
    sub_7FD8(&qword_268F50, &qword_268F18, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_268F48);
  }
  return result;
}

void Metrics.Impression.init(artistName:id:idType:impressionIndex:impressionType:isSG:kind:name:narratorName:parentId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  __asm { BR              X22 }
}

uint64_t sub_168AA8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X5>, char a7@<W7>, _QWORD *a8@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  BOOL v18;
  unint64_t v19;
  uint64_t result;
  uint64_t v21;
  unint64_t v22;

  v18 = a5 == 0;
  v19 = 0xE600000000000000;
  if (!v18)
    v19 = v17;
  *a8 = a1;
  a8[1] = a2;
  result = 0x64695F737469;
  if (!v18)
    result = 0x69746E6575716573;
  a8[2] = a3;
  a8[3] = a4;
  v21 = 0x696F56736B6F6F42;
  if ((a7 & 1) == 0)
    v21 = 0;
  v22 = 0xEB00000000736563;
  if ((a7 & 1) == 0)
    v22 = 0;
  a8[4] = result;
  a8[5] = v19;
  a8[6] = a6;
  a8[7] = 0x7265746C6966;
  a8[8] = v16;
  a8[9] = v15;
  a8[10] = v14;
  a8[11] = v13;
  a8[12] = v12;
  a8[13] = v11;
  a8[14] = v10;
  a8[15] = v21;
  a8[16] = v22;
  a8[17] = v9;
  a8[18] = v8;
  return result;
}

uint64_t static Metrics.createImpressionMetrics(impression:)@<X0>(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  unint64_t v30;
  _QWORD v32[2];
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;

  v32[1] = a2;
  v3 = type metadata accessor for ScalarDictionary(0);
  __chkstk_darwin(v3);
  v5 = (char *)v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for ImpressionMetrics.ID(0);
  __chkstk_darwin(v10);
  v12 = (char *)v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = a1[7];
  v39 = a1[6];
  v40 = v13;
  v41 = a1[8];
  v14 = *((_QWORD *)a1 + 18);
  v42 = v14;
  v15 = a1[3];
  v35 = a1[2];
  v36 = v15;
  v16 = a1[5];
  v37 = a1[4];
  v38 = v16;
  v17 = a1[1];
  v33 = *a1;
  v34 = v17;
  v18 = v14;
  v19 = *((_QWORD *)&v41 + 1);
  v20 = *((_QWORD *)&v17 + 1);
  if (*((_QWORD *)&v17 + 1))
  {
    v21 = v34;
    swift_bridgeObjectRetain(v14);
    v22 = v20;
  }
  else
  {
    v23 = swift_bridgeObjectRetain(v14);
    v24 = UUID.init()(v23);
    v21 = UUID.uuidString.getter(v24);
    v22 = v25;
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  v26 = v36;
  swift_bridgeObjectRetain(v20);
  ImpressionMetrics.ID.init(parent:element:index:)(v19, v18, v21, v22, v26);
  sub_B55BC(&v33);
  v27 = sub_123BD4();
  v28 = sub_B5664(&v33);
  ScalarDictionary.init()(v28);
  v29 = sub_B570C((uint64_t)_swiftEmptyArrayStorage);
  v30 = sub_B570C((uint64_t)_swiftEmptyArrayStorage);
  return ImpressionMetrics.init(id:fields:custom:commonFields:clickLocationFields:)(v12, v27, v5, v29, v30);
}

uint64_t Metrics.Impression.impressionIndex.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 48);
}

uint64_t Metrics.Impression.impressionIndex.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 48) = result;
  return result;
}

uint64_t Metrics.Impression.impressionType.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 56);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 64));
  return v1;
}

uint64_t Metrics.Impression.impressionType.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease(*(_QWORD *)(v2 + 64));
  *(_QWORD *)(v2 + 56) = a1;
  *(_QWORD *)(v2 + 64) = a2;
  return result;
}

uint64_t (*Metrics.Impression.impressionType.modify())()
{
  return KeyedEncodingContainer.encode<A>(_:forKey:);
}

uint64_t Metrics.Impression.kind.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 72);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 80));
  return v1;
}

uint64_t Metrics.Impression.kind.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease(*(_QWORD *)(v2 + 80));
  *(_QWORD *)(v2 + 72) = a1;
  *(_QWORD *)(v2 + 80) = a2;
  return result;
}

uint64_t (*Metrics.Impression.kind.modify())()
{
  return KeyedEncodingContainer.encode<A>(_:forKey:);
}

uint64_t Metrics.Impression.name.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 88);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 96));
  return v1;
}

uint64_t Metrics.Impression.name.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease(*(_QWORD *)(v2 + 96));
  *(_QWORD *)(v2 + 88) = a1;
  *(_QWORD *)(v2 + 96) = a2;
  return result;
}

uint64_t (*Metrics.Impression.name.modify())()
{
  return KeyedEncodingContainer.encode<A>(_:forKey:);
}

uint64_t Metrics.Impression.narratorName.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 104);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 112));
  return v1;
}

uint64_t Metrics.Impression.narratorName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease(*(_QWORD *)(v2 + 112));
  *(_QWORD *)(v2 + 104) = a1;
  *(_QWORD *)(v2 + 112) = a2;
  return result;
}

uint64_t (*Metrics.Impression.narratorName.modify())()
{
  return KeyedEncodingContainer.encode<A>(_:forKey:);
}

uint64_t Metrics.Impression.narratorType.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 120);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 128));
  return v1;
}

uint64_t Metrics.Impression.narratorType.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease(*(_QWORD *)(v2 + 128));
  *(_QWORD *)(v2 + 120) = a1;
  *(_QWORD *)(v2 + 128) = a2;
  return result;
}

uint64_t Metrics.Impression.parentId.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 136);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 144));
  return v1;
}

uint64_t Metrics.Impression.parentId.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease(*(_QWORD *)(v2 + 144));
  *(_QWORD *)(v2 + 136) = a1;
  *(_QWORD *)(v2 + 144) = a2;
  return result;
}

uint64_t (*Metrics.Impression.parentId.modify())()
{
  return KeyedEncodingContainer.encode<A>(_:forKey:);
}

uint64_t Metrics.ImpressionType.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_169084 + 4 * byte_1F2361[*v0]))(0x6E6F74747562, 0xE600000000000000);
}

uint64_t sub_169084()
{
  return 0x7265746C6966;
}

uint64_t sub_169094()
{
  return 1802398060;
}

uint64_t sub_1690A4()
{
  return 0x70756B636F6CLL;
}

uint64_t sub_1690B4()
{
  return 1701273968;
}

uint64_t sub_1690C4()
{
  return 0x77656976657270;
}

uint64_t sub_1690DC()
{
  return 0x6E6F6974636573;
}

uint64_t sub_1690F4()
{
  return 0x68736F6F7773;
}

uint64_t sub_169104()
{
  return 0x6B636F6C5F707075;
}

uint64_t sub_169120(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_169158 + 4 * byte_1F236A[a1]))(0x614E747369747261, 0xEA0000000000656DLL);
}

uint64_t sub_169158()
{
  return 25705;
}

uint64_t sub_169164()
{
  return 0x657079546469;
}

uint64_t sub_169178()
{
  return 0x6973736572706D69;
}

uint64_t sub_1691B0()
{
  return 1684957547;
}

uint64_t sub_1691C0()
{
  return 1701667182;
}

uint64_t sub_1691D0()
{
  return 0x726F74617272616ELL;
}

uint64_t sub_1691FC()
{
  return 0x6449746E65726170;
}

uint64_t sub_169214()
{
  unsigned __int8 *v0;

  return sub_169120(*v0);
}

uint64_t sub_16921C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_169F50(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_169240(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_169720();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_169268(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_169720();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t Metrics.Impression.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  char v46;
  char v47;
  char v48;
  char v49;
  char v50;
  char v51;
  char v52;
  char v53;

  v3 = sub_5440(&qword_268F58);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = v1[1];
  v9 = v1[2];
  v42 = v1[3];
  v43 = v9;
  v10 = v1[4];
  v40 = v1[5];
  v41 = v10;
  v11 = v1[6];
  v38 = v1[7];
  v39 = v11;
  v12 = v1[8];
  v36 = v1[9];
  v37 = v12;
  v13 = v1[10];
  v34 = v1[11];
  v35 = v13;
  v14 = v1[12];
  v32 = v1[13];
  v33 = v14;
  v15 = v1[14];
  v30 = v1[15];
  v31 = v15;
  v29 = v1[16];
  v16 = a1[3];
  v17 = a1[4];
  sub_5480(a1, v16);
  v18 = sub_169720();
  v19 = v16;
  v20 = v3;
  dispatch thunk of Encoder.container<A>(keyedBy:)(&_s10ImpressionV10CodingKeysON, &_s10ImpressionV10CodingKeysON, v18, v19, v17);
  v53 = 0;
  v21 = v44;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v7, v8, &v53, v3);
  if (!v21)
  {
    v23 = v40;
    v22 = v41;
    v25 = v38;
    v24 = v39;
    v26 = v37;
    v52 = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v43, v42, &v52, v20);
    v51 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v22, v23, &v51, v20);
    v50 = 3;
    KeyedEncodingContainer.encode(_:forKey:)(v24, &v50, v20);
    v49 = 4;
    KeyedEncodingContainer.encode(_:forKey:)(v25, v26, &v49, v20);
    v48 = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v36, v35, &v48, v20);
    v47 = 6;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v34, v33, &v47, v20);
    v46 = 7;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v32, v31, &v46, v20);
    v45 = 8;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v30, v29, &v45, v20);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v20);
}

uint64_t sub_16951C(_QWORD *a1)
{
  return Metrics.Impression.encode(to:)(a1);
}

uint64_t Metrics.ImpressionType.init(rawValue:)@<X0>(Swift::String string@<0:X0, 8:X1>, char *a2@<X8>)
{
  void *object;
  Swift::String v3;
  unint64_t v5;
  uint64_t result;
  char v7;

  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_24A4B8, v3);
  result = swift_bridgeObjectRelease(object);
  v7 = 9;
  if (v5 < 9)
    v7 = v5;
  *a2 = v7;
  return result;
}

void sub_169588(char *a1)
{
  sub_C5F6C(*a1);
}

Swift::Int sub_169594()
{
  char *v0;
  char v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3, 0);
  sub_12539C((uint64_t)v3, v1);
  return Hasher._finalize()();
}

void sub_1695D8(uint64_t a1)
{
  char *v1;

  sub_12539C(a1, *v1);
}

Swift::Int sub_1695E0(uint64_t a1)
{
  char *v1;
  char v2;
  _QWORD v4[9];

  v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  sub_12539C((uint64_t)v4, v2);
  return Hasher._finalize()();
}

uint64_t sub_169620@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  return Metrics.ImpressionType.init(rawValue:)(*a1, a2);
}

uint64_t sub_16962C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = Metrics.ImpressionType.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t ImpressionMetrics.withImpressionIndex(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  void (*v6)(_QWORD *, _QWORD);
  uint64_t (*v7)(_BYTE *, _QWORD);
  _BYTE v9[32];
  _QWORD v10[4];

  v5 = type metadata accessor for ImpressionMetrics(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v2, v5);
  v6 = (void (*)(_QWORD *, _QWORD))ImpressionMetrics.id.modify(v10);
  ImpressionMetrics.ID.index.setter(a1);
  v6(v10, 0);
  v10[3] = &type metadata for Int;
  v10[0] = a1;
  v7 = (uint64_t (*)(_BYTE *, _QWORD))ImpressionMetrics.fields.modify(v9);
  sub_8B78((uint64_t)v10, 0x6973736572706D69, 0xEF7865646E496E6FLL);
  return v7(v9, 0);
}

unint64_t sub_169720()
{
  unint64_t result;

  result = qword_268F60;
  if (!qword_268F60)
  {
    result = swift_getWitnessTable(&unk_1F2598, &_s10ImpressionV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_268F60);
  }
  return result;
}

unint64_t sub_169764(uint64_t a1)
{
  unint64_t result;

  result = sub_124444();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_16978C()
{
  unint64_t result;

  result = qword_268F68;
  if (!qword_268F68)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Metrics.ImpressionType, &type metadata for Metrics.ImpressionType);
    atomic_store(result, (unint64_t *)&qword_268F68);
  }
  return result;
}

uint64_t sub_1697D0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 136);
  v3 = *(_QWORD *)(a1 + 144);
  *a2 = v2;
  a2[1] = v3;
  return swift_bridgeObjectRetain(v3);
}

uint64_t sub_1697DC(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = *a1;
  v3 = a1[1];
  v5 = *(_QWORD *)(a2 + 144);
  swift_bridgeObjectRetain(v3);
  result = swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a2 + 136) = v4;
  *(_QWORD *)(a2 + 144) = v3;
  return result;
}

uint64_t _s10ImpressionVwxx(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[5]);
  swift_bridgeObjectRelease(a1[8]);
  swift_bridgeObjectRelease(a1[10]);
  swift_bridgeObjectRelease(a1[12]);
  swift_bridgeObjectRelease(a1[14]);
  swift_bridgeObjectRelease(a1[16]);
  return swift_bridgeObjectRelease(a1[18]);
}

uint64_t _s10ImpressionVwcp(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  v7 = *(_QWORD *)(a2 + 64);
  v6 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = v7;
  *(_QWORD *)(a1 + 72) = v6;
  v9 = *(_QWORD *)(a2 + 80);
  v8 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = v9;
  *(_QWORD *)(a1 + 88) = v8;
  v11 = *(_QWORD *)(a2 + 96);
  v10 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = v11;
  *(_QWORD *)(a1 + 104) = v10;
  v13 = *(_QWORD *)(a2 + 112);
  v12 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = v13;
  *(_QWORD *)(a1 + 120) = v12;
  v15 = *(_QWORD *)(a2 + 128);
  v14 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = v15;
  *(_QWORD *)(a1 + 136) = v14;
  v16 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 144) = v16;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRetain(v16);
  return a1;
}

_QWORD *_s10ImpressionVwca(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  v6 = a2[3];
  v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[4] = a2[4];
  v8 = a2[5];
  v9 = a1[5];
  a1[5] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  a1[6] = a2[6];
  a1[7] = a2[7];
  v10 = a2[8];
  v11 = a1[8];
  a1[8] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  a1[9] = a2[9];
  v12 = a2[10];
  v13 = a1[10];
  a1[10] = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  a1[11] = a2[11];
  v14 = a2[12];
  v15 = a1[12];
  a1[12] = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  a1[13] = a2[13];
  v16 = a2[14];
  v17 = a1[14];
  a1[14] = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease(v17);
  a1[15] = a2[15];
  v18 = a2[16];
  v19 = a1[16];
  a1[16] = v18;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRelease(v19);
  a1[17] = a2[17];
  v20 = a2[18];
  v21 = a1[18];
  a1[18] = v20;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRelease(v21);
  return a1;
}

__n128 _s10ImpressionVwtk(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;
  __int128 v7;
  __int128 v8;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  result = *(__n128 *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  v8 = *(_OWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  *(__n128 *)(a1 + 96) = result;
  return result;
}

uint64_t _s10ImpressionVwta(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v8;
  swift_bridgeObjectRelease(v9);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  v10 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRelease(v10);
  v11 = *(_QWORD *)(a2 + 80);
  v12 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v11;
  swift_bridgeObjectRelease(v12);
  v13 = *(_QWORD *)(a2 + 96);
  v14 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v13;
  swift_bridgeObjectRelease(v14);
  v15 = *(_QWORD *)(a2 + 112);
  v16 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = v15;
  swift_bridgeObjectRelease(v16);
  v17 = *(_QWORD *)(a2 + 128);
  v18 = *(_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = v17;
  swift_bridgeObjectRelease(v18);
  v19 = *(_QWORD *)(a2 + 144);
  v20 = *(_QWORD *)(a1 + 144);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = v19;
  swift_bridgeObjectRelease(v20);
  return a1;
}

uint64_t _s10ImpressionVwet(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 152))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t _s10ImpressionVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 152) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 40) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 152) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for Metrics.Impression()
{
  return &type metadata for Metrics.Impression;
}

uint64_t _s14ImpressionTypeOwet(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF8)
    goto LABEL_17;
  if (a2 + 8 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 8) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 8;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 8;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 8;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 9;
  v8 = v6 - 9;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s14ImpressionTypeOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 8 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 8) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF8)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF7)
    return ((uint64_t (*)(void))((char *)&loc_169D2C + 4 * byte_1F2379[v4]))();
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_169D60 + 4 * byte_1F2374[v4]))();
}

uint64_t sub_169D60(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_169D68(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x169D70);
  return result;
}

uint64_t sub_169D7C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x169D84);
  *(_BYTE *)result = a2 + 8;
  return result;
}

uint64_t sub_169D88(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_169D90(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Metrics.ImpressionType()
{
  return &type metadata for Metrics.ImpressionType;
}

uint64_t _s10ImpressionV10CodingKeysOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 9 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 9) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF7)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF6)
    return ((uint64_t (*)(void))((char *)&loc_169DF8 + 4 * byte_1F2383[v4]))();
  *a1 = a2 + 9;
  return ((uint64_t (*)(void))((char *)sub_169E2C + 4 * byte_1F237E[v4]))();
}

uint64_t sub_169E2C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_169E34(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x169E3CLL);
  return result;
}

uint64_t sub_169E48(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x169E50);
  *(_BYTE *)result = a2 + 9;
  return result;
}

uint64_t sub_169E54(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_169E5C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s10ImpressionV10CodingKeysOMa()
{
  return &_s10ImpressionV10CodingKeysON;
}

unint64_t sub_169E7C()
{
  unint64_t result;

  result = qword_268F70;
  if (!qword_268F70)
  {
    result = swift_getWitnessTable(&unk_1F2570, &_s10ImpressionV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_268F70);
  }
  return result;
}

unint64_t sub_169EC4()
{
  unint64_t result;

  result = qword_268F78;
  if (!qword_268F78)
  {
    result = swift_getWitnessTable(&unk_1F24E0, &_s10ImpressionV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_268F78);
  }
  return result;
}

unint64_t sub_169F0C()
{
  unint64_t result;

  result = qword_268F80;
  if (!qword_268F80)
  {
    result = swift_getWitnessTable(&unk_1F2508, &_s10ImpressionV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_268F80);
  }
  return result;
}

uint64_t sub_169F50(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char v15;

  if (a1 == 0x614E747369747261 && a2 == 0xEA0000000000656DLL)
  {
    v5 = 0xEA0000000000656DLL;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x614E747369747261, 0xEA0000000000656DLL, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 25705 && a2 == 0xE200000000000000)
  {
    v7 = 0xE200000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(25705, 0xE200000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x657079546469 && a2 == 0xE600000000000000)
  {
    v8 = 0xE600000000000000;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x657079546469, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x6973736572706D69 && a2 == 0xEF7865646E496E6FLL)
  {
    v9 = 0xEF7865646E496E6FLL;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6973736572706D69, 0xEF7865646E496E6FLL, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_26;
  }
  if (a1 == 0x6973736572706D69 && a2 == 0xEE00657079546E6FLL)
  {
    v10 = 0xEE00657079546E6FLL;
LABEL_32:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6973736572706D69, 0xEE00657079546E6FLL, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_32;
  }
  if (a1 == 1684957547 && a2 == 0xE400000000000000)
  {
    v11 = 0xE400000000000000;
LABEL_38:
    swift_bridgeObjectRelease(v11);
    return 5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1684957547, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
    goto LABEL_38;
  }
  if (a1 == 1701667182 && a2 == 0xE400000000000000)
  {
    v12 = 0xE400000000000000;
LABEL_44:
    swift_bridgeObjectRelease(v12);
    return 6;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1701667182, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
    goto LABEL_44;
  }
  if (a1 == 0x726F74617272616ELL && a2 == 0xEC000000656D614ELL)
  {
    v13 = 0xEC000000656D614ELL;
LABEL_50:
    swift_bridgeObjectRelease(v13);
    return 7;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x726F74617272616ELL, 0xEC000000656D614ELL, a1, a2, 0) & 1) != 0)
  {
    v13 = a2;
    goto LABEL_50;
  }
  if (a1 == 0x726F74617272616ELL && a2 == 0xEC00000065707954)
  {
    v14 = 0xEC00000065707954;
LABEL_56:
    swift_bridgeObjectRelease(v14);
    return 8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x726F74617272616ELL, 0xEC00000065707954, a1, a2, 0) & 1) != 0)
  {
    v14 = a2;
    goto LABEL_56;
  }
  if (a1 == 0x6449746E65726170 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease(0xE800000000000000);
    return 9;
  }
  else
  {
    v15 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6449746E65726170, 0xE800000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v15 & 1) != 0)
      return 9;
    else
      return 10;
  }
}

uint64_t sub_16A38C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t AssociatedTypeWitness;
  uint64_t v16;
  char *v17;
  uint64_t AssociatedConformanceWitness;
  char v19;
  uint64_t v21;
  uint64_t v22;

  v5 = v4;
  v22 = a1;
  v9 = *(_QWORD *)(a3 - 8);
  __chkstk_darwin(a1);
  v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = *(_QWORD *)(*(_QWORD *)(v12 + 16) + 8);
  v13 = *(_QWORD *)(v21 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v13, v14, &protocol requirements base descriptor for ExpressibleByIntegerLiteral, &associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  __chkstk_darwin(AssociatedTypeWitness);
  v17 = (char *)&v21 - v16;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v13, a3, AssociatedTypeWitness, &protocol requirements base descriptor for ExpressibleByIntegerLiteral, &associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
  dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)(&unk_1F25E8, 512, AssociatedTypeWitness, AssociatedConformanceWitness);
  dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)(v17, a3, v13);
  v19 = dispatch thunk of static Equatable.== infix(_:_:)(a2, v11, a3, *(_QWORD *)(*(_QWORD *)(a4 + 8) + 8));
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, a3);
  if ((v19 & 1) != 0)
    return dispatch thunk of FloatingPoint.round(_:)(v22, a3, a4);
  dispatch thunk of static FloatingPoint./= infix(_:_:)(v5, a2, a3, a4);
  dispatch thunk of FloatingPoint.round(_:)(v22, a3, a4);
  return dispatch thunk of static Numeric.*= infix(_:_:)(v5, a2, a3, v21);
}

uint64_t sub_16A548@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 16))(a5, v5);
  return sub_16A38C(a1, a2, a3, a4);
}

_QWORD *sub_16A5B0(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int (*v62)(char *, uint64_t, uint64_t);
  uint64_t v63;
  uint64_t v64;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = sub_5440(&qword_25F1E8);
    if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
    {
      v8 = type metadata accessor for ColorScheme(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      v9 = a1;
      v10 = v7;
      v11 = 1;
    }
    else
    {
      v13 = *a2;
      *a1 = *a2;
      swift_retain(v13);
      v9 = a1;
      v10 = v7;
      v11 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v10, v11);
    v14 = a3[5];
    v15 = (_QWORD *)((char *)a1 + v14);
    v16 = (_QWORD *)((char *)a2 + v14);
    v17 = sub_5440(&qword_25F208);
    if (swift_getEnumCaseMultiPayload(v16, v17) == 1)
    {
      v18 = type metadata accessor for BlendMode(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v15, v16, v18);
      v19 = v15;
      v20 = v17;
      v21 = 1;
    }
    else
    {
      v22 = *v16;
      *v15 = *v16;
      swift_retain(v22);
      v19 = v15;
      v20 = v17;
      v21 = 0;
    }
    swift_storeEnumTagMultiPayload(v19, v20, v21);
    v23 = a3[6];
    v24 = (char *)a1 + v23;
    v25 = (char *)a2 + v23;
    v26 = *(_QWORD *)v25;
    v27 = v25[8];
    sub_F9E4(*(_QWORD *)v25, v27);
    *(_QWORD *)v24 = v26;
    v24[8] = v27;
    v28 = a3[7];
    v29 = (char *)a1 + v28;
    v30 = (char *)a2 + v28;
    v31 = *(_QWORD *)v30;
    v32 = v30[8];
    sub_F9E4(*(_QWORD *)v30, v32);
    *(_QWORD *)v29 = v31;
    v29[8] = v32;
    v33 = a3[8];
    v34 = (char *)a1 + v33;
    v35 = (char *)a2 + v33;
    v36 = *(_QWORD *)v35;
    v37 = v35[8];
    sub_F9E4(*(_QWORD *)v35, v37);
    *(_QWORD *)v34 = v36;
    v34[8] = v37;
    v38 = a3[9];
    v39 = (char *)a1 + v38;
    v40 = (char *)a2 + v38;
    v41 = *(_QWORD *)v40;
    v42 = v40[8];
    sub_F9E4(*(_QWORD *)v40, v42);
    *(_QWORD *)v39 = v41;
    v39[8] = v42;
    v43 = a3[11];
    *((_BYTE *)a1 + a3[10]) = *((_BYTE *)a2 + a3[10]);
    v44 = (_QWORD *)((char *)a1 + v43);
    v45 = (_QWORD *)((char *)a2 + v43);
    v46 = v45[1];
    *v44 = *v45;
    v44[1] = v46;
    v47 = a3[12];
    v48 = (_QWORD *)((char *)a1 + v47);
    v49 = (_QWORD *)((char *)a2 + v47);
    v50 = *(_QWORD *)((char *)a2 + v47 + 16);
    swift_bridgeObjectRetain(v46);
    if ((~v50 & 0xF000000000000007) != 0)
    {
      v51 = *v49;
      v52 = v49[1];
      sub_16A8D8(v51, v52, v50);
      *v48 = v51;
      v48[1] = v52;
      v48[2] = v50;
    }
    else
    {
      *(_OWORD *)v48 = *(_OWORD *)v49;
      v48[2] = v49[2];
    }
    v53 = a3[13];
    v54 = a3[14];
    v55 = (_QWORD *)((char *)a1 + v53);
    v56 = (_QWORD *)((char *)a2 + v53);
    v57 = v56[1];
    *v55 = *v56;
    v55[1] = v57;
    v58 = (char *)a1 + v54;
    v59 = (char *)a2 + v54;
    v60 = type metadata accessor for Font.Design(0);
    v61 = *(_QWORD *)(v60 - 8);
    v62 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v61 + 48);
    swift_bridgeObjectRetain(v57);
    if (v62(v59, 1, v60))
    {
      v63 = sub_5440(&qword_25FE08);
      memcpy(v58, v59, *(_QWORD *)(*(_QWORD *)(v63 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v61 + 16))(v58, v59, v60);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v61 + 56))(v58, 0, 1, v60);
    }
    v64 = a3[16];
    *(_QWORD *)((char *)a1 + a3[15]) = *(_QWORD *)((char *)a2 + a3[15]);
    *(_OWORD *)((char *)a1 + v64) = *(_OWORD *)((char *)a2 + v64);
    *((_BYTE *)a1 + a3[17]) = *((_BYTE *)a2 + a3[17]);
  }
  return a1;
}

uint64_t sub_16A8D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  if ((a3 & 0x8000000000000000) == 0)
    return swift_bridgeObjectRetain(a2);
  v4 = a3 & 0x7FFFFFFFFFFFFFFFLL;
  swift_bridgeObjectRetain(a2);
  return swift_retain(v4);
}

uint64_t sub_16A908(_QWORD *a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;

  v4 = sub_5440(&qword_25F1E8);
  if (swift_getEnumCaseMultiPayload(a1, v4) == 1)
  {
    v5 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  }
  else
  {
    swift_release(*a1);
  }
  v6 = (_QWORD *)((char *)a1 + a2[5]);
  v7 = sub_5440(&qword_25F208);
  if (swift_getEnumCaseMultiPayload(v6, v7) == 1)
  {
    v8 = type metadata accessor for BlendMode(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v6, v8);
  }
  else
  {
    swift_release(*v6);
  }
  sub_BE0C(*(_QWORD *)((char *)a1 + a2[6]), *((_BYTE *)a1 + a2[6] + 8));
  sub_BE0C(*(_QWORD *)((char *)a1 + a2[7]), *((_BYTE *)a1 + a2[7] + 8));
  sub_BE0C(*(_QWORD *)((char *)a1 + a2[8]), *((_BYTE *)a1 + a2[8] + 8));
  sub_BE0C(*(_QWORD *)((char *)a1 + a2[9]), *((_BYTE *)a1 + a2[9] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + a2[11] + 8));
  v9 = (_QWORD *)((char *)a1 + a2[12]);
  v10 = v9[2];
  if ((~v10 & 0xF000000000000007) != 0)
    sub_16AAA4(*v9, v9[1], v10);
  swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + a2[13] + 8));
  v11 = (char *)a1 + a2[14];
  v12 = type metadata accessor for Font.Design(0);
  v13 = *(_QWORD *)(v12 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v11, v12);
  return result;
}

uint64_t sub_16AAA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  if ((a3 & 0x8000000000000000) == 0)
    return swift_bridgeObjectRelease(a2);
  v4 = a3 & 0x7FFFFFFFFFFFFFFFLL;
  swift_bridgeObjectRelease(a2);
  return swift_release(v4);
}

_QWORD *sub_16AAD4(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int (*v60)(char *, uint64_t, uint64_t);
  uint64_t v61;
  uint64_t v62;

  v6 = sub_5440(&qword_25F1E8);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a1;
    v9 = v6;
    v10 = 1;
  }
  else
  {
    v11 = *a2;
    *a1 = *a2;
    swift_retain(v11);
    v8 = a1;
    v9 = v6;
    v10 = 0;
  }
  swift_storeEnumTagMultiPayload(v8, v9, v10);
  v12 = a3[5];
  v13 = (_QWORD *)((char *)a1 + v12);
  v14 = (_QWORD *)((char *)a2 + v12);
  v15 = sub_5440(&qword_25F208);
  if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
  {
    v16 = type metadata accessor for BlendMode(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v13, v14, v16);
    v17 = v13;
    v18 = v15;
    v19 = 1;
  }
  else
  {
    v20 = *v14;
    *v13 = *v14;
    swift_retain(v20);
    v17 = v13;
    v18 = v15;
    v19 = 0;
  }
  swift_storeEnumTagMultiPayload(v17, v18, v19);
  v21 = a3[6];
  v22 = (char *)a1 + v21;
  v23 = (char *)a2 + v21;
  v24 = *(_QWORD *)v23;
  v25 = v23[8];
  sub_F9E4(*(_QWORD *)v23, v25);
  *(_QWORD *)v22 = v24;
  v22[8] = v25;
  v26 = a3[7];
  v27 = (char *)a1 + v26;
  v28 = (char *)a2 + v26;
  v29 = *(_QWORD *)v28;
  v30 = v28[8];
  sub_F9E4(*(_QWORD *)v28, v30);
  *(_QWORD *)v27 = v29;
  v27[8] = v30;
  v31 = a3[8];
  v32 = (char *)a1 + v31;
  v33 = (char *)a2 + v31;
  v34 = *(_QWORD *)v33;
  v35 = v33[8];
  sub_F9E4(*(_QWORD *)v33, v35);
  *(_QWORD *)v32 = v34;
  v32[8] = v35;
  v36 = a3[9];
  v37 = (char *)a1 + v36;
  v38 = (char *)a2 + v36;
  v39 = *(_QWORD *)v38;
  v40 = v38[8];
  sub_F9E4(*(_QWORD *)v38, v40);
  *(_QWORD *)v37 = v39;
  v37[8] = v40;
  v41 = a3[11];
  *((_BYTE *)a1 + a3[10]) = *((_BYTE *)a2 + a3[10]);
  v42 = (_QWORD *)((char *)a1 + v41);
  v43 = (_QWORD *)((char *)a2 + v41);
  v44 = v43[1];
  *v42 = *v43;
  v42[1] = v44;
  v45 = a3[12];
  v46 = (_QWORD *)((char *)a1 + v45);
  v47 = (_QWORD *)((char *)a2 + v45);
  v48 = *(_QWORD *)((char *)a2 + v45 + 16);
  swift_bridgeObjectRetain(v44);
  if ((~v48 & 0xF000000000000007) != 0)
  {
    v49 = *v47;
    v50 = v47[1];
    sub_16A8D8(v49, v50, v48);
    *v46 = v49;
    v46[1] = v50;
    v46[2] = v48;
  }
  else
  {
    *(_OWORD *)v46 = *(_OWORD *)v47;
    v46[2] = v47[2];
  }
  v51 = a3[13];
  v52 = a3[14];
  v53 = (_QWORD *)((char *)a1 + v51);
  v54 = (_QWORD *)((char *)a2 + v51);
  v55 = v54[1];
  *v53 = *v54;
  v53[1] = v55;
  v56 = (char *)a1 + v52;
  v57 = (char *)a2 + v52;
  v58 = type metadata accessor for Font.Design(0);
  v59 = *(_QWORD *)(v58 - 8);
  v60 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v59 + 48);
  swift_bridgeObjectRetain(v55);
  if (v60(v57, 1, v58))
  {
    v61 = sub_5440(&qword_25FE08);
    memcpy(v56, v57, *(_QWORD *)(*(_QWORD *)(v61 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v59 + 16))(v56, v57, v58);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v59 + 56))(v56, 0, 1, v58);
  }
  v62 = a3[16];
  *(_QWORD *)((char *)a1 + a3[15]) = *(_QWORD *)((char *)a2 + a3[15]);
  *(_OWORD *)((char *)a1 + v62) = *(_OWORD *)((char *)a2 + v62);
  *((_BYTE *)a1 + a3[17]) = *((_BYTE *)a2 + a3[17]);
  return a1;
}

_QWORD *sub_16ADD0(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t *v56;
  uint64_t v57;
  unint64_t v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t (*v78)(char *, uint64_t, uint64_t);
  int v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  _QWORD *v84;

  if (a1 != a2)
  {
    sub_B414((uint64_t)a1, &qword_25F1E8);
    v6 = sub_5440(&qword_25F1E8);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for ColorScheme(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = v6;
      v10 = 1;
    }
    else
    {
      v11 = *a2;
      *a1 = *a2;
      swift_retain(v11);
      v8 = a1;
      v9 = v6;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
    v12 = a3[5];
    v13 = (_QWORD *)((char *)a1 + v12);
    v14 = (_QWORD *)((char *)a2 + v12);
    sub_B414((uint64_t)a1 + v12, &qword_25F208);
    v15 = sub_5440(&qword_25F208);
    if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
    {
      v16 = type metadata accessor for BlendMode(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v13, v14, v16);
      v17 = v13;
      v18 = v15;
      v19 = 1;
    }
    else
    {
      v20 = *v14;
      *v13 = *v14;
      swift_retain(v20);
      v17 = v13;
      v18 = v15;
      v19 = 0;
    }
    swift_storeEnumTagMultiPayload(v17, v18, v19);
  }
  v21 = a3[6];
  v22 = (char *)a1 + v21;
  v23 = (char *)a2 + v21;
  v24 = *(_QWORD *)v23;
  v25 = v23[8];
  sub_F9E4(*(_QWORD *)v23, v25);
  v26 = *(_QWORD *)v22;
  v27 = v22[8];
  *(_QWORD *)v22 = v24;
  v22[8] = v25;
  sub_BE0C(v26, v27);
  v28 = a3[7];
  v29 = (char *)a1 + v28;
  v30 = (char *)a2 + v28;
  v31 = *(_QWORD *)v30;
  v32 = v30[8];
  sub_F9E4(*(_QWORD *)v30, v32);
  v33 = *(_QWORD *)v29;
  v34 = v29[8];
  *(_QWORD *)v29 = v31;
  v29[8] = v32;
  sub_BE0C(v33, v34);
  v35 = a3[8];
  v36 = (char *)a1 + v35;
  v37 = (char *)a2 + v35;
  v38 = *(_QWORD *)v37;
  v39 = v37[8];
  sub_F9E4(*(_QWORD *)v37, v39);
  v40 = *(_QWORD *)v36;
  v41 = v36[8];
  *(_QWORD *)v36 = v38;
  v36[8] = v39;
  sub_BE0C(v40, v41);
  v42 = a3[9];
  v43 = (char *)a1 + v42;
  v44 = (char *)a2 + v42;
  v45 = *(_QWORD *)v44;
  v46 = v44[8];
  sub_F9E4(*(_QWORD *)v44, v46);
  v47 = *(_QWORD *)v43;
  v48 = v43[8];
  *(_QWORD *)v43 = v45;
  v43[8] = v46;
  sub_BE0C(v47, v48);
  *((_BYTE *)a1 + a3[10]) = *((_BYTE *)a2 + a3[10]);
  v49 = a3[11];
  v50 = (_QWORD *)((char *)a1 + v49);
  v51 = (_QWORD *)((char *)a2 + v49);
  *v50 = *v51;
  v52 = v51[1];
  v53 = v50[1];
  v50[1] = v52;
  swift_bridgeObjectRetain(v52);
  swift_bridgeObjectRelease(v53);
  v54 = a3[12];
  v55 = (_QWORD *)((char *)a1 + v54);
  v56 = (_QWORD *)((char *)a2 + v54);
  v57 = *(_QWORD *)((char *)a2 + v54 + 16);
  v58 = v57 & 0xF000000000000007;
  if ((~*(_QWORD *)((char *)a1 + v54 + 16) & 0xF000000000000007) != 0)
  {
    if (v58 == 0xF000000000000007)
    {
      sub_16B208(v55);
      v60 = v56[2];
      *(_OWORD *)v55 = *(_OWORD *)v56;
      v55[2] = v60;
    }
    else
    {
      v63 = *v56;
      v64 = v56[1];
      sub_16A8D8(v63, v64, v57);
      v65 = *v55;
      v66 = v55[1];
      v67 = v55[2];
      *v55 = v63;
      v55[1] = v64;
      v55[2] = v57;
      sub_16AAA4(v65, v66, v67);
    }
  }
  else if (v58 == 0xF000000000000007)
  {
    v59 = *(_OWORD *)v56;
    v55[2] = v56[2];
    *(_OWORD *)v55 = v59;
  }
  else
  {
    v61 = *v56;
    v62 = v56[1];
    sub_16A8D8(v61, v62, v57);
    *v55 = v61;
    v55[1] = v62;
    v55[2] = v57;
  }
  v68 = a3[13];
  v69 = (_QWORD *)((char *)a1 + v68);
  v70 = (_QWORD *)((char *)a2 + v68);
  *v69 = *v70;
  v71 = v70[1];
  v72 = v69[1];
  v69[1] = v71;
  swift_bridgeObjectRetain(v71);
  swift_bridgeObjectRelease(v72);
  v73 = a3[14];
  v74 = (char *)a1 + v73;
  v75 = (char *)a2 + v73;
  v76 = type metadata accessor for Font.Design(0);
  v77 = *(_QWORD *)(v76 - 8);
  v78 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v77 + 48);
  v79 = v78(v74, 1, v76);
  v80 = v78(v75, 1, v76);
  if (!v79)
  {
    if (!v80)
    {
      (*(void (**)(char *, char *, uint64_t))(v77 + 24))(v74, v75, v76);
      goto LABEL_22;
    }
    (*(void (**)(char *, uint64_t))(v77 + 8))(v74, v76);
    goto LABEL_21;
  }
  if (v80)
  {
LABEL_21:
    v81 = sub_5440(&qword_25FE08);
    memcpy(v74, v75, *(_QWORD *)(*(_QWORD *)(v81 - 8) + 64));
    goto LABEL_22;
  }
  (*(void (**)(char *, char *, uint64_t))(v77 + 16))(v74, v75, v76);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v77 + 56))(v74, 0, 1, v76);
LABEL_22:
  *(_QWORD *)((char *)a1 + a3[15]) = *(_QWORD *)((char *)a2 + a3[15]);
  v82 = a3[16];
  v83 = (_QWORD *)((char *)a1 + v82);
  v84 = (_QWORD *)((char *)a2 + v82);
  *v83 = *v84;
  v83[1] = v84[1];
  *((_BYTE *)a1 + a3[17]) = *((_BYTE *)a2 + a3[17]);
  return a1;
}

uint64_t *sub_16B208(uint64_t *a1)
{
  sub_16AAA4(*a1, a1[1], a1[2]);
  return a1;
}

char *sub_16B234(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v6 = sub_5440(&qword_25F1E8);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for ColorScheme(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v8 = a3[5];
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = sub_5440(&qword_25F208);
  if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
  {
    v12 = type metadata accessor for BlendMode(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v9, v10, v12);
    swift_storeEnumTagMultiPayload(v9, v11, 1);
  }
  else
  {
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  v13 = a3[6];
  v14 = a3[7];
  v15 = &a1[v13];
  v16 = &a2[v13];
  *(_QWORD *)v15 = *(_QWORD *)v16;
  v15[8] = v16[8];
  v17 = &a1[v14];
  v18 = &a2[v14];
  *(_QWORD *)v17 = *(_QWORD *)v18;
  v17[8] = v18[8];
  v19 = a3[8];
  v20 = a3[9];
  v21 = &a1[v19];
  v22 = &a2[v19];
  *(_QWORD *)v21 = *(_QWORD *)v22;
  v21[8] = v22[8];
  v23 = &a1[v20];
  v24 = &a2[v20];
  v23[8] = v24[8];
  *(_QWORD *)v23 = *(_QWORD *)v24;
  v25 = a3[11];
  a1[a3[10]] = a2[a3[10]];
  *(_OWORD *)&a1[v25] = *(_OWORD *)&a2[v25];
  v26 = a3[12];
  v27 = a3[13];
  v28 = &a1[v26];
  v29 = &a2[v26];
  *(_OWORD *)v28 = *(_OWORD *)v29;
  *((_QWORD *)v28 + 2) = *((_QWORD *)v29 + 2);
  v30 = a3[14];
  v31 = &a1[v30];
  v32 = &a2[v30];
  *(_OWORD *)&a1[v27] = *(_OWORD *)&a2[v27];
  v33 = type metadata accessor for Font.Design(0);
  v34 = *(_QWORD *)(v33 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v32, 1, v33))
  {
    v35 = sub_5440(&qword_25FE08);
    memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v34 + 32))(v31, v32, v33);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
  }
  v36 = a3[16];
  *(_QWORD *)&a1[a3[15]] = *(_QWORD *)&a2[a3[15]];
  *(_OWORD *)&a1[v36] = *(_OWORD *)&a2[v36];
  a1[a3[17]] = a2[a3[17]];
  return a1;
}

char *sub_16B49C(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t (*v61)(char *, uint64_t, uint64_t);
  int v62;
  int v63;
  uint64_t v64;
  uint64_t v65;

  if (a1 != a2)
  {
    sub_B414((uint64_t)a1, &qword_25F1E8);
    v6 = sub_5440(&qword_25F1E8);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for ColorScheme(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
    v8 = a3[5];
    v9 = &a1[v8];
    v10 = &a2[v8];
    sub_B414((uint64_t)&a1[v8], &qword_25F208);
    v11 = sub_5440(&qword_25F208);
    if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
    {
      v12 = type metadata accessor for BlendMode(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v9, v10, v12);
      swift_storeEnumTagMultiPayload(v9, v11, 1);
    }
    else
    {
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    }
  }
  v13 = a3[6];
  v14 = &a1[v13];
  v15 = &a2[v13];
  v16 = *(_QWORD *)v15;
  LOBYTE(v15) = v15[8];
  v17 = *(_QWORD *)v14;
  v18 = v14[8];
  *(_QWORD *)v14 = v16;
  v14[8] = (char)v15;
  sub_BE0C(v17, v18);
  v19 = a3[7];
  v20 = &a1[v19];
  v21 = &a2[v19];
  v22 = *(_QWORD *)v21;
  LOBYTE(v21) = v21[8];
  v23 = *(_QWORD *)v20;
  v24 = v20[8];
  *(_QWORD *)v20 = v22;
  v20[8] = (char)v21;
  sub_BE0C(v23, v24);
  v25 = a3[8];
  v26 = &a1[v25];
  v27 = &a2[v25];
  v28 = *(_QWORD *)v27;
  LOBYTE(v27) = v27[8];
  v29 = *(_QWORD *)v26;
  v30 = v26[8];
  *(_QWORD *)v26 = v28;
  v26[8] = (char)v27;
  sub_BE0C(v29, v30);
  v31 = a3[9];
  v32 = &a1[v31];
  v33 = &a2[v31];
  v34 = *(_QWORD *)v33;
  LOBYTE(v33) = v33[8];
  v35 = *(_QWORD *)v32;
  v36 = v32[8];
  *(_QWORD *)v32 = v34;
  v32[8] = (char)v33;
  sub_BE0C(v35, v36);
  v37 = a3[11];
  a1[a3[10]] = a2[a3[10]];
  v38 = &a1[v37];
  v39 = &a2[v37];
  v41 = *(_QWORD *)v39;
  v40 = *((_QWORD *)v39 + 1);
  v42 = *((_QWORD *)v38 + 1);
  *(_QWORD *)v38 = v41;
  *((_QWORD *)v38 + 1) = v40;
  swift_bridgeObjectRelease(v42);
  v43 = a3[12];
  v44 = (uint64_t *)&a1[v43];
  v45 = &a2[v43];
  v46 = *(_QWORD *)&a1[v43 + 16];
  if ((~v46 & 0xF000000000000007) == 0)
    goto LABEL_11;
  v47 = *((_QWORD *)v45 + 2);
  if ((~v47 & 0xF000000000000007) == 0)
  {
    sub_16B208(v44);
LABEL_11:
    *(_OWORD *)v44 = *(_OWORD *)v45;
    v44[2] = *((_QWORD *)v45 + 2);
    goto LABEL_13;
  }
  v48 = *v44;
  v49 = v44[1];
  *(_OWORD *)v44 = *(_OWORD *)v45;
  v44[2] = v47;
  sub_16AAA4(v48, v49, v46);
LABEL_13:
  v50 = a3[13];
  v51 = &a1[v50];
  v52 = &a2[v50];
  v54 = *(_QWORD *)v52;
  v53 = *((_QWORD *)v52 + 1);
  v55 = *((_QWORD *)v51 + 1);
  *(_QWORD *)v51 = v54;
  *((_QWORD *)v51 + 1) = v53;
  swift_bridgeObjectRelease(v55);
  v56 = a3[14];
  v57 = &a1[v56];
  v58 = &a2[v56];
  v59 = type metadata accessor for Font.Design(0);
  v60 = *(_QWORD *)(v59 - 8);
  v61 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v60 + 48);
  v62 = v61(v57, 1, v59);
  v63 = v61(v58, 1, v59);
  if (!v62)
  {
    if (!v63)
    {
      (*(void (**)(char *, char *, uint64_t))(v60 + 40))(v57, v58, v59);
      goto LABEL_19;
    }
    (*(void (**)(char *, uint64_t))(v60 + 8))(v57, v59);
    goto LABEL_18;
  }
  if (v63)
  {
LABEL_18:
    v64 = sub_5440(&qword_25FE08);
    memcpy(v57, v58, *(_QWORD *)(*(_QWORD *)(v64 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v60 + 32))(v57, v58, v59);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v60 + 56))(v57, 0, 1, v59);
LABEL_19:
  v65 = a3[16];
  *(_QWORD *)&a1[a3[15]] = *(_QWORD *)&a2[a3[15]];
  *(_OWORD *)&a1[v65] = *(_OWORD *)&a2[v65];
  a1[a3[17]] = a2[a3[17]];
  return a1;
}

uint64_t sub_16B810(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_16B81C);
}

uint64_t sub_16B81C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int v14;

  v6 = sub_5440(&qword_25F210);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = sub_5440(&qword_25F228);
  v10 = *(_QWORD *)(v9 - 8);
  if (*(_DWORD *)(v10 + 84) == (_DWORD)a2)
  {
    v11 = v9;
    v12 = a3[5];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1 + v12, a2, v11);
  }
  if ((_DWORD)a2 != 2147483646)
  {
    v11 = sub_5440(&qword_25FE08);
    v10 = *(_QWORD *)(v11 - 8);
    v12 = a3[14];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1 + v12, a2, v11);
  }
  v13 = *(_QWORD *)(a1 + a3[11] + 8);
  if (v13 >= 0xFFFFFFFF)
    LODWORD(v13) = -1;
  v14 = v13 - 1;
  if (v14 < 0)
    v14 = -1;
  return (v14 + 1);
}

uint64_t sub_16B904(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_16B910);
}

uint64_t sub_16B910(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;

  v8 = sub_5440(&qword_25F210);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    result = sub_5440(&qword_25F228);
    v14 = *(_QWORD *)(result - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = result;
      v15 = a4[5];
    }
    else
    {
      if (a3 == 2147483646)
      {
        *(_QWORD *)(a1 + a4[11] + 8) = a2;
        return result;
      }
      v10 = sub_5440(&qword_25FE08);
      v14 = *(_QWORD *)(v10 - 8);
      v15 = a4[14];
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for TextLockup(uint64_t a1)
{
  uint64_t result;

  result = qword_268FE0;
  if (!qword_268FE0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for TextLockup);
  return result;
}

void sub_16BA24(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[14];

  sub_19B38(319, (unint64_t *)&qword_25F298, type metadata accessor for ColorConstants, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  if (v3 <= 0x3F)
  {
    v8[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_19B38(319, (unint64_t *)&qword_25F2B0, (uint64_t (*)(uint64_t))&type metadata accessor for BlendMode, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
    if (v5 <= 0x3F)
    {
      v8[1] = *(_QWORD *)(v4 - 8) + 64;
      v8[2] = "\t";
      v8[3] = "\t";
      v8[4] = "\t";
      v8[5] = "\t";
      v8[6] = &unk_1F2630;
      v8[7] = &unk_1F2648;
      v8[8] = &unk_1F2660;
      v8[9] = &unk_1F2648;
      sub_19B38(319, (unint64_t *)&unk_268FF0, (uint64_t (*)(uint64_t))&type metadata accessor for Font.Design, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
      if (v7 <= 0x3F)
      {
        v8[10] = *(_QWORD *)(v6 - 8) + 64;
        v8[11] = (char *)&value witness table for Builtin.Int64 + 64;
        v8[12] = &unk_1F2678;
        v8[13] = &unk_1F2690;
        swift_initStructMetadata(a1, 256, 14, v8, a1 + 16);
      }
    }
  }
}

uint64_t destroy for TextLockup.TitleViewModel(uint64_t *a1)
{
  return sub_16AAA4(*a1, a1[1], a1[2]);
}

uint64_t *_s7BooksUI10TextLockupV14TitleViewModelOwCP_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  sub_16A8D8(*a2, v4, v5);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  return a1;
}

uint64_t *assignWithCopy for TextLockup.TitleViewModel(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  sub_16A8D8(*a2, v4, v5);
  v6 = *a1;
  v7 = a1[1];
  v8 = a1[2];
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  sub_16AAA4(v6, v7, v8);
  return a1;
}

uint64_t *assignWithTake for TextLockup.TitleViewModel(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *a1;
  v6 = a1[1];
  v5 = a1[2];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  a1[2] = v3;
  sub_16AAA4(v4, v6, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for TextLockup.TitleViewModel(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7F && *(_BYTE *)(a1 + 24))
    return (*(_DWORD *)a1 + 127);
  v3 = (((*(_QWORD *)(a1 + 16) >> 57) >> 6) | (2
                                                           * ((*(_QWORD *)(a1 + 16) >> 57) & 0x38 | *(_QWORD *)(a1 + 16) & 7))) ^ 0x7F;
  if (v3 >= 0x7E)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for TextLockup.TitleViewModel(uint64_t result, unsigned int a2, unsigned int a3)
{
  uint64_t v3;

  if (a2 > 0x7E)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 127;
    if (a3 >= 0x7F)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if (a3 >= 0x7F)
      *(_BYTE *)(result + 24) = 0;
    if (a2)
    {
      v3 = (-a2 >> 1) & 0x3F | ((-a2 & 0x7F) << 6);
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = 0;
      *(_QWORD *)(result + 16) = (v3 | (v3 << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

uint64_t sub_16BD00(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16) >> 63;
}

uint64_t sub_16BD0C(uint64_t result)
{
  *(_QWORD *)(result + 16) &= ~0x8000000000000000;
  return result;
}

uint64_t sub_16BD1C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 16) = *(_QWORD *)(result + 16) & 0xFFFFFFFFFFFFFF8 | (a2 << 63);
  return result;
}

ValueMetadata *type metadata accessor for TextLockup.TitleViewModel()
{
  return &type metadata for TextLockup.TitleViewModel;
}

uint64_t sub_16BD40(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_22FD18, 1);
}

BOOL sub_16BD50(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 < *a2;
}

BOOL sub_16BD64(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a2 >= *a1;
}

BOOL sub_16BD78(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 >= *a2;
}

BOOL sub_16BD8C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a2 < *a1;
}

BOOL sub_16BDA0()
{
  uint64_t v0;
  uint64_t v1;
  int *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  unsigned int v16;
  char *v17;
  uint64_t v18;
  char v19;
  char v20;
  _BOOL8 v21;
  char *v23;
  uint64_t v24;
  char v25;
  char v26;
  uint64_t v27;

  v1 = v0;
  v2 = (int *)type metadata accessor for TextLockup(0);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __chkstk_darwin(v3);
  v8 = (char *)&v27 - v7;
  v9 = __chkstk_darwin(v6);
  v11 = (char *)&v27 - v10;
  v12 = v1 + *(int *)(v9 + 28);
  v13 = *(_QWORD *)v12;
  v14 = *(_BYTE *)(v12 + 8);
  sub_F9E4(*(_QWORD *)v12, v14);
  v15 = sub_30DB4(v13, v14);
  sub_BE0C(v13, v14);
  sub_1E428(v1, (uint64_t)v11, type metadata accessor for TextLockup);
  if ((v15 & 1) == 0)
  {
    sub_224DC((uint64_t)v11, type metadata accessor for TextLockup);
    sub_1E428(v1, (uint64_t)v8, type metadata accessor for TextLockup);
    goto LABEL_6;
  }
  v16 = v11[v2[10]];
  sub_224DC((uint64_t)v11, type metadata accessor for TextLockup);
  sub_1E428(v1, (uint64_t)v8, type metadata accessor for TextLockup);
  if (v16 <= 2)
  {
LABEL_6:
    v21 = 0;
    goto LABEL_7;
  }
  v17 = &v8[v2[8]];
  v18 = *(_QWORD *)v17;
  v19 = v17[8];
  sub_F9E4(*(_QWORD *)v17, v19);
  v20 = sub_30DB4(v18, v19);
  sub_BE0C(v18, v19);
  sub_1E428((uint64_t)v8, (uint64_t)v5, type metadata accessor for TextLockup);
  if ((v20 & 1) == 0)
  {
    v23 = &v5[v2[9]];
    v24 = *(_QWORD *)v23;
    v25 = v23[8];
    sub_F9E4(*(_QWORD *)v23, v25);
    v26 = sub_30DB4(v24, v25);
    sub_BE0C(v24, v25);
    sub_224DC((uint64_t)v5, type metadata accessor for TextLockup);
    if ((v26 & 1) == 0)
    {
      v21 = !UIAccessibilityIsReduceMotionEnabled();
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  sub_224DC((uint64_t)v5, type metadata accessor for TextLockup);
  v21 = 0;
LABEL_7:
  sub_224DC((uint64_t)v8, type metadata accessor for TextLockup);
  return v21;
}

uint64_t sub_16BFCC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  char *v39;
  uint64_t v40;
  char v41;
  char v42;
  uint64_t v43;
  char *v44;
  char *v45;
  BOOL v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  char v51;
  double v52;
  _BOOL8 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t KeyPath;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  void (*v69)(char *, _QWORD, uint64_t);
  char *v70;
  uint64_t v71;
  uint64_t result;
  uint64_t v73;
  char *v74;
  char *v75;
  void (*v76)(char *, char *, uint64_t);
  char *v77;
  char *v78;
  void (*v79)(char *, char *, uint64_t);
  uint64_t v80;
  void (*v81)(char *, uint64_t);
  char *v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t OpaqueTypeConformance2;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  char *v120;
  _QWORD *v121;
  char *v122;
  uint64_t v123;
  _QWORD v124[4];

  v2 = v1;
  v111 = a1;
  v3 = type metadata accessor for AccessibilityChildBehavior(0);
  v109 = *(_QWORD *)(v3 - 8);
  v110 = v3;
  __chkstk_darwin(v3);
  v108 = (char *)&v95 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v105 = sub_5440(&qword_25FE38);
  v5 = __chkstk_darwin(v105);
  v106 = (char *)&v95 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v103 = (char *)&v95 - v7;
  v8 = type metadata accessor for DynamicTypeSize(0);
  v121 = *(_QWORD **)(v8 - 8);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v95 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v119 = (char *)&v95 - v12;
  v107 = sub_5440(&qword_25FE40);
  v13 = __chkstk_darwin(v107);
  v102 = (char *)&v95 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v104 = (uint64_t)&v95 - v15;
  v16 = (int *)type metadata accessor for TextLockup(0);
  v17 = __chkstk_darwin(v16);
  v114 = (uint64_t)&v95 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v20 = (char *)&v95 - v19;
  v21 = sub_5440(&qword_262668);
  __chkstk_darwin(v21);
  v23 = (char *)&v95 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = sub_5440(&qword_262670);
  __chkstk_darwin(v24);
  v26 = (char *)&v95 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v112 = sub_5440(&qword_269050);
  __chkstk_darwin(v112);
  v28 = (char *)&v95 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v113 = sub_5440(&qword_269058);
  __chkstk_darwin(v113);
  v30 = (char *)&v95 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v115 = sub_5440(&qword_269060);
  __chkstk_darwin(v115);
  v117 = (uint64_t)&v95 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v116 = sub_5440(&qword_269068);
  __chkstk_darwin(v116);
  v118 = (uint64_t)&v95 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v123 = sub_5440(&qword_269070);
  __chkstk_darwin(v123);
  v122 = (char *)&v95 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v101 = sub_5440(&qword_269078);
  v100 = *(_QWORD *)(v101 - 8);
  __chkstk_darwin(v101);
  v99 = (char *)&v95 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v98 = sub_5440(&qword_269080);
  v97 = *(_QWORD *)(v98 - 8);
  __chkstk_darwin(v98);
  v96 = (char *)&v95 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = 0x4024000000000000;
  if (*(unsigned __int8 *)(v2 + v16[10]) < 3u)
    v36 = 0x4010000000000000;
  *(_QWORD *)v23 = *(_QWORD *)(v2 + v16[15]);
  *((_QWORD *)v23 + 1) = v36;
  v23[16] = 0;
  v37 = sub_5440(&qword_269088);
  sub_16CA40(v2, (uint64_t)&v23[*(int *)(v37 + 44)]);
  sub_87F70(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v26, 0.0, 1, 0.0, 1, *(_QWORD *)(v2 + v16[16]), *(_QWORD *)(v2 + v16[16] + 8));
  sub_B414((uint64_t)v23, &qword_262668);
  v38 = sub_16BDA0();
  sub_1E428(v2, (uint64_t)v20, type metadata accessor for TextLockup);
  v120 = v11;
  if (v38)
  {
    v39 = &v20[v16[6]];
    v40 = *(_QWORD *)v39;
    v41 = v39[8];
    sub_F9E4(*(_QWORD *)v39, v41);
    v42 = sub_30DB4(v40, v41);
    sub_BE0C(v40, v41);
    sub_224DC((uint64_t)v20, type metadata accessor for TextLockup);
    if ((v42 & 1) == 0)
    {
      v43 = 0x4054000000000000;
      goto LABEL_8;
    }
  }
  else
  {
    sub_224DC((uint64_t)v20, type metadata accessor for TextLockup);
  }
  v43 = 0;
LABEL_8:
  v44 = v119;
  sub_B3D0((uint64_t)v26, (uint64_t)v28, &qword_262670);
  v45 = &v28[*(int *)(v112 + 36)];
  *(_QWORD *)v45 = 0;
  *((_QWORD *)v45 + 1) = v43;
  sub_B414((uint64_t)v26, &qword_262670);
  v46 = sub_16BDA0();
  v47 = v114;
  sub_1E428(v2, v114, type metadata accessor for TextLockup);
  if (!v46)
  {
    sub_224DC(v47, type metadata accessor for TextLockup);
    goto LABEL_12;
  }
  v48 = v47 + v16[6];
  v49 = *(_QWORD *)v48;
  v50 = *(_BYTE *)(v48 + 8);
  sub_F9E4(*(_QWORD *)v48, v50);
  v51 = sub_30DB4(v49, v50);
  sub_BE0C(v49, v50);
  sub_224DC(v47, type metadata accessor for TextLockup);
  v52 = 0.0;
  if ((v51 & 1) != 0)
LABEL_12:
    v52 = 1.0;
  sub_B3D0((uint64_t)v28, (uint64_t)v30, &qword_269050);
  *(double *)&v30[*(int *)(v113 + 36)] = v52;
  sub_B414((uint64_t)v28, &qword_269050);
  v53 = sub_16BDA0();
  if (v53)
  {
    v54 = static Animation.spring(response:dampingFraction:blendDuration:)(v53, 0.5, 1.0, 0.0);
    v55 = Animation.delay(_:)(0.1);
    swift_release(v54);
  }
  else
  {
    v55 = 0;
  }
  v56 = (uint64_t)v122;
  v57 = v2 + v16[6];
  v58 = *(_QWORD *)v57;
  v59 = *(_BYTE *)(v57 + 8);
  sub_F9E4(*(_QWORD *)v57, v59);
  v60 = sub_30DB4(v58, v59);
  sub_BE0C(v58, v59);
  v61 = v117;
  sub_B3D0((uint64_t)v30, v117, &qword_269058);
  v62 = v61 + *(int *)(v115 + 36);
  *(_QWORD *)v62 = v55;
  *(_BYTE *)(v62 + 8) = v60 & 1;
  sub_B414((uint64_t)v30, &qword_269058);
  KeyPath = swift_getKeyPath(&unk_1F2708);
  v64 = v118;
  sub_B3D0(v61, v118, &qword_269060);
  v65 = (uint64_t *)(v64 + *(int *)(v116 + 36));
  *v65 = KeyPath;
  v65[1] = 0x3FE0000000000000;
  sub_B414(v61, &qword_269060);
  v66 = swift_getKeyPath(&unk_1F2738);
  sub_B3D0(v64, v56, &qword_269068);
  v67 = v56 + *(int *)(v123 + 36);
  *(_QWORD *)v67 = v66;
  *(_QWORD *)(v67 + 8) = 6;
  *(_BYTE *)(v67 + 16) = 0;
  sub_B414(v64, &qword_269068);
  v68 = v121;
  v69 = (void (*)(char *, _QWORD, uint64_t))v121[13];
  v69(v44, enum case for DynamicTypeSize.small(_:), v8);
  v70 = v120;
  v69(v120, enum case for DynamicTypeSize.accessibility2(_:), v8);
  v71 = sub_6FD0(&qword_25FE98, (uint64_t (*)(uint64_t))&type metadata accessor for DynamicTypeSize, (uint64_t)&protocol conformance descriptor for DynamicTypeSize);
  result = dispatch thunk of static Comparable.<= infix(_:_:)(v44, v70, v8, v71);
  if ((result & 1) != 0)
  {
    v73 = v105;
    v74 = v103;
    v75 = &v103[*(int *)(v105 + 48)];
    v76 = (void (*)(char *, char *, uint64_t))v68[4];
    v76(v103, v44, v8);
    v76(v75, v70, v8);
    v77 = v106;
    v78 = &v106[*(int *)(v73 + 48)];
    v79 = (void (*)(char *, char *, uint64_t))v68[2];
    v79(v106, v74, v8);
    v79(v78, v75, v8);
    v80 = (uint64_t)v102;
    v76(v102, v77, v8);
    v81 = (void (*)(char *, uint64_t))v68[1];
    v81(v78, v8);
    v82 = &v77[*(int *)(v73 + 48)];
    v76(v77, v74, v8);
    v76(v82, v75, v8);
    v83 = v107;
    v76((char *)(v80 + *(int *)(v107 + 36)), v82, v8);
    v81(v77, v8);
    v84 = v104;
    sub_167A4(v80, v104, &qword_25FE40);
    v85 = sub_16EC10();
    v86 = sub_7FD8(&qword_25FEA0, &qword_25FE40, (uint64_t)&protocol conformance descriptor for ClosedRange<A>);
    v87 = v99;
    v88 = (uint64_t)v122;
    v89 = v123;
    View.dynamicTypeSize<A>(_:)(v84, v123, v83, v85, v86);
    sub_B414(v84, &qword_25FE40);
    v90 = sub_B414(v88, &qword_269070);
    v91 = v108;
    static AccessibilityChildBehavior.combine.getter(v90);
    v124[0] = v89;
    v124[1] = v83;
    v124[2] = v85;
    v124[3] = v86;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v124, &opaque type descriptor for <<opaque return type of View.dynamicTypeSize<A>(_:)>>, 1);
    v93 = v96;
    v94 = v101;
    View.accessibilityElement(children:)(v91, v101, OpaqueTypeConformance2);
    (*(void (**)(char *, uint64_t))(v109 + 8))(v91, v110);
    (*(void (**)(char *, uint64_t))(v100 + 8))(v87, v94);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v97 + 32))(v111, v93, v98);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_16CA40@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  int *v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  __n128 v76;
  char **v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  char v84;
  uint64_t v85;
  uint64_t v86;
  char v87;
  uint64_t v88;
  double v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char v112;
  uint64_t v113;
  uint64_t KeyPath;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  int *v131;
  uint64_t v132;
  uint64_t v133;
  int v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unsigned int *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  int v149;
  uint64_t v150;
  unsigned int *v151;
  uint64_t v152;
  uint64_t v153;
  char v154;
  char v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  char v161;
  uint64_t v162;
  uint64_t v163;
  double v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  char v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  char v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  char v186;
  uint64_t v187;
  int *v188;
  char v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  unint64_t v193;
  unint64_t v194;
  uint64_t v195;
  uint64_t v196;
  unint64_t v197;
  char *v198;
  uint64_t v199;
  double v200;
  uint64_t OpaqueTypeConformance2;
  uint64_t v202;
  char *v203;
  double v204;
  uint64_t v205;
  char *v206;
  uint64_t v207;
  uint64_t v208;
  double v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  unint64_t v217;
  unint64_t v218;
  char *v219;
  uint64_t v220;
  uint64_t *v221;
  uint64_t v222;
  uint64_t v223;
  unsigned int v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  char *v230;
  uint64_t v231;
  uint64_t v232;
  __n128 v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  char v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  double v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  char v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  char v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  int *v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  char *v281;
  uint64_t v282;
  uint64_t v283;
  char *v284;
  uint64_t v285;
  char *v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  char *v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  char *v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  char **v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  char *v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  char *v309;
  char *v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  char *v314;
  char *v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  char *v325;
  uint64_t v326;
  char *v327;
  char *v328;
  char *v329;
  int *v330;
  uint64_t v331;
  __int128 v332;
  __int128 v333;
  __int128 v334;
  __int128 v335;
  __int128 v336;
  __int128 v337;
  __int128 v338;
  __int128 v339;
  __int128 v340;
  _OWORD v341[9];
  uint64_t v342;
  char v343;
  uint64_t v344;
  unint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;

  v319 = a2;
  v287 = sub_5440(&qword_2690C8);
  v285 = *(_QWORD *)(v287 - 8);
  __chkstk_darwin(v287);
  v284 = (char *)&v281 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v282 = sub_5440(&qword_2690D0);
  v288 = *(_QWORD *)(v282 - 8);
  __chkstk_darwin(v282);
  v286 = (char *)&v281 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v293 = sub_5440(&qword_262678);
  v291 = *(_QWORD *)(v293 - 8);
  __chkstk_darwin(v293);
  v290 = (char *)&v281 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_5440(&qword_262680);
  __chkstk_darwin(v6);
  v292 = (uint64_t)&v281 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v300 = sub_5440(&qword_2690D8);
  v8 = __chkstk_darwin(v300);
  v289 = (uint64_t)&v281 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v294 = (uint64_t)&v281 - v10;
  v298 = sub_5440(&qword_2690E0);
  __chkstk_darwin(v298);
  v299 = (uint64_t)&v281 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_5440(&qword_25FE08);
  v13 = __chkstk_darwin(v12);
  v283 = (uint64_t)&v281 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v13);
  v281 = (char *)&v281 - v16;
  v17 = __chkstk_darwin(v15);
  v296 = (uint64_t)&v281 - v18;
  __chkstk_darwin(v17);
  v295 = (char *)&v281 - v19;
  v20 = sub_5440(&qword_2690E8);
  v316 = *(_QWORD *)(v20 - 8);
  v317 = v20;
  __chkstk_darwin(v20);
  v22 = (char *)&v281 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = sub_5440(&qword_2690F0);
  v24 = __chkstk_darwin(v23);
  v314 = (char *)&v281 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  v27 = (char *)&v281 - v26;
  v28 = type metadata accessor for _BlendModeEffect(0);
  __chkstk_darwin(v28);
  v325 = (char *)&v281 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = type metadata accessor for BlendMode(0);
  v323 = *(_QWORD *)(v30 - 8);
  v324 = v30;
  __chkstk_darwin(v30);
  v322 = (uint64_t)&v281 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = type metadata accessor for ColorConstants(0);
  __chkstk_darwin(v32);
  v34 = (char *)&v281 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = type metadata accessor for Font.Leading(0);
  v311 = *(_QWORD *)(v35 - 8);
  v312 = v35;
  __chkstk_darwin(v35);
  v310 = (char *)&v281 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v320 = sub_5440(&qword_262688);
  v37 = __chkstk_darwin(v320);
  v309 = (char *)&v281 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v37);
  v304 = (uint64_t)&v281 - v39;
  v40 = sub_5440(&qword_262690);
  v41 = __chkstk_darwin(v40);
  v308 = (uint64_t)&v281 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v41);
  v303 = (uint64_t)&v281 - v43;
  v44 = sub_5440(&qword_2690F8);
  v45 = *(_QWORD *)(v44 - 8);
  v46 = __chkstk_darwin(v44);
  v307 = (uint64_t)&v281 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = __chkstk_darwin(v46);
  v306 = (uint64_t)&v281 - v49;
  v50 = __chkstk_darwin(v48);
  v302 = (uint64_t)&v281 - v51;
  __chkstk_darwin(v50);
  v301 = (char **)((char *)&v281 - v52);
  v53 = sub_5440(&qword_269100);
  v54 = __chkstk_darwin(v53);
  v318 = (uint64_t)&v281 - ((v55 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = __chkstk_darwin(v54);
  v313 = (uint64_t)&v281 - v57;
  v58 = __chkstk_darwin(v56);
  v60 = (char *)&v281 - v59;
  __chkstk_darwin(v58);
  v62 = (char *)&v281 - v61;
  v63 = type metadata accessor for TextLockup(0);
  v64 = (int *)v63;
  v65 = a1;
  v66 = (uint64_t *)(a1 + *(int *)(v63 + 44));
  v67 = v66[1];
  v328 = v62;
  v329 = v27;
  v326 = v44;
  v327 = v60;
  v321 = v45;
  v330 = (int *)v63;
  v331 = v65;
  v305 = v34;
  v315 = v22;
  if (v67)
  {
    v68 = *v66;
    v69 = *(unsigned __int8 *)(v65 + *(int *)(v63 + 40));
    v70 = swift_bridgeObjectRetain(v67);
    if (v69 >= 2)
    {
      v75 = static Font.body.getter(v70);
    }
    else
    {
      v71 = static Font.footnote.getter(v70);
      v73 = v310;
      v72 = v311;
      v74 = v312;
      (*(void (**)(char *, _QWORD, uint64_t))(v311 + 104))(v310, enum case for Font.Leading.tight(_:), v312);
      v75 = Font.leading(_:)(v73, v71);
      v76 = swift_release(v71);
      (*(void (**)(char *, uint64_t, __n128))(v72 + 8))(v73, v74, v76);
    }
    v80 = Text.font(_:)(v75, v68, v67, 0, _swiftEmptyArrayStorage);
    v82 = v81;
    v84 = v83;
    v86 = v85;
    swift_bridgeObjectRelease(v67);
    swift_release(v75);
    v87 = v84 & 1;
    v89 = static Font.Weight.medium.getter(v88);
    v90 = Text.fontWeight(_:)(*(_QWORD *)&v89, 0, v80, v82, v84 & 1, v86);
    v92 = v91;
    v297 = v93;
    v95 = v94 & 1;
    sub_2B574(v80, v82, v87);
    swift_bridgeObjectRelease(v86);
    _s7BooksUI18BuyButtonExternalsV6colorsAA14ColorConstantsVvg_0((uint64_t)v34);
    v96 = _s7BooksUI14ColorConstantsV19booksSecondaryLabel05SwiftB00C0Vvg_0();
    v97 = (uint64_t)v34;
    v98 = Color.opacity(_:)(0.8);
    swift_release(v96);
    sub_224DC(v97, type metadata accessor for ColorConstants);
    v344 = v98;
    v99 = v297;
    v100 = Text.foregroundStyle<A>(_:)(&v344, v90, v92, v95, v297, &type metadata for Color, &protocol witness table for Color);
    v102 = v101;
    v104 = v103;
    LOBYTE(v86) = v105 & 1;
    sub_2B574(v90, v92, v95);
    swift_release(v98);
    swift_bridgeObjectRelease(v99);
    v106 = v322;
    sub_31660(v322);
    v108 = v323;
    v107 = v324;
    v109 = (uint64_t)v325;
    (*(void (**)(char *, uint64_t, uint64_t))(v323 + 16))(v325, v106, v324);
    v110 = v304;
    sub_1E428(v109, v304 + *(int *)(v320 + 36), (uint64_t (*)(_QWORD))&type metadata accessor for _BlendModeEffect);
    *(_QWORD *)v110 = v100;
    *(_QWORD *)(v110 + 8) = v102;
    *(_BYTE *)(v110 + 16) = v86;
    *(_QWORD *)(v110 + 24) = v104;
    sub_34B1C(v100, v102, v86);
    swift_bridgeObjectRetain(v104);
    sub_224DC(v109, (uint64_t (*)(_QWORD))&type metadata accessor for _BlendModeEffect);
    v111 = v106;
    v78 = v331;
    (*(void (**)(uint64_t, uint64_t))(v108 + 8))(v111, v107);
    v112 = v86;
    v64 = v330;
    sub_2B574(v100, v102, v112);
    swift_bridgeObjectRelease(v104);
    v113 = v303;
    sub_87FD4(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v303, 0.0, 1, 0.0, 1, *(_QWORD *)(v78 + v64[16]), *(_QWORD *)(v78 + v64[16] + 8));
    sub_B414(v110, &qword_262688);
    LOBYTE(v100) = *(_BYTE *)(v78 + v64[17]);
    KeyPath = swift_getKeyPath(&unk_1F2768);
    v115 = v302;
    sub_B3D0(v113, v302, &qword_262690);
    v44 = v326;
    v116 = v115 + *(int *)(v326 + 36);
    *(_QWORD *)v116 = KeyPath;
    *(_BYTE *)(v116 + 8) = v100;
    sub_B414(v113, &qword_262690);
    v117 = (uint64_t)v301;
    sub_167A4(v115, (uint64_t)v301, &qword_2690F8);
    v118 = v117;
    v119 = (uint64_t)v328;
    sub_167A4(v118, (uint64_t)v328, &qword_2690F8);
    v77 = *(char ***)(v321 + 56);
    ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v77)(v119, 0, 1, v44);
    v79 = (uint64_t)v329;
    v60 = v327;
    v22 = v315;
  }
  else
  {
    v77 = *(char ***)(v45 + 56);
    v78 = v65;
    ((void (*)(char *, uint64_t, uint64_t, uint64_t))v77)(v62, 1, 1, v44);
    v79 = (uint64_t)v27;
  }
  v120 = (uint64_t *)(v78 + v64[12]);
  v121 = v120[2];
  if ((~v121 & 0xF000000000000007) != 0)
  {
    v124 = *v120;
    v123 = v120[1];
    v303 = v123;
    v304 = v121;
    v302 = v124;
    if (v121 < 0)
    {
      v141 = v124;
      v142 = v123;
      sub_16EF18(v124, v123, v121);
      swift_bridgeObjectRetain(v142);
      swift_retain(v121 & 0x7FFFFFFFFFFFFFFFLL);
      v297 = _s7BooksUI14ColorConstantsV14vibrantPrimary05SwiftB00C0Vvg_0();
      swift_retain(v121 & 0x7FFFFFFFFFFFFFFFLL);
      sub_16E134();
      v144 = v143;
      v145 = swift_getKeyPath(&unk_1F2798);
      v344 = v141;
      v345 = v142;
      v346 = v297;
      v297 = v121 & 0x7FFFFFFFFFFFFFFFLL;
      v347 = v121 & 0x7FFFFFFFFFFFFFFFLL;
      v348 = v145;
      v349 = v144;
      v146 = v283;
      sub_B3D0(v78 + v64[14], v283, &qword_25FE08);
      v147 = type metadata accessor for Font.Design(0);
      v148 = *(_QWORD *)(v147 - 8);
      v149 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v148 + 48))(v146, 1, v147);
      v301 = v77;
      if (v149 == 1)
      {
        sub_B414(v146, &qword_25FE08);
        v150 = v78;
        if (*(unsigned __int8 *)(v78 + v64[10]) >= 2u)
          v151 = (unsigned int *)&enum case for Font.Design.serif (_:);
        else
          v151 = (unsigned int *)&enum case for Font.Design.default(_:);
        v153 = (uint64_t)v281;
        (*(void (**)(char *, _QWORD, uint64_t))(v148 + 104))(v281, *v151, v147);
      }
      else
      {
        v150 = v78;
        v153 = (uint64_t)v281;
        (*(void (**)(char *, uint64_t, uint64_t))(v148 + 32))(v281, v146, v147);
      }
      v195 = v282;
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v148 + 56))(v153, 0, 1, v147);
      v196 = sub_5440(&qword_269110);
      v197 = sub_16EF34();
      v198 = v284;
      View.fontDesign(_:)(v153, v196, v197);
      sub_B414(v153, &qword_25FE08);
      swift_bridgeObjectRelease(v345);
      swift_release(v346);
      swift_release(v347);
      swift_release(v348);
      swift_release(v349);
      v200 = static Font.Weight.bold.getter(v199);
      v344 = v196;
      v345 = v197;
      OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v344, &opaque type descriptor for <<opaque return type of View.fontDesign(_:)>>, 1);
      v203 = v286;
      v202 = v287;
      View.fontWeight(_:)(*(_QWORD *)&v200, 0, v287, OpaqueTypeConformance2);
      (*(void (**)(char *, uint64_t))(v285 + 8))(v198, v202);
      v204 = dbl_1F2960[*(char *)(v150 + v64[10])];
      v344 = v202;
      v345 = OpaqueTypeConformance2;
      v205 = swift_getOpaqueTypeConformance2(&v344, &opaque type descriptor for <<opaque return type of View.fontWeight(_:)>>, 1);
      v206 = v290;
      View.kerning(_:)(v195, v205, v204);
      (*(void (**)(char *, uint64_t))(v288 + 8))(v203, v195);
      v207 = v150;
      v208 = v292;
      v209 = sub_88038(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v292, 0.0, 1, 0.0, 1, *(_QWORD *)(v150 + v64[16]), *(_QWORD *)(v150 + v64[16] + 8));
      (*(void (**)(char *, uint64_t, double))(v291 + 8))(v206, v293, v209);
      LOBYTE(v203) = *(_BYTE *)(v150 + v64[17]);
      v210 = swift_getKeyPath(&unk_1F2768);
      v211 = v289;
      sub_B3D0(v208, v289, &qword_262680);
      v212 = v300;
      v213 = v211 + *(int *)(v300 + 36);
      *(_QWORD *)v213 = v210;
      *(_BYTE *)(v213 + 8) = (_BYTE)v203;
      sub_B414(v208, &qword_262680);
      v214 = v294;
      sub_167A4(v211, v294, &qword_2690D8);
      v215 = v299;
      sub_B3D0(v214, v299, &qword_2690D8);
      swift_storeEnumTagMultiPayload(v215, v298, 1);
      v216 = sub_5440(&qword_269128);
      v217 = sub_16EFFC();
      v218 = sub_16F148();
      v219 = v315;
      v220 = v215;
      v78 = v207;
      _ConditionalContent<>.init(storage:)(v220, v216, v212, v217, v218);
      sub_16F2B8(v302, v303, v304);
      v22 = v219;
      swift_release(v297);
      sub_B414(v214, &qword_2690D8);
      v60 = v327;
      v77 = v301;
    }
    else
    {
      if (v123)
      {
        v301 = v77;
        v125 = v124;
        v126 = v123;
        sub_16A8D8(v124, v123, v121);
        sub_16A8D8(v125, v126, v121);
        sub_16E134();
        v128 = v127;
        v129 = Text.font(_:)(v127, v125, v126, 0, _swiftEmptyArrayStorage);
        v130 = v121;
        v131 = v64;
        v133 = v132;
        LODWORD(v297) = v134;
        v136 = v135;
        swift_release(v128);
        sub_16F2B8(v125, v126, v130);
        v137 = v296;
        sub_B3D0(v78 + v131[14], v296, &qword_25FE08);
        v138 = type metadata accessor for Font.Design(0);
        v139 = *(_QWORD *)(v138 - 8);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v139 + 48))(v137, 1, v138) == 1)
        {
          sub_B414(v137, &qword_25FE08);
          if (*(unsigned __int8 *)(v78 + v131[10]) >= 2u)
            v140 = (unsigned int *)&enum case for Font.Design.serif (_:);
          else
            v140 = (unsigned int *)&enum case for Font.Design.default(_:);
          v152 = (uint64_t)v295;
          (*(void (**)(char *, _QWORD, uint64_t))(v139 + 104))(v295, *v140, v138);
        }
        else
        {
          v152 = (uint64_t)v295;
          (*(void (**)(char *, uint64_t, uint64_t))(v139 + 32))(v295, v137, v138);
        }
        v154 = v297;
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v139 + 56))(v152, 0, 1, v138);
        v155 = v154 & 1;
        v156 = Text.fontDesign(_:)(v152, v129, v133, v154 & 1, v136);
        v158 = v157;
        v160 = v159;
        v162 = v161 & 1;
        sub_2B574(v129, v133, v155);
        swift_bridgeObjectRelease(v136);
        v163 = sub_B414(v152, &qword_25FE08);
        v164 = static Font.Weight.bold.getter(v163);
        v165 = Text.fontWeight(_:)(*(_QWORD *)&v164, 0, v156, v158, v162, v160);
        v167 = v166;
        v169 = v168;
        v171 = v170 & 1;
        sub_2B574(v156, v158, v162);
        swift_bridgeObjectRelease(v160);
        v172 = v331;
        v173 = Text.kerning(_:)(v165, v167, v171, v169, dbl_1F2960[*(char *)(v331 + v330[10])]);
        v175 = v174;
        v177 = v176;
        v179 = v178 & 1;
        sub_2B574(v165, v167, v171);
        v180 = swift_bridgeObjectRelease(v169);
        LODWORD(v344) = static HierarchicalShapeStyle.primary.getter(v180);
        v181 = Text.foregroundStyle<A>(_:)(&v344, v173, v175, v179, v177, &type metadata for HierarchicalShapeStyle, &protocol witness table for HierarchicalShapeStyle);
        v183 = v182;
        v185 = v184;
        LOBYTE(v171) = v186 & 1;
        v187 = v175;
        v78 = v172;
        sub_2B574(v173, v187, v179);
        swift_bridgeObjectRelease(v177);
        v188 = v330;
        sub_87284(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)&v332, 0.0, 1, 0.0, 1, *(_QWORD *)(v78 + v330[16]), *(_QWORD *)(v78 + v330[16] + 8), v181, v183, v171, v185);
        v189 = v171;
        v64 = v188;
        sub_2B574(v181, v183, v189);
        swift_bridgeObjectRelease(v185);
        LOBYTE(v181) = *(_BYTE *)(v78 + v188[17]);
        v190 = swift_getKeyPath(&unk_1F2768);
        v341[6] = v338;
        v341[7] = v339;
        v341[8] = v340;
        v341[2] = v334;
        v341[3] = v335;
        v341[4] = v336;
        v341[5] = v337;
        v341[0] = v332;
        v341[1] = v333;
        v342 = v190;
        v343 = v181;
        KeyedEncodingContainer.encode<A>(_:forKey:)(*(double *)&v333);
        sub_167A4((uint64_t)v341, (uint64_t)&v344, &qword_269128);
        v44 = v326;
        v60 = v327;
        v22 = v315;
        v77 = v301;
      }
      else
      {
        sub_16F2CC(v341);
        sub_167A4((uint64_t)v341, (uint64_t)&v344, &qword_269128);
      }
      v191 = v299;
      sub_167A4((uint64_t)&v344, v299, &qword_269128);
      swift_storeEnumTagMultiPayload(v191, v298, 0);
      sub_16F328((uint64_t)&v344, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_16F2EC);
      sub_16F328((uint64_t)&v344, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_16F2EC);
      v192 = sub_5440(&qword_269128);
      v193 = sub_16EFFC();
      v194 = sub_16F148();
      _ConditionalContent<>.init(storage:)(v191, v192, v300, v193, v194);
      sub_16F2B8(v302, v303, v304);
      sub_16F328((uint64_t)&v344, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_16F394);
      sub_16F328((uint64_t)&v344, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_16F394);
    }
    v79 = (uint64_t)v329;
    sub_167A4((uint64_t)v22, (uint64_t)v329, &qword_2690E8);
    v122 = 0;
  }
  else
  {
    v122 = 1;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v316 + 56))(v79, v122, 1, v317);
  v221 = (uint64_t *)(v78 + v64[13]);
  v222 = v221[1];
  if (v222)
  {
    v223 = *v221;
    v224 = *(unsigned __int8 *)(v78 + v64[10]);
    v225 = swift_bridgeObjectRetain(v222);
    if (v224 >= 2)
      v226 = static Font.body.getter(v225);
    else
      v226 = static Font.footnote.getter(v225);
    v228 = v226;
    v230 = v310;
    v229 = v311;
    v231 = v312;
    (*(void (**)(char *, _QWORD, uint64_t))(v311 + 104))(v310, enum case for Font.Leading.tight(_:), v312);
    v232 = Font.leading(_:)(v230, v228);
    v233 = swift_release(v228);
    (*(void (**)(char *, uint64_t, __n128))(v229 + 8))(v230, v231, v233);
    v234 = Text.font(_:)(v232, v223, v222, 0, _swiftEmptyArrayStorage);
    v236 = v235;
    LOBYTE(v228) = v237;
    v239 = v238;
    swift_bridgeObjectRelease(v222);
    swift_release(v232);
    v241 = static Font.Weight.regular.getter(v240);
    v242 = Text.fontWeight(_:)(*(_QWORD *)&v241, 0, v234, v236, v228 & 1, v239);
    v244 = v243;
    v246 = v245;
    v248 = v247 & 1;
    sub_2B574(v234, v236, v228 & 1);
    swift_bridgeObjectRelease(v239);
    v249 = (uint64_t)v305;
    _s7BooksUI18BuyButtonExternalsV6colorsAA14ColorConstantsVvg_0((uint64_t)v305);
    v250 = _s7BooksUI14ColorConstantsV19booksSecondaryLabel05SwiftB00C0Vvg_0();
    v251 = Color.opacity(_:)(0.8);
    swift_release(v250);
    sub_224DC(v249, type metadata accessor for ColorConstants);
    v344 = v251;
    v252 = v246;
    v253 = Text.foregroundStyle<A>(_:)(&v344, v242, v244, v248, v246, &type metadata for Color, &protocol witness table for Color);
    v255 = v254;
    v257 = v256;
    LOBYTE(v239) = v258 & 1;
    sub_2B574(v242, v244, v248);
    swift_release(v251);
    swift_bridgeObjectRelease(v252);
    v259 = v322;
    sub_31660(v322);
    v261 = v323;
    v260 = v324;
    v262 = (uint64_t)v325;
    (*(void (**)(char *, uint64_t, uint64_t))(v323 + 16))(v325, v259, v324);
    v263 = (uint64_t)v309;
    sub_1E428(v262, (uint64_t)&v309[*(int *)(v320 + 36)], (uint64_t (*)(_QWORD))&type metadata accessor for _BlendModeEffect);
    *(_QWORD *)v263 = v253;
    *(_QWORD *)(v263 + 8) = v255;
    *(_BYTE *)(v263 + 16) = v239;
    *(_QWORD *)(v263 + 24) = v257;
    sub_34B1C(v253, v255, v239);
    swift_bridgeObjectRetain(v257);
    sub_224DC(v262, (uint64_t (*)(_QWORD))&type metadata accessor for _BlendModeEffect);
    (*(void (**)(uint64_t, uint64_t))(v261 + 8))(v259, v260);
    sub_2B574(v253, v255, v239);
    swift_bridgeObjectRelease(v257);
    v265 = v330;
    v264 = v331;
    v266 = v308;
    sub_87FD4(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v308, 0.0, 1, 0.0, 1, *(_QWORD *)(v331 + v330[16]), *(_QWORD *)(v331 + v330[16] + 8));
    sub_B414(v263, &qword_262688);
    LOBYTE(v265) = *(_BYTE *)(v264 + v265[17]);
    v267 = swift_getKeyPath(&unk_1F2768);
    v268 = v307;
    sub_B3D0(v266, v307, &qword_262690);
    v269 = v326;
    v270 = v268 + *(int *)(v326 + 36);
    *(_QWORD *)v270 = v267;
    *(_BYTE *)(v270 + 8) = (_BYTE)v265;
    sub_B414(v266, &qword_262690);
    v271 = v306;
    sub_167A4(v268, v306, &qword_2690F8);
    v60 = v327;
    sub_167A4(v271, (uint64_t)v327, &qword_2690F8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v321 + 56))(v60, 0, 1, v269);
    v227 = (uint64_t)v314;
    v79 = (uint64_t)v329;
  }
  else
  {
    ((void (*)(char *, uint64_t, uint64_t, uint64_t))v77)(v60, 1, 1, v44);
    v227 = (uint64_t)v314;
  }
  v272 = v313;
  v273 = (uint64_t)v328;
  sub_B3D0((uint64_t)v328, v313, &qword_269100);
  sub_B3D0(v79, v227, &qword_2690F0);
  v274 = (uint64_t)v60;
  v275 = (uint64_t)v60;
  v276 = v318;
  sub_B3D0(v274, v318, &qword_269100);
  v277 = v319;
  sub_B3D0(v272, v319, &qword_269100);
  v278 = v79;
  v279 = sub_5440(&qword_269108);
  sub_B3D0(v227, v277 + *(int *)(v279 + 48), &qword_2690F0);
  sub_B3D0(v276, v277 + *(int *)(v279 + 64), &qword_269100);
  sub_B414(v275, &qword_269100);
  sub_B414(v278, &qword_2690F0);
  sub_B414(v273, &qword_269100);
  sub_B414(v276, &qword_269100);
  sub_B414(v227, &qword_2690F0);
  return sub_B414(v272, &qword_269100);
}

void sub_16E134()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;

  v1 = sub_5440(&qword_25FE08);
  __chkstk_darwin(v1);
  v2 = type metadata accessor for Font.Leading(0);
  __chkstk_darwin(v2);
  v3 = (char *)sub_16E1E4
     + 4 * byte_1F25F0[*(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for TextLockup(0) + 40))];
  __asm { BR              X10 }
}

uint64_t sub_16E1E4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;

  v4 = static Font.title2.getter(a1);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v3 + 104))(v2, enum case for Font.Leading.tight(_:), v1);
  v5 = Font.leading(_:)(v2, v4);
  v6 = swift_release(v4);
  (*(void (**)(uint64_t, uint64_t, __n128))(v3 + 8))(v2, v1, v6);
  return v5;
}

unint64_t sub_16E39C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  __n128 v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  unint64_t result;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  __n128 v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  unint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t KeyPath;
  _QWORD v90[4];

  v74 = a3;
  v78 = type metadata accessor for AttributedString(0);
  v76 = *(_QWORD *)(v78 - 8);
  __chkstk_darwin(v78);
  v75 = (char *)&v69 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_5440(&qword_25E138);
  __chkstk_darwin(v10);
  v80 = (char *)&v69 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_5440(&qword_269170);
  __chkstk_darwin(v12);
  v81 = (char *)&v69 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v82 = sub_5440(&qword_269178);
  v79 = *(_QWORD *)(v82 - 8);
  __chkstk_darwin(v82);
  v77 = (uint64_t)&v69 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_5440(&qword_269180);
  __chkstk_darwin(v15);
  v85 = (char *)&v69 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v84 = sub_5440(&qword_269188);
  v86 = *(_QWORD *)(v84 - 8);
  __chkstk_darwin(v84);
  v83 = (char *)&v69 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_5440(&qword_269190);
  __chkstk_darwin(v18);
  v20 = (char *)&v69 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_5440(&qword_269198);
  v22 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  v24 = (char *)&v69 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = type metadata accessor for AttributeContainer(0);
  __chkstk_darwin(v25);
  v27 = (char *)&v69 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = swift_bridgeObjectRetain(a2);
  AttributeContainer.init()(v28);
  v87 = a1;
  v88 = a2;
  AttributedString.init(_:attributes:)(a1, a2, v27);
  KeyPath = swift_getKeyPath(&unk_1F28E8);
  v29 = swift_getKeyPath(&unk_1F2918);
  v90[0] = a4;
  v30 = sub_16F7AC();
  v31 = swift_retain(a4);
  v32 = a5;
  AttributedString.subscript.setter(v90, v29, v30, v31);
  Regex<A>.init(_:)(0x3F2B2E282A5C2A5CLL, 0xEF292A5C2A5C2829);
  v70 = v27;
  v71 = v30;
  v33 = v83;
  v34 = v84;
  v72 = v32;
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v20, 0, 1, v21);
  (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v24, v20, v21);
  v35 = v85;
  v73 = v24;
  Regex.firstMatch(in:)(v87, v88, v21);
  v36 = v86;
  v37 = v34;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v86 + 48))(v35, 1, v34) == 1)
  {
    (*(void (**)(char *, uint64_t))(v22 + 8))(v73, v21);
    v38 = &qword_269180;
    v39 = (uint64_t)v35;
    return sub_B414(v39, v38);
  }
  v69 = v22;
  v41 = v33;
  (*(void (**)(char *, char *, uint64_t))(v36 + 32))(v33, v35, v34);
  v90[0] = 0x3F2B2E282A5C2A5CLL;
  v90[1] = 0xEF292A5C2A5C2829;
  v42 = type metadata accessor for Locale(0);
  v43 = (uint64_t)v80;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 56))(v80, 1, 1, v42);
  v44 = sub_6FD0(&qword_2691A8, (uint64_t (*)(uint64_t))&type metadata accessor for AttributedString, (uint64_t)&protocol conformance descriptor for AttributedString);
  v45 = sub_C57C();
  v46 = (uint64_t)v81;
  v47 = v78;
  AttributedStringProtocol.range<A>(of:options:locale:)(v90, 1024, v43, v78, &type metadata for String, v44, v45);
  sub_B414(v43, &qword_25E138);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v79 + 48))(v46, 1, v82) == 1)
  {
    (*(void (**)(char *, uint64_t))(v36 + 8))(v41, v37);
    (*(void (**)(char *, uint64_t))(v69 + 8))(v73, v21);
    v38 = &qword_269170;
    v39 = v46;
    return sub_B414(v39, v38);
  }
  v85 = (char *)v21;
  v48 = v77;
  sub_167A4(v46, v77, &qword_269178);
  v49 = Regex.Match.range.getter(v37);
  v50 = v37;
  v52 = v51;
  v54 = v87;
  v53 = v88;
  v55 = String.index(_:offsetBy:)(v49, 2, v87, v88);
  result = String.index(_:offsetBy:)(v52, -2, v54, v53);
  if (result >> 14 < v55 >> 14)
  {
    __break(1u);
  }
  else
  {
    v56 = String.subscript.getter(v55, result, v54, v53);
    v58 = v57;
    v59 = static String._fromSubstring(_:)(v56);
    v61 = v60;
    v62 = swift_bridgeObjectRelease(v58);
    v63 = v70;
    AttributeContainer.init()(v62);
    v64 = v75;
    AttributedString.init(_:attributes:)(v59, v61, v63);
    v65 = swift_getKeyPath(&unk_1F28E8);
    *(&v69 - 2) = __chkstk_darwin(v65);
    v66 = swift_getKeyPath(&unk_1F2918);
    v90[0] = v74;
    v67 = swift_retain(v74);
    AttributedString.subscript.setter(v90, v66, v71, v67);
    v68 = sub_7FD8(&qword_2691B0, &qword_269178, (uint64_t)&protocol conformance descriptor for Range<A>);
    AttributedString.replaceSubrange<A, B>(_:with:)(v48, v64, v82, v47, v68, v44);
    (*(void (**)(char *, uint64_t))(v76 + 8))(v64, v47);
    sub_B414(v48, &qword_269178);
    (*(void (**)(char *, uint64_t))(v86 + 8))(v41, v50);
    return (*(uint64_t (**)(char *, char *))(v69 + 8))(v73, v85);
  }
  return result;
}

uint64_t sub_16EAB0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v2 = *a2;
  v5 = *a1;
  v6 = v2;
  v3 = sub_5440(&qword_2691B8);
  return dispatch thunk of static Equatable.== infix(_:_:)(&v6, &v5, v3, &protocol witness table for AnyKeyPath) & 1;
}

uint64_t sub_16EB08@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;

  v3 = type metadata accessor for AttributedString(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v18 - v8;
  sub_16E39C(*v1, v1[1], v1[3], v1[2], (uint64_t)&v18 - v8);
  (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v7, v9, v3);
  v10 = Text.init(_:)(v7);
  v12 = v11;
  v14 = v13;
  v16 = v15;
  result = (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v9, v3);
  *(_QWORD *)a1 = v10;
  *(_QWORD *)(a1 + 8) = v12;
  *(_BYTE *)(a1 + 16) = v14 & 1;
  *(_QWORD *)(a1 + 24) = v16;
  return result;
}

unint64_t sub_16EC10()
{
  unint64_t result;
  uint64_t v1;

  result = qword_269090;
  if (!qword_269090)
  {
    v1 = sub_7EF8(&qword_269070);
    sub_16EC94();
    sub_7FD8(&qword_260960, &qword_260968, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_269090);
  }
  return result;
}

unint64_t sub_16EC94()
{
  unint64_t result;
  uint64_t v1;

  result = qword_269098;
  if (!qword_269098)
  {
    v1 = sub_7EF8(&qword_269068);
    sub_16ED18();
    sub_7FD8(&qword_2604B0, &qword_2604B8, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_269098);
  }
  return result;
}

unint64_t sub_16ED18()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2690A0;
  if (!qword_2690A0)
  {
    v1 = sub_7EF8(&qword_269060);
    sub_16ED9C();
    sub_7FD8(&qword_25F440, &qword_25F448, (uint64_t)&protocol conformance descriptor for _AnimationModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_2690A0);
  }
  return result;
}

unint64_t sub_16ED9C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2690A8;
  if (!qword_2690A8)
  {
    v1 = sub_7EF8(&qword_269058);
    sub_16EE08();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_2690A8);
  }
  return result;
}

unint64_t sub_16EE08()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2690B0;
  if (!qword_2690B0)
  {
    v1 = sub_7EF8(&qword_269050);
    sub_16EE8C();
    sub_7FD8(&qword_2659C8, &qword_2659D0, (uint64_t)&protocol conformance descriptor for _IgnoredByLayoutEffect<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_2690B0);
  }
  return result;
}

unint64_t sub_16EE8C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2690B8;
  if (!qword_2690B8)
  {
    v1 = sub_7EF8(&qword_262670);
    sub_7FD8(&qword_2690C0, &qword_262668, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_2690B8);
  }
  return result;
}

uint64_t sub_16EF18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((~a3 & 0xF000000000000007) != 0)
    return sub_16A8D8(a1, a2, a3);
  return a1;
}

unint64_t sub_16EF34()
{
  unint64_t result;
  uint64_t v1;

  result = qword_269118;
  if (!qword_269118)
  {
    v1 = sub_7EF8(&qword_269110);
    sub_16EFB8();
    sub_7FD8((unint64_t *)&qword_2600A8, &qword_2600B0, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_269118);
  }
  return result;
}

unint64_t sub_16EFB8()
{
  unint64_t result;

  result = qword_269120;
  if (!qword_269120)
  {
    result = swift_getWitnessTable(&unk_1F2898, &type metadata for AccentedTextView);
    atomic_store(result, (unint64_t *)&qword_269120);
  }
  return result;
}

unint64_t sub_16EFFC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_269130;
  if (!qword_269130)
  {
    v1 = sub_7EF8(&qword_269128);
    sub_16F060();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_269130);
  }
  return result;
}

unint64_t sub_16F060()
{
  unint64_t result;
  uint64_t v1;

  result = qword_269138;
  if (!qword_269138)
  {
    v1 = sub_7EF8(&qword_269140);
    sub_16F0E4();
    sub_7FD8((unint64_t *)&qword_261BF0, &qword_261BF8, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_269138);
  }
  return result;
}

unint64_t sub_16F0E4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_269148;
  if (!qword_269148)
  {
    v1 = sub_7EF8(&qword_269150);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_269148);
  }
  return result;
}

unint64_t sub_16F148()
{
  unint64_t result;
  uint64_t v1;

  result = qword_269158;
  if (!qword_269158)
  {
    v1 = sub_7EF8(&qword_2690D8);
    sub_16F1CC();
    sub_7FD8((unint64_t *)&qword_261BF0, &qword_261BF8, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_269158);
  }
  return result;
}

unint64_t sub_16F1CC()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t OpaqueTypeConformance2;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  result = qword_269160;
  if (!qword_269160)
  {
    v1 = sub_7EF8(&qword_262680);
    v2 = sub_7EF8(&qword_2690D0);
    v3 = sub_7EF8(&qword_2690C8);
    v6 = sub_7EF8(&qword_269110);
    v7 = sub_16EF34();
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v6, &opaque type descriptor for <<opaque return type of View.fontDesign(_:)>>, 1);
    v6 = v3;
    v7 = OpaqueTypeConformance2;
    v5 = swift_getOpaqueTypeConformance2(&v6, &opaque type descriptor for <<opaque return type of View.fontWeight(_:)>>, 1);
    v6 = v2;
    v7 = v5;
    swift_getOpaqueTypeConformance2(&v6, &opaque type descriptor for <<opaque return type of View.kerning(_:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_269160);
  }
  return result;
}

uint64_t sub_16F2B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((~a3 & 0xF000000000000007) != 0)
    return sub_16AAA4(a1, a2, a3);
  return a1;
}

double sub_16F2CC(_OWORD *a1)
{
  double result;

  result = 0.0;
  *(_OWORD *)((char *)a1 + 137) = 0u;
  a1[7] = 0u;
  a1[8] = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return result;
}

double sub_16F2EC(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  double result;

  if (a4)
  {
    sub_34B1C(a1, a2, a3 & 1);
    swift_bridgeObjectRetain(a4);
    *(_QWORD *)&result = swift_retain(a19).n128_u64[0];
  }
  return result;
}

uint64_t sub_16F328(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))
{
  char v4;

  v4 = *(_BYTE *)(a1 + 152);
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    v4);
  return a1;
}

uint64_t sub_16F394(uint64_t result, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  if (a4)
  {
    sub_2B574(result, a2, a3 & 1);
    swift_release(a19);
    return swift_bridgeObjectRelease(a4);
  }
  return result;
}

uint64_t destroy for AccentedTextView(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_release(a1[2]);
  return swift_release(a1[3]);
}

_QWORD *initializeWithCopy for AccentedTextView(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[2];
  v5 = a2[3];
  a1[2] = v4;
  a1[3] = v5;
  swift_bridgeObjectRetain(v3);
  swift_retain(v4);
  swift_retain(v5);
  return a1;
}

_QWORD *assignWithCopy for AccentedTextView(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = a2[2];
  v7 = a1[2];
  a1[2] = v6;
  swift_retain(v6);
  swift_release(v7);
  v8 = a2[3];
  v9 = a1[3];
  a1[3] = v8;
  swift_retain(v8);
  swift_release(v9);
  return a1;
}

_QWORD *assignWithTake for AccentedTextView(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease(a1[1]);
  v4 = a1[2];
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 8);
  swift_release(v4);
  v5 = a1[3];
  a1[3] = *(_QWORD *)(a2 + 24);
  swift_release(v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for AccentedTextView(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AccentedTextView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AccentedTextView()
{
  return &type metadata for AccentedTextView;
}

uint64_t storeEnumTagSinglePayload for TextLockup.Size(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_16F600 + 4 * byte_1F25FB[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_16F634 + 4 * byte_1F25F6[v4]))();
}

uint64_t sub_16F634(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_16F63C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x16F644);
  return result;
}

uint64_t sub_16F650(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x16F658);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_16F65C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_16F664(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TextLockup.Size()
{
  return &type metadata for TextLockup.Size;
}

uint64_t sub_16F680()
{
  uint64_t v0;
  uint64_t OpaqueTypeConformance2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v0 = sub_7EF8(&qword_269078);
  v3 = sub_7EF8(&qword_269070);
  v4 = sub_7EF8(&qword_25FE40);
  v5 = sub_16EC10();
  v6 = sub_7FD8(&qword_25FEA0, &qword_25FE40, (uint64_t)&protocol conformance descriptor for ClosedRange<A>);
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v3, &opaque type descriptor for <<opaque return type of View.dynamicTypeSize<A>(_:)>>, 1);
  v3 = v0;
  v4 = OpaqueTypeConformance2;
  return swift_getOpaqueTypeConformance2(&v3, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
}

unint64_t sub_16F73C()
{
  unint64_t result;

  result = qword_269168;
  if (!qword_269168)
  {
    result = swift_getWitnessTable(&unk_1F2870, &type metadata for TextLockup.Size);
    atomic_store(result, (unint64_t *)&qword_269168);
  }
  return result;
}

uint64_t sub_16F780(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_22FD40, 1);
}

void sub_16F790()
{
  AttributeScopes.SwiftUIAttributes.foregroundColor.getter();
  __break(1u);
}

unint64_t sub_16F7AC()
{
  unint64_t result;

  result = qword_2691A0;
  if (!qword_2691A0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for AttributeScopes.SwiftUIAttributes.ForegroundColorAttribute, &type metadata for AttributeScopes.SwiftUIAttributes.ForegroundColorAttribute);
    atomic_store(result, (unint64_t *)&qword_2691A0);
  }
  return result;
}

void sub_16F7F0(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;

  v2 = *a2;
  v3 = sub_16F7AC();
  AttributeDynamicLookup.subscript.getter(v2, v3);
  __break(1u);
}

uint64_t sub_16F814()
{
  return 8;
}

uint64_t sub_16F820(_QWORD *a1)
{
  return swift_release(*a1);
}

uint64_t sub_16F828(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *a1;
  *a2 = v2;
  return swift_retain(v2);
}

uint64_t sub_16F838()
{
  uint64_t v0;

  v0 = sub_5440(&qword_2691B8);
  return dispatch thunk of Hashable.hashValue.getter(v0, &protocol witness table for AnyKeyPath);
}

_QWORD *sub_16F87C(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

void *sub_16F888()
{
  return &protocol witness table for Text;
}

uint64_t View.frame(fitting:withAspectRatio:)(uint64_t a1, uint64_t a2, double a3, double a4, double a5)
{
  double v7;
  double v8;
  double v9;
  double v10;
  uint64_t v11;
  uint64_t v12;

  if (a4 != 0.0)
  {
    if (a3 / a4 <= a5)
    {
      v8 = a3 / a5;
      if (v8 <= a4)
        a4 = v8;
    }
    else
    {
      v7 = a4 * a5;
      if (v7 <= a3)
        a3 = v7;
    }
  }
  v9 = a3;
  v10 = a4;
  v11 = _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0();
  return View.frame(width:height:alignment:)(*(_QWORD *)&v9, 0, *(_QWORD *)&v10, 0, v11, v12, a1, a2);
}

uint64_t sub_16F928(_QWORD *a1)
{
  uint64_t v1;

  v1 = type metadata accessor for ModifiedContent(255, *a1, &type metadata for _FrameLayout);
  return swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
}

uint64_t BuyButton.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_167A4(a1, a2, &qword_2618A0);
}

uint64_t BuyButton.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t);
  unint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;

  v40 = a1;
  v2 = sub_5440(&qword_25E0C8);
  __chkstk_darwin(v2);
  v39 = (uint64_t)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = sub_5440(&qword_2618A0);
  __chkstk_darwin(v38);
  v37 = (uint64_t)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Font.TextStyle(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ButtonViewModel(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = sub_5440(&qword_2691C0);
  __chkstk_darwin(v36);
  v13 = (char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1E428(v1, (uint64_t)v11, type metadata accessor for ButtonViewModel);
  *(_QWORD *)&v43 = 0x4020000000000000;
  v14 = enum case for Font.TextStyle.subheadline(_:);
  v15 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 104);
  v15(v8, enum case for Font.TextStyle.subheadline(_:), v5);
  v16 = sub_3CB54();
  ScaledMetric.init(wrappedValue:relativeTo:)(&v43, v8, &type metadata for Double, v16);
  v17 = type metadata accessor for ButtonView(0);
  *(_QWORD *)&v43 = 0x3FF8000000000000;
  v15(v8, v14, v5);
  ScaledMetric.init(wrappedValue:relativeTo:)(&v43, v8, &type metadata for Double, v16);
  v18 = &v13[*(int *)(v17 + 24)];
  *(_QWORD *)v18 = swift_getKeyPath(&unk_1F29B8);
  v19 = sub_5440(&qword_25FB20);
  swift_storeEnumTagMultiPayload(v18, v19, 0);
  sub_21C88((uint64_t)v11, (uint64_t)&v13[*(int *)(v17 + 28)], type metadata accessor for ButtonViewModel);
  v20 = v37;
  sub_B3D0(v35, v37, &qword_2618A0);
  v21 = (uint64_t)&v13[*(int *)(v36 + 36)];
  v22 = (int *)type metadata accessor for BuyButtonCaptionViewModifier(0);
  v23 = (_QWORD *)(v21 + v22[6]);
  *v23 = swift_getKeyPath(&unk_1F29F0);
  v24 = sub_5440(&qword_25F548);
  swift_storeEnumTagMultiPayload(v23, v24, 0);
  v25 = v21 + v22[7];
  type metadata accessor for CGSize(0);
  v27 = v26;
  v41 = 0;
  v42 = 0;
  State.init(wrappedValue:)(&v43, &v41, v26);
  v28 = v44;
  *(_OWORD *)v25 = v43;
  *(_QWORD *)(v25 + 16) = v28;
  v29 = v21 + v22[8];
  v41 = 0;
  v42 = 0;
  State.init(wrappedValue:)(&v43, &v41, v27);
  v30 = v44;
  *(_OWORD *)v29 = v43;
  *(_QWORD *)(v29 + 16) = v30;
  sub_170140(v21);
  LOBYTE(v27) = *(_BYTE *)(v20 + *(int *)(v38 + 40));
  sub_B414(v20, &qword_2618A0);
  *(_BYTE *)(v21 + v22[5]) = v27;
  v31 = v39;
  sub_16FD6C(v39);
  v32 = sub_5440(&qword_2691C8);
  v33 = v40;
  sub_B3D0(v31, v40 + *(int *)(v32 + 36), &qword_25E0C8);
  sub_B3D0((uint64_t)v13, v33, &qword_2691C0);
  sub_B414(v31, &qword_25E0C8);
  return sub_B414((uint64_t)v13, &qword_2691C0);
}

uint64_t sub_16FD6C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  __int128 *v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t inited;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE v38[64];
  _BYTE v39[8];
  uint64_t v40;
  unsigned __int8 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  _OWORD v45[3];

  v3 = type metadata accessor for LocalizerLookupStrategy(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = &v38[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v7 = type metadata accessor for LocalizerDefaultValue(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = &v38[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  if (*(_BYTE *)(v1 + *(int *)(type metadata accessor for ButtonViewModel(0) + 48)) != 1)
  {
    v32 = type metadata accessor for LocalizerRequest(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(a1, 1, 1, v32);
  }
  v37 = a1;
  v11 = sub_5440(&qword_2618A0);
  v12 = *(int *)(v11 + 48);
  v13 = (__int128 *)(v1 + *(int *)(type metadata accessor for BuyButtonExternals(0) + 28) + v12);
  v14 = v13[3];
  v44 = v13[2];
  v45[0] = v14;
  *(_DWORD *)((char *)v45 + 15) = *(_DWORD *)((char *)v13 + 63);
  v15 = v13[1];
  v42 = *v13;
  v43 = v15;
  sub_316C0((uint64_t)v39);
  if (v40)
  {
    v16 = v41;
    swift_bridgeObjectRelease(v40);
    if (v16 == 5)
    {
      v17 = (_QWORD *)(v1 + *(int *)(v11 + 44));
      v18 = v17[3];
      v19 = v17[4];
      sub_5480(v17, v18);
      if ((AssetInfo.isFree.getter(v18, v19) & 1) != 0)
      {
        LocalizerDefaultValue.init(stringLiteral:)("Double tap to show store details and get", 40, 2);
        (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v6, enum case for LocalizerLookupStrategy.default(_:), v3);
        v35 = "Books.Store.Accessibility.Get";
      }
      else
      {
        v21 = v17[3];
        v20 = v17[4];
        sub_5480(v17, v21);
        v22 = (void *)ContentInfo.storeData.getter(v21, *(_QWORD *)(v20 + 8));
        if (v22)
        {
          v23 = v22;
          v24 = objc_msgSend(v22, "priceFormatted");

          if (v24)
          {
            v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
            v27 = v26;

            v28 = sub_5440(&qword_261FB8);
            inited = swift_initStackObject(v28, v38);
            *(_OWORD *)(inited + 16) = xmmword_1E0B70;
            *(_QWORD *)(inited + 32) = 0x6563697270;
            *(_QWORD *)(inited + 40) = 0xE500000000000000;
            *(_QWORD *)(inited + 48) = v25;
            *(_QWORD *)(inited + 56) = v27;
            v30 = sub_965C(inited);
            LocalizerDefaultValue.init(stringLiteral:)("Double tap to to show store details and buy for @@price@@", 57, 2);
            (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v6, enum case for LocalizerLookupStrategy.default(_:), v3);
            v31 = v37;
            static LocalizerRequest.string(forKey:with:defaultValue:using:)(0xD000000000000025, 0x80000000001FDF40, v30, v10, v6);
            swift_bridgeObjectRelease(v30);
LABEL_14:
            (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
            (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
            v36 = type metadata accessor for LocalizerRequest(0);
            return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 56))(v31, 0, 1, v36);
          }
        }
        LocalizerDefaultValue.init(stringLiteral:)("Double tap to show store details and buy", 40, 2);
        (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v6, enum case for LocalizerLookupStrategy.default(_:), v3);
        v35 = "Books.Store.Accessibility.Buy";
      }
      v31 = v37;
      static LocalizerRequest.string(forKey:with:defaultValue:using:)(0xD00000000000001DLL, (unint64_t)(v35 - 32) | 0x8000000000000000, 0, v10, v6);
      goto LABEL_14;
    }
  }
  v34 = type metadata accessor for LocalizerRequest(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v37, 1, 1, v34);
}

uint64_t sub_170140@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  void *v24;
  uint64_t KeyPath;
  uint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  void *v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t result;
  void (*v43)(char *, uint64_t, uint64_t);
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;

  v2 = v1;
  v63 = a1;
  v3 = sub_5440(&qword_261768);
  __chkstk_darwin(v3);
  v56 = (char *)&v53 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Date(0);
  v57 = *(_QWORD *)(v5 - 8);
  v58 = v5;
  v6 = *(_QWORD *)(v57 + 64);
  v7 = __chkstk_darwin(v5);
  v54 = (char *)&v53 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v55 = (char *)&v53 - v8;
  v9 = type metadata accessor for LocalizerLookupStrategy(0);
  v61 = *(_QWORD *)(v9 - 8);
  v62 = v9;
  __chkstk_darwin(v9);
  v11 = (char *)&v53 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for LocalizerDefaultValue(0);
  v59 = *(_QWORD *)(v12 - 8);
  v60 = v12;
  __chkstk_darwin(v12);
  v14 = (char *)&v53 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_5440(&qword_2618A0);
  v16 = __chkstk_darwin(v15);
  v18 = (char *)&v53 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = (_QWORD *)(v1 + *(int *)(v16 + 44));
  v20 = v19[3];
  v21 = v19[4];
  sub_5480(v19, v20);
  LOBYTE(v20) = AssetInfo.isExplicit.getter(v20, v21);
  sub_B3D0(v2, (uint64_t)v18, &qword_2618A0);
  if ((v20 & 1) == 0)
  {
    sub_B414((uint64_t)v18, &qword_2618A0);
    goto LABEL_6;
  }
  v22 = *(int *)(v15 + 48);
  v23 = &v18[v22 + *(int *)(type metadata accessor for BuyButtonExternals(0) + 20)];
  v24 = *(void **)v23;
  if (!*(_QWORD *)v23)
  {
    v50 = *((_QWORD *)v23 + 1);
    v51 = type metadata accessor for ProfileRestrictions(0);
    v52 = sub_6FD0((unint64_t *)&qword_26AF00, type metadata accessor for ProfileRestrictions, (uint64_t)&protocol conformance descriptor for ProfileRestrictions);
    result = EnvironmentObject.error()(0, v50, v51, v52);
    __break(1u);
    return result;
  }
  KeyPath = swift_getKeyPath(&unk_1F2BE8);
  v26 = swift_getKeyPath(&unk_1F2C10);
  v27 = v24;
  static Published.subscript.getter(&v64, v27, KeyPath, v26);

  swift_release(KeyPath);
  swift_release(v26);
  LOBYTE(KeyPath) = v64;
  sub_B414((uint64_t)v18, &qword_2618A0);
  if ((KeyPath & 1) != 0)
  {
LABEL_6:
    v31 = v19[3];
    v32 = v19[4];
    sub_5480(v19, v31);
    v33 = (void *)ContentInfo.storeData.getter(v31, *(_QWORD *)(v32 + 8));
    if (v33)
    {
      v34 = v33;
      v35 = objc_msgSend(v33, "isPreorder");

      if (v35)
      {
        v36 = v19[3];
        v37 = v19[4];
        sub_5480(v19, v36);
        v38 = (uint64_t)v56;
        AssetInfo.expectedDate.getter(v36, v37);
        v40 = v57;
        v39 = v58;
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v57 + 48))(v38, 1, v58) != 1)
        {
          v43 = *(void (**)(char *, uint64_t, uint64_t))(v40 + 32);
          v44 = v55;
          v43(v55, v38, v39);
          v45 = v54;
          (*(void (**)(char *, char *, uint64_t))(v40 + 16))(v54, v44, v39);
          v46 = *(unsigned __int8 *)(v40 + 80);
          v47 = (v46 + 16) & ~v46;
          v48 = swift_allocObject(&unk_256BB8, v47 + v6, v46 | 7);
          v43((char *)(v48 + v47), (uint64_t)v45, v39);
          v30 = v63;
          static LocalizerRequest.custom(_:)(sub_174ECC, v48);
          swift_release(v48);
          (*(void (**)(char *, uint64_t))(v40 + 8))(v44, v39);
          goto LABEL_12;
        }
        sub_B414(v38, &qword_261768);
      }
    }
    v41 = type metadata accessor for LocalizerRequest(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 56))(v63, 1, 1, v41);
  }
  LocalizerDefaultValue.init(stringLiteral:)("Restricted", 10, 2);
  v29 = v61;
  v28 = v62;
  (*(void (**)(char *, _QWORD, uint64_t))(v61 + 104))(v11, enum case for LocalizerLookupStrategy.default(_:), v62);
  v30 = v63;
  static LocalizerRequest.string(forKey:with:defaultValue:using:)(0xD000000000000016, 0x80000000001FE000, 0, v14, v11);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v11, v28);
  (*(void (**)(char *, uint64_t))(v59 + 8))(v14, v60);
LABEL_12:
  v49 = type metadata accessor for LocalizerRequest(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 56))(v30, 0, 1, v49);
}

uint64_t sub_1705E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t, uint64_t);
  char *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (**v36)(uint64_t@<X8>);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;

  v58 = a1;
  v63 = a2;
  v64 = sub_5440(&qword_269338);
  v59 = *(_QWORD *)(v64 - 8);
  __chkstk_darwin(v64);
  v55 = (char *)&v51 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = sub_5440(&qword_269340);
  __chkstk_darwin(v61);
  v62 = (char *)&v51 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for SizeConstants.Spacing(0);
  __chkstk_darwin(v5);
  v57 = (uint64_t)&v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for SizeConstants(0);
  __chkstk_darwin(v7);
  v54 = (uint64_t)&v51 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = type metadata accessor for BuyButtonCaptionViewModifier(0);
  v9 = *(_QWORD *)(v53 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  __chkstk_darwin(v53);
  v11 = (char *)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = sub_5440(&qword_269348);
  __chkstk_darwin(v60);
  v56 = (char *)&v51 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_5440(&qword_25E0C8);
  __chkstk_darwin(v13);
  v15 = (char *)&v51 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for LocalizerRequest(0);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v19 = (char *)&v51 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_B3D0(v2, (uint64_t)v15, &qword_25E0C8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16) == 1)
  {
    sub_B414((uint64_t)v15, &qword_25E0C8);
    v20 = v59;
    v21 = *(void (**)(char *, uint64_t, uint64_t))(v59 + 16);
    v22 = v55;
    v23 = v64;
    v21(v55, v58, v64);
    v24 = (uint64_t)v62;
    v21(v62, (uint64_t)v22, v23);
    swift_storeEnumTagMultiPayload(v24, v61, 1);
    v25 = sub_174BB0();
    v26 = sub_7FD8(&qword_269368, &qword_269338, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
    _ConditionalContent<>.init(storage:)(v24, v60, v23, v25, v26);
    return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v22, v23);
  }
  else
  {
    v51 = v19;
    v52 = v17;
    v28 = v19;
    v29 = v16;
    (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v28, v15, v16);
    v30 = v2;
    sub_1E428(v2, (uint64_t)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for BuyButtonCaptionViewModifier);
    v31 = *(unsigned __int8 *)(v9 + 80);
    v32 = (v31 + 16) & ~v31;
    v33 = swift_allocObject(&unk_256B68, v32 + v10, v31 | 7);
    sub_21C88((uint64_t)v11, v33 + v32, type metadata accessor for BuyButtonCaptionViewModifier);
    v34 = (uint64_t)v56;
    v35 = v64;
    (*(void (**)(char *, uint64_t, uint64_t))(v59 + 16))(v56, v58, v64);
    v36 = (void (**)(uint64_t@<X8>))(v34 + *(int *)(sub_5440(&qword_269360) + 36));
    *v36 = sub_174F98;
    v36[1] = 0;
    v36[2] = (void (*)(uint64_t@<X8>))sub_174CD4;
    v36[3] = (void (*)(uint64_t@<X8>))v33;
    v37 = sub_170B4C();
    v39 = v38;
    v40 = v60;
    v41 = v34 + *(int *)(v60 + 36);
    v42 = v54;
    sub_3168C(v54);
    v43 = v57;
    sub_1E428(v42, v57, type metadata accessor for SizeConstants.Environment);
    sub_224DC(v42, type metadata accessor for SizeConstants);
    v44 = sub_224DC(v43, type metadata accessor for SizeConstants.Spacing);
    *(_QWORD *)v41 = static HorizontalAlignment.center.getter(v44);
    *(_QWORD *)(v41 + 8) = 0x4000000000000000;
    *(_BYTE *)(v41 + 16) = 0;
    v45 = sub_5440(&qword_269380);
    v46 = (uint64_t)v51;
    sub_170C20(v30, (uint64_t)v51, v41 + *(int *)(v45 + 44));
    v47 = (uint64_t *)(v41 + *(int *)(sub_5440(&qword_269378) + 36));
    *v47 = v37;
    v47[1] = v39;
    v48 = (uint64_t)v62;
    sub_B3D0(v34, (uint64_t)v62, &qword_269348);
    swift_storeEnumTagMultiPayload(v48, v61, 0);
    v49 = sub_174BB0();
    v50 = sub_7FD8(&qword_269368, &qword_269338, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
    _ConditionalContent<>.init(storage:)(v48, v40, v35, v49, v50);
    sub_B414(v34, &qword_269348);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v52 + 8))(v46, v29);
  }
}

uint64_t sub_170ADC(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[2];
  __int128 v9;
  uint64_t v10;

  v2 = *a1;
  v3 = a1[1];
  v4 = (__int128 *)(a2 + *(int *)(type metadata accessor for BuyButtonCaptionViewModifier(0) + 28));
  v5 = *((_QWORD *)v4 + 2);
  v9 = *v4;
  v10 = v5;
  v8[0] = v2;
  v8[1] = v3;
  v6 = sub_5440(&qword_25E378);
  return State.wrappedValue.setter(v8, v6);
}

uint64_t sub_170B4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  double v3;
  _QWORD *v4;
  double v6[2];

  v1 = type metadata accessor for BuyButtonCaptionViewModifier(0);
  v2 = sub_5440(&qword_25E378);
  State.wrappedValue.getter(v6, v2);
  v3 = v6[0];
  v4 = State.wrappedValue.getter(v6, v2);
  if (v3 <= v6[0])
    return static Alignment.top.getter(v4);
  if (!*(_BYTE *)(v0 + *(int *)(v1 + 20)))
    return static Alignment.topLeading.getter(v4);
  if (*(_BYTE *)(v0 + *(int *)(v1 + 20)) == 1)
    return static Alignment.top.getter(v4);
  return static Alignment.topTrailing.getter(v4);
}

uint64_t sub_170C20@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  double v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  __n128 v42;
  uint64_t KeyPath;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void (**v55)(uint64_t@<X8>);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD v85[2];
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unsigned __int8 v89;
  uint64_t v90;
  uint64_t v91;

  v75 = a2;
  v63 = a1;
  v5 = type metadata accessor for BuyButtonCaptionViewModifier(0);
  v6 = *(_QWORD *)(*(_QWORD *)(v5 - 8) + 64);
  v83 = *(_QWORD *)(v5 - 8);
  v84 = v6;
  __chkstk_darwin(v5);
  v82 = (uint64_t)&v60 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v81 = type metadata accessor for Font.Leading(0);
  v79 = *(_QWORD *)(v81 - 8);
  __chkstk_darwin(v81);
  v77 = (char *)&v60 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_5440(&qword_25FE08);
  __chkstk_darwin(v9);
  v11 = (char *)&v60 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v62 = type metadata accessor for LocalizerRequest(0);
  v61 = *(_QWORD *)(v62 - 8);
  __chkstk_darwin(v62);
  v13 = (char *)&v60 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v76 = type metadata accessor for LocalizedText(0);
  v73 = *(_QWORD *)(v76 - 8);
  __chkstk_darwin(v76);
  v60 = (char *)&v60 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v71 = sub_5440(&qword_25FE10);
  __chkstk_darwin(v71);
  v16 = (char *)&v60 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v74 = sub_5440(&qword_25FE18);
  __chkstk_darwin(v74);
  v18 = (char *)&v60 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v72 = sub_5440(&qword_269388);
  __chkstk_darwin(v72);
  v70 = (uint64_t)&v60 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v80 = sub_5440(&qword_269390);
  v20 = __chkstk_darwin(v80);
  v22 = (char *)&v60 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v78 = (uint64_t)&v60 - v23;
  v24 = (uint64_t *)(a1 + *(int *)(v5 + 28));
  v26 = v24[1];
  v27 = v24[2];
  v86 = *v24;
  v25 = v86;
  v87 = v26;
  v88 = v27;
  v28 = sub_5440(&qword_25E378);
  State.wrappedValue.getter(v85, v28);
  v29 = v85[0];
  v86 = v25;
  v87 = v26;
  v88 = v27;
  State.wrappedValue.getter(v85, v28);
  v30 = v85[1];
  v31 = _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0();
  _FrameLayout.init(width:height:alignment:)(&v86, v29, 0, v30, 0, v31, v32);
  v69 = v86;
  v68 = v87;
  v67 = v88;
  v66 = v89;
  v65 = v90;
  v64 = v91;
  (*(void (**)(char *, uint64_t, uint64_t))(v61 + 16))(v13, v75, v62);
  v33 = v60;
  v34 = LocalizedText.init(_:)(v13);
  v35 = static Font.Weight.medium.getter(v34);
  v36 = type metadata accessor for Font.Design(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 56))(v11, 1, 1, v36);
  v37 = static Font.system(size:weight:design:)(*(_QWORD *)&v35, 0, v11, 8.0);
  sub_B414((uint64_t)v11, &qword_25FE08);
  v38 = v79;
  v39 = v77;
  v40 = v81;
  (*(void (**)(char *, _QWORD, uint64_t))(v79 + 104))(v77, enum case for Font.Leading.tight(_:), v81);
  v41 = Font.leading(_:)(v39, v37);
  v42 = swift_release(v37);
  (*(void (**)(char *, uint64_t, __n128))(v38 + 8))(v39, v40, v42);
  KeyPath = swift_getKeyPath(&unk_1F2B88);
  v44 = v73;
  v45 = v76;
  (*(void (**)(char *, char *, uint64_t))(v73 + 16))(v16, v33, v76);
  v46 = (uint64_t *)&v16[*(int *)(v71 + 36)];
  *v46 = KeyPath;
  v46[1] = v41;
  (*(void (**)(char *, uint64_t))(v44 + 8))(v33, v45);
  v47 = _s7BooksUI14ColorConstantsV19booksSecondaryLabel05SwiftB00C0Vvg_0();
  v48 = swift_getKeyPath(&unk_1F2BB8);
  sub_B3D0((uint64_t)v16, (uint64_t)v18, &qword_25FE10);
  v49 = (uint64_t *)&v18[*(int *)(v74 + 36)];
  *v49 = v48;
  v49[1] = v47;
  sub_B414((uint64_t)v16, &qword_25FE10);
  v50 = v70;
  sub_B3D0((uint64_t)v18, v70, &qword_25FE18);
  *(_WORD *)(v50 + *(int *)(v72 + 36)) = 1;
  sub_B414((uint64_t)v18, &qword_25FE18);
  v51 = v82;
  sub_1E428(v63, v82, type metadata accessor for BuyButtonCaptionViewModifier);
  v52 = *(unsigned __int8 *)(v83 + 80);
  v53 = (v52 + 16) & ~v52;
  v54 = swift_allocObject(&unk_256B90, v53 + v84, v52 | 7);
  sub_21C88(v51, v54 + v53, type metadata accessor for BuyButtonCaptionViewModifier);
  sub_B3D0(v50, (uint64_t)v22, &qword_269388);
  v55 = (void (**)(uint64_t@<X8>))&v22[*(int *)(v80 + 36)];
  *v55 = sub_77E8;
  v55[1] = 0;
  v55[2] = (void (*)(uint64_t@<X8>))sub_174E14;
  v55[3] = (void (*)(uint64_t@<X8>))v54;
  sub_B414(v50, &qword_269388);
  v56 = v78;
  sub_167A4((uint64_t)v22, v78, &qword_269390);
  sub_B3D0(v56, (uint64_t)v22, &qword_269390);
  *(_QWORD *)a3 = 0;
  *(_BYTE *)(a3 + 8) = 1;
  *(_QWORD *)(a3 + 16) = v69;
  *(_BYTE *)(a3 + 24) = v68;
  *(_QWORD *)(a3 + 32) = v67;
  *(_BYTE *)(a3 + 40) = v66;
  v57 = v64;
  *(_QWORD *)(a3 + 48) = v65;
  *(_QWORD *)(a3 + 56) = v57;
  v58 = sub_5440(&qword_269398);
  sub_B3D0((uint64_t)v22, a3 + *(int *)(v58 + 48), &qword_269390);
  sub_B414(v56, &qword_269390);
  return sub_B414((uint64_t)v22, &qword_269390);
}

uint64_t sub_1712A8(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[2];
  __int128 v9;
  uint64_t v10;

  v2 = *a1;
  v3 = a1[1];
  v4 = (__int128 *)(a2 + *(int *)(type metadata accessor for BuyButtonCaptionViewModifier(0) + 32));
  v5 = *((_QWORD *)v4 + 2);
  v9 = *v4;
  v10 = v5;
  v8[0] = v2;
  v8[1] = v3;
  v6 = sub_5440(&qword_25E378);
  return State.wrappedValue.setter(v8, v6);
}

uint64_t sub_17131C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = sub_5440(&qword_25E0C8);
  sub_73A0(v0, qword_288D38);
  v1 = sub_7120(v0, (uint64_t)qword_288D38);
  v2 = type metadata accessor for LocalizerRequest(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
}

uint64_t sub_171384@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_25DD10 != -1)
    swift_once(&qword_25DD10, sub_17131C);
  v2 = sub_5440(&qword_25E0C8);
  v3 = sub_7120(v2, (uint64_t)qword_288D38);
  return sub_B3D0(v3, a1, &qword_25E0C8);
}

uint64_t sub_1713F0(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v3;

  v3 = sub_B414(a1, &qword_25E0C8);
  return a2(v3);
}

uint64_t type metadata accessor for BuyButtonCaptionViewModifier(uint64_t a1)
{
  return sub_1FE90(a1, qword_2692F0, (uint64_t)&nominal type descriptor for BuyButtonCaptionViewModifier);
}

uint64_t sub_171454(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &opaque type descriptor for <<opaque return type of BuyButton.body>>, 1);
}

_QWORD *initializeBufferWithCopyOfBuffer for BuyButton(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  int v5;
  int *v6;
  uint64_t v7;
  void (*v8)(_QWORD *, _QWORD *, uint64_t);
  int *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  id v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(_QWORD *, _QWORD *, uint64_t);
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  __int128 v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int *v80;
  uint64_t v81;
  _QWORD *v82;
  char *v83;
  uint64_t v84;
  void *v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t *v88;
  id v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  __int16 v107;
  char v109;
  _QWORD *v110;

  v4 = sub_5440(&qword_2618A0);
  v5 = *(_DWORD *)(*(_QWORD *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v18 = *a2;
    *a1 = *a2;
    v19 = v18 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain(v18);
  }
  else
  {
    v6 = (int *)v4;
    v7 = sub_5440(&qword_25FC38);
    v8 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v9 = (int *)type metadata accessor for ButtonViewModel(0);
    v8((_QWORD *)((char *)a1 + v9[5]), (_QWORD *)((char *)a2 + v9[5]), v7);
    v10 = v9[6];
    v11 = (_QWORD *)((char *)a1 + v10);
    v12 = (_QWORD *)((char *)a2 + v10);
    v13 = sub_5440(&qword_25F1E8);
    if (swift_getEnumCaseMultiPayload(v12, v13) == 1)
    {
      v14 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v11, v12, v14);
      v15 = v11;
      v16 = v13;
      v17 = 1;
    }
    else
    {
      v20 = *v12;
      *v11 = *v12;
      swift_retain(v20);
      v15 = v11;
      v16 = v13;
      v17 = 0;
    }
    swift_storeEnumTagMultiPayload(v15, v16, v17);
    *((_BYTE *)a1 + v9[7]) = *((_BYTE *)a2 + v9[7]);
    *((_BYTE *)a1 + v9[8]) = *((_BYTE *)a2 + v9[8]);
    *((_BYTE *)a1 + v9[9]) = *((_BYTE *)a2 + v9[9]);
    v21 = v9[10];
    v22 = (_QWORD *)((char *)a1 + v21);
    v23 = (_QWORD *)((char *)a2 + v21);
    v24 = *v23;
    if (*v23 >= 3uLL)
    {
      v26 = v23[1];
      v27 = v23[2];
      *v22 = v24;
      v22[1] = v26;
      v28 = v23[3];
      v22[2] = v27;
      v22[3] = v28;
      swift_retain(v24);
      swift_retain(v26);
      swift_retain(v27);
      swift_retain(v28);
    }
    else
    {
      v25 = *((_OWORD *)v23 + 1);
      *(_OWORD *)v22 = *(_OWORD *)v23;
      *((_OWORD *)v22 + 1) = v25;
    }
    v29 = v9[11];
    v30 = (_QWORD *)((char *)a1 + v29);
    v31 = (_QWORD *)((char *)a2 + v29);
    v32 = type metadata accessor for ButtonViewModel.Content(0);
    switch(swift_getEnumCaseMultiPayload(v31, v32))
    {
      case 0u:
        v33 = type metadata accessor for LocalizerRequest(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v33 - 8) + 16))(v30, v31, v33);
        v34 = v30;
        v35 = v32;
        v36 = 0;
        goto LABEL_17;
      case 1u:
        v37 = v31[1];
        *v30 = *v31;
        v30[1] = v37;
        swift_bridgeObjectRetain(v37);
        v34 = v30;
        v35 = v32;
        v36 = 1;
        goto LABEL_17;
      case 2u:
        v38 = v31[1];
        *v30 = *v31;
        v30[1] = v38;
        v39 = (void *)v31[2];
        v30[2] = v39;
        swift_bridgeObjectRetain(v38);
        v40 = v39;
        v41 = *(int *)(sub_5440(&qword_2621A8) + 64);
        v42 = (char *)v30 + v41;
        v43 = (char *)v31 + v41;
        v44 = type metadata accessor for LocalizerRequest(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v44 - 8) + 16))(v42, v43, v44);
        v34 = v30;
        v35 = v32;
        v36 = 2;
        goto LABEL_17;
      case 3u:
        v45 = v31[1];
        *v30 = *v31;
        v30[1] = v45;
        swift_bridgeObjectRetain(v45);
        v46 = *(int *)(sub_5440(&qword_2621B0) + 48);
        v47 = (char *)v30 + v46;
        v48 = (char *)v31 + v46;
        v49 = type metadata accessor for LocalizerRequest(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v49 - 8) + 16))(v47, v48, v49);
        v34 = v30;
        v35 = v32;
        v36 = 3;
        goto LABEL_17;
      case 4u:
        v50 = type metadata accessor for LocalizerRequest(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v50 - 8) + 16))(v30, v31, v50);
        v51 = *(int *)(sub_5440(&qword_2621B8) + 48);
        v52 = (_QWORD *)((char *)v30 + v51);
        v53 = (_QWORD *)((char *)v31 + v51);
        v54 = v53[1];
        *v52 = *v53;
        v52[1] = v54;
        swift_bridgeObjectRetain(v54);
        v34 = v30;
        v35 = v32;
        v36 = 4;
        goto LABEL_17;
      case 5u:
        v55 = type metadata accessor for LocalizerRequest(0);
        v56 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v55 - 8) + 16);
        v56(v30, v31, v55);
        v57 = sub_5440(&qword_2621C0);
        v56((_QWORD *)((char *)v30 + *(int *)(v57 + 48)), (_QWORD *)((char *)v31 + *(int *)(v57 + 48)), v55);
        v34 = v30;
        v35 = v32;
        v36 = 5;
LABEL_17:
        swift_storeEnumTagMultiPayload(v34, v35, v36);
        break;
      default:
        memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
        break;
    }
    *((_BYTE *)a1 + v9[12]) = *((_BYTE *)a2 + v9[12]);
    v58 = v9[13];
    v59 = (char *)a1 + v58;
    v60 = (char *)a2 + v58;
    v61 = type metadata accessor for ButtonViewModel.ActionKind(0);
    if (swift_getEnumCaseMultiPayload(v60, v61) == 1)
    {
      v62 = type metadata accessor for URL(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v62 - 8) + 16))(v59, v60, v62);
      v63 = 1;
    }
    else
    {
      v63 = *((_QWORD *)v60 + 3);
      if (v63)
      {
        v64 = *((_QWORD *)v60 + 4);
        *((_QWORD *)v59 + 3) = v63;
        *((_QWORD *)v59 + 4) = v64;
        (**(void (***)(char *, char *))(v63 - 8))(v59, v60);
        v63 = 0;
      }
      else
      {
        v65 = *((_OWORD *)v60 + 1);
        *(_OWORD *)v59 = *(_OWORD *)v60;
        *((_OWORD *)v59 + 1) = v65;
        *((_QWORD *)v59 + 4) = *((_QWORD *)v60 + 4);
      }
    }
    swift_storeEnumTagMultiPayload(v59, v61, v63);
    v66 = v9[14];
    v67 = (char *)a1 + v66;
    v68 = (char *)a2 + v66;
    v69 = type metadata accessor for LocalizerRequest(0);
    v70 = *(_QWORD *)(v69 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v70 + 48))(v68, 1, v69))
    {
      v71 = sub_5440(&qword_25E0C8);
      memcpy(v67, v68, *(_QWORD *)(*(_QWORD *)(v71 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v70 + 16))(v67, v68, v69);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v70 + 56))(v67, 0, 1, v69);
    }
    *(_WORD *)((char *)a1 + v6[9]) = *(_WORD *)((char *)a2 + v6[9]);
    *((_BYTE *)a1 + v6[10]) = *((_BYTE *)a2 + v6[10]);
    v72 = v6[11];
    v73 = *(_OWORD *)((char *)a2 + v72 + 24);
    *(_OWORD *)((char *)a1 + v72 + 24) = v73;
    (**(void (***)(void))(v73 - 8))();
    v74 = v6[12];
    v75 = (_QWORD *)((char *)a1 + v74);
    v76 = (_QWORD *)((char *)a2 + v74);
    if (swift_getEnumCaseMultiPayload(v76, v13) == 1)
    {
      v77 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v77 - 8) + 16))(v75, v76, v77);
      v78 = 1;
    }
    else
    {
      v79 = *v76;
      *v75 = *v76;
      swift_retain(v79);
      v78 = 0;
    }
    swift_storeEnumTagMultiPayload(v75, v13, v78);
    v80 = (int *)type metadata accessor for BuyButtonExternals(0);
    v81 = v80[5];
    v82 = (uint64_t *)((char *)v75 + v81);
    v83 = (char *)v76 + v81;
    v85 = *(void **)v83;
    v84 = *((_QWORD *)v83 + 1);
    *v82 = v85;
    v82[1] = v84;
    v86 = v80[6];
    v87 = (uint64_t *)((char *)v75 + v86);
    v88 = (uint64_t *)((char *)v76 + v86);
    v89 = v85;
    v90 = sub_5440(&qword_25F758);
    v110 = a1;
    if (swift_getEnumCaseMultiPayload(v88, v90) == 1)
    {
      v91 = type metadata accessor for UUID(0);
      v92 = *(_QWORD *)(v91 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v92 + 48))(v88, 1, v91))
      {
        v93 = sub_5440(&qword_25FAC0);
        memcpy(v87, v88, *(_QWORD *)(*(_QWORD *)(v93 - 8) + 64));
        v94 = 1;
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v92 + 16))(v87, v88, v91);
        v94 = 1;
        (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v92 + 56))(v87, 0, 1, v91);
      }
    }
    else
    {
      v95 = *v88;
      *v87 = *v88;
      swift_retain(v95);
      v94 = 0;
    }
    swift_storeEnumTagMultiPayload(v87, v90, v94);
    v96 = v80[7];
    v97 = (char *)v75 + v96;
    v98 = (char *)v76 + v96;
    v99 = *(_QWORD *)v98;
    v100 = *((_QWORD *)v98 + 1);
    v101 = *((_QWORD *)v98 + 2);
    v102 = *((_QWORD *)v98 + 3);
    v103 = *((_QWORD *)v98 + 4);
    v104 = *((_QWORD *)v98 + 5);
    v105 = *((_QWORD *)v98 + 6);
    v106 = *((_QWORD *)v98 + 7);
    v107 = *((_WORD *)v98 + 32);
    sub_3480C(*(_QWORD *)v98, v100, v101, v102, v103, v104, v105, v106, v107, v98[66]);
    *(_QWORD *)v97 = v99;
    *((_QWORD *)v97 + 1) = v100;
    *((_QWORD *)v97 + 2) = v101;
    *((_QWORD *)v97 + 3) = v102;
    *((_QWORD *)v97 + 4) = v103;
    *((_QWORD *)v97 + 5) = v104;
    *((_QWORD *)v97 + 6) = v105;
    *((_QWORD *)v97 + 7) = v106;
    *((_WORD *)v97 + 32) = v107;
    v97[66] = v109;
    return v110;
  }
  return (_QWORD *)v19;
}

uint64_t destroy for BuyButton(uint64_t a1)
{
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t);
  int *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t);
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  int *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;

  v2 = sub_5440(&qword_25FC38);
  v3 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8);
  v3(a1, v2);
  v4 = (int *)type metadata accessor for ButtonViewModel(0);
  v3(a1 + v4[5], v2);
  v5 = (_QWORD *)(a1 + v4[6]);
  v6 = sub_5440(&qword_25F1E8);
  if (swift_getEnumCaseMultiPayload(v5, v6) == 1)
  {
    v7 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v5, v7);
  }
  else
  {
    swift_release(*v5);
  }
  v8 = (_QWORD *)(a1 + v4[10]);
  if (*v8 >= 3uLL)
  {
    swift_release(*v8);
    swift_release(v8[1]);
    swift_release(v8[2]);
    swift_release(v8[3]);
  }
  v9 = a1 + v4[11];
  v10 = type metadata accessor for ButtonViewModel.Content(0);
  switch(swift_getEnumCaseMultiPayload(v9, v10))
  {
    case 0u:
      goto LABEL_11;
    case 1u:
      swift_bridgeObjectRelease(*(_QWORD *)(v9 + 8));
      break;
    case 2u:
      swift_bridgeObjectRelease(*(_QWORD *)(v9 + 8));

      v11 = *(int *)(sub_5440(&qword_2621A8) + 64);
      goto LABEL_10;
    case 3u:
      swift_bridgeObjectRelease(*(_QWORD *)(v9 + 8));
      v11 = *(int *)(sub_5440(&qword_2621B0) + 48);
LABEL_10:
      v9 += v11;
LABEL_11:
      v12 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v9, v12);
      break;
    case 4u:
      v13 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v9, v13);
      v14 = sub_5440(&qword_2621B8);
      swift_bridgeObjectRelease(*(_QWORD *)(v9 + *(int *)(v14 + 48) + 8));
      break;
    case 5u:
      v15 = type metadata accessor for LocalizerRequest(0);
      v16 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8);
      v16(v9, v15);
      v17 = sub_5440(&qword_2621C0);
      v16(v9 + *(int *)(v17 + 48), v15);
      break;
    default:
      break;
  }
  v18 = (_QWORD *)(a1 + v4[13]);
  v19 = type metadata accessor for ButtonViewModel.ActionKind(0);
  if (swift_getEnumCaseMultiPayload(v18, v19) == 1)
  {
    v20 = type metadata accessor for URL(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(v18, v20);
  }
  else if (v18[3])
  {
    _s7BooksUI13AnyPagedFrameVwxx_0(v18);
  }
  v21 = a1 + v4[14];
  v22 = type metadata accessor for LocalizerRequest(0);
  v23 = *(_QWORD *)(v22 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
    (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v21, v22);
  v24 = sub_5440(&qword_2618A0);
  _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)(a1 + *(int *)(v24 + 44)));
  v25 = (_QWORD *)(a1 + *(int *)(v24 + 48));
  if (swift_getEnumCaseMultiPayload(v25, v6) == 1)
  {
    v26 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v26 - 8) + 8))(v25, v26);
  }
  else
  {
    swift_release(*v25);
  }
  v27 = (int *)type metadata accessor for BuyButtonExternals(0);

  v28 = (_QWORD *)((char *)v25 + v27[6]);
  v29 = sub_5440(&qword_25F758);
  if (swift_getEnumCaseMultiPayload(v28, v29) == 1)
  {
    v30 = type metadata accessor for UUID(0);
    v31 = *(_QWORD *)(v30 - 8);
    if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v31 + 48))(v28, 1, v30))
      (*(void (**)(_QWORD *, uint64_t))(v31 + 8))(v28, v30);
  }
  else
  {
    swift_release(*v28);
  }
  v32 = (char *)v25 + v27[7];
  return sub_BDF8(*(_QWORD *)v32, *((_QWORD *)v32 + 1), *((_QWORD *)v32 + 2), *((_QWORD *)v32 + 3), *((_QWORD *)v32 + 4), *((_QWORD *)v32 + 5), *((_QWORD *)v32 + 6), *((_QWORD *)v32 + 7), *((_WORD *)v32 + 32), v32[66]);
}

uint64_t initializeWithCopy for BuyButton(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, uint64_t);
  int *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  id v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(_QWORD *, _QWORD *, uint64_t);
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  void *v62;
  const void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int *v67;
  uint64_t v68;
  __int128 v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int *v76;
  uint64_t v77;
  _QWORD *v78;
  char *v79;
  uint64_t v80;
  void *v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t *v84;
  id v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  __int16 v103;
  char v105;
  uint64_t v106;

  v4 = sub_5440(&qword_25FC38);
  v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16);
  v5(a1, a2, v4);
  v6 = (int *)type metadata accessor for ButtonViewModel(0);
  v5(a1 + v6[5], a2 + v6[5], v4);
  v7 = v6[6];
  v8 = (uint64_t *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v10 = sub_5440(&qword_25F1E8);
  if (swift_getEnumCaseMultiPayload(v9, v10) == 1)
  {
    v11 = type metadata accessor for ColorScheme(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v8, v9, v11);
    v12 = v8;
    v13 = v10;
    v14 = 1;
  }
  else
  {
    v15 = *v9;
    *v8 = *v9;
    swift_retain(v15);
    v12 = v8;
    v13 = v10;
    v14 = 0;
  }
  swift_storeEnumTagMultiPayload(v12, v13, v14);
  *(_BYTE *)(a1 + v6[7]) = *(_BYTE *)(a2 + v6[7]);
  *(_BYTE *)(a1 + v6[8]) = *(_BYTE *)(a2 + v6[8]);
  *(_BYTE *)(a1 + v6[9]) = *(_BYTE *)(a2 + v6[9]);
  v16 = v6[10];
  v17 = (_QWORD *)(a1 + v16);
  v18 = (_QWORD *)(a2 + v16);
  v19 = *v18;
  if (*v18 >= 3uLL)
  {
    v21 = v18[1];
    v22 = v18[2];
    *v17 = v19;
    v17[1] = v21;
    v23 = v18[3];
    v17[2] = v22;
    v17[3] = v23;
    swift_retain(v19);
    swift_retain(v21);
    swift_retain(v22);
    swift_retain(v23);
  }
  else
  {
    v20 = *((_OWORD *)v18 + 1);
    *(_OWORD *)v17 = *(_OWORD *)v18;
    *((_OWORD *)v17 + 1) = v20;
  }
  v24 = v6[11];
  v25 = (_QWORD *)(a1 + v24);
  v26 = (_QWORD *)(a2 + v24);
  v27 = type metadata accessor for ButtonViewModel.Content(0);
  switch(swift_getEnumCaseMultiPayload(v26, v27))
  {
    case 0u:
      v28 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v28 - 8) + 16))(v25, v26, v28);
      v29 = v25;
      v30 = v27;
      v31 = 0;
      goto LABEL_15;
    case 1u:
      v32 = v26[1];
      *v25 = *v26;
      v25[1] = v32;
      swift_bridgeObjectRetain(v32);
      v29 = v25;
      v30 = v27;
      v31 = 1;
      goto LABEL_15;
    case 2u:
      v33 = v26[1];
      *v25 = *v26;
      v25[1] = v33;
      v34 = (void *)v26[2];
      v25[2] = v34;
      swift_bridgeObjectRetain(v33);
      v35 = v34;
      v36 = *(int *)(sub_5440(&qword_2621A8) + 64);
      v37 = (char *)v25 + v36;
      v38 = (char *)v26 + v36;
      v39 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v39 - 8) + 16))(v37, v38, v39);
      v29 = v25;
      v30 = v27;
      v31 = 2;
      goto LABEL_15;
    case 3u:
      v40 = v26[1];
      *v25 = *v26;
      v25[1] = v40;
      swift_bridgeObjectRetain(v40);
      v41 = *(int *)(sub_5440(&qword_2621B0) + 48);
      v42 = (char *)v25 + v41;
      v43 = (char *)v26 + v41;
      v44 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v44 - 8) + 16))(v42, v43, v44);
      v29 = v25;
      v30 = v27;
      v31 = 3;
      goto LABEL_15;
    case 4u:
      v45 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v45 - 8) + 16))(v25, v26, v45);
      v46 = *(int *)(sub_5440(&qword_2621B8) + 48);
      v47 = (_QWORD *)((char *)v25 + v46);
      v48 = (_QWORD *)((char *)v26 + v46);
      v49 = v48[1];
      *v47 = *v48;
      v47[1] = v49;
      swift_bridgeObjectRetain(v49);
      v29 = v25;
      v30 = v27;
      v31 = 4;
      goto LABEL_15;
    case 5u:
      v50 = type metadata accessor for LocalizerRequest(0);
      v51 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v50 - 8) + 16);
      v51(v25, v26, v50);
      v52 = sub_5440(&qword_2621C0);
      v51((_QWORD *)((char *)v25 + *(int *)(v52 + 48)), (_QWORD *)((char *)v26 + *(int *)(v52 + 48)), v50);
      v29 = v25;
      v30 = v27;
      v31 = 5;
LABEL_15:
      swift_storeEnumTagMultiPayload(v29, v30, v31);
      break;
    default:
      memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
      break;
  }
  *(_BYTE *)(a1 + v6[12]) = *(_BYTE *)(a2 + v6[12]);
  v53 = v6[13];
  v54 = a1 + v53;
  v55 = a2 + v53;
  v56 = type metadata accessor for ButtonViewModel.ActionKind(0);
  if (swift_getEnumCaseMultiPayload(v55, v56) == 1)
  {
    v57 = type metadata accessor for URL(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v57 - 8) + 16))(v54, v55, v57);
    v58 = 1;
  }
  else
  {
    v58 = *(_QWORD *)(v55 + 24);
    if (v58)
    {
      v59 = *(_QWORD *)(v55 + 32);
      *(_QWORD *)(v54 + 24) = v58;
      *(_QWORD *)(v54 + 32) = v59;
      (**(void (***)(uint64_t, uint64_t))(v58 - 8))(v54, v55);
      v58 = 0;
    }
    else
    {
      v60 = *(_OWORD *)(v55 + 16);
      *(_OWORD *)v54 = *(_OWORD *)v55;
      *(_OWORD *)(v54 + 16) = v60;
      *(_QWORD *)(v54 + 32) = *(_QWORD *)(v55 + 32);
    }
  }
  swift_storeEnumTagMultiPayload(v54, v56, v58);
  v61 = v6[14];
  v62 = (void *)(a1 + v61);
  v63 = (const void *)(a2 + v61);
  v64 = type metadata accessor for LocalizerRequest(0);
  v65 = *(_QWORD *)(v64 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v65 + 48))(v63, 1, v64))
  {
    v66 = sub_5440(&qword_25E0C8);
    memcpy(v62, v63, *(_QWORD *)(*(_QWORD *)(v66 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v65 + 16))(v62, v63, v64);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v65 + 56))(v62, 0, 1, v64);
  }
  v67 = (int *)sub_5440(&qword_2618A0);
  *(_WORD *)(a1 + v67[9]) = *(_WORD *)(a2 + v67[9]);
  *(_BYTE *)(a1 + v67[10]) = *(_BYTE *)(a2 + v67[10]);
  v68 = v67[11];
  v69 = *(_OWORD *)(a2 + v68 + 24);
  *(_OWORD *)(a1 + v68 + 24) = v69;
  (**(void (***)(void))(v69 - 8))();
  v70 = v67[12];
  v71 = (uint64_t *)(a1 + v70);
  v72 = (uint64_t *)(a2 + v70);
  if (swift_getEnumCaseMultiPayload(v72, v10) == 1)
  {
    v73 = type metadata accessor for ColorScheme(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v73 - 8) + 16))(v71, v72, v73);
    v74 = 1;
  }
  else
  {
    v75 = *v72;
    *v71 = *v72;
    swift_retain(v75);
    v74 = 0;
  }
  swift_storeEnumTagMultiPayload(v71, v10, v74);
  v76 = (int *)type metadata accessor for BuyButtonExternals(0);
  v77 = v76[5];
  v78 = (uint64_t *)((char *)v71 + v77);
  v79 = (char *)v72 + v77;
  v81 = *(void **)v79;
  v80 = *((_QWORD *)v79 + 1);
  *v78 = v81;
  v78[1] = v80;
  v82 = v76[6];
  v83 = (uint64_t *)((char *)v71 + v82);
  v84 = (uint64_t *)((char *)v72 + v82);
  v85 = v81;
  v86 = sub_5440(&qword_25F758);
  v106 = a1;
  if (swift_getEnumCaseMultiPayload(v84, v86) == 1)
  {
    v87 = type metadata accessor for UUID(0);
    v88 = *(_QWORD *)(v87 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v88 + 48))(v84, 1, v87))
    {
      v89 = sub_5440(&qword_25FAC0);
      memcpy(v83, v84, *(_QWORD *)(*(_QWORD *)(v89 - 8) + 64));
      v90 = 1;
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v88 + 16))(v83, v84, v87);
      v90 = 1;
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v88 + 56))(v83, 0, 1, v87);
    }
  }
  else
  {
    v91 = *v84;
    *v83 = *v84;
    swift_retain(v91);
    v90 = 0;
  }
  swift_storeEnumTagMultiPayload(v83, v86, v90);
  v92 = v76[7];
  v93 = (char *)v71 + v92;
  v94 = (char *)v72 + v92;
  v95 = *(_QWORD *)v94;
  v96 = *((_QWORD *)v94 + 1);
  v97 = *((_QWORD *)v94 + 2);
  v98 = *((_QWORD *)v94 + 3);
  v99 = *((_QWORD *)v94 + 4);
  v100 = *((_QWORD *)v94 + 5);
  v101 = *((_QWORD *)v94 + 6);
  v102 = *((_QWORD *)v94 + 7);
  v103 = *((_WORD *)v94 + 32);
  sub_3480C(*(_QWORD *)v94, v96, v97, v98, v99, v100, v101, v102, v103, v94[66]);
  *(_QWORD *)v93 = v95;
  *((_QWORD *)v93 + 1) = v96;
  *((_QWORD *)v93 + 2) = v97;
  *((_QWORD *)v93 + 3) = v98;
  *((_QWORD *)v93 + 4) = v99;
  *((_QWORD *)v93 + 5) = v100;
  *((_QWORD *)v93 + 6) = v101;
  *((_QWORD *)v93 + 7) = v102;
  *((_WORD *)v93 + 32) = v103;
  v93[66] = v105;
  return v106;
}

uint64_t assignWithCopy for BuyButton(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, uint64_t);
  int *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  id v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  void (*v59)(_QWORD *, _QWORD *, uint64_t);
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  __int128 *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  void *v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t (*v77)(void *, uint64_t, uint64_t);
  int v78;
  int v79;
  uint64_t v80;
  int *v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int *v89;
  uint64_t v90;
  _QWORD *v91;
  char *v92;
  void *v93;
  void *v94;
  id v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  __int16 v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  __int16 v125;
  char v126;
  char v128;
  uint64_t v129;

  v4 = sub_5440(&qword_25FC38);
  v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24);
  v5(a1, a2, v4);
  v6 = (int *)type metadata accessor for ButtonViewModel(0);
  v5(a1 + v6[5], a2 + v6[5], v4);
  if (a1 != a2)
  {
    v7 = v6[6];
    v8 = (uint64_t *)(a1 + v7);
    v9 = (uint64_t *)(a2 + v7);
    sub_B414(a1 + v7, &qword_25F1E8);
    v10 = sub_5440(&qword_25F1E8);
    if (swift_getEnumCaseMultiPayload(v9, v10) == 1)
    {
      v11 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v8, v9, v11);
      v12 = v8;
      v13 = v10;
      v14 = 1;
    }
    else
    {
      v15 = *v9;
      *v8 = *v9;
      swift_retain(v15);
      v12 = v8;
      v13 = v10;
      v14 = 0;
    }
    swift_storeEnumTagMultiPayload(v12, v13, v14);
  }
  *(_BYTE *)(a1 + v6[7]) = *(_BYTE *)(a2 + v6[7]);
  *(_BYTE *)(a1 + v6[8]) = *(_BYTE *)(a2 + v6[8]);
  *(_BYTE *)(a1 + v6[9]) = *(_BYTE *)(a2 + v6[9]);
  v16 = v6[10];
  v17 = a1 + v16;
  v18 = a2 + v16;
  v19 = *(_QWORD *)(a1 + v16);
  v20 = *(_QWORD *)(a2 + v16);
  if (v19 >= 3)
  {
    if (v20 < 3)
    {
      sub_B414(a1 + v16, &qword_2624C0);
      v22 = *(_OWORD *)(v18 + 16);
      *(_OWORD *)v17 = *(_OWORD *)v18;
      *(_OWORD *)(v17 + 16) = v22;
      if (a1 == a2)
        goto LABEL_17;
      goto LABEL_14;
    }
    *(_QWORD *)v17 = v20;
    swift_retain(v20);
    swift_release(v19);
    v34 = *(_QWORD *)(v18 + 8);
    v35 = *(_QWORD *)(v17 + 8);
    *(_QWORD *)(v17 + 8) = v34;
    swift_retain(v34);
    swift_release(v35);
    v36 = *(_QWORD *)(v18 + 16);
    v37 = *(_QWORD *)(v17 + 16);
    *(_QWORD *)(v17 + 16) = v36;
    swift_retain(v36);
    swift_release(v37);
    v38 = *(_QWORD *)(v18 + 24);
    v39 = *(_QWORD *)(v17 + 24);
    *(_QWORD *)(v17 + 24) = v38;
    swift_retain(v38);
    swift_release(v39);
    if (a1 != a2)
      goto LABEL_14;
LABEL_17:
    *(_BYTE *)(a1 + v6[12]) = *(_BYTE *)(a2 + v6[12]);
    goto LABEL_31;
  }
  if (v20 >= 3)
  {
    *(_QWORD *)v17 = v20;
    v23 = *(_QWORD *)(v18 + 8);
    *(_QWORD *)(v17 + 8) = v23;
    v24 = *(_QWORD *)(v18 + 16);
    *(_QWORD *)(v17 + 16) = v24;
    v25 = *(_QWORD *)(v18 + 24);
    *(_QWORD *)(v17 + 24) = v25;
    swift_retain(v20);
    swift_retain(v23);
    swift_retain(v24);
    swift_retain(v25);
    if (a1 != a2)
      goto LABEL_14;
    goto LABEL_17;
  }
  v21 = *(_OWORD *)(v18 + 16);
  *(_OWORD *)v17 = *(_OWORD *)v18;
  *(_OWORD *)(v17 + 16) = v21;
  if (a1 == a2)
    goto LABEL_17;
LABEL_14:
  v26 = v6[11];
  v27 = (_QWORD *)(a1 + v26);
  v28 = (_QWORD *)(a2 + v26);
  sub_224DC(a1 + v26, type metadata accessor for ButtonViewModel.Content);
  v29 = type metadata accessor for ButtonViewModel.Content(0);
  switch(swift_getEnumCaseMultiPayload(v28, v29))
  {
    case 0u:
      v30 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v30 - 8) + 16))(v27, v28, v30);
      v31 = v27;
      v32 = v29;
      v33 = 0;
      goto LABEL_23;
    case 1u:
      *v27 = *v28;
      v40 = v28[1];
      v27[1] = v40;
      swift_bridgeObjectRetain(v40);
      v31 = v27;
      v32 = v29;
      v33 = 1;
      goto LABEL_23;
    case 2u:
      *v27 = *v28;
      v41 = v28[1];
      v27[1] = v41;
      v42 = (void *)v28[2];
      v27[2] = v42;
      swift_bridgeObjectRetain(v41);
      v43 = v42;
      v44 = *(int *)(sub_5440(&qword_2621A8) + 64);
      v45 = (char *)v27 + v44;
      v46 = (char *)v28 + v44;
      v47 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v47 - 8) + 16))(v45, v46, v47);
      v31 = v27;
      v32 = v29;
      v33 = 2;
      goto LABEL_23;
    case 3u:
      *v27 = *v28;
      v48 = v28[1];
      v27[1] = v48;
      swift_bridgeObjectRetain(v48);
      v49 = *(int *)(sub_5440(&qword_2621B0) + 48);
      v50 = (char *)v27 + v49;
      v51 = (char *)v28 + v49;
      v52 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v52 - 8) + 16))(v50, v51, v52);
      v31 = v27;
      v32 = v29;
      v33 = 3;
      goto LABEL_23;
    case 4u:
      v53 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v53 - 8) + 16))(v27, v28, v53);
      v54 = *(int *)(sub_5440(&qword_2621B8) + 48);
      v55 = (_QWORD *)((char *)v27 + v54);
      v56 = (_QWORD *)((char *)v28 + v54);
      *v55 = *v56;
      v57 = v56[1];
      v55[1] = v57;
      swift_bridgeObjectRetain(v57);
      v31 = v27;
      v32 = v29;
      v33 = 4;
      goto LABEL_23;
    case 5u:
      v58 = type metadata accessor for LocalizerRequest(0);
      v59 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v58 - 8) + 16);
      v59(v27, v28, v58);
      v60 = sub_5440(&qword_2621C0);
      v59((_QWORD *)((char *)v27 + *(int *)(v60 + 48)), (_QWORD *)((char *)v28 + *(int *)(v60 + 48)), v58);
      v31 = v27;
      v32 = v29;
      v33 = 5;
LABEL_23:
      swift_storeEnumTagMultiPayload(v31, v32, v33);
      break;
    default:
      memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
      break;
  }
  *(_BYTE *)(a1 + v6[12]) = *(_BYTE *)(a2 + v6[12]);
  v61 = v6[13];
  v62 = a1 + v61;
  v63 = (__int128 *)(a2 + v61);
  sub_224DC(a1 + v61, type metadata accessor for ButtonViewModel.ActionKind);
  v64 = type metadata accessor for ButtonViewModel.ActionKind(0);
  if (swift_getEnumCaseMultiPayload(v63, v64) == 1)
  {
    v65 = type metadata accessor for URL(0);
    (*(void (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)(v65 - 8) + 16))(v62, v63, v65);
    v66 = v62;
    v67 = v64;
    v68 = 1;
  }
  else
  {
    v69 = *((_QWORD *)v63 + 3);
    if (v69)
    {
      *(_QWORD *)(v62 + 24) = v69;
      *(_QWORD *)(v62 + 32) = *((_QWORD *)v63 + 4);
      (**(void (***)(uint64_t, __int128 *))(v69 - 8))(v62, v63);
    }
    else
    {
      v70 = *v63;
      v71 = v63[1];
      *(_QWORD *)(v62 + 32) = *((_QWORD *)v63 + 4);
      *(_OWORD *)v62 = v70;
      *(_OWORD *)(v62 + 16) = v71;
    }
    v66 = v62;
    v67 = v64;
    v68 = 0;
  }
  swift_storeEnumTagMultiPayload(v66, v67, v68);
LABEL_31:
  v72 = v6[14];
  v73 = (void *)(a1 + v72);
  v74 = (void *)(a2 + v72);
  v75 = type metadata accessor for LocalizerRequest(0);
  v76 = *(_QWORD *)(v75 - 8);
  v77 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v76 + 48);
  v78 = v77(v73, 1, v75);
  v79 = v77(v74, 1, v75);
  if (v78)
  {
    if (!v79)
    {
      (*(void (**)(void *, void *, uint64_t))(v76 + 16))(v73, v74, v75);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v76 + 56))(v73, 0, 1, v75);
      goto LABEL_37;
    }
    goto LABEL_36;
  }
  if (v79)
  {
    (*(void (**)(void *, uint64_t))(v76 + 8))(v73, v75);
LABEL_36:
    v80 = sub_5440(&qword_25E0C8);
    memcpy(v73, v74, *(_QWORD *)(*(_QWORD *)(v80 - 8) + 64));
    goto LABEL_37;
  }
  (*(void (**)(void *, void *, uint64_t))(v76 + 24))(v73, v74, v75);
LABEL_37:
  v81 = (int *)sub_5440(&qword_2618A0);
  *(_WORD *)(a1 + v81[9]) = *(_WORD *)(a2 + v81[9]);
  *(_BYTE *)(a1 + v81[10]) = *(_BYTE *)(a2 + v81[10]);
  sub_142F8((_QWORD *)(a1 + v81[11]), (_QWORD *)(a2 + v81[11]));
  v82 = v81[12];
  v83 = (uint64_t *)(a1 + v82);
  v84 = (uint64_t *)(a2 + v82);
  if (a1 != a2)
  {
    sub_B414(a1 + v82, &qword_25F1E8);
    v85 = sub_5440(&qword_25F1E8);
    if (swift_getEnumCaseMultiPayload(v84, v85) == 1)
    {
      v86 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v86 - 8) + 16))(v83, v84, v86);
      v87 = 1;
    }
    else
    {
      v88 = *v84;
      *v83 = *v84;
      swift_retain(v88);
      v87 = 0;
    }
    swift_storeEnumTagMultiPayload(v83, v85, v87);
  }
  v89 = (int *)type metadata accessor for BuyButtonExternals(0);
  v90 = v89[5];
  v91 = (uint64_t *)((char *)v83 + v90);
  v92 = (char *)v84 + v90;
  v93 = *(void **)((char *)v83 + v90);
  v94 = *(void **)((char *)v84 + v90);
  *v91 = v94;
  v95 = v94;

  v91[1] = *((_QWORD *)v92 + 1);
  v129 = a1;
  if (a1 != a2)
  {
    v96 = v89[6];
    v97 = (uint64_t *)((char *)v83 + v96);
    v98 = (uint64_t *)((char *)v84 + v96);
    sub_B414((uint64_t)v83 + v96, &qword_25F758);
    v99 = sub_5440(&qword_25F758);
    if (swift_getEnumCaseMultiPayload(v98, v99) == 1)
    {
      v100 = type metadata accessor for UUID(0);
      v101 = *(_QWORD *)(v100 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v101 + 48))(v98, 1, v100))
      {
        v102 = sub_5440(&qword_25FAC0);
        memcpy(v97, v98, *(_QWORD *)(*(_QWORD *)(v102 - 8) + 64));
        v103 = 1;
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v101 + 16))(v97, v98, v100);
        v103 = 1;
        (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v101 + 56))(v97, 0, 1, v100);
      }
    }
    else
    {
      v104 = *v98;
      *v97 = *v98;
      swift_retain(v104);
      v103 = 0;
    }
    swift_storeEnumTagMultiPayload(v97, v99, v103);
  }
  v105 = v89[7];
  v106 = (char *)v83 + v105;
  v107 = (char *)v84 + v105;
  v108 = *(_QWORD *)v107;
  v109 = *((_QWORD *)v107 + 1);
  v110 = *((_QWORD *)v107 + 2);
  v111 = *((_QWORD *)v107 + 3);
  v112 = *((_QWORD *)v107 + 4);
  v113 = *((_QWORD *)v107 + 5);
  v114 = *((_QWORD *)v107 + 6);
  v115 = *((_QWORD *)v107 + 7);
  v116 = *((_WORD *)v107 + 32);
  sub_3480C(*(_QWORD *)v107, v109, v110, v111, v112, v113, v114, v115, v116, v107[66]);
  v117 = *(_QWORD *)v106;
  v118 = *((_QWORD *)v106 + 1);
  v119 = *((_QWORD *)v106 + 2);
  v120 = *((_QWORD *)v106 + 3);
  v121 = *((_QWORD *)v106 + 4);
  v122 = *((_QWORD *)v106 + 5);
  v123 = *((_QWORD *)v106 + 6);
  v124 = *((_QWORD *)v106 + 7);
  v125 = *((_WORD *)v106 + 32);
  v126 = v106[66];
  *(_QWORD *)v106 = v108;
  *((_QWORD *)v106 + 1) = v109;
  *((_QWORD *)v106 + 2) = v110;
  *((_QWORD *)v106 + 3) = v111;
  *((_QWORD *)v106 + 4) = v112;
  *((_QWORD *)v106 + 5) = v113;
  *((_QWORD *)v106 + 6) = v114;
  *((_QWORD *)v106 + 7) = v115;
  *((_WORD *)v106 + 32) = v116;
  v106[66] = v128;
  sub_BDF8(v117, v118, v119, v120, v121, v122, v123, v124, v125, v126);
  return v129;
}

uint64_t initializeWithTake for BuyButton(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, uint64_t);
  int *v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  _OWORD *v14;
  __int128 v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(_QWORD *, _QWORD *, uint64_t);
  uint64_t v36;
  uint64_t v37;
  void *v38;
  const void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  const void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  int *v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  __int128 v68;
  __int128 v69;

  v4 = sub_5440(&qword_25FC38);
  v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32);
  v5(a1, a2, v4);
  v6 = (int *)type metadata accessor for ButtonViewModel(0);
  v5(a1 + v6[5], a2 + v6[5], v4);
  v7 = v6[6];
  v8 = (void *)(a1 + v7);
  v9 = (const void *)(a2 + v7);
  v10 = sub_5440(&qword_25F1E8);
  if (swift_getEnumCaseMultiPayload(v9, v10) == 1)
  {
    v11 = type metadata accessor for ColorScheme(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v8, v9, v11);
    swift_storeEnumTagMultiPayload(v8, v10, 1);
  }
  else
  {
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  *(_BYTE *)(a1 + v6[7]) = *(_BYTE *)(a2 + v6[7]);
  *(_BYTE *)(a1 + v6[8]) = *(_BYTE *)(a2 + v6[8]);
  *(_BYTE *)(a1 + v6[9]) = *(_BYTE *)(a2 + v6[9]);
  v12 = v6[10];
  v13 = (_OWORD *)(a1 + v12);
  v14 = (_OWORD *)(a2 + v12);
  v15 = v14[1];
  *v13 = *v14;
  v13[1] = v15;
  v16 = v6[11];
  v17 = (_QWORD *)(a1 + v16);
  v18 = (_QWORD *)(a2 + v16);
  v19 = type metadata accessor for ButtonViewModel.Content(0);
  switch(swift_getEnumCaseMultiPayload(v18, v19))
  {
    case 0u:
      v20 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v17, v18, v20);
      v21 = v17;
      v22 = v19;
      v23 = 0;
      goto LABEL_11;
    case 2u:
      *(_OWORD *)v17 = *(_OWORD *)v18;
      v17[2] = v18[2];
      v24 = *(int *)(sub_5440(&qword_2621A8) + 64);
      v25 = (char *)v17 + v24;
      v26 = (char *)v18 + v24;
      v27 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 32))(v25, v26, v27);
      v21 = v17;
      v22 = v19;
      v23 = 2;
      goto LABEL_11;
    case 3u:
      *(_OWORD *)v17 = *(_OWORD *)v18;
      v28 = *(int *)(sub_5440(&qword_2621B0) + 48);
      v29 = (char *)v17 + v28;
      v30 = (char *)v18 + v28;
      v31 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v31 - 8) + 32))(v29, v30, v31);
      v21 = v17;
      v22 = v19;
      v23 = 3;
      goto LABEL_11;
    case 4u:
      v32 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v32 - 8) + 32))(v17, v18, v32);
      v33 = sub_5440(&qword_2621B8);
      *(_OWORD *)((char *)v17 + *(int *)(v33 + 48)) = *(_OWORD *)((char *)v18 + *(int *)(v33 + 48));
      v21 = v17;
      v22 = v19;
      v23 = 4;
      goto LABEL_11;
    case 5u:
      v34 = type metadata accessor for LocalizerRequest(0);
      v35 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v34 - 8) + 32);
      v35(v17, v18, v34);
      v36 = sub_5440(&qword_2621C0);
      v35((_QWORD *)((char *)v17 + *(int *)(v36 + 48)), (_QWORD *)((char *)v18 + *(int *)(v36 + 48)), v34);
      v21 = v17;
      v22 = v19;
      v23 = 5;
LABEL_11:
      swift_storeEnumTagMultiPayload(v21, v22, v23);
      break;
    default:
      memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
      break;
  }
  *(_BYTE *)(a1 + v6[12]) = *(_BYTE *)(a2 + v6[12]);
  v37 = v6[13];
  v38 = (void *)(a1 + v37);
  v39 = (const void *)(a2 + v37);
  v40 = type metadata accessor for ButtonViewModel.ActionKind(0);
  if (swift_getEnumCaseMultiPayload(v39, v40) == 1)
  {
    v41 = type metadata accessor for URL(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v41 - 8) + 32))(v38, v39, v41);
    swift_storeEnumTagMultiPayload(v38, v40, 1);
  }
  else
  {
    memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
  }
  v42 = v6[14];
  v43 = (void *)(a1 + v42);
  v44 = (const void *)(a2 + v42);
  v45 = type metadata accessor for LocalizerRequest(0);
  v46 = *(_QWORD *)(v45 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v46 + 48))(v44, 1, v45))
  {
    v47 = sub_5440(&qword_25E0C8);
    memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v46 + 32))(v43, v44, v45);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v46 + 56))(v43, 0, 1, v45);
  }
  v48 = (int *)sub_5440(&qword_2618A0);
  *(_WORD *)(a1 + v48[9]) = *(_WORD *)(a2 + v48[9]);
  *(_BYTE *)(a1 + v48[10]) = *(_BYTE *)(a2 + v48[10]);
  v49 = v48[11];
  v50 = a1 + v49;
  v51 = a2 + v49;
  v52 = *(_OWORD *)(v51 + 16);
  *(_OWORD *)v50 = *(_OWORD *)v51;
  *(_OWORD *)(v50 + 16) = v52;
  *(_QWORD *)(v50 + 32) = *(_QWORD *)(v51 + 32);
  v53 = v48[12];
  v54 = (char *)(a1 + v53);
  v55 = (char *)(a2 + v53);
  if (swift_getEnumCaseMultiPayload(v55, v10) == 1)
  {
    v56 = type metadata accessor for ColorScheme(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v56 - 8) + 32))(v54, v55, v56);
    swift_storeEnumTagMultiPayload(v54, v10, 1);
  }
  else
  {
    memcpy(v54, v55, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  v57 = (int *)type metadata accessor for BuyButtonExternals(0);
  *(_OWORD *)&v54[v57[5]] = *(_OWORD *)&v55[v57[5]];
  v58 = v57[6];
  v59 = &v54[v58];
  v60 = &v55[v58];
  v61 = sub_5440(&qword_25F758);
  if (swift_getEnumCaseMultiPayload(v60, v61) == 1)
  {
    v62 = type metadata accessor for UUID(0);
    v63 = *(_QWORD *)(v62 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v63 + 48))(v60, 1, v62))
    {
      v64 = sub_5440(&qword_25FAC0);
      memcpy(v59, v60, *(_QWORD *)(*(_QWORD *)(v64 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v63 + 32))(v59, v60, v62);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v63 + 56))(v59, 0, 1, v62);
    }
    swift_storeEnumTagMultiPayload(v59, v61, 1);
  }
  else
  {
    memcpy(v59, v60, *(_QWORD *)(*(_QWORD *)(v61 - 8) + 64));
  }
  v65 = v57[7];
  v66 = &v54[v65];
  v67 = &v55[v65];
  v68 = *((_OWORD *)v67 + 3);
  *((_OWORD *)v66 + 2) = *((_OWORD *)v67 + 2);
  *((_OWORD *)v66 + 3) = v68;
  *(_DWORD *)(v66 + 63) = *(_DWORD *)(v67 + 63);
  v69 = *((_OWORD *)v67 + 1);
  *(_OWORD *)v66 = *(_OWORD *)v67;
  *((_OWORD *)v66 + 1) = v69;
  return a1;
}

uint64_t assignWithTake for BuyButton(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, uint64_t);
  int *v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  __int128 v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(_QWORD *, _QWORD *, uint64_t);
  uint64_t v40;
  uint64_t v41;
  void *v42;
  const void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t (*v51)(void *, uint64_t, uint64_t);
  int v52;
  int v53;
  uint64_t v54;
  int *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  int *v65;
  uint64_t v66;
  char *v67;
  char *v68;
  void *v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  __int16 v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  __int16 v90;
  char v91;
  __int128 v92;
  __int128 v93;

  v4 = sub_5440(&qword_25FC38);
  v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40);
  v5(a1, a2, v4);
  v6 = (int *)type metadata accessor for ButtonViewModel(0);
  v5(a1 + v6[5], a2 + v6[5], v4);
  if (a1 != a2)
  {
    v7 = v6[6];
    v8 = (void *)(a1 + v7);
    v9 = (const void *)(a2 + v7);
    sub_B414(a1 + v7, &qword_25F1E8);
    v10 = sub_5440(&qword_25F1E8);
    if (swift_getEnumCaseMultiPayload(v9, v10) == 1)
    {
      v11 = type metadata accessor for ColorScheme(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v8, v9, v11);
      swift_storeEnumTagMultiPayload(v8, v10, 1);
    }
    else
    {
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    }
  }
  *(_BYTE *)(a1 + v6[7]) = *(_BYTE *)(a2 + v6[7]);
  *(_BYTE *)(a1 + v6[8]) = *(_BYTE *)(a2 + v6[8]);
  *(_BYTE *)(a1 + v6[9]) = *(_BYTE *)(a2 + v6[9]);
  v12 = v6[10];
  v13 = (_QWORD *)(a1 + v12);
  v14 = (_QWORD *)(a2 + v12);
  v15 = *(_QWORD *)(a1 + v12);
  if (v15 >= 3)
  {
    if (*v14 >= 3uLL)
    {
      *v13 = *v14;
      swift_release(v15);
      v25 = v13[1];
      v13[1] = v14[1];
      swift_release(v25);
      v26 = v13[2];
      v13[2] = v14[2];
      swift_release(v26);
      v27 = v13[3];
      v13[3] = v14[3];
      swift_release(v27);
      if (a1 != a2)
        goto LABEL_9;
LABEL_12:
      *(_BYTE *)(a1 + v6[12]) = *(_BYTE *)(a2 + v6[12]);
      goto LABEL_22;
    }
    sub_B414((uint64_t)v13, &qword_2624C0);
  }
  v16 = *((_OWORD *)v14 + 1);
  *(_OWORD *)v13 = *(_OWORD *)v14;
  *((_OWORD *)v13 + 1) = v16;
  if (a1 == a2)
    goto LABEL_12;
LABEL_9:
  v17 = v6[11];
  v18 = (_QWORD *)(a1 + v17);
  v19 = (_QWORD *)(a2 + v17);
  sub_224DC(a1 + v17, type metadata accessor for ButtonViewModel.Content);
  v20 = type metadata accessor for ButtonViewModel.Content(0);
  switch(swift_getEnumCaseMultiPayload(v19, v20))
  {
    case 0u:
      v21 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(v18, v19, v21);
      v22 = v18;
      v23 = v20;
      v24 = 0;
      goto LABEL_18;
    case 2u:
      *(_OWORD *)v18 = *(_OWORD *)v19;
      v18[2] = v19[2];
      v28 = *(int *)(sub_5440(&qword_2621A8) + 64);
      v29 = (char *)v18 + v28;
      v30 = (char *)v19 + v28;
      v31 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v31 - 8) + 32))(v29, v30, v31);
      v22 = v18;
      v23 = v20;
      v24 = 2;
      goto LABEL_18;
    case 3u:
      *(_OWORD *)v18 = *(_OWORD *)v19;
      v32 = *(int *)(sub_5440(&qword_2621B0) + 48);
      v33 = (char *)v18 + v32;
      v34 = (char *)v19 + v32;
      v35 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v35 - 8) + 32))(v33, v34, v35);
      v22 = v18;
      v23 = v20;
      v24 = 3;
      goto LABEL_18;
    case 4u:
      v36 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v36 - 8) + 32))(v18, v19, v36);
      v37 = sub_5440(&qword_2621B8);
      *(_OWORD *)((char *)v18 + *(int *)(v37 + 48)) = *(_OWORD *)((char *)v19 + *(int *)(v37 + 48));
      v22 = v18;
      v23 = v20;
      v24 = 4;
      goto LABEL_18;
    case 5u:
      v38 = type metadata accessor for LocalizerRequest(0);
      v39 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v38 - 8) + 32);
      v39(v18, v19, v38);
      v40 = sub_5440(&qword_2621C0);
      v39((_QWORD *)((char *)v18 + *(int *)(v40 + 48)), (_QWORD *)((char *)v19 + *(int *)(v40 + 48)), v38);
      v22 = v18;
      v23 = v20;
      v24 = 5;
LABEL_18:
      swift_storeEnumTagMultiPayload(v22, v23, v24);
      break;
    default:
      memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
      break;
  }
  *(_BYTE *)(a1 + v6[12]) = *(_BYTE *)(a2 + v6[12]);
  v41 = v6[13];
  v42 = (void *)(a1 + v41);
  v43 = (const void *)(a2 + v41);
  sub_224DC(a1 + v41, type metadata accessor for ButtonViewModel.ActionKind);
  v44 = type metadata accessor for ButtonViewModel.ActionKind(0);
  if (swift_getEnumCaseMultiPayload(v43, v44) == 1)
  {
    v45 = type metadata accessor for URL(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v45 - 8) + 32))(v42, v43, v45);
    swift_storeEnumTagMultiPayload(v42, v44, 1);
  }
  else
  {
    memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
  }
LABEL_22:
  v46 = v6[14];
  v47 = (void *)(a1 + v46);
  v48 = (void *)(a2 + v46);
  v49 = type metadata accessor for LocalizerRequest(0);
  v50 = *(_QWORD *)(v49 - 8);
  v51 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v50 + 48);
  v52 = v51(v47, 1, v49);
  v53 = v51(v48, 1, v49);
  if (v52)
  {
    if (!v53)
    {
      (*(void (**)(void *, void *, uint64_t))(v50 + 32))(v47, v48, v49);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v50 + 56))(v47, 0, 1, v49);
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  if (v53)
  {
    (*(void (**)(void *, uint64_t))(v50 + 8))(v47, v49);
LABEL_27:
    v54 = sub_5440(&qword_25E0C8);
    memcpy(v47, v48, *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64));
    goto LABEL_28;
  }
  (*(void (**)(void *, void *, uint64_t))(v50 + 40))(v47, v48, v49);
LABEL_28:
  v55 = (int *)sub_5440(&qword_2618A0);
  *(_WORD *)(a1 + v55[9]) = *(_WORD *)(a2 + v55[9]);
  *(_BYTE *)(a1 + v55[10]) = *(_BYTE *)(a2 + v55[10]);
  v56 = v55[11];
  v57 = a1 + v56;
  v58 = a2 + v56;
  _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)(a1 + v56));
  *(_QWORD *)(v57 + 32) = *(_QWORD *)(v58 + 32);
  v59 = *(_OWORD *)(v58 + 16);
  *(_OWORD *)v57 = *(_OWORD *)v58;
  *(_OWORD *)(v57 + 16) = v59;
  v60 = v55[12];
  v61 = (char *)(a1 + v60);
  v62 = (char *)(a2 + v60);
  if (a1 != a2)
  {
    sub_B414(a1 + v60, &qword_25F1E8);
    v63 = sub_5440(&qword_25F1E8);
    if (swift_getEnumCaseMultiPayload(v62, v63) == 1)
    {
      v64 = type metadata accessor for ColorScheme(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v64 - 8) + 32))(v61, v62, v64);
      swift_storeEnumTagMultiPayload(v61, v63, 1);
    }
    else
    {
      memcpy(v61, v62, *(_QWORD *)(*(_QWORD *)(v63 - 8) + 64));
    }
  }
  v65 = (int *)type metadata accessor for BuyButtonExternals(0);
  v66 = v65[5];
  v67 = &v61[v66];
  v68 = &v62[v66];
  v69 = *(void **)&v61[v66];
  *(_QWORD *)v67 = *(_QWORD *)v68;

  *((_QWORD *)v67 + 1) = *((_QWORD *)v68 + 1);
  if (a1 != a2)
  {
    v70 = v65[6];
    v71 = &v61[v70];
    v72 = &v62[v70];
    sub_B414((uint64_t)&v61[v70], &qword_25F758);
    v73 = sub_5440(&qword_25F758);
    if (swift_getEnumCaseMultiPayload(v72, v73) == 1)
    {
      v74 = type metadata accessor for UUID(0);
      v75 = *(_QWORD *)(v74 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v75 + 48))(v72, 1, v74))
      {
        v76 = sub_5440(&qword_25FAC0);
        memcpy(v71, v72, *(_QWORD *)(*(_QWORD *)(v76 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v75 + 32))(v71, v72, v74);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v75 + 56))(v71, 0, 1, v74);
      }
      swift_storeEnumTagMultiPayload(v71, v73, 1);
    }
    else
    {
      memcpy(v71, v72, *(_QWORD *)(*(_QWORD *)(v73 - 8) + 64));
    }
  }
  v77 = v65[7];
  v78 = &v61[v77];
  v79 = &v62[v77];
  v80 = *((_WORD *)v79 + 32);
  v81 = v79[66];
  v82 = *(_QWORD *)v78;
  v83 = *((_QWORD *)v78 + 1);
  v84 = *((_QWORD *)v78 + 2);
  v85 = *((_QWORD *)v78 + 3);
  v86 = *((_QWORD *)v78 + 4);
  v87 = *((_QWORD *)v78 + 5);
  v88 = *((_QWORD *)v78 + 6);
  v89 = *((_QWORD *)v78 + 7);
  v90 = *((_WORD *)v78 + 32);
  v91 = v78[66];
  v92 = *((_OWORD *)v79 + 1);
  *(_OWORD *)v78 = *(_OWORD *)v79;
  *((_OWORD *)v78 + 1) = v92;
  v93 = *((_OWORD *)v79 + 3);
  *((_OWORD *)v78 + 2) = *((_OWORD *)v79 + 2);
  *((_OWORD *)v78 + 3) = v93;
  *((_WORD *)v78 + 32) = v80;
  v78[66] = v81;
  sub_BDF8(v82, v83, v84, v85, v86, v87, v88, v89, v90, v91);
  return a1;
}

uint64_t getEnumTagSinglePayload for BuyButton(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_173BCC);
}

uint64_t sub_173BCC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_5440(&qword_2618A0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for BuyButton(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_173C18);
}

uint64_t sub_173C18(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_5440(&qword_2618A0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for BuyButton(uint64_t a1)
{
  return sub_1FE90(a1, (uint64_t *)&unk_269228, (uint64_t)&nominal type descriptor for BuyButton);
}

void sub_173C70(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  sub_173CD8(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(v2 - 8) + 64;
    swift_initStructMetadata(a1, 256, 1, &v4, a1 + 16);
  }
}

void sub_173CD8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!qword_269238)
  {
    v2 = type metadata accessor for BuyButtonExternals(255);
    v3 = sub_6FD0((unint64_t *)&unk_269240, type metadata accessor for BuyButtonExternals, (uint64_t)&protocol conformance descriptor for BuyButtonExternals);
    v5 = type metadata accessor for BuyButtonViewModelBase(a1, v2, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_269238);
  }
}

unint64_t sub_173D54()
{
  unint64_t result;
  uint64_t v1;

  result = qword_269270;
  if (!qword_269270)
  {
    v1 = sub_7EF8(&qword_2691C8);
    sub_173DD8();
    sub_7FD8(&qword_269288, &qword_269290, (uint64_t)&protocol conformance descriptor for _PreferenceWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_269270);
  }
  return result;
}

unint64_t sub_173DD8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_269278;
  if (!qword_269278)
  {
    v1 = sub_7EF8(&qword_2691C0);
    sub_6FD0(&qword_2618B0, type metadata accessor for ButtonView, (uint64_t)&protocol conformance descriptor for ButtonView);
    sub_6FD0(&qword_269280, type metadata accessor for BuyButtonCaptionViewModifier, (uint64_t)&unk_1F2B38);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_269278);
  }
  return result;
}

ValueMetadata *type metadata accessor for BuyButtonAccessibilityHintKey()
{
  return &type metadata for BuyButtonAccessibilityHintKey;
}

char *sub_173E84(char *a1, uint64_t *a2, int *a3)
{
  char *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _WORD *v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *(_QWORD *)a1 = *a2;
    v4 = (char *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = type metadata accessor for LocalizerRequest(0);
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      v9 = sub_5440(&qword_25E0C8);
      memcpy(v4, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, uint64_t *, uint64_t))(v8 + 16))(v4, a2, v7);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v4, 0, 1, v7);
    }
    v11 = a3[6];
    v4[a3[5]] = *((_BYTE *)a2 + a3[5]);
    v12 = &v4[v11];
    v13 = (_WORD *)((char *)a2 + v11);
    v14 = sub_5440(&qword_25F548);
    if (swift_getEnumCaseMultiPayload(v13, v14) == 1)
    {
      *(_WORD *)v12 = *v13;
      v15 = (int *)type metadata accessor for SizeConstants.Environment(0);
      v16 = v15[6];
      v17 = &v12[v16];
      v18 = (char *)v13 + v16;
      v19 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v17, v18, v19);
      *(_QWORD *)&v12[v15[7]] = *(_QWORD *)((char *)v13 + v15[7]);
      v20 = v15[8];
      v21 = &v12[v20];
      v22 = (char *)v13 + v20;
      v21[2] = v22[2];
      *(_WORD *)v21 = *(_WORD *)v22;
      v23 = 1;
    }
    else
    {
      v24 = *(_QWORD *)v13;
      *(_QWORD *)v12 = *(_QWORD *)v13;
      swift_retain(v24);
      v23 = 0;
    }
    swift_storeEnumTagMultiPayload(v12, v14, v23);
    v25 = a3[7];
    v26 = a3[8];
    v27 = &v4[v25];
    v28 = (char *)a2 + v25;
    *(_OWORD *)v27 = *(_OWORD *)v28;
    v29 = *((_QWORD *)v28 + 2);
    *((_QWORD *)v27 + 2) = v29;
    v30 = &v4[v26];
    v31 = (char *)a2 + v26;
    *(_OWORD *)v30 = *(_OWORD *)v31;
    v10 = *((_QWORD *)v31 + 2);
    *((_QWORD *)v30 + 2) = v10;
    swift_retain(v29);
  }
  swift_retain(v10);
  return v4;
}

double sub_174070(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  double result;

  v4 = type metadata accessor for LocalizerRequest(0);
  v5 = *(_QWORD *)(v4 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v4))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  v6 = (_QWORD *)(a1 + a2[6]);
  v7 = sub_5440(&qword_25F548);
  if (swift_getEnumCaseMultiPayload(v6, v7) == 1)
  {
    v8 = (char *)v6 + *(int *)(type metadata accessor for SizeConstants.Environment(0) + 24);
    v9 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  }
  else
  {
    swift_release(*v6);
  }
  swift_release(*(_QWORD *)(a1 + a2[7] + 16));
  *(_QWORD *)&result = swift_release(*(_QWORD *)(a1 + a2[8] + 16)).n128_u64[0];
  return result;
}

char *sub_17414C(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;

  v6 = type metadata accessor for LocalizerRequest(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = sub_5440(&qword_25E0C8);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v9 = a3[6];
  a1[a3[5]] = a2[a3[5]];
  v10 = &a1[v9];
  v11 = &a2[v9];
  v12 = sub_5440(&qword_25F548);
  if (swift_getEnumCaseMultiPayload(v11, v12) == 1)
  {
    *(_WORD *)v10 = *(_WORD *)v11;
    v13 = (int *)type metadata accessor for SizeConstants.Environment(0);
    v14 = v13[6];
    v15 = &v10[v14];
    v16 = &v11[v14];
    v17 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v15, v16, v17);
    *(_QWORD *)&v10[v13[7]] = *(_QWORD *)&v11[v13[7]];
    v18 = v13[8];
    v19 = &v10[v18];
    v20 = &v11[v18];
    v19[2] = v20[2];
    *(_WORD *)v19 = *(_WORD *)v20;
    v21 = 1;
  }
  else
  {
    v22 = *(_QWORD *)v11;
    *(_QWORD *)v10 = *(_QWORD *)v11;
    swift_retain(v22);
    v21 = 0;
  }
  swift_storeEnumTagMultiPayload(v10, v12, v21);
  v23 = a3[7];
  v24 = a3[8];
  v25 = &a1[v23];
  v26 = &a2[v23];
  *(_OWORD *)v25 = *(_OWORD *)v26;
  v27 = *((_QWORD *)v26 + 2);
  *((_QWORD *)v25 + 2) = v27;
  v28 = &a1[v24];
  v29 = &a2[v24];
  *(_OWORD *)v28 = *(_OWORD *)v29;
  v30 = *((_QWORD *)v29 + 2);
  *((_QWORD *)v28 + 2) = v30;
  swift_retain(v27);
  swift_retain(v30);
  return a1;
}

char *sub_174310(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;

  v6 = type metadata accessor for LocalizerRequest(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    v11 = sub_5440(&qword_25E0C8);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
LABEL_7:
  a1[a3[5]] = a2[a3[5]];
  if (a1 != a2)
  {
    v12 = a3[6];
    v13 = &a1[v12];
    v14 = &a2[v12];
    sub_B414((uint64_t)&a1[v12], &qword_25F548);
    v15 = sub_5440(&qword_25F548);
    if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
    {
      *v13 = *v14;
      v13[1] = v14[1];
      v16 = (int *)type metadata accessor for SizeConstants.Environment(0);
      v17 = v16[6];
      v18 = &v13[v17];
      v19 = &v14[v17];
      v20 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v18, v19, v20);
      *(_QWORD *)&v13[v16[7]] = *(_QWORD *)&v14[v16[7]];
      v21 = v16[8];
      v22 = &v13[v21];
      v23 = &v14[v21];
      v24 = v23[2];
      *(_WORD *)v22 = *(_WORD *)v23;
      v22[2] = v24;
      v25 = 1;
    }
    else
    {
      v26 = *(_QWORD *)v14;
      *(_QWORD *)v13 = *(_QWORD *)v14;
      swift_retain(v26);
      v25 = 0;
    }
    swift_storeEnumTagMultiPayload(v13, v15, v25);
  }
  v27 = a3[7];
  v28 = &a1[v27];
  v29 = &a2[v27];
  *(_QWORD *)v28 = *(_QWORD *)v29;
  *((_QWORD *)v28 + 1) = *((_QWORD *)v29 + 1);
  v30 = *((_QWORD *)v28 + 2);
  v31 = *((_QWORD *)v29 + 2);
  *((_QWORD *)v28 + 2) = v31;
  swift_retain(v31);
  swift_release(v30);
  v32 = a3[8];
  v33 = &a1[v32];
  v34 = &a2[v32];
  *(_QWORD *)v33 = *(_QWORD *)v34;
  *((_QWORD *)v33 + 1) = *((_QWORD *)v34 + 1);
  v35 = *((_QWORD *)v33 + 2);
  v36 = *((_QWORD *)v34 + 2);
  *((_QWORD *)v33 + 2) = v36;
  swift_retain(v36);
  swift_release(v35);
  return a1;
}

char *sub_174564(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;

  v6 = type metadata accessor for LocalizerRequest(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = sub_5440(&qword_25E0C8);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v9 = a3[6];
  a1[a3[5]] = a2[a3[5]];
  v10 = &a1[v9];
  v11 = &a2[v9];
  v12 = sub_5440(&qword_25F548);
  if (swift_getEnumCaseMultiPayload(v11, v12) == 1)
  {
    *(_WORD *)v10 = *(_WORD *)v11;
    v13 = (int *)type metadata accessor for SizeConstants.Environment(0);
    v14 = v13[6];
    v15 = &v10[v14];
    v16 = &v11[v14];
    v17 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v15, v16, v17);
    *(_QWORD *)&v10[v13[7]] = *(_QWORD *)&v11[v13[7]];
    v18 = v13[8];
    v19 = &v10[v18];
    v20 = &v11[v18];
    v19[2] = v20[2];
    *(_WORD *)v19 = *(_WORD *)v20;
    swift_storeEnumTagMultiPayload(v10, v12, 1);
  }
  else
  {
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  v21 = a3[7];
  v22 = a3[8];
  v23 = &a1[v21];
  v24 = &a2[v21];
  *(_OWORD *)v23 = *(_OWORD *)v24;
  *((_QWORD *)v23 + 2) = *((_QWORD *)v24 + 2);
  v25 = &a1[v22];
  v26 = &a2[v22];
  *(_OWORD *)v25 = *(_OWORD *)v26;
  *((_QWORD *)v25 + 2) = *((_QWORD *)v26 + 2);
  return a1;
}

char *sub_174720(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;

  v6 = type metadata accessor for LocalizerRequest(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    v11 = sub_5440(&qword_25E0C8);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
LABEL_7:
  a1[a3[5]] = a2[a3[5]];
  if (a1 != a2)
  {
    v12 = a3[6];
    v13 = &a1[v12];
    v14 = &a2[v12];
    sub_B414((uint64_t)&a1[v12], &qword_25F548);
    v15 = sub_5440(&qword_25F548);
    if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
    {
      *(_WORD *)v13 = *(_WORD *)v14;
      v16 = (int *)type metadata accessor for SizeConstants.Environment(0);
      v17 = v16[6];
      v18 = &v13[v17];
      v19 = &v14[v17];
      v20 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v18, v19, v20);
      *(_QWORD *)&v13[v16[7]] = *(_QWORD *)&v14[v16[7]];
      v21 = v16[8];
      v22 = &v13[v21];
      v23 = &v14[v21];
      v22[2] = v23[2];
      *(_WORD *)v22 = *(_WORD *)v23;
      swift_storeEnumTagMultiPayload(v13, v15, 1);
    }
    else
    {
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
  }
  v24 = a3[7];
  v25 = &a1[v24];
  v26 = &a2[v24];
  *(_OWORD *)v25 = *(_OWORD *)v26;
  v27 = *((_QWORD *)v25 + 2);
  *((_QWORD *)v25 + 2) = *((_QWORD *)v26 + 2);
  swift_release(v27);
  v28 = a3[8];
  v29 = &a1[v28];
  v30 = &a2[v28];
  *(_OWORD *)v29 = *(_OWORD *)v30;
  v31 = *((_QWORD *)v29 + 2);
  *((_QWORD *)v29 + 2) = *((_QWORD *)v30 + 2);
  swift_release(v31);
  return a1;
}

uint64_t sub_174950(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_17495C);
}

uint64_t sub_17495C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v14;
  int v15;

  v6 = sub_5440(&qword_25E0C8);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = sub_5440(&qword_25F558);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v10 = a1 + *(int *)(a3 + 24);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = *(_QWORD *)(a1 + *(int *)(a3 + 28) + 16);
  if (v14 >= 0xFFFFFFFF)
    LODWORD(v14) = -1;
  v15 = v14 - 1;
  if (v15 < 0)
    v15 = -1;
  return (v15 + 1);
}

uint64_t sub_174A1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_174A28);
}

uint64_t sub_174A28(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v8 = sub_5440(&qword_25E0C8);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  result = sub_5440(&qword_25F558);
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v12 = a1 + *(int *)(a4 + 24);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  *(_QWORD *)(a1 + *(int *)(a4 + 28) + 16) = a2;
  return result;
}

void sub_174AD8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[5];

  sub_19B38(319, (unint64_t *)&qword_261BA0, (uint64_t (*)(uint64_t))&type metadata accessor for LocalizerRequest, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    v6[1] = &unk_1F2AC0;
    sub_19B38(319, (unint64_t *)&qword_25F5C8, type metadata accessor for SizeConstants, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
    if (v5 <= 0x3F)
    {
      v6[2] = *(_QWORD *)(v4 - 8) + 64;
      v6[3] = &unk_1F2AD8;
      v6[4] = &unk_1F2AD8;
      swift_initStructMetadata(a1, 256, 5, v6, a1 + 16);
    }
  }
}

uint64_t sub_174BA0(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_22FE58, 1);
}

unint64_t sub_174BB0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_269350;
  if (!qword_269350)
  {
    v1 = sub_7EF8(&qword_269348);
    sub_174C34();
    sub_7FD8(&qword_269370, &qword_269378, (uint64_t)&protocol conformance descriptor for _OverlayModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_269350);
  }
  return result;
}

unint64_t sub_174C34()
{
  unint64_t result;
  uint64_t v1;

  result = qword_269358;
  if (!qword_269358)
  {
    v1 = sub_7EF8(&qword_269360);
    sub_7FD8(&qword_269368, &qword_269338, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
    sub_7FD8(&qword_25DF60, &qword_25DF68, (uint64_t)&protocol conformance descriptor for _GeometryActionModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_269358);
  }
  return result;
}

uint64_t sub_174CD4(uint64_t a1)
{
  return sub_174E20(a1, (uint64_t (*)(uint64_t, uint64_t))sub_170ADC);
}

uint64_t sub_174CF4()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;

  v1 = (int *)type metadata accessor for BuyButtonCaptionViewModifier(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v0 + v4;
  v7 = type metadata accessor for LocalizerRequest(0);
  v8 = *(_QWORD *)(v7 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v0 + v4, 1, v7))
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v0 + v4, v7);
  v9 = (_QWORD *)(v6 + v1[6]);
  v10 = sub_5440(&qword_25F548);
  if (swift_getEnumCaseMultiPayload(v9, v10) == 1)
  {
    v11 = (char *)v9 + *(int *)(type metadata accessor for SizeConstants.Environment(0) + 24);
    v12 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
  }
  else
  {
    swift_release(*v9);
  }
  swift_release(*(_QWORD *)(v6 + v1[7] + 16));
  swift_release(*(_QWORD *)(v6 + v1[8] + 16));
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_174E14(uint64_t a1)
{
  return sub_174E20(a1, (uint64_t (*)(uint64_t, uint64_t))sub_1712A8);
}

uint64_t sub_174E20(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t))
{
  uint64_t v2;
  uint64_t v4;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for BuyButtonCaptionViewModifier(0) - 8) + 80);
  return a2(a1, v2 + ((v4 + 16) & ~v4));
}

uint64_t sub_174E6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for Date(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_174ECC(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for Date(0) - 8) + 80);
  return sub_189C7C(a1, v1 + ((v3 + 16) & ~v3));
}

unint64_t sub_174F14()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2693A0;
  if (!qword_2693A0)
  {
    v1 = sub_7EF8(&qword_2693A8);
    sub_174BB0();
    sub_7FD8(&qword_269368, &qword_269338, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_2693A0);
  }
  return result;
}

__n128 SeeAllView.init(model:)@<Q0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  char *v5;
  __n128 result;
  __int128 v7;

  *a2 = swift_getKeyPath(&unk_1F2C30);
  v4 = sub_5440(&qword_25F1E8);
  swift_storeEnumTagMultiPayload(a2, v4, 0);
  v5 = (char *)a2 + *(int *)(type metadata accessor for SeeAllView(0) + 20);
  result = *(__n128 *)a1;
  v7 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)v5 = *(_OWORD *)a1;
  *((_OWORD *)v5 + 1) = v7;
  *((_QWORD *)v5 + 4) = *(_QWORD *)(a1 + 32);
  return result;
}

uint64_t type metadata accessor for SeeAllView(uint64_t a1)
{
  uint64_t result;

  result = qword_269420;
  if (!qword_269420)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SeeAllView);
  return result;
}

uint64_t SeeAllView.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t (**v34)@<X0>(uint64_t@<X8>);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t OpaqueTypeConformance2;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54[2];
  _QWORD v55[6];

  v52 = a1;
  v51 = type metadata accessor for AutomaticHoverEffect(0);
  v53 = *(_QWORD *)(v51 - 8);
  __chkstk_darwin(v51);
  v50 = (char *)&v45 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = type metadata accessor for PlainButtonStyle(0);
  v3 = *(_QWORD *)(v2 - 8);
  v48 = v2;
  v49 = v3;
  __chkstk_darwin(v2);
  v5 = (char *)&v45 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DataStackID(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for SeeAllView(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  __chkstk_darwin(v9);
  v12 = sub_5440(qword_25E3E8);
  __chkstk_darwin(v12);
  v14 = (char *)&v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = (int *)sub_5440(&qword_2693B0);
  __chkstk_darwin(v15);
  v17 = (char *)&v45 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_5440(&qword_2693B8);
  v19 = *(_QWORD *)(v18 - 8);
  v46 = v18;
  v47 = v19;
  __chkstk_darwin(v18);
  v21 = (char *)&v45 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for ButtonRole(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v14, 1, 1, v22);
  v23 = *(int *)(v9 + 20);
  v24 = v45;
  sub_175490(v45 + v23, (uint64_t)v54);
  sub_AC68(v54, (uint64_t)v55);
  sub_1756A4(v24, (uint64_t)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v25 = *(unsigned __int8 *)(v10 + 80);
  v26 = (v25 + 16) & ~v25;
  v27 = swift_allocObject(&unk_256C98, v26 + v11, v25 | 7);
  v28 = sub_1756EC((uint64_t)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v27 + v26);
  static DataStackID.additionalEventData.getter(v28);
  AppAnalyticsData.init(_:)(v8);
  v29 = &v17[v15[9]];
  *(_QWORD *)v29 = swift_getKeyPath(&unk_1F2C58);
  v29[8] = 0;
  v30 = &v17[v15[10]];
  *(_QWORD *)v30 = swift_getKeyPath(&unk_1F2C88);
  v31 = sub_5440(&qword_25E818);
  swift_storeEnumTagMultiPayload(v30, v31, 0);
  v32 = &v17[v15[11]];
  *(_QWORD *)v32 = swift_getKeyPath(&unk_1F2CB8);
  v32[40] = 0;
  sub_167A4((uint64_t)v14, (uint64_t)&v17[v15[12]], qword_25E3E8);
  v33 = sub_167A4((uint64_t)v55, (uint64_t)&v17[v15[13]], &qword_25E820);
  v34 = (uint64_t (**)@<X0>(uint64_t@<X8>))&v17[v15[14]];
  *v34 = sub_175730;
  v34[1] = (uint64_t (*)@<X0>(uint64_t@<X8>))v27;
  PlainButtonStyle.init()(v33);
  v35 = sub_7FD8(&qword_2693C0, &qword_2693B0, (uint64_t)&protocol conformance descriptor for BooksActionButton<A>);
  v36 = sub_6FD0(&qword_2609C0, (uint64_t (*)(uint64_t))&type metadata accessor for PlainButtonStyle, (uint64_t)&protocol conformance descriptor for PlainButtonStyle);
  v37 = v48;
  View.buttonStyle<A>(_:)(v5, v15, v48, v35, v36);
  (*(void (**)(char *, uint64_t))(v49 + 8))(v5, v37);
  v38 = sub_B414((uint64_t)v17, &qword_2693B0);
  v39 = v50;
  static CustomHoverEffect<>.automatic.getter(v38);
  v55[0] = v15;
  v55[1] = v37;
  v55[2] = v35;
  v55[3] = v36;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v55, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
  v41 = sub_6FD0((unint64_t *)&qword_25FDF0, (uint64_t (*)(uint64_t))&type metadata accessor for AutomaticHoverEffect, (uint64_t)&protocol conformance descriptor for AutomaticHoverEffect);
  v42 = v51;
  v43 = v46;
  View.hoverEffect<A>(_:isEnabled:)(v39, 1, v46, v51, OpaqueTypeConformance2, v41);
  (*(void (**)(char *, uint64_t))(v53 + 8))(v39, v42);
  return (*(uint64_t (**)(char *, uint64_t))(v47 + 8))(v21, v43);
}

uint64_t sub_175490(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for AnyPagedFrame(a2, a1);
  return a2;
}

uint64_t sub_1754CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  uint64_t KeyPath;
  uint64_t *v21;
  uint64_t v23;

  v4 = sub_5440(&qword_25FE08);
  __chkstk_darwin(v4);
  v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Font.TextStyle(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_5440(&qword_269458);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v14 = static VerticalAlignment.center.getter(v12);
  *((_QWORD *)v14 + 1) = 0;
  v14[16] = 0;
  v15 = sub_5440(&qword_269460);
  sub_17576C(a1, (uint64_t)&v14[*(int *)(v15 + 44)]);
  (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v10, enum case for Font.TextStyle.body(_:), v7);
  v16 = type metadata accessor for Font.Design(0);
  v17 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v6, 1, 1, v16);
  v18 = static Font.Weight.medium.getter(v17);
  v19 = static Font.system(_:design:weight:)(v10, v6, *(_QWORD *)&v18, 0);
  sub_B414((uint64_t)v6, &qword_25FE08);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  KeyPath = swift_getKeyPath(&unk_1F2D60);
  sub_B3D0((uint64_t)v14, a2, &qword_269458);
  v21 = (uint64_t *)(a2 + *(int *)(sub_5440(&qword_269468) + 36));
  *v21 = KeyPath;
  v21[1] = v19;
  return sub_B414((uint64_t)v14, &qword_269458);
}

uint64_t sub_1756A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SeeAllView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1756EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SeeAllView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_175730@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for SeeAllView(0) - 8) + 80);
  return sub_1754CC(v1 + ((v3 + 16) & ~v3), a1);
}

uint64_t sub_17576C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t KeyPath;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v49 = a2;
  v3 = type metadata accessor for Image.Scale(0);
  v47 = *(_QWORD *)(v3 - 8);
  v48 = v3;
  __chkstk_darwin(v3);
  v46 = (char *)&v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for SeeAllView(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  __chkstk_darwin(v5);
  v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = sub_5440(&qword_269470);
  v42 = *(_QWORD *)(v44 - 8);
  __chkstk_darwin(v44);
  v10 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = sub_5440(&qword_269478);
  __chkstk_darwin(v41);
  v12 = (char *)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = sub_5440(&qword_269480);
  v13 = __chkstk_darwin(v43);
  v15 = (char *)&v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v45 = (uint64_t)&v40 - v16;
  sub_1756A4(a1, (uint64_t)v8);
  v17 = *(unsigned __int8 *)(v6 + 80);
  v18 = (v17 + 16) & ~v17;
  v19 = swift_allocObject(&unk_256CC0, v18 + v7, v17 | 7);
  sub_1756EC((uint64_t)v8, v19 + v18);
  v20 = sub_5440(&qword_269488);
  v21 = type metadata accessor for _JetLocalizeDefaultWorking(0);
  v22 = type metadata accessor for _JetLocalizeDefaultFailed(0);
  v23 = sub_176B2C();
  v24 = sub_6FD0(&qword_25FEE0, (uint64_t (*)(uint64_t))&type metadata accessor for _JetLocalizeDefaultWorking, (uint64_t)&protocol conformance descriptor for _JetLocalizeDefaultWorking);
  v25 = sub_6FD0(&qword_25FEE8, (uint64_t (*)(uint64_t))&type metadata accessor for _JetLocalizeDefaultFailed, (uint64_t)&protocol conformance descriptor for _JetLocalizeDefaultFailed);
  JetLocalize.init(working:failed:content:)(&j___s18_JetEngine_SwiftUI01_A22LocalizeDefaultWorkingVACycfC, 0, sub_4ED68, 0, sub_176AE0, v19, v20, v21, v22, v23, v24, v25);
  KeyPath = swift_getKeyPath(&unk_1F2D90);
  v27 = v42;
  v28 = v44;
  (*(void (**)(char *, char *, uint64_t))(v42 + 16))(v12, v10, v44);
  v29 = &v12[*(int *)(v41 + 36)];
  *(_QWORD *)v29 = KeyPath;
  v29[8] = 0;
  (*(void (**)(char *, uint64_t))(v27 + 8))(v10, v28);
  v31 = v46;
  v30 = v47;
  v32 = v48;
  (*(void (**)(char *, _QWORD, uint64_t))(v47 + 104))(v46, enum case for Image.Scale.small(_:), v48);
  v33 = swift_getKeyPath(&unk_1F2DC0);
  v34 = (uint64_t *)&v15[*(int *)(v43 + 36)];
  v35 = sub_5440(&qword_25FF30);
  (*(void (**)(char *, char *, uint64_t))(v30 + 16))((char *)v34 + *(int *)(v35 + 28), v31, v32);
  *v34 = v33;
  sub_B3D0((uint64_t)v12, (uint64_t)v15, &qword_269478);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v31, v32);
  sub_B414((uint64_t)v12, &qword_269478);
  v36 = v45;
  sub_167A4((uint64_t)v15, v45, &qword_269480);
  sub_B3D0(v36, (uint64_t)v15, &qword_269480);
  v37 = v49;
  sub_B3D0((uint64_t)v15, v49, &qword_269480);
  v38 = v37 + *(int *)(sub_5440(&qword_269498) + 48);
  *(_QWORD *)v38 = 0;
  *(_BYTE *)(v38 + 8) = 1;
  sub_B414(v36, &qword_269480);
  return sub_B414((uint64_t)v15, &qword_269480);
}

uint64_t sub_175B54@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t KeyPath;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71[2];
  char v72;
  uint64_t v73;

  v69 = a2;
  v70 = a1;
  v68 = sub_5440(&qword_261E18);
  __chkstk_darwin(v68);
  v67 = (uint64_t *)((char *)&v51 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  v3 = type metadata accessor for Locale.Language(0);
  v65 = *(_QWORD *)(v3 - 8);
  v66 = v3;
  __chkstk_darwin(v3);
  v62 = (char *)&v51 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = type metadata accessor for Locale(0);
  v60 = *(_QWORD *)(v63 - 8);
  __chkstk_darwin(v63);
  v56 = (char *)&v51 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = type metadata accessor for LayoutDirection(0);
  v61 = *(_QWORD *)(v64 - 8);
  __chkstk_darwin(v64);
  v59 = (char *)&v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_5440(&qword_261DD0);
  __chkstk_darwin(v7);
  v55 = (char *)&v51 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58 = sub_5440(&qword_269488);
  __chkstk_darwin(v58);
  v57 = (uint64_t)&v51 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for LocalizerLookupStrategy(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v51 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for LocalizerDefaultValue(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v51 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for LocalizerRequest(0);
  __chkstk_darwin(v18);
  v20 = (char *)&v51 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  LocalizerDefaultValue.init(stringLiteral:)("See All", 7, 2);
  (*(void (**)(char *, _QWORD, uint64_t))(v11 + 104))(v13, enum case for LocalizerLookupStrategy.default(_:), v10);
  static LocalizerRequest.string(forKey:with:defaultValue:using:)(0xD000000000000013, 0x80000000001FE030, 0, v17, v13);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  sub_BD00((uint64_t)v70, (uint64_t)v71);
  v21 = Text.init(_:localizer:)(v20, v71);
  v52 = v22;
  v24 = v23 & 1;
  v25 = v21;
  v53 = v21;
  v54 = v23 & 1;
  v27 = v26;
  sub_176088(v21, v22, v23 & 1, v26, v71);
  v28 = v71[0];
  v29 = v71[1];
  LOBYTE(v15) = v72;
  v30 = v73;
  v31 = sub_5440(&qword_261DE8);
  v32 = sub_7A730();
  v33 = (uint64_t)v55;
  v34 = v25;
  v35 = v52;
  View.accessibilityLabel(_:)(v34, v52, v24, v27, v31, v32);
  sub_2B574(v28, v29, v15);
  swift_bridgeObjectRelease(v30);
  KeyPath = swift_getKeyPath(&unk_1F2DF0);
  v37 = v70[3];
  v38 = v70[4];
  sub_5480(v70, v37);
  v39 = v56;
  v40 = dispatch thunk of Localizer.locale.getter(v37, v38);
  v41 = v62;
  Locale.language.getter(v40);
  v42 = (*(uint64_t (**)(char *, uint64_t))(v60 + 8))(v39, v63);
  v43 = Locale.Language.characterDirection.getter(v42);
  (*(void (**)(char *, uint64_t))(v65 + 8))(v41, v66);
  v44 = (unsigned int *)&enum case for LayoutDirection.rightToLeft(_:);
  v45 = v61;
  if (v43 != 2)
    v44 = (unsigned int *)&enum case for LayoutDirection.leftToRight(_:);
  v46 = v59;
  v47 = v64;
  (*(void (**)(char *, _QWORD, uint64_t))(v61 + 104))(v59, *v44, v64);
  v48 = v67;
  (*(void (**)(char *, char *, uint64_t))(v45 + 16))((char *)v67 + *(int *)(v68 + 28), v46, v47);
  *v48 = KeyPath;
  v49 = v57;
  sub_B3D0(v33, v57, &qword_261DD0);
  sub_B3D0((uint64_t)v48, v49 + *(int *)(v58 + 36), &qword_261E18);
  swift_retain(KeyPath);
  sub_B414((uint64_t)v48, &qword_261E18);
  sub_2B574(v53, v35, v54);
  swift_release(KeyPath);
  swift_bridgeObjectRelease(v27);
  (*(void (**)(char *, uint64_t))(v45 + 8))(v46, v47);
  sub_B414(v33, &qword_261DD0);
  return sub_167A4(v49, v69, &qword_269488);
}

uint64_t sub_176088@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t result;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;

  v56 = a5;
  v9 = type metadata accessor for ColorConstants(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = _s7BooksUI14ColorConstantsV14vibrantPrimary05SwiftB00C0Vvg_0();
  v13 = Text.foregroundColor(_:)(v12, a1, a2, a3 & 1, a4);
  v15 = v14;
  LOBYTE(a4) = v16;
  v18 = v17;
  swift_release(v12);
  v19 = static Text.+ infix(_:_:)(v13, v15, a4 & 1, v18, 41154, 0xA200000000000000, 0, _swiftEmptyArrayStorage);
  v53 = v20;
  v54 = v19;
  v55 = v21;
  v52 = v22 & 1;
  sub_2B574(v13, v15, a4 & 1);
  swift_bridgeObjectRelease(v18);
  v23 = Image.init(systemName:)(0x2E6E6F7276656863, 0xEF64726177726F66);
  v24 = Text.init(_:)(v23);
  v26 = v25;
  v28 = v27;
  v30 = v29 & 1;
  _s7BooksUI18BuyButtonExternalsV6colorsAA14ColorConstantsVvg_0((uint64_t)v11);
  v31 = objc_msgSend((id)objc_opt_self(UIColor), "tertiaryLabelColor");
  v32 = Color.init(_:)(v31);
  sub_176BC8((uint64_t)v11);
  v33 = Text.foregroundColor(_:)(v32, v24, v26, v30, v28);
  v35 = v34;
  v37 = v36;
  v39 = v38 & 1;
  sub_2B574(v24, v26, v30);
  swift_release(v32);
  swift_bridgeObjectRelease(v28);
  v41 = v53;
  v40 = v54;
  LOBYTE(v32) = v52;
  v42 = v55;
  v50 = static Text.+ infix(_:_:)(v54, v53, v52, v55, v33, v35, v39, v37);
  v51 = v43;
  v45 = v44;
  LOBYTE(v28) = v46;
  sub_2B574(v33, v35, v39);
  swift_bridgeObjectRelease(v37);
  sub_2B574(v40, v41, v32);
  result = swift_bridgeObjectRelease(v42);
  v48 = v56;
  *v56 = v50;
  v48[1] = v45;
  *((_BYTE *)v48 + 16) = v28 & 1;
  v48[3] = v51;
  return result;
}

uint64_t sub_1762FC(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &opaque type descriptor for <<opaque return type of SeeAllView.body>>, 1);
}

uint64_t *initializeBufferWithCopyOfBuffer for SeeAllView(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = sub_5440(&qword_25F1E8);
    if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
    {
      v8 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      v9 = a1;
      v10 = v7;
      v11 = 1;
    }
    else
    {
      v13 = *a2;
      *a1 = *a2;
      swift_retain(v13);
      v9 = a1;
      v10 = v7;
      v11 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v10, v11);
    v14 = *(int *)(a3 + 20);
    v15 = *(_OWORD *)((char *)a2 + v14 + 24);
    *(_OWORD *)((char *)a1 + v14 + 24) = v15;
    (**(void (***)(void))(v15 - 8))();
  }
  return a1;
}

uint64_t destroy for SeeAllView(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = sub_5440(&qword_25F1E8);
  if (swift_getEnumCaseMultiPayload(a1, v4) == 1)
  {
    v5 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  }
  else
  {
    swift_release(*a1);
  }
  return _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)((char *)a1 + *(int *)(a2 + 20)));
}

uint64_t *initializeWithCopy for SeeAllView(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;

  v6 = sub_5440(&qword_25F1E8);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for ColorScheme(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a1;
    v9 = v6;
    v10 = 1;
  }
  else
  {
    v11 = *a2;
    *a1 = *a2;
    swift_retain(v11);
    v8 = a1;
    v9 = v6;
    v10 = 0;
  }
  swift_storeEnumTagMultiPayload(v8, v9, v10);
  v12 = *(int *)(a3 + 20);
  v13 = *(_OWORD *)((char *)a2 + v12 + 24);
  *(_OWORD *)((char *)a1 + v12 + 24) = v13;
  (**(void (***)(void))(v13 - 8))();
  return a1;
}

uint64_t *assignWithCopy for SeeAllView(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (a1 != a2)
  {
    sub_B414((uint64_t)a1, &qword_25F1E8);
    v6 = sub_5440(&qword_25F1E8);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = v6;
      v10 = 1;
    }
    else
    {
      v11 = *a2;
      *a1 = *a2;
      swift_retain(v11);
      v8 = a1;
      v9 = v6;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
  }
  sub_142F8((uint64_t *)((char *)a1 + *(int *)(a3 + 20)), (uint64_t *)((char *)a2 + *(int *)(a3 + 20)));
  return a1;
}

char *initializeWithTake for SeeAllView(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  __int128 v11;

  v6 = sub_5440(&qword_25F1E8);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for ColorScheme(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v8 = *(int *)(a3 + 20);
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = *((_OWORD *)v10 + 1);
  *(_OWORD *)v9 = *(_OWORD *)v10;
  *((_OWORD *)v9 + 1) = v11;
  *((_QWORD *)v9 + 4) = *((_QWORD *)v10 + 4);
  return a1;
}

char *assignWithTake for SeeAllView(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  __int128 v11;

  if (a1 != a2)
  {
    sub_B414((uint64_t)a1, &qword_25F1E8);
    v6 = sub_5440(&qword_25F1E8);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for ColorScheme(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
  }
  v8 = *(int *)(a3 + 20);
  v9 = &a1[v8];
  v10 = &a2[v8];
  _s7BooksUI13AnyPagedFrameVwxx_0(&a1[v8]);
  v11 = *((_OWORD *)v10 + 1);
  *(_OWORD *)v9 = *(_OWORD *)v10;
  *((_OWORD *)v9 + 1) = v11;
  *((_QWORD *)v9 + 4) = *((_QWORD *)v10 + 4);
  return a1;
}

uint64_t getEnumTagSinglePayload for SeeAllView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_176794);
}

uint64_t sub_176794(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = sub_5440(&qword_25F210);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 24);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for SeeAllView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_176824);
}

uint64_t sub_176824(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_5440(&qword_25F210);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20) + 24) = (a2 - 1);
  return result;
}

void sub_1768A4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  sub_A6B14(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(v2 - 8) + 64;
    v4[1] = "(";
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
  }
}

uint64_t sub_176914()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t OpaqueTypeConformance2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v0 = sub_7EF8(&qword_2693B8);
  v1 = type metadata accessor for AutomaticHoverEffect(255);
  v5 = sub_7EF8(&qword_2693B0);
  v6 = type metadata accessor for PlainButtonStyle(255);
  v7 = sub_7FD8(&qword_2693C0, &qword_2693B0, (uint64_t)&protocol conformance descriptor for BooksActionButton<A>);
  v8 = sub_6FD0(&qword_2609C0, (uint64_t (*)(uint64_t))&type metadata accessor for PlainButtonStyle, (uint64_t)&protocol conformance descriptor for PlainButtonStyle);
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v5, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
  v3 = sub_6FD0((unint64_t *)&qword_25FDF0, (uint64_t (*)(uint64_t))&type metadata accessor for AutomaticHoverEffect, (uint64_t)&protocol conformance descriptor for AutomaticHoverEffect);
  v5 = v0;
  v6 = v1;
  v7 = OpaqueTypeConformance2;
  v8 = v3;
  return swift_getOpaqueTypeConformance2(&v5, &opaque type descriptor for <<opaque return type of View.hoverEffect<A>(_:isEnabled:)>>, 1);
}

uint64_t sub_176A2C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v1 = type metadata accessor for SeeAllView(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = (_QWORD *)(v0 + v4);
  v7 = sub_5440(&qword_25F1E8);
  if (swift_getEnumCaseMultiPayload(v0 + v4, v7) == 1)
  {
    v8 = type metadata accessor for ColorScheme(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v0 + v4, v8);
  }
  else
  {
    swift_release(*v6);
  }
  _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)((char *)v6 + *(int *)(v1 + 20)));
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_176AE0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  type metadata accessor for SeeAllView(0);
  return sub_175B54(a1, a2);
}

unint64_t sub_176B2C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_269490;
  if (!qword_269490)
  {
    v1 = sub_7EF8(&qword_269488);
    sub_7A6AC();
    sub_7FD8(&qword_261E10, &qword_261E18, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_269490);
  }
  return result;
}

uint64_t sub_176BC8(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ColorConstants(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t ShelfHeaderView.init(title:subtitle:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  int *v7;
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;

  *a3 = swift_getKeyPath(&unk_1F2E20);
  v6 = sub_5440(&qword_25FAA0);
  swift_storeEnumTagMultiPayload(a3, v6, 0);
  v7 = (int *)type metadata accessor for ShelfHeaderView(0);
  v8 = (_QWORD *)((char *)a3 + v7[5]);
  *v8 = swift_getKeyPath(&unk_1F2E48);
  v9 = sub_5440(&qword_25F548);
  swift_storeEnumTagMultiPayload(v8, v9, 0);
  v10 = (char *)a3 + v7[6];
  v11 = type metadata accessor for LocalizerRequest(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v10, a1, v11);
  return sub_167A4(a2, (uint64_t)a3 + v7[7], &qword_25E0C8);
}

uint64_t type metadata accessor for ShelfHeaderView(uint64_t a1)
{
  uint64_t result;

  result = qword_269518;
  if (!qword_269518)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ShelfHeaderView);
  return result;
}

uint64_t ShelfHeaderView.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t KeyPath;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  double v31;
  double v32;
  double v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  double v43;
  double v44;
  double v45;
  double v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v56;
  uint64_t v57;

  v2 = v1;
  v57 = a1;
  v3 = type metadata accessor for SizeConstants.Spacing(0);
  __chkstk_darwin(v3);
  v5 = (char *)&v56 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for SizeConstants(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v56 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_5440(&qword_2626E0);
  __chkstk_darwin(v9);
  v11 = (char *)&v56 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_5440(&qword_2626E8);
  __chkstk_darwin(v12);
  v14 = (char *)&v56 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_5440(&qword_2694A0);
  __chkstk_darwin(v15);
  v17 = (char *)&v56 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_5440(&qword_2694A8);
  v19 = __chkstk_darwin(v18);
  v21 = (char *)&v56 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v11 = static HorizontalAlignment.leading.getter(v19);
  *((_QWORD *)v11 + 1) = 0;
  v11[16] = 1;
  v22 = sub_5440(&qword_2694B0);
  v23 = sub_1770DC(v2, (uint64_t)&v11[*(int *)(v22 + 44)]);
  v24 = static Alignment.leading.getter(v23);
  sub_8826C(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v14, 0.0, 1, 0.0, 1, v24, v25);
  sub_B414((uint64_t)v11, &qword_2626E0);
  KeyPath = swift_getKeyPath(&unk_1F2E70);
  sub_B3D0((uint64_t)v14, (uint64_t)v17, &qword_2626E8);
  v27 = &v17[*(int *)(v15 + 36)];
  *(_QWORD *)v27 = KeyPath;
  *((_QWORD *)v27 + 1) = 2;
  v27[16] = 0;
  v28 = sub_B414((uint64_t)v14, &qword_2626E8);
  LOBYTE(v15) = static Edge.Set.top.getter(v28);
  type metadata accessor for ShelfHeaderView(0);
  sub_3168C((uint64_t)v8);
  sub_FEFB0((uint64_t)v8, (uint64_t)v5);
  sub_224DC((uint64_t)v8, type metadata accessor for SizeConstants);
  v29 = sub_224DC((uint64_t)v5, type metadata accessor for SizeConstants.Spacing);
  v33 = EdgeInsets.init(_all:)(v29, 20.0, v30, v31, v32);
  v35 = v34;
  v37 = v36;
  v39 = v38;
  sub_B3D0((uint64_t)v17, (uint64_t)v21, &qword_2694A0);
  v40 = &v21[*(int *)(v18 + 36)];
  *v40 = v15;
  *((double *)v40 + 1) = v33;
  *((_QWORD *)v40 + 2) = v35;
  *((_QWORD *)v40 + 3) = v37;
  *((_QWORD *)v40 + 4) = v39;
  v40[40] = 0;
  v41 = sub_B414((uint64_t)v17, &qword_2694A0);
  LOBYTE(v15) = static Edge.Set.bottom.getter(v41);
  sub_3168C((uint64_t)v8);
  sub_FEFB0((uint64_t)v8, (uint64_t)v5);
  sub_224DC((uint64_t)v8, type metadata accessor for SizeConstants);
  v42 = sub_224DC((uint64_t)v5, type metadata accessor for SizeConstants.Spacing);
  v46 = EdgeInsets.init(_all:)(v42, 16.0, v43, v44, v45);
  v48 = v47;
  v50 = v49;
  v52 = v51;
  v53 = v57;
  sub_B3D0((uint64_t)v21, v57, &qword_2694A8);
  v54 = v53 + *(int *)(sub_5440(&qword_2694B8) + 36);
  *(_BYTE *)v54 = v15;
  *(double *)(v54 + 8) = v46;
  *(_QWORD *)(v54 + 16) = v48;
  *(_QWORD *)(v54 + 24) = v50;
  *(_QWORD *)(v54 + 32) = v52;
  *(_BYTE *)(v54 + 40) = 0;
  return sub_B414((uint64_t)v21, &qword_2694A8);
}

uint64_t sub_1770DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v37)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  double v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t KeyPath;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v57;
  void (*v58)(char *, uint64_t, uint64_t);
  char *v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;

  v74 = a2;
  v3 = sub_5440(&qword_25E0C8);
  __chkstk_darwin(v3);
  v71 = (char *)&v57 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_5440(&qword_261D00);
  v6 = __chkstk_darwin(v5);
  v73 = (uint64_t)&v57 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v72 = (char *)&v57 - v8;
  v9 = sub_5440(&qword_25FE08);
  __chkstk_darwin(v9);
  v11 = (char *)&v57 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v68 = type metadata accessor for Font.TextStyle(0);
  v12 = *(_QWORD *)(v68 - 8);
  __chkstk_darwin(v68);
  v66 = (char *)&v57 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for FontConstants(0);
  __chkstk_darwin(v14);
  v16 = (char *)&v57 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for LocalizerRequest(0);
  v18 = *(_QWORD *)(v17 - 8);
  v62 = v17;
  v63 = v18;
  v19 = __chkstk_darwin(v17);
  v60 = (char *)&v57 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v22 = (char *)&v57 - v21;
  v23 = type metadata accessor for LocalizedText(0);
  v69 = *(_QWORD *)(v23 - 8);
  v70 = v23;
  __chkstk_darwin(v23);
  v25 = (char *)&v57 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v67 = sub_5440(&qword_25FE10);
  v26 = __chkstk_darwin(v67);
  v28 = (char *)&v57 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  v61 = (char *)&v57 - v29;
  v30 = type metadata accessor for ShelfHeaderView(0);
  v64 = a1;
  v65 = v30;
  v31 = a1 + *(int *)(v30 + 24);
  v58 = *(void (**)(char *, uint64_t, uint64_t))(v18 + 16);
  v58(v22, v31, v17);
  v59 = v22;
  LocalizedText.init(_:)(v22);
  sub_32164((uint64_t)v16);
  v32 = v66;
  v33 = v68;
  (*(void (**)(char *, _QWORD, uint64_t))(v12 + 104))(v66, enum case for Font.TextStyle.title2(_:), v68);
  v34 = enum case for Font.Design.serif (_:);
  v35 = type metadata accessor for Font.Design(0);
  v36 = *(_QWORD *)(v35 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v36 + 104))(v11, v34, v35);
  v37 = *(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(v36 + 56);
  v38 = (uint64_t)v71;
  v39 = v37(v11, 0, 1, v35);
  v40 = static Font.Weight.semibold.getter(v39);
  v41 = static Font.system(_:design:weight:)(v32, v11, *(_QWORD *)&v40, 0);
  sub_B414((uint64_t)v11, &qword_25FE08);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v32, v33);
  v42 = (uint64_t)v61;
  sub_224DC((uint64_t)v16, type metadata accessor for FontConstants);
  KeyPath = swift_getKeyPath(&unk_1F2F08);
  v44 = v69;
  v45 = v70;
  (*(void (**)(char *, char *, uint64_t))(v69 + 16))(v28, v25, v70);
  v46 = (uint64_t *)&v28[*(int *)(v67 + 36)];
  *v46 = KeyPath;
  v46[1] = v41;
  v47 = v62;
  v48 = v63;
  (*(void (**)(char *, uint64_t))(v44 + 8))(v25, v45);
  sub_167A4((uint64_t)v28, v42, &qword_25FE10);
  sub_B3D0(v64 + *(int *)(v65 + 28), v38, &qword_25E0C8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v48 + 48))(v38, 1, v47) == 1)
  {
    sub_B414(v38, &qword_25E0C8);
    v49 = 1;
    v50 = (uint64_t)v72;
  }
  else
  {
    v51 = v60;
    (*(void (**)(char *, uint64_t, uint64_t))(v48 + 32))(v60, v38, v47);
    v52 = v59;
    v58(v59, (uint64_t)v51, v47);
    LocalizedText.init(_:)(v52);
    (*(void (**)(char *, uint64_t))(v48 + 8))(v51, v47);
    v50 = (uint64_t)v72;
    (*(void (**)(char *, char *, uint64_t))(v44 + 32))(v72, v25, v45);
    v49 = 0;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v44 + 56))(v50, v49, 1, v45);
  sub_B3D0(v42, (uint64_t)v28, &qword_25FE10);
  v53 = v73;
  sub_B3D0(v50, v73, &qword_261D00);
  v54 = v74;
  sub_B3D0((uint64_t)v28, v74, &qword_25FE10);
  v55 = sub_5440(&qword_269580);
  sub_B3D0(v53, v54 + *(int *)(v55 + 48), &qword_261D00);
  sub_B414(v50, &qword_261D00);
  sub_B414(v42, &qword_25FE10);
  sub_B414(v53, &qword_261D00);
  return sub_B414((uint64_t)v28, &qword_25FE10);
}

uint64_t sub_177624(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &opaque type descriptor for <<opaque return type of ShelfHeaderView.body>>, 1);
}

uint64_t *initializeBufferWithCopyOfBuffer for ShelfHeaderView(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _WORD *v17;
  _WORD *v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(char *, char *, uint64_t);
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v14 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v14);
  }
  else
  {
    v7 = sub_5440(&qword_25FAA0);
    if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
    {
      *(_WORD *)a1 = *(_WORD *)a2;
      v8 = type metadata accessor for FontConstants.Environment(0);
      v9 = *(int *)(v8 + 24);
      v10 = (char *)a1 + v9;
      v11 = (char *)a2 + v9;
      v12 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
      *(uint64_t *)((char *)a1 + *(int *)(v8 + 28)) = *(uint64_t *)((char *)a2 + *(int *)(v8 + 28));
      v13 = 1;
    }
    else
    {
      v15 = *a2;
      *a1 = *a2;
      swift_retain(v15);
      v13 = 0;
    }
    swift_storeEnumTagMultiPayload(a1, v7, v13);
    v16 = a3[5];
    v17 = (_WORD *)((char *)a1 + v16);
    v18 = (_WORD *)((char *)a2 + v16);
    v19 = sub_5440(&qword_25F548);
    if (swift_getEnumCaseMultiPayload(v18, v19) == 1)
    {
      *v17 = *v18;
      v20 = (int *)type metadata accessor for SizeConstants.Environment(0);
      v21 = v20[6];
      v22 = (char *)v17 + v21;
      v23 = (char *)v18 + v21;
      v24 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 16))(v22, v23, v24);
      *(_QWORD *)((char *)v17 + v20[7]) = *(_QWORD *)((char *)v18 + v20[7]);
      v25 = v20[8];
      v26 = (char *)v17 + v25;
      v27 = (char *)v18 + v25;
      v26[2] = v27[2];
      *(_WORD *)v26 = *(_WORD *)v27;
      v28 = 1;
    }
    else
    {
      v29 = *(_QWORD *)v18;
      *(_QWORD *)v17 = *(_QWORD *)v18;
      swift_retain(v29);
      v28 = 0;
    }
    swift_storeEnumTagMultiPayload(v17, v19, v28);
    v30 = a3[6];
    v31 = (char *)a1 + v30;
    v32 = (char *)a2 + v30;
    v33 = type metadata accessor for LocalizerRequest(0);
    v34 = *(_QWORD *)(v33 - 8);
    v35 = *(void (**)(char *, char *, uint64_t))(v34 + 16);
    v35(v31, v32, v33);
    v36 = a3[7];
    v37 = (char *)a1 + v36;
    v38 = (char *)a2 + v36;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v38, 1, v33))
    {
      v39 = sub_5440(&qword_25E0C8);
      memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
    }
    else
    {
      v35(v37, v38, v33);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v34 + 56))(v37, 0, 1, v33);
    }
  }
  return a1;
}

uint64_t destroy for ShelfHeaderView(_QWORD *a1, int *a2)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t result;
  void (*v16)(char *, uint64_t);

  v4 = sub_5440(&qword_25FAA0);
  if (swift_getEnumCaseMultiPayload(a1, v4) == 1)
  {
    v5 = (char *)a1 + *(int *)(type metadata accessor for FontConstants.Environment(0) + 24);
    v6 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  }
  else
  {
    swift_release(*a1);
  }
  v7 = (_QWORD *)((char *)a1 + a2[5]);
  v8 = sub_5440(&qword_25F548);
  if (swift_getEnumCaseMultiPayload(v7, v8) == 1)
  {
    v9 = (char *)v7 + *(int *)(type metadata accessor for SizeConstants.Environment(0) + 24);
    v10 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  }
  else
  {
    swift_release(*v7);
  }
  v11 = (char *)a1 + a2[6];
  v12 = type metadata accessor for LocalizerRequest(0);
  v13 = *(_QWORD *)(v12 - 8);
  v16 = *(void (**)(char *, uint64_t))(v13 + 8);
  v16(v11, v12);
  v14 = (char *)a1 + a2[7];
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v14, 1, v12);
  if (!(_DWORD)result)
    return ((uint64_t (*)(char *, uint64_t))v16)(v14, v12);
  return result;
}

_WORD *initializeWithCopy for ShelfHeaderView(_WORD *a1, _WORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _WORD *v15;
  _WORD *v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, char *, uint64_t);
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;

  v6 = sub_5440(&qword_25FAA0);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    *a1 = *a2;
    v7 = type metadata accessor for FontConstants.Environment(0);
    v8 = *(int *)(v7 + 24);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    *(_QWORD *)((char *)a1 + *(int *)(v7 + 28)) = *(_QWORD *)((char *)a2 + *(int *)(v7 + 28));
    v12 = 1;
  }
  else
  {
    v13 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    swift_retain(v13);
    v12 = 0;
  }
  swift_storeEnumTagMultiPayload(a1, v6, v12);
  v14 = a3[5];
  v15 = (_WORD *)((char *)a1 + v14);
  v16 = (_WORD *)((char *)a2 + v14);
  v17 = sub_5440(&qword_25F548);
  if (swift_getEnumCaseMultiPayload(v16, v17) == 1)
  {
    *v15 = *v16;
    v18 = (int *)type metadata accessor for SizeConstants.Environment(0);
    v19 = v18[6];
    v20 = (char *)v15 + v19;
    v21 = (char *)v16 + v19;
    v22 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v20, v21, v22);
    *(_QWORD *)((char *)v15 + v18[7]) = *(_QWORD *)((char *)v16 + v18[7]);
    v23 = v18[8];
    v24 = (char *)v15 + v23;
    v25 = (char *)v16 + v23;
    v24[2] = v25[2];
    *(_WORD *)v24 = *(_WORD *)v25;
    v26 = 1;
  }
  else
  {
    v27 = *(_QWORD *)v16;
    *(_QWORD *)v15 = *(_QWORD *)v16;
    swift_retain(v27);
    v26 = 0;
  }
  swift_storeEnumTagMultiPayload(v15, v17, v26);
  v28 = a3[6];
  v29 = (char *)a1 + v28;
  v30 = (char *)a2 + v28;
  v31 = type metadata accessor for LocalizerRequest(0);
  v32 = *(_QWORD *)(v31 - 8);
  v33 = *(void (**)(char *, char *, uint64_t))(v32 + 16);
  v33(v29, v30, v31);
  v34 = a3[7];
  v35 = (char *)a1 + v34;
  v36 = (char *)a2 + v34;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v36, 1, v31))
  {
    v37 = sub_5440(&qword_25E0C8);
    memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
  }
  else
  {
    v33(v35, v36, v31);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v35, 0, 1, v31);
  }
  return a1;
}

_BYTE *assignWithCopy for ShelfHeaderView(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  _BYTE *v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  _BYTE *v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  _BYTE *v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  _BYTE *v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v35;
  _BYTE *v36;
  _BYTE *v37;
  uint64_t (*v38)(_BYTE *, uint64_t, uint64_t);
  int v39;
  uint64_t v40;

  if (a1 != a2)
  {
    sub_B414((uint64_t)a1, &qword_25FAA0);
    v6 = sub_5440(&qword_25FAA0);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      v7 = type metadata accessor for FontConstants.Environment(0);
      v8 = *(int *)(v7 + 24);
      v9 = &a1[v8];
      v10 = &a2[v8];
      v11 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
      *(_QWORD *)&a1[*(int *)(v7 + 28)] = *(_QWORD *)&a2[*(int *)(v7 + 28)];
      v12 = 1;
    }
    else
    {
      v13 = *(_QWORD *)a2;
      *(_QWORD *)a1 = *(_QWORD *)a2;
      swift_retain(v13);
      v12 = 0;
    }
    swift_storeEnumTagMultiPayload(a1, v6, v12);
    v14 = a3[5];
    v15 = &a1[v14];
    v16 = &a2[v14];
    sub_B414((uint64_t)&a1[v14], &qword_25F548);
    v17 = sub_5440(&qword_25F548);
    if (swift_getEnumCaseMultiPayload(v16, v17) == 1)
    {
      *v15 = *v16;
      v15[1] = v16[1];
      v18 = (int *)type metadata accessor for SizeConstants.Environment(0);
      v19 = v18[6];
      v20 = &v15[v19];
      v21 = &v16[v19];
      v22 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v20, v21, v22);
      *(_QWORD *)&v15[v18[7]] = *(_QWORD *)&v16[v18[7]];
      v23 = v18[8];
      v24 = &v15[v23];
      v25 = &v16[v23];
      v26 = v25[2];
      *(_WORD *)v24 = *(_WORD *)v25;
      v24[2] = v26;
      v27 = 1;
    }
    else
    {
      v28 = *(_QWORD *)v16;
      *(_QWORD *)v15 = *(_QWORD *)v16;
      swift_retain(v28);
      v27 = 0;
    }
    swift_storeEnumTagMultiPayload(v15, v17, v27);
  }
  v29 = a3[6];
  v30 = &a1[v29];
  v31 = &a2[v29];
  v32 = type metadata accessor for LocalizerRequest(0);
  v33 = *(_QWORD *)(v32 - 8);
  v34 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v33 + 24);
  v34(v30, v31, v32);
  v35 = a3[7];
  v36 = &a1[v35];
  v37 = &a2[v35];
  v38 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v33 + 48);
  LODWORD(v30) = v38(&a1[v35], 1, v32);
  v39 = v38(v37, 1, v32);
  if (!(_DWORD)v30)
  {
    if (!v39)
    {
      v34(v36, v37, v32);
      return a1;
    }
    (*(void (**)(_BYTE *, uint64_t))(v33 + 8))(v36, v32);
    goto LABEL_14;
  }
  if (v39)
  {
LABEL_14:
    v40 = sub_5440(&qword_25E0C8);
    memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
    return a1;
  }
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v33 + 16))(v36, v37, v32);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v33 + 56))(v36, 0, 1, v32);
  return a1;
}

_WORD *initializeWithTake for ShelfHeaderView(_WORD *a1, _WORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _WORD *v13;
  _WORD *v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, char *, uint64_t);
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;

  v6 = sub_5440(&qword_25FAA0);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    *a1 = *a2;
    v7 = type metadata accessor for FontConstants.Environment(0);
    v8 = *(int *)(v7 + 24);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
    *(_QWORD *)((char *)a1 + *(int *)(v7 + 28)) = *(_QWORD *)((char *)a2 + *(int *)(v7 + 28));
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v12 = a3[5];
  v13 = (_WORD *)((char *)a1 + v12);
  v14 = (_WORD *)((char *)a2 + v12);
  v15 = sub_5440(&qword_25F548);
  if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
  {
    *v13 = *v14;
    v16 = (int *)type metadata accessor for SizeConstants.Environment(0);
    v17 = v16[6];
    v18 = (char *)v13 + v17;
    v19 = (char *)v14 + v17;
    v20 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v18, v19, v20);
    *(_QWORD *)((char *)v13 + v16[7]) = *(_QWORD *)((char *)v14 + v16[7]);
    v21 = v16[8];
    v22 = (char *)v13 + v21;
    v23 = (char *)v14 + v21;
    v22[2] = v23[2];
    *(_WORD *)v22 = *(_WORD *)v23;
    swift_storeEnumTagMultiPayload(v13, v15, 1);
  }
  else
  {
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  v24 = a3[6];
  v25 = (char *)a1 + v24;
  v26 = (char *)a2 + v24;
  v27 = type metadata accessor for LocalizerRequest(0);
  v28 = *(_QWORD *)(v27 - 8);
  v29 = *(void (**)(char *, char *, uint64_t))(v28 + 32);
  v29(v25, v26, v27);
  v30 = a3[7];
  v31 = (char *)a1 + v30;
  v32 = (char *)a2 + v30;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v32, 1, v27))
  {
    v33 = sub_5440(&qword_25E0C8);
    memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
  }
  else
  {
    v29(v31, v32, v27);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v31, 0, 1, v27);
  }
  return a1;
}

_WORD *assignWithTake for ShelfHeaderView(_WORD *a1, _WORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _WORD *v13;
  _WORD *v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, char *, uint64_t);
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t (*v33)(char *, uint64_t, uint64_t);
  int v34;
  uint64_t v35;

  if (a1 != a2)
  {
    sub_B414((uint64_t)a1, &qword_25FAA0);
    v6 = sub_5440(&qword_25FAA0);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      *a1 = *a2;
      v7 = type metadata accessor for FontConstants.Environment(0);
      v8 = *(int *)(v7 + 24);
      v9 = (char *)a1 + v8;
      v10 = (char *)a2 + v8;
      v11 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
      *(_QWORD *)((char *)a1 + *(int *)(v7 + 28)) = *(_QWORD *)((char *)a2 + *(int *)(v7 + 28));
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
    v12 = a3[5];
    v13 = (_WORD *)((char *)a1 + v12);
    v14 = (_WORD *)((char *)a2 + v12);
    sub_B414((uint64_t)a1 + v12, &qword_25F548);
    v15 = sub_5440(&qword_25F548);
    if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
    {
      *v13 = *v14;
      v16 = (int *)type metadata accessor for SizeConstants.Environment(0);
      v17 = v16[6];
      v18 = (char *)v13 + v17;
      v19 = (char *)v14 + v17;
      v20 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v18, v19, v20);
      *(_QWORD *)((char *)v13 + v16[7]) = *(_QWORD *)((char *)v14 + v16[7]);
      v21 = v16[8];
      v22 = (char *)v13 + v21;
      v23 = (char *)v14 + v21;
      v22[2] = v23[2];
      *(_WORD *)v22 = *(_WORD *)v23;
      swift_storeEnumTagMultiPayload(v13, v15, 1);
    }
    else
    {
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
  }
  v24 = a3[6];
  v25 = (char *)a1 + v24;
  v26 = (char *)a2 + v24;
  v27 = type metadata accessor for LocalizerRequest(0);
  v28 = *(_QWORD *)(v27 - 8);
  v29 = *(void (**)(char *, char *, uint64_t))(v28 + 40);
  v29(v25, v26, v27);
  v30 = a3[7];
  v31 = (char *)a1 + v30;
  v32 = (char *)a2 + v30;
  v33 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v28 + 48);
  LODWORD(v25) = v33((char *)a1 + v30, 1, v27);
  v34 = v33(v32, 1, v27);
  if (!(_DWORD)v25)
  {
    if (!v34)
    {
      v29(v31, v32, v27);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v28 + 8))(v31, v27);
    goto LABEL_13;
  }
  if (v34)
  {
LABEL_13:
    v35 = sub_5440(&qword_25E0C8);
    memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v31, v32, v27);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v31, 0, 1, v27);
  return a1;
}

uint64_t getEnumTagSinglePayload for ShelfHeaderView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1783DC);
}

uint64_t sub_1783DC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_5440(&qword_261A40);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v11 = sub_5440(&qword_25F558);
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v11;
      v13 = a3[5];
    }
    else
    {
      v14 = type metadata accessor for LocalizerRequest(0);
      v12 = *(_QWORD *)(v14 - 8);
      if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
      {
        v8 = v14;
        v13 = a3[6];
      }
      else
      {
        v8 = sub_5440(&qword_25E0C8);
        v12 = *(_QWORD *)(v8 - 8);
        v13 = a3[7];
      }
    }
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for ShelfHeaderView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1784B0);
}

uint64_t sub_1784B0(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = sub_5440(&qword_261A40);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v13 = sub_5440(&qword_25F558);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = a4[5];
    }
    else
    {
      v16 = type metadata accessor for LocalizerRequest(0);
      v14 = *(_QWORD *)(v16 - 8);
      if (*(_DWORD *)(v14 + 84) == a3)
      {
        v10 = v16;
        v15 = a4[6];
      }
      else
      {
        v10 = sub_5440(&qword_25E0C8);
        v14 = *(_QWORD *)(v10 - 8);
        v15 = a4[7];
      }
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_178580(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD v10[4];

  sub_19B38(319, &qword_261AB0, type metadata accessor for FontConstants, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  if (v3 <= 0x3F)
  {
    v10[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_19B38(319, (unint64_t *)&qword_25F5C8, type metadata accessor for SizeConstants, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
    if (v5 <= 0x3F)
    {
      v10[1] = *(_QWORD *)(v4 - 8) + 64;
      v6 = type metadata accessor for LocalizerRequest(319);
      if (v7 <= 0x3F)
      {
        v10[2] = *(_QWORD *)(v6 - 8) + 64;
        sub_19B38(319, (unint64_t *)&qword_261BA0, (uint64_t (*)(uint64_t))&type metadata accessor for LocalizerRequest, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
        if (v9 <= 0x3F)
        {
          v10[3] = *(_QWORD *)(v8 - 8) + 64;
          swift_initStructMetadata(a1, 256, 4, v10, a1 + 16);
        }
      }
    }
  }
}

uint64_t sub_178684()
{
  return sub_A3FB4(&qword_269558, &qword_2694B8, (void (*)(void))sub_1786B0);
}

uint64_t sub_1786B0()
{
  return sub_A3FB4(&qword_269560, &qword_2694A8, (void (*)(void))sub_1786CC);
}

unint64_t sub_1786CC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_269568;
  if (!qword_269568)
  {
    v1 = sub_7EF8(&qword_2694A0);
    sub_178750();
    sub_7FD8(&qword_260960, &qword_260968, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_269568);
  }
  return result;
}

unint64_t sub_178750()
{
  unint64_t result;
  uint64_t v1;

  result = qword_269570;
  if (!qword_269570)
  {
    v1 = sub_7EF8(&qword_2626E8);
    sub_7FD8(&qword_269578, &qword_2626E0, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_269570);
  }
  return result;
}

uint64_t _DecodeDefault_Wrapper.init(wrappedValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a3, a2, &protocol requirements base descriptor for DecodeDefault.DefaultValueProviding, &associated type descriptor for DecodeDefault.DefaultValueProviding.Value);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 32))(a4, a1, AssociatedTypeWitness);
}

uint64_t KeyedDecodingContainer.decode<A>(_:forKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t WitnessTable;
  char *v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;

  v30 = a5;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a4, a3, &protocol requirements base descriptor for DecodeDefault.DefaultValueProviding, &associated type descriptor for DecodeDefault.DefaultValueProviding.Value);
  v28 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v29 = AssociatedTypeWitness;
  __chkstk_darwin(AssociatedTypeWitness);
  v11 = (char *)&v26 - v10;
  v13 = type metadata accessor for _DecodeDefault_Wrapper(255, a3, a4, v12);
  v14 = type metadata accessor for Optional(0, v13);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v26 - v16;
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for _DecodeDefault_Wrapper<A>, v13);
  v19 = v32;
  result = KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v13, a1, a2, v13, WitnessTable);
  if (!v19)
  {
    v27 = v15;
    v31 = v14;
    v32 = v11;
    v22 = v28;
    v21 = v29;
    v23 = v30;
    v24 = *(_QWORD *)(v13 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v17, 1, v13) == 1)
    {
      v25 = v32;
      (*(void (**)(uint64_t, uint64_t))(a4 + 24))(a3, a4);
      (*(void (**)(uint64_t, char *, uint64_t))(v22 + 32))(v23, v25, v21);
      return (*(uint64_t (**)(char *, uint64_t))(v27 + 8))(v17, v31);
    }
    else
    {
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v24 + 32))(v23, v17, v13);
    }
  }
  return result;
}

uint64_t type metadata accessor for _DecodeDefault_Wrapper(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10E40(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _DecodeDefault_Wrapper);
}

uint64_t _DecodeDefault_Wrapper.wrappedValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 16), &protocol requirements base descriptor for DecodeDefault.DefaultValueProviding, &associated type descriptor for DecodeDefault.DefaultValueProviding.Value);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(a2, v2, AssociatedTypeWitness);
}

uint64_t _DecodeDefault_Wrapper.wrappedValue.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(_QWORD *)(a2 + 24), *(_QWORD *)(a2 + 16), &protocol requirements base descriptor for DecodeDefault.DefaultValueProviding, &associated type descriptor for DecodeDefault.DefaultValueProviding.Value);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 40))(v2, a1, AssociatedTypeWitness);
}

uint64_t _DecodeDefault_Wrapper.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t AssociatedConformanceWitness;
  _QWORD *v25;
  char *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t AssociatedTypeWitness;
  _QWORD v34[3];
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v32 = a4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a3, a2, &protocol requirements base descriptor for DecodeDefault.DefaultValueProviding, &associated type descriptor for DecodeDefault.DefaultValueProviding.Value);
  v30 = *(_QWORD *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  v31 = (char **)((char *)&v27 - v7);
  v9 = type metadata accessor for _DecodeDefault_Wrapper(0, a2, a3, v8);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v27 - v11;
  v14 = a1[3];
  v13 = a1[4];
  sub_5480(a1, v14);
  v15 = v37;
  dispatch thunk of Decoder.singleValueContainer()(v34, v14, v13);
  if (v15)
  {
    v16 = a1;
  }
  else
  {
    v28 = v9;
    v29 = a1;
    v17 = AssociatedTypeWitness;
    v27 = v12;
    v37 = v10;
    v18 = v35;
    v19 = v36;
    sub_5480(v34, v35);
    if ((dispatch thunk of SingleValueDecodingContainer.decodeNil()(v18, v19) & 1) != 0)
    {
      v20 = v27;
      (*(void (**)(uint64_t, uint64_t))(a3 + 24))(a2, a3);
      v21 = v37;
    }
    else
    {
      v22 = v35;
      v23 = v36;
      sub_5480(v34, v35);
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a3, a2, v17, &protocol requirements base descriptor for DecodeDefault.DefaultValueProviding, &associated conformance descriptor for DecodeDefault.DefaultValueProviding.DecodeDefault.DefaultValueProviding.Value: Decodable);
      v25 = v31;
      dispatch thunk of SingleValueDecodingContainer.decode<A>(_:)(v31, v17, v17, AssociatedConformanceWitness, v22, v23);
      v21 = v37;
      v20 = v27;
      (*(void (**)(char *, _QWORD *, uint64_t))(v30 + 32))(v27, v25, v17);
    }
    _s7BooksUI13AnyPagedFrameVwxx_0(v34);
    (*(void (**)(uint64_t, char *, uint64_t))(v21 + 32))(v32, v20, v28);
    v16 = v29;
  }
  return _s7BooksUI13AnyPagedFrameVwxx_0(v16);
}

uint64_t sub_178CB0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return _DecodeDefault_Wrapper.init(from:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a3);
}

uint64_t static _DecodeDefault_Wrapper<>.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a4, a3, &protocol requirements base descriptor for DecodeDefault.DefaultValueProviding, &associated type descriptor for DecodeDefault.DefaultValueProviding.Value);
  return dispatch thunk of static Equatable.== infix(_:_:)(a1, a2, AssociatedTypeWitness, a5) & 1;
}

uint64_t sub_178D30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static _DecodeDefault_Wrapper<>.== infix(_:_:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), *(_QWORD *)(a4 - 8));
}

uint64_t _DecodeDefault_Wrapper<>.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(_QWORD *)(a2 + 24), *(_QWORD *)(a2 + 16), &protocol requirements base descriptor for DecodeDefault.DefaultValueProviding, &associated type descriptor for DecodeDefault.DefaultValueProviding.Value);
  return dispatch thunk of Hashable.hash(into:)(a1, AssociatedTypeWitness, a3);
}

Swift::Int _DecodeDefault_Wrapper<>.hashValue.getter(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  _QWORD v6[9];

  Hasher.init(_seed:)(v6, 0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 16), &protocol requirements base descriptor for DecodeDefault.DefaultValueProviding, &associated type descriptor for DecodeDefault.DefaultValueProviding.Value);
  dispatch thunk of Hashable.hash(into:)(v6, AssociatedTypeWitness, a2);
  return Hasher._finalize()();
}

Swift::Int sub_178DFC(uint64_t a1, uint64_t a2)
{
  return _DecodeDefault_Wrapper<>.hashValue.getter(a1, *(_QWORD *)(a2 - 8));
}

uint64_t sub_178E04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _DecodeDefault_Wrapper<>.hash(into:)(a1, a2, *(_QWORD *)(a3 - 8));
}

Swift::Int sub_178E0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  _QWORD v6[9];

  v4 = *(_QWORD *)(a3 - 8);
  Hasher.init(_seed:)(v6, a1);
  _DecodeDefault_Wrapper<>.hash(into:)((uint64_t)v6, a2, v4);
  return Hasher._finalize()();
}

uint64_t _DecodeDefault_Wrapper<>.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t AssociatedTypeWitness;
  _QWORD v12[3];
  uint64_t v13;
  uint64_t v14;

  v6 = a1[3];
  v7 = a1[4];
  sub_5480(a1, v6);
  dispatch thunk of Encoder.singleValueContainer()(v12, v6, v7);
  v8 = v13;
  v9 = v14;
  sub_1244C((uint64_t)v12, v13);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(_QWORD *)(a2 + 24), *(_QWORD *)(a2 + 16), &protocol requirements base descriptor for DecodeDefault.DefaultValueProviding, &associated type descriptor for DecodeDefault.DefaultValueProviding.Value);
  dispatch thunk of SingleValueEncodingContainer.encode<A>(_:)(v3, AssociatedTypeWitness, a3, v8, v9);
  return _s7BooksUI13AnyPagedFrameVwxx_0(v12);
}

uint64_t sub_178F1C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return _DecodeDefault_Wrapper<>.encode(to:)(a1, a2, *(_QWORD *)(a3 - 8));
}

void sub_178F34(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0xE000000000000000;
}

uint64_t static DecodeDefault.Providers.UUIDString.defaultValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v0 = type metadata accessor for UUID(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = UUID.init()(v2);
  v6 = UUID.uuidString.getter(v5);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v0);
  return v6;
}

uint64_t sub_178FD0(uint64_t a1)
{
  return swift_getWitnessTable(&protocol conformance descriptor for <> _DecodeDefault_Wrapper<A>, a1);
}

void *sub_179008()
{
  return &protocol witness table for Bool;
}

void *sub_179014()
{
  return &protocol witness table for String;
}

uint64_t sub_179020@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;

  v2 = type metadata accessor for UUID(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = UUID.init()(v4);
  v8 = UUID.uuidString.getter(v7);
  v10 = v9;
  result = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  *a1 = v8;
  a1[1] = v10;
  return result;
}

ValueMetadata *type metadata accessor for DecodeDefault()
{
  return &type metadata for DecodeDefault;
}

ValueMetadata *type metadata accessor for DecodeDefault.Providers()
{
  return &type metadata for DecodeDefault.Providers;
}

uint64_t sub_1790D0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  result = swift_getAssociatedTypeWitness(319, *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 16), &protocol requirements base descriptor for DecodeDefault.DefaultValueProviding, &associated type descriptor for DecodeDefault.DefaultValueProviding.Value);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 0, 1, &v4, a1 + 32);
    return 0;
  }
  return result;
}

uint64_t *sub_17914C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(_QWORD *)(a3 + 24), *(_QWORD *)(a3 + 16), &protocol requirements base descriptor for DecodeDefault.DefaultValueProviding, &associated type descriptor for DecodeDefault.DefaultValueProviding.Value);
  v6 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v7 = *(_DWORD *)(v6 + 80);
  if (v7 <= 7 && *(_QWORD *)(v6 + 64) <= 0x18uLL && (*(_DWORD *)(v6 + 80) & 0x100000) == 0)
  {
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, AssociatedTypeWitness);
  }
  else
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v7 + 16) & ~v7));
    swift_retain(v10);
  }
  return a1;
}

uint64_t sub_1791E0(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(_QWORD *)(a2 + 24), *(_QWORD *)(a2 + 16), &protocol requirements base descriptor for DecodeDefault.DefaultValueProviding, &associated type descriptor for DecodeDefault.DefaultValueProviding.Value);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(a1, AssociatedTypeWitness);
}

uint64_t sub_17922C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(_QWORD *)(a3 + 24), *(_QWORD *)(a3 + 16), &protocol requirements base descriptor for DecodeDefault.DefaultValueProviding, &associated type descriptor for DecodeDefault.DefaultValueProviding.Value);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(a1, a2, AssociatedTypeWitness);
  return a1;
}

uint64_t sub_179284(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(_QWORD *)(a3 + 24), *(_QWORD *)(a3 + 16), &protocol requirements base descriptor for DecodeDefault.DefaultValueProviding, &associated type descriptor for DecodeDefault.DefaultValueProviding.Value);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 24))(a1, a2, AssociatedTypeWitness);
  return a1;
}

uint64_t sub_1792DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(_QWORD *)(a3 + 24), *(_QWORD *)(a3 + 16), &protocol requirements base descriptor for DecodeDefault.DefaultValueProviding, &associated type descriptor for DecodeDefault.DefaultValueProviding.Value);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 32))(a1, a2, AssociatedTypeWitness);
  return a1;
}

uint64_t sub_179334(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(_QWORD *)(a3 + 24), *(_QWORD *)(a3 + 16), &protocol requirements base descriptor for DecodeDefault.DefaultValueProviding, &associated type descriptor for DecodeDefault.DefaultValueProviding.Value);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 40))(a1, a2, AssociatedTypeWitness);
  return a1;
}

uint64_t sub_17938C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  int v10;
  unsigned int v11;
  int v12;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(_QWORD *)(a3 + 24), *(_QWORD *)(a3 + 16), &protocol requirements base descriptor for DecodeDefault.DefaultValueProviding, &associated type descriptor for DecodeDefault.DefaultValueProviding.Value);
  if (!a2)
    return 0;
  v6 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v7 = *(unsigned int *)(v6 + 84);
  if (a2 <= v7)
    goto LABEL_18;
  v8 = *(_QWORD *)(v6 + 64);
  v9 = 8 * v8;
  if (v8 <= 3)
  {
    v11 = ((a2 - v7 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      v10 = *(_DWORD *)(a1 + v8);
      if (!v10)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v11 > 0xFF)
    {
      v10 = *(unsigned __int16 *)(a1 + v8);
      if (!*(_WORD *)(a1 + v8))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v11 < 2)
    {
LABEL_18:
      if ((_DWORD)v7)
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, v7, AssociatedTypeWitness);
      return 0;
    }
  }
  v10 = *(unsigned __int8 *)(a1 + v8);
  if (!*(_BYTE *)(a1 + v8))
    goto LABEL_18;
LABEL_11:
  v12 = (v10 - 1) << v9;
  if (v8 > 3)
    v12 = 0;
  if ((_DWORD)v8)
  {
    if (v8 > 3)
      LODWORD(v8) = 4;
    __asm { BR              X11 }
  }
  return (v7 + v12 + 1);
}

void sub_1794CC(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7;
  unsigned int v8;
  size_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;

  v7 = *(_QWORD *)(swift_getAssociatedTypeWitness(0, *(_QWORD *)(a4 + 24), *(_QWORD *)(a4 + 16), &protocol requirements base descriptor for DecodeDefault.DefaultValueProviding, &associated type descriptor for DecodeDefault.DefaultValueProviding.Value)- 8);
  v8 = *(_DWORD *)(v7 + 84);
  v9 = *(_QWORD *)(v7 + 64);
  if (a3 <= v8)
  {
    v10 = 0;
  }
  else if (v9 <= 3)
  {
    v12 = ((a3 - v8 + ~(-1 << (8 * v9))) >> (8 * v9)) + 1;
    if (HIWORD(v12))
    {
      v10 = &dword_4;
    }
    else if (v12 >= 0x100)
    {
      v10 = 2;
    }
    else
    {
      v10 = v12 > 1;
    }
  }
  else
  {
    v10 = &dword_0 + 1;
  }
  if (v8 < a2)
  {
    v11 = ~v8 + a2;
    if (v9 < 4)
    {
      if ((_DWORD)v9)
      {
        v13 = v11 & ~(-1 << (8 * v9));
        bzero(a1, v9);
        if ((_DWORD)v9 == 3)
        {
          *(_WORD *)a1 = v13;
          a1[2] = BYTE2(v13);
        }
        else if ((_DWORD)v9 == 2)
        {
          *(_WORD *)a1 = v13;
        }
        else
        {
          *a1 = v13;
        }
      }
    }
    else
    {
      bzero(a1, v9);
      *(_DWORD *)a1 = v11;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

ValueMetadata *type metadata accessor for DecodeDefault.Providers.True()
{
  return &type metadata for DecodeDefault.Providers.True;
}

ValueMetadata *type metadata accessor for DecodeDefault.Providers.False()
{
  return &type metadata for DecodeDefault.Providers.False;
}

ValueMetadata *type metadata accessor for DecodeDefault.Providers.EmptyString()
{
  return &type metadata for DecodeDefault.Providers.EmptyString;
}

ValueMetadata *type metadata accessor for DecodeDefault.Providers.UUIDString()
{
  return &type metadata for DecodeDefault.Providers.UUIDString;
}

uint64_t static ComponentKinds.table.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  if (qword_25DD18 != -1)
    swift_once(&qword_25DD18, sub_179750);
  v0 = qword_269688;
  v1 = sub_5440(&qword_269698);
  OSAllocatedUnfairLock.valueWithLock.getter(&v3, v0, v1);
  return v3;
}

uint64_t sub_179750()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  if (qword_25DD20 != -1)
    swift_once(&qword_25DD20, sub_1797C4);
  v0 = qword_269690;
  v1 = sub_5440(&qword_2696A8);
  v2 = swift_allocObject(v1, 28, 7);
  *(_DWORD *)(v2 + 24) = 0;
  *(_QWORD *)(v2 + 16) = v0;
  qword_269688 = v2;
  return swift_bridgeObjectRetain(v0);
}

unint64_t sub_1797C4()
{
  unint64_t result;

  result = sub_952C((uint64_t)_swiftEmptyArrayStorage);
  qword_269690 = result;
  return result;
}

void static ComponentKinds.register<A>(_:name:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v10;
  os_unfair_lock_s *v11;

  if (qword_25DD18 != -1)
    swift_once(&qword_25DD18, sub_179750);
  v10 = (_QWORD *)(qword_269688 + 16);
  v11 = (os_unfair_lock_s *)(qword_269688 + 24);
  os_unfair_lock_lock((os_unfair_lock_t)(qword_269688 + 24));
  sub_179898(v10, a2, a3, a1, a4, a5);
  os_unfair_lock_unlock(v11);
}

uint64_t sub_179898(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  char isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  uint64_t v14;

  swift_bridgeObjectRetain(a3);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a1);
  v14 = *a1;
  *a1 = 0x8000000000000000;
  sub_B08C(a4, a6, a2, a3, isUniquelyReferenced_nonNull_native);
  v12 = *a1;
  *a1 = v14;
  swift_bridgeObjectRelease(a3);
  return swift_bridgeObjectRelease(v12);
}

unint64_t sub_17993C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v5;

  if (qword_25DD18 != -1)
    swift_once(&qword_25DD18, sub_179750);
  v0 = qword_269688;
  v1 = sub_5440(&qword_269698);
  OSAllocatedUnfairLock.valueWithLock.getter(&v5, v0, v1);
  v2 = v5;
  v3 = sub_93E44(v5);
  swift_bridgeObjectRelease(v2);
  return v3;
}

_QWORD *sub_1799C4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  return sub_9382C(a1, a2, a3);
}

void static ComponentModel.registerComponentKind(name:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  static ComponentKinds.register<A>(_:name:)(a3, a1, a2, a3, a4);
}

unint64_t sub_1799F4()
{
  unint64_t result;

  result = qword_2696A0;
  if (!qword_2696A0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ComponentKinds, &type metadata for ComponentKinds);
    atomic_store(result, (unint64_t *)&qword_2696A0);
  }
  return result;
}

ValueMetadata *type metadata accessor for ComponentKinds()
{
  return &type metadata for ComponentKinds;
}

__n128 PageUpdateInstruction.ShelfItemUpdateDescriptor.init(items:shelfID:paginationUpdate:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  __n128 result;
  __int128 v6;
  uint64_t v7;
  char v8;

  result = *(__n128 *)a4;
  v6 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)(a5 + 24) = *(_OWORD *)a4;
  v7 = *(_QWORD *)(a4 + 32);
  v8 = *(_BYTE *)(a4 + 40);
  *(_QWORD *)a5 = a1;
  *(_QWORD *)(a5 + 8) = a2;
  *(_QWORD *)(a5 + 16) = a3;
  *(_OWORD *)(a5 + 40) = v6;
  *(_QWORD *)(a5 + 56) = v7;
  *(_BYTE *)(a5 + 64) = v8;
  return result;
}

uint64_t PageUpdateInstruction.ShelfItemRemovalDescriptor.init(itemIDs:shelfID:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  *a4 = result;
  a4[1] = a2;
  a4[2] = a3;
  return result;
}

uint64_t PageUpdateInstruction.ShelfHeaderFooterUpdateDescriptor.init(model:shelfID:)@<X0>(__int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;

  result = sub_AC68(a1, a4);
  *(_QWORD *)(a4 + 40) = a2;
  *(_QWORD *)(a4 + 48) = a3;
  return result;
}

uint64_t PageUpdateAction.instructionIntent.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  __int128 v5;
  uint64_t updated;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v11[3];

  v4 = v2 + *(int *)(a1 + 56);
  v5 = *(_OWORD *)(a1 + 32);
  v11[0] = *(_OWORD *)(a1 + 16);
  v11[1] = v5;
  updated = type metadata accessor for PageUpdateInstruction(255, (uint64_t)v11);
  v9 = type metadata accessor for CodeAnyIntentModel(0, updated, v7, v8);
  (*(void (**)(__int128 *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v11, v4, v9);
  return sub_AC68(v11, a2);
}

uint64_t type metadata accessor for PageUpdateInstruction(uint64_t a1, uint64_t a2)
{
  return swift_getGenericMetadata(a1, a2, &nominal type descriptor for PageUpdateInstruction);
}

uint64_t PageUpdateAction.clickData.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_C7F0C(v2 + *(int *)(a1 + 52), a2);
}

uint64_t sub_179B40@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  __int128 v4;
  uint64_t updated;
  _OWORD v7[2];

  v4 = *(_OWORD *)(a2 + a1 - 16);
  v7[0] = *(_OWORD *)(a2 + a1 - 32);
  v7[1] = v4;
  updated = type metadata accessor for PageUpdateAction(0, (uint64_t)v7);
  return PageUpdateAction.instructionIntent.getter(updated, a3);
}

uint64_t sub_179B88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t updated;
  __int128 v6;
  __int128 v7;
  _OWORD v8[2];
  __int128 v9[2];

  v6 = *(_OWORD *)(a4 + a3 - 16);
  v7 = *(_OWORD *)(a4 + a3 - 32);
  sub_BD00(a1, (uint64_t)v9);
  v8[0] = v7;
  v8[1] = v6;
  updated = type metadata accessor for PageUpdateAction(0, (uint64_t)v8);
  return sub_179BE8(v9, updated);
}

uint64_t sub_179BE8(__int128 *a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;

  v4 = (_QWORD *)(v2 + *(int *)(a2 + 56));
  _s7BooksUI13AnyPagedFrameVwxx_0(v4);
  return sub_AC68(a1, (uint64_t)v4);
}

uint64_t PageUpdateAction.animated.getter(uint64_t a1)
{
  uint64_t v1;

  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 60));
}

uint64_t PageUpdateAction.init(actionMetrics:instructionIntent:animated:clickData:)@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v18;
  int *updated;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v18 = type metadata accessor for ActionMetrics(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(a9, a1, v18);
  v22 = a5;
  v23 = a6;
  v24 = a7;
  v25 = a8;
  updated = (int *)type metadata accessor for PageUpdateAction(0, (uint64_t)&v22);
  v20 = a9 + updated[14];
  v22 = a5;
  v23 = a6;
  v24 = a7;
  v25 = a8;
  type metadata accessor for PageUpdateInstruction(0, (uint64_t)&v22);
  ListItemAccessoryMoreButton.init(assetInfo:)(a2, v20);
  *(_BYTE *)(a9 + updated[15]) = a3;
  return sub_C7EC4(a4, a9 + updated[13]);
}

uint64_t type metadata accessor for PageUpdateAction(uint64_t a1, uint64_t a2)
{
  return swift_getGenericMetadata(a1, a2, &nominal type descriptor for PageUpdateAction);
}

uint64_t PageUpdateAction.init(actionMetrics:instruction:animated:clickData:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t updated;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t WitnessTable;

  v23 = a7;
  v24 = a8;
  v26 = a4;
  *(_QWORD *)&v27 = a5;
  v25 = a3;
  v22 = a9;
  *((_QWORD *)&v27 + 1) = a6;
  v28 = a7;
  v29 = a8;
  updated = type metadata accessor for PageUpdateInstruction(0, (uint64_t)&v27);
  v14 = *(_QWORD *)(updated - 8);
  __chkstk_darwin(updated);
  v16 = (char *)&v22 - v15;
  v17 = type metadata accessor for ActionMetrics(0);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v20 = (char *)&v22 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v20, a1, v17);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, a2, updated);
  v29 = type metadata accessor for StaticIntent(0, updated);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for StaticIntent<A>, v29);
  sub_C404(&v27);
  StaticIntent.init(_:)(v16, updated);
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(a2, updated);
  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(a1, v17);
  return PageUpdateAction.init(actionMetrics:instructionIntent:animated:clickData:)((uint64_t)v20, &v27, v25, v26, a5, a6, v23, v24, v22);
}

BOOL sub_179E94(char a1, char a2)
{
  return a1 == a2;
}

void sub_179EA4(uint64_t a1, unsigned __int8 a2)
{
  Hasher._combine(_:)(a2);
}

uint64_t sub_179EC8(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  char v9;

  if (a1 == 0x654D6E6F69746361 && a2 == 0xED00007363697274)
  {
    v5 = 0xED00007363697274;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x654D6E6F69746361, 0xED00007363697274, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x7461446B63696C63 && a2 == 0xE900000000000061)
  {
    v7 = 0xE900000000000061;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7461446B63696C63, 0xE900000000000061, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0xD000000000000011)
  {
    v8 = 0x80000000001FE1C0;
    if (a2 == 0x80000000001FE1C0)
      goto LABEL_19;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x80000000001FE1C0, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_19:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if (a1 == 0x646574616D696E61 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease(0xE800000000000000);
    return 3;
  }
  else
  {
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(0x646574616D696E61, 0xE800000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v9 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

Swift::Int sub_17A0A8(unsigned __int8 a1)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(a1);
  return Hasher._finalize()();
}

uint64_t sub_17A0EC(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_17A12C + 4 * byte_1F31A0[a1]))(0x654D6E6F69746361, 0xED00007363697274);
}

uint64_t sub_17A12C()
{
  return 0x7461446B63696C63;
}

unint64_t sub_17A148()
{
  return 0xD000000000000011;
}

uint64_t sub_17A164()
{
  return 0x646574616D696E61;
}

BOOL sub_17A17C(char *a1, char *a2)
{
  return sub_179E94(*a1, *a2);
}

Swift::Int sub_17A194()
{
  unsigned __int8 *v0;

  return sub_17A0A8(*v0);
}

void sub_17A1A4(uint64_t a1)
{
  unsigned __int8 *v1;

  sub_179EA4(a1, *v1);
}

Swift::Int sub_17A1B4(uint64_t a1)
{
  unsigned __int8 *v1;
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, a1);
  sub_179EA4((uint64_t)v3, *v1);
  return Hasher._finalize()();
}

uint64_t sub_17A1FC()
{
  unsigned __int8 *v0;

  return sub_17A0EC(*v0);
}

uint64_t sub_17A20C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_179EC8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_17A23C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_13870C();
  *a1 = result;
  return result;
}

uint64_t sub_17A26C(uint64_t a1)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_1F3B50, a1);
  return CodingKey.description.getter(a1, WitnessTable);
}

uint64_t sub_17A2A0(uint64_t a1)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_1F3B50, a1);
  return CodingKey.debugDescription.getter(a1, WitnessTable);
}

uint64_t PageUpdateAction.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t updated;
  uint64_t WitnessTable;
  uint64_t v16;
  char *v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, _QWORD *, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  __int128 v41;
  uint64_t v42;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  char *v56;
  uint64_t v57;
  _QWORD v58[4];
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  _QWORD *v62;

  v46 = a6;
  v11 = sub_5440(&qword_25E828);
  __chkstk_darwin(v11);
  v50 = (char *)&v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = type metadata accessor for ActionMetrics(0);
  v48 = *(_QWORD *)(v54 - 8);
  __chkstk_darwin(v54);
  v55 = (char **)((char *)&v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  *(_QWORD *)&v59 = a2;
  *((_QWORD *)&v59 + 1) = a3;
  *(_QWORD *)&v60 = a4;
  *((_QWORD *)&v60 + 1) = a5;
  updated = type metadata accessor for PageUpdateAction.CodingKeys(255, (uint64_t)&v59);
  WitnessTable = swift_getWitnessTable(&unk_1F3B50, updated);
  v57 = type metadata accessor for KeyedDecodingContainer(0, updated);
  v49 = *(_QWORD *)(v57 - 8);
  __chkstk_darwin(v57);
  v17 = (char *)&v44 - v16;
  v47 = a2;
  *(_QWORD *)&v59 = a2;
  *((_QWORD *)&v59 + 1) = a3;
  v51 = a3;
  v52 = a4;
  *(_QWORD *)&v60 = a4;
  *((_QWORD *)&v60 + 1) = a5;
  v53 = a5;
  v18 = (int *)type metadata accessor for PageUpdateAction(0, (uint64_t)&v59);
  v19 = *((_QWORD *)v18 - 1);
  __chkstk_darwin(v18);
  v21 = (char *)&v44 - v20;
  v23 = a1[3];
  v22 = a1[4];
  sub_5480(a1, v23);
  v56 = v17;
  v24 = v62;
  dispatch thunk of Decoder.container<A>(keyedBy:)(updated, updated, WitnessTable, v23, v22);
  if (v24)
    return _s7BooksUI13AnyPagedFrameVwxx_0(a1);
  v25 = (uint64_t)v50;
  v45 = v19;
  v26 = v51;
  v27 = v52;
  v62 = a1;
  v28 = v53;
  LOBYTE(v59) = 0;
  v29 = sub_6FD0(&qword_2634C0, (uint64_t (*)(uint64_t))&type metadata accessor for ActionMetrics, (uint64_t)&protocol conformance descriptor for ActionMetrics);
  v30 = v54;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v55, v54, &v59, v57, v54, v29);
  v31 = *(void (**)(char *, _QWORD *, uint64_t))(v48 + 32);
  v44 = v21;
  v31(v21, v55, v30);
  v32 = type metadata accessor for ClickData(0);
  LOBYTE(v59) = 1;
  v33 = sub_6FD0(&qword_265020, (uint64_t (*)(uint64_t))&type metadata accessor for ClickData, (uint64_t)&protocol conformance descriptor for ClickData);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v32, &v59, v57, v32, v33);
  sub_C7EC4(v25, (uint64_t)&v44[v18[13]]);
  v58[0] = v47;
  v58[1] = v26;
  v58[2] = v27;
  v58[3] = v28;
  v34 = type metadata accessor for PageUpdateInstruction(255, (uint64_t)v58);
  v37 = type metadata accessor for CodeAnyIntentModel(0, v34, v35, v36);
  LOBYTE(v58[0]) = 2;
  v38 = swift_getWitnessTable(&protocol conformance descriptor for CodeAnyIntentModel<A>, v37);
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v59, v37, v58, v57, v37, v38);
  v39 = v44;
  v40 = &v44[v18[14]];
  v41 = v60;
  *(_OWORD *)v40 = v59;
  *((_OWORD *)v40 + 1) = v41;
  *((_QWORD *)v40 + 4) = v61;
  LOBYTE(v59) = 3;
  LOBYTE(v37) = KeyedDecodingContainer.decode(_:forKey:)(&v59, v57);
  (*(void (**)(char *, uint64_t))(v49 + 8))(v56, v57);
  v39[v18[15]] = v37 & 1;
  v42 = v45;
  (*(void (**)(uint64_t, char *, int *))(v45 + 16))(v46, v39, v18);
  _s7BooksUI13AnyPagedFrameVwxx_0(v62);
  return (*(uint64_t (**)(char *, int *))(v42 + 8))(v39, v18);
}

uint64_t type metadata accessor for PageUpdateAction.CodingKeys(uint64_t a1, uint64_t a2)
{
  return swift_getGenericMetadata(a1, a2, &nominal type descriptor for PageUpdateAction.CodingKeys);
}

uint64_t sub_17A7B4(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_5440(&qword_25E828);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_17A7F8@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  return PageUpdateAction.init(from:)(a1, a2[2], a2[3], a2[4], a2[5], a3);
}

uint64_t PageUpdateInstruction.ShelfItemRemovalDescriptor.shelfID.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 16));
  return v1;
}

uint64_t PageUpdateInstruction.ShelfItemUpdateDescriptor.paginationUpdate.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;

  v2 = *(_QWORD *)(v1 + 24);
  v3 = *(_QWORD *)(v1 + 32);
  v4 = *(_QWORD *)(v1 + 40);
  v5 = *(_QWORD *)(v1 + 48);
  v6 = *(_QWORD *)(v1 + 56);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = v6;
  v7 = *(_BYTE *)(v1 + 64);
  *(_BYTE *)(a1 + 40) = v7;
  return sub_17A86C(v2, v3, v4, v5, v6, v7);
}

uint64_t sub_17A86C(uint64_t result, uint64_t a2, char a3, uint64_t a4, uint64_t a5, unsigned __int8 a6)
{
  if (a3 != -1)
  {
    sub_17A8BC(result, a2, a3 & 1);
    return sub_17A8C8(a4, a5, a6);
  }
  return result;
}

uint64_t sub_17A8BC(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) == 0)
    a1 = a2;
  return swift_bridgeObjectRetain(a1);
}

uint64_t sub_17A8C8(uint64_t result, uint64_t a2, unsigned __int8 a3)
{
  if (a3 != 255)
    return sub_17A8BC(result, a2, a3 & 1);
  return result;
}

BOOL PageUpdateInstruction.affectsPageVisibility.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  _BOOL8 v5;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 - 8);
  __chkstk_darwin(a1);
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v2 + 16))(v4);
  v5 = swift_getEnumCaseMultiPayload(v4, a1) == 0;
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, a1);
  return v5;
}

uint64_t PaginationUpdate.source.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;

  v2 = *(_QWORD *)v1;
  v3 = *(_QWORD *)(v1 + 8);
  v4 = *(_BYTE *)(v1 + 16);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = v4;
  return sub_17A8BC(v2, v3, v4);
}

uint64_t PaginationUpdate.next.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 v4;

  v2 = *(_QWORD *)(v1 + 24);
  v3 = *(_QWORD *)(v1 + 32);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_BYTE *)(v1 + 40);
  *(_BYTE *)(a1 + 16) = v4;
  return sub_17A8C8(v2, v3, v4);
}

__n128 PaginationUpdate.init(source:next:)@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X1>, uint64_t a3@<X8>)
{
  char v3;
  unsigned __int8 v4;
  __n128 result;

  v3 = *(_BYTE *)(a1 + 16);
  v4 = a2[1].n128_u8[0];
  *(_OWORD *)a3 = *(_OWORD *)a1;
  *(_BYTE *)(a3 + 16) = v3;
  result = *a2;
  *(__n128 *)(a3 + 24) = *a2;
  *(_BYTE *)(a3 + 40) = v4;
  return result;
}

uint64_t sub_17A9BC()
{
  _BYTE *v0;

  if (*v0)
    return 1954047342;
  else
    return 0x656372756F73;
}

uint64_t sub_17A9EC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_17F568(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_17AA10(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_17ABD8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_17AA38(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_17ABD8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t PaginationUpdate.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  int v24;
  char v25;

  v3 = sub_5440(&qword_2696B0);
  v20 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v6 = v1[1];
  v8 = *((_BYTE *)v1 + 16);
  v9 = v1[3];
  v17 = v1[4];
  v18 = v9;
  v24 = *((unsigned __int8 *)v1 + 40);
  v10 = a1[3];
  v11 = a1[4];
  sub_5480(a1, v10);
  v12 = sub_17ABD8();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for PaginationUpdate.CodingKeys, &type metadata for PaginationUpdate.CodingKeys, v12, v10, v11);
  v21 = v7;
  v22 = v6;
  v23 = v8;
  v25 = 0;
  v13 = sub_17AC1C();
  v14 = v19;
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v21, &v25, v3, &type metadata for PaginationInfo, v13);
  if (!v14)
  {
    v21 = v18;
    v22 = v17;
    v23 = v24;
    v25 = 1;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v21, &v25, v3, &type metadata for PaginationInfo, v13);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v5, v3);
}

unint64_t sub_17ABD8()
{
  unint64_t result;

  result = qword_2696B8;
  if (!qword_2696B8)
  {
    result = swift_getWitnessTable(&unk_1F3B00, &type metadata for PaginationUpdate.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2696B8);
  }
  return result;
}

unint64_t sub_17AC1C()
{
  unint64_t result;

  result = qword_2696C0;
  if (!qword_2696C0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for PaginationInfo, &type metadata for PaginationInfo);
    atomic_store(result, (unint64_t *)&qword_2696C0);
  }
  return result;
}

uint64_t PaginationUpdate.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  char v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 v23;
  int v24;
  char v25;

  v5 = sub_5440(&qword_2696C8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_5480(a1, v9);
  v11 = sub_17ABD8();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for PaginationUpdate.CodingKeys, &type metadata for PaginationUpdate.CodingKeys, v11, v9, v10);
  if (v2)
    return _s7BooksUI13AnyPagedFrameVwxx_0(a1);
  v25 = 0;
  v12 = sub_17AE94();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v21, &type metadata for PaginationInfo, &v25, v5, &type metadata for PaginationInfo, v12);
  v13 = v22;
  v25 = 1;
  v20 = v21;
  v24 = v23;
  sub_17A8BC(v21, v22, v23);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&type metadata for PaginationInfo, &v25, v5, &type metadata for PaginationInfo, v12);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v14 = v21;
  v15 = v22;
  v16 = v23;
  v17 = v20;
  v18 = v24;
  sub_17A8BC(v20, v13, v24);
  sub_17A8C8(v14, v15, v16);
  sub_17AED8(v17, v13, v18);
  *(_QWORD *)a2 = v17;
  *(_QWORD *)(a2 + 8) = v13;
  *(_BYTE *)(a2 + 16) = v18;
  *(_QWORD *)(a2 + 24) = v14;
  *(_QWORD *)(a2 + 32) = v15;
  *(_BYTE *)(a2 + 40) = v16;
  _s7BooksUI13AnyPagedFrameVwxx_0(a1);
  sub_17AED8(v17, v13, v18);
  return sub_17AEE4(v14, v15, v16);
}

unint64_t sub_17AE94()
{
  unint64_t result;

  result = qword_2696D0;
  if (!qword_2696D0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for PaginationInfo, &type metadata for PaginationInfo);
    atomic_store(result, (unint64_t *)&qword_2696D0);
  }
  return result;
}

uint64_t sub_17AED8(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) == 0)
    a1 = a2;
  return swift_bridgeObjectRelease(a1);
}

uint64_t sub_17AEE4(uint64_t result, uint64_t a2, unsigned __int8 a3)
{
  if (a3 != 255)
    return sub_17AED8(result, a2, a3 & 1);
  return result;
}

uint64_t sub_17AEFC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return PaginationUpdate.init(from:)(a1, a2);
}

uint64_t sub_17AF10(_QWORD *a1)
{
  return PaginationUpdate.encode(to:)(a1);
}

uint64_t sub_17AF28()
{
  _BYTE *v0;

  if (*v0)
    return 0x657373417478656ELL;
  else
    return 0x666572487478656ELL;
}

uint64_t sub_17AF6C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_17F640(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_17AF90(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_17C8E0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_17AFB8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_17C8E0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_17AFE8()
{
  return 12383;
}

uint64_t sub_17AFF8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_17C924();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_17B020(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_17C924();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_17B048@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v6;
  uint64_t result;
  char v8;

  if (a1 == 12383 && a2 == 0xE200000000000000)
  {
    result = swift_bridgeObjectRelease(0xE200000000000000);
    v8 = 0;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(12383, 0xE200000000000000, a1, a2, 0);
    result = swift_bridgeObjectRelease(a2);
    v8 = v6 ^ 1;
  }
  *a3 = v8 & 1;
  return result;
}

uint64_t sub_17B0C4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_17C968();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_17B0EC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_17C968();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t PaginationInfo.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  char v35;

  v3 = sub_5440(&qword_2696D8);
  v28 = *(_QWORD *)(v3 - 8);
  v29 = v3;
  __chkstk_darwin(v3);
  v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_5440(&qword_2696E0);
  v27 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_5440(&qword_2696E8);
  v31 = *(_QWORD *)(v9 - 8);
  v32 = v9;
  __chkstk_darwin(v9);
  v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = *v1;
  v26 = v1[1];
  v12 = *((_BYTE *)v1 + 16);
  v13 = a1[3];
  v14 = a1[4];
  sub_5480(a1, v13);
  v15 = sub_17C8E0();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for PaginationInfo.CodingKeys, &type metadata for PaginationInfo.CodingKeys, v15, v13, v14);
  if ((v12 & 1) != 0)
  {
    v35 = 1;
    v16 = sub_17C924();
    v17 = v32;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for PaginationInfo.NextAssetIDsCodingKeys, &v35, v32, &type metadata for PaginationInfo.NextAssetIDsCodingKeys, v16);
    v33 = v30;
    v18 = sub_5440(&qword_25DF80);
    v19 = sub_17C9AC(&qword_269700, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> [A]);
    v20 = v29;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v33, v21, v29, v18, v19);
    (*(void (**)(char *, uint64_t))(v28 + 8))(v5, v20);
  }
  else
  {
    v34 = 0;
    v22 = sub_17C968();
    v17 = v32;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for PaginationInfo.NextHrefCodingKeys, &v34, v32, &type metadata for PaginationInfo.NextHrefCodingKeys, v22);
    KeyedEncodingContainer.encode(_:forKey:)(v30, v26, v23, v6);
    (*(void (**)(char *, uint64_t))(v27 + 8))(v8, v6);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v31 + 8))(v11, v17);
}

uint64_t PaginationInfo.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  char v52;

  v44 = a2;
  v3 = sub_5440(&qword_269710);
  v4 = *(_QWORD *)(v3 - 8);
  v45 = v3;
  v46 = v4;
  __chkstk_darwin(v3);
  v47 = (char *)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_5440(&qword_269718);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_5440(&qword_269720);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1[3];
  v15 = a1[4];
  v48 = a1;
  sub_5480(a1, v14);
  v16 = sub_17C8E0();
  v17 = v49;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for PaginationInfo.CodingKeys, &type metadata for PaginationInfo.CodingKeys, v16, v14, v15);
  if (!v17)
  {
    v18 = v7;
    v19 = v6;
    v20 = v47;
    v49 = v11;
    v21 = KeyedDecodingContainer.allKeys.getter(v10);
    if (*(_QWORD *)(v21 + 16) == 1)
    {
      v22 = *(_BYTE *)(v21 + 32);
      v43 = v21;
      if ((v22 & 1) != 0)
      {
        v52 = 1;
        v23 = sub_17C924();
        v24 = v20;
        KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for PaginationInfo.NextAssetIDsCodingKeys, &v52, v10, &type metadata for PaginationInfo.NextAssetIDsCodingKeys, v23);
        v25 = sub_5440(&qword_25DF80);
        v26 = sub_17C9AC((unint64_t *)&qword_2637D8, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> [A]);
        v27 = v45;
        KeyedDecodingContainer.decode<A>(_:forKey:)(&v50, v25, v28, v45, v25, v26);
        (*(void (**)(char *, uint64_t))(v46 + 8))(v24, v27);
        swift_bridgeObjectRelease(v43);
        (*(void (**)(char *, uint64_t))(v49 + 8))(v13, v10);
        v29 = 0;
        v30 = v50;
      }
      else
      {
        v51 = 0;
        v37 = sub_17C968();
        v38 = v9;
        v39 = KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for PaginationInfo.NextHrefCodingKeys, &v51, v10, &type metadata for PaginationInfo.NextHrefCodingKeys, v37);
        v47 = (char *)v10;
        v30 = KeyedDecodingContainer.decode(_:forKey:)(v39, v19);
        v29 = v41;
        (*(void (**)(char *, uint64_t))(v18 + 8))(v38, v19);
        swift_bridgeObjectRelease(v43);
        (*(void (**)(char *, char *))(v49 + 8))(v13, v47);
      }
      v42 = v44;
      *v44 = v30;
      v42[1] = v29;
      *((_BYTE *)v42 + 16) = v22;
    }
    else
    {
      v31 = v21;
      v32 = type metadata accessor for DecodingError(0);
      swift_allocError(v32, &protocol witness table for DecodingError, 0, 0);
      v34 = v33;
      sub_5440(&qword_25F8F8);
      *v34 = &type metadata for PaginationInfo;
      v35 = KeyedDecodingContainer.codingPath.getter(v10);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)(v35, 0xD00000000000002BLL, 0x80000000001FB7C0, 0);
      v36 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v32 - 8) + 104))(v34, enum case for DecodingError.typeMismatch(_:), v32);
      swift_willThrow(v36);
      swift_bridgeObjectRelease(v31);
      (*(void (**)(char *, uint64_t))(v49 + 8))(v13, v10);
    }
  }
  return _s7BooksUI13AnyPagedFrameVwxx_0(v48);
}

uint64_t sub_17B770@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return PaginationInfo.init(from:)(a1, a2);
}

uint64_t sub_17B784(_QWORD *a1)
{
  return PaginationInfo.encode(to:)(a1);
}

unint64_t PageUpdateAction.description.getter(uint64_t a1)
{
  Swift::String v2;
  void *object;
  Swift::String v4;
  Swift::String v5;
  void *v6;
  Swift::String v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  Swift::String v12;
  void *v13;
  _QWORD v15[3];
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[3];
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;

  v18[0] = 0;
  v18[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(46);
  swift_bridgeObjectRelease(0xE000000000000000);
  v21 = 0xD000000000000011;
  v22 = 0x80000000001FE050;
  v2._countAndFlagsBits = _typeName(_:qualified:)(*(_QWORD *)(a1 + 16), 0);
  object = v2._object;
  String.append(_:)(v2);
  swift_bridgeObjectRelease(object);
  v4._countAndFlagsBits = 8236;
  v4._object = (void *)0xE200000000000000;
  String.append(_:)(v4);
  v5._countAndFlagsBits = _typeName(_:qualified:)(*(_QWORD *)(a1 + 24), 0);
  v6 = v5._object;
  String.append(_:)(v5);
  swift_bridgeObjectRelease(v6);
  v7._countAndFlagsBits = 0xD000000000000015;
  v7._object = (void *)0x80000000001FE070;
  String.append(_:)(v7);
  PageUpdateAction.instructionIntent.getter(a1, (uint64_t)v18);
  v8 = v19;
  v9 = v20;
  sub_5480(v18, v19);
  dispatch thunk of IntentModel._canonicalized.getter(v15, v8, v9);
  v10 = v16;
  v11 = v17;
  sub_5480(v15, v16);
  v12._countAndFlagsBits = dispatch thunk of IntentModel.kind.getter(v10, v11);
  v13 = v12._object;
  String.append(_:)(v12);
  swift_bridgeObjectRelease(v13);
  _s7BooksUI13AnyPagedFrameVwxx_0(v15);
  _s7BooksUI13AnyPagedFrameVwxx_0(v18);
  return v21;
}

void PageUpdateInstruction.description.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;

  v3 = type metadata accessor for BooksAlertAction.Button(0);
  __chkstk_darwin(v3);
  v4 = type metadata accessor for BooksAlertAction(0);
  v5 = __chkstk_darwin(v4);
  __chkstk_darwin(v5);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v7, v1, a1);
  v9 = (char *)sub_17BA00 + 4 * word_1F31A4[swift_getEnumCaseMultiPayload(v7, a1)];
  __asm { BR              X10 }
}

uint64_t sub_17BA00()
{
  uint64_t v0;
  __int128 *v1;
  uint64_t v2;
  uint64_t v3;
  Swift::String v4;
  void *object;
  Swift::String v6;
  uint64_t v7;

  sub_AC68(v1, v0 + 240);
  strcpy((char *)(v0 + 32), "replacePage(");
  *(_BYTE *)(v0 + 45) = 0;
  *(_WORD *)(v0 + 46) = -5120;
  v2 = *(_QWORD *)(v0 + 264);
  v3 = *(_QWORD *)(v0 + 272);
  sub_5480((_QWORD *)(v0 + 240), v2);
  v4._countAndFlagsBits = dispatch thunk of IntentModel.kind.getter(v2, v3);
  object = v4._object;
  String.append(_:)(v4);
  swift_bridgeObjectRelease(object);
  v6._countAndFlagsBits = 41;
  v6._object = (void *)0xE100000000000000;
  String.append(_:)(v6);
  v7 = *(_QWORD *)(v0 + 32);
  _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)(v0 + 240));
  return v7;
}

void sub_17C194()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t *v2;
  int *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  Swift::String v11;
  Swift::String v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  Swift::String v17;
  Swift::String v18;
  uint64_t v19;
  int64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  void *v33;
  void *v34;
  Swift::String v35;
  Swift::String v36;

  sub_17CA64(v4, v6);
  v0[30] = 0;
  v0[31] = 0xE000000000000000;
  _StringGuts.grow(_:)(50);
  swift_bridgeObjectRelease(v0[31]);
  v0[30] = v1;
  v0[31] = 0x80000000001FE090;
  v7 = (uint64_t *)(v6 + v3[5]);
  v8 = v7[1];
  if (v8)
  {
    v9 = *v7;
    v10 = (void *)v7[1];
  }
  else
  {
    v9 = 0x6E776F6E6B6E753CLL;
    v10 = (void *)0xE90000000000003ELL;
  }
  swift_bridgeObjectRetain(v8);
  v11._countAndFlagsBits = v9;
  v11._object = v10;
  String.append(_:)(v11);
  swift_bridgeObjectRelease(v10);
  v12._countAndFlagsBits = 0x67617373656D202CLL;
  v12._object = (void *)0xEB00000000203A65;
  String.append(_:)(v12);
  v13 = (uint64_t *)(v6 + v3[6]);
  v14 = v13[1];
  if (v14)
  {
    v15 = *v13;
    v16 = (void *)v13[1];
  }
  else
  {
    v15 = 0x6E776F6E6B6E753CLL;
    v16 = (void *)0xE90000000000003ELL;
  }
  swift_bridgeObjectRetain(v14);
  v17._countAndFlagsBits = v15;
  v17._object = v16;
  String.append(_:)(v17);
  swift_bridgeObjectRelease(v16);
  v18._object = (void *)0xEB00000000203A73;
  v18._countAndFlagsBits = 0x6E6F74747562202CLL;
  String.append(_:)(v18);
  v19 = *(_QWORD *)(v6 + v3[7]);
  v20 = *(_QWORD *)(v19 + 16);
  v21 = _swiftEmptyArrayStorage;
  if (v20)
  {
    v0[2] = v6;
    v0[4] = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain(v19);
    sub_20F44(0, v20, 0);
    v22 = *(unsigned __int8 *)(v5 + 80);
    v0[1] = v19;
    v23 = v19 + ((v22 + 32) & ~v22);
    v24 = *(_QWORD *)(v5 + 72);
    v21 = (_QWORD *)v0[4];
    v0[3] = v24;
    do
    {
      sub_17CAA8(v23, (uint64_t)v2);
      v25 = *v2;
      v26 = v2[1];
      swift_bridgeObjectRetain(v26);
      sub_224DC((uint64_t)v2, type metadata accessor for BooksAlertAction.Button);
      if ((swift_isUniquelyReferenced_nonNull_native(v21) & 1) == 0)
      {
        sub_20F44(0, v21[2] + 1, 1);
        v24 = v0[3];
        v21 = (_QWORD *)v0[4];
      }
      v28 = v21[2];
      v27 = v21[3];
      if (v28 >= v27 >> 1)
      {
        sub_20F44(v27 > 1, v28 + 1, 1);
        v24 = v0[3];
        v21 = (_QWORD *)v0[4];
      }
      v21[2] = v28 + 1;
      v29 = &v21[2 * v28];
      v29[4] = v25;
      v29[5] = v26;
      v23 += v24;
      --v20;
    }
    while (v20);
    swift_bridgeObjectRelease(v0[1]);
    v6 = v0[2];
  }
  v0[4] = v21;
  v30 = sub_5440(&qword_25DF80);
  v31 = sub_A8F8();
  v32 = BidirectionalCollection<>.joined(separator:)(2128928, 0xE300000000000000, v30, v31);
  v34 = v33;
  swift_bridgeObjectRelease(v21);
  v35._countAndFlagsBits = v32;
  v35._object = v34;
  String.append(_:)(v35);
  swift_bridgeObjectRelease(v34);
  v36._countAndFlagsBits = 10528;
  v36._object = (void *)0xE200000000000000;
  String.append(_:)(v36);
  sub_224DC(v6, type metadata accessor for BooksAlertAction);
  JUMPOUT(0x17C16CLL);
}

void sub_17C1EC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  uint64_t WitnessTable;
  uint64_t v7;
  uint64_t v8;
  Swift::String v9;
  void *object;
  _OWORD v11[3];

  v3 = *v2;
  v0[30] = 0x646E756F706D6F63;
  v0[31] = 0xE900000000000028;
  v0[4] = v3;
  v4 = *(_OWORD *)(v1 + 32);
  v11[1] = *(_OWORD *)(v1 + 16);
  v11[2] = v4;
  v5 = type metadata accessor for Array(0, v1);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v5);
  v8 = sub_15D640((void (*)(char *, char *))sub_17CA0C, (uint64_t)v11, v5, (char *)&type metadata for String, (uint64_t)&type metadata for Never, WitnessTable, (uint64_t)&protocol witness table for Never, v7);
  swift_bridgeObjectRelease(v3);
  v9._countAndFlagsBits = Array.description.getter(v8, &type metadata for String);
  object = v9._object;
  String.append(_:)(v9);
  swift_bridgeObjectRelease(v8);
  swift_bridgeObjectRelease(object);
  JUMPOUT(0x17BD80);
}

void sub_17C2D4()
{
  JUMPOUT(0x17C16CLL);
}

uint64_t PageUpdateInstruction.ShelfItemUpdateDescriptor.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;
  Swift::String v9;
  Swift::String v10;
  void *object;
  Swift::String v12;
  Swift::String v13;
  Swift::String v14;
  uint64_t v15;
  Swift::String v16;
  void *v17;
  Swift::String v18;
  _QWORD v20[5];
  unsigned __int8 v21;
  uint64_t v22;
  unint64_t v23;

  v1 = *(_QWORD *)(v0 + 8);
  v3 = *(void **)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 24);
  v4 = *(_QWORD *)(v0 + 32);
  v5 = *(_QWORD *)(v0 + 40);
  v6 = *(_QWORD *)(v0 + 48);
  v7 = *(_QWORD *)(v0 + 56);
  v8 = *(_BYTE *)(v0 + 64);
  _StringGuts.grow(_:)(70);
  v22 = 0;
  v23 = 0xE000000000000000;
  v9._countAndFlagsBits = 0xD00000000000001ALL;
  v9._object = (void *)0x80000000001FE130;
  String.append(_:)(v9);
  v10._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  object = v10._object;
  String.append(_:)(v10);
  swift_bridgeObjectRelease(object);
  v12._object = (void *)0x80000000001FE150;
  v12._countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v12);
  swift_bridgeObjectRetain(v3);
  v13._countAndFlagsBits = v1;
  v13._object = v3;
  String.append(_:)(v13);
  swift_bridgeObjectRelease(v3);
  v14._countAndFlagsBits = 0xD000000000000014;
  v14._object = (void *)0x80000000001FE170;
  String.append(_:)(v14);
  v20[0] = v2;
  v20[1] = v4;
  v20[2] = v5;
  v20[3] = v6;
  v20[4] = v7;
  v21 = v8;
  sub_17A86C(v2, v4, v5, v6, v7, v8);
  v15 = sub_5440(qword_269728);
  v16._countAndFlagsBits = String.init<A>(describing:)(v20, v15);
  v17 = v16._object;
  String.append(_:)(v16);
  swift_bridgeObjectRelease(v17);
  v18._countAndFlagsBits = 41;
  v18._object = (void *)0xE100000000000000;
  String.append(_:)(v18);
  return v22;
}

unint64_t PageUpdateInstruction.ShelfHeaderFooterUpdateDescriptor.description.getter()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  Swift::String v3;
  Swift::String v4;

  _StringGuts.grow(_:)(46);
  swift_bridgeObjectRelease(0xE000000000000000);
  v2 = *(_QWORD *)(v0 + 40);
  v1 = *(void **)(v0 + 48);
  swift_bridgeObjectRetain(v1);
  v3._countAndFlagsBits = v2;
  v3._object = v1;
  String.append(_:)(v3);
  swift_bridgeObjectRelease(v1);
  v4._countAndFlagsBits = 41;
  v4._object = (void *)0xE100000000000000;
  String.append(_:)(v4);
  return 0xD00000000000002BLL;
}

uint64_t _s7BooksUI14PaginationInfoO2eeoiySbAC_ACtFZ_0(_QWORD *a1, _QWORD **a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;

  v2 = *a1;
  v3 = a1[1];
  v4 = *((_BYTE *)a1 + 16);
  v5 = (uint64_t)*a2;
  v6 = (uint64_t)a2[1];
  v7 = *((_BYTE *)a2 + 16);
  if ((v4 & 1) != 0)
  {
    if (((_BYTE)a2[2] & 1) != 0)
    {
      v8 = sub_AA954((_QWORD *)*a1, *a2);
      v7 = 1;
      v4 = 1;
      goto LABEL_12;
    }
LABEL_5:
    v8 = 0;
    goto LABEL_12;
  }
  if (((_BYTE)a2[2] & 1) != 0)
    goto LABEL_5;
  if (v2 == v5 && v3 == v6)
  {
    v7 = 0;
    v4 = 0;
    v8 = 1;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(*a1, v3, v5, v6, 0);
    v7 = 0;
    v4 = 0;
  }
LABEL_12:
  sub_17A8BC(v5, v6, v7);
  sub_17A8BC(v2, v3, v4);
  sub_17AED8(v2, v3, v4);
  sub_17AED8(v5, v6, v7);
  return v8 & 1;
}

unint64_t sub_17C8E0()
{
  unint64_t result;

  result = qword_2696F0;
  if (!qword_2696F0)
  {
    result = swift_getWitnessTable(&unk_1F3AB0, &type metadata for PaginationInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2696F0);
  }
  return result;
}

unint64_t sub_17C924()
{
  unint64_t result;

  result = qword_2696F8;
  if (!qword_2696F8)
  {
    result = swift_getWitnessTable(&unk_1F3A60, &type metadata for PaginationInfo.NextAssetIDsCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2696F8);
  }
  return result;
}

unint64_t sub_17C968()
{
  unint64_t result;

  result = qword_269708;
  if (!qword_269708)
  {
    result = swift_getWitnessTable(&unk_1F3A10, &type metadata for PaginationInfo.NextHrefCodingKeys);
    atomic_store(result, (unint64_t *)&qword_269708);
  }
  return result;
}

uint64_t sub_17C9AC(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_7EF8(&qword_25DF80);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

void sub_17CA0C(_QWORD *a1@<X8>)
{
  uint64_t v1;
  __int128 v3;
  uint64_t updated;
  uint64_t v5;
  uint64_t v6;
  _OWORD v7[2];

  v3 = *(_OWORD *)(v1 + 32);
  v7[0] = *(_OWORD *)(v1 + 16);
  v7[1] = v3;
  updated = type metadata accessor for PageUpdateInstruction(0, (uint64_t)v7);
  PageUpdateInstruction.description.getter(updated);
  *a1 = v5;
  a1[1] = v6;
}

uint64_t sub_17CA64(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for BooksAlertAction(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_17CAA8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for BooksAlertAction.Button(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for PageUpdateInstruction.ShelfHeaderFooterUpdateDescriptor(uint64_t a1, uint64_t a2)
{
  return swift_getGenericMetadata(a1, a2, &nominal type descriptor for PageUpdateInstruction.ShelfHeaderFooterUpdateDescriptor);
}

uint64_t type metadata accessor for PageUpdateInstruction.ShelfItemUpdateDescriptor(uint64_t a1, uint64_t a2)
{
  return swift_getGenericMetadata(a1, a2, &nominal type descriptor for PageUpdateInstruction.ShelfItemUpdateDescriptor);
}

uint64_t type metadata accessor for PageUpdateInstruction.ShelfItemRemovalDescriptor(uint64_t a1, uint64_t a2)
{
  return swift_getGenericMetadata(a1, a2, &nominal type descriptor for PageUpdateInstruction.ShelfItemRemovalDescriptor);
}

uint64_t sub_17CB10()
{
  return sub_17CB24();
}

uint64_t sub_17CB24()
{
  uint64_t v0;

  return dispatch thunk of Identifiable.id.getter(*(_QWORD *)(v0 + 24), *(_QWORD *)(*(_QWORD *)(v0 + 40) + 16));
}

uint64_t sub_17CB5C(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = swift_getWitnessTable(&protocol conformance descriptor for PageUpdateAction<A, B>, a2);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_17CB90()
{
  return 32;
}

__n128 sub_17CB9C(uint64_t a1, _OWORD *a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

void sub_17CBA8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[4];

  v2 = type metadata accessor for ActionMetrics(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_F4034(319);
    if (v5 <= 0x3F)
    {
      v6[1] = *(_QWORD *)(v4 - 8) + 64;
      v6[2] = "(";
      v6[3] = &unk_1F3460;
      swift_initStructMetadata(a1, 0, 4, v6, a1 + 48);
    }
  }
}

_QWORD *sub_17CC40(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v14 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v14);
  }
  else
  {
    v7 = type metadata accessor for ActionMetrics(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[13];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for ClickData(0);
    v12 = *(_QWORD *)(v11 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
    {
      v13 = sub_5440(&qword_25E828);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
    v15 = a3[14];
    v16 = *(_OWORD *)((char *)a2 + v15 + 24);
    *(_OWORD *)((char *)a1 + v15 + 24) = v16;
    (**(void (***)(void))(v16 - 8))();
    *((_BYTE *)a1 + a3[15]) = *((_BYTE *)a2 + a3[15]);
  }
  return a1;
}

uint64_t sub_17CD80(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = type metadata accessor for ActionMetrics(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + *(int *)(a2 + 52);
  v6 = type metadata accessor for ClickData(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6))
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  return _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)(a1 + *(int *)(a2 + 56)));
}

uint64_t sub_17CE14(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;

  v6 = type metadata accessor for ActionMetrics(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[13];
  v8 = (void *)(a1 + v7);
  v9 = (const void *)(a2 + v7);
  v10 = type metadata accessor for ClickData(0);
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    v12 = sub_5440(&qword_25E828);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 16))(v8, v9, v10);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  v13 = a3[14];
  v14 = *(_OWORD *)(a2 + v13 + 24);
  *(_OWORD *)(a1 + v13 + 24) = v14;
  (**(void (***)(void))(v14 - 8))();
  *(_BYTE *)(a1 + a3[15]) = *(_BYTE *)(a2 + a3[15]);
  return a1;
}

uint64_t sub_17CF28(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(void *, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t v15;

  v6 = type metadata accessor for ActionMetrics(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[13];
  v8 = (void *)(a1 + v7);
  v9 = (void *)(a2 + v7);
  v10 = type metadata accessor for ClickData(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  if (!v13)
  {
    if (!v14)
    {
      (*(void (**)(void *, void *, uint64_t))(v11 + 24))(v8, v9, v10);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v11 + 8))(v8, v10);
    goto LABEL_6;
  }
  if (v14)
  {
LABEL_6:
    v15 = sub_5440(&qword_25E828);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v11 + 16))(v8, v9, v10);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
LABEL_7:
  sub_142F8((_QWORD *)(a1 + a3[14]), (_QWORD *)(a2 + a3[14]));
  *(_BYTE *)(a1 + a3[15]) = *(_BYTE *)(a2 + a3[15]);
  return a1;
}

uint64_t sub_17D074(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;

  v6 = type metadata accessor for ActionMetrics(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[13];
  v8 = (void *)(a1 + v7);
  v9 = (const void *)(a2 + v7);
  v10 = type metadata accessor for ClickData(0);
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    v12 = sub_5440(&qword_25E828);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(v8, v9, v10);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  v13 = a3[14];
  v14 = a3[15];
  v15 = a1 + v13;
  v16 = a2 + v13;
  v17 = *(_OWORD *)(v16 + 16);
  *(_OWORD *)v15 = *(_OWORD *)v16;
  *(_OWORD *)(v15 + 16) = v17;
  *(_QWORD *)(v15 + 32) = *(_QWORD *)(v16 + 32);
  *(_BYTE *)(a1 + v14) = *(_BYTE *)(a2 + v14);
  return a1;
}

uint64_t sub_17D17C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(void *, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;

  v6 = type metadata accessor for ActionMetrics(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[13];
  v8 = (void *)(a1 + v7);
  v9 = (void *)(a2 + v7);
  v10 = type metadata accessor for ClickData(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  if (!v13)
  {
    if (!v14)
    {
      (*(void (**)(void *, void *, uint64_t))(v11 + 40))(v8, v9, v10);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v11 + 8))(v8, v10);
    goto LABEL_6;
  }
  if (v14)
  {
LABEL_6:
    v15 = sub_5440(&qword_25E828);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v11 + 32))(v8, v9, v10);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
LABEL_7:
  v16 = a3[14];
  v17 = a1 + v16;
  v18 = a2 + v16;
  _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)(a1 + v16));
  v19 = *(_OWORD *)(v18 + 16);
  *(_OWORD *)v17 = *(_OWORD *)v18;
  *(_OWORD *)(v17 + 16) = v19;
  *(_QWORD *)(v17 + 32) = *(_QWORD *)(v18 + 32);
  *(_BYTE *)(a1 + a3[15]) = *(_BYTE *)(a2 + a3[15]);
  return a1;
}

uint64_t sub_17D2DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_17D2E8);
}

uint64_t sub_17D2E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v14;

  v6 = type metadata accessor for ActionMetrics(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = sub_5440(&qword_25E828);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v10 = a1 + *(int *)(a3 + 52);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = *(_QWORD *)(a1 + *(int *)(a3 + 56) + 24);
  if (v14 >= 0xFFFFFFFF)
    LODWORD(v14) = -1;
  return (v14 + 1);
}

uint64_t sub_17D398(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_17D3A4);
}

uint64_t sub_17D3A4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v8 = type metadata accessor for ActionMetrics(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  result = sub_5440(&qword_25E828);
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v12 = a1 + *(int *)(a4 + 52);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  *(_QWORD *)(a1 + *(int *)(a4 + 56) + 24) = (a2 - 1);
  return result;
}

uint64_t sub_17D450(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[13];

  v4[0] = "(";
  v4[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[3] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[4] = &unk_1F34A8;
  v4[5] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[6] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[7] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[8] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[9] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[10] = (char *)&value witness table for Builtin.BridgeObject + 64;
  result = type metadata accessor for BooksAlertAction(319);
  if (v3 <= 0x3F)
  {
    v4[11] = *(_QWORD *)(result - 8) + 64;
    v4[12] = (char *)&value witness table for Builtin.BridgeObject + 64;
    swift_initEnumMetadataMultiPayload(a1, 0, 13, v4);
    return 0;
  }
  return result;
}

char *sub_17D4E8(char *a1, char *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  __int128 v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  void (*v36)(char *, char *, uint64_t);
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v9 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = (char *)(v9 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain(v9);
  }
  else
  {
    switch(swift_getEnumCaseMultiPayload(a2, a3))
    {
      case 0u:
        v8 = *(_OWORD *)(a2 + 24);
        *(_OWORD *)(a1 + 24) = v8;
        (**(void (***)(void *, const void *))(v8 - 8))(a1, a2);
        swift_storeEnumTagMultiPayload(a1, a3, 0);
        break;
      case 1u:
        v11 = *(_QWORD *)a2;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        swift_bridgeObjectRetain(v11);
        swift_storeEnumTagMultiPayload(a1, a3, 1);
        break;
      case 2u:
        v12 = *(_QWORD *)a2;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        swift_bridgeObjectRetain(v12);
        swift_storeEnumTagMultiPayload(a1, a3, 2);
        break;
      case 3u:
        v13 = *(_QWORD *)a2;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        swift_bridgeObjectRetain(v13);
        swift_storeEnumTagMultiPayload(a1, a3, 3);
        break;
      case 4u:
        v14 = *((_QWORD *)a2 + 1);
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *((_QWORD *)a1 + 1) = v14;
        swift_bridgeObjectRetain(v14);
        swift_storeEnumTagMultiPayload(a1, a3, 4);
        break;
      case 5u:
        v15 = *(_QWORD *)a2;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        swift_bridgeObjectRetain(v15);
        swift_storeEnumTagMultiPayload(a1, a3, 5);
        break;
      case 6u:
        v16 = *(_QWORD *)a2;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        swift_bridgeObjectRetain(v16);
        swift_storeEnumTagMultiPayload(a1, a3, 6);
        break;
      case 7u:
        v17 = *(_QWORD *)a2;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        swift_bridgeObjectRetain(v17);
        swift_storeEnumTagMultiPayload(a1, a3, 7);
        break;
      case 8u:
        v18 = *(_QWORD *)a2;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        swift_bridgeObjectRetain(v18);
        swift_storeEnumTagMultiPayload(a1, a3, 8);
        break;
      case 9u:
        v19 = *(_QWORD *)a2;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        swift_bridgeObjectRetain(v19);
        swift_storeEnumTagMultiPayload(a1, a3, 9);
        break;
      case 0xAu:
        v20 = *(_QWORD *)a2;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        swift_bridgeObjectRetain(v20);
        swift_storeEnumTagMultiPayload(a1, a3, 10);
        break;
      case 0xBu:
        v21 = type metadata accessor for ActionMetrics(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(a1, a2, v21);
        v22 = (int *)type metadata accessor for BooksAlertAction(0);
        v23 = v22[5];
        v24 = &a1[v23];
        v25 = &a2[v23];
        v26 = *((_QWORD *)v25 + 1);
        *(_QWORD *)v24 = *(_QWORD *)v25;
        *((_QWORD *)v24 + 1) = v26;
        v27 = v22[6];
        v28 = &a1[v27];
        v29 = &a2[v27];
        v30 = *((_QWORD *)v29 + 1);
        *(_QWORD *)v28 = *(_QWORD *)v29;
        *((_QWORD *)v28 + 1) = v30;
        v31 = v22[7];
        v32 = *(_QWORD *)&a2[v31];
        *(_QWORD *)&a1[v31] = v32;
        v33 = v22[8];
        v50 = &a1[v33];
        v34 = &a2[v33];
        v35 = type metadata accessor for DialogData(0);
        v36 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v35 - 8) + 16);
        swift_bridgeObjectRetain(v26);
        swift_bridgeObjectRetain(v30);
        swift_bridgeObjectRetain(v32);
        v36(v50, v34, v35);
        v37 = v22[9];
        v38 = &a1[v37];
        v39 = &a2[v37];
        v40 = *((_QWORD *)v39 + 1);
        *(_QWORD *)v38 = *(_QWORD *)v39;
        *((_QWORD *)v38 + 1) = v40;
        v41 = *((_QWORD *)v39 + 3);
        *((_QWORD *)v38 + 2) = *((_QWORD *)v39 + 2);
        *((_QWORD *)v38 + 3) = v41;
        v42 = *((_QWORD *)v39 + 5);
        *((_QWORD *)v38 + 4) = *((_QWORD *)v39 + 4);
        *((_QWORD *)v38 + 5) = v42;
        v43 = *((_QWORD *)v39 + 7);
        *((_QWORD *)v38 + 6) = *((_QWORD *)v39 + 6);
        *((_QWORD *)v38 + 7) = v43;
        v44 = *((_QWORD *)v39 + 9);
        *((_QWORD *)v38 + 8) = *((_QWORD *)v39 + 8);
        *((_QWORD *)v38 + 9) = v44;
        v45 = *((_QWORD *)v39 + 11);
        *((_QWORD *)v38 + 10) = *((_QWORD *)v39 + 10);
        *((_QWORD *)v38 + 11) = v45;
        v46 = *((_QWORD *)v39 + 13);
        *((_QWORD *)v38 + 12) = *((_QWORD *)v39 + 12);
        *((_QWORD *)v38 + 13) = v46;
        v47 = *((_QWORD *)v39 + 15);
        *((_QWORD *)v38 + 14) = *((_QWORD *)v39 + 14);
        *((_QWORD *)v38 + 15) = v47;
        v48 = *((_QWORD *)v39 + 17);
        *((_QWORD *)v38 + 16) = *((_QWORD *)v39 + 16);
        *((_QWORD *)v38 + 17) = v48;
        v38[144] = v39[144];
        swift_bridgeObjectRetain(v40);
        swift_bridgeObjectRetain(v41);
        swift_bridgeObjectRetain(v42);
        swift_bridgeObjectRetain(v43);
        swift_bridgeObjectRetain(v44);
        swift_bridgeObjectRetain(v45);
        swift_bridgeObjectRetain(v46);
        swift_bridgeObjectRetain(v47);
        swift_bridgeObjectRetain(v48);
        swift_storeEnumTagMultiPayload(a1, a3, 11);
        break;
      case 0xCu:
        v49 = *(_QWORD *)a2;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        swift_bridgeObjectRetain(v49);
        swift_storeEnumTagMultiPayload(a1, a3, 12);
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(v5 + 64));
        break;
    }
  }
  return a1;
}

uint64_t sub_17D898(uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  char *v7;
  uint64_t v8;
  _QWORD *v9;

  result = swift_getEnumCaseMultiPayload(a1, a2);
  switch((int)result)
  {
    case 0:
      return _s7BooksUI13AnyPagedFrameVwxx_0(a1);
    case 1:
    case 2:
    case 3:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 12:
      v4 = *a1;
      goto LABEL_3;
    case 4:
      v4 = a1[1];
      goto LABEL_3;
    case 11:
      v5 = type metadata accessor for ActionMetrics(0);
      (*(void (**)(uint64_t *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
      v6 = (int *)type metadata accessor for BooksAlertAction(0);
      swift_bridgeObjectRelease(*(uint64_t *)((char *)a1 + v6[5] + 8));
      swift_bridgeObjectRelease(*(uint64_t *)((char *)a1 + v6[6] + 8));
      swift_bridgeObjectRelease(*(uint64_t *)((char *)a1 + v6[7]));
      v7 = (char *)a1 + v6[8];
      v8 = type metadata accessor for DialogData(0);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
      v9 = (uint64_t *)((char *)a1 + v6[9]);
      swift_bridgeObjectRelease(v9[1]);
      swift_bridgeObjectRelease(v9[3]);
      swift_bridgeObjectRelease(v9[5]);
      swift_bridgeObjectRelease(v9[7]);
      swift_bridgeObjectRelease(v9[9]);
      swift_bridgeObjectRelease(v9[11]);
      swift_bridgeObjectRelease(v9[13]);
      swift_bridgeObjectRelease(v9[15]);
      v4 = v9[17];
LABEL_3:
      result = swift_bridgeObjectRelease(v4);
      break;
    default:
      return result;
  }
  return result;
}

char *sub_17D9DC(char *a1, char *a2, uint64_t a3)
{
  __int128 v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  void (*v35)(char *, char *, uint64_t);
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v50;

  switch(swift_getEnumCaseMultiPayload(a2, a3))
  {
    case 0u:
      v6 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 24) = v6;
      (**(void (***)(void *, const void *))(v6 - 8))(a1, a2);
      v7 = a1;
      v8 = a3;
      v9 = 0;
      goto LABEL_16;
    case 1u:
      v10 = *(_QWORD *)a2;
      *(_QWORD *)a1 = *(_QWORD *)a2;
      swift_bridgeObjectRetain(v10);
      v7 = a1;
      v8 = a3;
      v9 = 1;
      goto LABEL_16;
    case 2u:
      v11 = *(_QWORD *)a2;
      *(_QWORD *)a1 = *(_QWORD *)a2;
      swift_bridgeObjectRetain(v11);
      v7 = a1;
      v8 = a3;
      v9 = 2;
      goto LABEL_16;
    case 3u:
      v12 = *(_QWORD *)a2;
      *(_QWORD *)a1 = *(_QWORD *)a2;
      swift_bridgeObjectRetain(v12);
      v7 = a1;
      v8 = a3;
      v9 = 3;
      goto LABEL_16;
    case 4u:
      v13 = *((_QWORD *)a2 + 1);
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *((_QWORD *)a1 + 1) = v13;
      swift_bridgeObjectRetain(v13);
      v7 = a1;
      v8 = a3;
      v9 = 4;
      goto LABEL_16;
    case 5u:
      v14 = *(_QWORD *)a2;
      *(_QWORD *)a1 = *(_QWORD *)a2;
      swift_bridgeObjectRetain(v14);
      v7 = a1;
      v8 = a3;
      v9 = 5;
      goto LABEL_16;
    case 6u:
      v15 = *(_QWORD *)a2;
      *(_QWORD *)a1 = *(_QWORD *)a2;
      swift_bridgeObjectRetain(v15);
      v7 = a1;
      v8 = a3;
      v9 = 6;
      goto LABEL_16;
    case 7u:
      v16 = *(_QWORD *)a2;
      *(_QWORD *)a1 = *(_QWORD *)a2;
      swift_bridgeObjectRetain(v16);
      v7 = a1;
      v8 = a3;
      v9 = 7;
      goto LABEL_16;
    case 8u:
      v17 = *(_QWORD *)a2;
      *(_QWORD *)a1 = *(_QWORD *)a2;
      swift_bridgeObjectRetain(v17);
      v7 = a1;
      v8 = a3;
      v9 = 8;
      goto LABEL_16;
    case 9u:
      v18 = *(_QWORD *)a2;
      *(_QWORD *)a1 = *(_QWORD *)a2;
      swift_bridgeObjectRetain(v18);
      v7 = a1;
      v8 = a3;
      v9 = 9;
      goto LABEL_16;
    case 0xAu:
      v19 = *(_QWORD *)a2;
      *(_QWORD *)a1 = *(_QWORD *)a2;
      swift_bridgeObjectRetain(v19);
      v7 = a1;
      v8 = a3;
      v9 = 10;
      goto LABEL_16;
    case 0xBu:
      v20 = type metadata accessor for ActionMetrics(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(a1, a2, v20);
      v21 = (int *)type metadata accessor for BooksAlertAction(0);
      v22 = v21[5];
      v23 = &a1[v22];
      v24 = &a2[v22];
      v25 = *((_QWORD *)v24 + 1);
      *(_QWORD *)v23 = *(_QWORD *)v24;
      *((_QWORD *)v23 + 1) = v25;
      v26 = v21[6];
      v27 = &a1[v26];
      v28 = &a2[v26];
      v29 = *((_QWORD *)v28 + 1);
      *(_QWORD *)v27 = *(_QWORD *)v28;
      *((_QWORD *)v27 + 1) = v29;
      v30 = v21[7];
      v31 = *(_QWORD *)&a2[v30];
      *(_QWORD *)&a1[v30] = v31;
      v32 = v21[8];
      v50 = &a1[v32];
      v33 = &a2[v32];
      v34 = type metadata accessor for DialogData(0);
      v35 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v34 - 8) + 16);
      swift_bridgeObjectRetain(v25);
      swift_bridgeObjectRetain(v29);
      swift_bridgeObjectRetain(v31);
      v35(v50, v33, v34);
      v36 = v21[9];
      v37 = &a1[v36];
      v38 = &a2[v36];
      v39 = *((_QWORD *)v38 + 1);
      *(_QWORD *)v37 = *(_QWORD *)v38;
      *((_QWORD *)v37 + 1) = v39;
      v40 = *((_QWORD *)v38 + 3);
      *((_QWORD *)v37 + 2) = *((_QWORD *)v38 + 2);
      *((_QWORD *)v37 + 3) = v40;
      v41 = *((_QWORD *)v38 + 5);
      *((_QWORD *)v37 + 4) = *((_QWORD *)v38 + 4);
      *((_QWORD *)v37 + 5) = v41;
      v42 = *((_QWORD *)v38 + 7);
      *((_QWORD *)v37 + 6) = *((_QWORD *)v38 + 6);
      *((_QWORD *)v37 + 7) = v42;
      v43 = *((_QWORD *)v38 + 9);
      *((_QWORD *)v37 + 8) = *((_QWORD *)v38 + 8);
      *((_QWORD *)v37 + 9) = v43;
      v44 = *((_QWORD *)v38 + 11);
      *((_QWORD *)v37 + 10) = *((_QWORD *)v38 + 10);
      *((_QWORD *)v37 + 11) = v44;
      v45 = *((_QWORD *)v38 + 13);
      *((_QWORD *)v37 + 12) = *((_QWORD *)v38 + 12);
      *((_QWORD *)v37 + 13) = v45;
      v46 = *((_QWORD *)v38 + 15);
      *((_QWORD *)v37 + 14) = *((_QWORD *)v38 + 14);
      *((_QWORD *)v37 + 15) = v46;
      v47 = *((_QWORD *)v38 + 17);
      *((_QWORD *)v37 + 16) = *((_QWORD *)v38 + 16);
      *((_QWORD *)v37 + 17) = v47;
      v37[144] = v38[144];
      swift_bridgeObjectRetain(v39);
      swift_bridgeObjectRetain(v40);
      swift_bridgeObjectRetain(v41);
      swift_bridgeObjectRetain(v42);
      swift_bridgeObjectRetain(v43);
      swift_bridgeObjectRetain(v44);
      swift_bridgeObjectRetain(v45);
      swift_bridgeObjectRetain(v46);
      swift_bridgeObjectRetain(v47);
      v7 = a1;
      v8 = a3;
      v9 = 11;
      goto LABEL_16;
    case 0xCu:
      v48 = *(_QWORD *)a2;
      *(_QWORD *)a1 = *(_QWORD *)a2;
      swift_bridgeObjectRetain(v48);
      v7 = a1;
      v8 = a3;
      v9 = 12;
LABEL_16:
      swift_storeEnumTagMultiPayload(v7, v8, v9);
      break;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

uint64_t *sub_17DD34(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int *v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  void (*v36)(char *, char *, uint64_t);
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v51;

  if (a1 != a2)
  {
    v6 = *(_QWORD *)(a3 - 8);
    (*(void (**)(uint64_t *, uint64_t))(v6 + 8))(a1, a3);
    switch(swift_getEnumCaseMultiPayload(a2, a3))
    {
      case 0u:
        v7 = a2[3];
        a1[3] = v7;
        a1[4] = a2[4];
        (**(void (***)(uint64_t *, uint64_t *))(v7 - 8))(a1, a2);
        v8 = a1;
        v9 = a3;
        v10 = 0;
        goto LABEL_17;
      case 1u:
        v11 = *a2;
        *a1 = *a2;
        swift_bridgeObjectRetain(v11);
        v8 = a1;
        v9 = a3;
        v10 = 1;
        goto LABEL_17;
      case 2u:
        v12 = *a2;
        *a1 = *a2;
        swift_bridgeObjectRetain(v12);
        v8 = a1;
        v9 = a3;
        v10 = 2;
        goto LABEL_17;
      case 3u:
        v13 = *a2;
        *a1 = *a2;
        swift_bridgeObjectRetain(v13);
        v8 = a1;
        v9 = a3;
        v10 = 3;
        goto LABEL_17;
      case 4u:
        *a1 = *a2;
        v14 = a2[1];
        a1[1] = v14;
        swift_bridgeObjectRetain(v14);
        v8 = a1;
        v9 = a3;
        v10 = 4;
        goto LABEL_17;
      case 5u:
        v15 = *a2;
        *a1 = *a2;
        swift_bridgeObjectRetain(v15);
        v8 = a1;
        v9 = a3;
        v10 = 5;
        goto LABEL_17;
      case 6u:
        v16 = *a2;
        *a1 = *a2;
        swift_bridgeObjectRetain(v16);
        v8 = a1;
        v9 = a3;
        v10 = 6;
        goto LABEL_17;
      case 7u:
        v17 = *a2;
        *a1 = *a2;
        swift_bridgeObjectRetain(v17);
        v8 = a1;
        v9 = a3;
        v10 = 7;
        goto LABEL_17;
      case 8u:
        v18 = *a2;
        *a1 = *a2;
        swift_bridgeObjectRetain(v18);
        v8 = a1;
        v9 = a3;
        v10 = 8;
        goto LABEL_17;
      case 9u:
        v19 = *a2;
        *a1 = *a2;
        swift_bridgeObjectRetain(v19);
        v8 = a1;
        v9 = a3;
        v10 = 9;
        goto LABEL_17;
      case 0xAu:
        v20 = *a2;
        *a1 = *a2;
        swift_bridgeObjectRetain(v20);
        v8 = a1;
        v9 = a3;
        v10 = 10;
        goto LABEL_17;
      case 0xBu:
        v21 = type metadata accessor for ActionMetrics(0);
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(a1, a2, v21);
        v22 = (int *)type metadata accessor for BooksAlertAction(0);
        v23 = v22[5];
        v24 = (uint64_t *)((char *)a1 + v23);
        v25 = (uint64_t *)((char *)a2 + v23);
        *v24 = *v25;
        v26 = v25[1];
        v24[1] = v26;
        v27 = v22[6];
        v28 = (uint64_t *)((char *)a1 + v27);
        v29 = (uint64_t *)((char *)a2 + v27);
        *v28 = *v29;
        v30 = v29[1];
        v28[1] = v30;
        v31 = v22[7];
        v32 = *(uint64_t *)((char *)a2 + v31);
        *(uint64_t *)((char *)a1 + v31) = v32;
        v33 = v22[8];
        v51 = (char *)a1 + v33;
        v34 = (char *)a2 + v33;
        v35 = type metadata accessor for DialogData(0);
        v36 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v35 - 8) + 16);
        swift_bridgeObjectRetain(v26);
        swift_bridgeObjectRetain(v30);
        swift_bridgeObjectRetain(v32);
        v36(v51, v34, v35);
        v37 = v22[9];
        v38 = (char *)a1 + v37;
        v39 = (char *)a2 + v37;
        *(_QWORD *)v38 = *(_QWORD *)v39;
        v40 = *((_QWORD *)v39 + 1);
        *((_QWORD *)v38 + 1) = v40;
        *((_QWORD *)v38 + 2) = *((_QWORD *)v39 + 2);
        v41 = *((_QWORD *)v39 + 3);
        *((_QWORD *)v38 + 3) = v41;
        *((_QWORD *)v38 + 4) = *((_QWORD *)v39 + 4);
        v42 = *((_QWORD *)v39 + 5);
        *((_QWORD *)v38 + 5) = v42;
        *((_QWORD *)v38 + 6) = *((_QWORD *)v39 + 6);
        v43 = *((_QWORD *)v39 + 7);
        *((_QWORD *)v38 + 7) = v43;
        *((_QWORD *)v38 + 8) = *((_QWORD *)v39 + 8);
        v44 = *((_QWORD *)v39 + 9);
        *((_QWORD *)v38 + 9) = v44;
        *((_QWORD *)v38 + 10) = *((_QWORD *)v39 + 10);
        v45 = *((_QWORD *)v39 + 11);
        *((_QWORD *)v38 + 11) = v45;
        *((_QWORD *)v38 + 12) = *((_QWORD *)v39 + 12);
        v46 = *((_QWORD *)v39 + 13);
        *((_QWORD *)v38 + 13) = v46;
        *((_QWORD *)v38 + 14) = *((_QWORD *)v39 + 14);
        v47 = *((_QWORD *)v39 + 15);
        *((_QWORD *)v38 + 15) = v47;
        *((_QWORD *)v38 + 16) = *((_QWORD *)v39 + 16);
        v48 = *((_QWORD *)v39 + 17);
        *((_QWORD *)v38 + 17) = v48;
        v38[144] = v39[144];
        swift_bridgeObjectRetain(v40);
        swift_bridgeObjectRetain(v41);
        swift_bridgeObjectRetain(v42);
        swift_bridgeObjectRetain(v43);
        swift_bridgeObjectRetain(v44);
        swift_bridgeObjectRetain(v45);
        swift_bridgeObjectRetain(v46);
        swift_bridgeObjectRetain(v47);
        swift_bridgeObjectRetain(v48);
        v8 = a1;
        v9 = a3;
        v10 = 11;
        goto LABEL_17;
      case 0xCu:
        v49 = *a2;
        *a1 = *a2;
        swift_bridgeObjectRetain(v49);
        v8 = a1;
        v9 = a3;
        v10 = 12;
LABEL_17:
        swift_storeEnumTagMultiPayload(v8, v9, v10);
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(v6 + 64));
        break;
    }
  }
  return a1;
}

char *sub_17E108(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;

  if (swift_getEnumCaseMultiPayload(a2, a3) == 11)
  {
    v6 = type metadata accessor for ActionMetrics(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
    v7 = (int *)type metadata accessor for BooksAlertAction(0);
    *(_OWORD *)&a1[v7[5]] = *(_OWORD *)&a2[v7[5]];
    *(_OWORD *)&a1[v7[6]] = *(_OWORD *)&a2[v7[6]];
    *(_QWORD *)&a1[v7[7]] = *(_QWORD *)&a2[v7[7]];
    v8 = v7[8];
    v9 = &a1[v8];
    v10 = &a2[v8];
    v11 = type metadata accessor for DialogData(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
    v12 = v7[9];
    v13 = &a1[v12];
    v14 = &a2[v12];
    v15 = *((_OWORD *)v14 + 7);
    *((_OWORD *)v13 + 6) = *((_OWORD *)v14 + 6);
    *((_OWORD *)v13 + 7) = v15;
    *((_OWORD *)v13 + 8) = *((_OWORD *)v14 + 8);
    v13[144] = v14[144];
    v16 = *((_OWORD *)v14 + 3);
    *((_OWORD *)v13 + 2) = *((_OWORD *)v14 + 2);
    *((_OWORD *)v13 + 3) = v16;
    v17 = *((_OWORD *)v14 + 5);
    *((_OWORD *)v13 + 4) = *((_OWORD *)v14 + 4);
    *((_OWORD *)v13 + 5) = v17;
    v18 = *((_OWORD *)v14 + 1);
    *(_OWORD *)v13 = *(_OWORD *)v14;
    *((_OWORD *)v13 + 1) = v18;
    swift_storeEnumTagMultiPayload(a1, a3, 11);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

char *sub_17E234(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;

  if (a1 != a2)
  {
    v6 = *(_QWORD *)(a3 - 8);
    (*(void (**)(char *, uint64_t))(v6 + 8))(a1, a3);
    if (swift_getEnumCaseMultiPayload(a2, a3) == 11)
    {
      v7 = type metadata accessor for ActionMetrics(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      v8 = (int *)type metadata accessor for BooksAlertAction(0);
      *(_OWORD *)&a1[v8[5]] = *(_OWORD *)&a2[v8[5]];
      *(_OWORD *)&a1[v8[6]] = *(_OWORD *)&a2[v8[6]];
      *(_QWORD *)&a1[v8[7]] = *(_QWORD *)&a2[v8[7]];
      v9 = v8[8];
      v10 = &a1[v9];
      v11 = &a2[v9];
      v12 = type metadata accessor for DialogData(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v10, v11, v12);
      v13 = v8[9];
      v14 = &a1[v13];
      v15 = &a2[v13];
      v16 = *((_OWORD *)v15 + 7);
      *((_OWORD *)v14 + 6) = *((_OWORD *)v15 + 6);
      *((_OWORD *)v14 + 7) = v16;
      *((_OWORD *)v14 + 8) = *((_OWORD *)v15 + 8);
      v14[144] = v15[144];
      v17 = *((_OWORD *)v15 + 3);
      *((_OWORD *)v14 + 2) = *((_OWORD *)v15 + 2);
      *((_OWORD *)v14 + 3) = v17;
      v18 = *((_OWORD *)v15 + 5);
      *((_OWORD *)v14 + 4) = *((_OWORD *)v15 + 4);
      *((_OWORD *)v14 + 5) = v18;
      v19 = *((_OWORD *)v15 + 1);
      *(_OWORD *)v14 = *(_OWORD *)v15;
      *((_OWORD *)v14 + 1) = v19;
      swift_storeEnumTagMultiPayload(a1, a3, 11);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(v6 + 64));
    }
  }
  return a1;
}

uint64_t sub_17E378(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  int v4;

  swift_bridgeObjectRelease(*(_QWORD *)a1);
  result = swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));
  v3 = *(unsigned __int8 *)(a1 + 40);
  if (v3 != 255)
  {
    result = sub_17AED8(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), v3 & 1);
    v4 = *(unsigned __int8 *)(a1 + 64);
    if (v4 != 255)
      return sub_17AED8(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), v4 & 1);
  }
  return result;
}

uint64_t sub_17E3DC(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  char v13;
  uint64_t v14;
  uint64_t v15;

  v4 = *a2;
  v5 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v5;
  v6 = a2[2];
  *(_QWORD *)(a1 + 16) = v6;
  v7 = *((unsigned __int8 *)a2 + 40);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v6);
  if (v7 == 255)
  {
    v8 = *(_OWORD *)(a2 + 5);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
    *(_OWORD *)(a1 + 40) = v8;
    *(_OWORD *)(a1 + 49) = *(_OWORD *)((char *)a2 + 49);
  }
  else
  {
    v9 = v7 & 1;
    v10 = a2[3];
    v11 = a2[4];
    sub_17A8BC(v10, v11, v9);
    *(_QWORD *)(a1 + 24) = v10;
    *(_QWORD *)(a1 + 32) = v11;
    *(_BYTE *)(a1 + 40) = v9;
    v12 = *((unsigned __int8 *)a2 + 64);
    if (v12 == 255)
    {
      *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
      *(_BYTE *)(a1 + 64) = *((_BYTE *)a2 + 64);
    }
    else
    {
      v13 = v12 & 1;
      v15 = a2[6];
      v14 = a2[7];
      sub_17A8BC(v15, v14, v12 & 1);
      *(_QWORD *)(a1 + 48) = v15;
      *(_QWORD *)(a1 + 56) = v14;
      *(_BYTE *)(a1 + 64) = v13;
    }
  }
  return a1;
}

uint64_t *sub_17E4BC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 *v8;
  __int128 *v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  __int128 v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  __int128 *v26;
  char v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[1] = a2[1];
  v6 = a2[2];
  v7 = a1[2];
  a1[2] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = (__int128 *)(a1 + 3);
  v9 = (__int128 *)(a2 + 3);
  v10 = *((unsigned __int8 *)a2 + 40);
  if (*((_BYTE *)a1 + 40) == 0xFF)
  {
    if (v10 == 255)
    {
      v11 = *v9;
      v12 = *(_OWORD *)(a2 + 5);
      *(_OWORD *)((char *)a1 + 49) = *(_OWORD *)((char *)a2 + 49);
      *(_OWORD *)(a1 + 5) = v12;
LABEL_4:
      *v8 = v11;
      return a1;
    }
    v15 = v10 & 1;
    v16 = a2[3];
    v17 = a2[4];
    sub_17A8BC(v16, v17, v10 & 1);
    a1[3] = v16;
    a1[4] = v17;
    *((_BYTE *)a1 + 40) = v15;
    v18 = *((unsigned __int8 *)a2 + 64);
    if (v18 == 255)
    {
      v19 = *((_OWORD *)a2 + 3);
      *((_BYTE *)a1 + 64) = *((_BYTE *)a2 + 64);
      *((_OWORD *)a1 + 3) = v19;
      return a1;
    }
    goto LABEL_14;
  }
  if (v10 == 255)
  {
    sub_17E6D0((uint64_t)(a1 + 3));
    v13 = *(_OWORD *)((char *)a2 + 49);
    v14 = *(_OWORD *)(a2 + 5);
    *v8 = *v9;
    *(_OWORD *)(a1 + 5) = v14;
    *(_OWORD *)((char *)a1 + 49) = v13;
    return a1;
  }
  v20 = v10 & 1;
  v21 = a2[3];
  v22 = a2[4];
  sub_17A8BC(v21, v22, v10 & 1);
  v23 = a1[3];
  v24 = a1[4];
  v25 = *((_BYTE *)a1 + 40);
  a1[3] = v21;
  a1[4] = v22;
  *((_BYTE *)a1 + 40) = v20;
  sub_17AED8(v23, v24, v25);
  v8 = (__int128 *)(a1 + 6);
  v26 = (__int128 *)(a2 + 6);
  v18 = *((unsigned __int8 *)a2 + 64);
  if (*((unsigned __int8 *)a1 + 64) == 255)
  {
    if (v18 == 255)
    {
      v11 = *v26;
      *((_BYTE *)a1 + 64) = *((_BYTE *)a2 + 64);
      goto LABEL_4;
    }
LABEL_14:
    v28 = v18 & 1;
    v30 = a2[6];
    v29 = a2[7];
    sub_17A8BC(v30, v29, v18 & 1);
    a1[6] = v30;
    a1[7] = v29;
    *((_BYTE *)a1 + 64) = v28;
    return a1;
  }
  if (v18 == 255)
  {
    sub_17E6A0((uint64_t)(a1 + 6));
    v27 = *((_BYTE *)a2 + 64);
    *v8 = *v26;
    *((_BYTE *)a1 + 64) = v27;
  }
  else
  {
    v31 = v18 & 1;
    v33 = a2[6];
    v32 = a2[7];
    sub_17A8BC(v33, v32, v18 & 1);
    v34 = a1[6];
    v35 = a1[7];
    v36 = *((_BYTE *)a1 + 64);
    a1[6] = v33;
    a1[7] = v32;
    *((_BYTE *)a1 + 64) = v31;
    sub_17AED8(v34, v35, v36);
  }
  return a1;
}

uint64_t sub_17E6A0(uint64_t a1)
{
  sub_17AED8(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  return a1;
}

uint64_t sub_17E6D0(uint64_t a1)
{
  destroy for PaginationUpdate(a1);
  return a1;
}

uint64_t *sub_17E6FC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;

  v4 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v4);
  v5 = a2[2];
  v6 = a1[2];
  a1[1] = a2[1];
  a1[2] = v5;
  swift_bridgeObjectRelease(v6);
  v7 = *((unsigned __int8 *)a1 + 40);
  if (v7 == 255)
    goto LABEL_4;
  v8 = *((unsigned __int8 *)a2 + 40);
  if (v8 == 255)
  {
    sub_17E6D0((uint64_t)(a1 + 3));
LABEL_4:
    v9 = *(_OWORD *)(a2 + 5);
    *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 3);
    *(_OWORD *)(a1 + 5) = v9;
    *(_OWORD *)((char *)a1 + 49) = *(_OWORD *)((char *)a2 + 49);
    return a1;
  }
  v10 = a1[3];
  v11 = a1[4];
  *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 3);
  *((_BYTE *)a1 + 40) = v8 & 1;
  sub_17AED8(v10, v11, v7 & 1);
  v12 = a2 + 6;
  v13 = *((unsigned __int8 *)a1 + 64);
  if (v13 != 255)
  {
    v14 = *((unsigned __int8 *)a2 + 64);
    if (v14 != 255)
    {
      v15 = a1[6];
      v16 = a1[7];
      *((_OWORD *)a1 + 3) = *v12;
      *((_BYTE *)a1 + 64) = v14 & 1;
      sub_17AED8(v15, v16, v13 & 1);
      return a1;
    }
    sub_17E6A0((uint64_t)(a1 + 6));
  }
  *((_OWORD *)a1 + 3) = *v12;
  *((_BYTE *)a1 + 64) = *((_BYTE *)a2 + 64);
  return a1;
}

uint64_t sub_17E7F8(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 65))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_17E840(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 64) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 65) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 65) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t sub_17E898(_QWORD *a1)
{
  swift_bridgeObjectRelease(*a1);
  return swift_bridgeObjectRelease(a1[2]);
}

uint64_t *sub_17E8C0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *a2;
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[2];
  a1[2] = v5;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v5);
  return a1;
}

uint64_t *sub_17E8FC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[1] = a2[1];
  v6 = a2[2];
  v7 = a1[2];
  a1[2] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

uint64_t *sub_17E960(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v4);
  v5 = a2[2];
  v6 = a1[2];
  a1[1] = a2[1];
  a1[2] = v5;
  swift_bridgeObjectRelease(v6);
  return a1;
}

uint64_t sub_17E9A4(_QWORD *a1)
{
  _s7BooksUI13AnyPagedFrameVwxx_0(a1);
  return swift_bridgeObjectRelease(a1[6]);
}

uint64_t sub_17E9C8(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;

  v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v5;
  swift_bridgeObjectRetain(v5);
  return a1;
}

_QWORD *sub_17EA10(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  sub_142F8(a1, a2);
  a1[5] = a2[5];
  v4 = a2[6];
  v5 = a1[6];
  a1[6] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  return a1;
}

uint64_t sub_17EA58(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;

  _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease(v5);
  return a1;
}

uint64_t sub_17EAA0(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 56))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_17EAE8(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 56) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t destroy for PaginationUpdate(uint64_t a1)
{
  uint64_t result;
  int v3;

  result = sub_17AED8(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  v3 = *(unsigned __int8 *)(a1 + 40);
  if (v3 != 255)
    return sub_17AED8(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), v3 & 1);
  return result;
}

uint64_t initializeWithCopy for PaginationUpdate(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  int v7;
  char v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_BYTE *)(a2 + 16);
  sub_17A8BC(*(_QWORD *)a2, v5, v6);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = v6;
  v7 = *(unsigned __int8 *)(a2 + 40);
  if (v7 == 255)
  {
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  }
  else
  {
    v8 = v7 & 1;
    v10 = *(_QWORD *)(a2 + 24);
    v9 = *(_QWORD *)(a2 + 32);
    sub_17A8BC(v10, v9, v7 & 1);
    *(_QWORD *)(a1 + 24) = v10;
    *(_QWORD *)(a1 + 32) = v9;
    *(_BYTE *)(a1 + 40) = v8;
  }
  return a1;
}

uint64_t assignWithCopy for PaginationUpdate(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  __int128 *v10;
  __int128 *v11;
  int v12;
  char v13;
  __int128 v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  uint64_t v22;
  uint64_t v23;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_BYTE *)(a2 + 16);
  sub_17A8BC(*(_QWORD *)a2, v5, v6);
  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_BYTE *)(a1 + 16);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = v6;
  sub_17AED8(v7, v8, v9);
  v10 = (__int128 *)(a1 + 24);
  v11 = (__int128 *)(a2 + 24);
  v12 = *(unsigned __int8 *)(a2 + 40);
  if (*(unsigned __int8 *)(a1 + 40) == 255)
  {
    if (v12 == 255)
    {
      v14 = *v11;
      *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
      *v10 = v14;
    }
    else
    {
      v21 = v12 & 1;
      v23 = *(_QWORD *)(a2 + 24);
      v22 = *(_QWORD *)(a2 + 32);
      sub_17A8BC(v23, v22, v12 & 1);
      *(_QWORD *)(a1 + 24) = v23;
      *(_QWORD *)(a1 + 32) = v22;
      *(_BYTE *)(a1 + 40) = v21;
    }
  }
  else if (v12 == 255)
  {
    sub_17E6A0(a1 + 24);
    v13 = *(_BYTE *)(a2 + 40);
    *v10 = *v11;
    *(_BYTE *)(a1 + 40) = v13;
  }
  else
  {
    v15 = v12 & 1;
    v17 = *(_QWORD *)(a2 + 24);
    v16 = *(_QWORD *)(a2 + 32);
    sub_17A8BC(v17, v16, v12 & 1);
    v18 = *(_QWORD *)(a1 + 24);
    v19 = *(_QWORD *)(a1 + 32);
    v20 = *(_BYTE *)(a1 + 40);
    *(_QWORD *)(a1 + 24) = v17;
    *(_QWORD *)(a1 + 32) = v16;
    *(_BYTE *)(a1 + 40) = v15;
    sub_17AED8(v18, v19, v20);
  }
  return a1;
}

__n128 initializeWithTake for PaginationUpdate(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for PaginationUpdate(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  _OWORD *v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;

  v4 = *(_BYTE *)(a2 + 16);
  v5 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_BYTE *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v4;
  sub_17AED8(v5, v6, v7);
  v8 = (_OWORD *)(a2 + 24);
  v9 = *(unsigned __int8 *)(a1 + 40);
  if (v9 != 255)
  {
    v10 = *(unsigned __int8 *)(a2 + 40);
    if (v10 != 255)
    {
      v11 = *(_QWORD *)(a1 + 24);
      v12 = *(_QWORD *)(a1 + 32);
      *(_OWORD *)(a1 + 24) = *v8;
      *(_BYTE *)(a1 + 40) = v10 & 1;
      sub_17AED8(v11, v12, v9 & 1);
      return a1;
    }
    sub_17E6A0(a1 + 24);
  }
  *(_OWORD *)(a1 + 24) = *v8;
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for PaginationUpdate(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 41))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for PaginationUpdate(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 40) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 41) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 41) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for PaginationUpdate()
{
  return &type metadata for PaginationUpdate;
}

uint64_t destroy for PaginationInfo(uint64_t a1)
{
  return sub_17AED8(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t _s7BooksUI14PaginationInfoOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_17A8BC(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for PaginationInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_17A8BC(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_BYTE *)(a1 + 16);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  sub_17AED8(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for PaginationInfo(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_BYTE *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v3;
  sub_17AED8(v4, v5, v6);
  return a1;
}

ValueMetadata *type metadata accessor for PaginationInfo()
{
  return &type metadata for PaginationInfo;
}

ValueMetadata *type metadata accessor for PaginationInfo.CodingKeys()
{
  return &type metadata for PaginationInfo.CodingKeys;
}

ValueMetadata *type metadata accessor for PaginationInfo.NextHrefCodingKeys()
{
  return &type metadata for PaginationInfo.NextHrefCodingKeys;
}

uint64_t _s7BooksUI14PaginationInfoO18NextHrefCodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_17EFF4 + 4 * byte_1F31FC[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_17F014 + 4 * byte_1F3201[v4]))();
}

_BYTE *sub_17EFF4(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_17F014(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_17F01C(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_17F024(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_17F02C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_17F034(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for PaginationInfo.NextAssetIDsCodingKeys()
{
  return &type metadata for PaginationInfo.NextAssetIDsCodingKeys;
}

uint64_t _s7BooksUI14PaginationInfoO10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_17F09C + 4 * byte_1F320B[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_17F0D0 + 4 * byte_1F3206[v4]))();
}

uint64_t sub_17F0D0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_17F0D8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x17F0E0);
  return result;
}

uint64_t sub_17F0EC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x17F0F4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_17F0F8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_17F100(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PaginationUpdate.CodingKeys()
{
  return &type metadata for PaginationUpdate.CodingKeys;
}

uint64_t sub_17F11C(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_17F168 + 4 * byte_1F3215[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_17F19C + 4 * byte_1F3210[v4]))();
}

uint64_t sub_17F19C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_17F1A4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x17F1ACLL);
  return result;
}

uint64_t sub_17F1B8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x17F1C0);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_17F1C4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_17F1CC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_17F1D8(uint64_t a1)
{
  return swift_getWitnessTable(&unk_1F3708, a1);
}

unint64_t sub_17F1EC()
{
  unint64_t result;

  result = qword_269A30;
  if (!qword_269A30)
  {
    result = swift_getWitnessTable(&unk_1F37C0, &type metadata for PaginationUpdate.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_269A30);
  }
  return result;
}

unint64_t sub_17F234()
{
  unint64_t result;

  result = qword_269A38;
  if (!qword_269A38)
  {
    result = swift_getWitnessTable(&unk_1F3878, &type metadata for PaginationInfo.NextAssetIDsCodingKeys);
    atomic_store(result, (unint64_t *)&qword_269A38);
  }
  return result;
}

unint64_t sub_17F27C()
{
  unint64_t result;

  result = qword_269A40;
  if (!qword_269A40)
  {
    result = swift_getWitnessTable(&unk_1F3930, &type metadata for PaginationInfo.NextHrefCodingKeys);
    atomic_store(result, (unint64_t *)&qword_269A40);
  }
  return result;
}

unint64_t sub_17F2C4()
{
  unint64_t result;

  result = qword_269A48;
  if (!qword_269A48)
  {
    result = swift_getWitnessTable(&unk_1F39E8, &type metadata for PaginationInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_269A48);
  }
  return result;
}

unint64_t sub_17F30C()
{
  unint64_t result;

  result = qword_269A50;
  if (!qword_269A50)
  {
    result = swift_getWitnessTable(&unk_1F38A0, &type metadata for PaginationInfo.NextHrefCodingKeys);
    atomic_store(result, (unint64_t *)&qword_269A50);
  }
  return result;
}

unint64_t sub_17F354()
{
  unint64_t result;

  result = qword_269A58;
  if (!qword_269A58)
  {
    result = swift_getWitnessTable(&unk_1F38C8, &type metadata for PaginationInfo.NextHrefCodingKeys);
    atomic_store(result, (unint64_t *)&qword_269A58);
  }
  return result;
}

unint64_t sub_17F39C()
{
  unint64_t result;

  result = qword_269A60;
  if (!qword_269A60)
  {
    result = swift_getWitnessTable(&unk_1F37E8, &type metadata for PaginationInfo.NextAssetIDsCodingKeys);
    atomic_store(result, (unint64_t *)&qword_269A60);
  }
  return result;
}

unint64_t sub_17F3E4()
{
  unint64_t result;

  result = qword_269A68;
  if (!qword_269A68)
  {
    result = swift_getWitnessTable(&unk_1F3810, &type metadata for PaginationInfo.NextAssetIDsCodingKeys);
    atomic_store(result, (unint64_t *)&qword_269A68);
  }
  return result;
}

unint64_t sub_17F42C()
{
  unint64_t result;

  result = qword_269A70;
  if (!qword_269A70)
  {
    result = swift_getWitnessTable(&unk_1F3958, &type metadata for PaginationInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_269A70);
  }
  return result;
}

unint64_t sub_17F474()
{
  unint64_t result;

  result = qword_269A78;
  if (!qword_269A78)
  {
    result = swift_getWitnessTable(&unk_1F3980, &type metadata for PaginationInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_269A78);
  }
  return result;
}

unint64_t sub_17F4BC()
{
  unint64_t result;

  result = qword_269A80;
  if (!qword_269A80)
  {
    result = swift_getWitnessTable(&unk_1F3730, &type metadata for PaginationUpdate.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_269A80);
  }
  return result;
}

unint64_t sub_17F504()
{
  unint64_t result;

  result = qword_269A88;
  if (!qword_269A88)
  {
    result = swift_getWitnessTable(&unk_1F3758, &type metadata for PaginationUpdate.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_269A88);
  }
  return result;
}

uint64_t sub_17F548(uint64_t a1)
{
  return swift_getWitnessTable(&unk_1F3678, a1);
}

uint64_t sub_17F558(uint64_t a1)
{
  return swift_getWitnessTable(&unk_1F36A0, a1);
}

uint64_t sub_17F568(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 0x656372756F73 && a2 == 0xE600000000000000)
  {
    v5 = 0xE600000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656372756F73, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 1954047342 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease(0xE400000000000000);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(1954047342, 0xE400000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_17F640(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 0x666572487478656ELL && a2 == 0xE800000000000000)
  {
    v5 = 0xE800000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x666572487478656ELL, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x657373417478656ELL && a2 == 0xEC00000073444974)
  {
    swift_bridgeObjectRelease(0xEC00000073444974);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x657373417478656ELL, 0xEC00000073444974, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_17F74C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int16 a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  void (*v17)(char *, char *, uint64_t);
  unint64_t v18;
  uint64_t v19;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t OpaqueTypeConformance2;
  _QWORD v25[2];
  uint64_t v26;
  unint64_t v27;

  v25[0] = a1;
  v25[1] = a4;
  v6 = sub_5440(&qword_269A98);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_5440(&qword_269AA0);
  __chkstk_darwin(v10);
  v12 = (char *)v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_5440(&qword_269AA8);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a3 & 0x100) != 0)
  {
    v21 = sub_17FB2C();
    v22 = a2;
    v23 = v21;
    View.shelfContentMaxWidth(_:)(v22, a3 & 1, v6, v21);
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v12, v16, v13);
    swift_storeEnumTagMultiPayload(v12, v10, 0);
    v26 = v6;
    v27 = v23;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v26, &opaque type descriptor for <<opaque return type of View.shelfContentMaxWidth(_:)>>, 1);
    _ConditionalContent<>.init(storage:)(v12, v13, v6, OpaqueTypeConformance2, v23);
    return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  }
  else
  {
    v17 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
    v17(v9, (char *)v25[0], v6);
    v17(v12, v9, v6);
    swift_storeEnumTagMultiPayload(v12, v10, 1);
    v18 = sub_17FB2C();
    v26 = v6;
    v27 = v18;
    v19 = swift_getOpaqueTypeConformance2(&v26, &opaque type descriptor for <<opaque return type of View.shelfContentMaxWidth(_:)>>, 1);
    _ConditionalContent<>.init(storage:)(v12, v13, v6, v19, v18);
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
}

uint64_t sub_17F960@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __int16 v3;

  if (*(_BYTE *)(v2 + 9))
    v3 = 256;
  else
    v3 = 0;
  return sub_17F74C(a1, *(_QWORD *)v2, v3 | *(unsigned __int8 *)(v2 + 8), a2);
}

uint64_t View.shelfGridContentMaxWidth(_:isActive:)(uint64_t a1, char a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  char v7;
  char v8;

  v6 = a1;
  v7 = a2 & 1;
  v8 = a3;
  return View.modifier<A>(_:)(&v6, a4, &type metadata for ShelfGridMaxWidthViewModifier, a5);
}

uint64_t sub_17F9C8(_QWORD *a1)
{
  uint64_t v1;

  v1 = type metadata accessor for ModifiedContent(255, *a1, &type metadata for ShelfGridMaxWidthViewModifier);
  sub_17FA1C();
  return swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
}

unint64_t sub_17FA1C()
{
  unint64_t result;

  result = qword_269A90;
  if (!qword_269A90)
  {
    result = swift_getWitnessTable(&unk_1F3BC0, &type metadata for ShelfGridMaxWidthViewModifier);
    atomic_store(result, (unint64_t *)&qword_269A90);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for ShelfGridMaxWidthViewModifier(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_WORD *)(result + 8) = *((_WORD *)a2 + 4);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for ShelfGridMaxWidthViewModifier(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 10))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 9);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ShelfGridMaxWidthViewModifier(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_WORD *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 10) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 10) = 0;
    if (a2)
      *(_BYTE *)(result + 9) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for ShelfGridMaxWidthViewModifier()
{
  return &type metadata for ShelfGridMaxWidthViewModifier;
}

uint64_t sub_17FB1C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_230378, 1);
}

unint64_t sub_17FB2C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_269AB0;
  if (!qword_269AB0)
  {
    v1 = sub_7EF8(&qword_269A98);
    result = swift_getWitnessTable(&protocol conformance descriptor for _ViewModifier_Content<A>, v1);
    atomic_store(result, (unint64_t *)&qword_269AB0);
  }
  return result;
}

unint64_t sub_17FB7C()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_269AB8;
  if (!qword_269AB8)
  {
    v1 = sub_7EF8(&qword_269AC0);
    v2[0] = sub_7EF8(&qword_269A98);
    v2[1] = sub_17FB2C();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.shelfContentMaxWidth(_:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_269AB8);
  }
  return result;
}

uint64_t static FlowActionDestination<>.newCardSet(focusedAdamID:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = a1;
  a3[1] = a2;
  return swift_bridgeObjectRetain(a2);
}

uint64_t sub_17FC20(char *a1, char *a2)
{
  return sub_C7570(*a1, *a2);
}

Swift::Int sub_17FC2C()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5, 0);
  if (v1)
    v2 = 0x4164657375636F66;
  else
    v2 = 0x536472614377656ELL;
  if (v1)
    v3 = 0xED000044496D6164;
  else
    v3 = 0xEA00000000007465;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_17FCBC(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  if (*v1)
    v2 = 0x4164657375636F66;
  else
    v2 = 0x536472614377656ELL;
  if (*v1)
    v3 = 0xED000044496D6164;
  else
    v3 = 0xEA00000000007465;
  String.hash(into:)(a1, v2, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_17FD28(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD v6[9];

  v2 = *v1;
  Hasher.init(_seed:)(v6, a1);
  if (v2)
    v3 = 0x4164657375636F66;
  else
    v3 = 0x536472614377656ELL;
  if (v2)
    v4 = 0xED000044496D6164;
  else
    v4 = 0xEA00000000007465;
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_17FDB4@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  Swift::String v3;
  void *v4;
  Swift::Int v5;
  uint64_t result;
  char v7;

  v3._countAndFlagsBits = *a1;
  v4 = (void *)a1[1];
  v3._object = v4;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_24A5B0, v3);
  result = swift_bridgeObjectRelease(v4);
  if (v5 == 1)
    v7 = 1;
  else
    v7 = 2;
  if (!v5)
    v7 = 0;
  *a2 = v7;
  return result;
}

void sub_17FE10(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 0x536472614377656ELL;
  if (*v1)
    v2 = 0x4164657375636F66;
  v3 = 0xEA00000000007465;
  if (*v1)
    v3 = 0xED000044496D6164;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_17FE60()
{
  _BYTE *v0;

  if (*v0)
    return 0x4164657375636F66;
  else
    return 0x536472614377656ELL;
}

uint64_t sub_17FEAC@<X0>(Swift::String string@<0:X0, 8:X1>, char *a2@<X8>)
{
  void *object;
  Swift::String v3;
  Swift::Int v5;
  uint64_t result;
  char v7;

  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_24A5B0, v3);
  result = swift_bridgeObjectRelease(object);
  if (v5 == 1)
    v7 = 1;
  else
    v7 = 2;
  if (!v5)
    v7 = 0;
  *a2 = v7;
  return result;
}

uint64_t sub_17FF0C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_180380();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_17FF34(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_180380();
  return CodingKey.debugDescription.getter(a1, v2);
}

Swift::Int sub_17FF5C()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1, 0);
  String.hash(into:)(v1, 0x4164657375636F66, 0xED000044496D6164);
  return Hasher._finalize()();
}

uint64_t sub_17FFB8(uint64_t a1)
{
  return String.hash(into:)(a1, 0x4164657375636F66, 0xED000044496D6164);
}

Swift::Int sub_17FFDC(uint64_t a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, a1);
  String.hash(into:)(v2, 0x4164657375636F66, 0xED000044496D6164);
  return Hasher._finalize()();
}

uint64_t sub_180034@<X0>(uint64_t *a1@<X0>, BOOL *a2@<X8>)
{
  Swift::String v3;
  void *v4;
  Swift::Int v5;
  uint64_t result;

  v3._countAndFlagsBits = *a1;
  v4 = (void *)a1[1];
  v3._object = v4;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_24A600, v3);
  result = swift_bridgeObjectRelease(v4);
  *a2 = v5 != 0;
  return result;
}

void sub_180084(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "focusedAdamID");
  *(_WORD *)(a1 + 14) = -4864;
}

uint64_t sub_1800AC()
{
  return 0x4164657375636F66;
}

uint64_t sub_1800D0@<X0>(Swift::String string@<0:X0, 8:X1>, BOOL *a2@<X8>)
{
  void *object;
  Swift::String v3;
  Swift::Int v5;
  uint64_t result;

  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_24A638, v3);
  result = swift_bridgeObjectRelease(object);
  *a2 = v5 != 0;
  return result;
}

uint64_t sub_180124(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1803C4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_18014C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1803C4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t FlowAction.NewCardSetDestination.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  char v30;
  char v31;

  v26 = a2;
  v3 = sub_5440(&qword_269AC8);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = sub_5440(&qword_269AD0);
  v7 = *(_QWORD *)(v27 - 8);
  __chkstk_darwin(v27);
  v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = a1[3];
  v10 = a1[4];
  sub_5480(a1, v11);
  v12 = sub_180380();
  v13 = v28;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&_s21NewCardSetDestinationV10CodingKeysON, &_s21NewCardSetDestinationV10CodingKeysON, v12, v11, v10);
  if (v13)
  {
    v19 = a1;
  }
  else
  {
    v31 = 0;
    v14 = v27;
    if ((KeyedDecodingContainer.contains(_:)(&v31, v27) & 1) != 0)
    {
      v29 = 0;
      v15 = sub_1803C4();
      v16 = KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(&_s21NewCardSetDestinationV16LegacyCodingKeysON, &v29, v14, &_s21NewCardSetDestinationV16LegacyCodingKeysON, v15);
      v21 = KeyedDecodingContainer.decode(_:forKey:)(v16, v3);
      v23 = v22;
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v27);
    }
    else
    {
      v30 = 1;
      v21 = KeyedDecodingContainer.decode(_:forKey:)(&v30, v14);
      v17 = v14;
      v23 = v18;
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v17);
    }
    v24 = v26;
    v19 = a1;
    *v26 = v21;
    v24[1] = v23;
  }
  return _s7BooksUI13AnyPagedFrameVwxx_0(v19);
}

unint64_t sub_180380()
{
  unint64_t result;

  result = qword_269AD8;
  if (!qword_269AD8)
  {
    result = swift_getWitnessTable(&unk_1F3EF4, &_s21NewCardSetDestinationV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_269AD8);
  }
  return result;
}

unint64_t sub_1803C4()
{
  unint64_t result;

  result = qword_269AE0;
  if (!qword_269AE0)
  {
    result = swift_getWitnessTable(&unk_1F3EA4, &_s21NewCardSetDestinationV16LegacyCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_269AE0);
  }
  return result;
}

unint64_t sub_180408(uint64_t a1)
{
  unint64_t result;

  result = sub_18042C();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_18042C()
{
  unint64_t result;

  result = qword_269AE8;
  if (!qword_269AE8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for FlowAction.NewCardSetDestination, &type metadata for FlowAction.NewCardSetDestination);
    atomic_store(result, (unint64_t *)&qword_269AE8);
  }
  return result;
}

uint64_t sub_180470@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return FlowAction.NewCardSetDestination.init(from:)(a1, a2);
}

ValueMetadata *type metadata accessor for FlowAction.NewCardSetDestination()
{
  return &type metadata for FlowAction.NewCardSetDestination;
}

uint64_t _s21NewCardSetDestinationV10CodingKeysOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1804E0 + 4 * byte_1F3C15[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_180514 + 4 * byte_1F3C10[v4]))();
}

uint64_t sub_180514(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_18051C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x180524);
  return result;
}

uint64_t sub_180530(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x180538);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_18053C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_180544(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s21NewCardSetDestinationV10CodingKeysOMa()
{
  return &_s21NewCardSetDestinationV10CodingKeysON;
}

uint64_t _s21NewCardSetDestinationV16LegacyCodingKeysOwst(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1805A0 + 4 * byte_1F3C1A[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1805C0 + 4 * byte_1F3C1F[v4]))();
}

_BYTE *sub_1805A0(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1805C0(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1805C8(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1805D0(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1805D8(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1805E0(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *_s21NewCardSetDestinationV16LegacyCodingKeysOMa()
{
  return &_s21NewCardSetDestinationV16LegacyCodingKeysON;
}

unint64_t sub_180600()
{
  unint64_t result;

  result = qword_269AF0;
  if (!qword_269AF0)
  {
    result = swift_getWitnessTable(&unk_1F3D8C, &_s21NewCardSetDestinationV16LegacyCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_269AF0);
  }
  return result;
}

unint64_t sub_180648()
{
  unint64_t result;

  result = qword_269AF8;
  if (!qword_269AF8)
  {
    result = swift_getWitnessTable(&unk_1F3E7C, &_s21NewCardSetDestinationV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_269AF8);
  }
  return result;
}

unint64_t sub_180690()
{
  unint64_t result;

  result = qword_269B00;
  if (!qword_269B00)
  {
    result = swift_getWitnessTable(&unk_1F3CC4, &_s21NewCardSetDestinationV16LegacyCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_269B00);
  }
  return result;
}

unint64_t sub_1806D8()
{
  unint64_t result;

  result = qword_269B08;
  if (!qword_269B08)
  {
    result = swift_getWitnessTable(&unk_1F3CEC, &_s21NewCardSetDestinationV16LegacyCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_269B08);
  }
  return result;
}

unint64_t sub_180720()
{
  unint64_t result;

  result = qword_269B10;
  if (!qword_269B10)
  {
    result = swift_getWitnessTable(&unk_1F3DB4, &_s21NewCardSetDestinationV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_269B10);
  }
  return result;
}

unint64_t sub_180768()
{
  unint64_t result;

  result = qword_269B18;
  if (!qword_269B18)
  {
    result = swift_getWitnessTable(&unk_1F3DDC, &_s21NewCardSetDestinationV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_269B18);
  }
  return result;
}

uint64_t static FlowActionPresentation.cardsPresent.getter()
{
  return 0x6572507364726163;
}

unint64_t static FlowActionPresentation.roundedCornerFormSheetPresent.getter()
{
  return 0xD00000000000001DLL;
}

uint64_t static FlowActionPresentation.stackZoomPush.getter()
{
  return 0x6F6F5A6B63617473;
}

uint64_t static ListItemViewModel.recommendationsPage(sectionName:assetInfo:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  char *v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[5];
  __int128 v26[2];
  _QWORD v27[5];
  _BYTE v28[280];
  __int128 v29[2];
  __int128 v30;
  __int128 v31;
  __int16 v32;
  _OWORD v33[3];
  uint64_t v34;

  v23 = a1;
  v24 = a4;
  v6 = type metadata accessor for ListItemViewModel(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_5440(&qword_2618C8);
  __chkstk_darwin(v9);
  v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a3[3];
  v13 = a3[4];
  sub_5480(a3, v12);
  v14 = ContentInfo.id.getter(v12, *(_QWORD *)(v13 + 8));
  v16 = v15;
  sub_BD00((uint64_t)a3, (uint64_t)v29);
  *(_QWORD *)v28 = swift_getKeyPath(&unk_1F3F48);
  v28[8] = 0;
  sub_AC68(v29, (uint64_t)&v28[16]);
  v33[0] = *(_OWORD *)v28;
  v33[1] = *(_OWORD *)&v28[16];
  v33[2] = *(_OWORD *)&v28[32];
  v34 = *(_QWORD *)&v28[48];
  sub_BD00((uint64_t)a3, (uint64_t)v29);
  *((_QWORD *)&v30 + 1) = 0x407F400000000000;
  LOBYTE(v31) = 2;
  *((_QWORD *)&v31 + 1) = 0x407F400000000000;
  v32 = 3;
  swift_bridgeObjectRetain(a2);
  static ListItemMetadata.recommendationsPage(assetInfo:)(a3, (uint64_t)v28);
  v27[3] = &type metadata for ListItemAccessoryRecommendationControls;
  v27[4] = sub_180ABC();
  v27[0] = swift_allocObject(&unk_257968, 72, 7);
  sub_180B30((uint64_t)v33, v27[0] + 16);
  sub_BD00((uint64_t)a3, (uint64_t)v26);
  sub_BD00((uint64_t)a3, (uint64_t)v25);
  CardInfo.init(with:alwaysPresentNewCardSet:)(v25, 1, (uint64_t)v11);
  v17 = v29[0];
  *(_OWORD *)(v8 + 40) = v29[1];
  v18 = v31;
  *(_OWORD *)(v8 + 56) = v30;
  *((_QWORD *)v8 + 51) = 0;
  *(_OWORD *)(v8 + 72) = v18;
  *(_OWORD *)(v8 + 376) = 0u;
  *(_OWORD *)(v8 + 392) = 0u;
  *v8 = 2;
  *((_QWORD *)v8 + 1) = 0;
  v8[16] = 1;
  *((_WORD *)v8 + 44) = v32;
  *(_OWORD *)(v8 + 24) = v17;
  memcpy(v8 + 96, v28, 0x118uLL);
  sub_6B2A0((uint64_t)v27, (uint64_t)(v8 + 376));
  sub_AC68(v26, (uint64_t)(v8 + 416));
  sub_6B2E8((uint64_t)v11, (uint64_t)&v8[*(int *)(v6 + 40)]);
  v19 = &v8[*(int *)(v6 + 44)];
  *(_QWORD *)v19 = 0xD000000000000014;
  *((_QWORD *)v19 + 1) = 0x80000000001FE200;
  v20 = v24;
  *((_QWORD *)v19 + 2) = v23;
  *((_QWORD *)v19 + 3) = a2;
  *((_OWORD *)v19 + 2) = 0u;
  *((_OWORD *)v19 + 3) = 0u;
  *((_OWORD *)v19 + 4) = 0u;
  *((_OWORD *)v19 + 5) = 0u;
  *((_OWORD *)v19 + 6) = 0u;
  *((_OWORD *)v19 + 7) = 0u;
  *((_QWORD *)v19 + 16) = v14;
  *((_QWORD *)v19 + 17) = v16;
  v19[144] = 2;
  sub_6B330((uint64_t)v8, v20);
  return sub_180B6C((uint64_t)v33);
}

unint64_t sub_180ABC()
{
  unint64_t result;

  result = qword_269B20;
  if (!qword_269B20)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ListItemAccessoryRecommendationControls, &type metadata for ListItemAccessoryRecommendationControls);
    atomic_store(result, (unint64_t *)&qword_269B20);
  }
  return result;
}

uint64_t sub_180B00()
{
  uint64_t v0;

  sub_BE0C(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
  _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 72, 7);
}

uint64_t sub_180B30(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for ListItemAccessoryBuyButton(a2, a1);
  return a2;
}

uint64_t sub_180B6C(uint64_t a1)
{
  destroy for ListItemAccessoryBuyButton(a1);
  return a1;
}

uint64_t sub_180BA0(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;
  char v16;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native(*v1);
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = sub_AAED0(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = (unint64_t)&v3[5 * v8 + 4];
  if (a1 + 32 < v9 + 40 * v2 && v9 < a1 + 32 + 40 * v2)
    goto LABEL_24;
  sub_5440(&qword_25E848);
  swift_arrayInitWithCopy(v9);
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease(a1);
    *v1 = v3;
    return result;
  }
  v11 = v3[2];
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  v16 = 2;
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, v16, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_180D08(uint64_t a1)
{
  char **v1;
  uint64_t v2;
  char *v3;
  int64_t v4;
  int64_t v5;
  char *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;
  char v16;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *v1;
  v4 = *((_QWORD *)*v1 + 2);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native(*v1);
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= *((_QWORD *)v3 + 3) >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = sub_AAC9C(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = *((_QWORD *)v3 + 2);
  if ((*((_QWORD *)v3 + 3) >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = (unint64_t)&v3[16 * v8 + 32];
  if (a1 + 32 < v9 + 16 * v2 && v9 < a1 + 32 + 16 * v2)
    goto LABEL_24;
  swift_arrayInitWithCopy(v9);
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease(a1);
    *v1 = v3;
    return result;
  }
  v11 = *((_QWORD *)v3 + 2);
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    *((_QWORD *)v3 + 2) = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  v16 = 2;
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, v16, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_180E58(uint64_t a1)
{
  char **v1;
  unint64_t v2;
  char *v3;
  int64_t v4;
  int64_t v5;
  char *isUniquelyReferenced_nonNull_native;
  int64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  int64_t v16;
  uint64_t result;
  char v18;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *v1;
  v4 = *((_QWORD *)*v1 + 2);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native(*v1);
  if ((_DWORD)isUniquelyReferenced_nonNull_native)
  {
    v8 = *((_QWORD *)v3 + 3) >> 1;
    if (v8 >= v5)
    {
      v9 = *(_QWORD *)(a1 + 16);
      if (v9)
        goto LABEL_5;
LABEL_18:
      if (!v2)
        goto LABEL_19;
      goto LABEL_21;
    }
  }
  if (v4 <= v5)
    v16 = v4 + v2;
  else
    v16 = v4;
  v3 = sub_AB45C(isUniquelyReferenced_nonNull_native, v16, 1, v3);
  v8 = *((_QWORD *)v3 + 3) >> 1;
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
    goto LABEL_18;
LABEL_5:
  v10 = *((_QWORD *)v3 + 2);
  if (v8 - v10 < (uint64_t)v9)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v11 = (unint64_t)&v3[8 * v10 + 32];
  if (a1 + 32 < v11 + 8 * v9 && v11 < a1 + 32 + 8 * v9)
    goto LABEL_24;
  sub_5440(&qword_25DF98);
  swift_arrayInitWithCopy(v11);
  if (v9 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v13 = *((_QWORD *)v3 + 2);
  v14 = __OFADD__(v13, v9);
  v15 = v13 + v9;
  if (!v14)
  {
    *((_QWORD *)v3 + 2) = v15;
LABEL_19:
    result = swift_bridgeObjectRelease(a1);
    *v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  v18 = 2;
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, v18, 1092, 0);
  __break(1u);
  return result;
}

