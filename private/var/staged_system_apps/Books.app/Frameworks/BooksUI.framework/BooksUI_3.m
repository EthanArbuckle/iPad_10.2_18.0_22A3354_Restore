BooksUI::ImageFilter::Environment_optional __swiftcall ImageFilter.Environment.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  unint64_t v5;
  BooksUI::ImageFilter::Environment_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_24A670, v3);
  result.value = swift_bridgeObjectRelease(object);
  v7 = 3;
  if (v5 < 3)
    v7 = v5;
  *v4 = v7;
  return result;
}

uint64_t ImageFilter.Environment.rawValue.getter()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x646168536B726164;
  if (*v0 == 1)
    v1 = 0;
  if (*v0)
    return v1;
  else
    return 0x746867696ELL;
}

uint64_t sub_181070(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_C73D0(*a1, *a2);
}

Swift::Int sub_18107C()
{
  unsigned __int8 *v0;
  int v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v7[9];

  v1 = *v0;
  Hasher.init(_seed:)(v7, 0);
  v2 = 0xE000000000000000;
  v3 = 0x646168536B726164;
  if (v1 == 1)
    v3 = 0;
  else
    v2 = 0xEA0000000000776FLL;
  if (v1)
    v4 = v3;
  else
    v4 = 0x746867696ELL;
  if (v1)
    v5 = v2;
  else
    v5 = 0xE500000000000000;
  String.hash(into:)(v7, v4, v5);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

uint64_t sub_18110C(uint64_t a1)
{
  _BYTE *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2 = 0xE000000000000000;
  v3 = 0x646168536B726164;
  if (*v1 == 1)
    v3 = 0;
  else
    v2 = 0xEA0000000000776FLL;
  if (*v1)
    v4 = v3;
  else
    v4 = 0x746867696ELL;
  if (*v1)
    v5 = v2;
  else
    v5 = 0xE500000000000000;
  String.hash(into:)(a1, v4, v5);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_181178(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD v8[9];

  v2 = *v1;
  Hasher.init(_seed:)(v8, a1);
  v3 = 0xE000000000000000;
  v4 = 0x646168536B726164;
  if (v2 == 1)
    v4 = 0;
  else
    v3 = 0xEA0000000000776FLL;
  if (v2)
    v5 = v4;
  else
    v5 = 0x746867696ELL;
  if (v2)
    v6 = v3;
  else
    v6 = 0xE500000000000000;
  String.hash(into:)(v8, v5, v6);
  swift_bridgeObjectRelease(v6);
  return Hasher._finalize()();
}

BooksUI::ImageFilter::Environment_optional sub_181204(Swift::String *a1)
{
  return ImageFilter.Environment.init(rawValue:)(*a1);
}

void sub_181210(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xE500000000000000;
  v4 = 0xE000000000000000;
  v5 = 0x646168536B726164;
  if (v2 == 1)
    v5 = 0;
  else
    v4 = 0xEA0000000000776FLL;
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x746867696ELL;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

Swift::String __swiftcall ImageFilter.build()()
{
  unsigned __int16 *v0;
  int v1;
  int v2;
  char *v3;
  unint64_t v4;
  unint64_t v5;
  int64_t v6;
  unint64_t v7;
  char *v8;
  int64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  unint64_t v17;
  _UNKNOWN **v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;
  char *v25;
  int64_t v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  uint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  unint64_t v44;
  char *v45;
  char *v46;
  unint64_t v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  void *v53;
  void *v54;
  uint64_t v55;
  void *v56;
  Swift::String result;
  char *v58;

  v1 = *v0 | (*((unsigned __int8 *)v0 + 2) << 16);
  if (!(*((unsigned __int8 *)v0 + 2) >> 6))
  {
    v13 = sub_AAC9C(0, 1, 1, (char *)_swiftEmptyArrayStorage);
    v15 = *((_QWORD *)v13 + 2);
    v14 = *((_QWORD *)v13 + 3);
    if (v15 >= v14 >> 1)
      v13 = sub_AAC9C((char *)(v14 > 1), v15 + 1, 1, v13);
    *((_QWORD *)v13 + 2) = v15 + 1;
    v16 = &v13[16 * v15];
    v17 = 0xE500000000000000;
    *((_QWORD *)v16 + 4) = 0x7265766F63;
    *((_QWORD *)v16 + 5) = 0xE500000000000000;
    v58 = v13;
    if ((v1 & 1) != 0)
      v18 = &off_24A6D8;
    else
      v18 = &off_24A728;
    sub_180D08((uint64_t)v18);
    if (BYTE1(v1))
    {
      if (BYTE1(v1) == 1)
      {
        v19 = 0;
        v17 = 0xE000000000000000;
      }
      else
      {
        v19 = 0x646168536B726164;
        v17 = 0xEA0000000000776FLL;
      }
    }
    else
    {
      v19 = 0x746867696ELL;
    }
    v3 = v58;
    if ((swift_isUniquelyReferenced_nonNull_native(v58) & 1) == 0)
      v3 = sub_AAC9C(0, *((_QWORD *)v58 + 2) + 1, 1, v58);
    v31 = *((_QWORD *)v3 + 2);
    v42 = *((_QWORD *)v3 + 3);
    v32 = v31 + 1;
    if (v31 >= v42 >> 1)
      v3 = sub_AAC9C((char *)(v42 > 1), v31 + 1, 1, v3);
    *((_QWORD *)v3 + 2) = v32;
    v43 = &v3[16 * v31];
    *((_QWORD *)v43 + 4) = v19;
    *((_QWORD *)v43 + 5) = v17;
    if ((v1 & 0x10000) == 0)
    {
LABEL_30:
      v34 = *((_QWORD *)v3 + 2);
      if (!v34)
        goto LABEL_58;
      goto LABEL_31;
    }
    goto LABEL_49;
  }
  if (*((unsigned __int8 *)v0 + 2) >> 6 == 1)
  {
    v2 = *v0;
    v3 = sub_AAC9C(0, 1, 1, (char *)_swiftEmptyArrayStorage);
    v5 = *((_QWORD *)v3 + 2);
    v4 = *((_QWORD *)v3 + 3);
    v6 = v4 >> 1;
    v7 = v5 + 1;
    if (v4 >> 1 <= v5)
    {
      v3 = sub_AAC9C((char *)(v4 > 1), v5 + 1, 1, v3);
      v4 = *((_QWORD *)v3 + 3);
      v6 = v4 >> 1;
    }
    *((_QWORD *)v3 + 2) = v7;
    v8 = &v3[16 * v5];
    *((_QWORD *)v8 + 4) = 0x7265766F63;
    *((_QWORD *)v8 + 5) = 0xE500000000000000;
    v9 = v5 + 2;
    if (v6 < v9)
      v3 = sub_AAC9C((char *)(v4 > 1), v9, 1, v3);
    *((_QWORD *)v3 + 2) = v9;
    v10 = &v3[16 * v7];
    *((_QWORD *)v10 + 4) = 0x6F6F626F69647561;
    *((_QWORD *)v10 + 5) = 0xE90000000000006BLL;
    if (v2)
    {
      if (v2 == 1)
      {
        v11 = 0;
        v12 = 0xE000000000000000;
      }
      else
      {
        v11 = 0x646168536B726164;
        v12 = 0xEA0000000000776FLL;
      }
    }
    else
    {
      v12 = 0xE500000000000000;
      v11 = 0x746867696ELL;
    }
    v31 = *((_QWORD *)v3 + 2);
    v30 = *((_QWORD *)v3 + 3);
    v32 = v31 + 1;
    if (v31 >= v30 >> 1)
      v3 = sub_AAC9C((char *)(v30 > 1), v31 + 1, 1, v3);
    *((_QWORD *)v3 + 2) = v32;
    v33 = &v3[16 * v31];
    *((_QWORD *)v33 + 4) = v11;
    *((_QWORD *)v33 + 5) = v12;
    if ((v1 & 0x100) == 0)
      goto LABEL_30;
LABEL_49:
    v44 = *((_QWORD *)v3 + 3);
    if (v32 >= v44 >> 1)
      v3 = sub_AAC9C((char *)(v44 > 1), v31 + 2, 1, v3);
    *((_QWORD *)v3 + 2) = v31 + 2;
    v45 = &v3[16 * v32];
    *((_QWORD *)v45 + 4) = 0x7463697274736572;
    v46 = v45 + 32;
    v29 = 0xEA00000000006465;
    goto LABEL_57;
  }
  v20 = *v0;
  v3 = sub_AAC9C(0, 1, 1, (char *)_swiftEmptyArrayStorage);
  v22 = *((_QWORD *)v3 + 2);
  v21 = *((_QWORD *)v3 + 3);
  v23 = v21 >> 1;
  v24 = v22 + 1;
  if (v21 >> 1 <= v22)
  {
    v3 = sub_AAC9C((char *)(v21 > 1), v22 + 1, 1, v3);
    v21 = *((_QWORD *)v3 + 3);
    v23 = v21 >> 1;
  }
  *((_QWORD *)v3 + 2) = v24;
  v25 = &v3[16 * v22];
  *((_QWORD *)v25 + 4) = 0x7265766F63;
  *((_QWORD *)v25 + 5) = 0xE500000000000000;
  v26 = v22 + 2;
  if (v23 < v26)
    v3 = sub_AAC9C((char *)(v21 > 1), v26, 1, v3);
  *((_QWORD *)v3 + 2) = v26;
  v27 = &v3[16 * v24];
  *((_QWORD *)v27 + 4) = 6710384;
  *((_QWORD *)v27 + 5) = 0xE300000000000000;
  if (v20)
  {
    if (v20 == 1)
    {
      v28 = 0;
      v29 = 0xE000000000000000;
    }
    else
    {
      v28 = 0x646168536B726164;
      v29 = 0xEA0000000000776FLL;
    }
  }
  else
  {
    v29 = 0xE500000000000000;
    v28 = 0x746867696ELL;
  }
  v48 = *((_QWORD *)v3 + 2);
  v47 = *((_QWORD *)v3 + 3);
  if (v48 >= v47 >> 1)
    v3 = sub_AAC9C((char *)(v47 > 1), v48 + 1, 1, v3);
  *((_QWORD *)v3 + 2) = v48 + 1;
  v49 = &v3[16 * v48];
  *((_QWORD *)v49 + 4) = v28;
  v46 = v49 + 32;
LABEL_57:
  *((_QWORD *)v46 + 1) = v29;
  v34 = *((_QWORD *)v3 + 2);
  if (!v34)
    goto LABEL_58;
LABEL_31:
  swift_bridgeObjectRetain(v3);
  v35 = v3 + 40;
  do
  {
    v40 = *(v35 - 1);
    v39 = *v35;
    v41 = HIBYTE(*v35) & 0xFLL;
    if ((*v35 & 0x2000000000000000) == 0)
      v41 = v40 & 0xFFFFFFFFFFFFLL;
    if (v41)
    {
      swift_bridgeObjectRetain(*v35);
      if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage) & 1) == 0)
        sub_20F44(0, _swiftEmptyArrayStorage[2] + 1, 1);
      v37 = _swiftEmptyArrayStorage[2];
      v36 = _swiftEmptyArrayStorage[3];
      if (v37 >= v36 >> 1)
        sub_20F44(v36 > 1, v37 + 1, 1);
      _swiftEmptyArrayStorage[2] = v37 + 1;
      v38 = &_swiftEmptyArrayStorage[2 * v37];
      v38[4] = v40;
      v38[5] = v39;
    }
    v35 += 2;
    --v34;
  }
  while (v34);
  swift_bridgeObjectRelease(v3);
LABEL_58:
  swift_bridgeObjectRelease(v3);
  v50 = sub_5440(&qword_25DF80);
  v51 = sub_A8F8();
  v52 = BidirectionalCollection<>.joined(separator:)(14906, 0xE200000000000000, v50, v51);
  v54 = v53;
  swift_release(_swiftEmptyArrayStorage);
  v55 = v52;
  v56 = v54;
  result._object = v56;
  result._countAndFlagsBits = v55;
  return result;
}

unint64_t sub_181804()
{
  unint64_t result;

  result = qword_269B28;
  if (!qword_269B28)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ImageFilter.Environment, &type metadata for ImageFilter.Environment);
    atomic_store(result, (unint64_t *)&qword_269B28);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for ImageFilter(unsigned __int16 *a1, unsigned int a2)
{
  int v2;
  int v4;

  if (!a2)
    return 0;
  if (a2 > 0x7FFFD)
  {
    if ((a2 + 33030146) >> 24)
    {
      v2 = *((unsigned __int8 *)a1 + 3);
      if (*((_BYTE *)a1 + 3))
        return (*a1 | (*((unsigned __int8 *)a1 + 2) << 16) | (v2 << 24)) - 16252930;
    }
    else
    {
      v2 = *(unsigned __int16 *)((char *)a1 + 3);
      if (*(unsigned __int16 *)((char *)a1 + 3))
        return (*a1 | (*((unsigned __int8 *)a1 + 2) << 16) | (v2 << 24)) - 16252930;
    }
  }
  if ((((*((unsigned __int8 *)a1 + 2) >> 6) | (4
                                              * ((*a1 >> 4) & 0xFC0 | (*a1 >> 2) | (((*((unsigned __int8 *)a1 + 2) >> 1) & 0x1F) << 12)))) ^ 0x7FFFFu) >= 0x7FFFD)
    v4 = -1;
  else
    v4 = ((*((unsigned __int8 *)a1 + 2) >> 6) | (4
                                               * ((*a1 >> 4) & 0xFC0 | (*a1 >> 2) | (((*((unsigned __int8 *)a1 + 2) >> 1) & 0x1F) << 12)))) ^ 0x7FFFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ImageFilter(uint64_t result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;
  unsigned int v5;

  if ((a3 + 33030146) >> 24)
    v3 = 1;
  else
    v3 = 2;
  if (a3 <= 0x7FFFD)
    v3 = 0;
  if (a2 > 0x7FFFD)
  {
    *(_WORD *)result = a2 + 2;
    *(_BYTE *)(result + 2) = (a2 - 524286) >> 16;
    if (v3)
    {
      v4 = ((a2 - 524286) >> 24) + 1;
      if (v3 == 2)
        *(_WORD *)(result + 3) = v4;
      else
        *(_BYTE *)(result + 3) = v4;
    }
  }
  else
  {
    if (!v3)
      goto LABEL_10;
    if (v3 == 2)
    {
      *(_WORD *)(result + 3) = 0;
LABEL_10:
      if (!a2)
        return result;
LABEL_16:
      v5 = ((-a2 >> 2) & 0x1FFFF) - (a2 << 17);
      *(_BYTE *)(result + 2) = ((32 * v5) & 0xFE0000) >> 16;
      *(_WORD *)result = (16 * v5) & 0xFC00 | (4 * (v5 & 0x3F));
      return result;
    }
    *(_BYTE *)(result + 3) = 0;
    if (a2)
      goto LABEL_16;
  }
  return result;
}

uint64_t sub_1819A4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 2) >> 6;
}

uint64_t sub_1819B0(uint64_t result)
{
  *(_BYTE *)(result + 2) &= 0x3Fu;
  return result;
}

unsigned __int16 *sub_1819C8(unsigned __int16 *result, int a2)
{
  int v2;

  v2 = (*result | (*((unsigned __int8 *)result + 2) << 16)) & 0x10303 | (a2 << 22);
  *result &= 0x303u;
  *((_BYTE *)result + 2) = BYTE2(v2);
  return result;
}

ValueMetadata *type metadata accessor for ImageFilter()
{
  return &type metadata for ImageFilter;
}

uint64_t storeEnumTagSinglePayload for ImageFilter.Environment(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_181A50 + 4 * byte_1F3F75[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_181A84 + 4 * byte_1F3F70[v4]))();
}

uint64_t sub_181A84(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181A8C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x181A94);
  return result;
}

uint64_t sub_181AA0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x181AA8);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_181AAC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181AB4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ImageFilter.Environment()
{
  return &type metadata for ImageFilter.Environment;
}

double StarRatingView.init(rating:)@<D0>(uint64_t a1@<X8>, double a2@<D0>)
{
  double result;

  *(double *)a1 = a2;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = xmmword_1F4050;
  *(_QWORD *)(a1 + 24) = 0x4008000000000000;
  return result;
}

uint64_t StarRatingView.body.getter()
{
  double *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  double v9;
  double v10;
  double v11;
  double v12;
  uint64_t v13;
  double *v14;
  uint64_t v15;
  uint64_t v17;

  v1 = type metadata accessor for AccessibilityChildBehavior(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_5440(&qword_269B30);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v0;
  v10 = v0[1];
  v11 = v0[2];
  v12 = v0[3];
  *(_QWORD *)v8 = static VerticalAlignment.center.getter(v6);
  *((_QWORD *)v8 + 1) = 0x4000000000000000;
  v8[16] = 0;
  v13 = sub_5440(&qword_269B38);
  v14 = sub_181C40((uint64_t)&v8[*(int *)(v13 + 44)], v9, v10, v11, v12);
  static AccessibilityChildBehavior.ignore.getter(v14);
  v15 = sub_7FD8(&qword_269B40, &qword_269B30, (uint64_t)&protocol conformance descriptor for HStack<A>);
  View.accessibilityElement(children:)(v4, v5, v15);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  return sub_B414((uint64_t)v8, &qword_269B30);
}

double *sub_181C40@<X0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  double *result;
  uint64_t v28;
  uint64_t (**v29)@<X0>(uint64_t@<X8>);
  double v30;
  uint64_t KeyPath;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  double (*v37)@<D0>(uint64_t@<X8>);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  double v41;
  uint64_t v42;
  double v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  void (*v48)(char *, char *, uint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  void (*v53)(char *, uint64_t);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  double *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  double *v67;
  uint64_t v68;
  uint64_t v69;
  double (*v70)@<D0>(uint64_t@<X8>);
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;

  v10 = sub_5440(&qword_269B48);
  __chkstk_darwin(v10);
  v12 = (char *)&v63 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_5440(&qword_269B50);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v63 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v15);
  v20 = (char *)&v63 - v19;
  v21 = __chkstk_darwin(v18);
  v23 = (char *)&v63 - v22;
  __chkstk_darwin(v21);
  v25 = (char *)&v63 - v24;
  v26 = sub_5440(&qword_269B58);
  result = (double *)__chkstk_darwin(v26);
  v29 = (uint64_t (**)@<X0>(uint64_t@<X8>))((char *)&v63 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (a4 < a2 || a2 < a3)
  {
    v58 = result;
    v59 = swift_allocObject(&unk_257BB8, 32, 7);
    *(_QWORD *)(v59 + 16) = 0xD000000000000027;
    *(_QWORD *)(v59 + 24) = 0x80000000001FE220;
    *v29 = sub_18B10;
    v29[1] = (uint64_t (*)@<X0>(uint64_t@<X8>))v59;
    swift_storeEnumTagMultiPayload(v29, v58, 0);
    v60 = sub_5440(&qword_25E830);
    v61 = sub_7FD8((unint64_t *)&qword_25E838, &qword_25E830, (uint64_t)&protocol conformance descriptor for BooksFailureView<A>);
    v62 = sub_7FD8(&qword_269B68, &qword_269B48, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    return (double *)_ConditionalContent<>.init(storage:)(v29, v60, v10, v61, v62);
  }
  v30 = floor(a2);
  if ((~*(_QWORD *)&v30 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_16;
  }
  if (v30 <= -9.22337204e18)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (v30 >= 9.22337204e18)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if ((uint64_t)v30 < 0)
  {
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v65 = v13;
  v66 = (uint64_t)&v63 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v67 = result;
  v68 = a1;
  v72 = v23;
  v73 = 0;
  v69 = v10;
  v74 = (uint64_t)v30;
  KeyPath = swift_getKeyPath(&unk_1F40C8);
  v32 = sub_5440(&qword_262E68);
  v33 = sub_A3DE4();
  v71 = v25;
  v34 = KeyPath;
  v35 = v32;
  v64 = v33;
  result = (double *)ForEach<>.init(_:id:content:)(&v73, v34, sub_182224, 0, v32, &type metadata for Image, v33, &protocol witness table for Int, &protocol witness table for Image);
  v36 = 0;
  v37 = 0;
  v38 = 0;
  v39 = 0;
  v40 = 0;
  v41 = a2 - v30;
  if (v41 > 0.0)
  {
    v36 = Image.init(systemName:)(1918989427, 0xE400000000000000);
    v39 = _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0();
    v40 = v42;
    result = (double *)swift_allocObject(&unk_257B90, 56, 7);
    v38 = (uint64_t)result;
    result[2] = a2;
    result[3] = a3;
    result[4] = a4;
    result[5] = a5;
    v37 = sub_182484;
    result[6] = v41;
  }
  v43 = a4 - a2;
  if ((~COERCE__INT64(a4 - a2) & 0x7FF0000000000000) == 0)
    goto LABEL_19;
  if (v43 <= -9.22337204e18)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  if (v43 < 9.22337204e18)
  {
    if (((uint64_t)v43 & 0x8000000000000000) == 0)
    {
      v73 = 0;
      v74 = (uint64_t)v43;
      v44 = v14;
      v63 = v14;
      v70 = v37;
      v45 = swift_getKeyPath(&unk_1F40C8);
      v46 = v72;
      ForEach<>.init(_:id:content:)(&v73, v45, sub_182330, 0, v35, &type metadata for Image, v64, &protocol witness table for Int, &protocol witness table for Image);
      v47 = (uint64_t)v12;
      v48 = *(void (**)(char *, char *, uint64_t))(v44 + 16);
      v49 = v65;
      v48(v20, v71, v65);
      v48(v17, v46, v49);
      v48((char *)v47, v20, v49);
      v50 = sub_5440(&qword_269B60);
      v51 = (uint64_t *)(v47 + *(int *)(v50 + 48));
      v52 = (uint64_t)v70;
      *v51 = v36;
      v51[1] = v52;
      v51[2] = v38;
      v51[3] = v39;
      v51[4] = v40;
      v48((char *)(v47 + *(int *)(v50 + 64)), v17, v49);
      sub_1823D4(v36, v52, v38);
      sub_1823D4(v36, v52, v38);
      v53 = *(void (**)(char *, uint64_t))(v63 + 8);
      v53(v17, v49);
      sub_182400(v36, v52, v38);
      v53(v20, v49);
      v54 = v66;
      sub_18242C(v47, v66);
      swift_storeEnumTagMultiPayload(v54, v67, 1);
      v55 = sub_5440(&qword_25E830);
      v56 = sub_7FD8((unint64_t *)&qword_25E838, &qword_25E830, (uint64_t)&protocol conformance descriptor for BooksFailureView<A>);
      v57 = sub_7FD8(&qword_269B68, &qword_269B48, (uint64_t)&protocol conformance descriptor for TupleView<A>);
      _ConditionalContent<>.init(storage:)(v54, v55, v69, v56, v57);
      sub_182400(v36, (uint64_t)v70, v38);
      sub_B414(v47, &qword_269B48);
      v53(v72, v49);
      return (double *)((uint64_t (*)(char *, uint64_t))v53)(v71, v49);
    }
    goto LABEL_22;
  }
LABEL_21:
  __break(1u);
LABEL_22:
  __break(1u);
  return result;
}

uint64_t sub_182214(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &opaque type descriptor for <<opaque return type of StarRatingView.body>>, 1);
}

uint64_t sub_182224@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = Image.init(systemName:)(0x6C69662E72617473, 0xE90000000000006CLL);
  *a1 = result;
  return result;
}

double sub_182260@<D0>(uint64_t a1@<X8>, double a2@<D3>, double a3@<D4>)
{
  uint64_t v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  double result;
  uint64_t v18;
  char v19;
  uint64_t v20;
  char v21;
  __int128 v22;

  v6 = Image.init(systemName:)(0x6C69662E72617473, 0xE90000000000006CLL);
  v7 = (((double (*)(void))GeometryProxy.size.getter)() - (a2 + a2)) * a3 + a2;
  v8 = GeometryProxy.size.getter();
  v10 = v9;
  v11 = static Alignment.leading.getter(v8);
  _FrameLayout.init(width:height:alignment:)(&v18, *(_QWORD *)&v7, 0, v10, 0, v11, v12);
  v13 = v18;
  v14 = v19;
  v15 = v20;
  v16 = v21;
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v13;
  *(_BYTE *)(a1 + 16) = v14;
  *(_QWORD *)(a1 + 24) = v15;
  *(_BYTE *)(a1 + 32) = v16;
  result = *(double *)&v22;
  *(_OWORD *)(a1 + 40) = v22;
  *(_WORD *)(a1 + 56) = 0;
  return result;
}

uint64_t sub_182330@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = Image.init(systemName:)(1918989427, 0xE400000000000000);
  *a1 = result;
  return result;
}

ValueMetadata *type metadata accessor for StarRatingView()
{
  return &type metadata for StarRatingView;
}

uint64_t sub_182370()
{
  _QWORD v1[2];

  v1[0] = sub_7EF8(&qword_269B30);
  v1[1] = sub_7FD8(&qword_269B40, &qword_269B30, (uint64_t)&protocol conformance descriptor for HStack<A>);
  return swift_getOpaqueTypeConformance2(v1, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
}

uint64_t sub_1823D4(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result)
  {
    swift_retain(result);
    return swift_retain(a3);
  }
  return result;
}

uint64_t sub_182400(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result)
  {
    swift_release(result);
    return swift_release(a3);
  }
  return result;
}

uint64_t sub_18242C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_5440(&qword_269B48);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_182474()
{
  uint64_t v0;

  return swift_deallocObject(v0, 56, 7);
}

double sub_182484@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_182260(a1, *(double *)(v1 + 40), *(double *)(v1 + 48));
}

uint64_t sub_182494()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t *ShelfBackgroundViewModel.init(kind:)@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  char v3;

  v2 = *result;
  v3 = *((_BYTE *)result + 8);
  *(_BYTE *)a2 = 0;
  *(_QWORD *)(a2 + 8) = v2;
  *(_BYTE *)(a2 + 16) = v3;
  return result;
}

void static ShelfBackgroundViewModel.default.getter(uint64_t a1@<X8>)
{
  *(_BYTE *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
}

uint64_t ShelfBackgroundViewModel.shapeStyleForBackground(allowDefaultGradient:colorScheme:)(char a1, uint64_t a2)
{
  return sub_182518(a1, a2);
}

uint64_t sub_182518(char a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;

  v4 = *(_QWORD *)v2;
  if (!*(_BYTE *)(v2 + 8))
  {
    if (v4)
    {
      v6 = *(_QWORD *)v2;
    }
    else
    {
      if ((a1 & 1) == 0)
        goto LABEL_9;
      v6 = 0;
    }
    return sub_182628(a2);
  }
  if (*(_BYTE *)(v2 + 8) != 1)
  {
LABEL_9:
    v6 = static Color.clear.getter(v4);
    return AnyShapeStyle.init<A>(_:)(&v6, &type metadata for Color, &protocol witness table for Color);
  }
  v6 = *(_QWORD *)v2;
  swift_retain(v4);
  return AnyShapeStyle.init<A>(_:)(&v6, &type metadata for Color, &protocol witness table for Color);
}

void ShelfBackgroundViewModel.inferredBackground(allowDefaultGradient:)(char a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  char v5;
  BOOL v6;

  v4 = *(_QWORD *)(v2 + 8);
  v5 = *(_BYTE *)(v2 + 16);
  if ((a1 & 1) == 0 && (!*(_BYTE *)(v2 + 16) ? (v6 = v4 == 0) : (v6 = 0), v6))
  {
    v4 = 0;
    v5 = 2;
  }
  else
  {
    sub_1825FC(*(_QWORD *)(v2 + 8), *(_BYTE *)(v2 + 16));
  }
  *(_QWORD *)a2 = v4;
  *(_BYTE *)(a2 + 8) = v5;
}

double sub_1825FC(unint64_t result, char a2)
{
  double v2;

  if (a2 == 1)
  {
    *(_QWORD *)&v2 = swift_retain(result).n128_u64[0];
  }
  else if (!a2)
  {
    sub_182618(result);
  }
  return v2;
}

unint64_t sub_182618(unint64_t result)
{
  if (result >= 5)
    return swift_retain(result);
  return result;
}

uint64_t sub_182628(uint64_t a1)
{
  unint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  void (*v13)(char *, uint64_t, uint64_t);
  char v14;
  void (*v15)(char *, uint64_t);
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __n128 (*v23)(char *, uint64_t, uint64_t);
  __n128 v24;
  __n128 v25;
  __n128 v26;
  __n128 v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  __n128 (*v31)(char *, uint64_t, uint64_t);
  __n128 v32;
  __n128 v33;
  uint64_t v34;
  __n128 (*v35)(char *, uint64_t, uint64_t);
  __n128 v36;
  __n128 v37;
  double v38;
  char *v39;
  __n128 v40;
  uint64_t v41;
  uint64_t v42;
  __n128 (*v43)(char *, uint64_t, uint64_t);
  __n128 v44;
  __n128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  _QWORD v58[5];

  v3 = type metadata accessor for Color.RGBColorSpace(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v58[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for ColorScheme(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v58[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *v1;
  switch(*v1)
  {
    case 0uLL:
      v12 = enum case for ColorScheme.light(_:);
      v13 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 104);
      v13(v10, enum case for ColorScheme.light(_:), v7);
      v14 = static ColorScheme.== infix(_:_:)(a1, v10);
      v15 = *(void (**)(char *, uint64_t))(v8 + 8);
      v15(v10, v7);
      v16 = _s7BooksUI14ColorConstantsV25vibrantPrimaryButtonLabel05SwiftB00C0Vvg_0();
      if ((v14 & 1) == 0)
      {
        v17 = Color.opacity(_:)(0.12);
        swift_release(v16);
        v16 = v17;
      }
      v13(v10, v12, v7);
      v18 = static ColorScheme.== infix(_:_:)(a1, v10);
      v19 = ((uint64_t (*)(char *, uint64_t))v15)(v10, v7);
      v20 = static Color.black.getter(v19);
      if ((v18 & 1) != 0)
      {
        v21 = Color.opacity(_:)(0.06);
        swift_release(v20);
        v20 = v21;
      }
      goto LABEL_13;
    case 1uLL:
      v42 = enum case for Color.RGBColorSpace.sRGB(_:);
      v43 = *(__n128 (**)(char *, uint64_t, uint64_t))(v4 + 104);
      v44 = v43(v6, enum case for Color.RGBColorSpace.sRGB(_:), v3);
      v44.n128_u64[0] = 31.0;
      v45.n128_u64[0] = 31.0;
      v16 = Color.init(_:red:green:blue:opacity:)(v6, v44, 31.0, v45, 1.0);
      v43(v6, v42, v3);
      v27.n128_u64[0] = 0x404D800000000000;
      v38 = 1.0;
      v39 = v6;
      v28 = 59.0;
      v26.n128_u64[0] = 0x404D800000000000;
      goto LABEL_12;
    case 2uLL:
      v22 = enum case for Color.RGBColorSpace.sRGB(_:);
      v23 = *(__n128 (**)(char *, uint64_t, uint64_t))(v4 + 104);
      v24 = v23(v6, enum case for Color.RGBColorSpace.sRGB(_:), v3);
      v24.n128_u64[0] = 0x4044800000000000;
      v25.n128_u64[0] = 0x4052C00000000000;
      v16 = Color.init(_:red:green:blue:opacity:)(v6, v24, 68.0, v25, 1.0);
      v23(v6, v22, v3);
      v27.n128_u64[0] = 0x4053400000000000;
      v28 = 126.0;
      v29 = 0x4061600000000000;
      goto LABEL_9;
    case 3uLL:
      v30 = enum case for Color.RGBColorSpace.sRGB(_:);
      v31 = *(__n128 (**)(char *, uint64_t, uint64_t))(v4 + 104);
      v32 = v31(v6, enum case for Color.RGBColorSpace.sRGB(_:), v3);
      v32.n128_u64[0] = 0x406A600000000000;
      v33.n128_u64[0] = 0x4040000000000000;
      v16 = Color.init(_:red:green:blue:opacity:)(v6, v32, 53.0, v33, 1.0);
      v31(v6, v30, v3);
      v27.n128_u64[0] = 0x406B400000000000;
      v28 = 96.0;
      v29 = 0x4047000000000000;
      goto LABEL_9;
    case 4uLL:
      v34 = enum case for Color.RGBColorSpace.sRGB(_:);
      v35 = *(__n128 (**)(char *, uint64_t, uint64_t))(v4 + 104);
      v36 = v35(v6, enum case for Color.RGBColorSpace.sRGB(_:), v3);
      v37.n128_u64[0] = 0x404E000000000000;
      v36.n128_u64[0] = 30.0;
      v16 = Color.init(_:red:green:blue:opacity:)(v6, v36, 43.0, v37, 1.0);
      v35(v6, v34, v3);
      v27.n128_u64[0] = 0x404C000000000000;
      v28 = 80.0;
      v29 = 0x405C400000000000;
LABEL_9:
      v26.n128_u64[0] = v29;
      v38 = 1.0;
      v39 = v6;
LABEL_12:
      v20 = Color.init(_:red:green:blue:opacity:)(v39, v27, v28, v26, v38);
LABEL_13:
      v46 = sub_5440(&qword_2663A8);
      v47 = swift_allocObject(v46, 48, 7);
      *(_OWORD *)(v47 + 16) = xmmword_1E1CE0;
      *(_QWORD *)(v47 + 32) = v16;
      *(_QWORD *)(v47 + 40) = v20;
      v58[0] = v47;
      specialized Array._endMutation()();
      v48 = v58[0];
      swift_retain(v16);
      swift_retain(v20);
      v50 = static UnitPoint.top.getter(v49);
      v52 = v51;
      v53 = static UnitPoint.bottom.getter();
      v55 = v54;
      Gradient.init(colors:)(v48);
      LinearGradient.init(gradient:startPoint:endPoint:)(v58, v50, v52, v53, v55);
      v41 = AnyShapeStyle.init<A>(_:)(v58, &type metadata for LinearGradient, &protocol witness table for LinearGradient);
      swift_release(v16);
      swift_release(v20);
      break;
    default:
      v40 = swift_retain(*v1);
      v58[0] = Color.gradient.getter(v40);
      v41 = AnyShapeStyle.init<A>(_:)(v58, &type metadata for AnyGradient, &protocol witness table for AnyGradient);
      sub_183370(v11);
      break;
  }
  return v41;
}

BOOL ShelfBackgroundViewModel.BackgroundKind.requiresBlendForButtons.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + 8) == 0;
}

uint64_t sub_182AC8()
{
  _BYTE *v0;

  if (*v0)
    return 1684957547;
  else
    return 0x685365726F6E6769;
}

uint64_t sub_182B04@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_183BAC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_182B28(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1832CC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_182B50(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1832CC();
  return CodingKey.debugDescription.getter(a1, v2);
}

void ShelfBackgroundViewModel.init(from:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  unint64_t v15;
  char v16;
  char v17;

  v5 = sub_5440(&qword_269B70);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_5480(a1, v9);
  v11 = sub_1832CC();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ShelfBackgroundViewModel.CodingKeys, &type metadata for ShelfBackgroundViewModel.CodingKeys, v11, v9, v10);
  if (v2)
  {
    _s7BooksUI13AnyPagedFrameVwxx_0(a1);
  }
  else
  {
    v17 = 1;
    v12 = sub_183310();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v15, &type metadata for ShelfBackgroundViewModel.BackgroundKind, &v17, v5, &type metadata for ShelfBackgroundViewModel.BackgroundKind, v12);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v13 = v15;
    v14 = v16;
    *(_BYTE *)a2 = 0;
    *(_QWORD *)(a2 + 8) = v13;
    *(_BYTE *)(a2 + 16) = v14;
    sub_1825FC(v13, v14);
    _s7BooksUI13AnyPagedFrameVwxx_0(a1);
    sub_183354(v13, v14);
  }
}

void sub_182CD4(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  ShelfBackgroundViewModel.init(from:)(a1, a2);
}

Swift::Int sub_182CE8()
{
  unsigned __int8 *v0;
  int v1;
  unint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5, 0);
  if (v1)
    v2 = 0xD00000000000001ELL;
  else
    v2 = 1701736302;
  if (v1)
    v3 = 0x80000000001F97B0;
  else
    v3 = 0xE400000000000000;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_182D64(uint64_t a1)
{
  _BYTE *v1;
  unint64_t v2;
  unint64_t v3;

  if (*v1)
    v2 = 0xD00000000000001ELL;
  else
    v2 = 1701736302;
  if (*v1)
    v3 = 0x80000000001F97B0;
  else
    v3 = 0xE400000000000000;
  String.hash(into:)(a1, v2, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_182DBC(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  _QWORD v6[9];

  v2 = *v1;
  Hasher.init(_seed:)(v6, a1);
  if (v2)
    v3 = 0xD00000000000001ELL;
  else
    v3 = 1701736302;
  if (v2)
    v4 = 0x80000000001F97B0;
  else
    v4 = 0xE400000000000000;
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_182E34@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  Swift::String v3;
  void *v4;
  Swift::Int v5;
  uint64_t result;
  char v7;

  v3._countAndFlagsBits = *a1;
  v4 = (void *)a1[1];
  v3._object = v4;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_24A778, v3);
  result = swift_bridgeObjectRelease(v4);
  if (v5 == 1)
    v7 = 1;
  else
    v7 = 2;
  if (!v5)
    v7 = 0;
  *a2 = v7;
  return result;
}

void sub_182E90(unint64_t *a1@<X8>)
{
  _BYTE *v1;
  unint64_t v2;
  unint64_t v3;

  v2 = 1701736302;
  if (*v1)
    v2 = 0xD00000000000001ELL;
  v3 = 0x80000000001F97B0;
  if (!*v1)
    v3 = 0xE400000000000000;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_182ECC(char *a1, char *a2)
{
  return sub_C68B8(*a1, *a2);
}

uint64_t sub_182ED8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_183CA4();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t ShelfBackgroundViewModel.BackgroundKind.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  id v10;
  uint64_t v11;
  char v12;
  _QWORD v14[3];
  uint64_t v15;
  uint64_t v16;

  v5 = a1[3];
  v6 = a1[4];
  sub_5480(a1, v5);
  dispatch thunk of Decoder.singleValueContainer()((_QWORD *)((char *)v14 + 1), v5, v6);
  if (!v2)
  {
    v7 = v15;
    v8 = v16;
    sub_5480((_QWORD *)((char *)v14 + 1), v15);
    v9 = sub_183380();
    dispatch thunk of SingleValueDecodingContainer.decode<A>(_:)(v14, &type metadata for ShelfBackgroundViewModel.BackgroundKind.JSKind, &type metadata for ShelfBackgroundViewModel.BackgroundKind.JSKind, v9, v7, v8);
    if (LOBYTE(v14[0]) == 1)
    {
      v10 = objc_msgSend((id)objc_opt_self(UIColor), "secondarySystemBackgroundColor");
      v11 = Color.init(_:)(v10);
      v12 = 1;
    }
    else
    {
      v11 = 0;
      v12 = 2;
    }
    _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)((char *)v14 + 1));
    *(_QWORD *)a2 = v11;
    *(_BYTE *)(a2 + 8) = v12;
  }
  return _s7BooksUI13AnyPagedFrameVwxx_0(a1);
}

uint64_t sub_18304C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return ShelfBackgroundViewModel.BackgroundKind.init(from:)(a1, a2);
}

uint64_t _s7BooksUI24ShelfBackgroundViewModelV0D4KindO8GradientO2eeoiySbAG_AGtFZ_0(unint64_t *a1, unint64_t *a2)
{
  unint64_t v2;
  unint64_t v3;
  char v4;

  v2 = *a1;
  v3 = *a2;
  switch(*a1)
  {
    case 0uLL:
      if (v3)
        goto LABEL_14;
      v2 = 0;
      v4 = 1;
      break;
    case 1uLL:
      if (v3 != 1)
        goto LABEL_14;
      v2 = 1;
      v4 = 1;
      break;
    case 2uLL:
      if (v3 != 2)
        goto LABEL_14;
      v4 = 1;
      v2 = 2;
      break;
    case 3uLL:
      if (v3 != 3)
        goto LABEL_14;
      v4 = 1;
      v2 = 3;
      break;
    case 4uLL:
      if (v3 != 4)
        goto LABEL_14;
      v4 = 1;
      v2 = 4;
      break;
    default:
      if (v3 < 5)
      {
LABEL_14:
        sub_182618(*a2);
        sub_182618(v2);
        v4 = 0;
      }
      else
      {
        sub_182618(*a2);
        sub_182618(v2);
        v4 = static Color.== infix(_:_:)(v2, v3);
      }
      break;
  }
  sub_183370(v2);
  sub_183370(v3);
  return v4 & 1;
}

uint64_t _s7BooksUI24ShelfBackgroundViewModelV0D4KindO2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  int v3;
  unint64_t v4;
  int v5;
  unint64_t v8;
  unint64_t v9;

  v2 = *(_QWORD *)a1;
  v3 = *(unsigned __int8 *)(a1 + 8);
  v4 = *(_QWORD *)a2;
  v5 = *(unsigned __int8 *)(a2 + 8);
  if (!*(_BYTE *)(a1 + 8))
  {
    if (!*(_BYTE *)(a2 + 8))
    {
      v8 = *(_QWORD *)a2;
      v9 = v2;
      sub_1825FC(v4, 0);
      sub_1825FC(v2, 0);
      sub_1825FC(v4, 0);
      sub_1825FC(v2, 0);
      v5 = _s7BooksUI24ShelfBackgroundViewModelV0D4KindO8GradientO2eeoiySbAG_AGtFZ_0(&v9, &v8);
      sub_183354(v2, 0);
      sub_183354(v4, 0);
      sub_183354(v4, 0);
      sub_183354(v2, 0);
      return v5 & 1;
    }
    goto LABEL_11;
  }
  if (v3 != 1)
  {
    if (v5 == 2 && v4 == 0)
    {
      sub_183354(*(_QWORD *)a1, 2);
      sub_183354(0, 2);
      LOBYTE(v5) = 1;
      return v5 & 1;
    }
    goto LABEL_11;
  }
  if (v5 != 1)
  {
LABEL_11:
    sub_1825FC(*(_QWORD *)a2, *(_BYTE *)(a2 + 8));
    sub_1825FC(v2, v3);
    sub_183354(v2, v3);
    sub_183354(v4, v5);
    LOBYTE(v5) = 0;
    return v5 & 1;
  }
  sub_1825FC(*(_QWORD *)a2, 1);
  sub_1825FC(v2, 1);
  LOBYTE(v5) = static Color.== infix(_:_:)(v2, v4);
  sub_183354(v2, 1);
  sub_183354(v4, 1);
  return v5 & 1;
}

unint64_t sub_1832CC()
{
  unint64_t result;

  result = qword_269B78;
  if (!qword_269B78)
  {
    result = swift_getWitnessTable(&unk_1F43C8, &type metadata for ShelfBackgroundViewModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_269B78);
  }
  return result;
}

unint64_t sub_183310()
{
  unint64_t result;

  result = qword_269B80;
  if (!qword_269B80)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ShelfBackgroundViewModel.BackgroundKind, &type metadata for ShelfBackgroundViewModel.BackgroundKind);
    atomic_store(result, (unint64_t *)&qword_269B80);
  }
  return result;
}

double sub_183354(unint64_t result, char a2)
{
  double v2;

  if (a2 == 1)
  {
    *(_QWORD *)&v2 = swift_release(result).n128_u64[0];
  }
  else if (!a2)
  {
    sub_183370(result);
  }
  return v2;
}

unint64_t sub_183370(unint64_t result)
{
  if (result >= 5)
    return swift_release(result);
  return result;
}

unint64_t sub_183380()
{
  unint64_t result;

  result = qword_269B88;
  if (!qword_269B88)
  {
    result = swift_getWitnessTable(&unk_1F43A0, &type metadata for ShelfBackgroundViewModel.BackgroundKind.JSKind);
    atomic_store(result, (unint64_t *)&qword_269B88);
  }
  return result;
}

unint64_t sub_1833C4(uint64_t a1)
{
  unint64_t result;

  result = sub_1833E8();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1833E8()
{
  unint64_t result;

  result = qword_269B90;
  if (!qword_269B90)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ShelfBackgroundViewModel, &type metadata for ShelfBackgroundViewModel);
    atomic_store(result, (unint64_t *)&qword_269B90);
  }
  return result;
}

double destroy for ShelfBackgroundViewModel(uint64_t a1)
{
  return sub_183354(*(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t _s7BooksUI24ShelfBackgroundViewModelVwCP_0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  char v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = *(_BYTE *)(a2 + 16);
  sub_1825FC(v3, v4);
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = v4;
  return a1;
}

uint64_t assignWithCopy for ShelfBackgroundViewModel(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  char v4;
  unint64_t v5;
  char v6;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = *(_BYTE *)(a2 + 16);
  sub_1825FC(v3, v4);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v3;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v4;
  sub_183354(v5, v6);
  return a1;
}

uint64_t assignWithTake for ShelfBackgroundViewModel(uint64_t a1, uint64_t a2)
{
  char v3;
  unint64_t v4;
  char v5;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  sub_183354(v4, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for ShelfBackgroundViewModel(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && a1[17])
    return (*(_DWORD *)a1 + 255);
  v3 = *a1;
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ShelfBackgroundViewModel(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for ShelfBackgroundViewModel()
{
  return &type metadata for ShelfBackgroundViewModel;
}

uint64_t initializeBufferWithCopyOfBuffer for ShelfBackgroundViewModel.BackgroundKind(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  char v4;

  v3 = *(_QWORD *)a2;
  v4 = *(_BYTE *)(a2 + 8);
  sub_1825FC(*(_QWORD *)a2, v4);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  return a1;
}

double destroy for ShelfBackgroundViewModel.BackgroundKind(uint64_t a1)
{
  return sub_183354(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
}

uint64_t assignWithCopy for ShelfBackgroundViewModel.BackgroundKind(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  char v4;
  unint64_t v5;
  char v6;

  v3 = *(_QWORD *)a2;
  v4 = *(_BYTE *)(a2 + 8);
  sub_1825FC(*(_QWORD *)a2, v4);
  v5 = *(_QWORD *)a1;
  *(_QWORD *)a1 = v3;
  v6 = *(_BYTE *)(a1 + 8);
  *(_BYTE *)(a1 + 8) = v4;
  sub_183354(v5, v6);
  return a1;
}

uint64_t assignWithTake for ShelfBackgroundViewModel.BackgroundKind(uint64_t a1, uint64_t a2)
{
  char v3;
  unint64_t v4;
  char v5;

  v3 = *(_BYTE *)(a2 + 8);
  v4 = *(_QWORD *)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v5 = *(_BYTE *)(a1 + 8);
  *(_BYTE *)(a1 + 8) = v3;
  sub_183354(v4, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for ShelfBackgroundViewModel.BackgroundKind(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 2)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ShelfBackgroundViewModel.BackgroundKind(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

uint64_t sub_18373C(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 8) <= 1u)
    return *(unsigned __int8 *)(a1 + 8);
  else
    return (*(_DWORD *)a1 + 2);
}

uint64_t sub_183754(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(_QWORD *)result = a2 - 2;
    LOBYTE(a2) = 2;
  }
  *(_BYTE *)(result + 8) = a2;
  return result;
}

ValueMetadata *type metadata accessor for ShelfBackgroundViewModel.BackgroundKind()
{
  return &type metadata for ShelfBackgroundViewModel.BackgroundKind;
}

uint64_t *initializeBufferWithCopyOfBuffer for ShelfBackgroundViewModel.BackgroundKind.Gradient(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a2;
  if ((unint64_t)*a2 >= 0xFFFFFFFF)
    v3 = swift_retain(v3);
  *a1 = v3;
  return a1;
}

unint64_t destroy for ShelfBackgroundViewModel.BackgroundKind.Gradient(unint64_t *a1)
{
  unint64_t result;

  result = *a1;
  if (result >= 0xFFFFFFFF)
    return swift_release(result);
  return result;
}

unint64_t *assignWithCopy for ShelfBackgroundViewModel.BackgroundKind.Gradient(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;
  unint64_t v4;

  v3 = *a1;
  v4 = *a2;
  if (v3 < 0xFFFFFFFF)
  {
    *a1 = v4;
    if (v4 >= 0xFFFFFFFF)
      swift_retain(v4);
  }
  else if (v4 < 0xFFFFFFFF)
  {
    swift_release(v3);
    *a1 = *a2;
  }
  else
  {
    *a1 = v4;
    swift_retain(v4);
    swift_release(v3);
  }
  return a1;
}

unint64_t *assignWithTake for ShelfBackgroundViewModel.BackgroundKind.Gradient(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;
  unint64_t v4;

  v3 = *a1;
  v4 = *a2;
  if (v3 < 0xFFFFFFFF)
    goto LABEL_5;
  if (v4 < 0xFFFFFFFF)
  {
    swift_release(v3);
LABEL_5:
    *a1 = v4;
    return a1;
  }
  *a1 = v4;
  swift_release(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for ShelfBackgroundViewModel.BackgroundKind.Gradient(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;

  if (!a2)
    return 0;
  if (a2 > 0x7FFFFFFA && *((_BYTE *)a1 + 8))
    return (*(_DWORD *)a1 + 2147483643);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 + 1;
  v5 = v3 - 4;
  if (v4 >= 6)
    return v5;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for ShelfBackgroundViewModel.BackgroundKind.Gradient(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFFB)
  {
    *(_QWORD *)result = 0;
    *(_DWORD *)result = a2 - 2147483643;
    if (a3 >= 0x7FFFFFFB)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFB)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = a2 + 4;
  }
  return result;
}

_QWORD *sub_183958(_QWORD *result, int a2)
{
  unsigned int v2;

  if (a2 < 0)
  {
    v2 = a2 ^ 0x80000000;
  }
  else
  {
    if (!a2)
      return result;
    v2 = a2 - 1;
  }
  *result = v2;
  return result;
}

ValueMetadata *type metadata accessor for ShelfBackgroundViewModel.BackgroundKind.Gradient()
{
  return &type metadata for ShelfBackgroundViewModel.BackgroundKind.Gradient;
}

ValueMetadata *type metadata accessor for ShelfBackgroundViewModel.BackgroundKind.JSKind()
{
  return &type metadata for ShelfBackgroundViewModel.BackgroundKind.JSKind;
}

uint64_t _s7BooksUI24ShelfBackgroundViewModelV14BackgroundKindO6JSKindOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1839E8 + 4 * byte_1F40EF[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_183A1C + 4 * byte_1F40EA[v4]))();
}

uint64_t sub_183A1C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_183A24(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x183A2CLL);
  return result;
}

uint64_t sub_183A38(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x183A40);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_183A44(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_183A4C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ShelfBackgroundViewModel.CodingKeys()
{
  return &type metadata for ShelfBackgroundViewModel.CodingKeys;
}

unint64_t sub_183A6C()
{
  unint64_t result;

  result = qword_269B98;
  if (!qword_269B98)
  {
    result = swift_getWitnessTable(&unk_1F42BC, &type metadata for ShelfBackgroundViewModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_269B98);
  }
  return result;
}

unint64_t sub_183AB0(uint64_t a1)
{
  unint64_t result;

  result = sub_183380();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_183AD8()
{
  unint64_t result;

  result = qword_269BA0;
  if (!qword_269BA0)
  {
    result = swift_getWitnessTable(&unk_1F4300, &type metadata for ShelfBackgroundViewModel.BackgroundKind.JSKind);
    atomic_store(result, (unint64_t *)&qword_269BA0);
  }
  return result;
}

unint64_t sub_183B20()
{
  unint64_t result;

  result = qword_269BA8;
  if (!qword_269BA8)
  {
    result = swift_getWitnessTable(&unk_1F422C, &type metadata for ShelfBackgroundViewModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_269BA8);
  }
  return result;
}

unint64_t sub_183B68()
{
  unint64_t result;

  result = qword_269BB0;
  if (!qword_269BB0)
  {
    result = swift_getWitnessTable(&unk_1F4254, &type metadata for ShelfBackgroundViewModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_269BB0);
  }
  return result;
}

uint64_t sub_183BAC(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 0x685365726F6E6769 && a2 == 0xEB00000000666C65)
  {
    v5 = 0xEB00000000666C65;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x685365726F6E6769, 0xEB00000000666C65, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 1684957547 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease(0xE400000000000000);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(1684957547, 0xE400000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

unint64_t sub_183CA4()
{
  unint64_t result;

  result = qword_269BB8;
  if (!qword_269BB8)
  {
    result = swift_getWitnessTable(&unk_1F4328, &type metadata for ShelfBackgroundViewModel.BackgroundKind.JSKind);
    atomic_store(result, (unint64_t *)&qword_269BB8);
  }
  return result;
}

void SeriesCardCoverStackLayout.init(covers:containingWidth:)(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  double v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE v24[120];
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 v28;

  if (*(_QWORD *)(a1 + 16) >= 3uLL)
    v6 = 3;
  else
    v6 = *(_QWORD *)(a1 + 16);
  v7 = type metadata accessor for __ContiguousArrayStorageBase(0);
  v8 = swift_unknownObjectRetain_n(a1, 2);
  v9 = (_QWORD *)swift_dynamicCastClass(v8, v7);
  if (!v9)
  {
    swift_bridgeObjectRelease(a1);
    v9 = _swiftEmptyArrayStorage;
  }
  v10 = v9[2];
  swift_release(v9);
  if (v10 == v6)
  {
    v11 = (_QWORD *)swift_dynamicCastClass(a1, v7);
    if (!v11)
    {
      swift_bridgeObjectRelease(a1);
      v11 = _swiftEmptyArrayStorage;
    }
  }
  else
  {
    swift_bridgeObjectRelease(a1);
    v11 = sub_AB588(a1, a1 + 32, 0, (2 * v6) | 1);
  }
  v12 = swift_bridgeObjectRelease(a1);
  if (v11[2])
  {
    v13 = a3 * 0.73 / *((double *)v11 + 15);
    __chkstk_darwin(v12);
    v14 = sub_184178((uint64_t)v11, (void (*)(_BYTE *__return_ptr, uint64_t, _OWORD *))sub_18408C);
    v15 = v11[2];
    if (v15 >= 2)
    {
      v17 = v11 + 24;
      v16 = v11[24];
      if (v11[19])
      {
        v18 = v11[23];
        while (*(v17 - 5))
        {
          if (!v16)
          {
            swift_release(v11);
            v22 = 0;
            goto LABEL_23;
          }
          v19 = *v17;
          if (!*v17)
            break;
          v20 = *(v17 - 1);
          v21 = v20 == v18 && v19 == v16;
          if (!v21 && (_stringCompareWithSmolCheck(_:_:expecting:)(v20, v19, v18, v16, 0) & 1) == 0)
            break;
          v17 += 21;
          if (!--v15)
          {
            v28 = 1;
            sub_51C90((uint64_t)(v11 + 4), (uint64_t)v24);
            swift_release(v11);
            v16 = 0;
            v23 = 0xE000000000000000;
            if (v25)
            {
              if (v27)
              {
                v16 = v26;
                v23 = swift_bridgeObjectRetain(v27);
              }
            }
            sub_22488((uint64_t)v24);
            v22 = v28;
            goto LABEL_24;
          }
        }
      }
    }
    swift_release(v11);
    v22 = 0;
    v16 = 0;
LABEL_23:
    v23 = 0xE000000000000000;
LABEL_24:
    *(double *)a2 = a3;
    *(double *)(a2 + 8) = v13;
    *(_QWORD *)(a2 + 16) = v14;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a2 + 40) = v22;
    *(_QWORD *)(a2 + 48) = v16;
    *(_QWORD *)(a2 + 56) = v23;
  }
  else
  {
    swift_release(v11);
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
}

double SeriesCardCoverStackLayout.intrinsicSize.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

uint64_t SeriesCardCoverStackLayout.coverLayouts.getter()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 16));
}

double SeriesCardCoverStackLayout.centeringOffset.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 24);
}

uint64_t sub_183F74@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X8>, double a6@<D0>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _OWORD v22[11];
  _BYTE v23[88];
  uint64_t v24;

  sub_51C90(a2, (uint64_t)v23);
  if (a1 > 2)
  {
    result = sub_22488((uint64_t)v23);
    a5[11] = 0u;
    a5[12] = 0u;
    a5[9] = 0u;
    a5[10] = 0u;
    a5[7] = 0u;
    a5[8] = 0u;
    a5[5] = 0u;
    a5[6] = 0u;
    a5[3] = 0u;
    a5[4] = 0u;
    a5[1] = 0u;
    a5[2] = 0u;
    *a5 = 0u;
  }
  else
  {
    v11 = *(_QWORD *)(a3 + 16);
    v12 = *(_QWORD *)(a4 + 88);
    LOBYTE(v20) = a1;
    sub_51C90((uint64_t)v23, (uint64_t)v22 + 8);
    *((_QWORD *)&v20 + 1) = v11;
    *(double *)&v21 = a6;
    *((_QWORD *)&v21 + 1) = v12;
    v13 = v24;
    result = sub_22488((uint64_t)v23);
    *(_QWORD *)&v22[0] = v13;
    v15 = v22[9];
    a5[10] = v22[8];
    a5[11] = v15;
    a5[12] = v22[10];
    v16 = v22[5];
    a5[6] = v22[4];
    a5[7] = v16;
    v17 = v22[7];
    a5[8] = v22[6];
    a5[9] = v17;
    v18 = v22[3];
    a5[4] = v22[2];
    a5[5] = v18;
    *a5 = v20;
    a5[1] = v21;
    v19 = v22[1];
    a5[2] = v22[0];
    a5[3] = v19;
  }
  return result;
}

uint64_t sub_18408C@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v3;

  return sub_183F74(a1, a2, *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 32), a3, *(double *)(v3 + 24));
}

uint64_t _s7BooksUI26SeriesCardCoverStackLayoutV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  double v9;
  double v10;
  int v11;
  double v12;
  double v13;
  char v14;
  BOOL v15;

  if (*(double *)a1 != *(double *)a2 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
    return 0;
  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(a1 + 56);
  v6 = *(_QWORD *)(a2 + 48);
  v7 = *(_QWORD *)(a2 + 56);
  v8 = *(unsigned __int8 *)(a2 + 40);
  v10 = *(double *)(a2 + 24);
  v9 = *(double *)(a2 + 32);
  v11 = *(unsigned __int8 *)(a1 + 40);
  v13 = *(double *)(a1 + 24);
  v12 = *(double *)(a1 + 32);
  v14 = sub_AA5C4(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 16));
  result = 0;
  if ((v14 & 1) != 0)
  {
    v15 = v13 == v10 && v12 == v9;
    if (v15 && ((v8 ^ v11) & 1) == 0)
    {
      if (v4 == v6 && v5 == v7)
        return 1;
      else
        return _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, v6, v7, 0);
    }
  }
  return result;
}

_QWORD *sub_184178(uint64_t a1, void (*a2)(_BYTE *__return_ptr, uint64_t, _OWORD *))
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  _OWORD *v9;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _BYTE v25[176];
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  _OWORD v29[10];
  uint64_t v30;
  void (*v31)(_BYTE *__return_ptr, uint64_t, _OWORD *);

  v31 = a2;
  v2 = *(_QWORD *)(a1 + 16);
  v3 = swift_bridgeObjectRetain(a1);
  v11 = v3;
  if (v2)
  {
    v4 = 0;
    v5 = v3 + 32;
    v6 = _swiftEmptyArrayStorage;
    do
    {
      sub_51C90(v5, (uint64_t)&v25[8]);
      v28 = v4;
      v29[8] = *(_OWORD *)&v25[136];
      v29[9] = *(_OWORD *)&v25[152];
      v30 = *(_QWORD *)&v25[168];
      v29[4] = *(_OWORD *)&v25[72];
      v29[5] = *(_OWORD *)&v25[88];
      v29[6] = *(_OWORD *)&v25[104];
      v29[7] = *(_OWORD *)&v25[120];
      v29[0] = *(_OWORD *)&v25[8];
      v29[1] = *(_OWORD *)&v25[24];
      v29[2] = *(_OWORD *)&v25[40];
      v29[3] = *(_OWORD *)&v25[56];
      v31(v25, v4, v29);
      sub_B414((uint64_t)&v28, &qword_263238);
      if (*(_QWORD *)&v25[144])
      {
        v22 = *(_OWORD *)&v25[160];
        v23 = v26;
        v24 = v27;
        v18 = *(_OWORD *)&v25[96];
        v19 = *(_OWORD *)&v25[112];
        v20 = *(_OWORD *)&v25[128];
        v21 = *(_OWORD *)&v25[144];
        v14 = *(_OWORD *)&v25[32];
        v15 = *(_OWORD *)&v25[48];
        v16 = *(_OWORD *)&v25[64];
        v17 = *(_OWORD *)&v25[80];
        v12 = *(_OWORD *)v25;
        v13 = *(_OWORD *)&v25[16];
        if ((swift_isUniquelyReferenced_nonNull_native(v6) & 1) == 0)
          v6 = sub_AB210(0, v6[2] + 1, 1, v6);
        v8 = v6[2];
        v7 = v6[3];
        if (v8 >= v7 >> 1)
          v6 = sub_AB210((_QWORD *)(v7 > 1), v8 + 1, 1, v6);
        v6[2] = v8 + 1;
        v9 = &v6[26 * v8];
        v9[2] = v12;
        v9[5] = v15;
        v9[6] = v16;
        v9[3] = v13;
        v9[4] = v14;
        v9[9] = v19;
        v9[10] = v20;
        v9[7] = v17;
        v9[8] = v18;
        v9[13] = v23;
        v9[14] = v24;
        v9[11] = v21;
        v9[12] = v22;
      }
      else
      {
        sub_B414((uint64_t)v25, &qword_269C18);
      }
      ++v4;
      v5 += 168;
    }
    while (v2 != v4);
  }
  else
  {
    v6 = _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRelease(v11);
  return v6;
}

unint64_t sub_1843C0()
{
  unint64_t result;

  result = qword_269BC0;
  if (!qword_269BC0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for SeriesCardCoverStackCoverLayout, &type metadata for SeriesCardCoverStackCoverLayout);
    atomic_store(result, (unint64_t *)&qword_269BC0);
  }
  return result;
}

unint64_t sub_184404(uint64_t a1)
{
  unint64_t result;

  result = sub_184428();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_184428()
{
  unint64_t result;

  result = qword_269C10;
  if (!qword_269C10)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for SeriesCardCoverStackLayout, &type metadata for SeriesCardCoverStackLayout);
    atomic_store(result, (unint64_t *)&qword_269C10);
  }
  return result;
}

uint64_t destroy for SeriesCardCoverStackLayout(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 56));
}

uint64_t initializeWithCopy for SeriesCardCoverStackLayout(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v4 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

uint64_t assignWithCopy for SeriesCardCoverStackLayout(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v6 = *(_QWORD *)(a2 + 56);
  v7 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

uint64_t assignWithTake for SeriesCardCoverStackLayout(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease(v4);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v5 = *(_QWORD *)(a2 + 56);
  v6 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v5;
  swift_bridgeObjectRelease(v6);
  return a1;
}

ValueMetadata *type metadata accessor for SeriesCardCoverStackLayout()
{
  return &type metadata for SeriesCardCoverStackLayout;
}

uint64_t destroy for ListItemMetadataRatingView(uint64_t a1)
{
  sub_BE0C(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
  return _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)(a1 + 32));
}

uint64_t initializeWithCopy for ListItemMetadataRatingView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  __int128 v6;

  v4 = *(_QWORD *)a2;
  v5 = *(_BYTE *)(a2 + 8);
  sub_F9E4(*(_QWORD *)a2, v5);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v5;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v6 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 56) = v6;
  (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1 + 32, a2 + 32);
  return a1;
}

uint64_t assignWithCopy for ListItemMetadataRatingView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;

  v4 = *(_QWORD *)a2;
  v5 = *(_BYTE *)(a2 + 8);
  sub_F9E4(*(_QWORD *)a2, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v5;
  sub_BE0C(v6, v7);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  sub_142F8((_QWORD *)(a1 + 32), (_QWORD *)(a2 + 32));
  return a1;
}

uint64_t assignWithTake for ListItemMetadataRatingView(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  __int128 v8;

  v4 = *a2;
  v5 = *((_BYTE *)a2 + 8);
  v6 = *(_QWORD *)a1;
  v7 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v5;
  sub_BE0C(v6, v7);
  *(_QWORD *)(a1 + 16) = a2[2];
  *(_QWORD *)(a1 + 24) = a2[3];
  _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)(a1 + 32));
  v8 = *((_OWORD *)a2 + 3);
  *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
  *(_OWORD *)(a1 + 48) = v8;
  *(_QWORD *)(a1 + 64) = a2[8];
  return a1;
}

uint64_t getEnumTagSinglePayload for ListItemMetadataRatingView(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 72))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 56);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ListItemMetadataRatingView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 72) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 56) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 72) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ListItemMetadataRatingView()
{
  return &type metadata for ListItemMetadataRatingView;
}

uint64_t sub_1847FC(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_230570, 1);
}

BOOL sub_18480C(uint64_t a1, uint64_t a2)
{
  return *(double *)a1 == *(double *)a2 && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8);
}

char *sub_184838@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char v29;
  uint64_t v30;
  void (*v31)(char *, _QWORD, uint64_t);
  uint64_t v32;
  uint64_t KeyPath;
  void (*v34)(char *, char *, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t inited;
  uint64_t v45;
  uint64_t v46;
  Class isa;
  void (**v48)(char *, uint64_t);
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  void (**v62)(char *, uint64_t);
  uint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  char *result;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void (*v78)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  _QWORD *v87;
  void (**v88)(char *, uint64_t);
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t OpaqueTypeConformance2;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  char *v106;
  char *v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  __int128 v112;
  unint64_t v113;
  char *v114;
  _QWORD *v115;
  uint64_t v116;
  char *v117;
  void (**v118)(char *, uint64_t);
  uint64_t v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  _QWORD *v125;
  _QWORD *v126;
  _QWORD v127[2];
  _QWORD v128[2];
  char v129[8];
  char v130[8];

  v111 = a1;
  v110 = type metadata accessor for LocalizerLookupStrategy(0);
  v109 = *(_QWORD *)(v110 - 8);
  __chkstk_darwin(v110);
  v108 = (char *)&v102 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_5440(&qword_269C20);
  v4 = __chkstk_darwin(v3);
  v107 = (char *)&v102 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v106 = (char *)&v102 - v6;
  v122 = type metadata accessor for LocalizerDefaultValue(0);
  v121 = *(_QWORD *)(v122 - 8);
  v7 = __chkstk_darwin(v122);
  v105 = (char *)&v102 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v120 = (char *)&v102 - v9;
  v119 = type metadata accessor for LocalizerContext(0);
  v118 = *(void (***)(char *, uint64_t))(v119 - 8);
  __chkstk_darwin(v119);
  v117 = (char *)&v102 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v116 = type metadata accessor for AccessibilityChildBehavior(0);
  v115 = *(_QWORD **)(v116 - 8);
  __chkstk_darwin(v116);
  v114 = (char *)&v102 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v113 = sub_5440(&qword_25FF30);
  __chkstk_darwin(v113);
  v13 = (uint64_t *)((char *)&v102 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = type metadata accessor for Image.Scale(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v102 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v123 = sub_5440(&qword_269C28);
  __chkstk_darwin(v123);
  v19 = (char *)&v102 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v104 = sub_5440(&qword_269C30);
  v103 = *(_QWORD *)(v104 - 8);
  __chkstk_darwin(v104);
  v124 = (char *)&v102 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_5440(&qword_269C38);
  __chkstk_darwin(v21);
  v102 = (char *)&v102 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v125 = v1;
  v126 = v1 + 4;
  v23 = sub_185224(v1 + 4);
  v25 = v24;
  v27 = v26;
  v29 = v28 & 1;
  v30 = v15;
  *(_QWORD *)&v112 = v15;
  v31 = *(void (**)(char *, _QWORD, uint64_t))(v15 + 104);
  v32 = v14;
  v31(v17, enum case for Image.Scale.small(_:), v14);
  KeyPath = swift_getKeyPath(&unk_1F4510);
  v34 = *(void (**)(char *, char *, uint64_t))(v30 + 16);
  v35 = v32;
  v34((char *)v13 + *(int *)(v113 + 28), v17, v32);
  *v13 = KeyPath;
  v36 = v123;
  sub_139784((uint64_t)v13, (uint64_t)&v19[*(int *)(v123 + 36)]);
  *(_QWORD *)v19 = v23;
  *((_QWORD *)v19 + 1) = v25;
  v19[16] = v29;
  *((_QWORD *)v19 + 3) = v27;
  sub_34B1C(v23, v25, v29);
  swift_bridgeObjectRetain(v27);
  sub_B414((uint64_t)v13, &qword_25FF30);
  (*(void (**)(char *, uint64_t))(v112 + 8))(v17, v35);
  sub_2B574(v23, v25, v29);
  v37 = swift_bridgeObjectRelease(v27);
  v38 = v114;
  static AccessibilityChildBehavior.ignore.getter(v37);
  v113 = sub_1857C0();
  View.accessibilityElement(children:)(v38, v36, v113);
  ((void (*)(char *, uint64_t))v115[1])(v38, v116);
  sub_B414((uint64_t)v19, &qword_269C28);
  v39 = sub_5440(&qword_25ED50);
  v40 = swift_allocObject(v39, 64, 7);
  *(_OWORD *)(v40 + 16) = xmmword_1E1CE0;
  v41 = v125;
  v42 = v125[7];
  v116 = v125[8];
  v43 = v126;
  v115 = sub_5480(v126, v42);
  v114 = (char *)sub_5440(&qword_261FB8);
  inited = swift_initStackObject(v114, v130);
  v112 = xmmword_1E0B70;
  *(_OWORD *)(inited + 16) = xmmword_1E0B70;
  strcpy((char *)(inited + 32), "averageRating");
  *(_WORD *)(inited + 46) = -4864;
  v45 = v41[7];
  v46 = v41[8];
  sub_5480(v43, v45);
  isa = Double._bridgeToObjectiveC()().super.super.isa;
  v48 = v118;
  v49 = v117;
  v50 = v119;
  ((void (*)(char *, _QWORD, uint64_t))v118[13])(v117, enum case for LocalizerContext.standalone(_:), v119);
  v51 = dispatch thunk of Localizer.decimal(forNumber:minimumFractionDigits:maximumFractionDigits:in:)(isa, 1, 0, 1, 0, v49, v45, v46);
  v53 = v52;

  v48[1](v49, v50);
  *(_QWORD *)(inited + 48) = v51;
  *(_QWORD *)(inited + 56) = v53;
  v54 = sub_965C(inited);
  v55 = v120;
  LocalizerDefaultValue.init(stringLiteral:)("Rating: @@averageRating@@", 25, 2);
  v56 = (uint64_t)v55;
  v57 = Localizer.string(forKey:with:defaultValue:)(0xD000000000000023, 0x80000000001FE250, v54, v55, v42, v116);
  v59 = v58;
  v60 = v54;
  v61 = v121;
  swift_bridgeObjectRelease(v60);
  v62 = *(void (***)(char *, uint64_t))(v61 + 8);
  v63 = v122;
  ((void (*)(uint64_t))v62)(v56);
  *(_QWORD *)(v40 + 32) = v57;
  *(_QWORD *)(v40 + 40) = v59;
  v64 = v125;
  v119 = v40;
  v65 = v126;
  v66 = v125[7];
  v67 = v125[8];
  result = (char *)sub_5480(v126, v66);
  v69 = v64[3];
  if (v69 < 0)
  {
    __break(1u);
  }
  else
  {
    v117 = result;
    v70 = swift_initStackObject(v114, v129);
    v118 = v62;
    v71 = v70;
    *(_OWORD *)(v70 + 16) = v112;
    *(_QWORD *)(v70 + 32) = 0x746E756F63;
    *(_QWORD *)(v70 + 40) = 0xE500000000000000;
    v116 = v67;
    v72 = v64[7];
    v73 = v64[8];
    sub_5480(v65, v72);
    *(_QWORD *)(v71 + 48) = dispatch thunk of Localizer.formattedCount(_:)(v69, v72, v73);
    *(_QWORD *)(v71 + 56) = v74;
    v126 = (_QWORD *)sub_965C(v71);
    v75 = v56;
    LocalizerDefaultValue.init(stringLiteral:)("@@count@@ ratings", 17, 2);
    v76 = v66;
    v77 = (uint64_t)v105;
    LocalizerDefaultValue.init(stringLiteral:)("@@count@@ rating", 16, 2);
    v78 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v61 + 56);
    v79 = (uint64_t)v106;
    v78(v106, 1, 1, v63);
    v80 = (uint64_t)v107;
    v78(v107, 1, 1, v63);
    v81 = v109;
    v82 = v69;
    v83 = (uint64_t)v108;
    v84 = v110;
    (*(void (**)(char *, _QWORD, uint64_t))(v109 + 104))(v108, enum case for LocalizerLookupStrategy.default(_:), v110);
    v101 = v76;
    v85 = v126;
    v86 = sub_99FB8(v82, 0xD000000000000021, 0x80000000001FE2A0, (uint64_t)v126, v75, v77, v79, v80, v83, v101, v116);
    v125 = v87;
    swift_bridgeObjectRelease(v85);
    (*(void (**)(uint64_t, uint64_t))(v81 + 8))(v83, v84);
    sub_B414(v80, &qword_269C20);
    sub_B414(v79, &qword_269C20);
    v88 = v118;
    ((void (*)(uint64_t, uint64_t))v118)(v77, v63);
    ((void (*)(uint64_t, uint64_t))v88)(v75, v63);
    v89 = v119;
    v90 = v125;
    *(_QWORD *)(v119 + 48) = v86;
    *(_QWORD *)(v89 + 56) = v90;
    v128[0] = v89;
    v91 = sub_5440(&qword_25DF80);
    v92 = sub_7FD8((unint64_t *)&qword_25DF88, &qword_25DF80, (uint64_t)&protocol conformance descriptor for [A]);
    v93 = BidirectionalCollection<>.joined(separator:)(8236, 0xE200000000000000, v91, v92);
    v95 = v94;
    swift_bridgeObjectRelease(v89);
    v128[0] = v93;
    v128[1] = v95;
    v127[0] = v123;
    v127[1] = v113;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v127, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
    v97 = sub_C57C();
    v98 = (uint64_t)v102;
    v99 = v104;
    v100 = v124;
    View.accessibilityLabel<A>(_:)(v128, v104, &type metadata for String, OpaqueTypeConformance2, v97);
    swift_bridgeObjectRelease(v95);
    (*(void (**)(char *, uint64_t))(v103 + 8))(v100, v99);
    return (char *)sub_185844(v98, v111);
  }
  return result;
}

uint64_t sub_185224(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  Class isa;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t inited;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  _QWORD *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int v92[3];
  char v93[104];

  v2 = v1;
  v84 = a1;
  v87 = type metadata accessor for LocalizerDefaultValue(0);
  v86 = *(_QWORD *)(v87 - 8);
  __chkstk_darwin(v87);
  v85 = (char *)&v81 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for LocalizerContext(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v81 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = Image.init(systemName:)(0x6C69662E72617473, 0xE90000000000006CLL);
  v9 = Text.init(_:)(v8);
  v11 = v10;
  v13 = v12;
  v15 = v14 & 1;
  v16 = static Text.+ infix(_:_:)(v9, v10, v14 & 1, v12, 32, 0xE100000000000000, 0, _swiftEmptyArrayStorage);
  v81 = v17;
  v82 = v18;
  v20 = v19 & 1;
  sub_2B574(v9, v11, v15);
  swift_bridgeObjectRelease(v13);
  v83 = (_QWORD *)(v2 + 32);
  v21 = *(_QWORD *)(v2 + 56);
  v22 = *(_QWORD *)(v2 + 64);
  sub_5480((_QWORD *)(v2 + 32), v21);
  isa = Double._bridgeToObjectiveC()().super.super.isa;
  (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for LocalizerContext.standalone(_:), v4);
  v24 = dispatch thunk of Localizer.decimal(forNumber:minimumFractionDigits:maximumFractionDigits:in:)(isa, 1, 0, 1, 0, v7, v21, v22);
  v26 = v25;

  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  v27 = v81;
  v28 = v82;
  v90 = static Text.+ infix(_:_:)(v16, v81, v20, v82, v24, v26, 0, _swiftEmptyArrayStorage);
  v89 = v29;
  v88 = v30;
  v91 = v31;
  swift_bridgeObjectRelease(v26);
  sub_2B574(v16, v27, v20);
  swift_bridgeObjectRelease(v28);
  v32 = v84[3];
  v33 = v84[4];
  sub_5480(v84, v32);
  v34 = sub_5440(&qword_261FB8);
  inited = swift_initStackObject(v34, v93);
  *(_OWORD *)(inited + 16) = xmmword_1E0B70;
  *(_QWORD *)(inited + 32) = 0xD000000000000014;
  *(_QWORD *)(inited + 40) = 0x80000000001FE310;
  v36 = *(_QWORD *)(v2 + 24);
  v37 = *(_QWORD *)(v2 + 56);
  v38 = *(_QWORD *)(v2 + 64);
  sub_5480(v83, v37);
  if (v36 >= 0x7FFFFFFFFFFFFFFFLL)
    v39 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v39 = v36;
  *(_QWORD *)(inited + 48) = dispatch thunk of Localizer.formattedCount(_:)(v39, v37, v38);
  *(_QWORD *)(inited + 56) = v40;
  v41 = sub_965C(inited);
  v42 = v85;
  LocalizerDefaultValue.init(stringLiteral:)(" (@@formattedRatingCount@@)", 27, 2);
  v43 = v42;
  v44 = Localizer.string(forKey:with:defaultValue:)(0xD000000000000019, 0x80000000001FE330, v41, v42, v32, v33);
  v46 = v45;
  swift_bridgeObjectRelease(v41);
  (*(void (**)(char *, uint64_t))(v86 + 8))(v43, v87);
  v47 = *(_QWORD *)v2;
  v48 = *(_BYTE *)(v2 + 8);
  sub_F9E4(v47, v48);
  v49 = sub_30DB4(v47, v48);
  sub_BE0C(v47, v48);
  if ((v49 & 1) != 0)
  {
    v50 = static Text.+ infix(_:_:)(v90, v89, v88 & 1, v91, v44, v46, 0, _swiftEmptyArrayStorage);
    v52 = v51;
    v54 = v53;
    v56 = v55 & 1;
    v57 = _s7BooksUI14ColorConstantsV19booksSecondaryLabel05SwiftB00C0Vvg_0();
    v58 = Text.foregroundColor(_:)(v57, v50, v52, v56, v54);
    swift_release(v57);
    v59 = v50;
    v60 = v52;
    v61 = v56;
  }
  else
  {
    v62 = _s7BooksUI14ColorConstantsV19booksSecondaryLabel05SwiftB00C0Vvg_0();
    v63 = Text.foregroundColor(_:)(v62, v90, v89, v88 & 1, v91);
    v87 = v63;
    v65 = v64;
    v86 = v64;
    v67 = v66;
    v54 = v68;
    swift_release(v62);
    v69 = v67 & 1;
    LODWORD(v85) = v67 & 1;
    v92[0] = static HierarchicalShapeStyle.tertiary.getter(v70);
    v71 = Text.foregroundStyle<A>(_:)(v92, v44, v46, 0, _swiftEmptyArrayStorage, &type metadata for HierarchicalShapeStyle, &protocol witness table for HierarchicalShapeStyle);
    v72 = v46;
    v74 = v73;
    v76 = v75;
    v78 = v77 & 1;
    v58 = static Text.+ infix(_:_:)(v63, v65, v69, v54, v71, v73, v78, v75);
    v79 = v74;
    v46 = v72;
    sub_2B574(v71, v79, v78);
    swift_bridgeObjectRelease(v76);
    v59 = v87;
    v60 = v86;
    v61 = (char)v85;
  }
  sub_2B574(v59, v60, v61);
  swift_bridgeObjectRelease(v46);
  swift_bridgeObjectRelease(v54);
  sub_2B574(v90, v89, v88 & 1);
  swift_bridgeObjectRelease(v91);
  return v58;
}

unint64_t sub_1857C0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_269C40;
  if (!qword_269C40)
  {
    v1 = sub_7EF8(&qword_269C28);
    sub_7FD8((unint64_t *)&qword_260A18, &qword_25FF30, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_269C40);
  }
  return result;
}

uint64_t sub_185844(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_5440(&qword_269C38);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

ValueMetadata *type metadata accessor for ListItemMetadataRatingInfo()
{
  return &type metadata for ListItemMetadataRatingInfo;
}

unint64_t sub_1858A0()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_269C48[0];
  if (!qword_269C48[0])
  {
    v1 = sub_7EF8(&qword_269C38);
    v2[0] = sub_7EF8(&qword_269C28);
    v2[1] = sub_1857C0();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
    sub_185934();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, qword_269C48);
  }
  return result;
}

unint64_t sub_185934()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25EEA0;
  if (!qword_25EEA0)
  {
    v1 = type metadata accessor for AccessibilityAttachmentModifier(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for AccessibilityAttachmentModifier, v1);
    atomic_store(result, (unint64_t *)&qword_25EEA0);
  }
  return result;
}

uint64_t View.environment<A>(_:binding:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t *KeyPath;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v23 = a5;
  v22 = a2;
  v8 = *(_QWORD *)(class metadata base offset for WritableKeyPath + *a1 + 8);
  v9 = type metadata accessor for Binding(0, v8);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v21 - v11;
  v14 = type metadata accessor for EnvironmentBindingViewModifier(0, v8, v8, v13);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (uint64_t *)((char *)&v21 - v16);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v22, v9);
  v24 = a3;
  v25 = v8;
  v26 = a4;
  KeyPath = (uint64_t *)swift_getKeyPath(&unk_1F45A8);
  sub_185AD8(a1, (uint64_t)v12, KeyPath, v19, v17);
  swift_retain(a1);
  View.modifier<A>(_:)(v17, a3, v14, a4);
  return (*(uint64_t (**)(_QWORD *, uint64_t))(v15 + 8))(v17, v14);
}

uint64_t type metadata accessor for EnvironmentBindingViewModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10E40(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for EnvironmentBindingViewModifier);
}

uint64_t sub_185AD8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t result;

  v8 = *a3;
  *a5 = a1;
  v9 = *(_QWORD *)(v8 + class metadata base offset for KeyPath);
  v10 = type metadata accessor for EnvironmentBindingViewModifier(0, v9, *(_QWORD *)(class metadata base offset for WritableKeyPath + *a1 + 8), a4);
  v11 = (char *)a5 + *(int *)(v10 + 36);
  v12 = type metadata accessor for Binding(0, v9);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v11, a2, v12);
  *(_QWORD *)((char *)a5 + *(int *)(v10 + 40)) = a3;
  return result;
}

uint64_t sub_185B80@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t WitnessTable;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v4 = v3;
  v34 = a1;
  v35 = a3;
  v6 = *(_QWORD *)(a2 + 24);
  v33 = *(_QWORD *)(v6 - 8);
  v30 = v6;
  v7 = __chkstk_darwin(a1);
  v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(v10 + 16);
  v31 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v7);
  v13 = (uint64_t *)((char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  WitnessTable = swift_getWitnessTable(&unk_1F45F0, v14);
  v16 = type metadata accessor for _ViewModifier_Content(255, a2, WitnessTable);
  v29 = type metadata accessor for _EnvironmentKeyWritingModifier(255, v6);
  v17 = type metadata accessor for ModifiedContent(0, v16, v29);
  v32 = *(_QWORD *)(v17 - 8);
  v18 = __chkstk_darwin(v17);
  v20 = (char *)&v28 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v22 = (char *)&v28 - v21;
  v28 = *v4;
  v23 = type metadata accessor for Binding(0, v11);
  Binding.wrappedValue.getter(v13, v23);
  swift_getAtKeyPath(v13, *(uint64_t *)((char *)v4 + *(int *)(a2 + 40)));
  (*(void (**)(_QWORD *, uint64_t))(v31 + 8))(v13, v11);
  v24 = swift_getWitnessTable(&protocol conformance descriptor for _ViewModifier_Content<A>, v16);
  View.environment<A>(_:_:)(v28, v9, v16, v24);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v9, v30);
  v25 = swift_getWitnessTable(&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>, v29);
  v36 = v24;
  v37 = v25;
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v17);
  sub_10F80((uint64_t)v20, v17, (uint64_t)v22);
  v26 = *(void (**)(char *, uint64_t))(v32 + 8);
  v26(v20, v17);
  sub_C5C0((uint64_t)v22, v17, v35);
  return ((uint64_t (*)(char *, uint64_t))v26)(v22, v17);
}

uint64_t View.environment<A, B>(_:binding:_:)(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v23 = a5;
  v22 = a4;
  v8 = *a1;
  v9 = *(_QWORD *)(*a3 + class metadata base offset for KeyPath);
  v10 = type metadata accessor for Binding(0, v9);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v21 - v12;
  v15 = type metadata accessor for EnvironmentBindingViewModifier(0, v9, *(_QWORD *)(class metadata base offset for WritableKeyPath + v8 + 8), v14);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (uint64_t *)((char *)&v21 - v17);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a2, v10);
  sub_185AD8(a1, (uint64_t)v13, a3, v19, v18);
  swift_retain(a1);
  swift_retain(a3);
  View.modifier<A>(_:)(v18, v22, v15, v23);
  return (*(uint64_t (**)(_QWORD *, uint64_t))(v16 + 8))(v18, v15);
}

uint64_t sub_185F24(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *a1;
  v5 = type metadata accessor for EnvironmentBindingViewModifier(255, a1[1], a1[2], a4);
  v6 = type metadata accessor for ModifiedContent(255, v4, v5);
  swift_getWitnessTable(&unk_1F45F0, v5);
  return swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v6);
}

uint64_t sub_185F9C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *a1;
  v5 = type metadata accessor for EnvironmentBindingViewModifier(255, a1[1], a1[1], a4);
  v6 = type metadata accessor for ModifiedContent(255, v4, v5);
  swift_getWitnessTable(&unk_1F45F0, v5);
  return swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v6);
}

uint64_t sub_186018(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  result = type metadata accessor for Binding(319, *(_QWORD *)(a1 + 16));
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    v4[2] = (char *)&value witness table for Builtin.NativeObject + 64;
    swift_initStructMetadata(a1, 0, 3, v4, a1 + 32);
    return 0;
  }
  return result;
}

uint64_t *sub_186094(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  void (*v24)(unint64_t, unint64_t, uint64_t);
  uint64_t *v25;

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = v6;
  v8 = v6 & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  v9 = v6 + 8;
  v10 = ((v7 + 16) & ~v7) + *(_QWORD *)(v5 + 64) + 7;
  v11 = v6 & 0x100000;
  v12 = *a2;
  *a1 = *a2;
  if (v7 > 7 || v11 != 0 || ((v10 + (v8 & (v7 + 8))) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    a1 = (uint64_t *)(v12 + (v8 & (v7 + 16)));
  }
  else
  {
    v15 = ~v7;
    v16 = (_QWORD *)(v8 & ((unint64_t)a1 + 15));
    v17 = (uint64_t *)(v8 & ((unint64_t)a2 + 15));
    v18 = *v17;
    *v16 = *v17;
    v19 = (_QWORD *)(((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8);
    v20 = (uint64_t *)(((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFFFF8);
    v21 = *v20;
    *v19 = *v20;
    v22 = ((unint64_t)v19 + v9) & v15;
    v23 = ((unint64_t)v20 + v9) & v15;
    v24 = *(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 16);
    swift_retain(v12);
    swift_retain(v18);
    swift_retain(v21);
    v24(v22, v23, v4);
    v25 = (uint64_t *)(((unint64_t)v17 + v10) & 0xFFFFFFFFFFFFF8);
    v12 = *v25;
    *(_QWORD *)(((unint64_t)v16 + v10) & 0xFFFFFFFFFFFFF8) = *v25;
  }
  swift_retain(v12);
  return a1;
}

uint64_t sub_1861C4(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;

  swift_release(*a1);
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (_QWORD *)(((unint64_t)a1 + (v6 | 7) + 8) & ~(v6 | 7));
  swift_release(*v7);
  v8 = (_QWORD *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8);
  swift_release(*v8);
  (*(void (**)(unint64_t, uint64_t))(v5 + 8))(((unint64_t)v8 + v6 + 8) & ~v6, v4);
  return swift_release(*(_QWORD *)(((unint64_t)v7 + ((v6 + 16) & ~v6) + *(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFF8));
}

uint64_t *sub_186268(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  _QWORD *v22;

  v4 = *a2;
  *a1 = *a2;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (v7 | 7) + 8;
  v9 = (uint64_t *)(((unint64_t)a2 + v8) & ~(v7 | 7));
  v10 = *v9;
  v22 = (_QWORD *)(((unint64_t)a1 + v8) & ~(v7 | 7));
  *v22 = *v9;
  v11 = (_QWORD *)(((unint64_t)v22 + 15) & 0xFFFFFFFFFFFFFFF8);
  v12 = (uint64_t *)(((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8);
  v13 = *v12;
  *v11 = *v12;
  v14 = ((unint64_t)v11 + v7 + 8) & ~v7;
  v15 = ((unint64_t)v12 + v7 + 8) & ~v7;
  v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  swift_retain(v4);
  swift_retain(v10);
  swift_retain(v13);
  v16(v14, v15, v5);
  v17 = *(_QWORD *)(v6 + 64) + ((v7 + 16) & ~v7) + 7;
  v18 = (_QWORD *)(((unint64_t)v22 + v17) & 0xFFFFFFFFFFFFF8);
  v19 = (uint64_t *)(((unint64_t)v9 + v17) & 0xFFFFFFFFFFFFF8);
  v20 = *v19;
  *v18 = *v19;
  swift_retain(v20);
  return a1;
}

uint64_t *sub_186370(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;

  v6 = *a2;
  v7 = *a1;
  *a1 = *a2;
  swift_retain(v6);
  swift_release(v7);
  v8 = *(_QWORD *)(a3 + 16);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = (v10 | 7) + 8;
  v12 = (uint64_t *)(((unint64_t)a1 + v11) & ~(v10 | 7));
  v13 = (uint64_t *)(((unint64_t)a2 + v11) & ~(v10 | 7));
  v14 = *v12;
  v15 = *v13;
  *v12 = *v13;
  swift_retain(v15);
  swift_release(v14);
  v16 = (uint64_t *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8);
  v17 = (uint64_t *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8);
  v18 = *v17;
  v19 = *v16;
  *v16 = *v17;
  swift_retain(v18);
  swift_release(v19);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 24))(((unint64_t)v16 + v10 + 8) & ~v10, ((unint64_t)v17 + v10 + 8) & ~v10, v8);
  v20 = *(_QWORD *)(v9 + 64) + ((v10 + 16) & ~v10) + 7;
  v21 = (uint64_t *)(((unint64_t)v12 + v20) & 0xFFFFFFFFFFFFFFF8);
  v22 = (uint64_t *)(((unint64_t)v13 + v20) & 0xFFFFFFFFFFFFF8);
  v23 = *v22;
  v24 = *v21;
  *v21 = *v22;
  swift_retain(v23);
  swift_release(v24);
  return a1;
}

_QWORD *sub_186490(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = (v5 | 7) + 8;
  v7 = (_QWORD *)(((unint64_t)a1 + v6) & ~(v5 | 7));
  v8 = (_QWORD *)(((unint64_t)a2 + v6) & ~(v5 | 7));
  *v7 = *v8;
  v9 = (_QWORD *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8);
  v10 = (_QWORD *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v9 = *v10;
  (*(void (**)(unint64_t, unint64_t))(v4 + 32))(((unint64_t)v9 + v5 + 8) & ~v5, ((unint64_t)v10 + v5 + 8) & ~v5);
  v11 = *(_QWORD *)(v4 + 64) + ((v5 + 16) & ~v5) + 7;
  *(_QWORD *)(((unint64_t)v7 + v11) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v8 + v11) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t *sub_186554(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;

  v6 = *a1;
  *a1 = *a2;
  swift_release(v6);
  v7 = *(_QWORD *)(a3 + 16);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (v9 | 7) + 8;
  v11 = (uint64_t *)(((unint64_t)a1 + v10) & ~(v9 | 7));
  v12 = (uint64_t *)(((unint64_t)a2 + v10) & ~(v9 | 7));
  v13 = *v11;
  *v11 = *v12;
  swift_release(v13);
  v14 = (uint64_t *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8);
  v15 = (uint64_t *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8);
  v16 = *v14;
  *v14 = *v15;
  swift_release(v16);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 40))(((unint64_t)v14 + v9 + 8) & ~v9, ((unint64_t)v15 + v9 + 8) & ~v9, v7);
  v17 = *(_QWORD *)(v8 + 64) + ((v9 + 16) & ~v9) + 7;
  v18 = (uint64_t *)(((unint64_t)v11 + v17) & 0xFFFFFFFFFFFFFFF8);
  v19 = *v18;
  *v18 = *(_QWORD *)(((unint64_t)v12 + v17) & 0xFFFFFFFFFFFFF8);
  swift_release(v19);
  return a1;
}

uint64_t sub_18664C(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v15;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (v5 >= 0)
    v7 = 0x7FFFFFFF;
  else
    v7 = v6;
  if (!a2)
    return 0;
  v8 = *(unsigned __int8 *)(v4 + 80);
  v9 = v8 | 7;
  v10 = v8 + 8;
  if (v7 >= a2)
  {
    if (v7 == 0x7FFFFFFF)
    {
      v15 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF)
        LODWORD(v15) = -1;
      return (v15 + 1);
    }
    else
    {
      return (*(uint64_t (**)(unint64_t))(v4 + 48))((v10
                                                                    + (((((unint64_t)a1 + v9 + 8) & ~v9) + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v8);
    }
  }
  else
  {
    if (((((*(_QWORD *)(v4 + 64) + ((v8 + 16) & ~v8) + (v10 & ~v9) + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & 0xFFFFFFF8) != 0)
      v11 = 2;
    else
      v11 = a2 - v7 + 1;
    if (v11 >= 0x10000)
      v12 = 4;
    else
      v12 = 2;
    if (v11 < 0x100)
      v12 = 1;
    if (v11 >= 2)
      v13 = v12;
    else
      v13 = 0;
    return ((uint64_t (*)(void))((char *)&loc_1866F0 + 4 * byte_1F4590[v13]))();
  }
}

void sub_18678C(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  int v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  int v14;
  unsigned int v15;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF)
    v8 = 0x7FFFFFFF;
  else
    v8 = *(_DWORD *)(v6 + 84);
  if (v7 >= 0)
    v9 = 0x7FFFFFFF;
  else
    v9 = v8;
  v10 = *(unsigned __int8 *)(v6 + 80);
  if (v9 >= a3)
  {
    v14 = 0;
    if (a2 <= v9)
      goto LABEL_20;
  }
  else
  {
    v11 = a3 - v9;
    if (((*(_DWORD *)(v6 + 64)
         + (((_DWORD)v10 + 8) & ~(v10 | 7))
         + (((_DWORD)v10 + 16) & ~(_DWORD)v10)
         + 7) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v12 = v11 + 1;
    else
      v12 = 2;
    if (v12 >= 0x10000)
      v13 = 4;
    else
      v13 = 2;
    if (v12 < 0x100)
      v13 = 1;
    if (v12 >= 2)
      v14 = v13;
    else
      v14 = 0;
    if (a2 <= v9)
LABEL_20:
      __asm { BR              X16 }
  }
  if (((*(_DWORD *)(v6 + 64) + (((_DWORD)v10 + 8) & ~(v10 | 7)) + (((_DWORD)v10 + 16) & ~(_DWORD)v10) + 7) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    v15 = ~v9 + a2;
    bzero(a1, ((*(_QWORD *)(v6 + 64) + ((v10 + 8) & ~(v10 | 7)) + ((v10 + 16) & ~v10) + 7) & 0xFFFFFFFFFFFFFFF8) + 8);
    *a1 = v15;
  }
  __asm { BR              X10 }
}

void sub_1868B0()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x186930);
}

void sub_1868B8(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x1868C0);
  JUMPOUT(0x186930);
}

void sub_18690C()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x186930);
}

void sub_186914()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x186930);
}

uint64_t sub_18691C@<X0>(int a1@<W1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_WORD *)(v8 + v9) = 0;
  if (!a1)
    JUMPOUT(0x186930);
  if (v4 == 0x7FFFFFFF)
  {
    if ((a1 & 0x80000000) == 0)
      JUMPOUT(0x18692CLL);
    JUMPOUT(0x186928);
  }
  return (*(uint64_t (**)(unint64_t))(v3 + 56))((v5
                                                                + ((((v8 + v6 + 8) & v7) + 15) & 0xFFFFFFFFFFFFFFF8)) & a2);
}

uint64_t sub_186948(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  return swift_getOpaqueTypeConformance2(&v3, &unk_230698, 1);
}

uint64_t sub_18697C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t WitnessTable;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = a1[1];
  v5 = type metadata accessor for EnvironmentBindingViewModifier(255, *a1, v4, a4);
  WitnessTable = swift_getWitnessTable(&unk_1F45F0, v5);
  v7 = type metadata accessor for _ViewModifier_Content(255, v5, WitnessTable);
  v8 = type metadata accessor for _EnvironmentKeyWritingModifier(255, v4);
  v9 = type metadata accessor for ModifiedContent(255, v7, v8);
  swift_getWitnessTable(&protocol conformance descriptor for _ViewModifier_Content<A>, v7);
  swift_getWitnessTable(&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>, v8);
  return swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v9);
}

uint64_t BuyButtonViewModelBase.init<>(buttonType:longCaptionAlignment:assetInfo:)@<X0>(unsigned __int16 *a1@<X0>, _BYTE *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  int *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  char *v22;
  uint64_t v24;
  __int128 v25[2];

  v8 = (int *)type metadata accessor for BuyButtonExternals(0);
  v9 = __chkstk_darwin(v8);
  v11 = (uint64_t *)((char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v9);
  v13 = (char *)&v24 - v12;
  LOBYTE(a2) = *a2;
  v14 = *a1;
  sub_BD00((uint64_t)a3, (uint64_t)v25);
  *v11 = swift_getKeyPath(&unk_1F4758);
  v15 = sub_5440(&qword_25F1E8);
  swift_storeEnumTagMultiPayload(v11, v15, 0);
  v16 = (_QWORD *)((char *)v11 + v8[5]);
  v17 = type metadata accessor for ProfileRestrictions(0);
  v18 = sub_6FD0((unint64_t *)&qword_26AF00, type metadata accessor for ProfileRestrictions, (uint64_t)&protocol conformance descriptor for ProfileRestrictions);
  *v16 = EnvironmentObject.init()(v17, v18);
  v16[1] = v19;
  v20 = (_QWORD *)((char *)v11 + v8[6]);
  *v20 = swift_getKeyPath(&unk_1F4780);
  v21 = sub_5440(&qword_25F758);
  swift_storeEnumTagMultiPayload(v20, v21, 0);
  v22 = (char *)v11 + v8[7];
  *(_QWORD *)v22 = swift_getKeyPath(&unk_1F47A8);
  *(_OWORD *)(v22 + 8) = 0u;
  *(_OWORD *)(v22 + 24) = 0u;
  *(_OWORD *)(v22 + 40) = 0u;
  *(_OWORD *)(v22 + 51) = 0u;
  sub_21C88((uint64_t)v11, (uint64_t)v13, type metadata accessor for BuyButtonExternals);
  sub_69CD4(v14, (char)a2, v25, (uint64_t)v13, a4);
  return _s7BooksUI13AnyPagedFrameVwxx_0(a3);
}

uint64_t BuyButtonViewModelBase.accessibilityHint.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  _QWORD *KeyPath;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t inited;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE v37[64];
  uint64_t v38;
  unsigned __int8 v39;

  v5 = type metadata accessor for LocalizerLookupStrategy(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v37[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = type metadata accessor for LocalizerDefaultValue(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = &v37[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v13 = type metadata accessor for ButtonViewModel(0);
  if (*(_BYTE *)(v2 + *(int *)(v13 + 48)) != 1)
  {
    v31 = type metadata accessor for LocalizerRequest(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(a2, 1, 1, v31);
  }
  v36 = a2;
  __chkstk_darwin(v13);
  *((_OWORD *)&v36 - 1) = *(_OWORD *)(a1 + 16);
  KeyPath = (_QWORD *)swift_getKeyPath(&unk_1F47D0);
  swift_getWitnessTable(&protocol conformance descriptor for BuyButtonViewModelBase<A>, a1);
  ViewModelWithExternals.subscript.getter(KeyPath);
  swift_release(KeyPath);
  if (!v38 || (v15 = v39, swift_bridgeObjectRelease(v38), v15 != 5))
  {
    v33 = type metadata accessor for LocalizerRequest(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56))(v36, 1, 1, v33);
  }
  v16 = (_QWORD *)(v2 + *(int *)(a1 + 44));
  v17 = v16[3];
  v18 = v16[4];
  sub_5480(v16, v17);
  if ((AssetInfo.isFree.getter(v17, v18) & 1) != 0)
  {
    LocalizerDefaultValue.init(stringLiteral:)("Double tap to show store details and get", 40, 2);
    (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v8, enum case for LocalizerLookupStrategy.default(_:), v5);
    v34 = "Books.Store.Accessibility.Get";
LABEL_12:
    v30 = v36;
    static LocalizerRequest.string(forKey:with:defaultValue:using:)(0xD00000000000001DLL, (unint64_t)(v34 - 32) | 0x8000000000000000, 0, v12, v8);
    goto LABEL_13;
  }
  v20 = v16[3];
  v19 = v16[4];
  sub_5480(v16, v20);
  v21 = (void *)ContentInfo.storeData.getter(v20, *(_QWORD *)(v19 + 8));
  if (!v21
    || (v22 = v21, v23 = objc_msgSend(v21, "priceFormatted"),
                   v22,
                   !v23))
  {
    LocalizerDefaultValue.init(stringLiteral:)("Double tap to show store details and buy", 40, 2);
    (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v8, enum case for LocalizerLookupStrategy.default(_:), v5);
    v34 = "Books.Store.Accessibility.Buy";
    goto LABEL_12;
  }
  v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
  v26 = v25;

  v27 = sub_5440(&qword_261FB8);
  inited = swift_initStackObject(v27, v37);
  *(_OWORD *)(inited + 16) = xmmword_1E0B70;
  *(_QWORD *)(inited + 32) = 0x6563697270;
  *(_QWORD *)(inited + 40) = 0xE500000000000000;
  *(_QWORD *)(inited + 48) = v24;
  *(_QWORD *)(inited + 56) = v26;
  v29 = sub_965C(inited);
  LocalizerDefaultValue.init(stringLiteral:)("Double tap to to show store details and buy for @@price@@", 57, 2);
  (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v8, enum case for LocalizerLookupStrategy.default(_:), v5);
  v30 = v36;
  static LocalizerRequest.string(forKey:with:defaultValue:using:)(0xD000000000000025, 0x80000000001FDF40, v29, v12, v8);
  swift_bridgeObjectRelease(v29);
LABEL_13:
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  v35 = type metadata accessor for LocalizerRequest(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56))(v30, 0, 1, v35);
}

uint64_t BuyButtonViewModelBase.caption.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *KeyPath;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  __n128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  void *v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(char *, uint64_t, uint64_t);
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __n128 v53;
  uint64_t v54;
  char *v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  void *v66;

  v3 = v2;
  v64 = a2;
  v5 = sub_5440(&qword_261768);
  __chkstk_darwin(v5);
  v57 = (char *)&v55 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Date(0);
  v58 = *(_QWORD *)(v7 - 8);
  v59 = v7;
  v8 = *(_QWORD *)(v58 + 64);
  v9 = __chkstk_darwin(v7);
  v55 = (char *)&v55 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v56 = (char *)&v55 - v10;
  v11 = type metadata accessor for LocalizerLookupStrategy(0);
  v62 = *(_QWORD *)(v11 - 8);
  v63 = v11;
  __chkstk_darwin(v11);
  v13 = (char *)&v55 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for LocalizerDefaultValue(0);
  v60 = *(_QWORD *)(v14 - 8);
  v61 = v14;
  v15 = __chkstk_darwin(v14);
  v17 = (char *)&v55 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = *(_QWORD *)(a1 - 8);
  __chkstk_darwin(v15);
  v20 = (char *)&v55 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = (_QWORD *)(v2 + *(int *)(a1 + 44));
  v23 = v21[3];
  v22 = v21[4];
  sub_5480(v21, v23);
  LOBYTE(v22) = AssetInfo.isExplicit.getter(v23, v22);
  v24 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 16))(v20, v3, a1);
  if ((v22 & 1) != 0)
  {
    __chkstk_darwin(v24);
    *((_OWORD *)&v55 - 1) = *(_OWORD *)(a1 + 16);
    KeyPath = (_QWORD *)swift_getKeyPath(&unk_1F4800);
    swift_getWitnessTable(&protocol conformance descriptor for BuyButtonViewModelBase<A>, a1);
    ViewModelWithExternals.subscript.getter(KeyPath);
    swift_release(KeyPath);
    v26 = v66;
    v27 = swift_getKeyPath(&unk_1F4830);
    v28 = swift_getKeyPath(&unk_1F4858);
    static Published.subscript.getter(&v65, v26, v27, v28);

    swift_release(v27);
    v29 = swift_release(v28);
    LOBYTE(v26) = v65;
    (*(void (**)(char *, uint64_t, __n128))(v18 + 8))(v20, a1, v29);
    if ((v26 & 1) == 0)
    {
      LocalizerDefaultValue.init(stringLiteral:)("Restricted", 10, 2);
      v31 = v62;
      v30 = v63;
      (*(void (**)(char *, _QWORD, uint64_t))(v62 + 104))(v13, enum case for LocalizerLookupStrategy.default(_:), v63);
      v32 = v64;
      static LocalizerRequest.string(forKey:with:defaultValue:using:)(0xD000000000000016, 0x80000000001FE000, 0, v17, v13);
      (*(void (**)(char *, uint64_t))(v31 + 8))(v13, v30);
      (*(void (**)(char *, uint64_t))(v60 + 8))(v17, v61);
      v33 = type metadata accessor for LocalizerRequest(0);
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56))(v32, 0, 1, v33);
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v18 + 8))(v20, a1);
  }
  v35 = v21[3];
  v36 = v21[4];
  sub_5480(v21, v35);
  v37 = (void *)ContentInfo.storeData.getter(v35, *(_QWORD *)(v36 + 8));
  if (v37)
  {
    v38 = v37;
    v39 = objc_msgSend(v37, "isPreorder");

    if (v39)
    {
      v40 = v21[3];
      v41 = v21[4];
      sub_5480(v21, v40);
      v42 = (uint64_t)v57;
      AssetInfo.expectedDate.getter(v40, v41);
      v44 = v58;
      v43 = v59;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v58 + 48))(v42, 1, v59) != 1)
      {
        v46 = *(void (**)(char *, uint64_t, uint64_t))(v44 + 32);
        v47 = v56;
        v46(v56, v42, v43);
        v48 = v55;
        (*(void (**)(char *, char *, uint64_t))(v44 + 16))(v55, v47, v43);
        v49 = *(unsigned __int8 *)(v44 + 80);
        v50 = (v49 + 16) & ~v49;
        v51 = swift_allocObject(&unk_258258, v50 + v8, v49 | 7);
        v46((char *)(v51 + v50), (uint64_t)v48, v43);
        v52 = v64;
        static LocalizerRequest.custom(_:)(sub_174ECC, v51);
        v53 = swift_release(v51);
        (*(void (**)(char *, uint64_t, __n128))(v44 + 8))(v47, v43, v53);
        v54 = type metadata accessor for LocalizerRequest(0);
        return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v54 - 8) + 56))(v52, 0, 1, v54);
      }
      sub_B414(v42, &qword_261768);
    }
  }
  v45 = type metadata accessor for LocalizerRequest(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 56))(v64, 1, 1, v45);
}

id BuyButtonExternals.profileRestrictions.getter()
{
  uint64_t v0;
  uint64_t v1;
  id result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = v0 + *(int *)(type metadata accessor for BuyButtonExternals(0) + 20);
  if (*(_QWORD *)v1)
    return *(id *)v1;
  v3 = *(_QWORD *)(v1 + 8);
  v4 = type metadata accessor for ProfileRestrictions(0);
  v5 = sub_6FD0((unint64_t *)&qword_26AF00, type metadata accessor for ProfileRestrictions, (uint64_t)&protocol conformance descriptor for ProfileRestrictions);
  result = (id)EnvironmentObject.error()(0, v3, v4, v5);
  __break(1u);
  return result;
}

uint64_t BuyButtonExternals.$profileRestrictions.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for BuyButtonExternals(0) + 20));
  v2 = *v1;
  v3 = v1[1];
  v4 = type metadata accessor for ProfileRestrictions(0);
  v5 = sub_6FD0((unint64_t *)&qword_26AF00, type metadata accessor for ProfileRestrictions, (uint64_t)&protocol conformance descriptor for ProfileRestrictions);
  return EnvironmentObject.projectedValue.getter(v2, v3, v4, v5);
}

uint64_t BuyButtonExternals.referenceId.getter@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for BuyButtonExternals(0);
  return sub_31EB0(a1);
}

uint64_t BuyButtonExternals.assetState.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[3];
  _OWORD v8[2];

  v3 = v1 + *(int *)(type metadata accessor for BuyButtonExternals(0) + 28);
  v4 = *(_OWORD *)(v3 + 48);
  v7[2] = *(_OWORD *)(v3 + 32);
  v8[0] = v4;
  *(_DWORD *)((char *)v8 + 15) = *(_DWORD *)(v3 + 63);
  v5 = *(_OWORD *)(v3 + 16);
  v7[0] = *(_OWORD *)v3;
  v7[1] = v5;
  sub_34820((uint64_t)v7, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))sub_3480C);
  sub_316C0(a1);
  return sub_34820((uint64_t)v7, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))sub_BDF8);
}

double BuyButtonExternals.init()@<D0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  int *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  double result;

  *a1 = swift_getKeyPath(&unk_1F4758);
  v2 = sub_5440(&qword_25F1E8);
  swift_storeEnumTagMultiPayload(a1, v2, 0);
  v3 = (int *)type metadata accessor for BuyButtonExternals(0);
  v4 = (_QWORD *)((char *)a1 + v3[5]);
  v5 = type metadata accessor for ProfileRestrictions(0);
  v6 = sub_6FD0((unint64_t *)&qword_26AF00, type metadata accessor for ProfileRestrictions, (uint64_t)&protocol conformance descriptor for ProfileRestrictions);
  *v4 = EnvironmentObject.init()(v5, v6);
  v4[1] = v7;
  v8 = (_QWORD *)((char *)a1 + v3[6]);
  *v8 = swift_getKeyPath(&unk_1F4780);
  v9 = sub_5440(&qword_25F758);
  swift_storeEnumTagMultiPayload(v8, v9, 0);
  v10 = (char *)a1 + v3[7];
  *(_QWORD *)v10 = swift_getKeyPath(&unk_1F47A8);
  result = 0.0;
  *(_OWORD *)(v10 + 8) = 0u;
  *(_OWORD *)(v10 + 24) = 0u;
  *(_OWORD *)(v10 + 40) = 0u;
  *(_OWORD *)(v10 + 51) = 0u;
  return result;
}

uint64_t type metadata accessor for BuyButtonExternals(uint64_t a1)
{
  uint64_t result;

  result = qword_269D58;
  if (!qword_269D58)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for BuyButtonExternals);
  return result;
}

id sub_187770(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  id result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = v1 + *(int *)(a1 + 20);
  if (*(_QWORD *)v2)
    return *(id *)v2;
  v4 = *(_QWORD *)(v2 + 8);
  v5 = type metadata accessor for ProfileRestrictions(0);
  v6 = sub_6FD0((unint64_t *)&qword_26AF00, type metadata accessor for ProfileRestrictions, (uint64_t)&protocol conformance descriptor for ProfileRestrictions);
  result = (id)EnvironmentObject.error()(0, v4, v5, v6);
  __break(1u);
  return result;
}

uint64_t sub_1877D8@<X0>(uint64_t a1@<X8>)
{
  return sub_316C0(a1);
}

uint64_t sub_187820@<X0>(uint64_t a1@<X8>)
{
  return sub_31EB0(a1);
}

uint64_t BuyButtonViewModelBase.longCaptionAlignment.getter@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  *a2 = *(_BYTE *)(v2 + *(int *)(result + 40));
  return result;
}

uint64_t BuyButtonViewModelBase.assetInfo.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_BD00(v2 + *(int *)(a1 + 44), a2);
}

uint64_t BuyButtonViewModelBase.assetID.getter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = (_QWORD *)(v1 + *(int *)(a1 + 44));
  v3 = v2[3];
  v4 = v2[4];
  sub_5480(v2, v3);
  return ContentInfo.id.getter(v3, *(_QWORD *)(v4 + 8));
}

uint64_t BuyButtonViewModelBase.externals.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2 + *(int *)(a1 + 48));
}

void sub_1878C4(uint64_t a1@<X8>)
{
  __int16 *v1;
  __int16 v2;
  uint64_t v3;

  v2 = *v1;
  if (*v1 < 0)
  {
    if (*v1 != 1)
    {
      if (*v1)
        goto LABEL_5;
LABEL_8:
      *(_OWORD *)a1 = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
      return;
    }
LABEL_10:
    v3 = 1;
    goto LABEL_11;
  }
  if ((v2 & 0x80) != 0)
  {
    v3 = 2 * (v2 & 1);
    goto LABEL_11;
  }
  if (*v1 == 1)
    goto LABEL_10;
  if (!*v1)
    goto LABEL_8;
LABEL_5:
  v3 = 2;
LABEL_11:
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
}

Swift::Void __swiftcall BuyButtonViewModelBase.update()()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  char *v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *KeyPath;
  __n128 v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  int *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void (*v73)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v74;
  uint64_t v75;
  void (*v76)(char *, char *, __n128);
  uint64_t (*v77)(char *, uint64_t, char *);
  uint64_t v78;
  _QWORD *v79;
  __n128 v80;
  void (*v81)(char *, char *, __n128);
  int v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  __n128 v87;
  int *v88;
  char v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  char v94;
  uint64_t v95;
  id v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  id v102;
  uint64_t v103;
  uint64_t v104;
  void (*v105)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v106;
  uint64_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  unint64_t v113;
  const char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t inited;
  unint64_t v138;
  char *v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  void (*v145)(char *, uint64_t);
  uint64_t v146;
  uint64_t v147;
  _OWORD *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  char *v153;
  uint64_t v154;
  char *v155;
  uint64_t v156;
  uint64_t v157;
  void (*v158)(char *, uint64_t);
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  char *v164;
  char *v165;
  uint64_t (*v166)(char *, uint64_t, char *, __n128);
  uint64_t v167;
  uint64_t v168;
  _QWORD *v169;
  uint64_t v170;
  __n128 v171;
  void (*v172)(char *, char *, __n128);
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  __n128 v178;
  uint64_t v179;
  _QWORD *v180;
  __n128 v181;
  uint64_t v182;
  uint64_t v183;
  _QWORD *v184;
  uint64_t v185;
  char *v186;
  char *v187;
  uint64_t v188;
  char *v189;
  uint64_t v190;
  void (*v191)(char *, uint64_t);
  char *v192;
  uint64_t v193;
  char *v194;
  char *v195;
  uint64_t v196;
  uint64_t v197;
  _QWORD *v198;
  uint64_t v199;
  __n128 v200;
  void (*v201)(char *, char *, __n128);
  uint64_t v202;
  uint64_t v203;
  __n128 v204;
  char *v205;
  uint64_t v206;
  _QWORD *v207;
  uint64_t v208;
  _QWORD *v209;
  __n128 v210;
  uint64_t v211;
  uint64_t v212;
  char *v213;
  uint64_t v214;
  uint64_t v215;
  void (*v216)(char *, uint64_t);
  uint64_t v217;
  double v218;
  uint64_t v219;
  uint64_t *v220;
  uint64_t v221;
  uint64_t v222;
  id v223;
  uint64_t v224;
  uint64_t (*v225)(uint64_t, uint64_t, uint64_t);
  int v226;
  uint64_t v227;
  _QWORD *v228;
  uint64_t v229;
  BOOL v230;
  uint64_t v231;
  void (*v232)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v233;
  char *v234;
  char *v235;
  char *v236;
  char *v237;
  uint64_t v238;
  char *v239;
  uint64_t v240;
  uint64_t v241;
  char *v242;
  char *v243;
  _QWORD *v244;
  uint64_t v245;
  char *v246;
  char *v247;
  char *v248;
  uint64_t v249;
  char *v250;
  uint64_t v251;
  char *v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  _QWORD *v259;
  uint64_t v260;
  uint64_t v261;
  int v262;
  char *v263;
  char *v264;
  uint64_t v265;
  void (*v266)(char *, char *, __n128);
  char *v267;
  void (*v268)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v269;
  id v270;
  char *v271;
  uint64_t WitnessTable;
  uint64_t (*v273)(char *, uint64_t, char *);
  int *v274;
  __int128 v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  char v279[8];
  __int128 v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;

  v2 = v1;
  v3 = v0;
  v4 = type metadata accessor for ButtonViewModel.ActionKind(0);
  __chkstk_darwin(v4);
  v264 = (char *)&v231 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v241 = type metadata accessor for ColorScheme(0);
  v240 = *(_QWORD *)(v241 - 8);
  __chkstk_darwin(v241);
  v239 = (char *)&v231 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for ColorConstants.Environment(0);
  __chkstk_darwin(v7);
  v238 = (uint64_t)&v231 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_5440(&qword_25E0C8);
  __chkstk_darwin(v9);
  v233 = (char *)&v231 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for ColorConstants(0);
  v12 = __chkstk_darwin(v11);
  v237 = (char *)&v231 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v12);
  v236 = (char *)&v231 - v15;
  __chkstk_darwin(v14);
  v243 = (char *)&v231 - v16;
  v251 = type metadata accessor for LocalizerLookupStrategy(0);
  v255 = *(_QWORD *)(v251 - 8);
  __chkstk_darwin(v251);
  v250 = (char *)&v231 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v254 = type metadata accessor for LocalizerDefaultValue(0);
  v253 = *(_QWORD *)(v254 - 8);
  v18 = __chkstk_darwin(v254);
  v248 = (char *)&v231 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v252 = (char *)&v231 - v20;
  v260 = type metadata accessor for ButtonViewModel.Content(0);
  v21 = __chkstk_darwin(v260);
  v244 = (uint64_t *)((char *)&v231 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  v23 = __chkstk_darwin(v21);
  v247 = (char *)&v231 - v24;
  __chkstk_darwin(v23);
  v246 = (char *)&v231 - v25;
  v258 = type metadata accessor for AssetAction.Kind(0);
  __chkstk_darwin(v258);
  v259 = (uint64_t *)((char *)&v231 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
  v27 = sub_5440(&qword_2649B0);
  v28 = __chkstk_darwin(v27);
  v263 = (char *)&v231 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = __chkstk_darwin(v28);
  v271 = (char *)&v231 - v31;
  v32 = __chkstk_darwin(v30);
  v257 = (uint64_t)&v231 - v33;
  v34 = __chkstk_darwin(v32);
  v277 = (uint64_t)&v231 - v35;
  v36 = *((_QWORD *)v3 - 1);
  v37 = __chkstk_darwin(v34);
  v235 = (char *)&v231 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = __chkstk_darwin(v37);
  v234 = (char *)&v231 - v40;
  v41 = __chkstk_darwin(v39);
  v267 = (char *)&v231 - v42;
  v43 = __chkstk_darwin(v41);
  v45 = (char *)&v231 - v44;
  __chkstk_darwin(v43);
  v47 = (char *)&v231 - v46;
  v48 = (_QWORD *)(v1 + *((int *)v3 + 11));
  v49 = v48[3];
  v50 = v48[4];
  sub_5480(v48, v49);
  v51 = dispatch thunk of AssetInfo.assetType.getter(v49, v50);
  LODWORD(v50) = static AssetType.== infix(_:_:)(v51, 0);
  v52 = v48[3];
  v53 = v48[4];
  sub_5480(v48, v52);
  v54 = AssetInfo.isExplicit.getter(v52, v53);
  v265 = v4;
  v242 = v47;
  LODWORD(v256) = v50;
  v266 = (void (*)(char *, char *, __n128))v36;
  if ((v54 & 1) != 0)
  {
    v55 = (*(uint64_t (**)(char *, uint64_t, char *))(v36 + 16))(v47, v2, v3);
    __chkstk_darwin(v55);
    v56 = v36;
    v57 = v47;
    v59 = *((_QWORD *)v3 + 2);
    v58 = *((_QWORD *)v3 + 3);
    *(&v231 - 2) = v59;
    *(&v231 - 1) = v58;
    KeyPath = (_QWORD *)swift_getKeyPath(&unk_1F4800);
    swift_getWitnessTable(&protocol conformance descriptor for BuyButtonViewModelBase<A>, v3);
    ViewModelWithExternals.subscript.getter(KeyPath);
    v61 = swift_release(KeyPath);
    (*(void (**)(char *, char *, __n128))(v56 + 8))(v57, v3, v61);
    v62 = (void *)v280;
    v63 = swift_getKeyPath(&unk_1F4830);
    v64 = swift_getKeyPath(&unk_1F4858);
    static Published.subscript.getter(&v284, v62, v63, v64);

    swift_release(v63);
    swift_release(v64);
    v262 = v284 ^ 1;
  }
  else
  {
    v262 = 0;
    v59 = *((_QWORD *)v3 + 2);
    v58 = *((_QWORD *)v3 + 3);
  }
  v65 = *(unsigned __int16 *)(v2 + *((int *)v3 + 9));
  v66 = (int *)type metadata accessor for ButtonViewModel(0);
  v245 = v66[9];
  *(_BYTE *)(v2 + v245) = (v65 & 0x80808080) == 128;
  LOWORD(v284) = v65;
  sub_1878C4((uint64_t)&v280);
  v275 = v280;
  v67 = v281;
  v68 = v282;
  v69 = v2 + v66[10];
  sub_13E100(*(_QWORD *)v69, *(_QWORD *)(v69 + 8), *(_QWORD *)(v69 + 16), *(_QWORD *)(v69 + 24));
  *(_OWORD *)v69 = v275;
  *(_QWORD *)(v69 + 16) = v67;
  *(_QWORD *)(v69 + 24) = v68;
  v249 = v69;
  v70 = v48[3];
  v71 = v48[4];
  sub_5480(v48, v70);
  v270 = (id)ContentInfo.storeData.getter(v70, *(_QWORD *)(v71 + 8));
  v72 = type metadata accessor for AssetAction(0);
  v261 = *(_QWORD *)(v72 - 8);
  v73 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v261 + 56);
  v269 = v72;
  v268 = v73;
  ((void (*)(uint64_t, uint64_t, uint64_t))v73)(v277, 1, 1);
  v274 = v66;
  v74 = v2 + v66[14];
  sub_B414(v74, &qword_25E0C8);
  v75 = type metadata accessor for LocalizerRequest(0);
  v232 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v75 - 8) + 56);
  v232(v74, 1, 1, v75);
  v76 = v266;
  v77 = (uint64_t (*)(char *, uint64_t, char *))*((_QWORD *)v266 + 2);
  v278 = v2;
  v273 = v77;
  v78 = v77(v45, v2, v3);
  __chkstk_darwin(v78);
  v276 = v59;
  *(&v231 - 2) = v59;
  *(&v231 - 1) = v58;
  *(_QWORD *)&v275 = v58;
  v79 = (_QWORD *)swift_getKeyPath(&unk_1F47D0);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for BuyButtonViewModelBase<A>, v3);
  ViewModelWithExternals.subscript.getter(v79);
  v80 = swift_release(v79);
  v81 = (void (*)(char *, char *, __n128))*((_QWORD *)v76 + 1);
  v81(v45, v3, v80);
  if (*((_QWORD *)&v280 + 1))
  {
    v82 = v281;
    swift_bridgeObjectRelease(*((_QWORD *)&v280 + 1));
  }
  else
  {
    v82 = 6;
  }
  v83 = v267;
  v84 = v273(v267, v278, v3);
  __chkstk_darwin(v84);
  v85 = v275;
  *(&v231 - 2) = v276;
  *(&v231 - 1) = v85;
  v86 = (_QWORD *)swift_getKeyPath(&unk_1F47D0);
  ViewModelWithExternals.subscript.getter(v86);
  v87 = swift_release(v86);
  v267 = v3;
  v266 = v81;
  v81(v83, v3, v87);
  v88 = v274;
  if (*((_QWORD *)&v280 + 1))
  {
    v90 = v282;
    v89 = v283;
    swift_bridgeObjectRelease(*((_QWORD *)&v280 + 1));
    v91 = v277;
    if (v82 == 4)
    {
LABEL_9:
      v92 = v278;
      v93 = (_QWORD *)(v278 + v88[11]);
      sub_224DC((uint64_t)v93, type metadata accessor for ButtonViewModel.Content);
      *v93 = 0xD000000000000015;
      v93[1] = 0x80000000001FC000;
      swift_storeEnumTagMultiPayload(v93, v260, 1);
      v94 = v256 & 1;
      v95 = (uint64_t)v259;
      *v259 = 0;
      *(_QWORD *)(v95 + 8) = 0;
      *(_BYTE *)(v95 + 16) = v94;
      v96 = v270;
      *(_QWORD *)(v95 + 24) = v270;
      v97 = v95;
      v98 = v258;
      v99 = 3;
    }
    else
    {
      if ((v89 & 1) != 0)
        __asm { BR              X9 }
      v100 = v278;
      v101 = (_QWORD *)(v278 + v88[11]);
      sub_224DC((uint64_t)v101, type metadata accessor for ButtonViewModel.Content);
      *v101 = v90;
      v92 = v100;
      swift_storeEnumTagMultiPayload(v101, v260, 6);
      v96 = v270;
      v95 = (uint64_t)v259;
      *v259 = v270;
      v97 = v95;
      v98 = v258;
      v99 = 2;
    }
    swift_storeEnumTagMultiPayload(v97, v98, v99);
    v102 = v96;
    v103 = v257;
    sub_189450(v95, v92, v276, v275, v257);
    sub_224DC(v95, type metadata accessor for AssetAction.Kind);
    sub_B414(v91, &qword_2649B0);
    v104 = v269;
    v105 = v268;
    v268(v103, 0, 1, v269);
    sub_189F9C(v103, v91);
    v106 = (uint64_t)v271;
  }
  else
  {
    v91 = v277;
    switch(v82)
    {
      case 0:
      case 1:
        v108 = v252;
        if ((v256 & 1) != 0)
        {
          LocalizerDefaultValue.init(stringLiteral:)("LISTEN", 6, 2);
          v109 = v248;
          LocalizerDefaultValue.init(stringLiteral:)("Listen", 6, 2);
          v110 = v255;
          v111 = v250;
          v112 = v251;
          (*(void (**)(char *, _QWORD, uint64_t))(v255 + 104))(v250, enum case for LocalizerLookupStrategy.default(_:), v251);
          v113 = 0xD000000000000013;
          v114 = "Books.Button.Listen";
        }
        else
        {
          LocalizerDefaultValue.init(stringLiteral:)("READ", 4, 2);
          v109 = v248;
          LocalizerDefaultValue.init(stringLiteral:)("Read", 4, 2);
          v110 = v255;
          v111 = v250;
          v112 = v251;
          (*(void (**)(char *, _QWORD, uint64_t))(v255 + 104))(v250, enum case for LocalizerLookupStrategy.default(_:), v251);
          v113 = 0xD000000000000011;
          v114 = "Books.Button.Read";
        }
        v143 = (uint64_t)v247;
        static LocalizerRequest.string(forKey:with:defaultValue:using:)(v113, (unint64_t)(v114 - 32) | 0x8000000000000000, 0, v108, v111);
        v92 = v278;
        v104 = v269;
        v105 = v268;
        v144 = v257;
        (*(void (**)(char *, uint64_t))(v110 + 8))(v111, v112);
        v145 = *(void (**)(char *, uint64_t))(v253 + 8);
        v146 = v254;
        v145(v109, v254);
        v145(v108, v146);
        swift_storeEnumTagMultiPayload(v143, v260, 0);
        v88 = v274;
        sub_189F58(v143, v92 + v274[11], type metadata accessor for ButtonViewModel.Content);
        v147 = (uint64_t)v259;
        swift_storeEnumTagMultiPayload(v259, v258, 11);
        sub_189450(v147, v92, v276, v275, v144);
        sub_224DC(v147, type metadata accessor for AssetAction.Kind);
        v91 = v277;
        sub_B414(v277, &qword_2649B0);
        v105(v144, 0, 1, v104);
        sub_189F9C(v144, v91);
        v148 = (_OWORD *)v249;
        v149 = *(_QWORD *)(v249 + 8);
        v150 = *(_QWORD *)(v249 + 16);
        v151 = *(_QWORD *)(v249 + 24);
        v106 = (uint64_t)v271;
        v96 = v270;
        if (*(_QWORD *)v249 == 2)
        {
          sub_13E100(2uLL, v149, v150, v151);
          sub_13E100(2uLL, 0, 0, 0);
        }
        else
        {
          sub_13E100(*(_QWORD *)v249, v149, v150, v151);
          sub_13E100(2uLL, 0, 0, 0);
          *v148 = 0u;
          v148[1] = 0u;
        }
        break;
      case 2:
        v115 = v48[3];
        v116 = v48[4];
        sub_5480(v48, v115);
        AssetInfo.priceFormatted.getter(v115, v116);
        v118 = v117;
        swift_bridgeObjectRelease(v117);
        v119 = (uint64_t)v244;
        *v244 = 0x72616D6B63656863;
        *(_QWORD *)(v119 + 8) = 0xE90000000000006BLL;
        if (v118)
        {
          v120 = v48[3];
          v121 = v48[4];
          sub_5480(v48, v120);
          v122 = AssetInfo.priceFormatted.getter(v120, v121);
          if (!v123)
          {
            __break(1u);
            JUMPOUT(0x189428);
          }
          v124 = v122;
          v125 = v123;
          sub_5440(&qword_2621B0);
          static LocalizerRequest.verbatim(_:)(v124, v125);
          swift_bridgeObjectRelease(v125);
          v126 = 3;
        }
        else
        {
          v126 = 1;
        }
        v161 = v278;
        v106 = (uint64_t)v271;
        v162 = v245;
        v163 = v276;
        swift_storeEnumTagMultiPayload(v119, v260, v126);
        sub_189F58(v119, v161 + v88[11], type metadata accessor for ButtonViewModel.Content);
        *(_BYTE *)(v161 + v162) = 0;
        v164 = v242;
        v165 = v267;
        v166 = (uint64_t (*)(char *, uint64_t, char *, __n128))v273;
        v167 = v273(v242, v161, v267);
        __chkstk_darwin(v167);
        v168 = v275;
        *(&v231 - 2) = v163;
        *(&v231 - 1) = v168;
        v169 = (_QWORD *)swift_getKeyPath(&unk_1F4878);
        v170 = (uint64_t)v243;
        ViewModelWithExternals.subscript.getter(v169);
        v171 = swift_release(v169);
        v172 = v266;
        v266(v164, v165, v171);
        v173 = _s7BooksUI14ColorConstantsV25vibrantPrimaryButtonLabel05SwiftB00C0Vvg_0();
        sub_224DC(v170, type metadata accessor for ColorConstants);
        v271 = (char *)Color.opacity(_:)(0.5);
        swift_release(v173);
        v175 = static Color.orange.getter(v174);
        v260 = Color.opacity(_:)(0.6);
        swift_release(v175);
        v177 = static Color.orange.getter(v176);
        v259 = (_QWORD *)Color.opacity(_:)(0.6);
        v178 = swift_release(v177);
        v179 = v166(v164, v278, v165, v178);
        __chkstk_darwin(v179);
        *(&v231 - 2) = v276;
        *(&v231 - 1) = v168;
        v180 = (_QWORD *)swift_getKeyPath(&unk_1F4878);
        ViewModelWithExternals.subscript.getter(v180);
        v181 = swift_release(v180);
        v172(v164, v165, v181);
        v182 = _s7BooksUI14ColorConstantsV25vibrantPrimaryButtonLabel05SwiftB00C0Vvg_0();
        v92 = v278;
        sub_224DC(v170, type metadata accessor for ColorConstants);
        v183 = Color.opacity(_:)(0.5);
        swift_release(v182);
        v184 = (_QWORD *)v249;
        sub_13E100(*(_QWORD *)v249, *(_QWORD *)(v249 + 8), *(_QWORD *)(v249 + 16), *(_QWORD *)(v249 + 24));
        v185 = v260;
        *v184 = v271;
        v184[1] = v185;
        v184[2] = v259;
        v184[3] = v183;
        v88 = v274;
        goto LABEL_31;
      case 3:
        v92 = v278;
        v107 = v278 + v274[11];
        sub_224DC(v107, type metadata accessor for ButtonViewModel.Content);
        swift_storeEnumTagMultiPayload(v107, v260, 7);
        v106 = (uint64_t)v271;
LABEL_31:
        v104 = v269;
        v96 = v270;
        v105 = v268;
        break;
      case 4:
        goto LABEL_9;
      default:
        v127 = v48[3];
        v128 = v48[4];
        sub_5480(v48, v127);
        if ((AssetInfo.isFree.getter(v127, v128) & 1) != 0)
        {
          v152 = v252;
          LocalizerDefaultValue.init(stringLiteral:)("GET", 3, 2);
          v153 = v248;
          LocalizerDefaultValue.init(stringLiteral:)("Get", 3, 2);
          v154 = v255;
          v155 = v250;
          v156 = v251;
          (*(void (**)(char *, _QWORD, uint64_t))(v255 + 104))(v250, enum case for LocalizerLookupStrategy.default(_:), v251);
          v157 = (uint64_t)v246;
          static LocalizerRequest.string(forKey:with:defaultValue:using:)(0xD000000000000010, 0x80000000001FE3E0, 0, v152, v155);
          (*(void (**)(char *, uint64_t))(v154 + 8))(v155, v156);
          v158 = *(void (**)(char *, uint64_t))(v253 + 8);
          v159 = v254;
          v158(v153, v254);
          v158(v152, v159);
          swift_storeEnumTagMultiPayload(v157, v260, 0);
          v160 = v88[11];
          v92 = v278;
        }
        else
        {
          v129 = v48[3];
          v130 = v48[4];
          sub_5480(v48, v129);
          v131 = AssetInfo.priceFormatted.getter(v129, v130);
          v92 = v278;
          if (v132)
          {
            v133 = v131;
            v134 = v132;
            v135 = (uint64_t)v246;
            static LocalizerRequest.verbatim(_:)(v131, v132);
            swift_storeEnumTagMultiPayload(v135, v260, 0);
            sub_189F58(v135, v92 + v88[11], type metadata accessor for ButtonViewModel.Content);
            v136 = sub_5440(&qword_261FB8);
            inited = swift_initStackObject(v136, v279);
            *(_OWORD *)(inited + 16) = xmmword_1E0B70;
            *(_QWORD *)(inited + 32) = 0x6563697270;
            *(_QWORD *)(inited + 40) = 0xE500000000000000;
            *(_QWORD *)(inited + 48) = v133;
            *(_QWORD *)(inited + 56) = v134;
            v138 = sub_965C(inited);
            v139 = v252;
            LocalizerDefaultValue.init(stringLiteral:)("Buy for @@price@@", 17, 2);
            v140 = v250;
            v141 = v251;
            (*(void (**)(char *, _QWORD, uint64_t))(v255 + 104))(v250, enum case for LocalizerLookupStrategy.default(_:), v251);
            v142 = (uint64_t)v233;
            static LocalizerRequest.string(forKey:with:defaultValue:using:)(0xD000000000000023, 0x80000000001FE390, v138, v139, v140);
            swift_bridgeObjectRelease(v138);
            (*(void (**)(char *, uint64_t))(v255 + 8))(v140, v141);
            (*(void (**)(char *, uint64_t))(v253 + 8))(v139, v254);
            v232(v142, 0, 1, v75);
            sub_B586C(v142, v74);
            goto LABEL_34;
          }
          v186 = v252;
          LocalizerDefaultValue.init(stringLiteral:)("BUY", 3, 2);
          v187 = v248;
          LocalizerDefaultValue.init(stringLiteral:)("Buy", 3, 2);
          v188 = v255;
          v189 = v250;
          v190 = v251;
          (*(void (**)(char *, _QWORD, uint64_t))(v255 + 104))(v250, enum case for LocalizerLookupStrategy.default(_:), v251);
          v157 = (uint64_t)v246;
          static LocalizerRequest.string(forKey:with:defaultValue:using:)(0xD000000000000010, 0x80000000001FE370, 0, v186, v189);
          (*(void (**)(char *, uint64_t))(v188 + 8))(v189, v190);
          v191 = *(void (**)(char *, uint64_t))(v253 + 8);
          v192 = v187;
          v92 = v278;
          v193 = v254;
          v191(v192, v254);
          v191(v186, v193);
          swift_storeEnumTagMultiPayload(v157, v260, 0);
          v160 = v88[11];
        }
        sub_189F58(v157, v92 + v160, type metadata accessor for ButtonViewModel.Content);
LABEL_34:
        v106 = (uint64_t)v271;
        v104 = v269;
        v105 = v268;
        v96 = v270;
        if (v270)
        {
          if (objc_msgSend(v270, "isPreorder"))
          {
            *(_BYTE *)(v92 + v245) = 0;
            v194 = v234;
            v195 = v267;
            v196 = v273(v234, v92, v267);
            __chkstk_darwin(v196);
            v197 = v275;
            *(&v231 - 2) = v276;
            *(&v231 - 1) = v197;
            v198 = (_QWORD *)swift_getKeyPath(&unk_1F4878);
            v199 = (uint64_t)v236;
            ViewModelWithExternals.subscript.getter(v198);
            v200 = swift_release(v198);
            v201 = v266;
            v266(v194, v195, v200);
            v260 = _s7BooksUI14ColorConstantsV25vibrantPrimaryButtonLabel05SwiftB00C0Vvg_0();
            v202 = sub_224DC(v199, type metadata accessor for ColorConstants);
            v256 = static Color.orange.getter(v202);
            v203 = static Color.orange.getter(v256);
            v255 = Color.opacity(_:)(0.6);
            v204 = swift_release(v203);
            v205 = v235;
            v206 = ((uint64_t (*)(char *, uint64_t, char *, __n128))v273)(v235, v92, v195, v204);
            __chkstk_darwin(v206);
            *(&v231 - 2) = v276;
            *(&v231 - 1) = v197;
            v88 = v274;
            v207 = (_QWORD *)swift_getKeyPath(&unk_1F4878);
            v208 = (uint64_t)v237;
            ViewModelWithExternals.subscript.getter(v207);
            v209 = v207;
            v92 = v278;
            v210 = swift_release(v209);
            v201(v205, v195, v210);
            v211 = v238;
            sub_1E428(v208, v238, type metadata accessor for ColorConstants.Environment);
            v212 = v240;
            v213 = v239;
            v214 = v241;
            (*(void (**)(char *, _QWORD, uint64_t))(v240 + 104))(v239, enum case for ColorScheme.dark(_:), v241);
            v215 = sub_6FD0((unint64_t *)&qword_25FD60, (uint64_t (*)(uint64_t))&type metadata accessor for ColorScheme, (uint64_t)&protocol conformance descriptor for ColorScheme);
            LOBYTE(v203) = dispatch thunk of static Equatable.== infix(_:_:)(v211, v213, v214, v215);
            v216 = *(void (**)(char *, uint64_t))(v212 + 8);
            v216(v213, v214);
            v216((char *)v211, v214);
            v217 = _s7BooksUI14ColorConstantsV25vibrantPrimaryButtonLabel05SwiftB00C0Vvg_0();
            v218 = 0.4;
            if ((v203 & 1) == 0)
              v218 = 0.5;
            v219 = Color.opacity(_:)(v218);
            swift_release(v217);
            v96 = v270;
            sub_224DC(v208, type metadata accessor for ColorConstants);
            v220 = (uint64_t *)v249;
            sub_13E100(*(_QWORD *)v249, *(_QWORD *)(v249 + 8), *(_QWORD *)(v249 + 16), *(_QWORD *)(v249 + 24));
            v104 = v269;
            v221 = v256;
            *v220 = v260;
            v220[1] = v221;
            v106 = (uint64_t)v271;
            v220[2] = v255;
            v220[3] = v219;
            v105 = v268;
          }
          v222 = (uint64_t)v259;
          *v259 = v96;
          swift_storeEnumTagMultiPayload(v222, v258, 1);
          v223 = v96;
          v224 = v257;
          sub_189450(v222, v92, v276, v275, v257);
          sub_224DC(v222, type metadata accessor for AssetAction.Kind);
          sub_B414(v91, &qword_2649B0);
          v105(v224, 0, 1, v104);
          sub_189F9C(v224, v91);
        }
        break;
    }
  }
  if ((v262 & 1) != 0)
  {
    sub_B414(v91, &qword_2649B0);
    v105(v91, 1, 1, v104);
  }
  sub_189F10(v91, v106);
  v225 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v261 + 48);
  v226 = v225(v106, 1, v104);
  v227 = (uint64_t)v264;
  if (v226 == 1)
  {

    sub_B414(v106, &qword_2649B0);
    *(_OWORD *)v227 = 0u;
    *(_OWORD *)(v227 + 16) = 0u;
    *(_QWORD *)(v227 + 32) = 0;
  }
  else
  {
    *((_QWORD *)v264 + 3) = v104;
    *(_QWORD *)(v227 + 32) = sub_6FD0(&qword_263340, type metadata accessor for AssetAction, (uint64_t)&protocol conformance descriptor for AssetAction);
    v228 = sub_C404((_QWORD *)v227);
    sub_21C88(v106, (uint64_t)v228, type metadata accessor for AssetAction);

  }
  v229 = (uint64_t)v263;
  swift_storeEnumTagMultiPayload(v227, v265, 0);
  sub_189F58(v227, v92 + v88[13], type metadata accessor for ButtonViewModel.ActionKind);
  sub_189F9C(v91, v229);
  v230 = v225(v229, 1, v104) != 1;
  sub_B414(v229, &qword_2649B0);
  *(_BYTE *)(v92 + v88[12]) = v230;
}

uint64_t sub_189450@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t (*v39)(char *, uint64_t, uint64_t);
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t (*v55)(char *, uint64_t, uint64_t);
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void (*v61)(char *, uint64_t, __n128);
  char *v62;
  uint64_t v63;
  _QWORD *KeyPath;
  uint64_t v65;
  __n128 v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t (*v94)(char *, uint64_t, uint64_t);
  void (*v95)(char *, uint64_t);
  char *v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  _OWORD v116[11];
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  char v139;
  unsigned __int8 v140[9];

  v112 = a5;
  v9 = type metadata accessor for UUID(0);
  v114 = *(_QWORD *)(v9 - 8);
  v115 = v9;
  __chkstk_darwin(v9);
  v111 = (char *)&v90 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v108 = type metadata accessor for LinkActionType(0);
  v106 = *(_QWORD *)(v108 - 8);
  __chkstk_darwin(v108);
  v107 = (char *)&v90 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for ClickData.TargetType(0);
  __chkstk_darwin(v12);
  v104 = (char *)&v90 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_5440(&qword_25E828);
  __chkstk_darwin(v14);
  v109 = (char *)&v90 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for AssetAction.Kind(0);
  __chkstk_darwin(v16);
  v105 = (uint64_t)&v90 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_5440(&qword_25FAC0);
  __chkstk_darwin(v18);
  v97 = (char *)&v90 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_5440(&qword_268370);
  __chkstk_darwin(v20);
  v22 = (char *)&v90 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v99 = a3;
  v100 = a4;
  v24 = type metadata accessor for BuyButtonViewModelBase(0, a3, a4, v23);
  v25 = *(_QWORD *)(v24 - 8);
  v26 = __chkstk_darwin(v24);
  v96 = (char *)&v90 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __chkstk_darwin(v26);
  v30 = (char *)&v90 - v29;
  __chkstk_darwin(v28);
  v32 = (char *)&v90 - v31;
  v33 = type metadata accessor for ActionMetrics(0);
  v102 = *(_QWORD *)(v33 - 8);
  v103 = v33;
  v34 = __chkstk_darwin(v33);
  v101 = (char *)&v90 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v34);
  v113 = (uint64_t)&v90 - v36;
  v110 = a1;
  AssetAction.Kind.figaroActionType.getter();
  v37 = v128;
  LOBYTE(v117) = v128;
  v38 = a2 + *(int *)(v24 + 44);
  sub_BD00(v38, (uint64_t)&v128);
  v93 = _s7BooksUI7MetricsO13actionDetails3for9assetInfoSDySSypGSgAC15ClickActionTypeO_14BookFoundation05AssetH0_ptFZ_0(&v117, &v128);
  _s7BooksUI13AnyPagedFrameVwxx_0(&v128);
  v39 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v25 + 16);
  v98 = a2;
  v94 = v39;
  v39(v32, a2, v24);
  v40 = &v32[*(int *)(v24 + 44)];
  v41 = *((_QWORD *)v40 + 3);
  v42 = *((_QWORD *)v40 + 4);
  sub_5480(v40, v41);
  v91 = ContentInfo.id.getter(v41, *(_QWORD *)(v42 + 8));
  v92 = v43;
  v95 = *(void (**)(char *, uint64_t))(v25 + 8);
  v95(v32, v24);
  v140[0] = 0;
  v139 = v37;
  sub_BD00(v38, (uint64_t)&v128);
  v44 = *((_QWORD *)&v129 + 1);
  v45 = v130;
  sub_5480(&v128, *((uint64_t *)&v129 + 1));
  AssetInfo.sharableURL.getter(v44, v45);
  v46 = type metadata accessor for URL(0);
  v47 = *(_QWORD *)(v46 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v47 + 48))(v22, 1, v46) == 1)
  {
    _s7BooksUI13AnyPagedFrameVwxx_0(&v128);
    sub_B414((uint64_t)v22, &qword_268370);
    v48 = 0;
    v49 = 0;
  }
  else
  {
    v48 = URL.absoluteString.getter();
    v49 = v50;
    (*(void (**)(char *, uint64_t))(v47 + 8))(v22, v46);
    _s7BooksUI13AnyPagedFrameVwxx_0(&v128);
  }
  v51 = v38;
  sub_BD00(v38, (uint64_t)&v128);
  sub_BD00((uint64_t)&v128, (uint64_t)v116);
  sub_7D1B4(v116, 0x6C6C6950797562, 0xE700000000000000, 0, (uint64_t)&v117);
  _s7BooksUI13AnyPagedFrameVwxx_0(&v128);
  v136 = v125;
  v137 = v126;
  v138 = v127;
  v132 = v121;
  v133 = v122;
  v134 = v123;
  v135 = v124;
  v128 = v117;
  v129 = v118;
  v130 = v119;
  v131 = v120;
  v116[8] = v125;
  v116[9] = v126;
  v116[10] = v127;
  v116[4] = v121;
  v116[5] = v122;
  v116[6] = v123;
  v116[7] = v124;
  v116[0] = v117;
  v116[1] = v118;
  v116[2] = v119;
  v116[3] = v120;
  v52 = v92;
  v53 = v93;
  static Metrics.createClickMetrics(targetId:targetType:actionType:actionDetails:actionUrl:location:)(v91, v92, v140, &v139, v93, v48, v49, v116, v113);
  swift_bridgeObjectRelease(v52);
  swift_bridgeObjectRelease(v49);
  swift_bridgeObjectRelease(v53);
  sub_7E498(&v128);
  v54 = v98;
  v55 = v94;
  v94(v30, v98, v24);
  v56 = &v30[*(int *)(v24 + 44)];
  v57 = *((_QWORD *)v56 + 3);
  v58 = *((_QWORD *)v56 + 4);
  sub_5480(v56, v57);
  v59 = ContentInfo.id.getter(v57, *(_QWORD *)(v58 + 8));
  v92 = v60;
  v93 = v59;
  v61 = (void (*)(char *, uint64_t, __n128))v95;
  v95(v30, v24);
  v62 = v96;
  v63 = v55(v96, v54, v24);
  __chkstk_darwin(v63);
  KeyPath = (_QWORD *)swift_getKeyPath(&unk_1F4C58);
  swift_getWitnessTable(&protocol conformance descriptor for BuyButtonViewModelBase<A>, v24);
  v65 = (uint64_t)v97;
  ViewModelWithExternals.subscript.getter(KeyPath);
  v66 = swift_release(KeyPath);
  v61(v62, v24, v66);
  v67 = v114;
  v68 = v115;
  v69 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v114 + 48))(v65, 1, v115);
  if ((_DWORD)v69 == 1)
  {
    sub_B414(v65, &qword_25FAC0);
    v99 = 0;
    v100 = 0;
  }
  else
  {
    v70 = UUID.uuidString.getter(v69);
    v99 = v71;
    v100 = v70;
    (*(void (**)(uint64_t, uint64_t))(v67 + 8))(v65, v68);
  }
  sub_BD00(v51, (uint64_t)&v117);
  v72 = *((_QWORD *)&v118 + 1);
  v73 = v119;
  sub_5480(&v117, *((uint64_t *)&v118 + 1));
  LODWORD(v98) = AssetInfo.isExplicit.getter(v72, v73);
  v75 = (uint64_t)v101;
  v74 = v102;
  v76 = v113;
  v77 = v103;
  (*(void (**)(char *, uint64_t, uint64_t))(v102 + 16))(v101, v113, v103);
  v78 = v105;
  sub_1E428(v110, v105, type metadata accessor for AssetAction.Kind);
  v79 = v104;
  AssetAction.Kind.appAnalyticsClickTargetType.getter();
  v80 = v107;
  (*(void (**)(char *, _QWORD, uint64_t))(v106 + 104))(v107, enum case for LinkActionType.click(_:), v108);
  v81 = (uint64_t)v109;
  ClickData.init(with:linkActionType:index:url:)(v79, v80, 0, 0, 0);
  v82 = type metadata accessor for ClickData(0);
  v83 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v82 - 8) + 56))(v81, 0, 1, v82);
  v84 = v111;
  v85 = UUID.init()(v83);
  v86 = UUID.uuidString.getter(v85);
  v88 = v87;
  (*(void (**)(char *, uint64_t))(v114 + 8))(v84, v115);
  AssetAction.init(id:assetID:instanceID:isExplicit:actionMetrics:kind:clickData:)(v86, v88, v93, v92, v100, v99, v98 & 1, v75, v112, v78, v81);
  (*(void (**)(uint64_t, uint64_t))(v74 + 8))(v76, v77);
  return _s7BooksUI13AnyPagedFrameVwxx_0(&v117);
}

double sub_189BF8@<D0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  __int16 v4;
  __int128 v5;
  double result;
  __int128 v7;
  _OWORD v8[2];
  __int128 v9;
  __int128 v10;
  __int16 v11;

  (*(void (**)(_OWORD *__return_ptr, _QWORD))(*(_QWORD *)(a2 + a1 - 8) + 32))(v8, *(_QWORD *)(a2 + a1 - 16));
  v4 = v11;
  v5 = v8[1];
  *(_OWORD *)a3 = v8[0];
  *(_OWORD *)(a3 + 16) = v5;
  result = *(double *)&v9;
  v7 = v10;
  *(_OWORD *)(a3 + 32) = v9;
  *(_OWORD *)(a3 + 48) = v7;
  *(_WORD *)(a3 + 64) = v4;
  return result;
}

uint64_t sub_189C54()
{
  return 16;
}

__n128 sub_189C60(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

Swift::Int sub_189C70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_189EC0(a1, a2, a3, (void (*)(_QWORD *))ShelfGridPaddleButtonView.Context.hash(into:));
}

uint64_t sub_189C7C(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t inited;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  _BYTE v19[64];

  v4 = type metadata accessor for LocalizerDefaultValue(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a1[3];
  v18 = a1[4];
  sub_5480(a1, v8);
  v9 = sub_5440(&qword_261FB8);
  inited = swift_initStackObject(v9, v19);
  *(_OWORD *)(inited + 16) = xmmword_1E0B70;
  *(_QWORD *)(inited + 32) = 1702125924;
  *(_QWORD *)(inited + 40) = 0xE400000000000000;
  v11 = a1[3];
  v12 = a1[4];
  sub_5480(a1, v11);
  *(_QWORD *)(inited + 48) = Localizer.formattedDate(format:date:)(6573433, 0xE300000000000000, a2, v11, v12);
  *(_QWORD *)(inited + 56) = v13;
  v14 = sub_965C(inited);
  LocalizerDefaultValue.init(stringLiteral:)("Expected @@date@@", 17, 2);
  v15 = Localizer.string(forKey:with:defaultValue:)(0xD00000000000001CLL, 0x80000000001FE480, v14, v7, v8, v18);
  swift_bridgeObjectRelease(v14);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v15;
}

uint64_t sub_189DFC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for Date(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_189E5C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)(a2 + a1 - 8) + 24))(*(_QWORD *)(a2 + a1 - 16));
  *a3 = result;
  return result;
}

uint64_t sub_189E94()
{
  return 16;
}

__n128 sub_189EA0(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

Swift::Int sub_189EB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_189EC0(a1, a2, a3, (void (*)(_QWORD *))ShelfGridPaddleButtonView.Direction.hash(into:));
}

Swift::Int sub_189EC0(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD *))
{
  _QWORD v6[9];

  Hasher.init(_seed:)(v6, a1);
  a4(v6);
  return Hasher._finalize()();
}

uint64_t type metadata accessor for BuyButtonViewModelBase.ButtonType(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10E40(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for BuyButtonViewModelBase.ButtonType);
}

uint64_t sub_189F10(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_5440(&qword_2649B0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_189F58(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t sub_189F9C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_5440(&qword_2649B0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_189FE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(a3 + a2 - 8) + 16))(*(_QWORD *)(a3 + a2 - 16));
}

uint64_t sub_18A014()
{
  return 16;
}

__n128 sub_18A020(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_18A02C(uint64_t a1)
{
  uint64_t result;

  result = sub_6FD0(&qword_269CD0, type metadata accessor for BuyButtonExternals, (uint64_t)&protocol conformance descriptor for BuyButtonExternals);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_18A068(uint64_t a1)
{
  return swift_getWitnessTable(&protocol conformance descriptor for BuyButtonViewModelBase<A>.LongCaptionAlignment, a1);
}

uint64_t sub_18A078(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = swift_getWitnessTable(&protocol conformance descriptor for BuyButtonViewModelBase<A>, a2);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_18A0A4(uint64_t a1)
{
  return swift_getWitnessTable(&protocol conformance descriptor for BuyButtonViewModelBase<A>.Style, a1);
}

uint64_t sub_18A0B4(uint64_t a1)
{
  return swift_getWitnessTable(&protocol conformance descriptor for BuyButtonViewModelBase<A>.OutlinedStyle, a1);
}

uint64_t *initializeBufferWithCopyOfBuffer for BuyButtonExternals(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  char *v18;
  uint64_t v19;
  void *v20;
  uint64_t *v21;
  uint64_t *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int16 v41;
  char v43;
  uint64_t *v44;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    v13 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = sub_5440(&qword_25F1E8);
    if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
    {
      v8 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      v9 = a1;
      v10 = v7;
      v11 = 1;
    }
    else
    {
      v14 = *a2;
      *a1 = *a2;
      swift_retain(v14);
      v9 = a1;
      v10 = v7;
      v11 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v10, v11);
    v15 = a3[5];
    v16 = a3[6];
    v17 = (uint64_t *)((char *)a1 + v15);
    v18 = (char *)a2 + v15;
    v20 = *(void **)v18;
    v19 = *((_QWORD *)v18 + 1);
    *v17 = v20;
    v17[1] = v19;
    v21 = (uint64_t *)((char *)a1 + v16);
    v22 = (uint64_t *)((char *)a2 + v16);
    v23 = v20;
    v24 = sub_5440(&qword_25F758);
    if (swift_getEnumCaseMultiPayload(v22, v24) == 1)
    {
      v25 = type metadata accessor for UUID(0);
      v26 = *(_QWORD *)(v25 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v26 + 48))(v22, 1, v25))
      {
        v27 = sub_5440(&qword_25FAC0);
        memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
        v28 = 1;
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v26 + 16))(v21, v22, v25);
        v28 = 1;
        (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v21, 0, 1, v25);
      }
    }
    else
    {
      v29 = *v22;
      *v21 = *v22;
      swift_retain(v29);
      v28 = 0;
    }
    swift_storeEnumTagMultiPayload(v21, v24, v28);
    v30 = a3[7];
    v31 = (char *)a1 + v30;
    v32 = (char *)a2 + v30;
    v33 = *(_QWORD *)v32;
    v34 = *((_QWORD *)v32 + 1);
    v35 = *((_QWORD *)v32 + 2);
    v36 = *((_QWORD *)v32 + 3);
    v37 = *((_QWORD *)v32 + 4);
    v38 = *((_QWORD *)v32 + 5);
    v39 = *((_QWORD *)v32 + 6);
    v40 = *((_QWORD *)v32 + 7);
    v44 = a1;
    v41 = *((_WORD *)v32 + 32);
    sub_3480C(*(_QWORD *)v32, v34, v35, v36, v37, v38, v39, v40, v41, v32[66]);
    *(_QWORD *)v31 = v33;
    *((_QWORD *)v31 + 1) = v34;
    *((_QWORD *)v31 + 2) = v35;
    *((_QWORD *)v31 + 3) = v36;
    *((_QWORD *)v31 + 4) = v37;
    *((_QWORD *)v31 + 5) = v38;
    *((_QWORD *)v31 + 6) = v39;
    *((_QWORD *)v31 + 7) = v40;
    *((_WORD *)v31 + 32) = v41;
    v13 = v44;
    v31[66] = v43;
  }
  return v13;
}

uint64_t destroy for BuyButtonExternals(_QWORD *a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;

  v4 = sub_5440(&qword_25F1E8);
  if (swift_getEnumCaseMultiPayload(a1, v4) == 1)
  {
    v5 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  }
  else
  {
    swift_release(*a1);
  }

  v6 = (_QWORD *)((char *)a1 + a2[6]);
  v7 = sub_5440(&qword_25F758);
  if (swift_getEnumCaseMultiPayload(v6, v7) == 1)
  {
    v8 = type metadata accessor for UUID(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v9 + 48))(v6, 1, v8))
      (*(void (**)(_QWORD *, uint64_t))(v9 + 8))(v6, v8);
  }
  else
  {
    swift_release(*v6);
  }
  v10 = (char *)a1 + a2[7];
  return sub_BDF8(*(_QWORD *)v10, *((_QWORD *)v10 + 1), *((_QWORD *)v10 + 2), *((_QWORD *)v10 + 3), *((_QWORD *)v10 + 4), *((_QWORD *)v10 + 5), *((_QWORD *)v10 + 6), *((_QWORD *)v10 + 7), *((_WORD *)v10 + 32), v10[66]);
}

uint64_t *initializeWithCopy for BuyButtonExternals(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  void *v17;
  uint64_t *v18;
  uint64_t *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int16 v38;
  char v40;
  uint64_t *v41;

  v6 = sub_5440(&qword_25F1E8);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for ColorScheme(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a1;
    v9 = v6;
    v10 = 1;
  }
  else
  {
    v11 = *a2;
    *a1 = *a2;
    swift_retain(v11);
    v8 = a1;
    v9 = v6;
    v10 = 0;
  }
  swift_storeEnumTagMultiPayload(v8, v9, v10);
  v12 = a3[5];
  v13 = a3[6];
  v14 = (uint64_t *)((char *)a1 + v12);
  v15 = (char *)a2 + v12;
  v17 = *(void **)v15;
  v16 = *((_QWORD *)v15 + 1);
  *v14 = v17;
  v14[1] = v16;
  v18 = (uint64_t *)((char *)a1 + v13);
  v19 = (uint64_t *)((char *)a2 + v13);
  v20 = v17;
  v21 = sub_5440(&qword_25F758);
  if (swift_getEnumCaseMultiPayload(v19, v21) == 1)
  {
    v22 = type metadata accessor for UUID(0);
    v23 = *(_QWORD *)(v22 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v23 + 48))(v19, 1, v22))
    {
      v24 = sub_5440(&qword_25FAC0);
      memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
      v25 = 1;
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v23 + 16))(v18, v19, v22);
      v25 = 1;
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v18, 0, 1, v22);
    }
  }
  else
  {
    v26 = *v19;
    *v18 = *v19;
    swift_retain(v26);
    v25 = 0;
  }
  swift_storeEnumTagMultiPayload(v18, v21, v25);
  v27 = a3[7];
  v28 = (char *)a1 + v27;
  v29 = (char *)a2 + v27;
  v30 = *(_QWORD *)v29;
  v31 = *((_QWORD *)v29 + 1);
  v32 = *((_QWORD *)v29 + 2);
  v33 = *((_QWORD *)v29 + 3);
  v34 = *((_QWORD *)v29 + 4);
  v35 = *((_QWORD *)v29 + 5);
  v36 = *((_QWORD *)v29 + 6);
  v37 = *((_QWORD *)v29 + 7);
  v41 = a1;
  v38 = *((_WORD *)v29 + 32);
  sub_3480C(*(_QWORD *)v29, v31, v32, v33, v34, v35, v36, v37, v38, v29[66]);
  *(_QWORD *)v28 = v30;
  *((_QWORD *)v28 + 1) = v31;
  *((_QWORD *)v28 + 2) = v32;
  *((_QWORD *)v28 + 3) = v33;
  *((_QWORD *)v28 + 4) = v34;
  *((_QWORD *)v28 + 5) = v35;
  *((_QWORD *)v28 + 6) = v36;
  *((_QWORD *)v28 + 7) = v37;
  *((_WORD *)v28 + 32) = v38;
  v28[66] = v40;
  return v41;
}

uint64_t *assignWithCopy for BuyButtonExternals(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  void *v15;
  void *v16;
  id v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int16 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int16 v47;
  char v48;
  char v50;
  uint64_t *v51;

  if (a1 != a2)
  {
    sub_B414((uint64_t)a1, &qword_25F1E8);
    v6 = sub_5440(&qword_25F1E8);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = v6;
      v10 = 1;
    }
    else
    {
      v11 = *a2;
      *a1 = *a2;
      swift_retain(v11);
      v8 = a1;
      v9 = v6;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
  }
  v12 = a3[5];
  v13 = (uint64_t *)((char *)a1 + v12);
  v14 = (char *)a2 + v12;
  v15 = *(void **)((char *)a1 + v12);
  v16 = *(void **)((char *)a2 + v12);
  *v13 = v16;
  v17 = v16;

  v13[1] = *((_QWORD *)v14 + 1);
  if (a1 != a2)
  {
    v18 = a3[6];
    v19 = (uint64_t *)((char *)a1 + v18);
    v20 = (uint64_t *)((char *)a2 + v18);
    sub_B414((uint64_t)a1 + v18, &qword_25F758);
    v21 = sub_5440(&qword_25F758);
    if (swift_getEnumCaseMultiPayload(v20, v21) == 1)
    {
      v22 = type metadata accessor for UUID(0);
      v23 = *(_QWORD *)(v22 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v23 + 48))(v20, 1, v22))
      {
        v24 = sub_5440(&qword_25FAC0);
        memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
        v25 = 1;
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v23 + 16))(v19, v20, v22);
        v25 = 1;
        (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v19, 0, 1, v22);
      }
    }
    else
    {
      v26 = *v20;
      *v19 = *v20;
      swift_retain(v26);
      v25 = 0;
    }
    swift_storeEnumTagMultiPayload(v19, v21, v25);
  }
  v27 = a3[7];
  v28 = (char *)a1 + v27;
  v29 = (char *)a2 + v27;
  v30 = *(_QWORD *)v29;
  v31 = *((_QWORD *)v29 + 1);
  v32 = *((_QWORD *)v29 + 2);
  v33 = *((_QWORD *)v29 + 3);
  v34 = *((_QWORD *)v29 + 4);
  v35 = *((_QWORD *)v29 + 5);
  v36 = *((_QWORD *)v29 + 6);
  v37 = *((_QWORD *)v29 + 7);
  v51 = a1;
  v38 = *((_WORD *)v29 + 32);
  sub_3480C(*(_QWORD *)v29, v31, v32, v33, v34, v35, v36, v37, v38, v29[66]);
  v39 = *(_QWORD *)v28;
  v40 = *((_QWORD *)v28 + 1);
  v41 = *((_QWORD *)v28 + 2);
  v42 = *((_QWORD *)v28 + 3);
  v43 = *((_QWORD *)v28 + 4);
  v44 = *((_QWORD *)v28 + 5);
  v45 = *((_QWORD *)v28 + 6);
  v46 = *((_QWORD *)v28 + 7);
  v47 = *((_WORD *)v28 + 32);
  v48 = v28[66];
  *(_QWORD *)v28 = v30;
  *((_QWORD *)v28 + 1) = v31;
  *((_QWORD *)v28 + 2) = v32;
  *((_QWORD *)v28 + 3) = v33;
  *((_QWORD *)v28 + 4) = v34;
  *((_QWORD *)v28 + 5) = v35;
  *((_QWORD *)v28 + 6) = v36;
  *((_QWORD *)v28 + 7) = v37;
  *((_WORD *)v28 + 32) = v38;
  v28[66] = v50;
  sub_BDF8(v39, v40, v41, v42, v43, v44, v45, v46, v47, v48);
  return v51;
}

char *initializeWithTake for BuyButtonExternals(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  __int128 v18;
  __int128 v19;

  v6 = sub_5440(&qword_25F1E8);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for ColorScheme(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v8 = a3[6];
  *(_OWORD *)&a1[a3[5]] = *(_OWORD *)&a2[a3[5]];
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = sub_5440(&qword_25F758);
  if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
  {
    v12 = type metadata accessor for UUID(0);
    v13 = *(_QWORD *)(v12 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v10, 1, v12))
    {
      v14 = sub_5440(&qword_25FAC0);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v9, v10, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v9, 0, 1, v12);
    }
    swift_storeEnumTagMultiPayload(v9, v11, 1);
  }
  else
  {
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  v15 = a3[7];
  v16 = &a1[v15];
  v17 = &a2[v15];
  v18 = *((_OWORD *)v17 + 3);
  *((_OWORD *)v16 + 2) = *((_OWORD *)v17 + 2);
  *((_OWORD *)v16 + 3) = v18;
  *(_DWORD *)(v16 + 63) = *(_DWORD *)(v17 + 63);
  v19 = *((_OWORD *)v17 + 1);
  *(_OWORD *)v16 = *(_OWORD *)v17;
  *((_OWORD *)v16 + 1) = v19;
  return a1;
}

char *assignWithTake for BuyButtonExternals(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  void *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  __int16 v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int16 v32;
  char v33;
  __int128 v34;
  __int128 v35;

  if (a1 != a2)
  {
    sub_B414((uint64_t)a1, &qword_25F1E8);
    v6 = sub_5440(&qword_25F1E8);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for ColorScheme(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
  }
  v8 = a3[5];
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = *(void **)&a1[v8];
  *(_QWORD *)v9 = *(_QWORD *)v10;

  *((_QWORD *)v9 + 1) = *((_QWORD *)v10 + 1);
  if (a1 != a2)
  {
    v12 = a3[6];
    v13 = &a1[v12];
    v14 = &a2[v12];
    sub_B414((uint64_t)&a1[v12], &qword_25F758);
    v15 = sub_5440(&qword_25F758);
    if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
    {
      v16 = type metadata accessor for UUID(0);
      v17 = *(_QWORD *)(v16 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v14, 1, v16))
      {
        v18 = sub_5440(&qword_25FAC0);
        memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v13, v14, v16);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v13, 0, 1, v16);
      }
      swift_storeEnumTagMultiPayload(v13, v15, 1);
    }
    else
    {
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
  }
  v19 = a3[7];
  v20 = &a1[v19];
  v21 = &a2[v19];
  v22 = *((_WORD *)v21 + 32);
  v23 = v21[66];
  v24 = *(_QWORD *)v20;
  v25 = *((_QWORD *)v20 + 1);
  v26 = *((_QWORD *)v20 + 2);
  v27 = *((_QWORD *)v20 + 3);
  v28 = *((_QWORD *)v20 + 4);
  v29 = *((_QWORD *)v20 + 5);
  v30 = *((_QWORD *)v20 + 6);
  v31 = *((_QWORD *)v20 + 7);
  v32 = *((_WORD *)v20 + 32);
  v33 = v20[66];
  v34 = *((_OWORD *)v21 + 1);
  *(_OWORD *)v20 = *(_OWORD *)v21;
  *((_OWORD *)v20 + 1) = v34;
  v35 = *((_OWORD *)v21 + 3);
  *((_OWORD *)v20 + 2) = *((_OWORD *)v21 + 2);
  *((_OWORD *)v20 + 3) = v35;
  *((_WORD *)v20 + 32) = v22;
  v20[66] = v23;
  sub_BDF8(v24, v25, v26, v27, v28, v29, v30, v31, v32, v33);
  return a1;
}

uint64_t getEnumTagSinglePayload for BuyButtonExternals(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_18ACB0);
}

uint64_t sub_18ACB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;
  uint64_t v11;

  v6 = sub_5440(&qword_25F210);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  if ((_DWORD)a2 == 2147483646)
  {
    v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
    if (v9 >= 0xFFFFFFFF)
      LODWORD(v9) = -1;
    v10 = v9 - 1;
    if (v10 < 0)
      v10 = -1;
    return (v10 + 1);
  }
  else
  {
    v11 = sub_5440(&qword_261678);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v11);
  }
}

uint64_t storeEnumTagSinglePayload for BuyButtonExternals(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_18AD78);
}

uint64_t sub_18AD78(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  result = sub_5440(&qword_25F210);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 2147483646)
    {
      *(_QWORD *)(a1 + *(int *)(a4 + 20)) = a2;
      return result;
    }
    v10 = sub_5440(&qword_261678);
    v12 = a1 + *(int *)(a4 + 24);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_18AE24(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[4];

  sub_A6B14(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    v6[1] = &unk_1F4AE8;
    sub_627B0(319);
    if (v5 <= 0x3F)
    {
      v6[2] = *(_QWORD *)(v4 - 8) + 64;
      v6[3] = &unk_1F4B00;
      swift_initStructMetadata(a1, 256, 4, v6, a1 + 16);
    }
  }
}

uint64_t sub_18AEB8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[5];

  result = type metadata accessor for ButtonViewModel(319);
  if (v3 <= 0x3F)
  {
    v5[0] = *(_QWORD *)(result - 8) + 64;
    v5[1] = &unk_1F4B38;
    v5[2] = &unk_1F4B50;
    v5[3] = &unk_1F4B68;
    result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 16));
    if (v4 <= 0x3F)
    {
      v5[4] = *(_QWORD *)(result - 8) + 64;
      swift_initStructMetadata(a1, 0, 5, v5, a1 + 32);
      return 0;
    }
  }
  return result;
}

uint64_t *sub_18AF5C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  size_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t *, uint64_t *, uint64_t);
  unint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  char v42;
  uint64_t v43;
  _BYTE *v44;
  char *v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __n128 v52;
  __int128 v53;
  uint64_t v54;
  unint64_t v55;
  _QWORD *v56;
  unint64_t v57;
  unsigned int v58;
  unsigned int v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  char v71;
  uint64_t v72;
  _QWORD *v73;
  void **v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  void (*v78)(uint64_t, uint64_t, uint64_t);
  id v79;
  uint64_t v80;
  void (*v81)(unint64_t, unint64_t, uint64_t);
  _QWORD *v82;
  _QWORD *v83;
  uint64_t v84;
  void (*v85)(unint64_t, unint64_t, uint64_t);
  unsigned int v86;
  uint64_t v87;
  BOOL v88;
  unint64_t v89;
  _BYTE *v90;
  _BYTE *v91;
  uint64_t v92;
  uint64_t v93;
  unsigned int v94;
  uint64_t v95;
  char v96;
  unint64_t v97;
  __int128 v98;
  __int128 v99;
  void *v100;
  const void *v101;
  size_t v102;
  unsigned int v103;
  uint64_t v104;
  unint64_t v105;
  char *v106;
  char *v107;
  unint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  size_t __n;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v134;
  unint64_t v135;

  v127 = sub_5440(&qword_25FC38);
  v4 = *(_QWORD *)(v127 - 8);
  v130 = *(_QWORD *)(v4 + 64);
  v5 = *(_DWORD *)(v4 + 80);
  v6 = v5;
  v7 = type metadata accessor for ColorScheme(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_DWORD *)(v8 + 80);
  v10 = v9 & 0xF8 | 7;
  v123 = v8;
  v124 = v7;
  v11 = *(_QWORD *)(v8 + 64);
  if (v11 <= 8)
    v11 = 8;
  v131 = v11;
  v128 = type metadata accessor for LocalizerRequest(0);
  v12 = *(_QWORD *)(v128 - 8);
  v13 = *(_DWORD *)(v12 + 80);
  v14 = v13;
  v134 = v12;
  v15 = *(_QWORD *)(v12 + 64);
  v16 = ((v14 + 24) & ~v14) + v15;
  if (v15 > v16)
    v16 = v15;
  if (v16 <= ((v13 + 16) & ~(unint64_t)v13) + v15)
    v16 = ((v13 + 16) & ~(unint64_t)v13) + v15;
  v122 = v15 + 7;
  if (v16 <= ((v15 + 7) & 0xFFFFFFFFFFFFFFF8) + 16)
    v16 = ((v15 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (v16 <= ((v15 + v13) & ~(unint64_t)v13) + v15)
    v16 = ((v15 + v13) & ~(unint64_t)v13) + v15;
  if (v16 <= 0x10)
    v16 = 16;
  v135 = v16;
  if (v16 > 3
    || ((v17 = ((1 << (8 * v16)) | 2u) >> (8 * v16), v17 <= 0xFFF8) ? (v18 = 2) : (v18 = 4), v17 <= 0xF8))
  {
    v18 = 1;
  }
  v19 = type metadata accessor for URL(0);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = *(_DWORD *)(v20 + 80);
  v22 = v21 & 0xF8 | 7;
  if (*(_QWORD *)(v20 + 64) <= 0x28uLL)
    v23 = 40;
  else
    v23 = *(_QWORD *)(v20 + 64);
  if (*(_DWORD *)(v134 + 84))
    v24 = v15;
  else
    v24 = v15 + 1;
  v25 = *(_QWORD *)(a3 + 16);
  v26 = *(_QWORD *)(v25 - 8);
  v27 = *(_DWORD *)(v26 + 80);
  v28 = v10 | v5 | v13 | (unint64_t)v22 | v27;
  if (v28 != 7
    || ((v9 | v5 | v13 | v21 | *(_DWORD *)(v26 + 80)) & 0x100000) != 0
    || (v29 = v130 + v5,
        v30 = v13 + 32,
        v125 = ~(unint64_t)v13,
        ((v27
        + 40
        + ((v24
          + ((v23
            + v13
            + 1
            + ((((v30 + ((v131 + ((v130 + v10 + ((v130 + v6) & ~v6)) & ~v10) + 11) & 0xFFFFFFFFFFFFFFF8)) & (v13 & 0xF8 ^ 0xFFFFFFFFFFFFFFF8) | 1)
              + v135
              + v18
              + v22) & ~v22)) & v125)
          + 10) & 0xFFFFFFFFFFFFFFF8)) & ~v27)
      + *(_QWORD *)(v26 + 64) > 0x18))
  {
    v38 = *a2;
    *a1 = *a2;
    v39 = (uint64_t *)(v38 + ((v28 + 16) & ~v28));
    swift_retain(v38);
    return v39;
  }
  v113 = v19;
  v114 = v13 & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  v112 = *(_QWORD *)(v19 - 8);
  v126 = v23;
  v115 = v23 + v13 + 1;
  v116 = ((v13
         + 32
         + ((v131 + ((v130 + v10 + ((v130 + v6) & ~v6)) & ~v10) + 11) & 0xFFFFFFFFFFFFFFF8)) & v114 | 1)
       + v135;
  v117 = *(_DWORD *)(v26 + 80);
  v118 = v27 + 40;
  __n = v24;
  v129 = v21 & 0xF8 | 7;
  v120 = *(_QWORD *)(v25 - 8);
  v121 = *(_QWORD *)(a3 + 16);
  v31 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v4 + 16);
  v31(a1, a2, v127);
  v32 = ((unint64_t)a1 + v29) & ~v6;
  v33 = ((unint64_t)a2 + v29) & ~v6;
  v31((uint64_t *)v32, (uint64_t *)v33, v127);
  v34 = (_QWORD *)((v32 + v130 + v10) & ~v10);
  v35 = (_QWORD *)((v33 + v130 + v10) & ~v10);
  v36 = *((unsigned __int8 *)v35 + v131);
  if (v36 >= 2)
  {
    if (v131 <= 3)
      v37 = v131;
    else
      v37 = 4;
    __asm { BR              X12 }
  }
  v40 = ~(unint64_t)v13;
  v41 = v131 + 1;
  if (v36 == 1)
  {
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v123 + 16))(v34, v35, v124);
    v42 = 1;
  }
  else
  {
    v43 = *v35;
    *v34 = *v35;
    swift_retain(v43);
    v42 = 0;
  }
  *((_BYTE *)v34 + v131) = v42;
  v44 = (char *)v34 + v41;
  v45 = (char *)v35 + v41;
  *v44 = *((_BYTE *)v35 + v41);
  v44[1] = *((_BYTE *)v35 + v41 + 1);
  v44[2] = *((_BYTE *)v35 + v41 + 2);
  v46 = ((unint64_t)v34 + v41 + 10) & 0xFFFFFFFFFFFFFFF8;
  v47 = (unint64_t)(v45 + 10) & 0xFFFFFFFFFFFFFFF8;
  v48 = *(_QWORD *)v47;
  if (*(_QWORD *)v47 < 0xFFFFFFFFuLL)
  {
    v52 = *(__n128 *)v47;
    v53 = *(_OWORD *)(v47 + 16);
    *(_OWORD *)v46 = *(_OWORD *)v47;
    *(_OWORD *)(v46 + 16) = v53;
  }
  else
  {
    *(_QWORD *)v46 = v48;
    v49 = *(_QWORD *)(v47 + 8);
    *(_QWORD *)(v46 + 8) = v49;
    v50 = *(_QWORD *)(v47 + 16);
    *(_QWORD *)(v46 + 16) = v50;
    v51 = *(_QWORD *)(v47 + 24);
    *(_QWORD *)(v46 + 24) = v51;
    swift_retain(v48);
    swift_retain(v49);
    swift_retain(v50);
    v52 = swift_retain(v51);
  }
  v54 = v129;
  v55 = v30 + v46;
  v56 = (_QWORD *)((v30 + v47) & v114);
  v57 = v135;
  if (v135 > 3)
    goto LABEL_43;
  v58 = ((1 << (8 * v135)) | 2u) >> (8 * v135);
  if (v58 > 0xFFF8)
  {
    v59 = *(_DWORD *)((char *)v56 + v135);
  }
  else
  {
    if (v58 <= 0xF8)
    {
LABEL_43:
      v59 = *((unsigned __int8 *)v56 + v135);
      goto LABEL_46;
    }
    v59 = *(unsigned __int16 *)((char *)v56 + v135);
  }
LABEL_46:
  v60 = (_QWORD *)(v55 & v114);
  if (v59 >= 7)
  {
    if (v135 <= 3)
      v61 = v135;
    else
      v61 = 4;
    __asm { BR              X12 }
  }
  v39 = a1;
  v62 = ~v129;
  switch(v59)
  {
    case 0u:
      (*(void (**)(_QWORD *, _QWORD *, uint64_t, __n128))(v134 + 16))(v60, v56, v128, v52);
      v63 = v126;
      v65 = v112;
      v64 = v113;
      if (v135 > 3)
        goto LABEL_55;
      v66 = ((1 << (8 * v135)) | 2u) >> (8 * v135);
      if (v66 > 0xFFF8)
      {
        *(_DWORD *)((char *)v60 + v135) = 0;
      }
      else
      {
        if (v66 <= 0xF8)
        {
LABEL_55:
          *((_BYTE *)v60 + v135) = 0;
          goto LABEL_86;
        }
        *(_WORD *)((char *)v60 + v135) = 0;
      }
      goto LABEL_112;
    case 1u:
      *v60 = *v56;
      v69 = v56[1];
      *(_QWORD *)((char *)&dword_8 + (v55 & v114)) = v69;
      swift_bridgeObjectRetain(v69);
      v63 = v126;
      v65 = v112;
      v64 = v113;
      if (v135 > 3)
        goto LABEL_66;
      v70 = 1;
      v66 = ((1 << (8 * v135)) | 2u) >> (8 * v135);
      if (v66 > 0xFFF8)
        goto LABEL_102;
      if (v66 > 0xF8)
        goto LABEL_111;
LABEL_66:
      v71 = 1;
      goto LABEL_85;
    case 2u:
      *v60 = *v56;
      v72 = v56[1];
      *(_QWORD *)((char *)&dword_8 + (v55 & v114)) = v72;
      v73 = (_QWORD *)(((unint64_t)v60 + 23) & 0xFFFFFFFFFFFFFFF8);
      v74 = (void **)(((unint64_t)v56 + 23) & 0xFFFFFFFFFFFFFFF8);
      v75 = *v74;
      *v73 = *v74;
      v76 = ((unint64_t)v73 + v14 + 8) & v125;
      v77 = ((unint64_t)v74 + v14 + 8) & v125;
      v78 = *(void (**)(uint64_t, uint64_t, uint64_t))(v134 + 16);
      swift_bridgeObjectRetain(v72);
      v79 = v75;
      v78(v76, v77, v128);
      v57 = v135;
      v63 = v126;
      v65 = v112;
      v64 = v113;
      if (v135 > 3)
        goto LABEL_70;
      v66 = ((1 << (8 * v135)) | 2u) >> (8 * v135);
      if (v66 > 0xFFF8)
      {
        *(_DWORD *)((char *)v60 + v135) = 2;
LABEL_106:
        v54 = v129;
        v40 = ~v14;
        v62 = ~v129;
        goto LABEL_113;
      }
      if (v66 > 0xF8)
      {
        *(_WORD *)((char *)v60 + v135) = 2;
        goto LABEL_106;
      }
LABEL_70:
      *((_BYTE *)v60 + v135) = 2;
      v54 = v129;
      v40 = ~v14;
      v62 = ~v129;
      if (v135 <= 3)
        goto LABEL_87;
LABEL_90:
      v87 = 1;
LABEL_115:
      v89 = v87 + v57;
      v90 = (char *)v60 + v89;
      v91 = (char *)v56 + v89;
      *v90 = *v91;
      v92 = (unint64_t)&v90[v54 + 1] & v62;
      v93 = (unint64_t)&v91[v54 + 1] & v62;
      v94 = *(unsigned __int8 *)(v93 + v63);
      if (v94 >= 2)
      {
        if (v63 <= 3)
          v95 = v63;
        else
          v95 = 4;
        __asm { BR              X12 }
      }
      if (v94 == 1)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v65 + 16))(v92, v93, v64);
        v63 = v126;
        v96 = 1;
      }
      else
      {
        v97 = *(_QWORD *)((char *)&dword_18 + ((unint64_t)&v91[v54 + 1] & v62));
        if (v97 < 0xFFFFFFFF)
        {
          v96 = 0;
          v98 = *(_OWORD *)v93;
          v99 = *(_OWORD *)(v93 + 16);
          *(_QWORD *)(v92 + 32) = *(_QWORD *)(v93 + 32);
          *(_OWORD *)v92 = v98;
          *(_OWORD *)(v92 + 16) = v99;
        }
        else
        {
          *(_QWORD *)(v92 + 24) = v97;
          *(_QWORD *)(v92 + 32) = *(_QWORD *)((char *)&stru_20.cmd + ((unint64_t)&v91[v54 + 1] & v62));
          (**(void (***)(uint64_t, uint64_t))(v97 - 8))(v92, v93);
          v63 = v126;
          v96 = 0;
        }
      }
      *(_BYTE *)(v92 + v63) = v96;
      v100 = (void *)((v115 + v92) & v40);
      v101 = (const void *)((v115 + v93) & v40);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v134 + 48))(v101, 1, v128))
      {
        v102 = __n;
        memcpy(v100, v101, __n);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v134 + 16))(v100, v101, v128);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v134 + 56))(v100, 0, 1, v128);
        v102 = __n;
      }
      if (v57 > 3)
        goto LABEL_132;
      v103 = ((1 << (8 * v57)) | 2u) >> (8 * v57);
      v104 = 2;
      if (v103 > 0xFFF8)
        v104 = 4;
      if (v103 <= 0xF8)
LABEL_132:
        v104 = 1;
      v105 = ((v115 + ((v116 + v129 + v104) & v62)) & v40) + v102;
      v106 = (char *)a1 + v105;
      v107 = (char *)a2 + v105;
      *(_WORD *)v106 = *(_WORD *)v107;
      v106[2] = v107[2];
      v108 = (unint64_t)(v106 + 10) & 0xFFFFFFFFFFFFFFF8;
      v109 = (unint64_t)(v107 + 10) & 0xFFFFFFFFFFFFFFF8;
      v110 = *(_QWORD *)(v109 + 24);
      *(_QWORD *)(v108 + 24) = v110;
      *(_QWORD *)(v108 + 32) = *(_QWORD *)(v109 + 32);
      (**(void (***)(unint64_t, unint64_t))(v110 - 8))(v108, v109);
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v120 + 16))((v118 + v108) & ~v117, (v118 + v109) & ~v117, v121);
      return v39;
    case 3u:
      *v60 = *v56;
      v80 = v56[1];
      *(_QWORD *)((char *)&dword_8 + (v55 & v114)) = v80;
      v81 = *(void (**)(unint64_t, unint64_t, uint64_t))(v134 + 16);
      swift_bridgeObjectRetain(v80);
      v81(((unint64_t)v60 + v14 + 16) & v125, ((unint64_t)v56 + v14 + 16) & v125, v128);
      v63 = v126;
      v65 = v112;
      v64 = v113;
      if (v135 > 3)
        goto LABEL_75;
      v66 = ((1 << (8 * v135)) | 2u) >> (8 * v135);
      if (v66 > 0xFFF8)
      {
        *(_DWORD *)((char *)v60 + v135) = 3;
      }
      else
      {
        if (v66 <= 0xF8)
        {
LABEL_75:
          *((_BYTE *)v60 + v135) = 3;
          v54 = v129;
          v40 = ~v14;
          v62 = ~v129;
          if (v135 <= 3)
            goto LABEL_87;
          goto LABEL_90;
        }
        *(_WORD *)((char *)v60 + v135) = 3;
      }
      v54 = v129;
      v40 = ~v14;
      v62 = ~v129;
      goto LABEL_113;
    case 4u:
      (*(void (**)(_QWORD *, _QWORD *, uint64_t, __n128))(v134 + 16))(v60, v56, v128, v52);
      v82 = (_QWORD *)(((unint64_t)v60 + v122) & 0xFFFFFFFFFFFFFFF8);
      v83 = (_QWORD *)(((unint64_t)v56 + v122) & 0xFFFFFFFFFFFFFFF8);
      *v82 = *v83;
      v84 = v83[1];
      v82[1] = v84;
      swift_bridgeObjectRetain(v84);
      v63 = v126;
      v65 = v112;
      v64 = v113;
      if (v135 > 3)
        goto LABEL_80;
      v66 = ((1 << (8 * v135)) | 2u) >> (8 * v135);
      if (v66 > 0xFFF8)
      {
        *(_DWORD *)((char *)v60 + v135) = 4;
        goto LABEL_112;
      }
      if (v66 <= 0xF8)
      {
LABEL_80:
        v71 = 4;
        goto LABEL_85;
      }
      LOWORD(v70) = 4;
      goto LABEL_111;
    case 5u:
      v85 = *(void (**)(unint64_t, unint64_t, uint64_t))(v134 + 16);
      ((void (*)(_QWORD *, _QWORD *, uint64_t, __n128))v85)(v60, v56, v128, v52);
      v85(((unint64_t)v60 + v15 + v14) & v125, ((unint64_t)v56 + v15 + v14) & v125, v128);
      v63 = v126;
      v65 = v112;
      v64 = v113;
      if (v135 > 3)
        goto LABEL_84;
      v66 = ((1 << (8 * v135)) | 2u) >> (8 * v135);
      if (v66 > 0xFFF8)
      {
        v70 = 5;
LABEL_102:
        *(_DWORD *)((char *)v60 + v135) = v70;
      }
      else
      {
        if (v66 <= 0xF8)
        {
LABEL_84:
          v71 = 5;
LABEL_85:
          *((_BYTE *)v60 + v135) = v71;
LABEL_86:
          v54 = v129;
          if (v135 > 3)
            goto LABEL_90;
LABEL_87:
          v86 = ((1 << (8 * v57)) | 2u) >> (8 * v57);
          v87 = 2;
          if (v86 > 0xFFF8)
            v87 = 4;
          if (v86 > 0xF8)
            goto LABEL_115;
          goto LABEL_90;
        }
        LOWORD(v70) = 5;
LABEL_111:
        *(_WORD *)((char *)v60 + v135) = v70;
      }
LABEL_112:
      v54 = v129;
      goto LABEL_113;
    case 6u:
      *v60 = *v56;
      v63 = v126;
      v65 = v112;
      v64 = v113;
      if (v135 > 3)
        goto LABEL_92;
      v66 = ((1 << (8 * v135)) | 2u) >> (8 * v135);
      if (v66 > 0xFFF8)
      {
        *(_DWORD *)((char *)v60 + v135) = 6;
      }
      else
      {
        if (v66 <= 0xF8)
        {
LABEL_92:
          *((_BYTE *)v60 + v135) = 6;
          if (v135 > 3)
            goto LABEL_90;
          goto LABEL_87;
        }
        *(_WORD *)((char *)v60 + v135) = 6;
      }
LABEL_113:
      v88 = v66 > 0xFFF8;
      v87 = 2;
      if (v88)
        v87 = 4;
      goto LABEL_115;
    default:
      if (v135 > 3)
        goto LABEL_60;
      v67 = ((1 << (8 * v135)) | 2u) >> (8 * v135);
      v68 = 2;
      if (v67 > 0xFFF8)
        v68 = 4;
      if (v67 <= 0xF8)
LABEL_60:
        v68 = 1;
      memcpy(v60, v56, v68 + v135);
      v54 = v129;
      v63 = v126;
      v65 = v112;
      v64 = v113;
      if (v135 > 3)
        goto LABEL_90;
      goto LABEL_87;
  }
}

uint64_t sub_18BBE8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  id *v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  void (*v39)(uint64_t, uint64_t);
  uint64_t v40;
  unint64_t v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v55;
  uint64_t v56;

  v3 = sub_5440(&qword_25FC38);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v5(a1, v3);
  v6 = *(_QWORD *)(v4 + 64);
  v7 = *(unsigned __int8 *)(v4 + 80);
  v53 = a1;
  v51 = v6 + v7;
  v49 = v7;
  v8 = (v6 + v7 + a1) & ~v7;
  v5(v8, v3);
  v9 = type metadata accessor for ColorScheme(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_DWORD *)(v10 + 80) & 0xF8 | 7;
  v52 = v6;
  v12 = (_QWORD *)((v6 + v11 + v8) & ~v11);
  if (*(_QWORD *)(v10 + 64) <= 8uLL)
    v13 = 8;
  else
    v13 = *(_QWORD *)(v10 + 64);
  v14 = *((unsigned __int8 *)v12 + v13);
  if (v14 >= 2)
  {
    if (v13 <= 3)
      v15 = v13;
    else
      v15 = 4;
    __asm { BR              X13 }
  }
  v50 = *(_DWORD *)(v10 + 80) & 0xF8 | 7;
  if (v14 == 1)
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))((v6 + v11 + v8) & ~v11, v9);
  else
    swift_release(*v12);
  v48 = v13 + 11;
  v16 = (_QWORD *)(((unint64_t)v12 + v13 + 11) & 0xFFFFFFFFFFFFFFF8);
  if (*v16 >= 0xFFFFFFFFuLL)
  {
    swift_release(*v16);
    swift_release(v16[1]);
    swift_release(v16[2]);
    swift_release(v16[3]);
  }
  v56 = type metadata accessor for LocalizerRequest(0);
  v17 = *(_QWORD *)(v56 - 8);
  v18 = *(unsigned __int8 *)(v17 + 80);
  v19 = v18 | 7;
  v20 = ((unint64_t)v16 + (v18 | 7) + 32) & ~(v18 | 7);
  v21 = *(_QWORD *)(v17 + 64);
  v22 = ((v18 + 24) & ~v18) + v21;
  if (v21 > v22)
    v22 = *(_QWORD *)(v17 + 64);
  if (v22 <= ((v18 + 16) & ~v18) + v21)
    v22 = ((v18 + 16) & ~v18) + v21;
  if (v22 <= ((v21 + 7) & 0xFFFFFFFFFFFFFFF8) + 16)
    v22 = ((v21 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (v22 <= ((v21 + v18) & ~v18) + v21)
    v22 = ((v21 + v18) & ~v18) + v21;
  if (v22 <= 0x10)
    v23 = 16;
  else
    v23 = v22;
  v24 = 8 * v23;
  if (v23 > 3)
    goto LABEL_26;
  v26 = ((1 << v24) | 2u) >> v24;
  if (v26 > 0xFFF8)
  {
    v25 = *(_DWORD *)(v20 + v23);
  }
  else
  {
    if (v26 <= 0xF8)
    {
LABEL_26:
      v25 = *(unsigned __int8 *)(v20 + v23);
      goto LABEL_31;
    }
    v25 = *(unsigned __int16 *)(v20 + v23);
  }
LABEL_31:
  if (v25 >= 7)
  {
    if (v23 <= 3)
      v27 = v23;
    else
      v27 = 4;
    __asm { BR              X12 }
  }
  v55 = ~v18;
  switch(v25)
  {
    case 0u:
      (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v20, v56);
      goto LABEL_43;
    case 1u:
      swift_bridgeObjectRelease(*(_QWORD *)((char *)&dword_8 + (((unint64_t)v16 + (v18 | 7) + 32) & ~(v18 | 7))));
      if (v23 > 3)
        goto LABEL_51;
      goto LABEL_47;
    case 2u:
      swift_bridgeObjectRelease(*(_QWORD *)((char *)&dword_8 + (((unint64_t)v16 + (v18 | 7) + 32) & ~(v18 | 7))));
      v28 = (id *)((v20 + 23) & 0xFFFFFFFFFFFFFFF8);

      v29 = (uint64_t)v28 + v18 + 8;
      goto LABEL_42;
    case 3u:
      swift_bridgeObjectRelease(*(_QWORD *)((char *)&dword_8 + (((unint64_t)v16 + (v18 | 7) + 32) & ~(v18 | 7))));
      v29 = v18 + 16 + v20;
LABEL_42:
      (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v29 & v55, v56);
LABEL_43:
      if (v23 > 3)
        goto LABEL_51;
      goto LABEL_47;
    case 4u:
      (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v20, v56);
      swift_bridgeObjectRelease(*(_QWORD *)((char *)&dword_8 + ((v21 + 7 + v20) & 0xFFFFFFFFFFFFF8)));
      goto LABEL_46;
    case 5u:
      v39 = *(void (**)(uint64_t, uint64_t))(v17 + 8);
      v39(v20, v56);
      v39((v21 + v18 + v20) & v55, v56);
      if (v23 > 3)
        goto LABEL_51;
      goto LABEL_47;
    default:
LABEL_46:
      if (v23 > 3)
        goto LABEL_51;
LABEL_47:
      v30 = ((1 << v24) | 2u) >> v24;
      if (v30 <= 0xFFF8)
        v31 = 2;
      else
        v31 = 4;
      if (v30 <= 0xF8)
LABEL_51:
        v31 = 1;
      v32 = type metadata accessor for URL(0);
      v33 = *(_QWORD *)(v32 - 8);
      v34 = *(_DWORD *)(v33 + 80) & 0xF8 | 7;
      v35 = (_QWORD *)((v23 + v20 + v31 + v34 + 1) & ~v34);
      if (*(_QWORD *)(v33 + 64) <= 0x28uLL)
        v36 = 40;
      else
        v36 = *(_QWORD *)(v33 + 64);
      v37 = *((unsigned __int8 *)v35 + v36);
      if (v37 >= 2)
      {
        if (v36 <= 3)
          v38 = v36;
        else
          v38 = 4;
        __asm { BR              X13 }
      }
      if (v37 == 1)
      {
        (*(void (**)(_QWORD *, uint64_t))(v33 + 8))(v35, v32);
      }
      else if (v35[3] >= 0xFFFFFFFFuLL)
      {
        _s7BooksUI13AnyPagedFrameVwxx_0(v35);
      }
      v40 = v36 + v18 + 1;
      v41 = ((unint64_t)v35 + v40) & v55;
      if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v17 + 48))(v41, 1, v56))
        (*(void (**)(unint64_t, uint64_t))(v17 + 8))(v41, v56);
      if (v23 <= 3)
        v42 = (((1 << v24) | 2u) >> v24) + 7;
      else
        v42 = 8;
      v43 = 4;
      if (v42 < 0x10000)
        v43 = 2;
      if (v42 < 0x100)
        v44 = 1;
      else
        v44 = v43;
      v45 = v53 + v21;
      if (!*(_DWORD *)(v17 + 84))
        ++v45;
      v46 = (_QWORD *)((v45
                      + ((v40
                        + ((((((v48 + (((v51 & ~v49) + v52 + v50) & ~v50)) & 0xFFFFFFFFFFFFFFF8) + v19 + 32) & ~v19 | 1)
                          + v34
                          + v23
                          + v44) & ~v34)) & v55)
                      + 10) & 0xFFFFFFFFFFFFFFF8);
      _s7BooksUI13AnyPagedFrameVwxx_0(v46);
      return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))(((unint64_t)v46 + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
  }
}

uint64_t sub_18C220(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  _BYTE *v22;
  _BYTE *v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  size_t v36;
  unint64_t v37;
  uint64_t v38;
  size_t v39;
  uint64_t v40;
  char v41;
  unsigned int v42;
  unsigned int v43;
  _QWORD *v44;
  uint64_t v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  __int16 v50;
  char v51;
  uint64_t v52;
  _QWORD *v53;
  void **v54;
  void *v55;
  uint64_t v56;
  id v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  void (*v61)(unint64_t, unint64_t, uint64_t);
  _QWORD *v62;
  _QWORD *v63;
  uint64_t v64;
  void (*v65)(_QWORD *, _QWORD *, uint64_t);
  unsigned int v66;
  uint64_t v67;
  BOOL v68;
  uint64_t v69;
  _BYTE *v70;
  _BYTE *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unsigned int v79;
  uint64_t v80;
  char v81;
  unint64_t v82;
  __int128 v83;
  __int128 v84;
  uint64_t v85;
  void *v86;
  const void *v87;
  size_t v88;
  unsigned int v89;
  size_t v90;
  uint64_t v91;
  uint64_t v92;
  size_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  void (*v101)(uint64_t, uint64_t, uint64_t);
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;

  v5 = sub_5440(&qword_25FC38);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  v7(a1, a2, v5);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = *(unsigned __int8 *)(v6 + 80);
  v110 = a1;
  v10 = (v8 + v9 + a1) & ~v9;
  v108 = a2;
  v106 = v8 + v9;
  v104 = v9;
  v11 = (v8 + v9 + a2) & ~v9;
  v7(v10, v11, v5);
  v12 = type metadata accessor for ColorScheme(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(_DWORD *)(v13 + 80) & 0xF8 | 7;
  v107 = v8;
  v15 = (_QWORD *)((v8 + v14 + v10) & ~v14);
  v16 = (uint64_t *)((v8 + v14 + v11) & ~v14);
  if (*(_QWORD *)(v13 + 64) <= 8uLL)
    v17 = 8;
  else
    v17 = *(_QWORD *)(v13 + 64);
  v18 = *((unsigned __int8 *)v16 + v17);
  if (v18 >= 2)
  {
    if (v17 <= 3)
      v19 = v17;
    else
      v19 = 4;
    __asm { BR              X13 }
  }
  v105 = *(_DWORD *)(v13 + 80) & 0xF8 | 7;
  if (v18 == 1)
  {
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(v13 + 16))(v15, (v8 + v14 + v11) & ~v14, v12);
    v20 = 1;
  }
  else
  {
    v21 = *v16;
    *v15 = *v16;
    swift_retain(v21);
    v20 = 0;
  }
  *((_BYTE *)v15 + v17) = v20;
  v22 = (char *)v15 + v17 + 1;
  v23 = (char *)v16 + v17 + 1;
  *v22 = *v23;
  v22[1] = v23[1];
  v22[2] = v23[2];
  v24 = (_QWORD *)((unint64_t)(v22 + 10) & 0xFFFFFFFFFFFFFFF8);
  v25 = (_QWORD *)((unint64_t)(v23 + 10) & 0xFFFFFFFFFFFFFFF8);
  v26 = *v25;
  v103 = v17;
  if (*v25 >= 0xFFFFFFFFuLL)
  {
    *v24 = v26;
    v27 = v25[1];
    v24[1] = v27;
    v28 = v25[2];
    v24[2] = v28;
    v29 = v25[3];
    v24[3] = v29;
    swift_retain(v26);
    swift_retain(v27);
    swift_retain(v28);
    swift_retain(v29);
  }
  else
  {
    v30 = *((_OWORD *)v25 + 1);
    *(_OWORD *)v24 = *(_OWORD *)v25;
    *((_OWORD *)v24 + 1) = v30;
  }
  v111 = type metadata accessor for LocalizerRequest(0);
  v31 = *(_QWORD *)(v111 - 8);
  v32 = *(unsigned __int8 *)(v31 + 80);
  v33 = v32 | 7;
  v34 = (uint64_t)v24 + (v32 | 7) + 32;
  v35 = (_QWORD *)(((unint64_t)v25 + (v32 | 7) + 32) & ~(v32 | 7));
  v36 = *(_QWORD *)(v31 + 64);
  if (v36 <= ((v32 + 24) & ~v32) + v36)
    v37 = ((v32 + 24) & ~v32) + v36;
  else
    v37 = *(_QWORD *)(v31 + 64);
  v38 = v32 + 16;
  if (v37 <= ((v32 + 16) & ~v32) + v36)
    v37 = ((v32 + 16) & ~v32) + v36;
  v39 = v36 + 7;
  if (v37 <= ((v36 + 7) & 0xFFFFFFFFFFFFFFF8) + 16)
    v37 = ((v36 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (v37 <= ((v36 + v32) & ~v32) + v36)
    v37 = ((v36 + v32) & ~v32) + v36;
  if (v37 <= 0x10)
    v40 = 16;
  else
    v40 = v37;
  v41 = 8 * v40;
  if (v40 > 3)
    goto LABEL_30;
  v42 = ((1 << v41) | 2u) >> v41;
  if (v42 > 0xFFF8)
  {
    v43 = *(_DWORD *)((char *)v35 + v40);
  }
  else
  {
    if (v42 <= 0xF8)
    {
LABEL_30:
      v43 = *((unsigned __int8 *)v35 + v40);
      goto LABEL_33;
    }
    v43 = *(unsigned __int16 *)((char *)v35 + v40);
  }
LABEL_33:
  v44 = (_QWORD *)(v34 & ~v33);
  if (v43 >= 7)
  {
    if (v40 <= 3)
      v45 = v40;
    else
      v45 = 4;
    __asm { BR              X13 }
  }
  v112 = ~v32;
  switch(v43)
  {
    case 0u:
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v31 + 16))(v44, v35, v111);
      if (v40 <= 3)
      {
        v46 = ((1 << v41) | 2u) >> v41;
        if (v46 > 0xFFF8)
        {
          *(_DWORD *)((char *)v44 + v40) = 0;
          goto LABEL_94;
        }
        if (v46 > 0xF8)
        {
          *(_WORD *)((char *)v44 + v40) = 0;
          goto LABEL_94;
        }
      }
      *((_BYTE *)v44 + v40) = 0;
      if (v40 <= 3)
        goto LABEL_74;
      goto LABEL_77;
    case 1u:
      *v44 = *v35;
      v49 = v35[1];
      *(_QWORD *)((char *)&dword_8 + (v34 & ~v33)) = v49;
      swift_bridgeObjectRetain(v49);
      if (v40 > 3)
        goto LABEL_54;
      v50 = 1;
      v46 = ((1 << v41) | 2u) >> v41;
      if (v46 > 0xFFF8)
      {
        *(_DWORD *)((char *)v44 + v40) = 1;
        goto LABEL_94;
      }
      if (v46 > 0xF8)
        goto LABEL_93;
LABEL_54:
      v51 = 1;
      goto LABEL_73;
    case 2u:
      *v44 = *v35;
      v52 = v35[1];
      *(_QWORD *)((char *)&dword_8 + (v34 & ~v33)) = v52;
      v53 = (_QWORD *)(((unint64_t)v44 + 23) & 0xFFFFFFFFFFFFFFF8);
      v54 = (void **)(((unint64_t)v35 + 23) & 0xFFFFFFFFFFFFFFF8);
      v55 = *v54;
      *v53 = *v54;
      v102 = ((unint64_t)v53 + v32 + 8) & v112;
      v56 = ((unint64_t)v54 + v32 + 8) & v112;
      v101 = *(void (**)(uint64_t, uint64_t, uint64_t))(v31 + 16);
      swift_bridgeObjectRetain(v52);
      v57 = v55;
      v101(v102, v56, v111);
      if (v40 > 3)
        goto LABEL_58;
      v46 = ((1 << v41) | 2u) >> v41;
      if (v46 > 0xFFF8)
      {
        *(_DWORD *)((char *)v44 + v40) = 2;
        goto LABEL_94;
      }
      if (v46 <= 0xF8)
      {
LABEL_58:
        v51 = 2;
        goto LABEL_73;
      }
      v50 = 2;
      goto LABEL_93;
    case 3u:
      *v44 = *v35;
      v58 = v35[1];
      *(_QWORD *)((char *)&dword_8 + (v34 & ~v33)) = v58;
      v59 = ((unint64_t)v44 + v38) & v112;
      v60 = ((unint64_t)v35 + v38) & v112;
      v61 = *(void (**)(unint64_t, unint64_t, uint64_t))(v31 + 16);
      swift_bridgeObjectRetain(v58);
      v61(v59, v60, v111);
      v41 = 8 * v40;
      if (v40 > 3)
        goto LABEL_62;
      v46 = ((1 << (8 * v40)) | 2u) >> (8 * v40);
      if (v46 > 0xFFF8)
      {
        *(_DWORD *)((char *)v44 + v40) = 3;
        goto LABEL_94;
      }
      if (v46 <= 0xF8)
      {
LABEL_62:
        v51 = 3;
        goto LABEL_73;
      }
      v50 = 3;
      goto LABEL_93;
    case 4u:
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v31 + 16))(v44, v35, v111);
      v62 = (_QWORD *)(((unint64_t)v44 + v39) & 0xFFFFFFFFFFFFFFF8);
      v63 = (_QWORD *)(((unint64_t)v35 + v39) & 0xFFFFFFFFFFFFFFF8);
      *v62 = *v63;
      v64 = v63[1];
      v62[1] = v64;
      swift_bridgeObjectRetain(v64);
      if (v40 > 3)
        goto LABEL_66;
      v46 = ((1 << v41) | 2u) >> v41;
      if (v46 > 0xFFF8)
      {
        *(_DWORD *)((char *)v44 + v40) = 4;
        goto LABEL_94;
      }
      if (v46 <= 0xF8)
      {
LABEL_66:
        v51 = 4;
        goto LABEL_73;
      }
      v50 = 4;
      goto LABEL_93;
    case 5u:
      v65 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v31 + 16);
      v65(v44, v35, v111);
      v65((_QWORD *)(((unint64_t)v44 + v36 + v32) & v112), (_QWORD *)(((unint64_t)v35 + v36 + v32) & v112), v111);
      if (v40 > 3)
        goto LABEL_70;
      v46 = ((1 << v41) | 2u) >> v41;
      if (v46 > 0xFFF8)
      {
        *(_DWORD *)((char *)v44 + v40) = 5;
        goto LABEL_94;
      }
      if (v46 <= 0xF8)
      {
LABEL_70:
        v51 = 5;
        goto LABEL_73;
      }
      v50 = 5;
      goto LABEL_93;
    case 6u:
      *v44 = *v35;
      if (v40 > 3)
        goto LABEL_72;
      v46 = ((1 << v41) | 2u) >> v41;
      if (v46 > 0xFFF8)
      {
        *(_DWORD *)((char *)v44 + v40) = 6;
      }
      else
      {
        if (v46 <= 0xF8)
        {
LABEL_72:
          v51 = 6;
LABEL_73:
          *((_BYTE *)v44 + v40) = v51;
          if (v40 <= 3)
          {
LABEL_74:
            v66 = ((1 << v41) | 2u) >> v41;
            v67 = 2;
            if (v66 > 0xFFF8)
              v67 = 4;
            if (v66 > 0xF8)
              goto LABEL_96;
          }
LABEL_77:
          v67 = 1;
          goto LABEL_96;
        }
        v50 = 6;
LABEL_93:
        *(_WORD *)((char *)v44 + v40) = v50;
      }
LABEL_94:
      v68 = v46 > 0xFFF8;
      v67 = 2;
      if (v68)
        v67 = 4;
LABEL_96:
      v69 = v67 + v40;
      v70 = (char *)v44 + v69;
      v71 = (char *)v35 + v69;
      *v70 = *v71;
      v72 = type metadata accessor for URL(0);
      v73 = *(_QWORD *)(v72 - 8);
      v74 = *(_DWORD *)(v73 + 80) & 0xF8;
      v75 = v74 | 7;
      v74 += 8;
      v76 = (unint64_t)&v70[v74] & ~v75;
      v77 = (unint64_t)&v71[v74] & ~v75;
      if (*(_QWORD *)(v73 + 64) <= 0x28uLL)
        v78 = 40;
      else
        v78 = *(_QWORD *)(v73 + 64);
      v79 = *(unsigned __int8 *)(v77 + v78);
      if (v79 >= 2)
      {
        if (v78 <= 3)
          v80 = v78;
        else
          v80 = 4;
        __asm { BR              X13 }
      }
      if (v79 == 1)
      {
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v73 + 16))(v76, v77, v72);
        v81 = 1;
      }
      else
      {
        v82 = *(_QWORD *)(v77 + 24);
        if (v82 < 0xFFFFFFFF)
        {
          v81 = 0;
          v83 = *(_OWORD *)v77;
          v84 = *(_OWORD *)(v77 + 16);
          *(_QWORD *)(v76 + 32) = *(_QWORD *)(v77 + 32);
          *(_OWORD *)v76 = v83;
          *(_OWORD *)(v76 + 16) = v84;
        }
        else
        {
          *(_QWORD *)(v76 + 24) = v82;
          *(_QWORD *)(v76 + 32) = *(_QWORD *)(v77 + 32);
          (**(void (***)(unint64_t, unint64_t))(v82 - 8))(v76, v77);
          v81 = 0;
        }
      }
      *(_BYTE *)(v76 + v78) = v81;
      v85 = v78 + v32 + 1;
      v86 = (void *)((v85 + v76) & v112);
      v87 = (const void *)((v85 + v77) & v112);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v31 + 48))(v87, 1, v111))
      {
        if (*(_DWORD *)(v31 + 84))
          v88 = v36;
        else
          v88 = v36 + 1;
        memcpy(v86, v87, v88);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v31 + 16))(v86, v87, v111);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v86, 0, 1, v111);
      }
      if (v40 <= 3)
        v89 = (((1 << v41) | 2u) >> v41) + 7;
      else
        v89 = 8;
      if (*(_DWORD *)(v31 + 84))
        v90 = v36;
      else
        v90 = v36 + 1;
      v91 = 4;
      if (v89 < 0x10000)
        v91 = 2;
      if (v89 < 0x100)
        v92 = 1;
      else
        v92 = v91;
      v93 = v90
          + ((v85
            + ((((((v103 + (((v106 & ~v104) + v107 + v105) & ~v105) + 11) & 0xFFFFFFFFFFFFFFF8) + v33 + 32) & ~v33 | 1)
              + v40
              + v75
              + v92) & ~v75)) & v112);
      v94 = v93 + v110;
      v95 = v93 + v108;
      *(_WORD *)v94 = *(_WORD *)v95;
      *(_BYTE *)(v94 + 2) = *(_BYTE *)(v95 + 2);
      v96 = (v94 + 10) & 0xFFFFFFFFFFFFFFF8;
      v97 = (v95 + 10) & 0xFFFFFFFFFFFFFFF8;
      v98 = *(_QWORD *)(v97 + 24);
      *(_QWORD *)(v96 + 24) = v98;
      *(_QWORD *)(v96 + 32) = *(_QWORD *)(v97 + 32);
      (**(void (***)(unint64_t, unint64_t))(v98 - 8))(v96, v97);
      v99 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
      (*(void (**)(unint64_t, unint64_t))(v99 + 16))((*(unsigned __int8 *)(v99 + 80) + 40 + v96) & ~(unint64_t)*(unsigned __int8 *)(v99 + 80), (*(unsigned __int8 *)(v99 + 80) + 40 + v97) & ~(unint64_t)*(unsigned __int8 *)(v99 + 80));
      return v110;
    default:
      if (v40 > 3)
        goto LABEL_48;
      v47 = ((1 << v41) | 2u) >> v41;
      v48 = 2;
      if (v47 > 0xFFF8)
        v48 = 4;
      if (v47 <= 0xF8)
LABEL_48:
        v48 = 1;
      memcpy(v44, v35, v48 + v40);
      if (v40 > 3)
        goto LABEL_77;
      goto LABEL_74;
  }
}

uint64_t sub_18CCC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  __n128 v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  _BYTE *v28;
  _QWORD *v29;
  unint64_t *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  size_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  unsigned int v52;
  unsigned int v53;
  uint64_t v54;
  id *v55;
  uint64_t v56;
  unsigned int v57;
  unsigned int v58;
  void (*v59)(uint64_t, uint64_t);
  uint64_t v60;
  unsigned int v61;
  uint64_t v62;
  __int16 v63;
  unsigned int v64;
  char v65;
  uint64_t v66;
  _QWORD *v67;
  void **v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  void (*v72)(uint64_t, uint64_t, uint64_t);
  id v73;
  unsigned int v74;
  uint64_t v75;
  void (*v76)(uint64_t, uint64_t, uint64_t);
  unsigned int v77;
  _QWORD *v78;
  _QWORD *v79;
  uint64_t v80;
  unsigned int v81;
  void (*v82)(uint64_t, uint64_t, uint64_t);
  unsigned int v83;
  unsigned int v84;
  uint64_t v85;
  unsigned int v86;
  unsigned int v87;
  uint64_t v88;
  uint64_t v89;
  _BYTE *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unsigned int v100;
  uint64_t v101;
  unsigned int v102;
  uint64_t v103;
  char v104;
  unint64_t v105;
  __int128 v106;
  __int128 v107;
  uint64_t v108;
  void *v109;
  void *v110;
  uint64_t (*v111)(void *, uint64_t, uint64_t);
  int v112;
  int v113;
  uint64_t v114;
  size_t v115;
  unsigned int v116;
  size_t v117;
  uint64_t v118;
  uint64_t v119;
  size_t v120;
  uint64_t v121;
  uint64_t v122;
  _QWORD *v123;
  _QWORD *v124;
  uint64_t v125;
  uint64_t result;
  char v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;

  v6 = sub_5440(&qword_25FC38);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24);
  v8(a1, a2, v6);
  v9 = *(_QWORD *)(v7 + 64);
  v10 = *(unsigned __int8 *)(v7 + 80);
  v11 = (v9 + v10 + a1) & ~v10;
  v133 = v9 + v10;
  v131 = v10;
  v12 = (v9 + v10 + a2) & ~v10;
  v8(v11, v12, v6);
  v13 = type metadata accessor for ColorScheme(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(_DWORD *)(v14 + 80) & 0xF8 | 7;
  v16 = (uint64_t *)((v9 + v15 + v11) & ~v15);
  v132 = v15;
  v17 = (uint64_t *)((v9 + v15 + v12) & ~v15);
  if (*(_QWORD *)(v14 + 64) <= 8uLL)
    v18 = 8;
  else
    v18 = *(_QWORD *)(v14 + 64);
  if (v16 != v17)
  {
    v19 = v13;
    v20 = *((unsigned __int8 *)v16 + v18);
    if (v20 >= 2)
    {
      if (v18 <= 3)
        v21 = v18;
      else
        v21 = 4;
      __asm { BR              X12 }
    }
    if (v20 == 1)
      (*(void (**)(uint64_t *, uint64_t))(v14 + 8))(v16, v13);
    else
      v22 = swift_release(*v16);
    v23 = *((unsigned __int8 *)v17 + v18);
    if (v23 >= 2)
    {
      if (v18 <= 3)
        v24 = v18;
      else
        v24 = 4;
      __asm { BR              X12 }
    }
    if (v23 == 1)
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t, __n128))(v14 + 16))(v16, v17, v19, v22);
      *((_BYTE *)v16 + v18) = 1;
    }
    else
    {
      v25 = *v17;
      *v16 = *v17;
      *((_BYTE *)v16 + v18) = 0;
      swift_retain(v25);
    }
  }
  v26 = v18 + 1;
  v27 = (char *)v16 + v18 + 1;
  v28 = (char *)v17 + v18 + 1;
  *v27 = *v28;
  v27[1] = v28[1];
  v27[2] = v28[2];
  v29 = (_QWORD *)((unint64_t)(v27 + 10) & 0xFFFFFFFFFFFFFFF8);
  v30 = (unint64_t *)((unint64_t)(v28 + 10) & 0xFFFFFFFFFFFFFFF8);
  v31 = *v29;
  v32 = *v30;
  v136 = a3;
  v137 = a1;
  v134 = v9;
  v135 = a2;
  v130 = v26;
  if (*v29 < 0xFFFFFFFFuLL)
  {
    if (v32 >= 0xFFFFFFFF)
    {
      *v29 = v32;
      v39 = v30[1];
      v29[1] = v39;
      v40 = v30[2];
      v29[2] = v40;
      v41 = v30[3];
      v29[3] = v41;
      swift_retain(v32);
      swift_retain(v39);
      swift_retain(v40);
      swift_retain(v41);
      goto LABEL_28;
    }
  }
  else
  {
    if (v32 >= 0xFFFFFFFF)
    {
      *v29 = v32;
      swift_retain(v32);
      swift_release(v31);
      v33 = v30[1];
      v34 = v29[1];
      v29[1] = v33;
      swift_retain(v33);
      swift_release(v34);
      v35 = v30[2];
      v36 = v29[2];
      v29[2] = v35;
      swift_retain(v35);
      swift_release(v36);
      v37 = v30[3];
      v38 = v29[3];
      v29[3] = v37;
      swift_retain(v37);
      swift_release(v38);
      goto LABEL_28;
    }
    swift_release(v31);
    swift_release(v29[1]);
    swift_release(v29[2]);
    swift_release(v29[3]);
  }
  v42 = *((_OWORD *)v30 + 1);
  *(_OWORD *)v29 = *(_OWORD *)v30;
  *((_OWORD *)v29 + 1) = v42;
LABEL_28:
  v138 = type metadata accessor for LocalizerRequest(0);
  v43 = *(_QWORD *)(v138 - 8);
  v44 = *(unsigned __int8 *)(v43 + 80);
  v45 = ((unint64_t)v29 + (v44 | 7) + 32) & ~(v44 | 7);
  v46 = ((unint64_t)v30 + (v44 | 7) + 32) & ~(v44 | 7);
  v47 = *(_QWORD *)(v43 + 64);
  v139 = ~v44;
  v48 = v47 + ((v44 + 24) & ~v44);
  if (v47 > v48)
    v48 = *(_QWORD *)(v43 + 64);
  v49 = v44 + 16;
  if (v48 <= v47 + ((v44 + 16) & ~v44))
    v48 = v47 + ((v44 + 16) & ~v44);
  if (v48 <= ((v47 + 7) & 0xFFFFFFFFFFFFFFF8) + 16)
    v48 = ((v47 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (v48 <= ((v47 + v44) & ~v44) + v47)
    v48 = ((v47 + v44) & ~v44) + v47;
  if (v48 <= 0x10)
    v50 = 16;
  else
    v50 = v48;
  if (v45 != v46)
  {
    v51 = 8 * v50;
    if (v50 > 3)
      goto LABEL_43;
    v52 = ((1 << v51) | 2u) >> v51;
    if (v52 > 0xFFF8)
    {
      v53 = *(_DWORD *)(v45 + v50);
      if (v53 < 7)
        goto LABEL_52;
      goto LABEL_48;
    }
    if (v52 > 0xF8)
    {
      v53 = *(unsigned __int16 *)(v45 + v50);
      if (v53 < 7)
      {
LABEL_52:
        switch(v53)
        {
          case 0u:
            (*(void (**)(unint64_t, uint64_t))(v43 + 8))(((unint64_t)v29 + (v44 | 7) + 32) & ~(v44 | 7), v138);
            goto LABEL_59;
          case 1u:
            swift_bridgeObjectRelease(*(_QWORD *)((char *)&dword_8
                                                + (((unint64_t)v29 + (v44 | 7) + 32) & ~(v44 | 7))));
            if (v50 > 3)
              goto LABEL_70;
            goto LABEL_63;
          case 2u:
            swift_bridgeObjectRelease(*(_QWORD *)((char *)&dword_8
                                                + (((unint64_t)v29 + (v44 | 7) + 32) & ~(v44 | 7))));
            v55 = (id *)((v45 + 23) & 0xFFFFFFFFFFFFFFF8);

            v56 = (uint64_t)v55 + v44 + 8;
            goto LABEL_58;
          case 3u:
            swift_bridgeObjectRelease(*(_QWORD *)((char *)&dword_8
                                                + (((unint64_t)v29 + (v44 | 7) + 32) & ~(v44 | 7))));
            v56 = v49 + v45;
LABEL_58:
            (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v56 & v139, v138);
LABEL_59:
            if (v50 > 3)
              goto LABEL_70;
            goto LABEL_63;
          case 4u:
            (*(void (**)(unint64_t, uint64_t))(v43 + 8))(((unint64_t)v29 + (v44 | 7) + 32) & ~(v44 | 7), v138);
            swift_bridgeObjectRelease(*(_QWORD *)((char *)&dword_8 + (((v45 | 7) + v47) & 0xFFFFFFFFFFFFF8)));
            goto LABEL_62;
          case 5u:
            v59 = *(void (**)(uint64_t, uint64_t))(v43 + 8);
            v59(v45, v138);
            v59((v45 + v44 + v47) & v139, v138);
            if (v50 > 3)
              goto LABEL_70;
            goto LABEL_63;
          default:
LABEL_62:
            if (v50 > 3)
              goto LABEL_70;
LABEL_63:
            v57 = ((1 << v51) | 2u) >> v51;
            if (v57 > 0xFFF8)
            {
              v58 = *(_DWORD *)(v46 + v50);
              if (v58 < 7)
              {
LABEL_75:
                switch(v58)
                {
                  case 0u:
                    (*(void (**)(uint64_t, uint64_t, uint64_t))(v43 + 16))(v45, v46, v138);
                    if (v50 > 3)
                      goto LABEL_79;
                    v61 = ((1 << v51) | 2u) >> v51;
                    if (v61 > 0xFFF8)
                    {
                      *(_DWORD *)(v45 + v50) = 0;
                    }
                    else if (v61 > 0xF8)
                    {
                      *(_WORD *)(v45 + v50) = 0;
                    }
                    else
                    {
LABEL_79:
                      *(_BYTE *)(v45 + v50) = 0;
                      if (v50 > 3)
                        goto LABEL_106;
                    }
                    goto LABEL_130;
                  case 1u:
                    *(_QWORD *)v45 = *(_QWORD *)v46;
                    v62 = *(_QWORD *)(v46 + 8);
                    *(_QWORD *)(v45 + 8) = v62;
                    swift_bridgeObjectRetain(v62);
                    if (v50 > 3)
                      goto LABEL_84;
                    v63 = 1;
                    v64 = ((1 << v51) | 2u) >> v51;
                    if (v64 > 0xFFF8)
                    {
                      *(_DWORD *)(v45 + v50) = 1;
                      goto LABEL_130;
                    }
                    if (v64 > 0xF8)
                      goto LABEL_129;
LABEL_84:
                    v65 = 1;
                    goto LABEL_101;
                  case 2u:
                    *(_QWORD *)v45 = *(_QWORD *)v46;
                    v66 = *(_QWORD *)(v46 + 8);
                    *(_QWORD *)(v45 + 8) = v66;
                    v67 = (_QWORD *)((v45 + 23) & 0xFFFFFFFFFFFFFFF8);
                    v68 = (void **)((v46 + 23) & 0xFFFFFFFFFFFFFFF8);
                    v69 = *v68;
                    *v67 = *v68;
                    v128 = ((unint64_t)v67 + v44 + 8) & v139;
                    v70 = ((unint64_t)v68 + v44 + 8) & v139;
                    v71 = v50;
                    v72 = *(void (**)(uint64_t, uint64_t, uint64_t))(v43 + 16);
                    swift_bridgeObjectRetain(v66);
                    v73 = v69;
                    v72(v128, v70, v138);
                    v50 = v71;
                    if (v71 > 3)
                      goto LABEL_88;
                    v74 = ((1 << v51) | 2u) >> v51;
                    if (v74 > 0xFFF8)
                    {
                      *(_DWORD *)(v45 + v71) = 2;
                      goto LABEL_130;
                    }
                    if (v74 <= 0xF8)
                    {
LABEL_88:
                      v65 = 2;
                      goto LABEL_101;
                    }
                    v63 = 2;
                    goto LABEL_129;
                  case 3u:
                    *(_QWORD *)v45 = *(_QWORD *)v46;
                    v75 = *(_QWORD *)(v46 + 8);
                    *(_QWORD *)(v45 + 8) = v75;
                    v76 = *(void (**)(uint64_t, uint64_t, uint64_t))(v43 + 16);
                    swift_bridgeObjectRetain(v75);
                    v76((v49 + v45) & v139, (v49 + v46) & v139, v138);
                    if (v50 > 3)
                      goto LABEL_92;
                    v77 = ((1 << v51) | 2u) >> v51;
                    if (v77 > 0xFFF8)
                    {
                      *(_DWORD *)(v45 + v50) = 3;
                      goto LABEL_130;
                    }
                    if (v77 <= 0xF8)
                    {
LABEL_92:
                      v65 = 3;
                      goto LABEL_101;
                    }
                    v63 = 3;
                    goto LABEL_129;
                  case 4u:
                    (*(void (**)(uint64_t, uint64_t, uint64_t))(v43 + 16))(v45, v46, v138);
                    v78 = (_QWORD *)(((v45 | 7) + v47) & 0xFFFFFFFFFFFFFFF8);
                    v79 = (_QWORD *)(((v46 | 7) + v47) & 0xFFFFFFFFFFFFFFF8);
                    *v78 = *v79;
                    v80 = v79[1];
                    v78[1] = v80;
                    swift_bridgeObjectRetain(v80);
                    if (v50 > 3)
                      goto LABEL_96;
                    v81 = ((1 << v51) | 2u) >> v51;
                    if (v81 > 0xFFF8)
                    {
                      *(_DWORD *)(v45 + v50) = 4;
                      goto LABEL_130;
                    }
                    if (v81 <= 0xF8)
                    {
LABEL_96:
                      v65 = 4;
                      goto LABEL_101;
                    }
                    v63 = 4;
                    goto LABEL_129;
                  case 5u:
                    v82 = *(void (**)(uint64_t, uint64_t, uint64_t))(v43 + 16);
                    v82(v45, v46, v138);
                    v82((v45 + v44 + v47) & v139, (v46 + v44 + v47) & v139, v138);
                    if (v50 > 3)
                      goto LABEL_100;
                    v83 = ((1 << v51) | 2u) >> v51;
                    if (v83 > 0xFFF8)
                    {
                      *(_DWORD *)(v45 + v50) = 5;
                      goto LABEL_130;
                    }
                    if (v83 > 0xF8)
                    {
                      v63 = 5;
                      goto LABEL_129;
                    }
LABEL_100:
                    v65 = 5;
LABEL_101:
                    *(_BYTE *)(v45 + v50) = v65;
                    if (v50 <= 3)
                      goto LABEL_130;
                    goto LABEL_106;
                  case 6u:
                    *(_QWORD *)v45 = *(_QWORD *)v46;
                    if (v50 > 3)
                      goto LABEL_104;
                    v86 = ((1 << v51) | 2u) >> v51;
                    if (v86 > 0xFFF8)
                    {
                      *(_DWORD *)(v45 + v50) = 6;
                    }
                    else
                    {
                      if (v86 <= 0xF8)
                      {
LABEL_104:
                        *(_BYTE *)(v45 + v50) = 6;
                        goto LABEL_105;
                      }
                      v63 = 6;
LABEL_129:
                      *(_WORD *)(v45 + v50) = v63;
                    }
                    break;
                  default:
                    if (v50 > 3)
                      goto LABEL_111;
                    v84 = ((1 << v51) | 2u) >> v51;
                    v85 = 2;
                    if (v84 > 0xFFF8)
                      v85 = 4;
                    if (v84 <= 0xF8)
LABEL_111:
                      v85 = 1;
                    memcpy((void *)v45, (const void *)v46, v85 + v50);
                    if (v50 <= 3)
                      goto LABEL_130;
                    goto LABEL_106;
                }
                goto LABEL_130;
              }
            }
            else if (v57 <= 0xF8)
            {
LABEL_70:
              v58 = *(unsigned __int8 *)(v46 + v50);
              if (v58 < 7)
                goto LABEL_75;
            }
            else
            {
              v58 = *(unsigned __int16 *)(v46 + v50);
              if (v58 < 7)
                goto LABEL_75;
            }
            if (v50 <= 3)
              v60 = v50;
            else
              v60 = 4;
            __asm { BR              X12 }
            return result;
        }
      }
    }
    else
    {
LABEL_43:
      v53 = *(unsigned __int8 *)(v45 + v50);
      if (v53 < 7)
        goto LABEL_52;
    }
LABEL_48:
    if (v50 <= 3)
      v54 = v50;
    else
      v54 = 4;
    __asm { BR              X12 }
  }
LABEL_105:
  if (v50 > 3)
  {
LABEL_106:
    v127 = 1;
LABEL_133:
    v88 = 1;
    goto LABEL_134;
  }
LABEL_130:
  v87 = ((1 << (8 * v50)) | 2u) >> (8 * v50);
  v88 = 2;
  if (v87 > 0xFFF8)
    v88 = 4;
  v127 = 0;
  if (v87 <= 0xF8)
    goto LABEL_133;
LABEL_134:
  v129 = v50;
  v89 = v88 + v50;
  v90 = (_BYTE *)(v89 + v45);
  v91 = v89 + v46;
  *v90 = *(_BYTE *)(v89 + v46);
  v92 = type metadata accessor for URL(0);
  v93 = *(_QWORD *)(v92 - 8);
  v94 = *(_DWORD *)(v93 + 80) & 0xF8;
  v95 = v94 | 7;
  v94 += 8;
  v96 = (unint64_t)&v90[v94] & ~v95;
  v97 = (v94 + v91) & ~v95;
  if (*(_QWORD *)(v93 + 64) <= 0x28uLL)
    v98 = 40;
  else
    v98 = *(_QWORD *)(v93 + 64);
  if (v96 != v97)
  {
    v99 = v92;
    v100 = *(unsigned __int8 *)(v96 + v98);
    if (v100 >= 2)
    {
      if (v98 <= 3)
        v101 = v98;
      else
        v101 = 4;
      __asm { BR              X12 }
    }
    if (v100 == 1)
    {
      (*(void (**)(unint64_t, uint64_t))(v93 + 8))(v96, v92);
    }
    else if (*(_QWORD *)(v96 + 24) >= 0xFFFFFFFFuLL)
    {
      _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)v96);
    }
    v102 = *(unsigned __int8 *)(v97 + v98);
    if (v102 >= 2)
    {
      if (v98 <= 3)
        v103 = v98;
      else
        v103 = 4;
      __asm { BR              X12 }
    }
    if (v102 == 1)
    {
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v93 + 16))(v96, v97, v99);
      v104 = 1;
    }
    else
    {
      v105 = *(_QWORD *)(v97 + 24);
      if (v105 < 0xFFFFFFFF)
      {
        v104 = 0;
        v106 = *(_OWORD *)v97;
        v107 = *(_OWORD *)(v97 + 16);
        *(_QWORD *)(v96 + 32) = *(_QWORD *)(v97 + 32);
        *(_OWORD *)v96 = v106;
        *(_OWORD *)(v96 + 16) = v107;
      }
      else
      {
        *(_QWORD *)(v96 + 24) = v105;
        *(_QWORD *)(v96 + 32) = *(_QWORD *)(v97 + 32);
        (**(void (***)(unint64_t, uint64_t))(v105 - 8))(v96, v97);
        v104 = 0;
      }
    }
    *(_BYTE *)(v96 + v98) = v104;
  }
  v108 = v98 + 1;
  v109 = (void *)((v96 + v44 + v98 + 1) & v139);
  v110 = (void *)((v97 + v44 + v98 + 1) & v139);
  v111 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v43 + 48);
  v112 = v111(v109, 1, v138);
  v113 = v111(v110, 1, v138);
  if (v112)
  {
    v114 = v129;
    if (!v113)
    {
      (*(void (**)(void *, void *, uint64_t))(v43 + 16))(v109, v110, v138);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v43 + 56))(v109, 0, 1, v138);
      goto LABEL_167;
    }
  }
  else
  {
    v114 = v129;
    if (!v113)
    {
      (*(void (**)(void *, void *, uint64_t))(v43 + 24))(v109, v110, v138);
      goto LABEL_167;
    }
    (*(void (**)(void *, uint64_t))(v43 + 8))(v109, v138);
  }
  if (*(_DWORD *)(v43 + 84))
    v115 = v47;
  else
    v115 = v47 + 1;
  memcpy(v109, v110, v115);
LABEL_167:
  if ((v127 & 1) != 0)
    v116 = 8;
  else
    v116 = (((1 << (8 * v114)) | 2u) >> (8 * v114)) + 7;
  if (*(_DWORD *)(v43 + 84))
    v117 = v47;
  else
    v117 = v47 + 1;
  v118 = 4;
  if (v116 < 0x10000)
    v118 = 2;
  if (v116 < 0x100)
    v119 = 1;
  else
    v119 = v118;
  v120 = v117
       + ((v108
         + v44
         + (((((((((v133 & ~v131) + v134 + v132) & ~v132) + v130 + 10) & 0xFFFFFFFFFFFFFFF8) + (v44 | 7) + 32) & ~(v44 | 7) | 1)
           + v114
           + v95
           + v119) & ~v95)) & v139);
  v121 = v120 + v137;
  v122 = v120 + v135;
  *(_WORD *)v121 = *(_WORD *)v122;
  *(_BYTE *)(v121 + 2) = *(_BYTE *)(v122 + 2);
  v123 = (_QWORD *)((v121 + 10) & 0xFFFFFFFFFFFFFFF8);
  v124 = (_QWORD *)((v122 + 10) & 0xFFFFFFFFFFFFFFF8);
  sub_142F8(v123, v124);
  v125 = *(_QWORD *)(*(_QWORD *)(v136 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v125 + 24))(((unint64_t)v123 + *(unsigned __int8 *)(v125 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v125 + 80), ((unint64_t)v124 + *(unsigned __int8 *)(v125 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v125 + 80));
  return v137;
}

uint64_t sub_18DBE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  char v20;
  _BYTE *v21;
  _BYTE *v22;
  _OWORD *v23;
  _OWORD *v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _OWORD *v31;
  size_t v32;
  unint64_t v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  _OWORD *v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  char v42;
  _QWORD *v43;
  _QWORD *v44;
  void (*v45)(_OWORD *, _OWORD *, uint64_t);
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  BOOL v49;
  uint64_t v50;
  _BYTE *v51;
  _BYTE *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unsigned int v60;
  uint64_t v61;
  char v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  void *v66;
  const void *v67;
  size_t v68;
  unsigned int v69;
  size_t v70;
  uint64_t v71;
  uint64_t v72;
  size_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v90;
  char v91;
  uint64_t v92;

  v5 = sub_5440(&qword_25FC38);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32);
  v7(a1, a2, v5);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = *(unsigned __int8 *)(v6 + 80);
  v90 = a1;
  v10 = (v8 + v9 + a1) & ~v9;
  v88 = a2;
  v86 = v8 + v9;
  v84 = v9;
  v11 = (v8 + v9 + a2) & ~v9;
  v7(v10, v11, v5);
  v12 = type metadata accessor for ColorScheme(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(_DWORD *)(v13 + 80) & 0xF8 | 7;
  v87 = v8;
  v15 = (_QWORD *)((v8 + v14 + v10) & ~v14);
  v16 = (_QWORD *)((v8 + v14 + v11) & ~v14);
  if (*(_QWORD *)(v13 + 64) <= 8uLL)
    v17 = 8;
  else
    v17 = *(_QWORD *)(v13 + 64);
  v18 = *((unsigned __int8 *)v16 + v17);
  if (v18 >= 2)
  {
    if (v17 <= 3)
      v19 = v17;
    else
      v19 = 4;
    __asm { BR              X13 }
  }
  v85 = *(_DWORD *)(v13 + 80) & 0xF8 | 7;
  if (v18 == 1)
  {
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(v13 + 32))(v15, (v8 + v14 + v11) & ~v14, v12);
    v20 = 1;
  }
  else
  {
    v20 = 0;
    *v15 = *v16;
  }
  *((_BYTE *)v15 + v17) = v20;
  v21 = (char *)v15 + v17 + 1;
  v22 = (char *)v16 + v17 + 1;
  *v21 = *v22;
  v21[1] = v22[1];
  v21[2] = v22[2];
  v23 = (_OWORD *)((unint64_t)(v21 + 10) & 0xFFFFFFFFFFFFFFF8);
  v24 = (_OWORD *)((unint64_t)(v22 + 10) & 0xFFFFFFFFFFFFFFF8);
  v25 = v24[1];
  *v23 = *v24;
  v23[1] = v25;
  v26 = type metadata accessor for LocalizerRequest(0);
  v27 = *(_QWORD *)(v26 - 8);
  v28 = *(unsigned __int8 *)(v27 + 80);
  v29 = v28 | 7;
  v30 = (uint64_t)v23 + (v28 | 7) + 32;
  v31 = (_OWORD *)(((unint64_t)v24 + (v28 | 7) + 32) & ~(v28 | 7));
  v32 = *(_QWORD *)(v27 + 64);
  if (v32 <= ((v28 + 24) & ~v28) + v32)
    v33 = ((v28 + 24) & ~v28) + v32;
  else
    v33 = *(_QWORD *)(v27 + 64);
  if (v33 <= ((v28 + 16) & ~v28) + v32)
    v33 = ((v28 + 16) & ~v28) + v32;
  if (v33 <= ((v32 + 7) & 0xFFFFFFFFFFFFFFF8) + 16)
    v33 = ((v32 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (v33 <= ((v32 + v28) & ~v28) + v32)
    v33 = ((v32 + v28) & ~v28) + v32;
  if (v33 <= 0x10)
    v34 = 16;
  else
    v34 = v33;
  v91 = 8 * v34;
  if (v34 > 3)
    goto LABEL_27;
  v35 = ((1 << v91) | 2u) >> v91;
  if (v35 > 0xFFF8)
  {
    v36 = *(_DWORD *)((char *)v31 + v34);
  }
  else
  {
    if (v35 <= 0xF8)
    {
LABEL_27:
      v36 = *((unsigned __int8 *)v31 + v34);
      goto LABEL_30;
    }
    v36 = *(unsigned __int16 *)((char *)v31 + v34);
  }
LABEL_30:
  v37 = (_OWORD *)(v30 & ~v29);
  if (v36 >= 7)
  {
    if (v34 <= 3)
      v38 = v34;
    else
      v38 = 4;
    __asm { BR              X13 }
  }
  v92 = ~v28;
  v83 = v26;
  switch(v36)
  {
    case 0u:
      (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v27 + 32))(v37, v31, v26);
      if (v34 <= 3)
      {
        v39 = ((1 << v91) | 2u) >> v91;
        if (v39 > 0xFFF8)
        {
          *(_DWORD *)((char *)v37 + v34) = 0;
          goto LABEL_93;
        }
        if (v39 > 0xF8)
        {
          *(_WORD *)((char *)v37 + v34) = 0;
          goto LABEL_93;
        }
      }
      *((_BYTE *)v37 + v34) = 0;
      if (v34 <= 3)
        goto LABEL_72;
      goto LABEL_75;
    case 1u:
      *v37 = *v31;
      if (v34 > 3)
        goto LABEL_51;
      v39 = ((1 << v91) | 2u) >> v91;
      if (v39 > 0xFFF8)
      {
        *(_DWORD *)((char *)v37 + v34) = 1;
      }
      else
      {
        if (v39 <= 0xF8)
        {
LABEL_51:
          v42 = 1;
          goto LABEL_71;
        }
        *(_WORD *)((char *)v37 + v34) = 1;
      }
      goto LABEL_93;
    case 2u:
      *v37 = *v31;
      v43 = (_QWORD *)(((unint64_t)v37 + 23) & 0xFFFFFFFFFFFFFFF8);
      v44 = (_QWORD *)(((unint64_t)v31 + 23) & 0xFFFFFFFFFFFFFFF8);
      *v43 = *v44;
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v27 + 32))(((unint64_t)v43 + v28 + 8) & v92, ((unint64_t)v44 + v28 + 8) & v92, v26);
      if (v34 > 3)
        goto LABEL_55;
      v39 = ((1 << v91) | 2u) >> v91;
      if (v39 > 0xFFF8)
      {
        *(_DWORD *)((char *)v37 + v34) = 2;
      }
      else
      {
        if (v39 <= 0xF8)
        {
LABEL_55:
          v42 = 2;
          goto LABEL_71;
        }
        *(_WORD *)((char *)v37 + v34) = 2;
      }
      goto LABEL_93;
    case 3u:
      *v37 = *v31;
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v27 + 32))(((unint64_t)v37 + v28 + 16) & v92, ((unint64_t)v31 + v28 + 16) & v92, v26);
      if (v34 > 3)
        goto LABEL_59;
      v39 = ((1 << v91) | 2u) >> v91;
      if (v39 > 0xFFF8)
      {
        *(_DWORD *)((char *)v37 + v34) = 3;
      }
      else
      {
        if (v39 <= 0xF8)
        {
LABEL_59:
          v42 = 3;
          goto LABEL_71;
        }
        *(_WORD *)((char *)v37 + v34) = 3;
      }
      goto LABEL_93;
    case 4u:
      (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v27 + 32))(v37, v31, v26);
      *(_OWORD *)(((unint64_t)v37 + v32 + 7) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v31 + v32 + 7) & 0xFFFFFFFFFFFFF8);
      if (v34 > 3)
        goto LABEL_63;
      v39 = ((1 << v91) | 2u) >> v91;
      if (v39 > 0xFFF8)
      {
        *(_DWORD *)((char *)v37 + v34) = 4;
      }
      else
      {
        if (v39 <= 0xF8)
        {
LABEL_63:
          v42 = 4;
          goto LABEL_71;
        }
        *(_WORD *)((char *)v37 + v34) = 4;
      }
      goto LABEL_93;
    case 5u:
      v82 = v17;
      v45 = *(void (**)(_OWORD *, _OWORD *, uint64_t))(v27 + 32);
      v46 = v26;
      v45(v37, v31, v26);
      v45((_OWORD *)(((unint64_t)v37 + v32 + v28) & v92), (_OWORD *)(((unint64_t)v31 + v32 + v28) & v92), v46);
      if (v34 > 3)
        goto LABEL_67;
      v39 = ((1 << v91) | 2u) >> v91;
      if (v39 > 0xFFF8)
      {
        *(_DWORD *)((char *)v37 + v34) = 5;
LABEL_92:
        v17 = v82;
        goto LABEL_93;
      }
      if (v39 > 0xF8)
      {
        *(_WORD *)((char *)v37 + v34) = 5;
        goto LABEL_92;
      }
LABEL_67:
      *((_BYTE *)v37 + v34) = 5;
      v17 = v82;
      if (v34 <= 3)
        goto LABEL_72;
LABEL_75:
      v48 = 1;
LABEL_95:
      v50 = v48 + v34;
      v51 = (char *)v37 + v50;
      v52 = (char *)v31 + v50;
      *v51 = *v52;
      v53 = type metadata accessor for URL(0);
      v54 = *(_QWORD *)(v53 - 8);
      v55 = *(_DWORD *)(v54 + 80) & 0xF8;
      v56 = v55 | 7;
      v55 += 8;
      v57 = (unint64_t)&v51[v55] & ~v56;
      v58 = (unint64_t)&v52[v55] & ~v56;
      if (*(_QWORD *)(v54 + 64) <= 0x28uLL)
        v59 = 40;
      else
        v59 = *(_QWORD *)(v54 + 64);
      v60 = *(unsigned __int8 *)(v58 + v59);
      if (v60 >= 2)
      {
        if (v59 <= 3)
          v61 = v59;
        else
          v61 = 4;
        __asm { BR              X13 }
      }
      if (v60 == 1)
      {
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v54 + 32))(v57, v58, v53);
        v62 = 1;
      }
      else
      {
        v62 = 0;
        v63 = *(_OWORD *)v58;
        v64 = *(_OWORD *)(v58 + 16);
        *(_QWORD *)(v57 + 32) = *(_QWORD *)(v58 + 32);
        *(_OWORD *)v57 = v63;
        *(_OWORD *)(v57 + 16) = v64;
      }
      *(_BYTE *)(v57 + v59) = v62;
      v65 = v59 + v28 + 1;
      v66 = (void *)((v65 + v57) & v92);
      v67 = (const void *)((v65 + v58) & v92);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v27 + 48))(v67, 1, v83))
      {
        if (*(_DWORD *)(v27 + 84))
          v68 = v32;
        else
          v68 = v32 + 1;
        memcpy(v66, v67, v68);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v27 + 32))(v66, v67, v83);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v66, 0, 1, v83);
      }
      if (v34 <= 3)
        v69 = (((1 << v91) | 2u) >> v91) + 7;
      else
        v69 = 8;
      if (*(_DWORD *)(v27 + 84))
        v70 = v32;
      else
        v70 = v32 + 1;
      v71 = 4;
      if (v69 < 0x10000)
        v71 = 2;
      if (v69 < 0x100)
        v72 = 1;
      else
        v72 = v71;
      v73 = v70
          + ((v65
            + ((((((v17 + (((v86 & ~v84) + v87 + v85) & ~v85) + 11) & 0xFFFFFFFFFFFFFFF8) + v29 + 32) & ~v29 | 1)
              + v34
              + v56
              + v72) & ~v56)) & v92);
      v74 = v73 + v90;
      v75 = v73 + v88;
      *(_WORD *)v74 = *(_WORD *)v75;
      *(_BYTE *)(v74 + 2) = *(_BYTE *)(v75 + 2);
      v76 = (v74 + 10) & 0xFFFFFFFFFFFFFFF8;
      v77 = (v75 + 10) & 0xFFFFFFFFFFFFFFF8;
      v79 = *(_OWORD *)v77;
      v78 = *(_OWORD *)(v77 + 16);
      *(_QWORD *)(v76 + 32) = *(_QWORD *)(v77 + 32);
      *(_OWORD *)v76 = v79;
      *(_OWORD *)(v76 + 16) = v78;
      v80 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
      (*(void (**)(unint64_t, unint64_t))(v80 + 32))((*(unsigned __int8 *)(v80 + 80) + 40 + v76) & ~(unint64_t)*(unsigned __int8 *)(v80 + 80), (*(unsigned __int8 *)(v80 + 80) + 40 + v77) & ~(unint64_t)*(unsigned __int8 *)(v80 + 80));
      return v90;
    case 6u:
      *(_QWORD *)v37 = *(_QWORD *)v31;
      if (v34 > 3)
        goto LABEL_70;
      v39 = ((1 << v91) | 2u) >> v91;
      if (v39 > 0xFFF8)
      {
        *(_DWORD *)((char *)v37 + v34) = 6;
      }
      else
      {
        if (v39 <= 0xF8)
        {
LABEL_70:
          v42 = 6;
LABEL_71:
          *((_BYTE *)v37 + v34) = v42;
          if (v34 <= 3)
          {
LABEL_72:
            v47 = ((1 << v91) | 2u) >> v91;
            v48 = 2;
            if (v47 > 0xFFF8)
              v48 = 4;
            if (v47 > 0xF8)
              goto LABEL_95;
          }
          goto LABEL_75;
        }
        *(_WORD *)((char *)v37 + v34) = 6;
      }
LABEL_93:
      v49 = v39 > 0xFFF8;
      v48 = 2;
      if (v49)
        v48 = 4;
      goto LABEL_95;
    default:
      if (v34 > 3)
        goto LABEL_45;
      v40 = ((1 << v91) | 2u) >> v91;
      v41 = 2;
      if (v40 > 0xFFF8)
        v41 = 4;
      if (v40 <= 0xF8)
LABEL_45:
        v41 = 1;
      memcpy(v37, v31, v41 + v34);
      if (v34 > 3)
        goto LABEL_75;
      goto LABEL_72;
  }
}

uint64_t sub_18E5F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  __n128 v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  _BYTE *v26;
  _BYTE *v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  size_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  unsigned int v44;
  unsigned int v45;
  uint64_t v46;
  id *v47;
  uint64_t v48;
  unsigned int v49;
  unsigned int v50;
  void (*v51)(uint64_t, uint64_t);
  uint64_t v52;
  unsigned int v53;
  __int16 v54;
  unsigned int v55;
  char v56;
  _QWORD *v57;
  _QWORD *v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  void (*v62)(uint64_t, uint64_t, uint64_t);
  unsigned int v63;
  unsigned int v64;
  uint64_t v65;
  unsigned int v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  _BYTE *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int v80;
  uint64_t v81;
  unsigned int v82;
  uint64_t v83;
  char v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  void *v88;
  void *v89;
  uint64_t (*v90)(void *, uint64_t, uint64_t);
  int v91;
  int v92;
  uint64_t v93;
  size_t v94;
  unsigned int v95;
  size_t v96;
  uint64_t v97;
  uint64_t v98;
  size_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  __int128 v104;
  __int128 v105;
  uint64_t v106;
  uint64_t result;
  char v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;

  v6 = sub_5440(&qword_25FC38);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 40);
  v8(a1, a2, v6);
  v9 = *(_QWORD *)(v7 + 64);
  v10 = *(unsigned __int8 *)(v7 + 80);
  v11 = (v9 + v10 + a1) & ~v10;
  v113 = v9 + v10;
  v111 = v10;
  v12 = (v9 + v10 + a2) & ~v10;
  v8(v11, v12, v6);
  v13 = type metadata accessor for ColorScheme(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(_DWORD *)(v14 + 80) & 0xF8 | 7;
  v114 = v9;
  v16 = (_QWORD *)((v9 + v15 + v11) & ~v15);
  v112 = v15;
  v17 = (_QWORD *)((v9 + v15 + v12) & ~v15);
  if (*(_QWORD *)(v14 + 64) <= 8uLL)
    v18 = 8;
  else
    v18 = *(_QWORD *)(v14 + 64);
  if (v16 != v17)
  {
    v19 = v13;
    v20 = *((unsigned __int8 *)v16 + v18);
    if (v20 >= 2)
    {
      if (v18 <= 3)
        v21 = v18;
      else
        v21 = 4;
      __asm { BR              X12 }
    }
    if (v20 == 1)
      (*(void (**)(_QWORD *, uint64_t))(v14 + 8))(v16, v13);
    else
      v22 = swift_release(*v16);
    v23 = *((unsigned __int8 *)v17 + v18);
    if (v23 >= 2)
    {
      if (v18 <= 3)
        v24 = v18;
      else
        v24 = 4;
      __asm { BR              X12 }
    }
    if (v23 == 1)
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t, __n128))(v14 + 32))(v16, v17, v19, v22);
      v25 = 1;
    }
    else
    {
      v25 = 0;
      *v16 = *v17;
    }
    *((_BYTE *)v16 + v18) = v25;
  }
  v26 = (char *)v16 + v18 + 1;
  v27 = (char *)v17 + v18 + 1;
  *v26 = *v27;
  v26[1] = v27[1];
  v26[2] = v27[2];
  v28 = (_QWORD *)((unint64_t)(v26 + 10) & 0xFFFFFFFFFFFFFFF8);
  v29 = (_QWORD *)((unint64_t)(v27 + 10) & 0xFFFFFFFFFFFFFFF8);
  v30 = *v28;
  v116 = a1;
  v115 = a2;
  v110 = v18 + 1;
  if (*v28 >= 0xFFFFFFFFuLL)
  {
    if (*v29 >= 0xFFFFFFFFuLL)
    {
      *v28 = *v29;
      swift_release(v30);
      v31 = v28[1];
      v28[1] = v29[1];
      swift_release(v31);
      v32 = v28[2];
      v28[2] = v29[2];
      swift_release(v32);
      v33 = v28[3];
      v28[3] = v29[3];
      swift_release(v33);
      goto LABEL_27;
    }
    swift_release(v30);
    swift_release(v28[1]);
    swift_release(v28[2]);
    swift_release(v28[3]);
  }
  v34 = *((_OWORD *)v29 + 1);
  *(_OWORD *)v28 = *(_OWORD *)v29;
  *((_OWORD *)v28 + 1) = v34;
LABEL_27:
  v118 = type metadata accessor for LocalizerRequest(0);
  v35 = *(_QWORD *)(v118 - 8);
  v36 = *(unsigned __int8 *)(v35 + 80);
  v37 = ((unint64_t)v28 + (v36 | 7) + 32) & ~(v36 | 7);
  v109 = v36 | 7;
  v38 = ((unint64_t)v29 + (v36 | 7) + 32) & ~(v36 | 7);
  v39 = *(_QWORD *)(v35 + 64);
  v119 = ~v36;
  v40 = v39 + ((v36 + 24) & ~v36);
  if (v39 > v40)
    v40 = *(_QWORD *)(v35 + 64);
  v41 = v36 + 16;
  if (v40 <= v39 + ((v36 + 16) & ~v36))
    v40 = v39 + ((v36 + 16) & ~v36);
  if (v40 <= ((v39 + 7) & 0xFFFFFFFFFFFFFFF8) + 16)
    v40 = ((v39 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  v117 = *(unsigned __int8 *)(v35 + 80);
  if (v40 <= ((v39 + v36) & ~v36) + v39)
    v40 = ((v39 + v36) & ~v36) + v39;
  if (v40 <= 0x10)
    v42 = 16;
  else
    v42 = v40;
  if (v37 != v38)
  {
    v43 = 8 * v42;
    if (v42 > 3)
      goto LABEL_42;
    v44 = ((1 << v43) | 2u) >> v43;
    if (v44 > 0xFFF8)
    {
      v45 = *(_DWORD *)(v37 + v42);
      if (v45 < 7)
        goto LABEL_51;
      goto LABEL_47;
    }
    if (v44 > 0xF8)
    {
      v45 = *(unsigned __int16 *)(v37 + v42);
      if (v45 < 7)
      {
LABEL_51:
        switch(v45)
        {
          case 0u:
            (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v37, v118);
            goto LABEL_58;
          case 1u:
            swift_bridgeObjectRelease(*(_QWORD *)(v37 + 8));
            if (v42 > 3)
              goto LABEL_69;
            goto LABEL_62;
          case 2u:
            swift_bridgeObjectRelease(*(_QWORD *)(v37 + 8));
            v47 = (id *)((v37 + 23) & 0xFFFFFFFFFFFFFFF8);

            v48 = (uint64_t)v47 + v117 + 8;
            goto LABEL_57;
          case 3u:
            swift_bridgeObjectRelease(*(_QWORD *)(v37 + 8));
            v48 = v41 + v37;
LABEL_57:
            (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v48 & v119, v118);
LABEL_58:
            if (v42 > 3)
              goto LABEL_69;
            goto LABEL_62;
          case 4u:
            (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v37, v118);
            swift_bridgeObjectRelease(*(_QWORD *)((char *)&dword_8 + (((v37 | 7) + v39) & 0xFFFFFFFFFFFFF8)));
            goto LABEL_61;
          case 5u:
            v51 = *(void (**)(uint64_t, uint64_t))(v35 + 8);
            v51(v37, v118);
            v51((v37 + v117 + v39) & v119, v118);
            if (v42 > 3)
              goto LABEL_69;
            goto LABEL_62;
          default:
LABEL_61:
            if (v42 > 3)
              goto LABEL_69;
LABEL_62:
            v49 = ((1 << v43) | 2u) >> v43;
            if (v49 > 0xFFF8)
            {
              v50 = *(_DWORD *)(v38 + v42);
              if (v50 < 7)
              {
LABEL_74:
                switch(v50)
                {
                  case 0u:
                    (*(void (**)(uint64_t, uint64_t, uint64_t))(v35 + 32))(v37, v38, v118);
                    if (v42 > 3)
                      goto LABEL_78;
                    v53 = ((1 << v43) | 2u) >> v43;
                    if (v53 > 0xFFF8)
                    {
                      *(_DWORD *)(v37 + v42) = 0;
                    }
                    else if (v53 > 0xF8)
                    {
                      *(_WORD *)(v37 + v42) = 0;
                    }
                    else
                    {
LABEL_78:
                      *(_BYTE *)(v37 + v42) = 0;
                      if (v42 > 3)
                        goto LABEL_105;
                    }
                    goto LABEL_129;
                  case 1u:
                    *(_OWORD *)v37 = *(_OWORD *)v38;
                    if (v42 > 3)
                      goto LABEL_83;
                    v54 = 1;
                    v55 = ((1 << v43) | 2u) >> v43;
                    if (v55 > 0xFFF8)
                    {
                      *(_DWORD *)(v37 + v42) = 1;
                      goto LABEL_129;
                    }
                    if (v55 > 0xF8)
                      goto LABEL_128;
LABEL_83:
                    v56 = 1;
                    goto LABEL_100;
                  case 2u:
                    *(_OWORD *)v37 = *(_OWORD *)v38;
                    v57 = (_QWORD *)((v37 + 23) & 0xFFFFFFFFFFFFFFF8);
                    v58 = (_QWORD *)((v38 + 23) & 0xFFFFFFFFFFFFFFF8);
                    *v57 = *v58;
                    (*(void (**)(unint64_t, unint64_t, uint64_t))(v35 + 32))(((unint64_t)v57 + v117 + 8) & v119, ((unint64_t)v58 + v117 + 8) & v119, v118);
                    if (v42 > 3)
                      goto LABEL_87;
                    v59 = ((1 << v43) | 2u) >> v43;
                    if (v59 > 0xFFF8)
                    {
                      *(_DWORD *)(v37 + v42) = 2;
                      goto LABEL_129;
                    }
                    if (v59 <= 0xF8)
                    {
LABEL_87:
                      v56 = 2;
                      goto LABEL_100;
                    }
                    v54 = 2;
                    goto LABEL_128;
                  case 3u:
                    *(_OWORD *)v37 = *(_OWORD *)v38;
                    (*(void (**)(uint64_t, uint64_t, uint64_t))(v35 + 32))((v41 + v37) & v119, (v41 + v38) & v119, v118);
                    if (v42 > 3)
                      goto LABEL_91;
                    v60 = ((1 << v43) | 2u) >> v43;
                    if (v60 > 0xFFF8)
                    {
                      *(_DWORD *)(v37 + v42) = 3;
                      goto LABEL_129;
                    }
                    if (v60 <= 0xF8)
                    {
LABEL_91:
                      v56 = 3;
                      goto LABEL_100;
                    }
                    v54 = 3;
                    goto LABEL_128;
                  case 4u:
                    (*(void (**)(uint64_t, uint64_t, uint64_t))(v35 + 32))(v37, v38, v118);
                    *(_OWORD *)(((v37 | 7) + v39) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((v38 | 7) + v39) & 0xFFFFFFFFFFFFF8);
                    if (v42 > 3)
                      goto LABEL_95;
                    v61 = ((1 << v43) | 2u) >> v43;
                    if (v61 > 0xFFF8)
                    {
                      *(_DWORD *)(v37 + v42) = 4;
                      goto LABEL_129;
                    }
                    if (v61 <= 0xF8)
                    {
LABEL_95:
                      v56 = 4;
                      goto LABEL_100;
                    }
                    v54 = 4;
                    goto LABEL_128;
                  case 5u:
                    v62 = *(void (**)(uint64_t, uint64_t, uint64_t))(v35 + 32);
                    v62(v37, v38, v118);
                    v62((v37 + v117 + v39) & v119, (v38 + v117 + v39) & v119, v118);
                    if (v42 > 3)
                      goto LABEL_99;
                    v63 = ((1 << v43) | 2u) >> v43;
                    if (v63 > 0xFFF8)
                    {
                      *(_DWORD *)(v37 + v42) = 5;
                      goto LABEL_129;
                    }
                    if (v63 > 0xF8)
                    {
                      v54 = 5;
                      goto LABEL_128;
                    }
LABEL_99:
                    v56 = 5;
LABEL_100:
                    *(_BYTE *)(v37 + v42) = v56;
                    if (v42 <= 3)
                      goto LABEL_129;
                    goto LABEL_105;
                  case 6u:
                    *(_QWORD *)v37 = *(_QWORD *)v38;
                    if (v42 > 3)
                      goto LABEL_103;
                    v66 = ((1 << v43) | 2u) >> v43;
                    if (v66 > 0xFFF8)
                    {
                      *(_DWORD *)(v37 + v42) = 6;
                    }
                    else
                    {
                      if (v66 <= 0xF8)
                      {
LABEL_103:
                        *(_BYTE *)(v37 + v42) = 6;
                        goto LABEL_104;
                      }
                      v54 = 6;
LABEL_128:
                      *(_WORD *)(v37 + v42) = v54;
                    }
                    break;
                  default:
                    if (v42 > 3)
                      goto LABEL_110;
                    v64 = ((1 << v43) | 2u) >> v43;
                    v65 = 2;
                    if (v64 > 0xFFF8)
                      v65 = 4;
                    if (v64 <= 0xF8)
LABEL_110:
                      v65 = 1;
                    memcpy((void *)v37, (const void *)v38, v65 + v42);
                    if (v42 <= 3)
                      goto LABEL_129;
                    goto LABEL_105;
                }
                goto LABEL_129;
              }
            }
            else if (v49 <= 0xF8)
            {
LABEL_69:
              v50 = *(unsigned __int8 *)(v38 + v42);
              if (v50 < 7)
                goto LABEL_74;
            }
            else
            {
              v50 = *(unsigned __int16 *)(v38 + v42);
              if (v50 < 7)
                goto LABEL_74;
            }
            if (v42 <= 3)
              v52 = v42;
            else
              v52 = 4;
            __asm { BR              X12 }
            return result;
        }
      }
    }
    else
    {
LABEL_42:
      v45 = *(unsigned __int8 *)(v37 + v42);
      if (v45 < 7)
        goto LABEL_51;
    }
LABEL_47:
    if (v42 <= 3)
      v46 = v42;
    else
      v46 = 4;
    __asm { BR              X12 }
  }
LABEL_104:
  if (v42 > 3)
  {
LABEL_105:
    v108 = 1;
LABEL_132:
    v68 = 1;
    goto LABEL_133;
  }
LABEL_129:
  v67 = ((1 << (8 * v42)) | 2u) >> (8 * v42);
  v68 = 2;
  if (v67 > 0xFFF8)
    v68 = 4;
  v108 = 0;
  if (v67 <= 0xF8)
    goto LABEL_132;
LABEL_133:
  v69 = v68 + v42;
  v70 = (_BYTE *)(v69 + v37);
  v71 = v69 + v38;
  *v70 = *(_BYTE *)(v69 + v38);
  v72 = type metadata accessor for URL(0);
  v73 = *(_QWORD *)(v72 - 8);
  v74 = *(_DWORD *)(v73 + 80) & 0xF8;
  v75 = v74 | 7;
  v74 += 8;
  v76 = (unint64_t)&v70[v74] & ~v75;
  v77 = (v74 + v71) & ~v75;
  if (*(_QWORD *)(v73 + 64) <= 0x28uLL)
    v78 = 40;
  else
    v78 = *(_QWORD *)(v73 + 64);
  if (v76 != v77)
  {
    v79 = v72;
    v80 = *(unsigned __int8 *)(v76 + v78);
    if (v80 >= 2)
    {
      if (v78 <= 3)
        v81 = v78;
      else
        v81 = 4;
      __asm { BR              X12 }
    }
    if (v80 == 1)
    {
      (*(void (**)(unint64_t, uint64_t))(v73 + 8))(v76, v72);
    }
    else if (*(_QWORD *)(v76 + 24) >= 0xFFFFFFFFuLL)
    {
      _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)v76);
    }
    v82 = *(unsigned __int8 *)(v77 + v78);
    if (v82 >= 2)
    {
      if (v78 <= 3)
        v83 = v78;
      else
        v83 = 4;
      __asm { BR              X12 }
    }
    if (v82 == 1)
    {
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v73 + 32))(v76, v77, v79);
      v84 = 1;
    }
    else
    {
      v84 = 0;
      v85 = *(_OWORD *)v77;
      v86 = *(_OWORD *)(v77 + 16);
      *(_QWORD *)(v76 + 32) = *(_QWORD *)(v77 + 32);
      *(_OWORD *)v76 = v85;
      *(_OWORD *)(v76 + 16) = v86;
    }
    *(_BYTE *)(v76 + v78) = v84;
  }
  v87 = v78 + 1;
  v88 = (void *)((v76 + v117 + v78 + 1) & v119);
  v89 = (void *)((v77 + v117 + v78 + 1) & v119);
  v90 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v35 + 48);
  v91 = v90(v88, 1, v118);
  v92 = v90(v89, 1, v118);
  if (v91)
  {
    v93 = v112;
    if (!v92)
    {
      (*(void (**)(void *, void *, uint64_t))(v35 + 32))(v88, v89, v118);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v88, 0, 1, v118);
      goto LABEL_164;
    }
  }
  else
  {
    v93 = v112;
    if (!v92)
    {
      (*(void (**)(void *, void *, uint64_t))(v35 + 40))(v88, v89, v118);
      goto LABEL_164;
    }
    (*(void (**)(void *, uint64_t))(v35 + 8))(v88, v118);
  }
  if (*(_DWORD *)(v35 + 84))
    v94 = v39;
  else
    v94 = v39 + 1;
  memcpy(v88, v89, v94);
LABEL_164:
  if ((v108 & 1) != 0)
    v95 = 8;
  else
    v95 = (((1 << (8 * v42)) | 2u) >> (8 * v42)) + 7;
  if (*(_DWORD *)(v35 + 84))
    v96 = v39;
  else
    v96 = v39 + 1;
  v97 = 4;
  if (v95 < 0x10000)
    v97 = 2;
  if (v95 < 0x100)
    v98 = 1;
  else
    v98 = v97;
  v99 = v96
      + ((v87
        + v117
        + (((((((((v113 & ~v111) + v114 + v93) & ~v93) + v110 + 10) & 0xFFFFFFFFFFFFFFF8) + v109 + 32) & ~v109 | 1)
          + v42
          + v75
          + v98) & ~v75)) & v119);
  v100 = v99 + v116;
  v101 = v99 + v115;
  *(_WORD *)v100 = *(_WORD *)v101;
  *(_BYTE *)(v100 + 2) = *(_BYTE *)(v101 + 2);
  v102 = (v100 + 10) & 0xFFFFFFFFFFFFFFF8;
  v103 = (v101 + 10) & 0xFFFFFFFFFFFFFFF8;
  _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)v102);
  v104 = *(_OWORD *)v103;
  v105 = *(_OWORD *)(v103 + 16);
  *(_QWORD *)(v102 + 32) = *(_QWORD *)(v103 + 32);
  *(_OWORD *)v102 = v104;
  *(_OWORD *)(v102 + 16) = v105;
  v106 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v106 + 40))((*(unsigned __int8 *)(v106 + 80) + 40 + v102) & ~(unint64_t)*(unsigned __int8 *)(v106 + 80), (*(unsigned __int8 *)(v106 + 80) + 40 + v103) & ~(unint64_t)*(unsigned __int8 *)(v106 + 80));
  return v116;
}

uint64_t sub_18F428(unint64_t a1, unsigned int a2, uint64_t a3)
{
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int v16;
  char v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  unsigned int v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char v46;
  int v47;
  unsigned int v48;
  int v49;
  int v50;
  int v51;
  unsigned int v52;
  char v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  int v57;
  unsigned int v58;
  char v59;
  unsigned int v60;
  uint64_t v61;
  int v62;
  unsigned int v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unsigned int v67;
  char v68;
  unsigned int v69;
  unsigned int v70;
  uint64_t v71;
  unsigned int v72;
  unint64_t v73;
  char v74;
  int v75;
  unint64_t v76;
  uint64_t (*v77)(unint64_t, uint64_t, uint64_t);
  uint64_t v78;
  unsigned int v79;
  int v81;
  int v82;
  unsigned int v83;
  char v84;
  unsigned int v85;
  unsigned int v86;
  unint64_t *v87;
  unint64_t v88;
  unsigned int v89;
  unsigned int v90;
  BOOL v91;
  unint64_t v92;
  int v93;
  unsigned int v94;
  char v95;
  int v96;
  unint64_t v97;
  int v98;
  uint64_t v99;
  char v100;
  unsigned int v101;
  unsigned int v102;
  uint64_t v103;
  unsigned int v104;
  unsigned int v105;
  unsigned int v106;
  BOOL v107;
  uint64_t v108;
  unsigned int v109;
  char v110;
  int v111;
  unsigned int v112;
  int v113;
  int v114;
  int v115;
  unsigned int v116;
  unsigned int v117;
  int v118;
  char v119;
  unsigned int v120;
  int v121;
  int v122;
  unsigned int v123;
  uint64_t v124;
  unsigned int v125;
  uint64_t v126;
  uint64_t v127;

  v124 = sub_5440(&qword_25FC38);
  v127 = *(_QWORD *)(v124 - 8);
  v6 = *(_DWORD *)(v127 + 84);
  v7 = *(_QWORD *)(type metadata accessor for ColorScheme(0) - 8);
  v8 = 8;
  if (*(_QWORD *)(v7 + 64) <= 8uLL)
    v9 = 8;
  else
    v9 = *(_QWORD *)(v7 + 64);
  v125 = v6;
  if (v6 <= 0x7FFFFFFC)
    v10 = 2147483644;
  else
    v10 = v6;
  v11 = *(_QWORD *)(type metadata accessor for LocalizerRequest(0) - 8);
  v12 = *(_QWORD *)(v11 + 64);
  v126 = v11;
  v13 = *(unsigned __int8 *)(v11 + 80);
  v14 = ((v13 + 24) & ~v13) + v12;
  if (v12 > v14)
    v14 = v12;
  if (v14 <= ((v13 + 16) & ~v13) + v12)
    v14 = ((v13 + 16) & ~v13) + v12;
  if (v14 <= ((v12 + 7) & 0xFFFFFFFFFFFFFFF8) + 16)
    v14 = ((v12 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (v14 <= ((v12 + v13) & ~v13) + v12)
    v14 = ((v12 + v13) & ~v13) + v12;
  if (v14 <= 0x10)
    v15 = 16;
  else
    v15 = v14;
  if (v15 > 3)
    goto LABEL_21;
  v16 = ((1 << (8 * v15)) | 2u) >> (8 * v15);
  if (v16 > 0xFFF8)
  {
LABEL_23:
    v18 = 0x7FFFFFFF;
    goto LABEL_24;
  }
  v8 = v16 + 7;
  if (v16 > 0xF8)
    v17 = 16;
  else
LABEL_21:
    v17 = 8;
  v18 = (1 << v17) - v8;
  if ((v18 & 0x80000000) != 0)
    goto LABEL_23;
LABEL_24:
  if (v18 <= v10)
    v19 = v10;
  else
    v19 = v18;
  v20 = *(_QWORD *)(type metadata accessor for URL(0) - 8);
  v21 = 40;
  if (*(_QWORD *)(v20 + 64) > 0x28uLL)
    v21 = *(_QWORD *)(v20 + 64);
  v22 = *(_DWORD *)(v126 + 84);
  if (v22)
    v23 = v22 - 1;
  else
    v23 = 0;
  if (v19 <= v23)
    v24 = v23;
  else
    v24 = v19;
  v25 = *(_QWORD *)(a3 + 16);
  v26 = *(_QWORD *)(v25 - 8);
  v27 = *(_DWORD *)(v26 + 84);
  if (v24 <= v27)
    v24 = *(_DWORD *)(v26 + 84);
  if (v24 <= 0x7FFFFFFF)
    v28 = 0x7FFFFFFF;
  else
    v28 = v24;
  v29 = *(_QWORD *)(v127 + 64);
  v30 = *(unsigned __int8 *)(v127 + 80);
  v31 = *(_DWORD *)(v7 + 80);
  if (v15 > 3
    || ((v32 = ((1 << (8 * v15)) | 2u) >> (8 * v15), v32 <= 0xFFF8) ? (v33 = 2) : (v33 = 4), v32 <= 0xF8))
  {
    v33 = 1;
  }
  if (v22)
    v34 = v12;
  else
    v34 = v12 + 1;
  if (!a2)
    return 0;
  v35 = v31 & 0xF8 | 7;
  v36 = v9 + 11;
  v37 = v13 + 32;
  v38 = v13 & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  v39 = ~v13;
  v40 = *(_DWORD *)(v20 + 80) & 0xF8 | 7;
  v41 = v15 + 1 + ((v13 + 32 + ((v9 + 11 + ((v29 + v35 + ((v29 + v30) & ~v30)) & ~v35)) & 0xFFFFFFFFFFFFFFF8)) & v38);
  v42 = v21 + v13 + 1;
  v43 = *(unsigned __int8 *)(v26 + 80);
  v44 = v43 + 40;
  if (a2 > v28)
  {
    v45 = ((v44 + ((v34 + ((v42 + ((v41 + v33 + v40) & ~v40)) & v39) + 10) & 0xFFFFFFFFFFFFFFF8)) & ~v43)
        + *(_QWORD *)(v26 + 64);
    v46 = 8 * v45;
    if (v45 > 3)
      goto LABEL_52;
    v48 = ((a2 - v28 + ~(-1 << v46)) >> v46) + 1;
    if (HIWORD(v48))
    {
      v47 = *(_DWORD *)(a1 + v45);
      if (!v47)
        goto LABEL_69;
      goto LABEL_60;
    }
    if (v48 > 0xFF)
    {
      v47 = *(unsigned __int16 *)(a1 + v45);
      if (!*(_WORD *)(a1 + v45))
        goto LABEL_69;
      goto LABEL_60;
    }
    if (v48 >= 2)
    {
LABEL_52:
      v47 = *(unsigned __int8 *)(a1 + v45);
      if (!*(_BYTE *)(a1 + v45))
        goto LABEL_69;
LABEL_60:
      v49 = (v47 - 1) << v46;
      if (v45 > 3)
        v49 = 0;
      if ((_DWORD)v45)
      {
        if (v45 <= 3)
          v50 = ((v44 + ((v34 + ((v42 + ((v41 + v33 + v40) & ~(_DWORD)v40)) & v39) + 10) & 0xFFFFFFF8)) & ~(_DWORD)v43)
              + *(_DWORD *)(v26 + 64);
        else
          v50 = 4;
        __asm { BR              X11 }
      }
      return v28 + v49 + 1;
    }
  }
LABEL_69:
  if (v15 > 3)
  {
    v51 = 8;
    goto LABEL_73;
  }
  v52 = ((1 << (8 * v15)) | 2u) >> (8 * v15);
  if (v52 <= 0xFFF8)
  {
    v51 = v52 + 7;
    if (v52 > 0xF8)
    {
      v53 = 16;
LABEL_74:
      v54 = (1 << v53) - v51;
      if ((v54 & 0x80000000) == 0)
        goto LABEL_76;
      goto LABEL_75;
    }
LABEL_73:
    v53 = 8;
    goto LABEL_74;
  }
LABEL_75:
  v54 = 0x7FFFFFFF;
LABEL_76:
  if (v54 <= v10)
    v54 = v10;
  if (v54 <= v23)
    v54 = v23;
  if (v54 <= v27)
    v55 = *(_DWORD *)(v26 + 84);
  else
    v55 = v54;
  if (v55 <= 0x7FFFFFFF)
    v56 = 0x7FFFFFFF;
  else
    v56 = v55;
  if (v15 > 3)
  {
    v57 = 8;
LABEL_90:
    v59 = 8;
    goto LABEL_91;
  }
  v58 = ((1 << (8 * v15)) | 2u) >> (8 * v15);
  if (v58 > 0xFFF8)
  {
LABEL_92:
    v60 = 0x7FFFFFFF;
    goto LABEL_93;
  }
  v57 = v58 + 7;
  if (v58 <= 0xF8)
    goto LABEL_90;
  v59 = 16;
LABEL_91:
  v60 = (1 << v59) - v57;
  if ((v60 & 0x80000000) != 0)
    goto LABEL_92;
LABEL_93:
  v61 = ~v40;
  if (v60 <= v10)
    v60 = v10;
  if (v60 <= v23)
    v60 = v23;
  if (v60 == v56)
  {
    if (v15 <= 3)
    {
      v67 = ((1 << (8 * v15)) | 2u) >> (8 * v15);
      if (v67 > 0xFFF8)
      {
LABEL_113:
        v69 = 0x7FFFFFFF;
LABEL_114:
        if (v69 <= v10)
          v69 = v10;
        if (v69 <= v23)
          v69 = v23;
        if (v15 > 3)
          goto LABEL_122;
        v70 = ((1 << (8 * v15)) | 2u) >> (8 * v15);
        v71 = 2;
        if (v70 > 0xFFF8)
          v71 = 4;
        if (v70 <= 0xF8)
LABEL_122:
          v71 = 1;
        v91 = v56 >= v69;
        v72 = v56 - v69;
        if (v72 == 0 || !v91)
        {
LABEL_144:
          if (v15 <= 3)
          {
            v83 = ((1 << (8 * v15)) | 2u) >> (8 * v15);
            if (v83 > 0xFFF8)
            {
LABEL_150:
              v85 = 0x7FFFFFFF;
LABEL_151:
              if (v85 <= v10)
                v85 = v10;
              if (v85 <= v23)
                v86 = v23;
              else
                v86 = v85;
              if (v125 == v86)
              {
                v77 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v127 + 48);
                v76 = a1;
                v78 = v125;
                v25 = v124;
                return v77(v76, v78, v25);
              }
              v87 = (unint64_t *)((v36 + ((((v29 + v30 + a1) & ~v30) + v29 + v35) & ~v35)) & 0xFFFFFFFFFFFFFFF8);
              if (v86 == 2147483644)
              {
                v88 = *v87;
                if (v88 >= 0xFFFFFFFF)
                  LODWORD(v88) = -1;
                v89 = v88 + 1;
                v90 = v88 - 2;
                v91 = v89 >= 4;
                goto LABEL_184;
              }
              v92 = (unint64_t)v87 + v37;
              if (v15 <= 3)
              {
                v94 = ((1 << (8 * v15)) | 2u) >> (8 * v15);
                if (v94 > 0xFFF8)
                {
LABEL_170:
                  v96 = 0x7FFFFFFF;
LABEL_171:
                  v97 = v92 & v38;
                  if (v96 != v86)
                  {
                    if (v15 > 3)
                      goto LABEL_181;
                    v102 = ((1 << (8 * v15)) | 2u) >> (8 * v15);
                    v103 = 2;
                    if (v102 > 0xFFF8)
                      v103 = 4;
                    if (v102 <= 0xF8)
LABEL_181:
                      v103 = 1;
                    if (v22 >= 2)
                    {
                      v104 = (*(uint64_t (**)(unint64_t))(v126 + 48))((v42
                                                                                      + ((v15 + 1 + v97 + v40 + v103) & v61)) & v39);
                      v90 = v104 - 1;
                      v91 = v104 >= 2;
LABEL_184:
                      if (v91)
                        return v90;
                      else
                        return 0;
                    }
                    return 0;
                  }
                  if (v15 <= 3)
                  {
                    v105 = ((1 << (8 * v15)) | 2u) >> (8 * v15);
                    v99 = v15 + 1;
                    if (v105 > 0xFFF8)
                      goto LABEL_191;
                    v98 = v105 + 7;
                    if (v105 > 0xF8)
                    {
                      v100 = 16;
LABEL_175:
                      v101 = (1 << v100) - v98;
                      if ((v101 & 0x80000000) == 0)
                      {
LABEL_192:
                        if (v15 <= 3)
                        {
                          v106 = ((1 << (8 * v15)) | 2u) >> (8 * v15);
                          if (v106 >= 0xF9)
                          {
                            v107 = v106 > 0xFFF8;
                            v108 = 2;
                            if (v107)
                              v108 = 4;
                            v99 = v108 + v15;
                          }
                        }
                        v109 = v86 - v101;
                        if (v86 <= v101)
                          goto LABEL_215;
                        v110 = 8 * v99;
                        if (v99 > 3)
                          goto LABEL_199;
                        v112 = ((v109 + ~(-1 << v110)) >> v110) + 1;
                        if (HIWORD(v112))
                        {
                          v111 = *(_DWORD *)(v97 + v99);
                        }
                        else
                        {
                          if (v112 <= 0xFF)
                          {
                            if (v112 < 2)
                              goto LABEL_215;
LABEL_199:
                            v111 = *(unsigned __int8 *)(v97 + v99);
                            goto LABEL_207;
                          }
                          v111 = *(unsigned __int16 *)(v97 + v99);
                        }
LABEL_207:
                        if (v111)
                        {
                          v113 = (v111 - 1) << v110;
                          if (v99 > 3)
                            v113 = 0;
                          if ((_DWORD)v99)
                          {
                            if (v99 <= 3)
                              v114 = v99;
                            else
                              v114 = 4;
                            __asm { BR              X13 }
                          }
                          return v101 + v113 + 1;
                        }
LABEL_215:
                        if (v101)
                        {
                          if (v15 <= 3)
                          {
                            v120 = ((1 << (8 * v15)) | 2u) >> (8 * v15);
                            if (v120 > 0xFFF8)
                            {
                              v116 = *(_DWORD *)(v97 + v15);
                              v117 = ~v116;
LABEL_226:
                              v123 = 0x7FFFFFFF;
LABEL_227:
                              if (v123 > v117)
                                return -v116;
                              else
                                return 0;
                            }
                            v118 = v120 + 7;
                            if (v120 > 0xF8)
                            {
                              v122 = *(unsigned __int16 *)(v97 + v15);
                              v116 = v122 | 0xFFFF0000;
                              v117 = v122 ^ 0xFFFF;
                              v119 = 16;
                            }
                            else
                            {
                              v121 = *(unsigned __int8 *)(v97 + v15);
                              v116 = v121 | 0xFFFFFF00;
                              v117 = v121 ^ 0xFF;
                              v119 = 8;
                            }
                          }
                          else
                          {
                            v115 = *(unsigned __int8 *)(v97 + v15);
                            v116 = v115 | 0xFFFFFF00;
                            v117 = v115 ^ 0xFF;
                            v118 = 8;
                            v119 = 8;
                          }
                          v123 = (1 << v119) - v118;
                          if ((v123 & 0x80000000) == 0)
                            goto LABEL_227;
                          goto LABEL_226;
                        }
                        return 0;
                      }
LABEL_191:
                      v101 = 0x7FFFFFFF;
                      goto LABEL_192;
                    }
                  }
                  else
                  {
                    v98 = 8;
                    v99 = v15 + 1;
                  }
                  v100 = 8;
                  goto LABEL_175;
                }
                v93 = v94 + 7;
                if (v94 > 0xF8)
                {
                  v95 = 16;
LABEL_169:
                  v96 = (1 << v95) - v93;
                  if ((v96 & 0x80000000) == 0)
                    goto LABEL_171;
                  goto LABEL_170;
                }
              }
              else
              {
                v93 = 8;
              }
              v95 = 8;
              goto LABEL_169;
            }
            v82 = v83 + 7;
            if (v83 > 0xF8)
            {
              v84 = 16;
LABEL_149:
              v85 = (1 << v84) - v82;
              if ((v85 & 0x80000000) == 0)
                goto LABEL_151;
              goto LABEL_150;
            }
          }
          else
          {
            v82 = 8;
          }
          v84 = 8;
          goto LABEL_149;
        }
        v73 = ((v42 + ((v41 + v40 + v71) & v61)) & v39) + v34;
        v74 = 8 * v73;
        if (v73 > 3)
          goto LABEL_126;
        v79 = ((v72 + ~(-1 << v74)) >> v74) + 1;
        if (HIWORD(v79))
        {
          v75 = *(_DWORD *)(a1 + v73);
          if (!v75)
            goto LABEL_144;
        }
        else
        {
          if (v79 <= 0xFF)
          {
            if (v79 < 2)
              goto LABEL_144;
LABEL_126:
            v75 = *(unsigned __int8 *)(a1 + v73);
            if (!*(_BYTE *)(a1 + v73))
              goto LABEL_144;
            goto LABEL_137;
          }
          v75 = *(unsigned __int16 *)(a1 + v73);
          if (!*(_WORD *)(a1 + v73))
            goto LABEL_144;
        }
LABEL_137:
        v81 = (v75 - 1) << v74;
        if (v73 > 3)
          v81 = 0;
        if ((_DWORD)v73)
        {
          if (v73 > 3)
            LODWORD(v73) = 4;
          __asm { BR              X12 }
        }
        return v69 + v81 + 1;
      }
      v62 = v67 + 7;
      if (v67 > 0xF8)
      {
        v68 = 16;
LABEL_112:
        v69 = (1 << v68) - v62;
        if ((v69 & 0x80000000) == 0)
          goto LABEL_114;
        goto LABEL_113;
      }
    }
    else
    {
      v62 = 8;
    }
    v68 = 8;
    goto LABEL_112;
  }
  if (v15 > 3)
    goto LABEL_104;
  v63 = ((1 << (8 * v15)) | 2u) >> (8 * v15);
  v64 = 2;
  if (v63 > 0xFFF8)
    v64 = 4;
  if (v63 <= 0xF8)
LABEL_104:
    v64 = 1;
  v65 = (a1 + v34 + ((v42 + ((v41 + v40 + v64) & v61)) & v39) + 10) & 0xFFFFFFFFFFFFFFF8;
  if ((v55 & 0x80000000) != 0)
  {
    v76 = (v44 + v65) & ~v43;
    v77 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v26 + 48);
    v78 = *(unsigned int *)(v26 + 84);
    return v77(v76, v78, v25);
  }
  v66 = *(_QWORD *)(v65 + 24);
  if (v66 >= 0xFFFFFFFF)
    LODWORD(v66) = -1;
  return (v66 + 1);
}

void sub_18FED0(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unsigned int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  size_t v33;
  int v34;
  int v35;
  unsigned int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  char v40;

  v39 = *(_QWORD *)(sub_5440(&qword_25FC38) - 8);
  v7 = *(_DWORD *)(v39 + 84);
  v8 = *(_QWORD *)(type metadata accessor for ColorScheme(0) - 8);
  v9 = 8;
  if (*(_QWORD *)(v8 + 64) <= 8uLL)
    v10 = 8;
  else
    v10 = *(_QWORD *)(v8 + 64);
  if (v7 <= 0x7FFFFFFC)
    v7 = 2147483644;
  v11 = *(_QWORD *)(type metadata accessor for LocalizerRequest(0) - 8);
  v12 = *(_QWORD *)(v11 + 64);
  v38 = v11;
  v13 = *(unsigned __int8 *)(v11 + 80);
  v14 = ((v13 + 24) & ~v13) + v12;
  if (v12 > v14)
    v14 = v12;
  if (v14 <= ((v13 + 16) & ~v13) + v12)
    v14 = ((v13 + 16) & ~v13) + v12;
  if (v14 <= ((v12 + 7) & 0xFFFFFFFFFFFFFFF8) + 16)
    v14 = ((v12 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (v14 <= ((v12 + v13) & ~v13) + v12)
    v14 = ((v12 + v13) & ~v13) + v12;
  if (v14 <= 0x10)
    v15 = 16;
  else
    v15 = v14;
  v40 = 8 * v15;
  if (v15 > 3)
    goto LABEL_18;
  v18 = ((1 << v40) | 2u) >> v40;
  if (v18 > 0xFFF8)
  {
LABEL_24:
    v17 = 0x7FFFFFFF;
LABEL_25:
    if (v17 <= v7)
      v19 = v7;
    else
      v19 = v17;
    v20 = *(_QWORD *)(type metadata accessor for URL(0) - 8);
    if (*(_QWORD *)(v20 + 64) <= 0x28uLL)
      v21 = 40;
    else
      v21 = *(_QWORD *)(v20 + 64);
    v22 = *(_DWORD *)(v38 + 84);
    if (v22)
      v23 = v22 - 1;
    else
      v23 = 0;
    if (v19 <= v23)
      v24 = v23;
    else
      v24 = v19;
    v25 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
    if (v24 <= *(_DWORD *)(v25 + 84))
      v24 = *(_DWORD *)(v25 + 84);
    if (v24 <= 0x7FFFFFFF)
      v26 = 0x7FFFFFFF;
    else
      v26 = v24;
    if (v15 > 3)
      goto LABEL_46;
    v28 = ((1 << v40) | 2u) >> v40;
    v29 = 2;
    if (v28 > 0xFFF8)
      v29 = 4;
    if (v28 <= 0xF8)
LABEL_46:
      v29 = 1;
    v30 = *(_DWORD *)(v20 + 80) & 0xF8 | 7;
    v27 = *(_DWORD *)(v8 + 80) & 0xF8 | 7;
    v31 = (v21
         + v13
         + 1
         + ((v15
           + 1
           + ((v13
             + 32
             + ((v10
               + 11
               + ((*(_QWORD *)(v39 + 64)
                 + v27
                 + ((*(_QWORD *)(v39 + 64) + *(unsigned __int8 *)(v39 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v39 + 80))) & ~v27)) & 0xFFFFFFFFFFFFFFF8)) & (v13 & 0xF8 ^ 0xFFFFFFFFFFFFFFF8))
           + v29
           + v30) & ~v30)) & ~v13;
    if (v22)
      v32 = v12;
    else
      v32 = v12 + 1;
    v33 = ((*(unsigned __int8 *)(v25 + 80) + 40 + ((v32 + v31 + 10) & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80))
        + *(_QWORD *)(v25 + 64);
    if (a3 <= v26)
    {
      v34 = 0;
    }
    else if (v33 <= 3)
    {
      v36 = ((a3 - v26 + ~(-1 << (8 * v33))) >> (8 * v33)) + 1;
      if (HIWORD(v36))
      {
        v34 = 4;
      }
      else
      {
        v34 = v36 > 1;
        if (v36 >= 0x100)
          v34 = 2;
      }
    }
    else
    {
      v34 = 1;
    }
    if (v26 < a2)
    {
      v35 = ~v26 + a2;
      if (v33 < 4)
      {
        if ((_DWORD)v33)
        {
          v37 = v35 & ~(-1 << (8 * v33));
          bzero(a1, v33);
          if ((_DWORD)v33 == 3)
          {
            *(_WORD *)a1 = v37;
            a1[2] = BYTE2(v37);
          }
          else if ((_DWORD)v33 == 2)
          {
            *(_WORD *)a1 = v37;
          }
          else
          {
            *a1 = v37;
          }
        }
      }
      else
      {
        bzero(a1, v33);
        *(_DWORD *)a1 = v35;
      }
      __asm { BR              X10 }
    }
    __asm { BR              X24 }
  }
  v9 = v18 + 7;
  if (v18 <= 0xF8)
LABEL_18:
    v16 = 8;
  else
    v16 = 16;
  v17 = (1 << v16) - v9;
  if ((v17 & 0x80000000) == 0)
    goto LABEL_25;
  goto LABEL_24;
}

void sub_190544(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  char v16;
  uint64_t v17;

  *(_BYTE *)(a16 + v17) = v16;
}

void sub_190550(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  __int16 v16;
  uint64_t v17;

  *(_WORD *)(a16 + v17) = v16;
}

void sub_19055C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  int v16;
  uint64_t v17;

  *(_DWORD *)(a16 + v17) = v16;
}

uint64_t sub_190618(uint64_t result, size_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, unsigned int a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, char a17, uint64_t a18)
{
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  size_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  unsigned int v34;
  char v35;
  unsigned int v36;
  uint64_t (*v37)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  _OWORD *v41;
  unint64_t v42;
  int v43;
  unsigned int v44;
  char v45;
  int v46;
  unint64_t v47;
  int v48;
  unsigned int v49;
  uint64_t v50;
  void *v51;
  int v52;
  unsigned int v53;
  char v54;
  unsigned int v55;
  unsigned int v56;
  BOOL v57;
  uint64_t v58;
  BOOL v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  int v63;
  int v64;

  *(_BYTE *)(a18 + v29) = 0;
  if (v30 > 3)
  {
    v32 = 8;
    v33 = a12;
    goto LABEL_5;
  }
  v34 = ((1 << a17) | 2u) >> a17;
  v33 = a12;
  if (v34 <= 0xFFF8)
  {
    v32 = v34 + 7;
    if (v34 > 0xF8)
    {
      v35 = 16;
LABEL_6:
      v36 = (1 << v35) - v32;
      if ((v36 & 0x80000000) == 0)
        goto LABEL_8;
      goto LABEL_7;
    }
LABEL_5:
    v35 = 8;
    goto LABEL_6;
  }
LABEL_7:
  v36 = 0x7FFFFFFF;
LABEL_8:
  if (v36 <= v27)
    v36 = v27;
  if (v36 <= v18)
    v36 = v18;
  if ((_DWORD)v33 == v36)
  {
    v37 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a14 + 56);
    v38 = a18;
    v39 = v31;
    a3 = v33;
    return v37(v38, v39, a3, a10);
  }
  v41 = (_OWORD *)((result + ((((v24 + a18) & a6) + v23 + v26) & a5)) & 0xFFFFFFFFFFFFFFF8);
  if (v36 == 2147483644)
  {
    if (v31 > 0x7FFFFFFC)
    {
      *v41 = 0u;
      v41[1] = 0u;
      *(_DWORD *)v41 = v31 - 2147483645;
    }
    else
    {
      *(_QWORD *)v41 = (v31 + 2);
    }
    return result;
  }
  v42 = (unint64_t)v41 + v25;
  if (v30 > 3)
  {
    v43 = 8;
    goto LABEL_24;
  }
  v44 = ((1 << a17) | 2u) >> a17;
  if (v44 <= 0xFFF8)
  {
    v43 = v44 + 7;
    if (v44 > 0xF8)
    {
      v45 = 16;
LABEL_25:
      v46 = (1 << v45) - v43;
      if ((v46 & 0x80000000) == 0)
        goto LABEL_27;
      goto LABEL_26;
    }
LABEL_24:
    v45 = 8;
    goto LABEL_25;
  }
LABEL_26:
  v46 = 0x7FFFFFFF;
LABEL_27:
  v47 = v42 & v21;
  if (v46 == v36)
  {
    if (v30 <= 3)
    {
      v53 = ((1 << a17) | 2u) >> a17;
      if (v53 > 0xFFF8)
      {
LABEL_46:
        v55 = 0x7FFFFFFF;
LABEL_47:
        if (v30 <= 3)
        {
          v56 = ((1 << a17) | 2u) >> a17;
          if (v56 >= 0xF9)
          {
            v57 = v56 > 0xFFF8;
            v58 = 2;
            if (v57)
              v58 = 4;
            v28 = v58 + v30;
          }
        }
        v59 = v36 >= v55;
        v60 = v36 - v55;
        if (v60 != 0 && v59)
        {
          if (v28 <= 3)
          {
            v62 = ((v60 + ~(-1 << (8 * v28))) >> (8 * v28)) + 1;
            if (HIWORD(v62))
            {
              v61 = &dword_4;
            }
            else if (v62 >= 0x100)
            {
              v61 = 2;
            }
            else
            {
              v61 = v62 > 1;
            }
          }
          else
          {
            v61 = &dword_0 + 1;
          }
        }
        else
        {
          v61 = 0;
        }
        if (v55 >= v31)
          return ((uint64_t (*)(void))((char *)sub_190A8C + 4 * byte_1F4712[v61]))();
        v63 = ~v55 + v31;
        if (v28 < 4)
        {
          if ((_DWORD)v28)
          {
            v64 = v63 & ~(-1 << (8 * v28));
            bzero((void *)(v42 & v21), v28);
            if ((_DWORD)v28 == 3)
            {
              *(_WORD *)v47 = v64;
              *(_BYTE *)(v47 + 2) = BYTE2(v64);
            }
            else if ((_DWORD)v28 == 2)
            {
              *(_WORD *)v47 = v64;
            }
            else
            {
              *(_BYTE *)v47 = v64;
            }
          }
        }
        else
        {
          bzero((void *)(v42 & v21), v28);
          *(_DWORD *)v47 = v63;
        }
        return ((uint64_t (*)(void))((char *)&loc_190910 + 4 * byte_1F4717[v61]))();
      }
      v48 = v53 + 7;
      if (v53 > 0xF8)
      {
        v54 = 16;
LABEL_45:
        v55 = (1 << v54) - v48;
        if ((v55 & 0x80000000) == 0)
          goto LABEL_47;
        goto LABEL_46;
      }
    }
    else
    {
      v48 = 8;
    }
    v54 = 8;
    goto LABEL_45;
  }
  if (v30 > 3)
    goto LABEL_34;
  v49 = ((1 << a17) | 2u) >> a17;
  v50 = 2;
  if (v49 > 0xFFF8)
    v50 = 4;
  if (v49 <= 0xF8)
LABEL_34:
    v50 = 1;
  v51 = (void *)((v20 + ((v28 + v47 + v19 + v50) & v22)) & a15);
  if (v18 >= v31)
  {
    if (a3 >= 2)
    {
      v39 = (v31 + 1);
      v37 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a13 + 56);
      v38 = (uint64_t)v51;
      a10 = a9;
      return v37(v38, v39, a3, a10);
    }
  }
  else if ((_DWORD)a2)
  {
    if (a2 <= 3)
      v52 = a2;
    else
      v52 = 4;
    bzero(v51, a2);
    return ((uint64_t (*)(void))((char *)sub_1908B0 + 4 * byte_1F470E[v52 - 1]))();
  }
  return result;
}

void sub_190668(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, int a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, char a17, uint64_t a18)
{
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  int v22;
  int v23;
  unsigned int v24;
  unsigned int v25;

  *(_DWORD *)(a18 + v20) = 0;
  if (v21 <= 3)
  {
    v24 = ((1 << a17) | 2u) >> a17;
    v23 = a12;
    if (v24 > 0xFFF8)
    {
LABEL_6:
      v25 = 0x7FFFFFFF;
LABEL_7:
      if (v25 <= v19)
        v25 = v19;
      if (v25 <= v18)
        v25 = v18;
      if (v23 == v25)
        JUMPOUT(0x190708);
      JUMPOUT(0x190728);
    }
    v22 = v24 + 7;
    if (v24 > 0xF8)
      JUMPOUT(0x19077CLL);
  }
  else
  {
    v22 = 8;
    v23 = a12;
  }
  v25 = 256 - v22;
  if ((v25 & 0x80000000) == 0)
    goto LABEL_7;
  goto LABEL_6;
}

void sub_190674(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v16;

  *(_WORD *)(a16 + v16) = 0;
  JUMPOUT(0x19067CLL);
}

void sub_1908B0()
{
  char v0;
  _BYTE *v1;

  *v1 = v0;
}

void sub_1908F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  char v16;
  uint64_t v17;

  *(_BYTE *)(a16 + v17) = v16;
}

void sub_1908FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  int v16;
  uint64_t v17;

  *(_DWORD *)(a16 + v17) = v16;
}

void sub_190908(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  __int16 v16;
  uint64_t v17;

  *(_WORD *)(a16 + v17) = v16;
  JUMPOUT(0x190910);
}

void sub_190A8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, char a16)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  unsigned int v21;

  *(_BYTE *)(v16 + v17) = 0;
  v20 = -v19;
  if (v18 > 3)
    goto LABEL_4;
  v21 = ((1 << a16) | 2u) >> a16;
  if (v21 > 0xFFF8)
  {
    *(_DWORD *)(v16 + v18) = v20;
  }
  else
  {
    if (v21 <= 0xF8)
    {
LABEL_4:
      *(_BYTE *)(v16 + v18) = v20;
      return;
    }
    *(_WORD *)(v16 + v18) = v20;
  }
}

void sub_190AD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, char a16)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  unsigned int v21;

  *(_WORD *)(v16 + v17) = 0;
  v20 = -v19;
  if (v18 <= 3)
  {
    v21 = ((1 << a16) | 2u) >> a16;
    if (v21 > 0xFFF8)
    {
      *(_DWORD *)(v16 + v18) = v20;
LABEL_7:
      JUMPOUT(0x190910);
    }
    if (v21 > 0xF8)
      JUMPOUT(0x190B44);
  }
  *(_BYTE *)(v16 + v18) = v20;
  goto LABEL_7;
}

void sub_190B24()
{
  __int16 v0;
  _WORD *v1;

  *v1 = v0;
}

void sub_190B2C()
{
  int v0;
  uint64_t v1;

  *(_WORD *)v1 = v0;
  *(_BYTE *)(v1 + 2) = BYTE2(v0);
}

void sub_190B3C()
{
  int v0;
  _DWORD *v1;

  *v1 = v0;
}

void sub_190B7C()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_190B84()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

void sub_190B8C()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
}

uint64_t type metadata accessor for BuyButtonViewModelBase(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10E40(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for BuyButtonViewModelBase);
}

uint64_t type metadata accessor for BuyButtonViewModelBase.LongCaptionAlignment(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10E40(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for BuyButtonViewModelBase.LongCaptionAlignment);
}

_WORD *sub_190BB4(_WORD *result, _WORD *a2)
{
  *result = *a2;
  return result;
}

uint64_t sub_190BC0(unsigned __int16 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;

  if (!a2)
    return 0;
  if (a2 < 0xFFF)
    goto LABEL_17;
  if (a2 + 61441 <= 0xFFFEFFFF)
    v2 = 2;
  else
    v2 = 4;
  if (a2 + 61441 < 0xFF0000)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 16)) - 61441;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
      return (*a1 | (v4 << 16)) - 61441;
    }
    v4 = *((unsigned __int8 *)a1 + 2);
    if (*((_BYTE *)a1 + 2))
      return (*a1 | (v4 << 16)) - 61441;
  }
LABEL_17:
  v6 = ((*a1 >> 15) | (2 * ((*a1 >> 4) & 0x7E0 | (*a1 >> 2) & 0x1F))) ^ 0xFFF;
  if (v6 >= 0xFFE)
    v6 = -1;
  return v6 + 1;
}

uint64_t sub_190C6C(_WORD *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 61441 <= 0xFFFEFFFF)
    v3 = 2;
  else
    v3 = 4;
  if (a3 + 61441 < 0xFF0000)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFFE)
    return ((uint64_t (*)(void))((char *)&loc_190CB8 + 4 * byte_1F4731[v4]))();
  *a1 = a2 - 4095;
  return ((uint64_t (*)(void))((char *)sub_190CEC + 4 * byte_1F472C[v4]))();
}

uint64_t sub_190CEC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 2) = v1;
  return result;
}

uint64_t sub_190CF4(uint64_t result, int a2)
{
  *(_WORD *)(result + 2) = 0;
  if (a2)
    JUMPOUT(0x190CFCLL);
  return result;
}

uint64_t sub_190D1C(uint64_t result, int a2)
{
  unsigned int v2;

  *(_DWORD *)(result + 2) = 0;
  if (!a2)
    JUMPOUT(0x190D24);
  v2 = ((-a2 >> 1) & 0x7FF) - (a2 << 11);
  *(_WORD *)result = (16 * v2) & 0xFE00 | (4 * (v2 & 0x1F));
  return result;
}

uint64_t sub_190D28(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_190D30(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_190D3C(unsigned __int16 *a1)
{
  return *a1 >> 15;
}

_WORD *sub_190D48(_WORD *result)
{
  *result &= ~0x8000u;
  return result;
}

_WORD *sub_190D58(_WORD *result, __int16 a2)
{
  *result = *result & 0x183 | (a2 << 15);
  return result;
}

uint64_t sub_190D70(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;

  if (!a2)
    return 0;
  if (a2 < 0x3F)
    goto LABEL_17;
  if (a2 + 193 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 193) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 193;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 193;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 193;
  }
LABEL_17:
  v6 = ((*a1 >> 1) & 0x3E | (*a1 >> 7)) ^ 0x3F;
  if (v6 >= 0x3E)
    v6 = -1;
  return v6 + 1;
}

uint64_t sub_190E10(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 193 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 193) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0x3F)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0x3E)
    return ((uint64_t (*)(void))((char *)&loc_190E5C + 4 * byte_1F473B[v4]))();
  *a1 = a2 - 63;
  return ((uint64_t (*)(void))((char *)sub_190E90 + 4 * byte_1F4736[v4]))();
}

uint64_t sub_190E90(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_190E98(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x190EA0);
  return result;
}

uint64_t sub_190EB8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x190EC0);
  *(_BYTE *)result = 4 * (((-a2 >> 1) & 0x1F) - 32 * a2);
  return result;
}

uint64_t sub_190EC4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_190ECC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_190ED8(unsigned __int8 *a1)
{
  return *a1 >> 7;
}

_BYTE *sub_190EE4(_BYTE *result)
{
  *result &= ~0x80u;
  return result;
}

_BYTE *sub_190EF4(_BYTE *result, char a2)
{
  *result = *result & 3 | (a2 << 7);
  return result;
}

uint64_t type metadata accessor for BuyButtonViewModelBase.Kind(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10E40(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for BuyButtonViewModelBase.Kind);
}

uint64_t sub_190F14(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_190F60 + 4 * byte_1F4745[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_190F94 + 4 * byte_1F4740[v4]))();
}

uint64_t sub_190F94(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_190F9C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x190FA4);
  return result;
}

uint64_t sub_190FB0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x190FB8);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_190FBC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_190FC4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t type metadata accessor for BuyButtonViewModelBase.Style(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10E40(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for BuyButtonViewModelBase.Style);
}

uint64_t sub_190FDC(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_191028 + 4 * byte_1F474F[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_19105C + 4 * byte_1F474A[v4]))();
}

uint64_t sub_19105C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_191064(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x19106CLL);
  return result;
}

uint64_t sub_191078(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x191080);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_191084(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_19108C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t type metadata accessor for BuyButtonViewModelBase.OutlinedStyle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10E40(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for BuyButtonViewModelBase.OutlinedStyle);
}

uint64_t sub_1910A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(a3 + a2 - 8) + 40))(*(_QWORD *)(a3 + a2 - 16));
}

uint64_t sub_1910D4()
{
  return 16;
}

__n128 sub_1910E0(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

unint64_t static PaginatedResourceSetIntent.kind.getter()
{
  return 0xD00000000000001ALL;
}

uint64_t PaginatedResourceSetIntent.limit.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t PaginatedResourceSetIntent.init(href:limit:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  *(_QWORD *)a5 = result;
  *(_QWORD *)(a5 + 8) = a2;
  *(_QWORD *)(a5 + 16) = a3;
  *(_BYTE *)(a5 + 24) = a4 & 1;
  return result;
}

unint64_t PaginatedResourceSetIntent.jsRepresentation(in:)@<X0>(unint64_t *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t inited;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t result;
  _QWORD v13[14];

  v4 = *v1;
  v3 = v1[1];
  v5 = v1[2];
  v6 = *((_BYTE *)v1 + 24);
  v7 = sub_5440(&qword_26A098);
  inited = swift_initStackObject(v7, v13);
  *(_OWORD *)(inited + 16) = xmmword_1E1CE0;
  *(_QWORD *)(inited + 32) = 1717924456;
  *(_QWORD *)(inited + 40) = 0xE400000000000000;
  *(_QWORD *)(inited + 48) = v4;
  *(_QWORD *)(inited + 56) = v3;
  *(_QWORD *)(inited + 64) = 0x74696D696CLL;
  *(_QWORD *)(inited + 72) = 0xE500000000000000;
  if ((v6 & 1) != 0)
  {
    swift_bridgeObjectRetain(v3);
    v9 = 0;
    v10 = 0;
  }
  else
  {
    v13[13] = v5;
    swift_bridgeObjectRetain(v3);
    v9 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt, &protocol witness table for UInt);
  }
  *(_QWORD *)(inited + 80) = v9;
  *(_QWORD *)(inited + 88) = v10;
  v11 = sub_9BC0(inited);
  a1[3] = sub_5440(&qword_26A0A0);
  result = sub_19122C();
  a1[4] = result;
  *a1 = v11;
  return result;
}

unint64_t sub_19122C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_26A0A8;
  if (!qword_26A0A8)
  {
    v1 = sub_7EF8(&qword_26A0A0);
    sub_191290();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_26A0A8);
  }
  return result;
}

unint64_t sub_191290()
{
  unint64_t result;
  uint64_t v1;

  result = qword_26A0B0[0];
  if (!qword_26A0B0[0])
  {
    v1 = sub_7EF8(&qword_25E950);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, qword_26A0B0);
  }
  return result;
}

BOOL static HostingViewBarType.== infix(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void HostingViewBarType.hash(into:)(uint64_t a1, char a2)
{
  Hasher._combine(_:)(a2 & 1);
}

uint64_t sub_191320(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 1717924456 && a2 == 0xE400000000000000)
  {
    v5 = 0xE400000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1717924456, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x74696D696CLL && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease(0xE500000000000000);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x74696D696CLL, 0xE500000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

Swift::Int HostingViewBarType.hashValue.getter(char a1)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(a1 & 1);
  return Hasher._finalize()();
}

uint64_t sub_19143C(char a1)
{
  if ((a1 & 1) != 0)
    return 0x74696D696CLL;
  else
    return 1717924456;
}

BOOL sub_191468(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return static HostingViewBarType.== infix(_:_:)(*a1, *a2);
}

Swift::Int sub_191478()
{
  char *v0;

  return HostingViewBarType.hashValue.getter(*v0);
}

void sub_191488(uint64_t a1)
{
  char *v1;

  HostingViewBarType.hash(into:)(a1, *v1);
}

Swift::Int sub_191498(uint64_t a1)
{
  char *v1;
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, a1);
  HostingViewBarType.hash(into:)((uint64_t)v3, *v1);
  return Hasher._finalize()();
}

uint64_t sub_1914DC()
{
  char *v0;

  return sub_19143C(*v0);
}

uint64_t sub_1914EC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_191320(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_191514@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_35C54();
  *a1 = result;
  return result;
}

uint64_t sub_19153C(uint64_t a1)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_1F4EB8, a1);
  return CodingKey.description.getter(a1, WitnessTable);
}

uint64_t sub_191570(uint64_t a1)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_1F4EB8, a1);
  return CodingKey.debugDescription.getter(a1, WitnessTable);
}

uint64_t PaginatedResourceSetIntent.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t WitnessTable;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t);
  char v21;
  char v22;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char v27;

  v25 = a5;
  v7 = type metadata accessor for PaginatedResourceSetIntent.CodingKeys(255, a2, a3, a4);
  WitnessTable = swift_getWitnessTable(&unk_1F4EB8, v7);
  v9 = type metadata accessor for KeyedDecodingContainer(0, v7);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v24 - v11;
  v13 = a1[3];
  v14 = a1[4];
  sub_5480(a1, v13);
  dispatch thunk of Decoder.container<A>(keyedBy:)(v7, v7, WitnessTable, v13, v14);
  if (v5)
    return _s7BooksUI13AnyPagedFrameVwxx_0(a1);
  v15 = v25;
  v27 = 0;
  v16 = KeyedDecodingContainer.decode(_:forKey:)(&v27, v9);
  v18 = v17;
  v26 = 1;
  swift_bridgeObjectRetain(v17);
  v19 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v26, v9);
  v20 = *(void (**)(char *, uint64_t))(v10 + 8);
  v22 = v21;
  v20(v12, v9);
  *(_QWORD *)v15 = v16;
  *(_QWORD *)(v15 + 8) = v18;
  *(_QWORD *)(v15 + 16) = v19;
  *(_BYTE *)(v15 + 24) = v22 & 1;
  _s7BooksUI13AnyPagedFrameVwxx_0(a1);
  return swift_bridgeObjectRelease(v18);
}

uint64_t type metadata accessor for PaginatedResourceSetIntent.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10E40(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PaginatedResourceSetIntent.CodingKeys);
}

unint64_t sub_191764@<X0>(_QWORD *a1@<X8>)
{
  unint64_t result;
  uint64_t v3;

  result = static PaginatedResourceSetIntent.kind.getter();
  *a1 = 0xD00000000000001ALL;
  a1[1] = v3;
  return result;
}

uint64_t sub_191790@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return PaginatedResourceSetIntent.init(from:)(a1, *(_QWORD *)(a2 + 16), a3, a4, a5);
}

unint64_t sub_1917A8@<X0>(unint64_t *a1@<X8>)
{
  return PaginatedResourceSetIntent.jsRepresentation(in:)(a1);
}

JSValue sub_1917BC(JSContext a1)
{
  return CustomJSValueConvertible._jsValue(in:)(a1);
}

uint64_t type metadata accessor for PaginatedResourceSet(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10E40(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PaginatedResourceSet);
}

uint64_t sub_1917E0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t sub_19181C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v6;
  return a1;
}

__n128 initializeWithTake for CoverGeometryReferenceBuilder(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t sub_19188C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

uint64_t sub_1918D0(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 25))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_191918(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 25) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t type metadata accessor for PaginatedResourceSetIntent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10E40(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PaginatedResourceSetIntent);
}

uint64_t sub_191968(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1919B4 + 4 * byte_1F4C95[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1919E8 + 4 * byte_1F4C90[v4]))();
}

uint64_t sub_1919E8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1919F0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1919F8);
  return result;
}

uint64_t sub_191A04(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x191A0CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_191A10(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_191A18(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_191A24(uint64_t a1)
{
  return swift_getWitnessTable(&unk_1F4E90, a1);
}

uint64_t sub_191A34(uint64_t a1)
{
  return swift_getWitnessTable(&unk_1F4E00, a1);
}

uint64_t sub_191A44(uint64_t a1)
{
  return swift_getWitnessTable(&unk_1F4E28, a1);
}

uint64_t sub_191A54(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

void sub_191A74(uint64_t a1, void *a2)
{
  void (*v2)(void);
  id v3;

  v2 = *(void (**)(void))(a1 + 32);
  v3 = a2;
  v2();

}

void UIImage.cornerRadius(_:)(double a1)
{
  void *v1;
  id v3;
  double v4;
  double v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  id v11;
  _QWORD v12[5];
  uint64_t v13;

  v3 = objc_msgSend(objc_allocWithZone((Class)UIGraphicsImageRendererFormat), "init");
  objc_msgSend(v1, "scale");
  objc_msgSend(v3, "setScale:");
  objc_msgSend(v1, "size");
  v6 = objc_msgSend(objc_allocWithZone((Class)UIGraphicsImageRenderer), "initWithSize:format:", v3, v4, v5);
  v7 = swift_allocObject(&unk_2587B8, 32, 7);
  *(_QWORD *)(v7 + 16) = v1;
  *(double *)(v7 + 24) = a1;
  v8 = swift_allocObject(&unk_2587E0, 32, 7);
  *(_QWORD *)(v8 + 16) = sub_191DCC;
  *(_QWORD *)(v8 + 24) = v7;
  v12[4] = sub_191DE8;
  v13 = v8;
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 1107296256;
  v12[2] = sub_191A74;
  v12[3] = &unk_2587F8;
  v9 = _Block_copy(v12);
  v10 = v13;
  v11 = v1;
  swift_retain(v8);
  objc_msgSend(v6, "imageWithActions:", v9, swift_release(v10).n128_f64[0]);

  _Block_release(v9);
  LOBYTE(v3) = swift_isEscapingClosureAtFileLocation(v8, "", 104, 16, 31, 1);
  swift_release(v7);
  swift_release(v8);
  if ((v3 & 1) != 0)
    __break(1u);
}

void sub_191C80(void *a1, id a2, double a3)
{
  double v6;
  double v7;
  double v8;
  double v9;
  id v10;
  CGContext *c;

  objc_msgSend(a2, "size");
  v7 = v6;
  v9 = v8;
  v10 = objc_msgSend((id)objc_opt_self(UIBezierPath), "bezierPathWithRoundedRect:cornerRadius:", 0.0, 0.0, v6, v8, a3);
  objc_msgSend(v10, "setLineJoinStyle:", 1);
  objc_msgSend(v10, "setLineCapStyle:", 1);
  objc_msgSend(v10, "closePath");
  c = (CGContext *)objc_msgSend(a1, "CGContext");
  CGContextSaveGState(c);
  objc_msgSend(v10, "addClip");
  objc_msgSend(a2, "drawInRect:", 0.0, 0.0, v7, v9);
  CGContextRestoreGState(c);

}

uint64_t sub_191DA8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void sub_191DCC(void *a1)
{
  uint64_t v1;

  sub_191C80(a1, *(id *)(v1 + 16), *(double *)(v1 + 24));
}

uint64_t sub_191DD8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_191DE8()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_191E08(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_191E18(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t ButtonView.init(model:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(char *, uint64_t, uint64_t);
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v4 = type metadata accessor for Font.TextStyle(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = 0x4020000000000000;
  v7 = enum case for Font.TextStyle.subheadline(_:);
  v9 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 104);
  v9(v6, enum case for Font.TextStyle.subheadline(_:), v4);
  v10 = sub_3CB54();
  ScaledMetric.init(wrappedValue:relativeTo:)(&v16, v6, &type metadata for Double, v10);
  v11 = type metadata accessor for ButtonView(0);
  v16 = 0x3FF8000000000000;
  v9(v6, v7, v4);
  ScaledMetric.init(wrappedValue:relativeTo:)(&v16, v6, &type metadata for Double, v10);
  v12 = (_QWORD *)(a2 + *(int *)(v11 + 24));
  *v12 = swift_getKeyPath(&unk_1F4F70);
  v13 = sub_5440(&qword_25FB20);
  swift_storeEnumTagMultiPayload(v12, v13, 0);
  return sub_21C88(a1, a2 + *(int *)(v11 + 28), type metadata accessor for ButtonViewModel);
}

uint64_t type metadata accessor for ButtonView(uint64_t a1)
{
  uint64_t result;

  result = qword_26A2F0;
  if (!qword_26A2F0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ButtonView);
  return result;
}

uint64_t ButtonView.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t OpaqueTypeConformance2;
  _QWORD v25[2];
  _QWORD v26[2];

  v25[1] = a1;
  v2 = type metadata accessor for ButtonViewModel(0);
  __chkstk_darwin(v2);
  v4 = (char *)v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = (int *)type metadata accessor for BooksBorderedButtonStyle(0);
  v6 = __chkstk_darwin(v5);
  v8 = (_QWORD *)((char *)v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v6);
  v10 = (char *)v25 - v9;
  v11 = sub_5440(&qword_26A238);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_19224C((uint64_t)v14);
  v15 = type metadata accessor for ButtonView(0);
  sub_1E428(v1 + *(int *)(v15 + 28), (uint64_t)v4, type metadata accessor for ButtonViewModel);
  *v8 = swift_getKeyPath(&unk_1F4FA8);
  v16 = sub_5440(&qword_25F548);
  swift_storeEnumTagMultiPayload(v8, v16, 0);
  v17 = (_QWORD *)((char *)v8 + v5[5]);
  *v17 = swift_getKeyPath(&unk_1F4FD0);
  v18 = sub_5440(&qword_25F208);
  swift_storeEnumTagMultiPayload(v17, v18, 0);
  v19 = (_QWORD *)((char *)v8 + v5[6]);
  *v19 = swift_getKeyPath(&unk_1F4FF8);
  swift_storeEnumTagMultiPayload(v19, v18, 0);
  v20 = (char *)v8 + v5[7];
  *(_QWORD *)v20 = swift_getKeyPath(&unk_1F5020);
  v20[8] = 0;
  sub_21C88((uint64_t)v4, (uint64_t)v8 + v5[8], type metadata accessor for ButtonViewModel);
  sub_21C88((uint64_t)v8, (uint64_t)v10, type metadata accessor for BooksBorderedButtonStyle);
  v21 = sub_7EF8(&qword_26A240);
  v22 = sub_196808();
  v26[0] = v21;
  v26[1] = v22;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v26, &opaque type descriptor for <<opaque return type of View.redacted(reason:)>>, 1);
  sub_6FD0(&qword_26A290, type metadata accessor for BooksBorderedButtonStyle, (uint64_t)&protocol conformance descriptor for BooksBorderedButtonStyle);
  View.buttonStyle<A>(_:)(v10, v11, v5, OpaqueTypeConformance2);
  sub_224DC((uint64_t)v10, type metadata accessor for BooksBorderedButtonStyle);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
}

uint64_t sub_19224C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t KeyPath;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  char *v21;
  unint64_t v22;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v31 = a1;
  v28 = type metadata accessor for ButtonViewModel.Content(0);
  __chkstk_darwin(v28);
  v3 = (char *)&v24 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for RedactionReasons(0);
  v29 = *(_QWORD *)(v4 - 8);
  v30 = v4;
  __chkstk_darwin(v4);
  v26 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_5440(&qword_26A258);
  __chkstk_darwin(v6);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_5440(&qword_26A240);
  __chkstk_darwin(v9);
  v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = sub_5440(&qword_26A238);
  v25 = *(_QWORD *)(v27 - 8);
  __chkstk_darwin(v27);
  v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_192510(v1, (uint64_t)v8);
  v14 = v1 + *(int *)(type metadata accessor for ButtonView(0) + 28);
  v15 = type metadata accessor for ButtonViewModel(0);
  v16 = *(_BYTE *)(v14 + *(int *)(v15 + 48));
  KeyPath = swift_getKeyPath(&unk_1F50B8);
  v18 = swift_allocObject(&unk_258830, 17, 7);
  *(_BYTE *)(v18 + 16) = (v16 & 1) == 0;
  sub_B3D0((uint64_t)v8, (uint64_t)v11, &qword_26A258);
  v19 = (uint64_t *)&v11[*(int *)(v9 + 36)];
  *v19 = KeyPath;
  v19[1] = (uint64_t)sub_3D3A0;
  v19[2] = v18;
  sub_B414((uint64_t)v8, &qword_26A258);
  sub_1E428(v14 + *(int *)(v15 + 44), (uint64_t)v3, type metadata accessor for ButtonViewModel.Content);
  LODWORD(KeyPath) = swift_getEnumCaseMultiPayload(v3, v28);
  v20 = sub_224DC((uint64_t)v3, type metadata accessor for ButtonViewModel.Content);
  if ((_DWORD)KeyPath == 9)
  {
    v21 = v26;
    static RedactionReasons.placeholder.getter(v20);
  }
  else
  {
    v21 = v26;
    RedactionReasons.init(rawValue:)(0);
  }
  v22 = sub_196808();
  View.redacted(reason:)(v21, v9, v22);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v21, v30);
  sub_B414((uint64_t)v11, &qword_26A240);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v25 + 32))(v31, v13, v27);
}

uint64_t sub_192510@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  char *v52;
  uint64_t v53;
  char *v54;
  uint64_t (**v55)@<X0>(uint64_t@<X8>);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD v60[4];
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD v76[3];
  uint64_t v77;
  uint64_t v78;
  __int128 v79;
  __int128 v80;
  uint64_t v81;
  _BYTE v82[48];

  v73 = a2;
  v74 = sub_5440(&qword_26A288);
  v70 = *(char **)(v74 - 8);
  __chkstk_darwin(v74);
  v69 = (uint64_t)&v61 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v68 = type metadata accessor for URL(0);
  v67 = *(_QWORD *)(v68 - 8);
  v4 = __chkstk_darwin(v68);
  v63 = (char *)&v61 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v66 = (char *)&v61 - v6;
  v75 = sub_5440(&qword_26A338);
  __chkstk_darwin(v75);
  v8 = (char *)&v61 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DataStackID(0);
  __chkstk_darwin(v9);
  v65 = (char *)&v61 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for ButtonView(0);
  v62 = *(_QWORD *)(v11 - 8);
  v12 = *(_QWORD *)(v62 + 64);
  __chkstk_darwin(v11);
  v64 = (uint64_t)&v61 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_5440(qword_25E3E8);
  __chkstk_darwin(v13);
  v15 = (char *)&v61 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v72 = sub_5440(&qword_26A278);
  v16 = __chkstk_darwin(v72);
  v18 = (char *)&v61 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v71 = (uint64_t)&v61 - v19;
  v20 = type metadata accessor for ButtonViewModel.ActionKind(0);
  __chkstk_darwin(v20);
  v22 = (char *)&v61 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = a1;
  v24 = a1 + *(int *)(v11 + 28);
  v25 = type metadata accessor for ButtonViewModel(0);
  sub_1E428(v24 + *(int *)(v25 + 52), (uint64_t)v22, type metadata accessor for ButtonViewModel.ActionKind);
  if (swift_getEnumCaseMultiPayload(v22, v20) == 1)
  {
    v26 = v67;
    v27 = v66;
    v28 = v68;
    (*(void (**)(char *, char *, uint64_t))(v67 + 32))(v66, v22, v68);
    v29 = v63;
    v30 = (*(uint64_t (**)(char *, char *, uint64_t))(v26 + 16))(v63, v27, v28);
    __chkstk_darwin(v30);
    v60[1] = sub_5440(&qword_26A340);
    v60[2] = sub_198DD8();
    v60[0] = v60;
    v31 = v69;
    ((void (*)(char *, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t (*)@<X0>(uint64_t@<X8>)))ShareLink<>.init<>(item:subject:message:label:))(v29, 0, 0, 0, 0, 0, 0, 0, 0, sub_198DB8);
    v32 = (uint64_t)v70;
    v33 = v74;
    (*((void (**)(char *, uint64_t, uint64_t))v70 + 2))(v8, v31, v74);
    swift_storeEnumTagMultiPayload(v8, v75, 1);
    v34 = sub_7FD8(&qword_26A270, &qword_26A278, (uint64_t)&protocol conformance descriptor for BooksActionButton<A>);
    v35 = sub_7FD8(&qword_26A280, &qword_26A288, (uint64_t)&protocol conformance descriptor for ShareLink<A, B, C, D>);
    _ConditionalContent<>.init(storage:)(v8, v72, v33, v34, v35);
    (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v31, v33);
    return (*(uint64_t (**)(char *, uint64_t))(v26 + 8))(v27, v28);
  }
  else
  {
    v37 = (int *)v72;
    v69 = v23;
    v70 = v8;
    v38 = v74;
    sub_167A4((uint64_t)v22, (uint64_t)v82, &qword_25E840);
    v39 = type metadata accessor for ButtonRole(0);
    v40 = (uint64_t)v15;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 56))(v15, 1, 1, v39);
    sub_B3D0((uint64_t)v82, (uint64_t)v76, &qword_25E840);
    v41 = v77;
    if (v77)
    {
      v42 = v78;
      v43 = sub_5480(v76, v77);
      *((_QWORD *)&v80 + 1) = v41;
      v81 = *(_QWORD *)(v42 + 8);
      v44 = sub_C404(&v79);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v41 - 8) + 16))(v44, v43, v41);
      _s7BooksUI13AnyPagedFrameVwxx_0(v76);
    }
    else
    {
      sub_B414((uint64_t)v76, &qword_25E840);
      v79 = 0u;
      v80 = 0u;
      v81 = 0;
    }
    v45 = v64;
    sub_1E428(v69, v64, type metadata accessor for ButtonView);
    v46 = *(unsigned __int8 *)(v62 + 80);
    v47 = (v46 + 16) & ~v46;
    v48 = swift_allocObject(&unk_258858, v47 + v12, v46 | 7);
    v49 = sub_21C88(v45, v48 + v47, type metadata accessor for ButtonView);
    v50 = v65;
    static DataStackID.additionalEventData.getter(v49);
    AppAnalyticsData.init(_:)(v50);
    v51 = &v18[v37[9]];
    *(_QWORD *)v51 = swift_getKeyPath(&unk_1F50E8);
    v51[8] = 0;
    v52 = &v18[v37[10]];
    *(_QWORD *)v52 = swift_getKeyPath(&unk_1F5118);
    v53 = sub_5440(&qword_25E818);
    swift_storeEnumTagMultiPayload(v52, v53, 0);
    v54 = &v18[v37[11]];
    *(_QWORD *)v54 = swift_getKeyPath(&unk_1F5148);
    v54[40] = 0;
    sub_167A4(v40, (uint64_t)&v18[v37[12]], qword_25E3E8);
    sub_167A4((uint64_t)&v79, (uint64_t)&v18[v37[13]], &qword_25E820);
    v55 = (uint64_t (**)@<X0>(uint64_t@<X8>))&v18[v37[14]];
    *v55 = sub_1991D8;
    v55[1] = (uint64_t (*)@<X0>(uint64_t@<X8>))v48;
    v56 = v71;
    sub_167A4((uint64_t)v18, v71, &qword_26A278);
    v57 = (uint64_t)v70;
    sub_B3D0(v56, (uint64_t)v70, &qword_26A278);
    swift_storeEnumTagMultiPayload(v57, v75, 0);
    v58 = sub_7FD8(&qword_26A270, &qword_26A278, (uint64_t)&protocol conformance descriptor for BooksActionButton<A>);
    v59 = sub_7FD8(&qword_26A280, &qword_26A288, (uint64_t)&protocol conformance descriptor for ShareLink<A, B, C, D>);
    _ConditionalContent<>.init(storage:)(v57, v37, v38, v58, v59);
    sub_B414(v56, &qword_26A278);
    return sub_B414((uint64_t)v82, &qword_25E840);
  }
}

uint64_t sub_192C10@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __n128 v26;
  uint64_t KeyPath;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v31;
  uint64_t v32;

  v32 = a1;
  v31 = type metadata accessor for Font.Leading(0);
  v2 = *(_QWORD *)(v31 - 8);
  __chkstk_darwin(v31);
  v4 = (char *)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_5440(&qword_25FE08);
  __chkstk_darwin(v5);
  v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Font.TextStyle(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for FontConstants.Button(0);
  __chkstk_darwin(v12);
  v14 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_5440(&qword_26A358);
  v16 = __chkstk_darwin(v15);
  v18 = (char *)&v31 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v18 = static VerticalAlignment.center.getter(v16);
  *((_QWORD *)v18 + 1) = 0;
  v18[16] = 1;
  v19 = sub_5440(&qword_26A360);
  sub_192EDC(v1, (uint64_t)&v18[*(int *)(v19 + 44)]);
  type metadata accessor for ButtonView(0);
  type metadata accessor for ButtonViewModel(0);
  sub_32198((uint64_t)v14);
  (*(void (**)(char *, _QWORD, uint64_t))(v9 + 104))(v11, enum case for Font.TextStyle.subheadline(_:), v8);
  v20 = type metadata accessor for Font.Design(0);
  v21 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v7, 1, 1, v20);
  v22 = static Font.Weight.semibold.getter(v21);
  v23 = static Font.system(_:design:weight:)(v11, v7, *(_QWORD *)&v22, 0);
  sub_B414((uint64_t)v7, &qword_25FE08);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  v24 = v31;
  (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, enum case for Font.Leading.tight(_:), v31);
  v25 = Font.leading(_:)(v4, v23);
  v26 = swift_release(v23);
  (*(void (**)(char *, uint64_t, __n128))(v2 + 8))(v4, v24, v26);
  sub_224DC((uint64_t)v14, type metadata accessor for FontConstants.Button);
  KeyPath = swift_getKeyPath(&unk_1F5178);
  v28 = v32;
  sub_B3D0((uint64_t)v18, v32, &qword_26A358);
  v29 = (uint64_t *)(v28 + *(int *)(sub_5440(&qword_26A340) + 36));
  *v29 = KeyPath;
  v29[1] = v25;
  return sub_B414((uint64_t)v18, &qword_26A358);
}

void sub_192EDC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  _QWORD v40[7];
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  char *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;

  v94 = a2;
  v68 = sub_5440(&qword_266F88);
  v51 = *(_QWORD *)(v68 - 8);
  __chkstk_darwin(v68);
  v50 = (char *)v40 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = sub_5440(&qword_266F98);
  __chkstk_darwin(v64);
  v65 = (char *)v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v81 = sub_5440(&qword_266FA0);
  __chkstk_darwin(v81);
  v66 = (char *)v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v67 = sub_5440(&qword_266FA8);
  v49 = *(_QWORD *)(v67 - 8);
  __chkstk_darwin(v67);
  v48 = (char *)v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = sub_5440(&qword_25FF30);
  __chkstk_darwin(v41);
  v45 = (char *)v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = type metadata accessor for Image.Scale(0);
  v43 = *(_QWORD *)(v44 - 8);
  __chkstk_darwin(v44);
  v42 = (char *)v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = sub_5440(&qword_25FF38);
  v9 = __chkstk_darwin(v61);
  v40[6] = (char *)v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v47 = (char *)v40 - v11;
  v75 = sub_5440(&qword_26A368);
  __chkstk_darwin(v75);
  v78 = (char *)v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = sub_5440(&qword_26A370);
  __chkstk_darwin(v55);
  v56 = (char *)v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v77 = sub_5440(&qword_26A378);
  __chkstk_darwin(v77);
  v60 = (char *)v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v89 = sub_5440(&qword_26A380);
  __chkstk_darwin(v89);
  v82 = (char *)v40 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = sub_5440(&qword_26A388);
  __chkstk_darwin(v53);
  v46 = (char *)v40 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = sub_5440(&qword_26A390);
  __chkstk_darwin(v59);
  v62 = (char *)v40 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v79 = sub_5440(&qword_26A398);
  __chkstk_darwin(v79);
  v63 = (char *)v40 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v83 = sub_5440(&qword_26A3A0);
  v70 = *(_QWORD *)(v83 - 8);
  __chkstk_darwin(v83);
  v69 = (char *)v40 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v91 = sub_5440(&qword_26A3A8);
  __chkstk_darwin(v91);
  v93 = (char *)v40 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v86 = sub_5440(&qword_26A3B0);
  __chkstk_darwin(v86);
  v88 = (char *)v40 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v73 = sub_5440(&qword_26A3B8);
  __chkstk_darwin(v73);
  v76 = (char *)v40 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = sub_5440(&qword_26A3C0);
  __chkstk_darwin(v52);
  v54 = (char *)v40 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v74 = sub_5440(&qword_26A3C8);
  __chkstk_darwin(v74);
  v58 = (char *)v40 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v87 = sub_5440(&qword_26A3D0);
  __chkstk_darwin(v87);
  v80 = (char *)v40 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v92 = sub_5440(&qword_26A3D8);
  __chkstk_darwin(v92);
  v90 = (char *)v40 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = type metadata accessor for ButtonView(0);
  v71 = *(_QWORD *)(v27 - 8);
  v28 = *(_QWORD *)(v71 + 64);
  __chkstk_darwin(v27);
  v72 = (char *)v40 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v57 = sub_5440(&qword_26A3E0);
  v40[5] = *(_QWORD *)(v57 - 8);
  __chkstk_darwin(v57);
  v40[4] = (char *)v40 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = type metadata accessor for LocalizerRequest(0);
  v31 = *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64);
  v32 = __chkstk_darwin(v30);
  v84 = (char *)v40 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v32);
  v33 = type metadata accessor for ButtonViewModel.Content(0);
  __chkstk_darwin(v33);
  v35 = (char *)v40 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = *(int *)(v27 + 28);
  v85 = a1;
  v37 = a1 + v36;
  v38 = type metadata accessor for ButtonViewModel(0);
  sub_1E428(v37 + *(int *)(v38 + 44), (uint64_t)v35, type metadata accessor for ButtonViewModel.Content);
  v39 = (char *)sub_1936F0 + 4 * word_1F4F20[swift_getEnumCaseMultiPayload(v35, v33)];
  __asm { BR              X10 }
}

uint64_t sub_1936F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;

  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 32);
  *(_QWORD *)(v6 - 664) = v5;
  v7(v5, v2, v4);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 16);
  v9 = v1;
  *(_QWORD *)(v6 - 672) = v1;
  v10 = *(_QWORD *)(v6 - 288);
  *(_QWORD *)(v6 - 680) = v4;
  v8(v10, v5, v4);
  v11 = *(_QWORD *)(v6 - 384);
  sub_1E428(*(_QWORD *)(v6 - 280), v11, type metadata accessor for ButtonView);
  v12 = *(unsigned __int8 *)(v9 + 80);
  v13 = (v12 + 16) & ~v12;
  v14 = *(unsigned __int8 *)(*(_QWORD *)(v6 - 392) + 80);
  v15 = (v0 + v14 + v13) & ~v14;
  v16 = swift_allocObject(&unk_2588F8, v15 + v3, v12 | v14 | 7);
  v7(v16 + v13, v10, v4);
  sub_21C88(v11, v16 + v15, type metadata accessor for ButtonView);
  v17 = sub_5440(&qword_26A448);
  v18 = type metadata accessor for _JetLocalizeDefaultWorking(0);
  v19 = type metadata accessor for _JetLocalizeDefaultFailed(0);
  v20 = sub_19A0E0();
  v21 = sub_6FD0(&qword_25FEE0, (uint64_t (*)(uint64_t))&type metadata accessor for _JetLocalizeDefaultWorking, (uint64_t)&protocol conformance descriptor for _JetLocalizeDefaultWorking);
  v22 = sub_6FD0(&qword_25FEE8, (uint64_t (*)(uint64_t))&type metadata accessor for _JetLocalizeDefaultFailed, (uint64_t)&protocol conformance descriptor for _JetLocalizeDefaultFailed);
  v23 = *(_QWORD *)(v6 - 656);
  JetLocalize.init(working:failed:content:)(&j___s18_JetEngine_SwiftUI01_A22LocalizeDefaultWorkingVACycfC, 0, sub_4ED68, 0, sub_19A068, v16, v17, v18, v19, v20, v21, v22);
  v24 = *(_QWORD *)(v6 - 648);
  v25 = *(_QWORD *)(v6 - 528);
  v26 = *(_QWORD *)(v6 - 504);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 16))(v25, v23, v26);
  swift_storeEnumTagMultiPayload(v25, *(_QWORD *)(v6 - 544), 0);
  v27 = sub_7FD8(&qword_26A408, &qword_26A3E0, (uint64_t)&protocol conformance descriptor for JetLocalize<A, B, C>);
  v28 = sub_7FD8(&qword_26A410, &qword_26A3A0, (uint64_t)&protocol conformance descriptor for JetLocalize<A, B, C>);
  v29 = *(_QWORD *)(v6 - 496);
  _ConditionalContent<>.init(storage:)(v25, v26, *(_QWORD *)(v6 - 296), v27, v28);
  v30 = *(_QWORD *)(v6 - 352);
  sub_B3D0(v29, v30, &qword_26A3C8);
  swift_storeEnumTagMultiPayload(v30, *(_QWORD *)(v6 - 376), 0);
  v31 = sub_19925C();
  v32 = sub_199300();
  v33 = *(_QWORD *)(v6 - 320);
  _ConditionalContent<>.init(storage:)(v30, *(_QWORD *)(v6 - 368), *(_QWORD *)(v6 - 328), v31, v32);
  sub_B414(v29, &qword_26A3C8);
  v34 = *(_QWORD *)(v6 - 256);
  sub_B3D0(v33, v34, &qword_26A3D0);
  swift_storeEnumTagMultiPayload(v34, *(_QWORD *)(v6 - 272), 0);
  v35 = sub_199238();
  v36 = sub_19937C();
  v37 = *(_QWORD *)(v6 - 240);
  _ConditionalContent<>.init(storage:)(v34, *(_QWORD *)(v6 - 264), *(_QWORD *)(v6 - 248), v35, v36);
  sub_B414(v33, &qword_26A3D0);
  v38 = *(_QWORD *)(v6 - 216);
  sub_B3D0(v37, v38, &qword_26A3D8);
  swift_storeEnumTagMultiPayload(v38, *(_QWORD *)(v6 - 232), 0);
  v39 = sub_5440(&qword_26A3E8);
  v40 = sub_2F608(&qword_26A3F0, &qword_26A3D8, (void (*)(void))sub_199238, (void (*)(void))sub_19937C);
  v41 = sub_199424();
  _ConditionalContent<>.init(storage:)(v38, *(_QWORD *)(v6 - 224), v39, v40, v41);
  sub_B414(v37, &qword_26A3D8);
  (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v23, v26);
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v6 - 672) + 8))(*(_QWORD *)(v6 - 664), *(_QWORD *)(v6 - 680));
}

uint64_t sub_195074@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  _BYTE *v18;
  void (*v19)(_BYTE *, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  _BYTE v41[12];
  int v42;
  uint64_t v43;
  uint64_t KeyPath;
  uint64_t v45;
  uint64_t v46;
  _QWORD v47[2];
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;

  v43 = a3;
  v46 = a4;
  v6 = sub_5440(&qword_25E0C8);
  __chkstk_darwin(v6);
  v8 = &v41[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = type metadata accessor for LocalizerRequest(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = &v41[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v14 = __chkstk_darwin(v11);
  v16 = &v41[-v15];
  __chkstk_darwin(v14);
  v18 = &v41[-v17];
  v19 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v10 + 16);
  v19(&v41[-v17], a2, v9);
  KeyPath = a1;
  sub_BD00(a1, (uint64_t)v47);
  v20 = Text.init(_:localizer:)(v18, v47);
  v22 = v21;
  v42 = v23;
  v45 = v24;
  v25 = v43 + *(int *)(type metadata accessor for ButtonView(0) + 28);
  v26 = type metadata accessor for ButtonViewModel(0);
  sub_B3D0(v25 + *(int *)(v26 + 56), (uint64_t)v8, &qword_25E0C8);
  v19(v13, a2, v9);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 32))(v16, v13, v9);
    sub_B414((uint64_t)v8, &qword_25E0C8);
  }
  else
  {
    (*(void (**)(_BYTE *, uint64_t))(v10 + 8))(v13, v9);
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 32))(v16, v8, v9);
  }
  v27 = v42 & 1;
  sub_BD00(KeyPath, (uint64_t)v47);
  v28 = Text.init(_:localizer:)(v16, v47);
  v30 = v29;
  v32 = v31;
  v34 = v33 & 1;
  KeyPath = swift_getKeyPath(&unk_1F51D8);
  v47[0] = v20;
  v47[1] = v22;
  v48 = v27;
  v35 = v22;
  v36 = v20;
  v37 = v45;
  v49 = v45;
  v50 = KeyPath;
  v51 = 3;
  v52 = 0;
  sub_34B1C(v36, v35, v27);
  swift_bridgeObjectRetain(v37);
  v38 = sub_5440(&qword_26A460);
  v39 = sub_19A164();
  View.accessibilityLabel(_:)(v28, v30, v34, v32, v38, v39);
  sub_2B574(v28, v30, v34);
  swift_bridgeObjectRelease(v32);
  sub_2B574(v36, v35, v27);
  swift_bridgeObjectRelease(v37);
  sub_2B574(v36, v35, v27);
  swift_release(KeyPath);
  return swift_bridgeObjectRelease(v37);
}

uint64_t sub_19535C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  void (*v27)(char *, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  char v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  id v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  void *v58;
  void *v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t OpaqueTypeConformance2;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v72;
  unsigned int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  id v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void *v90;
  void *v91;
  char v92;
  uint64_t v93;

  v79 = a6;
  v78 = a5;
  v77 = a4;
  v85 = a7;
  v10 = type metadata accessor for AccessibilityChildBehavior(0);
  v82 = *(_QWORD *)(v10 - 8);
  v83 = v10;
  __chkstk_darwin(v10);
  v81 = (char *)&v72 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_5440(qword_2679D8);
  v86 = *(_QWORD *)(v12 - 8);
  v87 = v12;
  __chkstk_darwin(v12);
  v84 = (char *)&v72 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_5440(&qword_25E0C8);
  __chkstk_darwin(v14);
  v16 = (char *)&v72 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for LocalizerRequest(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = __chkstk_darwin(v17);
  v21 = (char *)&v72 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __chkstk_darwin(v19);
  v24 = (char *)&v72 - v23;
  __chkstk_darwin(v22);
  v26 = (char *)&v72 - v25;
  v27 = *(void (**)(char *, uint64_t, uint64_t))(v18 + 16);
  v27((char *)&v72 - v25, a2, v17);
  sub_BD00(a1, (uint64_t)&v90);
  v80 = Text.init(_:localizer:)(v26, &v90);
  v88 = v28;
  v89 = v29;
  v31 = v30;
  v32 = a3 + *(int *)(type metadata accessor for ButtonView(0) + 28);
  v33 = type metadata accessor for ButtonViewModel(0);
  sub_B3D0(v32 + *(int *)(v33 + 56), (uint64_t)v16, &qword_25E0C8);
  v27(v21, a2, v17);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17) == 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v24, v21, v17);
    sub_B414((uint64_t)v16, &qword_25E0C8);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v18 + 8))(v21, v17);
    (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v24, v16, v17);
  }
  v34 = v31 & 1;
  v72 = v31 & 1;
  sub_BD00(a1, (uint64_t)&v90);
  v75 = Text.init(_:localizer:)(v24, &v90);
  v74 = v35;
  v76 = v36;
  v73 = v37 & 1;
  v38 = v78;
  swift_bridgeObjectRetain(v78);
  v39 = v79;
  v40 = v79;
  v41 = Image.init(_:bundle:)(v77, v38, v39);
  v42 = Text.init(_:)(v41);
  v44 = v43;
  v46 = v45;
  v48 = v47 & 1;
  v49 = static Text.+ infix(_:_:)(v42, v43, v47 & 1, v45, 32, 0xE100000000000000, 0, _swiftEmptyArrayStorage);
  v51 = v50;
  v53 = v52;
  v55 = v54 & 1;
  sub_2B574(v42, v44, v48);
  swift_bridgeObjectRelease(v46);
  v56 = v80;
  v57 = (void *)static Text.+ infix(_:_:)(v49, v51, v55, v53, v80, v88, v34, v89);
  v59 = v58;
  LOBYTE(v44) = v60;
  v62 = v61;
  sub_2B574(v49, v51, v55);
  v63 = swift_bridgeObjectRelease(v53);
  v90 = v57;
  v91 = v59;
  v92 = v44 & 1;
  v93 = v62;
  v64 = v81;
  static AccessibilityChildBehavior.combine.getter(v63);
  v65 = v84;
  View.accessibilityElement(children:)(v64, &type metadata for Text, &protocol witness table for Text);
  (*(void (**)(char *, uint64_t))(v82 + 8))(v64, v83);
  sub_2B574((uint64_t)v90, (uint64_t)v91, v92);
  swift_bridgeObjectRelease(v93);
  v90 = &type metadata for Text;
  v91 = &protocol witness table for Text;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v90, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
  v67 = v75;
  v68 = v74;
  LOBYTE(v34) = v73;
  v69 = v76;
  v70 = v87;
  View.accessibilityLabel(_:)(v75, v74, v73, v76, v87, OpaqueTypeConformance2);
  sub_2B574(v67, v68, v34);
  swift_bridgeObjectRelease(v69);
  sub_2B574(v56, v88, v72);
  swift_bridgeObjectRelease(v89);
  return (*(uint64_t (**)(char *, uint64_t))(v86 + 8))(v65, v70);
}

uint64_t sub_1957F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  void (*v26)(char *, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  char v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  void *v55;
  void *v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t OpaqueTypeConformance2;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v69;
  int v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void *v87;
  void *v88;
  char v89;
  uint64_t v90;

  v76 = a5;
  v75 = a4;
  v82 = a6;
  v9 = type metadata accessor for AccessibilityChildBehavior(0);
  v79 = *(_QWORD *)(v9 - 8);
  v80 = v9;
  __chkstk_darwin(v9);
  v78 = (char *)&v69 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_5440(qword_2679D8);
  v83 = *(_QWORD *)(v11 - 8);
  v84 = v11;
  __chkstk_darwin(v11);
  v81 = (char *)&v69 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_5440(&qword_25E0C8);
  __chkstk_darwin(v13);
  v15 = (char *)&v69 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for LocalizerRequest(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = __chkstk_darwin(v16);
  v20 = (char *)&v69 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __chkstk_darwin(v18);
  v23 = (char *)&v69 - v22;
  __chkstk_darwin(v21);
  v25 = (char *)&v69 - v24;
  v26 = *(void (**)(char *, uint64_t, uint64_t))(v17 + 16);
  v26((char *)&v69 - v24, a2, v16);
  sub_BD00(a1, (uint64_t)&v87);
  v77 = Text.init(_:localizer:)(v25, &v87);
  v85 = v27;
  v86 = v28;
  v30 = v29;
  v31 = a3 + *(int *)(type metadata accessor for ButtonView(0) + 28);
  v32 = type metadata accessor for ButtonViewModel(0);
  sub_B3D0(v31 + *(int *)(v32 + 56), (uint64_t)v15, &qword_25E0C8);
  v26(v20, a2, v16);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16) == 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v23, v20, v16);
    sub_B414((uint64_t)v15, &qword_25E0C8);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v17 + 8))(v20, v16);
    (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v23, v15, v16);
  }
  v33 = v30 & 1;
  v70 = v30 & 1;
  sub_BD00(a1, (uint64_t)&v87);
  v73 = Text.init(_:localizer:)(v23, &v87);
  v72 = v34;
  v74 = v35;
  v71 = v36 & 1;
  v37 = v76;
  swift_bridgeObjectRetain(v76);
  v38 = Image.init(systemName:)(v75, v37);
  v39 = Text.init(_:)(v38);
  v41 = v40;
  v43 = v42;
  v45 = v44 & 1;
  v46 = static Text.+ infix(_:_:)(v39, v40, v44 & 1, v42, 32, 0xE100000000000000, 0, _swiftEmptyArrayStorage);
  v48 = v47;
  v50 = v49;
  v52 = v51 & 1;
  sub_2B574(v39, v41, v45);
  swift_bridgeObjectRelease(v43);
  v53 = v77;
  v54 = (void *)static Text.+ infix(_:_:)(v46, v48, v52, v50, v77, v85, v33, v86);
  v56 = v55;
  LOBYTE(v41) = v57;
  v59 = v58;
  sub_2B574(v46, v48, v52);
  v60 = swift_bridgeObjectRelease(v50);
  v87 = v54;
  v88 = v56;
  v89 = v41 & 1;
  v90 = v59;
  v61 = v78;
  static AccessibilityChildBehavior.combine.getter(v60);
  v62 = v81;
  View.accessibilityElement(children:)(v61, &type metadata for Text, &protocol witness table for Text);
  (*(void (**)(char *, uint64_t))(v79 + 8))(v61, v80);
  sub_2B574((uint64_t)v87, (uint64_t)v88, v89);
  swift_bridgeObjectRelease(v90);
  v87 = &type metadata for Text;
  v88 = &protocol witness table for Text;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v87, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
  v64 = v73;
  v65 = v72;
  LOBYTE(v41) = v71;
  v66 = v74;
  v67 = v84;
  View.accessibilityLabel(_:)(v73, v72, v71, v74, v84, OpaqueTypeConformance2);
  sub_2B574(v64, v65, v41);
  swift_bridgeObjectRelease(v66);
  sub_2B574(v53, v85, v70);
  swift_bridgeObjectRelease(v86);
  return (*(uint64_t (**)(char *, uint64_t))(v83 + 8))(v62, v67);
}

uint64_t sub_195C6C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  void (*v26)(char *, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  char v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  void *v54;
  void *v55;
  void *v56;
  char v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t OpaqueTypeConformance2;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v69;
  uint64_t v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  void *v89;
  char v90;
  uint64_t v91;

  v77 = a4;
  v78 = a5;
  v83 = a6;
  v9 = type metadata accessor for AccessibilityChildBehavior(0);
  v80 = *(_QWORD *)(v9 - 8);
  v81 = v9;
  __chkstk_darwin(v9);
  v79 = (char *)&v69 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_5440(qword_2679D8);
  v84 = *(_QWORD *)(v11 - 8);
  v85 = v11;
  __chkstk_darwin(v11);
  v82 = (char *)&v69 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_5440(&qword_25E0C8);
  __chkstk_darwin(v13);
  v15 = (char *)&v69 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for LocalizerRequest(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = __chkstk_darwin(v16);
  v20 = (char *)&v69 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __chkstk_darwin(v18);
  v23 = (char *)&v69 - v22;
  __chkstk_darwin(v21);
  v25 = (char *)&v69 - v24;
  v26 = *(void (**)(char *, uint64_t, uint64_t))(v17 + 16);
  v26((char *)&v69 - v24, a2, v16);
  v76 = a1;
  sub_BD00(a1, (uint64_t)&v88);
  v27 = Text.init(_:localizer:)(v25, &v88);
  v86 = v28;
  v87 = v27;
  v30 = v29;
  v32 = v31;
  v33 = a3 + *(int *)(type metadata accessor for ButtonView(0) + 28);
  v34 = type metadata accessor for ButtonViewModel(0);
  sub_B3D0(v33 + *(int *)(v34 + 56), (uint64_t)v15, &qword_25E0C8);
  v26(v20, a2, v16);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16) == 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v23, v20, v16);
    sub_B414((uint64_t)v15, &qword_25E0C8);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v17 + 8))(v20, v16);
    (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v23, v15, v16);
  }
  v74 = v30 & 1;
  sub_BD00(v76, (uint64_t)&v88);
  v73 = Text.init(_:localizer:)(v23, &v88);
  v72 = v35;
  v76 = v36;
  v71 = v37 & 1;
  v75 = v32;
  v38 = static Text.+ infix(_:_:)(v87, v86, v30 & 1, v32, 32, 0xE100000000000000, 0, _swiftEmptyArrayStorage);
  v40 = v39;
  v42 = v41;
  v70 = v41;
  v44 = v43 & 1;
  v45 = v78;
  swift_bridgeObjectRetain(v78);
  v46 = Image.init(systemName:)(v77, v45);
  v47 = Text.init(_:)(v46);
  v49 = v48;
  v51 = v50;
  v53 = v52 & 1;
  v54 = (void *)static Text.+ infix(_:_:)(v38, v40, v44, v42, v47, v48, v53, v50);
  v56 = v55;
  v58 = v57;
  v78 = v59;
  sub_2B574(v47, v49, v53);
  swift_bridgeObjectRelease(v51);
  sub_2B574(v38, v40, v44);
  v60 = swift_bridgeObjectRelease(v70);
  v88 = v54;
  v89 = v56;
  v90 = v58 & 1;
  v61 = v79;
  v91 = v78;
  static AccessibilityChildBehavior.combine.getter(v60);
  v62 = v82;
  View.accessibilityElement(children:)(v61, &type metadata for Text, &protocol witness table for Text);
  (*(void (**)(char *, uint64_t))(v80 + 8))(v61, v81);
  sub_2B574((uint64_t)v88, (uint64_t)v89, v90);
  swift_bridgeObjectRelease(v91);
  v88 = &type metadata for Text;
  v89 = &protocol witness table for Text;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v88, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
  v64 = v73;
  v65 = v72;
  LOBYTE(v56) = v71;
  v66 = v76;
  v67 = v85;
  View.accessibilityLabel(_:)(v73, v72, v71, v76, v85, OpaqueTypeConformance2);
  sub_2B574(v64, v65, (char)v56);
  swift_bridgeObjectRelease(v66);
  sub_2B574(v87, v86, v74);
  swift_bridgeObjectRelease(v75);
  return (*(uint64_t (**)(char *, uint64_t))(v84 + 8))(v62, v67);
}

uint64_t sub_196104@<X0>(char *a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  void (*v29)(char *, char *, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t KeyPath;
  void (*v34)(char *, char *, uint64_t);
  uint64_t *v35;
  uint64_t (*v36)(char *, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;

  v59 = a3;
  v57 = a2;
  v61 = a1;
  v68 = a4;
  v4 = type metadata accessor for BlendMode(0);
  v66 = *(_QWORD *)(v4 - 8);
  v67 = v4;
  __chkstk_darwin(v4);
  v65 = (char *)&v55 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for FontConstants.Button(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v55 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = sub_5440(&qword_25FE10);
  __chkstk_darwin(v56);
  v10 = (char *)&v55 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58 = sub_5440(&qword_26A468);
  __chkstk_darwin(v58);
  v12 = (char *)&v55 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = sub_5440(&qword_26A470);
  v13 = __chkstk_darwin(v60);
  v64 = (uint64_t)&v55 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v13);
  v62 = (char *)&v55 - v16;
  __chkstk_darwin(v15);
  v63 = (uint64_t)&v55 - v17;
  v18 = type metadata accessor for LocalizerRequest(0);
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v21 = (char *)&v55 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for LocalizedText(0);
  v23 = *(_QWORD *)(v22 - 8);
  v24 = __chkstk_darwin(v22);
  v26 = (char *)&v55 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  v28 = (char *)&v55 - v27;
  v29 = *(void (**)(char *, char *, uint64_t))(v19 + 16);
  v29(v21, v61, v18);
  v61 = v28;
  LocalizedText.init(_:)(v21);
  v29(v21, v57, v18);
  LocalizedText.init(_:)(v21);
  v30 = type metadata accessor for ButtonView(0);
  v31 = v59;
  sub_32198((uint64_t)v8);
  v32 = _s7BooksUI13FontConstantsV6ButtonV8subtitle05SwiftB00C0Vvg_0();
  sub_224DC((uint64_t)v8, type metadata accessor for FontConstants.Button);
  KeyPath = swift_getKeyPath(&unk_1F5178);
  v34 = *(void (**)(char *, char *, uint64_t))(v23 + 16);
  v34(v10, v26, v22);
  v35 = (uint64_t *)&v10[*(int *)(v56 + 36)];
  *v35 = KeyPath;
  v35[1] = v32;
  v36 = *(uint64_t (**)(char *, uint64_t))(v23 + 8);
  v37 = v36(v26, v22);
  LODWORD(v32) = static HierarchicalShapeStyle.secondary.getter(v37);
  sub_B3D0((uint64_t)v10, (uint64_t)v12, &qword_25FE10);
  *(_DWORD *)&v12[*(int *)(v58 + 36)] = v32;
  sub_B414((uint64_t)v10, &qword_25FE10);
  v38 = v31 + *(int *)(v30 + 28);
  v39 = v38 + *(int *)(type metadata accessor for ButtonViewModel(0) + 40);
  v41 = *(_QWORD *)v39;
  v40 = *(_QWORD *)(v39 + 8);
  v42 = *(_QWORD *)(v39 + 16);
  v43 = *(_QWORD *)(v39 + 24);
  if (*(_QWORD *)v39 == 2)
  {
    v44 = (unsigned int *)&enum case for BlendMode.plusLighter(_:);
  }
  else
  {
    sub_13DDA0(*(_QWORD *)v39, *(_QWORD *)(v39 + 8), *(_QWORD *)(v39 + 16), *(_QWORD *)(v39 + 24));
    v44 = (unsigned int *)&enum case for BlendMode.normal(_:);
  }
  sub_13E100(v41, v40, v42, v43);
  sub_13E100(2uLL, 0, 0, 0);
  v46 = v65;
  v45 = v66;
  v47 = v67;
  (*(void (**)(char *, _QWORD, uint64_t))(v66 + 104))(v65, *v44, v67);
  v48 = (uint64_t)v62;
  (*(void (**)(char *, char *, uint64_t))(v45 + 16))(&v62[*(int *)(v60 + 36)], v46, v47);
  sub_B3D0((uint64_t)v12, v48, &qword_26A468);
  (*(void (**)(char *, uint64_t))(v45 + 8))(v46, v47);
  sub_B414((uint64_t)v12, &qword_26A468);
  v49 = v63;
  sub_167A4(v48, v63, &qword_26A470);
  v50 = v61;
  v34(v26, v61, v22);
  v51 = v64;
  sub_B3D0(v49, v64, &qword_26A470);
  v52 = v68;
  v34(v68, v26, v22);
  v53 = sub_5440(&qword_26A478);
  sub_B3D0(v51, (uint64_t)&v52[*(int *)(v53 + 48)], &qword_26A470);
  sub_B414(v49, &qword_26A470);
  v36(v50, v22);
  sub_B414(v51, &qword_26A470);
  return v36(v26, v22);
}

_QWORD *sub_1965D0@<X0>(uint64_t a1@<X8>)
{
  unint64_t v2;
  _QWORD *result;
  char v4;
  uint64_t v5;
  char v6;

  v2 = sub_198D5C();
  result = EnvironmentValues.subscript.getter(&v5, &type metadata for ShelfBackgroundKindKey, &type metadata for ShelfBackgroundKindKey, v2);
  v4 = v6;
  *(_QWORD *)a1 = v5;
  *(_BYTE *)(a1 + 8) = v4;
  return result;
}

uint64_t sub_196624(uint64_t a1)
{
  char v1;
  unint64_t v2;
  unint64_t v4;
  char v5;

  v1 = *(_BYTE *)(a1 + 8);
  v4 = *(_QWORD *)a1;
  v5 = v1;
  sub_1825FC(v4, v1);
  v2 = sub_198D5C();
  return EnvironmentValues.subscript.setter(&v4, &type metadata for ShelfBackgroundKindKey, &type metadata for ShelfBackgroundKindKey, v2);
}

uint64_t sub_19667C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char v10;
  void (*v11)(char *, uint64_t);
  uint64_t v12;
  unsigned int *v13;
  uint64_t v15;

  v2 = type metadata accessor for ColorScheme(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v4);
  v9 = (char *)&v15 - v8;
  EnvironmentValues.colorScheme.getter(v7);
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v6, enum case for ColorScheme.light(_:), v2);
  v10 = static ColorScheme.== infix(_:_:)(v9, v6);
  v11 = *(void (**)(char *, uint64_t))(v3 + 8);
  v11(v6, v2);
  v11(v9, v2);
  v12 = type metadata accessor for BlendMode(0);
  v13 = (unsigned int *)&enum case for BlendMode.multiply(_:);
  if ((v10 & 1) == 0)
    v13 = (unsigned int *)&enum case for BlendMode.screen(_:);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v12 - 8) + 104))(a1, *v13, v12);
}

_QWORD *sub_19679C@<X0>(uint64_t a1@<X8>)
{
  unint64_t v2;
  _QWORD *result;
  char v4;
  uint64_t v5;
  char v6;

  v2 = sub_198D5C();
  result = EnvironmentValues.subscript.getter(&v5, &type metadata for ShelfBackgroundKindKey, &type metadata for ShelfBackgroundKindKey, v2);
  v4 = v6;
  *(_QWORD *)a1 = v5;
  *(_BYTE *)(a1 + 8) = v4;
  return result;
}

uint64_t sub_1967F4@<X0>(uint64_t result@<X0>, BOOL *a2@<X8>)
{
  *a2 = *(_BYTE *)(result + 8) == 0;
  return result;
}

unint64_t sub_196808()
{
  unint64_t result;
  uint64_t v1;

  result = qword_26A248;
  if (!qword_26A248)
  {
    v1 = sub_7EF8(&qword_26A240);
    sub_19688C();
    sub_7FD8(&qword_25FE80, &qword_25FE88, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyTransformModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_26A248);
  }
  return result;
}

unint64_t sub_19688C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_26A250;
  if (!qword_26A250)
  {
    v1 = sub_7EF8(&qword_26A258);
    sub_1968F0();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> Group<A>, v1);
    atomic_store(result, (unint64_t *)&qword_26A250);
  }
  return result;
}

unint64_t sub_1968F0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_26A260;
  if (!qword_26A260)
  {
    v1 = sub_7EF8(&qword_26A268);
    sub_7FD8(&qword_26A270, &qword_26A278, (uint64_t)&protocol conformance descriptor for BooksActionButton<A>);
    sub_7FD8(&qword_26A280, &qword_26A288, (uint64_t)&protocol conformance descriptor for ShareLink<A, B, C, D>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_26A260);
  }
  return result;
}

uint64_t sub_19698C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &opaque type descriptor for <<opaque return type of ButtonView.body>>, 1);
}

uint64_t *initializeBufferWithCopyOfBuffer for ButtonView(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v9;
  _WORD *v10;
  _WORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  int *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  id v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  void (*v70)(char *, char *, uint64_t);
  uint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  __int128 v79;
  uint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t *v87;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v20 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v20);
  }
  else
  {
    v7 = sub_5440(&qword_25FC38);
    v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v8((uint64_t *)((char *)a1 + a3[5]), (uint64_t *)((char *)a2 + a3[5]), v7);
    v9 = a3[6];
    v10 = (_WORD *)((char *)a1 + v9);
    v11 = (_WORD *)((char *)a2 + v9);
    v12 = sub_5440(&qword_25FB20);
    if (swift_getEnumCaseMultiPayload(v11, v12) == 1)
    {
      *v10 = *v11;
      v13 = type metadata accessor for FontConstants.Environment(0);
      v14 = *(int *)(v13 + 24);
      v87 = a1;
      v15 = (char *)v10 + v14;
      v16 = (char *)v11 + v14;
      v17 = type metadata accessor for DynamicTypeSize(0);
      v18 = v15;
      a1 = v87;
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v18, v16, v17);
      *(_QWORD *)((char *)v10 + *(int *)(v13 + 28)) = *(_QWORD *)((char *)v11 + *(int *)(v13 + 28));
      v19 = 1;
    }
    else
    {
      v21 = *(_QWORD *)v11;
      *(_QWORD *)v10 = *(_QWORD *)v11;
      swift_retain(v21);
      v19 = 0;
    }
    swift_storeEnumTagMultiPayload(v10, v12, v19);
    v22 = a3[7];
    v23 = (char *)a1 + v22;
    v24 = (char *)a2 + v22;
    v8((uint64_t *)((char *)a1 + v22), (uint64_t *)v24, v7);
    v25 = (int *)type metadata accessor for ButtonViewModel(0);
    v8((uint64_t *)&v23[v25[5]], (uint64_t *)&v24[v25[5]], v7);
    v26 = v25[6];
    v27 = &v23[v26];
    v28 = &v24[v26];
    v29 = sub_5440(&qword_25F1E8);
    if (swift_getEnumCaseMultiPayload(v28, v29) == 1)
    {
      v30 = type metadata accessor for ColorScheme(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v30 - 8) + 16))(v27, v28, v30);
      v31 = v27;
      v32 = v29;
      v33 = 1;
    }
    else
    {
      v34 = *(_QWORD *)v28;
      *(_QWORD *)v27 = *(_QWORD *)v28;
      swift_retain(v34);
      v31 = v27;
      v32 = v29;
      v33 = 0;
    }
    swift_storeEnumTagMultiPayload(v31, v32, v33);
    v23[v25[7]] = v24[v25[7]];
    v23[v25[8]] = v24[v25[8]];
    v23[v25[9]] = v24[v25[9]];
    v35 = v25[10];
    v36 = &v23[v35];
    v37 = &v24[v35];
    v38 = *(_QWORD *)v37;
    if (*(_QWORD *)v37 >= 3uLL)
    {
      v40 = *((_QWORD *)v37 + 1);
      v41 = *((_QWORD *)v37 + 2);
      *(_QWORD *)v36 = v38;
      *((_QWORD *)v36 + 1) = v40;
      v42 = *((_QWORD *)v37 + 3);
      *((_QWORD *)v36 + 2) = v41;
      *((_QWORD *)v36 + 3) = v42;
      swift_retain(v38);
      swift_retain(v40);
      swift_retain(v41);
      swift_retain(v42);
    }
    else
    {
      v39 = *((_OWORD *)v37 + 1);
      *(_OWORD *)v36 = *(_OWORD *)v37;
      *((_OWORD *)v36 + 1) = v39;
    }
    v43 = v25[11];
    v44 = &v23[v43];
    v45 = &v24[v43];
    v46 = type metadata accessor for ButtonViewModel.Content(0);
    switch(swift_getEnumCaseMultiPayload(v45, v46))
    {
      case 0u:
        v47 = type metadata accessor for LocalizerRequest(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v47 - 8) + 16))(v44, v45, v47);
        v48 = v44;
        v49 = v46;
        v50 = 0;
        goto LABEL_20;
      case 1u:
        v51 = *((_QWORD *)v45 + 1);
        *(_QWORD *)v44 = *(_QWORD *)v45;
        *((_QWORD *)v44 + 1) = v51;
        swift_bridgeObjectRetain(v51);
        v48 = v44;
        v49 = v46;
        v50 = 1;
        goto LABEL_20;
      case 2u:
        v52 = *((_QWORD *)v45 + 1);
        *(_QWORD *)v44 = *(_QWORD *)v45;
        *((_QWORD *)v44 + 1) = v52;
        v53 = (void *)*((_QWORD *)v45 + 2);
        *((_QWORD *)v44 + 2) = v53;
        swift_bridgeObjectRetain(v52);
        v54 = v53;
        v55 = *(int *)(sub_5440(&qword_2621A8) + 64);
        v56 = &v44[v55];
        v57 = &v45[v55];
        v58 = type metadata accessor for LocalizerRequest(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v58 - 8) + 16))(v56, v57, v58);
        v48 = v44;
        v49 = v46;
        v50 = 2;
        goto LABEL_20;
      case 3u:
        v59 = *((_QWORD *)v45 + 1);
        *(_QWORD *)v44 = *(_QWORD *)v45;
        *((_QWORD *)v44 + 1) = v59;
        swift_bridgeObjectRetain(v59);
        v60 = *(int *)(sub_5440(&qword_2621B0) + 48);
        v61 = &v44[v60];
        v62 = &v45[v60];
        v63 = type metadata accessor for LocalizerRequest(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v63 - 8) + 16))(v61, v62, v63);
        v48 = v44;
        v49 = v46;
        v50 = 3;
        goto LABEL_20;
      case 4u:
        v64 = type metadata accessor for LocalizerRequest(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v64 - 8) + 16))(v44, v45, v64);
        v65 = *(int *)(sub_5440(&qword_2621B8) + 48);
        v66 = &v44[v65];
        v67 = &v45[v65];
        v68 = *((_QWORD *)v67 + 1);
        *(_QWORD *)v66 = *(_QWORD *)v67;
        *((_QWORD *)v66 + 1) = v68;
        swift_bridgeObjectRetain(v68);
        v48 = v44;
        v49 = v46;
        v50 = 4;
        goto LABEL_20;
      case 5u:
        v69 = type metadata accessor for LocalizerRequest(0);
        v70 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v69 - 8) + 16);
        v70(v44, v45, v69);
        v71 = sub_5440(&qword_2621C0);
        v70(&v44[*(int *)(v71 + 48)], &v45[*(int *)(v71 + 48)], v69);
        v48 = v44;
        v49 = v46;
        v50 = 5;
LABEL_20:
        swift_storeEnumTagMultiPayload(v48, v49, v50);
        break;
      default:
        memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
        break;
    }
    v23[v25[12]] = v24[v25[12]];
    v72 = v25[13];
    v73 = &v23[v72];
    v74 = &v24[v72];
    v75 = type metadata accessor for ButtonViewModel.ActionKind(0);
    if (swift_getEnumCaseMultiPayload(v74, v75) == 1)
    {
      v76 = type metadata accessor for URL(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v76 - 8) + 16))(v73, v74, v76);
      v77 = 1;
    }
    else
    {
      v77 = *((_QWORD *)v74 + 3);
      if (v77)
      {
        v78 = *((_QWORD *)v74 + 4);
        *((_QWORD *)v73 + 3) = v77;
        *((_QWORD *)v73 + 4) = v78;
        (**(void (***)(char *, char *))(v77 - 8))(v73, v74);
        v77 = 0;
      }
      else
      {
        v79 = *((_OWORD *)v74 + 1);
        *(_OWORD *)v73 = *(_OWORD *)v74;
        *((_OWORD *)v73 + 1) = v79;
        *((_QWORD *)v73 + 4) = *((_QWORD *)v74 + 4);
      }
    }
    swift_storeEnumTagMultiPayload(v73, v75, v77);
    v80 = v25[14];
    v81 = &v23[v80];
    v82 = &v24[v80];
    v83 = type metadata accessor for LocalizerRequest(0);
    v84 = *(_QWORD *)(v83 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v84 + 48))(v82, 1, v83))
    {
      v85 = sub_5440(&qword_25E0C8);
      memcpy(v81, v82, *(_QWORD *)(*(_QWORD *)(v85 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v84 + 16))(v81, v82, v83);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v84 + 56))(v81, 0, 1, v83);
    }
  }
  return a1;
}

uint64_t destroy for ButtonView(uint64_t a1, int *a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  int *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t);
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t result;

  v4 = sub_5440(&qword_25FC38);
  v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v5(a1, v4);
  v5(a1 + a2[5], v4);
  v6 = (_QWORD *)(a1 + a2[6]);
  v7 = sub_5440(&qword_25FB20);
  if (swift_getEnumCaseMultiPayload(v6, v7) == 1)
  {
    v8 = (char *)v6 + *(int *)(type metadata accessor for FontConstants.Environment(0) + 24);
    v9 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  }
  else
  {
    v10 = swift_release(*v6);
  }
  v11 = a1 + a2[7];
  ((void (*)(uint64_t, uint64_t, __n128))v5)(v11, v4, v10);
  v12 = (int *)type metadata accessor for ButtonViewModel(0);
  v5(v11 + v12[5], v4);
  v13 = (_QWORD *)(v11 + v12[6]);
  v14 = sub_5440(&qword_25F1E8);
  if (swift_getEnumCaseMultiPayload(v13, v14) == 1)
  {
    v15 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v13, v15);
  }
  else
  {
    swift_release(*v13);
  }
  v16 = (_QWORD *)(v11 + v12[10]);
  if (*v16 >= 3uLL)
  {
    swift_release(*v16);
    swift_release(v16[1]);
    swift_release(v16[2]);
    swift_release(v16[3]);
  }
  v17 = v11 + v12[11];
  v18 = type metadata accessor for ButtonViewModel.Content(0);
  switch(swift_getEnumCaseMultiPayload(v17, v18))
  {
    case 0u:
      goto LABEL_14;
    case 1u:
      swift_bridgeObjectRelease(*(_QWORD *)(v17 + 8));
      break;
    case 2u:
      swift_bridgeObjectRelease(*(_QWORD *)(v17 + 8));

      v19 = *(int *)(sub_5440(&qword_2621A8) + 64);
      goto LABEL_13;
    case 3u:
      swift_bridgeObjectRelease(*(_QWORD *)(v17 + 8));
      v19 = *(int *)(sub_5440(&qword_2621B0) + 48);
LABEL_13:
      v17 += v19;
LABEL_14:
      v20 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(v17, v20);
      break;
    case 4u:
      v21 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 8))(v17, v21);
      v22 = sub_5440(&qword_2621B8);
      swift_bridgeObjectRelease(*(_QWORD *)(v17 + *(int *)(v22 + 48) + 8));
      break;
    case 5u:
      v23 = type metadata accessor for LocalizerRequest(0);
      v24 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 8);
      v24(v17, v23);
      v25 = sub_5440(&qword_2621C0);
      v24(v17 + *(int *)(v25 + 48), v23);
      break;
    default:
      break;
  }
  v26 = (_QWORD *)(v11 + v12[13]);
  v27 = type metadata accessor for ButtonViewModel.ActionKind(0);
  if (swift_getEnumCaseMultiPayload(v26, v27) == 1)
  {
    v28 = type metadata accessor for URL(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v28 - 8) + 8))(v26, v28);
  }
  else if (v26[3])
  {
    _s7BooksUI13AnyPagedFrameVwxx_0(v26);
  }
  v29 = v11 + v12[14];
  v30 = type metadata accessor for LocalizerRequest(0);
  v31 = *(_QWORD *)(v30 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v31 + 8))(v29, v30);
  return result;
}

uint64_t initializeWithCopy for ButtonView(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  _WORD *v9;
  _WORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  id v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  void (*v68)(_QWORD *, _QWORD *, uint64_t);
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  __int128 v77;
  uint64_t v78;
  void *v79;
  const void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v85;

  v6 = sub_5440(&qword_25FC38);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v8 = a3[6];
  v9 = (_WORD *)(a1 + v8);
  v10 = (_WORD *)(a2 + v8);
  v11 = sub_5440(&qword_25FB20);
  if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
  {
    *v9 = *v10;
    v12 = type metadata accessor for FontConstants.Environment(0);
    v13 = *(int *)(v12 + 24);
    v85 = a1;
    v14 = (char *)v9 + v13;
    v15 = (char *)v10 + v13;
    v16 = type metadata accessor for DynamicTypeSize(0);
    v17 = v14;
    a1 = v85;
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v17, v15, v16);
    *(_QWORD *)((char *)v9 + *(int *)(v12 + 28)) = *(_QWORD *)((char *)v10 + *(int *)(v12 + 28));
    v18 = 1;
  }
  else
  {
    v19 = *(_QWORD *)v10;
    *(_QWORD *)v9 = *(_QWORD *)v10;
    swift_retain(v19);
    v18 = 0;
  }
  swift_storeEnumTagMultiPayload(v9, v11, v18);
  v20 = a3[7];
  v21 = a1 + v20;
  v22 = a2 + v20;
  v7(a1 + v20, v22, v6);
  v23 = (int *)type metadata accessor for ButtonViewModel(0);
  v7(v21 + v23[5], v22 + v23[5], v6);
  v24 = v23[6];
  v25 = (uint64_t *)(v21 + v24);
  v26 = (uint64_t *)(v22 + v24);
  v27 = sub_5440(&qword_25F1E8);
  if (swift_getEnumCaseMultiPayload(v26, v27) == 1)
  {
    v28 = type metadata accessor for ColorScheme(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v28 - 8) + 16))(v25, v26, v28);
    v29 = v25;
    v30 = v27;
    v31 = 1;
  }
  else
  {
    v32 = *v26;
    *v25 = *v26;
    swift_retain(v32);
    v29 = v25;
    v30 = v27;
    v31 = 0;
  }
  swift_storeEnumTagMultiPayload(v29, v30, v31);
  *(_BYTE *)(v21 + v23[7]) = *(_BYTE *)(v22 + v23[7]);
  *(_BYTE *)(v21 + v23[8]) = *(_BYTE *)(v22 + v23[8]);
  *(_BYTE *)(v21 + v23[9]) = *(_BYTE *)(v22 + v23[9]);
  v33 = v23[10];
  v34 = (_QWORD *)(v21 + v33);
  v35 = (_QWORD *)(v22 + v33);
  v36 = *v35;
  if (*v35 >= 3uLL)
  {
    v38 = v35[1];
    v39 = v35[2];
    *v34 = v36;
    v34[1] = v38;
    v40 = v35[3];
    v34[2] = v39;
    v34[3] = v40;
    swift_retain(v36);
    swift_retain(v38);
    swift_retain(v39);
    swift_retain(v40);
  }
  else
  {
    v37 = *((_OWORD *)v35 + 1);
    *(_OWORD *)v34 = *(_OWORD *)v35;
    *((_OWORD *)v34 + 1) = v37;
  }
  v41 = v23[11];
  v42 = (_QWORD *)(v21 + v41);
  v43 = (_QWORD *)(v22 + v41);
  v44 = type metadata accessor for ButtonViewModel.Content(0);
  switch(swift_getEnumCaseMultiPayload(v43, v44))
  {
    case 0u:
      v45 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v45 - 8) + 16))(v42, v43, v45);
      v46 = v42;
      v47 = v44;
      v48 = 0;
      goto LABEL_18;
    case 1u:
      v49 = v43[1];
      *v42 = *v43;
      v42[1] = v49;
      swift_bridgeObjectRetain(v49);
      v46 = v42;
      v47 = v44;
      v48 = 1;
      goto LABEL_18;
    case 2u:
      v50 = v43[1];
      *v42 = *v43;
      v42[1] = v50;
      v51 = (void *)v43[2];
      v42[2] = v51;
      swift_bridgeObjectRetain(v50);
      v52 = v51;
      v53 = *(int *)(sub_5440(&qword_2621A8) + 64);
      v54 = (char *)v42 + v53;
      v55 = (char *)v43 + v53;
      v56 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v56 - 8) + 16))(v54, v55, v56);
      v46 = v42;
      v47 = v44;
      v48 = 2;
      goto LABEL_18;
    case 3u:
      v57 = v43[1];
      *v42 = *v43;
      v42[1] = v57;
      swift_bridgeObjectRetain(v57);
      v58 = *(int *)(sub_5440(&qword_2621B0) + 48);
      v59 = (char *)v42 + v58;
      v60 = (char *)v43 + v58;
      v61 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v61 - 8) + 16))(v59, v60, v61);
      v46 = v42;
      v47 = v44;
      v48 = 3;
      goto LABEL_18;
    case 4u:
      v62 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v62 - 8) + 16))(v42, v43, v62);
      v63 = *(int *)(sub_5440(&qword_2621B8) + 48);
      v64 = (_QWORD *)((char *)v42 + v63);
      v65 = (_QWORD *)((char *)v43 + v63);
      v66 = v65[1];
      *v64 = *v65;
      v64[1] = v66;
      swift_bridgeObjectRetain(v66);
      v46 = v42;
      v47 = v44;
      v48 = 4;
      goto LABEL_18;
    case 5u:
      v67 = type metadata accessor for LocalizerRequest(0);
      v68 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v67 - 8) + 16);
      v68(v42, v43, v67);
      v69 = sub_5440(&qword_2621C0);
      v68((_QWORD *)((char *)v42 + *(int *)(v69 + 48)), (_QWORD *)((char *)v43 + *(int *)(v69 + 48)), v67);
      v46 = v42;
      v47 = v44;
      v48 = 5;
LABEL_18:
      swift_storeEnumTagMultiPayload(v46, v47, v48);
      break;
    default:
      memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
      break;
  }
  *(_BYTE *)(v21 + v23[12]) = *(_BYTE *)(v22 + v23[12]);
  v70 = v23[13];
  v71 = v21 + v70;
  v72 = v22 + v70;
  v73 = type metadata accessor for ButtonViewModel.ActionKind(0);
  if (swift_getEnumCaseMultiPayload(v72, v73) == 1)
  {
    v74 = type metadata accessor for URL(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v74 - 8) + 16))(v71, v72, v74);
    v75 = 1;
  }
  else
  {
    v75 = *(_QWORD *)(v72 + 24);
    if (v75)
    {
      v76 = *(_QWORD *)(v72 + 32);
      *(_QWORD *)(v71 + 24) = v75;
      *(_QWORD *)(v71 + 32) = v76;
      (**(void (***)(uint64_t, uint64_t))(v75 - 8))(v71, v72);
      v75 = 0;
    }
    else
    {
      v77 = *(_OWORD *)(v72 + 16);
      *(_OWORD *)v71 = *(_OWORD *)v72;
      *(_OWORD *)(v71 + 16) = v77;
      *(_QWORD *)(v71 + 32) = *(_QWORD *)(v72 + 32);
    }
  }
  swift_storeEnumTagMultiPayload(v71, v73, v75);
  v78 = v23[14];
  v79 = (void *)(v21 + v78);
  v80 = (const void *)(v22 + v78);
  v81 = type metadata accessor for LocalizerRequest(0);
  v82 = *(_QWORD *)(v81 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v82 + 48))(v80, 1, v81))
  {
    v83 = sub_5440(&qword_25E0C8);
    memcpy(v79, v80, *(_QWORD *)(*(_QWORD *)(v83 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v82 + 16))(v79, v80, v81);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v82 + 56))(v79, 0, 1, v81);
  }
  return a1;
}

uint64_t assignWithCopy for ButtonView(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  _BYTE *v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  _BYTE *v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  id v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  void (*v76)(_QWORD *, _QWORD *, uint64_t);
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  __int128 *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  __int128 v87;
  __int128 v88;
  uint64_t v89;
  void *v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t (*v94)(void *, uint64_t, uint64_t);
  int v95;
  int v96;
  uint64_t v97;
  uint64_t v99;

  v6 = sub_5440(&qword_25FC38);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  if (a1 != a2)
  {
    v8 = a3[6];
    v9 = (_BYTE *)(a1 + v8);
    v10 = (_BYTE *)(a2 + v8);
    sub_B414(a1 + v8, &qword_25FB20);
    v11 = sub_5440(&qword_25FB20);
    if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
    {
      *v9 = *v10;
      v9[1] = v10[1];
      v12 = type metadata accessor for FontConstants.Environment(0);
      v13 = *(int *)(v12 + 24);
      v14 = &v9[v13];
      v99 = a1;
      v15 = &v10[v13];
      v16 = type metadata accessor for DynamicTypeSize(0);
      v17 = v15;
      a1 = v99;
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v14, v17, v16);
      *(_QWORD *)&v9[*(int *)(v12 + 28)] = *(_QWORD *)&v10[*(int *)(v12 + 28)];
      v18 = 1;
    }
    else
    {
      v19 = *(_QWORD *)v10;
      *(_QWORD *)v9 = *(_QWORD *)v10;
      swift_retain(v19);
      v18 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v11, v18);
  }
  v20 = a3[7];
  v21 = a1 + v20;
  v22 = a2 + v20;
  v7(a1 + v20, a2 + v20, v6);
  v23 = (int *)type metadata accessor for ButtonViewModel(0);
  v7(v21 + v23[5], v22 + v23[5], v6);
  if (a1 != a2)
  {
    v24 = v23[6];
    v25 = (uint64_t *)(v21 + v24);
    v26 = (uint64_t *)(v22 + v24);
    sub_B414(v21 + v24, &qword_25F1E8);
    v27 = sub_5440(&qword_25F1E8);
    if (swift_getEnumCaseMultiPayload(v26, v27) == 1)
    {
      v28 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v28 - 8) + 16))(v25, v26, v28);
      v29 = v25;
      v30 = v27;
      v31 = 1;
    }
    else
    {
      v32 = *v26;
      *v25 = *v26;
      swift_retain(v32);
      v29 = v25;
      v30 = v27;
      v31 = 0;
    }
    swift_storeEnumTagMultiPayload(v29, v30, v31);
  }
  *(_BYTE *)(v21 + v23[7]) = *(_BYTE *)(v22 + v23[7]);
  *(_BYTE *)(v21 + v23[8]) = *(_BYTE *)(v22 + v23[8]);
  *(_BYTE *)(v21 + v23[9]) = *(_BYTE *)(v22 + v23[9]);
  v33 = v23[10];
  v34 = v21 + v33;
  v35 = v22 + v33;
  v36 = *(_QWORD *)(v21 + v33);
  v37 = *(_QWORD *)(v22 + v33);
  if (v36 >= 3)
  {
    if (v37 < 3)
    {
      sub_B414(v21 + v33, &qword_2624C0);
      v39 = *(_OWORD *)(v35 + 16);
      *(_OWORD *)v34 = *(_OWORD *)v35;
      *(_OWORD *)(v34 + 16) = v39;
      if (a1 == a2)
        goto LABEL_22;
      goto LABEL_19;
    }
    *(_QWORD *)v34 = v37;
    swift_retain(v37);
    swift_release(v36);
    v51 = *(_QWORD *)(v35 + 8);
    v52 = *(_QWORD *)(v34 + 8);
    *(_QWORD *)(v34 + 8) = v51;
    swift_retain(v51);
    swift_release(v52);
    v53 = *(_QWORD *)(v35 + 16);
    v54 = *(_QWORD *)(v34 + 16);
    *(_QWORD *)(v34 + 16) = v53;
    swift_retain(v53);
    swift_release(v54);
    v55 = *(_QWORD *)(v35 + 24);
    v56 = *(_QWORD *)(v34 + 24);
    *(_QWORD *)(v34 + 24) = v55;
    swift_retain(v55);
    swift_release(v56);
    if (a1 != a2)
      goto LABEL_19;
LABEL_22:
    *(_BYTE *)(v21 + v23[12]) = *(_BYTE *)(v22 + v23[12]);
    goto LABEL_36;
  }
  if (v37 >= 3)
  {
    *(_QWORD *)v34 = v37;
    v40 = *(_QWORD *)(v35 + 8);
    *(_QWORD *)(v34 + 8) = v40;
    v41 = *(_QWORD *)(v35 + 16);
    *(_QWORD *)(v34 + 16) = v41;
    v42 = *(_QWORD *)(v35 + 24);
    *(_QWORD *)(v34 + 24) = v42;
    swift_retain(v37);
    swift_retain(v40);
    swift_retain(v41);
    swift_retain(v42);
    if (a1 != a2)
      goto LABEL_19;
    goto LABEL_22;
  }
  v38 = *(_OWORD *)(v35 + 16);
  *(_OWORD *)v34 = *(_OWORD *)v35;
  *(_OWORD *)(v34 + 16) = v38;
  if (a1 == a2)
    goto LABEL_22;
LABEL_19:
  v43 = v23[11];
  v44 = (_QWORD *)(v21 + v43);
  v45 = (_QWORD *)(v22 + v43);
  sub_224DC(v21 + v43, type metadata accessor for ButtonViewModel.Content);
  v46 = type metadata accessor for ButtonViewModel.Content(0);
  switch(swift_getEnumCaseMultiPayload(v45, v46))
  {
    case 0u:
      v47 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v47 - 8) + 16))(v44, v45, v47);
      v48 = v44;
      v49 = v46;
      v50 = 0;
      goto LABEL_28;
    case 1u:
      *v44 = *v45;
      v57 = v45[1];
      v44[1] = v57;
      swift_bridgeObjectRetain(v57);
      v48 = v44;
      v49 = v46;
      v50 = 1;
      goto LABEL_28;
    case 2u:
      *v44 = *v45;
      v58 = v45[1];
      v44[1] = v58;
      v59 = (void *)v45[2];
      v44[2] = v59;
      swift_bridgeObjectRetain(v58);
      v60 = v59;
      v61 = *(int *)(sub_5440(&qword_2621A8) + 64);
      v62 = (char *)v44 + v61;
      v63 = (char *)v45 + v61;
      v64 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v64 - 8) + 16))(v62, v63, v64);
      v48 = v44;
      v49 = v46;
      v50 = 2;
      goto LABEL_28;
    case 3u:
      *v44 = *v45;
      v65 = v45[1];
      v44[1] = v65;
      swift_bridgeObjectRetain(v65);
      v66 = *(int *)(sub_5440(&qword_2621B0) + 48);
      v67 = (char *)v44 + v66;
      v68 = (char *)v45 + v66;
      v69 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v69 - 8) + 16))(v67, v68, v69);
      v48 = v44;
      v49 = v46;
      v50 = 3;
      goto LABEL_28;
    case 4u:
      v70 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v70 - 8) + 16))(v44, v45, v70);
      v71 = *(int *)(sub_5440(&qword_2621B8) + 48);
      v72 = (_QWORD *)((char *)v44 + v71);
      v73 = (_QWORD *)((char *)v45 + v71);
      *v72 = *v73;
      v74 = v73[1];
      v72[1] = v74;
      swift_bridgeObjectRetain(v74);
      v48 = v44;
      v49 = v46;
      v50 = 4;
      goto LABEL_28;
    case 5u:
      v75 = type metadata accessor for LocalizerRequest(0);
      v76 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v75 - 8) + 16);
      v76(v44, v45, v75);
      v77 = sub_5440(&qword_2621C0);
      v76((_QWORD *)((char *)v44 + *(int *)(v77 + 48)), (_QWORD *)((char *)v45 + *(int *)(v77 + 48)), v75);
      v48 = v44;
      v49 = v46;
      v50 = 5;
LABEL_28:
      swift_storeEnumTagMultiPayload(v48, v49, v50);
      break;
    default:
      memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
      break;
  }
  *(_BYTE *)(v21 + v23[12]) = *(_BYTE *)(v22 + v23[12]);
  v78 = v23[13];
  v79 = v21 + v78;
  v80 = (__int128 *)(v22 + v78);
  sub_224DC(v21 + v78, type metadata accessor for ButtonViewModel.ActionKind);
  v81 = type metadata accessor for ButtonViewModel.ActionKind(0);
  if (swift_getEnumCaseMultiPayload(v80, v81) == 1)
  {
    v82 = type metadata accessor for URL(0);
    (*(void (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)(v82 - 8) + 16))(v79, v80, v82);
    v83 = v79;
    v84 = v81;
    v85 = 1;
  }
  else
  {
    v86 = *((_QWORD *)v80 + 3);
    if (v86)
    {
      *(_QWORD *)(v79 + 24) = v86;
      *(_QWORD *)(v79 + 32) = *((_QWORD *)v80 + 4);
      (**(void (***)(uint64_t, __int128 *))(v86 - 8))(v79, v80);
    }
    else
    {
      v87 = *v80;
      v88 = v80[1];
      *(_QWORD *)(v79 + 32) = *((_QWORD *)v80 + 4);
      *(_OWORD *)v79 = v87;
      *(_OWORD *)(v79 + 16) = v88;
    }
    v83 = v79;
    v84 = v81;
    v85 = 0;
  }
  swift_storeEnumTagMultiPayload(v83, v84, v85);
LABEL_36:
  v89 = v23[14];
  v90 = (void *)(v21 + v89);
  v91 = (void *)(v22 + v89);
  v92 = type metadata accessor for LocalizerRequest(0);
  v93 = *(_QWORD *)(v92 - 8);
  v94 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v93 + 48);
  v95 = v94(v90, 1, v92);
  v96 = v94(v91, 1, v92);
  if (!v95)
  {
    if (!v96)
    {
      (*(void (**)(void *, void *, uint64_t))(v93 + 24))(v90, v91, v92);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v93 + 8))(v90, v92);
    goto LABEL_41;
  }
  if (v96)
  {
LABEL_41:
    v97 = sub_5440(&qword_25E0C8);
    memcpy(v90, v91, *(_QWORD *)(*(_QWORD *)(v97 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v93 + 16))(v90, v91, v92);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v93 + 56))(v90, 0, 1, v92);
  return a1;
}

uint64_t initializeWithTake for ButtonView(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  _WORD *v9;
  _WORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  void *v23;
  const void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _OWORD *v28;
  _OWORD *v29;
  __int128 v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(_QWORD *, _QWORD *, uint64_t);
  uint64_t v51;
  uint64_t v52;
  void *v53;
  const void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  const void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v64;

  v6 = sub_5440(&qword_25FC38);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v8 = a3[6];
  v9 = (_WORD *)(a1 + v8);
  v10 = (_WORD *)(a2 + v8);
  v11 = sub_5440(&qword_25FB20);
  if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
  {
    *v9 = *v10;
    v12 = type metadata accessor for FontConstants.Environment(0);
    v13 = *(int *)(v12 + 24);
    v64 = a1;
    v14 = (char *)v9 + v13;
    v15 = (char *)v10 + v13;
    v16 = type metadata accessor for DynamicTypeSize(0);
    v17 = v14;
    a1 = v64;
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v17, v15, v16);
    *(_QWORD *)((char *)v9 + *(int *)(v12 + 28)) = *(_QWORD *)((char *)v10 + *(int *)(v12 + 28));
    swift_storeEnumTagMultiPayload(v9, v11, 1);
  }
  else
  {
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  v18 = a3[7];
  v19 = a1 + v18;
  v20 = a2 + v18;
  v7(a1 + v18, v20, v6);
  v21 = (int *)type metadata accessor for ButtonViewModel(0);
  v7(v19 + v21[5], v20 + v21[5], v6);
  v22 = v21[6];
  v23 = (void *)(v19 + v22);
  v24 = (const void *)(v20 + v22);
  v25 = sub_5440(&qword_25F1E8);
  if (swift_getEnumCaseMultiPayload(v24, v25) == 1)
  {
    v26 = type metadata accessor for ColorScheme(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v26 - 8) + 32))(v23, v24, v26);
    swift_storeEnumTagMultiPayload(v23, v25, 1);
  }
  else
  {
    memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
  }
  *(_BYTE *)(v19 + v21[7]) = *(_BYTE *)(v20 + v21[7]);
  *(_BYTE *)(v19 + v21[8]) = *(_BYTE *)(v20 + v21[8]);
  *(_BYTE *)(v19 + v21[9]) = *(_BYTE *)(v20 + v21[9]);
  v27 = v21[10];
  v28 = (_OWORD *)(v19 + v27);
  v29 = (_OWORD *)(v20 + v27);
  v30 = v29[1];
  *v28 = *v29;
  v28[1] = v30;
  v31 = v21[11];
  v32 = (_QWORD *)(v19 + v31);
  v33 = (_QWORD *)(v20 + v31);
  v34 = type metadata accessor for ButtonViewModel.Content(0);
  switch(swift_getEnumCaseMultiPayload(v33, v34))
  {
    case 0u:
      v35 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v35 - 8) + 32))(v32, v33, v35);
      v36 = v32;
      v37 = v34;
      v38 = 0;
      goto LABEL_14;
    case 2u:
      *(_OWORD *)v32 = *(_OWORD *)v33;
      v32[2] = v33[2];
      v39 = *(int *)(sub_5440(&qword_2621A8) + 64);
      v40 = (char *)v32 + v39;
      v41 = (char *)v33 + v39;
      v42 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v42 - 8) + 32))(v40, v41, v42);
      v36 = v32;
      v37 = v34;
      v38 = 2;
      goto LABEL_14;
    case 3u:
      *(_OWORD *)v32 = *(_OWORD *)v33;
      v43 = *(int *)(sub_5440(&qword_2621B0) + 48);
      v44 = (char *)v32 + v43;
      v45 = (char *)v33 + v43;
      v46 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v46 - 8) + 32))(v44, v45, v46);
      v36 = v32;
      v37 = v34;
      v38 = 3;
      goto LABEL_14;
    case 4u:
      v47 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v47 - 8) + 32))(v32, v33, v47);
      v48 = sub_5440(&qword_2621B8);
      *(_OWORD *)((char *)v32 + *(int *)(v48 + 48)) = *(_OWORD *)((char *)v33 + *(int *)(v48 + 48));
      v36 = v32;
      v37 = v34;
      v38 = 4;
      goto LABEL_14;
    case 5u:
      v49 = type metadata accessor for LocalizerRequest(0);
      v50 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v49 - 8) + 32);
      v50(v32, v33, v49);
      v51 = sub_5440(&qword_2621C0);
      v50((_QWORD *)((char *)v32 + *(int *)(v51 + 48)), (_QWORD *)((char *)v33 + *(int *)(v51 + 48)), v49);
      v36 = v32;
      v37 = v34;
      v38 = 5;
LABEL_14:
      swift_storeEnumTagMultiPayload(v36, v37, v38);
      break;
    default:
      memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
      break;
  }
  *(_BYTE *)(v19 + v21[12]) = *(_BYTE *)(v20 + v21[12]);
  v52 = v21[13];
  v53 = (void *)(v19 + v52);
  v54 = (const void *)(v20 + v52);
  v55 = type metadata accessor for ButtonViewModel.ActionKind(0);
  if (swift_getEnumCaseMultiPayload(v54, v55) == 1)
  {
    v56 = type metadata accessor for URL(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v56 - 8) + 32))(v53, v54, v56);
    swift_storeEnumTagMultiPayload(v53, v55, 1);
  }
  else
  {
    memcpy(v53, v54, *(_QWORD *)(*(_QWORD *)(v55 - 8) + 64));
  }
  v57 = v21[14];
  v58 = (void *)(v19 + v57);
  v59 = (const void *)(v20 + v57);
  v60 = type metadata accessor for LocalizerRequest(0);
  v61 = *(_QWORD *)(v60 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v61 + 48))(v59, 1, v60))
  {
    v62 = sub_5440(&qword_25E0C8);
    memcpy(v58, v59, *(_QWORD *)(*(_QWORD *)(v62 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v61 + 32))(v58, v59, v60);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v61 + 56))(v58, 0, 1, v60);
  }
  return a1;
}

uint64_t assignWithTake for ButtonView(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  _WORD *v9;
  _WORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  void *v23;
  const void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  unint64_t v30;
  __int128 v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(_QWORD *, _QWORD *, uint64_t);
  uint64_t v55;
  uint64_t v56;
  void *v57;
  const void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t (*v66)(void *, uint64_t, uint64_t);
  int v67;
  int v68;
  uint64_t v69;
  uint64_t v71;

  v6 = sub_5440(&qword_25FC38);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  if (a1 != a2)
  {
    v8 = a3[6];
    v9 = (_WORD *)(a1 + v8);
    v10 = (_WORD *)(a2 + v8);
    sub_B414(a1 + v8, &qword_25FB20);
    v11 = sub_5440(&qword_25FB20);
    if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
    {
      *v9 = *v10;
      v12 = type metadata accessor for FontConstants.Environment(0);
      v13 = *(int *)(v12 + 24);
      v71 = a1;
      v14 = (char *)v9 + v13;
      v15 = (char *)v10 + v13;
      v16 = type metadata accessor for DynamicTypeSize(0);
      v17 = v14;
      a1 = v71;
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v17, v15, v16);
      *(_QWORD *)((char *)v9 + *(int *)(v12 + 28)) = *(_QWORD *)((char *)v10 + *(int *)(v12 + 28));
      swift_storeEnumTagMultiPayload(v9, v11, 1);
    }
    else
    {
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    }
  }
  v18 = a3[7];
  v19 = a1 + v18;
  v20 = a2 + v18;
  v7(a1 + v18, a2 + v18, v6);
  v21 = (int *)type metadata accessor for ButtonViewModel(0);
  v7(v19 + v21[5], v20 + v21[5], v6);
  if (a1 != a2)
  {
    v22 = v21[6];
    v23 = (void *)(v19 + v22);
    v24 = (const void *)(v20 + v22);
    sub_B414(v19 + v22, &qword_25F1E8);
    v25 = sub_5440(&qword_25F1E8);
    if (swift_getEnumCaseMultiPayload(v24, v25) == 1)
    {
      v26 = type metadata accessor for ColorScheme(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v26 - 8) + 32))(v23, v24, v26);
      swift_storeEnumTagMultiPayload(v23, v25, 1);
    }
    else
    {
      memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    }
  }
  *(_BYTE *)(v19 + v21[7]) = *(_BYTE *)(v20 + v21[7]);
  *(_BYTE *)(v19 + v21[8]) = *(_BYTE *)(v20 + v21[8]);
  *(_BYTE *)(v19 + v21[9]) = *(_BYTE *)(v20 + v21[9]);
  v27 = v21[10];
  v28 = (_QWORD *)(v19 + v27);
  v29 = (_QWORD *)(v20 + v27);
  v30 = *(_QWORD *)(v19 + v27);
  if (v30 >= 3)
  {
    if (*v29 >= 3uLL)
    {
      *v28 = *v29;
      swift_release(v30);
      v40 = v28[1];
      v28[1] = v29[1];
      swift_release(v40);
      v41 = v28[2];
      v28[2] = v29[2];
      swift_release(v41);
      v42 = v28[3];
      v28[3] = v29[3];
      swift_release(v42);
      if (a1 != a2)
        goto LABEL_13;
LABEL_16:
      *(_BYTE *)(v19 + v21[12]) = *(_BYTE *)(v20 + v21[12]);
      goto LABEL_26;
    }
    sub_B414((uint64_t)v28, &qword_2624C0);
  }
  v31 = *((_OWORD *)v29 + 1);
  *(_OWORD *)v28 = *(_OWORD *)v29;
  *((_OWORD *)v28 + 1) = v31;
  if (a1 == a2)
    goto LABEL_16;
LABEL_13:
  v32 = v21[11];
  v33 = (_QWORD *)(v19 + v32);
  v34 = (_QWORD *)(v20 + v32);
  sub_224DC(v19 + v32, type metadata accessor for ButtonViewModel.Content);
  v35 = type metadata accessor for ButtonViewModel.Content(0);
  switch(swift_getEnumCaseMultiPayload(v34, v35))
  {
    case 0u:
      v36 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v36 - 8) + 32))(v33, v34, v36);
      v37 = v33;
      v38 = v35;
      v39 = 0;
      goto LABEL_22;
    case 2u:
      *(_OWORD *)v33 = *(_OWORD *)v34;
      v33[2] = v34[2];
      v43 = *(int *)(sub_5440(&qword_2621A8) + 64);
      v44 = (char *)v33 + v43;
      v45 = (char *)v34 + v43;
      v46 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v46 - 8) + 32))(v44, v45, v46);
      v37 = v33;
      v38 = v35;
      v39 = 2;
      goto LABEL_22;
    case 3u:
      *(_OWORD *)v33 = *(_OWORD *)v34;
      v47 = *(int *)(sub_5440(&qword_2621B0) + 48);
      v48 = (char *)v33 + v47;
      v49 = (char *)v34 + v47;
      v50 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v50 - 8) + 32))(v48, v49, v50);
      v37 = v33;
      v38 = v35;
      v39 = 3;
      goto LABEL_22;
    case 4u:
      v51 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v51 - 8) + 32))(v33, v34, v51);
      v52 = sub_5440(&qword_2621B8);
      *(_OWORD *)((char *)v33 + *(int *)(v52 + 48)) = *(_OWORD *)((char *)v34 + *(int *)(v52 + 48));
      v37 = v33;
      v38 = v35;
      v39 = 4;
      goto LABEL_22;
    case 5u:
      v53 = type metadata accessor for LocalizerRequest(0);
      v54 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v53 - 8) + 32);
      v54(v33, v34, v53);
      v55 = sub_5440(&qword_2621C0);
      v54((_QWORD *)((char *)v33 + *(int *)(v55 + 48)), (_QWORD *)((char *)v34 + *(int *)(v55 + 48)), v53);
      v37 = v33;
      v38 = v35;
      v39 = 5;
LABEL_22:
      swift_storeEnumTagMultiPayload(v37, v38, v39);
      break;
    default:
      memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
      break;
  }
  *(_BYTE *)(v19 + v21[12]) = *(_BYTE *)(v20 + v21[12]);
  v56 = v21[13];
  v57 = (void *)(v19 + v56);
  v58 = (const void *)(v20 + v56);
  sub_224DC(v19 + v56, type metadata accessor for ButtonViewModel.ActionKind);
  v59 = type metadata accessor for ButtonViewModel.ActionKind(0);
  if (swift_getEnumCaseMultiPayload(v58, v59) == 1)
  {
    v60 = type metadata accessor for URL(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v60 - 8) + 32))(v57, v58, v60);
    swift_storeEnumTagMultiPayload(v57, v59, 1);
  }
  else
  {
    memcpy(v57, v58, *(_QWORD *)(*(_QWORD *)(v59 - 8) + 64));
  }
LABEL_26:
  v61 = v21[14];
  v62 = (void *)(v19 + v61);
  v63 = (void *)(v20 + v61);
  v64 = type metadata accessor for LocalizerRequest(0);
  v65 = *(_QWORD *)(v64 - 8);
  v66 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v65 + 48);
  v67 = v66(v62, 1, v64);
  v68 = v66(v63, 1, v64);
  if (!v67)
  {
    if (!v68)
    {
      (*(void (**)(void *, void *, uint64_t))(v65 + 40))(v62, v63, v64);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v65 + 8))(v62, v64);
    goto LABEL_31;
  }
  if (v68)
  {
LABEL_31:
    v69 = sub_5440(&qword_25E0C8);
    memcpy(v62, v63, *(_QWORD *)(*(_QWORD *)(v69 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v65 + 32))(v62, v63, v64);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v65 + 56))(v62, 0, 1, v64);
  return a1;
}

uint64_t getEnumTagSinglePayload for ButtonView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_198A64);
}

uint64_t sub_198A64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = sub_5440(&qword_25FC38);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v11 = sub_5440(&qword_262568);
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v11;
      v13 = *(int *)(a3 + 24);
    }
    else
    {
      v8 = type metadata accessor for ButtonViewModel(0);
      v12 = *(_QWORD *)(v8 - 8);
      v13 = *(int *)(a3 + 28);
    }
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for ButtonView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_198B10);
}

uint64_t sub_198B10(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v8 = sub_5440(&qword_25FC38);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v13 = sub_5440(&qword_262568);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = *(int *)(a4 + 24);
    }
    else
    {
      v10 = type metadata accessor for ButtonViewModel(0);
      v14 = *(_QWORD *)(v10 - 8);
      v15 = *(int *)(a4 + 28);
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_198BB8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[4];

  sub_3CAFC(319);
  if (v3 <= 0x3F)
  {
    v8[0] = *(_QWORD *)(v2 - 8) + 64;
    v8[1] = v8[0];
    sub_198C58(319);
    if (v5 <= 0x3F)
    {
      v8[2] = *(_QWORD *)(v4 - 8) + 64;
      v6 = type metadata accessor for ButtonViewModel(319);
      if (v7 <= 0x3F)
      {
        v8[3] = *(_QWORD *)(v6 - 8) + 64;
        swift_initStructMetadata(a1, 256, 4, v8, a1 + 16);
      }
    }
  }
}

void sub_198C58(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_2625D8)
  {
    v2 = type metadata accessor for FontConstants.Button(255);
    v3 = type metadata accessor for Environment.Content(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_2625D8);
  }
}

uint64_t sub_198CAC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t OpaqueTypeConformance2;
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v0 = sub_7EF8(&qword_26A238);
  v1 = type metadata accessor for BooksBorderedButtonStyle(255);
  v5 = sub_7EF8(&qword_26A240);
  v6 = sub_196808();
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v5, &opaque type descriptor for <<opaque return type of View.redacted(reason:)>>, 1);
  v3 = sub_6FD0(&qword_26A290, type metadata accessor for BooksBorderedButtonStyle, (uint64_t)&protocol conformance descriptor for BooksBorderedButtonStyle);
  v5 = v0;
  v6 = v1;
  v7 = OpaqueTypeConformance2;
  v8 = v3;
  return swift_getOpaqueTypeConformance2(&v5, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
}

unint64_t sub_198D5C()
{
  unint64_t result;

  result = qword_26A330;
  if (!qword_26A330)
  {
    result = swift_getWitnessTable(&unk_1F8BC0, &type metadata for ShelfBackgroundKindKey);
    atomic_store(result, (unint64_t *)&qword_26A330);
  }
  return result;
}

uint64_t sub_198DA8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_198DB8@<X0>(uint64_t a1@<X8>)
{
  return sub_192C10(a1);
}

unint64_t sub_198DD8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_26A348;
  if (!qword_26A348)
  {
    v1 = sub_7EF8(&qword_26A340);
    sub_7FD8(&qword_26A350, &qword_26A358, (uint64_t)&protocol conformance descriptor for HStack<A>);
    sub_7FD8((unint64_t *)&qword_2600A8, &qword_2600B0, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_26A348);
  }
  return result;
}

uint64_t sub_198E74()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  int *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t);
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v1 = (int *)type metadata accessor for ButtonView(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = sub_5440(&qword_25FC38);
  v7 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8);
  v7(v0 + v4, v6);
  v7(v0 + v4 + v1[5], v6);
  v8 = (_QWORD *)(v0 + v4 + v1[6]);
  v9 = sub_5440(&qword_25FB20);
  if (swift_getEnumCaseMultiPayload(v8, v9) == 1)
  {
    v10 = (char *)v8 + *(int *)(type metadata accessor for FontConstants.Environment(0) + 24);
    v11 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  }
  else
  {
    v12 = swift_release(*v8);
  }
  v13 = v0 + v4 + v1[7];
  ((void (*)(uint64_t, uint64_t, __n128))v7)(v13, v6, v12);
  v14 = (int *)type metadata accessor for ButtonViewModel(0);
  v7(v13 + v14[5], v6);
  v15 = (_QWORD *)(v13 + v14[6]);
  v16 = sub_5440(&qword_25F1E8);
  if (swift_getEnumCaseMultiPayload(v15, v16) == 1)
  {
    v17 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(v15, v17);
  }
  else
  {
    swift_release(*v15);
  }
  v18 = (_QWORD *)(v13 + v14[10]);
  if (*v18 >= 3uLL)
  {
    swift_release(*v18);
    swift_release(v18[1]);
    swift_release(v18[2]);
    swift_release(v18[3]);
  }
  v19 = v13 + v14[11];
  v20 = type metadata accessor for ButtonViewModel.Content(0);
  switch(swift_getEnumCaseMultiPayload(v19, v20))
  {
    case 0u:
      goto LABEL_14;
    case 1u:
      swift_bridgeObjectRelease(*(_QWORD *)(v19 + 8));
      break;
    case 2u:
      swift_bridgeObjectRelease(*(_QWORD *)(v19 + 8));

      v21 = *(int *)(sub_5440(&qword_2621A8) + 64);
      goto LABEL_13;
    case 3u:
      swift_bridgeObjectRelease(*(_QWORD *)(v19 + 8));
      v21 = *(int *)(sub_5440(&qword_2621B0) + 48);
LABEL_13:
      v19 += v21;
LABEL_14:
      v22 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 8))(v19, v22);
      break;
    case 4u:
      v23 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 8))(v19, v23);
      v24 = sub_5440(&qword_2621B8);
      swift_bridgeObjectRelease(*(_QWORD *)(v19 + *(int *)(v24 + 48) + 8));
      break;
    case 5u:
      v25 = type metadata accessor for LocalizerRequest(0);
      v26 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 8);
      v26(v19, v25);
      v27 = sub_5440(&qword_2621C0);
      v26(v19 + *(int *)(v27 + 48), v25);
      break;
    default:
      break;
  }
  v28 = (_QWORD *)(v13 + v14[13]);
  v29 = type metadata accessor for ButtonViewModel.ActionKind(0);
  if (swift_getEnumCaseMultiPayload(v28, v29) == 1)
  {
    v30 = type metadata accessor for URL(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v30 - 8) + 8))(v28, v30);
  }
  else if (v28[3])
  {
    _s7BooksUI13AnyPagedFrameVwxx_0(v28);
  }
  v31 = v13 + v14[14];
  v32 = type metadata accessor for LocalizerRequest(0);
  v33 = *(_QWORD *)(v32 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v33 + 48))(v31, 1, v32))
    (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v31, v32);
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_1991D8@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for ButtonView(0);
  return sub_192C10(a1);
}

uint64_t sub_199238()
{
  return sub_2F608(&qword_26A3F8, &qword_26A3D0, (void (*)(void))sub_19925C, (void (*)(void))sub_199300);
}

unint64_t sub_19925C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_26A400;
  if (!qword_26A400)
  {
    v1 = sub_7EF8(&qword_26A3C8);
    sub_7FD8(&qword_26A408, &qword_26A3E0, (uint64_t)&protocol conformance descriptor for JetLocalize<A, B, C>);
    sub_7FD8(&qword_26A410, &qword_26A3A0, (uint64_t)&protocol conformance descriptor for JetLocalize<A, B, C>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_26A400);
  }
  return result;
}

unint64_t sub_199300()
{
  unint64_t result;
  uint64_t v1;

  result = qword_26A418;
  if (!qword_26A418)
  {
    v1 = sub_7EF8(&qword_26A398);
    sub_7FD8(&qword_26A410, &qword_26A3A0, (uint64_t)&protocol conformance descriptor for JetLocalize<A, B, C>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_26A418);
  }
  return result;
}

uint64_t sub_19937C()
{
  return sub_2F608(&qword_26A420, &qword_26A380, (void (*)(void))sub_1993A0, (void (*)(void))sub_1375A0);
}

unint64_t sub_1993A0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_26A428;
  if (!qword_26A428)
  {
    v1 = sub_7EF8(&qword_26A378);
    sub_7FD8(&qword_26A430, &qword_26A388, (uint64_t)&protocol conformance descriptor for VStack<A>);
    sub_139F1C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_26A428);
  }
  return result;
}

unint64_t sub_199424()
{
  unint64_t result;
  uint64_t v1;

  result = qword_26A438;
  if (!qword_26A438)
  {
    v1 = sub_7EF8(&qword_26A3E8);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_26A438);
  }
  return result;
}

uint64_t sub_199494(uint64_t a1)
{
  return sub_199834(a1, (uint64_t (*)(uint64_t, unint64_t, unint64_t, _QWORD, _QWORD))sub_195C6C);
}

uint64_t sub_1994A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  int *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v1 = type metadata accessor for LocalizerRequest(0);
  v2 = *(_QWORD *)(v1 - 8);
  v35 = *(unsigned __int8 *)(v2 + 80);
  v3 = (v35 + 16) & ~v35;
  v4 = *(_QWORD *)(v2 + 64);
  v5 = (int *)type metadata accessor for ButtonView(0);
  v6 = *((_QWORD *)v5 - 1);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v36 = *(_QWORD *)(v6 + 64);
  v8 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v8(v0 + v3, v1);
  v37 = (v3 + v4 + v7) & ~v7;
  v9 = sub_5440(&qword_25FC38);
  v10 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8);
  v10(v0 + v37, v9);
  v10(v0 + v37 + v5[5], v9);
  v11 = (_QWORD *)(v0 + v37 + v5[6]);
  v12 = sub_5440(&qword_25FB20);
  if (swift_getEnumCaseMultiPayload(v11, v12) == 1)
  {
    v13 = (char *)v11 + *(int *)(type metadata accessor for FontConstants.Environment(0) + 24);
    v14 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
  }
  else
  {
    v15 = swift_release(*v11);
  }
  v16 = v0 + v37 + v5[7];
  ((void (*)(uint64_t, uint64_t, __n128))v10)(v16, v9, v15);
  v17 = (int *)type metadata accessor for ButtonViewModel(0);
  v10(v16 + v17[5], v9);
  v18 = (_QWORD *)(v16 + v17[6]);
  v19 = sub_5440(&qword_25F1E8);
  if (swift_getEnumCaseMultiPayload(v18, v19) == 1)
  {
    v20 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(v18, v20);
  }
  else
  {
    swift_release(*v18);
  }
  v21 = (_QWORD *)(v16 + v17[10]);
  if (*v21 >= 3uLL)
  {
    swift_release(*v21);
    swift_release(v21[1]);
    swift_release(v21[2]);
    swift_release(v21[3]);
  }
  v22 = v16 + v17[11];
  v23 = type metadata accessor for ButtonViewModel.Content(0);
  switch(swift_getEnumCaseMultiPayload(v22, v23))
  {
    case 0u:
      v24 = v22;
      goto LABEL_18;
    case 1u:
      swift_bridgeObjectRelease(*(_QWORD *)(v22 + 8));
      break;
    case 2u:
      swift_bridgeObjectRelease(*(_QWORD *)(v22 + 8));

      v25 = *(int *)(sub_5440(&qword_2621A8) + 64);
      goto LABEL_17;
    case 3u:
      swift_bridgeObjectRelease(*(_QWORD *)(v22 + 8));
      v26 = &qword_2621B0;
      goto LABEL_16;
    case 4u:
      v8(v22, v1);
      v27 = sub_5440(&qword_2621B8);
      swift_bridgeObjectRelease(*(_QWORD *)(v22 + *(int *)(v27 + 48) + 8));
      break;
    case 5u:
      v8(v22, v1);
      v26 = &qword_2621C0;
LABEL_16:
      v25 = *(int *)(sub_5440(v26) + 48);
LABEL_17:
      v24 = v22 + v25;
LABEL_18:
      v8(v24, v1);
      break;
    default:
      break;
  }
  v28 = (_QWORD *)(v16 + v17[13]);
  v29 = type metadata accessor for ButtonViewModel.ActionKind(0);
  if (swift_getEnumCaseMultiPayload(v28, v29) == 1)
  {
    v30 = type metadata accessor for URL(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v30 - 8) + 8))(v28, v30);
  }
  else if (v28[3])
  {
    _s7BooksUI13AnyPagedFrameVwxx_0(v28);
  }
  v31 = v16 + v17[14];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v31, 1, v1))
    v8(v31, v1);
  v32 = (v36 + v37 + 7) & 0xFFFFFFFFFFFFFFF8;
  v33 = v32 + 16;
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v32 + 8));
  return swift_deallocObject(v0, v33, v35 | v7 | 7);
}

uint64_t sub_199828(uint64_t a1)
{
  return sub_199834(a1, (uint64_t (*)(uint64_t, unint64_t, unint64_t, _QWORD, _QWORD))sub_1957F0);
}

uint64_t sub_199834(uint64_t a1, uint64_t (*a2)(uint64_t, unint64_t, unint64_t, _QWORD, _QWORD))
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;

  v4 = *(_QWORD *)(type metadata accessor for LocalizerRequest(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *(_QWORD *)(v4 + 64);
  v7 = *(_QWORD *)(type metadata accessor for ButtonView(0) - 8);
  v8 = (v5 + v6 + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v9 = (_QWORD *)(v2 + ((*(_QWORD *)(v7 + 64) + v8 + 7) & 0xFFFFFFFFFFFFFFF8));
  return a2(a1, v2 + v5, v2 + v8, *v9, v9[1]);
}

uint64_t sub_1998D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  int *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v1 = type metadata accessor for LocalizerRequest(0);
  v2 = *(_QWORD *)(v1 - 8);
  v35 = *(unsigned __int8 *)(v2 + 80);
  v3 = (v35 + 16) & ~v35;
  v4 = *(_QWORD *)(v2 + 64);
  v5 = (int *)type metadata accessor for ButtonView(0);
  v6 = *((_QWORD *)v5 - 1);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v36 = *(_QWORD *)(v6 + 64);
  v8 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v8(v0 + v3, v1);
  v37 = (v3 + v4 + v7) & ~v7;
  v9 = sub_5440(&qword_25FC38);
  v10 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8);
  v10(v0 + v37, v9);
  v10(v0 + v37 + v5[5], v9);
  v11 = (_QWORD *)(v0 + v37 + v5[6]);
  v12 = sub_5440(&qword_25FB20);
  if (swift_getEnumCaseMultiPayload(v11, v12) == 1)
  {
    v13 = (char *)v11 + *(int *)(type metadata accessor for FontConstants.Environment(0) + 24);
    v14 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
  }
  else
  {
    v15 = swift_release(*v11);
  }
  v16 = v0 + v37 + v5[7];
  ((void (*)(uint64_t, uint64_t, __n128))v10)(v16, v9, v15);
  v17 = (int *)type metadata accessor for ButtonViewModel(0);
  v10(v16 + v17[5], v9);
  v18 = (_QWORD *)(v16 + v17[6]);
  v19 = sub_5440(&qword_25F1E8);
  if (swift_getEnumCaseMultiPayload(v18, v19) == 1)
  {
    v20 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(v18, v20);
  }
  else
  {
    swift_release(*v18);
  }
  v21 = (_QWORD *)(v16 + v17[10]);
  if (*v21 >= 3uLL)
  {
    swift_release(*v21);
    swift_release(v21[1]);
    swift_release(v21[2]);
    swift_release(v21[3]);
  }
  v22 = v16 + v17[11];
  v23 = type metadata accessor for ButtonViewModel.Content(0);
  switch(swift_getEnumCaseMultiPayload(v22, v23))
  {
    case 0u:
      v24 = v22;
      goto LABEL_18;
    case 1u:
      swift_bridgeObjectRelease(*(_QWORD *)(v22 + 8));
      break;
    case 2u:
      swift_bridgeObjectRelease(*(_QWORD *)(v22 + 8));

      v25 = *(int *)(sub_5440(&qword_2621A8) + 64);
      goto LABEL_17;
    case 3u:
      swift_bridgeObjectRelease(*(_QWORD *)(v22 + 8));
      v26 = &qword_2621B0;
      goto LABEL_16;
    case 4u:
      v8(v22, v1);
      v27 = sub_5440(&qword_2621B8);
      swift_bridgeObjectRelease(*(_QWORD *)(v22 + *(int *)(v27 + 48) + 8));
      break;
    case 5u:
      v8(v22, v1);
      v26 = &qword_2621C0;
LABEL_16:
      v25 = *(int *)(sub_5440(v26) + 48);
LABEL_17:
      v24 = v22 + v25;
LABEL_18:
      v8(v24, v1);
      break;
    default:
      break;
  }
  v28 = (_QWORD *)(v16 + v17[13]);
  v29 = type metadata accessor for ButtonViewModel.ActionKind(0);
  if (swift_getEnumCaseMultiPayload(v28, v29) == 1)
  {
    v30 = type metadata accessor for URL(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v30 - 8) + 8))(v28, v30);
  }
  else if (v28[3])
  {
    _s7BooksUI13AnyPagedFrameVwxx_0(v28);
  }
  v31 = v16 + v17[14];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v31, 1, v1))
    v8(v31, v1);
  v32 = (v36 + v37 + 7) & 0xFFFFFFFFFFFFFFF8;
  v33 = (v32 + 23) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v32 + 8));

  return swift_deallocObject(v0, v33 + 8, v35 | v7 | 7);
}

uint64_t sub_199C68@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v5 = *(_QWORD *)(type metadata accessor for LocalizerRequest(0) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = *(_QWORD *)(type metadata accessor for ButtonView(0) - 8);
  v9 = (v6 + v7 + *(unsigned __int8 *)(v8 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v10 = (*(_QWORD *)(v8 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_19535C(a1, v2 + v6, v2 + v9, *(_QWORD *)(v2 + v10), *(_QWORD *)(v2 + v10 + 8), *(void **)(v2 + ((v10 + 23) & 0xFFFFFFFFFFFFF8)), a2);
}

uint64_t sub_199D04()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  int *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v1 = type metadata accessor for LocalizerRequest(0);
  v2 = *(_QWORD *)(v1 - 8);
  v33 = *(unsigned __int8 *)(v2 + 80);
  v3 = (v33 + 16) & ~v33;
  v4 = *(_QWORD *)(v2 + 64);
  v5 = (int *)type metadata accessor for ButtonView(0);
  v6 = *((_QWORD *)v5 - 1);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v34 = *(_QWORD *)(v6 + 64);
  v8 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v8(v0 + v3, v1);
  v35 = (v3 + v4 + v7) & ~v7;
  v9 = sub_5440(&qword_25FC38);
  v10 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8);
  v10(v0 + v35, v9);
  v10(v0 + v35 + v5[5], v9);
  v11 = (_QWORD *)(v0 + v35 + v5[6]);
  v12 = sub_5440(&qword_25FB20);
  if (swift_getEnumCaseMultiPayload(v11, v12) == 1)
  {
    v13 = (char *)v11 + *(int *)(type metadata accessor for FontConstants.Environment(0) + 24);
    v14 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
  }
  else
  {
    v15 = swift_release(*v11);
  }
  v16 = v0 + v35 + v5[7];
  ((void (*)(uint64_t, uint64_t, __n128))v10)(v16, v9, v15);
  v17 = (int *)type metadata accessor for ButtonViewModel(0);
  v10(v16 + v17[5], v9);
  v18 = (_QWORD *)(v16 + v17[6]);
  v19 = sub_5440(&qword_25F1E8);
  if (swift_getEnumCaseMultiPayload(v18, v19) == 1)
  {
    v20 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(v18, v20);
  }
  else
  {
    swift_release(*v18);
  }
  v21 = (_QWORD *)(v16 + v17[10]);
  if (*v21 >= 3uLL)
  {
    swift_release(*v21);
    swift_release(v21[1]);
    swift_release(v21[2]);
    swift_release(v21[3]);
  }
  v22 = v16 + v17[11];
  v23 = type metadata accessor for ButtonViewModel.Content(0);
  switch(swift_getEnumCaseMultiPayload(v22, v23))
  {
    case 0u:
      v24 = v22;
      goto LABEL_18;
    case 1u:
      swift_bridgeObjectRelease(*(_QWORD *)(v22 + 8));
      break;
    case 2u:
      swift_bridgeObjectRelease(*(_QWORD *)(v22 + 8));

      v25 = *(int *)(sub_5440(&qword_2621A8) + 64);
      goto LABEL_17;
    case 3u:
      swift_bridgeObjectRelease(*(_QWORD *)(v22 + 8));
      v26 = &qword_2621B0;
      goto LABEL_16;
    case 4u:
      v8(v22, v1);
      v27 = sub_5440(&qword_2621B8);
      swift_bridgeObjectRelease(*(_QWORD *)(v22 + *(int *)(v27 + 48) + 8));
      break;
    case 5u:
      v8(v22, v1);
      v26 = &qword_2621C0;
LABEL_16:
      v25 = *(int *)(sub_5440(v26) + 48);
LABEL_17:
      v24 = v22 + v25;
LABEL_18:
      v8(v24, v1);
      break;
    default:
      break;
  }
  v28 = (_QWORD *)(v16 + v17[13]);
  v29 = type metadata accessor for ButtonViewModel.ActionKind(0);
  if (swift_getEnumCaseMultiPayload(v28, v29) == 1)
  {
    v30 = type metadata accessor for URL(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v30 - 8) + 8))(v28, v30);
  }
  else if (v28[3])
  {
    _s7BooksUI13AnyPagedFrameVwxx_0(v28);
  }
  v31 = v16 + v17[14];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v31, 1, v1))
    v8(v31, v1);
  return swift_deallocObject(v0, v35 + v34, v33 | v7 | 7);
}

uint64_t sub_19A068@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_QWORD *)(type metadata accessor for LocalizerRequest(0) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ButtonView(0) - 8) + 80);
  return sub_195074(a1, v2 + v6, v2 + ((v6 + v7 + v8) & ~v8), a2);
}

unint64_t sub_19A0E0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_26A450;
  if (!qword_26A450)
  {
    v1 = sub_7EF8(&qword_26A448);
    sub_19A164();
    sub_6FD0((unint64_t *)&qword_25EEA0, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_26A450);
  }
  return result;
}

unint64_t sub_19A164()
{
  unint64_t result;
  uint64_t v1;

  result = qword_26A458;
  if (!qword_26A458)
  {
    v1 = sub_7EF8(&qword_26A460);
    sub_7FD8(&qword_260960, &qword_260968, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_26A458);
  }
  return result;
}

void InteractiveStarRatingView.init(value:initialValue:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, _QWORD *a5@<X8>, double a6@<D0>)
{
  uint64_t v12;
  uint64_t v13;
  int *v14;
  char *v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  *a5 = swift_getKeyPath(&unk_1F5210);
  v12 = sub_5440(&qword_25F1E8);
  swift_storeEnumTagMultiPayload(a5, v12, 0);
  v21 = 0;
  State.init(wrappedValue:)(&v23, &v21, &type metadata for Double);
  v13 = v24;
  v14 = (int *)type metadata accessor for InteractiveStarRatingView(0);
  v15 = (char *)a5 + v14[6];
  v21 = 0;
  v22 = 1;
  v16 = sub_5440(&qword_263EE8);
  State.init(wrappedValue:)(&v23, &v21, v16);
  swift_release(v13);
  v17 = v24;
  v18 = v25;
  *(_QWORD *)v15 = v23;
  v15[8] = v17;
  *((_QWORD *)v15 + 2) = v18;
  *(_QWORD *)((char *)a5 + v14[9]) = 5;
  *(_QWORD *)((char *)a5 + v14[10]) = 0x4046800000000000;
  *(_QWORD *)((char *)a5 + v14[11]) = 0x4044800000000000;
  v19 = (char *)a5 + v14[7];
  *(_QWORD *)v19 = a1;
  *((_QWORD *)v19 + 1) = a2;
  *((double *)v19 + 2) = a6;
  if ((a4 & 1) != 0)
  {
    a3 = 0;
    *(_QWORD *)((char *)a5 + v14[8]) = 0;
  }
  else
  {
    *(_QWORD *)((char *)a5 + v14[8]) = a3;
  }
  v20 = (_QWORD *)((char *)a5 + v14[5]);
  *v20 = a3;
  v20[1] = 0;
}

uint64_t type metadata accessor for InteractiveStarRatingView(uint64_t a1)
{
  uint64_t result;

  result = qword_26A570;
  if (!qword_26A570)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for InteractiveStarRatingView);
  return result;
}

uint64_t InteractiveStarRatingView.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  uint64_t KeyPath;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  void (**v48)(double *@<X8>);
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  __n128 v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  __n128 v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t OpaqueTypeConformance2;
  uint64_t v77;
  __n128 v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;

  v93 = type metadata accessor for LocalCoordinateSpace(0);
  __chkstk_darwin(v93);
  v92 = (char *)&v79 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for DragGesture(0);
  v95 = *(_QWORD *)(v4 - 8);
  v96 = v4;
  __chkstk_darwin(v4);
  v94 = (char *)&v79 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_5440(&qword_26A480);
  v102 = *(_QWORD *)(v6 - 8);
  v103 = v6;
  __chkstk_darwin(v6);
  v100 = (char *)&v79 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_5440(&qword_26A488);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v79 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v91 = type metadata accessor for AccessibilityChildBehavior(0);
  v89 = *(_QWORD *)(v91 - 8);
  __chkstk_darwin(v91);
  v87 = (char *)&v79 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for InteractiveStarRatingView(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(_QWORD *)(v14 + 64);
  __chkstk_darwin(v13);
  v16 = (char *)&v79 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v85 = sub_5440(&qword_26A490);
  __chkstk_darwin(v85);
  v18 = (char *)&v79 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v90 = sub_5440(&qword_26A498);
  v88 = *(_QWORD *)(v90 - 8);
  __chkstk_darwin(v90);
  v86 = (char *)&v79 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v108 = sub_5440(&qword_26A4A0);
  __chkstk_darwin(v108);
  v107 = (char *)&v79 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_5440(&qword_26A4A8);
  v98 = *(_QWORD *)(v21 - 8);
  v99 = v21;
  v22 = __chkstk_darwin(v21);
  v97 = (char *)&v79 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = static VerticalAlignment.center.getter(v22);
  *(_QWORD *)v18 = result;
  *((_QWORD *)v18 + 1) = 0x4010000000000000;
  v18[16] = 0;
  v101 = v13;
  v25 = *(_QWORD *)(v1 + *(int *)(v13 + 36));
  if (v25 < 1)
  {
    __break(1u);
  }
  else
  {
    sub_5440(&qword_26A4B0);
    v81 = v11;
    v109 = 1;
    v110 = v25;
    KeyPath = swift_getKeyPath(&unk_1F5240);
    sub_1E428(v1, (uint64_t)&v79 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for InteractiveStarRatingView);
    v27 = *(unsigned __int8 *)(v14 + 80);
    v83 = v9;
    v106 = ((v27 + 16) & ~v27) + v15;
    v28 = (v27 + 16) & ~v27;
    v80 = v28;
    v105 = v27 | 7;
    v29 = swift_allocObject(&unk_258990, v106, v27 | 7);
    v104 = v1;
    v82 = v8;
    v30 = v29;
    sub_19AED4((uint64_t)&v79 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), v29 + v28);
    v31 = sub_5440(&qword_26A4B8);
    v32 = sub_5440(&qword_26A4C0);
    v33 = sub_19AF64();
    v84 = a1;
    v34 = v33;
    v35 = sub_19AFD0();
    v36 = ForEach<>.init(_:id:content:)(&v109, KeyPath, sub_19AF18, v30, v31, v32, v34, &protocol witness table for Int, v35);
    v37 = v87;
    static AccessibilityChildBehavior.combine.getter(v36);
    v38 = sub_7FD8(&qword_26A4E8, &qword_26A490, (uint64_t)&protocol conformance descriptor for HStack<A>);
    v39 = v86;
    View.accessibilityElement(children:)(v37, v85, v38);
    (*(void (**)(char *, uint64_t))(v89 + 8))(v37, v91);
    sub_B414((uint64_t)v18, &qword_26A490);
    v40 = v104;
    sub_1E428(v104, (uint64_t)v16, type metadata accessor for InteractiveStarRatingView);
    v42 = v105;
    v41 = v106;
    v43 = swift_allocObject(&unk_2589B8, v106, v105);
    v44 = v80;
    sub_19AED4((uint64_t)v16, v43 + v80);
    v45 = v88;
    v46 = v107;
    v47 = v90;
    (*(void (**)(char *, char *, uint64_t))(v88 + 16))(v107, v39, v90);
    v48 = (void (**)(double *@<X8>))&v46[*(int *)(v108 + 36)];
    *v48 = sub_26870;
    v48[1] = 0;
    v48[2] = (void (*)(double *@<X8>))sub_19B138;
    v48[3] = (void (*)(double *@<X8>))v43;
    v49 = (*(uint64_t (**)(char *, uint64_t))(v45 + 8))(v39, v47);
    v50 = v92;
    static CoordinateSpaceProtocol<>.local.getter(v49);
    v51 = v94;
    DragGesture.init<A>(minimumDistance:coordinateSpace:)(v50, v93, &protocol witness table for LocalCoordinateSpace, 0.0);
    sub_1E428(v40, (uint64_t)v16, type metadata accessor for InteractiveStarRatingView);
    v52 = v41;
    v53 = v42;
    v54 = swift_allocObject(&unk_2589E0, v41, v42);
    v55 = v44;
    sub_19AED4((uint64_t)v16, v54 + v44);
    v56 = sub_6FD0(&qword_26A4F0, (uint64_t (*)(uint64_t))&type metadata accessor for DragGesture, (uint64_t)&protocol conformance descriptor for DragGesture);
    v57 = sub_6FD0(&qword_26A4F8, (uint64_t (*)(uint64_t))&type metadata accessor for DragGesture.Value, (uint64_t)&protocol conformance descriptor for DragGesture.Value);
    v58 = v100;
    v59 = v96;
    Gesture<>.onChanged(_:)(sub_19B284, v54, v96, v56, v57);
    v60 = swift_release(v54);
    (*(void (**)(char *, uint64_t, __n128))(v95 + 8))(v51, v59, v60);
    sub_1E428(v40, (uint64_t)v16, type metadata accessor for InteractiveStarRatingView);
    v61 = swift_allocObject(&unk_258A08, v52, v53);
    sub_19AED4((uint64_t)v16, v61 + v55);
    v62 = sub_7FD8(&qword_26A500, &qword_26A480, (uint64_t)&protocol conformance descriptor for _ChangedGesture<A>);
    v63 = v81;
    v64 = v103;
    Gesture.onEnded(_:)(sub_19B330, v61, v103, v62);
    v65 = swift_release(v61);
    v66 = (*(uint64_t (**)(char *, uint64_t, __n128))(v102 + 8))(v58, v64, v65);
    v67 = static GestureMask.all.getter(v66);
    v68 = sub_19B388();
    v69 = sub_7FD8(&qword_26A510, &qword_26A488, (uint64_t)&protocol conformance descriptor for _EndedGesture<A>);
    v70 = v97;
    v71 = (uint64_t)v107;
    v72 = v108;
    v73 = v82;
    View.gesture<A>(_:including:)(v63, v67, v108, v82, v68, v69);
    v74 = v73;
    (*(void (**)(char *, uint64_t))(v83 + 8))(v63, v73);
    sub_B414(v71, &qword_26A4A0);
    v113 = *(_QWORD *)(v104 + *(int *)(v101 + 32));
    sub_1E428(v104, (uint64_t)v16, type metadata accessor for InteractiveStarRatingView);
    v75 = swift_allocObject(&unk_258A30, v106, v105);
    sub_19AED4((uint64_t)v16, v75 + v55);
    v109 = v72;
    v110 = v74;
    v111 = v68;
    v112 = v69;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v109, &opaque type descriptor for <<opaque return type of View.gesture<A>(_:including:)>>, 1);
    v77 = v99;
    View.onChange<A>(of:initial:_:)(&v113, 0, sub_19B5D4, v75, v99, &type metadata for Double, OpaqueTypeConformance2, &protocol witness table for Double);
    v78 = swift_release(v75);
    return (*(uint64_t (**)(char *, uint64_t, __n128))(v98 + 8))(v70, v77, v78);
  }
  return result;
}

_QWORD *sub_19AB90@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  int *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *result;
  double v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  void (*v31)(char *, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t KeyPath;
  uint64_t v47;
  uint64_t v48;
  double v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  __int128 v54;

  v6 = type metadata accessor for ColorScheme(0);
  v45 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ColorConstants.Environment(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for ColorConstants(0);
  v13 = __chkstk_darwin(v12);
  v15 = (char *)&v44 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v17 = (char *)&v44 - v16;
  v18 = *a1;
  v48 = Image.init(systemName:)(0x6C69662E72617473, 0xE90000000000006CLL);
  v47 = static Font.largeTitle.getter();
  KeyPath = swift_getKeyPath(&unk_1F5318);
  v19 = (int *)type metadata accessor for InteractiveStarRatingView(0);
  v20 = (uint64_t *)(a2 + v19[5]);
  v21 = *v20;
  v22 = v20[1];
  v50 = v21;
  v51 = v22;
  v23 = sub_5440(&qword_26A5C0);
  result = State.wrappedValue.getter(&v49, v23);
  v25 = ceil(v49);
  if ((~*(_QWORD *)&v25 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_12;
  }
  if (v25 <= -9.22337204e18)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (v25 >= 9.22337204e18)
  {
LABEL_13:
    __break(1u);
    return result;
  }
  if (v18 <= (uint64_t)v25)
  {
    _s7BooksUI18BuyButtonExternalsV6colorsAA14ColorConstantsVvg_0((uint64_t)v17);
    sub_1E428((uint64_t)v17, (uint64_t)v11, type metadata accessor for ColorConstants.Environment);
    v28 = v45;
    (*(void (**)(char *, _QWORD, uint64_t))(v45 + 104))(v8, enum case for ColorScheme.dark(_:), v6);
    v29 = sub_6FD0((unint64_t *)&qword_25FD60, (uint64_t (*)(uint64_t))&type metadata accessor for ColorScheme, (uint64_t)&protocol conformance descriptor for ColorScheme);
    v30 = dispatch thunk of static Equatable.== infix(_:_:)(v11, v8, v6, v29);
    v31 = *(void (**)(char *, uint64_t))(v28 + 8);
    v31(v8, v6);
    v32 = ((uint64_t (*)(char *, uint64_t))v31)(v11, v6);
    if ((v30 & 1) != 0)
      v33 = _s7BooksUI14ColorConstantsV25vibrantPrimaryButtonLabel05SwiftB00C0Vvg_0();
    else
      v33 = static Color.black.getter(v32);
    v27 = v33;
  }
  else
  {
    _s7BooksUI18BuyButtonExternalsV6colorsAA14ColorConstantsVvg_0((uint64_t)v15);
    v26 = objc_msgSend((id)objc_opt_self(UIColor), "quaternaryLabelColor");
    v27 = Color.init(_:)(v26);
    v17 = v15;
  }
  sub_176BC8((uint64_t)v17);
  v34 = swift_getKeyPath(&unk_1F5348);
  v35 = *(_QWORD *)(a2 + v19[10]);
  v36 = *(_QWORD *)(a2 + v19[11]);
  v37 = _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0();
  result = _FrameLayout.init(width:height:alignment:)(&v50, v35, 0, v36, 0, v37, v38);
  v39 = v50;
  v40 = v51;
  v41 = v52;
  v42 = v53;
  v43 = KeyPath;
  *(_QWORD *)a3 = v48;
  *(_QWORD *)(a3 + 8) = v43;
  *(_QWORD *)(a3 + 16) = v47;
  *(_QWORD *)(a3 + 24) = v34;
  *(_QWORD *)(a3 + 32) = v27;
  *(_QWORD *)(a3 + 40) = v39;
  *(_BYTE *)(a3 + 48) = v40;
  *(_QWORD *)(a3 + 56) = v41;
  *(_BYTE *)(a3 + 64) = v42;
  *(_OWORD *)(a3 + 72) = v54;
  return result;
}

uint64_t sub_19AED4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for InteractiveStarRatingView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

_QWORD *sub_19AF18@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for InteractiveStarRatingView(0) - 8) + 80);
  return sub_19AB90(a1, v2 + ((v5 + 16) & ~v5), a2);
}

unint64_t sub_19AF64()
{
  unint64_t result;
  uint64_t v1;

  result = qword_26A4C8;
  if (!qword_26A4C8)
  {
    v1 = sub_7EF8(&qword_26A4B8);
    sub_A3E50();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ClosedRange<A>, v1);
    atomic_store(result, (unint64_t *)&qword_26A4C8);
  }
  return result;
}

unint64_t sub_19AFD0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_26A4D0;
  if (!qword_26A4D0)
  {
    v1 = sub_7EF8(&qword_26A4C0);
    sub_19B03C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_26A4D0);
  }
  return result;
}

unint64_t sub_19B03C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_26A4D8;
  if (!qword_26A4D8)
  {
    v1 = sub_7EF8(&qword_26A4E0);
    sub_106CC0();
    sub_7FD8((unint64_t *)&qword_25FD88, &qword_25FD90, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_26A4D8);
  }
  return result;
}

uint64_t sub_19B0C0(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  char v10;
  uint64_t v11;
  char v12;
  uint64_t v13;

  v2 = *a1;
  v3 = (uint64_t *)(a2 + *(int *)(type metadata accessor for InteractiveStarRatingView(0) + 24));
  v4 = *v3;
  v5 = *((_BYTE *)v3 + 8);
  v6 = v3[2];
  v11 = v4;
  v12 = v5;
  v13 = v6;
  v9 = v2;
  v10 = 0;
  v7 = sub_5440(&qword_263C08);
  return State.wrappedValue.setter(&v9, v7);
}

uint64_t sub_19B138(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for InteractiveStarRatingView(0) - 8) + 80);
  return sub_19B0C0(a1, v1 + ((v3 + 16) & ~v3));
}

_QWORD *sub_19B174(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *result;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  uint64_t v11;
  double v12;
  char v13;

  v3 = type metadata accessor for InteractiveStarRatingView(0);
  v4 = sub_5440(&qword_263C08);
  result = State.wrappedValue.getter(&v12, v4);
  if ((v13 & 1) == 0)
  {
    v6 = v12;
    v7 = DragGesture.Value.startLocation.getter(result);
    v8 = v7 + DragGesture.Value.translation.getter();
    if (v8 >= v6)
      v8 = v6;
    if (v8 < 0.0)
      v8 = 0.0;
    v9 = (double)*(uint64_t *)(a2 + *(int *)(v3 + 36));
    v10 = fmax(v8 / (v6 / v9), 1.0);
    if (v10 > v9)
      v10 = (double)*(uint64_t *)(a2 + *(int *)(v3 + 36));
    v12 = v10;
    v11 = sub_5440(&qword_26A5C0);
    return (_QWORD *)State.wrappedValue.setter(&v12, v11);
  }
  return result;
}

uint64_t sub_19B284(uint64_t a1)
{
  return sub_19B33C(a1, (uint64_t (*)(uint64_t, uint64_t))sub_19B174);
}

uint64_t sub_19B290(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v3 = type metadata accessor for InteractiveStarRatingView(0);
  v4 = (uint64_t *)(a2 + *(int *)(v3 + 20));
  v5 = *v4;
  v6 = v4[1];
  v14 = v5;
  v15 = v6;
  v7 = sub_5440(&qword_26A5C0);
  State.wrappedValue.getter(&v13, v7);
  v8 = (uint64_t *)(a2 + *(int *)(v3 + 28));
  v9 = v8[1];
  v10 = v8[2];
  v14 = *v8;
  v15 = v9;
  v16 = v10;
  v11 = sub_5440(&qword_26A5C8);
  return Binding.wrappedValue.setter(&v13, v11);
}

uint64_t sub_19B330(uint64_t a1)
{
  return sub_19B33C(a1, sub_19B290);
}

uint64_t sub_19B33C(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t))
{
  uint64_t v2;
  uint64_t v4;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for InteractiveStarRatingView(0) - 8) + 80);
  return a2(a1, v2 + ((v4 + 16) & ~v4));
}

unint64_t sub_19B388()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_26A508;
  if (!qword_26A508)
  {
    v1 = sub_7EF8(&qword_26A4A0);
    v2[0] = sub_7EF8(&qword_26A490);
    v2[1] = sub_7FD8(&qword_26A4E8, &qword_26A490, (uint64_t)&protocol conformance descriptor for HStack<A>);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
    sub_7FD8(&qword_25EF58, &qword_25EF60, (uint64_t)&protocol conformance descriptor for _GeometryActionModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_26A508);
  }
  return result;
}

_QWORD *sub_19B454(uint64_t a1, double *a2)
{
  double v2;
  uint64_t v3;
  _QWORD *result;
  double v5;

  v2 = *a2;
  type metadata accessor for InteractiveStarRatingView(0);
  v3 = sub_5440(&qword_26A5C0);
  result = State.wrappedValue.getter(&v5, v3);
  if (v2 != v5)
  {
    v5 = v2;
    return (_QWORD *)State.wrappedValue.setter(&v5, v3);
  }
  return result;
}

uint64_t sub_19B4F4()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v1 = (int *)type metadata accessor for InteractiveStarRatingView(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = (_QWORD *)(v0 + v4);
  v7 = sub_5440(&qword_25F1E8);
  if (swift_getEnumCaseMultiPayload(v0 + v4, v7) == 1)
  {
    v8 = type metadata accessor for ColorScheme(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v0 + v4, v8);
  }
  else
  {
    swift_release(*v6);
  }
  swift_release(*(_QWORD *)((char *)v6 + v1[5] + 8));
  swift_release(*(_QWORD *)((char *)v6 + v1[6] + 16));
  v9 = (_QWORD *)((char *)v6 + v1[7]);
  swift_release(*v9);
  swift_release(v9[1]);
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

_QWORD *sub_19B5D4(uint64_t a1, double *a2)
{
  type metadata accessor for InteractiveStarRatingView(0);
  return sub_19B454(a1, a2);
}

uint64_t sub_19B620(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &opaque type descriptor for <<opaque return type of InteractiveStarRatingView.body>>, 1);
}

uint64_t *initializeBufferWithCopyOfBuffer for InteractiveStarRatingView(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    v4 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = sub_5440(&qword_25F1E8);
    if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
    {
      v8 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v4, a2, v8);
      v9 = v4;
      v10 = v7;
      v11 = 1;
    }
    else
    {
      v13 = *a2;
      *v4 = *a2;
      swift_retain(v13);
      v9 = v4;
      v10 = v7;
      v11 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v10, v11);
    v14 = a3[5];
    v15 = a3[6];
    v16 = (uint64_t *)((char *)v4 + v14);
    v17 = (uint64_t *)((char *)a2 + v14);
    v18 = v17[1];
    *v16 = *v17;
    v16[1] = v18;
    v19 = (char *)v4 + v15;
    v20 = (char *)a2 + v15;
    v19[8] = v20[8];
    *(_QWORD *)v19 = *(_QWORD *)v20;
    v21 = *((_QWORD *)v20 + 2);
    *((_QWORD *)v19 + 2) = v21;
    v22 = a3[7];
    v23 = a3[8];
    v24 = (uint64_t *)((char *)v4 + v22);
    v25 = (uint64_t *)((char *)a2 + v22);
    v26 = *v25;
    v12 = v25[1];
    *v24 = *v25;
    v24[1] = v12;
    v24[2] = v25[2];
    *(uint64_t *)((char *)v4 + v23) = *(uint64_t *)((char *)a2 + v23);
    v27 = a3[10];
    *(uint64_t *)((char *)v4 + a3[9]) = *(uint64_t *)((char *)a2 + a3[9]);
    *(uint64_t *)((char *)v4 + v27) = *(uint64_t *)((char *)a2 + v27);
    *(uint64_t *)((char *)v4 + a3[11]) = *(uint64_t *)((char *)a2 + a3[11]);
    swift_retain(v18);
    swift_retain(v21);
    swift_retain(v26);
  }
  swift_retain(v12);
  return v4;
}

double destroy for InteractiveStarRatingView(_QWORD *a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  double result;

  v4 = sub_5440(&qword_25F1E8);
  if (swift_getEnumCaseMultiPayload(a1, v4) == 1)
  {
    v5 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  }
  else
  {
    swift_release(*a1);
  }
  swift_release(*(_QWORD *)((char *)a1 + a2[5] + 8));
  swift_release(*(_QWORD *)((char *)a1 + a2[6] + 16));
  v6 = (_QWORD *)((char *)a1 + a2[7]);
  swift_release(*v6);
  *(_QWORD *)&result = swift_release(v6[1]).n128_u64[0];
  return result;
}

uint64_t *initializeWithCopy for InteractiveStarRatingView(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v6 = sub_5440(&qword_25F1E8);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for ColorScheme(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a1;
    v9 = v6;
    v10 = 1;
  }
  else
  {
    v11 = *a2;
    *a1 = *a2;
    swift_retain(v11);
    v8 = a1;
    v9 = v6;
    v10 = 0;
  }
  swift_storeEnumTagMultiPayload(v8, v9, v10);
  v12 = a3[5];
  v13 = a3[6];
  v14 = (uint64_t *)((char *)a1 + v12);
  v15 = (uint64_t *)((char *)a2 + v12);
  v16 = v15[1];
  *v14 = *v15;
  v14[1] = v16;
  v17 = (char *)a1 + v13;
  v18 = (char *)a2 + v13;
  v17[8] = v18[8];
  *(_QWORD *)v17 = *(_QWORD *)v18;
  v19 = *((_QWORD *)v18 + 2);
  *((_QWORD *)v17 + 2) = v19;
  v20 = a3[7];
  v21 = a3[8];
  v22 = (uint64_t *)((char *)a1 + v20);
  v23 = (uint64_t *)((char *)a2 + v20);
  v24 = *v23;
  v25 = v23[1];
  *v22 = *v23;
  v22[1] = v25;
  v22[2] = v23[2];
  *(uint64_t *)((char *)a1 + v21) = *(uint64_t *)((char *)a2 + v21);
  v26 = a3[10];
  *(uint64_t *)((char *)a1 + a3[9]) = *(uint64_t *)((char *)a2 + a3[9]);
  *(uint64_t *)((char *)a1 + v26) = *(uint64_t *)((char *)a2 + v26);
  *(uint64_t *)((char *)a1 + a3[11]) = *(uint64_t *)((char *)a2 + a3[11]);
  swift_retain(v16);
  swift_retain(v19);
  swift_retain(v24);
  swift_retain(v25);
  return a1;
}

uint64_t *assignWithCopy for InteractiveStarRatingView(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  if (a1 != a2)
  {
    sub_B414((uint64_t)a1, &qword_25F1E8);
    v6 = sub_5440(&qword_25F1E8);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = v6;
      v10 = 1;
    }
    else
    {
      v11 = *a2;
      *a1 = *a2;
      swift_retain(v11);
      v8 = a1;
      v9 = v6;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
  }
  v12 = a3[5];
  v13 = (uint64_t *)((char *)a1 + v12);
  v14 = (uint64_t *)((char *)a2 + v12);
  *v13 = *v14;
  v15 = v13[1];
  v16 = v14[1];
  v13[1] = v16;
  swift_retain(v16);
  swift_release(v15);
  v17 = a3[6];
  v18 = (char *)a1 + v17;
  v19 = (char *)a2 + v17;
  v20 = *(_QWORD *)v19;
  v18[8] = v19[8];
  *(_QWORD *)v18 = v20;
  v21 = *((_QWORD *)v18 + 2);
  v22 = *((_QWORD *)v19 + 2);
  *((_QWORD *)v18 + 2) = v22;
  swift_retain(v22);
  swift_release(v21);
  v23 = a3[7];
  v24 = (char *)a1 + v23;
  v25 = (char *)a2 + v23;
  v26 = *(uint64_t *)((char *)a1 + v23);
  v27 = *(uint64_t *)((char *)a2 + v23);
  *(uint64_t *)((char *)a1 + v23) = v27;
  swift_retain(v27);
  swift_release(v26);
  v28 = *((_QWORD *)v25 + 1);
  v29 = *((_QWORD *)v24 + 1);
  *((_QWORD *)v24 + 1) = v28;
  swift_retain(v28);
  swift_release(v29);
  *((_QWORD *)v24 + 2) = *((_QWORD *)v25 + 2);
  *(uint64_t *)((char *)a1 + a3[8]) = *(uint64_t *)((char *)a2 + a3[8]);
  *(uint64_t *)((char *)a1 + a3[9]) = *(uint64_t *)((char *)a2 + a3[9]);
  *(uint64_t *)((char *)a1 + a3[10]) = *(uint64_t *)((char *)a2 + a3[10]);
  *(uint64_t *)((char *)a1 + a3[11]) = *(uint64_t *)((char *)a2 + a3[11]);
  return a1;
}

char *initializeWithTake for InteractiveStarRatingView(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;

  v6 = sub_5440(&qword_25F1E8);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for ColorScheme(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v8 = a3[6];
  *(_OWORD *)&a1[a3[5]] = *(_OWORD *)&a2[a3[5]];
  v9 = &a1[v8];
  v10 = &a2[v8];
  *(_OWORD *)v9 = *(_OWORD *)v10;
  *((_QWORD *)v9 + 2) = *((_QWORD *)v10 + 2);
  v11 = a3[7];
  v12 = a3[8];
  v13 = &a1[v11];
  v14 = &a2[v11];
  *(_OWORD *)v13 = *(_OWORD *)v14;
  *((_QWORD *)v13 + 2) = *((_QWORD *)v14 + 2);
  *(_QWORD *)&a1[v12] = *(_QWORD *)&a2[v12];
  v15 = a3[10];
  *(_QWORD *)&a1[a3[9]] = *(_QWORD *)&a2[a3[9]];
  *(_QWORD *)&a1[v15] = *(_QWORD *)&a2[v15];
  *(_QWORD *)&a1[a3[11]] = *(_QWORD *)&a2[a3[11]];
  return a1;
}

char *assignWithTake for InteractiveStarRatingView(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  if (a1 != a2)
  {
    sub_B414((uint64_t)a1, &qword_25F1E8);
    v6 = sub_5440(&qword_25F1E8);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for ColorScheme(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
  }
  v8 = a3[5];
  v9 = &a1[v8];
  v10 = &a2[v8];
  *(_QWORD *)v9 = *(_QWORD *)v10;
  v11 = *((_QWORD *)v9 + 1);
  *((_QWORD *)v9 + 1) = *((_QWORD *)v10 + 1);
  swift_release(v11);
  v12 = a3[6];
  v13 = &a1[v12];
  v14 = &a2[v12];
  *(_QWORD *)v13 = *(_QWORD *)v14;
  v13[8] = v14[8];
  v15 = *((_QWORD *)v13 + 2);
  *((_QWORD *)v13 + 2) = *((_QWORD *)v14 + 2);
  swift_release(v15);
  v16 = a3[7];
  v17 = &a1[v16];
  v18 = &a2[v16];
  v19 = *(_QWORD *)&a1[v16];
  *(_QWORD *)&a1[v16] = *(_QWORD *)&a2[v16];
  swift_release(v19);
  v20 = *((_QWORD *)v17 + 1);
  *((_QWORD *)v17 + 1) = *((_QWORD *)v18 + 1);
  swift_release(v20);
  *((_QWORD *)v17 + 2) = *((_QWORD *)v18 + 2);
  v21 = a3[9];
  *(_QWORD *)&a1[a3[8]] = *(_QWORD *)&a2[a3[8]];
  *(_QWORD *)&a1[v21] = *(_QWORD *)&a2[v21];
  v22 = a3[11];
  *(_QWORD *)&a1[a3[10]] = *(_QWORD *)&a2[a3[10]];
  *(_QWORD *)&a1[v22] = *(_QWORD *)&a2[v22];
  return a1;
}

uint64_t getEnumTagSinglePayload for InteractiveStarRatingView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_19BD7C);
}

uint64_t sub_19BD7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = sub_5440(&qword_25F210);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 28) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for InteractiveStarRatingView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_19BE0C);
}

uint64_t sub_19BE0C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_5440(&qword_25F210);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 28) + 8) = (a2 - 1);
  return result;
}

void sub_19BE8C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[8];

  sub_A6B14(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(v2 - 8) + 64;
    v4[1] = &unk_1F52D0;
    v4[2] = &unk_1F52E8;
    v4[3] = &unk_1F5300;
    v4[4] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[5] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[6] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[7] = (char *)&value witness table for Builtin.Int64 + 64;
    swift_initStructMetadata(a1, 256, 8, v4, a1 + 16);
  }
}

uint64_t sub_19BF24()
{
  uint64_t v0;
  uint64_t OpaqueTypeConformance2;
  uint64_t v3;
  void *v4;
  unint64_t v5;
  void *v6;

  v0 = sub_7EF8(&qword_26A4A8);
  v3 = sub_7EF8(&qword_26A4A0);
  v4 = (void *)sub_7EF8(&qword_26A488);
  v5 = sub_19B388();
  v6 = (void *)sub_7FD8(&qword_26A510, &qword_26A488, (uint64_t)&protocol conformance descriptor for _EndedGesture<A>);
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v3, &opaque type descriptor for <<opaque return type of View.gesture<A>(_:including:)>>, 1);
  v3 = v0;
  v4 = &type metadata for Double;
  v5 = OpaqueTypeConformance2;
  v6 = &protocol witness table for Double;
  return swift_getOpaqueTypeConformance2(&v3, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
}

uint64_t ListItemMetadataRecommendationCreatorDescriptorBase.init<>(assetInfo:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t KeyPath;

  v4 = a1[3];
  v5 = a1[4];
  sub_5480(a1, v4);
  v6 = AssetInfo.standardDescription.getter(v4, v5);
  v8 = v7;
  KeyPath = swift_getKeyPath(&unk_1F53A0);
  *(_QWORD *)a2 = KeyPath;
  *(_BYTE *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = v6;
  *(_QWORD *)(a2 + 24) = v8;
  sub_F9E4(KeyPath, 0);
  swift_bridgeObjectRetain(v8);
  _s7BooksUI13AnyPagedFrameVwxx_0(a1);
  sub_BE0C(KeyPath, 0);
  return swift_bridgeObjectRelease(v8);
}

uint64_t ListItemMetadataRecommendationCreatorDescriptionExternals.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;

  result = swift_getKeyPath(&unk_1F53A0);
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = 0;
  return result;
}

uint64_t ListItemMetadataRecommendationCreatorDescriptionExternals.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t KeyPath;
  uint64_t result;

  KeyPath = swift_getKeyPath(&unk_1F53A0);
  result = _s7BooksUI13AnyPagedFrameVwxx_0(a1);
  *(_QWORD *)a2 = KeyPath;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

uint64_t ListItemMetadataRecommendationCreatorDescriptorBase.description.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v6;
  uint64_t result;

  v6 = (_QWORD *)(v3 + *(int *)(a3 + 36));
  result = swift_bridgeObjectRelease(v6[1]);
  *v6 = a1;
  v6[1] = a2;
  return result;
}

uint64_t ListItemMetadataRecommendationCreatorDescriptorBase.text(localizer:font:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  _QWORD *KeyPath;
  uint64_t result;
  uint64_t *v12;
  void *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  __int128 v17;
  _BYTE v18[24];

  v6 = type metadata accessor for AttributedString(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = &v18[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v17 = *(_OWORD *)(a3 + 16);
  KeyPath = (_QWORD *)swift_getKeyPath(&unk_1F53C8);
  swift_getWitnessTable(&protocol conformance descriptor for ListItemMetadataRecommendationCreatorDescriptorBase<A>, a3);
  ViewModelWithExternals.subscript.getter(KeyPath);
  swift_release(KeyPath);
  result = 0;
  if ((v18[0] & 1) == 0)
  {
    v12 = (uint64_t *)(v3 + *(int *)(a3 + 36));
    v13 = (void *)v12[1];
    if (v13)
    {
      v14 = *v12;
      objc_allocWithZone((Class)type metadata accessor for BooksHTMLConverter(0));
      swift_bridgeObjectRetain(v13);
      swift_retain(a2);
      v15 = sub_154830(v14, v13, a2);
      objc_msgSend(*(id *)&v15[OBJC_IVAR____TtC7BooksUIP33_E4697B72F90B920AD6B6858623E47B6D18BooksHTMLConverter_parser], "parse");
      v16 = &v15[OBJC_IVAR____TtC7BooksUIP33_E4697B72F90B920AD6B6858623E47B6D18BooksHTMLConverter_currentString];
      swift_beginAccess(&v15[OBJC_IVAR____TtC7BooksUIP33_E4697B72F90B920AD6B6858623E47B6D18BooksHTMLConverter_currentString], v18, 0, 0);
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v9, v16, v6);

      return Text.init(_:)(v9);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_19C2EC(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 0x6C616E7265747865 && a2 == 0xE900000000000073)
  {
    v5 = 0xE900000000000073;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6C616E7265747865, 0xE900000000000073, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x7470697263736564 && a2 == 0xEB000000006E6F69)
  {
    swift_bridgeObjectRelease(0xEB000000006E6F69);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x7470697263736564, 0xEB000000006E6F69, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_19C400(char a1)
{
  if ((a1 & 1) != 0)
    return 0x7470697263736564;
  else
    return 0x6C616E7265747865;
}

BOOL sub_19C444(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return static HostingViewBarType.== infix(_:_:)(*a1, *a2);
}

Swift::Int sub_19C458()
{
  char *v0;

  return HostingViewBarType.hashValue.getter(*v0);
}

void sub_19C468(uint64_t a1)
{
  char *v1;

  HostingViewBarType.hash(into:)(a1, *v1);
}

Swift::Int sub_19C478(uint64_t a1)
{
  char *v1;
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, a1);
  HostingViewBarType.hash(into:)((uint64_t)v3, *v1);
  return Hasher._finalize()();
}

uint64_t sub_19C4BC()
{
  char *v0;

  return sub_19C400(*v0);
}

uint64_t sub_19C4CC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_19C2EC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_19C4F8(uint64_t a1)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_1F5728, a1);
  return CodingKey.description.getter(a1, WitnessTable);
}

uint64_t sub_19C52C(uint64_t a1)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_1F5728, a1);
  return CodingKey.debugDescription.getter(a1, WitnessTable);
}

uint64_t ListItemMetadataRecommendationCreatorDescriptorBase.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t WitnessTable;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  char v51;
  char v52;

  v41 = a4;
  v43 = *(_QWORD *)(a2 - 8);
  __chkstk_darwin(a1);
  v45 = (uint64_t *)((char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = type metadata accessor for ListItemMetadataRecommendationCreatorDescriptorBase.CodingKeys(255, v8, v9, v10);
  WitnessTable = swift_getWitnessTable(&unk_1F5728, v11);
  v48 = type metadata accessor for KeyedDecodingContainer(0, v11);
  v42 = *(_QWORD *)(v48 - 8);
  __chkstk_darwin(v48);
  v14 = (char *)&v39 - v13;
  v47 = a2;
  v44 = a3;
  v16 = type metadata accessor for ListItemMetadataRecommendationCreatorDescriptorBase(0, a2, a3, v15);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = __chkstk_darwin(v16);
  v20 = (char *)&v39 - v19;
  v21 = (uint64_t *)((char *)&v39 + *(int *)(v18 + 36) - v19);
  *v21 = 0;
  v21[1] = 0;
  v50 = v21;
  v22 = a1[3];
  v23 = a1[4];
  sub_5480(a1, v22);
  v46 = v14;
  v24 = v49;
  dispatch thunk of Decoder.container<A>(keyedBy:)(v11, v11, WitnessTable, v22, v23);
  if (v24)
  {
    _s7BooksUI13AnyPagedFrameVwxx_0(a1);
    return swift_bridgeObjectRelease(v50[1]);
  }
  else
  {
    v25 = v42;
    v26 = v43;
    v40 = v17;
    v49 = v16;
    v52 = 0;
    v27 = v45;
    v29 = v47;
    v28 = v48;
    v30 = v46;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v45, v47, &v52, v48, v47, *(_QWORD *)(v44 + 8));
    (*(void (**)(char *, _QWORD *, uint64_t))(v26 + 32))(v20, v27, v29);
    v51 = 1;
    v31 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v51, v28);
    v33 = v32;
    (*(void (**)(char *, uint64_t))(v25 + 8))(v30, v48);
    v34 = v20;
    v35 = v50;
    swift_bridgeObjectRelease(v50[1]);
    *v35 = v31;
    v35[1] = v33;
    v36 = v40;
    v37 = v49;
    (*(void (**)(uint64_t, char *, uint64_t))(v40 + 16))(v41, v34, v49);
    _s7BooksUI13AnyPagedFrameVwxx_0(a1);
    return (*(uint64_t (**)(char *, uint64_t))(v36 + 8))(v34, v37);
  }
}

uint64_t sub_19C810@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return ListItemMetadataRecommendationCreatorDescriptorBase.init(from:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a3);
}

uint64_t sub_19C830@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)(a2 + a1 - 8) + 24))(*(_QWORD *)(a2 + a1 - 16));
  *a3 = result & 1;
  return result;
}

uint64_t sub_19C86C()
{
  return 16;
}

__n128 sub_19C878(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t type metadata accessor for ListItemMetadataRecommendationCreatorDescriptorBase.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10E40(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ListItemMetadataRecommendationCreatorDescriptorBase.CodingKeys);
}

uint64_t type metadata accessor for ListItemMetadataRecommendationCreatorDescriptorBase(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10E40(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ListItemMetadataRecommendationCreatorDescriptorBase);
}

unint64_t sub_19C89C(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = sub_19C8C8();
  result = sub_19C90C();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_19C8C8()
{
  unint64_t result;

  result = qword_26A5D0;
  if (!qword_26A5D0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ListItemMetadataRecommendationCreatorDescriptionExternals, &type metadata for ListItemMetadataRecommendationCreatorDescriptionExternals);
    atomic_store(result, (unint64_t *)&qword_26A5D0);
  }
  return result;
}

unint64_t sub_19C90C()
{
  unint64_t result;

  result = qword_26A5D8;
  if (!qword_26A5D8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ListItemMetadataRecommendationCreatorDescriptionExternals, &type metadata for ListItemMetadataRecommendationCreatorDescriptionExternals);
    atomic_store(result, (unint64_t *)&qword_26A5D8);
  }
  return result;
}

uint64_t sub_19C950(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = swift_getWitnessTable(&protocol conformance descriptor for ListItemMetadataRecommendationCreatorDescriptorBase<A>, a2);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_19C97C(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = swift_getWitnessTable(&protocol conformance descriptor for ListItemMetadataRecommendationCreatorDescriptorBase<A>, a2);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_19C9A8(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = swift_getWitnessTable(&protocol conformance descriptor for ListItemMetadataRecommendationCreatorDescriptorBase<A>, a2);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_19C9D4(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = swift_getWitnessTable(&protocol conformance descriptor for ListItemMetadataRecommendationCreatorDescriptorBase<A>, a2);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for ListItemMetadataRecommendationCreatorDescriptionExternals(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;

  v3 = *(_QWORD *)a2;
  v4 = *(_BYTE *)(a2 + 8);
  sub_F9E4(*(_QWORD *)a2, v4);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  return a1;
}

uint64_t destroy for ListItemMetadataRecommendationCreatorDescriptionExternals(uint64_t a1)
{
  return sub_BE0C(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
}

uint64_t assignWithCopy for ListItemMetadataRecommendationCreatorDescriptionExternals(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;

  v3 = *(_QWORD *)a2;
  v4 = *(_BYTE *)(a2 + 8);
  sub_F9E4(*(_QWORD *)a2, v4);
  v5 = *(_QWORD *)a1;
  v6 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  sub_BE0C(v5, v6);
  return a1;
}

uint64_t assignWithTake for ListItemMetadataRecommendationCreatorDescriptionExternals(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;

  v3 = *a2;
  v4 = *((_BYTE *)a2 + 8);
  v5 = *(_QWORD *)a1;
  v6 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  sub_BE0C(v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for ListItemMetadataRecommendationCreatorDescriptionExternals(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ListItemMetadataRecommendationCreatorDescriptionExternals(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for ListItemMetadataRecommendationCreatorDescriptionExternals()
{
  return &type metadata for ListItemMetadataRecommendationCreatorDescriptionExternals;
}

uint64_t sub_19CB7C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 16));
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_1F5628;
    swift_initStructMetadata(a1, 0, 2, v4, a1 + 32);
    return 0;
  }
  return result;
}

uint64_t *sub_19CBF0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    v9 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain(v9);
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    v10 = (_QWORD *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    v11 = (_QWORD *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    *v10 = *v11;
    v12 = v11[1];
    v10[1] = v12;
    swift_bridgeObjectRetain(v12);
  }
  return v4;
}

uint64_t sub_19CCAC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  (*(void (**)(void))(v3 + 8))();
  return swift_bridgeObjectRelease(*(_QWORD *)((char *)&dword_8 + ((a1 + *(_QWORD *)(v3 + 64) + 7) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_19CCEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  v9 = v8[1];
  v7[1] = v9;
  swift_bridgeObjectRetain(v9);
  return a1;
}

uint64_t sub_19CD54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  v9 = v8[1];
  v10 = v7[1];
  v7[1] = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease(v10);
  return a1;
}

uint64_t sub_19CDC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  v9 = v7[1];
  v7[1] = v8[1];
  swift_bridgeObjectRelease(v9);
  return a1;
}

uint64_t sub_19CE34(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFE)
    v6 = 2147483646;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFE)
    {
      v12 = *(_QWORD *)((char *)&dword_8 + ((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8));
      if (v12 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      if ((v12 + 1) >= 2)
        return v12;
      else
        return 0;
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    if (((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 16) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_19CEB0 + 4 * byte_1F5380[v10]))();
  }
}

void sub_19CF3C(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFEu)
    v6 = 2147483646;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF0)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    v10 = ~v6 + a2;
    bzero(a1, ((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 16);
    *a1 = v10;
  }
  __asm { BR              X10 }
}

void sub_19D030()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x19D0B4);
}

void sub_19D038(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x19D040);
  JUMPOUT(0x19D0B4);
}

void sub_19D088()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x19D0B4);
}

void sub_19D090()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x19D0B4);
}

uint64_t sub_19D098(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_WORD *)(v6 + v7) = 0;
  if (!a2)
    goto LABEL_6;
  if (a3 < 0x7FFFFFFE)
  {
    if (a2 > 0x7FFFFFFE)
      JUMPOUT(0x19D0A4);
    *(_QWORD *)(((v6 + v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) = a2;
LABEL_6:
    JUMPOUT(0x19D0B4);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v6);
}

uint64_t sub_19D0CC(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_19D118 + 4 * byte_1F5394[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_19D14C + 4 * byte_1F538F[v4]))();
}

uint64_t sub_19D14C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_19D154(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x19D15CLL);
  return result;
}

uint64_t sub_19D168(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x19D170);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_19D174(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_19D17C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_19D188(uint64_t a1)
{
  return swift_getWitnessTable(&unk_1F5700, a1);
}

uint64_t sub_19D198(uint64_t a1)
{
  return swift_getWitnessTable(&unk_1F5670, a1);
}

uint64_t sub_19D1A8(uint64_t a1)
{
  return swift_getWitnessTable(&unk_1F5698, a1);
}

uint64_t ColorConstants.vibrantSecondary.getter()
{
  uint64_t v0;
  uint64_t v1;

  v0 = _s7BooksUI14ColorConstantsV19booksSecondaryLabel05SwiftB00C0Vvg_0();
  v1 = Color.opacity(_:)(0.8);
  swift_release(v0);
  return v1;
}

uint64_t ColorConstants.booksKey.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  void (*v10)(char *, uint64_t);
  uint64_t v11;
  uint64_t v13;

  v1 = v0;
  v2 = type metadata accessor for ColorScheme(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for ColorConstants.Environment(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_D57DC(v1, (uint64_t)v8);
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for ColorScheme.dark(_:), v2);
  v9 = sub_4928C();
  LOBYTE(v1) = dispatch thunk of static Equatable.== infix(_:_:)(v8, v5, v2, v9);
  v10 = *(void (**)(char *, uint64_t))(v3 + 8);
  v10(v5, v2);
  v11 = ((uint64_t (*)(char *, uint64_t))v10)(v8, v2);
  if ((v1 & 1) != 0)
    return _s7BooksUI14ColorConstantsV25vibrantPrimaryButtonLabel05SwiftB00C0Vvg_0();
  else
    return static Color.black.getter(v11);
}

uint64_t ColorConstants.booksQuaternaryLabel.getter()
{
  return sub_19E618((SEL *)&selRef_quaternaryLabelColor);
}

uint64_t ColorConstants.booksQuaternarySystemFill.getter()
{
  return sub_19E618((SEL *)&selRef_quaternarySystemFillColor);
}

uint64_t ColorConstants.booksTertiaryLabel.getter()
{
  return sub_19E618((SEL *)&selRef_tertiaryLabelColor);
}

uint64_t ColorConstants.vibrantTertiary.getter()
{
  return sub_19D69C((SEL *)&selRef_tertiaryLabelColor, 0.65);
}

uint64_t ColorConstants.booksTertiarySystemFill.getter()
{
  return sub_19E618((SEL *)&selRef_tertiarySystemFillColor);
}

uint64_t ColorConstants.vibrantSecondaryButtonLabel.getter()
{
  uint64_t v0;
  uint64_t v1;

  v0 = _s7BooksUI14ColorConstantsV14vibrantPrimary05SwiftB00C0Vvg_0();
  v1 = Color.opacity(_:)(0.7);
  swift_release(v0);
  return v1;
}

uint64_t ColorConstants.booksButtonBackground.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, uint64_t, uint64_t);
  unint64_t v11;
  char v12;
  void (*v13)(char *, uint64_t);
  id v14;
  char v16;
  uint64_t v17;
  uint64_t v18;

  v1 = v0;
  v2 = type metadata accessor for ColorScheme(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for ColorConstants.Environment(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_D57DC(v1, (uint64_t)v8);
  v9 = enum case for ColorScheme.dark(_:);
  v10 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 104);
  v10(v5, enum case for ColorScheme.dark(_:), v2);
  v11 = sub_4928C();
  v12 = dispatch thunk of static Equatable.== infix(_:_:)(v8, v5, v2, v11);
  v13 = *(void (**)(char *, uint64_t))(v3 + 8);
  v13(v5, v2);
  v13(v8, v2);
  if ((v12 & 1) != 0)
  {
    v14 = objc_msgSend((id)objc_opt_self(UIColor), "tertiarySystemBackgroundColor");
    return Color.init(_:)(v14);
  }
  else
  {
    sub_D57DC(v1, (uint64_t)v8);
    v10(v5, v9, v2);
    v16 = dispatch thunk of static Equatable.== infix(_:_:)(v8, v5, v2, v11);
    v13(v5, v2);
    v17 = ((uint64_t (*)(char *, uint64_t))v13)(v8, v2);
    if ((v16 & 1) != 0)
      return _s7BooksUI14ColorConstantsV25vibrantPrimaryButtonLabel05SwiftB00C0Vvg_0();
    else
      return static Color.black.getter(v17);
  }
}

uint64_t ColorConstants.booksSecondaryButtonBackground.getter()
{
  return sub_19D554((SEL *)&selRef_tertiarySystemBackgroundColor, (SEL *)&selRef_secondarySystemBackgroundColor);
}

uint64_t ColorConstants.vibrantButtonBackground.getter()
{
  return sub_19D554((SEL *)&selRef_tertiarySystemFillColor, (SEL *)&selRef_systemFillColor);
}

uint64_t sub_19D554(SEL *a1, SEL *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  void (*v14)(char *, uint64_t);
  void *v15;
  SEL *v16;
  uint64_t v18;

  v5 = v2;
  v6 = type metadata accessor for ColorScheme(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for ColorConstants.Environment(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_D57DC(v5, (uint64_t)v12);
  (*(void (**)(char *, _QWORD, uint64_t))(v7 + 104))(v9, enum case for ColorScheme.dark(_:), v6);
  v13 = sub_4928C();
  LOBYTE(v5) = dispatch thunk of static Equatable.== infix(_:_:)(v12, v9, v6, v13);
  v14 = *(void (**)(char *, uint64_t))(v7 + 8);
  v14(v9, v6);
  v14(v12, v6);
  v15 = (void *)objc_opt_self(UIColor);
  if ((v5 & 1) != 0)
    v16 = a1;
  else
    v16 = a2;
  return Color.init(_:)(objc_msgSend(v15, *v16));
}

uint64_t ColorConstants.vibrantQuaternary.getter()
{
  return sub_19D69C((SEL *)&selRef_quaternaryLabelColor, 0.5);
}

uint64_t sub_19D69C(SEL *a1, double a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;

  v3 = objc_msgSend((id)objc_opt_self(UIColor), *a1);
  v4 = Color.init(_:)(v3);
  v5 = Color.opacity(_:)(a2);
  swift_release(v4);
  return v5;
}

uint64_t ColorConstants.booksBackground.getter()
{
  return sub_19E618((SEL *)&selRef_systemBackgroundColor);
}

uint64_t ColorConstants.booksSecondaryBackground.getter()
{
  return sub_19E618((SEL *)&selRef_secondarySystemBackgroundColor);
}

uint64_t ColorConstants.booksTertiaryBackground.getter()
{
  return sub_19E618((SEL *)&selRef_tertiarySystemBackgroundColor);
}

uint64_t ColorConstants.booksGroupedBackground.getter()
{
  return sub_19E618((SEL *)&selRef_systemGroupedBackgroundColor);
}

uint64_t ColorConstants.booksSecondaryGroupedBackground.getter()
{
  return sub_19E618((SEL *)&selRef_secondarySystemGroupedBackgroundColor);
}

uint64_t ColorConstants.booksTertiaryGroupedBackground.getter()
{
  return sub_19E618((SEL *)&selRef_tertiarySystemGroupedBackgroundColor);
}

uint64_t ColorConstants.booksSystemFill.getter()
{
  return sub_19E618((SEL *)&selRef_systemFillColor);
}

uint64_t ColorConstants.booksSecondarySystemFill.getter()
{
  return sub_19E618((SEL *)&selRef_secondarySystemFillColor);
}

uint64_t ColorConstants.booksRed.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  void (*v14)(char *, uint64_t);
  __n128 v15;
  __n128 v16;
  double v17;
  uint64_t v19;

  v1 = v0;
  v2 = type metadata accessor for Color.RGBColorSpace(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for ColorScheme(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for ColorConstants.Environment(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_D57DC(v1, (uint64_t)v12);
  (*(void (**)(char *, _QWORD, uint64_t))(v7 + 104))(v9, enum case for ColorScheme.dark(_:), v6);
  v13 = sub_4928C();
  LOBYTE(v1) = dispatch thunk of static Equatable.== infix(_:_:)(v12, v9, v6, v13);
  v14 = *(void (**)(char *, uint64_t))(v7 + 8);
  v14(v9, v6);
  v14(v12, v6);
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for Color.RGBColorSpace.sRGB(_:), v2);
  if ((v1 & 1) != 0)
  {
    v15.n128_u64[0] = 0x3FE2929292929293;
    v17 = 0.203921569;
  }
  else
  {
    v15.n128_u64[0] = 0x3FE9191919191919;
    v17 = 0.235294118;
  }
  v16.n128_f64[0] = v17;
  return Color.init(_:red:green:blue:opacity:)(v5, v15, v17, v16, 1.0);
}

uint64_t ColorConstants.booksOrange.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  void (*v14)(char *, uint64_t);
  __n128 v15;
  __n128 v16;
  double v17;
  uint64_t v19;

  v1 = v0;
  v2 = type metadata accessor for Color.RGBColorSpace(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for ColorScheme(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for ColorConstants.Environment(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_D57DC(v1, (uint64_t)v12);
  (*(void (**)(char *, _QWORD, uint64_t))(v7 + 104))(v9, enum case for ColorScheme.dark(_:), v6);
  v13 = sub_4928C();
  LOBYTE(v1) = dispatch thunk of static Equatable.== infix(_:_:)(v12, v9, v6, v13);
  v14 = *(void (**)(char *, uint64_t))(v7 + 8);
  v14(v9, v6);
  v14(v12, v6);
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for Color.RGBColorSpace.sRGB(_:), v2);
  if ((v1 & 1) != 0)
  {
    v15.n128_u64[0] = 0x3FE6767676767676;
    v17 = 0.364705882;
    v16.n128_u64[0] = 0x3FB2121212121212;
  }
  else
  {
    v17 = 0.584313725;
    v15.n128_u64[0] = 1.0;
    v16.n128_u64[0] = 0;
  }
  return Color.init(_:red:green:blue:opacity:)(v5, v15, v17, v16, 1.0);
}

uint64_t ColorConstants.booksGreen.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  void (*v14)(char *, uint64_t);
  __n128 v15;
  __n128 v16;
  double v17;
  uint64_t v19;

  v1 = v0;
  v2 = type metadata accessor for Color.RGBColorSpace(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for ColorScheme(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for ColorConstants.Environment(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_D57DC(v1, (uint64_t)v12);
  (*(void (**)(char *, _QWORD, uint64_t))(v7 + 104))(v9, enum case for ColorScheme.dark(_:), v6);
  v13 = sub_4928C();
  LOBYTE(v1) = dispatch thunk of static Equatable.== infix(_:_:)(v12, v9, v6, v13);
  v14 = *(void (**)(char *, uint64_t))(v7 + 8);
  v14(v9, v6);
  v14(v12, v6);
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for Color.RGBColorSpace.sRGB(_:), v2);
  if ((v1 & 1) != 0)
  {
    v15.n128_u64[0] = 0x3FC4141414141414;
    v17 = 0.388235294;
    v16.n128_u64[0] = 0x3FD1919191919192;
  }
  else
  {
    v15.n128_u64[0] = 0x3FCB1B1B1B1B1B1BLL;
    v17 = 0.580392157;
    v16.n128_u64[0] = 0x3FD8989898989899;
  }
  return Color.init(_:red:green:blue:opacity:)(v5, v15, v17, v16, 1.0);
}

uint64_t ColorConstants.booksTeal.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  void (*v14)(char *, uint64_t);
  __n128 v15;
  __n128 v16;
  double v17;
  uint64_t v19;

  v1 = v0;
  v2 = type metadata accessor for Color.RGBColorSpace(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for ColorScheme(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for ColorConstants.Environment(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_D57DC(v1, (uint64_t)v12);
  (*(void (**)(char *, _QWORD, uint64_t))(v7 + 104))(v9, enum case for ColorScheme.dark(_:), v6);
  v13 = sub_4928C();
  LOBYTE(v1) = dispatch thunk of static Equatable.== infix(_:_:)(v12, v9, v6, v13);
  v14 = *(void (**)(char *, uint64_t))(v7 + 8);
  v14(v9, v6);
  v14(v12, v6);
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for Color.RGBColorSpace.sRGB(_:), v2);
  if ((v1 & 1) != 0)
  {
    v15.n128_u64[0] = 0x3FC7171717171717;
    v17 = 0.48627451;
    v16.n128_u64[0] = 0x3FE7171717171717;
  }
  else
  {
    v17 = 0.615686275;
    v16.n128_u64[0] = 0x3FEB9B9B9B9B9B9CLL;
    v15.n128_u64[0] = 0;
  }
  return Color.init(_:red:green:blue:opacity:)(v5, v15, v17, v16, 1.0);
}

uint64_t ColorConstants.booksBlue.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  void (*v14)(char *, uint64_t);
  __n128 v15;
  __n128 v16;
  double v17;
  uint64_t v19;

  v1 = v0;
  v2 = type metadata accessor for Color.RGBColorSpace(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for ColorScheme(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for ColorConstants.Environment(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_D57DC(v1, (uint64_t)v12);
  (*(void (**)(char *, _QWORD, uint64_t))(v7 + 104))(v9, enum case for ColorScheme.dark(_:), v6);
  v13 = sub_4928C();
  LOBYTE(v1) = dispatch thunk of static Equatable.== infix(_:_:)(v12, v9, v6, v13);
  v14 = *(void (**)(char *, uint64_t))(v7 + 8);
  v14(v9, v6);
  v14(v12, v6);
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for Color.RGBColorSpace.sRGB(_:), v2);
  if ((v1 & 1) != 0)
  {
    v15.n128_u64[0] = 0x3FBD1D1D1D1D1D1DLL;
    v17 = 0.274509804;
    v16.n128_u64[0] = 0x3FDD5D5D5D5D5D5DLL;
  }
  else
  {
    v15.n128_u64[0] = 0x3F9C1C1C1C1C1C1CLL;
    v17 = 0.278431373;
    v16.n128_u64[0] = 0x3FE1D1D1D1D1D1D2;
  }
  return Color.init(_:red:green:blue:opacity:)(v5, v15, v17, v16, 1.0);
}

uint64_t ColorConstants.booksPurple.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  void (*v14)(char *, uint64_t);
  __n128 v15;
  __n128 v16;
  uint64_t v18;

  v1 = v0;
  v2 = type metadata accessor for Color.RGBColorSpace(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for ColorScheme(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for ColorConstants.Environment(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_D57DC(v1, (uint64_t)v12);
  (*(void (**)(char *, _QWORD, uint64_t))(v7 + 104))(v9, enum case for ColorScheme.dark(_:), v6);
  v13 = sub_4928C();
  LOBYTE(v1) = dispatch thunk of static Equatable.== infix(_:_:)(v12, v9, v6, v13);
  v14 = *(void (**)(char *, uint64_t))(v7 + 8);
  v14(v9, v6);
  v14(v12, v6);
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for Color.RGBColorSpace.sRGB(_:), v2);
  if ((v1 & 1) != 0)
  {
    v15.n128_u64[0] = 0x3FCF9F9F9F9F9FA0;
    v16.n128_u64[0] = 0x3FDB9B9B9B9B9B9CLL;
  }
  else
  {
    v15.n128_u64[0] = 0x3FD5151515151515;
    v16.n128_u64[0] = 0x3FE2929292929293;
  }
  return Color.init(_:red:green:blue:opacity:)(v5, v15, v15.n128_f64[0], v16, 1.0);
}

uint64_t ColorConstants.booksMagenta.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  void (*v14)(char *, uint64_t);
  __n128 v15;
  __n128 v16;
  double v17;
  uint64_t v19;

  v1 = v0;
  v2 = type metadata accessor for Color.RGBColorSpace(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for ColorScheme(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for ColorConstants.Environment(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_D57DC(v1, (uint64_t)v12);
  (*(void (**)(char *, _QWORD, uint64_t))(v7 + 104))(v9, enum case for ColorScheme.dark(_:), v6);
  v13 = sub_4928C();
  LOBYTE(v1) = dispatch thunk of static Equatable.== infix(_:_:)(v12, v9, v6, v13);
  v14 = *(void (**)(char *, uint64_t))(v7 + 8);
  v14(v9, v6);
  v14(v12, v6);
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for Color.RGBColorSpace.sRGB(_:), v2);
  if ((v1 & 1) != 0)
  {
    v15.n128_u64[0] = 0x3FE9393939393939;
    v17 = 0.235294118;
    v16.n128_u64[0] = 0x3FD3535353535353;
  }
  else
  {
    v15.n128_u64[0] = 0x3FECBCBCBCBCBCBDLL;
    v17 = 0.141176471;
    v16.n128_u64[0] = 0x3FD2121212121212;
  }
  return Color.init(_:red:green:blue:opacity:)(v5, v15, v17, v16, 1.0);
}

uint64_t ColorConstants.booksIconBackground.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  void (*v14)(char *, uint64_t);
  uint64_t v15;
  __n128 v16;
  __n128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;

  v1 = v0;
  v2 = type metadata accessor for Color.RGBColorSpace(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for ColorScheme(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for ColorConstants.Environment(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_D57DC(v1, (uint64_t)v12);
  (*(void (**)(char *, _QWORD, uint64_t))(v7 + 104))(v9, enum case for ColorScheme.dark(_:), v6);
  v13 = sub_4928C();
  LOBYTE(v1) = dispatch thunk of static Equatable.== infix(_:_:)(v12, v9, v6, v13);
  v14 = *(void (**)(char *, uint64_t))(v7 + 8);
  v14(v9, v6);
  v15 = ((uint64_t (*)(char *, uint64_t))v14)(v12, v6);
  if ((v1 & 1) == 0)
    return static Color.black.getter(v15);
  v16 = ((__n128 (*)(char *, _QWORD, uint64_t))*(_QWORD *)(v3 + 104))(v5, enum case for Color.RGBColorSpace.sRGB(_:), v2);
  v16.n128_u64[0] = 0x3FED7D7D7D7D7D7DLL;
  v17.n128_u64[0] = 0x3FEEBEBEBEBEBEBFLL;
  v18 = Color.init(_:red:green:blue:opacity:)(v5, v16, 0.921568627, v17, 1.0);
  v19 = Color.opacity(_:)(0.22);
  swift_release(v18);
  return v19;
}

uint64_t ColorConstants.booksAXSeparator.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  void (*v14)(char *, uint64_t);
  __n128 v15;
  __n128 v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  uint64_t v21;

  v1 = v0;
  v2 = type metadata accessor for Color.RGBColorSpace(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for ColorScheme(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for ColorConstants.Environment(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_D57DC(v1, (uint64_t)v12);
  (*(void (**)(char *, _QWORD, uint64_t))(v7 + 104))(v9, enum case for ColorScheme.dark(_:), v6);
  v13 = sub_4928C();
  LOBYTE(v1) = dispatch thunk of static Equatable.== infix(_:_:)(v12, v9, v6, v13);
  v14 = *(void (**)(char *, uint64_t))(v7 + 8);
  v14(v9, v6);
  v14(v12, v6);
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for Color.RGBColorSpace.sRGB(_:), v2);
  if ((v1 & 1) != 0)
  {
    v15.n128_u64[0] = 0x3FED7D7D7D7D7D7DLL;
    v16.n128_u64[0] = 0x3FEEBEBEBEBEBEBFLL;
    v17 = Color.init(_:red:green:blue:opacity:)(v5, v15, 0.921568627, v16, 1.0);
    v18 = 0.35;
  }
  else
  {
    v15.n128_u64[0] = 0x3FCE1E1E1E1E1E1ELL;
    v16.n128_u64[0] = 0x3FD0D0D0D0D0D0D1;
    v17 = Color.init(_:red:green:blue:opacity:)(v5, v15, 0.235294118, v16, 1.0);
    v18 = 0.45;
  }
  v19 = Color.opacity(_:)(v18);
  swift_release(v17);
  return v19;
}

uint64_t ColorConstants.booksSeparator.getter()
{
  return sub_19E618((SEL *)&selRef_separatorColor);
}

uint64_t sub_19E618(SEL *a1)
{
  id v1;

  v1 = objc_msgSend((id)objc_opt_self(UIColor), *a1);
  return Color.init(_:)(v1);
}

uint64_t ColorConstants.booksTableSelection.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  void (*v14)(char *, uint64_t);
  __n128 v15;
  __n128 v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  uint64_t v21;

  v1 = v0;
  v2 = type metadata accessor for Color.RGBColorSpace(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for ColorScheme(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for ColorConstants.Environment(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_D57DC(v1, (uint64_t)v12);
  (*(void (**)(char *, _QWORD, uint64_t))(v7 + 104))(v9, enum case for ColorScheme.dark(_:), v6);
  v13 = sub_4928C();
  LOBYTE(v1) = dispatch thunk of static Equatable.== infix(_:_:)(v12, v9, v6, v13);
  v14 = *(void (**)(char *, uint64_t))(v7 + 8);
  v14(v9, v6);
  v14(v12, v6);
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for Color.RGBColorSpace.sRGB(_:), v2);
  if ((v1 & 1) != 0)
  {
    v15.n128_u64[0] = 1.0;
    v16.n128_u64[0] = 1.0;
    v17 = Color.init(_:red:green:blue:opacity:)(v5, v15, 1.0, v16, 1.0);
    v18 = 0.12;
  }
  else
  {
    v15.n128_u64[0] = 0x3F90101010101010;
    v16.n128_u64[0] = 0x3FAE1E1E1E1E1E1ELL;
    v17 = Color.init(_:red:green:blue:opacity:)(v5, v15, 0.0156862745, v16, 1.0);
    v18 = 0.15;
  }
  v19 = Color.opacity(_:)(v18);
  swift_release(v17);
  return v19;
}

unint64_t SynchronousNativeIntentDispatcher.init()@<X0>(uint64_t a1@<X8>)
{
  _OWORD *v2;
  unint64_t result;

  *(_QWORD *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  v2 = (_OWORD *)(a1 + 8);
  sub_B414(a1 + 8, &qword_266188);
  *v2 = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_QWORD *)(a1 + 40) = 0;
  result = sub_9894((uint64_t)_swiftEmptyArrayStorage);
  *(_QWORD *)a1 = result;
  return result;
}

uint64_t SynchronousNativeIntentDispatcher.register(contentsOf:)(uint64_t *a1)
{
  _QWORD *v1;
  uint64_t v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v4;
  uint64_t v6;

  v2 = *a1;
  swift_bridgeObjectRetain(*a1);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v1);
  v6 = *v1;
  *v1 = 0x8000000000000000;
  sub_115CF4(v2, (uint64_t)sub_115CB4, 0, isUniquelyReferenced_nonNull_native, (uint64_t)&v6);
  v4 = *v1;
  *v1 = v6;
  return swift_bridgeObjectRelease(v4);
}

uint64_t SynchronousNativeIntentDispatcher.registering<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v4;

  sub_116054(v4, a4);
  return SynchronousNativeIntentDispatcher.register<A>(_:)(a1, a2, a3);
}

double SynchronousNativeIntentDispatcher.withNext(_:)@<D0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v2;
  _OWORD *v5;
  __int128 v6;
  double result;
  _OWORD v8[2];
  __int128 v9;

  sub_116054(v2, (uint64_t)v8);
  sub_19F8F0(a1, (uint64_t)v8 + 8);
  a2[3] = &type metadata for SynchronousNativeIntentDispatcher;
  a2[4] = &protocol witness table for SynchronousNativeIntentDispatcher;
  v5 = (_OWORD *)swift_allocObject(&unk_258D20, 64, 7);
  *a2 = v5;
  v6 = v8[1];
  v5[1] = v8[0];
  v5[2] = v6;
  result = *(double *)&v9;
  v5[3] = v9;
  return result;
}

uint64_t SynchronousNativeIntentDispatcher.register<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD v11[5];

  v6 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 24))(a2, a3);
  v8 = v7;
  v11[3] = a2;
  v11[4] = a3;
  v9 = sub_C404(v11);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(v9, a1, a2);
  return sub_8D18((uint64_t)v11, v6, v8);
}

uint64_t SynchronousNativeIntentDispatcher.registering(contentsOf:)@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v5;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  uint64_t v9;

  sub_116054(v2, (uint64_t)a2);
  v5 = *a1;
  swift_bridgeObjectRetain(v5);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a2);
  v9 = *a2;
  *a2 = 0x8000000000000000;
  sub_115CF4(v5, (uint64_t)sub_115CB4, 0, isUniquelyReferenced_nonNull_native, (uint64_t)&v9);
  v7 = *a2;
  *a2 = v9;
  return swift_bridgeObjectRelease(v7);
}

uint64_t SynchronousNativeIntentDispatcher.perform<A>(_:objectGraph:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t (*v20)(uint64_t, uint64_t, uint64_t);
  void (*v21)(char *, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  int v25;
  uint64_t v26;
  void (*v27)(char *, char *, uint64_t);
  void (*v28)(char *, uint64_t, uint64_t);
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;

  v33 = a2;
  v36 = a5;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, *(_QWORD *)(a4 + 8), a3, &protocol requirements base descriptor for IntentModel, &associated type descriptor for IntentModel.ReturnType);
  v34 = type metadata accessor for IntentOutcome(0, AssociatedTypeWitness);
  v32 = *(_QWORD *)(v34 - 8);
  v9 = __chkstk_darwin(v34);
  v37 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v30 - v12;
  v14 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v15 = __chkstk_darwin(v11);
  v17 = (char *)&v30 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v19 = (char *)&v30 - v18;
  v35 = a1;
  sub_19ED28(a3, a4, (uint64_t)v13);
  v20 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 48);
  if (v20((uint64_t)v13, 1, AssociatedTypeWitness) == 1)
  {
    v31 = v17;
    v21 = *(void (**)(char *, uint64_t))(v32 + 8);
    v21(v13, v34);
    v22 = v33;
    v23 = v38;
    result = sub_19EEE4(v35, v33, a3, a4, (uint64_t)v37);
    if (!v23)
    {
      v25 = v20((uint64_t)v37, 1, AssociatedTypeWitness);
      v26 = v36;
      if (v25 == 1)
      {
        v21(v37, v34);
        return sub_19F094(v35, v22, a3, a4);
      }
      else
      {
        v28 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 32);
        v29 = v31;
        v28(v31, (uint64_t)v37, AssociatedTypeWitness);
        return ((uint64_t (*)(uint64_t, char *, uint64_t))v28)(v26, v29, AssociatedTypeWitness);
      }
    }
  }
  else
  {
    v27 = *(void (**)(char *, char *, uint64_t))(v14 + 32);
    v27(v19, v13, AssociatedTypeWitness);
    return ((uint64_t (*)(uint64_t, char *, uint64_t))v27)(v36, v19, AssociatedTypeWitness);
  }
  return result;
}

uint64_t sub_19ED28@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t ExtendedExistentialTypeMetadata;
  int v18;
  void (*v19)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[5];

  v26 = a3;
  v4 = *(_QWORD *)(a2 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v4, a1, &protocol requirements base descriptor for IntentModel, &associated type descriptor for IntentModel.ReturnType);
  v8 = type metadata accessor for SynchronousStaticIntent(255, AssociatedTypeWitness, v6, v7);
  v9 = type metadata accessor for Optional(0, v8);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v25 - v12;
  v14 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v11);
  v16 = (char *)&v25 - v15;
  dispatch thunk of IntentModel._canonicalized.getter(v28, a1, v4);
  v27 = AssociatedTypeWitness;
  ExtendedExistentialTypeMetadata = swift_getExtendedExistentialTypeMetadata(&unk_1E3480, &v27);
  v18 = swift_dynamicCast(v13, v28, ExtendedExistentialTypeMetadata, v8, 6);
  v19 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56);
  if (v18)
  {
    v19(v13, 0, 1, v8);
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v16, v13, v8);
    v20 = *(_QWORD *)(AssociatedTypeWitness - 8);
    v21 = v26;
    (*(void (**)(uint64_t, char *, uint64_t))(v20 + 32))(v26, v16, AssociatedTypeWitness);
    v22 = 0;
    v23 = v21;
  }
  else
  {
    v22 = 1;
    v19(v13, 1, 1, v8);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
    v20 = *(_QWORD *)(AssociatedTypeWitness - 8);
    v23 = v26;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 56))(v23, v22, 1, AssociatedTypeWitness);
}

uint64_t sub_19EEE4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t *v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t AssociatedTypeWitness;
  uint64_t v19;
  uint64_t v21;
  _QWORD v22[8];
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  _QWORD v26[5];
  uint64_t v27;

  v27 = a2;
  v10 = *v5;
  v11 = *(_QWORD *)(a4 + 8);
  v12 = dispatch thunk of IntentModel.kind.getter(a3, v11);
  v14 = v13;
  if (*(_QWORD *)(v10 + 16) && (v15 = sub_9F7C(v12, v13), (v16 & 1) != 0))
  {
    sub_BD00(*(_QWORD *)(v10 + 56) + 40 * v15, (uint64_t)&v23);
    swift_bridgeObjectRelease(v14);
    if (*((_QWORD *)&v24 + 1))
    {
      v17 = sub_AC68(&v23, (uint64_t)v26);
      __chkstk_darwin(v17);
      v22[2] = a3;
      v22[3] = a4;
      v22[4] = v26;
      v22[5] = a1;
      v22[6] = v27;
      AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v11, a3, &protocol requirements base descriptor for IntentModel, &associated type descriptor for IntentModel.ReturnType);
      v19 = type metadata accessor for IntentOutcome(0, AssociatedTypeWitness);
      dispatch thunk of BaseObjectGraph.performAsCurrent<A>(_:)(sub_19FC88, v22, v19);
      return _s7BooksUI13AnyPagedFrameVwxx_0(v26);
    }
  }
  else
  {
    v25 = 0;
    v23 = 0u;
    v24 = 0u;
    swift_bridgeObjectRelease(v14);
  }
  sub_B414((uint64_t)&v23, &qword_25DFE8);
  v21 = swift_getAssociatedTypeWitness(0, v11, a3, &protocol requirements base descriptor for IntentModel, &associated type descriptor for IntentModel.ReturnType);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(a5, 1, 1, v21);
}

uint64_t sub_19F094(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  _QWORD v18[3];
  uint64_t v19;
  uint64_t v20;

  sub_19FBF8(v4 + 8, (uint64_t)&v16);
  if (v17)
  {
    sub_AC68(&v16, (uint64_t)v18);
    v9 = v19;
    v10 = v20;
    sub_5480(v18, v19);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 8))(a1, a2, a3, a4, v9, v10);
    return _s7BooksUI13AnyPagedFrameVwxx_0(v18);
  }
  else
  {
    sub_B414((uint64_t)&v16, &qword_266188);
    v12 = type metadata accessor for IntentDispatcherError(0);
    v13 = sub_19FC40();
    swift_allocError(v12, v13, 0, 0);
    v15 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v12 - 8) + 104))(v14, enum case for IntentDispatcherError.unsupported(_:), v12);
    return swift_willThrow(v15);
  }
}

uint64_t sub_19F1BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t AssociatedTypeWitness;
  uint64_t v15;
  uint64_t v16;
  uint64_t AssociatedConformanceWitness;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t ExtendedExistentialTypeMetadata;
  int v32;
  void (*v33)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v34;
  uint64_t result;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  uint64_t v43;
  uint64_t DynamicType;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  int v57;
  uint64_t v58;
  void (*v59)(char *, uint64_t, uint64_t, uint64_t);
  Swift::String v60;
  Swift::String v61;
  void *object;
  Swift::String v63;
  Swift::String v64;
  void *v65;
  Swift::String v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;

  v82 = a6;
  v74 = a2;
  v79 = a7;
  v80 = *(_QWORD *)(a4 - 8);
  __chkstk_darwin(a1);
  v77 = (char *)&v67 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v13, v12, &protocol requirements base descriptor for IntentModel, &associated type descriptor for IntentModel.ReturnType);
  v73 = type metadata accessor for IntentOutcome(255, AssociatedTypeWitness);
  v68 = type metadata accessor for Optional(0, v73);
  v67 = *(_QWORD *)(v68 - 8);
  __chkstk_darwin(v68);
  v72 = (char *)&v67 - v15;
  v16 = swift_getAssociatedTypeWitness(255, a5, a3, &protocol requirements base descriptor for SynchronousNativeIntentImplementation, &associated type descriptor for SynchronousNativeIntentImplementation.Intent);
  v76 = a5;
  v75 = a3;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a5, a3, v16, &protocol requirements base descriptor for SynchronousNativeIntentImplementation, &associated conformance descriptor for SynchronousNativeIntentImplementation.SynchronousNativeIntentImplementation.Intent: SynchronousNativeIntentModel);
  v18 = swift_getAssociatedTypeWitness(255, *(_QWORD *)(AssociatedConformanceWitness + 8), v16, &protocol requirements base descriptor for IntentModel, &associated type descriptor for IntentModel.ReturnType);
  v19 = type metadata accessor for IntentOutcome(0, v18);
  v70 = *(_QWORD *)(v19 - 8);
  v71 = v19;
  v20 = __chkstk_darwin(v19);
  v69 = (char *)&v67 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v81 = (char *)&v67 - v22;
  v23 = type metadata accessor for Optional(0, v16);
  v24 = *(_QWORD *)(v23 - 8);
  v25 = __chkstk_darwin(v23);
  v27 = (char *)&v67 - v26;
  v28 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v25);
  v30 = (char *)&v67 - v29;
  v78 = a4;
  dispatch thunk of IntentModel._canonicalized.getter(&v84, a4, v82);
  v82 = AssociatedTypeWitness;
  v86 = AssociatedTypeWitness;
  ExtendedExistentialTypeMetadata = swift_getExtendedExistentialTypeMetadata(&unk_1E3480, &v86);
  v32 = swift_dynamicCast(v27, &v84, ExtendedExistentialTypeMetadata, v16, 6);
  v33 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v28 + 56);
  if (v32)
  {
    v33(v27, 0, 1, v16);
    (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v30, v27, v16);
    v34 = v83;
    (*(void (**)(char *, uint64_t, uint64_t))(v76 + 32))(v30, v74, v75);
    if (v34)
    {
      return (*(uint64_t (**)(char *, uint64_t))(v28 + 8))(v30, v16);
    }
    else
    {
      v52 = v69;
      v53 = v70;
      v54 = v71;
      (*(void (**)(char *, char *, uint64_t))(v70 + 16))(v69, v81, v71);
      v56 = v72;
      v55 = v73;
      v57 = swift_dynamicCast(v72, v52, v54, v73, 6);
      v58 = *(_QWORD *)(v55 - 8);
      v59 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v58 + 56);
      if (v57)
      {
        v59(v56, 0, 1, v55);
        (*(void (**)(char *, uint64_t))(v53 + 8))(v81, v54);
        (*(void (**)(char *, uint64_t))(v28 + 8))(v30, v16);
        return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v58 + 32))(v79, v56, v55);
      }
      else
      {
        v59(v56, 1, 1, v55);
        (*(void (**)(char *, uint64_t))(v67 + 8))(v56, v68);
        v84 = 0;
        v85 = 0xE000000000000000;
        _StringGuts.grow(_:)(73);
        v60._object = (void *)0x80000000001FE500;
        v60._countAndFlagsBits = 0xD00000000000001BLL;
        String.append(_:)(v60);
        v61._countAndFlagsBits = _typeName(_:qualified:)(v54, 0);
        object = v61._object;
        String.append(_:)(v61);
        swift_bridgeObjectRelease(object);
        v63._countAndFlagsBits = 0xD000000000000029;
        v63._object = (void *)0x80000000001FE520;
        String.append(_:)(v63);
        v64._countAndFlagsBits = _typeName(_:qualified:)(v55, 0);
        v65 = v64._object;
        String.append(_:)(v64);
        swift_bridgeObjectRelease(v65);
        v66._countAndFlagsBits = 96;
        v66._object = (void *)0xE100000000000000;
        String.append(_:)(v66);
        result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v84, v85, "BooksUI/SynchronousNativeIntentDispatcher.swift", 47, 2, 187, 0);
        __break(1u);
      }
    }
  }
  else
  {
    v33(v27, 1, 1, v16);
    (*(void (**)(char *, uint64_t))(v24 + 8))(v27, v23);
    if (qword_25DB00 != -1)
      swift_once(&qword_25DB00, sub_7268);
    v36 = type metadata accessor for Logger(0);
    sub_7120(v36, (uint64_t)qword_25DED0);
    v37 = v80;
    v38 = v77;
    v39 = v78;
    v40 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v80 + 16))(v77, a1, v78);
    v41 = Logger.logObject.getter(v40);
    v42 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v41, v42))
    {
      v43 = swift_slowAlloc(22, -1);
      v81 = (char *)swift_slowAlloc(64, -1);
      v84 = v81;
      *(_DWORD *)v43 = 136315394;
      DynamicType = swift_getDynamicType(v38, v39, 0);
      v45 = _typeName(_:qualified:)(DynamicType, 0);
      v47 = v46;
      v86 = sub_14AC3C(v45, v46, (uint64_t *)&v84);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v86, &v87, v43 + 4, v43 + 12);
      swift_bridgeObjectRelease(v47);
      (*(void (**)(char *, uint64_t))(v80 + 8))(v38, v39);
      *(_WORD *)(v43 + 12) = 2080;
      v48 = _typeName(_:qualified:)(v16, 0);
      v50 = v49;
      v86 = sub_14AC3C(v48, v49, (uint64_t *)&v84);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v86, &v87, v43 + 14, v43 + 22);
      swift_bridgeObjectRelease(v50);
      v51 = v81;
      swift_arrayDestroy(v81, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v51, -1, -1);
      swift_slowDealloc(v43, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v37 + 8))(v38, v39);
    }

    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v82 - 8) + 56))(v79, 1, 1);
  }
  return result;
}

uint64_t sub_19F854@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return SynchronousNativeIntentDispatcher.perform<A>(_:objectGraph:)(a1, a2, a3, a4, a5);
}

double sub_19F868@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t *v4;
  _OWORD *v9;
  __int128 v10;
  double result;
  _OWORD v12[2];
  __int128 v13;

  sub_116054(v4, (uint64_t)v12);
  sub_19F8F0(a1, (uint64_t)v12 + 8);
  a4[3] = a2;
  a4[4] = a3;
  v9 = (_OWORD *)swift_allocObject(&unk_258D20, 64, 7);
  *a4 = v9;
  v10 = v12[1];
  v9[1] = v12[0];
  v9[2] = v10;
  result = *(double *)&v13;
  v9[3] = v13;
  return result;
}

uint64_t sub_19F8F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_5440(&qword_266188);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_19F938()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[2]);
  if (v0[6])
    _s7BooksUI13AnyPagedFrameVwxx_0(v0 + 3);
  return swift_deallocObject(v0, 64, 7);
}

uint64_t dispatch thunk of SynchronousNativeIntentDispatching.perform<A>(_:objectGraph:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 8))();
}

uint64_t destroy for SynchronousNativeIntentDispatcher(_QWORD *a1)
{
  uint64_t result;

  result = swift_bridgeObjectRelease(*a1);
  if (a1[4])
    return _s7BooksUI13AnyPagedFrameVwxx_0(a1 + 1);
  return result;
}

uint64_t initializeWithCopy for SynchronousNativeIntentDispatcher(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;

  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  v5 = a2 + 1;
  v6 = a2[4];
  swift_bridgeObjectRetain(v4);
  if (v6)
  {
    v7 = a2[5];
    *(_QWORD *)(a1 + 32) = v6;
    *(_QWORD *)(a1 + 40) = v7;
    (**(void (***)(uint64_t, _QWORD *, uint64_t))(v6 - 8))(a1 + 8, v5, v6);
  }
  else
  {
    v8 = *((_OWORD *)v5 + 1);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)v5;
    *(_OWORD *)(a1 + 24) = v8;
    *(_QWORD *)(a1 + 40) = v5[4];
  }
  return a1;
}

uint64_t *assignWithCopy for SynchronousNativeIntentDispatcher(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = a2[4];
  if (!a1[4])
  {
    if (v6)
    {
      a1[4] = v6;
      a1[5] = a2[5];
      (**(void (***)(uint64_t, uint64_t))(v6 - 8))((uint64_t)(a1 + 1), (uint64_t)(a2 + 1));
      return a1;
    }
LABEL_7:
    v7 = *(_OWORD *)(a2 + 1);
    v8 = *(_OWORD *)(a2 + 3);
    a1[5] = a2[5];
    *(_OWORD *)(a1 + 1) = v7;
    *(_OWORD *)(a1 + 3) = v8;
    return a1;
  }
  if (!v6)
  {
    _s7BooksUI13AnyPagedFrameVwxx_0(a1 + 1);
    goto LABEL_7;
  }
  sub_142F8(a1 + 1, a2 + 1);
  return a1;
}

uint64_t *assignWithTake for SynchronousNativeIntentDispatcher(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  __int128 v5;

  v4 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v4);
  if (a1[4])
    _s7BooksUI13AnyPagedFrameVwxx_0(a1 + 1);
  v5 = *(_OWORD *)(a2 + 3);
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
  *(_OWORD *)(a1 + 3) = v5;
  a1[5] = a2[5];
  return a1;
}

uint64_t getEnumTagSinglePayload for SynchronousNativeIntentDispatcher(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SynchronousNativeIntentDispatcher(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SynchronousNativeIntentDispatcher()
{
  return &type metadata for SynchronousNativeIntentDispatcher;
}

uint64_t sub_19FBF8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_5440(&qword_266188);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_19FC40()
{
  unint64_t result;
  uint64_t v1;

  result = qword_26A708;
  if (!qword_26A708)
  {
    v1 = type metadata accessor for IntentDispatcherError(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for IntentDispatcherError, v1);
    atomic_store(result, (unint64_t *)&qword_26A708);
  }
  return result;
}

uint64_t sub_19FC88@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = v1[2];
  v4 = v1[3];
  v5 = (_QWORD *)v1[4];
  v6 = v1[5];
  v7 = v1[6];
  v8 = v5[3];
  v9 = v5[4];
  sub_5480(v5, v8);
  return sub_19F1BC(v6, v7, v8, v3, v9, *(_QWORD *)(v4 + 8), a1);
}

int *sub_19FD04()
{
  uint64_t v0;
  uint64_t inited;
  int *result;
  uint64_t v3;

  v0 = sub_5440(&qword_26A728);
  inited = swift_initStackObject(v0, &v3);
  *(_OWORD *)(inited + 16) = xmmword_1F58E0;
  *(_QWORD *)(inited + 32) = 0x79654B736B6F6F62;
  *(_QWORD *)(inited + 40) = 0xE800000000000000;
  *(_QWORD *)(inited + 48) = swift_getKeyPath(&unk_1F5908);
  *(_QWORD *)(inited + 56) = 0x636142736B6F6F62;
  *(_QWORD *)(inited + 64) = 0xEF646E756F72676BLL;
  *(_QWORD *)(inited + 72) = swift_getKeyPath(&unk_1F5930);
  *(_QWORD *)(inited + 80) = 0xD000000000000018;
  *(_QWORD *)(inited + 88) = 0x80000000001FE550;
  *(_QWORD *)(inited + 96) = swift_getKeyPath(&unk_1F5958);
  *(_QWORD *)(inited + 104) = 0xD000000000000017;
  *(_QWORD *)(inited + 112) = 0x80000000001FE570;
  *(_QWORD *)(inited + 120) = swift_getKeyPath(&unk_1F5980);
  *(_QWORD *)(inited + 128) = 0xD000000000000016;
  *(_QWORD *)(inited + 136) = 0x80000000001FE590;
  *(_QWORD *)(inited + 144) = swift_getKeyPath(&unk_1F59A8);
  *(_QWORD *)(inited + 152) = 0xD00000000000001FLL;
  *(_QWORD *)(inited + 160) = 0x80000000001FE5B0;
  *(_QWORD *)(inited + 168) = swift_getKeyPath(&unk_1F59D0);
  *(_QWORD *)(inited + 176) = 0xD00000000000001ELL;
  *(_QWORD *)(inited + 184) = 0x80000000001FE5D0;
  *(_QWORD *)(inited + 192) = swift_getKeyPath(&unk_1F59F8);
  *(_QWORD *)(inited + 200) = 0x646552736B6F6F62;
  *(_QWORD *)(inited + 208) = 0xE800000000000000;
  *(_QWORD *)(inited + 216) = swift_getKeyPath(&unk_1F5A20);
  *(_QWORD *)(inited + 224) = 0x61724F736B6F6F62;
  *(_QWORD *)(inited + 232) = 0xEB0000000065676ELL;
  *(_QWORD *)(inited + 240) = swift_getKeyPath(&unk_1F5A48);
  *(_QWORD *)(inited + 248) = 0x657247736B6F6F62;
  *(_QWORD *)(inited + 256) = 0xEA00000000006E65;
  *(_QWORD *)(inited + 264) = swift_getKeyPath(&unk_1F5A70);
  *(_QWORD *)(inited + 272) = 0x616554736B6F6F62;
  *(_QWORD *)(inited + 280) = 0xE90000000000006CLL;
  *(_QWORD *)(inited + 288) = swift_getKeyPath(&unk_1F5A98);
  *(_QWORD *)(inited + 296) = 0x756C42736B6F6F62;
  *(_QWORD *)(inited + 304) = 0xE900000000000065;
  *(_QWORD *)(inited + 312) = swift_getKeyPath(&unk_1F5AC0);
  *(_QWORD *)(inited + 320) = 0x727550736B6F6F62;
  *(_QWORD *)(inited + 328) = 0xEB00000000656C70;
  *(_QWORD *)(inited + 336) = swift_getKeyPath(&unk_1F5AE8);
  strcpy((char *)(inited + 344), "booksMagenta");
  *(_BYTE *)(inited + 357) = 0;
  *(_WORD *)(inited + 358) = -5120;
  *(_QWORD *)(inited + 360) = swift_getKeyPath(&unk_1F5B10);
  *(_QWORD *)(inited + 368) = 0xD000000000000013;
  *(_QWORD *)(inited + 376) = 0x80000000001FE650;
  *(_QWORD *)(inited + 384) = swift_getKeyPath(&unk_1F5B38);
  *(_QWORD *)(inited + 392) = 0xD000000000000010;
  *(_QWORD *)(inited + 400) = 0x80000000001FE670;
  *(_QWORD *)(inited + 408) = swift_getKeyPath(&unk_1F5B60);
  strcpy((char *)(inited + 416), "booksSeparator");
  *(_BYTE *)(inited + 431) = -18;
  *(_QWORD *)(inited + 432) = swift_getKeyPath(&unk_1F5B88);
  *(_QWORD *)(inited + 440) = 0xD000000000000013;
  *(_QWORD *)(inited + 448) = 0x80000000001FE690;
  *(_QWORD *)(inited + 456) = swift_getKeyPath(&off_1F5BB0);
  *(_QWORD *)(inited + 464) = 0xD000000000000015;
  *(_QWORD *)(inited + 472) = 0x80000000001FE6B0;
  *(_QWORD *)(inited + 480) = swift_getKeyPath(&unk_1F5BD8);
  *(_QWORD *)(inited + 488) = 0xD00000000000001ELL;
  *(_QWORD *)(inited + 496) = 0x80000000001FE6D0;
  *(_QWORD *)(inited + 504) = swift_getKeyPath(&unk_1F5C00);
  *(_QWORD *)(inited + 512) = 0x62614C736B6F6F62;
  *(_QWORD *)(inited + 520) = 0xEA00000000006C65;
  *(_QWORD *)(inited + 528) = swift_getKeyPath(&unk_1F5C28);
  *(_QWORD *)(inited + 536) = 0xD000000000000013;
  *(_QWORD *)(inited + 544) = 0x80000000001FE5F0;
  *(_QWORD *)(inited + 552) = swift_getKeyPath(&unk_1F5C50);
  *(_QWORD *)(inited + 560) = 0xD000000000000012;
  *(_QWORD *)(inited + 568) = 0x80000000001FE610;
  *(_QWORD *)(inited + 576) = swift_getKeyPath(&unk_1F5C78);
  *(_QWORD *)(inited + 584) = 0xD000000000000014;
  *(_QWORD *)(inited + 592) = 0x80000000001FE630;
  *(_QWORD *)(inited + 600) = swift_getKeyPath(&unk_1F5CA0);
  *(_QWORD *)(inited + 608) = 0x696857736B6F6F62;
  *(_QWORD *)(inited + 616) = 0xEF6C6562614C6574;
  *(_QWORD *)(inited + 624) = swift_getKeyPath(&unk_1F5CC8);
  strcpy((char *)(inited + 632), "vibrantPrimary");
  *(_BYTE *)(inited + 647) = -18;
  *(_QWORD *)(inited + 648) = swift_getKeyPath(&unk_1F5CF0);
  *(_QWORD *)(inited + 656) = 0xD000000000000010;
  *(_QWORD *)(inited + 664) = 0x80000000001FE6F0;
  *(_QWORD *)(inited + 672) = swift_getKeyPath(&unk_1F5D18);
  *(_QWORD *)(inited + 680) = 0x54746E6172626976;
  *(_QWORD *)(inited + 688) = 0xEF79726169747265;
  *(_QWORD *)(inited + 696) = swift_getKeyPath(&unk_1F5D40);
  *(_QWORD *)(inited + 704) = 0xD000000000000011;
  *(_QWORD *)(inited + 712) = 0x80000000001FE710;
  *(_QWORD *)(inited + 720) = swift_getKeyPath(&unk_1F5D68);
  *(_QWORD *)(inited + 728) = 0xD000000000000017;
  *(_QWORD *)(inited + 736) = 0x80000000001FE730;
  *(_QWORD *)(inited + 744) = swift_getKeyPath(&unk_1F5D90);
  *(_QWORD *)(inited + 752) = 0xD000000000000019;
  *(_QWORD *)(inited + 760) = 0x80000000001FE750;
  *(_QWORD *)(inited + 768) = swift_getKeyPath(&unk_1F5DB8);
  *(_QWORD *)(inited + 776) = 0xD00000000000001BLL;
  *(_QWORD *)(inited + 784) = 0x80000000001FE770;
  *(_QWORD *)(inited + 792) = swift_getKeyPath(&unk_1F5DE0);
  result = (int *)sub_9CE0(inited);
  off_26A710[0] = result;
  return result;
}

uint64_t sub_1A02DC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  void (*v12)(char *, uint64_t);
  uint64_t v13;
  uint64_t result;
  uint64_t v15;

  v4 = type metadata accessor for ColorScheme(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for ColorConstants.Environment(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_D57DC(a1, (uint64_t)v10);
  (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for ColorScheme.dark(_:), v4);
  v11 = sub_4928C();
  LOBYTE(a1) = dispatch thunk of static Equatable.== infix(_:_:)(v10, v7, v4, v11);
  v12 = *(void (**)(char *, uint64_t))(v5 + 8);
  v12(v7, v4);
  v13 = ((uint64_t (*)(char *, uint64_t))v12)(v10, v4);
  if ((a1 & 1) != 0)
    result = _s7BooksUI14ColorConstantsV25vibrantPrimaryButtonLabel05SwiftB00C0Vvg_0();
  else
    result = static Color.black.getter(v13);
  *a2 = result;
  return result;
}

uint64_t sub_1A03F0@<X0>(SEL *a1@<X3>, uint64_t *a2@<X8>)
{
  id v3;
  uint64_t result;

  v3 = objc_msgSend((id)objc_opt_self(UIColor), *a1);
  result = Color.init(_:)(v3);
  *a2 = result;
  return result;
}

uint64_t sub_1A0434@<X0>(SEL *a1@<X3>, uint64_t *a2@<X8>, double a3@<D0>)
{
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v5 = objc_msgSend((id)objc_opt_self(UIColor), *a1);
  v6 = Color.init(_:)(v5);
  v7 = Color.opacity(_:)(a3);
  result = swift_release(v6);
  *a2 = v7;
  return result;
}

uint64_t ColorConstants.subscript.getter(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int *v6;
  unint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v11;

  v3 = v2;
  if (qword_25DD28 != -1)
    swift_once(&qword_25DD28, sub_19FD04);
  v6 = off_26A710[0];
  if (*(_QWORD *)((char *)off_26A710[0] + (unint64_t)&dword_10))
  {
    swift_bridgeObjectRetain(a2);
    v7 = sub_9F7C(a1, a2);
    if ((v8 & 1) != 0)
    {
      v9 = *(_QWORD *)(*(_QWORD *)&stru_20.segname[(_QWORD)v6 + 16] + 8 * v7);
      swift_retain(v9);
      swift_bridgeObjectRelease(a2);
      swift_getAtKeyPath(v3, v9);
      swift_release(v9);
      return v11;
    }
    swift_bridgeObjectRelease(a2);
  }
  swift_bridgeObjectRetain(a2);
  return Color.init(hexString:)(a1, a2);
}

int *sub_1A0588()
{
  uint64_t v0;
  uint64_t inited;
  void *v2;
  int *result;
  _BYTE v4[488];

  v0 = sub_5440(&qword_26A720);
  inited = swift_initStackObject(v0, v4);
  *(_OWORD *)(inited + 16) = xmmword_1F58F0;
  *(_QWORD *)(inited + 32) = 0x79654B736B6F6F62;
  *(_QWORD *)(inited + 40) = 0xE800000000000000;
  v2 = (void *)objc_opt_self(UIColor);
  *(_QWORD *)(inited + 48) = objc_msgSend(v2, "labelColor");
  *(_QWORD *)(inited + 56) = 0x636142736B6F6F62;
  *(_QWORD *)(inited + 64) = 0xEF646E756F72676BLL;
  *(_QWORD *)(inited + 72) = objc_msgSend(v2, "systemBackgroundColor");
  *(_QWORD *)(inited + 80) = 0xD000000000000018;
  *(_QWORD *)(inited + 88) = 0x80000000001FE550;
  *(_QWORD *)(inited + 96) = objc_msgSend(v2, "secondarySystemBackgroundColor");
  *(_QWORD *)(inited + 104) = 0xD000000000000017;
  *(_QWORD *)(inited + 112) = 0x80000000001FE570;
  *(_QWORD *)(inited + 120) = objc_msgSend(v2, "tertiarySystemBackgroundColor");
  *(_QWORD *)(inited + 128) = 0xD000000000000016;
  *(_QWORD *)(inited + 136) = 0x80000000001FE590;
  *(_QWORD *)(inited + 144) = objc_msgSend(v2, "systemGroupedBackgroundColor");
  *(_QWORD *)(inited + 152) = 0xD00000000000001FLL;
  *(_QWORD *)(inited + 160) = 0x80000000001FE5B0;
  *(_QWORD *)(inited + 168) = objc_msgSend(v2, "secondarySystemGroupedBackgroundColor");
  *(_QWORD *)(inited + 176) = 0xD00000000000001ELL;
  *(_QWORD *)(inited + 184) = 0x80000000001FE5D0;
  *(_QWORD *)(inited + 192) = objc_msgSend(v2, "tertiarySystemGroupedBackgroundColor");
  *(_QWORD *)(inited + 200) = 0x646552736B6F6F62;
  *(_QWORD *)(inited + 208) = 0xE800000000000000;
  *(_QWORD *)(inited + 216) = objc_msgSend(v2, "systemRedColor");
  *(_QWORD *)(inited + 224) = 0x61724F736B6F6F62;
  *(_QWORD *)(inited + 232) = 0xEB0000000065676ELL;
  *(_QWORD *)(inited + 240) = objc_msgSend(v2, "systemRedColor");
  *(_QWORD *)(inited + 248) = 0x657247736B6F6F62;
  *(_QWORD *)(inited + 256) = 0xEA00000000006E65;
  *(_QWORD *)(inited + 264) = objc_msgSend(v2, "systemGreenColor");
  *(_QWORD *)(inited + 272) = 0x616554736B6F6F62;
  *(_QWORD *)(inited + 280) = 0xE90000000000006CLL;
  *(_QWORD *)(inited + 288) = objc_msgSend(v2, "systemTealColor");
  *(_QWORD *)(inited + 296) = 0x756C42736B6F6F62;
  *(_QWORD *)(inited + 304) = 0xE900000000000065;
  *(_QWORD *)(inited + 312) = objc_msgSend(v2, "systemBlueColor");
  *(_QWORD *)(inited + 320) = 0x727550736B6F6F62;
  *(_QWORD *)(inited + 328) = 0xEB00000000656C70;
  *(_QWORD *)(inited + 336) = objc_msgSend(v2, "systemPurpleColor");
  strcpy((char *)(inited + 344), "booksMagenta");
  *(_BYTE *)(inited + 357) = 0;
  *(_WORD *)(inited + 358) = -5120;
  *(_QWORD *)(inited + 360) = objc_msgSend(v2, "magentaColor");
  *(_QWORD *)(inited + 368) = 0x62614C736B6F6F62;
  *(_QWORD *)(inited + 376) = 0xEA00000000006C65;
  *(_QWORD *)(inited + 384) = objc_msgSend(v2, "labelColor");
  *(_QWORD *)(inited + 392) = 0xD000000000000013;
  *(_QWORD *)(inited + 400) = 0x80000000001FE5F0;
  *(_QWORD *)(inited + 408) = objc_msgSend(v2, "secondaryLabelColor");
  *(_QWORD *)(inited + 416) = 0xD000000000000012;
  *(_QWORD *)(inited + 424) = 0x80000000001FE610;
  *(_QWORD *)(inited + 432) = objc_msgSend(v2, "tertiaryLabelColor");
  *(_QWORD *)(inited + 440) = 0xD000000000000014;
  *(_QWORD *)(inited + 448) = 0x80000000001FE630;
  *(_QWORD *)(inited + 456) = objc_msgSend(v2, "quaternaryLabelColor");
  *(_QWORD *)(inited + 464) = 0x696857736B6F6F62;
  *(_QWORD *)(inited + 472) = 0xEF6C6562614C6574;
  *(_QWORD *)(inited + 480) = objc_msgSend(v2, "systemWhiteColor");
  result = (int *)sub_9DF8(inited);
  off_26A718 = result;
  return result;
}

UIColor_optional __swiftcall ColorConstants.uiColor(_:)(Swift::String a1)
{
  void *object;
  uint64_t countAndFlagsBits;
  int *v3;
  unint64_t v4;
  char v5;
  void *v6;
  id v7;
  Swift::Bool v8;
  uint64_t v9;
  uint64_t v10;
  objc_class *v11;
  UIColor_optional result;

  object = a1._object;
  countAndFlagsBits = a1._countAndFlagsBits;
  if (qword_25DD30 != -1)
    swift_once(&qword_25DD30, sub_1A0588);
  v3 = off_26A718;
  if (*(_QWORD *)((char *)&dword_10 + (_QWORD)off_26A718))
  {
    swift_bridgeObjectRetain(object);
    v4 = sub_9F7C(countAndFlagsBits, (uint64_t)object);
    if ((v5 & 1) != 0)
    {
      v6 = *(void **)(*(_QWORD *)&stru_20.segname[(_QWORD)v3 + 16] + 8 * v4);
      v7 = v6;
      swift_bridgeObjectRelease(object);
      goto LABEL_10;
    }
    swift_bridgeObjectRelease(object);
  }
  swift_bridgeObjectRetain(object);
  v9 = Color.init(hexString:)(countAndFlagsBits, (unint64_t)object);
  if (v9)
  {
    v10 = v9;
    sub_9A5D0();
    v6 = (void *)UIColor.init(_:)(v10);
  }
  else
  {
    v6 = 0;
  }
LABEL_10:
  v11 = (objc_class *)v6;
  result.value.super.isa = v11;
  result.is_nil = v8;
  return result;
}

uint64_t sub_1A0AE8@<X0>(uint64_t *a1@<X8>)
{
  return sub_1A03F0((SEL *)&selRef_systemBackgroundColor, a1);
}

uint64_t sub_1A0B04@<X0>(uint64_t *a1@<X8>)
{
  return sub_1A03F0((SEL *)&selRef_secondarySystemBackgroundColor, a1);
}

uint64_t sub_1A0B20@<X0>(uint64_t *a1@<X8>)
{
  return sub_1A03F0((SEL *)&selRef_tertiarySystemBackgroundColor, a1);
}

uint64_t sub_1A0B3C@<X0>(uint64_t *a1@<X8>)
{
  return sub_1A03F0((SEL *)&selRef_systemGroupedBackgroundColor, a1);
}

uint64_t sub_1A0B58@<X0>(uint64_t *a1@<X8>)
{
  return sub_1A03F0((SEL *)&selRef_secondarySystemGroupedBackgroundColor, a1);
}

uint64_t sub_1A0B74@<X0>(uint64_t *a1@<X8>)
{
  return sub_1A03F0((SEL *)&selRef_tertiarySystemGroupedBackgroundColor, a1);
}

uint64_t sub_1A0B90@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = ColorConstants.booksRed.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1A0BB8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = ColorConstants.booksOrange.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1A0BE0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = ColorConstants.booksGreen.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1A0C08@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = ColorConstants.booksTeal.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1A0C30@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = ColorConstants.booksBlue.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1A0C58@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = ColorConstants.booksPurple.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1A0C80@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = ColorConstants.booksMagenta.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1A0CA8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = ColorConstants.booksIconBackground.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1A0CD0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = ColorConstants.booksAXSeparator.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1A0CF8@<X0>(uint64_t *a1@<X8>)
{
  return sub_1A03F0((SEL *)&selRef_separatorColor, a1);
}

uint64_t sub_1A0D14@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = ColorConstants.booksTableSelection.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1A0D3C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = ColorConstants.booksButtonBackground.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1A0D64@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = ColorConstants.booksSecondaryButtonBackground.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1A0D8C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = _s7BooksUI14ColorConstantsV14vibrantPrimary05SwiftB00C0Vvg_0();
  *a1 = result;
  return result;
}

uint64_t sub_1A0DB0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = _s7BooksUI14ColorConstantsV19booksSecondaryLabel05SwiftB00C0Vvg_0();
  *a1 = result;
  return result;
}

uint64_t sub_1A0DD4@<X0>(uint64_t *a1@<X8>)
{
  return sub_1A03F0((SEL *)&selRef_tertiaryLabelColor, a1);
}

uint64_t sub_1A0DF0@<X0>(uint64_t *a1@<X8>)
{
  return sub_1A03F0((SEL *)&selRef_quaternaryLabelColor, a1);
}

uint64_t sub_1A0E0C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = _s7BooksUI14ColorConstantsV25vibrantPrimaryButtonLabel05SwiftB00C0Vvg_0();
  *a1 = result;
  return result;
}

uint64_t sub_1A0E30@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = _s7BooksUI14ColorConstantsV14vibrantPrimary05SwiftB00C0Vvg_0();
  *a1 = result;
  return result;
}

void sub_1A0E54(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = _s7BooksUI14ColorConstantsV19booksSecondaryLabel05SwiftB00C0Vvg_0();
  v3 = Color.opacity(_:)(0.8);
  swift_release(v2);
  *a1 = v3;
}

uint64_t sub_1A0E9C@<X0>(uint64_t *a1@<X8>)
{
  return sub_1A0434((SEL *)&selRef_tertiaryLabelColor, a1, 0.65);
}

uint64_t sub_1A0EC0@<X0>(uint64_t *a1@<X8>)
{
  return sub_1A0434((SEL *)&selRef_quaternaryLabelColor, a1, 0.5);
}

uint64_t sub_1A0EE0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = ColorConstants.vibrantButtonBackground.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1A0F08@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = _s7BooksUI14ColorConstantsV25vibrantPrimaryButtonLabel05SwiftB00C0Vvg_0();
  *a1 = result;
  return result;
}

void sub_1A0F2C(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = _s7BooksUI14ColorConstantsV14vibrantPrimary05SwiftB00C0Vvg_0();
  v3 = Color.opacity(_:)(0.7);
  swift_release(v2);
  *a1 = v3;
}

uint64_t ListItemMetadataEyebrow.init(shrinkableText:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_21C88(a1, a2, type metadata accessor for ShrinkableText);
}

uint64_t ListItemMetadataEyebrow.shrinkableText.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_C484(v1, a1);
}

uint64_t ListItemMetadataEyebrow.shrinkableText.setter(uint64_t a1)
{
  uint64_t v1;

  return sub_1A0FAC(a1, v1);
}

uint64_t sub_1A0FAC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ShrinkableText(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t ListItemMetadataEyebrow.text(localizer:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  _BYTE v9[40];

  v3 = type metadata accessor for LocalizerRequest(0);
  __chkstk_darwin(v3);
  v5 = &v9[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  (*(void (**)(_BYTE *, uint64_t))(v6 + 16))(v5, v1);
  sub_BD00(a1, (uint64_t)v9);
  return Text.init(_:localizer:)(v5, v9);
}

uint64_t ListItemMetadataEyebrow.shorterText(localizer:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  _BYTE v16[40];

  v15 = a1;
  v2 = type metadata accessor for LocalizerRequest(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = &v16[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v4);
  v8 = &v16[-v7 - 8];
  v9 = sub_5440(&qword_25E0C8);
  __chkstk_darwin(v9);
  v11 = &v16[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v12 = type metadata accessor for ShrinkableText(0);
  sub_BC48(v1 + *(int *)(v12 + 20), (uint64_t)v11);
  v13 = 0;
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v3 + 48))(v11, 1, v2) != 1)
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v3 + 32))(v8, v11, v2);
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v3 + 16))(v6, v8, v2);
    sub_BD00(v15, (uint64_t)v16);
    v13 = Text.init(_:localizer:)(v6, v16);
    (*(void (**)(_BYTE *, uint64_t))(v3 + 8))(v8, v2);
  }
  return v13;
}

uint64_t ListItemMetadataEyebrow.shortestText(localizer:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  _BYTE v16[40];

  v15 = a1;
  v2 = type metadata accessor for LocalizerRequest(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = &v16[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v4);
  v8 = &v16[-v7 - 8];
  v9 = sub_5440(&qword_25E0C8);
  __chkstk_darwin(v9);
  v11 = &v16[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v12 = type metadata accessor for ShrinkableText(0);
  sub_BC48(v1 + *(int *)(v12 + 24), (uint64_t)v11);
  v13 = 0;
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v3 + 48))(v11, 1, v2) != 1)
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v3 + 32))(v8, v11, v2);
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v3 + 16))(v6, v8, v2);
    sub_BD00(v15, (uint64_t)v16);
    v13 = Text.init(_:localizer:)(v6, v16);
    (*(void (**)(_BYTE *, uint64_t))(v3 + 8))(v8, v2);
  }
  return v13;
}

uint64_t sub_1A1388()
{
  return 0x62616B6E69726873;
}

uint64_t sub_1A13AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v6;
  uint64_t result;
  char v8;

  if (a1 == 0x62616B6E69726873 && a2 == 0xEE0074786554656CLL)
  {
    result = swift_bridgeObjectRelease(0xEE0074786554656CLL);
    v8 = 0;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x62616B6E69726873, 0xEE0074786554656CLL, a1, a2, 0);
    result = swift_bridgeObjectRelease(a2);
    v8 = v6 ^ 1;
  }
  *a3 = v8 & 1;
  return result;
}

uint64_t sub_1A1464(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1A16BC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1A148C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1A16BC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t ListItemMetadataEyebrow.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;

  v18 = a2;
  v4 = type metadata accessor for ShrinkableText(0);
  __chkstk_darwin(v4);
  v20 = (uint64_t *)((char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = sub_5440(&qword_26A730);
  v19 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ListItemMetadataEyebrow(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  sub_5480(a1, v12);
  v14 = sub_1A16BC();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ListItemMetadataEyebrow.CodingKeys, &type metadata for ListItemMetadataEyebrow.CodingKeys, v14, v12, v13);
  if (!v2)
  {
    v15 = sub_6FD0(&qword_26A740, type metadata accessor for ShrinkableText, (uint64_t)&protocol conformance descriptor for ShrinkableText);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v20, v4, v16, v6, v4, v15);
    (*(void (**)(char *, uint64_t))(v19 + 8))(v8, v6);
    sub_21C88((uint64_t)v20, (uint64_t)v11, type metadata accessor for ShrinkableText);
    sub_21C88((uint64_t)v11, v18, type metadata accessor for ListItemMetadataEyebrow);
  }
  return _s7BooksUI13AnyPagedFrameVwxx_0(a1);
}

uint64_t type metadata accessor for ListItemMetadataEyebrow(uint64_t a1)
{
  uint64_t result;

  result = qword_26A7B8;
  if (!qword_26A7B8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ListItemMetadataEyebrow);
  return result;
}

unint64_t sub_1A16BC()
{
  unint64_t result;

  result = qword_26A738;
  if (!qword_26A738)
  {
    result = swift_getWitnessTable(&unk_1F5F7C, &type metadata for ListItemMetadataEyebrow.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_26A738);
  }
  return result;
}

uint64_t sub_1A1700(uint64_t a1)
{
  uint64_t result;

  result = sub_6FD0(&qword_26A748, type metadata accessor for ListItemMetadataEyebrow, (uint64_t)&protocol conformance descriptor for ListItemMetadataEyebrow);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1A1744(uint64_t a1)
{
  uint64_t result;

  result = sub_6FD0(&qword_26A750, type metadata accessor for ListItemMetadataEyebrow, (uint64_t)&protocol conformance descriptor for ListItemMetadataEyebrow);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1A1780@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return ListItemMetadataEyebrow.init(from:)(a1, a2);
}

uint64_t sub_1A1794(uint64_t a1)
{
  uint64_t result;

  result = sub_6FD0(&qword_26A758, type metadata accessor for ListItemMetadataEyebrow, (uint64_t)&protocol conformance descriptor for ListItemMetadataEyebrow);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for ListItemMetadataEyebrow(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v10;
  char *v11;
  char *v12;
  unsigned int (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v4 = type metadata accessor for ShrinkableText(0);
  v5 = *(_DWORD *)(*(_QWORD *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v15);
  }
  else
  {
    v6 = v4;
    v7 = type metadata accessor for LocalizerRequest(0);
    v8 = *(_QWORD *)(v7 - 8);
    v9 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16);
    v9(a1, a2, v7);
    v10 = *(int *)(v6 + 20);
    v11 = (char *)a1 + v10;
    v12 = (char *)a2 + v10;
    v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48);
    if (v13((char *)a2 + v10, 1, v7))
    {
      v14 = sub_5440(&qword_25E0C8);
      memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      v9((uint64_t *)v11, (uint64_t *)v12, v7);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v11, 0, 1, v7);
    }
    v16 = *(int *)(v6 + 24);
    v17 = (char *)a1 + v16;
    v18 = (char *)a2 + v16;
    if (v13(v18, 1, v7))
    {
      v19 = sub_5440(&qword_25E0C8);
      memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    }
    else
    {
      v9((uint64_t *)v17, (uint64_t *)v18, v7);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v17, 0, 1, v7);
    }
  }
  return a1;
}

uint64_t destroy for ListItemMetadataEyebrow(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t result;
  void (*v9)(uint64_t, uint64_t);

  v2 = type metadata accessor for LocalizerRequest(0);
  v3 = *(_QWORD *)(v2 - 8);
  v9 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v9(a1, v2);
  v4 = type metadata accessor for ShrinkableText(0);
  v5 = a1 + *(int *)(v4 + 20);
  v6 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48);
  if (!v6(v5, 1, v2))
    v9(v5, v2);
  v7 = a1 + *(int *)(v4 + 24);
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v6)(v7, 1, v2);
  if (!(_DWORD)result)
    return ((uint64_t (*)(uint64_t, uint64_t))v9)(v7, v2);
  return result;
}

char *initializeWithCopy for ListItemMetadataEyebrow(char *a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  void (*v6)(void *, const void *, uint64_t);
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  unsigned int (*v11)(const void *, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;

  v4 = type metadata accessor for LocalizerRequest(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(void (**)(void *, const void *, uint64_t))(v5 + 16);
  v6(a1, a2, v4);
  v7 = type metadata accessor for ShrinkableText(0);
  v8 = *(int *)(v7 + 20);
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48);
  if (v11(&a2[v8], 1, v4))
  {
    v12 = sub_5440(&qword_25E0C8);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    v6(v9, v10, v4);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v9, 0, 1, v4);
  }
  v13 = *(int *)(v7 + 24);
  v14 = &a1[v13];
  v15 = &a2[v13];
  if (v11(v15, 1, v4))
  {
    v16 = sub_5440(&qword_25E0C8);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    v6(v14, v15, v4);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v14, 0, 1, v4);
  }
  return a1;
}

char *assignWithCopy for ListItemMetadataEyebrow(char *a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  void (*v6)(void *, const void *, uint64_t);
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t (*v11)(const void *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  int v18;
  int v19;
  uint64_t v20;

  v4 = type metadata accessor for LocalizerRequest(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(void (**)(void *, const void *, uint64_t))(v5 + 24);
  v6(a1, a2, v4);
  v7 = type metadata accessor for ShrinkableText(0);
  v8 = *(int *)(v7 + 20);
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = *(uint64_t (**)(const void *, uint64_t, uint64_t))(v5 + 48);
  v12 = v11(&a1[v8], 1, v4);
  v13 = v11(v10, 1, v4);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v9, v10, v4);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v9, 0, 1, v4);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v9, v4);
LABEL_6:
    v14 = sub_5440(&qword_25E0C8);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  v6(v9, v10, v4);
LABEL_7:
  v15 = *(int *)(v7 + 24);
  v16 = &a1[v15];
  v17 = &a2[v15];
  v18 = v11(&a1[v15], 1, v4);
  v19 = v11(v17, 1, v4);
  if (!v18)
  {
    if (!v19)
    {
      v6(v16, v17, v4);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v5 + 8))(v16, v4);
    goto LABEL_12;
  }
  if (v19)
  {
LABEL_12:
    v20 = sub_5440(&qword_25E0C8);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v16, v17, v4);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v16, 0, 1, v4);
  return a1;
}

char *initializeWithTake for ListItemMetadataEyebrow(char *a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  void (*v6)(void *, const void *, uint64_t);
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  unsigned int (*v11)(const void *, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;

  v4 = type metadata accessor for LocalizerRequest(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(void (**)(void *, const void *, uint64_t))(v5 + 32);
  v6(a1, a2, v4);
  v7 = type metadata accessor for ShrinkableText(0);
  v8 = *(int *)(v7 + 20);
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48);
  if (v11(&a2[v8], 1, v4))
  {
    v12 = sub_5440(&qword_25E0C8);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    v6(v9, v10, v4);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v9, 0, 1, v4);
  }
  v13 = *(int *)(v7 + 24);
  v14 = &a1[v13];
  v15 = &a2[v13];
  if (v11(v15, 1, v4))
  {
    v16 = sub_5440(&qword_25E0C8);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    v6(v14, v15, v4);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v14, 0, 1, v4);
  }
  return a1;
}

char *assignWithTake for ListItemMetadataEyebrow(char *a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  void (*v6)(void *, const void *, uint64_t);
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t (*v11)(const void *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  int v18;
  int v19;
  uint64_t v20;

  v4 = type metadata accessor for LocalizerRequest(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(void (**)(void *, const void *, uint64_t))(v5 + 40);
  v6(a1, a2, v4);
  v7 = type metadata accessor for ShrinkableText(0);
  v8 = *(int *)(v7 + 20);
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = *(uint64_t (**)(const void *, uint64_t, uint64_t))(v5 + 48);
  v12 = v11(&a1[v8], 1, v4);
  v13 = v11(v10, 1, v4);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v9, v10, v4);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v9, 0, 1, v4);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v9, v4);
LABEL_6:
    v14 = sub_5440(&qword_25E0C8);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  v6(v9, v10, v4);
LABEL_7:
  v15 = *(int *)(v7 + 24);
  v16 = &a1[v15];
  v17 = &a2[v15];
  v18 = v11(&a1[v15], 1, v4);
  v19 = v11(v17, 1, v4);
  if (!v18)
  {
    if (!v19)
    {
      v6(v16, v17, v4);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v5 + 8))(v16, v4);
    goto LABEL_12;
  }
  if (v19)
  {
LABEL_12:
    v20 = sub_5440(&qword_25E0C8);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v16, v17, v4);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v16, 0, 1, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for ListItemMetadataEyebrow(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1A207C);
}

uint64_t sub_1A207C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ShrinkableText(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for ListItemMetadataEyebrow(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1A20C4);
}

uint64_t sub_1A20C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ShrinkableText(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t sub_1A2104(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  result = type metadata accessor for ShrinkableText(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 1, &v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ListItemMetadataEyebrow.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1A21AC + 4 * byte_1F5E10[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1A21CC + 4 * byte_1F5E15[v4]))();
}

_BYTE *sub_1A21AC(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1A21CC(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1A21D4(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1A21DC(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1A21E4(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1A21EC(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for ListItemMetadataEyebrow.CodingKeys()
{
  return &type metadata for ListItemMetadataEyebrow.CodingKeys;
}

unint64_t sub_1A220C()
{
  unint64_t result;

  result = qword_26A7F0;
  if (!qword_26A7F0)
  {
    result = swift_getWitnessTable(&unk_1F5F54, &type metadata for ListItemMetadataEyebrow.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_26A7F0);
  }
  return result;
}

unint64_t sub_1A2254()
{
  unint64_t result;

  result = qword_26A7F8;
  if (!qword_26A7F8)
  {
    result = swift_getWitnessTable(&unk_1F5EC4, &type metadata for ListItemMetadataEyebrow.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_26A7F8);
  }
  return result;
}

unint64_t sub_1A229C()
{
  unint64_t result;

  result = qword_26A800[0];
  if (!qword_26A800[0])
  {
    result = swift_getWitnessTable(&unk_1F5EEC, &type metadata for ListItemMetadataEyebrow.CodingKeys);
    atomic_store(result, qword_26A800);
  }
  return result;
}

uint64_t sub_1A22E0(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1A22E8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v3 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v3;
  swift_retain(v3);
  return a1;
}

uint64_t sub_1A2334(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v3;
  v4 = a2[2];
  *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
  *(_QWORD *)(a1 + 16) = v4;
  v5 = a2[5];
  v6 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = a2[4];
  *(_QWORD *)(a1 + 40) = v5;
  swift_retain(v5);
  swift_release(v6);
  return a1;
}

uint64_t sub_1A238C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v3 = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_release(v3);
  return a1;
}

uint64_t sub_1A23DC(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_1A2424(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 32) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t type metadata accessor for HVStack(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10E40(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for HVStack);
}

uint64_t sub_1A247C(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  return swift_getOpaqueTypeConformance2(&v3, &unk_230BF4, 1);
}

uint64_t sub_1A24B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t WitnessTable;
  uint64_t v22;
  void (*v23)(char *, uint64_t);
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE v38[16];
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44[2];
  uint64_t v45;
  char v46;

  v37 = a2;
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  v5 = type metadata accessor for HStack(0, v3, v4);
  v33 = *(_QWORD *)(v5 - 8);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v34 = (uint64_t)&v32 - v9;
  v10 = type metadata accessor for VStack(0, v3, v4);
  v32 = *(_QWORD *)(v10 - 8);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v32 - v14;
  v16 = type metadata accessor for _ConditionalContent(0, v10, v5);
  v35 = *(_QWORD *)(v16 - 8);
  v36 = v16;
  __chkstk_darwin(v16);
  v18 = (char *)&v32 - v17;
  sub_1A291C((uint64_t *)v2, (uint64_t)v44);
  sub_1A291C(v44, (uint64_t)&v45);
  v19 = *(_QWORD *)(v2 + 16);
  v20 = *(unsigned __int8 *)(v2 + 24);
  v39 = v3;
  v40 = v4;
  v41 = v2;
  if ((v46 & 1) != 0)
  {
    HStack.init(alignment:spacing:content:)(v45, v19, v20, sub_1A2934, v38, v3, v4);
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for HStack<A>, v5);
    v22 = v34;
    sub_10F80((uint64_t)v8, v5, v34);
    v23 = *(void (**)(char *, uint64_t))(v33 + 8);
    v23(v8, v5);
    sub_C5C0(v22, v5, (uint64_t)v8);
    v24 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v10);
    sub_17D40((uint64_t)v8, v10, v5, v24, WitnessTable);
    v23(v8, v5);
    v23((char *)v22, v5);
  }
  else
  {
    VStack.init(alignment:spacing:content:)(v45, v19, v20, sub_1A2954, v38, v3, v4);
    v25 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v10);
    sub_10F80((uint64_t)v13, v10, (uint64_t)v15);
    v26 = *(void (**)(char *, uint64_t))(v32 + 8);
    v26(v13, v10);
    sub_C5C0((uint64_t)v15, v10, (uint64_t)v13);
    v27 = swift_getWitnessTable(&protocol conformance descriptor for HStack<A>, v5);
    sub_17C7C((uint64_t)v13, v10, v5, v25, v27);
    v26(v13, v10);
    v26(v15, v10);
  }
  v28 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v10);
  v29 = swift_getWitnessTable(&protocol conformance descriptor for HStack<A>, v5);
  v42 = v28;
  v43 = v29;
  v30 = v36;
  swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v36);
  sub_C5C0((uint64_t)v18, v30, v37);
  return (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v18, v30);
}

uint64_t sub_1A2808@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, uint64_t);
  uint64_t v15;

  v5 = *(_QWORD *)(a2 - 8);
  v6 = __chkstk_darwin(a1);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v6);
  v11 = (char *)&v15 - v10;
  (*(void (**)(uint64_t))(v9 + 32))(v12);
  sub_10F80((uint64_t)v8, a2, (uint64_t)v11);
  v13 = *(void (**)(char *, uint64_t))(v5 + 8);
  v13(v8, a2);
  sub_C5C0((uint64_t)v11, a2, a3);
  return ((uint64_t (*)(char *, uint64_t))v13)(v11, a2);
}

uint64_t sub_1A28E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1A24B0(a1, a2);
}

uint64_t sub_1A291C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *a1;
  *(_BYTE *)(a2 + 8) = *((_BYTE *)a1 + 8);
  *(_QWORD *)a2 = v2;
  return a2;
}

uint64_t sub_1A2934@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1A2808(*(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_1A2954@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1A2808(*(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_1A2974(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

uint64_t sub_1A297C(uint64_t result, char a2)
{
  *(_BYTE *)(result + 8) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for HVStackKind()
{
  return &type metadata for HVStackKind;
}

uint64_t sub_1A2998(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *a1;
  v2 = a1[1];
  v3 = type metadata accessor for VStack(255, *a1, v2);
  v4 = type metadata accessor for HStack(255, v1, v2);
  v5 = type metadata accessor for _ConditionalContent(255, v3, v4);
  swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v3);
  swift_getWitnessTable(&protocol conformance descriptor for HStack<A>, v4);
  return swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v5);
}

double SizeConstants.scaledValue(_:relativeTo:)(uint64_t a1, double a2, double a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  double *v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  double v24;
  uint64_t KeyPath;
  double v26;
  uint64_t v28[2];
  uint64_t v29;
  uint64_t v30;

  v30 = a1;
  v5 = type metadata accessor for SizeConstants.Environment(0);
  __chkstk_darwin(v5);
  v7 = (char *)v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Font.TextStyle(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = sub_5440(&qword_25F780);
  __chkstk_darwin(v29);
  v13 = (char *)v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_5440(&qword_25F788);
  v15 = __chkstk_darwin(v14);
  v17 = (char *)v28 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v15);
  v20 = (double *)((char *)v28 - v19);
  sub_FEFB0(v28[1], (uint64_t)v28 + *(int *)(v18 + 28) - v19);
  *v20 = a2;
  v20[1] = a3;
  sub_B3D0((uint64_t)v20, (uint64_t)v17, &qword_25F788);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v30, v8);
  sub_B3D0((uint64_t)v17, (uint64_t)v13, &qword_25F788);
  sub_FEFB0((uint64_t)&v17[*(int *)(v14 + 28)], (uint64_t)v7);
  v21 = (uint64_t)&v7[*(int *)(v5 + 24)];
  v22 = sub_173CC((uint64_t)v11, v21);
  v23 = type metadata accessor for DynamicTypeSize(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 8))(v21, v23);
  v24 = 1.0;
  if ((*(_QWORD *)&v22 & 0xFFFFFFFFFFFFFLL) == 0)
    v24 = v22;
  if ((~*(_QWORD *)&v22 & 0x7FF0000000000000) == 0)
    v22 = v24;
  sub_B414((uint64_t)v17, &qword_25F788);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  *(double *)&v13[*(int *)(v29 + 36)] = v22;
  KeyPath = swift_getKeyPath(&unk_1F6070);
  v26 = sub_1A3634(KeyPath);
  swift_release(KeyPath);
  sub_B414((uint64_t)v13, &qword_25F780);
  sub_B414((uint64_t)v20, &qword_25F788);
  return v26;
}

uint64_t type metadata accessor for SizeConstants.Environment(uint64_t a1)
{
  return sub_1FE90(a1, qword_26A980, (uint64_t)&nominal type descriptor for SizeConstants.Environment);
}

uint64_t SizeConstants.Scaled.subscript.getter@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v14;

  v8 = *(_QWORD *)(class metadata base offset for KeyPath + *a1 + 8);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(a1);
  v11 = (char *)&v14 - v10;
  swift_getAtKeyPath(v4, v12);
  sub_1A3400((uint64_t)v11, a2, v8, a3, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;

  v8 = *(_QWORD *)(class metadata base offset for KeyPath + *a1 + 8);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(a1);
  v11 = (char *)&v16 - v10;
  swift_getAtKeyPath(v4, v12);
  v13 = *(_QWORD *)(v4 + *(int *)(a2 + 36));
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(a4, v11, v8);
  result = type metadata accessor for SizeConstants.Scaled(0, v8, a3, v14);
  *(_QWORD *)(a4 + *(int *)(result + 36)) = v13;
  return result;
}

uint64_t ScalableSizeConstants.scaled(relativeTo:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v18;

  v9 = type metadata accessor for Font.TextStyle(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v18 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v15, v4, a2);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, a1, v9);
  return SizeConstants.Scaled.init(base:relativeTo:)((uint64_t)v15, (uint64_t)v13, a2, a3, a4);
}

uint64_t EnvironmentValues.sizes.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  _BYTE *v13;
  void (*v14)(_BYTE *, uint64_t, uint64_t);
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  void (*v19)(_BYTE *, uint64_t);
  __int16 v20;
  _BYTE *v21;
  _BYTE v23[12];
  uint64_t v24;

  v2 = v1;
  v4 = type metadata accessor for SizeConstants.Environment(0);
  __chkstk_darwin(v4);
  v6 = &v23[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = type metadata accessor for EnvironmentValues(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = &v23[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v9);
  v13 = &v23[-v12];
  v14 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v8 + 16);
  v14(&v23[-v12], v2, v7);
  v14(v11, (uint64_t)v13, v7);
  *v6 = EnvironmentValues.isCompact.getter() & 1;
  v15 = sub_2FAA8();
  v16 = EnvironmentValues.subscript.getter((uint64_t *)((char *)&v24 + 3), &type metadata for IsInCardKey, &type metadata for IsInCardKey, v15);
  v6[1] = BYTE3(v24);
  v17 = EnvironmentValues.dynamicTypeSize.getter(v16);
  *(double *)&v6[*(int *)(v4 + 28)] = EnvironmentValues.pixelLength.getter(v17);
  v18 = sub_7488();
  EnvironmentValues.subscript.getter(&v24, &type metadata for ViewSizeConditionsKey, &type metadata for ViewSizeConditionsKey, v18);
  v19 = *(void (**)(_BYTE *, uint64_t))(v8 + 8);
  v19(v11, v7);
  v20 = v24;
  v21 = &v6[*(int *)(v4 + 32)];
  v21[2] = BYTE2(v24);
  *(_WORD *)v21 = v20;
  v19(v13, v7);
  return sub_2FAEC((uint64_t)v6, a1);
}

uint64_t ScalableSizeConstants.scaled.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;

  v6 = type metadata accessor for Font.TextStyle(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD, uint64_t))(v7 + 104))(v9, enum case for Font.TextStyle.body(_:), v6);
  ScalableSizeConstants.scaled(relativeTo:)((uint64_t)v9, a1, a2, a3);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t SizeConstants.Environment.viewSizeConditions.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  int v4;

  result = type metadata accessor for SizeConstants.Environment(0);
  v4 = *(unsigned __int16 *)(v1 + *(int *)(result + 32)) | (*(unsigned __int8 *)(v1 + *(int *)(result + 32) + 2) << 16);
  if (*(_WORD *)(v1 + *(int *)(result + 32)) == 2)
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD00000000000007DLL, 0x80000000001FDA40, "BooksUI/SizeConstants.swift", 27, 2, 39, 0);
    __break(1u);
  }
  else
  {
    *a1 = *(_WORD *)(v1 + *(int *)(result + 32)) & 1;
    a1[1] = BYTE1(v4) & 1;
    a1[2] = BYTE2(v4) & 1;
  }
  return result;
}

uint64_t SizeConstants.Environment.dynamicTypeSize.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for SizeConstants.Environment(0) + 24);
  v4 = type metadata accessor for DynamicTypeSize(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

double SizeConstants.Environment.pixelLength.getter()
{
  uint64_t v0;

  return *(double *)(v0 + *(int *)(type metadata accessor for SizeConstants.Environment(0) + 28));
}

uint64_t SizeConstants.env.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_FEFB0(v1, a1);
}

uint64_t SizeConstants.Scaled.init(base:relativeTo:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;

  v10 = type metadata accessor for SizeConstants.Environment(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(a3 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16))(a5, a1, a3);
  (*(void (**)(uint64_t, uint64_t))(a4 + 8))(a3, a4);
  v14 = (uint64_t)&v12[*(int *)(v10 + 24)];
  v15 = sub_173CC(a2, v14);
  v16 = type metadata accessor for DynamicTypeSize(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v14, v16);
  v17 = 1.0;
  if ((*(_QWORD *)&v15 & 0xFFFFFFFFFFFFFLL) == 0)
    v17 = v15;
  if ((~*(_QWORD *)&v15 & 0x7FF0000000000000) == 0)
    v15 = v17;
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(a1, a3);
  v18 = type metadata accessor for Font.TextStyle(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(a2, v18);
  result = type metadata accessor for SizeConstants.Scaled(0, a3, a4, v19);
  *(double *)(a5 + *(int *)(result + 36)) = v15;
  return result;
}

uint64_t sub_1A3400@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v28 = a2;
  v30 = a1;
  v33 = a5;
  v9 = type metadata accessor for FloatingPointRoundingRule(0);
  v31 = *(_QWORD *)(v9 - 8);
  v32 = v9;
  __chkstk_darwin(v9);
  v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = type metadata accessor for SizeConstants.Environment(0);
  v12 = __chkstk_darwin(v29);
  v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(_QWORD *)(a3 - 8);
  v16 = __chkstk_darwin(v12);
  v18 = (char *)&v28 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v20 = (char *)&v28 - v19;
  v34 = *(_QWORD *)(v5 + *(int *)(a2 + 36));
  v21 = sub_62860();
  dispatch thunk of BinaryFloatingPoint.init<A>(_:)(&v34, &type metadata for CGFloat, v21, a3, a4);
  v22 = *(_QWORD *)(a4 + 16);
  dispatch thunk of static Numeric.* infix(_:_:)(v30, v18, a3, *(_QWORD *)(*(_QWORD *)(v22 + 16) + 8));
  v23 = *(void (**)(char *, uint64_t))(v15 + 8);
  v23(v18, a3);
  (*(void (**)(_QWORD))(*(_QWORD *)(v28 + 24) + 8))(*(_QWORD *)(v28 + 16));
  v24 = *(_QWORD *)&v14[*(int *)(v29 + 28)];
  sub_1A5864((uint64_t)v14);
  v34 = v24;
  dispatch thunk of BinaryFloatingPoint.init<A>(_:)(&v34, &type metadata for CGFloat, v21, a3, a4);
  v26 = v31;
  v25 = v32;
  (*(void (**)(char *, _QWORD, uint64_t))(v31 + 104))(v11, enum case for FloatingPointRoundingRule.toNearestOrAwayFromZero(_:), v32);
  sub_16A548((uint64_t)v11, (uint64_t)v18, a3, v22, v33);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v11, v25);
  v23(v18, a3);
  return ((uint64_t (*)(char *, uint64_t))v23)(v20, a3);
}

double sub_1A3634(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  double v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t);
  double v16;
  void (*v17)(char *, uint64_t);
  double v18;
  double v19;
  double v20;
  uint64_t v22;
  double v23;
  double v24;
  double v25;

  v2 = v1;
  v4 = type metadata accessor for FloatingPointRoundingRule(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getAtKeyPath(v2, a1);
  v8 = v24;
  v9 = *(int *)(sub_5440(&qword_25F780) + 36);
  v10 = v8 * KeyedEncodingContainer.encode<A>(_:forKey:)(*(double *)(v2 + v9));
  v11 = v2 + *(int *)(sub_5440(&qword_25F788) + 28);
  v12 = *(int *)(type metadata accessor for SizeConstants.Environment(0) + 28);
  v13 = KeyedEncodingContainer.encode<A>(_:forKey:)(*(double *)(v11 + v12));
  v14 = enum case for FloatingPointRoundingRule.toNearestOrAwayFromZero(_:);
  v15 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 104);
  v15(v7, enum case for FloatingPointRoundingRule.toNearestOrAwayFromZero(_:), v4);
  v23 = v10;
  sub_13603C((uint64_t)v7, v13);
  v16 = v23;
  v17 = *(void (**)(char *, uint64_t))(v5 + 8);
  v17(v7, v4);
  v24 = v16;
  v18 = v25;
  v19 = v18 * KeyedEncodingContainer.encode<A>(_:forKey:)(*(double *)(v2 + v9));
  v20 = KeyedEncodingContainer.encode<A>(_:forKey:)(*(double *)(v11 + v12));
  v15(v7, v14, v4);
  v23 = v19;
  sub_13603C((uint64_t)v7, v20);
  v17(v7, v4);
  return v16;
}

double SizeConstants.Scaled.subscript.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v4;
  double v5;
  uint64_t v7;
  _QWORD v8[3];

  swift_getAtKeyPath(v2, a1);
  v7 = v8[1];
  v4 = sub_62860();
  sub_1A3400((uint64_t)&v7, a2, (uint64_t)&type metadata for CGFloat, v4, (uint64_t)v8);
  v5 = *(double *)v8;
  v7 = v8[2];
  sub_1A3400((uint64_t)&v7, a2, (uint64_t)&type metadata for CGFloat, v4, (uint64_t)v8);
  return v5;
}

{
  uint64_t v2;
  unint64_t v4;
  double v5;
  uint64_t v7;
  _QWORD v8[5];

  swift_getAtKeyPath(v2, a1);
  v7 = v8[1];
  v4 = sub_62860();
  sub_1A3400((uint64_t)&v7, a2, (uint64_t)&type metadata for CGFloat, v4, (uint64_t)v8);
  v5 = *(double *)v8;
  v7 = v8[3];
  sub_1A3400((uint64_t)&v7, a2, (uint64_t)&type metadata for CGFloat, v4, (uint64_t)v8);
  v7 = v8[2];
  sub_1A3400((uint64_t)&v7, a2, (uint64_t)&type metadata for CGFloat, v4, (uint64_t)v8);
  v7 = v8[4];
  sub_1A3400((uint64_t)&v7, a2, (uint64_t)&type metadata for CGFloat, v4, (uint64_t)v8);
  return v5;
}

double sub_1A3860(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  double v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t);
  double v16;
  void (*v17)(char *, uint64_t);
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  uint64_t v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;

  v2 = v1;
  v4 = type metadata accessor for FloatingPointRoundingRule(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getAtKeyPath(v2, a1);
  v8 = v32;
  v9 = *(int *)(sub_5440(&qword_26A888) + 36);
  v10 = v8 * KeyedEncodingContainer.encode<A>(_:forKey:)(*(double *)(v2 + v9));
  v11 = v2 + *(int *)(sub_5440(&qword_26A890) + 28);
  v12 = *(int *)(type metadata accessor for SizeConstants.Environment(0) + 28);
  v13 = KeyedEncodingContainer.encode<A>(_:forKey:)(*(double *)(v11 + v12));
  v14 = enum case for FloatingPointRoundingRule.toNearestOrAwayFromZero(_:);
  v15 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 104);
  v15(v7, enum case for FloatingPointRoundingRule.toNearestOrAwayFromZero(_:), v4);
  v31 = v10;
  sub_13603C((uint64_t)v7, v13);
  v16 = v31;
  v17 = *(void (**)(char *, uint64_t))(v5 + 8);
  v17(v7, v4);
  v32 = v16;
  v18 = v34;
  v19 = v18 * KeyedEncodingContainer.encode<A>(_:forKey:)(*(double *)(v2 + v9));
  v20 = KeyedEncodingContainer.encode<A>(_:forKey:)(*(double *)(v11 + v12));
  v15(v7, v14, v4);
  v31 = v19;
  sub_13603C((uint64_t)v7, v20);
  v21 = v31;
  v17(v7, v4);
  v34 = v21;
  v22 = v33;
  v23 = v22 * KeyedEncodingContainer.encode<A>(_:forKey:)(*(double *)(v2 + v9));
  v24 = KeyedEncodingContainer.encode<A>(_:forKey:)(*(double *)(v11 + v12));
  v15(v7, v14, v4);
  v31 = v23;
  sub_13603C((uint64_t)v7, v24);
  v25 = v31;
  v17(v7, v4);
  v33 = v25;
  v26 = v35;
  v27 = v26 * KeyedEncodingContainer.encode<A>(_:forKey:)(*(double *)(v2 + v9));
  v28 = KeyedEncodingContainer.encode<A>(_:forKey:)(*(double *)(v11 + v12));
  v15(v7, v14, v4);
  v31 = v27;
  sub_13603C((uint64_t)v7, v28);
  v17(v7, v4);
  return v16;
}

uint64_t sub_1A3B94@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_FEFB0(v2 + *(int *)(a1 + 28), a2);
}

uint64_t SizeConstants.scaledValue<A>(_:relativeTo:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *KeyPath;
  uint64_t v33;
  __n128 v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v37 = a1;
  v43 = a2;
  v44 = a4;
  v45 = a5;
  v41 = type metadata accessor for Font.TextStyle(0);
  v39 = *(_QWORD *)(v41 - 8);
  __chkstk_darwin(v41);
  v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for SizeConstants.SingleScalableValueContainer(255, a3, v8, v9);
  v40 = type metadata accessor for SizeConstants.Scaled(0, v10, (uint64_t)&off_259140, v11);
  v42 = *(_QWORD *)(v40 - 8);
  __chkstk_darwin(v40);
  v13 = (char *)&v36 - v12;
  v14 = type metadata accessor for SizeConstants.Environment(0);
  v15 = __chkstk_darwin(v14);
  v17 = (char *)&v36 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = *(_QWORD *)(a3 - 8);
  v19 = __chkstk_darwin(v15);
  v21 = (char *)&v36 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = *(_QWORD *)(v10 - 8);
  v23 = __chkstk_darwin(v19);
  v25 = (char *)&v36 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  v27 = (char *)&v36 - v26;
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v21, v37, a3);
  sub_FEFB0(v38, (uint64_t)v17);
  (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v27, v21, a3);
  v30 = type metadata accessor for SizeConstants.SingleScalableValueContainer(0, a3, v28, v29);
  sub_2FAEC((uint64_t)v17, (uint64_t)&v27[*(int *)(v30 + 28)]);
  (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v25, v27, v10);
  (*(void (**)(char *, uint64_t, uint64_t))(v39 + 16))(v7, v43, v41);
  SizeConstants.Scaled.init(base:relativeTo:)((uint64_t)v25, (uint64_t)v7, v10, (uint64_t)&off_259140, (uint64_t)v13);
  v31 = v44;
  v46 = a3;
  v47 = v44;
  KeyPath = (_QWORD *)swift_getKeyPath(&unk_1F6090);
  v33 = v40;
  SizeConstants.Scaled.subscript.getter(KeyPath, v40, v31, v45);
  v34 = swift_release(KeyPath);
  (*(void (**)(char *, uint64_t, __n128))(v42 + 8))(v13, v33, v34);
  return (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v27, v10);
}

double SizeConstants.scaledValue(_:relativeTo:)(uint64_t a1, double a2, double a3, double a4, double a5)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  double *v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  double v28;
  uint64_t KeyPath;
  double v30;
  uint64_t v32[2];
  uint64_t v33;
  uint64_t v34;

  v34 = a1;
  v9 = type metadata accessor for SizeConstants.Environment(0);
  __chkstk_darwin(v9);
  v11 = (char *)v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Font.TextStyle(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = sub_5440(&qword_26A888);
  __chkstk_darwin(v33);
  v17 = (char *)v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_5440(&qword_26A890);
  v19 = __chkstk_darwin(v18);
  v21 = (char *)v32 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __chkstk_darwin(v19);
  v24 = (double *)((char *)v32 - v23);
  sub_FEFB0(v32[1], (uint64_t)v32 + *(int *)(v22 + 28) - v23);
  *v24 = a2;
  v24[1] = a3;
  v24[2] = a4;
  v24[3] = a5;
  sub_B3D0((uint64_t)v24, (uint64_t)v21, &qword_26A890);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, v34, v12);
  sub_B3D0((uint64_t)v21, (uint64_t)v17, &qword_26A890);
  sub_FEFB0((uint64_t)&v21[*(int *)(v18 + 28)], (uint64_t)v11);
  v25 = (uint64_t)&v11[*(int *)(v9 + 24)];
  v26 = sub_173CC((uint64_t)v15, v25);
  v27 = type metadata accessor for DynamicTypeSize(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 8))(v25, v27);
  v28 = 1.0;
  if ((*(_QWORD *)&v26 & 0xFFFFFFFFFFFFFLL) == 0)
    v28 = v26;
  if ((~*(_QWORD *)&v26 & 0x7FF0000000000000) == 0)
    v26 = v28;
  sub_B414((uint64_t)v21, &qword_26A890);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  *(double *)&v17[*(int *)(v33 + 36)] = v26;
  KeyPath = swift_getKeyPath(&unk_1F60B0);
  v30 = sub_1A3860(KeyPath);
  swift_release(KeyPath);
  sub_B414((uint64_t)v17, &qword_26A888);
  sub_B414((uint64_t)v24, &qword_26A890);
  return v30;
}

uint64_t type metadata accessor for SizeConstants.Scaled(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10E40(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SizeConstants.Scaled);
}

uint64_t type metadata accessor for SizeConstants.SingleScalableValueContainer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10E40(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SizeConstants.SingleScalableValueContainer);
}

uint64_t *initializeBufferWithCopyOfBuffer for SizeConstants(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;

  v4 = type metadata accessor for SizeConstants.Environment(0);
  v5 = *(_DWORD *)(*(_QWORD *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v14 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v14);
  }
  else
  {
    v6 = v4;
    *(_WORD *)a1 = *(_WORD *)a2;
    v7 = *(int *)(v4 + 24);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
    *(uint64_t *)((char *)a1 + *(int *)(v6 + 28)) = *(uint64_t *)((char *)a2 + *(int *)(v6 + 28));
    v11 = *(int *)(v6 + 32);
    v12 = (char *)a1 + v11;
    v13 = (char *)a2 + v11;
    v12[2] = v13[2];
    *(_WORD *)v12 = *(_WORD *)v13;
  }
  return a1;
}

uint64_t destroy for SizeConstants(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = a1 + *(int *)(type metadata accessor for SizeConstants.Environment(0) + 24);
  v2 = type metadata accessor for DynamicTypeSize(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
}

_WORD *initializeWithCopy for SizeConstants(_WORD *a1, _WORD *a2)
{
  int *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;

  *a1 = *a2;
  v4 = (int *)type metadata accessor for SizeConstants.Environment(0);
  v5 = v4[6];
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = type metadata accessor for DynamicTypeSize(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v6, v7, v8);
  *(_QWORD *)((char *)a1 + v4[7]) = *(_QWORD *)((char *)a2 + v4[7]);
  v9 = v4[8];
  v10 = (char *)a1 + v9;
  v11 = (char *)a2 + v9;
  v10[2] = v11[2];
  *(_WORD *)v10 = *(_WORD *)v11;
  return a1;
}

_BYTE *assignWithCopy for SizeConstants(_BYTE *a1, _BYTE *a2)
{
  int *v4;
  uint64_t v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  _BYTE *v11;
  char v12;

  *a1 = *a2;
  a1[1] = a2[1];
  v4 = (int *)type metadata accessor for SizeConstants.Environment(0);
  v5 = v4[6];
  v6 = &a1[v5];
  v7 = &a2[v5];
  v8 = type metadata accessor for DynamicTypeSize(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v8 - 8) + 24))(v6, v7, v8);
  *(_QWORD *)&a1[v4[7]] = *(_QWORD *)&a2[v4[7]];
  v9 = v4[8];
  v10 = &a1[v9];
  v11 = &a2[v9];
  v12 = v11[2];
  *(_WORD *)v10 = *(_WORD *)v11;
  v10[2] = v12;
  return a1;
}

_WORD *initializeWithTake for SizeConstants(_WORD *a1, _WORD *a2)
{
  int *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;

  *a1 = *a2;
  v4 = (int *)type metadata accessor for SizeConstants.Environment(0);
  v5 = v4[6];
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = type metadata accessor for DynamicTypeSize(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v6, v7, v8);
  *(_QWORD *)((char *)a1 + v4[7]) = *(_QWORD *)((char *)a2 + v4[7]);
  v9 = v4[8];
  v10 = (char *)a1 + v9;
  v11 = (char *)a2 + v9;
  v10[2] = v11[2];
  *(_WORD *)v10 = *(_WORD *)v11;
  return a1;
}

_BYTE *assignWithTake for SizeConstants(_BYTE *a1, _BYTE *a2)
{
  int *v4;
  uint64_t v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  _BYTE *v11;

  *a1 = *a2;
  a1[1] = a2[1];
  v4 = (int *)type metadata accessor for SizeConstants.Environment(0);
  v5 = v4[6];
  v6 = &a1[v5];
  v7 = &a2[v5];
  v8 = type metadata accessor for DynamicTypeSize(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v8 - 8) + 40))(v6, v7, v8);
  *(_QWORD *)&a1[v4[7]] = *(_QWORD *)&a2[v4[7]];
  v9 = v4[8];
  v10 = &a1[v9];
  v11 = &a2[v9];
  v10[2] = v11[2];
  *(_WORD *)v10 = *(_WORD *)v11;
  return a1;
}

uint64_t getEnumTagSinglePayload for SizeConstants(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1A4474);
}

uint64_t sub_1A4474(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SizeConstants.Environment(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for SizeConstants(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1A44BC);
}

uint64_t sub_1A44BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SizeConstants.Environment(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for SizeConstants(uint64_t a1)
{
  return sub_1FE90(a1, qword_26A8F0, (uint64_t)&nominal type descriptor for SizeConstants);
}

uint64_t sub_1A4510(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  result = type metadata accessor for SizeConstants.Environment(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 1, &v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for SizeConstants.Environment(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v14 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v14);
  }
  else
  {
    *(_WORD *)a1 = *(_WORD *)a2;
    v7 = a3[6];
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
    v11 = a3[8];
    *(uint64_t *)((char *)v4 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
    v12 = (char *)v4 + v11;
    v13 = (char *)a2 + v11;
    *(_WORD *)v12 = *(_WORD *)v13;
    v12[2] = v13[2];
  }
  return v4;
}

uint64_t destroy for SizeConstants.Environment(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + *(int *)(a2 + 24);
  v3 = type metadata accessor for DynamicTypeSize(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
}

_WORD *initializeWithCopy for SizeConstants.Environment(_WORD *a1, _WORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;

  *a1 = *a2;
  v6 = a3[6];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for DynamicTypeSize(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
  v10 = a3[8];
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  *(_WORD *)v11 = *(_WORD *)v12;
  v11[2] = v12[2];
  return a1;
}

_BYTE *assignWithCopy for SizeConstants.Environment(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  char v13;

  *a1 = *a2;
  a1[1] = a2[1];
  v6 = a3[6];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for DynamicTypeSize(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  *(_QWORD *)&a1[a3[7]] = *(_QWORD *)&a2[a3[7]];
  v10 = a3[8];
  v11 = &a1[v10];
  v12 = &a2[v10];
  v13 = v12[2];
  *(_WORD *)v11 = *(_WORD *)v12;
  v11[2] = v13;
  return a1;
}

_WORD *initializeWithTake for SizeConstants.Environment(_WORD *a1, _WORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;

  *a1 = *a2;
  v6 = a3[6];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for DynamicTypeSize(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = a3[8];
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  *(_WORD *)v11 = *(_WORD *)v12;
  v11[2] = v12[2];
  return a1;
}

_BYTE *assignWithTake for SizeConstants.Environment(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  _BYTE *v12;

  *a1 = *a2;
  a1[1] = a2[1];
  v6 = a3[6];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for DynamicTypeSize(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  v10 = a3[8];
  *(_QWORD *)&a1[a3[7]] = *(_QWORD *)&a2[a3[7]];
  v11 = &a1[v10];
  v12 = &a2[v10];
  *(_WORD *)v11 = *(_WORD *)v12;
  v11[2] = v12[2];
  return a1;
}

uint64_t getEnumTagSinglePayload for SizeConstants.Environment(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1A48CC);
}

uint64_t sub_1A48CC(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4;
  BOOL v5;
  int v6;
  uint64_t v10;

  if ((_DWORD)a2 == 254)
  {
    v4 = *a1;
    v5 = v4 >= 2;
    v6 = (v4 + 2147483646) & 0x7FFFFFFF;
    if (v5)
      return (v6 + 1);
    else
      return 0;
  }
  else
  {
    v10 = type metadata accessor for DynamicTypeSize(0);
    return (*(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(&a1[*(int *)(a3 + 24)], a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for SizeConstants.Environment(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1A4954);
}

_BYTE *sub_1A4954(_BYTE *result, uint64_t a2, int a3, uint64_t a4)
{
  _BYTE *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 254)
  {
    *result = a2 + 1;
  }
  else
  {
    v7 = type metadata accessor for DynamicTypeSize(0);
    return (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 24)], a2, a2, v7);
  }
  return result;
}

uint64_t sub_1A49C4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[5];

  v4[0] = &unk_1F6128;
  v4[1] = &unk_1F6128;
  result = type metadata accessor for DynamicTypeSize(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(result - 8) + 64;
    v4[3] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[4] = &unk_1F6140;
    swift_initStructMetadata(a1, 256, 5, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_1A4A50(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 16));
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.Int64 + 64;
    swift_initStructMetadata(a1, 0, 2, v4, a1 + 32);
    return 0;
  }
  return result;
}

uint64_t *sub_1A4AC8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    v9 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain(v9);
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    *(_QWORD *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFF8);
  }
  return v4;
}

uint64_t sub_1A4B78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a1) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a2) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_1A4BD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a1) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a2) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_1A4C30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a1) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a2) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_1A4C8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a1) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a2) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_1A4CE8(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 >= a2)
  {
    if (v5)
      return (*(uint64_t (**)(void))(v4 + 48))();
    return 0;
  }
  if (((((*(_QWORD *)(v4 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & 0xFFFFFFF8) != 0)
    v6 = 2;
  else
    v6 = a2 - v5 + 1;
  if (v6 >= 0x10000)
    v7 = 4;
  else
    v7 = 2;
  if (v6 < 0x100)
    v7 = 1;
  if (v6 >= 2)
    v8 = v7;
  else
    v8 = 0;
  return ((uint64_t (*)(void))((char *)&loc_1A4D58 + 4 * byte_1F6060[v8]))();
}

void sub_1A4DB0(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7 >= a3)
  {
    v11 = 0;
    if (a2 <= v7)
      goto LABEL_14;
  }
  else
  {
    v8 = a3 - v7;
    if (((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v9 = v8 + 1;
    else
      v9 = 2;
    if (v9 >= 0x10000)
      v10 = 4;
    else
      v10 = 2;
    if (v9 < 0x100)
      v10 = 1;
    if (v9 >= 2)
      v11 = v10;
    else
      v11 = 0;
    if (a2 <= v7)
LABEL_14:
      __asm { BR              X11 }
  }
  if (((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    v12 = ~v7 + a2;
    bzero(a1, ((*(_QWORD *)(v6 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8);
    *a1 = v12;
  }
  __asm { BR              X10 }
}

void sub_1A4E98()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_1A4EA0(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x1A4EA8);
}

void sub_1A4EC4()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

void sub_1A4ECC()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
}

uint64_t sub_1A4ED4(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_WORD *)(v4 + v5) = 0;
  if (!a2)
    JUMPOUT(0x1A4EDCLL);
  return (*(uint64_t (**)(uint64_t))(v3 + 56))(v4);
}

uint64_t sub_1A4EF4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[2];

  result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 16));
  if (v3 <= 0x3F)
  {
    v5[0] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for SizeConstants.Environment(319);
    if (v4 <= 0x3F)
    {
      v5[1] = *(_QWORD *)(result - 8) + 64;
      swift_initStructMetadata(a1, 0, 2, v5, a1 + 24);
      return 0;
    }
  }
  return result;
}

uint64_t *sub_1A4F7C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  __int16 v28;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = type metadata accessor for DynamicTypeSize(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_DWORD *)(v9 + 80);
  v11 = (v10 | 7) + v7;
  v12 = v10 + 2;
  v13 = *(_QWORD *)(v9 + 64) + 7;
  v14 = v10 | 7 | *(_DWORD *)(v6 + 80);
  if (v14 != 7
    || ((*(_DWORD *)(v6 + 80) | *(_DWORD *)(v9 + 80)) & 0x100000) != 0
    || (v11 & ~(v10 | 7)) + ((v13 + ((v10 + 2) & ~v10)) & 0xFFFFFFFFFFFFFFF8) + 11 > 0x18)
  {
    v17 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v17 + ((v14 + 16) & ~v14));
    swift_retain(v17);
  }
  else
  {
    v18 = ~(v10 | 7);
    v19 = ~v10;
    v20 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16);
    v21 = v8;
    v20(a1, a2, v5);
    v22 = ((unint64_t)a1 + v11) & v18;
    v23 = ((unint64_t)a2 + v11) & v18;
    *(_BYTE *)v22 = *(_BYTE *)v23;
    *(_BYTE *)(v22 | 1) = *(_BYTE *)(v23 | 1);
    v24 = (v12 + v22) & v19;
    v25 = (v12 + v23) & v19;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 16))(v24, v25, v21);
    v26 = (v13 + v24) & 0xFFFFFFFFFFFFFFF8;
    v27 = (v13 + v25) & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v26 = *(_QWORD *)v27;
    v28 = *(_WORD *)(v27 + 8);
    *(_BYTE *)(v26 + 10) = *(_BYTE *)(v27 + 10);
    *(_WORD *)(v26 + 8) = v28;
  }
  return a1;
}

uint64_t sub_1A50E0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  (*(void (**)(void))(v3 + 8))();
  v4 = *(_QWORD *)(v3 + 64);
  v5 = type metadata accessor for DynamicTypeSize(0);
  v6 = *(_QWORD *)(v5 - 8);
  return (*(uint64_t (**)(unint64_t, uint64_t))(v6 + 8))((*(unsigned __int8 *)(v6 + 80)+ ((v4 + a1 + (*(unsigned __int8 *)(v6 + 80) | 7)) & ~(*(unsigned __int8 *)(v6 + 80) | 7))+ 2) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), v5);
}

uint64_t sub_1A5144(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _WORD *v11;
  _WORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char v18;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = type metadata accessor for DynamicTypeSize(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (v9 | 7) + v6;
  v11 = (_WORD *)((v10 + a1) & ~(v9 | 7));
  v12 = (_WORD *)((v10 + a2) & ~(v9 | 7));
  *v11 = *v12;
  v13 = ((unint64_t)v11 + v9 + 2) & ~v9;
  v14 = ((unint64_t)v12 + v9 + 2) & ~v9;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v13, v14, v7);
  v15 = *(_QWORD *)(v8 + 64) + 7;
  v16 = (v15 + v13) & 0xFFFFFFFFFFFFFFF8;
  v17 = (v15 + v14) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v16 = *(_QWORD *)v17;
  v18 = *(_BYTE *)(v17 + 10);
  *(_WORD *)(v16 + 8) = *(_WORD *)(v17 + 8);
  *(_BYTE *)(v16 + 10) = v18;
  return a1;
}

uint64_t sub_1A5214(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _WORD *v11;
  _WORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char v18;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = type metadata accessor for DynamicTypeSize(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (v9 | 7) + v6;
  v11 = (_WORD *)((v10 + a1) & ~(v9 | 7));
  v12 = (_WORD *)((v10 + a2) & ~(v9 | 7));
  *v11 = *v12;
  v13 = ((unint64_t)v11 + v9 + 2) & ~v9;
  v14 = ((unint64_t)v12 + v9 + 2) & ~v9;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 24))(v13, v14, v7);
  v15 = *(_QWORD *)(v8 + 64) + 7;
  v16 = (v15 + v13) & 0xFFFFFFFFFFFFFFF8;
  v17 = (v15 + v14) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v16 = *(_QWORD *)v17;
  v18 = *(_BYTE *)(v17 + 10);
  *(_WORD *)(v16 + 8) = *(_WORD *)(v17 + 8);
  *(_BYTE *)(v16 + 10) = v18;
  return a1;
}

uint64_t sub_1A52E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _WORD *v11;
  _WORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char v18;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = type metadata accessor for DynamicTypeSize(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (v9 | 7) + v6;
  v11 = (_WORD *)((v10 + a1) & ~(v9 | 7));
  v12 = (_WORD *)((v10 + a2) & ~(v9 | 7));
  *v11 = *v12;
  v13 = ((unint64_t)v11 + v9 + 2) & ~v9;
  v14 = ((unint64_t)v12 + v9 + 2) & ~v9;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))(v13, v14, v7);
  v15 = *(_QWORD *)(v8 + 64) + 7;
  v16 = (v15 + v13) & 0xFFFFFFFFFFFFFFF8;
  v17 = (v15 + v14) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v16 = *(_QWORD *)v17;
  v18 = *(_BYTE *)(v17 + 10);
  *(_WORD *)(v16 + 8) = *(_WORD *)(v17 + 8);
  *(_BYTE *)(v16 + 10) = v18;
  return a1;
}

uint64_t sub_1A53B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _WORD *v11;
  _WORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char v18;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = type metadata accessor for DynamicTypeSize(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (v9 | 7) + v6;
  v11 = (_WORD *)((v10 + a1) & ~(v9 | 7));
  v12 = (_WORD *)((v10 + a2) & ~(v9 | 7));
  *v11 = *v12;
  v13 = ((unint64_t)v11 + v9 + 2) & ~v9;
  v14 = ((unint64_t)v12 + v9 + 2) & ~v9;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 40))(v13, v14, v7);
  v15 = *(_QWORD *)(v8 + 64) + 7;
  v16 = (v15 + v13) & 0xFFFFFFFFFFFFFFF8;
  v17 = (v15 + v14) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v16 = *(_QWORD *)v17;
  v18 = *(_BYTE *)(v17 + 10);
  *(_WORD *)(v16 + 8) = *(_WORD *)(v17 + 8);
  *(_BYTE *)(v16 + 10) = v18;
  return a1;
}

uint64_t sub_1A5484(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  int v21;
  int v22;
  int v23;
  unsigned __int8 *v24;
  unsigned int v25;
  uint64_t (*v27)(unsigned __int16 *, uint64_t, uint64_t);
  unsigned __int16 *v28;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int *)(v6 + 84);
  v8 = type metadata accessor for DynamicTypeSize(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned int *)(v9 + 84);
  if (v10 <= 0xFE)
    v11 = 254;
  else
    v11 = *(_DWORD *)(v9 + 84);
  if (v11 <= v7)
    v12 = v7;
  else
    v12 = v11;
  if (!a2)
    return 0;
  v13 = v8;
  v14 = *(unsigned __int8 *)(v9 + 80);
  v15 = v14 | 7;
  v16 = (v14 | 7) + *(_QWORD *)(v6 + 64);
  v17 = v14 + 2;
  if (a2 <= v12)
    goto LABEL_19;
  v18 = *(_QWORD *)(v9 + 64);
  v19 = (v16 & ~v15) + ((v18 + (v17 & ~v14) + 7) & 0xFFFFFFFFFFFFFFF8) + 11;
  if ((((v16 & ~(_DWORD)v15) + (((_DWORD)v18 + (v17 & ~(_DWORD)v14) + 7) & 0xFFFFFFF8) + 11) & 0xFFFFFFFB) == 3)
  {
    if ((a2 - v12 + 0xFFFFFF) >> 24 == 255)
    {
      v20 = *(unsigned __int16 *)((char *)a1 + v19);
      if (!v20)
        goto LABEL_19;
      goto LABEL_17;
    }
    if ((a2 - v12 + 0xFFFFFF) >> 24)
    {
      v20 = *((unsigned __int8 *)a1 + v19);
      if (v20)
      {
LABEL_17:
        v21 = (v20 << 24) - 0x1000000;
        v22 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        goto LABEL_18;
      }
    }
LABEL_19:
    if (v7 >= v11)
    {
      v27 = *(uint64_t (**)(unsigned __int16 *, uint64_t, uint64_t))(v6 + 48);
      v28 = a1;
      v10 = v7;
      v13 = v5;
    }
    else
    {
      v24 = (unsigned __int8 *)(((unint64_t)a1 + v16) & ~v15);
      if (v10 <= 0xFE)
      {
        v25 = *v24;
        if (v25 < 2)
          return 0;
        v23 = (v25 + 2147483646) & 0x7FFFFFFF;
        return (v23 + 1);
      }
      v28 = (unsigned __int16 *)((unint64_t)&v24[v17] & ~v14);
      v27 = *(uint64_t (**)(unsigned __int16 *, uint64_t, uint64_t))(v9 + 48);
    }
    return v27(v28, v10, v13);
  }
  if (!*((_BYTE *)a1 + v19))
    goto LABEL_19;
  v21 = 0;
  v22 = *(_DWORD *)a1;
LABEL_18:
  v23 = v12 + (v22 | v21);
  return (v23 + 1);
}

void sub_1A5610(_BYTE *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  size_t v17;
  size_t v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  _BYTE *v25;
  int v26;
  void (*v27)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;

  v7 = *(_QWORD *)(a4 + 16);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned int *)(v8 + 84);
  v10 = type metadata accessor for DynamicTypeSize(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned int *)(v11 + 84);
  if (v12 <= 0xFE)
    v13 = 254;
  else
    v13 = *(_DWORD *)(v11 + 84);
  if (v13 <= v9)
    v14 = v9;
  else
    v14 = v13;
  v15 = *(unsigned __int8 *)(v11 + 80);
  v16 = (v15 | 7) + *(_QWORD *)(v8 + 64);
  v17 = ((*(_QWORD *)(v11 + 64) + ((v15 + 2) & ~v15) + 7) & 0xFFFFFFFFFFFFFFF8) + 11;
  v18 = v17 + (v16 & ~(v15 | 7));
  if (a3 <= v14)
  {
    if (v14 >= a2)
      goto LABEL_28;
    v22 = 0;
    v21 = 0;
    v20 = ~v14 + a2;
    if ((_DWORD)v18 == 3)
    {
LABEL_21:
      v23 = HIBYTE(v20) + 1;
      v24 = v20 & 0xFFFFFF;
      bzero(a1, v18);
      *(_WORD *)a1 = v24;
      a1[2] = BYTE2(v24);
      if (!v21)
        return;
      goto LABEL_22;
    }
    goto LABEL_17;
  }
  if ((_DWORD)v18 != 3)
  {
    if (v14 >= a2)
      goto LABEL_27;
    v20 = ~v14 + a2;
    v22 = 1;
LABEL_17:
    bzero(a1, v18);
    *(_DWORD *)a1 = v20;
    LOWORD(v23) = 1;
    v21 = v22;
    if (!v22)
      return;
LABEL_22:
    if (v21 == 2)
      *(_WORD *)&a1[v18] = v23;
    else
      a1[v18] = v23;
    return;
  }
  v19 = a3 - v14 + 0xFFFFFF;
  if (HIBYTE(v19) != 255)
  {
    if (v14 < a2)
    {
      v21 = (v19 & 0xFF000000) != 0;
      v20 = ~v14 + a2;
      goto LABEL_21;
    }
    if (!HIBYTE(v19))
      goto LABEL_28;
LABEL_27:
    a1[v18] = 0;
    goto LABEL_28;
  }
  if (v14 < a2)
  {
    v20 = ~v14 + a2;
    v21 = 2;
    goto LABEL_21;
  }
  *(_WORD *)&a1[v18] = 0;
LABEL_28:
  if (!(_DWORD)a2)
    return;
  if (v9 >= v13)
  {
    v27 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56);
    v28 = (uint64_t)a1;
    v29 = a2;
    v12 = v9;
    v10 = v7;
LABEL_39:
    v27(v28, v29, v12, v10);
    return;
  }
  v25 = (_BYTE *)((unint64_t)&a1[v16] & ~(v15 | 7));
  if (v13 >= a2)
  {
    if (v12 <= 0xFE)
    {
      *v25 = a2 + 1;
      return;
    }
    v28 = (unint64_t)&v25[v15 + 2] & ~v15;
    v27 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56);
    v29 = a2;
    goto LABEL_39;
  }
  v26 = ~v13 + a2;
  bzero(v25, v17);
  if ((_DWORD)v17 == 3)
  {
    *(_WORD *)v25 = v26;
    v25[2] = BYTE2(v26);
  }
  else
  {
    *(_DWORD *)v25 = v26;
  }
}

uint64_t sub_1A5864(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for SizeConstants.Environment(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t FlowAction.FeedDestination.preferredContentSize.getter()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t v9;
  char v10;
  uint64_t v12;
  _BYTE v13[32];

  v1 = *v0;
  if (!*(_QWORD *)(v1 + 16))
    return 0;
  v2 = sub_9F7C(0x6572726566657270, 0xED0000657A695364);
  if ((v3 & 1) == 0)
    return 0;
  sub_93194(*(_QWORD *)(v1 + 56) + 32 * v2, (uint64_t)v13);
  v4 = sub_5440(&qword_2680E8);
  v5 = sub_5440(&qword_26AAC8);
  if ((swift_dynamicCast(&v12, v13, v4, v5, 6) & 1) == 0)
    return 0;
  v6 = v12;
  if (!*(_QWORD *)(v12 + 16)
    || (v7 = sub_9F7C(0x6874646977, 0xE500000000000000), (v8 & 1) == 0)
    || !*(_QWORD *)(v6 + 16)
    || (v9 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v7), sub_9F7C(0x746867696568, 0xE600000000000000),
                                                         (v10 & 1) == 0))
  {
    swift_bridgeObjectRelease(v6);
    return 0;
  }
  swift_bridgeObjectRelease(v6);
  return v9;
}

uint64_t sub_1A59CC(char *a1, char *a2)
{
  return sub_C7624(*a1, *a2);
}

Swift::Int sub_1A59D8()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5, 0);
  if (v1)
    v2 = 0x736E6F6974706FLL;
  else
    v2 = 1684366694;
  if (v1)
    v3 = 0xE700000000000000;
  else
    v3 = 0xE400000000000000;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_1A5A50(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  if (*v1)
    v2 = 0x736E6F6974706FLL;
  else
    v2 = 1684366694;
  if (*v1)
    v3 = 0xE700000000000000;
  else
    v3 = 0xE400000000000000;
  String.hash(into:)(a1, v2, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_1A5AA4(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD v6[9];

  v2 = *v1;
  Hasher.init(_seed:)(v6, a1);
  if (v2)
    v3 = 0x736E6F6974706FLL;
  else
    v3 = 1684366694;
  if (v2)
    v4 = 0xE700000000000000;
  else
    v4 = 0xE400000000000000;
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_1A5B18@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  Swift::String v3;
  void *v4;
  Swift::Int v5;
  uint64_t result;
  char v7;

  v3._countAndFlagsBits = *a1;
  v4 = (void *)a1[1];
  v3._object = v4;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_24A7C8, v3);
  result = swift_bridgeObjectRelease(v4);
  if (v5 == 1)
    v7 = 1;
  else
    v7 = 2;
  if (!v5)
    v7 = 0;
  *a2 = v7;
  return result;
}

void sub_1A5B74(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 1684366694;
  if (*v1)
    v2 = 0x736E6F6974706FLL;
  v3 = 0xE400000000000000;
  if (*v1)
    v3 = 0xE700000000000000;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_1A5BAC()
{
  _BYTE *v0;

  if (*v0)
    return 0x736E6F6974706FLL;
  else
    return 1684366694;
}

uint64_t sub_1A5BE0@<X0>(Swift::String string@<0:X0, 8:X1>, char *a2@<X8>)
{
  void *object;
  Swift::String v3;
  Swift::Int v5;
  uint64_t result;
  char v7;

  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_24A7C8, v3);
  result = swift_bridgeObjectRelease(object);
  if (v5 == 1)
    v7 = 1;
  else
    v7 = 2;
  if (!v5)
    v7 = 0;
  *a2 = v7;
  return result;
}

uint64_t sub_1A5C40(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1A63BC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1A5C68(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1A63BC();
  return CodingKey.debugDescription.getter(a1, v2);
}

Swift::Int sub_1A5C90()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1, 0);
  String.hash(into:)(v1, 12383, 0xE200000000000000);
  return Hasher._finalize()();
}

uint64_t sub_1A5CD4(uint64_t a1)
{
  return String.hash(into:)(a1, 12383, 0xE200000000000000);
}

Swift::Int sub_1A5CE0(uint64_t a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, a1);
  String.hash(into:)(v2, 12383, 0xE200000000000000);
  return Hasher._finalize()();
}

uint64_t sub_1A5D20@<X0>(uint64_t *a1@<X0>, BOOL *a2@<X8>)
{
  Swift::String v3;
  void *v4;
  Swift::Int v5;
  uint64_t result;

  v3._countAndFlagsBits = *a1;
  v4 = (void *)a1[1];
  v3._object = v4;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_24A818, v3);
  result = swift_bridgeObjectRelease(v4);
  *a2 = v5 != 0;
  return result;
}

void sub_1A5D70(_QWORD *a1@<X8>)
{
  *a1 = 12383;
  a1[1] = 0xE200000000000000;
}

uint64_t sub_1A5D80@<X0>(Swift::String string@<0:X0, 8:X1>, BOOL *a2@<X8>)
{
  void *object;
  Swift::String v3;
  Swift::Int v5;
  uint64_t result;

  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_24A850, v3);
  result = swift_bridgeObjectRelease(object);
  *a2 = v5 != 0;
  return result;
}

uint64_t sub_1A5DD4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1A6448();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1A5DFC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1A6448();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t FlowAction.FeedDestination.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  _QWORD *v33;
  uint64_t *v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  char *v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  char v69;
  char v70;
  char v71;

  v68 = a1;
  v63 = a2;
  v66 = type metadata accessor for JSONObject(0);
  v62 = *(_QWORD *)(v66 - 8);
  v3 = __chkstk_darwin(v66);
  v65 = (char *)&v57 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v6 = (uint64_t *)((char *)&v57 - v5);
  v7 = sub_5440(&qword_2680C0);
  v8 = __chkstk_darwin(v7);
  v61 = (char *)&v57 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v60 = (char *)&v57 - v10;
  v64 = sub_5440(&qword_26AAD0);
  v11 = *(_QWORD *)(v64 - 8);
  __chkstk_darwin(v64);
  v13 = (char *)&v57 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_5440(&qword_26AAD8);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v57 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = a1[3];
  v19 = a1[4];
  sub_5480(a1, v18);
  v20 = sub_1A63BC();
  v21 = v67;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&_s15FeedDestinationV10CodingKeysON, &_s15FeedDestinationV10CodingKeysON, v20, v18, v19);
  if (!v21)
  {
    v58 = v6;
    v59 = v13;
    v22 = v65;
    v23 = v66;
    v57 = v11;
    v24 = v64;
    v67 = v15;
    v71 = 0;
    v25 = v14;
    if ((KeyedDecodingContainer.contains(_:)(&v71, v14) & 1) != 0)
    {
      v69 = 0;
      v26 = sub_1A6448();
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(&_s15FeedDestinationV16LegacyCodingKeysON, &v69, v14, &_s15FeedDestinationV16LegacyCodingKeysON, v26);
      v27 = sub_1A6400();
      v28 = v58;
      v29 = v23;
      v31 = KeyedDecodingContainer.decode<A>(_:forKey:)(v58, v23, v30, v24, v23, v27);
      v47 = (uint64_t)v60;
      JSONObject.dictionary.getter(v31);
      (*(void (**)(_QWORD *, uint64_t))(v62 + 8))(v28, v29);
      v48 = type metadata accessor for JSONDictionary(0);
      v49 = *(_QWORD *)(v48 - 8);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v49 + 48))(v47, 1, v48) == 1)
      {
        sub_152E14(v47);
        v39 = v67;
LABEL_15:
        v51 = type metadata accessor for DecodingError(0);
        swift_allocError(v51, &protocol witness table for DecodingError, 0, 0);
        v53 = v52;
        v54 = v59;
        v55 = KeyedDecodingContainer.codingPath.getter(v24);
        DecodingError.Context.init(codingPath:debugDescription:underlyingError:)(v55, 0xD000000000000014, 0x80000000001FE790, 0);
        v56 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v51 - 8) + 104))(v53, enum case for DecodingError.dataCorrupted(_:), v51);
        swift_willThrow(v56);
        (*(void (**)(char *, uint64_t))(v57 + 8))(v54, v24);
        (*(void (**)(char *, uint64_t))(v39 + 8))(v17, v25);
        return _s7BooksUI13AnyPagedFrameVwxx_0(v68);
      }
      v50 = sub_5440(&qword_2680E8);
      v41 = JSONDictionary.bridgedPrimitiveValues<A, B>()(&type metadata for String, v50, &protocol witness table for String);
      (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v47, v48);
      v39 = v67;
      if (!v41)
        goto LABEL_15;
      (*(void (**)(char *, uint64_t))(v57 + 8))(v59, v24);
      v34 = v63;
      goto LABEL_14;
    }
    v70 = 1;
    v32 = sub_1A6400();
    v33 = KeyedDecodingContainer.decode<A>(_:forKey:)(v22, v23, &v70, v14, v23, v32);
    v34 = v63;
    v36 = (uint64_t)v61;
    JSONObject.dictionary.getter(v33);
    (*(void (**)(_QWORD *, uint64_t))(v62 + 8))(v22, v23);
    v37 = type metadata accessor for JSONDictionary(0);
    v38 = *(_QWORD *)(v37 - 8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v38 + 48))(v36, 1, v37) == 1)
    {
      sub_152E14(v36);
      v25 = v14;
      v39 = v67;
    }
    else
    {
      v40 = sub_5440(&qword_2680E8);
      v41 = JSONDictionary.bridgedPrimitiveValues<A, B>()(&type metadata for String, v40, &protocol witness table for String);
      (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v36, v37);
      v25 = v14;
      v39 = v67;
      if (v41)
      {
LABEL_14:
        (*(void (**)(char *, uint64_t))(v39 + 8))(v17, v25);
        *v34 = v41;
        return _s7BooksUI13AnyPagedFrameVwxx_0(v68);
      }
    }
    v42 = type metadata accessor for DecodingError(0);
    swift_allocError(v42, &protocol witness table for DecodingError, 0, 0);
    v44 = v43;
    v45 = KeyedDecodingContainer.codingPath.getter(v25);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)(v45, 0xD000000000000014, 0x80000000001FE790, 0);
    v46 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v42 - 8) + 104))(v44, enum case for DecodingError.dataCorrupted(_:), v42);
    swift_willThrow(v46);
    (*(void (**)(char *, uint64_t))(v39 + 8))(v17, v25);
  }
  return _s7BooksUI13AnyPagedFrameVwxx_0(v68);
}

uint64_t sub_1A63A0@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return FlowAction.FeedDestination.init(from:)(a1, a2);
}

uint64_t static FlowActionDestination<>.feed(options:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = a1;
  return swift_bridgeObjectRetain(a1);
}

unint64_t sub_1A63BC()
{
  unint64_t result;

  result = qword_26AAE0;
  if (!qword_26AAE0)
  {
    result = swift_getWitnessTable(&unk_1F64A4, &_s15FeedDestinationV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_26AAE0);
  }
  return result;
}

unint64_t sub_1A6400()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2680E0;
  if (!qword_2680E0)
  {
    v1 = type metadata accessor for JSONObject(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for JSONObject, v1);
    atomic_store(result, (unint64_t *)&qword_2680E0);
  }
  return result;
}

unint64_t sub_1A6448()
{
  unint64_t result;

  result = qword_26AAE8;
  if (!qword_26AAE8)
  {
    result = swift_getWitnessTable(&unk_1F6454, &_s15FeedDestinationV16LegacyCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_26AAE8);
  }
  return result;
}

unint64_t sub_1A648C(uint64_t a1)
{
  unint64_t result;

  result = sub_1A64B0();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1A64B0()
{
  unint64_t result;

  result = qword_26AAF0;
  if (!qword_26AAF0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for FlowAction.FeedDestination, &type metadata for FlowAction.FeedDestination);
    atomic_store(result, (unint64_t *)&qword_26AAF0);
  }
  return result;
}

ValueMetadata *type metadata accessor for FlowAction.FeedDestination()
{
  return &type metadata for FlowAction.FeedDestination;
}

uint64_t _s15FeedDestinationV10CodingKeysOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1A6550 + 4 * byte_1F61D5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1A6584 + 4 * byte_1F61D0[v4]))();
}

uint64_t sub_1A6584(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A658C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1A6594);
  return result;
}

uint64_t sub_1A65A0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1A65A8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1A65AC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1A65B4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s15FeedDestinationV10CodingKeysOMa()
{
  return &_s15FeedDestinationV10CodingKeysON;
}

uint64_t _s15FeedDestinationV16LegacyCodingKeysOwst(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1A6610 + 4 * byte_1F61DA[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1A6630 + 4 * byte_1F61DF[v4]))();
}

_BYTE *sub_1A6610(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1A6630(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1A6638(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1A6640(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1A6648(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1A6650(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *_s15FeedDestinationV16LegacyCodingKeysOMa()
{
  return &_s15FeedDestinationV16LegacyCodingKeysON;
}

unint64_t sub_1A6670()
{
  unint64_t result;

  result = qword_26AAF8;
  if (!qword_26AAF8)
  {
    result = swift_getWitnessTable(&unk_1F633C, &_s15FeedDestinationV16LegacyCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_26AAF8);
  }
  return result;
}

unint64_t sub_1A66B8()
{
  unint64_t result;

  result = qword_26AB00;
  if (!qword_26AB00)
  {
    result = swift_getWitnessTable(&unk_1F642C, &_s15FeedDestinationV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_26AB00);
  }
  return result;
}

unint64_t sub_1A6700()
{
  unint64_t result;

  result = qword_26AB08;
  if (!qword_26AB08)
  {
    result = swift_getWitnessTable(&unk_1F6274, &_s15FeedDestinationV16LegacyCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_26AB08);
  }
  return result;
}

unint64_t sub_1A6748()
{
  unint64_t result;

  result = qword_26AB10;
  if (!qword_26AB10)
  {
    result = swift_getWitnessTable(&unk_1F629C, &_s15FeedDestinationV16LegacyCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_26AB10);
  }
  return result;
}

unint64_t sub_1A6790()
{
  unint64_t result;

  result = qword_26AB18;
  if (!qword_26AB18)
  {
    result = swift_getWitnessTable(&unk_1F6364, &_s15FeedDestinationV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_26AB18);
  }
  return result;
}

unint64_t sub_1A67D8()
{
  unint64_t result;

  result = qword_26AB20;
  if (!qword_26AB20)
  {
    result = swift_getWitnessTable(&unk_1F638C, &_s15FeedDestinationV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_26AB20);
  }
  return result;
}

uint64_t ListItemAccessoryDrillInChevron.init()@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = swift_getKeyPath(&unk_1F6500);
  v2 = sub_5440(&qword_25F1E8);
  swift_storeEnumTagMultiPayload(a1, v2, 0);
  v3 = (_QWORD *)((char *)a1 + *(int *)(type metadata accessor for ListItemAccessoryDrillInChevron(0) + 20));
  *v3 = swift_getKeyPath(&unk_1F6528);
  v4 = sub_5440(&qword_25FAD0);
  return swift_storeEnumTagMultiPayload(v3, v4, 0);
}

uint64_t type metadata accessor for ListItemAccessoryDrillInChevron(uint64_t a1)
{
  uint64_t result;

  result = qword_26ABC0;
  if (!qword_26ABC0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ListItemAccessoryDrillInChevron);
  return result;
}

uint64_t ListItemAccessoryDrillInChevron.content(contextActionMenuView:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t OpaqueTypeConformance2;
  uint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t KeyPath;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  double v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  _QWORD v58[4];

  v57 = a1;
  v1 = sub_5440(&qword_25FE08);
  __chkstk_darwin(v1);
  v56 = (char *)&v45 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for Font.TextStyle(0);
  v54 = *(_QWORD *)(v3 - 8);
  v55 = v3;
  __chkstk_darwin(v3);
  v53 = (char *)&v45 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for FontConstants.ListItem(0);
  __chkstk_darwin(v5);
  v52 = (uint64_t)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for ColorConstants(0);
  __chkstk_darwin(v7);
  v50 = (uint64_t)&v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for AutomaticHoverEffect(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_5440(&qword_26AB28);
  v46 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v15 = (char *)&v45 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = sub_5440(&qword_26AB30);
  v49 = *(_QWORD *)(v51 - 8);
  __chkstk_darwin(v51);
  v17 = (char *)&v45 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = sub_5440(&qword_26AB38);
  __chkstk_darwin(v48);
  v47 = (char *)&v45 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58[0] = Image.init(systemName:)(0x2E6E6F7276656863, 0xEF64726177726F66);
  static CustomHoverEffect<>.automatic.getter(v58[0]);
  v19 = sub_1A6D7C();
  View.hoverEffect<A>(_:isEnabled:)(v12, 1, &type metadata for Image, v9, &protocol witness table for Image, v19);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  swift_release(v58[0]);
  v21 = static Font.Weight.semibold.getter(v20);
  v58[0] = &type metadata for Image;
  v58[1] = v9;
  v58[2] = &protocol witness table for Image;
  v58[3] = v19;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v58, &opaque type descriptor for <<opaque return type of View.hoverEffect<A>(_:isEnabled:)>>, 1);
  View.fontWeight(_:)(*(_QWORD *)&v21, 0, v13, OpaqueTypeConformance2);
  (*(void (**)(char *, uint64_t))(v46 + 8))(v15, v13);
  v23 = v50;
  _s7BooksUI18BuyButtonExternalsV6colorsAA14ColorConstantsVvg_0(v50);
  v24 = objc_msgSend((id)objc_opt_self(UIColor), "tertiaryLabelColor");
  v25 = Color.init(_:)(v24);
  sub_224DC(v23, type metadata accessor for ColorConstants);
  KeyPath = swift_getKeyPath(&unk_1F6560);
  v27 = v49;
  v28 = (uint64_t)v47;
  v29 = v51;
  (*(void (**)(char *, char *, uint64_t))(v49 + 16))(v47, v17, v51);
  v30 = (uint64_t *)(v28 + *(int *)(v48 + 36));
  *v30 = KeyPath;
  v30[1] = v25;
  (*(void (**)(char *, uint64_t))(v27 + 8))(v17, v29);
  type metadata accessor for ListItemAccessoryDrillInChevron(0);
  v31 = v52;
  sub_30978(v52);
  v33 = v53;
  v32 = v54;
  v34 = v55;
  (*(void (**)(char *, _QWORD, uint64_t))(v54 + 104))(v53, enum case for Font.TextStyle.body(_:), v55);
  v35 = type metadata accessor for Font.Design(0);
  v36 = v56;
  v37 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56))(v56, 1, 1, v35);
  v38 = static Font.Weight.semibold.getter(v37);
  v39 = (uint64_t)v36;
  v40 = static Font.system(_:design:weight:)(v33, v36, *(_QWORD *)&v38, 0);
  sub_B414(v39, &qword_25FE08);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v33, v34);
  sub_224DC(v31, type metadata accessor for FontConstants.ListItem);
  v41 = swift_getKeyPath(&unk_1F6590);
  v42 = v57;
  sub_1A6E70(v28, v57);
  v43 = (uint64_t *)(v42 + *(int *)(sub_5440(&qword_26AB40) + 36));
  *v43 = v41;
  v43[1] = v40;
  return sub_B414(v28, &qword_26AB38);
}

unint64_t sub_1A6D7C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25FDF0;
  if (!qword_25FDF0)
  {
    v1 = type metadata accessor for AutomaticHoverEffect(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for AutomaticHoverEffect, v1);
    atomic_store(result, (unint64_t *)&qword_25FDF0);
  }
  return result;
}

uint64_t sub_1A6DC8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.foregroundColor.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1A6DF0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.foregroundColor.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1A6E18(_QWORD *a1)
{
  uint64_t v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.foregroundColor.setter(v1);
}

uint64_t sub_1A6E40(_QWORD *a1)
{
  uint64_t v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.foregroundColor.setter(v1);
}

uint64_t sub_1A6E70(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_5440(&qword_26AB38);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1A6EB8(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &opaque type descriptor for <<opaque return type of ListItemAccessoryDrillInChevron.content(contextActionMenuView:)>>, 1);
}

uint64_t *initializeBufferWithCopyOfBuffer for ListItemAccessoryDrillInChevron(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _WORD *v15;
  _WORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  _WORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = sub_5440(&qword_25F1E8);
    if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
    {
      v8 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      v9 = a1;
      v10 = v7;
      v11 = 1;
    }
    else
    {
      v13 = *a2;
      *a1 = *a2;
      swift_retain(v13);
      v9 = a1;
      v10 = v7;
      v11 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v10, v11);
    v14 = *(int *)(a3 + 20);
    v15 = (_WORD *)((char *)a1 + v14);
    v16 = (_WORD *)((char *)a2 + v14);
    v17 = sub_5440(&qword_25FAD0);
    if (swift_getEnumCaseMultiPayload(v16, v17) == 1)
    {
      *v15 = *v16;
      v18 = type metadata accessor for FontConstants.Environment(0);
      v19 = *(int *)(v18 + 24);
      v20 = (char *)v15 + v19;
      v21 = (char *)v16 + v19;
      v22 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v20, v21, v22);
      *(_QWORD *)((char *)v15 + *(int *)(v18 + 28)) = *(_QWORD *)((char *)v16 + *(int *)(v18 + 28));
      v23 = v15;
      v24 = v17;
      v25 = 1;
    }
    else
    {
      v26 = *(_QWORD *)v16;
      *(_QWORD *)v15 = *(_QWORD *)v16;
      swift_retain(v26);
      v23 = v15;
      v24 = v17;
      v25 = 0;
    }
    swift_storeEnumTagMultiPayload(v23, v24, v25);
  }
  return a1;
}

double destroy for ListItemAccessoryDrillInChevron(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  double result;

  v4 = sub_5440(&qword_25F1E8);
  if (swift_getEnumCaseMultiPayload(a1, v4) == 1)
  {
    v5 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  }
  else
  {
    swift_release(*a1);
  }
  v6 = (_QWORD *)((char *)a1 + *(int *)(a2 + 20));
  v7 = sub_5440(&qword_25FAD0);
  if (swift_getEnumCaseMultiPayload(v6, v7) == 1)
  {
    v8 = (char *)v6 + *(int *)(type metadata accessor for FontConstants.Environment(0) + 24);
    v9 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  }
  else
  {
    *(_QWORD *)&result = swift_release(*v6).n128_u64[0];
  }
  return result;
}

uint64_t *initializeWithCopy for ListItemAccessoryDrillInChevron(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _WORD *v13;
  _WORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = sub_5440(&qword_25F1E8);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for ColorScheme(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a1;
    v9 = v6;
    v10 = 1;
  }
  else
  {
    v11 = *a2;
    *a1 = *a2;
    swift_retain(v11);
    v8 = a1;
    v9 = v6;
    v10 = 0;
  }
  swift_storeEnumTagMultiPayload(v8, v9, v10);
  v12 = *(int *)(a3 + 20);
  v13 = (_WORD *)((char *)a1 + v12);
  v14 = (_WORD *)((char *)a2 + v12);
  v15 = sub_5440(&qword_25FAD0);
  if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
  {
    *v13 = *v14;
    v16 = type metadata accessor for FontConstants.Environment(0);
    v17 = *(int *)(v16 + 24);
    v18 = (char *)v13 + v17;
    v19 = (char *)v14 + v17;
    v20 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v18, v19, v20);
    *(_QWORD *)((char *)v13 + *(int *)(v16 + 28)) = *(_QWORD *)((char *)v14 + *(int *)(v16 + 28));
    v21 = 1;
  }
  else
  {
    v22 = *(_QWORD *)v14;
    *(_QWORD *)v13 = *(_QWORD *)v14;
    swift_retain(v22);
    v21 = 0;
  }
  swift_storeEnumTagMultiPayload(v13, v15, v21);
  return a1;
}

uint64_t *assignWithCopy for ListItemAccessoryDrillInChevron(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  if (a1 != a2)
  {
    sub_B414((uint64_t)a1, &qword_25F1E8);
    v6 = sub_5440(&qword_25F1E8);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = v6;
      v10 = 1;
    }
    else
    {
      v11 = *a2;
      *a1 = *a2;
      swift_retain(v11);
      v8 = a1;
      v9 = v6;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
    v12 = *(int *)(a3 + 20);
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    sub_B414((uint64_t)a1 + v12, &qword_25FAD0);
    v15 = sub_5440(&qword_25FAD0);
    if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
    {
      *v13 = *v14;
      v13[1] = v14[1];
      v16 = type metadata accessor for FontConstants.Environment(0);
      v17 = *(int *)(v16 + 24);
      v18 = &v13[v17];
      v19 = &v14[v17];
      v20 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v18, v19, v20);
      *(_QWORD *)&v13[*(int *)(v16 + 28)] = *(_QWORD *)&v14[*(int *)(v16 + 28)];
      v21 = 1;
    }
    else
    {
      v22 = *(_QWORD *)v14;
      *(_QWORD *)v13 = *(_QWORD *)v14;
      swift_retain(v22);
      v21 = 0;
    }
    swift_storeEnumTagMultiPayload(v13, v15, v21);
  }
  return a1;
}

char *initializeWithTake for ListItemAccessoryDrillInChevron(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;

  v6 = sub_5440(&qword_25F1E8);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for ColorScheme(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v8 = *(int *)(a3 + 20);
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = sub_5440(&qword_25FAD0);
  if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
  {
    *(_WORD *)v9 = *(_WORD *)v10;
    v12 = type metadata accessor for FontConstants.Environment(0);
    v13 = *(int *)(v12 + 24);
    v14 = &v9[v13];
    v15 = &v10[v13];
    v16 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v14, v15, v16);
    *(_QWORD *)&v9[*(int *)(v12 + 28)] = *(_QWORD *)&v10[*(int *)(v12 + 28)];
    swift_storeEnumTagMultiPayload(v9, v11, 1);
  }
  else
  {
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  return a1;
}

char *assignWithTake for ListItemAccessoryDrillInChevron(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;

  if (a1 != a2)
  {
    sub_B414((uint64_t)a1, &qword_25F1E8);
    v6 = sub_5440(&qword_25F1E8);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for ColorScheme(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
    v8 = *(int *)(a3 + 20);
    v9 = &a1[v8];
    v10 = &a2[v8];
    sub_B414((uint64_t)&a1[v8], &qword_25FAD0);
    v11 = sub_5440(&qword_25FAD0);
    if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
    {
      *(_WORD *)v9 = *(_WORD *)v10;
      v12 = type metadata accessor for FontConstants.Environment(0);
      v13 = *(int *)(v12 + 24);
      v14 = &v9[v13];
      v15 = &v10[v13];
      v16 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v14, v15, v16);
      *(_QWORD *)&v9[*(int *)(v12 + 28)] = *(_QWORD *)&v10[*(int *)(v12 + 28)];
      swift_storeEnumTagMultiPayload(v9, v11, 1);
    }
    else
    {
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for ListItemAccessoryDrillInChevron(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1A76B8);
}

uint64_t sub_1A76B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v6 = sub_5440(&qword_25F210);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v8 = sub_5440(&qword_2677E0);
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for ListItemAccessoryDrillInChevron(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1A7740);
}

uint64_t sub_1A7740(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v8 = sub_5440(&qword_25F210);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v10 = sub_5440(&qword_2677E0);
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_1A77C4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[2];

  sub_2ADCC(319, (unint64_t *)&qword_25F298, type metadata accessor for ColorConstants);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_2ADCC(319, (unint64_t *)&qword_260910, type metadata accessor for FontConstants.ListItem);
    if (v5 <= 0x3F)
    {
      v6[1] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 256, 2, v6, a1 + 16);
    }
  }
}

unint64_t sub_1A786C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_26ABF8;
  if (!qword_26ABF8)
  {
    v1 = sub_7EF8(&qword_26AB40);
    sub_1A78E8();
    sub_15D284((unint64_t *)&qword_2600A8, &qword_2600B0);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_26ABF8);
  }
  return result;
}

unint64_t sub_1A78E8()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t OpaqueTypeConformance2;
  void *v4;
  uint64_t v5;
  void *v6;
  unint64_t v7;

  result = qword_26AC00;
  if (!qword_26AC00)
  {
    v1 = sub_7EF8(&qword_26AB38);
    v2 = sub_7EF8(&qword_26AB28);
    v4 = &type metadata for Image;
    v5 = type metadata accessor for AutomaticHoverEffect(255);
    v6 = &protocol witness table for Image;
    v7 = sub_1A6D7C();
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v4, &opaque type descriptor for <<opaque return type of View.hoverEffect<A>(_:isEnabled:)>>, 1);
    v4 = (void *)v2;
    v5 = OpaqueTypeConformance2;
    swift_getOpaqueTypeConformance2(&v4, &opaque type descriptor for <<opaque return type of View.fontWeight(_:)>>, 1);
    sub_15D284((unint64_t *)&qword_25FD88, &qword_25FD90);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_26AC00);
  }
  return result;
}

double SizeConstants.Spacing.s.getter()
{
  return 8.0;
}

double SizeConstants.Spacing.m.getter()
{
  return 12.0;
}

double SizeConstants.Spacing.xxxs.getter()
{
  return 2.0;
}

double SizeConstants.Spacing.xxs.getter()
{
  return 4.0;
}

double SizeConstants.Spacing.xs.getter()
{
  return 6.0;
}

double SizeConstants.Spacing.l.getter()
{
  return 16.0;
}

double SizeConstants.Spacing.xl.getter()
{
  return 20.0;
}

double SizeConstants.Spacing.xxl.getter()
{
  return 24.0;
}

double SizeConstants.Spacing.xxxxl.getter()
{
  return 40.0;
}

double SizeConstants.Gutter.s.getter()
{
  return 10.0;
}

double SizeConstants.Gutter.m.getter()
{
  return 25.0;
}

double SizeConstants.Gutter.l.getter()
{
  return 28.0;
}

uint64_t _s7SpacingVwet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1A7A54);
}

uint64_t _s7SpacingVwst(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1A7A64);
}

uint64_t type metadata accessor for SizeConstants.Spacing(uint64_t a1)
{
  return sub_1FE90(a1, qword_26AC60, (uint64_t)&nominal type descriptor for SizeConstants.Spacing);
}

uint64_t _s6GutterVwet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1A7A8C);
}

uint64_t _s6GutterVwst(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1A7A9C);
}

uint64_t type metadata accessor for SizeConstants.Gutter(uint64_t a1)
{
  return sub_1FE90(a1, qword_26ACF0, (uint64_t)&nominal type descriptor for SizeConstants.Gutter);
}

uint64_t _s12CornerRadiusVwet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1A7AC0);
}

uint64_t sub_1A7AC4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SizeConstants.Environment(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t _s12CornerRadiusVwst(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1A7B0C);
}

uint64_t sub_1A7B10(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SizeConstants.Environment(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for SizeConstants.CornerRadius(uint64_t a1)
{
  return sub_1FE90(a1, qword_26AD80, (uint64_t)&nominal type descriptor for SizeConstants.CornerRadius);
}

id SharedWithYouView.makeUIView(context:)()
{
  id *v0;

  return *v0;
}

id SharedWithYouView.updateUIView(_:context:)(void *a1)
{
  uint64_t v1;

  return objc_msgSend(a1, "setHorizontalAlignment:", *(_QWORD *)(v1 + 8));
}

uint64_t sub_1A7B84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1A7D08();
  return static UIViewRepresentable._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_1A7BD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1A7D08();
  return static UIViewRepresentable._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

void sub_1A7C24(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1A7D08();
  UIViewRepresentable.body.getter(a1, v2);
  __break(1u);
}

_QWORD *initializeBufferWithCopyOfBuffer for SharedWithYouView(_QWORD *a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  id v5;

  v3 = *(void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v4;
  v5 = v3;
  return a1;
}

uint64_t assignWithCopy for SharedWithYouView(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  return a1;
}

uint64_t assignWithTake for SharedWithYouView(uint64_t a1, _QWORD *a2)
{
  void *v4;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *a2;

  *(_QWORD *)(a1 + 8) = a2[1];
  return a1;
}

ValueMetadata *type metadata accessor for SharedWithYouView()
{
  return &type metadata for SharedWithYouView;
}

unint64_t sub_1A7D08()
{
  unint64_t result;

  result = qword_26ADB8;
  if (!qword_26ADB8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for SharedWithYouView, &type metadata for SharedWithYouView);
    atomic_store(result, (unint64_t *)&qword_26ADB8);
  }
  return result;
}

uint64_t ToolbarActionButtonMenuItem.init(title:isEnabled:isExplicit:action:subtitle:systemName:assetInfo:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, char a3@<W2>, __int128 *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;

  v17 = type metadata accessor for ProfileRestrictions(0);
  v18 = sub_6FD0((unint64_t *)&qword_26AF00, type metadata accessor for ProfileRestrictions, (uint64_t)&protocol conformance descriptor for ProfileRestrictions);
  *(_QWORD *)a9 = EnvironmentObject.init()(v17, v18);
  *(_QWORD *)(a9 + 8) = v19;
  *(_QWORD *)(a9 + 16) = swift_getKeyPath(&unk_1F67B0);
  *(_BYTE *)(a9 + 56) = 0;
  v20 = (int *)type metadata accessor for ToolbarActionButtonMenuItem(0);
  v21 = (_QWORD *)(a9 + v20[6]);
  *v21 = swift_getKeyPath(&unk_1F67E0);
  v22 = sub_5440(&qword_25FAE0);
  swift_storeEnumTagMultiPayload(v21, v22, 0);
  v23 = a9 + v20[7];
  v24 = type metadata accessor for LocalizerRequest(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 32))(v23, a1, v24);
  *(_BYTE *)(a9 + v20[8]) = a2;
  *(_BYTE *)(a9 + v20[9]) = a3;
  sub_AC68(a4, a9 + v20[10]);
  sub_167A4(a5, a9 + v20[11], &qword_25E0C8);
  v25 = (_QWORD *)(a9 + v20[12]);
  *v25 = a6;
  v25[1] = a7;
  return sub_167A4(a8, a9 + v20[13], &qword_25F910);
}

uint64_t type metadata accessor for ToolbarActionButtonMenuItem(uint64_t a1)
{
  uint64_t result;

  result = qword_26AE38;
  if (!qword_26AE38)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ToolbarActionButtonMenuItem);
  return result;
}

uint64_t ToolbarActionButtonMenuItem.title.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ToolbarActionButtonMenuItem(0) + 28);
  v4 = type metadata accessor for LocalizerRequest(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t ToolbarActionButtonMenuItem.isEnabled.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for ToolbarActionButtonMenuItem(0) + 32));
}

uint64_t ToolbarActionButtonMenuItem.isExplicit.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for ToolbarActionButtonMenuItem(0) + 36));
}

uint64_t ToolbarActionButtonMenuItem.action.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for ToolbarActionButtonMenuItem(0);
  return sub_BD00(v1 + *(int *)(v3 + 40), a1);
}

uint64_t ToolbarActionButtonMenuItem.subtitle.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for ToolbarActionButtonMenuItem(0);
  return sub_B3D0(v1 + *(int *)(v3 + 44), a1, &qword_25E0C8);
}

uint64_t ToolbarActionButtonMenuItem.systemName.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for ToolbarActionButtonMenuItem(0) + 48));
  v2 = *v1;
  swift_bridgeObjectRetain(v1[1]);
  return v2;
}

uint64_t ToolbarActionButtonMenuItem.assetInfo.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for ToolbarActionButtonMenuItem(0);
  return sub_B3D0(v1 + *(int *)(v3 + 52), a1, &qword_25F910);
}

uint64_t ToolbarActionButtonMenuItem.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t KeyPath;
  uint64_t v22;
  uint64_t *v23;
  _BYTE v25[16];
  uint64_t v26;

  v3 = type metadata accessor for ToolbarActionButtonMenuItem(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  __chkstk_darwin(v3);
  v6 = &v25[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = sub_5440(qword_25E3E8);
  __chkstk_darwin(v7);
  v9 = &v25[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = sub_5440(&qword_26ADC0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = &v25[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v14 = type metadata accessor for ButtonRole(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v9, 1, 1, v14);
  sub_1E428(v1, (uint64_t)v6, type metadata accessor for ToolbarActionButtonMenuItem);
  v15 = *(unsigned __int8 *)(v4 + 80);
  v16 = (v15 + 16) & ~v15;
  v17 = swift_allocObject(&unk_259550, v16 + v5, v15 | 7);
  sub_21C88((uint64_t)v6, v17 + v16, type metadata accessor for ToolbarActionButtonMenuItem);
  v26 = v1;
  v18 = sub_5440(&qword_26ADC8);
  v19 = sub_7FD8(&qword_26ADD0, &qword_26ADC8, (uint64_t)&protocol conformance descriptor for TupleView<A>);
  Button.init(role:action:label:)(v9, sub_1A83BC, v17, sub_1A87B4, v25, v18, v19);
  v20 = sub_1A8D14();
  KeyPath = swift_getKeyPath(&unk_1F6810);
  v22 = swift_allocObject(&unk_259578, 17, 7);
  *(_BYTE *)(v22 + 16) = v20 & 1;
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v11 + 16))(a1, v13, v10);
  v23 = (uint64_t *)(a1 + *(int *)(sub_5440(&qword_26ADD8) + 36));
  *v23 = KeyPath;
  v23[1] = (uint64_t)sub_3D3A0;
  v23[2] = v22;
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v11 + 8))(v13, v10);
}

uint64_t sub_1A82B0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v11[3];
  uint64_t v12;
  uint64_t v13;

  v2 = type metadata accessor for OpaqueMetricsFieldsContext(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v11[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_32138((uint64_t)v11);
  v6 = v12;
  if (!v12)
    return sub_B414((uint64_t)v11, &qword_25FAF0);
  v7 = v13;
  sub_5480(v11, v12);
  v8 = a1 + *(int *)(type metadata accessor for ToolbarActionButtonMenuItem(0) + 40);
  sub_3210C((uint64_t)v5);
  PerformAction.callAsFunction(_:withMetrics:)(v8, v5, v6, v7);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return _s7BooksUI13AnyPagedFrameVwxx_0(v11);
}

uint64_t sub_1A83C0@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  void (*v39)(char *, char *, uint64_t);
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  void (*v44)(char *, uint64_t);
  char *v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;

  v55 = a2;
  v3 = type metadata accessor for LocalizedText(0);
  v53 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v48 = (char *)&v46 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_5440(&qword_25E0C8);
  __chkstk_darwin(v5);
  v7 = (char *)&v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for LocalizerRequest(0);
  v49 = *(_QWORD *)(v8 - 8);
  v50 = v8;
  v9 = __chkstk_darwin(v8);
  v47 = (char *)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v46 = (char *)&v46 - v11;
  v12 = sub_5440(&qword_261D00);
  v13 = __chkstk_darwin(v12);
  v52 = (uint64_t)&v46 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v16 = (char *)&v46 - v15;
  v17 = sub_5440(&qword_26AEA0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = __chkstk_darwin(v17);
  v51 = (char *)&v46 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __chkstk_darwin(v19);
  v23 = (char *)&v46 - v22;
  __chkstk_darwin(v21);
  v25 = (char *)&v46 - v24;
  v57 = a1;
  v56 = a1;
  sub_5440(&qword_26AEA8);
  sub_6FD0((unint64_t *)&qword_25FEA8, (uint64_t (*)(uint64_t))&type metadata accessor for LocalizedText, (uint64_t)&protocol conformance descriptor for LocalizedText);
  sub_1AA334();
  v54 = v3;
  v26 = v49;
  Label.init(title:icon:)(sub_1AA324);
  v27 = v23;
  v28 = v50;
  (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v25, v27, v17);
  v29 = type metadata accessor for ToolbarActionButtonMenuItem(0);
  sub_B3D0(a1 + *(int *)(v29 + 44), (uint64_t)v7, &qword_25E0C8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v7, 1, v28) == 1)
  {
    sub_B414((uint64_t)v7, &qword_25E0C8);
    v30 = 1;
    v32 = v53;
    v31 = v54;
  }
  else
  {
    v33 = v46;
    (*(void (**)(char *, char *, uint64_t))(v26 + 32))(v46, v7, v28);
    v34 = v47;
    (*(void (**)(char *, char *, uint64_t))(v26 + 16))(v47, v33, v28);
    v35 = v48;
    LocalizedText.init(_:)(v34);
    (*(void (**)(char *, uint64_t))(v26 + 8))(v33, v28);
    v36 = v53;
    v37 = v35;
    v38 = v54;
    (*(void (**)(char *, char *, uint64_t))(v53 + 32))(v16, v37, v54);
    v30 = 0;
    v31 = v38;
    v32 = v36;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v32 + 56))(v16, v30, 1, v31);
  v39 = *(void (**)(char *, char *, uint64_t))(v18 + 16);
  v40 = v51;
  v39(v51, v25, v17);
  v41 = v52;
  sub_B3D0((uint64_t)v16, v52, &qword_261D00);
  v42 = v55;
  v39(v55, v40, v17);
  v43 = sub_5440(&qword_26AED0);
  sub_B3D0(v41, (uint64_t)&v42[*(int *)(v43 + 48)], &qword_261D00);
  sub_B414((uint64_t)v16, &qword_261D00);
  v44 = *(void (**)(char *, uint64_t))(v18 + 8);
  v44(v25, v17);
  sub_B414(v41, &qword_261D00);
  return ((uint64_t (*)(char *, uint64_t))v44)(v40, v17);
}

uint64_t sub_1A87B4@<X0>(char *a1@<X8>)
{
  uint64_t v1;

  return sub_1A83C0(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_1A87BC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v8;

  v2 = type metadata accessor for LocalizerRequest(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for ToolbarActionButtonMenuItem(0);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, a1 + *(int *)(v6 + 28), v2);
  return LocalizedText.init(_:)(v5);
}

uint64_t sub_1A8854@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  char v36;
  void (*v37)(char *, uint64_t);
  double v38;
  uint64_t KeyPath;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  __int128 v61;
  uint64_t v62;
  _QWORD v63[3];
  uint64_t v64;
  uint64_t v65;

  v60 = a2;
  v3 = sub_5440(&qword_26AEA8);
  __chkstk_darwin(v3);
  v5 = (char *)&v52 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = type metadata accessor for FlatCoverView(0);
  v6 = __chkstk_darwin(v59);
  v8 = (uint64_t *)((char *)&v52 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v6);
  v10 = (char *)&v52 - v9;
  v11 = type metadata accessor for ContentKind(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v52 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v17 = (char *)&v52 - v16;
  v18 = sub_5440(&qword_26AED8);
  __chkstk_darwin(v18);
  v20 = (char **)((char *)&v52 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  v21 = type metadata accessor for ToolbarActionButtonMenuItem(0);
  v22 = a1;
  v23 = (uint64_t *)(a1 + *(int *)(v21 + 48));
  v24 = v23[1];
  if (v24)
  {
    v25 = *v23;
    swift_bridgeObjectRetain(v23[1]);
    *v20 = Image.init(systemName:)(v25, v24);
    swift_storeEnumTagMultiPayload(v20, v18, 0);
    v26 = sub_6FD0(&qword_26AEC8, type metadata accessor for FlatCoverView, (uint64_t)&protocol conformance descriptor for FlatCoverView);
    v27 = v60;
    _ConditionalContent<>.init(storage:)(v20, &type metadata for Image, v59, &protocol witness table for Image, v26);
    v28 = sub_5440(&qword_26AEC0);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v27, 0, 1, v28);
  }
  else
  {
    v52 = v17;
    v53 = v15;
    v54 = v11;
    v55 = v18;
    v56 = v8;
    v57 = v10;
    v58 = v5;
    v30 = (int *)v59;
    sub_B3D0(v22 + *(int *)(v21 + 52), (uint64_t)&v61, &qword_25F910);
    if (v62)
    {
      sub_AC68(&v61, (uint64_t)v63);
      v31 = v64;
      v32 = v65;
      sub_5480(v63, v64);
      v33 = v52;
      dispatch thunk of AssetInfo.contentKind.getter(v31, v32);
      v35 = v53;
      v34 = v54;
      (*(void (**)(char *, _QWORD, uint64_t))(v12 + 104))(v53, enum case for ContentKind.audiobook(_:), v54);
      v36 = static ContentKind.== infix(_:_:)(v33, v35);
      v37 = *(void (**)(char *, uint64_t))(v12 + 8);
      v37(v35, v34);
      v37(v33, v34);
      if ((v36 & 1) != 0)
        v38 = 26.0;
      else
        v38 = 40.0;
      sub_BD00((uint64_t)v63, (uint64_t)&v61);
      KeyPath = swift_getKeyPath(&unk_1F69B0);
      v40 = (uint64_t)v56;
      *v56 = KeyPath;
      *(_BYTE *)(v40 + 40) = 0;
      *(_QWORD *)(v40 + 48) = swift_getKeyPath(&unk_1F69D8);
      *(_BYTE *)(v40 + 56) = 0;
      v41 = type metadata accessor for ProfileRestrictions(0);
      v42 = sub_6FD0((unint64_t *)&qword_26AF00, type metadata accessor for ProfileRestrictions, (uint64_t)&protocol conformance descriptor for ProfileRestrictions);
      *(_QWORD *)(v40 + 64) = EnvironmentObject.init()(v41, v42);
      *(_QWORD *)(v40 + 72) = v43;
      v44 = (_QWORD *)(v40 + v30[7]);
      *v44 = swift_getKeyPath(&unk_1F6A08);
      v45 = sub_5440(&qword_25F1E8);
      swift_storeEnumTagMultiPayload(v44, v45, 0);
      sub_AC68(&v61, v40 + v30[8]);
      v46 = v40 + v30[9];
      *(_QWORD *)v46 = 0x403A000000000000;
      *(double *)(v46 + 8) = v38;
      *(_QWORD *)(v40 + v30[10]) = 0x4004000000000000;
      v47 = (uint64_t)v57;
      sub_21C88(v40, (uint64_t)v57, type metadata accessor for FlatCoverView);
      sub_1E428(v47, (uint64_t)v20, type metadata accessor for FlatCoverView);
      swift_storeEnumTagMultiPayload(v20, v55, 1);
      v48 = sub_6FD0(&qword_26AEC8, type metadata accessor for FlatCoverView, (uint64_t)&protocol conformance descriptor for FlatCoverView);
      v49 = (uint64_t)v58;
      _ConditionalContent<>.init(storage:)(v20, &type metadata for Image, v30, &protocol witness table for Image, v48);
      sub_224DC(v47, type metadata accessor for FlatCoverView);
      v50 = sub_5440(&qword_26AEC0);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 56))(v49, 0, 1, v50);
      sub_167A4(v49, v60, &qword_26AEA8);
      return _s7BooksUI13AnyPagedFrameVwxx_0(v63);
    }
    else
    {
      sub_B414((uint64_t)&v61, &qword_25F910);
      v51 = sub_5440(&qword_26AEC0);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v51 - 8) + 56))(v60, 1, 1, v51);
    }
  }
}

uint64_t sub_1A8D14()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void **v4;
  int v5;
  void *v6;
  uint64_t KeyPath;
  uint64_t v8;
  id v9;
  char v10;
  uint64_t result;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = type metadata accessor for ToolbarActionButtonMenuItem(0);
  v2 = __chkstk_darwin(v1);
  v4 = (void **)((char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (*(_BYTE *)(v0 + *(int *)(v2 + 32)) != 1)
  {
    v10 = 1;
    return v10 & 1;
  }
  v5 = *(unsigned __int8 *)(v0 + *(int *)(v2 + 36));
  sub_1E428(v0, (uint64_t)v4, type metadata accessor for ToolbarActionButtonMenuItem);
  if (v5 != 1)
  {
    v10 = 0;
    goto LABEL_7;
  }
  v6 = *v4;
  if (*v4)
  {
    KeyPath = swift_getKeyPath(&unk_1F6968);
    v8 = swift_getKeyPath(&unk_1F6990);
    v9 = v6;
    static Published.subscript.getter(&v16, v9, KeyPath, v8);

    swift_release(KeyPath);
    swift_release(v8);
    v10 = v16 ^ 1;
LABEL_7:
    sub_224DC((uint64_t)v4, type metadata accessor for ToolbarActionButtonMenuItem);
    return v10 & 1;
  }
  v12 = v4[1];
  v13 = type metadata accessor for ProfileRestrictions(0);
  v14 = sub_6FD0((unint64_t *)&qword_26AF00, type metadata accessor for ProfileRestrictions, (uint64_t)&protocol conformance descriptor for ProfileRestrictions);
  result = EnvironmentObject.error()(0, v12, v13, v14);
  __break(1u);
  return result;
}

uint64_t sub_1A8E68@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t KeyPath;
  uint64_t v22;
  uint64_t *v23;
  _BYTE v25[16];
  uint64_t v26;

  v4 = *(_QWORD *)(a1 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  __chkstk_darwin(a1);
  v6 = &v25[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = sub_5440(qword_25E3E8);
  __chkstk_darwin(v7);
  v9 = &v25[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = sub_5440(&qword_26ADC0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = &v25[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v14 = type metadata accessor for ButtonRole(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v9, 1, 1, v14);
  sub_1E428(v2, (uint64_t)v6, type metadata accessor for ToolbarActionButtonMenuItem);
  v15 = *(unsigned __int8 *)(v4 + 80);
  v16 = (v15 + 16) & ~v15;
  v17 = swift_allocObject(&unk_2595A0, v16 + v5, v15 | 7);
  sub_21C88((uint64_t)v6, v17 + v16, type metadata accessor for ToolbarActionButtonMenuItem);
  v26 = v2;
  v18 = sub_5440(&qword_26ADC8);
  v19 = sub_7FD8(&qword_26ADD0, &qword_26ADC8, (uint64_t)&protocol conformance descriptor for TupleView<A>);
  Button.init(role:action:label:)(v9, sub_1A83BC, v17, sub_1AA430, v25, v18, v19);
  v20 = sub_1A8D14();
  KeyPath = swift_getKeyPath(&unk_1F6810);
  v22 = swift_allocObject(&unk_2595C8, 17, 7);
  *(_BYTE *)(v22 + 16) = v20 & 1;
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v11 + 16))(a2, v13, v10);
  v23 = (uint64_t *)(a2 + *(int *)(sub_5440(&qword_26ADD8) + 36));
  *v23 = KeyPath;
  v23[1] = (uint64_t)sub_1AA434;
  v23[2] = v22;
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v11 + 8))(v13, v10);
}

uint64_t sub_1A90A0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1A90B0(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &opaque type descriptor for <<opaque return type of ToolbarActionButtonMenuItem.body>>, 1);
}

char *initializeBufferWithCopyOfBuffer for ToolbarActionButtonMenuItem(char *a1, char **a2, int *a3)
{
  int v4;
  char *v5;
  char **v8;
  char v9;
  char *v10;
  _OWORD *v11;
  char *v12;
  char *v13;
  char *v14;
  __int128 v15;
  uint64_t v16;
  char *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  _QWORD *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;

  v4 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v5 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = &v5[(v4 + 16) & ~(unint64_t)v4];
    swift_retain(v5);
  }
  else
  {
    *((_QWORD *)a1 + 1) = a2[1];
    v8 = a2 + 2;
    v9 = *((_BYTE *)a2 + 56);
    v10 = v5;
    if ((v9 & 1) != 0)
    {
      v11 = a1 + 16;
      v12 = a2[5];
      if (v12)
      {
        v13 = a2[6];
        *((_QWORD *)a1 + 5) = v12;
        *((_QWORD *)a1 + 6) = v13;
        (**((void (***)(_OWORD *, char **))v12 - 1))(v11, v8);
      }
      else
      {
        v15 = *((_OWORD *)v8 + 1);
        *v11 = *(_OWORD *)v8;
        *((_OWORD *)a1 + 2) = v15;
        *((_QWORD *)a1 + 6) = v8[4];
      }
      a1[56] = 1;
    }
    else
    {
      v14 = *v8;
      *((_QWORD *)a1 + 2) = *v8;
      a1[56] = 0;
      swift_retain(v14);
    }
    v16 = a3[6];
    v17 = &a1[v16];
    v18 = (uint64_t *)((char *)a2 + v16);
    v19 = sub_5440(&qword_25FAE0);
    if (swift_getEnumCaseMultiPayload(v18, v19) == 1)
    {
      v20 = type metadata accessor for OpaqueMetricsFieldsContext(0);
      (*(void (**)(char *, uint64_t *, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v17, v18, v20);
      v21 = 1;
    }
    else
    {
      v22 = *v18;
      *(_QWORD *)v17 = *v18;
      swift_retain(v22);
      v21 = 0;
    }
    swift_storeEnumTagMultiPayload(v17, v19, v21);
    v23 = a3[7];
    v24 = &a1[v23];
    v25 = (uint64_t)a2 + v23;
    v26 = type metadata accessor for LocalizerRequest(0);
    v27 = *(_QWORD *)(v26 - 8);
    v28 = *(void (**)(char *, uint64_t, uint64_t))(v27 + 16);
    v28(v24, v25, v26);
    v29 = a3[9];
    a1[a3[8]] = *((_BYTE *)a2 + a3[8]);
    a1[v29] = *((_BYTE *)a2 + v29);
    v30 = a3[10];
    v31 = *(_OWORD *)((char *)a2 + v30 + 24);
    *(_OWORD *)&a1[v30 + 24] = v31;
    (**(void (***)(void))(v31 - 8))();
    v32 = a3[11];
    v33 = &a1[v32];
    v34 = (char *)a2 + v32;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))((char *)a2 + v32, 1, v26))
    {
      v35 = sub_5440(&qword_25E0C8);
      memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
    }
    else
    {
      v28(v33, (uint64_t)v34, v26);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v33, 0, 1, v26);
    }
    v36 = a3[12];
    v37 = a3[13];
    v38 = &a1[v36];
    v39 = (char **)((char *)a2 + v36);
    v40 = v39[1];
    *(_QWORD *)v38 = *v39;
    *((_QWORD *)v38 + 1) = v40;
    v41 = &a1[v37];
    v42 = (uint64_t)a2 + v37;
    v43 = *(_QWORD *)(v42 + 24);
    swift_bridgeObjectRetain(v40);
    if (v43)
    {
      v44 = *(_QWORD *)(v42 + 32);
      *((_QWORD *)v41 + 3) = v43;
      *((_QWORD *)v41 + 4) = v44;
      (**(void (***)(char *, uint64_t, uint64_t))(v43 - 8))(v41, v42, v43);
    }
    else
    {
      v45 = *(_OWORD *)(v42 + 16);
      *(_OWORD *)v41 = *(_OWORD *)v42;
      *((_OWORD *)v41 + 1) = v45;
      *((_QWORD *)v41 + 4) = *(_QWORD *)(v42 + 32);
    }
  }
  return a1;
}

_QWORD *destroy for ToolbarActionButtonMenuItem(uint64_t a1, int *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  _QWORD *result;

  v4 = (_QWORD *)(a1 + 16);
  if ((*(_BYTE *)(a1 + 56) & 1) != 0)
  {
    if (*(_QWORD *)(a1 + 40))
      _s7BooksUI13AnyPagedFrameVwxx_0(v4);
  }
  else
  {
    swift_release(*v4);
  }
  v5 = (_QWORD *)(a1 + a2[6]);
  v6 = sub_5440(&qword_25FAE0);
  if (swift_getEnumCaseMultiPayload(v5, v6) == 1)
  {
    v7 = type metadata accessor for OpaqueMetricsFieldsContext(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v5, v7);
  }
  else
  {
    swift_release(*v5);
  }
  v8 = a1 + a2[7];
  v9 = type metadata accessor for LocalizerRequest(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
  v11(v8, v9);
  _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)(a1 + a2[10]));
  v12 = a1 + a2[11];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v12, 1, v9))
    v11(v12, v9);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[12] + 8));
  result = (_QWORD *)(a1 + a2[13]);
  if (result[3])
    return (_QWORD *)_s7BooksUI13AnyPagedFrameVwxx_0(result);
  return result;
}

uint64_t initializeWithCopy for ToolbarActionButtonMenuItem(uint64_t a1, uint64_t a2, int *a3)
{
  void *v6;
  uint64_t v7;
  uint64_t *v8;
  char v9;
  id v10;
  _OWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  const void *v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(void *, const void *, uint64_t);
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  void *v33;
  const void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;

  v6 = *(void **)a2;
  v7 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v7;
  v8 = (uint64_t *)(a2 + 16);
  v9 = *(_BYTE *)(a2 + 56);
  v10 = v6;
  if ((v9 & 1) != 0)
  {
    v11 = (_OWORD *)(a1 + 16);
    v12 = *(_QWORD *)(a2 + 40);
    if (v12)
    {
      v13 = *(_QWORD *)(a2 + 48);
      *(_QWORD *)(a1 + 40) = v12;
      *(_QWORD *)(a1 + 48) = v13;
      (**(void (***)(_OWORD *, uint64_t *))(v12 - 8))(v11, v8);
    }
    else
    {
      v15 = *((_OWORD *)v8 + 1);
      *v11 = *(_OWORD *)v8;
      *(_OWORD *)(a1 + 32) = v15;
      *(_QWORD *)(a1 + 48) = v8[4];
    }
    *(_BYTE *)(a1 + 56) = 1;
  }
  else
  {
    v14 = *v8;
    *(_QWORD *)(a1 + 16) = *v8;
    *(_BYTE *)(a1 + 56) = 0;
    swift_retain(v14);
  }
  v16 = a3[6];
  v17 = (uint64_t *)(a1 + v16);
  v18 = (uint64_t *)(a2 + v16);
  v19 = sub_5440(&qword_25FAE0);
  if (swift_getEnumCaseMultiPayload(v18, v19) == 1)
  {
    v20 = type metadata accessor for OpaqueMetricsFieldsContext(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v17, v18, v20);
    v21 = 1;
  }
  else
  {
    v22 = *v18;
    *v17 = *v18;
    swift_retain(v22);
    v21 = 0;
  }
  swift_storeEnumTagMultiPayload(v17, v19, v21);
  v23 = a3[7];
  v24 = (void *)(a1 + v23);
  v25 = (const void *)(a2 + v23);
  v26 = type metadata accessor for LocalizerRequest(0);
  v27 = *(_QWORD *)(v26 - 8);
  v28 = *(void (**)(void *, const void *, uint64_t))(v27 + 16);
  v28(v24, v25, v26);
  v29 = a3[9];
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  *(_BYTE *)(a1 + v29) = *(_BYTE *)(a2 + v29);
  v30 = a3[10];
  v31 = *(_OWORD *)(a2 + v30 + 24);
  *(_OWORD *)(a1 + v30 + 24) = v31;
  (**(void (***)(void))(v31 - 8))();
  v32 = a3[11];
  v33 = (void *)(a1 + v32);
  v34 = (const void *)(a2 + v32);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v27 + 48))(a2 + v32, 1, v26))
  {
    v35 = sub_5440(&qword_25E0C8);
    memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
  }
  else
  {
    v28(v33, v34, v26);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v33, 0, 1, v26);
  }
  v36 = a3[12];
  v37 = a3[13];
  v38 = (_QWORD *)(a1 + v36);
  v39 = (_QWORD *)(a2 + v36);
  v40 = v39[1];
  *v38 = *v39;
  v38[1] = v40;
  v41 = a1 + v37;
  v42 = a2 + v37;
  v43 = *(_QWORD *)(v42 + 24);
  swift_bridgeObjectRetain(v40);
  if (v43)
  {
    v44 = *(_QWORD *)(v42 + 32);
    *(_QWORD *)(v41 + 24) = v43;
    *(_QWORD *)(v41 + 32) = v44;
    (**(void (***)(uint64_t, uint64_t, uint64_t))(v43 - 8))(v41, v42, v43);
  }
  else
  {
    v45 = *(_OWORD *)(v42 + 16);
    *(_OWORD *)v41 = *(_OWORD *)v42;
    *(_OWORD *)(v41 + 16) = v45;
    *(_QWORD *)(v41 + 32) = *(_QWORD *)(v42 + 32);
  }
  return a1;
}

uint64_t assignWithCopy for ToolbarActionButtonMenuItem(uint64_t a1, uint64_t a2, int *a3)
{
  void *v6;
  void *v7;
  id v8;
  __int128 *v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  const void *v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(void *, const void *, uint64_t);
  uint64_t v27;
  void *v28;
  const void *v29;
  uint64_t (*v30)(const void *, uint64_t, uint64_t);
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 *v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;

  v6 = *(void **)a1;
  v7 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v8 = v7;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  if (a1 != a2)
  {
    v9 = (__int128 *)(a2 + 16);
    sub_B414(a1 + 16, &qword_25FAE8);
    if ((*(_BYTE *)(a2 + 56) & 1) != 0)
    {
      v10 = *(_QWORD *)(a2 + 40);
      if (v10)
      {
        *(_QWORD *)(a1 + 40) = v10;
        *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
        (**(void (***)(uint64_t, uint64_t))(v10 - 8))(a1 + 16, a2 + 16);
      }
      else
      {
        v12 = *v9;
        v13 = *(_OWORD *)(a2 + 32);
        *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
        *(_OWORD *)(a1 + 16) = v12;
        *(_OWORD *)(a1 + 32) = v13;
      }
      *(_BYTE *)(a1 + 56) = 1;
    }
    else
    {
      v11 = *(_QWORD *)v9;
      *(_QWORD *)(a1 + 16) = *(_QWORD *)v9;
      *(_BYTE *)(a1 + 56) = 0;
      swift_retain(v11);
    }
    v14 = a3[6];
    v15 = (uint64_t *)(a1 + v14);
    v16 = (uint64_t *)(a2 + v14);
    sub_B414(a1 + v14, &qword_25FAE0);
    v17 = sub_5440(&qword_25FAE0);
    if (swift_getEnumCaseMultiPayload(v16, v17) == 1)
    {
      v18 = type metadata accessor for OpaqueMetricsFieldsContext(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v15, v16, v18);
      v19 = 1;
    }
    else
    {
      v20 = *v16;
      *v15 = *v16;
      swift_retain(v20);
      v19 = 0;
    }
    swift_storeEnumTagMultiPayload(v15, v17, v19);
  }
  v21 = a3[7];
  v22 = (void *)(a1 + v21);
  v23 = (const void *)(a2 + v21);
  v24 = type metadata accessor for LocalizerRequest(0);
  v25 = *(_QWORD *)(v24 - 8);
  v26 = *(void (**)(void *, const void *, uint64_t))(v25 + 24);
  v26(v22, v23, v24);
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  sub_142F8((_QWORD *)(a1 + a3[10]), (_QWORD *)(a2 + a3[10]));
  v27 = a3[11];
  v28 = (void *)(a1 + v27);
  v29 = (const void *)(a2 + v27);
  v30 = *(uint64_t (**)(const void *, uint64_t, uint64_t))(v25 + 48);
  v31 = v30((const void *)(a1 + v27), 1, v24);
  v32 = v30(v29, 1, v24);
  if (v31)
  {
    if (!v32)
    {
      (*(void (**)(void *, const void *, uint64_t))(v25 + 16))(v28, v29, v24);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v28, 0, 1, v24);
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  if (v32)
  {
    (*(void (**)(void *, uint64_t))(v25 + 8))(v28, v24);
LABEL_17:
    v33 = sub_5440(&qword_25E0C8);
    memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
    goto LABEL_18;
  }
  v26(v28, v29, v24);
LABEL_18:
  v34 = a3[12];
  v35 = (_QWORD *)(a1 + v34);
  v36 = (_QWORD *)(a2 + v34);
  *v35 = *v36;
  v37 = v36[1];
  v38 = v35[1];
  v35[1] = v37;
  swift_bridgeObjectRetain(v37);
  swift_bridgeObjectRelease(v38);
  v39 = a3[13];
  v40 = a1 + v39;
  v41 = (__int128 *)(a2 + v39);
  v42 = *((_QWORD *)v41 + 3);
  if (!*(_QWORD *)(a1 + v39 + 24))
  {
    if (v42)
    {
      *(_QWORD *)(v40 + 24) = v42;
      *(_QWORD *)(v40 + 32) = *((_QWORD *)v41 + 4);
      (**(void (***)(uint64_t, __int128 *))(v42 - 8))(v40, v41);
      return a1;
    }
LABEL_24:
    v43 = *v41;
    v44 = v41[1];
    *(_QWORD *)(v40 + 32) = *((_QWORD *)v41 + 4);
    *(_OWORD *)v40 = v43;
    *(_OWORD *)(v40 + 16) = v44;
    return a1;
  }
  if (!v42)
  {
    _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)v40);
    goto LABEL_24;
  }
  sub_142F8((_QWORD *)v40, v41);
  return a1;
}

_OWORD *initializeWithTake for ToolbarActionButtonMenuItem(_OWORD *a1, _OWORD *a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, char *, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  __int128 v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  __int128 v30;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  a1[2] = a2[2];
  *(_OWORD *)((char *)a1 + 41) = *(_OWORD *)((char *)a2 + 41);
  v7 = a3[6];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = sub_5440(&qword_25FAE0);
  if (swift_getEnumCaseMultiPayload(v9, v10) == 1)
  {
    v11 = type metadata accessor for OpaqueMetricsFieldsContext(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v8, v9, v11);
    swift_storeEnumTagMultiPayload(v8, v10, 1);
  }
  else
  {
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  v12 = a3[7];
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = type metadata accessor for LocalizerRequest(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(void (**)(char *, char *, uint64_t))(v16 + 32);
  v17(v13, v14, v15);
  v18 = a3[9];
  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  *((_BYTE *)a1 + v18) = *((_BYTE *)a2 + v18);
  v19 = a3[10];
  v20 = a3[11];
  v21 = (char *)a1 + v19;
  v22 = (char *)a2 + v19;
  v23 = *((_OWORD *)v22 + 1);
  *(_OWORD *)v21 = *(_OWORD *)v22;
  *((_OWORD *)v21 + 1) = v23;
  *((_QWORD *)v21 + 4) = *((_QWORD *)v22 + 4);
  v24 = (char *)a1 + v20;
  v25 = (char *)a2 + v20;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))((char *)a2 + v20, 1, v15))
  {
    v26 = sub_5440(&qword_25E0C8);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
  }
  else
  {
    v17(v24, v25, v15);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v24, 0, 1, v15);
  }
  v27 = a3[13];
  *(_OWORD *)((char *)a1 + a3[12]) = *(_OWORD *)((char *)a2 + a3[12]);
  v28 = (char *)a1 + v27;
  v29 = (char *)a2 + v27;
  v30 = *((_OWORD *)v29 + 1);
  *(_OWORD *)v28 = *(_OWORD *)v29;
  *((_OWORD *)v28 + 1) = v30;
  *((_QWORD *)v28 + 4) = *((_QWORD *)v29 + 4);
  return a1;
}

uint64_t assignWithTake for ToolbarActionButtonMenuItem(uint64_t a1, uint64_t a2, int *a3)
{
  void *v6;
  __int128 v7;
  uint64_t v8;
  void *v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const void *v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(void *, const void *, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  void *v25;
  const void *v26;
  uint64_t (*v27)(const void *, uint64_t, uint64_t);
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;

  v6 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  if (a1 != a2)
  {
    sub_B414(a1 + 16, &qword_25FAE8);
    v7 = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(a1 + 32) = v7;
    *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
    v8 = a3[6];
    v9 = (void *)(a1 + v8);
    v10 = (const void *)(a2 + v8);
    sub_B414(a1 + v8, &qword_25FAE0);
    v11 = sub_5440(&qword_25FAE0);
    if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
    {
      v12 = type metadata accessor for OpaqueMetricsFieldsContext(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v9, v10, v12);
      swift_storeEnumTagMultiPayload(v9, v11, 1);
    }
    else
    {
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    }
  }
  v13 = a3[7];
  v14 = (void *)(a1 + v13);
  v15 = (const void *)(a2 + v13);
  v16 = type metadata accessor for LocalizerRequest(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(void (**)(void *, const void *, uint64_t))(v17 + 40);
  v18(v14, v15, v16);
  v19 = a3[9];
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  *(_BYTE *)(a1 + v19) = *(_BYTE *)(a2 + v19);
  v20 = a3[10];
  v21 = a1 + v20;
  v22 = a2 + v20;
  _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)(a1 + v20));
  v23 = *(_OWORD *)(v22 + 16);
  *(_OWORD *)v21 = *(_OWORD *)v22;
  *(_OWORD *)(v21 + 16) = v23;
  *(_QWORD *)(v21 + 32) = *(_QWORD *)(v22 + 32);
  v24 = a3[11];
  v25 = (void *)(a1 + v24);
  v26 = (const void *)(a2 + v24);
  v27 = *(uint64_t (**)(const void *, uint64_t, uint64_t))(v17 + 48);
  v28 = v27((const void *)(a1 + v24), 1, v16);
  v29 = v27(v26, 1, v16);
  if (v28)
  {
    if (!v29)
    {
      (*(void (**)(void *, const void *, uint64_t))(v17 + 32))(v25, v26, v16);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v25, 0, 1, v16);
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  if (v29)
  {
    (*(void (**)(void *, uint64_t))(v17 + 8))(v25, v16);
LABEL_10:
    v30 = sub_5440(&qword_25E0C8);
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    goto LABEL_11;
  }
  v18(v25, v26, v16);
LABEL_11:
  v31 = a3[12];
  v32 = (_QWORD *)(a1 + v31);
  v33 = (uint64_t *)(a2 + v31);
  v35 = *v33;
  v34 = v33[1];
  v36 = v32[1];
  *v32 = v35;
  v32[1] = v34;
  swift_bridgeObjectRelease(v36);
  v37 = a3[13];
  v38 = a1 + v37;
  if (*(_QWORD *)(a1 + v37 + 24))
    _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)(a1 + v37));
  v39 = *(_OWORD *)(a2 + v37 + 16);
  *(_OWORD *)v38 = *(_OWORD *)(a2 + v37);
  *(_OWORD *)(v38 + 16) = v39;
  *(_QWORD *)(v38 + 32) = *(_QWORD *)(a2 + v37 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for ToolbarActionButtonMenuItem(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1A9E20);
}

uint64_t sub_1A9E20(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v6 = sub_5440(&qword_264F30);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = a3[6];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v10 = type metadata accessor for LocalizerRequest(0);
  v7 = *(_QWORD *)(v10 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v10;
    v9 = a3[7];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v8 = sub_5440(&qword_25E0C8);
    v7 = *(_QWORD *)(v8 - 8);
    v9 = a3[11];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v11 = *(_QWORD *)(a1 + a3[10] + 24);
  if (v11 >= 0xFFFFFFFF)
    LODWORD(v11) = -1;
  return (v11 + 1);
}

uint64_t storeEnumTagSinglePayload for ToolbarActionButtonMenuItem(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1A9F00);
}

uint64_t sub_1A9F00(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  v8 = sub_5440(&qword_264F30);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = a4[6];
  }
  else
  {
    result = type metadata accessor for LocalizerRequest(0);
    v9 = *(_QWORD *)(result - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = result;
      v11 = a4[7];
    }
    else
    {
      if (a3 == 0x7FFFFFFF)
      {
        *(_QWORD *)(a1 + a4[10] + 24) = (a2 - 1);
        return result;
      }
      v10 = sub_5440(&qword_25E0C8);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = a4[11];
    }
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
}

void sub_1A9FD0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[10];

  v8[0] = &unk_1F68F0;
  v8[1] = &unk_1F6908;
  sub_19B38(319, (unint64_t *)&qword_2617F8, (uint64_t (*)(uint64_t))&type metadata accessor for OpaqueMetricsFieldsContext, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  if (v3 <= 0x3F)
  {
    v8[2] = *(_QWORD *)(v2 - 8) + 64;
    v4 = type metadata accessor for LocalizerRequest(319);
    if (v5 <= 0x3F)
    {
      v8[3] = *(_QWORD *)(v4 - 8) + 64;
      v8[4] = &unk_1F6920;
      v8[5] = &unk_1F6920;
      v8[6] = &unk_1F6938;
      sub_19B38(319, (unint64_t *)&qword_261BA0, (uint64_t (*)(uint64_t))&type metadata accessor for LocalizerRequest, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
      if (v7 <= 0x3F)
      {
        v8[7] = *(_QWORD *)(v6 - 8) + 64;
        v8[8] = &unk_1F68F0;
        v8[9] = &unk_1F6950;
        swift_initStructMetadata(a1, 256, 10, v8, a1 + 16);
      }
    }
  }
}

unint64_t sub_1AA0D8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_26AE90;
  if (!qword_26AE90)
  {
    v1 = sub_7EF8(&qword_26ADD8);
    sub_7FD8(&qword_26AE98, &qword_26ADC0, (uint64_t)&protocol conformance descriptor for Button<A>);
    sub_7FD8(&qword_25FE80, &qword_25FE88, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyTransformModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_26AE90);
  }
  return result;
}

uint64_t sub_1AA178()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  _QWORD *v16;

  v1 = (int *)type metadata accessor for ToolbarActionButtonMenuItem(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v0 + v4;

  v7 = (_QWORD *)(v0 + v4 + 16);
  if ((*(_BYTE *)(v0 + v4 + 56) & 1) != 0)
  {
    if (*(_QWORD *)(v6 + 40))
      _s7BooksUI13AnyPagedFrameVwxx_0(v7);
  }
  else
  {
    swift_release(*v7);
  }
  v8 = (_QWORD *)(v6 + v1[6]);
  v9 = sub_5440(&qword_25FAE0);
  if (swift_getEnumCaseMultiPayload(v8, v9) == 1)
  {
    v10 = type metadata accessor for OpaqueMetricsFieldsContext(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v8, v10);
  }
  else
  {
    swift_release(*v8);
  }
  v11 = v6 + v1[7];
  v12 = type metadata accessor for LocalizerRequest(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
  v14(v11, v12);
  _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)(v6 + v1[10]));
  v15 = v6 + v1[11];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v15, 1, v12))
    v14(v15, v12);
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[12] + 8));
  v16 = (_QWORD *)(v6 + v1[13]);
  if (v16[3])
    _s7BooksUI13AnyPagedFrameVwxx_0(v16);
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_1AA2E0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ToolbarActionButtonMenuItem(0) - 8) + 80);
  return sub_1A82B0(v0 + ((v1 + 16) & ~v1));
}

uint64_t sub_1AA30C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1AA324()
{
  uint64_t v0;

  return sub_1A87BC(*(_QWORD *)(v0 + 16));
}

uint64_t sub_1AA32C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1A8854(*(_QWORD *)(v1 + 16), a1);
}

unint64_t sub_1AA334()
{
  unint64_t result;
  uint64_t v1;

  result = qword_26AEB0;
  if (!qword_26AEB0)
  {
    v1 = sub_7EF8(&qword_26AEA8);
    sub_1AA398();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_26AEB0);
  }
  return result;
}

unint64_t sub_1AA398()
{
  unint64_t result;
  uint64_t v1;

  result = qword_26AEB8;
  if (!qword_26AEB8)
  {
    v1 = sub_7EF8(&qword_26AEC0);
    sub_6FD0(&qword_26AEC8, type metadata accessor for FlatCoverView, (uint64_t)&protocol conformance descriptor for FlatCoverView);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_26AEB8);
  }
  return result;
}

uint64_t sub_1AA438()
{
  return sub_1AA5CC((uint64_t)&unk_1F6A30, (uint64_t)&unk_1F6A58);
}

uint64_t sub_1AA454()
{
  return sub_1AA7B8(&OBJC_IVAR____TtC7BooksUI19ProfileRestrictions__isExplicitContentAllowed);
}

uint64_t sub_1AA460@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_1AA4C4(a1, (uint64_t)&unk_1F6A78, (uint64_t)&unk_1F6AA0, a2);
}

uint64_t sub_1AA474(char *a1, void **a2, uint64_t a3, uint64_t a4)
{
  return sub_1AA550(a1, a2, a3, a4, (uint64_t)&unk_1F6A78, (uint64_t)&unk_1F6AA0);
}

uint64_t sub_1AA488()
{
  return sub_1AA5CC((uint64_t)&unk_1F6A78, (uint64_t)&unk_1F6AA0);
}

uint64_t sub_1AA4A4()
{
  return sub_1AA7B8(&OBJC_IVAR____TtC7BooksUI19ProfileRestrictions__isBookStoreAllowed);
}

uint64_t sub_1AA4B0@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_1AA4C4(a1, (uint64_t)&unk_1F6AC0, (uint64_t)&unk_1F6AE8, a2);
}

uint64_t sub_1AA4C4@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, _BYTE *a4@<X8>)
{
  uint64_t v6;
  uint64_t KeyPath;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  v6 = *a1;
  KeyPath = swift_getKeyPath(a2);
  v8 = swift_getKeyPath(a3);
  static Published.subscript.getter(&v10, v6, KeyPath, v8);
  swift_release(KeyPath);
  result = swift_release(v8);
  *a4 = v10;
  return result;
}

uint64_t sub_1AA53C(char *a1, void **a2, uint64_t a3, uint64_t a4)
{
  return sub_1AA550(a1, a2, a3, a4, (uint64_t)&unk_1F6AC0, (uint64_t)&unk_1F6AE8);
}

uint64_t sub_1AA550(char *a1, void **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  char v7;
  void *v8;
  uint64_t KeyPath;
  uint64_t v10;
  char v12;

  v7 = *a1;
  v8 = *a2;
  KeyPath = swift_getKeyPath(a5);
  v10 = swift_getKeyPath(a6);
  v12 = v7;
  return static Published.subscript.setter(&v12, v8, KeyPath, v10);
}

uint64_t sub_1AA5B8()
{
  return sub_1AA5CC((uint64_t)&unk_1F6AC0, (uint64_t)&unk_1F6AE8);
}

uint64_t sub_1AA5CC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v7;

  KeyPath = swift_getKeyPath(a1);
  v5 = swift_getKeyPath(a2);
  static Published.subscript.getter(&v7, v2, KeyPath, v5);
  swift_release(KeyPath);
  swift_release(v5);
  return v7;
}

uint64_t sub_1AA63C(_QWORD *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  _BYTE v6[24];

  swift_beginAccess(*a1 + *a4, v6, 33, 0);
  v4 = sub_5440(&qword_26AEE8);
  Published.projectedValue.getter(v4);
  return swift_endAccess(v6);
}

uint64_t sub_1AA69C(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  _BYTE *v14;
  void (*v15)(_BYTE *, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  _BYTE v20[24];

  v8 = sub_5440(&qword_26AFB8);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = &v20[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v10);
  v14 = &v20[-v13 - 8];
  v15 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v9 + 16);
  v15(&v20[-v13 - 8], a1, v8);
  v16 = *a2;
  v15(v12, (uint64_t)v14, v8);
  swift_beginAccess(v16 + *a5, v20, 33, 0);
  v17 = sub_5440(&qword_26AEE8);
  Published.projectedValue.setter(v12, v17);
  swift_endAccess(v20);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v9 + 8))(v14, v8);
}

uint64_t sub_1AA7AC()
{
  return sub_1AA7B8(&OBJC_IVAR____TtC7BooksUI19ProfileRestrictions__isAccountModificationAllowed);
}

uint64_t sub_1AA7B8(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  _BYTE v4[24];

  swift_beginAccess(v1 + *a1, v4, 33, 0);
  v2 = sub_5440(&qword_26AEE8);
  Published.projectedValue.getter(v2);
  return swift_endAccess(v4);
}

id ProfileRestrictions.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), "init");
}

id ProfileRestrictions.init()()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char *v5;
  char *v6;
  void (*v7)(char *, char *, uint64_t);
  char *v8;
  char *v9;
  objc_class *v10;
  id v11;
  void *v12;
  id v13;
  id v14;
  uint64_t KeyPath;
  uint64_t v16;
  id v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  id v26;
  uint64_t v28;
  objc_super v29;
  char v30;

  v1 = sub_5440(&qword_26AEE8);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v28 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = &v0[OBJC_IVAR____TtC7BooksUI19ProfileRestrictions__isExplicitContentAllowed];
  v30 = 1;
  v6 = v0;
  Published.init(initialValue:)(&v30, &type metadata for Bool);
  v7 = *(void (**)(char *, char *, uint64_t))(v2 + 32);
  v7(v5, v4, v1);
  v8 = &v6[OBJC_IVAR____TtC7BooksUI19ProfileRestrictions__isBookStoreAllowed];
  v30 = 1;
  Published.init(initialValue:)(&v30, &type metadata for Bool);
  v7(v8, v4, v1);
  v9 = &v6[OBJC_IVAR____TtC7BooksUI19ProfileRestrictions__isAccountModificationAllowed];
  v30 = 1;
  Published.init(initialValue:)(&v30, &type metadata for Bool);
  v7(v9, v4, v1);

  v10 = (objc_class *)type metadata accessor for ProfileRestrictions(0);
  v29.receiver = v6;
  v29.super_class = v10;
  v11 = objc_msgSendSuper2(&v29, "init");
  v12 = (void *)objc_opt_self(BURestrictionsProvider);
  v13 = v11;
  v14 = objc_msgSend(v12, "sharedInstance");
  LOBYTE(v9) = objc_msgSend(v14, "isExplicitContentAllowed");
  swift_unknownObjectRelease(v14);
  KeyPath = swift_getKeyPath(&unk_1F6A30);
  v16 = swift_getKeyPath(&unk_1F6A58);
  v30 = (char)v9;
  v17 = v13;
  static Published.subscript.setter(&v30, v17, KeyPath, v16);
  v18 = objc_msgSend(v12, "sharedInstance");
  LOBYTE(v9) = objc_msgSend(v18, "isBookStoreAllowed");
  swift_unknownObjectRelease(v18);
  v19 = swift_getKeyPath(&unk_1F6A78);
  v20 = swift_getKeyPath(&unk_1F6AA0);
  v30 = (char)v9;
  v21 = v17;
  static Published.subscript.setter(&v30, v21, v19, v20);
  v22 = objc_msgSend(v12, "sharedInstance");
  LOBYTE(v9) = objc_msgSend(v22, "isAccountModificationAllowed");
  swift_unknownObjectRelease(v22);
  v23 = swift_getKeyPath(&unk_1F6AC0);
  v24 = swift_getKeyPath(&unk_1F6AE8);
  v30 = (char)v9;
  v25 = v21;
  static Published.subscript.setter(&v30, v25, v23, v24);
  v26 = objc_msgSend(v12, "sharedInstance");
  objc_msgSend(v26, "addObserver:", v25);
  swift_unknownObjectRelease(v26);

  return v25;
}

uint64_t type metadata accessor for ProfileRestrictions(uint64_t a1)
{
  uint64_t result;

  result = qword_26AF90;
  if (!qword_26AF90)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ProfileRestrictions);
  return result;
}

id ProfileRestrictions.__deallocating_deinit()
{
  void *v0;
  id v1;
  objc_super v3;

  v1 = objc_msgSend((id)objc_opt_self(BURestrictionsProvider), "sharedInstance");
  objc_msgSend(v1, "removeObserver:", v0);
  swift_unknownObjectRelease(v1);
  v3.receiver = v0;
  v3.super_class = (Class)type metadata accessor for ProfileRestrictions(0);
  return objc_msgSendSuper2(&v3, "dealloc");
}

uint64_t sub_1AAD08(char a1)
{
  return sub_1AAD6C(a1, (uint64_t)&unk_1F6A30, (uint64_t)&unk_1F6A58);
}

uint64_t sub_1AAD30(char a1)
{
  return sub_1AAD6C(a1, (uint64_t)&unk_1F6A78, (uint64_t)&unk_1F6AA0);
}

uint64_t sub_1AAD58(char a1)
{
  return sub_1AAD6C(a1, (uint64_t)&unk_1F6AC0, (uint64_t)&unk_1F6AE8);
}

uint64_t sub_1AAD6C(char a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  uint64_t KeyPath;
  uint64_t v7;
  char v9;

  KeyPath = swift_getKeyPath(a2);
  v7 = swift_getKeyPath(a3);
  v9 = a1;
  return static Published.subscript.setter(&v9, v3, KeyPath, v7);
}

uint64_t sub_1AADE4(void *a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t KeyPath;
  uint64_t v9;
  char v11;

  KeyPath = swift_getKeyPath(a4);
  v9 = swift_getKeyPath(a5);
  v11 = a3;
  return static Published.subscript.setter(&v11, a1, KeyPath, v9);
}

uint64_t sub_1AAE4C@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = type metadata accessor for ProfileRestrictions(0);
  result = ObservableObject<>.objectWillChange.getter(v4, a1);
  *a2 = result;
  return result;
}

void View.profileRestrictions(from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  unint64_t v9;
  void *v10;

  v6 = type metadata accessor for ProfileRestrictions(0);
  v7 = type metadata accessor for BaseObjectGraph(0);
  inject<A, B>(_:from:)(&v10, v6, a1, v6, v7);
  v8 = v10;
  v9 = sub_1AAF1C();
  View.environmentObject<A>(_:)(v8, a2, v6, a3, v9);

}

unint64_t sub_1AAF1C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_26AF00;
  if (!qword_26AF00)
  {
    v1 = type metadata accessor for ProfileRestrictions(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for ProfileRestrictions, v1);
    atomic_store(result, (unint64_t *)&qword_26AF00);
  }
  return result;
}

void *sub_1AAF64()
{
  return &protocol witness table for ObservableObjectPublisher;
}

uint64_t sub_1AAF78(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1AA63C(a1, a2, a3, &OBJC_IVAR____TtC7BooksUI19ProfileRestrictions__isExplicitContentAllowed);
}

uint64_t sub_1AAF94(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_1AA69C(a1, a2, a3, a4, &OBJC_IVAR____TtC7BooksUI19ProfileRestrictions__isExplicitContentAllowed);
}

uint64_t sub_1AAFB0(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1AA63C(a1, a2, a3, &OBJC_IVAR____TtC7BooksUI19ProfileRestrictions__isBookStoreAllowed);
}

uint64_t sub_1AAFCC(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_1AA69C(a1, a2, a3, a4, &OBJC_IVAR____TtC7BooksUI19ProfileRestrictions__isBookStoreAllowed);
}

uint64_t sub_1AAFE8(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1AA63C(a1, a2, a3, &OBJC_IVAR____TtC7BooksUI19ProfileRestrictions__isAccountModificationAllowed);
}

uint64_t sub_1AB004(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_1AA69C(a1, a2, a3, a4, &OBJC_IVAR____TtC7BooksUI19ProfileRestrictions__isAccountModificationAllowed);
}

uint64_t sub_1AB020()
{
  return type metadata accessor for ProfileRestrictions(0);
}

void sub_1AB028(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[3];

  sub_1AB1A0();
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(v2 - 8) + 64;
    v4[1] = v4[0];
    v4[2] = v4[0];
    swift_updateClassMetadata2(a1, 256, 3, v4, a1 + 80);
  }
}

uint64_t method lookup function for ProfileRestrictions(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for ProfileRestrictions);
}

uint64_t dispatch thunk of ProfileRestrictions.isExplicitContentAllowed.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))&stru_68.sectname[swift_isaMask & *v0])();
}

uint64_t dispatch thunk of ProfileRestrictions.$isExplicitContentAllowed.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))&stru_68.segname[(swift_isaMask & *v0) + 8])();
}

uint64_t dispatch thunk of ProfileRestrictions.isBookStoreAllowed.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((char *)&stru_68.offset + (swift_isaMask & *v0)))();
}

uint64_t dispatch thunk of ProfileRestrictions.$isBookStoreAllowed.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((char *)&stru_68.reserved2 + (swift_isaMask & *v0)))();
}

uint64_t dispatch thunk of ProfileRestrictions.isAccountModificationAllowed.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))&stru_B8.segname[swift_isaMask & *v0])();
}

uint64_t dispatch thunk of ProfileRestrictions.$isAccountModificationAllowed.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((char *)&stru_B8.size + (swift_isaMask & *v0)))();
}

uint64_t dispatch thunk of ProfileRestrictions.restrictionsChanged(isExplicitContentAllowed:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((char *)&stru_B8.flags + (swift_isaMask & *v0)))();
}

uint64_t dispatch thunk of ProfileRestrictions.restrictionsChanged(isBookStoreAllowed:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((char *)&stru_B8.reserved2 + (swift_isaMask & *v0)))();
}

uint64_t dispatch thunk of ProfileRestrictions.restrictionsChanged(isAccountModificationAllowed:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))&stru_108.sectname[swift_isaMask & *v0])();
}

void sub_1AB1A0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_26AFA0)
  {
    v0 = type metadata accessor for Published(0, &type metadata for Bool);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_26AFA0);
  }
}

uint64_t sub_1AB1F4(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *a1;
  v2 = sub_7EF8(&qword_26AFA8);
  v3 = type metadata accessor for ModifiedContent(255, v1, v2);
  sub_1AB254();
  return swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v3);
}

unint64_t sub_1AB254()
{
  unint64_t result;
  uint64_t v1;

  result = qword_26AFB0;
  if (!qword_26AFB0)
  {
    v1 = sub_7EF8(&qword_26AFA8);
    result = swift_getWitnessTable(&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>, v1);
    atomic_store(result, (unint64_t *)&qword_26AFB0);
  }
  return result;
}

uint64_t LocationFieldProvider.addExpensiveMetricsFields(into:using:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 336) = a1;
  *(_QWORD *)(v2 + 344) = a2;
  return swift_task_switch(sub_1AB2B8, 0, 0);
}

uint64_t sub_1AB2B8()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _OWORD *v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  NSObject *v65;
  os_log_type_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  char *v76;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v78;
  _QWORD *v79;
  uint64_t *v80;
  unint64_t v81;
  uint64_t v82;
  _BOOL8 v83;
  uint64_t v84;
  unint64_t v85;
  char v86;
  uint64_t v87;
  unint64_t v88;
  char v89;
  char v90;
  char v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  BOOL v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  char *v102;
  uint64_t *v103;
  unint64_t v104;
  uint64_t v105;
  _OWORD *v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111[5];

  v1 = v0 + 192;
  v2 = (uint64_t *)(v0 + 328);
  v3 = *(_QWORD **)(v0 + 336);
  v4 = v3[3];
  v5 = v3[4];
  v101 = v3;
  sub_5480(v3, v4);
  v6 = sub_5440(&qword_25DF98);
  v7 = MetricsFieldsBuilder.subscript.getter(0x6E6F697461636F6CLL, 0xE800000000000000, v6, v4, v6, v5);
  v8 = (uint64_t)_swiftEmptyArrayStorage;
  if (v7)
    v9 = (_QWORD *)v7;
  else
    v9 = _swiftEmptyArrayStorage;
  *(_QWORD *)(v0 + 328) = v9;
  v103 = (uint64_t *)(v0 + 192);
  v104 = v0;
  v107 = (uint64_t *)(v0 + 328);
  if (!v9[2])
    goto LABEL_17;
  if (qword_25DC70 != -1)
    swift_once(&qword_25DC70, sub_E8FA4);
  v10 = sub_5440(&qword_264D20);
  v11 = sub_7120(v10, (uint64_t)qword_264D00);
  MetricsFieldsContext.subscript.getter((_QWORD *)(v0 + 192), v11, &type metadata for Int);
  if ((*(_BYTE *)(v0 + 200) & 1) != 0)
    goto LABEL_17;
  v12 = *(_QWORD *)(v0 + 192);
  if (qword_25DAF0 != -1)
    swift_once(&qword_25DAF0, sub_71E0);
  v13 = type metadata accessor for Logger(0);
  v14 = sub_7120(v13, (uint64_t)qword_25DEA0);
  v15 = Logger.logObject.getter(v14);
  v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    v17 = swift_slowAlloc(22, -1);
    v108 = swift_slowAlloc(32, -1);
    v111[0] = v108;
    *(_DWORD *)v17 = 134218242;
    v18 = v103;
    *v103 = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v103, v104 + 200, v17 + 4, v17 + 12);
    *(_WORD *)(v17 + 12) = 2080;
    result = swift_beginAccess(v2, v104 + 304, 0, 0);
    if (!*(_QWORD *)(*v2 + 16))
    {
LABEL_86:
      __break(1u);
      return result;
    }
    v20 = *(_QWORD *)(*v2 + 32);
    v21 = swift_bridgeObjectRetain(v20);
    v22 = Dictionary.description.getter(v21, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);
    v24 = v23;
    swift_bridgeObjectRelease(v20);
    *v103 = sub_14AC3C(v22, v24, v111);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v103, v104 + 200, v17 + 14, v17 + 22);
    swift_bridgeObjectRelease(v24);
    _os_log_impl(&dword_0, v15, v16, "Adding locationPosition override %ld for %s", (uint8_t *)v17, 0x16u);
    swift_arrayDestroy(v108, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v108, -1, -1);
    swift_slowDealloc(v17, -1, -1);

    v2 = v107;
    v8 = (uint64_t)_swiftEmptyArrayStorage;
  }
  else
  {

    v18 = v103;
  }
  v111[3] = (uint64_t)&type metadata for Int;
  v111[0] = v12;
  swift_beginAccess(v2, v18, 33, 0);
  v25 = *v2;
  result = swift_isUniquelyReferenced_nonNull_native(*v2);
  v0 = v104;
  v1 = (uint64_t)v18;
  if ((result & 1) == 0)
  {
    result = (uint64_t)sub_1AEC60(v25);
    v25 = result;
    if (*(_QWORD *)(result + 16))
      goto LABEL_16;
    goto LABEL_85;
  }
  if (!*(_QWORD *)(v25 + 16))
  {
LABEL_85:
    __break(1u);
    goto LABEL_86;
  }
LABEL_16:
  sub_8B78((uint64_t)v111, 0xD000000000000010, 0x80000000001F9F30);
  *v2 = v25;
  swift_endAccess(v18);
LABEL_17:
  if (qword_25DC68 != -1)
    goto LABEL_83;
  while (1)
  {
    v26 = sub_5440(&qword_264D18);
    v27 = sub_7120(v26, (uint64_t)qword_264CE8);
    v28 = sub_5440(&qword_264D30);
    MetricsFieldsContext.subscript.getter((_QWORD *)v1, v27, v28);
    v29 = *(_QWORD *)(v0 + 192);
    if (!v29)
      break;
    v30 = *(_QWORD *)(v29 + 16);
    if (!v30)
    {
      swift_bridgeObjectRelease(*(_QWORD *)(v0 + 192));
      break;
    }
    if (qword_25DAF0 != -1)
      swift_once(&qword_25DAF0, sub_71E0);
    v31 = type metadata accessor for Logger(0);
    sub_7120(v31, (uint64_t)qword_25DEA0);
    v32 = swift_bridgeObjectRetain_n(v29, 2);
    v33 = Logger.logObject.getter(v32);
    v34 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v33, v34))
    {
      v35 = (uint8_t *)swift_slowAlloc(12, -1);
      v109 = swift_slowAlloc(32, -1);
      v111[0] = v109;
      *(_DWORD *)v35 = 136315138;
      v36 = swift_bridgeObjectRetain(v29);
      v37 = Array.description.getter(v36, &type metadata for Metrics.Location);
      v39 = v38;
      swift_bridgeObjectRelease(v29);
      *(_QWORD *)(v104 + 192) = sub_14AC3C(v37, v39, v111);
      v2 = v107;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v103, v104 + 200, v35 + 4, v35 + 12);
      v0 = v104;
      swift_bridgeObjectRelease(v39);
      swift_bridgeObjectRelease_n(v29, 2);
      _os_log_impl(&dword_0, v33, v34, "Appending location stack %s", v35, 0xCu);
      swift_arrayDestroy(v109, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v109, -1, -1);
      swift_slowDealloc(v35, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n(v29, 2);
    }

    v1 = v0 + 16;
    v111[0] = v8;
    sub_20FD0(0, v30, 0);
    v40 = v111[0];
    v0 = v30 - 1;
    v8 = 176 * v30 - 144;
    while (1)
    {
      if (v0 == -1)
        goto LABEL_77;
      if (v0 >= *(_QWORD *)(v29 + 16))
        break;
      v41 = *(_OWORD *)(v29 + v8);
      v42 = *(_OWORD *)(v29 + v8 + 32);
      *(_OWORD *)(v1 + 16) = *(_OWORD *)(v29 + v8 + 16);
      *(_OWORD *)(v1 + 32) = v42;
      *(_OWORD *)v1 = v41;
      v43 = *(_OWORD *)(v29 + v8 + 48);
      v44 = *(_OWORD *)(v29 + v8 + 64);
      v45 = *(_OWORD *)(v29 + v8 + 96);
      *(_OWORD *)(v1 + 80) = *(_OWORD *)(v29 + v8 + 80);
      *(_OWORD *)(v1 + 96) = v45;
      *(_OWORD *)(v1 + 48) = v43;
      *(_OWORD *)(v1 + 64) = v44;
      v46 = *(_OWORD *)(v29 + v8 + 112);
      v47 = *(_OWORD *)(v29 + v8 + 128);
      v48 = *(_OWORD *)(v29 + v8 + 160);
      *(_OWORD *)(v1 + 144) = *(_OWORD *)(v29 + v8 + 144);
      *(_OWORD *)(v1 + 160) = v48;
      *(_OWORD *)(v1 + 112) = v46;
      *(_OWORD *)(v1 + 128) = v47;
      sub_7E3E4((_QWORD *)v1);
      v49 = sub_123848();
      sub_7E498((_QWORD *)v1);
      v111[0] = v40;
      v51 = *(_QWORD *)(v40 + 16);
      v50 = *(_QWORD *)(v40 + 24);
      if (v51 >= v50 >> 1)
      {
        sub_20FD0(v50 > 1, v51 + 1, 1);
        v40 = v111[0];
      }
      *(_QWORD *)(v40 + 16) = v51 + 1;
      *(_QWORD *)(v40 + 8 * v51 + 32) = v49;
      --v0;
      v8 -= 176;
      if (v0 == -1)
      {
        swift_bridgeObjectRelease(v29);
        v1 = (uint64_t)v103;
        swift_beginAccess(v2, v103, 33, 0);
        sub_180E58(v40);
        swift_endAccess(v103);
        v0 = v104;
        goto LABEL_33;
      }
    }
LABEL_78:
    __break(1u);
LABEL_79:
    __break(1u);
LABEL_80:
    __break(1u);
LABEL_81:
    __break(1u);
LABEL_82:
    __break(1u);
LABEL_83:
    swift_once(&qword_25DC68, sub_E8F08);
  }
LABEL_33:
  swift_beginAccess(v2, v0 + 256, 0, 0);
  v52 = *v2;
  v53 = *(_QWORD *)(*v2 + 16);
  if (v53)
  {
    v54 = (_OWORD *)(v0 + 224);
    v110 = v0 + 280;
    v55 = -v53;
    v8 = 4;
    v102 = (char *)&type metadata for Any + 8;
    v106 = (_OWORD *)(v0 + 224);
    v105 = -v53;
    while (1)
    {
      v58 = v8 - 4;
      swift_beginAccess(v2, v54, 32, 0);
      if ((unint64_t)(v8 - 4) >= *(_QWORD *)(*v2 + 16))
      {
        __break(1u);
LABEL_77:
        __break(1u);
        goto LABEL_78;
      }
      v59 = *(_QWORD *)(*v2 + 8 * v8);
      if (*(_QWORD *)(v59 + 16))
      {
        swift_bridgeObjectRetain(v59);
        v60 = sub_9F7C(0xD000000000000010, 0x80000000001F9F30);
        if ((v61 & 1) != 0)
        {
          sub_93194(*(_QWORD *)(v59 + 56) + 32 * v60, v1);
        }
        else
        {
          *(_OWORD *)v1 = 0u;
          *(_OWORD *)(v1 + 16) = 0u;
        }
      }
      else
      {
        *(_OWORD *)v1 = 0u;
        *(_OWORD *)(v1 + 16) = 0u;
        swift_bridgeObjectRetain(v59);
      }
      swift_endAccess(v54);
      swift_bridgeObjectRelease(v59);
      v62 = *(_QWORD *)(v0 + 216);
      sub_93154(v1);
      if (!v62)
        break;
LABEL_38:
      ++v8;
      if (v55 + v8 == 4)
      {
        v52 = *v2;
        goto LABEL_74;
      }
    }
    if (qword_25DAF0 != -1)
      swift_once(&qword_25DAF0, sub_71E0);
    v63 = type metadata accessor for Logger(0);
    v64 = sub_7120(v63, (uint64_t)qword_25DEA0);
    v65 = Logger.logObject.getter(v64);
    v66 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v65, v66))
    {
      v67 = swift_slowAlloc(12, -1);
      v68 = swift_slowAlloc(32, -1);
      v111[0] = v68;
      *(_DWORD *)v67 = 136315138;
      v69 = *v2;
      if (v58 >= *(_QWORD *)(*v2 + 16))
        goto LABEL_81;
      v70 = v68;
      v71 = *(_QWORD *)(v69 + 8 * v8);
      v72 = swift_bridgeObjectRetain(v71);
      v73 = Dictionary.description.getter(v72, &type metadata for String, v102, &protocol witness table for String);
      v75 = v74;
      swift_bridgeObjectRelease(v71);
      *(_QWORD *)(v67 + 4) = sub_14AC3C(v73, v75, v111);
      swift_bridgeObjectRelease(v75);
      _os_log_impl(&dword_0, v65, v66, "Setting default locationPosition 0 for %s", (uint8_t *)v67, 0xCu);
      v0 = v104;
      v1 = (uint64_t)v103;
      v54 = v106;
      swift_arrayDestroy(v70, 1, v102);
      swift_slowDealloc(v70, -1, -1);
      swift_slowDealloc(v67, -1, -1);

      v2 = v107;
    }
    else
    {

    }
    *(_QWORD *)(v0 + 248) = &type metadata for Int;
    *(_QWORD *)(v0 + 224) = 0;
    swift_beginAccess(v2, v110, 33, 0);
    v76 = *(char **)(v0 + 328);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v76);
    *(_QWORD *)(v0 + 328) = v76;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v76 = sub_1AEC60((uint64_t)v76);
      *v2 = (uint64_t)v76;
    }
    if (v58 >= *((_QWORD *)v76 + 2))
      goto LABEL_79;
    if (!*(_QWORD *)(v0 + 248))
    {
      sub_93154((uint64_t)v54);
      v87 = *(_QWORD *)&v76[8 * v8];
      swift_bridgeObjectRetain(v87);
      v88 = sub_9F7C(0xD000000000000010, 0x80000000001F9F30);
      v90 = v89;
      swift_bridgeObjectRelease(v87);
      if ((v90 & 1) != 0)
      {
        v91 = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)&v76[8 * v8]);
        v92 = *(_QWORD *)&v76[8 * v8];
        v111[0] = v92;
        *(_QWORD *)&v76[8 * v8] = 0x8000000000000000;
        if ((v91 & 1) == 0)
        {
          sub_1AE038(&qword_25E0B0, (void (*)(unint64_t, _BYTE *))sub_93194, (void (*)(_BYTE *, uint64_t))sub_8C4C);
          v92 = v111[0];
        }
        swift_bridgeObjectRelease(*(_QWORD *)(*(_QWORD *)(v92 + 48) + 16 * v88 + 8));
        sub_8C4C((_OWORD *)(*(_QWORD *)(v92 + 56) + 32 * v88), (_OWORD *)v1);
        sub_1AD840(v88, v92);
        v93 = *(_QWORD *)&v76[8 * v8];
        *(_QWORD *)&v76[8 * v8] = v92;
        swift_bridgeObjectRelease(v93);
      }
      else
      {
        *(_OWORD *)v1 = 0u;
        *(_OWORD *)(v1 + 16) = 0u;
      }
      sub_93154(v1);
      v55 = v105;
      goto LABEL_37;
    }
    sub_8C4C(v54, (_OWORD *)v1);
    v78 = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)&v76[8 * v8]);
    v111[0] = *(_QWORD *)&v76[8 * v8];
    v79 = (_QWORD *)v111[0];
    *(_QWORD *)&v76[8 * v8] = 0x8000000000000000;
    v81 = sub_9F7C(0xD000000000000010, 0x80000000001F9F30);
    v82 = v79[2];
    v83 = (v80 & 1) == 0;
    v84 = v82 + v83;
    if (__OFADD__(v82, v83))
      goto LABEL_80;
    v2 = v80;
    if (v79[3] < v84)
    {
      sub_1AC3E8(v84, v78, &qword_25E0B0, (void (*)(uint64_t, _BYTE *))sub_8C4C, (void (*)(uint64_t, _BYTE *))sub_93194);
      v79 = (_QWORD *)v111[0];
      v85 = sub_9F7C(0xD000000000000010, 0x80000000001F9F30);
      if ((v2 & 1) != (v86 & 1))
        return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
      v81 = v85;
      v54 = v106;
      if ((v2 & 1) == 0)
        goto LABEL_67;
LABEL_35:
      v56 = (_QWORD *)(v79[7] + 32 * v81);
      _s7BooksUI13AnyPagedFrameVwxx_0(v56);
      sub_8C4C((_OWORD *)v1, v56);
LABEL_36:
      v57 = *(_QWORD *)&v76[8 * v8];
      *(_QWORD *)&v76[8 * v8] = v79;
      swift_bridgeObjectRelease(v57);
      v2 = v107;
      v55 = v105;
LABEL_37:
      swift_endAccess(v110);
      goto LABEL_38;
    }
    if ((v78 & 1) != 0)
    {
      v54 = v106;
      if ((v80 & 1) != 0)
        goto LABEL_35;
    }
    else
    {
      sub_1AE038(&qword_25E0B0, (void (*)(unint64_t, _BYTE *))sub_93194, (void (*)(_BYTE *, uint64_t))sub_8C4C);
      v79 = (_QWORD *)v111[0];
      v54 = v106;
      if ((v2 & 1) != 0)
        goto LABEL_35;
    }
LABEL_67:
    v79[(v81 >> 6) + 8] |= 1 << v81;
    v94 = (_QWORD *)(v79[6] + 16 * v81);
    *v94 = 0xD000000000000010;
    v94[1] = 0x80000000001F9F30;
    sub_8C4C((_OWORD *)v1, (_OWORD *)(v79[7] + 32 * v81));
    v95 = v79[2];
    v96 = __OFADD__(v95, 1);
    v97 = v95 + 1;
    if (v96)
      goto LABEL_82;
    v79[2] = v97;
    goto LABEL_36;
  }
LABEL_74:
  v98 = *(_QWORD *)(v0 + 336);
  *(_QWORD *)(v0 + 216) = sub_5440(&qword_266608);
  *(_QWORD *)(v0 + 192) = v52;
  v99 = v101[3];
  v100 = v101[4];
  sub_1244C(v98, v99);
  swift_bridgeObjectRetain(v52);
  dispatch thunk of MetricsFieldsBuilder.addValue(_:forField:)(v1, 0x6E6F697461636F6CLL, 0xE800000000000000, v99, v100);
  _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)v1);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 328));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1ABF7C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc(dword_26AFDC);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_108B0;
  v5[42] = a1;
  v5[43] = a2;
  return swift_task_switch(sub_1AB2B8, 0, 0);
}

uint64_t sub_1ABFE4()
{
  uint64_t v0;

  v0 = type metadata accessor for MetricsFieldInclusionRequest(0);
  sub_73A0(v0, qword_26AFC0);
  sub_7120(v0, (uint64_t)qword_26AFC0);
  return MetricsFieldInclusionRequest.init(rawValue:)(0x6E6F697461636F6CLL, 0xE800000000000000);
}

uint64_t static MetricsFieldInclusionRequest.location.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_25DD38 != -1)
    swift_once(&qword_25DD38, sub_1ABFE4);
  v2 = type metadata accessor for MetricsFieldInclusionRequest(0);
  v3 = sub_7120(v2, (uint64_t)qword_26AFC0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

double sub_1AC0B0@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  unint64_t v9;
  char v10;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  uint64_t v13;
  double result;
  uint64_t v15;

  v4 = v3;
  v8 = *v4;
  swift_bridgeObjectRetain(*v4);
  v9 = sub_9F7C(a1, a2);
  LOBYTE(a2) = v10;
  swift_bridgeObjectRelease(v8);
  if ((a2 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
    v12 = *v4;
    v15 = *v4;
    *v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_1AE038(&qword_25E0B0, (void (*)(unint64_t, _BYTE *))sub_93194, (void (*)(_BYTE *, uint64_t))sub_8C4C);
      v12 = v15;
    }
    swift_bridgeObjectRelease(*(_QWORD *)(*(_QWORD *)(v12 + 48) + 16 * v9 + 8));
    sub_8C4C((_OWORD *)(*(_QWORD *)(v12 + 56) + 32 * v9), a3);
    sub_1AD840(v9, v12);
    v13 = *v4;
    *v4 = v12;
    swift_bridgeObjectRelease(v13);
  }
  else
  {
    result = 0.0;
    *a3 = 0u;
    a3[1] = 0u;
  }
  return result;
}

double sub_1AC1B8@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  unint64_t v7;
  char v8;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v10;
  uint64_t v11;
  double result;
  uint64_t v13;

  v3 = v2;
  v6 = *v3;
  swift_bridgeObjectRetain(*v3);
  v7 = sub_9FE0(a1);
  LOBYTE(a1) = v8;
  swift_bridgeObjectRelease(v6);
  if ((a1 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v10 = *v3;
    v13 = *v3;
    *v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_1AE228();
      v10 = v13;
    }
    sub_AC34(*(_QWORD *)(v10 + 48) + 40 * v7);
    sub_AC68((__int128 *)(*(_QWORD *)(v10 + 56) + 40 * v7), a2);
    sub_1ADA14(v7, v10);
    v11 = *v3;
    *v3 = v10;
    swift_bridgeObjectRelease(v11);
  }
  else
  {
    *(_QWORD *)(a2 + 32) = 0;
    result = 0.0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  return result;
}

double sub_1AC2A8@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  unint64_t v9;
  char v10;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  uint64_t v13;
  double result;
  uint64_t v15;

  v4 = v3;
  v8 = *v4;
  swift_bridgeObjectRetain(*v4);
  v9 = sub_9F7C(a1, a2);
  LOBYTE(a2) = v10;
  swift_bridgeObjectRelease(v8);
  if ((a2 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
    v12 = *v4;
    v15 = *v4;
    *v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_1AE88C(&qword_25E018, (void (*)(_BYTE *, uint64_t))sub_AC68);
      v12 = v15;
    }
    swift_bridgeObjectRelease(*(_QWORD *)(*(_QWORD *)(v12 + 48) + 16 * v9 + 8));
    sub_AC68((__int128 *)(*(_QWORD *)(v12 + 56) + 40 * v9), a3);
    sub_1ADBE4(v9, v12);
    v13 = *v4;
    *v4 = v12;
    swift_bridgeObjectRelease(v13);
  }
  else
  {
    *(_QWORD *)(a3 + 32) = 0;
    result = 0.0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }
  return result;
}

Swift::Int sub_1AC3B0(uint64_t a1, uint64_t a2)
{
  return sub_1AC3E8(a1, a2, &qword_25E0B0, (void (*)(uint64_t, _BYTE *))sub_8C4C, (void (*)(uint64_t, _BYTE *))sub_93194);
}

Swift::Int sub_1AC3CC(uint64_t a1, uint64_t a2)
{
  return sub_1AC3E8(a1, a2, &qword_25E070, (void (*)(uint64_t, _BYTE *))sub_8C4C, (void (*)(uint64_t, _BYTE *))sub_93194);
}

Swift::Int sub_1AC3E8(uint64_t a1, uint64_t a2, uint64_t *a3, void (*a4)(uint64_t, _BYTE *), void (*a5)(uint64_t, _BYTE *))
{
  uint64_t *v5;
  uint64_t *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  Swift::Int result;
  int64_t v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  int64_t v40;
  uint64_t v41;
  char v43;
  _QWORD v44[9];
  _BYTE v45[32];

  v7 = v5;
  v9 = *v5;
  if (*(_QWORD *)(*v5 + 24) <= a1)
    v10 = a1;
  else
    v10 = *(_QWORD *)(*v5 + 24);
  sub_5440(a3);
  v43 = a2;
  v11 = static _DictionaryStorage.resize(original:capacity:move:)(v9, v10, a2);
  v12 = v11;
  if (!*(_QWORD *)(v9 + 16))
    goto LABEL_44;
  v13 = 1 << *(_BYTE *)(v9 + 32);
  v41 = v9 + 64;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  else
    v14 = -1;
  v15 = v14 & *(_QWORD *)(v9 + 64);
  v39 = v7;
  v40 = (unint64_t)(v13 + 63) >> 6;
  v16 = v11 + 64;
  result = swift_retain(v9);
  v18 = 0;
  while (1)
  {
    if (v15)
    {
      v21 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v22 = v21 | (v18 << 6);
      goto LABEL_25;
    }
    v23 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
      return result;
    }
    if (v23 >= v40)
      break;
    v24 = (_QWORD *)(v9 + 64);
    v25 = *(_QWORD *)(v41 + 8 * v23);
    ++v18;
    if (!v25)
    {
      v18 = v23 + 1;
      if (v23 + 1 >= v40)
        goto LABEL_37;
      v25 = *(_QWORD *)(v41 + 8 * v18);
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v40)
        {
LABEL_37:
          swift_release(v9);
          v7 = v39;
          if ((v43 & 1) == 0)
            goto LABEL_44;
          goto LABEL_40;
        }
        v25 = *(_QWORD *)(v41 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            v18 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_46;
            if (v18 >= v40)
              goto LABEL_37;
            v25 = *(_QWORD *)(v41 + 8 * v18);
            ++v26;
            if (v25)
              goto LABEL_24;
          }
        }
        v18 = v26;
      }
    }
LABEL_24:
    v15 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v18 << 6);
LABEL_25:
    v27 = (uint64_t *)(*(_QWORD *)(v9 + 48) + 16 * v22);
    v29 = *v27;
    v28 = v27[1];
    v30 = *(_QWORD *)(v9 + 56) + 32 * v22;
    if ((v43 & 1) != 0)
    {
      a4(v30, v45);
    }
    else
    {
      a5(v30, v45);
      swift_bridgeObjectRetain(v28);
    }
    Hasher.init(_seed:)(v44, *(_QWORD *)(v12 + 40));
    String.hash(into:)(v44, v29, v28);
    result = Hasher._finalize()();
    v31 = -1 << *(_BYTE *)(v12 + 32);
    v32 = result & ~v31;
    v33 = v32 >> 6;
    if (((-1 << v32) & ~*(_QWORD *)(v16 + 8 * (v32 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v32) & ~*(_QWORD *)(v16 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v34 = 0;
      v35 = (unint64_t)(63 - v31) >> 6;
      do
      {
        if (++v33 == v35 && (v34 & 1) != 0)
        {
          __break(1u);
          goto LABEL_45;
        }
        v36 = v33 == v35;
        if (v33 == v35)
          v33 = 0;
        v34 |= v36;
        v37 = *(_QWORD *)(v16 + 8 * v33);
      }
      while (v37 == -1);
      v19 = __clz(__rbit64(~v37)) + (v33 << 6);
    }
    *(_QWORD *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    v20 = (_QWORD *)(*(_QWORD *)(v12 + 48) + 16 * v19);
    *v20 = v29;
    v20[1] = v28;
    result = ((uint64_t (*)(_BYTE *, unint64_t))a4)(v45, *(_QWORD *)(v12 + 56) + 32 * v19);
    ++*(_QWORD *)(v12 + 16);
  }
  swift_release(v9);
  v7 = v39;
  v24 = (_QWORD *)(v9 + 64);
  if ((v43 & 1) == 0)
    goto LABEL_44;
LABEL_40:
  v38 = 1 << *(_BYTE *)(v9 + 32);
  if (v38 >= 64)
    bzero(v24, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v38;
  *(_QWORD *)(v9 + 16) = 0;
LABEL_44:
  result = swift_release(v9);
  *v7 = v12;
  return result;
}

Swift::Int sub_1AC710(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  Swift::Int result;
  int64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39[2];
  __int128 v40;
  __int128 v41;
  uint64_t v42;

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_5440(&qword_25E060);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_44;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v38 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v12 = (unint64_t)(v9 + 63) >> 6;
  v13 = v7 + 64;
  result = swift_retain(v5);
  v15 = 0;
  while (1)
  {
    if (v11)
    {
      v21 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v22 = v21 | (v15 << 6);
      goto LABEL_25;
    }
    v23 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
      return result;
    }
    if (v23 >= v12)
      break;
    v24 = (_QWORD *)(v5 + 64);
    v25 = *(_QWORD *)(v38 + 8 * v23);
    ++v15;
    if (!v25)
    {
      v15 = v23 + 1;
      if (v23 + 1 >= v12)
        goto LABEL_37;
      v25 = *(_QWORD *)(v38 + 8 * v15);
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v12)
        {
LABEL_37:
          swift_release(v5);
          if ((a2 & 1) == 0)
            goto LABEL_44;
          goto LABEL_40;
        }
        v25 = *(_QWORD *)(v38 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            v15 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_46;
            if (v15 >= v12)
              goto LABEL_37;
            v25 = *(_QWORD *)(v38 + 8 * v15);
            ++v26;
            if (v25)
              goto LABEL_24;
          }
        }
        v15 = v26;
      }
    }
LABEL_24:
    v11 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v15 << 6);
LABEL_25:
    v27 = *(_QWORD *)(v5 + 48) + 40 * v22;
    if ((a2 & 1) != 0)
    {
      v28 = *(_OWORD *)v27;
      v29 = *(_OWORD *)(v27 + 16);
      v42 = *(_QWORD *)(v27 + 32);
      v40 = v28;
      v41 = v29;
      sub_AC68((__int128 *)(*(_QWORD *)(v5 + 56) + 40 * v22), (uint64_t)v39);
    }
    else
    {
      sub_B1FC(v27, (uint64_t)&v40);
      sub_BD00(*(_QWORD *)(v5 + 56) + 40 * v22, (uint64_t)v39);
    }
    result = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v8 + 40));
    v30 = -1 << *(_BYTE *)(v8 + 32);
    v31 = result & ~v30;
    v32 = v31 >> 6;
    if (((-1 << v31) & ~*(_QWORD *)(v13 + 8 * (v31 >> 6))) != 0)
    {
      v16 = __clz(__rbit64((-1 << v31) & ~*(_QWORD *)(v13 + 8 * (v31 >> 6)))) | v31 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v33 = 0;
      v34 = (unint64_t)(63 - v30) >> 6;
      do
      {
        if (++v32 == v34 && (v33 & 1) != 0)
        {
          __break(1u);
          goto LABEL_45;
        }
        v35 = v32 == v34;
        if (v32 == v34)
          v32 = 0;
        v33 |= v35;
        v36 = *(_QWORD *)(v13 + 8 * v32);
      }
      while (v36 == -1);
      v16 = __clz(__rbit64(~v36)) + (v32 << 6);
    }
    *(_QWORD *)(v13 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
    v17 = 40 * v16;
    v18 = *(_QWORD *)(v8 + 48) + v17;
    v19 = v40;
    v20 = v41;
    *(_QWORD *)(v18 + 32) = v42;
    *(_OWORD *)v18 = v19;
    *(_OWORD *)(v18 + 16) = v20;
    result = sub_AC68(v39, *(_QWORD *)(v8 + 56) + v17);
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v24 = (_QWORD *)(v5 + 64);
  if ((a2 & 1) == 0)
    goto LABEL_44;
LABEL_40:
  v37 = 1 << *(_BYTE *)(v5 + 32);
  if (v37 >= 64)
    bzero(v24, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v37;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_44:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

Swift::Int sub_1ACA2C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  Swift::Int result;
  int64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  int64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  _QWORD v48[9];

  v3 = v2;
  v6 = _s8RatioKeyVMa(0);
  v45 = *(_QWORD *)(v6 - 8);
  v46 = v6;
  __chkstk_darwin(v6);
  v8 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_5440(&qword_25E058);
  v47 = a2;
  v10 = static _DictionaryStorage.resize(original:capacity:move:)(v9, a1, a2);
  v11 = v10;
  if (!*(_QWORD *)(v9 + 16))
    goto LABEL_43;
  v12 = 1 << *(_BYTE *)(v9 + 32);
  v13 = *(_QWORD *)(v9 + 64);
  v44 = (_QWORD *)(v9 + 64);
  if (v12 < 64)
    v14 = ~(-1 << v12);
  else
    v14 = -1;
  v15 = v14 & v13;
  v42 = v2;
  v43 = (unint64_t)(v12 + 63) >> 6;
  v16 = v10 + 64;
  result = swift_retain(v9);
  v18 = 0;
  while (1)
  {
    if (v15)
    {
      v20 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v21 = v20 | (v18 << 6);
      goto LABEL_24;
    }
    v22 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v22 >= v43)
      break;
    v23 = v44;
    v24 = v44[v22];
    ++v18;
    if (!v24)
    {
      v18 = v22 + 1;
      if (v22 + 1 >= v43)
        goto LABEL_36;
      v24 = v44[v18];
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v43)
        {
LABEL_36:
          swift_release(v9);
          v3 = v42;
          if ((v47 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v24 = v44[v25];
        if (!v24)
        {
          while (1)
          {
            v18 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_45;
            if (v18 >= v43)
              goto LABEL_36;
            v24 = v44[v18];
            ++v25;
            if (v24)
              goto LABEL_23;
          }
        }
        v18 = v25;
      }
    }
LABEL_23:
    v15 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v18 << 6);
LABEL_24:
    v26 = *(_QWORD *)(v45 + 72);
    v27 = *(_QWORD *)(v9 + 48) + v26 * v21;
    if ((v47 & 1) != 0)
      sub_B38C(v27, (uint64_t)v8);
    else
      sub_B30C(v27, (uint64_t)v8);
    v28 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v21);
    Hasher.init(_seed:)(v48, *(_QWORD *)(v11 + 40));
    v29 = type metadata accessor for Font.TextStyle(0);
    v30 = sub_6FD0(&qword_25E040, (uint64_t (*)(uint64_t))&type metadata accessor for Font.TextStyle, (uint64_t)&protocol conformance descriptor for Font.TextStyle);
    dispatch thunk of Hashable.hash(into:)(v48, v29, v30);
    v31 = type metadata accessor for DynamicTypeSize(0);
    v32 = sub_6FD0(&qword_25E048, (uint64_t (*)(uint64_t))&type metadata accessor for DynamicTypeSize, (uint64_t)&protocol conformance descriptor for DynamicTypeSize);
    dispatch thunk of Hashable.hash(into:)(v48, v31, v32);
    result = Hasher._finalize()();
    v33 = -1 << *(_BYTE *)(v11 + 32);
    v34 = result & ~v33;
    v35 = v34 >> 6;
    if (((-1 << v34) & ~*(_QWORD *)(v16 + 8 * (v34 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v34) & ~*(_QWORD *)(v16 + 8 * (v34 >> 6)))) | v34 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v36 = 0;
      v37 = (unint64_t)(63 - v33) >> 6;
      do
      {
        if (++v35 == v37 && (v36 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v38 = v35 == v37;
        if (v35 == v37)
          v35 = 0;
        v36 |= v38;
        v39 = *(_QWORD *)(v16 + 8 * v35);
      }
      while (v39 == -1);
      v19 = __clz(__rbit64(~v39)) + (v35 << 6);
    }
    *(_QWORD *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    result = sub_B38C((uint64_t)v8, *(_QWORD *)(v11 + 48) + v26 * v19);
    *(_QWORD *)(*(_QWORD *)(v11 + 56) + 8 * v19) = v28;
    ++*(_QWORD *)(v11 + 16);
  }
  swift_release(v9);
  v3 = v42;
  v23 = v44;
  if ((v47 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v40 = 1 << *(_BYTE *)(v9 + 32);
  if (v40 >= 64)
    bzero(v23, ((unint64_t)(v40 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v40;
  *(_QWORD *)(v9 + 16) = 0;
LABEL_43:
  result = swift_release(v9);
  *v3 = v11;
  return result;
}

void sub_1ACDF8(uint64_t a1, uint64_t a2)
{
  sub_1AD538(a1, a2, &qword_25DFC8);
}

void sub_1ACE04(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  Swift::Int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  int64_t v40;
  _QWORD *v41;
  uint64_t i;
  char v43;
  char v44;
  char v45;
  uint64_t v46;
  char v47;
  char v48;
  char v49;
  char v50;
  char v51;
  char v52;
  char v53;
  uint64_t v54;
  _QWORD v55[10];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_5440(&qword_25DFB8);
  v43 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (*(_QWORD *)(v5 + 16))
  {
    v39 = v3;
    v9 = 1 << *(_BYTE *)(v5 + 32);
    v41 = (_QWORD *)(v5 + 64);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v40 = (unint64_t)(v9 + 63) >> 6;
    v12 = v7 + 64;
    swift_retain(v5);
    v13 = 0;
    for (i = v5; ; v5 = i)
    {
      if (v11)
      {
        v21 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v22 = v21 | (v13 << 6);
      }
      else
      {
        v23 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return;
        }
        if (v23 >= v40)
          goto LABEL_36;
        v24 = v41[v23];
        ++v13;
        if (!v24)
        {
          v13 = v23 + 1;
          if (v23 + 1 >= v40)
            goto LABEL_36;
          v24 = v41[v13];
          if (!v24)
          {
            v25 = v23 + 2;
            if (v25 >= v40)
            {
LABEL_36:
              swift_release(v5);
              v3 = v39;
              if ((v43 & 1) != 0)
              {
                v38 = 1 << *(_BYTE *)(v5 + 32);
                if (v38 >= 64)
                  bzero(v41, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v41 = -1 << v38;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v24 = v41[v25];
            if (!v24)
            {
              while (1)
              {
                v13 = v25 + 1;
                if (__OFADD__(v25, 1))
                  goto LABEL_43;
                if (v13 >= v40)
                  goto LABEL_36;
                v24 = v41[v13];
                ++v25;
                if (v24)
                  goto LABEL_33;
              }
            }
            v13 = v25;
          }
        }
LABEL_33:
        v11 = (v24 - 1) & v24;
        v22 = __clz(__rbit64(v24)) + (v13 << 6);
      }
      v30 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v22);
      v32 = *v30;
      v31 = v30[1];
      v33 = *(_QWORD *)(v5 + 56) + 72 * v22;
      v34 = *(_QWORD *)v33;
      v35 = *(_QWORD *)(v33 + 8);
      v36 = *(_BYTE *)(v33 + 16);
      v54 = *(_QWORD *)(v33 + 24);
      v52 = *(_BYTE *)(v33 + 33);
      v53 = *(_BYTE *)(v33 + 32);
      v37 = *(_QWORD *)(v33 + 40);
      v50 = *(_BYTE *)(v33 + 49);
      v51 = *(_BYTE *)(v33 + 48);
      v48 = *(_BYTE *)(v33 + 51);
      v49 = *(_BYTE *)(v33 + 50);
      v47 = *(_BYTE *)(v33 + 52);
      v46 = *(_QWORD *)(v33 + 56);
      v44 = *(_BYTE *)(v33 + 65);
      v45 = *(_BYTE *)(v33 + 64);
      if ((v43 & 1) == 0)
      {
        swift_bridgeObjectRetain(v31);
        swift_bridgeObjectRetain(v35);
      }
      Hasher.init(_seed:)(v55, *(_QWORD *)(v8 + 40));
      String.hash(into:)(v55, v32, v31);
      v14 = Hasher._finalize()();
      v15 = -1 << *(_BYTE *)(v8 + 32);
      v16 = v14 & ~v15;
      v17 = v16 >> 6;
      if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
      {
        v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v26 = 0;
        v27 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          v28 = v17 == v27;
          if (v17 == v27)
            v17 = 0;
          v26 |= v28;
          v29 = *(_QWORD *)(v12 + 8 * v17);
        }
        while (v29 == -1);
        v18 = __clz(__rbit64(~v29)) + (v17 << 6);
      }
      *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      v19 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v18);
      *v19 = v32;
      v19[1] = v31;
      v20 = *(_QWORD *)(v8 + 56) + 72 * v18;
      *(_QWORD *)v20 = v34;
      *(_QWORD *)(v20 + 8) = v35;
      *(_BYTE *)(v20 + 16) = v36;
      *(_QWORD *)(v20 + 24) = v54;
      *(_BYTE *)(v20 + 32) = v53;
      *(_BYTE *)(v20 + 33) = v52;
      *(_QWORD *)(v20 + 40) = v37;
      *(_BYTE *)(v20 + 48) = v51;
      *(_BYTE *)(v20 + 49) = v50;
      *(_BYTE *)(v20 + 50) = v49;
      *(_BYTE *)(v20 + 51) = v48;
      *(_BYTE *)(v20 + 52) = v47;
      *(_QWORD *)(v20 + 56) = v46;
      *(_BYTE *)(v20 + 64) = v45;
      *(_BYTE *)(v20 + 65) = v44;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  swift_release(v5);
  *v3 = v8;
}

void sub_1AD1D8(uint64_t a1, uint64_t a2)
{
  sub_1AD538(a1, a2, &qword_25E028);
}

void sub_1AD1E4(uint64_t a1, uint64_t a2)
{
  sub_1AD218(a1, a2, &qword_25E018, (void (*)(uint64_t, _BYTE *, __n128))sub_AC68);
}

void sub_1AD1F8(uint64_t a1, uint64_t a2)
{
  sub_1AD538(a1, a2, &qword_25E010);
}

void sub_1AD204(uint64_t a1, uint64_t a2)
{
  sub_1AD218(a1, a2, &qword_268698, (void (*)(uint64_t, _BYTE *, __n128))sub_AC68);
}

void sub_1AD218(uint64_t a1, uint64_t a2, uint64_t *a3, void (*a4)(uint64_t, _BYTE *, __n128))
{
  uint64_t *v4;
  uint64_t *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  __n128 v16;
  int64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  Swift::Int v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  int64_t v39;
  _QWORD *v40;
  char v41;
  _QWORD v42[9];
  _BYTE v43[40];

  v6 = v4;
  v8 = *v4;
  if (*(_QWORD *)(*v4 + 24) <= a1)
    v9 = a1;
  else
    v9 = *(_QWORD *)(*v4 + 24);
  sub_5440(a3);
  v41 = a2;
  v10 = static _DictionaryStorage.resize(original:capacity:move:)(v8, v9, a2);
  v11 = v10;
  if (*(_QWORD *)(v8 + 16))
  {
    v38 = v6;
    v12 = 1 << *(_BYTE *)(v8 + 32);
    v40 = (_QWORD *)(v8 + 64);
    if (v12 < 64)
      v13 = ~(-1 << v12);
    else
      v13 = -1;
    v14 = v13 & *(_QWORD *)(v8 + 64);
    v39 = (unint64_t)(v12 + 63) >> 6;
    v15 = v10 + 64;
    v16 = swift_retain(v8);
    v17 = 0;
    while (1)
    {
      if (v14)
      {
        v20 = __clz(__rbit64(v14));
        v14 &= v14 - 1;
        v21 = v20 | (v17 << 6);
      }
      else
      {
        v22 = v17 + 1;
        if (__OFADD__(v17, 1))
        {
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
          return;
        }
        if (v22 >= v39)
          goto LABEL_37;
        v23 = v40[v22];
        ++v17;
        if (!v23)
        {
          v17 = v22 + 1;
          if (v22 + 1 >= v39)
            goto LABEL_37;
          v23 = v40[v17];
          if (!v23)
          {
            v24 = v22 + 2;
            if (v24 >= v39)
            {
LABEL_37:
              swift_release(v8);
              v6 = v38;
              if ((v41 & 1) != 0)
              {
                v37 = 1 << *(_BYTE *)(v8 + 32);
                if (v37 >= 64)
                  bzero(v40, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v40 = -1 << v37;
                *(_QWORD *)(v8 + 16) = 0;
              }
              break;
            }
            v23 = v40[v24];
            if (!v23)
            {
              while (1)
              {
                v17 = v24 + 1;
                if (__OFADD__(v24, 1))
                  goto LABEL_44;
                if (v17 >= v39)
                  goto LABEL_37;
                v23 = v40[v17];
                ++v24;
                if (v23)
                  goto LABEL_24;
              }
            }
            v17 = v24;
          }
        }
LABEL_24:
        v14 = (v23 - 1) & v23;
        v21 = __clz(__rbit64(v23)) + (v17 << 6);
      }
      v25 = (uint64_t *)(*(_QWORD *)(v8 + 48) + 16 * v21);
      v27 = *v25;
      v26 = v25[1];
      v28 = *(_QWORD *)(v8 + 56) + 40 * v21;
      if ((v41 & 1) != 0)
      {
        a4(v28, v43, v16);
      }
      else
      {
        sub_BD00(v28, (uint64_t)v43);
        swift_bridgeObjectRetain(v26);
      }
      Hasher.init(_seed:)(v42, *(_QWORD *)(v11 + 40));
      String.hash(into:)(v42, v27, v26);
      v29 = Hasher._finalize()();
      v30 = -1 << *(_BYTE *)(v11 + 32);
      v31 = v29 & ~v30;
      v32 = v31 >> 6;
      if (((-1 << v31) & ~*(_QWORD *)(v15 + 8 * (v31 >> 6))) != 0)
      {
        v18 = __clz(__rbit64((-1 << v31) & ~*(_QWORD *)(v15 + 8 * (v31 >> 6)))) | v31 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v33 = 0;
        v34 = (unint64_t)(63 - v30) >> 6;
        do
        {
          if (++v32 == v34 && (v33 & 1) != 0)
          {
            __break(1u);
            goto LABEL_43;
          }
          v35 = v32 == v34;
          if (v32 == v34)
            v32 = 0;
          v33 |= v35;
          v36 = *(_QWORD *)(v15 + 8 * v32);
        }
        while (v36 == -1);
        v18 = __clz(__rbit64(~v36)) + (v32 << 6);
      }
      *(_QWORD *)(v15 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      v19 = (_QWORD *)(*(_QWORD *)(v11 + 48) + 16 * v18);
      *v19 = v27;
      v19[1] = v26;
      ((void (*)(_BYTE *, unint64_t))a4)(v43, *(_QWORD *)(v11 + 56) + 40 * v18);
      ++*(_QWORD *)(v11 + 16);
    }
  }
  swift_release(v8);
  *v6 = v11;
}

void sub_1AD52C(uint64_t a1, uint64_t a2)
{
  sub_1AD538(a1, a2, &qword_25DFC0);
}

void sub_1AD538(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  int64_t v15;
  Swift::Int v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  unint64_t v24;
  int64_t v25;
  _QWORD *v26;
  unint64_t v27;
  int64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  char v40;
  __int128 v41;
  _QWORD v42[9];

  v4 = v3;
  v6 = *v3;
  if (*(_QWORD *)(*v3 + 24) <= a1)
    v7 = a1;
  else
    v7 = *(_QWORD *)(*v3 + 24);
  sub_5440(a3);
  v40 = a2;
  v8 = static _DictionaryStorage.resize(original:capacity:move:)(v6, v7, a2);
  v9 = v8;
  if (!*(_QWORD *)(v6 + 16))
    goto LABEL_43;
  v10 = 1 << *(_BYTE *)(v6 + 32);
  v38 = v4;
  v39 = v6 + 64;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  else
    v11 = -1;
  v12 = v11 & *(_QWORD *)(v6 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  v14 = v8 + 64;
  swift_retain(v6);
  v15 = 0;
  while (1)
  {
    if (v12)
    {
      v23 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v24 = v23 | (v15 << 6);
      goto LABEL_34;
    }
    v25 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }
    if (v25 >= v13)
      break;
    v26 = (_QWORD *)(v6 + 64);
    v27 = *(_QWORD *)(v39 + 8 * v25);
    ++v15;
    if (!v27)
    {
      v15 = v25 + 1;
      if (v25 + 1 >= v13)
        goto LABEL_36;
      v27 = *(_QWORD *)(v39 + 8 * v15);
      if (!v27)
      {
        v28 = v25 + 2;
        if (v28 >= v13)
        {
LABEL_36:
          swift_release(v6);
          v4 = v38;
          if ((v40 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v27 = *(_QWORD *)(v39 + 8 * v28);
        if (!v27)
        {
          while (1)
          {
            v15 = v28 + 1;
            if (__OFADD__(v28, 1))
              goto LABEL_45;
            if (v15 >= v13)
              goto LABEL_36;
            v27 = *(_QWORD *)(v39 + 8 * v15);
            ++v28;
            if (v27)
              goto LABEL_33;
          }
        }
        v15 = v28;
      }
    }
LABEL_33:
    v12 = (v27 - 1) & v27;
    v24 = __clz(__rbit64(v27)) + (v15 << 6);
LABEL_34:
    v33 = 16 * v24;
    v34 = (uint64_t *)(*(_QWORD *)(v6 + 48) + v33);
    v36 = *v34;
    v35 = v34[1];
    v41 = *(_OWORD *)(*(_QWORD *)(v6 + 56) + v33);
    if ((v40 & 1) == 0)
      swift_bridgeObjectRetain(v35);
    Hasher.init(_seed:)(v42, *(_QWORD *)(v9 + 40));
    String.hash(into:)(v42, v36, v35);
    v16 = Hasher._finalize()();
    v17 = -1 << *(_BYTE *)(v9 + 32);
    v18 = v16 & ~v17;
    v19 = v18 >> 6;
    if (((-1 << v18) & ~*(_QWORD *)(v14 + 8 * (v18 >> 6))) != 0)
    {
      v20 = __clz(__rbit64((-1 << v18) & ~*(_QWORD *)(v14 + 8 * (v18 >> 6)))) | v18 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v29 = 0;
      v30 = (unint64_t)(63 - v17) >> 6;
      do
      {
        if (++v19 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v31 = v19 == v30;
        if (v19 == v30)
          v19 = 0;
        v29 |= v31;
        v32 = *(_QWORD *)(v14 + 8 * v19);
      }
      while (v32 == -1);
      v20 = __clz(__rbit64(~v32)) + (v19 << 6);
    }
    *(_QWORD *)(v14 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
    v21 = 16 * v20;
    v22 = (_QWORD *)(*(_QWORD *)(v9 + 48) + v21);
    *v22 = v36;
    v22[1] = v35;
    *(_OWORD *)(*(_QWORD *)(v9 + 56) + v21) = v41;
    ++*(_QWORD *)(v9 + 16);
  }
  swift_release(v6);
  v4 = v38;
  v26 = (_QWORD *)(v6 + 64);
  if ((v40 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v37 = 1 << *(_BYTE *)(v6 + 32);
  if (v37 >= 64)
    bzero(v26, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v26 = -1 << v37;
  *(_QWORD *)(v6 + 16) = 0;
LABEL_43:
  swift_release(v6);
  *v4 = v9;
}

unint64_t sub_1AD840(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int v13;
  unint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  uint64_t v18;
  _OWORD *v19;
  _OWORD *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  _QWORD v27[9];

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v10 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * v6);
        v11 = *v10;
        v12 = v10[1];
        Hasher.init(_seed:)(v27, *(_QWORD *)(a2 + 40));
        swift_bridgeObjectRetain(v12);
        String.hash(into:)(v27, v11, v12);
        v13 = Hasher._finalize()();
        result = swift_bridgeObjectRelease(v12);
        v14 = v13 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v14 < v8)
            goto LABEL_5;
        }
        else if (v14 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v14)
        {
LABEL_11:
          v15 = *(_QWORD *)(a2 + 48);
          v16 = (_OWORD *)(v15 + 16 * v3);
          v17 = (_OWORD *)(v15 + 16 * v6);
          if (v3 != v6 || v16 >= v17 + 1)
            *v16 = *v17;
          v18 = *(_QWORD *)(a2 + 56);
          v19 = (_OWORD *)(v18 + 32 * v3);
          v20 = (_OWORD *)(v18 + 32 * v6);
          if (v3 != v6 || (v3 = v6, v19 >= v20 + 2))
          {
            v9 = v20[1];
            *v19 = *v20;
            v19[1] = v9;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v21 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v22 = *v21;
    v23 = (-1 << v3) - 1;
  }
  else
  {
    v21 = (uint64_t *)(v4 + 8 * (result >> 6));
    v23 = *v21;
    v22 = (-1 << result) - 1;
  }
  *v21 = v23 & v22;
  v24 = *(_QWORD *)(a2 + 16);
  v25 = __OFSUB__(v24, 1);
  v26 = v24 - 1;
  if (v25)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v26;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1ADA14(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  Swift::Int v11;
  Swift::Int v12;
  uint64_t v15;
  unint64_t v16;
  __int128 *v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  unint64_t v21;
  __int128 *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  _BYTE v29[40];

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        sub_B1FC(*(_QWORD *)(a2 + 48) + 40 * v6, (uint64_t)v29);
        v11 = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(a2 + 40));
        result = sub_AC34((uint64_t)v29);
        v12 = v11 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v12 >= v8 && v3 >= v12)
          {
LABEL_16:
            v15 = *(_QWORD *)(a2 + 48);
            v16 = v15 + 40 * v3;
            v17 = (__int128 *)(v15 + 40 * v6);
            if (v3 != v6 || v16 >= (unint64_t)v17 + 40)
            {
              v18 = *v17;
              v19 = v17[1];
              *(_QWORD *)(v16 + 32) = *((_QWORD *)v17 + 4);
              *(_OWORD *)v16 = v18;
              *(_OWORD *)(v16 + 16) = v19;
            }
            v20 = *(_QWORD *)(a2 + 56);
            v21 = v20 + 40 * v3;
            v22 = (__int128 *)(v20 + 40 * v6);
            if (v3 != v6 || (v3 = v6, v21 >= (unint64_t)v22 + 40))
            {
              v9 = *v22;
              v10 = v22[1];
              *(_QWORD *)(v21 + 32) = *((_QWORD *)v22 + 4);
              *(_OWORD *)v21 = v9;
              *(_OWORD *)(v21 + 16) = v10;
              v3 = v6;
            }
          }
        }
        else if (v12 >= v8 || v3 >= v12)
        {
          goto LABEL_16;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v23 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v24 = *v23;
    v25 = (-1 << v3) - 1;
  }
  else
  {
    v23 = (uint64_t *)(v4 + 8 * (result >> 6));
    v25 = *v23;
    v24 = (-1 << result) - 1;
  }
  *v23 = v25 & v24;
  v26 = *(_QWORD *)(a2 + 16);
  v27 = __OFSUB__(v26, 1);
  v28 = v26 - 1;
  if (v27)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v28;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1ADBE4(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  Swift::Int v14;
  unint64_t v15;
  uint64_t v16;
  _OWORD *v17;
  _OWORD *v18;
  uint64_t v19;
  unint64_t v20;
  __int128 *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  _QWORD v28[9];

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v11 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * v6);
        v12 = *v11;
        v13 = v11[1];
        Hasher.init(_seed:)(v28, *(_QWORD *)(a2 + 40));
        swift_bridgeObjectRetain(v13);
        String.hash(into:)(v28, v12, v13);
        v14 = Hasher._finalize()();
        result = swift_bridgeObjectRelease(v13);
        v15 = v14 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v15 < v8)
            goto LABEL_5;
        }
        else if (v15 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v15)
        {
LABEL_11:
          v16 = *(_QWORD *)(a2 + 48);
          v17 = (_OWORD *)(v16 + 16 * v3);
          v18 = (_OWORD *)(v16 + 16 * v6);
          if (v3 != v6 || v17 >= v18 + 1)
            *v17 = *v18;
          v19 = *(_QWORD *)(a2 + 56);
          v20 = v19 + 40 * v3;
          v21 = (__int128 *)(v19 + 40 * v6);
          if (v3 != v6 || (v3 = v6, v20 >= (unint64_t)v21 + 40))
          {
            v9 = *v21;
            v10 = v21[1];
            *(_QWORD *)(v20 + 32) = *((_QWORD *)v21 + 4);
            *(_OWORD *)v20 = v9;
            *(_OWORD *)(v20 + 16) = v10;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v22 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v23 = *v22;
    v24 = (-1 << v3) - 1;
  }
  else
  {
    v22 = (uint64_t *)(v4 + 8 * (result >> 6));
    v24 = *v22;
    v23 = (-1 << result) - 1;
  }
  *v22 = v24 & v23;
  v25 = *(_QWORD *)(a2 + 16);
  v26 = __OFSUB__(v25, 1);
  v27 = v25 - 1;
  if (v26)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v27;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

_OWORD *sub_1ADDCC(unint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, _QWORD *a5)
{
  _QWORD *v6;
  _OWORD *result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v6 = (_QWORD *)(a5[6] + 16 * a1);
  *v6 = a2;
  v6[1] = a3;
  result = sub_8C4C(a4, (_OWORD *)(a5[7] + 32 * a1));
  v8 = a5[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a5[2] = v10;
  return result;
}

uint64_t sub_1ADE34(unint64_t a1, uint64_t a2, __int128 *a3, _QWORD *a4)
{
  uint64_t v5;
  __int128 v6;
  uint64_t result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v5 = a4[6] + 40 * a1;
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v5 = *(_OWORD *)a2;
  *(_OWORD *)(v5 + 16) = v6;
  *(_QWORD *)(v5 + 32) = *(_QWORD *)(a2 + 32);
  result = sub_AC68(a3, a4[7] + 40 * a1);
  v8 = a4[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a4[2] = v10;
  return result;
}

uint64_t sub_1ADEB0(unint64_t a1, uint64_t a2, _QWORD *a3, double a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  a3[(a1 >> 6) + 8] |= 1 << a1;
  v8 = a3[6];
  v9 = _s8RatioKeyVMa(0);
  result = sub_B38C(a2, v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a1);
  *(double *)(a3[7] + 8 * a1) = a4;
  v11 = a3[2];
  v12 = __OFADD__(v11, 1);
  v13 = v11 + 1;
  if (v12)
    __break(1u);
  else
    a3[2] = v13;
  return result;
}

uint64_t sub_1ADF44(unint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4, _QWORD *a5)
{
  _QWORD *v6;
  uint64_t result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v6 = (_QWORD *)(a5[6] + 16 * a1);
  *v6 = a2;
  v6[1] = a3;
  result = sub_AC68(a4, a5[7] + 40 * a1);
  v8 = a5[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a5[2] = v10;
  return result;
}

unint64_t sub_1ADFB0(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a6[(result >> 6) + 8] |= 1 << result;
  v6 = (_QWORD *)(a6[6] + 16 * result);
  *v6 = a2;
  v6[1] = a3;
  v7 = (_QWORD *)(a6[7] + 16 * result);
  *v7 = a4;
  v7[1] = a5;
  v8 = a6[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a6[2] = v10;
  return result;
}

void *sub_1AE000()
{
  return sub_1AE038(&qword_25E0B0, (void (*)(unint64_t, _BYTE *))sub_93194, (void (*)(_BYTE *, uint64_t))sub_8C4C);
}

void *sub_1AE01C()
{
  return sub_1AE038(&qword_25E070, (void (*)(unint64_t, _BYTE *))sub_93194, (void (*)(_BYTE *, uint64_t))sub_8C4C);
}

void *sub_1AE038(uint64_t *a1, void (*a2)(unint64_t, _BYTE *), void (*a3)(_BYTE *, uint64_t))
{
  uint64_t *v3;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *result;
  unint64_t v10;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  uint64_t *v28;
  uint64_t v29;
  _BYTE v31[32];

  v5 = v3;
  sub_5440(a1);
  v6 = *v3;
  v7 = static _DictionaryStorage.copy(original:)(*v3);
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
  {
    result = (void *)swift_release(v6);
LABEL_28:
    *v5 = v8;
    return result;
  }
  v28 = v5;
  result = (void *)(v7 + 64);
  v10 = (unint64_t)((1 << *(_BYTE *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 64 + 8 * v10)
    result = memmove(result, (const void *)(v6 + 64), 8 * v10);
  v29 = v6 + 64;
  v12 = 0;
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v6 + 16);
  v13 = 1 << *(_BYTE *)(v6 + 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v15 = v14 & *(_QWORD *)(v6 + 64);
  v16 = (unint64_t)(v13 + 63) >> 6;
  while (1)
  {
    if (v15)
    {
      v17 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v18 = v17 | (v12 << 6);
      goto LABEL_12;
    }
    v25 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v25 >= v16)
      goto LABEL_26;
    v26 = *(_QWORD *)(v29 + 8 * v25);
    ++v12;
    if (!v26)
    {
      v12 = v25 + 1;
      if (v25 + 1 >= v16)
        goto LABEL_26;
      v26 = *(_QWORD *)(v29 + 8 * v12);
      if (!v26)
        break;
    }
LABEL_25:
    v15 = (v26 - 1) & v26;
    v18 = __clz(__rbit64(v26)) + (v12 << 6);
LABEL_12:
    v19 = 16 * v18;
    v20 = (uint64_t *)(*(_QWORD *)(v6 + 48) + 16 * v18);
    v21 = *v20;
    v22 = v20[1];
    v23 = 32 * v18;
    a2(*(_QWORD *)(v6 + 56) + 32 * v18, v31);
    v24 = (_QWORD *)(*(_QWORD *)(v8 + 48) + v19);
    *v24 = v21;
    v24[1] = v22;
    a3(v31, *(_QWORD *)(v8 + 56) + v23);
    result = (void *)swift_bridgeObjectRetain(v22);
  }
  v27 = v25 + 2;
  if (v27 >= v16)
  {
LABEL_26:
    result = (void *)swift_release(v6);
    v5 = v28;
    goto LABEL_28;
  }
  v26 = *(_QWORD *)(v29 + 8 * v27);
  if (v26)
  {
    v12 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    v12 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v12 >= v16)
      goto LABEL_26;
    v26 = *(_QWORD *)(v29 + 8 * v12);
    ++v27;
    if (v26)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_1AE228()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  __int128 v23[2];
  _OWORD v24[2];
  uint64_t v25;

  v1 = v0;
  sub_5440(&qword_25E060);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_26;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
        break;
    }
LABEL_25:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 40 * v15;
    sub_B1FC(*(_QWORD *)(v2 + 48) + 40 * v15, (uint64_t)v24);
    sub_BD00(*(_QWORD *)(v2 + 56) + v16, (uint64_t)v23);
    v17 = *(_QWORD *)(v4 + 48) + v16;
    v18 = v24[0];
    v19 = v24[1];
    *(_QWORD *)(v17 + 32) = v25;
    *(_OWORD *)v17 = v18;
    *(_OWORD *)(v17 + 16) = v19;
    result = (void *)sub_AC68(v23, *(_QWORD *)(v4 + 56) + v16);
  }
  v22 = v20 + 2;
  if (v22 >= v13)
    goto LABEL_26;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1AE400()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *result;
  uint64_t v10;
  unint64_t v11;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t *v27;

  v1 = v0;
  v2 = _s8RatioKeyVMa(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_5440(&qword_25E058);
  v6 = *v0;
  v7 = static _DictionaryStorage.copy(original:)(*v0);
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
  {
    result = (void *)swift_release(v6);
LABEL_28:
    *v1 = v8;
    return result;
  }
  v27 = v1;
  result = (void *)(v7 + 64);
  v10 = v6 + 64;
  v11 = (unint64_t)((1 << *(_BYTE *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 64 + 8 * v11)
    result = memmove(result, (const void *)(v6 + 64), 8 * v11);
  v13 = 0;
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v6 + 16);
  v14 = 1 << *(_BYTE *)(v6 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & *(_QWORD *)(v6 + 64);
  v17 = (unint64_t)(v14 + 63) >> 6;
  while (1)
  {
    if (v16)
    {
      v18 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v19 = v18 | (v13 << 6);
      goto LABEL_12;
    }
    v23 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v23 >= v17)
      goto LABEL_26;
    v24 = *(_QWORD *)(v10 + 8 * v23);
    ++v13;
    if (!v24)
    {
      v13 = v23 + 1;
      if (v23 + 1 >= v17)
        goto LABEL_26;
      v24 = *(_QWORD *)(v10 + 8 * v13);
      if (!v24)
        break;
    }
LABEL_25:
    v16 = (v24 - 1) & v24;
    v19 = __clz(__rbit64(v24)) + (v13 << 6);
LABEL_12:
    v20 = *(_QWORD *)(v3 + 72) * v19;
    sub_B30C(*(_QWORD *)(v6 + 48) + v20, (uint64_t)v5);
    v21 = 8 * v19;
    v22 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + v21);
    result = (void *)sub_B38C((uint64_t)v5, *(_QWORD *)(v8 + 48) + v20);
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + v21) = v22;
  }
  v25 = v23 + 2;
  if (v25 >= v17)
  {
LABEL_26:
    result = (void *)swift_release(v6);
    v1 = v27;
    goto LABEL_28;
  }
  v24 = *(_QWORD *)(v10 + 8 * v25);
  if (v24)
  {
    v13 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v13 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v13 >= v17)
      goto LABEL_26;
    v24 = *(_QWORD *)(v10 + 8 * v13);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

void sub_1AE618()
{
  sub_1AEA84(&qword_25DFC8);
}

void sub_1AE624()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  char v26;
  char v27;
  uint64_t v28;
  char v29;
  char v30;
  char v31;
  char v32;
  char v33;
  uint64_t v34;
  char v35;
  _QWORD *v36;
  uint64_t v37;
  int64_t v38;
  unint64_t v39;
  int64_t v40;

  v1 = v0;
  sub_5440(&qword_25DFB8);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v38 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v38 >= v13)
      goto LABEL_26;
    v39 = *(_QWORD *)(v6 + 8 * v38);
    ++v9;
    if (!v39)
    {
      v9 = v38 + 1;
      if (v38 + 1 >= v13)
        goto LABEL_26;
      v39 = *(_QWORD *)(v6 + 8 * v9);
      if (!v39)
        break;
    }
LABEL_25:
    v12 = (v39 - 1) & v39;
    v15 = __clz(__rbit64(v39)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 72 * v15;
    v21 = *(_QWORD *)(v2 + 56) + v20;
    v22 = *(_QWORD *)v21;
    v23 = *(_QWORD *)(v21 + 8);
    v24 = *(_BYTE *)(v21 + 16);
    v25 = *(_QWORD *)(v21 + 24);
    v26 = *(_BYTE *)(v21 + 32);
    v27 = *(_BYTE *)(v21 + 33);
    v28 = *(_QWORD *)(v21 + 40);
    v29 = *(_BYTE *)(v21 + 48);
    v30 = *(_BYTE *)(v21 + 49);
    v31 = *(_BYTE *)(v21 + 50);
    v32 = *(_BYTE *)(v21 + 51);
    v33 = *(_BYTE *)(v21 + 52);
    v34 = *(_QWORD *)(v21 + 56);
    v35 = *(_BYTE *)(v21 + 64);
    LOBYTE(v21) = *(_BYTE *)(v21 + 65);
    v36 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v36 = v19;
    v36[1] = v18;
    v37 = *(_QWORD *)(v4 + 56) + v20;
    *(_QWORD *)v37 = v22;
    *(_QWORD *)(v37 + 8) = v23;
    *(_BYTE *)(v37 + 16) = v24;
    *(_QWORD *)(v37 + 24) = v25;
    *(_BYTE *)(v37 + 32) = v26;
    *(_BYTE *)(v37 + 33) = v27;
    *(_QWORD *)(v37 + 40) = v28;
    *(_BYTE *)(v37 + 48) = v29;
    *(_BYTE *)(v37 + 49) = v30;
    *(_BYTE *)(v37 + 50) = v31;
    *(_BYTE *)(v37 + 51) = v32;
    *(_BYTE *)(v37 + 52) = v33;
    *(_QWORD *)(v37 + 56) = v34;
    *(_BYTE *)(v37 + 64) = v35;
    *(_BYTE *)(v37 + 65) = v21;
    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRetain(v23);
  }
  v40 = v38 + 2;
  if (v40 >= v13)
    goto LABEL_26;
  v39 = *(_QWORD *)(v6 + 8 * v40);
  if (v39)
  {
    v9 = v40;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v40 + 1;
    if (__OFADD__(v40, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v39 = *(_QWORD *)(v6 + 8 * v9);
    ++v40;
    if (v39)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void sub_1AE84C()
{
  sub_1AEA84(&qword_25E028);
}

void sub_1AE858()
{
  sub_1AE88C(&qword_25E018, (void (*)(_BYTE *, uint64_t))sub_AC68);
}

void sub_1AE86C()
{
  sub_1AEA84(&qword_25E010);
}

void sub_1AE878()
{
  sub_1AE88C(&qword_268698, (void (*)(_BYTE *, uint64_t))sub_AC68);
}

void sub_1AE88C(uint64_t *a1, void (*a2)(_BYTE *, uint64_t))
{
  uint64_t *v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  unint64_t v9;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  uint64_t *v27;
  uint64_t v28;
  _BYTE v29[40];

  v4 = v2;
  sub_5440(a1);
  v5 = *v2;
  v6 = static _DictionaryStorage.copy(original:)(*v2);
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
  {
    swift_release(v5);
LABEL_28:
    *v4 = v7;
    return;
  }
  v27 = v4;
  v8 = (void *)(v6 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)v8 >= v5 + 64 + 8 * v9)
    memmove(v8, (const void *)(v5 + 64), 8 * v9);
  v28 = v5 + 64;
  v11 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v5 + 16);
  v12 = 1 << *(_BYTE *)(v5 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & *(_QWORD *)(v5 + 64);
  v15 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      v16 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v17 = v16 | (v11 << 6);
      goto LABEL_12;
    }
    v24 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v24 >= v15)
      goto LABEL_26;
    v25 = *(_QWORD *)(v28 + 8 * v24);
    ++v11;
    if (!v25)
    {
      v11 = v24 + 1;
      if (v24 + 1 >= v15)
        goto LABEL_26;
      v25 = *(_QWORD *)(v28 + 8 * v11);
      if (!v25)
        break;
    }
LABEL_25:
    v14 = (v25 - 1) & v25;
    v17 = __clz(__rbit64(v25)) + (v11 << 6);
LABEL_12:
    v18 = 16 * v17;
    v19 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v17);
    v20 = *v19;
    v21 = v19[1];
    v22 = 40 * v17;
    sub_BD00(*(_QWORD *)(v5 + 56) + 40 * v17, (uint64_t)v29);
    v23 = (_QWORD *)(*(_QWORD *)(v7 + 48) + v18);
    *v23 = v20;
    v23[1] = v21;
    a2(v29, *(_QWORD *)(v7 + 56) + v22);
    swift_bridgeObjectRetain(v21);
  }
  v26 = v24 + 2;
  if (v26 >= v15)
  {
LABEL_26:
    swift_release(v5);
    v4 = v27;
    goto LABEL_28;
  }
  v25 = *(_QWORD *)(v28 + 8 * v26);
  if (v25)
  {
    v11 = v26;
    goto LABEL_25;
  }
  while (1)
  {
    v11 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v11 >= v15)
      goto LABEL_26;
    v25 = *(_QWORD *)(v28 + 8 * v11);
    ++v26;
    if (v25)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
}

void sub_1AEA78()
{
  sub_1AEA84(&qword_25DFC0);
}

void sub_1AEA84(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  _QWORD *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  v2 = v1;
  sub_5440(a1);
  v3 = *v1;
  v4 = static _DictionaryStorage.copy(original:)(*v1);
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_26:
    swift_release(v3);
    *v2 = v5;
    return;
  }
  v6 = (void *)(v4 + 64);
  v7 = v3 + 64;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)v6 >= v3 + 64 + 8 * v8)
    memmove(v6, (const void *)(v3 + 64), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v23 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v14)
      goto LABEL_26;
    v24 = *(_QWORD *)(v7 + 8 * v23);
    ++v10;
    if (!v24)
    {
      v10 = v23 + 1;
      if (v23 + 1 >= v14)
        goto LABEL_26;
      v24 = *(_QWORD *)(v7 + 8 * v10);
      if (!v24)
        break;
    }
LABEL_25:
    v13 = (v24 - 1) & v24;
    v16 = __clz(__rbit64(v24)) + (v10 << 6);
LABEL_12:
    v17 = 16 * v16;
    v18 = (uint64_t *)(*(_QWORD *)(v3 + 48) + v17);
    v20 = *v18;
    v19 = v18[1];
    v21 = *(_OWORD *)(*(_QWORD *)(v3 + 56) + v17);
    v22 = (_QWORD *)(*(_QWORD *)(v5 + 48) + v17);
    *v22 = v20;
    v22[1] = v19;
    *(_OWORD *)(*(_QWORD *)(v5 + 56) + v17) = v21;
    swift_bridgeObjectRetain(v19);
  }
  v25 = v23 + 2;
  if (v25 >= v14)
    goto LABEL_26;
  v24 = *(_QWORD *)(v7 + 8 * v25);
  if (v24)
  {
    v10 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v10 >= v14)
      goto LABEL_26;
    v24 = *(_QWORD *)(v7 + 8 * v10);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

uint64_t sub_1AEC24(unint64_t a1)
{
  return sub_AAA20(0, *(_QWORD *)(a1 + 16), 0, a1);
}

char *sub_1AEC38(uint64_t a1)
{
  return sub_AAC88(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

_QWORD *sub_1AEC4C(_QWORD *a1)
{
  return sub_AB338(0, a1[2], 0, a1);
}

char *sub_1AEC60(uint64_t a1)
{
  return sub_AB45C(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

ValueMetadata *type metadata accessor for LocationFieldProvider()
{
  return &type metadata for LocationFieldProvider;
}

uint64_t sub_1AEC84(void (*a1)(uint64_t *__return_ptr, char *))
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v12;

  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_5440(&qword_25FAC0);
  __chkstk_darwin(v8);
  v10 = (char *)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_B3D0(v1, (uint64_t)v10, &qword_25FAC0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v10, 1, v4) == 1)
    return 0;
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v10, v4);
  a1(&v12, v7);
  if (v2)
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v12;
}

__n128 CoverView.init(model:cacheGeometry:)@<Q0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  int *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __n128 result;
  char v23;
  _QWORD v24[2];

  *(_QWORD *)a3 = swift_getKeyPath(&unk_1F6BE0);
  *(_BYTE *)(a3 + 40) = 0;
  *(_QWORD *)(a3 + 48) = swift_getKeyPath(&unk_1F6C08);
  *(_BYTE *)(a3 + 56) = 0;
  v6 = (int *)type metadata accessor for CoverView(0);
  v7 = (_QWORD *)(a3 + v6[6]);
  *v7 = swift_getKeyPath(&unk_1F6C38);
  v8 = sub_5440(&qword_25F1E8);
  swift_storeEnumTagMultiPayload(v7, v8, 0);
  v9 = (_QWORD *)(a3 + v6[7]);
  *v9 = swift_getKeyPath(&unk_1F6C60);
  v10 = sub_5440(&qword_25F758);
  swift_storeEnumTagMultiPayload(v9, v10, 0);
  v11 = (_QWORD *)(a3 + v6[8]);
  v12 = type metadata accessor for ProfileRestrictions(0);
  v13 = sub_6FD0((unint64_t *)&qword_26AF00, type metadata accessor for ProfileRestrictions, (uint64_t)&protocol conformance descriptor for ProfileRestrictions);
  *v11 = EnvironmentObject.init()(v12, v13);
  v11[1] = v14;
  v15 = a3 + v6[9];
  v23 = 1;
  State.init(wrappedValue:)(v24, &v23, &type metadata for Bool);
  v16 = v24[1];
  *(_BYTE *)v15 = v24[0];
  *(_QWORD *)(v15 + 8) = v16;
  v17 = a3 + v6[10];
  v18 = *(_OWORD *)(a1 + 144);
  *(_OWORD *)(v17 + 128) = *(_OWORD *)(a1 + 128);
  *(_OWORD *)(v17 + 144) = v18;
  *(_QWORD *)(v17 + 160) = *(_QWORD *)(a1 + 160);
  v19 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(v17 + 64) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(v17 + 80) = v19;
  v20 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(v17 + 96) = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(v17 + 112) = v20;
  v21 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)v17 = *(_OWORD *)a1;
  *(_OWORD *)(v17 + 16) = v21;
  result = *(__n128 *)(a1 + 48);
  *(_OWORD *)(v17 + 32) = *(_OWORD *)(a1 + 32);
  *(__n128 *)(v17 + 48) = result;
  *(_BYTE *)(a3 + v6[11]) = a2;
  return result;
}

_QWORD *sub_1AEF70@<X0>(_QWORD *a1@<X8>)
{
  unint64_t v2;

  v2 = sub_7CA84();
  return EnvironmentValues.subscript.getter(a1, &type metadata for ReferenceIdKey, &type metadata for ReferenceIdKey, v2);
}

uint64_t sub_1AEFAC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  uint64_t v10;

  v2 = sub_5440(&qword_25FAC0);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v7 = (char *)&v10 - v6;
  sub_B3D0(a1, (uint64_t)&v10 - v6, &qword_25FAC0);
  sub_B3D0((uint64_t)v7, (uint64_t)v5, &qword_25FAC0);
  v8 = sub_7CA84();
  EnvironmentValues.subscript.setter(v5, &type metadata for ReferenceIdKey, &type metadata for ReferenceIdKey, v8);
  return sub_B414((uint64_t)v7, &qword_25FAC0);
}

uint64_t sub_1AF080@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  void (*v17)(char *, uint64_t, uint64_t);
  uint64_t v18;
  void (*v19)(char *, uint64_t);
  uint64_t v21;
  uint64_t v22;

  v22 = a2;
  v3 = type metadata accessor for ColorScheme(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for ColorConstants.Environment(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for EnvironmentValues(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v16 = (char *)&v21 - v15;
  v17 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v17((char *)&v21 - v15, a1, v10);
  v18 = ((uint64_t (*)(char *, char *, uint64_t))v17)(v14, v16, v10);
  EnvironmentValues.colorScheme.getter(v18);
  v19 = *(void (**)(char *, uint64_t))(v11 + 8);
  v19(v14, v10);
  (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v9, v6, v3);
  v19(v16, v10);
  return sub_21C88((uint64_t)v9, v22, type metadata accessor for ColorConstants.Environment);
}

uint64_t sub_1AF1FC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  double v24;
  double v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  void *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v44 = a1;
  v47 = a2;
  v41 = type metadata accessor for AlignmentImageView(0);
  __chkstk_darwin(v41);
  v3 = (uint64_t *)((char *)&v40 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  v46 = sub_5440(&qword_26B058);
  v4 = __chkstk_darwin(v46);
  v6 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v43 = (uint64_t)&v40 - v7;
  v45 = sub_5440(&qword_26B168);
  __chkstk_darwin(v45);
  v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for CoverView(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  __chkstk_darwin(v10);
  v13 = (char *)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for BooksFeatureFlag(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v40 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD, uint64_t))(v15 + 104))(v17, enum case for BooksFeatureFlag.coverEffectV2(_:), v14);
  v18 = sub_6FD0(&qword_263370, (uint64_t (*)(uint64_t))&type metadata accessor for BooksFeatureFlag, (uint64_t)&protocol conformance descriptor for BooksFeatureFlag);
  v19 = sub_7FD8((unint64_t *)&qword_263378, &qword_263380, (uint64_t)&protocol conformance descriptor for StaticFeatureFlagsKey<A>);
  LOBYTE(v18) = RawRepresentable<>.isEnabled.getter(v14, v18, v19);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  if ((v18 & 1) != 0)
  {
    sub_1E428(v42, (uint64_t)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for CoverView);
    v20 = *(unsigned __int8 *)(v11 + 80);
    v21 = (v20 + 24) & ~v20;
    v22 = swift_allocObject(&unk_259870, v21 + v12, v20 | 7);
    v23 = v44;
    *(_QWORD *)(v22 + 16) = v44;
    sub_21C88((uint64_t)v13, v22 + v21, type metadata accessor for CoverView);
    objc_msgSend(v23, "size");
    *(_QWORD *)v9 = sub_1B3CFC;
    *((_QWORD *)v9 + 1) = v22;
    *((double *)v9 + 2) = v24 / v25;
    *((_WORD *)v9 + 12) = 0;
    swift_storeEnumTagMultiPayload(v9, v45, 0);
    v26 = sub_5440(&qword_26B038);
    v27 = sub_1B21E4();
    v28 = sub_1B2268();
    return _ConditionalContent<>.init(storage:)(v9, v26, v46, v27, v28);
  }
  else
  {
    v30 = v44;
    *v3 = v44;
    v31 = (_QWORD *)((char *)v3 + *(int *)(v41 + 20));
    *v31 = swift_getKeyPath(&unk_1F6E18);
    v32 = sub_5440(&qword_25FA98);
    swift_storeEnumTagMultiPayload(v31, v32, 0);
    sub_1E428((uint64_t)v3, (uint64_t)v6, type metadata accessor for AlignmentImageView);
    v33 = v46;
    v34 = &v6[*(int *)(v46 + 36)];
    *(_QWORD *)v34 = 0;
    *((_QWORD *)v34 + 1) = v30;
    v35 = v30;
    sub_224DC((uint64_t)v3, type metadata accessor for AlignmentImageView);
    v36 = v43;
    sub_167A4((uint64_t)v6, v43, &qword_26B058);
    sub_B3D0(v36, (uint64_t)v9, &qword_26B058);
    swift_storeEnumTagMultiPayload(v9, v45, 1);
    v37 = sub_5440(&qword_26B038);
    v38 = sub_1B21E4();
    v39 = sub_1B2268();
    _ConditionalContent<>.init(storage:)(v9, v37, v33, v38, v39);
    return sub_B414(v36, &qword_26B058);
  }
}

uint64_t sub_1AF5C8@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  double v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t KeyPath;
  int v32;
  uint64_t v33;
  unsigned int *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  __int128 v40;
  char *v41;
  id v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD v52[3];
  uint64_t v53;
  uint64_t v54;
  __int128 v55[3];
  char v56;

  v4 = type metadata accessor for LayoutDirection(0);
  v51 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_5440(&qword_26B170);
  __chkstk_darwin(v7);
  v9 = (char *)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = sub_5440(&qword_26B178);
  __chkstk_darwin(v47);
  v11 = (char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = sub_5440(&qword_26B180);
  __chkstk_darwin(v49);
  v13 = (char *)&v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = sub_5440(&qword_26B188);
  v14 = __chkstk_darwin(v50);
  v16 = (char *)&v44 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = GeometryProxy.size.getter(v14);
  sub_6B698(v17, v18);
  v20 = v19;
  v22 = v21;
  v48 = v23;
  v24 = Image.init(uiImage:)(v48);
  v25 = a1 + *(int *)(type metadata accessor for CoverView(0) + 40);
  sub_C4354(v25, (uint64_t)v55);
  if (v56)
  {
    v26 = v56 != 1;
  }
  else
  {
    sub_AC68(v55, (uint64_t)v52);
    v45 = v4;
    v46 = a2;
    v28 = v53;
    v27 = v54;
    sub_5480(v52, v53);
    v29 = v28;
    v4 = v45;
    v30 = v27;
    a2 = v46;
    v26 = dispatch thunk of AssetInfo.assetType.getter(v29, v30);
    _s7BooksUI13AnyPagedFrameVwxx_0(v52);
  }
  sub_1AF970(v26, v24, (uint64_t)v9);
  swift_release(v24);
  KeyPath = swift_getKeyPath(&unk_1F6E18);
  v32 = *(unsigned __int8 *)(v25 + 80);
  v33 = v51;
  if (v32)
    v34 = (unsigned int *)&enum case for LayoutDirection.rightToLeft(_:);
  else
    v34 = (unsigned int *)&enum case for LayoutDirection.leftToRight(_:);
  (*(void (**)(char *, _QWORD, uint64_t))(v51 + 104))(v6, *v34, v4);
  v35 = (uint64_t *)&v11[*(int *)(v47 + 36)];
  v36 = sub_5440(&qword_261E18);
  (*(void (**)(char *, char *, uint64_t))(v33 + 16))((char *)v35 + *(int *)(v36 + 28), v6, v4);
  *v35 = KeyPath;
  sub_B3D0((uint64_t)v9, (uint64_t)v11, &qword_26B170);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v6, v4);
  sub_B414((uint64_t)v9, &qword_26B170);
  v37 = _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0();
  _FrameLayout.init(width:height:alignment:)(v55, v20, 0, v22, 0, v37, v38);
  sub_B3D0((uint64_t)v11, (uint64_t)v13, &qword_26B178);
  v39 = &v13[*(int *)(v49 + 36)];
  v40 = v55[1];
  *(_OWORD *)v39 = v55[0];
  *((_OWORD *)v39 + 1) = v40;
  *((_OWORD *)v39 + 2) = v55[2];
  sub_B414((uint64_t)v11, &qword_26B178);
  sub_B3D0((uint64_t)v13, (uint64_t)v16, &qword_26B180);
  v41 = &v16[*(int *)(v50 + 36)];
  v42 = v48;
  *(_QWORD *)v41 = 0;
  *((_QWORD *)v41 + 1) = v42;
  sub_B414((uint64_t)v13, &qword_26B180);
  return sub_167A4((uint64_t)v16, a2, &qword_26B188);
}

uint64_t sub_1AF970@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _OWORD *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  char *v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;

  v119 = a2;
  LODWORD(v118) = a1;
  v124 = a3;
  v108 = sub_5440(&qword_26B190);
  v3 = __chkstk_darwin(v108);
  v111 = (char *)&v98 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v112 = (uint64_t)&v98 - v5;
  v100 = type metadata accessor for LegacyPDFCoverEffect(0);
  v6 = __chkstk_darwin(v100);
  v106 = (char *)&v98 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v110 = (uint64_t)&v98 - v8;
  v123 = sub_5440(&qword_26B198);
  v9 = __chkstk_darwin(v123);
  v107 = (uint64_t *)((char *)&v98 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v9);
  v113 = (uint64_t)&v98 - v11;
  v102 = sub_5440(&qword_26B1A0);
  v12 = __chkstk_darwin(v102);
  v104 = (char *)&v98 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v105 = (uint64_t)&v98 - v14;
  v99 = type metadata accessor for AudiobookCoverEffect(0);
  v15 = __chkstk_darwin(v99);
  v17 = (_OWORD *)((char *)&v98 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v15);
  v103 = (uint64_t)&v98 - v18;
  v116 = sub_5440(&qword_26B1A8);
  v19 = __chkstk_darwin(v116);
  v101 = (uint64_t *)((char *)&v98 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v19);
  v109 = (uint64_t)&v98 - v21;
  v120 = sub_5440(&qword_26B1B0);
  __chkstk_darwin(v120);
  v122 = (uint64_t)&v98 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v114 = sub_5440(&qword_26B1B8);
  __chkstk_darwin(v114);
  v115 = (uint64_t)&v98 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v121 = sub_5440(&qword_26B1C0);
  __chkstk_darwin(v121);
  v117 = (char *)&v98 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v98 = sub_5440(&qword_26B1C8);
  v25 = __chkstk_darwin(v98);
  v27 = (char *)&v98 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  v29 = (char *)&v98 - v28;
  v30 = type metadata accessor for Image.ResizingMode(0);
  v31 = *(_QWORD *)(v30 - 8);
  __chkstk_darwin(v30);
  v33 = (char *)&v98 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = type metadata accessor for BookCoverEffect(0);
  v35 = __chkstk_darwin(v34);
  v37 = (_OWORD *)((char *)&v98 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v35);
  v39 = (char *)&v98 - v38;
  v40 = sub_5440(&qword_26B1D0);
  v41 = __chkstk_darwin(v40);
  v43 = (uint64_t *)((char *)&v98 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0));
  v44 = __chkstk_darwin(v41);
  if ((_BYTE)v118)
  {
    if (v118 == 1)
    {
      v46 = (_QWORD *)((char *)v37 + *(int *)(v34 + 24));
      v113 = v44;
      v118 = (uint64_t)&v98 - v45;
      *v46 = swift_getKeyPath(&unk_1F6E48);
      v47 = sub_5440(&qword_25E948);
      swift_storeEnumTagMultiPayload(v46, v47, 0);
      *v37 = xmmword_1F6BD0;
      sub_21C88((uint64_t)v37, (uint64_t)v39, type metadata accessor for BookCoverEffect);
      (*(void (**)(char *, _QWORD, uint64_t))(v31 + 104))(v33, enum case for Image.ResizingMode.stretch(_:), v30);
      v48 = Image.resizable(capInsets:resizingMode:)(v33, v119, 0.0, 0.0, 0.0, 0.0);
      (*(void (**)(char *, uint64_t))(v31 + 8))(v33, v30);
      sub_1E428((uint64_t)v39, (uint64_t)v37, type metadata accessor for BookCoverEffect);
      v49 = &v27[*(int *)(v98 + 36)];
      *(_QWORD *)v49 = swift_getKeyPath(&unk_1F6E78);
      v50 = sub_5440(&qword_25FB18);
      swift_storeEnumTagMultiPayload(v49, v50, 0);
      sub_21C88((uint64_t)v37, (uint64_t)v27, type metadata accessor for BookCoverEffect);
      sub_167A4((uint64_t)v27, (uint64_t)v29, &qword_26B1C8);
      v51 = v113;
      sub_B3D0((uint64_t)v29, (uint64_t)v43 + *(int *)(v113 + 36), &qword_26B1C8);
      *v43 = v48;
      sub_B414((uint64_t)v29, &qword_26B1C8);
      sub_224DC((uint64_t)v39, type metadata accessor for BookCoverEffect);
      v52 = &qword_26B1D0;
      v53 = v118;
      sub_167A4((uint64_t)v43, v118, &qword_26B1D0);
      v54 = v115;
      sub_B3D0(v53, v115, &qword_26B1D0);
      swift_storeEnumTagMultiPayload(v54, v114, 0);
      v55 = sub_1B3E08(&qword_26B1E0, &qword_26B1D0, &qword_26B1E8, &qword_26B1C8);
      v56 = sub_1B3E08(&qword_26B1F0, &qword_26B1A8, &qword_26B1F8, &qword_26B1A0);
      v57 = (uint64_t)v117;
      _ConditionalContent<>.init(storage:)(v54, v51, v116, v55, v56);
      v58 = v122;
      sub_B3D0(v57, v122, &qword_26B1C0);
      swift_storeEnumTagMultiPayload(v58, v120, 0);
      v59 = sub_1B3D5C();
      v60 = sub_1B3E08(&qword_26B200, &qword_26B198, &qword_26B208, &qword_26B190);
      _ConditionalContent<>.init(storage:)(v58, v121, v123, v59, v60);
      sub_B414(v57, &qword_26B1C0);
    }
    else
    {
      v82 = v106;
      v83 = &v106[*(int *)(v100 + 20)];
      *(_QWORD *)v83 = swift_getKeyPath(&unk_1F6E48);
      v84 = sub_5440(&qword_25E948);
      swift_storeEnumTagMultiPayload(v83, v84, 0);
      *v82 = 0x4000000000000000;
      v85 = v110;
      sub_21C88((uint64_t)v82, v110, type metadata accessor for LegacyPDFCoverEffect);
      (*(void (**)(char *, _QWORD, uint64_t))(v31 + 104))(v33, enum case for Image.ResizingMode.stretch(_:), v30);
      v86 = Image.resizable(capInsets:resizingMode:)(v33, v119, 0.0, 0.0, 0.0, 0.0);
      (*(void (**)(char *, uint64_t))(v31 + 8))(v33, v30);
      sub_1E428(v85, (uint64_t)v82, type metadata accessor for LegacyPDFCoverEffect);
      v87 = (uint64_t)v111;
      v88 = &v111[*(int *)(v108 + 36)];
      *(_QWORD *)v88 = swift_getKeyPath(&unk_1F6E78);
      v89 = sub_5440(&qword_25FB18);
      swift_storeEnumTagMultiPayload(v88, v89, 0);
      sub_21C88((uint64_t)v82, v87, type metadata accessor for LegacyPDFCoverEffect);
      v90 = v112;
      sub_167A4(v87, v112, &qword_26B190);
      v91 = v123;
      v92 = v107;
      sub_B3D0(v90, (uint64_t)v107 + *(int *)(v123 + 36), &qword_26B190);
      *v92 = v86;
      sub_B414(v90, &qword_26B190);
      sub_224DC(v85, type metadata accessor for LegacyPDFCoverEffect);
      v52 = &qword_26B198;
      v93 = (uint64_t)v92;
      v53 = v113;
      sub_167A4(v93, v113, &qword_26B198);
      v94 = v122;
      sub_B3D0(v53, v122, &qword_26B198);
      swift_storeEnumTagMultiPayload(v94, v120, 1);
      v95 = sub_1B3D5C();
      v96 = sub_1B3E08(&qword_26B200, &qword_26B198, &qword_26B208, &qword_26B190);
      _ConditionalContent<>.init(storage:)(v94, v121, v91, v95, v96);
    }
    v81 = v53;
  }
  else
  {
    v61 = (_QWORD *)((char *)v17 + *(int *)(v99 + 24));
    v62 = v44;
    *v61 = swift_getKeyPath(&unk_1F6E48);
    v63 = sub_5440(&qword_25E948);
    swift_storeEnumTagMultiPayload(v61, v63, 0);
    *v17 = xmmword_1F6BD0;
    v64 = v103;
    sub_21C88((uint64_t)v17, v103, type metadata accessor for AudiobookCoverEffect);
    (*(void (**)(char *, _QWORD, uint64_t))(v31 + 104))(v33, enum case for Image.ResizingMode.stretch(_:), v30);
    v65 = Image.resizable(capInsets:resizingMode:)(v33, v119, 0.0, 0.0, 0.0, 0.0);
    (*(void (**)(char *, uint64_t))(v31 + 8))(v33, v30);
    sub_1E428(v64, (uint64_t)v17, type metadata accessor for AudiobookCoverEffect);
    v66 = (uint64_t)v104;
    v67 = &v104[*(int *)(v102 + 36)];
    *(_QWORD *)v67 = swift_getKeyPath(&unk_1F6E78);
    v68 = sub_5440(&qword_25FB18);
    swift_storeEnumTagMultiPayload(v67, v68, 0);
    sub_21C88((uint64_t)v17, v66, type metadata accessor for AudiobookCoverEffect);
    v69 = v66;
    v70 = v105;
    sub_167A4(v69, v105, &qword_26B1A0);
    v71 = v116;
    v72 = v101;
    sub_B3D0(v70, (uint64_t)v101 + *(int *)(v116 + 36), &qword_26B1A0);
    *v72 = v65;
    sub_B414(v70, &qword_26B1A0);
    sub_224DC(v64, type metadata accessor for AudiobookCoverEffect);
    v52 = &qword_26B1A8;
    v73 = v109;
    sub_167A4((uint64_t)v72, v109, &qword_26B1A8);
    v74 = v115;
    sub_B3D0(v73, v115, &qword_26B1A8);
    swift_storeEnumTagMultiPayload(v74, v114, 1);
    v75 = sub_1B3E08(&qword_26B1E0, &qword_26B1D0, &qword_26B1E8, &qword_26B1C8);
    v76 = sub_1B3E08(&qword_26B1F0, &qword_26B1A8, &qword_26B1F8, &qword_26B1A0);
    v77 = (uint64_t)v117;
    _ConditionalContent<>.init(storage:)(v74, v62, v71, v75, v76);
    v78 = v122;
    sub_B3D0(v77, v122, &qword_26B1C0);
    swift_storeEnumTagMultiPayload(v78, v120, 0);
    v79 = sub_1B3D5C();
    v80 = sub_1B3E08(&qword_26B200, &qword_26B198, &qword_26B208, &qword_26B190);
    _ConditionalContent<>.init(storage:)(v78, v121, v123, v79, v80);
    sub_B414(v77, &qword_26B1C0);
    v81 = v73;
  }
  return sub_B414(v81, v52);
}

void sub_1B050C(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t (*v20)(_QWORD);
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t ObjCClassFromMetadata;
  id v26;
  NSString v27;
  id v28;
  id v29;
  NSString v30;
  unsigned __int8 v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  uint64_t v41;
  __int128 v42;
  char v43;
  char *v44;
  id v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  double v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _BYTE v66[48];
  __int128 v67;
  __int128 v68;
  char v69;
  uint64_t v70;
  char v71[8];
  uint64_t v72;
  _OWORD v73[2];
  uint64_t v74;

  v3 = v2;
  v64 = sub_5440(&qword_26B210);
  __chkstk_darwin(v64);
  v7 = (char *)&v58 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = sub_5440(&qword_26AFE8);
  v8 = __chkstk_darwin(v65);
  v10 = (char *)&v58 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v62 = (uint64_t)&v58 - v11;
  v58 = sub_5440(&qword_26B218);
  __chkstk_darwin(v58);
  v13 = (char *)&v58 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = sub_5440(&qword_26B220);
  v14 = __chkstk_darwin(v63);
  v59 = (uint64_t)&v58 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v60 = (uint64_t)&v58 - v16;
  v17 = type metadata accessor for CoverView(0);
  __chkstk_darwin(v17);
  v19 = (char *)&v58 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1E428(v2, (uint64_t)v19, v20);
  if (a1)
  {
    v21 = a1;
  }
  else
  {
    v61 = a2;
    CoverViewModel.placeholderImageName.getter();
    v23 = v22;
    v24 = type metadata accessor for BundleFinder();
    ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v24);
    v26 = objc_msgSend((id)objc_opt_self(NSBundle), "bundleForClass:", ObjCClassFromMetadata);
    v27 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v23);
    v21 = objc_msgSend((id)objc_opt_self(UIImage), "imageNamed:inBundle:", v27, v26);

    if (!v21)
    {
      __break(1u);
      return;
    }
    a2 = v61;
  }
  v28 = a1;
  sub_224DC((uint64_t)v19, type metadata accessor for CoverView);
  if (*(_BYTE *)(v3 + *(int *)(v17 + 44)) != 1)
    goto LABEL_12;
  if (qword_25DC10 != -1)
    swift_once(&qword_25DC10, sub_AD7D8);
  if (byte_2632E8 == 1
    && (v29 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults"),
        v30 = String._bridgeToObjectiveC()(),
        v31 = objc_msgSend(v29, "integerForKey:", v30),
        v29,
        v30,
        (v31 & 0x40) != 0))
  {
LABEL_12:
    sub_1AF1FC(v21, (uint64_t)v10);
    sub_B3D0((uint64_t)v10, (uint64_t)v7, &qword_26AFE8);
    swift_storeEnumTagMultiPayload(v7, v64, 1);
    v34 = sub_1B3E90();
    v35 = sub_2F608(&qword_26B028, &qword_26AFE8, (void (*)(void))sub_1B21E4, (void (*)(void))sub_1B2268);
    _ConditionalContent<>.init(storage:)(v7, v63, v65, v34, v35);

    v36 = (uint64_t)v10;
    v37 = &qword_26AFE8;
  }
  else
  {
    sub_1AF1FC(v21, v62);
    v32 = sub_1B0BF0();
    v61 = a2;
    if (v33)
    {
      *(_QWORD *)&v67 = v32;
      *((_QWORD *)&v67 + 1) = v33;
      AnyHashable.init<A>(_:)(&v67, &type metadata for String, &protocol witness table for String);
    }
    else
    {
      v74 = 0;
      memset(v73, 0, sizeof(v73));
    }
    v38 = v3 + *(int *)(v17 + 36);
    v39 = *(_QWORD *)(v38 + 8);
    v71[0] = *(_BYTE *)v38;
    v72 = v39;
    v40 = v21;
    v41 = sub_5440(&qword_2668E8);
    State.projectedValue.getter(&v67, v41);
    v42 = v67;
    v43 = v68;
    sub_B3D0((uint64_t)v73, (uint64_t)v71, &qword_25E530);
    v44 = &v13[*(int *)(v58 + 36)];
    *(_QWORD *)v44 = swift_getKeyPath(&unk_1F6EF0);
    v44[40] = 0;
    *((_QWORD *)v44 + 6) = swift_getKeyPath(&unk_1F6F18);
    v44[56] = 0;
    *((_QWORD *)v44 + 8) = swift_getKeyPath(&unk_1F6F40);
    v44[72] = 0;
    memset(v66, 0, 32);
    v66[32] = 1;
    swift_retain(v42);
    swift_retain(*((_QWORD *)&v42 + 1));
    v45 = v40;
    v46 = sub_5440(&qword_25E6D8);
    State.init(wrappedValue:)(&v67, v66, v46);
    v47 = v69;
    v48 = v70;
    v49 = v68;
    *((_OWORD *)v44 + 5) = v67;
    *((_OWORD *)v44 + 6) = v49;
    v44[112] = v47;
    *((_QWORD *)v44 + 15) = v48;
    sub_167A4((uint64_t)v71, (uint64_t)(v44 + 128), &qword_25E530);
    *((_QWORD *)v44 + 21) = v45;
    *((_OWORD *)v44 + 11) = v42;
    v44[192] = v43;
    v50 = v62;
    sub_B3D0(v62, (uint64_t)v13, &qword_26AFE8);
    swift_release(*((_QWORD *)&v42 + 1));
    swift_release(v42);

    sub_B414((uint64_t)v73, &qword_25E530);
    sub_B414(v50, &qword_26AFE8);
    v51 = *(_QWORD *)(v38 + 8);
    LOBYTE(v67) = *(_BYTE *)v38;
    *((_QWORD *)&v67 + 1) = v51;
    State.wrappedValue.getter(v73, v41);
    if (LOBYTE(v73[0]))
      v52 = 1.0;
    else
      v52 = 0.0;
    v53 = v59;
    sub_B3D0((uint64_t)v13, v59, &qword_26B218);
    v54 = v63;
    *(double *)(v53 + *(int *)(v63 + 36)) = v52;
    sub_B414((uint64_t)v13, &qword_26B218);
    v55 = v60;
    sub_167A4(v53, v60, &qword_26B220);
    sub_B3D0(v55, (uint64_t)v7, &qword_26B220);
    swift_storeEnumTagMultiPayload(v7, v64, 0);
    v56 = sub_1B3E90();
    v57 = sub_2F608(&qword_26B028, &qword_26AFE8, (void (*)(void))sub_1B21E4, (void (*)(void))sub_1B2268);
    _ConditionalContent<>.init(storage:)(v7, v54, v65, v56, v57);

    v36 = v55;
    v37 = &qword_26B220;
  }
  sub_B414(v36, v37);
}

uint64_t sub_1B0BF0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  _QWORD v17[5];

  v1 = sub_5440(&qword_25FAC0);
  __chkstk_darwin(v1);
  v3 = (char *)&v12 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for CoverView(0);
  sub_C4354(v0 + *(int *)(v4 + 40), (uint64_t)&v13);
  if (v16)
  {
    sub_C4388((uint64_t)&v13);
    return 0;
  }
  else
  {
    sub_AC68(&v13, (uint64_t)v17);
    v6 = sub_31EB0((uint64_t)v3);
    __chkstk_darwin(v6);
    *(&v12 - 2) = (uint64_t)v17;
    v5 = sub_1AEC84((void (*)(uint64_t *__return_ptr, char *))sub_1B3FB8);
    v8 = v7;
    sub_B414((uint64_t)v3, &qword_25FAC0);
    sub_BD00((uint64_t)v17, (uint64_t)&v13);
    if (!v8)
    {
      v9 = v14;
      v10 = v15;
      sub_5480(&v13, v14);
      v5 = ContentInfo.id.getter(v9, *(_QWORD *)(v10 + 8));
    }
    _s7BooksUI13AnyPagedFrameVwxx_0(v17);
    _s7BooksUI13AnyPagedFrameVwxx_0(&v13);
  }
  return v5;
}

void CoverView.body.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  id v20;
  char *v21;
  NSString v22;
  unsigned __int8 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __n128 v35;
  void (*v36)(void *@<X0>, uint64_t@<X8>);
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t ObjCClassFromMetadata;
  id v54;
  NSString v55;
  id v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void (*v77)(void *@<X0>, uint64_t@<X8>);
  uint64_t v78;
  uint64_t v79;
  void (*v80)(void *@<X0>, uint64_t@<X8>);
  uint64_t v81;
  char v82;

  v2 = v1;
  v71 = a1;
  v65 = sub_5440(&qword_26AFE8);
  __chkstk_darwin(v65);
  v66 = (uint64_t)&v63 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v70 = sub_5440(&qword_26AFF0);
  v4 = __chkstk_darwin(v70);
  v64 = (char *)&v63 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v7 = (char *)&v63 - v6;
  v8 = sub_5440(&qword_26AFF8);
  __chkstk_darwin(v8);
  v10 = (char *)&v63 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for AccessibilityTraits(0);
  v73 = *(_QWORD *)(v11 - 8);
  v74 = v11;
  __chkstk_darwin(v11);
  v72 = (char *)&v63 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for CoverView(0);
  v67 = *(_QWORD *)(v13 - 8);
  v14 = *(_QWORD *)(v67 + 64);
  __chkstk_darwin(v13);
  v15 = (char *)&v63 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v75 = sub_5440(&qword_26B000);
  v16 = __chkstk_darwin(v75);
  v68 = (char *)&v63 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v69 = (uint64_t)&v63 - v18;
  if (qword_25DC10 != -1)
    swift_once(&qword_25DC10, sub_AD7D8);
  if (byte_2632E8 != 1)
    goto LABEL_5;
  v19 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v63 = v8;
  v20 = v19;
  v21 = v7;
  v22 = String._bridgeToObjectiveC()();
  v23 = objc_msgSend(v20, "integerForKey:", v22);

  v8 = v63;
  v2 = v1;
  v24 = (uint64_t)v21;
  v15 = (char *)&v63 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((v23 & 8) == 0)
  {
LABEL_5:
    sub_C4354(v2 + *(int *)(v13 + 40), (uint64_t)&v77);
    if (v82)
    {
      sub_C4388((uint64_t)&v77);
      v25 = 0;
    }
    else
    {
      _s7BooksUI13AnyPagedFrameVwxx_0(&v77);
      v25 = sub_1B13B8();
    }
    v26 = v67;
    sub_1E428(v2, (uint64_t)v15, type metadata accessor for CoverView);
    v27 = *(unsigned __int8 *)(v26 + 80);
    v28 = (v27 + 16) & ~v27;
    v29 = swift_allocObject(&unk_259720, v28 + v14, v27 | 7);
    sub_21C88((uint64_t)v15, v29 + v28, type metadata accessor for CoverView);
    v30 = type metadata accessor for ImageResourceLoader(0);
    v31 = swift_allocObject(v30, *(unsigned int *)(v30 + 48), *(unsigned __int16 *)(v30 + 52));
    *(_QWORD *)(v31 + 16) = 0;
    v32 = sub_5440(&qword_2600E0);
    v33 = swift_allocObject(v32, 32, 7);
    *(_DWORD *)(v33 + 28) = 0;
    *(_QWORD *)(v33 + 16) = 0;
    *(_BYTE *)(v33 + 24) = 0;
    *(_QWORD *)(v31 + 24) = v33;
    swift_retain(v29);
    ObservationRegistrar.init()(v34);
    v76 = v31;
    State.init(wrappedValue:)(&v77, &v76, v30);
    v35 = swift_release(v29);
    v36 = v77;
    v37 = v78;
    v77 = sub_1B2054;
    v78 = v29;
    v79 = v25;
    v80 = v36;
    v81 = v37;
    v38 = v72;
    static AccessibilityTraits.isImage.getter(v35);
    v39 = sub_5440(&qword_26B008);
    v40 = sub_7FD8(&qword_26B010, &qword_26B008, (uint64_t)&protocol conformance descriptor for AsyncResourceImage<A>);
    v41 = (uint64_t)v68;
    View.accessibilityRemoveTraits(_:)(v38, v39, v40);
    (*(void (**)(char *, uint64_t))(v73 + 8))(v38, v74);
    v42 = v78;
    v43 = v79;
    v44 = v81;
    swift_release(v80);
    swift_release(v42);
    swift_unknownObjectRelease(v43);
    swift_release(v44);
    v45 = v69;
    sub_167A4(v41, v69, &qword_26B000);
    sub_B3D0(v45, (uint64_t)v10, &qword_26B000);
    swift_storeEnumTagMultiPayload(v10, v8, 0);
    v46 = sub_1B20A4();
    v47 = sub_1B2140();
    _ConditionalContent<>.init(storage:)(v10, v75, v70, v46, v47);
    v48 = v45;
    v49 = &qword_26B000;
    goto LABEL_11;
  }
  CoverViewModel.placeholderImageName.getter();
  v51 = v50;
  v52 = type metadata accessor for BundleFinder();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v52);
  v54 = objc_msgSend((id)objc_opt_self(NSBundle), "bundleForClass:", ObjCClassFromMetadata);
  v55 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v51);
  v56 = objc_msgSend((id)objc_opt_self(UIImage), "imageNamed:inBundle:", v55, v54);

  if (v56)
  {
    v57 = v66;
    sub_1AF1FC(v56, v66);

    v58 = v72;
    ((void (*)(void))static AccessibilityTraits.isImage.getter)();
    v59 = sub_2F608(&qword_26B028, &qword_26AFE8, (void (*)(void))sub_1B21E4, (void (*)(void))sub_1B2268);
    v60 = (uint64_t)v64;
    View.accessibilityRemoveTraits(_:)(v58, v65, v59);
    (*(void (**)(char *, uint64_t))(v73 + 8))(v58, v74);
    sub_B414(v57, &qword_26AFE8);
    sub_167A4(v60, v24, &qword_26AFF0);
    sub_B3D0(v24, (uint64_t)v10, &qword_26AFF0);
    swift_storeEnumTagMultiPayload(v10, v63, 1);
    v61 = sub_1B20A4();
    v62 = sub_1B2140();
    _ConditionalContent<>.init(storage:)(v10, v75, v70, v61, v62);
    v48 = v24;
    v49 = &qword_26AFF0;
LABEL_11:
    sub_B414(v48, v49);
    return;
  }
  __break(1u);
}

uint64_t sub_1B13B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  double v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  double v19;
  _BYTE v21[4];
  _QWORD v22[2];
  BOOL v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  double v28;
  char v29;
  _QWORD v30[3];
  uint64_t v31;
  uint64_t v32;

  v1 = v0;
  v2 = type metadata accessor for CoverView(0);
  sub_C4354(v0 + *(int *)(v2 + 40), (uint64_t)&v24);
  if (v29)
  {
    sub_C4388((uint64_t)&v24);
    return 0;
  }
  else
  {
    v4 = v27;
    v5 = v28;
    sub_AC68(&v24, (uint64_t)v30);
    v6 = v31;
    v7 = v32;
    sub_5480(v30, v31);
    v8 = AssetInfo.coverURLString.getter(v6, v7);
    v10 = v9;
    sub_BD00((uint64_t)v30, (uint64_t)&v24);
    if (v10)
    {
      v11 = v10;
    }
    else
    {
      v12 = v25;
      v13 = v26;
      sub_5480(&v24, v25);
      v8 = ContentInfo.id.getter(v12, *(_QWORD *)(v13 + 8));
      v11 = v14;
    }
    _s7BooksUI13AnyPagedFrameVwxx_0(&v24);
    sub_315E0((uint64_t)&v24);
    v15 = v25;
    v16 = v26;
    sub_5480(&v24, v25);
    v22[0] = v8;
    v22[1] = v11;
    v23 = v10 != 0;
    v17 = *(_QWORD *)(v1 + 48);
    v18 = *(_BYTE *)(v1 + 56);
    sub_F9E4(v17, v18);
    v19 = sub_30784(v17, v18);
    sub_BE0C(v17, v18);
    sub_1B17AC((uint64_t)v21);
    v3 = (*(uint64_t (**)(_QWORD *, _BYTE *, uint64_t, uint64_t, double, double, double))(v16 + 16))(v22, v21, v15, v16, v4, v5, v19);
    sub_224D4(v8, v11);
    _s7BooksUI13AnyPagedFrameVwxx_0(&v24);
    _s7BooksUI13AnyPagedFrameVwxx_0(v30);
  }
  return v3;
}

uint64_t sub_1B1580@<X0>(_QWORD *a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::String v6;
  uint64_t v7;
  uint64_t v8;
  Swift::String v9;
  void *object;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;

  v3 = a1[3];
  v4 = a1[4];
  sub_5480(a1, v3);
  v12 = ContentInfo.id.getter(v3, *(_QWORD *)(v4 + 8));
  v13 = v5;
  v6._countAndFlagsBits = 45;
  v6._object = (void *)0xE100000000000000;
  String.append(_:)(v6);
  v7 = type metadata accessor for UUID(0);
  v8 = sub_6FD0(&qword_26B248, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v9._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v7, v8);
  object = v9._object;
  String.append(_:)(v9);
  result = swift_bridgeObjectRelease(object);
  *a2 = v12;
  a2[1] = v13;
  return result;
}

uint64_t sub_1B164C()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  void *v4;
  uint64_t KeyPath;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  _QWORD v18[5];

  v1 = type metadata accessor for CoverView(0);
  sub_C4354(v0 + *(int *)(v1 + 40), (uint64_t)&v14);
  if (v17)
  {
    sub_C4388((uint64_t)&v14);
    v2 = 0;
    return v2 & 1;
  }
  sub_AC68(&v14, (uint64_t)v18);
  v3 = v0 + *(int *)(v1 + 32);
  v4 = *(void **)v3;
  if (*(_QWORD *)v3)
  {
    KeyPath = swift_getKeyPath(&unk_1F6EA8);
    v6 = swift_getKeyPath(&unk_1F6ED0);
    v7 = v4;
    static Published.subscript.getter(&v14, v7, KeyPath, v6);

    swift_release(KeyPath);
    swift_release(v6);
    LOBYTE(KeyPath) = v14;
    sub_BD00((uint64_t)v18, (uint64_t)&v14);
    if ((KeyPath & 1) != 0)
    {
      v2 = 0;
    }
    else
    {
      v8 = v15;
      v9 = v16;
      sub_5480(&v14, v15);
      v2 = AssetInfo.isExplicit.getter(v8, v9);
    }
    _s7BooksUI13AnyPagedFrameVwxx_0(v18);
    _s7BooksUI13AnyPagedFrameVwxx_0(&v14);
    return v2 & 1;
  }
  v11 = *(_QWORD *)(v3 + 8);
  v12 = type metadata accessor for ProfileRestrictions(0);
  v13 = sub_6FD0((unint64_t *)&qword_26AF00, type metadata accessor for ProfileRestrictions, (uint64_t)&protocol conformance descriptor for ProfileRestrictions);
  result = EnvironmentObject.error()(0, v11, v12, v13);
  __break(1u);
  return result;
}

uint64_t sub_1B17AC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  void (*v24)(char *, uint64_t);
  char v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  char v30;
  int v31;
  int v32;
  unsigned int v33;
  int v34;
  uint64_t v35;
  __int128 v36[3];
  char v37;
  _QWORD v38[3];
  uint64_t v39;
  uint64_t v40;

  v2 = v1;
  v4 = type metadata accessor for ColorScheme(0);
  v35 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for ColorConstants.Environment(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for ColorConstants(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for BooksFeatureFlag(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD, uint64_t))(v14 + 104))(v16, enum case for BooksFeatureFlag.coverEffectV2(_:), v13);
  v17 = sub_6FD0(&qword_263370, (uint64_t (*)(uint64_t))&type metadata accessor for BooksFeatureFlag, (uint64_t)&protocol conformance descriptor for BooksFeatureFlag);
  v18 = sub_7FD8((unint64_t *)&qword_263378, &qword_263380, (uint64_t)&protocol conformance descriptor for StaticFeatureFlagsKey<A>);
  LOBYTE(v17) = RawRepresentable<>.isEnabled.getter(v13, v17, v18);
  result = (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  if ((v17 & 1) != 0)
  {
    *(_WORD *)a1 = -772;
    *(_BYTE *)(a1 + 2) = -2;
  }
  else
  {
    v20 = v2 + *(int *)(type metadata accessor for CoverView(0) + 40);
    sub_C4354(v20, (uint64_t)v36);
    if (v37)
    {
      result = sub_C4388((uint64_t)v36);
      *(_BYTE *)(a1 + 2) = -2;
      *(_WORD *)a1 = -772;
    }
    else
    {
      sub_AC68(v36, (uint64_t)v38);
      _s7BooksUI18BuyButtonExternalsV6colorsAA14ColorConstantsVvg_0((uint64_t)v12);
      sub_1E428((uint64_t)v12, (uint64_t)v9, type metadata accessor for ColorConstants.Environment);
      v21 = v35;
      (*(void (**)(char *, _QWORD, uint64_t))(v35 + 104))(v6, enum case for ColorScheme.dark(_:), v4);
      v22 = sub_6FD0((unint64_t *)&qword_25FD60, (uint64_t (*)(uint64_t))&type metadata accessor for ColorScheme, (uint64_t)&protocol conformance descriptor for ColorScheme);
      v23 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v6, v4, v22);
      v24 = *(void (**)(char *, uint64_t))(v21 + 8);
      v24(v6, v4);
      v24(v9, v4);
      sub_224DC((uint64_t)v12, type metadata accessor for ColorConstants);
      v25 = v23 ^ 1;
      v26 = v39;
      v27 = v40;
      sub_5480(v38, v39);
      v28 = dispatch thunk of AssetInfo.assetType.getter(v26, v27);
      if (v28)
      {
        if (v28 == 1)
        {
          v29 = *(unsigned __int8 *)(v20 + 80);
          v30 = sub_1B164C();
          if ((v23 & 1) != 0)
            v31 = 0;
          else
            v31 = 256;
          if ((v30 & 1) != 0)
            v32 = 0x10000;
          else
            v32 = 0;
          v33 = v31 | v29 | v32;
        }
        else
        {
          v33 = v25 & 1 | 0xFF800000;
        }
      }
      else
      {
        if ((sub_1B164C() & 1) != 0)
          v34 = 256;
        else
          v34 = 0;
        v33 = v34 & 0xFFFFFFFE | v25 & 1 | 0x400000;
      }
      *(_WORD *)a1 = v33;
      *(_BYTE *)(a1 + 2) = BYTE2(v33);
      return _s7BooksUI13AnyPagedFrameVwxx_0(v38);
    }
  }
  return result;
}

__n128 sub_1B1B10@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  id *v2;
  unint64_t v4;
  unint64_t v5;
  unsigned __int8 v6;
  id v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned __int8 v11;
  __n128 result;
  __n128 v13;
  _QWORD v14[2];
  unsigned __int8 v15;

  v13 = *a1;
  v4 = a1[1].n128_u64[0];
  v5 = a1[1].n128_u64[1];
  v6 = a1[2].n128_u8[0];
  v7 = *v2;
  v8 = sub_5440(&qword_26B078);
  Binding.projectedValue.getter(v14, v8);
  v9 = v14[0];
  v10 = v14[1];
  v11 = v15;
  result = v13;
  *a2 = v13;
  a2[1].n128_u64[0] = v4;
  a2[1].n128_u64[1] = v5;
  a2[2].n128_u64[0] = (unint64_t)v7;
  a2[2].n128_u8[8] = v6;
  a2[3].n128_u64[0] = v9;
  a2[3].n128_u64[1] = v10;
  a2[4].n128_u8[0] = v11;
  return result;
}

id CoverGeometryReference.image.getter()
{
  uint64_t v0;

  return *(id *)(v0 + 32);
}

uint64_t CoverGeometryReference.isVisible.getter()
{
  uint64_t v0;
  uint64_t v2;

  v0 = sub_5440(&qword_26B078);
  Binding.wrappedValue.getter(&v2, v0);
  return v2;
}

_QWORD *sub_1B1C00@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v4;

  v2 = sub_5440(&qword_26B078);
  result = Binding.wrappedValue.getter(&v4, v2);
  *a1 = v4;
  return result;
}

uint64_t sub_1B1C54(char *a1, uint64_t a2)
{
  char v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v2 = *a1;
  v3 = *(_QWORD *)(a2 + 56);
  v4 = *(_BYTE *)(a2 + 64);
  v8 = *(_QWORD *)(a2 + 48);
  v9 = v3;
  v10 = v4;
  v7 = v2;
  v5 = sub_5440(&qword_26B078);
  return Binding.wrappedValue.setter(&v7, v5);
}

uint64_t CoverGeometryReference.isVisible.setter(char a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v2 = *(_QWORD *)(v1 + 56);
  v3 = *(_BYTE *)(v1 + 64);
  v7 = *(_QWORD *)(v1 + 48);
  v8 = v2;
  v9 = v3;
  v6 = a1;
  v4 = sub_5440(&qword_26B078);
  return Binding.wrappedValue.setter(&v6, v4);
}

void (*CoverGeometryReference.isVisible.modify(_QWORD *a1))(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v4 = *(_QWORD *)(v1 + 48);
  v5 = *(_QWORD *)(v1 + 56);
  v3[3] = v4;
  v3[4] = v5;
  v6 = *(_BYTE *)(v1 + 64);
  *((_BYTE *)v3 + 19) = v6;
  *v3 = v4;
  v3[1] = v5;
  *((_BYTE *)v3 + 16) = v6;
  swift_retain(v4);
  swift_retain(v5);
  v7 = sub_5440(&qword_26B078);
  v3[5] = v7;
  Binding.wrappedValue.getter((_QWORD *)((char *)v3 + 17), v7);
  return sub_1B1D7C;
}

void sub_1B1D7C(uint64_t a1)
{
  _QWORD *v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;

  v1 = *(_QWORD **)a1;
  v2 = *(_BYTE *)(*(_QWORD *)a1 + 17);
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 40);
  v5 = *(_BYTE *)(*(_QWORD *)a1 + 19);
  v6 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  *v1 = v6;
  v1[1] = v4;
  *((_BYTE *)v1 + 16) = v5;
  *((_BYTE *)v1 + 18) = v2;
  Binding.wrappedValue.setter((char *)v1 + 18, v3);
  swift_release(v6);
  swift_release(v4);
  free(v1);
}

uint64_t CoverGeometryReference.$isVisible.getter()
{
  uint64_t v0;
  uint64_t v2;

  v0 = sub_5440(&qword_26B078);
  Binding.projectedValue.getter(&v2, v0);
  return v2;
}

uint64_t type metadata accessor for CoverView(uint64_t a1)
{
  uint64_t result;

  result = qword_26B0D8;
  if (!qword_26B0D8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CoverView);
  return result;
}

_QWORD *sub_1B1E70@<X0>(_QWORD *a1@<X8>)
{
  unint64_t v2;

  v2 = sub_7CA84();
  return EnvironmentValues.subscript.getter(a1, &type metadata for ReferenceIdKey, &type metadata for ReferenceIdKey, v2);
}

uint64_t sub_1B1EB0()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v1 = (int *)type metadata accessor for CoverView(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v0 + v4;
  if ((*(_BYTE *)(v0 + v4 + 40) & 1) != 0)
    _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)(v0 + v4));
  else
    swift_release(*(_QWORD *)v6);
  sub_BE0C(*(_QWORD *)(v6 + 48), *(_BYTE *)(v6 + 56));
  v7 = (_QWORD *)(v6 + v1[6]);
  v8 = sub_5440(&qword_25F1E8);
  if (swift_getEnumCaseMultiPayload(v7, v8) == 1)
  {
    v9 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v7, v9);
  }
  else
  {
    swift_release(*v7);
  }
  v10 = (_QWORD *)(v6 + v1[7]);
  v11 = sub_5440(&qword_25F758);
  if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
  {
    v12 = type metadata accessor for UUID(0);
    v13 = *(_QWORD *)(v12 - 8);
    if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v13 + 48))(v10, 1, v12))
      (*(void (**)(_QWORD *, uint64_t))(v13 + 8))(v10, v12);
  }
  else
  {
    swift_release(*v10);
  }

  swift_release(*(_QWORD *)(v6 + v1[9] + 8));
  v14 = v6 + v1[10];
  if (!*(_BYTE *)(v14 + 56))
    _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)v14);
  swift_bridgeObjectRelease(*(_QWORD *)(v14 + 104));
  v15 = *(_QWORD *)(v14 + 120);
  if (v15)
  {
    swift_bridgeObjectRelease(v15);
    swift_bridgeObjectRelease(*(_QWORD *)(v14 + 136));
    swift_bridgeObjectRelease(*(_QWORD *)(v14 + 160));
  }
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

void sub_1B2054(void *a1@<X0>, uint64_t a2@<X8>)
{
  type metadata accessor for CoverView(0);
  sub_1B050C(a1, a2);
}

unint64_t sub_1B20A4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_26B018;
  if (!qword_26B018)
  {
    v1 = sub_7EF8(&qword_26B000);
    sub_7FD8(&qword_26B010, &qword_26B008, (uint64_t)&protocol conformance descriptor for AsyncResourceImage<A>);
    sub_6FD0((unint64_t *)&qword_25EEA0, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_26B018);
  }
  return result;
}

unint64_t sub_1B2140()
{
  unint64_t result;
  uint64_t v1;

  result = qword_26B020;
  if (!qword_26B020)
  {
    v1 = sub_7EF8(&qword_26AFF0);
    sub_2F608(&qword_26B028, &qword_26AFE8, (void (*)(void))sub_1B21E4, (void (*)(void))sub_1B2268);
    sub_6FD0((unint64_t *)&qword_25EEA0, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_26B020);
  }
  return result;
}

unint64_t sub_1B21E4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_26B030;
  if (!qword_26B030)
  {
    v1 = sub_7EF8(&qword_26B038);
    sub_7FD8(&qword_26B040, &qword_26B048, (uint64_t)&protocol conformance descriptor for GeometryReader<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_26B030);
  }
  return result;
}

unint64_t sub_1B2268()
{
  unint64_t result;
  uint64_t v1;

  result = qword_26B050;
  if (!qword_26B050)
  {
    v1 = sub_7EF8(&qword_26B058);
    sub_6FD0(&qword_26B060, type metadata accessor for AlignmentImageView, (uint64_t)&unk_1E3D04);
    sub_7FD8(&qword_26B068, &qword_26B070, (uint64_t)&protocol conformance descriptor for _AnimationModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_26B050);
  }
  return result;
}

uint64_t sub_1B2304(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &opaque type descriptor for <<opaque return type of CoverView.body>>, 1);
}

uint64_t initializeBufferWithCopyOfBuffer for CoverView(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v4;
  int v5;
  char v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  id v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v9 = *a2;
    *(_QWORD *)v4 = *a2;
    v4 = v9 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain(v9);
  }
  else
  {
    v7 = *((_BYTE *)a2 + 40);
    if ((v7 & 1) != 0)
    {
      v8 = *(_OWORD *)(a2 + 3);
      *(_OWORD *)(a1 + 24) = v8;
      (**(void (***)(uint64_t, uint64_t *))(v8 - 8))(a1, a2);
    }
    else
    {
      v10 = *a2;
      *(_QWORD *)v4 = *a2;
      swift_retain(v10);
    }
    *(_BYTE *)(v4 + 40) = v7;
    v11 = a2[6];
    v12 = *((_BYTE *)a2 + 56);
    sub_F9E4(v11, v12);
    *(_QWORD *)(v4 + 48) = v11;
    *(_BYTE *)(v4 + 56) = v12;
    v13 = a3[6];
    v14 = (uint64_t *)(v4 + v13);
    v15 = (uint64_t *)((char *)a2 + v13);
    v16 = sub_5440(&qword_25F1E8);
    if (swift_getEnumCaseMultiPayload(v15, v16) == 1)
    {
      v17 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v14, v15, v17);
      v18 = 1;
    }
    else
    {
      v19 = *v15;
      *v14 = *v15;
      swift_retain(v19);
      v18 = 0;
    }
    swift_storeEnumTagMultiPayload(v14, v16, v18);
    v20 = a3[7];
    v21 = (uint64_t *)(v4 + v20);
    v22 = (uint64_t *)((char *)a2 + v20);
    v23 = sub_5440(&qword_25F758);
    if (swift_getEnumCaseMultiPayload(v22, v23) == 1)
    {
      v24 = type metadata accessor for UUID(0);
      v25 = *(_QWORD *)(v24 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v25 + 48))(v22, 1, v24))
      {
        v26 = sub_5440(&qword_25FAC0);
        memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v25 + 16))(v21, v22, v24);
        (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v21, 0, 1, v24);
      }
      v28 = v21;
      v29 = v23;
      v30 = 1;
    }
    else
    {
      v27 = *v22;
      *v21 = *v22;
      swift_retain(v27);
      v28 = v21;
      v29 = v23;
      v30 = 0;
    }
    swift_storeEnumTagMultiPayload(v28, v29, v30);
    v31 = a3[8];
    v32 = a3[9];
    v33 = (_QWORD *)(v4 + v31);
    v34 = (uint64_t)a2 + v31;
    v36 = *(void **)v34;
    v35 = *(_QWORD *)(v34 + 8);
    *v33 = v36;
    v33[1] = v35;
    v37 = v4 + v32;
    v38 = (uint64_t)a2 + v32;
    *(_BYTE *)v37 = *(_BYTE *)v38;
    v39 = *(_QWORD *)(v38 + 8);
    *(_QWORD *)(v37 + 8) = v39;
    v40 = a3[10];
    v41 = v4 + v40;
    v42 = (uint64_t)a2 + v40;
    v43 = *((unsigned __int8 *)a2 + v40 + 56);
    v44 = v36;
    swift_retain(v39);
    if (v43)
    {
      v45 = *(_OWORD *)(v42 + 16);
      *(_OWORD *)v41 = *(_OWORD *)v42;
      *(_OWORD *)(v41 + 16) = v45;
      *(_OWORD *)(v41 + 32) = *(_OWORD *)(v42 + 32);
      *(_OWORD *)(v41 + 41) = *(_OWORD *)(v42 + 41);
    }
    else
    {
      v46 = *(_OWORD *)(v42 + 24);
      *(_OWORD *)(v41 + 24) = v46;
      (**(void (***)(uint64_t, uint64_t))(v46 - 8))(v41, v42);
      *(_OWORD *)(v41 + 40) = *(_OWORD *)(v42 + 40);
      *(_BYTE *)(v41 + 56) = 0;
    }
    *(_OWORD *)(v41 + 64) = *(_OWORD *)(v42 + 64);
    *(_BYTE *)(v41 + 80) = *(_BYTE *)(v42 + 80);
    *(_OWORD *)(v41 + 88) = *(_OWORD *)(v42 + 88);
    v47 = *(_QWORD *)(v42 + 104);
    *(_QWORD *)(v41 + 104) = v47;
    v48 = *(_QWORD *)(v42 + 120);
    swift_bridgeObjectRetain(v47);
    if (v48)
    {
      *(_QWORD *)(v41 + 112) = *(_QWORD *)(v42 + 112);
      *(_QWORD *)(v41 + 120) = v48;
      v49 = *(_QWORD *)(v42 + 136);
      *(_QWORD *)(v41 + 128) = *(_QWORD *)(v42 + 128);
      *(_QWORD *)(v41 + 136) = v49;
      *(_BYTE *)(v41 + 144) = *(_BYTE *)(v42 + 144);
      v50 = *(_QWORD *)(v42 + 152);
      v51 = *(_QWORD *)(v42 + 160);
      *(_QWORD *)(v41 + 152) = v50;
      *(_QWORD *)(v41 + 160) = v51;
      swift_bridgeObjectRetain(v48);
      swift_bridgeObjectRetain(v49);
      swift_bridgeObjectRetain(v51);
    }
    else
    {
      v52 = *(_OWORD *)(v42 + 128);
      *(_OWORD *)(v41 + 112) = *(_OWORD *)(v42 + 112);
      *(_OWORD *)(v41 + 128) = v52;
      *(_OWORD *)(v41 + 144) = *(_OWORD *)(v42 + 144);
      *(_QWORD *)(v41 + 160) = *(_QWORD *)(v42 + 160);
    }
    *(_BYTE *)(v4 + a3[11]) = *((_BYTE *)a2 + a3[11]);
  }
  return v4;
}

uint64_t destroy for CoverView(_QWORD *a1, int *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t result;

  if ((a1[5] & 1) != 0)
    _s7BooksUI13AnyPagedFrameVwxx_0(a1);
  else
    swift_release(*a1);
  sub_BE0C(a1[6], *((_BYTE *)a1 + 56));
  v4 = (_QWORD *)((char *)a1 + a2[6]);
  v5 = sub_5440(&qword_25F1E8);
  if (swift_getEnumCaseMultiPayload(v4, v5) == 1)
  {
    v6 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v4, v6);
  }
  else
  {
    swift_release(*v4);
  }
  v7 = (_QWORD *)((char *)a1 + a2[7]);
  v8 = sub_5440(&qword_25F758);
  if (swift_getEnumCaseMultiPayload(v7, v8) == 1)
  {
    v9 = type metadata accessor for UUID(0);
    v10 = *(_QWORD *)(v9 - 8);
    if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v10 + 48))(v7, 1, v9))
      (*(void (**)(_QWORD *, uint64_t))(v10 + 8))(v7, v9);
  }
  else
  {
    swift_release(*v7);
  }

  swift_release(*(_QWORD *)((char *)a1 + a2[9] + 8));
  v11 = (char *)a1 + a2[10];
  if (!v11[56])
    _s7BooksUI13AnyPagedFrameVwxx_0(v11);
  swift_bridgeObjectRelease(*((_QWORD *)v11 + 13));
  result = *((_QWORD *)v11 + 15);
  if (result)
  {
    swift_bridgeObjectRelease(result);
    swift_bridgeObjectRelease(*((_QWORD *)v11 + 17));
    return swift_bridgeObjectRelease(*((_QWORD *)v11 + 20));
  }
  return result;
}

uint64_t initializeWithCopy for CoverView(uint64_t a1, uint64_t *a2, int *a3)
{
  char v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  id v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;

  v6 = *((_BYTE *)a2 + 40);
  if ((v6 & 1) != 0)
  {
    v7 = *(_OWORD *)(a2 + 3);
    *(_OWORD *)(a1 + 24) = v7;
    (**(void (***)(uint64_t, uint64_t *))(v7 - 8))(a1, a2);
  }
  else
  {
    v8 = *a2;
    *(_QWORD *)a1 = *a2;
    swift_retain(v8);
  }
  *(_BYTE *)(a1 + 40) = v6;
  v9 = a2[6];
  v10 = *((_BYTE *)a2 + 56);
  sub_F9E4(v9, v10);
  *(_QWORD *)(a1 + 48) = v9;
  *(_BYTE *)(a1 + 56) = v10;
  v11 = a3[6];
  v12 = (uint64_t *)(a1 + v11);
  v13 = (uint64_t *)((char *)a2 + v11);
  v14 = sub_5440(&qword_25F1E8);
  if (swift_getEnumCaseMultiPayload(v13, v14) == 1)
  {
    v15 = type metadata accessor for ColorScheme(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v12, v13, v15);
    v16 = 1;
  }
  else
  {
    v17 = *v13;
    *v12 = *v13;
    swift_retain(v17);
    v16 = 0;
  }
  swift_storeEnumTagMultiPayload(v12, v14, v16);
  v18 = a3[7];
  v19 = (uint64_t *)(a1 + v18);
  v20 = (uint64_t *)((char *)a2 + v18);
  v21 = sub_5440(&qword_25F758);
  if (swift_getEnumCaseMultiPayload(v20, v21) == 1)
  {
    v22 = type metadata accessor for UUID(0);
    v23 = *(_QWORD *)(v22 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v23 + 48))(v20, 1, v22))
    {
      v24 = sub_5440(&qword_25FAC0);
      memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v23 + 16))(v19, v20, v22);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v19, 0, 1, v22);
    }
    v26 = v19;
    v27 = v21;
    v28 = 1;
  }
  else
  {
    v25 = *v20;
    *v19 = *v20;
    swift_retain(v25);
    v26 = v19;
    v27 = v21;
    v28 = 0;
  }
  swift_storeEnumTagMultiPayload(v26, v27, v28);
  v29 = a3[8];
  v30 = a3[9];
  v31 = (_QWORD *)(a1 + v29);
  v32 = (uint64_t)a2 + v29;
  v34 = *(void **)v32;
  v33 = *(_QWORD *)(v32 + 8);
  *v31 = v34;
  v31[1] = v33;
  v35 = a1 + v30;
  v36 = (uint64_t)a2 + v30;
  *(_BYTE *)v35 = *(_BYTE *)v36;
  v37 = *(_QWORD *)(v36 + 8);
  *(_QWORD *)(v35 + 8) = v37;
  v38 = a3[10];
  v39 = a1 + v38;
  v40 = (uint64_t)a2 + v38;
  v41 = *((unsigned __int8 *)a2 + v38 + 56);
  v42 = v34;
  swift_retain(v37);
  if (v41)
  {
    v43 = *(_OWORD *)(v40 + 16);
    *(_OWORD *)v39 = *(_OWORD *)v40;
    *(_OWORD *)(v39 + 16) = v43;
    *(_OWORD *)(v39 + 32) = *(_OWORD *)(v40 + 32);
    *(_OWORD *)(v39 + 41) = *(_OWORD *)(v40 + 41);
  }
  else
  {
    v44 = *(_OWORD *)(v40 + 24);
    *(_OWORD *)(v39 + 24) = v44;
    (**(void (***)(uint64_t, uint64_t))(v44 - 8))(v39, v40);
    *(_OWORD *)(v39 + 40) = *(_OWORD *)(v40 + 40);
    *(_BYTE *)(v39 + 56) = 0;
  }
  *(_OWORD *)(v39 + 64) = *(_OWORD *)(v40 + 64);
  *(_BYTE *)(v39 + 80) = *(_BYTE *)(v40 + 80);
  *(_OWORD *)(v39 + 88) = *(_OWORD *)(v40 + 88);
  v45 = *(_QWORD *)(v40 + 104);
  *(_QWORD *)(v39 + 104) = v45;
  v46 = *(_QWORD *)(v40 + 120);
  swift_bridgeObjectRetain(v45);
  if (v46)
  {
    *(_QWORD *)(v39 + 112) = *(_QWORD *)(v40 + 112);
    *(_QWORD *)(v39 + 120) = v46;
    v47 = *(_QWORD *)(v40 + 136);
    *(_QWORD *)(v39 + 128) = *(_QWORD *)(v40 + 128);
    *(_QWORD *)(v39 + 136) = v47;
    *(_BYTE *)(v39 + 144) = *(_BYTE *)(v40 + 144);
    v48 = *(_QWORD *)(v40 + 152);
    v49 = *(_QWORD *)(v40 + 160);
    *(_QWORD *)(v39 + 152) = v48;
    *(_QWORD *)(v39 + 160) = v49;
    swift_bridgeObjectRetain(v46);
    swift_bridgeObjectRetain(v47);
    swift_bridgeObjectRetain(v49);
  }
  else
  {
    v50 = *(_OWORD *)(v40 + 128);
    *(_OWORD *)(v39 + 112) = *(_OWORD *)(v40 + 112);
    *(_OWORD *)(v39 + 128) = v50;
    *(_OWORD *)(v39 + 144) = *(_OWORD *)(v40 + 144);
    *(_QWORD *)(v39 + 160) = *(_QWORD *)(v40 + 160);
  }
  *(_BYTE *)(a1 + a3[11]) = *((_BYTE *)a2 + a3[11]);
  return a1;
}

uint64_t assignWithCopy for CoverView(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  void *v33;
  void *v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 *v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _OWORD *v50;
  __int128 *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;

  if ((uint64_t *)a1 != a2)
  {
    sub_B414(a1, &qword_25EAE0);
    if ((a2[5] & 1) != 0)
    {
      v6 = a2[3];
      *(_QWORD *)(a1 + 24) = v6;
      *(_QWORD *)(a1 + 32) = a2[4];
      (**(void (***)(uint64_t, uint64_t *))(v6 - 8))(a1, a2);
      *(_BYTE *)(a1 + 40) = 1;
    }
    else
    {
      v7 = *a2;
      *(_QWORD *)a1 = *a2;
      *(_BYTE *)(a1 + 40) = 0;
      swift_retain(v7);
    }
  }
  v8 = a2[6];
  v9 = *((_BYTE *)a2 + 56);
  sub_F9E4(v8, v9);
  v10 = *(_QWORD *)(a1 + 48);
  v11 = *(_BYTE *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = v8;
  *(_BYTE *)(a1 + 56) = v9;
  sub_BE0C(v10, v11);
  if ((uint64_t *)a1 != a2)
  {
    v12 = a3[6];
    v13 = (uint64_t *)(a1 + v12);
    v14 = (uint64_t *)((char *)a2 + v12);
    sub_B414(a1 + v12, &qword_25F1E8);
    v15 = sub_5440(&qword_25F1E8);
    if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
    {
      v16 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v13, v14, v16);
      v17 = 1;
    }
    else
    {
      v18 = *v14;
      *v13 = *v14;
      swift_retain(v18);
      v17 = 0;
    }
    swift_storeEnumTagMultiPayload(v13, v15, v17);
    v19 = a3[7];
    v20 = (uint64_t *)(a1 + v19);
    v21 = (uint64_t *)((char *)a2 + v19);
    sub_B414(a1 + v19, &qword_25F758);
    v22 = sub_5440(&qword_25F758);
    if (swift_getEnumCaseMultiPayload(v21, v22) == 1)
    {
      v23 = type metadata accessor for UUID(0);
      v24 = *(_QWORD *)(v23 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v24 + 48))(v21, 1, v23))
      {
        v25 = sub_5440(&qword_25FAC0);
        memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v24 + 16))(v20, v21, v23);
        (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v20, 0, 1, v23);
      }
      v27 = v20;
      v28 = v22;
      v29 = 1;
    }
    else
    {
      v26 = *v21;
      *v20 = *v21;
      swift_retain(v26);
      v27 = v20;
      v28 = v22;
      v29 = 0;
    }
    swift_storeEnumTagMultiPayload(v27, v28, v29);
  }
  v30 = a3[8];
  v31 = (_QWORD *)(a1 + v30);
  v32 = (uint64_t)a2 + v30;
  v33 = *(void **)(a1 + v30);
  v34 = *(void **)((char *)a2 + v30);
  *v31 = v34;
  v35 = v34;

  v31[1] = *(_QWORD *)(v32 + 8);
  v36 = a3[9];
  v37 = a1 + v36;
  v38 = (uint64_t)a2 + v36;
  *(_BYTE *)v37 = *(_BYTE *)v38;
  v39 = *(_QWORD *)(v37 + 8);
  v40 = *(_QWORD *)(v38 + 8);
  *(_QWORD *)(v37 + 8) = v40;
  swift_retain(v40);
  swift_release(v39);
  v41 = a3[10];
  v42 = a1 + v41;
  v43 = (__int128 *)((char *)a2 + v41);
  if ((uint64_t *)a1 != a2)
  {
    sub_C4388(a1 + v41);
    if (*((_BYTE *)v43 + 56))
    {
      v44 = *v43;
      v45 = v43[1];
      v46 = v43[2];
      *(_OWORD *)(v42 + 41) = *(__int128 *)((char *)v43 + 41);
      *(_OWORD *)(v42 + 16) = v45;
      *(_OWORD *)(v42 + 32) = v46;
      *(_OWORD *)v42 = v44;
    }
    else
    {
      v47 = *((_QWORD *)v43 + 3);
      *(_QWORD *)(v42 + 24) = v47;
      *(_QWORD *)(v42 + 32) = *((_QWORD *)v43 + 4);
      (**(void (***)(uint64_t, __int128 *))(v47 - 8))(v42, v43);
      *(_OWORD *)(v42 + 40) = *(__int128 *)((char *)v43 + 40);
      *(_BYTE *)(v42 + 56) = 0;
    }
  }
  *(_QWORD *)(v42 + 64) = *((_QWORD *)v43 + 8);
  *(_QWORD *)(v42 + 72) = *((_QWORD *)v43 + 9);
  *(_BYTE *)(v42 + 80) = *((_BYTE *)v43 + 80);
  *(_QWORD *)(v42 + 88) = *((_QWORD *)v43 + 11);
  *(_QWORD *)(v42 + 96) = *((_QWORD *)v43 + 12);
  v48 = *((_QWORD *)v43 + 13);
  v49 = *(_QWORD *)(v42 + 104);
  *(_QWORD *)(v42 + 104) = v48;
  swift_bridgeObjectRetain(v48);
  swift_bridgeObjectRelease(v49);
  v50 = (_OWORD *)(v42 + 112);
  v51 = v43 + 7;
  v52 = *(_QWORD *)(v42 + 120);
  v53 = *((_QWORD *)v43 + 15);
  if (v52)
  {
    if (v53)
    {
      *(_QWORD *)(v42 + 112) = *((_QWORD *)v43 + 14);
      v54 = *((_QWORD *)v43 + 15);
      *(_QWORD *)(v42 + 120) = v54;
      swift_bridgeObjectRetain(v54);
      swift_bridgeObjectRelease(v52);
      *(_QWORD *)(v42 + 128) = *((_QWORD *)v43 + 16);
      v55 = *((_QWORD *)v43 + 17);
      v56 = *(_QWORD *)(v42 + 136);
      *(_QWORD *)(v42 + 136) = v55;
      swift_bridgeObjectRetain(v55);
      swift_bridgeObjectRelease(v56);
      *(_BYTE *)(v42 + 144) = *((_BYTE *)v43 + 144);
      *(_QWORD *)(v42 + 152) = *((_QWORD *)v43 + 19);
      v57 = *((_QWORD *)v43 + 20);
      v58 = *(_QWORD *)(v42 + 160);
      *(_QWORD *)(v42 + 160) = v57;
      swift_bridgeObjectRetain(v57);
      swift_bridgeObjectRelease(v58);
    }
    else
    {
      sub_C5344((_QWORD *)(v42 + 112));
      v63 = v43[8];
      v62 = v43[9];
      v64 = *v51;
      *(_QWORD *)(v42 + 160) = *((_QWORD *)v43 + 20);
      *(_OWORD *)(v42 + 128) = v63;
      *(_OWORD *)(v42 + 144) = v62;
      *v50 = v64;
    }
  }
  else if (v53)
  {
    *(_QWORD *)(v42 + 112) = *((_QWORD *)v43 + 14);
    v59 = *((_QWORD *)v43 + 15);
    *(_QWORD *)(v42 + 120) = v59;
    *(_QWORD *)(v42 + 128) = *((_QWORD *)v43 + 16);
    v60 = *((_QWORD *)v43 + 17);
    *(_QWORD *)(v42 + 136) = v60;
    *(_BYTE *)(v42 + 144) = *((_BYTE *)v43 + 144);
    *(_QWORD *)(v42 + 152) = *((_QWORD *)v43 + 19);
    v61 = *((_QWORD *)v43 + 20);
    *(_QWORD *)(v42 + 160) = v61;
    swift_bridgeObjectRetain(v59);
    swift_bridgeObjectRetain(v60);
    swift_bridgeObjectRetain(v61);
  }
  else
  {
    v65 = *v51;
    v66 = v43[8];
    v67 = v43[9];
    *(_QWORD *)(v42 + 160) = *((_QWORD *)v43 + 20);
    *(_OWORD *)(v42 + 128) = v66;
    *(_OWORD *)(v42 + 144) = v67;
    *v50 = v65;
  }
  *(_BYTE *)(a1 + a3[11]) = *((_BYTE *)a2 + a3[11]);
  return a1;
}

uint64_t initializeWithTake for CoverView(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v7 = a3[6];
  v8 = (void *)(a1 + v7);
  v9 = (const void *)(a2 + v7);
  v10 = sub_5440(&qword_25F1E8);
  if (swift_getEnumCaseMultiPayload(v9, v10) == 1)
  {
    v11 = type metadata accessor for ColorScheme(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v8, v9, v11);
    swift_storeEnumTagMultiPayload(v8, v10, 1);
  }
  else
  {
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  v12 = a3[7];
  v13 = (void *)(a1 + v12);
  v14 = (const void *)(a2 + v12);
  v15 = sub_5440(&qword_25F758);
  if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
  {
    v16 = type metadata accessor for UUID(0);
    v17 = *(_QWORD *)(v16 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v17 + 48))(v14, 1, v16))
    {
      v18 = sub_5440(&qword_25FAC0);
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v17 + 32))(v13, v14, v16);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v13, 0, 1, v16);
    }
    swift_storeEnumTagMultiPayload(v13, v15, 1);
  }
  else
  {
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  v19 = a3[9];
  *(_OWORD *)(a1 + a3[8]) = *(_OWORD *)(a2 + a3[8]);
  *(_OWORD *)(a1 + v19) = *(_OWORD *)(a2 + v19);
  v20 = a3[10];
  v21 = a3[11];
  v22 = a1 + v20;
  v23 = a2 + v20;
  v24 = *(_OWORD *)(v23 + 16);
  *(_OWORD *)v22 = *(_OWORD *)v23;
  *(_OWORD *)(v22 + 16) = v24;
  v25 = *(_OWORD *)(v23 + 80);
  *(_OWORD *)(v22 + 64) = *(_OWORD *)(v23 + 64);
  *(_OWORD *)(v22 + 80) = v25;
  v26 = *(_OWORD *)(v23 + 48);
  *(_OWORD *)(v22 + 32) = *(_OWORD *)(v23 + 32);
  *(_OWORD *)(v22 + 48) = v26;
  *(_QWORD *)(v22 + 160) = *(_QWORD *)(v23 + 160);
  v27 = *(_OWORD *)(v23 + 144);
  *(_OWORD *)(v22 + 128) = *(_OWORD *)(v23 + 128);
  *(_OWORD *)(v22 + 144) = v27;
  v28 = *(_OWORD *)(v23 + 112);
  *(_OWORD *)(v22 + 96) = *(_OWORD *)(v23 + 96);
  *(_OWORD *)(v22 + 112) = v28;
  *(_BYTE *)(a1 + v21) = *(_BYTE *)(a2 + v21);
  return a1;
}

uint64_t assignWithTake for CoverView(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  void *v11;
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;

  if (a1 != a2)
  {
    sub_B414(a1, &qword_25EAE0);
    v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v6;
    *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  }
  v7 = *(_BYTE *)(a2 + 56);
  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_BYTE *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = v7;
  sub_BE0C(v8, v9);
  if (a1 != a2)
  {
    v10 = a3[6];
    v11 = (void *)(a1 + v10);
    v12 = (const void *)(a2 + v10);
    sub_B414(a1 + v10, &qword_25F1E8);
    v13 = sub_5440(&qword_25F1E8);
    if (swift_getEnumCaseMultiPayload(v12, v13) == 1)
    {
      v14 = type metadata accessor for ColorScheme(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v11, v12, v14);
      swift_storeEnumTagMultiPayload(v11, v13, 1);
    }
    else
    {
      memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
    v15 = a3[7];
    v16 = (void *)(a1 + v15);
    v17 = (const void *)(a2 + v15);
    sub_B414(a1 + v15, &qword_25F758);
    v18 = sub_5440(&qword_25F758);
    if (swift_getEnumCaseMultiPayload(v17, v18) == 1)
    {
      v19 = type metadata accessor for UUID(0);
      v20 = *(_QWORD *)(v19 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v20 + 48))(v17, 1, v19))
      {
        v21 = sub_5440(&qword_25FAC0);
        memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v20 + 32))(v16, v17, v19);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v16, 0, 1, v19);
      }
      swift_storeEnumTagMultiPayload(v16, v18, 1);
    }
    else
    {
      memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
  }
  v22 = a3[8];
  v23 = (_QWORD *)(a1 + v22);
  v24 = (_QWORD *)(a2 + v22);
  v25 = *(void **)(a1 + v22);
  *v23 = *v24;

  v23[1] = v24[1];
  v26 = a3[9];
  v27 = a1 + v26;
  v28 = a2 + v26;
  *(_BYTE *)v27 = *(_BYTE *)v28;
  v29 = *(_QWORD *)(v27 + 8);
  *(_QWORD *)(v27 + 8) = *(_QWORD *)(v28 + 8);
  swift_release(v29);
  v30 = a3[10];
  v31 = a1 + v30;
  v32 = a2 + v30;
  if (a1 != a2)
  {
    sub_C4388(a1 + v30);
    v33 = *(_OWORD *)(v32 + 16);
    *(_OWORD *)v31 = *(_OWORD *)v32;
    *(_OWORD *)(v31 + 16) = v33;
    *(_OWORD *)(v31 + 32) = *(_OWORD *)(v32 + 32);
    *(_OWORD *)(v31 + 41) = *(_OWORD *)(v32 + 41);
  }
  *(_OWORD *)(v31 + 64) = *(_OWORD *)(v32 + 64);
  *(_BYTE *)(v31 + 80) = *(_BYTE *)(v32 + 80);
  *(_QWORD *)(v31 + 88) = *(_QWORD *)(v32 + 88);
  v34 = *(_QWORD *)(v32 + 104);
  v35 = *(_QWORD *)(v31 + 104);
  *(_QWORD *)(v31 + 96) = *(_QWORD *)(v32 + 96);
  *(_QWORD *)(v31 + 104) = v34;
  swift_bridgeObjectRelease(v35);
  v36 = *(_QWORD *)(v31 + 120);
  if (!v36)
    goto LABEL_19;
  v37 = *(_QWORD *)(v32 + 120);
  if (!v37)
  {
    sub_C5344((_QWORD *)(v31 + 112));
LABEL_19:
    v42 = *(_OWORD *)(v32 + 128);
    *(_OWORD *)(v31 + 112) = *(_OWORD *)(v32 + 112);
    *(_OWORD *)(v31 + 128) = v42;
    *(_OWORD *)(v31 + 144) = *(_OWORD *)(v32 + 144);
    *(_QWORD *)(v31 + 160) = *(_QWORD *)(v32 + 160);
    goto LABEL_20;
  }
  *(_QWORD *)(v31 + 112) = *(_QWORD *)(v32 + 112);
  *(_QWORD *)(v31 + 120) = v37;
  swift_bridgeObjectRelease(v36);
  v38 = *(_QWORD *)(v32 + 136);
  v39 = *(_QWORD *)(v31 + 136);
  *(_QWORD *)(v31 + 128) = *(_QWORD *)(v32 + 128);
  *(_QWORD *)(v31 + 136) = v38;
  swift_bridgeObjectRelease(v39);
  *(_BYTE *)(v31 + 144) = *(_BYTE *)(v32 + 144);
  v40 = *(_QWORD *)(v32 + 160);
  v41 = *(_QWORD *)(v31 + 160);
  *(_QWORD *)(v31 + 152) = *(_QWORD *)(v32 + 152);
  *(_QWORD *)(v31 + 160) = v40;
  swift_bridgeObjectRelease(v41);
LABEL_20:
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  return a1;
}

uint64_t getEnumTagSinglePayload for CoverView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1B344C);
}

uint64_t sub_1B344C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v12;

  v6 = sub_5440(&qword_25F210);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = a3[6];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v10 = sub_5440(&qword_261678);
  v7 = *(_QWORD *)(v10 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v10;
    v9 = a3[7];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v12 = *(_QWORD *)(a1 + a3[10] + 104);
  if (v12 >= 0xFFFFFFFF)
    LODWORD(v12) = -1;
  return (v12 + 1);
}

uint64_t storeEnumTagSinglePayload for CoverView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1B3508);
}

uint64_t sub_1B3508(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  v8 = sub_5440(&qword_25F210);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = a4[6];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
  }
  result = sub_5440(&qword_261678);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = a4[7];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
  }
  *(_QWORD *)(a1 + a4[10] + 104) = (a2 - 1);
  return result;
}

void sub_1B35B4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[8];

  v6[0] = ")";
  v6[1] = L"\t";
  sub_A6B14(319);
  if (v3 <= 0x3F)
  {
    v6[2] = *(_QWORD *)(v2 - 8) + 64;
    sub_627B0(319);
    if (v5 <= 0x3F)
    {
      v6[3] = *(_QWORD *)(v4 - 8) + 64;
      v6[4] = &unk_1F6D40;
      v6[5] = &unk_1F6D40;
      v6[6] = &unk_1F6D58;
      v6[7] = &unk_1F6D70;
      swift_initStructMetadata(a1, 256, 8, v6, a1 + 16);
    }
  }
}

uint64_t destroy for CoverGeometryReference(uint64_t a1)
{

  swift_release(*(_QWORD *)(a1 + 48));
  return swift_release(*(_QWORD *)(a1 + 56));
}

uint64_t initializeWithCopy for CoverGeometryReference(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  id v7;

  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  v4 = *(void **)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v4;
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v5 = *(_QWORD *)(a2 + 48);
  v6 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = v5;
  *(_QWORD *)(a1 + 56) = v6;
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  v7 = v4;
  swift_retain(v5);
  swift_retain(v6);
  return a1;
}

uint64_t assignWithCopy for CoverGeometryReference(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v4 = *(void **)(a2 + 32);
  v5 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v4;
  v6 = v4;

  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v7 = *(_QWORD *)(a1 + 48);
  v8 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 48) = v8;
  swift_retain(v8);
  swift_release(v7);
  v9 = *(_QWORD *)(a2 + 56);
  v10 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v9;
  swift_retain(v9);
  swift_release(v10);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  return a1;
}

uint64_t assignWithTake for CoverGeometryReference(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  void *v5;
  uint64_t v6;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);

  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  swift_release(*(_QWORD *)(a1 + 48));
  v6 = *(_QWORD *)(a1 + 56);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_release(v6);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  return a1;
}

uint64_t getEnumTagSinglePayload for CoverGeometryReference(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 65))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CoverGeometryReference(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 64) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 65) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 32) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 65) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for CoverGeometryReference()
{
  return &type metadata for CoverGeometryReference;
}

uint64_t sub_1B38B0()
{
  return sub_2F608(&qword_26B128, &qword_26B130, (void (*)(void))sub_1B20A4, (void (*)(void))sub_1B2140);
}

uint64_t destroy for CoverGeometryReferenceBuilder(uint64_t a1)
{

  swift_release(*(_QWORD *)(a1 + 8));
  return swift_release(*(_QWORD *)(a1 + 16));
}

uint64_t initializeWithCopy for CoverGeometryReferenceBuilder(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  id v6;

  v3 = *(void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v6 = v3;
  swift_retain(v4);
  swift_retain(v5);
  return a1;
}

uint64_t assignWithCopy for CoverGeometryReferenceBuilder(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v8;
  swift_retain(v8);
  swift_release(v7);
  v9 = *(_QWORD *)(a2 + 16);
  v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v9;
  swift_retain(v9);
  swift_release(v10);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

uint64_t assignWithTake for CoverGeometryReferenceBuilder(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release(v4);
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_release(v5);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for CoverGeometryReferenceBuilder(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 25))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CoverGeometryReferenceBuilder(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 25) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for CoverGeometryReferenceBuilder()
{
  return &type metadata for CoverGeometryReferenceBuilder;
}

uint64_t sub_1B3AD0(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_231098, 1);
}

unint64_t sub_1B3AE0(uint64_t a1)
{
  unint64_t result;

  result = sub_1B3B04();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1B3B04()
{
  unint64_t result;

  result = qword_26B160;
  if (!qword_26B160)
  {
    result = swift_getWitnessTable(&unk_1F6DD0, &type metadata for CoverGeometryReferenceBuilder);
    atomic_store(result, (unint64_t *)&qword_26B160);
  }
  return result;
}

uint64_t sub_1B3B50()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v1 = (int *)type metadata accessor for CoverView(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);

  v6 = v0 + v4;
  if ((*(_BYTE *)(v0 + v4 + 40) & 1) != 0)
    _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)(v0 + v4));
  else
    swift_release(*(_QWORD *)v6);
  sub_BE0C(*(_QWORD *)(v6 + 48), *(_BYTE *)(v6 + 56));
  v7 = (_QWORD *)(v6 + v1[6]);
  v8 = sub_5440(&qword_25F1E8);
  if (swift_getEnumCaseMultiPayload(v7, v8) == 1)
  {
    v9 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v7, v9);
  }
  else
  {
    swift_release(*v7);
  }
  v10 = (_QWORD *)(v6 + v1[7]);
  v11 = sub_5440(&qword_25F758);
  if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
  {
    v12 = type metadata accessor for UUID(0);
    v13 = *(_QWORD *)(v12 - 8);
    if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v13 + 48))(v10, 1, v12))
      (*(void (**)(_QWORD *, uint64_t))(v13 + 8))(v10, v12);
  }
  else
  {
    swift_release(*v10);
  }

  swift_release(*(_QWORD *)(v6 + v1[9] + 8));
  v14 = v6 + v1[10];
  if (!*(_BYTE *)(v14 + 56))
    _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)v14);
  swift_bridgeObjectRelease(*(_QWORD *)(v14 + 104));
  v15 = *(_QWORD *)(v14 + 120);
  if (v15)
  {
    swift_bridgeObjectRelease(v15);
    swift_bridgeObjectRelease(*(_QWORD *)(v14 + 136));
    swift_bridgeObjectRelease(*(_QWORD *)(v14 + 160));
  }
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_1B3CFC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for CoverView(0) - 8) + 80);
  return sub_1AF5C8(v1 + ((v3 + 24) & ~v3), a1);
}

unint64_t sub_1B3D5C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_26B1D8;
  if (!qword_26B1D8)
  {
    v1 = sub_7EF8(&qword_26B1C0);
    sub_1B3E08(&qword_26B1E0, &qword_26B1D0, &qword_26B1E8, &qword_26B1C8);
    sub_1B3E08(&qword_26B1F0, &qword_26B1A8, &qword_26B1F8, &qword_26B1A0);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_26B1D8);
  }
  return result;
}

uint64_t sub_1B3E08(unint64_t *a1, uint64_t *a2, unint64_t *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v8 = sub_7EF8(a2);
    sub_7FD8(a3, a4, (uint64_t)&protocol conformance descriptor for _CoverEffectViewModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1B3E90()
{
  unint64_t result;
  uint64_t v1;

  result = qword_26B228;
  if (!qword_26B228)
  {
    v1 = sub_7EF8(&qword_26B220);
    sub_1B3EFC();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_26B228);
  }
  return result;
}

unint64_t sub_1B3EFC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_26B230;
  if (!qword_26B230)
  {
    v1 = sub_7EF8(&qword_26B218);
    sub_2F608(&qword_26B028, &qword_26AFE8, (void (*)(void))sub_1B21E4, (void (*)(void))sub_1B2268);
    sub_7FD8(&qword_26B238, &qword_26B240, (uint64_t)&unk_1E1380);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_26B230);
  }
  return result;
}

uint64_t sub_1B3FB8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return sub_1B1580(*(_QWORD **)(v1 + 16), a1);
}

_UNKNOWN **sub_1B3FD4()
{
  return &protocol witness table for CoverGeometryReference;
}

uint64_t sub_1B3FE0@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, __int16 a5@<W4>, uint64_t a6@<X8>)
{
  char v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (**v19)(char);
  uint64_t KeyPath;
  uint64_t v21;
  char v22;
  char v23;
  char *v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;

  v28 = a6;
  v11 = a5 & 1;
  v12 = sub_5440(&qword_26B258);
  __chkstk_darwin(v12);
  v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = sub_5440(&qword_26B260);
  __chkstk_darwin(v27);
  v16 = (char *)&v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = swift_allocObject(&unk_2599D0, 42, 7);
  *(_BYTE *)(v17 + 16) = a2;
  *(_QWORD *)(v17 + 24) = a3;
  *(_QWORD *)(v17 + 32) = a4;
  *(_BYTE *)(v17 + 40) = v11;
  *(_BYTE *)(v17 + 41) = HIBYTE(a5) & 1;
  v18 = sub_5440(&qword_26B268);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v14, a1, v18);
  v19 = (uint64_t (**)(char))&v14[*(int *)(v12 + 36)];
  *v19 = sub_1B46F0;
  v19[1] = (uint64_t (*)(char))v17;
  KeyPath = swift_getKeyPath(&unk_1F6F70);
  v29 = a2;
  v30 = a3;
  swift_retain(a3);
  sub_F9E4(a4, v11);
  v21 = sub_5440(&qword_2668E8);
  State.wrappedValue.getter(&v31, v21);
  if ((v31 & 1) != 0)
  {
    v22 = 1;
  }
  else
  {
    sub_F9E4(a4, v11);
    v23 = sub_30DB4(a4, v11);
    sub_BE0C(a4, v11);
    v22 = v23 & ((a5 & 0x100) != 0);
  }
  sub_1B4740((uint64_t)v14, (uint64_t)v16);
  v24 = &v16[*(int *)(v27 + 36)];
  *(_QWORD *)v24 = KeyPath;
  v24[8] = v22;
  sub_1B4788((uint64_t)v14);
  return sub_1B47C8((uint64_t)v16, v28);
}

uint64_t EnvironmentValues.isHovering.getter()
{
  unint64_t v0;
  uint64_t var1;

  v0 = sub_49328();
  EnvironmentValues.subscript.getter(&var1, &type metadata for IsHoveringKey, &type metadata for IsHoveringKey, v0);
  return var1;
}

uint64_t EnvironmentValues.isHovering.setter(char a1)
{
  unint64_t v1;
  char v3;

  v3 = a1;
  v1 = sub_49328();
  return EnvironmentValues.subscript.setter(&v3, &type metadata for IsHoveringKey, &type metadata for IsHoveringKey, v1);
}

uint64_t sub_1B4244@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __int16 v3;

  if (*(_BYTE *)(v2 + 25))
    v3 = 256;
  else
    v3 = 0;
  return sub_1B3FE0(a1, *(_BYTE *)v2, *(_QWORD *)(v2 + 8), *(_QWORD *)(v2 + 16), v3 | *(unsigned __int8 *)(v2 + 24), a2);
}

uint64_t (*EnvironmentValues.isHovering.modify(uint64_t a1))(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  unint64_t v4;

  v3 = (_QWORD *)(a1 + 17);
  *(_QWORD *)a1 = v1;
  v4 = sub_49328();
  *(_QWORD *)(a1 + 8) = v4;
  EnvironmentValues.subscript.getter(v3, &type metadata for IsHoveringKey, &type metadata for IsHoveringKey, v4);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a1 + 17);
  return sub_1B42D0;
}

uint64_t sub_1B42D0(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a1 + 16);
  return EnvironmentValues.subscript.setter(a1 + 17, &type metadata for IsHoveringKey, &type metadata for IsHoveringKey, v1);
}

uint64_t View.observeHovering(passOnParentHoverState:)(char a1, uint64_t a2, uint64_t a3)
{
  char v6;
  uint64_t v7;
  uint64_t KeyPath;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  char v15;

  v15 = 0;
  State.init(wrappedValue:)(&v10, &v15, &type metadata for Bool);
  v6 = v10;
  v7 = v11;
  KeyPath = swift_getKeyPath(&unk_1F6F70);
  LOBYTE(v10) = v6;
  v11 = v7;
  v12 = KeyPath;
  v13 = 0;
  v14 = a1;
  View.modifier<A>(_:)(&v10, a2, &type metadata for ObserveHoveringViewModifier, a3);
  swift_release(KeyPath);
  return swift_release(v7);
}

uint64_t sub_1B43C8(_QWORD *a1)
{
  uint64_t v1;

  v1 = type metadata accessor for ModifiedContent(255, *a1, &type metadata for ObserveHoveringViewModifier);
  sub_1B441C();
  return swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
}

unint64_t sub_1B441C()
{
  unint64_t result;

  result = qword_26B250;
  if (!qword_26B250)
  {
    result = swift_getWitnessTable(&unk_1F6FCC, &type metadata for ObserveHoveringViewModifier);
    atomic_store(result, (unint64_t *)&qword_26B250);
  }
  return result;
}

uint64_t destroy for ObserveHoveringViewModifier(uint64_t a1)
{
  swift_release(*(_QWORD *)(a1 + 8));
  return sub_BE0C(*(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24));
}

uint64_t initializeWithCopy for ObserveHoveringViewModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  v6 = *(_BYTE *)(a2 + 24);
  swift_retain(v4);
  sub_F9E4(v5, v6);
  *(_QWORD *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  return a1;
}

uint64_t assignWithCopy for ObserveHoveringViewModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v5;
  swift_retain(v5);
  swift_release(v4);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_BYTE *)(a2 + 24);
  sub_F9E4(v6, v7);
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_BYTE *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 24) = v7;
  sub_BE0C(v8, v9);
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  return a1;
}

__n128 initializeWithTake for ObserveHoveringViewModifier(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 10) = *(_OWORD *)(a2 + 10);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for ObserveHoveringViewModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_release(v4);
  v5 = *(_BYTE *)(a2 + 24);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_BYTE *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = v5;
  sub_BE0C(v6, v7);
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  return a1;
}

uint64_t getEnumTagSinglePayload for ObserveHoveringViewModifier(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 26))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ObserveHoveringViewModifier(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_WORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 26) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 26) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for ObserveHoveringViewModifier()
{
  return &type metadata for ObserveHoveringViewModifier;
}

ValueMetadata *type metadata accessor for IsHoveringKey()
{
  return &type metadata for IsHoveringKey;
}

uint64_t sub_1B46B0(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_23115C, 1);
}

uint64_t sub_1B46C0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  sub_BE0C(*(_QWORD *)(v0 + 32), *(_BYTE *)(v0 + 40));
  return swift_deallocObject(v0, 42, 7);
}

uint64_t sub_1B46F0(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE v5[9];
  uint64_t v6;

  v2 = *(_QWORD *)(v1 + 24);
  v5[1] = *(_BYTE *)(v1 + 16);
  v6 = v2;
  v5[0] = a1;
  v3 = sub_5440(&qword_2668E8);
  return State.wrappedValue.setter(v5, v3);
}

uint64_t sub_1B4740(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_5440(&qword_26B258);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1B4788(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_5440(&qword_26B258);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1B47C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_5440(&qword_26B260);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_1B4814()
{
  unint64_t result;
  uint64_t v1;

  result = qword_26B270;
  if (!qword_26B270)
  {
    v1 = sub_7EF8(&qword_26B260);
    sub_1B4898();
    sub_7FD8((unint64_t *)&qword_25ED10, &qword_25ED08, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_26B270);
  }
  return result;
}

unint64_t sub_1B4898()
{
  unint64_t result;
  uint64_t v1;

  result = qword_26B278;
  if (!qword_26B278)
  {
    v1 = sub_7EF8(&qword_26B258);
    sub_7FD8(&qword_26B280, &qword_26B268, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
    sub_133D00();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_26B278);
  }
  return result;
}

uint64_t ShrinkableText.init(text:shorterText:shortestText:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v13;

  v8 = type metadata accessor for ShrinkableText(0);
  v9 = a4 + *(int *)(v8 + 20);
  v10 = type metadata accessor for LocalizerRequest(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56);
  v12(v9, 1, 1, v10);
  v13 = a4 + *(int *)(v8 + 24);
  v12(v13, 1, 1, v10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 32))(a4, a1, v10);
  sub_B586C(a2, v9);
  return sub_B586C(a3, v13);
}

uint64_t type metadata accessor for ShrinkableText(uint64_t a1)
{
  uint64_t result;

  result = qword_26B2F0;
  if (!qword_26B2F0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ShrinkableText);
  return result;
}

uint64_t ShrinkableText.text.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for LocalizerRequest(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t ShrinkableText.text.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for LocalizerRequest(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t ShrinkableText.shorterText.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for ShrinkableText(0) + 20);
  return sub_BC48(v3, a1);
}

uint64_t ShrinkableText.shorterText.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for ShrinkableText(0) + 20);
  return sub_B586C(a1, v3);
}

double (*ShrinkableText.shorterText.modify())(double)
{
  type metadata accessor for ShrinkableText(0);
  return KeyedEncodingContainer.encode<A>(_:forKey:);
}

uint64_t ShrinkableText.shortestText.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for ShrinkableText(0) + 24);
  return sub_BC48(v3, a1);
}

uint64_t ShrinkableText.shortestText.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for ShrinkableText(0) + 24);
  return sub_B586C(a1, v3);
}

double (*ShrinkableText.shortestText.modify())(double)
{
  type metadata accessor for ShrinkableText(0);
  return KeyedEncodingContainer.encode<A>(_:forKey:);
}

uint64_t sub_1B4BA4()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x54726574726F6873;
  if (*v0 != 1)
    v1 = 0x74736574726F6873;
  if (*v0)
    return v1;
  else
    return 1954047348;
}

uint64_t sub_1B4C08@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1B61C0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1B4C2C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1B555C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1B4C54(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1B555C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t ShrinkableText.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  void (*v17)(void);
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, _QWORD *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  _QWORD *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  char v39;
  char v40;
  char v41;

  v30 = a2;
  v3 = sub_5440(&qword_25E0C8);
  v4 = __chkstk_darwin(v3);
  v31 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v32 = (char *)&v29 - v6;
  v7 = type metadata accessor for LocalizerRequest(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v33 = (uint64_t *)((char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v35 = sub_5440(&qword_26B288);
  v10 = *(_QWORD *)(v35 - 8);
  __chkstk_darwin(v35);
  v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for ShrinkableText(0);
  v14 = __chkstk_darwin(v13);
  v16 = (char *)&v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *(void (**)(void))(v8 + 56);
  v38 = &v16[*(int *)(v14 + 20)];
  v17();
  v36 = &v16[*(int *)(v13 + 24)];
  v17();
  v19 = a1[3];
  v18 = a1[4];
  sub_5480(a1, v19);
  v20 = sub_1B555C();
  v34 = v12;
  v21 = (uint64_t)v37;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ShrinkableText.CodingKeys, &type metadata for ShrinkableText.CodingKeys, v20, v19, v18);
  if (v21)
  {
    _s7BooksUI13AnyPagedFrameVwxx_0(a1);
    v24 = (uint64_t)v36;
    sub_B414((uint64_t)v38, &qword_25E0C8);
    return sub_B414(v24, &qword_25E0C8);
  }
  else
  {
    v22 = (uint64_t)v32;
    v41 = 0;
    v23 = sub_6FD0(&qword_2629C8, (uint64_t (*)(uint64_t))&type metadata accessor for LocalizerRequest, (uint64_t)&protocol conformance descriptor for LocalizerRequest);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v33, v7, &v41, v35, v7, v23);
    v25 = *(void (**)(char *, _QWORD *, uint64_t))(v8 + 32);
    v37 = v16;
    v25(v16, v33, v7);
    v40 = 1;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v7, &v40, v35, v7, v23);
    sub_B586C(v22, (uint64_t)v38);
    v39 = 2;
    v26 = (uint64_t)v31;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v7, &v39, v35, v7, v23);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v34, v35);
    sub_B586C(v26, (uint64_t)v36);
    v27 = (uint64_t)v37;
    sub_C484((uint64_t)v37, v30);
    _s7BooksUI13AnyPagedFrameVwxx_0(a1);
    return sub_1B55A0(v27);
  }
}

uint64_t sub_1B4FD4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return ShrinkableText.init(from:)(a1, a2);
}

BOOL _s7BooksUI14ShrinkableTextV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int (*v36)(_QWORD, _QWORD, _QWORD);
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int (*v42)(_QWORD, _QWORD, _QWORD);
  uint64_t v43;
  uint64_t v44;
  char v45;
  void (*v46)(char *, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int (*v53)(uint64_t, uint64_t, uint64_t);
  uint64_t v54;
  uint64_t v56;
  uint64_t v57;
  char v58;
  void (*v59)(char *, uint64_t);
  char *v60;
  char *v61;
  uint64_t v62;
  char *v63;
  char *v64;
  char *v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;

  v71 = a2;
  v3 = type metadata accessor for LocalizerRequest(0);
  v4 = *(_QWORD *)(v3 - 8);
  v69 = v3;
  v70 = v4;
  __chkstk_darwin(v3);
  v67 = (char *)&v60 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v68 = sub_5440(&qword_26B348);
  v6 = __chkstk_darwin(v68);
  v8 = (char *)&v60 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v60 - v9;
  v11 = sub_5440(&qword_25E0C8);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v60 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v12);
  v17 = (char *)&v60 - v16;
  v18 = __chkstk_darwin(v15);
  v20 = (char *)&v60 - v19;
  v21 = __chkstk_darwin(v18);
  v23 = (char *)&v60 - v22;
  v24 = __chkstk_darwin(v21);
  v26 = (char *)&v60 - v25;
  __chkstk_darwin(v24);
  v28 = (char *)&v60 - v27;
  v29 = a1;
  v30 = a1;
  v31 = v71;
  if ((static LocalizerRequest.== infix(_:_:)(v30) & 1) == 0)
    return 0;
  v65 = v8;
  v66 = v23;
  v63 = v17;
  v64 = v20;
  v61 = v14;
  v32 = type metadata accessor for ShrinkableText(0);
  sub_BC48(v29 + *(int *)(v32 + 20), (uint64_t)v28);
  v62 = v32;
  sub_BC48(v31 + *(int *)(v32 + 20), (uint64_t)v26);
  v33 = v68;
  v34 = (uint64_t)&v10[*(int *)(v68 + 48)];
  sub_BC48((uint64_t)v28, (uint64_t)v10);
  sub_BC48((uint64_t)v26, v34);
  v35 = v69;
  v36 = *(unsigned int (**)(_QWORD, _QWORD, _QWORD))(v70 + 48);
  v37 = v29;
  if (v36(v10, 1, v69) != 1)
  {
    v39 = (uint64_t)v26;
    v40 = (uint64_t)v66;
    sub_BC48((uint64_t)v10, (uint64_t)v66);
    if (v36(v34, 1, v35) != 1)
    {
      v60 = v10;
      v42 = v36;
      v43 = v70;
      v38 = v67;
      (*(void (**)(char *, uint64_t, uint64_t))(v70 + 32))(v67, v34, v35);
      v44 = sub_6FD0(&qword_267320, (uint64_t (*)(uint64_t))&type metadata accessor for LocalizerRequest, (uint64_t)&protocol conformance descriptor for LocalizerRequest);
      v45 = dispatch thunk of static Equatable.== infix(_:_:)(v40, v38, v35, v44);
      v46 = *(void (**)(char *, uint64_t))(v43 + 8);
      v46(v38, v35);
      sub_B414(v39, &qword_25E0C8);
      sub_B414((uint64_t)v28, &qword_25E0C8);
      v46((char *)v40, v35);
      v36 = v42;
      sub_B414((uint64_t)v60, &qword_25E0C8);
      if ((v45 & 1) == 0)
        return 0;
      goto LABEL_9;
    }
    sub_B414((uint64_t)v26, &qword_25E0C8);
    sub_B414((uint64_t)v28, &qword_25E0C8);
    (*(void (**)(uint64_t, uint64_t))(v70 + 8))(v40, v35);
LABEL_7:
    v41 = (uint64_t)v10;
LABEL_15:
    sub_B414(v41, &qword_26B348);
    return 0;
  }
  sub_B414((uint64_t)v26, &qword_25E0C8);
  sub_B414((uint64_t)v28, &qword_25E0C8);
  if (v36(v34, 1, v35) != 1)
    goto LABEL_7;
  sub_B414((uint64_t)v10, &qword_25E0C8);
  v38 = v67;
LABEL_9:
  v47 = v62;
  v48 = v33;
  v49 = (uint64_t)v64;
  sub_BC48(v37 + *(int *)(v62 + 24), (uint64_t)v64);
  v50 = (uint64_t)v63;
  sub_BC48(v71 + *(int *)(v47 + 24), (uint64_t)v63);
  v51 = (uint64_t)v65;
  v52 = (uint64_t)&v65[*(int *)(v48 + 48)];
  sub_BC48(v49, (uint64_t)v65);
  sub_BC48(v50, v52);
  if (v36(v51, 1, v35) == 1)
  {
    sub_B414(v50, &qword_25E0C8);
    sub_B414(v49, &qword_25E0C8);
    if (v36(v52, 1, v35) == 1)
    {
      sub_B414(v51, &qword_25E0C8);
      return 1;
    }
    goto LABEL_14;
  }
  v53 = v36;
  v54 = (uint64_t)v61;
  sub_BC48(v51, (uint64_t)v61);
  if (v53(v52, 1, v35) == 1)
  {
    sub_B414(v50, &qword_25E0C8);
    sub_B414(v49, &qword_25E0C8);
    (*(void (**)(uint64_t, uint64_t))(v70 + 8))(v54, v35);
LABEL_14:
    v41 = v51;
    goto LABEL_15;
  }
  v56 = v70;
  (*(void (**)(char *, uint64_t, uint64_t))(v70 + 32))(v38, v52, v35);
  v57 = sub_6FD0(&qword_267320, (uint64_t (*)(uint64_t))&type metadata accessor for LocalizerRequest, (uint64_t)&protocol conformance descriptor for LocalizerRequest);
  v58 = dispatch thunk of static Equatable.== infix(_:_:)(v54, v38, v35, v57);
  v59 = *(void (**)(char *, uint64_t))(v56 + 8);
  v59(v38, v35);
  sub_B414(v50, &qword_25E0C8);
  sub_B414(v49, &qword_25E0C8);
  v59((char *)v54, v35);
  sub_B414(v51, &qword_25E0C8);
  return (v58 & 1) != 0;
}

unint64_t sub_1B555C()
{
  unint64_t result;

  result = qword_26B290;
  if (!qword_26B290)
  {
    result = swift_getWitnessTable(&unk_1F71B8, &type metadata for ShrinkableText.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_26B290);
  }
  return result;
}

uint64_t sub_1B55A0(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ShrinkableText(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1B55DC(uint64_t a1)
{
  uint64_t result;

  result = sub_6FD0(&qword_26A740, type metadata accessor for ShrinkableText, (uint64_t)&protocol conformance descriptor for ShrinkableText);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for ShrinkableText(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v10;
  char *v11;
  char *v12;
  unsigned int (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v15);
  }
  else
  {
    v7 = type metadata accessor for LocalizerRequest(0);
    v8 = *(_QWORD *)(v7 - 8);
    v9 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16);
    v9(a1, a2, v7);
    v10 = *(int *)(a3 + 20);
    v11 = (char *)a1 + v10;
    v12 = (char *)a2 + v10;
    v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48);
    if (v13((char *)a2 + v10, 1, v7))
    {
      v14 = sub_5440(&qword_25E0C8);
      memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      v9((uint64_t *)v11, (uint64_t *)v12, v7);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v11, 0, 1, v7);
    }
    v16 = *(int *)(a3 + 24);
    v17 = (char *)a1 + v16;
    v18 = (char *)a2 + v16;
    if (v13(v18, 1, v7))
    {
      v19 = sub_5440(&qword_25E0C8);
      memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    }
    else
    {
      v9((uint64_t *)v17, (uint64_t *)v18, v7);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v17, 0, 1, v7);
    }
  }
  return a1;
}

uint64_t destroy for ShrinkableText(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t result;
  void (*v10)(uint64_t, uint64_t);

  v4 = type metadata accessor for LocalizerRequest(0);
  v5 = *(_QWORD *)(v4 - 8);
  v10 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v10(a1, v4);
  v6 = a1 + *(int *)(a2 + 20);
  v7 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (!v7(v6, 1, v4))
    v10(v6, v4);
  v8 = a1 + *(int *)(a2 + 24);
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v7)(v8, 1, v4);
  if (!(_DWORD)result)
    return ((uint64_t (*)(uint64_t, uint64_t))v10)(v8, v4);
  return result;
}

char *initializeWithCopy for ShrinkableText(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void *, const void *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  unsigned int (*v12)(const void *, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;

  v6 = type metadata accessor for LocalizerRequest(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 16);
  v8(a1, a2, v6);
  v9 = *(int *)(a3 + 20);
  v10 = &a1[v9];
  v11 = &a2[v9];
  v12 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48);
  if (v12(&a2[v9], 1, v6))
  {
    v13 = sub_5440(&qword_25E0C8);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v8(v10, v11, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v10, 0, 1, v6);
  }
  v14 = *(int *)(a3 + 24);
  v15 = &a1[v14];
  v16 = &a2[v14];
  if (v12(v16, 1, v6))
  {
    v17 = sub_5440(&qword_25E0C8);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    v8(v15, v16, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v15, 0, 1, v6);
  }
  return a1;
}

char *assignWithCopy for ShrinkableText(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void *, const void *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t (*v12)(const void *, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  int v19;
  int v20;
  uint64_t v21;

  v6 = type metadata accessor for LocalizerRequest(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 24);
  v8(a1, a2, v6);
  v9 = *(int *)(a3 + 20);
  v10 = &a1[v9];
  v11 = &a2[v9];
  v12 = *(uint64_t (**)(const void *, uint64_t, uint64_t))(v7 + 48);
  v13 = v12(&a1[v9], 1, v6);
  v14 = v12(v11, 1, v6);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v10, v11, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v10, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
LABEL_6:
    v15 = sub_5440(&qword_25E0C8);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  v8(v10, v11, v6);
LABEL_7:
  v16 = *(int *)(a3 + 24);
  v17 = &a1[v16];
  v18 = &a2[v16];
  v19 = v12(&a1[v16], 1, v6);
  v20 = v12(v18, 1, v6);
  if (!v19)
  {
    if (!v20)
    {
      v8(v17, v18, v6);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v17, v6);
    goto LABEL_12;
  }
  if (v20)
  {
LABEL_12:
    v21 = sub_5440(&qword_25E0C8);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v17, v18, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v17, 0, 1, v6);
  return a1;
}

char *initializeWithTake for ShrinkableText(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void *, const void *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  unsigned int (*v12)(const void *, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;

  v6 = type metadata accessor for LocalizerRequest(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 32);
  v8(a1, a2, v6);
  v9 = *(int *)(a3 + 20);
  v10 = &a1[v9];
  v11 = &a2[v9];
  v12 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48);
  if (v12(&a2[v9], 1, v6))
  {
    v13 = sub_5440(&qword_25E0C8);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v8(v10, v11, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v10, 0, 1, v6);
  }
  v14 = *(int *)(a3 + 24);
  v15 = &a1[v14];
  v16 = &a2[v14];
  if (v12(v16, 1, v6))
  {
    v17 = sub_5440(&qword_25E0C8);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    v8(v15, v16, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v15, 0, 1, v6);
  }
  return a1;
}

char *assignWithTake for ShrinkableText(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void *, const void *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t (*v12)(const void *, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  int v19;
  int v20;
  uint64_t v21;

  v6 = type metadata accessor for LocalizerRequest(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 40);
  v8(a1, a2, v6);
  v9 = *(int *)(a3 + 20);
  v10 = &a1[v9];
  v11 = &a2[v9];
  v12 = *(uint64_t (**)(const void *, uint64_t, uint64_t))(v7 + 48);
  v13 = v12(&a1[v9], 1, v6);
  v14 = v12(v11, 1, v6);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v10, v11, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v10, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
LABEL_6:
    v15 = sub_5440(&qword_25E0C8);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  v8(v10, v11, v6);
LABEL_7:
  v16 = *(int *)(a3 + 24);
  v17 = &a1[v16];
  v18 = &a2[v16];
  v19 = v12(&a1[v16], 1, v6);
  v20 = v12(v18, 1, v6);
  if (!v19)
  {
    if (!v20)
    {
      v8(v17, v18, v6);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v17, v6);
    goto LABEL_12;
  }
  if (v20)
  {
LABEL_12:
    v21 = sub_5440(&qword_25E0C8);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v17, v18, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v17, 0, 1, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for ShrinkableText(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1B5E94);
}

uint64_t sub_1B5E94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v6 = type metadata accessor for LocalizerRequest(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v8 = sub_5440(&qword_25E0C8);
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for ShrinkableText(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1B5F18);
}

uint64_t sub_1B5F18(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v8 = type metadata accessor for LocalizerRequest(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v10 = sub_5440(&qword_25E0C8);
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_1B5F98(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = type metadata accessor for LocalizerRequest(319);
  if (v3 <= 0x3F)
  {
    v6 = *(_QWORD *)(v2 - 8) + 64;
    sub_97480(319);
    if (v5 <= 0x3F)
    {
      v7 = *(_QWORD *)(v4 - 8) + 64;
      v8 = v7;
      swift_initStructMetadata(a1, 256, 3, &v6, a1 + 16);
    }
  }
}

uint64_t storeEnumTagSinglePayload for ShrinkableText.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1B6068 + 4 * byte_1F7059[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1B609C + 4 * byte_1F7054[v4]))();
}

uint64_t sub_1B609C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B60A4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B60ACLL);
  return result;
}

uint64_t sub_1B60B8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B60C0);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1B60C4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B60CC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ShrinkableText.CodingKeys()
{
  return &type metadata for ShrinkableText.CodingKeys;
}

unint64_t sub_1B60EC()
{
  unint64_t result;

  result = qword_26B330;
  if (!qword_26B330)
  {
    result = swift_getWitnessTable(&unk_1F7190, &type metadata for ShrinkableText.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_26B330);
  }
  return result;
}

unint64_t sub_1B6134()
{
  unint64_t result;

  result = qword_26B338;
  if (!qword_26B338)
  {
    result = swift_getWitnessTable(&unk_1F7100, &type metadata for ShrinkableText.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_26B338);
  }
  return result;
}

unint64_t sub_1B617C()
{
  unint64_t result;

  result = qword_26B340;
  if (!qword_26B340)
  {
    result = swift_getWitnessTable(&unk_1F7128, &type metadata for ShrinkableText.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_26B340);
  }
  return result;
}

uint64_t sub_1B61C0(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  char v8;

  if (a1 == 1954047348 && a2 == 0xE400000000000000)
  {
    v5 = 0xE400000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1954047348, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x54726574726F6873 && a2 == 0xEB00000000747865)
  {
    v7 = 0xEB00000000747865;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x54726574726F6873, 0xEB00000000747865, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x74736574726F6873 && a2 == 0xEC00000074786554)
  {
    swift_bridgeObjectRelease(0xEC00000074786554);
    return 2;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x74736574726F6873, 0xEC00000074786554, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

ValueMetadata *type metadata accessor for YearInReviewEntryHeader()
{
  return &type metadata for YearInReviewEntryHeader;
}

uint64_t sub_1B6350(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_231208, 1);
}

uint64_t sub_1B6360(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t ObjCClassFromMetadata;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v28[2];

  v28[0] = a1;
  v3 = type metadata accessor for Locale(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (char *)v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)v28 - v8;
  v10 = type metadata accessor for String.LocalizationValue(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v16 = (char *)v28 - v15;
  v17 = String.LocalizationValue.init(stringLiteral:)(0xD00000000000001ELL, 0x80000000001FE870);
  static Locale.current.getter(v17);
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v14, v16, v10);
  v18 = type metadata accessor for BundleFinder();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v18);
  v20 = objc_msgSend((id)objc_opt_self(NSBundle), "bundleForClass:", ObjCClassFromMetadata);
  (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v7, v9, v3);
  v21 = String.init(localized:table:bundle:locale:comment:)(v14, 0, 0, v20, v7, "Header for the entry section of Year in Review. Text quoted inside ## represents text to be highlighted in white, and text quoted inside ** represents text to be highlighted in yellow.", 184, 2);
  v23 = v22;
  (*(void (**)(char *, uint64_t))(v4 + 8))(v9, v3);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v16, v10);
  v24 = sub_5440(&qword_25E310);
  v25 = swift_allocObject(v24, 72, 7);
  *(_OWORD *)(v25 + 16) = xmmword_1E0B70;
  *(_QWORD *)(v25 + 56) = &type metadata for String;
  *(_QWORD *)(v25 + 64) = sub_578F0();
  *(_QWORD *)(v25 + 32) = v28[0];
  *(_QWORD *)(v25 + 40) = a2;
  swift_bridgeObjectRetain(a2);
  v26 = static String.localizedStringWithFormat(_:_:)(v21, v23, v25);
  swift_bridgeObjectRelease(v23);
  swift_bridgeObjectRelease(v25);
  return v26;
}

uint64_t sub_1B65A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  __n128 v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  double v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  char *v108;
  char v109;
  uint64_t v110;
  void (*v111)(char *, _QWORD, uint64_t);
  uint64_t v112;
  uint64_t result;
  uint64_t v114;
  char *v115;
  char *v116;
  void (*v117)(char *, char *, uint64_t);
  char *v118;
  char *v119;
  void (*v120)(char *, char *, uint64_t);
  uint64_t v121;
  void (*v122)(char *, uint64_t);
  char *v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t ObjCClassFromMetadata;
  id v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t OpaqueTypeConformance2;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  char *v153;
  unint64_t v154;
  char *v155;
  uint64_t v156;
  char *v157;
  uint64_t v158;
  void (*v159)(char *, char *, uint64_t);
  uint64_t v160;
  uint64_t v161;
  void (*v162)(char *, uint64_t);
  char *v163;
  char *v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  char *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  char *v172;
  char *v173;
  uint64_t v174;
  char *v175;
  uint64_t v176;
  char *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  char *v181;
  uint64_t *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  char *v187;
  char *v188;
  char *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  char *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  char *v198;
  uint64_t v199;
  uint64_t v200;
  _QWORD *v201;
  char *v202;
  char *v203;
  uint64_t v204;
  char *v205;
  _QWORD v206[2];
  uint64_t v207;
  uint64_t v208;
  void *v209;
  uint64_t v210;

  v186 = a2;
  v185 = a1;
  v195 = a3;
  v192 = type metadata accessor for AccessibilityChildBehavior(0);
  v190 = *(_QWORD *)(v192 - 8);
  __chkstk_darwin(v192);
  v189 = (char *)&v163 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v183 = sub_5440(&qword_26B358);
  __chkstk_darwin(v183);
  v182 = (uint64_t *)((char *)&v163 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v184 = sub_5440(&qword_26B360);
  __chkstk_darwin(v184);
  v187 = (char *)&v163 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v194 = sub_5440(&qword_26B368);
  v191 = *(_QWORD *)(v194 - 8);
  v6 = __chkstk_darwin(v194);
  v193 = (char *)&v163 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v188 = (char *)&v163 - v8;
  v179 = type metadata accessor for Locale(0);
  v178 = *(_QWORD *)(v179 - 8);
  v9 = __chkstk_darwin(v179);
  v175 = (char *)&v163 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v177 = (char *)&v163 - v11;
  v176 = type metadata accessor for String.LocalizationValue(0);
  v174 = *(_QWORD *)(v176 - 8);
  v12 = __chkstk_darwin(v176);
  v172 = (char *)&v163 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v173 = (char *)&v163 - v14;
  v166 = sub_5440(&qword_25FE38);
  v15 = __chkstk_darwin(v166);
  v168 = (char *)&v163 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v164 = (char *)&v163 - v17;
  v204 = type metadata accessor for DynamicTypeSize(0);
  v201 = *(_QWORD **)(v204 - 8);
  v18 = __chkstk_darwin(v204);
  v203 = (char *)&v163 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v202 = (char *)&v163 - v20;
  v171 = sub_5440(&qword_25FE40);
  v21 = __chkstk_darwin(v171);
  v163 = (char *)&v163 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v165 = (uint64_t)&v163 - v23;
  v200 = type metadata accessor for Font.Leading(0);
  v199 = *(_QWORD *)(v200 - 8);
  __chkstk_darwin(v200);
  v198 = (char *)&v163 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v170 = sub_5440(&qword_26B370);
  v169 = *(_QWORD *)(v170 - 8);
  __chkstk_darwin(v170);
  v205 = (char *)&v163 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = sub_5440(&qword_26B378);
  v27 = __chkstk_darwin(v26);
  v181 = (char *)&v163 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27);
  v180 = (uint64_t)&v163 - v29;
  v30 = Image.init(systemName:)(0x6F6C2E656C707061, 0xEA00000000006F67);
  v31 = Text.init(_:)(v30);
  v33 = v32;
  v35 = v34;
  v37 = v36 & 1;
  v38 = static Text.+ infix(_:_:)(v31, v32, v36 & 1, v34, 32, 0xE100000000000000, 0, _swiftEmptyArrayStorage);
  v40 = v39;
  v42 = v41;
  v196 = v41;
  v44 = v43 & 1;
  sub_2B574(v31, v33, v37);
  swift_bridgeObjectRelease(v35);
  v207 = 0x736B6F6F42;
  v208 = 0xE500000000000000;
  v167 = sub_C57C();
  v45 = Text.init<A>(_:)(&v207, &type metadata for String, v167);
  v47 = v46;
  v49 = v48;
  v51 = v50 & 1;
  v52 = static Text.+ infix(_:_:)(v38, v40, v44, v42, v45, v46, v51, v48);
  v54 = v53;
  v197 = v55;
  v57 = v56 & 1;
  sub_2B574(v45, v47, v51);
  swift_bridgeObjectRelease(v49);
  sub_2B574(v38, v40, v44);
  v58 = swift_bridgeObjectRelease(v196);
  LODWORD(v207) = static HierarchicalShapeStyle.primary.getter(v58);
  v59 = v197;
  v60 = Text.foregroundStyle<A>(_:)(&v207, v52, v54, v57, v197, &type metadata for HierarchicalShapeStyle, &protocol witness table for HierarchicalShapeStyle);
  v62 = v61;
  v64 = v63;
  v66 = v65 & 1;
  sub_2B574(v52, v54, v57);
  v67 = swift_bridgeObjectRelease(v59);
  v68 = static Font.body.getter(v67);
  v69 = v199;
  v70 = v198;
  v71 = v200;
  (*(void (**)(char *, _QWORD, uint64_t))(v199 + 104))(v198, enum case for Font.Leading.tight(_:), v200);
  v72 = Font.leading(_:)(v70, v68);
  v73 = swift_release(v68);
  (*(void (**)(char *, uint64_t, __n128))(v69 + 8))(v70, v71, v73);
  v74 = Text.font(_:)(v72, v60, v62, v66, v64);
  v76 = v75;
  LOBYTE(v69) = v77;
  v79 = v78;
  swift_release(v72);
  LOBYTE(v72) = v69 & 1;
  v80 = v62;
  v81 = v201;
  sub_2B574(v60, v80, v66);
  v82 = swift_bridgeObjectRelease(v64);
  v83 = static Font.Weight.medium.getter(v82);
  v84 = Text.fontWeight(_:)(*(_QWORD *)&v83, 0, v74, v76, v69 & 1, v79);
  v86 = v85;
  v88 = v87;
  v90 = v89 & 1;
  sub_2B574(v74, v76, v72);
  v91 = swift_bridgeObjectRelease(v79);
  LODWORD(v207) = static HierarchicalShapeStyle.primary.getter(v91);
  v92 = Text.foregroundStyle<A>(_:)(&v207, v84, v86, v90, v88, &type metadata for HierarchicalShapeStyle, &protocol witness table for HierarchicalShapeStyle);
  v94 = v93;
  v96 = v95;
  v98 = v97 & 1;
  sub_2B574(v84, v86, v90);
  swift_bridgeObjectRelease(v88);
  v99 = Text.tracking(_:)(v92, v94, v98, v96, -0.68);
  v101 = v100;
  LOBYTE(v88) = v102;
  v104 = v103;
  v105 = v94;
  v106 = v203;
  sub_2B574(v92, v105, v98);
  v107 = v96;
  v108 = v202;
  swift_bridgeObjectRelease(v107);
  v207 = v99;
  v208 = v101;
  v109 = v88 & 1;
  v110 = v204;
  LOBYTE(v209) = v109;
  v210 = v104;
  v111 = (void (*)(char *, _QWORD, uint64_t))v81[13];
  v111(v108, enum case for DynamicTypeSize.small(_:), v204);
  v111(v106, enum case for DynamicTypeSize.accessibility1(_:), v110);
  v112 = sub_6FD0(&qword_25FE98, (uint64_t (*)(uint64_t))&type metadata accessor for DynamicTypeSize, (uint64_t)&protocol conformance descriptor for DynamicTypeSize);
  result = dispatch thunk of static Comparable.<= infix(_:_:)(v108, v106, v110, v112);
  if ((result & 1) != 0)
  {
    v114 = v166;
    v115 = v164;
    v116 = &v164[*(int *)(v166 + 48)];
    v117 = (void (*)(char *, char *, uint64_t))v81[4];
    v117(v164, v108, v110);
    v117(v116, v106, v110);
    v118 = v168;
    v119 = &v168[*(int *)(v114 + 48)];
    v120 = (void (*)(char *, char *, uint64_t))v81[2];
    v120(v168, v115, v110);
    v120(v119, v116, v110);
    v121 = (uint64_t)v163;
    v117(v163, v118, v110);
    v122 = (void (*)(char *, uint64_t))v81[1];
    v122(v119, v110);
    v123 = &v118[*(int *)(v114 + 48)];
    v117(v118, v115, v110);
    v117(v123, v116, v110);
    v124 = v171;
    v117((char *)(v121 + *(int *)(v171 + 36)), v123, v110);
    v122(v118, v110);
    v125 = v165;
    sub_167A4(v121, v165, &qword_25FE40);
    v204 = sub_7FD8(&qword_25FEA0, &qword_25FE40, (uint64_t)&protocol conformance descriptor for ClosedRange<A>);
    View.dynamicTypeSize<A>(_:)(v125, &type metadata for Text, v124, &protocol witness table for Text, v204);
    sub_B414(v125, &qword_25FE40);
    sub_2B574(v207, v208, (char)v209);
    swift_bridgeObjectRelease(v210);
    v126 = v173;
    v127 = String.LocalizationValue.init(stringLiteral:)(0x6F4220656C707041, 0xEB00000000736B6FLL);
    v128 = v177;
    static Locale.current.getter(v127);
    v129 = v174;
    v130 = v172;
    v131 = v176;
    (*(void (**)(char *, char *, uint64_t))(v174 + 16))(v172, v126, v176);
    v132 = type metadata accessor for BundleFinder();
    ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v132);
    v134 = objc_msgSend((id)objc_opt_self(NSBundle), "bundleForClass:", ObjCClassFromMetadata);
    v135 = v178;
    v136 = v175;
    v137 = v179;
    (*(void (**)(char *, char *, uint64_t))(v178 + 16))(v175, v128, v179);
    v138 = String.init(localized:table:bundle:locale:comment:)(v130, 0, 0, v134, v136, "Accessibility label for Apple Books label", 41, 2);
    v140 = v139;
    (*(void (**)(char *, uint64_t))(v135 + 8))(v128, v137);
    (*(void (**)(char *, uint64_t))(v129 + 8))(v126, v131);
    v206[0] = v138;
    v206[1] = v140;
    v207 = (uint64_t)&type metadata for Text;
    v208 = v124;
    v209 = &protocol witness table for Text;
    v210 = v204;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v207, &opaque type descriptor for <<opaque return type of View.dynamicTypeSize<A>(_:)>>, 1);
    v142 = (uint64_t)v181;
    v143 = v170;
    v144 = v205;
    View.accessibilityLabel<A>(_:)(v206, v170, &type metadata for String, OpaqueTypeConformance2, v167);
    swift_bridgeObjectRelease(v140);
    (*(void (**)(char *, uint64_t))(v169 + 8))(v144, v143);
    v145 = v180;
    v146 = sub_167A4(v142, v180, &qword_26B378);
    v147 = static HorizontalAlignment.leading.getter(v146);
    v148 = (uint64_t)v182;
    *v182 = v147;
    *(_QWORD *)(v148 + 8) = 0;
    *(_BYTE *)(v148 + 16) = 1;
    v149 = sub_5440(&qword_26B380);
    sub_1B72F0(v185, v186, v148 + *(int *)(v149 + 44));
    v150 = sub_7FD8(&qword_26B388, &qword_26B358, (uint64_t)&protocol conformance descriptor for VStack<A>);
    v151 = (uint64_t)v187;
    View.accessibilityHidden(_:)(0, v183, v150);
    v152 = sub_B414(v148, &qword_26B358);
    v153 = v189;
    static AccessibilityChildBehavior.combine.getter(v152);
    v154 = sub_1B7FE0();
    v155 = v193;
    View.accessibilityElement(children:)(v153, v184, v154);
    (*(void (**)(char *, uint64_t))(v190 + 8))(v153, v192);
    sub_B414(v151, &qword_26B360);
    v156 = v191;
    v157 = v188;
    v158 = v194;
    (*(void (**)(char *, char *, uint64_t))(v191 + 32))(v188, v155, v194);
    sub_B3D0(v145, v142, &qword_26B378);
    v159 = *(void (**)(char *, char *, uint64_t))(v156 + 16);
    v159(v155, v157, v158);
    v160 = v195;
    sub_B3D0(v142, v195, &qword_26B378);
    v161 = sub_5440(&qword_26B398);
    v159((char *)(v160 + *(int *)(v161 + 48)), v155, v158);
    v162 = *(void (**)(char *, uint64_t))(v156 + 8);
    v162(v157, v158);
    sub_B414(v145, &qword_26B378);
    v162(v155, v158);
    return sub_B414(v142, &qword_26B378);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1B72F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  void *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(_QWORD);
  uint64_t v51;
  __n128 v52;
  void (*v53)(char *, uint64_t, __n128);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  double v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  char *v90;
  void (*v91)(char *, _QWORD, uint64_t);
  uint64_t v92;
  uint64_t result;
  uint64_t v94;
  char *v95;
  char *v96;
  void (*v97)(char *, char *, uint64_t);
  char *v98;
  char *v99;
  void (*v100)(char *, char *, uint64_t);
  uint64_t v101;
  void (*v102)(char *, uint64_t);
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t OpaqueTypeConformance2;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  unint64_t v116;
  void *v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char v124;
  uint64_t v125;
  double v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  __n128 v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  char v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  double v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  char v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  char v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  char v165;
  uint64_t v166;
  void *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  char v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  char *v180;
  unint64_t v181;
  char *v182;
  char *v183;
  uint64_t v184;
  uint64_t v185;
  char *v186;
  uint64_t v187;
  uint64_t v188;
  char *v189;
  void (*v190)(char *, uint64_t, __n128);
  unsigned int v191;
  void (*v192)(char *, _QWORD, uint64_t);
  uint64_t v193;
  char *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  char *v199;
  char *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  _QWORD *v204;
  char *v205;
  char *v206;
  uint64_t v207;
  void *v208;
  uint64_t v209;
  void *v210;
  uint64_t v211;

  v203 = a3;
  v5 = sub_5440(&qword_25FE08);
  __chkstk_darwin(v5);
  v199 = (char *)&v180 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_5440(&qword_26B3A0);
  v8 = __chkstk_darwin(v7);
  v202 = (uint64_t)&v180 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v8);
  v200 = (char *)&v180 - v11;
  __chkstk_darwin(v10);
  v201 = (uint64_t)&v180 - v12;
  v185 = sub_5440(&qword_25FE38);
  v13 = __chkstk_darwin(v185);
  v189 = (char *)&v180 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v183 = (char *)&v180 - v15;
  v16 = type metadata accessor for DynamicTypeSize(0);
  v204 = *(_QWORD **)(v16 - 8);
  v17 = __chkstk_darwin(v16);
  v206 = (char *)&v180 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v205 = (char *)&v180 - v19;
  v193 = sub_5440(&qword_25FE40);
  v20 = __chkstk_darwin(v193);
  v180 = (char *)&v180 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v184 = (uint64_t)&v180 - v22;
  v23 = type metadata accessor for Font.Leading(0);
  v24 = *(_QWORD *)(v23 - 8);
  __chkstk_darwin(v23);
  v26 = (char *)&v180 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v188 = sub_5440(&qword_26B370);
  v187 = *(_QWORD *)(v188 - 8);
  __chkstk_darwin(v188);
  v186 = (char *)&v180 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = sub_5440(&qword_26B378);
  v29 = __chkstk_darwin(v28);
  v198 = (uint64_t)&v180 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = __chkstk_darwin(v29);
  v182 = (char *)&v180 - v32;
  __chkstk_darwin(v31);
  v207 = (uint64_t)&v180 - v33;
  v196 = a1;
  v197 = a2;
  v34 = sub_1B6360(a1, a2);
  v36 = v35;
  v37 = sub_1B807C(v34, v35, 8995, 0xE200000000000000);
  v39 = v38;
  swift_bridgeObjectRelease(v36);
  if (v39)
    v40 = (void *)v37;
  else
    v40 = 0;
  v41 = 0xE000000000000000;
  if (v39)
    v41 = v39;
  v208 = v40;
  v209 = v41;
  v181 = sub_C57C();
  v42 = Text.init<A>(_:)(&v208, &type metadata for String, v181);
  v44 = v43;
  v46 = v45;
  v48 = v47 & 1;
  v49 = static Font.largeTitle.getter();
  v50 = *(void (**)(_QWORD))(v24 + 104);
  v191 = enum case for Font.Leading.tight(_:);
  v192 = (void (*)(char *, _QWORD, uint64_t))v50;
  v50(v26);
  v51 = Font.leading(_:)(v26, v49);
  v52 = swift_release(v49);
  v53 = *(void (**)(char *, uint64_t, __n128))(v24 + 8);
  v194 = v26;
  v195 = v23;
  v190 = v53;
  v53(v26, v23, v52);
  v54 = Text.font(_:)(v51, v42, v44, v48, v46);
  v56 = v55;
  v58 = v57;
  v60 = v59;
  swift_release(v51);
  v61 = v58 & 1;
  sub_2B574(v42, v44, v48);
  v62 = v46;
  v63 = v204;
  v64 = swift_bridgeObjectRelease(v62);
  v65 = static Font.Weight.medium.getter(v64);
  v66 = Text.fontWeight(_:)(*(_QWORD *)&v65, 0, v54, v56, v61, v60);
  v68 = v67;
  v70 = v69;
  v72 = v71 & 1;
  sub_2B574(v54, v56, v61);
  v73 = swift_bridgeObjectRelease(v60);
  LODWORD(v208) = static HierarchicalShapeStyle.primary.getter(v73);
  v74 = Text.foregroundStyle<A>(_:)(&v208, v66, v68, v72, v70, &type metadata for HierarchicalShapeStyle, &protocol witness table for HierarchicalShapeStyle);
  v76 = v75;
  v78 = v77;
  v80 = v79 & 1;
  sub_2B574(v66, v68, v72);
  swift_bridgeObjectRelease(v70);
  v81 = (void *)Text.tracking(_:)(v74, v76, v80, v78, -0.4);
  v83 = v82;
  LOBYTE(v70) = v84;
  v86 = v85;
  v87 = v74;
  v88 = v206;
  sub_2B574(v87, v76, v80);
  v89 = v78;
  v90 = v205;
  swift_bridgeObjectRelease(v89);
  v208 = v81;
  v209 = v83;
  LOBYTE(v210) = v70 & 1;
  v211 = v86;
  v91 = (void (*)(char *, _QWORD, uint64_t))v63[13];
  v91(v90, enum case for DynamicTypeSize.small(_:), v16);
  v91(v88, enum case for DynamicTypeSize.accessibility1(_:), v16);
  v92 = sub_6FD0(&qword_25FE98, (uint64_t (*)(uint64_t))&type metadata accessor for DynamicTypeSize, (uint64_t)&protocol conformance descriptor for DynamicTypeSize);
  result = dispatch thunk of static Comparable.<= infix(_:_:)(v90, v88, v16, v92);
  if ((result & 1) != 0)
  {
    v94 = v185;
    v95 = v183;
    v96 = &v183[*(int *)(v185 + 48)];
    v97 = (void (*)(char *, char *, uint64_t))v63[4];
    v97(v183, v90, v16);
    v97(v96, v88, v16);
    v98 = v189;
    v99 = &v189[*(int *)(v94 + 48)];
    v100 = (void (*)(char *, char *, uint64_t))v63[2];
    v100(v189, v95, v16);
    v100(v99, v96, v16);
    v101 = (uint64_t)v180;
    v97(v180, v98, v16);
    v102 = (void (*)(char *, uint64_t))v63[1];
    v102(v99, v16);
    v103 = &v98[*(int *)(v94 + 48)];
    v97(v98, v95, v16);
    v97(v103, v96, v16);
    v104 = v193;
    v97((char *)(v101 + *(int *)(v193 + 36)), v103, v16);
    v102(v98, v16);
    v105 = v184;
    sub_167A4(v101, v184, &qword_25FE40);
    v106 = sub_7FD8(&qword_25FEA0, &qword_25FE40, (uint64_t)&protocol conformance descriptor for ClosedRange<A>);
    v107 = v186;
    View.dynamicTypeSize<A>(_:)(v105, &type metadata for Text, v104, &protocol witness table for Text, v106);
    sub_B414(v105, &qword_25FE40);
    sub_2B574((uint64_t)v208, v209, (char)v210);
    swift_bridgeObjectRelease(v211);
    v208 = &type metadata for Text;
    v209 = v104;
    v210 = &protocol witness table for Text;
    v211 = v106;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v208, &opaque type descriptor for <<opaque return type of View.dynamicTypeSize<A>(_:)>>, 1);
    v109 = (uint64_t)v182;
    v110 = v188;
    View.accessibilityHidden(_:)(1, v188, OpaqueTypeConformance2);
    (*(void (**)(char *, uint64_t))(v187 + 8))(v107, v110);
    sub_167A4(v109, v207, &qword_26B378);
    v111 = sub_1B6360(v196, v197);
    v113 = v112;
    v114 = sub_1B807C(v111, v112, 10794, 0xE200000000000000);
    v116 = v115;
    swift_bridgeObjectRelease(v113);
    if (v116)
      v117 = (void *)v114;
    else
      v117 = 0;
    v118 = 0xE000000000000000;
    if (v116)
      v118 = v116;
    v208 = v117;
    v209 = v118;
    v119 = Text.init<A>(_:)(&v208, &type metadata for String, v181);
    v121 = v120;
    v123 = v122;
    v125 = v124 & 1;
    v126 = static Font.Weight.bold.getter(v119);
    v127 = enum case for Font.Design.serif (_:);
    LODWORD(v206) = enum case for Font.Design.serif (_:);
    v128 = type metadata accessor for Font.Design(0);
    v129 = *(_QWORD *)(v128 - 8);
    v205 = *(char **)(v129 + 104);
    v130 = (uint64_t)v199;
    v197 = v128;
    ((void (*)(char *, uint64_t, uint64_t))v205)(v199, v127, v128);
    v204 = *(_QWORD **)(v129 + 56);
    ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v204)(v130, 0, 1, v128);
    v131 = static Font.system(size:weight:design:)(*(_QWORD *)&v126, 0, v130, 48.0);
    sub_B414(v130, &qword_25FE08);
    v132 = v194;
    v133 = v195;
    v192(v194, v191, v195);
    v134 = Font.leading(_:)(v132, v131);
    v135 = swift_release(v131);
    v190(v132, v133, v135);
    v136 = Text.font(_:)(v134, v119, v121, v125, v123);
    v138 = v137;
    LOBYTE(v132) = v139;
    v141 = v140;
    swift_release(v134);
    LOBYTE(v134) = v132 & 1;
    sub_2B574(v119, v121, v125);
    v142 = swift_bridgeObjectRelease(v123);
    v143 = static Font.Weight.bold.getter(v142);
    v144 = Text.fontWeight(_:)(*(_QWORD *)&v143, 0, v136, v138, v132 & 1, v141);
    v146 = v145;
    v148 = v147;
    v150 = v149 & 1;
    sub_2B574(v136, v138, v134);
    swift_bridgeObjectRelease(v141);
    v151 = v197;
    ((void (*)(uint64_t, _QWORD, uint64_t))v205)(v130, v206, v197);
    ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v204)(v130, 0, 1, v151);
    v152 = Text.fontDesign(_:)(v130, v144, v146, v150, v148);
    v154 = v153;
    v156 = v155;
    v158 = v157 & 1;
    sub_2B574(v144, v146, v150);
    swift_bridgeObjectRelease(v148);
    v159 = sub_B414(v130, &qword_25FE08);
    LODWORD(v208) = static HierarchicalShapeStyle.primary.getter(v159);
    v160 = Text.foregroundStyle<A>(_:)(&v208, v152, v154, v158, v156, &type metadata for HierarchicalShapeStyle, &protocol witness table for HierarchicalShapeStyle);
    v162 = v161;
    v164 = v163;
    v166 = v165 & 1;
    sub_2B574(v152, v154, v158);
    swift_bridgeObjectRelease(v156);
    v167 = (void *)Text.tracking(_:)(v160, v162, v166, v164, -1.98);
    v169 = v168;
    v171 = v170;
    LOBYTE(v150) = v172 & 1;
    sub_2B574(v160, v162, v166);
    swift_bridgeObjectRelease(v164);
    v208 = v167;
    v209 = v169;
    LOBYTE(v210) = v150;
    v211 = v171;
    v173 = (uint64_t)v200;
    View.accessibilityHidden(_:)(1, &type metadata for Text, &protocol witness table for Text);
    sub_2B574((uint64_t)v167, v169, v150);
    swift_bridgeObjectRelease(v171);
    v174 = v201;
    sub_167A4(v173, v201, &qword_26B3A0);
    v175 = v207;
    v176 = v198;
    sub_B3D0(v207, v198, &qword_26B378);
    v177 = v202;
    sub_B3D0(v174, v202, &qword_26B3A0);
    v178 = v203;
    sub_B3D0(v176, v203, &qword_26B378);
    v179 = sub_5440(&qword_26B3A8);
    sub_B3D0(v177, v178 + *(int *)(v179 + 48), &qword_26B3A0);
    sub_B414(v174, &qword_26B3A0);
    sub_B414(v175, &qword_26B378);
    sub_B414(v177, &qword_26B3A0);
    return sub_B414(v176, &qword_26B378);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1B7EE8@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v3 = sub_5440(&qword_262648);
  v4 = __chkstk_darwin(v3);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v1;
  v7 = v1[1];
  *(_QWORD *)v6 = static HorizontalAlignment.leading.getter(v4);
  *((_QWORD *)v6 + 1) = 0;
  v6[16] = 1;
  v9 = sub_5440(&qword_26B350);
  v10 = sub_1B65A4(v8, v7, (uint64_t)&v6[*(int *)(v9 + 44)]);
  v11 = static Alignment.leading.getter(v10);
  sub_882D0(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, a1, 0.0, 1, 0.0, 1, v11, v12);
  return sub_B414((uint64_t)v6, &qword_262648);
}

unint64_t sub_1B7FE0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_26B390;
  if (!qword_26B390)
  {
    v1 = sub_7EF8(&qword_26B360);
    sub_7FD8(&qword_26B388, &qword_26B358, (uint64_t)&protocol conformance descriptor for VStack<A>);
    sub_6FD0((unint64_t *)&qword_25EEA0, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_26B390);
  }
  return result;
}

uint64_t sub_1B807C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  void *v19;
  NSString v20;
  id v21;
  uint64_t v22;
  void *v23;
  void *v24;
  Swift::String v25;
  Swift::String v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t KeyPath;
  uint64_t v31;
  void *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  void *v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  _QWORD v48[2];
  _QWORD v49[2];
  uint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;

  v45 = a1;
  v46 = a2;
  v6 = sub_5440(&qword_269180);
  __chkstk_darwin(v6);
  v47 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_5440(&qword_269188);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_5440(&qword_269190);
  __chkstk_darwin(v12);
  v14 = (char *)&v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_5440(&qword_269198);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v43 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = (void *)objc_opt_self(NSRegularExpression);
  v43 = a3;
  v44 = a4;
  v20 = String._bridgeToObjectiveC()();
  v21 = objc_msgSend(v19, "escapedPatternForString:", v20);

  v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
  v24 = v23;

  v50 = v22;
  v51 = v24;
  swift_bridgeObjectRetain(v24);
  v25._countAndFlagsBits = 0x293F2B2E28;
  v25._object = (void *)0xE500000000000000;
  String.append(_:)(v25);
  v26._countAndFlagsBits = v22;
  v26._object = v24;
  String.append(_:)(v26);
  swift_bridgeObjectRelease(v24);
  Regex<A>.init(_:)(v50, v51);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v14, 0, 1, v15);
  (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v18, v14, v15);
  v27 = (uint64_t)v47;
  Regex.firstMatch(in:)(v45, v46, v15);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v27, 1, v8) == 1)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
    sub_B414(v27, &qword_269180);
    return 0;
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 32))(v11, v27, v8);
    KeyPath = swift_getKeyPath(&unk_1F7288);
    v31 = Regex.Match<A>.subscript.getter();
    v47 = v18;
    v33 = v32;
    v35 = v34;
    v37 = v36;
    swift_release(KeyPath);
    v50 = v31;
    v51 = v33;
    v52 = v35;
    v53 = v37;
    v49[0] = v43;
    v49[1] = v44;
    v48[0] = 0;
    v48[1] = 0xE000000000000000;
    v38 = sub_1B8454();
    v39 = sub_C57C();
    v40 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(v49, v48, 0, 0, 0, 1, &type metadata for Substring, &type metadata for String, &type metadata for String, v38, v39, v39);
    v42 = v41;
    swift_bridgeObjectRelease(v37);
    v50 = v40;
    v51 = v42;
    v28 = String.init<A>(_:)(&v50, &type metadata for String, &protocol witness table for String, &protocol witness table for String);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    (*(void (**)(char *, uint64_t))(v16 + 8))(v47, v15);
  }
  return v28;
}

unint64_t sub_1B8454()
{
  unint64_t result;

  result = qword_26B3B0;
  if (!qword_26B3B0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Substring, &type metadata for Substring);
    atomic_store(result, (unint64_t *)&qword_26B3B0);
  }
  return result;
}

ValueMetadata *type metadata accessor for YearInReviewEntryHeaderViewModel()
{
  return &type metadata for YearInReviewEntryHeaderViewModel;
}

unint64_t sub_1B84AC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_26B3B8;
  if (!qword_26B3B8)
  {
    v1 = sub_7EF8(&qword_262650);
    sub_7FD8(&qword_26B3C0, &qword_262648, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_26B3B8);
  }
  return result;
}

_QWORD *sub_1B8538@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_1B8554(a1, a2, (uint64_t (*)(uint64_t))sub_1B9990, a3);
}

_QWORD *sub_1B8554@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(char *, uint64_t);
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  void (*v74)(char *, uint64_t);
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  _QWORD *v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  Swift::String v99;
  void *object;
  Swift::String v101;
  uint64_t v102;
  void (*v103)(char *, char *, uint64_t);
  uint64_t v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  _QWORD *v109;
  _QWORD *v110;
  _QWORD *v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  char *v115;
  char *v116;
  char *v117;
  uint64_t v118;
  char *v119;
  char *v120;
  uint64_t (*v121)(uint64_t);
  uint64_t v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  __int128 v130;
  _QWORD v131[5];
  uint64_t v132;
  unint64_t v133;
  __int128 v134;
  char *v135;
  uint64_t v136;

  v121 = a3;
  *(_QWORD *)&v130 = a2;
  v118 = a4;
  v5 = type metadata accessor for JSONObject(0);
  __chkstk_darwin(v5);
  v117 = (char *)&v112 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v128 = type metadata accessor for AnyIntentTypes(0);
  v125 = *(_QWORD *)(v128 - 8);
  __chkstk_darwin(v128);
  v123 = (char *)&v112 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_5440(&qword_26B488);
  v9 = __chkstk_darwin(v8);
  v119 = (char *)&v112 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v12 = (char *)&v112 - v11;
  v13 = sub_5440(&qword_26B490);
  v124 = *(_QWORD *)(v13 - 8);
  v14 = __chkstk_darwin(v13);
  v16 = (char *)&v112 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v14);
  v120 = (char *)&v112 - v18;
  __chkstk_darwin(v17);
  v20 = (char *)&v112 - v19;
  v127 = type metadata accessor for JSONContext(0);
  v136 = *(_QWORD *)(v127 - 8);
  v21 = __chkstk_darwin(v127);
  v23 = (char *)&v112 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = __chkstk_darwin(v21);
  v26 = (char *)&v112 - v25;
  v27 = __chkstk_darwin(v24);
  v129 = (char *)&v112 - v28;
  __chkstk_darwin(v27);
  v30 = (char *)&v112 - v29;
  v31 = sub_93DA4(a1, a1, (uint64_t)&protocol descriptor for IntentModel, (uint64_t)&protocol descriptor for Decodable);
  if (v31)
  {
    v116 = v32;
    v117 = v33;
    v119 = (char *)v31;
    v34 = *(_QWORD *)(v130 + 24);
    v35 = *(_QWORD *)(v130 + 32);
    sub_5480((_QWORD *)v130, v34);
    v36 = dispatch thunk of Decoder.userInfo.getter(v34, v35);
    v37 = JSONContext.init(userInfo:)(v36);
    static JSONContext.Property<A>.intentTypes.getter(v37);
    v38 = v128;
    JSONContext.subscript.getter(v20, v128);
    v39 = *(void (**)(char *, uint64_t))(v124 + 8);
    v39(v20, v13);
    v40 = v125;
    v41 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v125 + 48))(v12, 1, v38);
    v42 = sub_B414((uint64_t)v12, &qword_26B488);
    v43 = v127;
    if (v41 == 1)
    {
      v44 = v40;
      v45 = v121(v42);
      v124 = v13;
      v46 = v123;
      v47 = AnyIntentTypes.init(_:)(v122, v45);
      v48 = v43;
      v49 = v120;
      static JSONContext.Property<A>.intentTypes.getter(v47);
      v50 = v129;
      JSONContext.addingValue<A>(_:forProperty:)(v46, v49, v38);
      v51 = v49;
      v43 = v48;
      v39(v51, v124);
      (*(void (**)(char *, uint64_t))(v44 + 8))(v46, v38);
      v52 = v136;
      (*(void (**)(char *, uint64_t))(v136 + 8))(v30, v48);
      (*(void (**)(char *, char *, uint64_t))(v52 + 32))(v30, v50, v48);
    }
    v53 = *(_QWORD *)(v130 + 24);
    v54 = *(_QWORD *)(v130 + 32);
    sub_5480((_QWORD *)v130, v53);
    v55 = v136;
    v56 = v129;
    (*(void (**)(char *, char *, uint64_t))(v136 + 16))(v129, v30, v43);
    v57 = Dictionary<>.init(jsonContext:)(v56);
    Decoder.withUserInfo(_:)(v131, v57, v53, v54);
    swift_bridgeObjectRelease(v57);
    v58 = v119;
    *(_QWORD *)&v134 = v119;
    *((_QWORD *)&v134 + 1) = v116;
    v59 = v117;
    v135 = v117;
    sub_C404(&v132);
    v60 = v126;
    dispatch thunk of Decodable.init(from:)(v131, v58, v59);
    if (v60)
    {
      (*(void (**)(char *, uint64_t))(v55 + 8))(v30, v43);
      return sub_93E10(&v132);
    }
    v130 = v134;
    v89 = v134;
    v90 = sub_5480(&v132, v134);
    v91 = (_QWORD *)v118;
    *(_OWORD *)(v118 + 24) = v130;
    v92 = sub_C404(v91);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v89 - 8) + 16))(v92, v90, v89);
    (*(void (**)(char *, uint64_t))(v55 + 8))(v30, v43);
    return (_QWORD *)_s7BooksUI13AnyPagedFrameVwxx_0(&v132);
  }
  v62 = v119;
  v115 = v23;
  v116 = v26;
  v63 = v128;
  v64 = sub_93DA4(a1, a1, (uint64_t)&protocol descriptor for ExpressibleByJSON, (uint64_t)&protocol descriptor for IntentModel);
  if (v64)
  {
    v67 = v64;
    v113 = v66;
    v114 = v65;
    v68 = *(_QWORD *)(v130 + 24);
    v69 = *(_QWORD *)(v130 + 32);
    sub_5480((_QWORD *)v130, v68);
    v70 = dispatch thunk of Decoder.userInfo.getter(v68, v69);
    v71 = v116;
    v72 = JSONContext.init(userInfo:)(v70);
    static JSONContext.Property<A>.intentTypes.getter(v72);
    v73 = (uint64_t)v62;
    JSONContext.subscript.getter(v16, v63);
    v74 = *(void (**)(char *, uint64_t))(v124 + 8);
    v75 = v16;
    v76 = v13;
    v74(v75, v13);
    v77 = v125;
    LODWORD(v68) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v125 + 48))(v73, 1, v63);
    v78 = sub_B414(v73, &qword_26B488);
    v79 = v127;
    v80 = v136;
    if ((_DWORD)v68 == 1)
    {
      v81 = v121(v78);
      v82 = v123;
      v83 = AnyIntentTypes.init(_:)(v122, v81);
      v84 = v79;
      v85 = v120;
      static JSONContext.Property<A>.intentTypes.getter(v83);
      v124 = v67;
      JSONContext.addingValue<A>(_:forProperty:)(v82, v85, v63);
      v86 = v85;
      v79 = v84;
      v71 = v116;
      v74(v86, v76);
      (*(void (**)(char *, uint64_t))(v77 + 8))(v82, v63);
      (*(void (**)(char *, uint64_t))(v80 + 8))(v71, v79);
      v67 = v124;
      (*(void (**)(char *, char *, uint64_t))(v80 + 32))(v71, v129, v79);
    }
    sub_BD00(v130, (uint64_t)v131);
    v87 = v117;
    v88 = v126;
    JSONObject.init(from:)(v131);
    if (v88)
      return (_QWORD *)(*(uint64_t (**)(char *, uint64_t))(v80 + 8))(v71, v79);
    v103 = *(void (**)(char *, char *, uint64_t))(v80 + 16);
    v104 = v80;
    v105 = v115;
    v103(v115, v71, v79);
    v106 = v114;
    *(_QWORD *)&v134 = v67;
    *((_QWORD *)&v134 + 1) = v114;
    v135 = v113;
    sub_C404(&v132);
    dispatch thunk of ExpressibleByJSON.init(deserializing:using:)(v87, v105, v67, v106);
    v107 = v134;
    v108 = v135;
    v109 = sub_5480(&v132, v134);
    v110 = (_QWORD *)v118;
    *(_QWORD *)(v118 + 24) = v107;
    v110[4] = v108;
    v111 = sub_C404(v110);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v107 - 8) + 16))(v111, v109, v107);
    (*(void (**)(char *, uint64_t))(v104 + 8))(v71, v79);
    return (_QWORD *)_s7BooksUI13AnyPagedFrameVwxx_0(&v132);
  }
  v93 = type metadata accessor for DecodingError();
  swift_allocError(v93, &protocol witness table for DecodingError, 0, 0);
  v95 = v94;
  sub_5440(&qword_25F8F8);
  *v95 = a1;
  v96 = *(_QWORD *)(v130 + 24);
  v97 = *(_QWORD *)(v130 + 32);
  sub_5480((_QWORD *)v130, v96);
  v98 = dispatch thunk of Decoder.codingPath.getter(v96, v97);
  v132 = 0;
  v133 = 0xE000000000000000;
  _StringGuts.grow(_:)(21);
  swift_bridgeObjectRelease(v133);
  v132 = 60;
  v133 = 0xE100000000000000;
  v99._countAndFlagsBits = _typeName(_:qualified:)(a1, 0);
  object = v99._object;
  String.append(_:)(v99);
  swift_bridgeObjectRelease(object);
  v101._object = (void *)0x80000000001FB270;
  v101._countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v101);
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)(v98, v132, v133, 0);
  v102 = (*(uint64_t (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v93 - 8) + 104))(v95, enum case for DecodingError.typeMismatch(_:), v93);
  return (_QWORD *)swift_willThrow(v102);
}

uint64_t CodeAnyIntentModel.description.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t ExtendedExistentialTypeMetadata;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v5 = 0;
  v6 = 0xE000000000000000;
  v4 = *(_QWORD *)(a1 + 16);
  ExtendedExistentialTypeMetadata = swift_getExtendedExistentialTypeMetadata(&unk_1E3480, &v4);
  DefaultStringInterpolation.appendInterpolation<A>(_:)(v1, ExtendedExistentialTypeMetadata);
  return v5;
}

uint64_t CodeAnyIntentModel.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  ValueMetadata *v9;
  uint64_t v10;
  __int128 v11;
  __int128 v13[2];
  _OWORD v14[2];
  uint64_t v15;

  v7 = a1[3];
  v8 = a1[4];
  sub_5480(a1, v7);
  v9 = Decoder.intentKindTable.getter(v7, v8);
  Decoder.decodeIntentModel<A, B>(using:returning:)(v7, (uint64_t)v9, a2, v8, v10, (uint64_t)v13);
  if (!v3)
  {
    sub_AC68(v13, (uint64_t)v14);
    v11 = v14[1];
    *(_OWORD *)a3 = v14[0];
    *(_OWORD *)(a3 + 16) = v11;
    *(_QWORD *)(a3 + 32) = v15;
  }
  return _s7BooksUI13AnyPagedFrameVwxx_0(a1);
}

uint64_t Decoder.decodeIntentModel<A>(returning:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  ValueMetadata *v8;
  uint64_t v9;

  v8 = Decoder.intentKindTable.getter(a1, a3);
  return Decoder.decodeIntentModel<A, B>(using:returning:)(a1, (uint64_t)v8, a2, a3, v9, a4);
}

uint64_t sub_1B8F40@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return CodeAnyIntentModel.init(from:)(a1, *(_QWORD *)(a2 + 16), a3);
}

ValueMetadata *Decoder.intentKindTable.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  ValueMetadata *v6;
  ValueMetadata *v8;

  v2 = dispatch thunk of Decoder.userInfo.getter(a1, a2);
  if (qword_25DD48 != -1)
    swift_once(&qword_25DD48, sub_1B9338);
  v3 = sub_5440(&qword_26B3E8);
  v4 = sub_7120(v3, (uint64_t)qword_26B3D0);
  v5 = sub_5440(&qword_26B3F0);
  Dictionary<>.subscript.getter(&v8, v4, v2, v5);
  swift_bridgeObjectRelease(v2);
  v6 = v8;
  if (!v8)
  {
    v6 = &type metadata for EmptyIntentKindTable;
    sub_1B93B0();
  }
  return v6;
}

uint64_t Decoder.decodeIntentModel<A, B>(using:returning:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t WitnessTable;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t MetatypeMetadata;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD v35[3];
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v29 = a5;
  v38 = sub_5440(&qword_262930);
  v31 = *(_QWORD *)(v38 - 8);
  __chkstk_darwin(v38);
  v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  dispatch thunk of Decoder.singleValueContainer()(v35, a1, a4);
  v30 = a2;
  if (v6)
  {
    v19 = dispatch thunk of Decoder.userInfo.getter(a1, a4);
    static JSONContext.Property<A>.initFailureObserver.getter();
    v20 = sub_5440(&qword_262938);
    Dictionary<>.subscript.getter(v35, v13, v19, v20);
    swift_bridgeObjectRelease(v19);
    (*(void (**)(char *, uint64_t))(v31 + 8))(v13, v38);
    sub_93C2C((uint64_t)v35, (uint64_t)&v32);
    v21 = v33;
    if (v33)
    {
      v22 = v34;
      sub_5480(&v32, v33);
      MetatypeMetadata = swift_getMetatypeMetadata(v30);
      dispatch thunk of JSONInitFailureObserver.tryingToInitialize(_:didFailWith:)(MetatypeMetadata, v6, v21, v22);
      v24 = _s7BooksUI13AnyPagedFrameVwxx_0(&v32);
    }
    else
    {
      v24 = sub_B414((uint64_t)&v32, &qword_262940);
    }
    swift_willThrow(v24);
    return sub_B414((uint64_t)v35, &qword_262940);
  }
  else
  {
    v27 = a6;
    v14 = v36;
    v28 = v37;
    sub_5480(v35, v36);
    v15 = type metadata accessor for _IntentKindTable_BooksReturningUnknown(255, a2, a3, v29);
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for _IntentKindTable_BooksReturningUnknown<A, B>, v15);
    v17 = type metadata accessor for CodeByKind(0, v15, WitnessTable);
    v18 = swift_getWitnessTable(&protocol conformance descriptor for CodeByKind<A>, v17);
    dispatch thunk of SingleValueDecodingContainer.decode<A>(_:)(&v32, v17, v17, v18, v14, v28);
    sub_AC68(&v32, v27);
    return _s7BooksUI13AnyPagedFrameVwxx_0(v35);
  }
}

unint64_t sub_1B9254()
{
  unint64_t result;

  result = sub_93D4((uint64_t)_swiftEmptyArrayStorage);
  qword_26B3C8 = result;
  return result;
}

uint64_t sub_1B9278()
{
  if (qword_25DD40 != -1)
    swift_once(&qword_25DD40, sub_1B9254);
  return swift_bridgeObjectRetain(qword_26B3C8);
}

unint64_t sub_1B92B8()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  if (qword_25DD40 != -1)
    swift_once(&qword_25DD40, sub_1B9254);
  v0 = qword_26B3C8;
  v1 = swift_bridgeObjectRetain(qword_26B3C8);
  v2 = sub_1B9674(v1);
  swift_bridgeObjectRelease(v0);
  return v2;
}

_QWORD *sub_1B931C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_1B8554(a1, a2, (uint64_t (*)(uint64_t))sub_1B93B0, a3);
}

uint64_t sub_1B9338()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_5440(&qword_26B3E8);
  sub_73A0(v0, qword_26B3D0);
  sub_7120(v0, (uint64_t)qword_26B3D0);
  v1 = sub_5440(&qword_26B3F0);
  return JSONContext.Property.init(_:)(0xD000000000000020, 0x80000000001FE950, v1);
}

unint64_t sub_1B93B0()
{
  unint64_t result;

  result = qword_26B3F8[0];
  if (!qword_26B3F8[0])
  {
    result = swift_getWitnessTable(&unk_1F73D0, &type metadata for EmptyIntentKindTable);
    atomic_store(result, qword_26B3F8);
  }
  return result;
}

uint64_t static JSONContext.Property<A>.booksIntentKindTable.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_25DD48 != -1)
    swift_once(&qword_25DD48, sub_1B9338);
  v2 = sub_5440(&qword_26B3E8);
  v3 = sub_7120(v2, (uint64_t)qword_26B3D0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t type metadata accessor for CodeAnyIntentModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10E40(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CodeAnyIntentModel);
}

ValueMetadata *type metadata accessor for EmptyIntentKindTable()
{
  return &type metadata for EmptyIntentKindTable;
}

unint64_t sub_1B9488()
{
  unint64_t result;

  result = qword_26B480;
  if (!qword_26B480)
  {
    result = swift_getWitnessTable(&unk_1F7388, &type metadata for EmptyIntentKindTable);
    atomic_store(result, (unint64_t *)&qword_26B480);
  }
  return result;
}

unint64_t sub_1B94CC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  Swift::Int v5;
  _QWORD v7[9];

  Hasher.init(_seed:)(v7, *(_QWORD *)(v2 + 40));
  String.hash(into:)(v7, a1, a2);
  v5 = Hasher._finalize()();
  return sub_1B9530(a1, a2, v5);
}

unint64_t sub_1B9530(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t i;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v17;
  uint64_t v18;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  i = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * i);
    v11 = v10[1];
    if ((*v10 != a1 || v11 != a2) && (_stringCompareWithSmolCheck(_:_:expecting:)(*v10, v11, a1, a2, 0) & 1) == 0)
    {
      v13 = ~v5;
      i = (i + 1) & v13;
      if (((*(_QWORD *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
      {
        v14 = (_QWORD *)(v9 + 16 * i);
        v15 = v14[1];
        if ((*v14 != a1 || v15 != a2) && (_stringCompareWithSmolCheck(_:_:expecting:)(*v14, v15, a1, a2, 0) & 1) == 0)
        {
          for (i = (i + 1) & v13; ((*(_QWORD *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0; i = (i + 1) & v13)
          {
            v17 = (_QWORD *)(v9 + 16 * i);
            v18 = v17[1];
            if (*v17 == a1 && v18 == a2)
              break;
            if ((_stringCompareWithSmolCheck(_:_:expecting:)(*v17, v18, a1, a2, 0) & 1) != 0)
              break;
          }
        }
      }
    }
  }
  return i;
}

unint64_t sub_1B9674(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t result;
  int64_t i;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  int64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t *v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  unint64_t v37;
  __int128 v38;
  uint64_t v39;

  v1 = a1;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    sub_5440(&qword_262950);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  }
  else
  {
    v3 = &_swiftEmptyDictionarySingleton;
  }
  v36 = v1 + 64;
  v4 = -1 << *(_BYTE *)(v1 + 32);
  if (-v4 < 64)
    v5 = ~(-1 << -(char)v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(v1 + 64);
  v35 = (unint64_t)(63 - v4) >> 6;
  result = swift_bridgeObjectRetain(v1);
  i = 0;
  v9 = (uint64_t *)&unk_26B498;
  v10 = (uint64_t *)&unk_262960;
  if (v6)
    goto LABEL_10;
LABEL_11:
  v18 = i + 1;
  if (__OFADD__(i, 1))
    goto LABEL_36;
  if (v18 >= v35)
    goto LABEL_33;
  v19 = *(_QWORD *)(v36 + 8 * v18);
  v20 = i + 1;
  if (!v19)
  {
    v20 = i + 2;
    if (i + 2 >= v35)
      goto LABEL_33;
    v19 = *(_QWORD *)(v36 + 8 * v20);
    if (!v19)
    {
      v20 = i + 3;
      if (i + 3 >= v35)
        goto LABEL_33;
      v19 = *(_QWORD *)(v36 + 8 * v20);
      if (!v19)
      {
        v20 = i + 4;
        if (i + 4 >= v35)
          goto LABEL_33;
        v19 = *(_QWORD *)(v36 + 8 * v20);
        if (!v19)
        {
          v20 = i + 5;
          if (i + 5 >= v35)
            goto LABEL_33;
          v19 = *(_QWORD *)(v36 + 8 * v20);
          if (!v19)
          {
            v20 = i + 6;
            if (i + 6 >= v35)
              goto LABEL_33;
            v19 = *(_QWORD *)(v36 + 8 * v20);
            v21 = i + 6;
            if (!v19)
            {
              while (1)
              {
                v20 = v21 + 1;
                if (__OFADD__(v21, 1))
                  goto LABEL_37;
                if (v20 >= v35)
                  break;
                v19 = *(_QWORD *)(v36 + 8 * v20);
                ++v21;
                if (v19)
                  goto LABEL_27;
              }
LABEL_33:
              sub_94160(v1);
              return (unint64_t)v3;
            }
          }
        }
      }
    }
  }
LABEL_27:
  v6 = (v19 - 1) & v19;
  v17 = __clz(__rbit64(v19)) + (v20 << 6);
  for (i = v20; ; v17 = v16 | (i << 6))
  {
    v22 = 16 * v17;
    v23 = (uint64_t *)(*(_QWORD *)(v1 + 48) + 16 * v17);
    v25 = *v23;
    v24 = v23[1];
    v38 = *(_OWORD *)(*(_QWORD *)(v1 + 56) + v22);
    swift_bridgeObjectRetain(v24);
    v26 = sub_5440(v9);
    v27 = sub_5440(v10);
    swift_dynamicCast(&v39, &v38, v26, v27, 7);
    v28 = v39;
    result = sub_1B94CC(v25, v24);
    v29 = result;
    if ((v30 & 1) != 0)
    {
      v37 = v6;
      v11 = v1;
      v12 = i;
      v13 = v10;
      v14 = v9;
      v15 = (uint64_t *)(v3[6] + 16 * result);
      result = swift_bridgeObjectRelease(v15[1]);
      *v15 = v25;
      v15[1] = v24;
      v9 = v14;
      v10 = v13;
      i = v12;
      v1 = v11;
      v6 = v37;
      *(_QWORD *)(v3[7] + 8 * v29) = v28;
      if (!v37)
        goto LABEL_11;
      goto LABEL_10;
    }
    if (v3[2] >= v3[3])
      break;
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v31 = (uint64_t *)(v3[6] + 16 * result);
    *v31 = v25;
    v31[1] = v24;
    *(_QWORD *)(v3[7] + 8 * result) = v28;
    v32 = v3[2];
    v33 = __OFADD__(v32, 1);
    v34 = v32 + 1;
    if (v33)
      goto LABEL_35;
    v3[2] = v34;
    if (!v6)
      goto LABEL_11;
LABEL_10:
    v16 = __clz(__rbit64(v6));
    v6 &= v6 - 1;
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
  return result;
}

unint64_t sub_1B9990()
{
  unint64_t result;

  result = qword_26B4A0;
  if (!qword_26B4A0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for IntentKinds, &type metadata for IntentKinds);
    atomic_store(result, (unint64_t *)&qword_26B4A0);
  }
  return result;
}

unint64_t static SeriesRoomHeaderView.fakeScrollContentsName.getter()
{
  return 0xD00000000000001ALL;
}

uint64_t SeriesRoomHeaderView.init(title:author:authorAction:authorImpressionMetrics:narrator:footer:coverViewModels:quickActionButtonViewModel:seriesID:systemColorScheme:contextActionMenuView:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  int *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t result;
  _QWORD *v32;

  *(_QWORD *)a9 = swift_getKeyPath(&unk_1F7400);
  *(_BYTE *)(a9 + 8) = 0;
  v22 = (int *)type metadata accessor for SeriesRoomHeaderView(0);
  v23 = (_QWORD *)(a9 + v22[5]);
  *v23 = swift_getKeyPath(&unk_1F7428);
  v24 = sub_5440(&qword_25F548);
  swift_storeEnumTagMultiPayload(v23, v24, 0);
  v25 = a9 + v22[6];
  *(_QWORD *)v25 = swift_getKeyPath(&unk_1F7450);
  *(_BYTE *)(v25 + 40) = 0;
  v26 = a9 + v22[7];
  *(_QWORD *)v26 = swift_getKeyPath(&unk_1F7478);
  *(_BYTE *)(v26 + 8) = 0;
  v27 = a9 + v22[8];
  *(_QWORD *)v27 = swift_getKeyPath(&unk_1F74C0);
  *(_QWORD *)(v27 + 8) = 0;
  *(_BYTE *)(v27 + 16) = 0;
  sub_167A4(a1, a9 + v22[9], &qword_261048);
  sub_167A4(a2, a9 + v22[10], &qword_261048);
  sub_167A4(a3, a9 + v22[11], &qword_25E840);
  sub_167A4(a4, a9 + v22[12], &qword_25FE30);
  sub_167A4(a5, a9 + v22[13], &qword_261A08);
  sub_167A4(a6, a9 + v22[14], &qword_261A10);
  *(_QWORD *)(a9 + v22[15]) = a7;
  sub_21C88(a8, a9 + v22[16], type metadata accessor for SeriesQuickActionButtonViewModel);
  v28 = (_QWORD *)(a9 + v22[17]);
  *v28 = a10;
  v28[1] = a11;
  v29 = a9 + v22[18];
  v30 = type metadata accessor for ColorScheme(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 32))(v29, a12, v30);
  v32 = (_QWORD *)(a9 + v22[19]);
  *v32 = a13;
  v32[1] = a14;
  return result;
}

uint64_t SeriesRoomHeaderView.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;

  v2 = v1;
  if (qword_25DB10 != -1)
    swift_once(&qword_25DB10, sub_72E8);
  v4 = type metadata accessor for Logger(0);
  v5 = sub_7120(v4, (uint64_t)qword_25DF00);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v8 = 0;
    _os_log_impl(&dword_0, v6, v7, "SwiftUI::SeriesRoomHeaderView::body evaluated", v8, 2u);
    swift_slowDealloc(v8, -1, -1);
  }

  *(_QWORD *)a1 = static HorizontalAlignment.center.getter(v9);
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  v10 = sub_5440(&qword_26B4C0);
  return sub_1B9D28(v2, a1 + *(int *)(v10 + 44));
}

uint64_t sub_1B9D28@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  double v34;
  uint64_t v35;
  char v36;
  char v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  char v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  double v62;
  double v63;
  double v64;
  double v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  char v87;
  char *v88[3];

  v86 = a2;
  v3 = sub_5440(&qword_26B5A0);
  __chkstk_darwin(v3);
  v85 = (char *)&v77 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for SizeConstants.Spacing(0);
  __chkstk_darwin(v5);
  v80 = (uint64_t)&v77 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for SizeConstants(0);
  __chkstk_darwin(v7);
  v77 = (uint64_t)&v77 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_5440(&qword_26B5A8);
  __chkstk_darwin(v9);
  v11 = (char *)&v77 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v83 = sub_5440(&qword_26B5B0);
  v81 = *(_QWORD *)(v83 - 8);
  v12 = __chkstk_darwin(v83);
  v79 = (uint64_t)&v77 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v78 = (uint64_t)&v77 - v14;
  v15 = sub_5440(&qword_26B5B8);
  v16 = __chkstk_darwin(v15);
  v84 = (char *)&v77 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v19 = (char *)&v77 - v18;
  v20 = sub_5440(&qword_26B5C0);
  v21 = __chkstk_darwin(v20);
  v82 = (char *)&v77 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __chkstk_darwin(v21);
  v25 = (char *)&v77 - v24;
  __chkstk_darwin(v23);
  v27 = (char *)&v77 - v26;
  v28 = type metadata accessor for SeriesRoomHeaderView(0);
  v29 = *(_QWORD *)(a1 + *(int *)(v28 + 60));
  v30 = a1 + *(int *)(v28 + 32);
  v31 = *(_QWORD *)v30;
  v32 = *(_QWORD *)(v30 + 8);
  v33 = *(_BYTE *)(v30 + 16);
  swift_bridgeObjectRetain(v29);
  sub_1BCB68(v31, v32, v33);
  v34 = sub_326B8(v31, v32, v33);
  sub_35C5C(v31, v32, v33);
  v35 = *(_QWORD *)a1;
  v36 = *(_BYTE *)(a1 + 8);
  sub_F9E4(*(_QWORD *)a1, v36);
  v37 = sub_30DB4(v35, v36);
  sub_BE0C(v35, v36);
  v87 = v37 & 1;
  SeriesHeaderCoverStackLayout.init(covers:pageWidth:heroWidthScale:)(v29, &v87, v88, v34);
  v39 = v88[0];
  if (v88[0])
  {
    v40 = v86;
    v42 = v88[1];
    v41 = v88[2];
    *(_QWORD *)v25 = static VerticalAlignment.center.getter(v38);
    *((_QWORD *)v25 + 1) = 0;
    v25[16] = 0;
    v43 = sub_5440(&qword_26B5D0);
    sub_1BA360((uint64_t)v39, a1, (uint64_t)&v25[*(int *)(v43 + 44)], *(double *)&v42, *(double *)&v41);
    swift_bridgeObjectRelease(v39);
    sub_167A4((uint64_t)v25, (uint64_t)v27, &qword_26B5C0);
    sub_F9E4(v35, v36);
    v44 = sub_30DB4(v35, v36);
    sub_BE0C(v35, v36);
    if ((v44 & 1) != 0)
    {
      sub_F9E4(v35, v36);
      v45 = sub_30DB4(v35, v36);
      v46 = sub_BE0C(v35, v36);
      v47 = v40;
      v48 = (uint64_t)v85;
      v50 = (uint64_t)v82;
      v49 = v83;
      if ((v45 & 1) != 0)
        v51 = static HorizontalAlignment.center.getter(v46);
      else
        v51 = static HorizontalAlignment.leading.getter(v46);
      *(_QWORD *)v11 = v51;
      *((_QWORD *)v11 + 1) = 0x403C000000000000;
      v11[16] = 0;
      v56 = sub_5440(&qword_26B5E0);
      v57 = sub_1BBD20(a1, (uint64_t)&v11[*(int *)(v56 + 44)]);
      v58 = static Edge.Set.bottom.getter(v57);
      v59 = v77;
      sub_3168C(v77);
      v60 = v80;
      sub_1E428(v59, v80, type metadata accessor for SizeConstants.Environment);
      sub_224DC(v59, type metadata accessor for SizeConstants);
      v61 = sub_224DC(v60, type metadata accessor for SizeConstants.Spacing);
      v65 = EdgeInsets.init(_all:)(v61, 32.0, v62, v63, v64);
      v67 = v66;
      v69 = v68;
      v71 = v70;
      v72 = v79;
      sub_B3D0((uint64_t)v11, v79, &qword_26B5A8);
      v73 = v72 + *(int *)(v49 + 36);
      *(_BYTE *)v73 = v58;
      *(double *)(v73 + 8) = v65;
      *(_QWORD *)(v73 + 16) = v67;
      *(_QWORD *)(v73 + 24) = v69;
      *(_QWORD *)(v73 + 32) = v71;
      *(_BYTE *)(v73 + 40) = 0;
      sub_B414((uint64_t)v11, &qword_26B5A8);
      v74 = v78;
      sub_167A4(v72, v78, &qword_26B5B0);
      sub_167A4(v74, (uint64_t)v19, &qword_26B5B0);
      v54 = 0;
      v55 = (uint64_t)v84;
    }
    else
    {
      v54 = 1;
      v47 = v40;
      v55 = (uint64_t)v84;
      v48 = (uint64_t)v85;
      v50 = (uint64_t)v82;
      v49 = v83;
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v81 + 56))(v19, v54, 1, v49);
    sub_B3D0((uint64_t)v27, v50, &qword_26B5C0);
    sub_B3D0((uint64_t)v19, v55, &qword_26B5B8);
    sub_B3D0(v50, v48, &qword_26B5C0);
    v75 = sub_5440(&qword_26B5D8);
    sub_B3D0(v55, v48 + *(int *)(v75 + 48), &qword_26B5B8);
    sub_B414((uint64_t)v19, &qword_26B5B8);
    sub_B414((uint64_t)v27, &qword_26B5C0);
    sub_B414(v55, &qword_26B5B8);
    sub_B414(v50, &qword_26B5C0);
    v76 = sub_5440(&qword_26B5C8);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v76 - 8) + 56))(v48, 0, 1, v76);
    return sub_167A4(v48, v47, &qword_26B5A0);
  }
  else
  {
    v52 = sub_5440(&qword_26B5C8);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 56))(v86, 1, 1, v52);
  }
}

uint64_t sub_1BA360@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  double v25;
  uint64_t v26;
  double v27;
  double v28;
  double v29;
  double v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char v39;
  double v40;
  uint64_t v41;
  double v42;
  double v43;
  double v44;
  double v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;

  v10 = sub_5440(&qword_2626D0);
  __chkstk_darwin(v10);
  v12 = (char *)&v54 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_5440(&qword_2626D8);
  __chkstk_darwin(v13);
  v15 = (char *)&v54 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_5440(&qword_26B5F0);
  v17 = __chkstk_darwin(v16);
  v19 = (char *)&v54 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v12 = static HorizontalAlignment.leading.getter(v17);
  *((_QWORD *)v12 + 1) = 0x403C000000000000;
  v12[16] = 0;
  v20 = sub_5440(&qword_26B5F8);
  sub_1BA5C4(a1, a2, (uint64_t)&v12[*(int *)(v20 + 44)], a4, a5);
  v21 = _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0();
  sub_88334(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v15, 0.0, 1, INFINITY, 0, v21, v22);
  v23 = sub_B414((uint64_t)v12, &qword_2626D0);
  v24 = static Edge.Set.top.getter(v23);
  v25 = sub_1BBABC();
  v30 = EdgeInsets.init(_all:)(v26, v25, v27, v28, v29);
  v32 = v31;
  v34 = v33;
  v36 = v35;
  sub_B3D0((uint64_t)v15, (uint64_t)v19, &qword_2626D8);
  v37 = &v19[*(int *)(v16 + 36)];
  *v37 = v24;
  *((double *)v37 + 1) = v30;
  *((_QWORD *)v37 + 2) = v32;
  *((_QWORD *)v37 + 3) = v34;
  *((_QWORD *)v37 + 4) = v36;
  v37[40] = 0;
  v38 = sub_B414((uint64_t)v15, &qword_2626D8);
  v39 = static Edge.Set.bottom.getter(v38);
  v40 = sub_1BBBEC();
  v45 = EdgeInsets.init(_all:)(v41, v40, v42, v43, v44);
  v47 = v46;
  v49 = v48;
  v51 = v50;
  sub_B3D0((uint64_t)v19, a3, &qword_26B5F0);
  v52 = a3 + *(int *)(sub_5440(&qword_26B600) + 36);
  *(_BYTE *)v52 = v39;
  *(double *)(v52 + 8) = v45;
  *(_QWORD *)(v52 + 16) = v47;
  *(_QWORD *)(v52 + 24) = v49;
  *(_QWORD *)(v52 + 32) = v51;
  *(_BYTE *)(v52 + 40) = 0;
  return sub_B414((uint64_t)v19, &qword_26B5F0);
}

uint64_t sub_1BA5C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  int *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  char v47;
  char v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  uint64_t v76;
  double v77;
  double v78;
  double v79;
  double v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int *v92;
  char *v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  char *v97;
  char *v98;
  char *v99;
  char *v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;

  v104 = a3;
  v105 = a1;
  v8 = type metadata accessor for SizeConstants.Spacing(0);
  __chkstk_darwin(v8);
  v98 = (char *)&v92 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for SizeConstants(0);
  __chkstk_darwin(v10);
  v97 = (char *)&v92 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for SeriesQuickActionButtonViewModel(0);
  __chkstk_darwin(v12);
  v95 = (char *)&v92 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v94 = type metadata accessor for SeriesQuickActionButtonView(0);
  v14 = __chkstk_darwin(v94);
  v16 = (char *)&v92 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v96 = (uint64_t)&v92 - v17;
  v18 = sub_5440(&qword_2626C8);
  __chkstk_darwin(v18);
  v20 = (char *)&v92 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_5440(&qword_26B608);
  v102 = *(_QWORD *)(v21 - 8);
  v103 = v21;
  v22 = __chkstk_darwin(v21);
  v24 = (char *)&v92 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v26 = (char *)&v92 - v25;
  v27 = (int *)type metadata accessor for SeriesRoomHeaderView(0);
  __chkstk_darwin(v27);
  v29 = (char *)&v92 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = sub_5440(&qword_26B610);
  v31 = __chkstk_darwin(v30);
  v101 = (char *)&v92 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v31);
  v99 = (char *)&v92 - v33;
  v34 = sub_5440(&qword_26B618);
  v35 = __chkstk_darwin(v34);
  v100 = (char *)&v92 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = __chkstk_darwin(v35);
  v39 = (char *)&v92 - v38;
  v40 = __chkstk_darwin(v37);
  v42 = (uint64_t)&v92 - v41;
  *(_QWORD *)v39 = static VerticalAlignment.top.getter(v40);
  *((_QWORD *)v39 + 1) = 0;
  v39[16] = 0;
  v43 = sub_5440(&qword_26B620);
  sub_1BACEC(v105, a2, (uint64_t)&v39[*(int *)(v43 + 44)], a4, a5);
  v105 = v42;
  sub_167A4((uint64_t)v39, v42, &qword_26B618);
  v44 = *(_QWORD *)a2;
  LOBYTE(v39) = *(_BYTE *)(a2 + 8);
  sub_F9E4(*(_QWORD *)a2, (char)v39);
  LOBYTE(v42) = sub_30DB4(v44, (char)v39);
  sub_BE0C(v44, (char)v39);
  sub_1E428(a2, (uint64_t)v29, type metadata accessor for SeriesRoomHeaderView);
  if ((v42 & 1) != 0)
  {
    sub_224DC((uint64_t)v29, type metadata accessor for SeriesRoomHeaderView);
LABEL_6:
    v69 = 1;
    v71 = v103;
    v70 = v104;
    v64 = (uint64_t)v101;
    v72 = v102;
    v65 = (uint64_t)v99;
    v73 = (uint64_t)v100;
    v66 = v105;
    goto LABEL_9;
  }
  v93 = v24;
  v45 = &v29[v27[7]];
  v46 = *(_QWORD *)v45;
  v47 = v45[8];
  sub_F9E4(*(_QWORD *)v45, v47);
  v48 = sub_30DB4(v46, v47);
  sub_BE0C(v46, v47);
  sub_224DC((uint64_t)v29, type metadata accessor for SeriesRoomHeaderView);
  if ((v48 & 1) == 0)
    goto LABEL_6;
  v49 = (uint64_t)v95;
  sub_1E428(a2 + v27[16], (uint64_t)v95, type metadata accessor for SeriesQuickActionButtonViewModel);
  v92 = v27;
  v50 = (uint64_t *)(a2 + v27[19]);
  v52 = *v50;
  v51 = v50[1];
  *(_QWORD *)v16 = swift_getKeyPath(&unk_1F75D0);
  v16[40] = 0;
  *((_QWORD *)v16 + 6) = swift_getKeyPath(&unk_1F75F8);
  *((_WORD *)v16 + 44) = 256;
  v53 = type metadata accessor for ProfileRestrictions(0);
  v54 = sub_6FD0((unint64_t *)&qword_26AF00, type metadata accessor for ProfileRestrictions, (uint64_t)&protocol conformance descriptor for ProfileRestrictions);
  swift_retain(v51);
  *((_QWORD *)v16 + 12) = EnvironmentObject.init()(v53, v54);
  *((_QWORD *)v16 + 13) = v55;
  v56 = v94;
  sub_21C88(v49, (uint64_t)&v16[*(int *)(v94 + 32)], type metadata accessor for SeriesQuickActionButtonViewModel);
  v57 = &v16[*(int *)(v56 + 36)];
  *(_QWORD *)v57 = v52;
  *((_QWORD *)v57 + 1) = v51;
  v58 = v96;
  sub_21C88((uint64_t)v16, v96, type metadata accessor for SeriesQuickActionButtonView);
  v59 = *(_QWORD *)a2;
  LOBYTE(v52) = *(_BYTE *)(a2 + 8);
  sub_F9E4(*(_QWORD *)a2, v52);
  LOBYTE(v56) = sub_30DB4(v59, v52);
  v60 = sub_BE0C(v59, v52);
  v62 = (uint64_t)v97;
  v61 = (uint64_t)v98;
  v63 = (uint64_t)v20;
  v64 = (uint64_t)v101;
  v95 = v26;
  v65 = (uint64_t)v99;
  v66 = v105;
  if ((v56 & 1) != 0)
    v67 = _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0();
  else
    v67 = static Alignment.leading.getter(v60);
  sub_88398(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v63, 0.0, 1, 0.0, 1, v67, v68);
  v74 = sub_224DC(v58, type metadata accessor for SeriesQuickActionButtonView);
  v75 = static Edge.Set.bottom.getter(v74);
  sub_3168C(v62);
  sub_1E428(v62, v61, type metadata accessor for SizeConstants.Environment);
  sub_224DC(v62, type metadata accessor for SizeConstants);
  v76 = sub_224DC(v61, type metadata accessor for SizeConstants.Spacing);
  v80 = EdgeInsets.init(_all:)(v76, 40.0, v77, v78, v79);
  v82 = v81;
  v84 = v83;
  v86 = v85;
  v87 = (uint64_t)v93;
  sub_B3D0(v63, (uint64_t)v93, &qword_2626C8);
  v71 = v103;
  v88 = v87 + *(int *)(v103 + 36);
  *(_BYTE *)v88 = v75;
  *(double *)(v88 + 8) = v80;
  *(_QWORD *)(v88 + 16) = v82;
  *(_QWORD *)(v88 + 24) = v84;
  *(_QWORD *)(v88 + 32) = v86;
  *(_BYTE *)(v88 + 40) = 0;
  sub_B414(v63, &qword_2626C8);
  v89 = (uint64_t)v95;
  sub_167A4(v87, (uint64_t)v95, &qword_26B608);
  sub_167A4(v89, v65, &qword_26B608);
  v69 = 0;
  v70 = v104;
  v72 = v102;
  v73 = (uint64_t)v100;
LABEL_9:
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v72 + 56))(v65, v69, 1, v71);
  sub_B3D0(v66, v73, &qword_26B618);
  sub_B3D0(v65, v64, &qword_26B610);
  sub_B3D0(v73, v70, &qword_26B618);
  v90 = sub_5440(&qword_26B628);
  sub_B3D0(v64, v70 + *(int *)(v90 + 48), &qword_26B610);
  sub_B414(v65, &qword_26B610);
  sub_B414(v66, &qword_26B618);
  sub_B414(v64, &qword_26B610);
  return sub_B414(v73, &qword_26B618);
}

uint64_t sub_1BACEC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  double *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t KeyPath;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  int v125;
  int v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  char *v132;
  uint64_t v133;

  v133 = a3;
  v9 = sub_5440(&qword_26B5A8);
  __chkstk_darwin(v9);
  v117 = (uint64_t *)((char *)&v108 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v115 = sub_5440(&qword_26B630);
  __chkstk_darwin(v115);
  v116 = (uint64_t)&v108 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v124 = sub_5440(&qword_26B638);
  v12 = __chkstk_darwin(v124);
  v114 = (uint64_t)&v108 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v118 = (uint64_t)&v108 - v14;
  v119 = sub_5440(&qword_26B640);
  __chkstk_darwin(v119);
  v123 = (uint64_t)&v108 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for TopLockupMetadataView(0);
  __chkstk_darwin(v16);
  v112 = (uint64_t)&v108 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v110 = sub_5440(&qword_26B648);
  __chkstk_darwin(v110);
  v111 = (uint64_t)&v108 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v120 = sub_5440(&qword_26B650);
  v19 = __chkstk_darwin(v120);
  v109 = (uint64_t)&v108 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v113 = (uint64_t)&v108 - v21;
  v22 = sub_5440(&qword_26B658);
  v23 = __chkstk_darwin(v22);
  v122 = (uint64_t)&v108 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  v121 = (char *)&v108 - v25;
  v26 = sub_5440(&qword_26B660);
  v27 = __chkstk_darwin(v26);
  v132 = (char *)&v108 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27);
  v131 = (char *)&v108 - v29;
  v127 = sub_5440(&qword_25EE58);
  __chkstk_darwin(v127);
  v31 = (uint64_t *)((char *)&v108 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0));
  v32 = type metadata accessor for SizeConstants.Spacing(0);
  __chkstk_darwin(v32);
  v34 = (char *)&v108 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = type metadata accessor for SizeConstants(0);
  __chkstk_darwin(v35);
  v37 = (char *)&v108 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = sub_5440(&qword_26B668);
  __chkstk_darwin(v38);
  v40 = (double *)((char *)&v108 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0));
  v41 = sub_5440(&qword_26B670);
  v42 = __chkstk_darwin(v41);
  v130 = (uint64_t)&v108 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = __chkstk_darwin(v42);
  v46 = (char *)&v108 - v45;
  __chkstk_darwin(v44);
  v128 = a1;
  v129 = (uint64_t)&v108 - v47;
  v48 = *(_QWORD *)a2;
  v49 = *(_BYTE *)(a2 + 8);
  swift_bridgeObjectRetain(a1);
  sub_F9E4(v48, v49);
  v126 = sub_30DB4(v48, v49);
  v50 = sub_BE0C(v48, v49);
  v125 = static Edge.Set.trailing.getter(v50);
  sub_F9E4(v48, v49);
  LOBYTE(a1) = sub_30DB4(v48, v49);
  v51 = sub_BE0C(v48, v49);
  v55 = 0.0;
  if ((a1 & 1) == 0)
  {
    type metadata accessor for SeriesRoomHeaderView(0);
    sub_3168C((uint64_t)v37);
    sub_1E428((uint64_t)v37, (uint64_t)v34, type metadata accessor for SizeConstants.Environment);
    sub_224DC((uint64_t)v37, type metadata accessor for SizeConstants);
    v51 = sub_224DC((uint64_t)v34, type metadata accessor for SizeConstants.Spacing);
    v55 = 40.0;
  }
  v56 = EdgeInsets.init(_all:)(v51, v55, v52, v53, v54);
  v58 = v57;
  v60 = v59;
  v62 = v61;
  KeyPath = swift_getKeyPath(&unk_1F7620);
  v64 = type metadata accessor for SeriesRoomHeaderView(0);
  v65 = a2 + *(int *)(v64 + 72);
  v66 = (char *)v31 + *(int *)(v127 + 28);
  v67 = type metadata accessor for ColorScheme(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v67 - 8) + 16))(v66, v65, v67);
  *v31 = KeyPath;
  sub_B3D0((uint64_t)v31, (uint64_t)v40 + *(int *)(v38 + 36), &qword_25EE58);
  *(_QWORD *)v40 = v128;
  v40[1] = a4;
  v40[2] = a5;
  *((_BYTE *)v40 + 24) = v126 & 1;
  *((_BYTE *)v40 + 32) = v125;
  v40[5] = v56;
  *((_QWORD *)v40 + 6) = v58;
  *((_QWORD *)v40 + 7) = v60;
  *((_QWORD *)v40 + 8) = v62;
  *((_BYTE *)v40 + 72) = 0;
  sub_B414((uint64_t)v31, &qword_25EE58);
  v68 = sub_1BF748();
  View.accessibility(hidden:)(1, v38, v68);
  sub_B414((uint64_t)v40, &qword_26B668);
  v69 = v129;
  sub_167A4((uint64_t)v46, v129, &qword_26B670);
  v70 = *(_QWORD *)a2;
  v71 = *(_BYTE *)(a2 + 8);
  sub_F9E4(*(_QWORD *)a2, v71);
  v72 = sub_30DB4(v70, v71);
  sub_BE0C(v70, v71);
  if ((v72 & 1) != 0)
  {
    v73 = sub_5440(&qword_26B6E8);
    v74 = (uint64_t)v131;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v73 - 8) + 56))(v131, 1, 1, v73);
    v75 = (uint64_t)v132;
  }
  else
  {
    v76 = a2 + *(int *)(v64 + 28);
    v77 = *(_QWORD *)v76;
    v78 = *(_BYTE *)(v76 + 8);
    sub_F9E4(*(_QWORD *)v76, v78);
    v79 = sub_30DB4(v77, v78);
    sub_BE0C(v77, v78);
    if ((v79 & 1) != 0)
    {
      v80 = v112;
      sub_1BB7F0(v112);
      v81 = v111;
      sub_1E428(v80, v111, type metadata accessor for TopLockupMetadataView);
      *(_WORD *)(v81 + *(int *)(v110 + 36)) = 256;
      sub_224DC(v80, type metadata accessor for TopLockupMetadataView);
      v82 = v109;
      sub_B3D0(v81, v109, &qword_26B648);
      v83 = v120;
      *(_QWORD *)(v82 + *(int *)(v120 + 36)) = 0x3FF0000000000000;
      sub_B414(v81, &qword_26B648);
      v84 = v113;
      sub_167A4(v82, v113, &qword_26B650);
      v85 = v123;
      sub_B3D0(v84, v123, &qword_26B650);
      swift_storeEnumTagMultiPayload(v85, v119, 0);
      v86 = sub_1BF850(&qword_26B6A0, &qword_26B650, (void (*)(void))sub_1BF8D4);
      v87 = sub_1BF850(&qword_26B6C8, &qword_26B638, (void (*)(void))sub_1BF958);
      v88 = (uint64_t)v121;
      _ConditionalContent<>.init(storage:)(v85, v83, v124, v86, v87);
      sub_B414(v84, &qword_26B650);
      v74 = (uint64_t)v131;
      v75 = (uint64_t)v132;
    }
    else
    {
      sub_F9E4(v70, v71);
      v89 = sub_30DB4(v70, v71);
      v90 = sub_BE0C(v70, v71);
      v75 = (uint64_t)v132;
      v88 = (uint64_t)v121;
      if ((v89 & 1) != 0)
        v91 = static HorizontalAlignment.center.getter(v90);
      else
        v91 = static HorizontalAlignment.leading.getter(v90);
      v74 = (uint64_t)v131;
      v92 = (uint64_t)v117;
      *v117 = v91;
      *(_QWORD *)(v92 + 8) = 0x403C000000000000;
      *(_BYTE *)(v92 + 16) = 0;
      v93 = sub_5440(&qword_26B5E0);
      sub_1BBD20(a2, v92 + *(int *)(v93 + 44));
      v94 = v116;
      sub_B3D0(v92, v116, &qword_26B5A8);
      *(_WORD *)(v94 + *(int *)(v115 + 36)) = 256;
      sub_B414(v92, &qword_26B5A8);
      v95 = v114;
      sub_B3D0(v94, v114, &qword_26B630);
      v96 = v124;
      *(_QWORD *)(v95 + *(int *)(v124 + 36)) = 0x3FF0000000000000;
      sub_B414(v94, &qword_26B630);
      v97 = v118;
      sub_167A4(v95, v118, &qword_26B638);
      v98 = v123;
      sub_B3D0(v97, v123, &qword_26B638);
      swift_storeEnumTagMultiPayload(v98, v119, 1);
      v99 = sub_1BF850(&qword_26B6A0, &qword_26B650, (void (*)(void))sub_1BF8D4);
      v100 = sub_1BF850(&qword_26B6C8, &qword_26B638, (void (*)(void))sub_1BF958);
      _ConditionalContent<>.init(storage:)(v98, v120, v96, v99, v100);
      sub_B414(v97, &qword_26B638);
    }
    v101 = v122;
    sub_B3D0(v88, v122, &qword_26B658);
    sub_B3D0(v101, v75, &qword_26B658);
    v102 = v75 + *(int *)(sub_5440(&qword_26B6E0) + 48);
    *(_QWORD *)v102 = 0;
    *(_BYTE *)(v102 + 8) = 1;
    sub_B414(v88, &qword_26B658);
    sub_B414(v101, &qword_26B658);
    v103 = sub_5440(&qword_26B6E8);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v103 - 8) + 56))(v75, 0, 1, v103);
    sub_167A4(v75, v74, &qword_26B660);
  }
  v104 = v130;
  sub_B3D0(v69, v130, &qword_26B670);
  sub_B3D0(v74, v75, &qword_26B660);
  v105 = v133;
  sub_B3D0(v104, v133, &qword_26B670);
  v106 = sub_5440(&qword_26B6F0);
  sub_B3D0(v75, v105 + *(int *)(v106 + 48), &qword_26B660);
  sub_B414(v74, &qword_26B660);
  sub_B414(v69, &qword_26B670);
  sub_B414(v75, &qword_26B660);
  return sub_B414(v104, &qword_26B670);
}

uint64_t sub_1BB7F0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  int *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE v34[40];
  _BYTE v35[40];

  v33 = a1;
  v2 = sub_5440(&qword_261A10);
  __chkstk_darwin(v2);
  v4 = (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = v4;
  v5 = sub_5440(&qword_261A08);
  __chkstk_darwin(v5);
  v32 = (uint64_t)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_5440(&qword_25FE30);
  __chkstk_darwin(v7);
  v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = v9;
  v10 = sub_5440(&qword_261048);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v11);
  v16 = (char *)&v30 - v15;
  v17 = __chkstk_darwin(v14);
  v19 = (char *)&v30 - v18;
  __chkstk_darwin(v17);
  v21 = (char *)&v30 - v20;
  v22 = (int *)type metadata accessor for SeriesRoomHeaderView(0);
  sub_B3D0(v1 + v22[9], (uint64_t)v21, &qword_261048);
  sub_B3D0(v1 + v22[10], (uint64_t)v19, &qword_261048);
  sub_B3D0(v1 + v22[11], (uint64_t)v35, &qword_25E840);
  sub_B3D0(v1 + v22[12], (uint64_t)v9, &qword_25FE30);
  v23 = v32;
  sub_B3D0(v1 + v22[13], v32, &qword_261A08);
  sub_B3D0(v1 + v22[14], (uint64_t)v4, &qword_261A10);
  v24 = (uint64_t *)(v1 + v22[17]);
  v26 = *v24;
  v25 = v24[1];
  swift_bridgeObjectRetain(v25);
  sub_321BC((uint64_t)v34);
  v27 = type metadata accessor for HighlightAttributionViewLoader(0);
  swift_allocObject(v27, *(unsigned int *)(v27 + 48), *(unsigned __int16 *)(v27 + 52));
  v28 = HighlightAttributionViewLoader.init(id:provider:)(v26, v25, (uint64_t)v34);
  swift_storeEnumTagMultiPayload(v16, v10, 2);
  swift_storeEnumTagMultiPayload(v13, v10, 2);
  return TopLockupMetadataView.init(preheader:title:subtitle:author:authorAction:authorImpressionMetrics:narrator:footer:isVibrant:highlightAttributionViewLoader:)((uint64_t)v16, (uint64_t)v21, (uint64_t)v13, (uint64_t)v19, (uint64_t)v35, (uint64_t)v31, v23, (uint64_t)v30, v33, 1, (uint64_t)v28);
}

double sub_1BBABC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char v8;
  char v9;
  double result;
  uint64_t v11;

  v1 = type metadata accessor for SizeConstants.Spacing(0);
  __chkstk_darwin(v1);
  v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for SizeConstants(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)v0;
  v8 = *(_BYTE *)(v0 + 8);
  sub_F9E4(*(_QWORD *)v0, v8);
  v9 = sub_30DB4(v7, v8);
  sub_BE0C(v7, v8);
  type metadata accessor for SeriesRoomHeaderView(0);
  sub_3168C((uint64_t)v6);
  sub_1E428((uint64_t)v6, (uint64_t)v3, type metadata accessor for SizeConstants.Environment);
  sub_224DC((uint64_t)v6, type metadata accessor for SizeConstants);
  sub_224DC((uint64_t)v3, type metadata accessor for SizeConstants.Spacing);
  result = 16.0;
  if ((v9 & 1) != 0)
    return 12.0;
  return result;
}

double sub_1BBBEC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char v8;
  char v9;
  double result;
  uint64_t v11;

  v1 = type metadata accessor for SizeConstants.Spacing(0);
  __chkstk_darwin(v1);
  v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for SizeConstants(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)v0;
  v8 = *(_BYTE *)(v0 + 8);
  sub_F9E4(*(_QWORD *)v0, v8);
  v9 = sub_30DB4(v7, v8);
  sub_BE0C(v7, v8);
  type metadata accessor for SeriesRoomHeaderView(0);
  sub_3168C((uint64_t)v6);
  sub_1E428((uint64_t)v6, (uint64_t)v3, type metadata accessor for SizeConstants.Environment);
  sub_224DC((uint64_t)v6, type metadata accessor for SizeConstants);
  sub_224DC((uint64_t)v3, type metadata accessor for SizeConstants.Spacing);
  result = 40.0;
  if ((v9 & 1) != 0)
    return 24.0;
  return result;
}

uint64_t sub_1BBD20@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v47 = a2;
  v3 = type metadata accessor for SeriesQuickActionButtonViewModel(0);
  __chkstk_darwin(v3);
  v5 = (char *)&v42 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for SeriesQuickActionButtonView(0);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v42 - v10;
  v12 = sub_5440(&qword_2626C8);
  v13 = __chkstk_darwin(v12);
  v46 = (uint64_t)&v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v13);
  v43 = (uint64_t)&v42 - v16;
  __chkstk_darwin(v15);
  v45 = (uint64_t)&v42 - v17;
  v18 = type metadata accessor for TopLockupMetadataView(0);
  v19 = __chkstk_darwin(v18);
  v44 = (uint64_t)&v42 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v22 = (char *)&v42 - v21;
  sub_1BB7F0((uint64_t)&v42 - v21);
  v23 = type metadata accessor for SeriesRoomHeaderView(0);
  sub_1E428(a1 + *(int *)(v23 + 64), (uint64_t)v5, type metadata accessor for SeriesQuickActionButtonViewModel);
  v24 = (uint64_t *)(a1 + *(int *)(v23 + 76));
  v26 = *v24;
  v25 = v24[1];
  *(_QWORD *)v9 = swift_getKeyPath(&unk_1F75D0);
  v9[40] = 0;
  *((_QWORD *)v9 + 6) = swift_getKeyPath(&unk_1F75F8);
  *((_WORD *)v9 + 44) = 256;
  v27 = type metadata accessor for ProfileRestrictions(0);
  v28 = sub_6FD0((unint64_t *)&qword_26AF00, type metadata accessor for ProfileRestrictions, (uint64_t)&protocol conformance descriptor for ProfileRestrictions);
  swift_retain(v25);
  *((_QWORD *)v9 + 12) = EnvironmentObject.init()(v27, v28);
  *((_QWORD *)v9 + 13) = v29;
  sub_21C88((uint64_t)v5, (uint64_t)&v9[*(int *)(v6 + 32)], type metadata accessor for SeriesQuickActionButtonViewModel);
  v30 = &v9[*(int *)(v6 + 36)];
  *(_QWORD *)v30 = v26;
  *((_QWORD *)v30 + 1) = v25;
  sub_21C88((uint64_t)v9, (uint64_t)v11, type metadata accessor for SeriesQuickActionButtonView);
  v31 = *(_QWORD *)a1;
  LOBYTE(a1) = *(_BYTE *)(a1 + 8);
  sub_F9E4(v31, a1);
  LOBYTE(v25) = sub_30DB4(v31, a1);
  v32 = sub_BE0C(v31, a1);
  if ((v25 & 1) != 0)
    v33 = _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0();
  else
    v33 = static Alignment.leading.getter(v32);
  v35 = v43;
  sub_88398(0.0, 1, 0.0, 1, 360.0, 0, 0.0, 1, v43, 0.0, 1, 0.0, 1, v33, v34);
  sub_224DC((uint64_t)v11, type metadata accessor for SeriesQuickActionButtonView);
  v36 = v45;
  sub_167A4(v35, v45, &qword_2626C8);
  v37 = v44;
  sub_1E428((uint64_t)v22, v44, type metadata accessor for TopLockupMetadataView);
  v38 = v46;
  sub_B3D0(v36, v46, &qword_2626C8);
  v39 = v47;
  sub_1E428(v37, v47, type metadata accessor for TopLockupMetadataView);
  v40 = sub_5440(&qword_26B5E8);
  sub_B3D0(v38, v39 + *(int *)(v40 + 48), &qword_2626C8);
  sub_B414(v36, &qword_2626C8);
  sub_224DC((uint64_t)v22, type metadata accessor for TopLockupMetadataView);
  sub_B414(v38, &qword_2626C8);
  return sub_224DC(v37, type metadata accessor for TopLockupMetadataView);
}

uint64_t sub_1BC0FC()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD v3[2];

  v0 = type metadata accessor for CoordinateSpace(0);
  sub_73A0(v0, qword_26B4A8);
  v1 = sub_7120(v0, (uint64_t)qword_26B4A8);
  v3[0] = 0xD00000000000001ALL;
  v3[1] = 0x80000000001FE980;
  AnyHashable.init<A>(_:)(v3, &type metadata for String, &protocol witness table for String);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v0 - 8) + 104))(v1, enum case for CoordinateSpace.named(_:), v0);
}

uint64_t static CoordinateSpace.fakeScrollContents.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_25DD50 != -1)
    swift_once(&qword_25DD50, sub_1BC0FC);
  v2 = type metadata accessor for CoordinateSpace(0);
  v3 = sub_7120(v2, (uint64_t)qword_26B4A8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t type metadata accessor for SeriesRoomHeaderView(uint64_t a1)
{
  uint64_t result;

  result = qword_26B520;
  if (!qword_26B520)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SeriesRoomHeaderView);
  return result;
}

void sub_1BC268(uint64_t a1@<X8>)
{
  uint64_t v2;

  *(double *)a1 = EnvironmentValues.shelfContainerSize.getter();
  *(_QWORD *)(a1 + 8) = v2;
}

uint64_t sub_1BC290(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &opaque type descriptor for <<opaque return type of SeriesRoomHeaderView.body>>, 1);
}

unint64_t initializeBufferWithCopyOfBuffer for SeriesRoomHeaderView(unint64_t a1, uint64_t a2, int *a3)
{
  int v5;
  uint64_t v7;
  char v8;
  uint64_t v9;
  _WORD *v10;
  _WORD *v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  const void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  const void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  uint64_t v56;
  void *v57;
  const void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  const void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void (*v74)(char *, char *, uint64_t);
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int EnumCaseMultiPayload;
  __int128 v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  __int128 v98;
  __int128 v99;
  uint64_t v100;
  uint64_t *v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  __int128 v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  _QWORD *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  void (*v127)(uint64_t, uint64_t, uint64_t);
  uint64_t v128;
  _QWORD *v129;
  _QWORD *v130;
  void (*v132)(char *, char *, uint64_t);
  void (*v133)(char *, char *, uint64_t);
  int *v134;
  uint64_t v135;
  char *v136;
  char *__dst;
  char *__dsta;
  unsigned int (*v139)(char *, uint64_t, uint64_t);
  uint64_t v140;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) == 0)
  {
    v7 = *(_QWORD *)a2;
    v8 = *(_BYTE *)(a2 + 8);
    sub_F9E4(*(_QWORD *)a2, v8);
    *(_QWORD *)a1 = v7;
    *(_BYTE *)(a1 + 8) = v8;
    v9 = a3[5];
    v10 = (_WORD *)(a1 + v9);
    v11 = (_WORD *)(a2 + v9);
    v12 = sub_5440(&qword_25F548);
    if (swift_getEnumCaseMultiPayload(v11, v12) == 1)
    {
      *v10 = *v11;
      v13 = (int *)type metadata accessor for SizeConstants.Environment(0);
      v14 = v13[6];
      v15 = (char *)v10 + v14;
      v16 = (char *)v11 + v14;
      v17 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v15, v16, v17);
      *(_QWORD *)((char *)v10 + v13[7]) = *(_QWORD *)((char *)v11 + v13[7]);
      v18 = v13[8];
      v19 = (char *)v10 + v18;
      v20 = (char *)v11 + v18;
      v19[2] = v20[2];
      *(_WORD *)v19 = *(_WORD *)v20;
      v21 = 1;
    }
    else
    {
      v23 = *(_QWORD *)v11;
      *(_QWORD *)v10 = *(_QWORD *)v11;
      swift_retain(v23);
      v21 = 0;
    }
    swift_storeEnumTagMultiPayload(v10, v12, v21);
    v24 = a3[6];
    v25 = a1 + v24;
    v26 = (uint64_t *)(a2 + v24);
    if ((*(_BYTE *)(a2 + v24 + 40) & 1) != 0)
    {
      v27 = v26[3];
      if (v27)
      {
        v28 = v26[4];
        *(_QWORD *)(v25 + 24) = v27;
        *(_QWORD *)(v25 + 32) = v28;
        (**(void (***)(uint64_t))(v27 - 8))(v25);
      }
      else
      {
        v30 = *((_OWORD *)v26 + 1);
        *(_OWORD *)v25 = *(_OWORD *)v26;
        *(_OWORD *)(v25 + 16) = v30;
        *(_QWORD *)(v25 + 32) = v26[4];
      }
      *(_BYTE *)(v25 + 40) = 1;
    }
    else
    {
      v29 = *v26;
      *(_QWORD *)v25 = *v26;
      *(_BYTE *)(v25 + 40) = 0;
      swift_retain(v29);
    }
    v31 = a3[7];
    v32 = a1 + v31;
    v33 = a2 + v31;
    v34 = *(_QWORD *)v33;
    v35 = *(_BYTE *)(v33 + 8);
    sub_F9E4(*(_QWORD *)v33, v35);
    *(_QWORD *)v32 = v34;
    *(_BYTE *)(v32 + 8) = v35;
    v36 = a3[8];
    v37 = a1 + v36;
    v38 = a2 + v36;
    v39 = *(_QWORD *)v38;
    v40 = *(_QWORD *)(v38 + 8);
    LOBYTE(v32) = *(_BYTE *)(v38 + 16);
    sub_1BCB68(*(_QWORD *)v38, v40, v32);
    *(_QWORD *)v37 = v39;
    *(_QWORD *)(v37 + 8) = v40;
    *(_BYTE *)(v37 + 16) = v32;
    v41 = a3[9];
    v42 = (void *)(a1 + v41);
    v43 = (const void *)(a2 + v41);
    v44 = sub_5440(&qword_261048);
    if (swift_getEnumCaseMultiPayload(v43, v44))
    {
      memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
    }
    else
    {
      v45 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v45 - 8) + 16))(v42, v43, v45);
      swift_storeEnumTagMultiPayload(v42, v44, 0);
    }
    v46 = a3[10];
    v47 = (void *)(a1 + v46);
    v48 = (const void *)(a2 + v46);
    if (swift_getEnumCaseMultiPayload(a2 + v46, v44))
    {
      memcpy(v47, v48, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
    }
    else
    {
      v49 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v49 - 8) + 16))(v47, v48, v49);
      swift_storeEnumTagMultiPayload(v47, v44, 0);
    }
    v50 = a3[11];
    v51 = a1 + v50;
    v52 = a2 + v50;
    v53 = *(_QWORD *)(a2 + v50 + 24);
    if (v53)
    {
      v54 = *(_QWORD *)(v52 + 32);
      *(_QWORD *)(v51 + 24) = v53;
      *(_QWORD *)(v51 + 32) = v54;
      (**(void (***)(void))(v53 - 8))();
    }
    else
    {
      v55 = *(_OWORD *)(v52 + 16);
      *(_OWORD *)v51 = *(_OWORD *)v52;
      *(_OWORD *)(v51 + 16) = v55;
      *(_QWORD *)(v51 + 32) = *(_QWORD *)(v52 + 32);
    }
    v56 = a3[12];
    v57 = (void *)(a1 + v56);
    v58 = (const void *)(a2 + v56);
    v59 = type metadata accessor for ImpressionMetrics(0);
    v60 = *(_QWORD *)(v59 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v60 + 48))(v58, 1, v59))
    {
      v61 = sub_5440(&qword_25FE30);
      memcpy(v57, v58, *(_QWORD *)(*(_QWORD *)(v61 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v60 + 16))(v57, v58, v59);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v60 + 56))(v57, 0, 1, v59);
    }
    v62 = a3[13];
    v63 = (void *)(a1 + v62);
    v64 = (const void *)(a2 + v62);
    v65 = sub_5440(&qword_261A08);
    if (swift_getEnumCaseMultiPayload(v64, v65))
    {
      memcpy(v63, v64, *(_QWORD *)(*(_QWORD *)(v65 - 8) + 64));
    }
    else
    {
      v66 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v66 - 8) + 16))(v63, v64, v66);
      v67 = sub_5440(&qword_261A38);
      *((_BYTE *)v63 + *(int *)(v67 + 48)) = *((_BYTE *)v64 + *(int *)(v67 + 48));
      swift_storeEnumTagMultiPayload(v63, v65, 0);
    }
    v68 = a3[14];
    v69 = (char *)(a1 + v68);
    v70 = (char *)(a2 + v68);
    v71 = sub_5440(&qword_261A10);
    if (swift_getEnumCaseMultiPayload(v70, v71))
    {
      memcpy(v69, v70, *(_QWORD *)(*(_QWORD *)(v71 - 8) + 64));
    }
    else
    {
      v72 = type metadata accessor for LocalizerRequest(0);
      v73 = *(_QWORD *)(v72 - 8);
      v74 = *(void (**)(char *, char *, uint64_t))(v73 + 16);
      v74(v69, v70, v72);
      v134 = (int *)type metadata accessor for TopLockupMetadataView.Footer(0);
      v75 = v134[5];
      v76 = &v70[v75];
      __dst = &v69[v75];
      v139 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v73 + 48);
      v132 = v74;
      if (v139(&v70[v75], 1, v72))
      {
        v77 = sub_5440(&qword_25E0C8);
        memcpy(__dst, v76, *(_QWORD *)(*(_QWORD *)(v77 - 8) + 64));
      }
      else
      {
        v74(__dst, v76, v72);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v73 + 56))(__dst, 0, 1, v72);
      }
      v78 = v134[6];
      v79 = &v69[v78];
      v80 = &v70[v78];
      if (v139(&v70[v78], 1, v72))
      {
        v81 = sub_5440(&qword_25E0C8);
        memcpy(v79, v80, *(_QWORD *)(*(_QWORD *)(v81 - 8) + 64));
        v82 = v73;
      }
      else
      {
        v132(v79, v80, v72);
        v82 = v73;
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v73 + 56))(v79, 0, 1, v72);
      }
      v83 = v134[7];
      v84 = &v69[v83];
      v85 = &v70[v83];
      if (v139(v85, 1, v72))
      {
        v86 = sub_5440(&qword_25E0C8);
        memcpy(v84, v85, *(_QWORD *)(*(_QWORD *)(v86 - 8) + 64));
      }
      else
      {
        v132(v84, v85, v72);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v82 + 56))(v84, 0, 1, v72);
      }
      swift_storeEnumTagMultiPayload(v69, v71, 0);
    }
    v87 = a3[15];
    v88 = a3[16];
    v89 = *(_QWORD *)(a2 + v87);
    *(_QWORD *)(a1 + v87) = v89;
    v90 = a1 + v88;
    v91 = a2 + v88;
    v92 = type metadata accessor for SeriesQuickActionButtonViewModel.Style(0);
    swift_bridgeObjectRetain(v89);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v91, v92);
    if (EnumCaseMultiPayload == 2)
    {
      v98 = *(_OWORD *)(v91 + 24);
      *(_OWORD *)(v90 + 24) = v98;
      (**(void (***)(uint64_t, uint64_t))(v98 - 8))(v90, v91);
      v95 = v90;
      v96 = v92;
      v97 = 2;
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v99 = *(_OWORD *)(v91 + 24);
      *(_OWORD *)(v90 + 24) = v99;
      (**(void (***)(uint64_t, uint64_t))(v99 - 8))(v90, v91);
      v140 = sub_5440(&qword_263690);
      v100 = *(int *)(v140 + 48);
      v101 = (uint64_t *)(v90 + v100);
      v102 = (uint64_t *)(v91 + v100);
      v103 = type metadata accessor for CardInfo(0);
      v104 = *(_QWORD *)(v103 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v104 + 48))(v102, 1, v103))
      {
        v105 = sub_5440(&qword_2618C8);
        memcpy(v101, v102, *(_QWORD *)(*(_QWORD *)(v105 - 8) + 64));
      }
      else
      {
        v135 = *v102;
        *v101 = *v102;
        v106 = *(int *)(v103 + 20);
        v136 = (char *)v102 + v106;
        __dsta = (char *)v101 + v106;
        v107 = type metadata accessor for UUID(0);
        v133 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v107 - 8) + 16);
        swift_bridgeObjectRetain(v135);
        v133(__dsta, v136, v107);
        (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v104 + 56))(v101, 0, 1, v103);
      }
      v108 = *(int *)(v140 + 64);
      v109 = v90 + v108;
      v110 = v91 + v108;
      v111 = type metadata accessor for AltSeriesContentTypeExposureData(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v111 - 8) + 16))(v109, v110, v111);
      v95 = v90;
      v96 = v92;
      v97 = 1;
    }
    else
    {
      if (EnumCaseMultiPayload)
      {
        memcpy((void *)v90, (const void *)v91, *(_QWORD *)(*(_QWORD *)(v92 - 8) + 64));
LABEL_50:
        v112 = type metadata accessor for SeriesQuickActionButtonViewModel(0);
        v113 = *(int *)(v112 + 20);
        v114 = v90 + v113;
        v115 = v91 + v113;
        v116 = type metadata accessor for SeriesData(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v116 - 8) + 16))(v114, v115, v116);
        v117 = *(int *)(v112 + 24);
        v118 = *(_OWORD *)(v91 + v117 + 24);
        *(_OWORD *)(v90 + v117 + 24) = v118;
        (**(void (***)(void))(v118 - 8))();
        v119 = a3[17];
        v120 = a3[18];
        v121 = (_QWORD *)(a1 + v119);
        v122 = (_QWORD *)(a2 + v119);
        v123 = v122[1];
        *v121 = *v122;
        v121[1] = v123;
        v124 = a1 + v120;
        v125 = a2 + v120;
        v126 = type metadata accessor for ColorScheme(0);
        v127 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v126 - 8) + 16);
        swift_bridgeObjectRetain(v123);
        v127(v124, v125, v126);
        v128 = a3[19];
        v129 = (_QWORD *)(a1 + v128);
        v130 = (_QWORD *)(a2 + v128);
        v22 = v130[1];
        *v129 = *v130;
        v129[1] = v22;
        goto LABEL_51;
      }
      v94 = *(_OWORD *)(v91 + 24);
      *(_OWORD *)(v90 + 24) = v94;
      (**(void (***)(uint64_t, uint64_t))(v94 - 8))(v90, v91);
      v95 = v90;
      v96 = v92;
      v97 = 0;
    }
    swift_storeEnumTagMultiPayload(v95, v96, v97);
    goto LABEL_50;
  }
  v22 = *(_QWORD *)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  a1 = v22 + ((v5 + 16) & ~(unint64_t)v5);
LABEL_51:
  swift_retain(v22);
  return a1;
}

uint64_t sub_1BCB68(uint64_t result, uint64_t a2, char a3)
{
  if ((a3 & 1) == 0)
    return swift_retain(result);
  return result;
}

double destroy for SeriesRoomHeaderView(uint64_t a1, int *a2)
{
  _QWORD *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t);
  int *v26;
  uint64_t v27;
  unsigned int (*v28)(uint64_t, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  int EnumCaseMultiPayload;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  double result;

  sub_BE0C(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
  v4 = (_QWORD *)(a1 + a2[5]);
  v5 = sub_5440(&qword_25F548);
  if (swift_getEnumCaseMultiPayload(v4, v5) == 1)
  {
    v6 = (char *)v4 + *(int *)(type metadata accessor for SizeConstants.Environment(0) + 24);
    v7 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  }
  else
  {
    swift_release(*v4);
  }
  v8 = (_QWORD *)(a1 + a2[6]);
  if ((v8[5] & 1) != 0)
  {
    if (v8[3])
      _s7BooksUI13AnyPagedFrameVwxx_0(v8);
  }
  else
  {
    swift_release(*v8);
  }
  sub_BE0C(*(_QWORD *)(a1 + a2[7]), *(_BYTE *)(a1 + a2[7] + 8));
  sub_35C5C(*(_QWORD *)(a1 + a2[8]), *(_QWORD *)(a1 + a2[8] + 8), *(_BYTE *)(a1 + a2[8] + 16));
  v9 = a1 + a2[9];
  v10 = sub_5440(&qword_261048);
  if (!swift_getEnumCaseMultiPayload(v9, v10))
  {
    v11 = type metadata accessor for LocalizerRequest(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v9, v11);
  }
  v12 = a1 + a2[10];
  if (!swift_getEnumCaseMultiPayload(v12, v10))
  {
    v13 = type metadata accessor for LocalizerRequest(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
  }
  v14 = (_QWORD *)(a1 + a2[11]);
  if (v14[3])
    _s7BooksUI13AnyPagedFrameVwxx_0(v14);
  v15 = a1 + a2[12];
  v16 = type metadata accessor for ImpressionMetrics(0);
  v17 = *(_QWORD *)(v16 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v15, v16);
  v18 = a1 + a2[13];
  v19 = sub_5440(&qword_261A08);
  if (!swift_getEnumCaseMultiPayload(v18, v19))
  {
    v20 = type metadata accessor for LocalizerRequest(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(v18, v20);
  }
  v21 = a1 + a2[14];
  v22 = sub_5440(&qword_261A10);
  if (!swift_getEnumCaseMultiPayload(v21, v22))
  {
    v23 = type metadata accessor for LocalizerRequest(0);
    v24 = *(_QWORD *)(v23 - 8);
    v25 = *(void (**)(uint64_t, uint64_t))(v24 + 8);
    v25(v21, v23);
    v26 = (int *)type metadata accessor for TopLockupMetadataView.Footer(0);
    v27 = v21 + v26[5];
    v28 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v24 + 48);
    if (!v28(v27, 1, v23))
      v25(v27, v23);
    v29 = v21 + v26[6];
    if (!v28(v29, 1, v23))
      v25(v29, v23);
    v30 = v21 + v26[7];
    if (!v28(v30, 1, v23))
      v25(v30, v23);
  }
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[15]));
  v31 = (_QWORD *)(a1 + a2[16]);
  v32 = type metadata accessor for SeriesQuickActionButtonViewModel.Style(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v31, v32);
  switch(EnumCaseMultiPayload)
  {
    case 2:
      goto LABEL_28;
    case 1:
      _s7BooksUI13AnyPagedFrameVwxx_0(v31);
      v34 = sub_5440(&qword_263690);
      v35 = (_QWORD *)((char *)v31 + *(int *)(v34 + 48));
      v36 = type metadata accessor for CardInfo(0);
      if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 48))(v35, 1, v36))
      {
        swift_bridgeObjectRelease(*v35);
        v37 = (char *)v35 + *(int *)(v36 + 20);
        v38 = type metadata accessor for UUID(0);
        (*(void (**)(char *, uint64_t))(*(_QWORD *)(v38 - 8) + 8))(v37, v38);
      }
      v39 = (char *)v31 + *(int *)(v34 + 64);
      v40 = type metadata accessor for AltSeriesContentTypeExposureData(0);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v40 - 8) + 8))(v39, v40);
      break;
    case 0:
LABEL_28:
      _s7BooksUI13AnyPagedFrameVwxx_0(v31);
      break;
  }
  v41 = type metadata accessor for SeriesQuickActionButtonViewModel(0);
  v42 = (char *)v31 + *(int *)(v41 + 20);
  v43 = type metadata accessor for SeriesData(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v43 - 8) + 8))(v42, v43);
  _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)((char *)v31 + *(int *)(v41 + 24)));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[17] + 8));
  v44 = a1 + a2[18];
  v45 = type metadata accessor for ColorScheme(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 8))(v44, v45);
  *(_QWORD *)&result = swift_release(*(_QWORD *)(a1 + a2[19] + 8)).n128_u64[0];
  return result;
}

uint64_t initializeWithCopy for SeriesRoomHeaderView(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  _WORD *v9;
  _WORD *v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  const void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  const void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  void *v55;
  const void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  const void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void (*v72)(char *, char *, uint64_t);
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int EnumCaseMultiPayload;
  __int128 v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  __int128 v96;
  __int128 v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  __int128 v116;
  uint64_t v117;
  uint64_t v118;
  _QWORD *v119;
  _QWORD *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  void (*v125)(uint64_t, uint64_t, uint64_t);
  uint64_t v126;
  _QWORD *v127;
  _QWORD *v128;
  uint64_t v129;
  void (*v131)(char *, char *, uint64_t);
  void (*v132)(char *, char *, uint64_t);
  int *v133;
  uint64_t v134;
  char *v135;
  char *__dst;
  char *__dsta;
  unsigned int (*v138)(char *, uint64_t, uint64_t);
  uint64_t v139;

  v6 = *(_QWORD *)a2;
  v7 = *(_BYTE *)(a2 + 8);
  sub_F9E4(*(_QWORD *)a2, v7);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  v8 = a3[5];
  v9 = (_WORD *)(a1 + v8);
  v10 = (_WORD *)(a2 + v8);
  v11 = sub_5440(&qword_25F548);
  if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
  {
    *v9 = *v10;
    v12 = (int *)type metadata accessor for SizeConstants.Environment(0);
    v13 = v12[6];
    v14 = (char *)v9 + v13;
    v15 = (char *)v10 + v13;
    v16 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v14, v15, v16);
    *(_QWORD *)((char *)v9 + v12[7]) = *(_QWORD *)((char *)v10 + v12[7]);
    v17 = v12[8];
    v18 = (char *)v9 + v17;
    v19 = (char *)v10 + v17;
    v18[2] = v19[2];
    *(_WORD *)v18 = *(_WORD *)v19;
    v20 = 1;
  }
  else
  {
    v21 = *(_QWORD *)v10;
    *(_QWORD *)v9 = *(_QWORD *)v10;
    swift_retain(v21);
    v20 = 0;
  }
  swift_storeEnumTagMultiPayload(v9, v11, v20);
  v22 = a3[6];
  v23 = a1 + v22;
  v24 = (uint64_t *)(a2 + v22);
  if ((*(_BYTE *)(a2 + v22 + 40) & 1) != 0)
  {
    v25 = v24[3];
    if (v25)
    {
      v26 = v24[4];
      *(_QWORD *)(v23 + 24) = v25;
      *(_QWORD *)(v23 + 32) = v26;
      (**(void (***)(uint64_t))(v25 - 8))(v23);
    }
    else
    {
      v28 = *((_OWORD *)v24 + 1);
      *(_OWORD *)v23 = *(_OWORD *)v24;
      *(_OWORD *)(v23 + 16) = v28;
      *(_QWORD *)(v23 + 32) = v24[4];
    }
    *(_BYTE *)(v23 + 40) = 1;
  }
  else
  {
    v27 = *v24;
    *(_QWORD *)v23 = *v24;
    *(_BYTE *)(v23 + 40) = 0;
    swift_retain(v27);
  }
  v29 = a3[7];
  v30 = a1 + v29;
  v31 = a2 + v29;
  v32 = *(_QWORD *)v31;
  v33 = *(_BYTE *)(v31 + 8);
  sub_F9E4(*(_QWORD *)v31, v33);
  *(_QWORD *)v30 = v32;
  *(_BYTE *)(v30 + 8) = v33;
  v34 = a3[8];
  v35 = a1 + v34;
  v36 = a2 + v34;
  v37 = *(_QWORD *)v36;
  v38 = *(_QWORD *)(v36 + 8);
  LOBYTE(v30) = *(_BYTE *)(v36 + 16);
  sub_1BCB68(*(_QWORD *)v36, v38, v30);
  *(_QWORD *)v35 = v37;
  *(_QWORD *)(v35 + 8) = v38;
  *(_BYTE *)(v35 + 16) = v30;
  v39 = a3[9];
  v40 = (void *)(a1 + v39);
  v41 = (const void *)(a2 + v39);
  v42 = sub_5440(&qword_261048);
  if (swift_getEnumCaseMultiPayload(v41, v42))
  {
    memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
  }
  else
  {
    v43 = type metadata accessor for LocalizerRequest(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v43 - 8) + 16))(v40, v41, v43);
    swift_storeEnumTagMultiPayload(v40, v42, 0);
  }
  v44 = a3[10];
  v45 = (void *)(a1 + v44);
  v46 = (const void *)(a2 + v44);
  if (swift_getEnumCaseMultiPayload(a2 + v44, v42))
  {
    memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
  }
  else
  {
    v47 = type metadata accessor for LocalizerRequest(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v47 - 8) + 16))(v45, v46, v47);
    swift_storeEnumTagMultiPayload(v45, v42, 0);
  }
  v48 = a3[11];
  v49 = a1 + v48;
  v50 = a2 + v48;
  v51 = *(_QWORD *)(a2 + v48 + 24);
  if (v51)
  {
    v52 = *(_QWORD *)(v50 + 32);
    *(_QWORD *)(v49 + 24) = v51;
    *(_QWORD *)(v49 + 32) = v52;
    (**(void (***)(void))(v51 - 8))();
  }
  else
  {
    v53 = *(_OWORD *)(v50 + 16);
    *(_OWORD *)v49 = *(_OWORD *)v50;
    *(_OWORD *)(v49 + 16) = v53;
    *(_QWORD *)(v49 + 32) = *(_QWORD *)(v50 + 32);
  }
  v54 = a3[12];
  v55 = (void *)(a1 + v54);
  v56 = (const void *)(a2 + v54);
  v57 = type metadata accessor for ImpressionMetrics(0);
  v58 = *(_QWORD *)(v57 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v58 + 48))(v56, 1, v57))
  {
    v59 = sub_5440(&qword_25FE30);
    memcpy(v55, v56, *(_QWORD *)(*(_QWORD *)(v59 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v58 + 16))(v55, v56, v57);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v58 + 56))(v55, 0, 1, v57);
  }
  v60 = a3[13];
  v61 = (void *)(a1 + v60);
  v62 = (const void *)(a2 + v60);
  v63 = sub_5440(&qword_261A08);
  if (swift_getEnumCaseMultiPayload(v62, v63))
  {
    memcpy(v61, v62, *(_QWORD *)(*(_QWORD *)(v63 - 8) + 64));
  }
  else
  {
    v64 = type metadata accessor for LocalizerRequest(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v64 - 8) + 16))(v61, v62, v64);
    v65 = sub_5440(&qword_261A38);
    *((_BYTE *)v61 + *(int *)(v65 + 48)) = *((_BYTE *)v62 + *(int *)(v65 + 48));
    swift_storeEnumTagMultiPayload(v61, v63, 0);
  }
  v66 = a3[14];
  v67 = (char *)(a1 + v66);
  v68 = (char *)(a2 + v66);
  v69 = sub_5440(&qword_261A10);
  if (swift_getEnumCaseMultiPayload(v68, v69))
  {
    memcpy(v67, v68, *(_QWORD *)(*(_QWORD *)(v69 - 8) + 64));
  }
  else
  {
    v70 = type metadata accessor for LocalizerRequest(0);
    v71 = *(_QWORD *)(v70 - 8);
    v72 = *(void (**)(char *, char *, uint64_t))(v71 + 16);
    v72(v67, v68, v70);
    v133 = (int *)type metadata accessor for TopLockupMetadataView.Footer(0);
    v73 = v133[5];
    v74 = &v68[v73];
    __dst = &v67[v73];
    v138 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v71 + 48);
    v131 = v72;
    if (v138(&v68[v73], 1, v70))
    {
      v75 = sub_5440(&qword_25E0C8);
      memcpy(__dst, v74, *(_QWORD *)(*(_QWORD *)(v75 - 8) + 64));
    }
    else
    {
      v72(__dst, v74, v70);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v71 + 56))(__dst, 0, 1, v70);
    }
    v76 = v133[6];
    v77 = &v67[v76];
    v78 = &v68[v76];
    if (v138(&v68[v76], 1, v70))
    {
      v79 = sub_5440(&qword_25E0C8);
      memcpy(v77, v78, *(_QWORD *)(*(_QWORD *)(v79 - 8) + 64));
      v80 = v71;
    }
    else
    {
      v131(v77, v78, v70);
      v80 = v71;
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v71 + 56))(v77, 0, 1, v70);
    }
    v81 = v133[7];
    v82 = &v67[v81];
    v83 = &v68[v81];
    if (v138(v83, 1, v70))
    {
      v84 = sub_5440(&qword_25E0C8);
      memcpy(v82, v83, *(_QWORD *)(*(_QWORD *)(v84 - 8) + 64));
    }
    else
    {
      v131(v82, v83, v70);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v80 + 56))(v82, 0, 1, v70);
    }
    swift_storeEnumTagMultiPayload(v67, v69, 0);
  }
  v85 = a3[15];
  v86 = a3[16];
  v87 = *(_QWORD *)(a2 + v85);
  *(_QWORD *)(a1 + v85) = v87;
  v88 = a1 + v86;
  v89 = a2 + v86;
  v90 = type metadata accessor for SeriesQuickActionButtonViewModel.Style(0);
  swift_bridgeObjectRetain(v87);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v89, v90);
  switch(EnumCaseMultiPayload)
  {
    case 2:
      v96 = *(_OWORD *)(v89 + 24);
      *(_OWORD *)(v88 + 24) = v96;
      (**(void (***)(uint64_t, uint64_t))(v96 - 8))(v88, v89);
      v93 = v88;
      v94 = v90;
      v95 = 2;
      goto LABEL_47;
    case 1:
      v97 = *(_OWORD *)(v89 + 24);
      *(_OWORD *)(v88 + 24) = v97;
      (**(void (***)(uint64_t, uint64_t))(v97 - 8))(v88, v89);
      v139 = sub_5440(&qword_263690);
      v98 = *(int *)(v139 + 48);
      v99 = (uint64_t *)(v88 + v98);
      v100 = (uint64_t *)(v89 + v98);
      v101 = type metadata accessor for CardInfo(0);
      v102 = *(_QWORD *)(v101 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v102 + 48))(v100, 1, v101))
      {
        v103 = sub_5440(&qword_2618C8);
        memcpy(v99, v100, *(_QWORD *)(*(_QWORD *)(v103 - 8) + 64));
      }
      else
      {
        v134 = *v100;
        *v99 = *v100;
        v104 = *(int *)(v101 + 20);
        v135 = (char *)v100 + v104;
        __dsta = (char *)v99 + v104;
        v105 = type metadata accessor for UUID(0);
        v132 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v105 - 8) + 16);
        swift_bridgeObjectRetain(v134);
        v132(__dsta, v135, v105);
        (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v102 + 56))(v99, 0, 1, v101);
      }
      v106 = *(int *)(v139 + 64);
      v107 = v88 + v106;
      v108 = v89 + v106;
      v109 = type metadata accessor for AltSeriesContentTypeExposureData(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v109 - 8) + 16))(v107, v108, v109);
      v93 = v88;
      v94 = v90;
      v95 = 1;
      goto LABEL_47;
    case 0:
      v92 = *(_OWORD *)(v89 + 24);
      *(_OWORD *)(v88 + 24) = v92;
      (**(void (***)(uint64_t, uint64_t))(v92 - 8))(v88, v89);
      v93 = v88;
      v94 = v90;
      v95 = 0;
LABEL_47:
      swift_storeEnumTagMultiPayload(v93, v94, v95);
      goto LABEL_48;
  }
  memcpy((void *)v88, (const void *)v89, *(_QWORD *)(*(_QWORD *)(v90 - 8) + 64));
LABEL_48:
  v110 = type metadata accessor for SeriesQuickActionButtonViewModel(0);
  v111 = *(int *)(v110 + 20);
  v112 = v88 + v111;
  v113 = v89 + v111;
  v114 = type metadata accessor for SeriesData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v114 - 8) + 16))(v112, v113, v114);
  v115 = *(int *)(v110 + 24);
  v116 = *(_OWORD *)(v89 + v115 + 24);
  *(_OWORD *)(v88 + v115 + 24) = v116;
  (**(void (***)(void))(v116 - 8))();
  v117 = a3[17];
  v118 = a3[18];
  v119 = (_QWORD *)(a1 + v117);
  v120 = (_QWORD *)(a2 + v117);
  v121 = v120[1];
  *v119 = *v120;
  v119[1] = v121;
  v122 = a1 + v118;
  v123 = a2 + v118;
  v124 = type metadata accessor for ColorScheme(0);
  v125 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v124 - 8) + 16);
  swift_bridgeObjectRetain(v121);
  v125(v122, v123, v124);
  v126 = a3[19];
  v127 = (_QWORD *)(a1 + v126);
  v128 = (_QWORD *)(a2 + v126);
  v129 = v128[1];
  *v127 = *v128;
  v127[1] = v129;
  swift_retain(v129);
  return a1;
}

uint64_t assignWithCopy for SeriesRoomHeaderView(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  _BYTE *v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  _BYTE *v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 *v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  void *v48;
  const void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  const void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  __int128 *v59;
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  void *v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t (*v68)(void *, uint64_t, uint64_t);
  int v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  const void *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void (*v84)(char *, char *, uint64_t);
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  _QWORD *v102;
  uint64_t v103;
  int EnumCaseMultiPayload;
  uint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t *v112;
  uint64_t *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  _QWORD *v129;
  _QWORD *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  _QWORD *v138;
  _QWORD *v139;
  uint64_t v140;
  uint64_t v141;
  void (*v143)(char *, char *, uint64_t);
  void (*v144)(char *, char *, uint64_t);
  int *v145;
  uint64_t v146;
  char *v147;
  char *__dst;
  char *__dsta;
  unsigned int (*v150)(char *, uint64_t, uint64_t);
  uint64_t v151;

  v6 = *(_QWORD *)a2;
  v7 = *(_BYTE *)(a2 + 8);
  sub_F9E4(*(_QWORD *)a2, v7);
  v8 = *(_QWORD *)a1;
  v9 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  sub_BE0C(v8, v9);
  if (a1 != a2)
  {
    v10 = a3[5];
    v11 = (_BYTE *)(a1 + v10);
    v12 = (_BYTE *)(a2 + v10);
    sub_B414(a1 + v10, &qword_25F548);
    v13 = sub_5440(&qword_25F548);
    if (swift_getEnumCaseMultiPayload(v12, v13) == 1)
    {
      *v11 = *v12;
      v11[1] = v12[1];
      v14 = (int *)type metadata accessor for SizeConstants.Environment(0);
      v15 = v14[6];
      v16 = &v11[v15];
      v17 = &v12[v15];
      v18 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
      *(_QWORD *)&v11[v14[7]] = *(_QWORD *)&v12[v14[7]];
      v19 = v14[8];
      v20 = &v11[v19];
      v21 = &v12[v19];
      v22 = v21[2];
      *(_WORD *)v20 = *(_WORD *)v21;
      v20[2] = v22;
      v23 = 1;
    }
    else
    {
      v24 = *(_QWORD *)v12;
      *(_QWORD *)v11 = *(_QWORD *)v12;
      swift_retain(v24);
      v23 = 0;
    }
    swift_storeEnumTagMultiPayload(v11, v13, v23);
    v25 = a3[6];
    v26 = a1 + v25;
    v27 = (__int128 *)(a2 + v25);
    sub_B414(a1 + v25, &qword_25FAB0);
    if ((*((_BYTE *)v27 + 40) & 1) != 0)
    {
      v28 = *((_QWORD *)v27 + 3);
      if (v28)
      {
        *(_QWORD *)(v26 + 24) = v28;
        *(_QWORD *)(v26 + 32) = *((_QWORD *)v27 + 4);
        (**(void (***)(uint64_t, __int128 *))(v28 - 8))(v26, v27);
      }
      else
      {
        v30 = *v27;
        v31 = v27[1];
        *(_QWORD *)(v26 + 32) = *((_QWORD *)v27 + 4);
        *(_OWORD *)v26 = v30;
        *(_OWORD *)(v26 + 16) = v31;
      }
      *(_BYTE *)(v26 + 40) = 1;
    }
    else
    {
      v29 = *(_QWORD *)v27;
      *(_QWORD *)v26 = *(_QWORD *)v27;
      *(_BYTE *)(v26 + 40) = 0;
      swift_retain(v29);
    }
  }
  v32 = a3[7];
  v33 = a1 + v32;
  v34 = a2 + v32;
  v35 = *(_QWORD *)v34;
  v36 = *(_BYTE *)(v34 + 8);
  sub_F9E4(*(_QWORD *)v34, v36);
  v37 = *(_QWORD *)v33;
  v38 = *(_BYTE *)(v33 + 8);
  *(_QWORD *)v33 = v35;
  *(_BYTE *)(v33 + 8) = v36;
  sub_BE0C(v37, v38);
  v39 = a3[8];
  v40 = a1 + v39;
  v41 = a2 + v39;
  v42 = *(_QWORD *)v41;
  v43 = *(_QWORD *)(v41 + 8);
  LOBYTE(v33) = *(_BYTE *)(v41 + 16);
  sub_1BCB68(*(_QWORD *)v41, v43, v33);
  v44 = *(_QWORD *)v40;
  v45 = *(_QWORD *)(v40 + 8);
  v46 = *(_BYTE *)(v40 + 16);
  *(_QWORD *)v40 = v42;
  *(_QWORD *)(v40 + 8) = v43;
  *(_BYTE *)(v40 + 16) = v33;
  sub_35C5C(v44, v45, v46);
  if (a1 != a2)
  {
    v47 = a3[9];
    v48 = (void *)(a1 + v47);
    v49 = (const void *)(a2 + v47);
    sub_B414(a1 + v47, &qword_261048);
    v50 = sub_5440(&qword_261048);
    if (swift_getEnumCaseMultiPayload(v49, v50))
    {
      memcpy(v48, v49, *(_QWORD *)(*(_QWORD *)(v50 - 8) + 64));
    }
    else
    {
      v51 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v51 - 8) + 16))(v48, v49, v51);
      swift_storeEnumTagMultiPayload(v48, v50, 0);
    }
    v52 = a3[10];
    v53 = (void *)(a1 + v52);
    v54 = (const void *)(a2 + v52);
    sub_B414(a1 + v52, &qword_261048);
    v55 = sub_5440(&qword_261048);
    if (swift_getEnumCaseMultiPayload(v54, v55))
    {
      memcpy(v53, v54, *(_QWORD *)(*(_QWORD *)(v55 - 8) + 64));
    }
    else
    {
      v56 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v56 - 8) + 16))(v53, v54, v56);
      swift_storeEnumTagMultiPayload(v53, v55, 0);
    }
  }
  v57 = a3[11];
  v58 = a1 + v57;
  v59 = (__int128 *)(a2 + v57);
  v60 = *(_QWORD *)(a2 + v57 + 24);
  if (*(_QWORD *)(a1 + v57 + 24))
  {
    if (v60)
    {
      sub_142F8((_QWORD *)v58, v59);
      goto LABEL_25;
    }
    _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)v58);
  }
  else if (v60)
  {
    *(_QWORD *)(v58 + 24) = v60;
    *(_QWORD *)(v58 + 32) = *((_QWORD *)v59 + 4);
    (**(void (***)(uint64_t, __int128 *))(v60 - 8))(v58, v59);
    goto LABEL_25;
  }
  v61 = *v59;
  v62 = v59[1];
  *(_QWORD *)(v58 + 32) = *((_QWORD *)v59 + 4);
  *(_OWORD *)v58 = v61;
  *(_OWORD *)(v58 + 16) = v62;
LABEL_25:
  v63 = a3[12];
  v64 = (void *)(a1 + v63);
  v65 = (void *)(a2 + v63);
  v66 = type metadata accessor for ImpressionMetrics(0);
  v67 = *(_QWORD *)(v66 - 8);
  v68 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v67 + 48);
  v69 = v68(v64, 1, v66);
  v70 = v68(v65, 1, v66);
  if (v69)
  {
    if (!v70)
    {
      (*(void (**)(void *, void *, uint64_t))(v67 + 16))(v64, v65, v66);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v67 + 56))(v64, 0, 1, v66);
      if (a1 == a2)
        goto LABEL_49;
      goto LABEL_32;
    }
  }
  else
  {
    if (!v70)
    {
      (*(void (**)(void *, void *, uint64_t))(v67 + 24))(v64, v65, v66);
      if (a1 == a2)
        goto LABEL_49;
      goto LABEL_32;
    }
    (*(void (**)(void *, uint64_t))(v67 + 8))(v64, v66);
  }
  v71 = sub_5440(&qword_25FE30);
  memcpy(v64, v65, *(_QWORD *)(*(_QWORD *)(v71 - 8) + 64));
  if (a1 == a2)
    goto LABEL_49;
LABEL_32:
  v72 = a3[13];
  v73 = (void *)(a1 + v72);
  v74 = (const void *)(a2 + v72);
  sub_B414(a1 + v72, &qword_261A08);
  v75 = sub_5440(&qword_261A08);
  if (swift_getEnumCaseMultiPayload(v74, v75))
  {
    memcpy(v73, v74, *(_QWORD *)(*(_QWORD *)(v75 - 8) + 64));
  }
  else
  {
    v76 = type metadata accessor for LocalizerRequest(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v76 - 8) + 16))(v73, v74, v76);
    v77 = sub_5440(&qword_261A38);
    *((_BYTE *)v73 + *(int *)(v77 + 48)) = *((_BYTE *)v74 + *(int *)(v77 + 48));
    swift_storeEnumTagMultiPayload(v73, v75, 0);
  }
  v78 = a3[14];
  v79 = (char *)(a1 + v78);
  v80 = (char *)(a2 + v78);
  sub_B414(a1 + v78, &qword_261A10);
  v81 = sub_5440(&qword_261A10);
  if (swift_getEnumCaseMultiPayload(v80, v81))
  {
    memcpy(v79, v80, *(_QWORD *)(*(_QWORD *)(v81 - 8) + 64));
  }
  else
  {
    v82 = type metadata accessor for LocalizerRequest(0);
    v83 = *(_QWORD *)(v82 - 8);
    v84 = *(void (**)(char *, char *, uint64_t))(v83 + 16);
    v84(v79, v80, v82);
    v145 = (int *)type metadata accessor for TopLockupMetadataView.Footer(0);
    v85 = v145[5];
    v86 = &v80[v85];
    __dst = &v79[v85];
    v150 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v83 + 48);
    v143 = v84;
    if (v150(&v80[v85], 1, v82))
    {
      v87 = sub_5440(&qword_25E0C8);
      memcpy(__dst, v86, *(_QWORD *)(*(_QWORD *)(v87 - 8) + 64));
    }
    else
    {
      v84(__dst, v86, v82);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v83 + 56))(__dst, 0, 1, v82);
    }
    v88 = v145[6];
    v89 = &v79[v88];
    v90 = &v80[v88];
    if (v150(&v80[v88], 1, v82))
    {
      v91 = sub_5440(&qword_25E0C8);
      memcpy(v89, v90, *(_QWORD *)(*(_QWORD *)(v91 - 8) + 64));
      v92 = v83;
    }
    else
    {
      v143(v89, v90, v82);
      v92 = v83;
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v83 + 56))(v89, 0, 1, v82);
    }
    v93 = v145[7];
    v94 = &v79[v93];
    v95 = &v80[v93];
    if (v150(v95, 1, v82))
    {
      v96 = sub_5440(&qword_25E0C8);
      memcpy(v94, v95, *(_QWORD *)(*(_QWORD *)(v96 - 8) + 64));
    }
    else
    {
      v143(v94, v95, v82);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v92 + 56))(v94, 0, 1, v82);
    }
    swift_storeEnumTagMultiPayload(v79, v81, 0);
  }
LABEL_49:
  v97 = a3[15];
  v98 = *(_QWORD *)(a2 + v97);
  v99 = *(_QWORD *)(a1 + v97);
  *(_QWORD *)(a1 + v97) = v98;
  swift_bridgeObjectRetain(v98);
  swift_bridgeObjectRelease(v99);
  v100 = a3[16];
  v101 = (_QWORD *)(a1 + v100);
  v102 = (_QWORD *)(a2 + v100);
  if (a1 != a2)
  {
    sub_224DC(a1 + v100, type metadata accessor for SeriesQuickActionButtonViewModel.Style);
    v103 = type metadata accessor for SeriesQuickActionButtonViewModel.Style(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v102, v103);
    switch(EnumCaseMultiPayload)
    {
      case 2:
        v109 = v102[3];
        v101[3] = v109;
        v101[4] = v102[4];
        (**(void (***)(_QWORD *, _QWORD *))(v109 - 8))(v101, v102);
        v106 = v101;
        v107 = v103;
        v108 = 2;
        goto LABEL_60;
      case 1:
        v110 = v102[3];
        v101[3] = v110;
        v101[4] = v102[4];
        (**(void (***)(_QWORD *, _QWORD *))(v110 - 8))(v101, v102);
        v151 = sub_5440(&qword_263690);
        v111 = *(int *)(v151 + 48);
        v112 = (_QWORD *)((char *)v101 + v111);
        v113 = (_QWORD *)((char *)v102 + v111);
        v114 = type metadata accessor for CardInfo(0);
        v115 = *(_QWORD *)(v114 - 8);
        if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v115 + 48))(v113, 1, v114))
        {
          v116 = sub_5440(&qword_2618C8);
          memcpy(v112, v113, *(_QWORD *)(*(_QWORD *)(v116 - 8) + 64));
        }
        else
        {
          v146 = *v113;
          *v112 = *v113;
          v117 = *(int *)(v114 + 20);
          v147 = (char *)v113 + v117;
          __dsta = (char *)v112 + v117;
          v118 = type metadata accessor for UUID(0);
          v144 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v118 - 8) + 16);
          swift_bridgeObjectRetain(v146);
          v144(__dsta, v147, v118);
          (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v115 + 56))(v112, 0, 1, v114);
        }
        v119 = *(int *)(v151 + 64);
        v120 = (char *)v101 + v119;
        v121 = (char *)v102 + v119;
        v122 = type metadata accessor for AltSeriesContentTypeExposureData(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v122 - 8) + 16))(v120, v121, v122);
        v106 = v101;
        v107 = v103;
        v108 = 1;
        goto LABEL_60;
      case 0:
        v105 = v102[3];
        v101[3] = v105;
        v101[4] = v102[4];
        (**(void (***)(_QWORD *, _QWORD *))(v105 - 8))(v101, v102);
        v106 = v101;
        v107 = v103;
        v108 = 0;
LABEL_60:
        swift_storeEnumTagMultiPayload(v106, v107, v108);
        goto LABEL_61;
    }
    memcpy(v101, v102, *(_QWORD *)(*(_QWORD *)(v103 - 8) + 64));
  }
LABEL_61:
  v123 = type metadata accessor for SeriesQuickActionButtonViewModel(0);
  v124 = *(int *)(v123 + 20);
  v125 = (char *)v101 + v124;
  v126 = (char *)v102 + v124;
  v127 = type metadata accessor for SeriesData(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v127 - 8) + 24))(v125, v126, v127);
  sub_142F8((_QWORD *)((char *)v101 + *(int *)(v123 + 24)), (_QWORD *)((char *)v102 + *(int *)(v123 + 24)));
  v128 = a3[17];
  v129 = (_QWORD *)(a1 + v128);
  v130 = (_QWORD *)(a2 + v128);
  *v129 = *v130;
  v131 = v130[1];
  v132 = v129[1];
  v129[1] = v131;
  swift_bridgeObjectRetain(v131);
  swift_bridgeObjectRelease(v132);
  v133 = a3[18];
  v134 = a1 + v133;
  v135 = a2 + v133;
  v136 = type metadata accessor for ColorScheme(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v136 - 8) + 24))(v134, v135, v136);
  v137 = a3[19];
  v138 = (_QWORD *)(a1 + v137);
  v139 = (_QWORD *)(a2 + v137);
  v140 = v139[1];
  v141 = v138[1];
  *v138 = *v139;
  v138[1] = v140;
  swift_retain(v140);
  swift_release(v141);
  return a1;
}

uint64_t initializeWithTake for SeriesRoomHeaderView(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  _WORD *v7;
  _WORD *v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  _OWORD *v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  const void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  const void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  void *v42;
  const void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  const void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void (*v59)(char *, char *, uint64_t);
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  _OWORD *v74;
  _OWORD *v75;
  uint64_t v76;
  __int128 v77;
  uint64_t v78;
  _QWORD *v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  char *v98;
  __int128 v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  int *v105;
  uint64_t v106;
  char *v107;
  unsigned int (*v108)(char *, uint64_t, uint64_t);
  uint64_t v109;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = a3[5];
  v7 = (_WORD *)(a1 + v6);
  v8 = (_WORD *)(a2 + v6);
  v9 = sub_5440(&qword_25F548);
  if (swift_getEnumCaseMultiPayload(v8, v9) == 1)
  {
    *v7 = *v8;
    v10 = (int *)type metadata accessor for SizeConstants.Environment(0);
    v11 = v10[6];
    v12 = (char *)v7 + v11;
    v13 = (char *)v8 + v11;
    v14 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
    *(_QWORD *)((char *)v7 + v10[7]) = *(_QWORD *)((char *)v8 + v10[7]);
    v15 = v10[8];
    v16 = (char *)v7 + v15;
    v17 = (char *)v8 + v15;
    v16[2] = v17[2];
    *(_WORD *)v16 = *(_WORD *)v17;
    swift_storeEnumTagMultiPayload(v7, v9, 1);
  }
  else
  {
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  v18 = a3[6];
  v19 = a3[7];
  v20 = (_OWORD *)(a1 + v18);
  v21 = (_OWORD *)(a2 + v18);
  v22 = v21[1];
  *v20 = *v21;
  v20[1] = v22;
  *(_OWORD *)((char *)v20 + 25) = *(_OWORD *)((char *)v21 + 25);
  v23 = a1 + v19;
  v24 = a2 + v19;
  *(_BYTE *)(v23 + 8) = *(_BYTE *)(v24 + 8);
  *(_QWORD *)v23 = *(_QWORD *)v24;
  v25 = a3[8];
  v26 = a3[9];
  v27 = a1 + v25;
  v28 = a2 + v25;
  *(_OWORD *)v27 = *(_OWORD *)v28;
  *(_BYTE *)(v27 + 16) = *(_BYTE *)(v28 + 16);
  v29 = (void *)(a1 + v26);
  v30 = (const void *)(a2 + v26);
  v31 = sub_5440(&qword_261048);
  if (swift_getEnumCaseMultiPayload(v30, v31))
  {
    memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
  }
  else
  {
    v32 = type metadata accessor for LocalizerRequest(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v32 - 8) + 32))(v29, v30, v32);
    swift_storeEnumTagMultiPayload(v29, v31, 0);
  }
  v33 = a3[10];
  v34 = (void *)(a1 + v33);
  v35 = (const void *)(a2 + v33);
  if (swift_getEnumCaseMultiPayload(a2 + v33, v31))
  {
    memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
  }
  else
  {
    v36 = type metadata accessor for LocalizerRequest(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v36 - 8) + 32))(v34, v35, v36);
    swift_storeEnumTagMultiPayload(v34, v31, 0);
  }
  v37 = a3[11];
  v38 = a3[12];
  v39 = a1 + v37;
  v40 = a2 + v37;
  v41 = *(_OWORD *)(v40 + 16);
  *(_OWORD *)v39 = *(_OWORD *)v40;
  *(_OWORD *)(v39 + 16) = v41;
  *(_QWORD *)(v39 + 32) = *(_QWORD *)(v40 + 32);
  v42 = (void *)(a1 + v38);
  v43 = (const void *)(a2 + v38);
  v44 = type metadata accessor for ImpressionMetrics(0);
  v45 = *(_QWORD *)(v44 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v45 + 48))(v43, 1, v44))
  {
    v46 = sub_5440(&qword_25FE30);
    memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v45 + 32))(v42, v43, v44);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v45 + 56))(v42, 0, 1, v44);
  }
  v47 = a3[13];
  v48 = (void *)(a1 + v47);
  v49 = (const void *)(a2 + v47);
  v50 = sub_5440(&qword_261A08);
  if (swift_getEnumCaseMultiPayload(v49, v50))
  {
    memcpy(v48, v49, *(_QWORD *)(*(_QWORD *)(v50 - 8) + 64));
  }
  else
  {
    v51 = type metadata accessor for LocalizerRequest(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v51 - 8) + 32))(v48, v49, v51);
    v52 = sub_5440(&qword_261A38);
    *((_BYTE *)v48 + *(int *)(v52 + 48)) = *((_BYTE *)v49 + *(int *)(v52 + 48));
    swift_storeEnumTagMultiPayload(v48, v50, 0);
  }
  v53 = a3[14];
  v54 = (char *)(a1 + v53);
  v55 = (char *)(a2 + v53);
  v56 = sub_5440(&qword_261A10);
  if (swift_getEnumCaseMultiPayload(v55, v56))
  {
    memcpy(v54, v55, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
  }
  else
  {
    v106 = v56;
    v57 = type metadata accessor for LocalizerRequest(0);
    v58 = *(_QWORD *)(v57 - 8);
    v59 = *(void (**)(char *, char *, uint64_t))(v58 + 32);
    v59(v54, v55, v57);
    v105 = (int *)type metadata accessor for TopLockupMetadataView.Footer(0);
    v60 = v105[5];
    v61 = &v54[v60];
    v62 = &v55[v60];
    v108 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v58 + 48);
    if (v108(&v55[v60], 1, v57))
    {
      v63 = sub_5440(&qword_25E0C8);
      memcpy(v61, v62, *(_QWORD *)(*(_QWORD *)(v63 - 8) + 64));
    }
    else
    {
      v59(v61, v62, v57);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v58 + 56))(v61, 0, 1, v57);
    }
    v64 = v105[6];
    v65 = &v54[v64];
    v66 = &v55[v64];
    if (v108(&v55[v64], 1, v57))
    {
      v67 = sub_5440(&qword_25E0C8);
      memcpy(v65, v66, *(_QWORD *)(*(_QWORD *)(v67 - 8) + 64));
      v68 = v58;
    }
    else
    {
      v59(v65, v66, v57);
      v68 = v58;
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v58 + 56))(v65, 0, 1, v57);
    }
    v69 = v105[7];
    v70 = &v54[v69];
    v71 = &v55[v69];
    if (v108(v71, 1, v57))
    {
      v72 = sub_5440(&qword_25E0C8);
      memcpy(v70, v71, *(_QWORD *)(*(_QWORD *)(v72 - 8) + 64));
    }
    else
    {
      v59(v70, v71, v57);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v68 + 56))(v70, 0, 1, v57);
    }
    swift_storeEnumTagMultiPayload(v54, v106, 0);
  }
  v73 = a3[16];
  *(_QWORD *)(a1 + a3[15]) = *(_QWORD *)(a2 + a3[15]);
  v74 = (_OWORD *)(a1 + v73);
  v75 = (_OWORD *)(a2 + v73);
  v76 = type metadata accessor for SeriesQuickActionButtonViewModel.Style(0);
  if (swift_getEnumCaseMultiPayload(v75, v76) == 1)
  {
    v77 = v75[1];
    *v74 = *v75;
    v74[1] = v77;
    *((_QWORD *)v74 + 4) = *((_QWORD *)v75 + 4);
    v109 = sub_5440(&qword_263690);
    v78 = *(int *)(v109 + 48);
    v79 = (_QWORD *)((char *)v74 + v78);
    v80 = (_QWORD *)((char *)v75 + v78);
    v81 = type metadata accessor for CardInfo(0);
    v82 = *(_QWORD *)(v81 - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v82 + 48))(v80, 1, v81))
    {
      v83 = sub_5440(&qword_2618C8);
      memcpy(v79, v80, *(_QWORD *)(*(_QWORD *)(v83 - 8) + 64));
    }
    else
    {
      *v79 = *v80;
      v84 = *(int *)(v81 + 20);
      v107 = (char *)v79 + v84;
      v85 = (char *)v80 + v84;
      v86 = type metadata accessor for UUID(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v86 - 8) + 32))(v107, v85, v86);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v82 + 56))(v79, 0, 1, v81);
    }
    v87 = *(int *)(v109 + 64);
    v88 = (char *)v74 + v87;
    v89 = (char *)v75 + v87;
    v90 = type metadata accessor for AltSeriesContentTypeExposureData(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v90 - 8) + 32))(v88, v89, v90);
    swift_storeEnumTagMultiPayload(v74, v76, 1);
  }
  else
  {
    memcpy(v74, v75, *(_QWORD *)(*(_QWORD *)(v76 - 8) + 64));
  }
  v91 = type metadata accessor for SeriesQuickActionButtonViewModel(0);
  v92 = *(int *)(v91 + 20);
  v93 = (char *)v74 + v92;
  v94 = (char *)v75 + v92;
  v95 = type metadata accessor for SeriesData(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v95 - 8) + 32))(v93, v94, v95);
  v96 = *(int *)(v91 + 24);
  v97 = (char *)v74 + v96;
  v98 = (char *)v75 + v96;
  v99 = *((_OWORD *)v98 + 1);
  *(_OWORD *)v97 = *(_OWORD *)v98;
  *((_OWORD *)v97 + 1) = v99;
  *((_QWORD *)v97 + 4) = *((_QWORD *)v98 + 4);
  v100 = a3[18];
  *(_OWORD *)(a1 + a3[17]) = *(_OWORD *)(a2 + a3[17]);
  v101 = a1 + v100;
  v102 = a2 + v100;
  v103 = type metadata accessor for ColorScheme(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v103 - 8) + 32))(v101, v102, v103);
  *(_OWORD *)(a1 + a3[19]) = *(_OWORD *)(a2 + a3[19]);
  return a1;
}

uint64_t assignWithTake for SeriesRoomHeaderView(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  _WORD *v11;
  _WORD *v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  _OWORD *v23;
  _OWORD *v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  void *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  void *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t (*v58)(void *, uint64_t, uint64_t);
  int v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void (*v74)(char *, char *, uint64_t);
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _OWORD *v91;
  _OWORD *v92;
  uint64_t v93;
  __int128 v94;
  uint64_t v95;
  _QWORD *v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  char *v115;
  __int128 v116;
  uint64_t v117;
  _QWORD *v118;
  uint64_t *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  int *v130;
  uint64_t v131;
  char *v132;
  unsigned int (*v133)(char *, uint64_t, uint64_t);
  uint64_t v134;

  v6 = *a2;
  v7 = *((_BYTE *)a2 + 8);
  v8 = *(_QWORD *)a1;
  v9 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  sub_BE0C(v8, v9);
  if ((uint64_t *)a1 != a2)
  {
    v10 = a3[5];
    v11 = (_WORD *)(a1 + v10);
    v12 = (_WORD *)((char *)a2 + v10);
    sub_B414(a1 + v10, &qword_25F548);
    v13 = sub_5440(&qword_25F548);
    if (swift_getEnumCaseMultiPayload(v12, v13) == 1)
    {
      *v11 = *v12;
      v14 = (int *)type metadata accessor for SizeConstants.Environment(0);
      v15 = v14[6];
      v16 = (char *)v11 + v15;
      v17 = (char *)v12 + v15;
      v18 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v16, v17, v18);
      *(_QWORD *)((char *)v11 + v14[7]) = *(_QWORD *)((char *)v12 + v14[7]);
      v19 = v14[8];
      v20 = (char *)v11 + v19;
      v21 = (char *)v12 + v19;
      v20[2] = v21[2];
      *(_WORD *)v20 = *(_WORD *)v21;
      swift_storeEnumTagMultiPayload(v11, v13, 1);
    }
    else
    {
      memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
    v22 = a3[6];
    v23 = (_OWORD *)((char *)a2 + v22);
    v24 = (_OWORD *)(a1 + v22);
    sub_B414(a1 + v22, &qword_25FAB0);
    v25 = v23[1];
    *v24 = *v23;
    v24[1] = v25;
    *(_OWORD *)((char *)v24 + 25) = *(_OWORD *)((char *)v23 + 25);
  }
  v26 = a3[7];
  v27 = a1 + v26;
  v28 = (uint64_t *)((char *)a2 + v26);
  v29 = *v28;
  LOBYTE(v28) = *((_BYTE *)v28 + 8);
  v30 = *(_QWORD *)v27;
  v31 = *(_BYTE *)(v27 + 8);
  *(_QWORD *)v27 = v29;
  *(_BYTE *)(v27 + 8) = (_BYTE)v28;
  sub_BE0C(v30, v31);
  v32 = a3[8];
  v33 = a1 + v32;
  v34 = (uint64_t)a2 + v32;
  v35 = *(_BYTE *)(v34 + 16);
  v36 = *(_QWORD *)v33;
  v37 = *(_QWORD *)(v33 + 8);
  v38 = *(_BYTE *)(v33 + 16);
  *(_OWORD *)v33 = *(_OWORD *)v34;
  *(_BYTE *)(v33 + 16) = v35;
  sub_35C5C(v36, v37, v38);
  if ((uint64_t *)a1 != a2)
  {
    v39 = a3[9];
    v40 = (void *)(a1 + v39);
    v41 = (char *)a2 + v39;
    sub_B414(a1 + v39, &qword_261048);
    v42 = sub_5440(&qword_261048);
    if (swift_getEnumCaseMultiPayload(v41, v42))
    {
      memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
    }
    else
    {
      v43 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(void *, char *, uint64_t))(*(_QWORD *)(v43 - 8) + 32))(v40, v41, v43);
      swift_storeEnumTagMultiPayload(v40, v42, 0);
    }
    v44 = a3[10];
    v45 = (void *)(a1 + v44);
    v46 = (char *)a2 + v44;
    sub_B414(a1 + v44, &qword_261048);
    v47 = sub_5440(&qword_261048);
    if (swift_getEnumCaseMultiPayload(v46, v47))
    {
      memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
    }
    else
    {
      v48 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(void *, char *, uint64_t))(*(_QWORD *)(v48 - 8) + 32))(v45, v46, v48);
      swift_storeEnumTagMultiPayload(v45, v47, 0);
    }
  }
  v49 = a3[11];
  v50 = a1 + v49;
  v51 = (uint64_t)a2 + v49;
  if (*(_QWORD *)(a1 + v49 + 24))
    _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)v50);
  v52 = *(_OWORD *)(v51 + 16);
  *(_OWORD *)v50 = *(_OWORD *)v51;
  *(_OWORD *)(v50 + 16) = v52;
  *(_QWORD *)(v50 + 32) = *(_QWORD *)(v51 + 32);
  v53 = a3[12];
  v54 = (void *)(a1 + v53);
  v55 = (char *)a2 + v53;
  v56 = type metadata accessor for ImpressionMetrics(0);
  v57 = *(_QWORD *)(v56 - 8);
  v58 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v57 + 48);
  v59 = v58(v54, 1, v56);
  v60 = v58(v55, 1, v56);
  if (v59)
  {
    if (!v60)
    {
      (*(void (**)(void *, char *, uint64_t))(v57 + 32))(v54, v55, v56);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v57 + 56))(v54, 0, 1, v56);
      if ((uint64_t *)a1 == a2)
        goto LABEL_39;
      goto LABEL_22;
    }
  }
  else
  {
    if (!v60)
    {
      (*(void (**)(void *, char *, uint64_t))(v57 + 40))(v54, v55, v56);
      if ((uint64_t *)a1 == a2)
        goto LABEL_39;
      goto LABEL_22;
    }
    (*(void (**)(void *, uint64_t))(v57 + 8))(v54, v56);
  }
  v61 = sub_5440(&qword_25FE30);
  memcpy(v54, v55, *(_QWORD *)(*(_QWORD *)(v61 - 8) + 64));
  if ((uint64_t *)a1 == a2)
    goto LABEL_39;
LABEL_22:
  v62 = a3[13];
  v63 = (void *)(a1 + v62);
  v64 = (char *)a2 + v62;
  sub_B414(a1 + v62, &qword_261A08);
  v65 = sub_5440(&qword_261A08);
  if (swift_getEnumCaseMultiPayload(v64, v65))
  {
    memcpy(v63, v64, *(_QWORD *)(*(_QWORD *)(v65 - 8) + 64));
  }
  else
  {
    v66 = type metadata accessor for LocalizerRequest(0);
    (*(void (**)(void *, char *, uint64_t))(*(_QWORD *)(v66 - 8) + 32))(v63, v64, v66);
    v67 = sub_5440(&qword_261A38);
    *((_BYTE *)v63 + *(int *)(v67 + 48)) = v64[*(int *)(v67 + 48)];
    swift_storeEnumTagMultiPayload(v63, v65, 0);
  }
  v68 = a3[14];
  v69 = (char *)(a1 + v68);
  v70 = (char *)a2 + v68;
  sub_B414(a1 + v68, &qword_261A10);
  v71 = sub_5440(&qword_261A10);
  if (swift_getEnumCaseMultiPayload(v70, v71))
  {
    memcpy(v69, v70, *(_QWORD *)(*(_QWORD *)(v71 - 8) + 64));
  }
  else
  {
    v131 = v71;
    v72 = type metadata accessor for LocalizerRequest(0);
    v73 = *(_QWORD *)(v72 - 8);
    v74 = *(void (**)(char *, char *, uint64_t))(v73 + 32);
    v74(v69, v70, v72);
    v130 = (int *)type metadata accessor for TopLockupMetadataView.Footer(0);
    v75 = v130[5];
    v76 = &v69[v75];
    v77 = &v70[v75];
    v133 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v73 + 48);
    if (v133(&v70[v75], 1, v72))
    {
      v78 = sub_5440(&qword_25E0C8);
      memcpy(v76, v77, *(_QWORD *)(*(_QWORD *)(v78 - 8) + 64));
    }
    else
    {
      v74(v76, v77, v72);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v73 + 56))(v76, 0, 1, v72);
    }
    v79 = v130[6];
    v80 = &v69[v79];
    v81 = &v70[v79];
    if (v133(&v70[v79], 1, v72))
    {
      v82 = sub_5440(&qword_25E0C8);
      memcpy(v80, v81, *(_QWORD *)(*(_QWORD *)(v82 - 8) + 64));
      v83 = v73;
    }
    else
    {
      v74(v80, v81, v72);
      v83 = v73;
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v73 + 56))(v80, 0, 1, v72);
    }
    v84 = v130[7];
    v85 = &v69[v84];
    v86 = &v70[v84];
    if (v133(v86, 1, v72))
    {
      v87 = sub_5440(&qword_25E0C8);
      memcpy(v85, v86, *(_QWORD *)(*(_QWORD *)(v87 - 8) + 64));
    }
    else
    {
      v74(v85, v86, v72);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v83 + 56))(v85, 0, 1, v72);
    }
    swift_storeEnumTagMultiPayload(v69, v131, 0);
  }
LABEL_39:
  v88 = a3[15];
  v89 = *(_QWORD *)(a1 + v88);
  *(_QWORD *)(a1 + v88) = *(uint64_t *)((char *)a2 + v88);
  swift_bridgeObjectRelease(v89);
  v90 = a3[16];
  v91 = (_OWORD *)(a1 + v90);
  v92 = (_OWORD *)((char *)a2 + v90);
  if ((uint64_t *)a1 != a2)
  {
    sub_224DC(a1 + v90, type metadata accessor for SeriesQuickActionButtonViewModel.Style);
    v93 = type metadata accessor for SeriesQuickActionButtonViewModel.Style(0);
    if (swift_getEnumCaseMultiPayload(v92, v93) == 1)
    {
      v94 = v92[1];
      *v91 = *v92;
      v91[1] = v94;
      *((_QWORD *)v91 + 4) = *((_QWORD *)v92 + 4);
      v134 = sub_5440(&qword_263690);
      v95 = *(int *)(v134 + 48);
      v96 = (_QWORD *)((char *)v91 + v95);
      v97 = (_QWORD *)((char *)v92 + v95);
      v98 = type metadata accessor for CardInfo(0);
      v99 = *(_QWORD *)(v98 - 8);
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v99 + 48))(v97, 1, v98))
      {
        v100 = sub_5440(&qword_2618C8);
        memcpy(v96, v97, *(_QWORD *)(*(_QWORD *)(v100 - 8) + 64));
      }
      else
      {
        *v96 = *v97;
        v101 = *(int *)(v98 + 20);
        v132 = (char *)v96 + v101;
        v102 = (char *)v97 + v101;
        v103 = type metadata accessor for UUID(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v103 - 8) + 32))(v132, v102, v103);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v99 + 56))(v96, 0, 1, v98);
      }
      v104 = *(int *)(v134 + 64);
      v105 = (char *)v91 + v104;
      v106 = (char *)v92 + v104;
      v107 = type metadata accessor for AltSeriesContentTypeExposureData(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v107 - 8) + 32))(v105, v106, v107);
      swift_storeEnumTagMultiPayload(v91, v93, 1);
    }
    else
    {
      memcpy(v91, v92, *(_QWORD *)(*(_QWORD *)(v93 - 8) + 64));
    }
  }
  v108 = type metadata accessor for SeriesQuickActionButtonViewModel(0);
  v109 = *(int *)(v108 + 20);
  v110 = (char *)v91 + v109;
  v111 = (char *)v92 + v109;
  v112 = type metadata accessor for SeriesData(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v112 - 8) + 40))(v110, v111, v112);
  v113 = *(int *)(v108 + 24);
  v114 = (char *)v91 + v113;
  v115 = (char *)v92 + v113;
  _s7BooksUI13AnyPagedFrameVwxx_0(v114);
  v116 = *((_OWORD *)v115 + 1);
  *(_OWORD *)v114 = *(_OWORD *)v115;
  *((_OWORD *)v114 + 1) = v116;
  *((_QWORD *)v114 + 4) = *((_QWORD *)v115 + 4);
  v117 = a3[17];
  v118 = (_QWORD *)(a1 + v117);
  v119 = (uint64_t *)((char *)a2 + v117);
  v121 = *v119;
  v120 = v119[1];
  v122 = v118[1];
  *v118 = v121;
  v118[1] = v120;
  swift_bridgeObjectRelease(v122);
  v123 = a3[18];
  v124 = a1 + v123;
  v125 = (uint64_t)a2 + v123;
  v126 = type metadata accessor for ColorScheme(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v126 - 8) + 40))(v124, v125, v126);
  v127 = a3[19];
  v128 = *(_QWORD *)(a1 + v127 + 8);
  *(_OWORD *)(a1 + v127) = *(_OWORD *)((char *)a2 + v127);
  swift_release(v128);
  return a1;
}

uint64_t getEnumTagSinglePayload for SeriesRoomHeaderView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1BF268);
}

uint64_t sub_1BF268(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v16;

  v6 = sub_5440(&qword_25F558);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = a3[5];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v10 = sub_5440(&qword_261048);
  v7 = *(_QWORD *)(v10 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v10;
    v9 = a3[9];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v11 = sub_5440(&qword_25FE30);
  v7 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v9 = a3[12];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v12 = sub_5440(&qword_261A08);
  v7 = *(_QWORD *)(v12 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v12;
    v9 = a3[13];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v13 = sub_5440(&qword_261A10);
  v7 = *(_QWORD *)(v13 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v13;
    v9 = a3[14];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v16 = type metadata accessor for SeriesQuickActionButtonViewModel(0);
    v7 = *(_QWORD *)(v16 - 8);
    if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    {
      v8 = v16;
      v9 = a3[16];
    }
    else
    {
      v8 = type metadata accessor for ColorScheme(0);
      v7 = *(_QWORD *)(v8 - 8);
      v9 = a3[18];
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v14 = *(_QWORD *)(a1 + a3[15]);
  if (v14 >= 0xFFFFFFFF)
    LODWORD(v14) = -1;
  return (v14 + 1);
}

uint64_t storeEnumTagSinglePayload for SeriesRoomHeaderView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1BF3E0);
}

uint64_t sub_1BF3E0(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;

  v8 = sub_5440(&qword_25F558);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = a4[5];
  }
  else
  {
    v12 = sub_5440(&qword_261048);
    v9 = *(_QWORD *)(v12 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v12;
      v11 = a4[9];
    }
    else
    {
      v13 = sub_5440(&qword_25FE30);
      v9 = *(_QWORD *)(v13 - 8);
      if (*(_DWORD *)(v9 + 84) == a3)
      {
        v10 = v13;
        v11 = a4[12];
      }
      else
      {
        v14 = sub_5440(&qword_261A08);
        v9 = *(_QWORD *)(v14 - 8);
        if (*(_DWORD *)(v9 + 84) == a3)
        {
          v10 = v14;
          v11 = a4[13];
        }
        else
        {
          result = sub_5440(&qword_261A10);
          v9 = *(_QWORD *)(result - 8);
          if (*(_DWORD *)(v9 + 84) == a3)
          {
            v10 = result;
            v11 = a4[14];
          }
          else
          {
            if (a3 == 0x7FFFFFFF)
            {
              *(_QWORD *)(a1 + a4[15]) = (a2 - 1);
              return result;
            }
            v16 = type metadata accessor for SeriesQuickActionButtonViewModel(0);
            v9 = *(_QWORD *)(v16 - 8);
            if (*(_DWORD *)(v9 + 84) == a3)
            {
              v10 = v16;
              v11 = a4[16];
            }
            else
            {
              v10 = type metadata accessor for ColorScheme(0);
              v9 = *(_QWORD *)(v10 - 8);
              v11 = a4[18];
            }
          }
        }
      }
    }
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
}

void sub_1BF548(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD v16[5];
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  char *v27;

  v16[0] = "\t";
  sub_19B38(319, (unint64_t *)&qword_25F5C8, type metadata accessor for SizeConstants, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  if (v3 <= 0x3F)
  {
    v16[1] = *(_QWORD *)(v2 - 8) + 64;
    v16[2] = &unk_1F7570;
    v16[3] = "\t";
    v16[4] = &unk_1F7588;
    sub_19B38(319, &qword_261AB8, (uint64_t (*)(uint64_t))&type metadata accessor for LocalizerRequest, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for PlaceholderTextView.ContentType);
    if (v5 <= 0x3F)
    {
      v17 = *(_QWORD *)(v4 - 8) + 64;
      v18 = v17;
      v19 = &unk_1F75A0;
      sub_19B38(319, &qword_261AC0, (uint64_t (*)(uint64_t))&type metadata accessor for ImpressionMetrics, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
      if (v7 <= 0x3F)
      {
        v20 = *(_QWORD *)(v6 - 8) + 64;
        sub_78E58(319);
        if (v9 <= 0x3F)
        {
          v21 = *(_QWORD *)(v8 - 8) + 64;
          sub_19B38(319, (unint64_t *)&unk_261AD0, type metadata accessor for TopLockupMetadataView.Footer, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for PlaceholderTextView.ContentType);
          if (v11 <= 0x3F)
          {
            v22 = *(_QWORD *)(v10 - 8) + 64;
            v23 = (char *)&value witness table for Builtin.BridgeObject + 64;
            v12 = type metadata accessor for SeriesQuickActionButtonViewModel(319);
            if (v13 <= 0x3F)
            {
              v24 = *(_QWORD *)(v12 - 8) + 64;
              v25 = &unk_1F75B8;
              v14 = type metadata accessor for ColorScheme(319);
              if (v15 <= 0x3F)
              {
                v26 = *(_QWORD *)(v14 - 8) + 64;
                v27 = (char *)&value witness table for () + 64;
                swift_initStructMetadata(a1, 256, 16, v16, a1 + 16);
              }
            }
          }
        }
      }
    }
  }
}

uint64_t sub_1BF704()
{
  return sub_7FD8(&qword_26B590, &qword_26B598, (uint64_t)&protocol conformance descriptor for VStack<A>);
}

unint64_t sub_1BF748()
{
  unint64_t result;
  uint64_t v1;

  result = qword_26B678;
  if (!qword_26B678)
  {
    v1 = sub_7EF8(&qword_26B668);
    sub_1BF7CC();
    sub_7FD8((unint64_t *)&qword_25EE78, &qword_25EE58, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_26B678);
  }
  return result;
}

unint64_t sub_1BF7CC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_26B680;
  if (!qword_26B680)
  {
    v1 = sub_7EF8(&qword_26B688);
    sub_7FD8(&qword_26B690, &qword_26B698, (uint64_t)&protocol conformance descriptor for CoverStackView<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_26B680);
  }
  return result;
}

uint64_t sub_1BF850(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_7EF8(a2);
    a3();
    sub_7FD8(&qword_26B6B8, &qword_26B6C0, (uint64_t)&protocol conformance descriptor for _TraitWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v6);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1BF8D4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_26B6A8;
  if (!qword_26B6A8)
  {
    v1 = sub_7EF8(&qword_26B648);
    sub_6FD0(&qword_26B6B0, type metadata accessor for TopLockupMetadataView, (uint64_t)&protocol conformance descriptor for TopLockupMetadataView);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_26B6A8);
  }
  return result;
}

unint64_t sub_1BF958()
{
  unint64_t result;
  uint64_t v1;

  result = qword_26B6D0;
  if (!qword_26B6D0)
  {
    v1 = sub_7EF8(&qword_26B630);
    sub_7FD8(&qword_26B6D8, &qword_26B5A8, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_26B6D0);
  }
  return result;
}

uint64_t sub_1BF9DC()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1BFA08 + 4 * byte_1F7650[*v0]))(0x6C6C616D5378, 0xE600000000000000);
}

uint64_t sub_1BFA08()
{
  return 0x6C6C616D73;
}

uint64_t sub_1BFA1C()
{
  return 0x6D756964656DLL;
}

uint64_t sub_1BFA2C()
{
  return 0x656772616CLL;
}

uint64_t sub_1BFA40@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1C06D8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1BFA64(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1C0078();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1BFA8C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1C0078();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1BFAB4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1C00BC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1BFADC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1C00BC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1BFB04(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1C0100();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1BFB2C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1C0100();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1BFB54(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1C0144();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1BFB7C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1C0144();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1BFBA4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1C0188();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1BFBCC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1C0188();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t ListItemMetadata.TitleLockupSize.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v26[7];
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  _QWORD *v32;
  uint64_t v33;

  v28 = a2;
  v3 = sub_5440(&qword_26B6F8);
  v26[5] = *(_QWORD *)(v3 - 8);
  v26[6] = v3;
  __chkstk_darwin(v3);
  v31 = (char *)v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = sub_5440(&qword_26B700);
  v26[4] = *(_QWORD *)(v27 - 8);
  __chkstk_darwin(v27);
  v30 = (char *)v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_5440(&qword_26B708);
  v26[2] = *(_QWORD *)(v6 - 8);
  v26[3] = v6;
  __chkstk_darwin(v6);
  v29 = (char *)v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_5440(&qword_26B710);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v10 = sub_5440(&qword_26B718);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1[3];
  v15 = a1[4];
  v32 = a1;
  sub_5480(a1, v14);
  v16 = sub_1C0078();
  v17 = v33;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&_s15TitleLockupSizeO10CodingKeysON, &_s15TitleLockupSizeO10CodingKeysON, v16, v14, v15);
  if (!v17)
  {
    v26[0] = v9;
    v26[1] = v8;
    v33 = v11;
    v18 = KeyedDecodingContainer.allKeys.getter(v10);
    if (*(_QWORD *)(v18 + 16) == 1)
      __asm { BR              X9 }
    v19 = v18;
    v20 = type metadata accessor for DecodingError(0);
    swift_allocError(v20, &protocol witness table for DecodingError, 0, 0);
    v22 = v21;
    sub_5440(&qword_25F8F8);
    *v22 = &type metadata for ListItemMetadata.TitleLockupSize;
    v23 = KeyedDecodingContainer.codingPath.getter(v10);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)(v23, 0xD00000000000002BLL, 0x80000000001FB7C0, 0);
    v24 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v20 - 8) + 104))(v22, enum case for DecodingError.typeMismatch(_:), v20);
    swift_willThrow(v24);
    swift_bridgeObjectRelease(v19);
    (*(void (**)(char *, uint64_t))(v33 + 8))(v13, v10);
  }
  return _s7BooksUI13AnyPagedFrameVwxx_0(v32);
}

unint64_t sub_1C0078()
{
  unint64_t result;

  result = qword_26B720;
  if (!qword_26B720)
  {
    result = swift_getWitnessTable(&unk_1F7B7C, &_s15TitleLockupSizeO10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_26B720);
  }
  return result;
}

unint64_t sub_1C00BC()
{
  unint64_t result;

  result = qword_26B728;
  if (!qword_26B728)
  {
    result = swift_getWitnessTable(&unk_1F7B2C, &_s15TitleLockupSizeO15LargeCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_26B728);
  }
  return result;
}

unint64_t sub_1C0100()
{
  unint64_t result;

  result = qword_26B730;
  if (!qword_26B730)
  {
    result = swift_getWitnessTable(&unk_1F7ADC, &_s15TitleLockupSizeO16MediumCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_26B730);
  }
  return result;
}

unint64_t sub_1C0144()
{
  unint64_t result;

  result = qword_26B738;
  if (!qword_26B738)
  {
    result = swift_getWitnessTable(&unk_1F7A8C, &_s15TitleLockupSizeO15SmallCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_26B738);
  }
  return result;
}

unint64_t sub_1C0188()
{
  unint64_t result;

  result = qword_26B740;
  if (!qword_26B740)
  {
    result = swift_getWitnessTable(&unk_1F7A3C, &_s15TitleLockupSizeO16XSmallCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_26B740);
  }
  return result;
}

unint64_t sub_1C01D0()
{
  unint64_t result;

  result = qword_26B748;
  if (!qword_26B748)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ListItemMetadata.TitleLockupSize, &type metadata for ListItemMetadata.TitleLockupSize);
    atomic_store(result, (unint64_t *)&qword_26B748);
  }
  return result;
}

unint64_t sub_1C0214(uint64_t a1)
{
  unint64_t result;

  result = sub_A9020();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1C0238@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return ListItemMetadata.TitleLockupSize.init(from:)(a1, a2);
}

ValueMetadata *type metadata accessor for ListItemMetadata.TitleLockupSize()
{
  return &type metadata for ListItemMetadata.TitleLockupSize;
}

uint64_t dispatch thunk of ListItemMetadata.TitleLockupModel.title(localizer:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t _s7BooksUI16ListItemMetadataV14FinePrintModelP4text9localizer05SwiftB04TextV9JetEngine9Localizer_p_tFTj_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t _s15TitleLockupSizeOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1C0300 + 4 * byte_1F765D[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1C0334 + 4 * byte_1F7658[v4]))();
}

uint64_t sub_1C0334(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C033C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1C0344);
  return result;
}

uint64_t sub_1C0350(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1C0358);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1C035C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C0364(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s15TitleLockupSizeO10CodingKeysOMa()
{
  return &_s15TitleLockupSizeO10CodingKeysON;
}

ValueMetadata *_s15TitleLockupSizeO16XSmallCodingKeysOMa()
{
  return &_s15TitleLockupSizeO16XSmallCodingKeysON;
}

ValueMetadata *_s15TitleLockupSizeO15SmallCodingKeysOMa()
{
  return &_s15TitleLockupSizeO15SmallCodingKeysON;
}

ValueMetadata *_s15TitleLockupSizeO16MediumCodingKeysOMa()
{
  return &_s15TitleLockupSizeO16MediumCodingKeysON;
}

ValueMetadata *_s15TitleLockupSizeO15LargeCodingKeysOMa()
{
  return &_s15TitleLockupSizeO15LargeCodingKeysON;
}

unint64_t sub_1C03C4()
{
  unint64_t result;

  result = qword_26B750;
  if (!qword_26B750)
  {
    result = swift_getWitnessTable(&unk_1F7A14, &_s15TitleLockupSizeO10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_26B750);
  }
  return result;
}

unint64_t sub_1C040C()
{
  unint64_t result;

  result = qword_26B758;
  if (!qword_26B758)
  {
    result = swift_getWitnessTable(&unk_1F7934, &_s15TitleLockupSizeO16XSmallCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_26B758);
  }
  return result;
}

unint64_t sub_1C0454()
{
  unint64_t result;

  result = qword_26B760;
  if (!qword_26B760)
  {
    result = swift_getWitnessTable(&unk_1F795C, &_s15TitleLockupSizeO16XSmallCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_26B760);
  }
  return result;
}

unint64_t sub_1C049C()
{
  unint64_t result;

  result = qword_26B768;
  if (!qword_26B768)
  {
    result = swift_getWitnessTable(&unk_1F78E4, &_s15TitleLockupSizeO15SmallCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_26B768);
  }
  return result;
}

unint64_t sub_1C04E4()
{
  unint64_t result;

  result = qword_26B770;
  if (!qword_26B770)
  {
    result = swift_getWitnessTable(&unk_1F790C, &_s15TitleLockupSizeO15SmallCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_26B770);
  }
  return result;
}

unint64_t sub_1C052C()
{
  unint64_t result;

  result = qword_26B778;
  if (!qword_26B778)
  {
    result = swift_getWitnessTable(&unk_1F7894, &_s15TitleLockupSizeO16MediumCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_26B778);
  }
  return result;
}

unint64_t sub_1C0574()
{
  unint64_t result;

  result = qword_26B780;
  if (!qword_26B780)
  {
    result = swift_getWitnessTable(&unk_1F78BC, &_s15TitleLockupSizeO16MediumCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_26B780);
  }
  return result;
}

unint64_t sub_1C05BC()
{
  unint64_t result;

  result = qword_26B788;
  if (!qword_26B788)
  {
    result = swift_getWitnessTable(&unk_1F7844, &_s15TitleLockupSizeO15LargeCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_26B788);
  }
  return result;
}

unint64_t sub_1C0604()
{
  unint64_t result;

  result = qword_26B790;
  if (!qword_26B790)
  {
    result = swift_getWitnessTable(&unk_1F786C, &_s15TitleLockupSizeO15LargeCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_26B790);
  }
  return result;
}

unint64_t sub_1C064C()
{
  unint64_t result;

  result = qword_26B798;
  if (!qword_26B798)
  {
    result = swift_getWitnessTable(&unk_1F7984, &_s15TitleLockupSizeO10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_26B798);
  }
  return result;
}

unint64_t sub_1C0694()
{
  unint64_t result;

  result = qword_26B7A0[0];
  if (!qword_26B7A0[0])
  {
    result = swift_getWitnessTable(&unk_1F79AC, &_s15TitleLockupSizeO10CodingKeysON);
    atomic_store(result, qword_26B7A0);
  }
  return result;
}

uint64_t sub_1C06D8(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  char v9;

  if (a1 == 0x6C6C616D5378 && a2 == 0xE600000000000000)
  {
    v5 = 0xE600000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6C6C616D5378, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6C6C616D73 && a2 == 0xE500000000000000)
  {
    v7 = 0xE500000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6C6C616D73, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x6D756964656DLL && a2 == 0xE600000000000000)
  {
    v8 = 0xE600000000000000;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6D756964656DLL, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x656772616CLL && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease(0xE500000000000000);
    return 3;
  }
  else
  {
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(0x656772616CLL, 0xE500000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v9 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t BooksOpaqueIntentModel.params.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for JSONObject(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t BooksOpaqueIntentModel.kind.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = sub_1C0EA4(a1);
  swift_bridgeObjectRetain(v2);
  return v1;
}

void sub_1C08DC()
{
  static IntentModel<>.kind.getter();
  __break(1u);
}

uint64_t sub_1C08EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for BooksOpaqueIntentModel<A>, a2);
  return CustomJSValueConvertible<>.jsRepresentation(in:)(a1, a2, a3, WitnessTable);
}

BOOL sub_1C0950(Swift::String string)
{
  void *object;
  Swift::String v2;
  Swift::Int v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_24A888, v2);
  swift_bridgeObjectRelease(object);
  return v3 != 0;
}

uint64_t sub_1C0994(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_1F7D80, a3);
  return == infix<A>(_:_:)(a1, a2, a3, WitnessTable, &protocol witness table for String);
}

uint64_t sub_1C09E8(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_1F7D80, a1);
  return RawRepresentable<>.hashValue.getter(a1, a2, WitnessTable, &protocol witness table for String);
}

uint64_t sub_1C0A34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_1F7D80, a2);
  return RawRepresentable<>.hash(into:)(a1, a2, a3, WitnessTable, &protocol witness table for String);
}

uint64_t sub_1C0A84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_1F7D80, a2);
  return RawRepresentable<>._rawHashValue(seed:)(a1, a2, a3, WitnessTable, &protocol witness table for String);
}

BOOL sub_1C0AD4@<W0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  void *v3;
  _BOOL8 result;
  Swift::String v5;

  v3 = (void *)a1[1];
  v5._countAndFlagsBits = *a1;
  v5._object = v3;
  result = sub_1C0950(v5);
  *a2 = result;
  return result;
}

void sub_1C0B0C(_QWORD *a1@<X8>)
{
  *a1 = 0x646E696B24;
  a1[1] = 0xE500000000000000;
}

uint64_t sub_1C0B24()
{
  return 0x646E696B24;
}

BOOL sub_1C0B38@<W0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  _BOOL8 result;

  result = sub_1C0950(a1);
  *a2 = result;
  return result;
}

uint64_t sub_1C0B64@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = static GenericGeometryReferenceBuilder.== infix(_:_:)();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1C0B90(uint64_t a1)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_1F7E20, a1);
  return CodingKey.description.getter(a1, WitnessTable);
}

uint64_t sub_1C0BC4(uint64_t a1)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_1F7E20, a1);
  return CodingKey.debugDescription.getter(a1, WitnessTable);
}

uint64_t BooksOpaqueIntentModel.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  void (*v21)(char *, char *, uint64_t);
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t WitnessTable;
  char *v42;
  _BYTE v43[40];
  uint64_t v44;

  v38 = a5;
  v7 = type metadata accessor for BooksOpaqueIntentModel.CodingKeys(255, a2, a3, a4);
  WitnessTable = swift_getWitnessTable(&unk_1F7E20, v7);
  v39 = type metadata accessor for KeyedDecodingContainer(0, v7);
  v8 = *(_QWORD *)(v39 - 8);
  __chkstk_darwin(v39);
  v42 = (char *)&v34 - v9;
  v10 = type metadata accessor for JSONObject(0);
  v40 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v12 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for BooksOpaqueIntentModel(0, a2, v13, v14);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v34 - v17;
  sub_BD00((uint64_t)a1, (uint64_t)v43);
  v19 = v44;
  JSONObject.init(from:)(v43);
  if (v19)
    return _s7BooksUI13AnyPagedFrameVwxx_0(a1);
  v35 = v16;
  v36 = v15;
  v37 = v8;
  v21 = *(void (**)(char *, char *, uint64_t))(v40 + 32);
  v22 = v18;
  v44 = v10;
  v21(v18, v12, v10);
  v23 = a1[3];
  v24 = a1[4];
  sub_5480(a1, v23);
  v25 = v42;
  v26 = dispatch thunk of Decoder.container<A>(keyedBy:)(v7, v7, WitnessTable, v23, v24);
  v27 = v39;
  v28 = KeyedDecodingContainer.decode(_:forKey:)(v26, v39);
  v30 = v29;
  (*(void (**)(char *, uint64_t))(v37 + 8))(v25, v27);
  v31 = v36;
  v32 = (uint64_t *)&v22[*(int *)(v36 + 28)];
  *v32 = v28;
  v32[1] = v30;
  v33 = v35;
  (*(void (**)(uint64_t, char *, uint64_t))(v35 + 16))(v38, v22, v31);
  _s7BooksUI13AnyPagedFrameVwxx_0(0);
  return (*(uint64_t (**)(char *, uint64_t))(v33 + 8))(v22, v31);
}

uint64_t BooksOpaqueIntentModel.encode(to:)()
{
  return JSONObject.encode(to:)();
}

uint64_t sub_1C0E78@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return BooksOpaqueIntentModel.init(from:)(a1, *(_QWORD *)(a2 + 16), a3, a4, a5);
}

uint64_t sub_1C0E90()
{
  return BooksOpaqueIntentModel.encode(to:)();
}

uint64_t sub_1C0EA4(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 28));
}

uint64_t type metadata accessor for BooksOpaqueIntentModel.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10E40(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for BooksOpaqueIntentModel.CodingKeys);
}

uint64_t type metadata accessor for BooksOpaqueIntentModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10E40(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for BooksOpaqueIntentModel);
}

uint64_t sub_1C0ECC(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = type metadata accessor for JSONObject(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_1F7CE8;
    swift_initStructMetadata(a1, 0, 2, v4, a1 + 24);
    return 0;
  }
  return result;
}

uint64_t *sub_1C0F3C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = type metadata accessor for JSONObject(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 28);
    v9 = (uint64_t *)((char *)a1 + v8);
    v10 = (uint64_t *)((char *)a2 + v8);
    v11 = v10[1];
    *v9 = *v10;
    v9[1] = v11;
    swift_bridgeObjectRetain(v11);
  }
  return a1;
}

uint64_t sub_1C0FD0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for JSONObject(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(a2 + 28) + 8));
}

uint64_t sub_1C1018(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;

  v6 = type metadata accessor for JSONObject(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 28);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  v10 = v9[1];
  *v8 = *v9;
  v8[1] = v10;
  swift_bridgeObjectRetain(v10);
  return a1;
}

uint64_t sub_1C1080(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  v6 = type metadata accessor for JSONObject(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 28);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  *v8 = *v9;
  v10 = v9[1];
  v11 = v8[1];
  v8[1] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  return a1;
}

uint64_t sub_1C10FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for JSONObject(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  *(_OWORD *)(a1 + *(int *)(a3 + 28)) = *(_OWORD *)(a2 + *(int *)(a3 + 28));
  return a1;
}

uint64_t sub_1C1158(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = type metadata accessor for JSONObject(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 28);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v11 = *v9;
  v10 = v9[1];
  v12 = v8[1];
  *v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease(v12);
  return a1;
}

uint64_t sub_1C11C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1C11D0);
}

uint64_t sub_1C11D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for JSONObject(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 28) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_1C1250(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1C125C);
}

uint64_t sub_1C125C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for JSONObject(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 28) + 8) = (a2 - 1);
  return result;
}

uint64_t sub_1C12D8(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1C1318 + 4 * byte_1F7BD0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1C1338 + 4 * byte_1F7BD5[v4]))();
}

_BYTE *sub_1C1318(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1C1338(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1C1340(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1C1348(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1C1350(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1C1358(_DWORD *result)
{
  *result = 0;
  return result;
}

uint64_t sub_1C1364(uint64_t a1)
{
  return swift_getWitnessTable(&unk_1F7DF8, a1);
}

uint64_t sub_1C1374(uint64_t a1)
{
  return swift_getWitnessTable(&unk_1F7D30, a1);
}

uint64_t sub_1C1384(uint64_t a1)
{
  return swift_getWitnessTable(&unk_1F7D58, a1);
}

uint64_t sub_1C1394@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;

  *a4 = swift_getKeyPath(&unk_1F7E80);
  v8 = sub_5440(&qword_25FAD0);
  swift_storeEnumTagMultiPayload(a4, v8, 0);
  v10 = (char *)a4 + *(int *)(type metadata accessor for ListItemMetadataFinePrintView(0, a2, a3, v9) + 36);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(v10, a1, a2);
}

uint64_t type metadata accessor for ListItemMetadataFinePrintView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10E40(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ListItemMetadataFinePrintView);
}

uint64_t sub_1C142C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  int v15;
  unsigned int v17;
  int v18;
  int v19;
  unsigned int v20;

  v6 = type metadata accessor for DynamicTypeSize(0);
  if (((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64)
       + ((*(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80) + 2) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80))
       + 7) & 0xFFFFFFFFFFFFFFF8)
     + 8 <= 8)
    v7 = 8;
  else
    v7 = ((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64)
         + ((*(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80) + 2) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80))
         + 7) & 0xFFFFFFFFFFFFFFF8)
       + 8;
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v9 = *(_DWORD *)(v8 + 84);
  if (v9 <= 0xFE)
    v10 = 254;
  else
    v10 = *(_DWORD *)(v8 + 84);
  if (!a2)
    return 0;
  v11 = *(unsigned __int8 *)(v8 + 80);
  v12 = v11 + v7 + 1;
  if (a2 <= v10)
    goto LABEL_27;
  v13 = (v12 & ~v11) + *(_QWORD *)(v8 + 64);
  v14 = 8 * v13;
  if (v13 <= 3)
  {
    v17 = ((a2 - v10 + ~(-1 << v14)) >> v14) + 1;
    if (HIWORD(v17))
    {
      v15 = *(_DWORD *)(a1 + v13);
      if (!v15)
        goto LABEL_27;
      goto LABEL_18;
    }
    if (v17 > 0xFF)
    {
      v15 = *(unsigned __int16 *)(a1 + v13);
      if (!*(_WORD *)(a1 + v13))
        goto LABEL_27;
      goto LABEL_18;
    }
    if (v17 < 2)
    {
LABEL_27:
      if (v9 > 0xFE)
        return (*(uint64_t (**)(uint64_t))(v8 + 48))((v12 + a1) & ~v11);
      v20 = *(unsigned __int8 *)(a1 + v7);
      if (v20 >= 2)
        return (v20 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v15 = *(unsigned __int8 *)(a1 + v13);
  if (!*(_BYTE *)(a1 + v13))
    goto LABEL_27;
LABEL_18:
  v18 = (v15 - 1) << v14;
  if (v13 > 3)
    v18 = 0;
  if ((_DWORD)v13)
  {
    if (v13 <= 3)
      v19 = v13;
    else
      v19 = 4;
    __asm { BR              X12 }
  }
  return v10 + v18 + 1;
}

void sub_1C15E0(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  size_t v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  int v16;

  v8 = type metadata accessor for DynamicTypeSize(0);
  v9 = ((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64)
       + ((*(unsigned __int8 *)(*(_QWORD *)(v8 - 8) + 80) + 2) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v8 - 8) + 80))
       + 7) & 0xFFFFFFFFFFFFFFF8)
     + 8;
  if (v9 <= 8)
    v9 = 8;
  v10 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v10 + 84) <= 0xFEu)
    v11 = 254;
  else
    v11 = *(_DWORD *)(v10 + 84);
  v12 = (((v9 | 1) + *(unsigned __int8 *)(v10 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80))
      + *(_QWORD *)(v10 + 64);
  if (a3 <= v11)
  {
    v13 = 0;
  }
  else if (v12 <= 3)
  {
    v15 = ((a3 - v11 + ~(-1 << (8 * v12))) >> (8 * v12)) + 1;
    if (HIWORD(v15))
    {
      v13 = &dword_4;
    }
    else if (v15 >= 0x100)
    {
      v13 = 2;
    }
    else
    {
      v13 = v15 > 1;
    }
  }
  else
  {
    v13 = &dword_0 + 1;
  }
  if (v11 < a2)
  {
    v14 = ~v11 + a2;
    if (v12 < 4)
    {
      if ((_DWORD)v12)
      {
        v16 = v14 & ~(-1 << (8 * v12));
        bzero(a1, v12);
        if ((_DWORD)v12 == 3)
        {
          *(_WORD *)a1 = v16;
          a1[2] = BYTE2(v16);
        }
        else if ((_DWORD)v12 == 2)
        {
          *(_WORD *)a1 = v16;
        }
        else
        {
          *a1 = v16;
        }
      }
    }
    else
    {
      bzero(a1, v12);
      *(_DWORD *)a1 = v14;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X14 }
}

uint64_t sub_1C1858(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  return swift_getOpaqueTypeConformance2(&v3, &unk_2315F4, 1);
}

uint64_t sub_1C188C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v2 = *(_QWORD *)(a1 - 8);
  v3 = *(_QWORD *)(v2 + 64);
  __chkstk_darwin(a1);
  v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v2 + 16))(v4);
  v5 = *(unsigned __int8 *)(v2 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(&unk_25A2C0, v6 + v3, v5 | 7);
  *(_OWORD *)(v7 + 16) = *(_OWORD *)(a1 + 16);
  (*(void (**)(uint64_t, char *, uint64_t))(v2 + 32))(v7 + v6, v4, a1);
  v8 = sub_5440(&qword_261600);
  v9 = type metadata accessor for _JetLocalizeDefaultWorking(0);
  v10 = type metadata accessor for _JetLocalizeDefaultFailed(0);
  v11 = sub_1C1DC0();
  v12 = sub_6FD0(&qword_25FEE0, (uint64_t (*)(uint64_t))&type metadata accessor for _JetLocalizeDefaultWorking, (uint64_t)&protocol conformance descriptor for _JetLocalizeDefaultWorking);
  v13 = sub_6FD0(&qword_25FEE8, (uint64_t (*)(uint64_t))&type metadata accessor for _JetLocalizeDefaultFailed, (uint64_t)&protocol conformance descriptor for _JetLocalizeDefaultFailed);
  return JetLocalize.init(working:failed:content:)(&j___s18_JetEngine_SwiftUI01_A22LocalizeDefaultWorkingVACycfC, 0, sub_4ED68, 0, sub_1C1D58, v7, v8, v9, v10, v11, v12, v13);
}

uint64_t sub_1C1A00@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t KeyPath;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v46;
  uint64_t v47;

  v8 = type metadata accessor for DefaultBlendModeModifier(0);
  v9 = __chkstk_darwin(v8);
  v46 = (uint64_t *)((char *)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v9);
  v47 = (uint64_t)&v46 - v11;
  v12 = type metadata accessor for FontConstants.ListItem(0);
  __chkstk_darwin(v12);
  v14 = (char *)&v46 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ListItemMetadataFinePrintView(0, a2, a3, v15);
  v16 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 16))(a1, a2, a3);
  v18 = v17;
  v20 = v19;
  v22 = v21 & 1;
  sub_30978((uint64_t)v14);
  v23 = FontConstants.ListItem.finePrint.getter();
  sub_224DC((uint64_t)v14, type metadata accessor for FontConstants.ListItem);
  v24 = Text.font(_:)(v23, v16, v18, v22, v20);
  v26 = v25;
  v28 = v27;
  v30 = v29 & 1;
  sub_2B574(v16, v18, v22);
  swift_release(v23);
  swift_bridgeObjectRelease(v20);
  v31 = _s7BooksUI14ColorConstantsV19booksSecondaryLabel05SwiftB00C0Vvg_0();
  v32 = Text.foregroundColor(_:)(v31, v24, v26, v30, v28);
  v34 = v33;
  LOBYTE(v20) = v35;
  v37 = v36;
  swift_release(v31);
  sub_2B574(v24, v26, v30);
  swift_bridgeObjectRelease(v28);
  KeyPath = swift_getKeyPath(&unk_1F7F40);
  v39 = swift_getKeyPath(&unk_1F7F70);
  v40 = v46;
  *v46 = v39;
  v41 = sub_5440(&qword_25F208);
  swift_storeEnumTagMultiPayload(v40, v41, 0);
  v42 = (uint64_t)v40;
  v43 = v47;
  sub_4E18C(v42, v47);
  v44 = sub_5440(&qword_261600);
  sub_4E1D0(v43, a4 + *(int *)(v44 + 36));
  *(_QWORD *)a4 = v32;
  *(_QWORD *)(a4 + 8) = v34;
  *(_BYTE *)(a4 + 16) = v20 & 1;
  *(_QWORD *)(a4 + 24) = v37;
  *(_QWORD *)(a4 + 32) = KeyPath;
  *(_QWORD *)(a4 + 40) = 1;
  *(_BYTE *)(a4 + 48) = 0;
  return sub_224DC(v43, type metadata accessor for DefaultBlendModeModifier);
}

uint64_t sub_1C1C78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  __n128 v15;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = type metadata accessor for ListItemMetadataFinePrintView(0, v5, *(_QWORD *)(v4 + 24), a4);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v8 + 32) & ~v8;
  v10 = *(_QWORD *)(v7 + 64);
  v11 = (char *)(v4 + v9);
  v12 = sub_5440(&qword_25FAD0);
  if (swift_getEnumCaseMultiPayload(v4 + v9, v12) == 1)
  {
    v13 = &v11[*(int *)(type metadata accessor for FontConstants.Environment(0) + 24)];
    v14 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
  }
  else
  {
    v15 = swift_release(*(_QWORD *)v11);
  }
  (*(void (**)(char *, uint64_t, __n128))(*(_QWORD *)(v5 - 8) + 8))(&v11[*(int *)(v6 + 36)], v5, v15);
  return swift_deallocObject(v4, v9 + v10, v8 | 7);
}

uint64_t sub_1C1D58@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;

  v6 = *(_QWORD *)(v3 + 16);
  v7 = *(_QWORD *)(v3 + 24);
  type metadata accessor for ListItemMetadataFinePrintView(0, v6, v7, a2);
  return sub_1C1A00(a1, v6, v7, a3);
}

unint64_t sub_1C1DC0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_26B928;
  if (!qword_26B928)
  {
    v1 = sub_7EF8(&qword_261600);
    sub_19A164();
    sub_6FD0((unint64_t *)&qword_260958, type metadata accessor for DefaultBlendModeModifier, (uint64_t)&unk_1F136C);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_26B928);
  }
  return result;
}

uint64_t sub_1C1E50()
{
  return sub_7FD8(&qword_26B930, qword_26B938, (uint64_t)&protocol conformance descriptor for JetLocalize<A, B, C>);
}

uint64_t _CodeAnyIntentModel_Many.description.getter(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t ExtendedExistentialTypeMetadata;
  uint64_t v4;
  uint64_t WitnessTable;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v2 = *v1;
  v9 = 0;
  v10 = 0xE000000000000000;
  v7 = *(_QWORD *)(a1 + 16);
  v8 = v2;
  ExtendedExistentialTypeMetadata = swift_getExtendedExistentialTypeMetadata(&unk_1E3480, &v7);
  v4 = type metadata accessor for Array(0, ExtendedExistentialTypeMetadata);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v4);
  DefaultStringInterpolation.appendInterpolation<A>(_:)(&v8, v4, WitnessTable);
  return v9;
}

void _CodeAnyIntentModel_Many.init(from:)(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t WitnessTable;
  uint64_t v11;
  uint64_t v12;
  uint64_t KeyPath;
  uint64_t v14;
  char *ExtendedExistentialTypeMetadata;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[5];

  sub_BD00((uint64_t)a1, (uint64_t)v20);
  v9 = type metadata accessor for CodeAnyIntentModel(0, a2, v7, v8);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for CodeAnyIntentModel<A>, v9);
  v11 = Array<A>.init(from:)(v20, v9, WitnessTable);
  if (v3)
  {
    _s7BooksUI13AnyPagedFrameVwxx_0(a1);
  }
  else
  {
    v12 = v11;
    v20[0] = v11;
    __chkstk_darwin(v11);
    KeyPath = swift_getKeyPath(&unk_1F7F98);
    v14 = type metadata accessor for Array(0, v9);
    v19 = a2;
    ExtendedExistentialTypeMetadata = (char *)swift_getExtendedExistentialTypeMetadata(&unk_1E3480, &v19);
    v16 = swift_getWitnessTable(&protocol conformance descriptor for [A], v14);
    v18 = sub_15D640((void (*)(char *, char *))sub_D9864, KeyPath, v14, ExtendedExistentialTypeMetadata, (uint64_t)&type metadata for Never, v16, (uint64_t)&protocol witness table for Never, v17);
    _s7BooksUI13AnyPagedFrameVwxx_0(a1);
    swift_bridgeObjectRelease(v12);
    swift_release(KeyPath);
    *a3 = v18;
  }
}

void _CodeAnyIntentModel_Many.init(_partiallyFrom:)(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t WitnessTable;
  uint64_t v10;
  uint64_t KeyPath;
  uint64_t v12;
  char *ExtendedExistentialTypeMetadata;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[5];

  sub_BD00((uint64_t)a1, (uint64_t)v18);
  v8 = type metadata accessor for CodeAnyIntentModel(0, a2, v6, v7);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for CodeAnyIntentModel<A>, v8);
  v10 = Array<A>.init(_partiallyFrom:)(v18, v8, WitnessTable);
  v18[0] = v10;
  KeyPath = swift_getKeyPath(&unk_1F7F98);
  v12 = type metadata accessor for Array(0, v8);
  v17 = a2;
  ExtendedExistentialTypeMetadata = (char *)swift_getExtendedExistentialTypeMetadata(&unk_1E3480, &v17);
  v14 = swift_getWitnessTable(&protocol conformance descriptor for [A], v12);
  v16 = sub_15D640((void (*)(char *, char *))sub_D9864, KeyPath, v12, ExtendedExistentialTypeMetadata, (uint64_t)&type metadata for Never, v14, (uint64_t)&protocol witness table for Never, v15);
  _s7BooksUI13AnyPagedFrameVwxx_0(a1);
  swift_bridgeObjectRelease(v10);
  swift_release(KeyPath);
  *a3 = v16;
}

void sub_1C2190(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _CodeAnyIntentModel_Many.init(from:)(a1, *(_QWORD *)(a2 + 16), a3);
}

void sub_1C21A8(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _CodeAnyIntentModel_Many.init(_partiallyFrom:)(a1, *(_QWORD *)(a2 + 16), a3);
}

uint64_t type metadata accessor for _CodeAnyIntentModel_Many(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10E40(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _CodeAnyIntentModel_Many);
}

uint64_t ReaderTypeFrameViewModel.init(type:exposureData:)@<X0>(_BYTE *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  _BYTE *v4;
  uint64_t v5;

  *a3 = *a1;
  v4 = &a3[*(int *)(type metadata accessor for ReaderTypeFrameViewModel(0) + 20)];
  v5 = type metadata accessor for YIRSourceData(0);
  return (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(v4, a2, v5);
}

uint64_t type metadata accessor for ReaderTypeFrameViewModel(uint64_t a1)
{
  return sub_1FE90(a1, qword_26BA38, (uint64_t)&nominal type descriptor for ReaderTypeFrameViewModel);
}

void sub_1C2224()
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = type metadata accessor for Locale(0);
  v2 = __chkstk_darwin(v1);
  __chkstk_darwin(v2);
  v3 = type metadata accessor for String.LocalizationValue(0);
  v4 = __chkstk_darwin(v3);
  __chkstk_darwin(v4);
  __asm { BR              X10 }
}

uint64_t sub_1C2308()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t ObjCClassFromMetadata;
  id v11;
  uint64_t v12;

  v8 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000010, 0x80000000001FF630);
  static Locale.current.getter(v8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v4, v2, v1);
  v9 = type metadata accessor for BundleFinder();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v9);
  v11 = objc_msgSend((id)objc_opt_self(NSBundle), "bundleForClass:", ObjCClassFromMetadata);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v3, v5, v0);
  v12 = String.init(localized:table:bundle:locale:comment:)(v4, 0, 0, v11, v3, "Year in Review: Reader Type Title - The Contemporary", 52, 2);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v0);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v2, v1);
  return v12;
}

void sub_1C2794()
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = type metadata accessor for Locale(0);
  v2 = __chkstk_darwin(v1);
  __chkstk_darwin(v2);
  v3 = type metadata accessor for String.LocalizationValue(0);
  v4 = __chkstk_darwin(v3);
  __chkstk_darwin(v4);
  __asm { BR              X10 }
}

uint64_t sub_1C2878()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t ObjCClassFromMetadata;
  id v11;
  uint64_t v12;

  v8 = String.LocalizationValue.init(stringLiteral:)(0x10000000000000DBLL, 0x80000000001FF3C0);
  static Locale.current.getter(v8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v4, v2, v1);
  v9 = type metadata accessor for BundleFinder();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v9);
  v11 = objc_msgSend((id)objc_opt_self(NSBundle), "bundleForClass:", ObjCClassFromMetadata);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v3, v5, v0);
  v12 = String.init(localized:table:bundle:locale:comment:)(v4, 0, 0, v11, v3, "Year in Review: Reader Type Description - The Contemporary", 58, 2);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v0);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v2, v1);
  return v12;
}

void sub_1C2D00()
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = type metadata accessor for Locale(0);
  v2 = __chkstk_darwin(v1);
  __chkstk_darwin(v2);
  v3 = type metadata accessor for String.LocalizationValue(0);
  v4 = __chkstk_darwin(v3);
  __chkstk_darwin(v4);
  __asm { BR              X10 }
}

uint64_t sub_1C2DE4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t ObjCClassFromMetadata;
  id v11;
  uint64_t v12;

  v8 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000099, 0x80000000001FED90);
  static Locale.current.getter(v8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v4, v2, v1);
  v9 = type metadata accessor for BundleFinder();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v9);
  v11 = objc_msgSend((id)objc_opt_self(NSBundle), "bundleForClass:", ObjCClassFromMetadata);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v3, v5, v0);
  v12 = String.init(localized:table:bundle:locale:comment:)(v4, 0, 0, v11, v3, "Accessibility label for the contemporary reader type image", 58, 2);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v0);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v2, v1);
  return v12;
}

void sub_1C3254()
{
  uint64_t v1;

  v1 = type metadata accessor for Color.RGBColorSpace(0);
  __chkstk_darwin(v1);
  __asm { BR              X10 }
}

uint64_t sub_1C32B4()
{
  uint64_t v0;
  uint64_t v1;

  (*(void (**)(uint64_t, _QWORD))(v0 + 104))(v1, enum case for Color.RGBColorSpace.sRGB(_:));
  return ((uint64_t (*)(uint64_t, double, double, double, double))Color.init(_:red:green:blue:opacity:))(v1, 0.808, 0.29, 0.286, 1.0);
}

uint64_t ReaderTypeFrame.sharableView.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v6;

  v1 = type metadata accessor for ReaderTypeFrame(0);
  __chkstk_darwin(v1);
  v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1E428(v0, (uint64_t)v3, type metadata accessor for ReaderTypeFrame);
  v4 = sub_6FD0(&qword_26B9C0, type metadata accessor for ReaderTypeFrame, (uint64_t)&protocol conformance descriptor for ReaderTypeFrame);
  return AnyView.init<A>(_:)(v3, v1, v4);
}

uint64_t type metadata accessor for ReaderTypeFrame(uint64_t a1)
{
  return sub_1FE90(a1, qword_26BAC8, (uint64_t)&nominal type descriptor for ReaderTypeFrame);
}

uint64_t ReaderTypeFrame.exposureData.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t (*v6)(_QWORD);
  char *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v11;

  v3 = type metadata accessor for ReaderTypeFrameViewModel(0);
  __chkstk_darwin(v3);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1E428(v1, (uint64_t)v5, v6);
  v7 = &v5[*(int *)(v3 + 20)];
  v8 = type metadata accessor for YIRSourceData(0);
  a1[3] = v8;
  a1[4] = sub_6FD0(&qword_25EFF0, (uint64_t (*)(uint64_t))&type metadata accessor for YIRSourceData, (uint64_t)&protocol conformance descriptor for YIRSourceData);
  a1[5] = sub_6FD0(&qword_25EFF8, (uint64_t (*)(uint64_t))&type metadata accessor for YIRSourceData, (uint64_t)&protocol conformance descriptor for YIRSourceData);
  v9 = sub_C404(a1);
  return (*(uint64_t (**)(_QWORD *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v9, v7, v8);
}

uint64_t ReaderTypeFrame.background.getter@<X0>(_QWORD *a1@<X8>)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = (char *)a1 + *(int *)(sub_5440(&qword_25E930) + 48);
  sub_1C3254();
  *a1 = v3;
  v4 = enum case for ColorScheme.light(_:);
  v5 = type metadata accessor for ColorScheme(0);
  v6 = *(_QWORD *)(v5 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 104))(v2, v4, v5);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v2, 0, 1, v5);
  v7 = type metadata accessor for PageBackground(0);
  return swift_storeEnumTagMultiPayload(a1, v7, 0);
}

uint64_t ReaderTypeFrame.init(model:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_21C88(a1, a2, type metadata accessor for ReaderTypeFrameViewModel);
}

double ReaderTypeFrame.body.getter@<D0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(_QWORD);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t KeyPath;
  uint64_t v19;
  double result;
  uint64_t v21;

  v2 = v1;
  v4 = sub_5440(&qword_25EE58);
  __chkstk_darwin(v4);
  v6 = (uint64_t *)((char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = type metadata accessor for ColorScheme(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for ReaderTypeFrame(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  __chkstk_darwin(v11);
  sub_1E428(v2, (uint64_t)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), v14);
  v15 = *(unsigned __int8 *)(v12 + 80);
  v16 = (v15 + 16) & ~v15;
  v17 = swift_allocObject(&unk_25A368, v16 + v13, v15 | 7);
  sub_21C88((uint64_t)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), v17 + v16, type metadata accessor for ReaderTypeFrame);
  KeyPath = swift_getKeyPath(&unk_1F8110);
  (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v10, enum case for ColorScheme.light(_:), v7);
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))((char *)v6 + *(int *)(v4 + 28), v10, v7);
  *v6 = KeyPath;
  v19 = sub_5440(&qword_26B9C8);
  sub_B3D0((uint64_t)v6, (uint64_t)a1 + *(int *)(v19 + 36), &qword_25EE58);
  *a1 = sub_1C3940;
  a1[1] = v17;
  swift_retain(v17);
  sub_B414((uint64_t)v6, &qword_25EE58);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  *(_QWORD *)&result = swift_release(v17).n128_u64[0];
  return result;
}

uint64_t sub_1C3838@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v6 = sub_5440(&qword_2626A8);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v9 = static HorizontalAlignment.center.getter(v7);
  *((_QWORD *)v9 + 1) = 0x4040000000000000;
  v9[16] = 0;
  v10 = sub_5440(&qword_26BB18);
  sub_1C3994(a2, a1, (uint64_t)&v9[*(int *)(v10 + 44)]);
  v11 = _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0();
  sub_883FC(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, a3, 0.0, 1, INFINITY, 0, v11, v12);
  return sub_B414((uint64_t)v9, &qword_2626A8);
}

unint64_t sub_1C3950()
{
  unint64_t result;

  result = qword_26B9D0;
  if (!qword_26B9D0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ReaderTypeFrameViewModel.Type, &type metadata for ReaderTypeFrameViewModel.Type);
    atomic_store(result, (unint64_t *)&qword_26B9D0);
  }
  return result;
}

uint64_t sub_1C3994@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  char *v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  double v47;
  double v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _OWORD v77[7];

  v71 = a2;
  v76 = a3;
  v4 = sub_5440(&qword_2626B8);
  __chkstk_darwin(v4);
  v6 = (char *)&v66 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_5440(&qword_2626C0);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v66 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v75 = (uint64_t)&v66 - v11;
  v12 = sub_5440(&qword_25FE08);
  __chkstk_darwin(v12);
  v14 = (char *)&v66 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = (int *)type metadata accessor for TextLockup(0);
  __chkstk_darwin(v15);
  v17 = (uint64_t *)((char *)&v66 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v70 = sub_5440(&qword_2648C8);
  v18 = __chkstk_darwin(v70);
  v73 = (uint64_t)&v66 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __chkstk_darwin(v18);
  v22 = (char *)&v66 - v21;
  __chkstk_darwin(v20);
  v72 = (uint64_t)&v66 - v23;
  sub_1C2224();
  v69 = v24;
  v68 = v25;
  v74 = a1;
  sub_1C2794();
  v67 = v26;
  v66 = v27;
  v28 = type metadata accessor for Font.Design(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v14, 1, 1, v28);
  v29 = _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0();
  v31 = v30;
  v32 = static HorizontalAlignment.leading.getter(v29);
  *v17 = swift_getKeyPath(&unk_1F82A8);
  v33 = sub_5440(&qword_25F1E8);
  swift_storeEnumTagMultiPayload(v17, v33, 0);
  v34 = (_QWORD *)((char *)v17 + v15[5]);
  *v34 = swift_getKeyPath(&unk_1F82D0);
  v35 = sub_5440(&qword_25F208);
  swift_storeEnumTagMultiPayload(v34, v35, 0);
  v36 = (char *)v17 + v15[6];
  *(_QWORD *)v36 = swift_getKeyPath(&unk_1F82F8);
  v36[8] = 0;
  v37 = (char *)v17 + v15[7];
  *(_QWORD *)v37 = swift_getKeyPath(&unk_1F8320);
  v37[8] = 0;
  v38 = (char *)v17 + v15[8];
  *(_QWORD *)v38 = swift_getKeyPath(&unk_1F8348);
  v38[8] = 0;
  v39 = (char *)v17 + v15[9];
  *(_QWORD *)v39 = swift_getKeyPath(&unk_1F8378);
  v39[8] = 0;
  *((_BYTE *)v17 + v15[10]) = 3;
  v40 = (_QWORD *)((char *)v17 + v15[11]);
  *v40 = 0;
  v40[1] = 0;
  v41 = (_QWORD *)((char *)v17 + v15[12]);
  v42 = v68;
  *v41 = v69;
  v41[1] = v42;
  v41[2] = 0;
  v43 = (_QWORD *)((char *)v17 + v15[13]);
  v44 = v66;
  *v43 = v67;
  v43[1] = v44;
  v45 = sub_167A4((uint64_t)v14, (uint64_t)v17 + v15[14], &qword_25FE08);
  *(_QWORD *)((char *)v17 + v15[15]) = v32;
  v46 = (_QWORD *)((char *)v17 + v15[16]);
  *v46 = v29;
  v46[1] = v31;
  *((_BYTE *)v17 + v15[17]) = 1;
  GeometryProxy.size.getter(v45);
  v48 = v47 * 0.5;
  v49 = _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0();
  v65 = 1;
  v64 = 1;
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v77, 0, 1, 0, 1, 0, 1, *(_QWORD *)&v48, 0, 0, v64, 0, v65, v49, v50);
  sub_1E428((uint64_t)v17, (uint64_t)v22, type metadata accessor for TextLockup);
  v51 = &v22[*(int *)(v70 + 36)];
  v52 = v77[5];
  *((_OWORD *)v51 + 4) = v77[4];
  *((_OWORD *)v51 + 5) = v52;
  *((_OWORD *)v51 + 6) = v77[6];
  v53 = v77[1];
  *(_OWORD *)v51 = v77[0];
  *((_OWORD *)v51 + 1) = v53;
  v54 = v77[3];
  *((_OWORD *)v51 + 2) = v77[2];
  *((_OWORD *)v51 + 3) = v54;
  sub_DBB1C((uint64_t)v17);
  v55 = v72;
  v56 = sub_167A4((uint64_t)v22, v72, &qword_2648C8);
  *(_QWORD *)v6 = static HorizontalAlignment.center.getter(v56);
  *((_QWORD *)v6 + 1) = 0;
  v6[16] = 1;
  sub_5440(&qword_26BB20);
  sub_1C3F7C(v74);
  v57 = _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0();
  sub_88460(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v10, 0.0, 1, INFINITY, 0, v57, v58);
  sub_B414((uint64_t)v6, &qword_2626B8);
  v59 = v75;
  sub_167A4((uint64_t)v10, v75, &qword_2626C0);
  v60 = v73;
  sub_B3D0(v55, v73, &qword_2648C8);
  sub_B3D0(v59, (uint64_t)v10, &qword_2626C0);
  v61 = v76;
  sub_B3D0(v60, v76, &qword_2648C8);
  v62 = sub_5440(&qword_26BB28);
  sub_B3D0((uint64_t)v10, v61 + *(int *)(v62 + 48), &qword_2626C0);
  sub_B414(v59, &qword_2626C0);
  sub_B414(v55, &qword_2648C8);
  sub_B414((uint64_t)v10, &qword_2626C0);
  return sub_B414(v60, &qword_2648C8);
}

void sub_1C3F7C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = type metadata accessor for Image.ResizingMode(0);
  __chkstk_darwin(v2);
  v3 = sub_5440(&qword_260E10);
  __chkstk_darwin(v3);
  __asm { BR              X10 }
}

uint64_t sub_1C4054()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t ObjCClassFromMetadata;
  id v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;

  v8 = v5 + 9;
  v9 = type metadata accessor for BundleFinder();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v9);
  v11 = objc_msgSend((id)objc_opt_self(NSBundle), "bundleForClass:", ObjCClassFromMetadata);
  v12 = Image.init(_:bundle:)(v8, 0x80000000001FEA20, v11);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v1 + 104))(v4, enum case for Image.ResizingMode.stretch(_:), v3);
  v13 = Image.resizable(capInsets:resizingMode:)(v4, v12, 0.0, 0.0, 0.0, 0.0);
  v14 = swift_release(v12);
  (*(void (**)(uint64_t, uint64_t, __n128))(v1 + 8))(v4, v3, v14);
  v15 = _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0();
  sub_877A0(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v7 - 232, 0.0, 1, INFINITY, 0, v15, v16, v13, 0, 1);
  swift_release(v13);
  v17 = v6[5];
  v19 = v6[6];
  v18 = v6[7];
  *(_OWORD *)(v0 + 272) = v19;
  *(_OWORD *)(v0 + 288) = v18;
  v20 = v6[1];
  v22 = v6[2];
  v21 = v6[3];
  *(_OWORD *)(v0 + 208) = v22;
  *(_OWORD *)(v0 + 224) = v21;
  v23 = v6[3];
  v25 = v6[4];
  v24 = v6[5];
  *(_OWORD *)(v0 + 240) = v25;
  *(_OWORD *)(v0 + 256) = v24;
  v26 = v6[1];
  v27 = *v6;
  *(_OWORD *)(v0 + 176) = *v6;
  *(_OWORD *)(v0 + 192) = v26;
  v28 = v6[7];
  *(_OWORD *)(v0 + 128) = v19;
  *(_OWORD *)(v0 + 144) = v28;
  *(_OWORD *)(v0 + 64) = v22;
  *(_OWORD *)(v0 + 80) = v23;
  *(_OWORD *)(v0 + 96) = v25;
  *(_OWORD *)(v0 + 112) = v17;
  v29 = *(_QWORD *)(v7 - 104);
  *(_QWORD *)(v0 + 304) = v29;
  *(_QWORD *)(v0 + 160) = v29;
  *(_OWORD *)(v0 + 32) = v27;
  *(_OWORD *)(v0 + 48) = v20;
  sub_1C2D00();
  v31 = v30;
  *(_QWORD *)(v0 + 16) = v32;
  *(_QWORD *)(v0 + 24) = v30;
  v33 = sub_5440(&qword_260E00);
  v34 = sub_5785C();
  v35 = sub_C57C();
  View.accessibilityLabel<A>(_:)(v0 + 16, v33, &type metadata for String, v34, v35);
  swift_bridgeObjectRelease(v31);
  sub_578C8((_QWORD *)(v0 + 176));
  return sub_167A4(v2, *(_QWORD *)(v0 + 8), &qword_260E10);
}

uint64_t sub_1C42AC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v8;

  v3 = __chkstk_darwin(v1);
  v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1E428(v3, (uint64_t)v5, type metadata accessor for ReaderTypeFrame);
  v6 = sub_6FD0(&qword_26B9C0, type metadata accessor for ReaderTypeFrame, (uint64_t)&protocol conformance descriptor for ReaderTypeFrame);
  return AnyView.init<A>(_:)(v5, a1, v6);
}

uint64_t sub_1C4340(uint64_t a1)
{
  uint64_t result;

  result = sub_6FD0(&qword_26B9D8, type metadata accessor for ReaderTypeFrame, (uint64_t)&protocol conformance descriptor for ReaderTypeFrame);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1C437C(uint64_t a1)
{
  uint64_t result;

  result = sub_6FD0(&qword_26B9C0, type metadata accessor for ReaderTypeFrame, (uint64_t)&protocol conformance descriptor for ReaderTypeFrame);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1C43B8(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &opaque type descriptor for <<opaque return type of ReaderTypeFrame.body>>, 1);
}

double sub_1C43C8@<D0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t KeyPath;
  uint64_t v19;
  double result;
  uint64_t v21[2];

  v4 = sub_5440(&qword_25EE58);
  __chkstk_darwin(v4);
  v6 = (uint64_t *)((char *)v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = type metadata accessor for ColorScheme(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(a1 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  __chkstk_darwin(v9);
  v14 = (char *)v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1E428(v21[1], (uint64_t)v14, type metadata accessor for ReaderTypeFrame);
  v15 = *(unsigned __int8 *)(v12 + 80);
  v16 = (v15 + 16) & ~v15;
  v17 = swift_allocObject(&unk_25A478, v16 + v13, v15 | 7);
  sub_21C88((uint64_t)v14, v17 + v16, type metadata accessor for ReaderTypeFrame);
  KeyPath = swift_getKeyPath(&unk_1F8110);
  (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v11, enum case for ColorScheme.light(_:), v7);
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))((char *)v6 + *(int *)(v4 + 28), v11, v7);
  *v6 = KeyPath;
  v19 = sub_5440(&qword_26B9C8);
  sub_B3D0((uint64_t)v6, (uint64_t)a2 + *(int *)(v19 + 36), &qword_25EE58);
  *a2 = sub_1C3940;
  a2[1] = v17;
  swift_retain(v17);
  sub_B414((uint64_t)v6, &qword_25EE58);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  *(_QWORD *)&result = swift_release(v17).n128_u64[0];
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for ReaderTypeFrameViewModel(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  _BYTE *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v9 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v9 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain(v9);
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    v5 = *(int *)(a3 + 20);
    v6 = (char *)a1 + v5;
    v7 = (char *)a2 + v5;
    v8 = type metadata accessor for YIRSourceData(0);
    (*(void (**)(_BYTE *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v6, v7, v8);
  }
  return v3;
}

uint64_t destroy for ReaderTypeFrameViewModel(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + *(int *)(a2 + 20);
  v3 = type metadata accessor for YIRSourceData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
}

_BYTE *initializeWithCopy for ReaderTypeFrameViewModel(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = &a1[v4];
  v6 = &a2[v4];
  v7 = type metadata accessor for YIRSourceData(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v5, v6, v7);
  return a1;
}

_BYTE *assignWithCopy for ReaderTypeFrameViewModel(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = &a1[v4];
  v6 = &a2[v4];
  v7 = type metadata accessor for YIRSourceData(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v7 - 8) + 24))(v5, v6, v7);
  return a1;
}

_BYTE *initializeWithTake for ReaderTypeFrameViewModel(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = &a1[v4];
  v6 = &a2[v4];
  v7 = type metadata accessor for YIRSourceData(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

_BYTE *assignWithTake for ReaderTypeFrameViewModel(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = &a1[v4];
  v6 = &a2[v4];
  v7 = type metadata accessor for YIRSourceData(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v7 - 8) + 40))(v5, v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for ReaderTypeFrameViewModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1C47E4);
}

uint64_t sub_1C47E4(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4;
  uint64_t v8;

  if ((_DWORD)a2 == 250)
  {
    v4 = *a1;
    if (v4 >= 6)
      return v4 - 5;
    else
      return 0;
  }
  else
  {
    v8 = type metadata accessor for YIRSourceData(0);
    return (*(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 20)], a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for ReaderTypeFrameViewModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1C4864);
}

_BYTE *sub_1C4864(_BYTE *result, uint64_t a2, int a3, uint64_t a4)
{
  _BYTE *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 250)
  {
    *result = a2 + 5;
  }
  else
  {
    v7 = type metadata accessor for YIRSourceData(0);
    return (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

uint64_t sub_1C48D4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = &unk_1F8260;
  result = type metadata accessor for YIRSourceData(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ReaderTypeFrameViewModel.Type(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_1C4994 + 4 * byte_1F810B[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_1C49C8 + 4 * byte_1F8106[v4]))();
}

uint64_t sub_1C49C8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C49D0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1C49D8);
  return result;
}

uint64_t sub_1C49E4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1C49ECLL);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_1C49F0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C49F8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ReaderTypeFrameViewModel.Type()
{
  return &type metadata for ReaderTypeFrameViewModel.Type;
}

uint64_t *initializeBufferWithCopyOfBuffer for ReaderTypeFrame(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;

  v4 = type metadata accessor for ReaderTypeFrameViewModel(0);
  v5 = *(_DWORD *)(*(_QWORD *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v10);
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    v6 = *(int *)(v4 + 20);
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    v9 = type metadata accessor for YIRSourceData(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
  }
  return a1;
}

uint64_t destroy for ReaderTypeFrame(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = a1 + *(int *)(type metadata accessor for ReaderTypeFrameViewModel(0) + 20);
  v2 = type metadata accessor for YIRSourceData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
}

_BYTE *initializeWithCopy for ReaderTypeFrame(_BYTE *a1, _BYTE *a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(type metadata accessor for ReaderTypeFrameViewModel(0) + 20);
  v5 = &a1[v4];
  v6 = &a2[v4];
  v7 = type metadata accessor for YIRSourceData(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v5, v6, v7);
  return a1;
}

_BYTE *assignWithCopy for ReaderTypeFrame(_BYTE *a1, _BYTE *a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(type metadata accessor for ReaderTypeFrameViewModel(0) + 20);
  v5 = &a1[v4];
  v6 = &a2[v4];
  v7 = type metadata accessor for YIRSourceData(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v7 - 8) + 24))(v5, v6, v7);
  return a1;
}

_BYTE *initializeWithTake for ReaderTypeFrame(_BYTE *a1, _BYTE *a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(type metadata accessor for ReaderTypeFrameViewModel(0) + 20);
  v5 = &a1[v4];
  v6 = &a2[v4];
  v7 = type metadata accessor for YIRSourceData(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

_BYTE *assignWithTake for ReaderTypeFrame(_BYTE *a1, _BYTE *a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(type metadata accessor for ReaderTypeFrameViewModel(0) + 20);
  v5 = &a1[v4];
  v6 = &a2[v4];
  v7 = type metadata accessor for YIRSourceData(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v7 - 8) + 40))(v5, v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for ReaderTypeFrame(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1C4C98);
}

uint64_t sub_1C4C98(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ReaderTypeFrameViewModel(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for ReaderTypeFrame(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1C4CE0);
}

uint64_t sub_1C4CE0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ReaderTypeFrameViewModel(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t sub_1C4D20(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  result = type metadata accessor for ReaderTypeFrameViewModel(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 1, &v4, a1 + 16);
    return 0;
  }
  return result;
}

unint64_t sub_1C4D8C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_26BB00;
  if (!qword_26BB00)
  {
    v1 = sub_7EF8(&qword_26B9C8);
    sub_7FD8(&qword_26BB08, &qword_26BB10, (uint64_t)&protocol conformance descriptor for GeometryReader<A>);
    sub_7FD8((unint64_t *)&qword_25EE78, &qword_25EE58, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_26BB00);
  }
  return result;
}

uint64_t sub_1C4E2C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(type metadata accessor for ReaderTypeFrame(0) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 16) & ~v2;
  v4 = v3 + *(_QWORD *)(v1 + 64);
  v5 = v2 | 7;
  v6 = v0 + *(int *)(type metadata accessor for ReaderTypeFrameViewModel(0) + 20) + v3;
  v7 = type metadata accessor for YIRSourceData(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  return swift_deallocObject(v0, v4, v5);
}

uint64_t sub_1C4EAC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ReaderTypeFrame(0) - 8) + 80);
  return sub_1C3838(a1, v2 + ((v5 + 16) & ~v5), a2);
}

uint64_t static ShelfGridLayout.horizontal(layoutContext:itemsPerColumn:itemColumnSpan:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  __int128 v9;
  uint64_t v10;
  uint64_t (**v11)@<X0>(uint64_t@<X0>, double *@<X8>);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD v18[2];
  char v19;

  v6 = *(_QWORD *)a3;
  v7 = *(_QWORD *)(a3 + 8);
  v8 = *(_BYTE *)(a3 + 16);
  v19 = *(_BYTE *)(a1 + 8);
  v9 = *(_OWORD *)(a1 + 32);
  v18[0] = *(_OWORD *)(a1 + 16);
  v18[1] = v9;
  type metadata accessor for ShelfGridLayoutContext(0);
  v10 = ShelfGridBreakpoint.resolveColumns(for:dynamicTypeSize:)((uint64_t *)v18);
  v11 = (uint64_t (**)@<X0>(uint64_t@<X0>, double *@<X8>))((char *)a4 + *(int *)(sub_5440(&qword_267AE0) + 48));
  *a4 = a2;
  v12 = swift_allocObject(&unk_25A538, 41, 7);
  *(_QWORD *)(v12 + 16) = v10;
  *(_QWORD *)(v12 + 24) = v6;
  *(_QWORD *)(v12 + 32) = v7;
  *(_BYTE *)(v12 + 40) = v8;
  *v11 = sub_1C5554;
  v11[1] = (uint64_t (*)@<X0>(uint64_t@<X0>, double *@<X8>))v12;
  v13 = enum case for ShelfGridItemWidth.calculate(_:);
  v14 = type metadata accessor for ShelfGridItemWidth(0);
  (*(void (**)(uint64_t (**)@<X0>(uint64_t@<X0>, double *@<X8>), uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 104))(v11, v13, v14);
  v15 = enum case for ShelfGridLayout.horizontal(_:);
  v16 = type metadata accessor for ShelfGridLayout(0);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 104))(a4, v15, v16);
  return sub_1C5558(v6, v7, v8);
}

uint64_t type metadata accessor for ShelfGridLayoutContext(uint64_t a1)
{
  uint64_t result;

  result = qword_26BB88;
  if (!qword_26BB88)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ShelfGridLayoutContext);
  return result;
}

double ShelfGridItemColumnSpan.resolve(using:)(uint64_t *a1)
{
  uint64_t v1;
  void (*v2)(_QWORD *__return_ptr, uint64_t *, __n128);
  uint64_t v3;
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  double v9;
  uint64_t v11;
  _QWORD v12[2];
  char v13;

  v2 = *(void (**)(_QWORD *__return_ptr, uint64_t *, __n128))v1;
  if ((*(_BYTE *)(v1 + 16) & 1) == 0)
    return *(double *)v1;
  v3 = *(_QWORD *)(v1 + 8);
  v11 = *a1;
  v4 = v11;
  v5 = swift_retain(v3);
  v2(v12, &v11, v5);
  v6 = v12[0];
  v7 = v12[1];
  v8 = v13;
  v11 = v4;
  v9 = ShelfGridItemColumnSpan.resolve(using:)(&v11);
  sub_14B410((uint64_t)v2, v3, 1);
  sub_14B410(v6, v7, v8);
  return v9;
}

void ShelfGridLayoutContext.breakpoint.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 8);
}

uint64_t ShelfGridLayoutContext.gridType.getter@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = v1[2];
  v3 = v1[3];
  v5 = v1[4];
  v4 = v1[5];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v5;
  a1[3] = v4;
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  return sub_5802C(v5, v4);
}

uint64_t ShelfGridLayoutContext.dynamicTypeSize.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ShelfGridLayoutContext(0) + 28);
  v4 = type metadata accessor for DynamicTypeSize(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t ShelfGridLayoutContext.viewSizeConditions.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  char *v4;
  char v5;
  char v6;

  result = type metadata accessor for ShelfGridLayoutContext(0);
  v4 = (char *)(v1 + *(int *)(result + 32));
  v5 = *v4;
  v6 = v4[1];
  LOBYTE(v4) = v4[2];
  *a1 = v5;
  a1[1] = v6;
  a1[2] = (_BYTE)v4;
  return result;
}

uint64_t ShelfGridLayoutContext.init(itemsCount:breakpoint:gridType:dynamicTypeSize:viewSizeConditions:)@<X0>(uint64_t a1@<X0>, char *a2@<X1>, _OWORD *a3@<X2>, uint64_t a4@<X3>, char *a5@<X4>, uint64_t a6@<X8>)
{
  char v8;
  char v9;
  char v10;
  char v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  _BYTE *v17;

  v8 = *a2;
  v9 = *a5;
  v10 = a5[1];
  v11 = a5[2];
  *(_QWORD *)a6 = a1;
  *(_BYTE *)(a6 + 8) = v8;
  v12 = a3[1];
  *(_OWORD *)(a6 + 16) = *a3;
  *(_OWORD *)(a6 + 32) = v12;
  v13 = type metadata accessor for ShelfGridLayoutContext(0);
  v14 = a6 + *(int *)(v13 + 28);
  v15 = type metadata accessor for DynamicTypeSize(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v14, a4, v15);
  v17 = (_BYTE *)(a6 + *(int *)(v13 + 32));
  *v17 = v9;
  v17[1] = v10;
  v17[2] = v11;
  return result;
}

uint64_t static ShelfGridLayout.horizontal(columns:itemsPerColumn:itemColumnSpan:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t (**v10)@<X0>(uint64_t@<X0>, double *@<X8>);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v7 = *(_QWORD *)a3;
  v8 = *(_QWORD *)(a3 + 8);
  v9 = *(_BYTE *)(a3 + 16);
  v10 = (uint64_t (**)@<X0>(uint64_t@<X0>, double *@<X8>))((char *)a4 + *(int *)(sub_5440(&qword_267AE0) + 48));
  *a4 = a2;
  v11 = swift_allocObject(&unk_25A560, 41, 7);
  *(_QWORD *)(v11 + 16) = a1;
  *(_QWORD *)(v11 + 24) = v7;
  *(_QWORD *)(v11 + 32) = v8;
  *(_BYTE *)(v11 + 40) = v9;
  *v10 = sub_1C5554;
  v10[1] = (uint64_t (*)@<X0>(uint64_t@<X0>, double *@<X8>))v11;
  v12 = enum case for ShelfGridItemWidth.calculate(_:);
  v13 = type metadata accessor for ShelfGridItemWidth(0);
  (*(void (**)(uint64_t (**)@<X0>(uint64_t@<X0>, double *@<X8>), uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 104))(v10, v12, v13);
  v14 = enum case for ShelfGridLayout.horizontal(_:);
  v15 = type metadata accessor for ShelfGridLayout(0);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 104))(a4, v14, v15);
  return sub_1C5558(v7, v8, v9);
}

uint64_t sub_1C53A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, double *a6@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double *v16;
  uint64_t (*v17)(void);
  double v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  double v24;
  uint64_t v26;
  uint64_t v27;
  int v28;
  double *v29;
  uint64_t v30[3];
  char v31;

  v28 = a5;
  v27 = a4;
  v29 = a6;
  v9 = type metadata accessor for ShelfGridSpacing(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for ShelfGridItemWidth(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (double *)((char *)&v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  *v16 = (double)a2;
  v17 = *(uint64_t (**)(void))(v14 + 104);
  ((void (*)(double *, _QWORD, uint64_t))v17)(v16, enum case for ShelfGridItemWidth.divideBy(_:), v13);
  v18 = ShelfGridItemWidth.resolve(using:)(a1);
  v19 = (*(uint64_t (**)(double *, uint64_t))(v14 + 8))(v16, v13);
  v30[1] = a3;
  v30[2] = v27;
  v31 = v28 & 1;
  v30[0] = ShelfGridItemWidth.Context.offset.getter(v19);
  v20 = ShelfGridItemColumnSpan.resolve(using:)(v30);
  v21 = ShelfGridItemWidth.Context.spacing.getter();
  v22 = ShelfGridSpacing.horizontal.getter(v21);
  LOBYTE(a1) = v23;
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  v24 = *(double *)&v22;
  if ((a1 & 1) != 0)
    v24 = 0.0;
  *v29 = v18 * v20 + (v20 + -1.0) * v24;
  return v17();
}

uint64_t sub_1C5558(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if ((a3 & 1) != 0)
    return swift_retain(a2);
  return result;
}

uint64_t sub_1C556C()
{
  uint64_t v0;

  sub_14B410(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_BYTE *)(v0 + 40));
  return swift_deallocObject(v0, 41, 7);
}

uint64_t destroy for ShelfGridItemColumnSpan(uint64_t a1)
{
  return sub_14B410(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t _s7BooksUI23ShelfGridItemColumnSpanOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_1C5558(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for ShelfGridItemColumnSpan(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_1C5558(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_BYTE *)(a1 + 16);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  sub_14B410(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for ShelfGridItemColumnSpan(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_BYTE *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v3;
  sub_14B410(v4, v5, v6);
  return a1;
}

ValueMetadata *type metadata accessor for ShelfGridItemColumnSpan()
{
  return &type metadata for ShelfGridItemColumnSpan;
}

ValueMetadata *type metadata accessor for ShelfGridItemColumnSpan.Context()
{
  return &type metadata for ShelfGridItemColumnSpan.Context;
}

_QWORD *initializeBufferWithCopyOfBuffer for ShelfGridLayoutContext(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    *(_QWORD *)a1 = *a2;
    *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
    v7 = a2[2];
    v8 = a2[3];
    v4[2] = v7;
    v4[3] = v8;
    v10 = a2 + 4;
    v9 = a2[4];
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    if (v9)
    {
      v11 = a2[5];
      v4[4] = v9;
      v4[5] = v11;
      swift_bridgeObjectRetain(v9);
      swift_bridgeObjectRetain(v11);
    }
    else
    {
      *((_OWORD *)v4 + 2) = *v10;
    }
    v13 = *(int *)(a3 + 28);
    v14 = (char *)v4 + v13;
    v15 = (uint64_t)a2 + v13;
    v16 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v14, v15, v16);
    v17 = *(int *)(a3 + 32);
    v18 = (char *)v4 + v17;
    v19 = (uint64_t)a2 + v17;
    *(_WORD *)v18 = *(_WORD *)v19;
    v18[2] = *(_BYTE *)(v19 + 2);
  }
  return v4;
}

uint64_t destroy for ShelfGridLayoutContext(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;

  swift_bridgeObjectRelease(a1[2]);
  swift_bridgeObjectRelease(a1[3]);
  v4 = a1[4];
  if (v4)
  {
    swift_bridgeObjectRelease(v4);
    swift_bridgeObjectRelease(a1[5]);
  }
  v5 = (char *)a1 + *(int *)(a2 + 28);
  v6 = type metadata accessor for DynamicTypeSize(0);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
}

uint64_t initializeWithCopy for ShelfGridLayoutContext(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  v9 = (_OWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  if (v8)
  {
    v10 = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 32) = v8;
    *(_QWORD *)(a1 + 40) = v10;
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v10);
  }
  else
  {
    *(_OWORD *)(a1 + 32) = *v9;
  }
  v11 = *(int *)(a3 + 28);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = type metadata accessor for DynamicTypeSize(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  v15 = *(int *)(a3 + 32);
  v16 = a1 + v15;
  v17 = a2 + v15;
  *(_WORD *)v16 = *(_WORD *)v17;
  *(_BYTE *)(v16 + 2) = *(_BYTE *)(v17 + 2);
  return a1;
}

uint64_t assignWithCopy for ShelfGridLayoutContext(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  _BYTE *v21;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(_QWORD *)(a2 + 32);
  if (!v10)
  {
    if (v11)
    {
      *(_QWORD *)(a1 + 32) = v11;
      v14 = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 40) = v14;
      swift_bridgeObjectRetain(v11);
      swift_bridgeObjectRetain(v14);
      goto LABEL_8;
    }
LABEL_7:
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    goto LABEL_8;
  }
  if (!v11)
  {
    sub_DC82C(a1 + 32);
    goto LABEL_7;
  }
  *(_QWORD *)(a1 + 32) = v11;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRelease(v10);
  v12 = *(_QWORD *)(a2 + 40);
  v13 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
LABEL_8:
  v15 = *(int *)(a3 + 28);
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = type metadata accessor for DynamicTypeSize(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 24))(v16, v17, v18);
  v19 = *(int *)(a3 + 32);
  v20 = (_BYTE *)(a1 + v19);
  v21 = (_BYTE *)(a2 + v19);
  *v20 = *v21;
  v20[1] = v21[1];
  v20[2] = v21[2];
  return a1;
}

uint64_t initializeWithTake for ShelfGridLayoutContext(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v6;
  v7 = *(int *)(a3 + 28);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for DynamicTypeSize(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = *(int *)(a3 + 32);
  v12 = a1 + v11;
  v13 = a2 + v11;
  *(_WORD *)v12 = *(_WORD *)v13;
  *(_BYTE *)(v12 + 2) = *(_BYTE *)(v13 + 2);
  return a1;
}

uint64_t assignWithTake for ShelfGridLayoutContext(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  _BYTE *v17;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease(v6);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(_QWORD *)(a2 + 32);
  if (!v8)
    goto LABEL_5;
  if (!v9)
  {
    sub_DC82C(a1 + 32);
LABEL_5:
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    goto LABEL_6;
  }
  *(_QWORD *)(a1 + 32) = v9;
  swift_bridgeObjectRelease(v8);
  v10 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRelease(v10);
LABEL_6:
  v11 = *(int *)(a3 + 28);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = type metadata accessor for DynamicTypeSize(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  v15 = *(int *)(a3 + 32);
  v16 = (_BYTE *)(a1 + v15);
  v17 = (_BYTE *)(a2 + v15);
  *v16 = *v17;
  v16[1] = v17[1];
  v16[2] = v17[2];
  return a1;
}

uint64_t getEnumTagSinglePayload for ShelfGridLayoutContext(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1C5BC4);
}

uint64_t sub_1C5BC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for DynamicTypeSize(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 28), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for ShelfGridLayoutContext(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1C5C4C);
}

uint64_t sub_1C5C4C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 16) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for DynamicTypeSize(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 28), a2, a2, v7);
  }
  return result;
}

uint64_t sub_1C5CC0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[5];

  v4[0] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[1] = &unk_1F8438;
  v4[2] = &unk_1F8450;
  result = type metadata accessor for DynamicTypeSize(319);
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(result - 8) + 64;
    v4[4] = &unk_1F8468;
    swift_initStructMetadata(a1, 256, 5, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t CodeAnyActionModel.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD v3[2];

  v3[0] = 0;
  v3[1] = 0xE000000000000000;
  v1 = sub_5440(&qword_25E848);
  _print_unlocked<A, B>(_:_:)(v0, v3, v1, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  return v3[0];
}

uint64_t CodeAnyActionModel.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v9[2];
  _OWORD v10[2];
  uint64_t v11;

  v5 = a1[3];
  v6 = a1[4];
  sub_5480(a1, v5);
  Decoder.decodeActionModel()(v5, v6, (uint64_t)v9);
  if (!v2)
  {
    sub_AC68(v9, (uint64_t)v10);
    v7 = v10[1];
    *(_OWORD *)a2 = v10[0];
    *(_OWORD *)(a2 + 16) = v7;
    *(_QWORD *)(a2 + 32) = v11;
  }
  return _s7BooksUI13AnyPagedFrameVwxx_0(a1);
}

uint64_t Decoder.decodeActionModel()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = dispatch thunk of Decoder.userInfo.getter(a1, a2);
  v7 = actionTableFromUserInfo(_:)();
  v9 = v8;
  swift_bridgeObjectRelease(v6);
  return Decoder.decodeComponentModel<A>(using:)(a1, v7, a2, v9, a3);
}

uint64_t Decoder.actionKindTable.getter()
{
  uint64_t v0;
  uint64_t v1;

  v0 = dispatch thunk of Decoder.userInfo.getter();
  v1 = actionTableFromUserInfo(_:)();
  swift_bridgeObjectRelease(v0);
  return v1;
}

ValueMetadata *type metadata accessor for CodeAnyActionModel()
{
  return &type metadata for CodeAnyActionModel;
}

uint64_t SeriesCardCoverStackCoverLayout.model.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_51C90(v1 + 40, a1);
}

double SeriesCardCoverStackCoverLayout.offset(for:)(double a1)
{
  uint64_t v1;
  double v2;
  double v3;
  double v4;

  if (*(_BYTE *)v1)
  {
    if (*(_BYTE *)v1 == 1)
    {
      v2 = -1.0;
      v3 = 0.86;
    }
    else
    {
      v2 = 1.0;
      v3 = 0.78;
    }
    return v2 * ((a1 - *(double *)(v1 + 16) * v3 * *(double *)(v1 + 32)) * 0.5);
  }
  else
  {
    v4 = 0.0;
    if (*(_QWORD *)(v1 + 8) == 2)
      return (a1 - *(double *)(v1 + 16) * *(double *)(v1 + 32)) * 0.5;
  }
  return v4;
}

double SeriesCardCoverStackCoverLayout.height(for:)()
{
  uint64_t v0;

  if (!*(_BYTE *)v0)
    return *(double *)(v0 + 16);
  if (*(_BYTE *)v0 == 1)
    return *(double *)(v0 + 16) * 0.86;
  return *(double *)(v0 + 16) * 0.78;
}

double SeriesCardCoverStackCoverLayout.scale(forOverscrollOffset:)()
{
  return 1.0;
}

double SeriesCardCoverStackCoverLayout.offset(forOverscrollOffset:)()
{
  return 0.0;
}

double sub_1C5FF0(double a1)
{
  return SeriesCardCoverStackCoverLayout.offset(for:)(a1);
}

uint64_t *sub_1C6008@<X0>(uint64_t *result@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  v2 = *result;
  if ((unint64_t)*result >= 3)
    LOBYTE(v2) = 3;
  *a2 = v2;
  return result;
}

BOOL _s7BooksUI020SeriesCardCoverStackE6LayoutV2eeoiySbAC_ACtFZ_0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2
      && *((_QWORD *)a1 + 1) == *((_QWORD *)a2 + 1)
      && *((double *)a1 + 2) == *((double *)a2 + 2)
      && *((double *)a1 + 3) == *((double *)a2 + 3)
      && *((double *)a1 + 4) == *((double *)a2 + 4)
      && _s7BooksUI14CoverViewModelV2eeoiySbAC_ACtFZ_0((uint64_t)(a1 + 40), (uint64_t)(a2 + 40));
}

unint64_t sub_1C6084(uint64_t a1)
{
  unint64_t result;

  result = sub_1C60A8();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1C60A8()
{
  unint64_t result;

  result = qword_26BBD0;
  if (!qword_26BBD0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for SeriesCardCoverStackCoverLayout, &type metadata for SeriesCardCoverStackCoverLayout);
    atomic_store(result, (unint64_t *)&qword_26BBD0);
  }
  return result;
}

uint64_t destroy for SeriesCardCoverStackCoverLayout(uint64_t a1)
{
  uint64_t result;

  if (!*(_BYTE *)(a1 + 96))
    _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)(a1 + 40));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 144));
  result = *(_QWORD *)(a1 + 160);
  if (result)
  {
    swift_bridgeObjectRelease(result);
    swift_bridgeObjectRelease(*(_QWORD *)(a1 + 176));
    return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 200));
  }
  return result;
}

uint64_t initializeWithCopy for SeriesCardCoverStackCoverLayout(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  _OWORD *v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v4 = (_OWORD *)(a1 + 40);
  v5 = (_OWORD *)(a2 + 40);
  if (*(_BYTE *)(a2 + 96))
  {
    v6 = v5[1];
    *v4 = *v5;
    v4[1] = v6;
    v4[2] = v5[2];
    *(_OWORD *)((char *)v4 + 41) = *(_OWORD *)((char *)v5 + 41);
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 64) = v7;
    (**(void (***)(_OWORD *, _OWORD *))(v7 - 8))(v4, v5);
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    *(_BYTE *)(a1 + 96) = 0;
  }
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  v8 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 144) = v8;
  v9 = *(_QWORD *)(a2 + 160);
  swift_bridgeObjectRetain(v8);
  if (v9)
  {
    *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
    *(_QWORD *)(a1 + 160) = v9;
    v10 = *(_QWORD *)(a2 + 176);
    *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
    *(_QWORD *)(a1 + 176) = v10;
    *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
    v11 = *(_QWORD *)(a2 + 192);
    v12 = *(_QWORD *)(a2 + 200);
    *(_QWORD *)(a1 + 192) = v11;
    *(_QWORD *)(a1 + 200) = v12;
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v10);
    swift_bridgeObjectRetain(v12);
  }
  else
  {
    v13 = *(_OWORD *)(a2 + 168);
    *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
    *(_OWORD *)(a1 + 168) = v13;
    *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
    *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  }
  return a1;
}

uint64_t assignWithCopy for SeriesCardCoverStackCoverLayout(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  __int128 *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  __int128 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  if (a1 != a2)
  {
    v4 = (_OWORD *)(a1 + 40);
    v5 = (__int128 *)(a2 + 40);
    sub_C4388(a1 + 40);
    if (*(_BYTE *)(a2 + 96))
    {
      v6 = *v5;
      v7 = *(_OWORD *)(a2 + 56);
      v8 = *(_OWORD *)(a2 + 72);
      *(_OWORD *)(a1 + 81) = *(_OWORD *)(a2 + 81);
      *(_OWORD *)(a1 + 56) = v7;
      *(_OWORD *)(a1 + 72) = v8;
      *v4 = v6;
    }
    else
    {
      v9 = *(_QWORD *)(a2 + 64);
      *(_QWORD *)(a1 + 64) = v9;
      *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
      (**(void (***)(uint64_t, uint64_t))(v9 - 8))(a1 + 40, a2 + 40);
      *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
      *(_BYTE *)(a1 + 96) = 0;
    }
  }
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  v10 = *(_QWORD *)(a2 + 144);
  v11 = *(_QWORD *)(a1 + 144);
  *(_QWORD *)(a1 + 144) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  v12 = (_OWORD *)(a1 + 152);
  v13 = (__int128 *)(a2 + 152);
  v14 = *(_QWORD *)(a1 + 160);
  v15 = *(_QWORD *)(a2 + 160);
  if (v14)
  {
    if (v15)
    {
      *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
      v16 = *(_QWORD *)(a2 + 160);
      *(_QWORD *)(a1 + 160) = v16;
      swift_bridgeObjectRetain(v16);
      swift_bridgeObjectRelease(v14);
      *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
      v17 = *(_QWORD *)(a2 + 176);
      v18 = *(_QWORD *)(a1 + 176);
      *(_QWORD *)(a1 + 176) = v17;
      swift_bridgeObjectRetain(v17);
      swift_bridgeObjectRelease(v18);
      *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
      *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
      v19 = *(_QWORD *)(a2 + 200);
      v20 = *(_QWORD *)(a1 + 200);
      *(_QWORD *)(a1 + 200) = v19;
      swift_bridgeObjectRetain(v19);
      swift_bridgeObjectRelease(v20);
    }
    else
    {
      sub_C5344((_QWORD *)(a1 + 152));
      v25 = *(_OWORD *)(a2 + 168);
      v24 = *(_OWORD *)(a2 + 184);
      v26 = *v13;
      *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
      *(_OWORD *)(a1 + 168) = v25;
      *(_OWORD *)(a1 + 184) = v24;
      *v12 = v26;
    }
  }
  else if (v15)
  {
    *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
    v21 = *(_QWORD *)(a2 + 160);
    *(_QWORD *)(a1 + 160) = v21;
    *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
    v22 = *(_QWORD *)(a2 + 176);
    *(_QWORD *)(a1 + 176) = v22;
    *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
    *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
    v23 = *(_QWORD *)(a2 + 200);
    *(_QWORD *)(a1 + 200) = v23;
    swift_bridgeObjectRetain(v21);
    swift_bridgeObjectRetain(v22);
    swift_bridgeObjectRetain(v23);
  }
  else
  {
    v27 = *v13;
    v28 = *(_OWORD *)(a2 + 168);
    v29 = *(_OWORD *)(a2 + 184);
    *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
    *(_OWORD *)(a1 + 168) = v28;
    *(_OWORD *)(a1 + 184) = v29;
    *v12 = v27;
  }
  return a1;
}

__n128 initializeWithTake for SeriesCardCoverStackCoverLayout(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  __int128 v9;
  __int128 v10;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v2 = *(_OWORD *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  v5 = *(_OWORD *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v7;
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 96) = v6;
  result = *(__n128 *)(a2 + 144);
  v9 = *(_OWORD *)(a2 + 160);
  v10 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 192) = v10;
  *(__n128 *)(a1 + 144) = result;
  *(_OWORD *)(a1 + 160) = v9;
  return result;
}

uint64_t assignWithTake for SeriesCardCoverStackCoverLayout(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  if (a1 != a2)
  {
    sub_C4388(a1 + 40);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 81) = *(_OWORD *)(a2 + 81);
  }
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  v4 = *(_QWORD *)(a2 + 144);
  v5 = *(_QWORD *)(a1 + 144);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a1 + 160);
  if (!v6)
    goto LABEL_7;
  v7 = *(_QWORD *)(a2 + 160);
  if (!v7)
  {
    sub_C5344((_QWORD *)(a1 + 152));
LABEL_7:
    v12 = *(_OWORD *)(a2 + 168);
    *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
    *(_OWORD *)(a1 + 168) = v12;
    *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
    *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
    return a1;
  }
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = v7;
  swift_bridgeObjectRelease(v6);
  v8 = *(_QWORD *)(a2 + 176);
  v9 = *(_QWORD *)(a1 + 176);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 176) = v8;
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  v10 = *(_QWORD *)(a2 + 200);
  v11 = *(_QWORD *)(a1 + 200);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 200) = v10;
  swift_bridgeObjectRelease(v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for SeriesCardCoverStackCoverLayout(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 208))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 144);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SeriesCardCoverStackCoverLayout(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 200) = 0;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 208) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 144) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 208) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SeriesCardCoverStackCoverLayout()
{
  return &type metadata for SeriesCardCoverStackCoverLayout;
}

uint64_t storeEnumTagSinglePayload for SeriesCardCoverStackCoverLayout.Position(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1C66E0 + 4 * byte_1F8505[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1C6714 + 4 * asc_1F8500[v4]))();
}

uint64_t sub_1C6714(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C671C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1C6724);
  return result;
}

uint64_t sub_1C6730(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1C6738);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1C673C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C6744(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SeriesCardCoverStackCoverLayout.Position()
{
  return &type metadata for SeriesCardCoverStackCoverLayout.Position;
}

unint64_t sub_1C6764()
{
  unint64_t result;

  result = qword_26BBD8;
  if (!qword_26BBD8)
  {
    result = swift_getWitnessTable(&unk_1F8604, &type metadata for SeriesCardCoverStackCoverLayout.Position);
    atomic_store(result, (unint64_t *)&qword_26BBD8);
  }
  return result;
}

uint64_t sub_1C67D8()
{
  return sub_7FD8(&qword_26BBE0, &qword_26BBE8, (uint64_t)&protocol conformance descriptor for SIMD2<A>);
}

uint64_t sub_1C6804()
{
  return sub_7FD8(&qword_26BC18, &qword_26BC20, (uint64_t)&protocol conformance descriptor for SIMD4<A>);
}

uint64_t EnvironmentValues.fonts.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v8;

  v3 = type metadata accessor for EnvironmentValues(0);
  __chkstk_darwin(v3);
  v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(_BYTE *, uint64_t))(v6 + 16))(v5, v1);
  return sub_1C6928(v5, a1);
}

uint64_t FontConstants.Environment.dynamicTypeSize.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for FontConstants.Environment(0) + 24);
  v4 = type metadata accessor for DynamicTypeSize(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

double FontConstants.Environment.pixelLength.getter()
{
  uint64_t v0;

  return *(double *)(v0 + *(int *)(type metadata accessor for FontConstants.Environment(0) + 28));
}

uint64_t FontConstants.env.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1C6AA4(v1, a1);
}

uint64_t sub_1C6928@<X0>(_BYTE *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  _BYTE *v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  double v17;
  void (*v18)(_BYTE *, uint64_t);
  _BYTE v20[15];
  uint64_t v21;

  v4 = type metadata accessor for EnvironmentValues(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = &v20[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = type metadata accessor for FontConstants.Environment(0);
  v9 = __chkstk_darwin(v8);
  v11 = &v20[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v9);
  v13 = &v20[-v12];
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v5 + 16))(v7, a1, v4);
  *v11 = EnvironmentValues.isCompact.getter() & 1;
  v14 = sub_2FAA8();
  v15 = EnvironmentValues.subscript.getter(&v21, &type metadata for IsInCardKey, &type metadata for IsInCardKey, v14);
  v11[1] = v21;
  v16 = EnvironmentValues.dynamicTypeSize.getter(v15);
  v17 = EnvironmentValues.pixelLength.getter(v16);
  v18 = *(void (**)(_BYTE *, uint64_t))(v5 + 8);
  v18(v7, v4);
  *(double *)&v11[*(int *)(v8 + 28)] = v17;
  sub_1C83DC((uint64_t)v11, (uint64_t)v13);
  v18(a1, v4);
  return sub_1C83DC((uint64_t)v13, a2);
}

uint64_t type metadata accessor for FontConstants.Environment(uint64_t a1)
{
  return sub_1FE90(a1, qword_26BD60, (uint64_t)&nominal type descriptor for FontConstants.Environment);
}

uint64_t sub_1C6AA4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for FontConstants.Environment(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t FontSpec.font.getter()
{
  _QWORD *v0;

  return swift_retain(*v0);
}

uint64_t FontSpec.font.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_release(*v1);
  *v1 = a1;
  return result;
}

uint64_t FontSpec.init(font:minDynamicTypeSize:maxDynamicTypeSize:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v8 = type metadata accessor for FontSpec(0);
  v9 = (uint64_t)a4 + *(int *)(v8 + 20);
  v10 = type metadata accessor for DynamicTypeSize(0);
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  v11(v9, 1, 1, v10);
  v12 = (uint64_t)a4 + *(int *)(v8 + 24);
  v11(v12, 1, 1, v10);
  *a4 = a1;
  sub_A77A8(a2, v9);
  return sub_A77A8(a3, v12);
}

uint64_t type metadata accessor for FontSpec(uint64_t a1)
{
  return sub_1FE90(a1, qword_26BDF8, (uint64_t)&nominal type descriptor for FontSpec);
}

uint64_t View.fontSpec(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int (*v27)(char *, uint64_t, uint64_t);
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t WitnessTable;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;

  v43 = a4;
  v7 = sub_5440(&qword_25E778);
  v8 = __chkstk_darwin(v7);
  v42 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v41 = (uint64_t)&v38 - v10;
  v11 = sub_5440(&qword_264640);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v12);
  v17 = (char *)&v38 - v16;
  __chkstk_darwin(v15);
  v19 = (char *)&v38 - v18;
  v20 = sub_7EF8(&qword_2600B0);
  v21 = type metadata accessor for ModifiedContent(0, a2, v20);
  v22 = *(_QWORD *)(v21 - 8);
  v39 = v21;
  v40 = v22;
  __chkstk_darwin(v21);
  v24 = (char *)&v38 - v23;
  v25 = a1;
  sub_B3D0(a1, (uint64_t)v19, &qword_264640);
  v26 = type metadata accessor for FontSpec(0);
  v27 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 48);
  if (v27(v19, 1, v26) == 1)
  {
    sub_B414((uint64_t)v19, &qword_264640);
    v28 = 0;
  }
  else
  {
    v28 = *(_QWORD *)v19;
    swift_retain(*(_QWORD *)v19);
    sub_D8820((uint64_t)v19);
  }
  View.font(_:)(v28, a2, a3);
  swift_release(v28);
  sub_B3D0(v25, (uint64_t)v17, &qword_264640);
  v29 = v27(v17, 1, v26);
  v30 = (uint64_t)v42;
  if (v29 == 1)
  {
    sub_B414((uint64_t)v17, &qword_264640);
    v31 = type metadata accessor for DynamicTypeSize(0);
    v32 = v41;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v41, 1, 1, v31);
  }
  else
  {
    v32 = v41;
    sub_B3D0((uint64_t)&v17[*(int *)(v26 + 20)], v41, &qword_25E778);
    sub_D8820((uint64_t)v17);
  }
  sub_B3D0(v25, (uint64_t)v14, &qword_264640);
  if (v27(v14, 1, v26) == 1)
  {
    sub_B414((uint64_t)v14, &qword_264640);
    v33 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56))(v30, 1, 1, v33);
  }
  else
  {
    sub_B3D0((uint64_t)&v14[*(int *)(v26 + 24)], v30, &qword_25E778);
    sub_D8820((uint64_t)v14);
  }
  v34 = sub_1C6F5C();
  v44 = a3;
  v45 = v34;
  v35 = v39;
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v39);
  View.restrictedDynamicTypeSize(min:max:)(v32, v30, v35, WitnessTable);
  sub_B414(v30, &qword_25E778);
  sub_B414(v32, &qword_25E778);
  return (*(uint64_t (**)(char *, uint64_t))(v40 + 8))(v24, v35);
}

unint64_t sub_1C6F5C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2600A8;
  if (!qword_2600A8)
  {
    v1 = sub_7EF8(&qword_2600B0);
    result = swift_getWitnessTable(&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>, v1);
    atomic_store(result, (unint64_t *)&qword_2600A8);
  }
  return result;
}

uint64_t View.fontSpec(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  uint64_t WitnessTable;
  _QWORD v14[2];

  v6 = sub_7EF8(&qword_2600B0);
  v7 = type metadata accessor for ModifiedContent(0, a2, v6);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)v14 - v9;
  View.font(_:)(a1, a2, a3);
  v11 = sub_1C6F5C();
  v14[0] = a3;
  v14[1] = v11;
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v7);
  View.unrestrictedDynamicTypeSize()(v7, WitnessTable);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t *initializeBufferWithCopyOfBuffer for FontConstants(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;

  v4 = type metadata accessor for FontConstants.Environment(0);
  v5 = *(_DWORD *)(*(_QWORD *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v11);
  }
  else
  {
    v6 = v4;
    *(_WORD *)a1 = *(_WORD *)a2;
    v7 = *(int *)(v4 + 24);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
    *(uint64_t *)((char *)a1 + *(int *)(v6 + 28)) = *(uint64_t *)((char *)a2 + *(int *)(v6 + 28));
  }
  return a1;
}

uint64_t destroy for FontConstants(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = a1 + *(int *)(type metadata accessor for FontConstants.Environment(0) + 24);
  v2 = type metadata accessor for DynamicTypeSize(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
}

_WORD *initializeWithCopy for FontConstants(_WORD *a1, _WORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;

  *a1 = *a2;
  v4 = type metadata accessor for FontConstants.Environment(0);
  v5 = *(int *)(v4 + 24);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = type metadata accessor for DynamicTypeSize(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v6, v7, v8);
  *(_QWORD *)((char *)a1 + *(int *)(v4 + 28)) = *(_QWORD *)((char *)a2 + *(int *)(v4 + 28));
  return a1;
}

_BYTE *assignWithCopy for FontConstants(_BYTE *a1, _BYTE *a2)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;

  *a1 = *a2;
  a1[1] = a2[1];
  v4 = type metadata accessor for FontConstants.Environment(0);
  v5 = *(int *)(v4 + 24);
  v6 = &a1[v5];
  v7 = &a2[v5];
  v8 = type metadata accessor for DynamicTypeSize(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v8 - 8) + 24))(v6, v7, v8);
  *(_QWORD *)&a1[*(int *)(v4 + 28)] = *(_QWORD *)&a2[*(int *)(v4 + 28)];
  return a1;
}

_WORD *initializeWithTake for FontConstants(_WORD *a1, _WORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;

  *a1 = *a2;
  v4 = type metadata accessor for FontConstants.Environment(0);
  v5 = *(int *)(v4 + 24);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = type metadata accessor for DynamicTypeSize(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v6, v7, v8);
  *(_QWORD *)((char *)a1 + *(int *)(v4 + 28)) = *(_QWORD *)((char *)a2 + *(int *)(v4 + 28));
  return a1;
}

_BYTE *assignWithTake for FontConstants(_BYTE *a1, _BYTE *a2)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;

  *a1 = *a2;
  a1[1] = a2[1];
  v4 = type metadata accessor for FontConstants.Environment(0);
  v5 = *(int *)(v4 + 24);
  v6 = &a1[v5];
  v7 = &a2[v5];
  v8 = type metadata accessor for DynamicTypeSize(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v8 - 8) + 40))(v6, v7, v8);
  *(_QWORD *)&a1[*(int *)(v4 + 28)] = *(_QWORD *)&a2[*(int *)(v4 + 28)];
  return a1;
}

uint64_t getEnumTagSinglePayload for FontConstants(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1C7398);
}

uint64_t sub_1C7398(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for FontConstants.Environment(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for FontConstants(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1C73E0);
}

uint64_t sub_1C73E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for FontConstants.Environment(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for FontConstants(uint64_t a1)
{
  return sub_1FE90(a1, qword_26BCD0, (uint64_t)&nominal type descriptor for FontConstants);
}

uint64_t sub_1C7434(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  result = type metadata accessor for FontConstants.Environment(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 1, &v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for FontConstants.Environment(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v11);
  }
  else
  {
    *(_WORD *)a1 = *(_WORD *)a2;
    v7 = *(int *)(a3 + 24);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
    *(uint64_t *)((char *)v4 + *(int *)(a3 + 28)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 28));
  }
  return v4;
}

_WORD *initializeWithCopy for FontConstants.Environment(_WORD *a1, _WORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  v6 = *(int *)(a3 + 24);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for DynamicTypeSize(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
  *(_QWORD *)((char *)a1 + *(int *)(a3 + 28)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 28));
  return a1;
}

_BYTE *assignWithCopy for FontConstants.Environment(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;

  *a1 = *a2;
  a1[1] = a2[1];
  v6 = *(int *)(a3 + 24);
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for DynamicTypeSize(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  *(_QWORD *)&a1[*(int *)(a3 + 28)] = *(_QWORD *)&a2[*(int *)(a3 + 28)];
  return a1;
}

_WORD *initializeWithTake for FontConstants.Environment(_WORD *a1, _WORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  v6 = *(int *)(a3 + 24);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for DynamicTypeSize(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  *(_QWORD *)((char *)a1 + *(int *)(a3 + 28)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 28));
  return a1;
}

_BYTE *assignWithTake for FontConstants.Environment(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;

  *a1 = *a2;
  a1[1] = a2[1];
  v6 = *(int *)(a3 + 24);
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for DynamicTypeSize(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  *(_QWORD *)&a1[*(int *)(a3 + 28)] = *(_QWORD *)&a2[*(int *)(a3 + 28)];
  return a1;
}

uint64_t getEnumTagSinglePayload for FontConstants.Environment(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1C773C);
}

uint64_t sub_1C773C(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4;
  BOOL v5;
  int v6;
  uint64_t v10;

  if ((_DWORD)a2 == 254)
  {
    v4 = *a1;
    v5 = v4 >= 2;
    v6 = (v4 + 2147483646) & 0x7FFFFFFF;
    if (v5)
      return (v6 + 1);
    else
      return 0;
  }
  else
  {
    v10 = type metadata accessor for DynamicTypeSize(0);
    return (*(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(&a1[*(int *)(a3 + 24)], a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for FontConstants.Environment(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1C77C4);
}

_BYTE *sub_1C77C4(_BYTE *result, uint64_t a2, int a3, uint64_t a4)
{
  _BYTE *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 254)
  {
    *result = a2 + 1;
  }
  else
  {
    v7 = type metadata accessor for DynamicTypeSize(0);
    return (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 24)], a2, a2, v7);
  }
  return result;
}

uint64_t sub_1C7834(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = &unk_1F86F8;
  v4[1] = &unk_1F86F8;
  result = type metadata accessor for DynamicTypeSize(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(result - 8) + 64;
    v4[3] = (char *)&value witness table for Builtin.Int64 + 64;
    swift_initStructMetadata(a1, 256, 4, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for FontSpec(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(char *, uint64_t, uint64_t, __n128);
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain(v4);
  }
  else
  {
    v7 = a1;
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for DynamicTypeSize(0);
    v12 = *(_QWORD *)(v11 - 8);
    v13 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v12 + 48);
    v14 = swift_retain(v4);
    if (v13(v10, 1, v11, v14))
    {
      v15 = sub_5440(&qword_25E778);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
    v16 = *(int *)(a3 + 24);
    v17 = (char *)v7 + v16;
    v18 = (char *)a2 + v16;
    if (((unsigned int (*)(char *, uint64_t, uint64_t))v13)(v18, 1, v11))
    {
      v19 = sub_5440(&qword_25E778);
      memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v17, v18, v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v17, 0, 1, v11);
    }
  }
  return v7;
}

uint64_t destroy for FontSpec(_QWORD *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int (*v7)(char *, uint64_t, uint64_t);
  char *v8;
  uint64_t result;

  swift_release(*a1);
  v4 = (char *)a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for DynamicTypeSize(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48);
  if (!v7(v4, 1, v5))
    (*(void (**)(char *, uint64_t))(v6 + 8))(v4, v5);
  v8 = (char *)a1 + *(int *)(a2 + 24);
  result = ((uint64_t (*)(char *, uint64_t, uint64_t))v7)(v8, 1, v5);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return result;
}

uint64_t *initializeWithCopy for FontSpec(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(char *, uint64_t, uint64_t, __n128);
  __n128 v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v6 = *a2;
  *a1 = *a2;
  v7 = *(int *)(a3 + 20);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for DynamicTypeSize(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v11 + 48);
  v13 = swift_retain(v6);
  if (v12(v9, 1, v10, v13))
  {
    v14 = sub_5440(&qword_25E778);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  v15 = *(int *)(a3 + 24);
  v16 = (char *)a1 + v15;
  v17 = (char *)a2 + v15;
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v12)(v17, 1, v10))
  {
    v18 = sub_5440(&qword_25E778);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v16, v17, v10);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v16, 0, 1, v10);
  }
  return a1;
}

uint64_t *assignWithCopy for FontSpec(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(char *, uint64_t, uint64_t);
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  int v20;
  int v21;
  uint64_t v22;

  v6 = *a2;
  v7 = *a1;
  *a1 = *a2;
  swift_retain(v6);
  swift_release(v7);
  v8 = *(int *)(a3 + 20);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for DynamicTypeSize(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48);
  v14 = v13(v9, 1, v11);
  v15 = v13(v10, 1, v11);
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v15)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v9, v11);
LABEL_6:
    v16 = sub_5440(&qword_25E778);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 24))(v9, v10, v11);
LABEL_7:
  v17 = *(int *)(a3 + 24);
  v18 = (char *)a1 + v17;
  v19 = (char *)a2 + v17;
  v20 = v13((char *)a1 + v17, 1, v11);
  v21 = v13(v19, 1, v11);
  if (!v20)
  {
    if (!v21)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 24))(v18, v19, v11);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v12 + 8))(v18, v11);
    goto LABEL_12;
  }
  if (v21)
  {
LABEL_12:
    v22 = sub_5440(&qword_25E778);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v18, v19, v11);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v18, 0, 1, v11);
  return a1;
}

_QWORD *initializeWithTake for FontSpec(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int (*v11)(char *, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for DynamicTypeSize(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
  if (v11(v8, 1, v9))
  {
    v12 = sub_5440(&qword_25E778);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  v13 = *(int *)(a3 + 24);
  v14 = (char *)a1 + v13;
  v15 = (char *)a2 + v13;
  if (v11(v15, 1, v9))
  {
    v16 = sub_5440(&qword_25E778);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v14, v15, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v14, 0, 1, v9);
  }
  return a1;
}

uint64_t *assignWithTake for FontSpec(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(char *, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  int v19;
  int v20;
  uint64_t v21;

  v6 = *a1;
  *a1 = *a2;
  swift_release(v6);
  v7 = *(int *)(a3 + 20);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for DynamicTypeSize(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v8, v10);
LABEL_6:
    v15 = sub_5440(&qword_25E778);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v8, v9, v10);
LABEL_7:
  v16 = *(int *)(a3 + 24);
  v17 = (char *)a1 + v16;
  v18 = (char *)a2 + v16;
  v19 = v12((char *)a1 + v16, 1, v10);
  v20 = v12(v18, 1, v10);
  if (!v19)
  {
    if (!v20)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v17, v18, v10);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v11 + 8))(v17, v10);
    goto LABEL_12;
  }
  if (v20)
  {
LABEL_12:
    v21 = sub_5440(&qword_25E778);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v17, v18, v10);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v17, 0, 1, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for FontSpec(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1C8120);
}

uint64_t sub_1C8120(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_5440(&qword_25E778);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 20)], a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for FontSpec(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1C81AC);
}

char *sub_1C81AC(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = sub_5440(&qword_25E778);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

void sub_1C8224(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;

  v4 = (char *)&value witness table for Builtin.NativeObject + 64;
  sub_1C829C(319);
  if (v3 <= 0x3F)
  {
    v5 = *(_QWORD *)(v2 - 8) + 64;
    v6 = v5;
    swift_initStructMetadata(a1, 256, 3, &v4, a1 + 16);
  }
}

void sub_1C829C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_263178)
  {
    v2 = type metadata accessor for DynamicTypeSize(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_263178);
  }
}

uint64_t sub_1C82F0(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *a1;
  v2 = sub_7EF8(&qword_2600B0);
  v3 = type metadata accessor for ModifiedContent(255, v1, v2);
  v4 = type metadata accessor for RestrictedDynamicTypeSizeViewModifier(255);
  v5 = type metadata accessor for ModifiedContent(255, v3, v4);
  sub_1C6F5C();
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v3);
  sub_1C8394();
  return swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v5);
}

unint64_t sub_1C8394()
{
  unint64_t result;
  uint64_t v1;

  result = qword_263108;
  if (!qword_263108)
  {
    v1 = type metadata accessor for RestrictedDynamicTypeSizeViewModifier(255);
    result = swift_getWitnessTable(&unk_1E7268, v1);
    atomic_store(result, (unint64_t *)&qword_263108);
  }
  return result;
}

uint64_t sub_1C83DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for FontConstants.Environment(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t ComicCoverEffect.init(shadowScale:cornerRadius:)@<X0>(double *a1@<X8>, double a2@<D0>, double a3@<D1>)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t result;

  v6 = (_QWORD *)((char *)a1 + *(int *)(type metadata accessor for ComicCoverEffect(0) + 24));
  *v6 = swift_getKeyPath(&unk_1F8790);
  v7 = sub_5440(&qword_25E948);
  result = swift_storeEnumTagMultiPayload(v6, v7, 0);
  *a1 = a2;
  a1[1] = a3;
  return result;
}

uint64_t type metadata accessor for ComicCoverEffect(uint64_t a1)
{
  uint64_t result;

  result = qword_26BEE0;
  if (!qword_26BEE0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ComicCoverEffect);
  return result;
}

uint64_t ComicCoverEffect.body(cover:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t (*v13)(_QWORD);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;

  v3 = v2;
  v6 = sub_5440(&qword_26BE38);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  __chkstk_darwin(v6);
  v9 = type metadata accessor for ComicCoverEffect(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  __chkstk_darwin(v9);
  v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1E428(v3, (uint64_t)v12, v13);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v6);
  v14 = *(unsigned __int8 *)(v10 + 80);
  v15 = (v14 + 16) & ~v14;
  v16 = *(unsigned __int8 *)(v7 + 80);
  v17 = (v11 + v16 + v15) & ~v16;
  v18 = swift_allocObject(&unk_25A8B0, v17 + v8, v14 | v16 | 7);
  sub_1C8690((uint64_t)v12, v18 + v15);
  result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v7 + 32))(v18 + v17, (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  *a2 = sub_1C86D4;
  a2[1] = v18;
  return result;
}

uint64_t sub_1C8618@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  double v7;
  double v8;
  double v9;
  uint64_t v10;
  uint64_t v11;

  v7 = GeometryProxy.size.getter(a1);
  v9 = v8;
  *a4 = _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0();
  a4[1] = v10;
  v11 = sub_5440(&qword_26BF58);
  return sub_1C86D8(a2, a3, (uint64_t)a4 + *(int *)(v11 + 44), v7, v9);
}

uint64_t sub_1C8690(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ComicCoverEffect(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1C86D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>)
{
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;

  v39 = a3;
  v9 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v9);
  v11 = (uint64_t *)((char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = sub_5440(&qword_26BF60);
  __chkstk_darwin(v12);
  v14 = (char *)&v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_5440(&qword_26BF68);
  v16 = __chkstk_darwin(v15);
  v18 = (char *)&v38 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v20 = (char *)&v38 - v19;
  v21 = sub_5440(&qword_26BF70);
  v22 = __chkstk_darwin(v21);
  v24 = (char *)&v38 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = __chkstk_darwin(v22);
  v27 = (uint64_t *)((char *)&v38 - v26);
  *v27 = static Alignment.bottom.getter(v25);
  v27[1] = v28;
  v29 = sub_5440(&qword_26BF78);
  sub_1C89E0(a1, a2, (uint64_t)v27 + *(int *)(v29 + 44), a4, a5);
  sub_1C9524(a2, a1, (uint64_t)v14, a4, a5);
  v30 = *(_QWORD *)(a1 + 8);
  v31 = (char *)v11 + *(int *)(v9 + 20);
  v32 = enum case for RoundedCornerStyle.continuous(_:);
  v33 = type metadata accessor for RoundedCornerStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 104))(v31, v32, v33);
  *v11 = v30;
  v11[1] = v30;
  v34 = (uint64_t)&v18[*(int *)(v15 + 36)];
  sub_1E428((uint64_t)v11, v34, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  *(_WORD *)(v34 + *(int *)(sub_5440(&qword_25F700) + 36)) = 256;
  sub_B3D0((uint64_t)v14, (uint64_t)v18, &qword_26BF60);
  sub_224DC((uint64_t)v11, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  sub_B414((uint64_t)v14, &qword_26BF60);
  sub_167A4((uint64_t)v18, (uint64_t)v20, &qword_26BF68);
  sub_B3D0((uint64_t)v27, (uint64_t)v24, &qword_26BF70);
  sub_B3D0((uint64_t)v20, (uint64_t)v18, &qword_26BF68);
  v35 = v39;
  sub_B3D0((uint64_t)v24, v39, &qword_26BF70);
  v36 = sub_5440(&qword_26BF80);
  sub_B3D0((uint64_t)v18, v35 + *(int *)(v36 + 48), &qword_26BF68);
  sub_B414((uint64_t)v20, &qword_26BF68);
  sub_B414((uint64_t)v27, &qword_26BF70);
  sub_B414((uint64_t)v18, &qword_26BF68);
  return sub_B414((uint64_t)v24, &qword_26BF70);
}

uint64_t sub_1C89E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  double v45;
  double v46;
  double v47;
  double v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  __int128 v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  void (*v59)(char *, uint64_t);
  double v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _OWORD *v68;
  __int128 v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  double v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void (*v89)(char *);
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t (*v93)(char *, uint64_t, uint64_t);
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unsigned int v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  _OWORD v124[3];
  _OWORD v125[3];

  v108 = a2;
  v122 = a3;
  v8 = type metadata accessor for BlendMode(0);
  v120 = *(_QWORD *)(v8 - 8);
  v121 = v8;
  __chkstk_darwin(v8);
  v119 = (char *)&v89 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v106 = sub_5440(&qword_26BFA8);
  __chkstk_darwin(v106);
  v104 = (char *)&v89 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v107 = sub_5440(&qword_26BFB8);
  __chkstk_darwin(v107);
  v105 = (char *)&v89 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v117 = sub_5440(&qword_26BFC0);
  __chkstk_darwin(v117);
  v112 = (uint64_t)&v89 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v115 = sub_5440(&qword_26BFC8);
  __chkstk_darwin(v115);
  v111 = (uint64_t)&v89 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v114 = sub_5440(&qword_26BFD0);
  __chkstk_darwin(v114);
  v110 = (uint64_t)&v89 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v113 = sub_5440(&qword_26BFD8);
  v15 = __chkstk_darwin(v113);
  v118 = (uint64_t)&v89 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v15);
  v109 = (char *)&v89 - v18;
  __chkstk_darwin(v17);
  v116 = (uint64_t)&v89 - v19;
  v102 = type metadata accessor for ColorScheme(0);
  v101 = *(_QWORD *)(v102 - 8);
  v20 = __chkstk_darwin(v102);
  v100 = (char *)&v89 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v99 = (uint64_t)&v89 - v22;
  v23 = type metadata accessor for RoundedRectangle(0);
  v98 = v23;
  __chkstk_darwin(v23);
  v25 = (char *)&v89 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = sub_5440(&qword_260860);
  __chkstk_darwin(v26);
  v28 = (char *)&v89 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = sub_5440(&qword_260868);
  __chkstk_darwin(v29);
  v31 = (char *)&v89 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v90 = sub_5440(&qword_260870);
  __chkstk_darwin(v90);
  v33 = (char *)&v89 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v95 = sub_5440(&qword_260878);
  __chkstk_darwin(v95);
  v92 = (uint64_t)&v89 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v94 = sub_5440(&qword_260880);
  v35 = __chkstk_darwin(v94);
  v103 = (uint64_t)&v89 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = __chkstk_darwin(v35);
  v91 = (uint64_t)&v89 - v38;
  __chkstk_darwin(v37);
  v123 = (uint64_t)&v89 - v39;
  v40 = *(_QWORD *)(a1 + 8);
  v41 = &v25[*(int *)(v23 + 20)];
  v42 = enum case for RoundedCornerStyle.continuous(_:);
  v97 = enum case for RoundedCornerStyle.continuous(_:);
  v96 = type metadata accessor for RoundedCornerStyle(0);
  v93 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v96 - 8) + 104);
  v43 = v93(v41, v42, v96);
  *(_QWORD *)v25 = v40;
  *((_QWORD *)v25 + 1) = v40;
  v44 = static Color.black.getter(v43);
  sub_1E428((uint64_t)v25, (uint64_t)v28, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  *(_QWORD *)&v28[*(int *)(v26 + 52)] = v44;
  *(_WORD *)&v28[*(int *)(v26 + 56)] = 256;
  sub_224DC((uint64_t)v25, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  v45 = *(double *)a1;
  v46 = *(double *)a1 + 0.05;
  v47 = v46 * a4;
  v48 = v46 * a5;
  v49 = _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0();
  _FrameLayout.init(width:height:alignment:)(v124, *(_QWORD *)&v47, 0, *(_QWORD *)&v48, 0, v49, v50);
  sub_B3D0((uint64_t)v28, (uint64_t)v31, &qword_260860);
  v51 = &v31[*(int *)(v29 + 36)];
  v52 = v124[1];
  *(_OWORD *)v51 = v124[0];
  *((_OWORD *)v51 + 1) = v52;
  *((_OWORD *)v51 + 2) = v124[2];
  sub_B414((uint64_t)v28, &qword_260860);
  sub_B3D0((uint64_t)v31, (uint64_t)v33, &qword_260868);
  v53 = &v33[*(int *)(v90 + 36)];
  *(_QWORD *)v53 = 0;
  *((double *)v53 + 1) = (1.0 - v45) * a5 * -0.125;
  sub_B414((uint64_t)v31, &qword_260868);
  type metadata accessor for ComicCoverEffect(0);
  v54 = a1;
  v55 = v99;
  sub_31378(v99);
  LODWORD(v90) = enum case for ColorScheme.dark(_:);
  v56 = v101;
  v89 = *(void (**)(char *))(v101 + 104);
  v57 = v100;
  v58 = v102;
  v89(v100);
  LOBYTE(v47) = static ColorScheme.== infix(_:_:)(v55, v57);
  v59 = *(void (**)(char *, uint64_t))(v56 + 8);
  v59(v57, v58);
  v59((char *)v55, v58);
  if ((LOBYTE(v47) & 1) != 0)
    v60 = 0.9;
  else
    v60 = 0.75;
  v61 = v92;
  sub_B3D0((uint64_t)v33, v92, &qword_260870);
  *(double *)(v61 + *(int *)(v95 + 36)) = v60;
  sub_B414((uint64_t)v33, &qword_260870);
  v62 = v91;
  sub_B3D0(v61, v91, &qword_260878);
  v63 = v62 + *(int *)(v94 + 36);
  *(double *)v63 = a4 * 0.035;
  *(_BYTE *)(v63 + 8) = 0;
  sub_B414(v61, &qword_260878);
  sub_167A4(v62, v123, &qword_260880);
  v64 = _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0();
  _FrameLayout.init(width:height:alignment:)(v125, *(_QWORD *)&a4, 0, *(_QWORD *)&a5, 0, v64, v65);
  v66 = sub_5440(&qword_26BE38);
  v67 = (uint64_t)v104;
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v66 - 8) + 16))(v104, v108, v66);
  v68 = (_OWORD *)(v67 + *(int *)(v106 + 36));
  v69 = v125[1];
  *v68 = v125[0];
  v68[1] = v69;
  v68[2] = v125[2];
  v70 = *(_QWORD *)(v54 + 8);
  v93(&v25[*(int *)(v98 + 20)], v97, v96);
  *(_QWORD *)v25 = v70;
  *((_QWORD *)v25 + 1) = v70;
  v71 = (uint64_t)v105;
  v72 = (uint64_t)&v105[*(int *)(v107 + 36)];
  sub_1E428((uint64_t)v25, v72, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  *(_WORD *)(v72 + *(int *)(sub_5440(&qword_25F700) + 36)) = 256;
  sub_B3D0(v67, v71, &qword_26BFA8);
  sub_224DC((uint64_t)v25, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  sub_B414(v67, &qword_26BFA8);
  sub_31378(v55);
  ((void (*)(char *, _QWORD, uint64_t))v89)(v57, v90, v58);
  LOBYTE(v72) = static ColorScheme.== infix(_:_:)(v55, v57);
  v59(v57, v58);
  v59((char *)v55, v58);
  if ((v72 & 1) != 0)
    v73 = 0.15;
  else
    v73 = 0.5;
  v74 = v112;
  sub_B3D0(v71, v112, &qword_26BFB8);
  *(double *)(v74 + *(int *)(v117 + 36)) = v73;
  sub_B414(v71, &qword_26BFB8);
  v75 = v111;
  sub_B3D0(v74, v111, &qword_26BFC0);
  v76 = v75 + *(int *)(v115 + 36);
  *(double *)v76 = a4 * 0.035;
  *(_BYTE *)(v76 + 8) = 0;
  sub_B414(v74, &qword_26BFC0);
  v77 = v110;
  sub_B3D0(v75, v110, &qword_26BFC8);
  *(_QWORD *)(v77 + *(int *)(v114 + 36)) = 0x3FF199999999999ALL;
  sub_B414(v75, &qword_26BFC8);
  v79 = v119;
  v78 = v120;
  v80 = v121;
  (*(void (**)(char *, _QWORD, uint64_t))(v120 + 104))(v119, enum case for BlendMode.color(_:), v121);
  v81 = (uint64_t)v109;
  (*(void (**)(char *, char *, uint64_t))(v78 + 16))(&v109[*(int *)(v113 + 36)], v79, v80);
  sub_B3D0(v77, v81, &qword_26BFD0);
  (*(void (**)(char *, uint64_t))(v78 + 8))(v79, v80);
  sub_B414(v77, &qword_26BFD0);
  v82 = v116;
  sub_167A4(v81, v116, &qword_26BFD8);
  v83 = v123;
  v84 = v103;
  sub_B3D0(v123, v103, &qword_260880);
  v85 = v118;
  sub_B3D0(v82, v118, &qword_26BFD8);
  v86 = v122;
  sub_B3D0(v84, v122, &qword_260880);
  v87 = sub_5440(&qword_26BFE0);
  sub_B3D0(v85, v86 + *(int *)(v87 + 48), &qword_26BFD8);
  sub_B414(v82, &qword_26BFD8);
  sub_B414(v83, &qword_260880);
  sub_B414(v85, &qword_26BFD8);
  return sub_B414(v84, &qword_260880);
}

uint64_t sub_1C9504(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &opaque type descriptor for <<opaque return type of ComicCoverEffect.body(cover:)>>, 1);
}

uint64_t sub_1C9514(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &opaque type descriptor for <<opaque return type of ComicCoverEffect.shape>>, 1);
}

uint64_t sub_1C9524@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  double v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void (*v69)(char *, uint64_t, uint64_t);
  char *v70;
  __int128 v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  double v79;
  double v80;
  double v81;
  double v82;
  double v83;
  double v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  double v114;
  double v115;
  double v116;
  double v117;
  double v118;
  double v119;
  double v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  double v150;
  double v151;
  double v152;
  double v153;
  double v154;
  double v155;
  double v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  char *v167;
  char *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  char *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  char *v183;
  uint64_t v184;
  uint64_t v185;
  char *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  double v197;
  double v198;
  double v199;
  double v200;
  double v201;
  double v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  char *v214;
  uint64_t v215;
  uint64_t v216;
  void (*v217)(_QWORD, _QWORD);
  uint64_t v218;
  char *v219;
  char *v220;
  char *v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  _OWORD *v225;
  __int128 v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  char *v231;
  __n128 v232;
  uint64_t *v233;
  char *v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  char *v238;
  uint64_t v239;
  uint64_t v240;
  char *v241;
  void (*v242)(char *, uint64_t);
  uint64_t v243;
  float v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  _OWORD *v255;
  __int128 v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  __n128 v260;
  uint64_t *v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  int *v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v280;
  uint64_t v281;
  int v282;
  uint64_t v283;
  __int128 v284;
  __int128 v285;
  uint64_t v286;
  char *v287;
  uint64_t v288;
  __int128 v289;
  uint64_t v290;
  char *v291;
  uint64_t v292;
  char *v293;
  uint64_t *v294;
  char *v295;
  char *v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  char *v303;
  uint64_t v304;
  uint64_t v305;
  char *v306;
  uint64_t v307;
  char *v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t *v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  char *v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  void (*v327)(_QWORD, _QWORD);
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  __int128 v337;
  void (*v338)(char *, char *, uint64_t);
  uint64_t v339;
  char *v340;
  char *v341;
  uint64_t v342;
  double v343;
  void (*v344)(_QWORD);
  uint64_t v345;
  _OWORD v346[3];
  uint64_t v347;
  __int128 v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  char v352;
  uint64_t v353;
  char v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  __int128 v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  unsigned __int8 v362;
  uint64_t v363;
  char v364;
  uint64_t v365;
  uint64_t v366;
  _QWORD v367[5];
  uint64_t v368;
  char v369;
  uint64_t v370;
  char v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  unsigned __int8 v375;
  uint64_t v376;
  char v377;
  uint64_t v378;
  uint64_t v379;
  _QWORD v380[5];
  uint64_t v381;
  char v382;
  uint64_t v383;
  char v384;
  uint64_t v385;
  uint64_t v386;
  _OWORD v387[3];
  _OWORD v388[3];

  v318 = a2;
  v312 = a3;
  v8 = type metadata accessor for ColorScheme(0);
  v304 = *(_QWORD *)(v8 - 8);
  v305 = v8;
  v9 = __chkstk_darwin(v8);
  v303 = (char *)&v280 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v301 = (uint64_t)&v280 - v11;
  v321 = type metadata accessor for ShadowStyle(0);
  v298 = *(_QWORD *)(v321 - 8);
  __chkstk_darwin(v321);
  v295 = (char *)&v280 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v326 = sub_5440(&qword_2607D8);
  v13 = __chkstk_darwin(v326);
  v311 = (uint64_t *)((char *)&v280 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v13);
  v294 = (uint64_t *)((char *)&v280 - v15);
  v300 = sub_5440(&qword_2607E0);
  v16 = __chkstk_darwin(v300);
  v309 = (uint64_t)&v280 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v297 = (uint64_t)&v280 - v18;
  v299 = sub_5440(&qword_2607E8);
  v19 = __chkstk_darwin(v299);
  v308 = (char *)&v280 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v296 = (char *)&v280 - v21;
  v323 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v323);
  v291 = (char *)&v280 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v324 = sub_5440(&qword_2607F0);
  v23 = __chkstk_darwin(v324);
  v302 = (uint64_t)&v280 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  v316 = (uint64_t)&v280 - v25;
  v319 = sub_5440(&qword_2607F8);
  v26 = __chkstk_darwin(v319);
  v306 = (char *)&v280 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  v293 = (char *)&v280 - v28;
  v325 = sub_5440(&qword_260800);
  v29 = __chkstk_darwin(v325);
  v310 = (uint64_t)&v280 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = __chkstk_darwin(v29);
  v333 = (uint64_t)&v280 - v32;
  v33 = __chkstk_darwin(v31);
  v307 = (uint64_t)&v280 - v34;
  v35 = __chkstk_darwin(v33);
  v292 = (uint64_t)&v280 - v36;
  __chkstk_darwin(v35);
  v334 = (uint64_t)&v280 - v37;
  v290 = sub_5440(&qword_26BF88);
  v38 = __chkstk_darwin(v290);
  v329 = (uint64_t)&v280 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v38);
  v336 = (uint64_t)&v280 - v40;
  v288 = sub_5440(&qword_26BF90);
  __chkstk_darwin(v288);
  v287 = (char *)&v280 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  v313 = sub_5440(&qword_26BF98);
  v42 = __chkstk_darwin(v313);
  v328 = (uint64_t)&v280 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v42);
  v335 = (uint64_t)&v280 - v44;
  v45 = type metadata accessor for _BlendModeEffect(0);
  __chkstk_darwin(v45);
  v341 = (char *)&v280 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  v345 = type metadata accessor for BlendMode(0);
  v47 = *(_QWORD *)(v345 - 8);
  __chkstk_darwin(v345);
  v340 = (char *)&v280 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = sub_5440(&qword_260808);
  v314 = v49;
  v50 = __chkstk_darwin(v49);
  v330 = (uint64_t)&v280 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v50);
  v342 = (uint64_t)&v280 - v52;
  v315 = sub_5440(&qword_26BFA0);
  v53 = __chkstk_darwin(v315);
  v320 = (uint64_t)&v280 - ((v54 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = __chkstk_darwin(v53);
  v332 = (uint64_t)&v280 - v56;
  v57 = __chkstk_darwin(v55);
  v339 = (uint64_t)&v280 - v58;
  __chkstk_darwin(v57);
  v331 = (uint64_t)&v280 - v59;
  v60 = sub_5440(&qword_26BFA8);
  v61 = __chkstk_darwin(v60);
  v317 = (uint64_t)&v280 - ((v62 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v61);
  v64 = (char *)&v280 - v63;
  v65 = a5;
  v66 = _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0();
  v343 = a5;
  _FrameLayout.init(width:height:alignment:)(v346, *(_QWORD *)&a4, 0, *(_QWORD *)&a5, 0, v66, v67);
  v68 = sub_5440(&qword_26BE38);
  v69 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v68 - 8) + 16);
  v322 = v64;
  v69(v64, a1, v68);
  v70 = &v64[*(int *)(v60 + 36)];
  v71 = v346[1];
  *(_OWORD *)v70 = v346[0];
  *((_OWORD *)v70 + 1) = v71;
  *((_OWORD *)v70 + 2) = v346[2];
  v327 = (void (*)(_QWORD, _QWORD))sub_5440(&qword_260828);
  v72 = swift_allocObject(v327, 64, 7);
  v289 = xmmword_1E1CE0;
  *(_OWORD *)(v72 + 16) = xmmword_1E1CE0;
  v73 = static Color.black.getter(v72);
  v74 = Gradient.Stop.init(color:location:)(v73, 0.1);
  *(_QWORD *)(v72 + 32) = v74;
  *(_QWORD *)(v72 + 40) = v75;
  v76 = static Color.black.getter(v74);
  v77 = Color.opacity(_:)(0.0);
  swift_release(v76);
  *(_QWORD *)(v72 + 48) = Gradient.Stop.init(color:location:)(v77, 1.0);
  *(_QWORD *)(v72 + 56) = v78;
  v79 = static UnitPoint.bottomLeading.getter();
  v81 = v80;
  v82 = static UnitPoint.topTrailing.getter();
  v84 = v83;
  Gradient.init(stops:)(v72);
  LinearGradient.init(gradient:startPoint:endPoint:)(&v347, v79, v81, v82, v84);
  v85 = v347;
  v337 = v348;
  v86 = v349;
  v87 = v350;
  v88 = _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0();
  _FrameLayout.init(width:height:alignment:)(&v351, 0, 1, *(_QWORD *)&v65, 0, v88, v89);
  *(_QWORD *)&v285 = v351;
  LOBYTE(v72) = v352;
  v90 = v354;
  v283 = v355;
  *(_QWORD *)&v284 = v353;
  v91 = v356;
  v286 = v47;
  v344 = *(void (**)(_QWORD))(v47 + 104);
  v92 = v340;
  v93 = v345;
  ((void (*)(char *, _QWORD, uint64_t))v344)(v340, enum case for BlendMode.plusDarker(_:), v345);
  v338 = *(void (**)(char *, char *, uint64_t))(v47 + 16);
  v94 = (uint64_t)v341;
  v338(v341, v92, v93);
  v95 = v342;
  sub_1E428(v94, v342 + *(int *)(v49 + 36), (uint64_t (*)(_QWORD))&type metadata accessor for _BlendModeEffect);
  *(_QWORD *)v95 = v85;
  *(_OWORD *)(v95 + 8) = v337;
  *(_QWORD *)(v95 + 24) = v86;
  *(_QWORD *)(v95 + 32) = v87;
  *(_QWORD *)(v95 + 40) = v285;
  *(_BYTE *)(v95 + 48) = v72;
  *(_QWORD *)(v95 + 56) = v284;
  *(_BYTE *)(v95 + 64) = v90;
  *(_QWORD *)(v95 + 72) = v283;
  *(_QWORD *)(v95 + 80) = v91;
  *(_QWORD *)(v95 + 88) = 0x3FA999999999999ALL;
  swift_bridgeObjectRetain(v85);
  sub_224DC(v94, (uint64_t (*)(_QWORD))&type metadata accessor for _BlendModeEffect);
  *(_QWORD *)&v337 = *(_QWORD *)(v286 + 8);
  ((void (*)(char *, uint64_t))v337)(v92, v93);
  sub_4C880(&v347);
  v96 = v339;
  sub_B3D0(v95, v339, &qword_260808);
  *(_BYTE *)(v96 + *(int *)(v315 + 36)) = 1;
  sub_B414(v95, &qword_260808);
  sub_167A4(v96, v331, &qword_26BFA0);
  v97 = swift_allocObject(v327, 112, 7);
  v285 = xmmword_1F8780;
  *(_OWORD *)(v97 + 16) = xmmword_1F8780;
  v98 = _s7BooksUI14ColorConstantsV25vibrantPrimaryButtonLabel05SwiftB00C0Vvg_0();
  v99 = Color.opacity(_:)(0.0);
  swift_release(v98);
  *(_QWORD *)(v97 + 32) = Gradient.Stop.init(color:location:)(v99, 0.0);
  *(_QWORD *)(v97 + 40) = v100;
  v101 = _s7BooksUI14ColorConstantsV25vibrantPrimaryButtonLabel05SwiftB00C0Vvg_0();
  v102 = Color.opacity(_:)(0.89);
  swift_release(v101);
  *(_QWORD *)(v97 + 48) = Gradient.Stop.init(color:location:)(v102, 0.19);
  *(_QWORD *)(v97 + 56) = v103;
  v104 = _s7BooksUI14ColorConstantsV25vibrantPrimaryButtonLabel05SwiftB00C0Vvg_0();
  v105 = Color.opacity(_:)(1.0);
  swift_release(v104);
  *(_QWORD *)(v97 + 64) = Gradient.Stop.init(color:location:)(v105, 0.24);
  *(_QWORD *)(v97 + 72) = v106;
  v107 = _s7BooksUI14ColorConstantsV25vibrantPrimaryButtonLabel05SwiftB00C0Vvg_0();
  v108 = Color.opacity(_:)(0.93);
  swift_release(v107);
  *(_QWORD *)(v97 + 80) = Gradient.Stop.init(color:location:)(v108, 0.33);
  *(_QWORD *)(v97 + 88) = v109;
  v110 = _s7BooksUI14ColorConstantsV25vibrantPrimaryButtonLabel05SwiftB00C0Vvg_0();
  v111 = Color.opacity(_:)(0.0);
  swift_release(v110);
  *(_QWORD *)(v97 + 96) = Gradient.Stop.init(color:location:)(v111, 1.0);
  *(_QWORD *)(v97 + 104) = v112;
  v113 = static UnitPoint.leading.getter();
  v115 = v114;
  v117 = v116;
  v118 = static UnitPoint.trailing.getter(v113);
  v120 = v119;
  Gradient.init(stops:)(v97);
  LinearGradient.init(gradient:startPoint:endPoint:)(&v357, v115, v117, v118, v120);
  v121 = v357;
  v284 = v358;
  v122 = v359;
  v123 = v360;
  v124 = _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0();
  _FrameLayout.init(width:height:alignment:)(&v361, 0, 1, *(_QWORD *)&v343, 0, v124, v125);
  v283 = v361;
  v282 = v362;
  v281 = v363;
  LOBYTE(v111) = v364;
  v126 = v365;
  v127 = v366;
  LODWORD(v286) = enum case for BlendMode.softLight(_:);
  v128 = v340;
  v129 = v345;
  v344(v340);
  v130 = (uint64_t)v341;
  v338(v341, v128, v129);
  v131 = (uint64_t)v287;
  sub_1E428(v130, (uint64_t)&v287[*(int *)(v288 + 36)], (uint64_t (*)(_QWORD))&type metadata accessor for _BlendModeEffect);
  *(_QWORD *)v131 = v121;
  *(_OWORD *)(v131 + 8) = v284;
  *(_QWORD *)(v131 + 24) = v122;
  *(_QWORD *)(v131 + 32) = v123;
  *(_QWORD *)(v131 + 40) = v283;
  *(_BYTE *)(v131 + 48) = v282;
  *(_QWORD *)(v131 + 56) = v281;
  *(_BYTE *)(v131 + 64) = v111;
  *(_QWORD *)(v131 + 72) = v126;
  *(_QWORD *)(v131 + 80) = v127;
  swift_bridgeObjectRetain(v121);
  sub_224DC(v130, (uint64_t (*)(_QWORD))&type metadata accessor for _BlendModeEffect);
  ((void (*)(char *, uint64_t))v337)(v128, v129);
  sub_4C880(&v357);
  v132 = v328;
  sub_B3D0(v131, v328, &qword_26BF90);
  *(_BYTE *)(v132 + *(int *)(v313 + 36)) = 1;
  sub_B414(v131, &qword_26BF90);
  sub_167A4(v132, v335, &qword_26BF98);
  v133 = swift_allocObject(v327, 112, 7);
  *(_OWORD *)(v133 + 16) = v285;
  v134 = _s7BooksUI14ColorConstantsV25vibrantPrimaryButtonLabel05SwiftB00C0Vvg_0();
  v135 = Color.opacity(_:)(0.0);
  swift_release(v134);
  *(_QWORD *)(v133 + 32) = Gradient.Stop.init(color:location:)(v135, 0.0);
  *(_QWORD *)(v133 + 40) = v136;
  v137 = _s7BooksUI14ColorConstantsV25vibrantPrimaryButtonLabel05SwiftB00C0Vvg_0();
  v138 = Color.opacity(_:)(0.89);
  swift_release(v137);
  *(_QWORD *)(v133 + 48) = Gradient.Stop.init(color:location:)(v138, 0.13);
  *(_QWORD *)(v133 + 56) = v139;
  v140 = _s7BooksUI14ColorConstantsV25vibrantPrimaryButtonLabel05SwiftB00C0Vvg_0();
  v141 = Color.opacity(_:)(1.0);
  swift_release(v140);
  *(_QWORD *)(v133 + 64) = Gradient.Stop.init(color:location:)(v141, 0.17);
  *(_QWORD *)(v133 + 72) = v142;
  v143 = _s7BooksUI14ColorConstantsV25vibrantPrimaryButtonLabel05SwiftB00C0Vvg_0();
  v144 = Color.opacity(_:)(0.93);
  swift_release(v143);
  *(_QWORD *)(v133 + 80) = Gradient.Stop.init(color:location:)(v144, 0.3);
  *(_QWORD *)(v133 + 88) = v145;
  v146 = _s7BooksUI14ColorConstantsV25vibrantPrimaryButtonLabel05SwiftB00C0Vvg_0();
  v147 = Color.opacity(_:)(0.0);
  swift_release(v146);
  *(_QWORD *)(v133 + 96) = Gradient.Stop.init(color:location:)(v147, 1.0);
  *(_QWORD *)(v133 + 104) = v148;
  v149 = static UnitPoint.leading.getter();
  v151 = v150;
  v153 = v152;
  v154 = static UnitPoint.trailing.getter(v149);
  v156 = v155;
  Gradient.init(stops:)(v133);
  LinearGradient.init(gradient:startPoint:endPoint:)(v367, v151, v153, v154, v156);
  v288 = v367[0];
  v157 = v367[1];
  v158 = v367[2];
  v159 = v367[3];
  v160 = v367[4];
  v161 = _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0();
  _FrameLayout.init(width:height:alignment:)(&v368, 0, 1, *(_QWORD *)&v343, 0, v161, v162);
  v163 = v368;
  LOBYTE(v146) = v369;
  v164 = v370;
  LOBYTE(v147) = v371;
  v165 = v372;
  v166 = v373;
  LODWORD(v313) = enum case for BlendMode.screen(_:);
  v167 = v128;
  v168 = v128;
  v169 = v345;
  v344(v168);
  v170 = (uint64_t)v341;
  v338(v341, v167, v169);
  v171 = v342;
  sub_1E428(v170, v342 + *(int *)(v314 + 36), (uint64_t (*)(_QWORD))&type metadata accessor for _BlendModeEffect);
  v172 = v288;
  *(_QWORD *)v171 = v288;
  *(_QWORD *)(v171 + 8) = v157;
  *(_QWORD *)(v171 + 16) = v158;
  *(_QWORD *)(v171 + 24) = v159;
  *(_QWORD *)(v171 + 32) = v160;
  *(_QWORD *)(v171 + 40) = v163;
  *(_BYTE *)(v171 + 48) = v146;
  *(_QWORD *)(v171 + 56) = v164;
  *(_BYTE *)(v171 + 64) = v147;
  *(_QWORD *)(v171 + 72) = v165;
  *(_QWORD *)(v171 + 80) = v166;
  *(_QWORD *)(v171 + 88) = 0x3FD0000000000000;
  v173 = v171;
  swift_bridgeObjectRetain(v172);
  sub_224DC(v170, (uint64_t (*)(_QWORD))&type metadata accessor for _BlendModeEffect);
  v174 = v340;
  v175 = v345;
  ((void (*)(char *, uint64_t))v337)(v340, v345);
  sub_4C880(v367);
  v176 = v339;
  sub_B3D0(v173, v339, &qword_260808);
  *(_BYTE *)(v176 + *(int *)(v315 + 36)) = 1;
  sub_B414(v173, &qword_260808);
  sub_167A4(v176, v332, &qword_26BFA0);
  v177 = _s7BooksUI14ColorConstantsV25vibrantPrimaryButtonLabel05SwiftB00C0Vvg_0();
  v178 = _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0();
  _FrameLayout.init(width:height:alignment:)(&v374, 0, 1, *(_QWORD *)&v343, 0, v178, v179);
  v315 = v374;
  LODWORD(v288) = v375;
  v180 = v376;
  LOBYTE(v147) = v377;
  v181 = v378;
  v182 = v379;
  v183 = v174;
  ((void (*)(char *, _QWORD, uint64_t))v344)(v174, v313, v175);
  v184 = (uint64_t)v341;
  v338(v341, v183, v175);
  v185 = v329;
  sub_1E428(v184, v329 + *(int *)(v290 + 36), (uint64_t (*)(_QWORD))&type metadata accessor for _BlendModeEffect);
  *(_QWORD *)v185 = v177;
  *(_BYTE *)(v185 + 8) = 0;
  *(_BYTE *)(v185 + 9) = 1;
  *(_QWORD *)(v185 + 16) = v315;
  *(_BYTE *)(v185 + 24) = v288;
  *(_QWORD *)(v185 + 32) = v180;
  *(_BYTE *)(v185 + 40) = v147;
  *(_QWORD *)(v185 + 48) = v181;
  *(_QWORD *)(v185 + 56) = v182;
  *(double *)(v185 + 64) = a4 * 0.2;
  *(_BYTE *)(v185 + 72) = 0;
  *(_QWORD *)(v185 + 80) = 0x3FC3333333333333;
  swift_retain(v177);
  sub_224DC(v184, (uint64_t (*)(_QWORD))&type metadata accessor for _BlendModeEffect);
  v186 = v340;
  v187 = v345;
  ((void (*)(char *, uint64_t))v337)(v340, v345);
  swift_release(v177);
  sub_167A4(v185, v336, &qword_26BF88);
  v188 = swift_allocObject(v327, 64, 7);
  *(_OWORD *)(v188 + 16) = v289;
  v189 = _s7BooksUI14ColorConstantsV25vibrantPrimaryButtonLabel05SwiftB00C0Vvg_0();
  v190 = Color.opacity(_:)(1.0);
  swift_release(v189);
  v191 = Gradient.Stop.init(color:location:)(v190, 0.0);
  *(_QWORD *)(v188 + 32) = v191;
  *(_QWORD *)(v188 + 40) = v192;
  v193 = static Color.black.getter(v191);
  v194 = Color.opacity(_:)(0.5);
  swift_release(v193);
  v195 = Gradient.Stop.init(color:location:)(v194, 1.0);
  *(_QWORD *)(v188 + 48) = v195;
  *(_QWORD *)(v188 + 56) = v196;
  v197 = static UnitPoint.top.getter(v195);
  v199 = v198;
  v200 = static UnitPoint.bottom.getter();
  v202 = v201;
  Gradient.init(stops:)(v188);
  LinearGradient.init(gradient:startPoint:endPoint:)(v380, v197, v199, v200, v202);
  v327 = (void (*)(_QWORD, _QWORD))v380[0];
  v203 = v380[1];
  v204 = v380[2];
  v205 = v380[3];
  v206 = v380[4];
  v207 = _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0();
  _FrameLayout.init(width:height:alignment:)(&v381, 0, 1, *(_QWORD *)&v343, 0, v207, v208);
  v209 = v381;
  LOBYTE(v193) = v382;
  v210 = v383;
  LOBYTE(v194) = v384;
  v211 = v385;
  v212 = v386;
  ((void (*)(char *, _QWORD, uint64_t))v344)(v186, v286, v187);
  v213 = (uint64_t)v341;
  v214 = v186;
  v215 = v187;
  v338(v341, v214, v187);
  v216 = v342;
  sub_1E428(v213, v342 + *(int *)(v314 + 36), (uint64_t (*)(_QWORD))&type metadata accessor for _BlendModeEffect);
  v217 = v327;
  *(_QWORD *)v216 = v327;
  *(_QWORD *)(v216 + 8) = v203;
  *(_QWORD *)(v216 + 16) = v204;
  *(_QWORD *)(v216 + 24) = v205;
  *(_QWORD *)(v216 + 32) = v206;
  *(_QWORD *)(v216 + 40) = v209;
  *(_BYTE *)(v216 + 48) = v193;
  *(_QWORD *)(v216 + 56) = v210;
  *(_BYTE *)(v216 + 64) = v194;
  *(_QWORD *)(v216 + 72) = v211;
  *(_QWORD *)(v216 + 80) = v212;
  *(_QWORD *)(v216 + 88) = 0x3FD999999999999ALL;
  swift_bridgeObjectRetain(v217);
  sub_224DC(v213, (uint64_t (*)(_QWORD))&type metadata accessor for _BlendModeEffect);
  ((void (*)(char *, uint64_t))v337)(v340, v215);
  sub_4C880(v380);
  sub_167A4(v216, v330, &qword_260808);
  v218 = *(_QWORD *)(v318 + 8);
  v219 = v291;
  v220 = &v291[*(int *)(v323 + 20)];
  v221 = (char *)enum case for RoundedCornerStyle.continuous(_:);
  LODWORD(v341) = enum case for RoundedCornerStyle.continuous(_:);
  v340 = (char *)type metadata accessor for RoundedCornerStyle(0);
  v338 = *(void (**)(char *, char *, uint64_t))(*((_QWORD *)v340 - 1) + 104);
  v338(v220, v221, (uint64_t)v340);
  *(_QWORD *)v219 = v218;
  *((_QWORD *)v219 + 1) = v218;
  v222 = _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0();
  _FrameLayout.init(width:height:alignment:)(v387, 0, 1, *(_QWORD *)&v343, 0, v222, v223);
  v224 = v316;
  sub_1E428((uint64_t)v219, v316, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  v225 = (_OWORD *)(v224 + *(int *)(v324 + 36));
  v226 = v387[1];
  *v225 = v387[0];
  v225[1] = v226;
  v225[2] = v387[2];
  v227 = sub_224DC((uint64_t)v219, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  v228 = static Color.black.getter(v227);
  v229 = _s7BooksUI14ColorConstantsV25vibrantPrimaryButtonLabel05SwiftB00C0Vvg_0();
  v230 = Color.opacity(_:)(0.8);
  swift_release(v229);
  v231 = v295;
  static ShadowStyle.inner(color:radius:x:y:)(v230, a4 * 0.005, a4 * 0.0025, a4 * 0.00375);
  v232 = swift_release(v230);
  v233 = v294;
  v234 = (char *)v294 + *(int *)(v326 + 36);
  v235 = v298;
  *(_QWORD *)&v337 = *(_QWORD *)(v298 + 16);
  v236 = v321;
  ((void (*)(char *, char *, uint64_t, __n128))v337)(v234, v231, v321, v232);
  *v233 = v228;
  v327 = *(void (**)(_QWORD, _QWORD))(v235 + 8);
  v327(v231, v236);
  type metadata accessor for ComicCoverEffect(0);
  v237 = v301;
  sub_31378(v301);
  v238 = v303;
  v239 = v304;
  v240 = v305;
  (*(void (**)(char *, _QWORD, uint64_t))(v304 + 104))(v303, enum case for ColorScheme.dark(_:), v305);
  v241 = v238;
  LOBYTE(v238) = static ColorScheme.== infix(_:_:)(v237, v238);
  v242 = *(void (**)(char *, uint64_t))(v239 + 8);
  v242(v241, v240);
  v242((char *)v237, v240);
  v243 = v297;
  sub_B3D0((uint64_t)v233, v297, &qword_2607D8);
  v244 = 0.15;
  if ((v238 & 1) == 0)
    v244 = 0.5;
  v245 = v300;
  *(float *)(v243 + *(int *)(v300 + 36)) = v244;
  sub_B414((uint64_t)v233, &qword_2607D8);
  v246 = v299;
  v247 = (uint64_t)v296;
  ((void (*)(char *, _QWORD, uint64_t))v344)(&v296[*(int *)(v299 + 36)], v313, v345);
  sub_167A4(v243, v247, &qword_2607E0);
  v248 = (uint64_t)v293;
  sub_B3D0(v247, (uint64_t)&v293[*(int *)(v319 + 36)], &qword_2607E8);
  v249 = v316;
  sub_B3D0(v316, v248, &qword_2607F0);
  sub_B414(v247, &qword_2607E8);
  sub_B414(v249, &qword_2607F0);
  v250 = v292;
  sub_B3D0(v248, v292, &qword_2607F8);
  *(_BYTE *)(v250 + *(int *)(v325 + 36)) = 1;
  sub_B414(v248, &qword_2607F8);
  sub_167A4(v250, v334, &qword_260800);
  v251 = *(_QWORD *)(v318 + 8);
  v338(&v219[*(int *)(v323 + 20)], (char *)v341, (uint64_t)v340);
  *(_QWORD *)v219 = v251;
  *((_QWORD *)v219 + 1) = v251;
  v252 = _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0();
  _FrameLayout.init(width:height:alignment:)(v388, 0, 1, *(_QWORD *)&v343, 0, v252, v253);
  v254 = v302;
  sub_1E428((uint64_t)v219, v302, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  v255 = (_OWORD *)(v254 + *(int *)(v324 + 36));
  v256 = v388[1];
  *v255 = v388[0];
  v255[1] = v256;
  v255[2] = v388[2];
  sub_224DC((uint64_t)v219, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  v257 = _s7BooksUI14ColorConstantsV25vibrantPrimaryButtonLabel05SwiftB00C0Vvg_0();
  v258 = static Color.black.getter(v257);
  v259 = Color.opacity(_:)(0.8);
  swift_release(v258);
  static ShadowStyle.inner(color:radius:x:y:)(v259, a4 * 0.005, a4 * -0.00125, a4 * -0.0025);
  v260 = swift_release(v259);
  v261 = v311;
  v262 = v321;
  ((void (*)(char *, char *, uint64_t, __n128))v337)((char *)v311 + *(int *)(v326 + 36), v231, v321, v260);
  *v261 = v257;
  v327(v231, v262);
  v263 = v309;
  sub_B3D0((uint64_t)v261, v309, &qword_2607D8);
  *(_DWORD *)(v263 + *(int *)(v245 + 36)) = 1048576000;
  sub_B414((uint64_t)v261, &qword_2607D8);
  v264 = (uint64_t)v308;
  ((void (*)(char *, _QWORD, uint64_t))v344)(&v308[*(int *)(v246 + 36)], enum case for BlendMode.darken(_:), v345);
  sub_167A4(v263, v264, &qword_2607E0);
  v265 = (uint64_t)v306;
  sub_B3D0(v264, (uint64_t)&v306[*(int *)(v319 + 36)], &qword_2607E8);
  sub_B3D0(v254, v265, &qword_2607F0);
  sub_B414(v264, &qword_2607E8);
  sub_B414(v254, &qword_2607F0);
  v266 = v333;
  sub_B3D0(v265, v333, &qword_2607F8);
  *(_BYTE *)(v266 + *(int *)(v325 + 36)) = 1;
  sub_B414(v265, &qword_2607F8);
  v267 = v307;
  sub_167A4(v266, v307, &qword_260800);
  v268 = v317;
  sub_B3D0((uint64_t)v322, v317, &qword_26BFA8);
  v269 = v339;
  sub_B3D0(v331, v339, &qword_26BFA0);
  v270 = v328;
  sub_B3D0(v335, v328, &qword_26BF98);
  v271 = v320;
  sub_B3D0(v332, v320, &qword_26BFA0);
  v272 = v329;
  sub_B3D0(v336, v329, &qword_26BF88);
  sub_B3D0(v330, v342, &qword_260808);
  sub_B3D0(v334, v333, &qword_260800);
  v273 = v310;
  sub_B3D0(v267, v310, &qword_260800);
  v274 = v268;
  v275 = v312;
  sub_B3D0(v274, v312, &qword_26BFA8);
  v276 = (int *)sub_5440(&qword_26BFB0);
  sub_B3D0(v269, v275 + v276[12], &qword_26BFA0);
  sub_B3D0(v270, v275 + v276[16], &qword_26BF98);
  sub_B3D0(v271, v275 + v276[20], &qword_26BFA0);
  sub_B3D0(v272, v275 + v276[24], &qword_26BF88);
  v277 = v342;
  sub_B3D0(v342, v275 + v276[28], &qword_260808);
  v278 = v333;
  sub_B3D0(v333, v275 + v276[32], &qword_260800);
  sub_B3D0(v273, v275 + v276[36], &qword_260800);
  sub_B414(v267, &qword_260800);
  sub_B414(v334, &qword_260800);
  sub_B414(v330, &qword_260808);
  sub_B414(v336, &qword_26BF88);
  sub_B414(v332, &qword_26BFA0);
  sub_B414(v335, &qword_26BF98);
  sub_B414(v331, &qword_26BFA0);
  sub_B414((uint64_t)v322, &qword_26BFA8);
  sub_B414(v273, &qword_260800);
  sub_B414(v278, &qword_260800);
  sub_B414(v277, &qword_260808);
  sub_B414(v329, &qword_26BF88);
  sub_B414(v320, &qword_26BFA0);
  sub_B414(v328, &qword_26BF98);
  sub_B414(v339, &qword_26BFA0);
  return sub_B414(v317, &qword_26BFA8);
}

uint64_t sub_1CAED4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;

  v5 = v3;
  v8 = sub_5440(&qword_26BE38);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  v11 = __chkstk_darwin(v8);
  v12 = *(_QWORD *)(a2 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  __chkstk_darwin(v11);
  v14 = (char *)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1E428(v5, (uint64_t)v14, type metadata accessor for ComicCoverEffect);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v8);
  v15 = *(unsigned __int8 *)(v12 + 80);
  v16 = (v15 + 16) & ~v15;
  v17 = *(unsigned __int8 *)(v9 + 80);
  v18 = (v13 + v16 + v17) & ~v17;
  v19 = swift_allocObject(&unk_25A8F8, v18 + v10, v15 | v17 | 7);
  sub_1C8690((uint64_t)v14, v19 + v16);
  result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v9 + 32))(v19 + v18, (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
  *a3 = sub_1C86D4;
  a3[1] = v19;
  return result;
}

uint64_t sub_1CB014(uint64_t a1)
{
  uint64_t result;

  result = sub_6FD0(&qword_26BE80, type metadata accessor for ComicCoverEffect, (uint64_t)&protocol conformance descriptor for ComicCoverEffect);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t getEnumTagSinglePayload for ComicCoverEffect(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1CB05C);
}

uint64_t sub_1CB05C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a1 + *(int *)(a3 + 24);
  v5 = sub_5440(&qword_25EAE8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, a2, v5);
}

uint64_t storeEnumTagSinglePayload for ComicCoverEffect(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1CB0AC);
}

uint64_t sub_1CB0AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = a1 + *(int *)(a4 + 24);
  v6 = sub_5440(&qword_25EAE8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, a2, a2, v6);
}

uint64_t sub_1CB0F4()
{
  return sub_7FD8(&qword_26BF20, &qword_26BF28, (uint64_t)&protocol conformance descriptor for GeometryReader<A>);
}

ValueMetadata *type metadata accessor for GlowShape()
{
  return &type metadata for GlowShape;
}

uint64_t sub_1CB130()
{
  return sub_7FD8(&qword_26BF30, &qword_26BF38, (uint64_t)&protocol conformance descriptor for _ShapeView<A, B>);
}

double sub_1CB15C@<D0>(uint64_t a1@<X8>, CGFloat a2@<D0>, CGFloat a3@<D1>, CGFloat a4@<D2>, CGFloat a5@<D3>)
{
  double result;
  __int128 v7;
  _OWORD v8[2];
  char v9;

  sub_1CB30C((uint64_t)v8, a2, a3, a4, a5);
  result = *(double *)v8;
  v7 = v8[1];
  *(_OWORD *)a1 = v8[0];
  *(_OWORD *)(a1 + 16) = v7;
  *(_BYTE *)(a1 + 32) = v9;
  return result;
}

uint64_t sub_1CB1A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1CB480();
  return static Shape._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_1CB1F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1CB480();
  return static Shape._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_1CB244(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1CB480();
  return Shape.body.getter(a1, v2);
}

unint64_t sub_1CB280()
{
  unint64_t result;

  result = qword_26BF40;
  if (!qword_26BF40)
  {
    result = swift_getWitnessTable(&unk_1F888C, &type metadata for GlowShape);
    atomic_store(result, (unint64_t *)&qword_26BF40);
  }
  return result;
}

unint64_t sub_1CB2C8()
{
  unint64_t result;

  result = qword_26BF48;
  if (!qword_26BF48)
  {
    result = swift_getWitnessTable(&unk_1F883C, &type metadata for GlowShape);
    atomic_store(result, (unint64_t *)&qword_26BF48);
  }
  return result;
}

double sub_1CB30C@<D0>(uint64_t a1@<X8>, CGFloat a2@<D0>, CGFloat a3@<D1>, CGFloat a4@<D2>, CGFloat a5@<D3>)
{
  double MinX;
  double MinY;
  double v12;
  double v13;
  double v14;
  CGFloat Height;
  double v16;
  CGFloat v17;
  char v18;
  double result;
  __int128 v20;
  _OWORD v21[2];
  char v22;
  CGRect v23;
  CGRect v24;
  CGRect v25;
  CGRect v26;
  CGRect v27;
  CGRect v28;
  CGRect v29;
  CGRect v30;

  Path.init()(v21);
  v23.origin.x = a2;
  v23.origin.y = a3;
  v23.size.width = a4;
  v23.size.height = a5;
  MinX = CGRectGetMinX(v23);
  v24.origin.x = a2;
  v24.origin.y = a3;
  v24.size.width = a4;
  v24.size.height = a5;
  MinY = CGRectGetMinY(v24);
  Path.move(to:)(MinX, MinY);
  v25.origin.x = a2;
  v25.origin.y = a3;
  v25.size.width = a4;
  v25.size.height = a5;
  v12 = CGRectGetWidth(v25) * 0.45;
  v26.origin.x = a2;
  v26.origin.y = a3;
  v26.size.width = a4;
  v26.size.height = a5;
  v13 = CGRectGetMinY(v26);
  Path.addLine(to:)(v12, v13);
  v27.origin.x = a2;
  v27.origin.y = a3;
  v27.size.width = a4;
  v27.size.height = a5;
  v14 = CGRectGetWidth(v27) * 0.19;
  v28.origin.x = a2;
  v28.origin.y = a3;
  v28.size.width = a4;
  v28.size.height = a5;
  Height = CGRectGetHeight(v28);
  Path.addLine(to:)(v14, Height * 0.62);
  v29.origin.x = a2;
  v29.origin.y = a3;
  v29.size.width = a4;
  v29.size.height = a5;
  v16 = CGRectGetMinX(v29);
  v30.origin.x = a2;
  v30.origin.y = a3;
  v30.size.width = a4;
  v30.size.height = a5;
  v17 = CGRectGetHeight(v30);
  Path.addLine(to:)(v16, v17 * 0.2);
  v18 = v22;
  result = *(double *)v21;
  v20 = v21[1];
  *(_OWORD *)a1 = v21[0];
  *(_OWORD *)(a1 + 16) = v20;
  *(_BYTE *)(a1 + 32) = v18;
  return result;
}

unint64_t sub_1CB480()
{
  unint64_t result;

  result = qword_26BF50;
  if (!qword_26BF50)
  {
    result = swift_getWitnessTable(&unk_1F88DC, &type metadata for GlowShape);
    atomic_store(result, (unint64_t *)&qword_26BF50);
  }
  return result;
}

uint64_t sub_1CB4C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = type metadata accessor for ComicCoverEffect(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = sub_5440(&qword_26BE38);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(v7 + 64);
  v10 = (_QWORD *)(v0 + *(int *)(v1 + 24) + v4);
  v11 = sub_5440(&qword_25E948);
  if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
  {
    v12 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v10, v12);
  }
  else
  {
    v13 = swift_release(*v10);
  }
  v14 = v3 | v8 | 7;
  v15 = (v4 + v5 + v8) & ~v8;
  v16 = v15 + v9;
  (*(void (**)(uint64_t, uint64_t, __n128))(v7 + 8))(v0 + v15, v6, v13);
  return swift_deallocObject(v0, v16, v14);
}

uint64_t sub_1CB5C4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  v5 = *(_QWORD *)(type metadata accessor for ComicCoverEffect(0) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = v6 + *(_QWORD *)(v5 + 64);
  v8 = *(unsigned __int8 *)(*(_QWORD *)(sub_5440(&qword_26BE38) - 8) + 80);
  return sub_1C8618(a1, v2 + v6, v2 + ((v7 + v8) & ~v8), a2);
}

uint64_t FontConstants.ListItem.genericMetadata.getter()
{
  return sub_1CBB44((uint64_t (*)(uint64_t))&static Font.footnote.getter);
}

uint64_t FontConstants.SheetHeader.title.getter()
{
  uint64_t v0;
  uint64_t v1;

  v0 = static Font.title3.getter();
  v1 = Font.bold()();
  swift_release(v0);
  return v1;
}

uint64_t FontConstants.SheetHeader.subtitle.getter()
{
  return sub_1CBDC0((unsigned int *)&enum case for Font.TextStyle.subheadline(_:), (double (*)(uint64_t))&static Font.Weight.medium.getter);
}

uint64_t FontConstants.Navigation.smallTitle.getter()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v0 = sub_5440(&qword_25FE08);
  __chkstk_darwin(v0);
  v2 = (char *)&v14 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for Font.TextStyle(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v6, enum case for Font.TextStyle.subheadline(_:), v3);
  if ((_s7BooksUI16FallBackFontSpecV03usecdE0SbyFZ_0() & 1) != 0)
  {
    v7 = type metadata accessor for Font.Design(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v2, 1, 1, v7);
  }
  else
  {
    v8 = enum case for Font.Design.serif (_:);
    v9 = type metadata accessor for Font.Design(0);
    v10 = *(_QWORD *)(v9 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 104))(v2, v8, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v2, 0, 1, v9);
  }
  v11 = static Font.system(_:design:weight:)(v6, v2, 0, 1);
  sub_109194((uint64_t)v2);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  v12 = Font.bold()(v11);
  swift_release(v11);
  return v12;
}

uint64_t FontConstants.Navigation.title.getter()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v0 = sub_5440(&qword_25FE08);
  __chkstk_darwin(v0);
  v2 = (char *)&v13 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for Font.TextStyle(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v6, enum case for Font.TextStyle.headline(_:), v3);
  if ((_s7BooksUI16FallBackFontSpecV03usecdE0SbyFZ_0() & 1) != 0)
  {
    v7 = type metadata accessor for Font.Design(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v2, 1, 1, v7);
  }
  else
  {
    v8 = enum case for Font.Design.serif (_:);
    v9 = type metadata accessor for Font.Design(0);
    v10 = *(_QWORD *)(v9 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 104))(v2, v8, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v2, 0, 1, v9);
  }
  v11 = static Font.system(_:design:weight:)(v6, v2, 0, 1);
  sub_109194((uint64_t)v2);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return v11;
}

uint64_t FontConstants.Navigation.subtitle.getter()
{
  return sub_1CBDC0((unsigned int *)&enum case for Font.TextStyle.caption2(_:), (double (*)(uint64_t))&static Font.Weight.medium.getter);
}

uint64_t FontConstants.ListItem.preheader.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v18;

  v0 = type metadata accessor for Font.Leading(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v18 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_5440(&qword_25FE08);
  __chkstk_darwin(v4);
  v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Font.TextStyle(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v10, enum case for Font.TextStyle.caption2(_:), v7);
  v11 = type metadata accessor for Font.Design(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v6, 1, 1, v11);
  v12 = static Font.system(_:design:weight:)(v10, v6, 0, 1);
  sub_109194((uint64_t)v6);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  v13 = Font.bold()(v12);
  v14 = swift_release(v12);
  (*(void (**)(char *, _QWORD, uint64_t, __n128))(v1 + 104))(v3, enum case for Font.Leading.tight(_:), v0, v14);
  v15 = Font.leading(_:)(v3, v13);
  v16 = swift_release(v13);
  (*(void (**)(char *, uint64_t, __n128))(v1 + 8))(v3, v0, v16);
  return v15;
}

uint64_t FontConstants.ListItem.editionsDescriptor.getter()
{
  return sub_1CBB44((uint64_t (*)(uint64_t))&static Font.caption2.getter);
}

uint64_t sub_1CBB44(uint64_t (*a1)(uint64_t))
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v2 = type metadata accessor for Font.Leading(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1(v4);
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v6, enum case for Font.Leading.tight(_:), v2);
  v8 = Font.leading(_:)(v6, v7);
  swift_release(v7);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  return v8;
}

uint64_t FontConstants.Navigation.symbol.getter()
{
  return sub_1CBDC0((unsigned int *)&enum case for Font.TextStyle.callout(_:), (double (*)(uint64_t))&static Font.Weight.semibold.getter);
}

uint64_t _s7BooksUI13FontConstantsV6ButtonV05smallE5Title05SwiftB00C0Vvg_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v18;

  v0 = type metadata accessor for Font.Leading(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v18 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_5440(&qword_25FE08);
  __chkstk_darwin(v4);
  v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Font.TextStyle(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v10, enum case for Font.TextStyle.subheadline(_:), v7);
  v11 = type metadata accessor for Font.Design(0);
  v12 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v6, 1, 1, v11);
  v13 = static Font.Weight.semibold.getter(v12);
  v14 = static Font.system(_:design:weight:)(v10, v6, *(_QWORD *)&v13, 0);
  sub_109194((uint64_t)v6);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for Font.Leading.tight(_:), v0);
  v15 = Font.leading(_:)(v3, v14);
  v16 = swift_release(v14);
  (*(void (**)(char *, uint64_t, __n128))(v1 + 8))(v3, v0, v16);
  return v15;
}

uint64_t FontConstants.ListItem.symbol.getter()
{
  return sub_1CBDC0((unsigned int *)&enum case for Font.TextStyle.body(_:), (double (*)(uint64_t))&static Font.Weight.semibold.getter);
}

uint64_t sub_1CBDC0(unsigned int *a1, double (*a2)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  uint64_t v16;

  v4 = sub_5440(&qword_25FE08);
  __chkstk_darwin(v4);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Font.TextStyle(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v10, *a1, v7);
  v11 = type metadata accessor for Font.Design(0);
  v12 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v6, 1, 1, v11);
  v13 = a2(v12);
  v14 = static Font.system(_:design:weight:)(v10, v6, *(_QWORD *)&v13, 0);
  sub_109194((uint64_t)v6);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  return v14;
}

uint64_t FontConstants.ListItem.finePrint.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  double v21;
  double v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __n128 v30;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  double v35;

  v1 = v0;
  v2 = type metadata accessor for Font.Leading(0);
  v33 = *(_QWORD *)(v2 - 8);
  v34 = v2;
  __chkstk_darwin(v2);
  v32 = (char *)&v32 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_5440(&qword_25FE08);
  __chkstk_darwin(v4);
  v6 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for FloatingPointRoundingRule(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for FontConstants.Environment(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for Font.TextStyle(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD, uint64_t))(v15 + 104))(v17, enum case for Font.TextStyle.caption2(_:), v14);
  sub_1C6AA4(v1, (uint64_t)v13);
  v18 = (uint64_t)&v13[*(int *)(v11 + 24)];
  v19 = sub_173CC((uint64_t)v17, v18);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  v20 = type metadata accessor for DynamicTypeSize(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(v18, v20);
  v21 = v19 * 8.0;
  v22 = *(double *)(v1 + *(int *)(v11 + 28));
  (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v10, enum case for FloatingPointRoundingRule.toNearestOrAwayFromZero(_:), v7);
  v35 = v21;
  sub_13603C((uint64_t)v10, v22);
  v23 = v35;
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  v24 = type metadata accessor for Font.Design(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v6, 1, 1, v24);
  v25 = static Font.system(size:weight:design:)(0, 1, v6, v23);
  sub_109194((uint64_t)v6);
  v26 = v32;
  v27 = v33;
  v28 = v34;
  (*(void (**)(char *, _QWORD, uint64_t))(v33 + 104))(v32, enum case for Font.Leading.tight(_:), v34);
  v29 = Font.leading(_:)(v26, v25);
  v30 = swift_release(v25);
  (*(void (**)(char *, uint64_t, __n128))(v27 + 8))(v26, v28, v30);
  return v29;
}

uint64_t _s6ButtonVwet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1CC1B4);
}

uint64_t _s6ButtonVwst(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1CC1C4);
}

uint64_t type metadata accessor for FontConstants.Button(uint64_t a1)
{
  return sub_1FE90(a1, qword_26C040, (uint64_t)&nominal type descriptor for FontConstants.Button);
}

uint64_t _s8ListItemVwet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1CC1EC);
}

uint64_t _s8ListItemVwst(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1CC1FC);
}

uint64_t type metadata accessor for FontConstants.ListItem(uint64_t a1)
{
  return sub_1FE90(a1, qword_26C0D0, (uint64_t)&nominal type descriptor for FontConstants.ListItem);
}

uint64_t _s10NavigationVwet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1CC220);
}

uint64_t _s10NavigationVwst(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1CC230);
}

uint64_t type metadata accessor for FontConstants.Navigation(uint64_t a1)
{
  return sub_1FE90(a1, qword_26C160, (uint64_t)&nominal type descriptor for FontConstants.Navigation);
}

uint64_t _s11SheetHeaderVwet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1CC254);
}

uint64_t sub_1CC258(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for FontConstants.Environment(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t _s11SheetHeaderVwst(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1CC2A0);
}

uint64_t sub_1CC2A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for FontConstants.Environment(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for FontConstants.SheetHeader(uint64_t a1)
{
  return sub_1FE90(a1, qword_26C1F0, (uint64_t)&nominal type descriptor for FontConstants.SheetHeader);
}

uint64_t EnvironmentValues.isInVibrantContext.getter()
{
  return sub_1CD16C((uint64_t (*)(void))sub_2CBE0, (uint64_t)&type metadata for IsInVibrantContextKey);
}

uint64_t EnvironmentValues.isInVibrantContext.setter(char a1)
{
  return sub_1CD204(a1, (uint64_t (*)(void))sub_2CBE0, (uint64_t)&type metadata for IsInVibrantContextKey);
}

uint64_t EnvironmentValues.isCompact.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t, uint64_t);
  int v19;
  uint64_t *v20;
  char v21;
  unint64_t v22;
  void (*v23)(char *, uint64_t);
  uint64_t v25;

  v0 = type metadata accessor for UserInterfaceSizeClass(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v25 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_5440(&qword_25F308);
  __chkstk_darwin(v4);
  v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_5440(&qword_25F1F8);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v8);
  v13 = (char *)&v25 - v12;
  v14 = __chkstk_darwin(v11);
  v16 = (char *)&v25 - v15;
  EnvironmentValues.horizontalSizeClass.getter(v14);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v13, enum case for UserInterfaceSizeClass.compact(_:), v0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v1 + 56))(v13, 0, 1, v0);
  v17 = (uint64_t)&v6[*(int *)(v4 + 48)];
  sub_B3D0((uint64_t)v16, (uint64_t)v6, &qword_25F1F8);
  sub_B3D0((uint64_t)v13, v17, &qword_25F1F8);
  v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 48);
  if (v18((uint64_t)v6, 1, v0) == 1)
  {
    sub_B414((uint64_t)v13, &qword_25F1F8);
    sub_B414((uint64_t)v16, &qword_25F1F8);
    v19 = v18(v17, 1, v0);
    if (v19 == 1)
      v20 = &qword_25F1F8;
    else
      v20 = &qword_25F308;
    if (v19 == 1)
      v21 = -1;
    else
      v21 = 0;
  }
  else
  {
    sub_B3D0((uint64_t)v6, (uint64_t)v10, &qword_25F1F8);
    if (v18(v17, 1, v0) == 1)
    {
      sub_B414((uint64_t)v13, &qword_25F1F8);
      sub_B414((uint64_t)v16, &qword_25F1F8);
      (*(void (**)(char *, uint64_t))(v1 + 8))(v10, v0);
      v21 = 0;
      v20 = &qword_25F308;
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v1 + 32))(v3, v17, v0);
      v22 = sub_1CC5F4();
      v21 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v3, v0, v22);
      v23 = *(void (**)(char *, uint64_t))(v1 + 8);
      v23(v3, v0);
      v20 = &qword_25F1F8;
      sub_B414((uint64_t)v13, &qword_25F1F8);
      sub_B414((uint64_t)v16, &qword_25F1F8);
      v23(v10, v0);
    }
  }
  sub_B414((uint64_t)v6, v20);
  return v21 & 1;
}

unint64_t sub_1CC5F4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25F460;
  if (!qword_25F460)
  {
    v1 = type metadata accessor for UserInterfaceSizeClass(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for UserInterfaceSizeClass, v1);
    atomic_store(result, (unint64_t *)&qword_25F460);
  }
  return result;
}

uint64_t EnvironmentValues.isInCard.getter()
{
  return sub_1CD16C((uint64_t (*)(void))sub_2FAA8, (uint64_t)&type metadata for IsInCardKey);
}

double sub_1CC650()
{
  double result;

  qword_26C248 = 0;
  result = 0.0;
  xmmword_26C228 = 0u;
  unk_26C238 = 0u;
  return result;
}

uint64_t sub_1CC668@<X0>(uint64_t a1@<X8>)
{
  if (qword_25DD58 != -1)
    swift_once(&qword_25DD58, sub_1CC650);
  return sub_B3D0((uint64_t)&xmmword_26C228, a1, &qword_25E6D0);
}

void sub_1CC6C4(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 2;
}

uint64_t sub_1CC6D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8;

  v8 = sub_1CDCBC();
  return static EnvironmentKey<>._valuesEqual(_:_:)(a1, a2, a3, a4, v8);
}

uint64_t sub_1CC724()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for ContextAssetInfoAnalytics(0);
  sub_73A0(v0, qword_26C250);
  v1 = sub_7120(v0, (uint64_t)qword_26C250);
  v2 = type metadata accessor for OdpSuggestionType(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
}

uint64_t sub_1CC788@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_25DD60 != -1)
    swift_once(&qword_25DD60, sub_1CC724);
  v2 = type metadata accessor for ContextAssetInfoAnalytics(0);
  v3 = sub_7120(v2, (uint64_t)qword_26C250);
  return sub_1CD498(v3, a1);
}

_QWORD *EnvironmentValues.convertRectFromGlobalHandler.getter@<X0>(_QWORD *a1@<X8>)
{
  unint64_t v2;

  v2 = sub_1CC818();
  return EnvironmentValues.subscript.getter(a1, &type metadata for ConvertRectFromGlobalHandlerKey, &type metadata for ConvertRectFromGlobalHandlerKey, v2);
}

unint64_t sub_1CC818()
{
  unint64_t result;

  result = qword_26C268;
  if (!qword_26C268)
  {
    result = swift_getWitnessTable(&unk_1F8CD8, &type metadata for ConvertRectFromGlobalHandlerKey);
    atomic_store(result, (unint64_t *)&qword_26C268);
  }
  return result;
}

_QWORD *sub_1CC85C@<X0>(_QWORD *a1@<X8>)
{
  unint64_t v2;

  v2 = sub_1CC818();
  return EnvironmentValues.subscript.getter(a1, &type metadata for ConvertRectFromGlobalHandlerKey, &type metadata for ConvertRectFromGlobalHandlerKey, v2);
}

uint64_t sub_1CC898(uint64_t a1)
{
  unint64_t v1;
  _BYTE v3[40];
  _BYTE v4[40];

  sub_B3D0(a1, (uint64_t)v4, &qword_25E6D0);
  sub_B3D0((uint64_t)v4, (uint64_t)v3, &qword_25E6D0);
  v1 = sub_1CC818();
  EnvironmentValues.subscript.setter(v3, &type metadata for ConvertRectFromGlobalHandlerKey, &type metadata for ConvertRectFromGlobalHandlerKey, v1);
  return sub_B414((uint64_t)v4, &qword_25E6D0);
}

uint64_t EnvironmentValues.convertRectFromGlobalHandler.setter(uint64_t a1)
{
  unint64_t v2;
  _BYTE v4[40];

  sub_B3D0(a1, (uint64_t)v4, &qword_25E6D0);
  v2 = sub_1CC818();
  EnvironmentValues.subscript.setter(v4, &type metadata for ConvertRectFromGlobalHandlerKey, &type metadata for ConvertRectFromGlobalHandlerKey, v2);
  return sub_B414(a1, &qword_25E6D0);
}

void (*EnvironmentValues.convertRectFromGlobalHandler.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  unint64_t v4;

  v3 = malloc(0x88uLL);
  *a1 = v3;
  v3[15] = v1;
  v4 = sub_1CC818();
  v3[16] = v4;
  EnvironmentValues.subscript.getter(v3, &type metadata for ConvertRectFromGlobalHandlerKey, &type metadata for ConvertRectFromGlobalHandlerKey, v4);
  return sub_1CC9D4;
}

void sub_1CC9D4(uint64_t *a1, char a2)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = (char *)*a1;
  v3 = *a1 + 40;
  v4 = *(_QWORD *)(*a1 + 128);
  if ((a2 & 1) != 0)
  {
    sub_B3D0(*a1, v3, &qword_25E6D0);
    sub_B3D0(v3, (uint64_t)(v2 + 80), &qword_25E6D0);
    EnvironmentValues.subscript.setter(v2 + 80, &type metadata for ConvertRectFromGlobalHandlerKey, &type metadata for ConvertRectFromGlobalHandlerKey, v4);
    sub_B414(v3, &qword_25E6D0);
  }
  else
  {
    sub_B3D0(*a1, v3, &qword_25E6D0);
    EnvironmentValues.subscript.setter(v3, &type metadata for ConvertRectFromGlobalHandlerKey, &type metadata for ConvertRectFromGlobalHandlerKey, v4);
  }
  sub_B414((uint64_t)v2, &qword_25E6D0);
  free(v2);
}

uint64_t EnvironmentValues.isInCard.setter(char a1)
{
  return sub_1CD204(a1, (uint64_t (*)(void))sub_2FAA8, (uint64_t)&type metadata for IsInCardKey);
}

uint64_t (*EnvironmentValues.isInCard.modify(uint64_t a1))(uint64_t a1, uint64_t a2)
{
  uint64_t v1;
  _QWORD *v3;
  unint64_t v4;

  v3 = (_QWORD *)(a1 + 17);
  *(_QWORD *)a1 = v1;
  v4 = sub_2FAA8();
  *(_QWORD *)(a1 + 8) = v4;
  EnvironmentValues.subscript.getter(v3, &type metadata for IsInCardKey, &type metadata for IsInCardKey, v4);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a1 + 17);
  return sub_1CCB20;
}

uint64_t sub_1CCB20(uint64_t a1, uint64_t a2)
{
  return sub_1CD2B0(a1, a2, (uint64_t)&type metadata for IsInCardKey);
}

uint64_t EnvironmentValues.isInList.getter()
{
  return sub_1CD16C((uint64_t (*)(void))sub_1CCB40, (uint64_t)&type metadata for IsInListKey);
}

unint64_t sub_1CCB40()
{
  unint64_t result;

  result = qword_26C270;
  if (!qword_26C270)
  {
    result = swift_getWitnessTable(&unk_1F8CA0, &type metadata for IsInListKey);
    atomic_store(result, (unint64_t *)&qword_26C270);
  }
  return result;
}

_QWORD *sub_1CCB84@<X0>(_BYTE *a1@<X8>)
{
  unint64_t v2;
  _QWORD *result;
  uint64_t v4;

  v2 = sub_1CCB40();
  result = EnvironmentValues.subscript.getter(&v4, &type metadata for IsInListKey, &type metadata for IsInListKey, v2);
  *a1 = v4;
  return result;
}

uint64_t sub_1CCBD0(char *a1)
{
  unint64_t v1;
  char v3;

  v3 = *a1;
  v1 = sub_1CCB40();
  return EnvironmentValues.subscript.setter(&v3, &type metadata for IsInListKey, &type metadata for IsInListKey, v1);
}

uint64_t EnvironmentValues.isInList.setter(char a1)
{
  return sub_1CD204(a1, (uint64_t (*)(void))sub_1CCB40, (uint64_t)&type metadata for IsInListKey);
}

uint64_t (*EnvironmentValues.isInList.modify(uint64_t a1))(uint64_t a1, uint64_t a2)
{
  uint64_t v1;
  _QWORD *v3;
  unint64_t v4;

  v3 = (_QWORD *)(a1 + 17);
  *(_QWORD *)a1 = v1;
  v4 = sub_1CCB40();
  *(_QWORD *)(a1 + 8) = v4;
  EnvironmentValues.subscript.getter(v3, &type metadata for IsInListKey, &type metadata for IsInListKey, v4);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a1 + 17);
  return sub_1CCC8C;
}

uint64_t sub_1CCC8C(uint64_t a1, uint64_t a2)
{
  return sub_1CD2B0(a1, a2, (uint64_t)&type metadata for IsInListKey);
}

uint64_t EnvironmentValues.isInModal.getter()
{
  return sub_1CD16C((uint64_t (*)(void))sub_1CCCAC, (uint64_t)&type metadata for IsInModalKey);
}

unint64_t sub_1CCCAC()
{
  unint64_t result;

  result = qword_26C278;
  if (!qword_26C278)
  {
    result = swift_getWitnessTable(&unk_1F8C68, &type metadata for IsInModalKey);
    atomic_store(result, (unint64_t *)&qword_26C278);
  }
  return result;
}

uint64_t EnvironmentValues.isInModal.setter(char a1)
{
  return sub_1CD204(a1, (uint64_t (*)(void))sub_1CCCAC, (uint64_t)&type metadata for IsInModalKey);
}

uint64_t (*EnvironmentValues.isInModal.modify(uint64_t a1))(uint64_t a1, uint64_t a2)
{
  uint64_t v1;
  _QWORD *v3;
  unint64_t v4;

  v3 = (_QWORD *)(a1 + 17);
  *(_QWORD *)a1 = v1;
  v4 = sub_1CCCAC();
  *(_QWORD *)(a1 + 8) = v4;
  EnvironmentValues.subscript.getter(v3, &type metadata for IsInModalKey, &type metadata for IsInModalKey, v4);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a1 + 17);
  return sub_1CCD64;
}

uint64_t sub_1CCD64(uint64_t a1, uint64_t a2)
{
  return sub_1CD2B0(a1, a2, (uint64_t)&type metadata for IsInModalKey);
}

uint64_t EnvironmentValues.isPendingData.getter()
{
  return sub_1CD16C((uint64_t (*)(void))sub_35C68, (uint64_t)&type metadata for IsPendingData);
}

uint64_t EnvironmentValues.isPendingData.setter(char a1)
{
  return sub_1CD204(a1, (uint64_t (*)(void))sub_35C68, (uint64_t)&type metadata for IsPendingData);
}

uint64_t (*EnvironmentValues.isPendingData.modify(uint64_t a1))(uint64_t a1, uint64_t a2)
{
  uint64_t v1;
  _QWORD *v3;
  unint64_t v4;

  v3 = (_QWORD *)(a1 + 17);
  *(_QWORD *)a1 = v1;
  v4 = sub_35C68();
  *(_QWORD *)(a1 + 8) = v4;
  EnvironmentValues.subscript.getter(v3, &type metadata for IsPendingData, &type metadata for IsPendingData, v4);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a1 + 17);
  return sub_1CCDF8;
}

uint64_t sub_1CCDF8(uint64_t a1, uint64_t a2)
{
  return sub_1CD2B0(a1, a2, (uint64_t)&type metadata for IsPendingData);
}

uint64_t EnvironmentValues.isReachable.getter()
{
  return sub_1CD16C((uint64_t (*)(void))sub_C50C, (uint64_t)&type metadata for IsReachableKey);
}

uint64_t EnvironmentValues.isReachable.setter(char a1)
{
  return sub_1CD204(a1, (uint64_t (*)(void))sub_C50C, (uint64_t)&type metadata for IsReachableKey);
}

uint64_t (*EnvironmentValues.isReachable.modify(uint64_t a1))(uint64_t a1, uint64_t a2)
{
  uint64_t v1;
  _QWORD *v3;
  unint64_t v4;

  v3 = (_QWORD *)(a1 + 17);
  *(_QWORD *)a1 = v1;
  v4 = sub_C50C();
  *(_QWORD *)(a1 + 8) = v4;
  EnvironmentValues.subscript.getter(v3, &type metadata for IsReachableKey, &type metadata for IsReachableKey, v4);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a1 + 17);
  return sub_1CCE8C;
}

uint64_t sub_1CCE8C(uint64_t a1, uint64_t a2)
{
  return sub_1CD2B0(a1, a2, (uint64_t)&type metadata for IsReachableKey);
}

uint64_t EnvironmentValues.secondaryBlendMode.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1CD684((unsigned int *)&enum case for BlendMode.multiply(_:), (unsigned int *)&enum case for BlendMode.screen(_:), a1);
}

_QWORD *EnvironmentValues.shelfBackgroundKind.getter@<X0>(_QWORD *a1@<X8>)
{
  unint64_t v2;

  v2 = sub_198D5C();
  return EnvironmentValues.subscript.getter(a1, &type metadata for ShelfBackgroundKindKey, &type metadata for ShelfBackgroundKindKey, v2);
}

uint64_t EnvironmentValues.shelfBackgroundKind.setter(uint64_t *a1)
{
  char v1;
  unint64_t v2;
  uint64_t v4;
  char v5;

  v1 = *((_BYTE *)a1 + 8);
  v4 = *a1;
  v5 = v1;
  v2 = sub_198D5C();
  return EnvironmentValues.subscript.setter(&v4, &type metadata for ShelfBackgroundKindKey, &type metadata for ShelfBackgroundKindKey, v2);
}

void (*EnvironmentValues.shelfBackgroundKind.modify(_QWORD *a1))(unint64_t **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  unint64_t v4;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[4] = v1;
  v4 = sub_198D5C();
  v3[5] = v4;
  EnvironmentValues.subscript.getter(v3, &type metadata for ShelfBackgroundKindKey, &type metadata for ShelfBackgroundKindKey, v4);
  return sub_1CCF88;
}

void sub_1CCF88(unint64_t **a1, char a2)
{
  unint64_t *v3;
  unint64_t v4;
  char v5;
  unint64_t v6;

  v3 = *a1;
  v4 = **a1;
  v3[2] = v4;
  v5 = *((_BYTE *)v3 + 8);
  v6 = v3[5];
  *((_BYTE *)v3 + 24) = v5;
  if ((a2 & 1) != 0)
  {
    sub_1825FC(v4, v5);
    EnvironmentValues.subscript.setter(v3 + 2, &type metadata for ShelfBackgroundKindKey, &type metadata for ShelfBackgroundKindKey, v6);
    sub_183354(*v3, *((_BYTE *)v3 + 8));
  }
  else
  {
    EnvironmentValues.subscript.setter(v3 + 2, &type metadata for ShelfBackgroundKindKey, &type metadata for ShelfBackgroundKindKey, v6);
  }
  free(v3);
}

uint64_t (*EnvironmentValues.isInVibrantContext.modify(uint64_t a1))(uint64_t a1, uint64_t a2)
{
  uint64_t v1;
  _QWORD *v3;
  unint64_t v4;

  v3 = (_QWORD *)(a1 + 17);
  *(_QWORD *)a1 = v1;
  v4 = sub_2CBE0();
  *(_QWORD *)(a1 + 8) = v4;
  EnvironmentValues.subscript.getter(v3, &type metadata for IsInVibrantContextKey, &type metadata for IsInVibrantContextKey, v4);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a1 + 17);
  return sub_1CD074;
}

uint64_t sub_1CD074(uint64_t a1, uint64_t a2)
{
  return sub_1CD2B0(a1, a2, (uint64_t)&type metadata for IsInVibrantContextKey);
}

uint64_t EnvironmentValues.isAnODPRecommendation.getter()
{
  return sub_1CD16C((uint64_t (*)(void))sub_1CD094, (uint64_t)&type metadata for IsAnODPRecommendation);
}

unint64_t sub_1CD094()
{
  unint64_t result;

  result = qword_26C280;
  if (!qword_26C280)
  {
    result = swift_getWitnessTable(&unk_1F8B88, &type metadata for IsAnODPRecommendation);
    atomic_store(result, (unint64_t *)&qword_26C280);
  }
  return result;
}

uint64_t EnvironmentValues.isAnODPRecommendation.setter(char a1)
{
  return sub_1CD204(a1, (uint64_t (*)(void))sub_1CD094, (uint64_t)&type metadata for IsAnODPRecommendation);
}

uint64_t (*EnvironmentValues.isAnODPRecommendation.modify(uint64_t a1))(uint64_t a1, uint64_t a2)
{
  uint64_t v1;
  _QWORD *v3;
  unint64_t v4;

  v3 = (_QWORD *)(a1 + 17);
  *(_QWORD *)a1 = v1;
  v4 = sub_1CD094();
  *(_QWORD *)(a1 + 8) = v4;
  EnvironmentValues.subscript.getter(v3, &type metadata for IsAnODPRecommendation, &type metadata for IsAnODPRecommendation, v4);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a1 + 17);
  return sub_1CD14C;
}

uint64_t sub_1CD14C(uint64_t a1, uint64_t a2)
{
  return sub_1CD2B0(a1, a2, (uint64_t)&type metadata for IsAnODPRecommendation);
}

uint64_t EnvironmentValues.supportsSuggestionContextMenu.getter()
{
  return sub_1CD16C((uint64_t (*)(void))sub_1CD1AC, (uint64_t)&type metadata for SupportsSuggestionContextMenu);
}

uint64_t sub_1CD16C(uint64_t (*a1)(void), uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;

  v3 = a1();
  EnvironmentValues.subscript.getter(&v5, a2, a2, v3);
  return v5;
}

unint64_t sub_1CD1AC()
{
  unint64_t result;

  result = qword_26C288;
  if (!qword_26C288)
  {
    result = swift_getWitnessTable(&unk_1F8B50, &type metadata for SupportsSuggestionContextMenu);
    atomic_store(result, (unint64_t *)&qword_26C288);
  }
  return result;
}

uint64_t EnvironmentValues.supportsSuggestionContextMenu.setter(char a1)
{
  return sub_1CD204(a1, (uint64_t (*)(void))sub_1CD1AC, (uint64_t)&type metadata for SupportsSuggestionContextMenu);
}

uint64_t sub_1CD204(char a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t v4;
  char v6;

  v6 = a1;
  v4 = a2();
  return EnvironmentValues.subscript.setter(&v6, a3, a3, v4);
}

uint64_t (*EnvironmentValues.supportsSuggestionContextMenu.modify(uint64_t a1))(uint64_t a1, uint64_t a2)
{
  uint64_t v1;
  _QWORD *v3;
  unint64_t v4;

  v3 = (_QWORD *)(a1 + 17);
  *(_QWORD *)a1 = v1;
  v4 = sub_1CD1AC();
  *(_QWORD *)(a1 + 8) = v4;
  EnvironmentValues.subscript.getter(v3, &type metadata for SupportsSuggestionContextMenu, &type metadata for SupportsSuggestionContextMenu, v4);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a1 + 17);
  return sub_1CD2A4;
}

uint64_t sub_1CD2A4(uint64_t a1, uint64_t a2)
{
  return sub_1CD2B0(a1, a2, (uint64_t)&type metadata for SupportsSuggestionContextMenu);
}

uint64_t sub_1CD2B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a1 + 16);
  return EnvironmentValues.subscript.setter(a1 + 17, a3, a3, v3);
}

_QWORD *EnvironmentValues.analyticsAttributes.getter@<X0>(_QWORD *a1@<X8>)
{
  unint64_t v2;

  v2 = sub_1CD310();
  return EnvironmentValues.subscript.getter(a1, &type metadata for AnalyticsAttributes, &type metadata for AnalyticsAttributes, v2);
}

unint64_t sub_1CD310()
{
  unint64_t result;

  result = qword_26C290;
  if (!qword_26C290)
  {
    result = swift_getWitnessTable(&unk_1F8B18, &type metadata for AnalyticsAttributes);
    atomic_store(result, (unint64_t *)&qword_26C290);
  }
  return result;
}

uint64_t sub_1CD354(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  uint64_t v10;

  v2 = type metadata accessor for ContextAssetInfoAnalytics(0);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v7 = (char *)&v10 - v6;
  sub_1CD498(a1, (uint64_t)&v10 - v6);
  sub_1CD498((uint64_t)v7, (uint64_t)v5);
  v8 = sub_1CD310();
  EnvironmentValues.subscript.setter(v5, &type metadata for AnalyticsAttributes, &type metadata for AnalyticsAttributes, v8);
  return sub_1CD4DC((uint64_t)v7);
}

uint64_t EnvironmentValues.analyticsAttributes.setter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  unint64_t v5;
  uint64_t v7;

  v2 = type metadata accessor for ContextAssetInfoAnalytics(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1CD498(a1, (uint64_t)v4);
  v5 = sub_1CD310();
  EnvironmentValues.subscript.setter(v4, &type metadata for AnalyticsAttributes, &type metadata for AnalyticsAttributes, v5);
  return sub_1CD4DC(a1);
}

uint64_t sub_1CD498(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ContextAssetInfoAnalytics(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1CD4DC(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ContextAssetInfoAnalytics(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void (*EnvironmentValues.analyticsAttributes.modify(_QWORD *a1))(uint64_t **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  size_t v4;
  _QWORD *v5;
  unint64_t v6;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for ContextAssetInfoAnalytics(0) - 8) + 64);
  v3[1] = malloc(v4);
  v3[2] = malloc(v4);
  v5 = malloc(v4);
  v3[3] = v5;
  v6 = sub_1CD310();
  v3[4] = v6;
  EnvironmentValues.subscript.getter(v5, &type metadata for AnalyticsAttributes, &type metadata for AnalyticsAttributes, v6);
  return sub_1CD5B4;
}

void sub_1CD5B4(uint64_t **a1, char a2)
{
  uint64_t *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;

  v3 = *a1;
  sub_1CD498((*a1)[3], (*a1)[2]);
  v4 = (void *)v3[3];
  v5 = v3[4];
  v6 = (void *)v3[1];
  v7 = (void *)v3[2];
  if ((a2 & 1) != 0)
  {
    sub_1CD498(v3[2], v3[1]);
    EnvironmentValues.subscript.setter(v6, &type metadata for AnalyticsAttributes, &type metadata for AnalyticsAttributes, v5);
    sub_1CD4DC((uint64_t)v7);
  }
  else
  {
    EnvironmentValues.subscript.setter(v3[2], &type metadata for AnalyticsAttributes, &type metadata for AnalyticsAttributes, v3[4]);
  }
  sub_1CD4DC((uint64_t)v4);
  free(v4);
  free(v7);
  free(v6);
  free(v3);
}

uint64_t EnvironmentValues.vibrantBlendMode.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1CD684((unsigned int *)&enum case for BlendMode.plusDarker(_:), (unsigned int *)&enum case for BlendMode.plusLighter(_:), a1);
}

uint64_t sub_1CD684@<X0>(unsigned int *a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char v14;
  void (*v15)(char *, uint64_t);
  uint64_t v16;
  unsigned int *v17;
  uint64_t v19;

  v6 = type metadata accessor for ColorScheme(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v8);
  v13 = (char *)&v19 - v12;
  EnvironmentValues.colorScheme.getter(v11);
  (*(void (**)(char *, _QWORD, uint64_t))(v7 + 104))(v10, enum case for ColorScheme.light(_:), v6);
  v14 = static ColorScheme.== infix(_:_:)(v13, v10);
  v15 = *(void (**)(char *, uint64_t))(v7 + 8);
  v15(v10, v6);
  v15(v13, v6);
  v16 = type metadata accessor for BlendMode(0);
  if ((v14 & 1) != 0)
    v17 = a1;
  else
    v17 = a2;
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v16 - 8) + 104))(a3, *v17, v16);
}

uint64_t EnvironmentValues.defaultBlendModeConsideringVibrancy.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  _BYTE *v8;
  unint64_t v9;
  _QWORD *v10;
  char v11;
  void (*v12)(_BYTE *, uint64_t);
  uint64_t v13;
  unsigned int *v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v18[15];
  uint64_t v19;

  v2 = type metadata accessor for ColorScheme(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = &v18[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v4);
  v8 = &v18[-v7];
  v9 = sub_2CBE0();
  v10 = EnvironmentValues.subscript.getter(&v19, &type metadata for IsInVibrantContextKey, &type metadata for IsInVibrantContextKey, v9);
  if (v19 == 1)
  {
    EnvironmentValues.colorScheme.getter(v10);
    (*(void (**)(_BYTE *, _QWORD, uint64_t))(v3 + 104))(v6, enum case for ColorScheme.light(_:), v2);
    v11 = static ColorScheme.== infix(_:_:)(v8, v6);
    v12 = *(void (**)(_BYTE *, uint64_t))(v3 + 8);
    v12(v6, v2);
    v12(v8, v2);
    v13 = type metadata accessor for BlendMode(0);
    if ((v11 & 1) != 0)
      v14 = (unsigned int *)&enum case for BlendMode.plusDarker(_:);
    else
      v14 = (unsigned int *)&enum case for BlendMode.plusLighter(_:);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v13 - 8) + 104))(a1, *v14, v13);
  }
  else
  {
    v15 = enum case for BlendMode.normal(_:);
    v16 = type metadata accessor for BlendMode(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 104))(a1, v15, v16);
  }
}

unint64_t sub_1CD8F8()
{
  unint64_t result;

  result = qword_26C298;
  if (!qword_26C298)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for HostingViewBarType, &type metadata for HostingViewBarType);
    atomic_store(result, (unint64_t *)&qword_26C298);
  }
  return result;
}

_QWORD *sub_1CD93C@<X0>(_QWORD *a1@<X8>)
{
  unint64_t v2;

  v2 = sub_1CC818();
  return EnvironmentValues.subscript.getter(a1, &type metadata for ConvertRectFromGlobalHandlerKey, &type metadata for ConvertRectFromGlobalHandlerKey, v2);
}

_QWORD *sub_1CD97C@<X0>(_BYTE *a1@<X8>)
{
  return sub_1CDA50((uint64_t (*)(void))sub_2FAA8, (uint64_t)&type metadata for IsInCardKey, a1);
}

uint64_t sub_1CD990(char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1CDAB8(a1, a2, a3, a4, (uint64_t (*)(void))sub_2FAA8, (uint64_t)&type metadata for IsInCardKey);
}

_QWORD *sub_1CD9A4@<X0>(_BYTE *a1@<X8>)
{
  return sub_1CDA50((uint64_t (*)(void))sub_1CCB40, (uint64_t)&type metadata for IsInListKey, a1);
}

uint64_t sub_1CD9B8(char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1CDAB8(a1, a2, a3, a4, (uint64_t (*)(void))sub_1CCB40, (uint64_t)&type metadata for IsInListKey);
}

_QWORD *sub_1CD9CC@<X0>(_BYTE *a1@<X8>)
{
  return sub_1CDA50((uint64_t (*)(void))sub_1CCCAC, (uint64_t)&type metadata for IsInModalKey, a1);
}

uint64_t sub_1CD9E0(char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1CDAB8(a1, a2, a3, a4, (uint64_t (*)(void))sub_1CCCAC, (uint64_t)&type metadata for IsInModalKey);
}

_QWORD *sub_1CDA14@<X0>(_BYTE *a1@<X8>)
{
  return sub_1CDA50((uint64_t (*)(void))sub_1CD094, (uint64_t)&type metadata for IsAnODPRecommendation, a1);
}

uint64_t sub_1CDA28(char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1CDAB8(a1, a2, a3, a4, (uint64_t (*)(void))sub_1CD094, (uint64_t)&type metadata for IsAnODPRecommendation);
}

_QWORD *sub_1CDA3C@<X0>(_BYTE *a1@<X8>)
{
  return sub_1CDA50((uint64_t (*)(void))sub_1CD1AC, (uint64_t)&type metadata for SupportsSuggestionContextMenu, a1);
}

_QWORD *sub_1CDA50@<X0>(uint64_t (*a1)(void)@<X3>, uint64_t a2@<X4>, _BYTE *a3@<X8>)
{
  uint64_t v5;
  _QWORD *result;
  uint64_t v7;

  v5 = a1();
  result = EnvironmentValues.subscript.getter(&v7, a2, a2, v5);
  *a3 = v7;
  return result;
}

uint64_t sub_1CDAA4(char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1CDAB8(a1, a2, a3, a4, (uint64_t (*)(void))sub_1CD1AC, (uint64_t)&type metadata for SupportsSuggestionContextMenu);
}

uint64_t sub_1CDAB8(char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void), uint64_t a6)
{
  uint64_t v7;
  char v9;

  v9 = *a1;
  v7 = a5();
  return EnvironmentValues.subscript.setter(&v9, a6, a6, v7);
}

_QWORD *sub_1CDB00@<X0>(_QWORD *a1@<X8>)
{
  unint64_t v2;

  v2 = sub_1CD310();
  return EnvironmentValues.subscript.getter(a1, &type metadata for AnalyticsAttributes, &type metadata for AnalyticsAttributes, v2);
}

uint64_t storeEnumTagSinglePayload for HostingViewBarType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1CDB8C + 4 * byte_1F8985[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1CDBC0 + 4 * asc_1F8980[v4]))();
}

uint64_t sub_1CDBC0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CDBC8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CDBD0);
  return result;
}

uint64_t sub_1CDBDC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CDBE4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1CDBE8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CDBF0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for HostingViewBarType()
{
  return &type metadata for HostingViewBarType;
}

ValueMetadata *type metadata accessor for AnalyticsAttributes()
{
  return &type metadata for AnalyticsAttributes;
}

ValueMetadata *type metadata accessor for SupportsSuggestionContextMenu()
{
  return &type metadata for SupportsSuggestionContextMenu;
}

ValueMetadata *type metadata accessor for IsAnODPRecommendation()
{
  return &type metadata for IsAnODPRecommendation;
}

ValueMetadata *type metadata accessor for ShelfBackgroundKindKey()
{
  return &type metadata for ShelfBackgroundKindKey;
}

ValueMetadata *type metadata accessor for IsReachableKey()
{
  return &type metadata for IsReachableKey;
}

ValueMetadata *type metadata accessor for IsPendingData()
{
  return &type metadata for IsPendingData;
}

ValueMetadata *type metadata accessor for IsInModalKey()
{
  return &type metadata for IsInModalKey;
}

ValueMetadata *type metadata accessor for IsInListKey()
{
  return &type metadata for IsInListKey;
}

ValueMetadata *type metadata accessor for ConvertRectFromGlobalHandlerKey()
{
  return &type metadata for ConvertRectFromGlobalHandlerKey;
}

ValueMetadata *type metadata accessor for IsInCardKey()
{
  return &type metadata for IsInCardKey;
}

ValueMetadata *type metadata accessor for IsInVibrantContextKey()
{
  return &type metadata for IsInVibrantContextKey;
}

unint64_t sub_1CDCBC()
{
  unint64_t result;

  result = qword_26C2A0;
  if (!qword_26C2A0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ShelfBackgroundViewModel.BackgroundKind, &type metadata for ShelfBackgroundViewModel.BackgroundKind);
    atomic_store(result, (unint64_t *)&qword_26C2A0);
  }
  return result;
}

uint64_t CoverStackView.init(layout:enableOverscrollEffects:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t result;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 32))(a5, a1);
  result = type metadata accessor for CoverStackView(0, a3, a4, v9);
  *(_BYTE *)(a5 + *(int *)(result + 36)) = a2;
  return result;
}

uint64_t type metadata accessor for CoverStackView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10E40(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CoverStackView);
}

uint64_t CoverStackView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t AssociatedTypeWitness;
  uint64_t v14;
  uint64_t v15;
  uint64_t WitnessTable;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t OpaqueTypeMetadata2;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  double v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  void *v49;
  uint64_t OpaqueTypeConformance2;
  unint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t ObjCClassFromMetadata;
  id v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  void (*v72)(char *, uint64_t);
  uint64_t v73;
  uint64_t v74;
  char *v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _QWORD v109[7];
  uint64_t v110;
  void *v111;
  uint64_t v112;
  uint64_t v113;
  void *v114;

  v102 = a2;
  v83 = type metadata accessor for Locale(0);
  v82 = *(_QWORD *)(v83 - 8);
  v4 = __chkstk_darwin(v83);
  v78 = (char *)&v76 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v81 = (char *)&v76 - v6;
  v80 = type metadata accessor for String.LocalizationValue(0);
  v79 = *(_QWORD *)(v80 - 8);
  v7 = __chkstk_darwin(v80);
  v76 = (char *)&v76 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v77 = (char *)&v76 - v9;
  v99 = type metadata accessor for AccessibilityChildBehavior(0);
  v98 = *(_QWORD *)(v99 - 8);
  __chkstk_darwin(v99);
  v96 = (char *)&v76 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(a1 + 16);
  v12 = *(_QWORD *)(a1 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v12, v11, &protocol requirements base descriptor for CoverStackLayout, &associated type descriptor for CoverStackLayout.CoverLayout);
  v14 = type metadata accessor for Array(255, AssociatedTypeWitness);
  v15 = sub_7EF8(&qword_26C2A8);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v14);
  v110 = v14;
  v111 = &type metadata for Double;
  v112 = v15;
  v113 = WitnessTable;
  v114 = &protocol witness table for Double;
  v17 = type metadata accessor for ForEach(255, &v110);
  v109[6] = sub_1CE60C();
  v87 = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v17);
  v18 = type metadata accessor for ZStack(0, v17, v87);
  v88 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v20 = (char *)&v76 - v19;
  v21 = type metadata accessor for ModifiedContent(0, v18, &type metadata for _OffsetEffect);
  v89 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  v23 = (char *)&v76 - v22;
  v24 = type metadata accessor for ModifiedContent(0, v21, &type metadata for _FrameLayout);
  v95 = *(_QWORD *)(v24 - 8);
  __chkstk_darwin(v24);
  v86 = (char *)&v76 - v25;
  v84 = swift_getWitnessTable(&protocol conformance descriptor for ZStack<A>, v18);
  v109[4] = v84;
  v109[5] = &protocol witness table for _OffsetEffect;
  v85 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v21);
  v109[2] = v85;
  v109[3] = &protocol witness table for _FrameLayout;
  v26 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v24);
  v110 = v24;
  v111 = (void *)v26;
  v90 = v26;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(0, &v110, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 0);
  v93 = *(_QWORD *)(OpaqueTypeMetadata2 - 8);
  __chkstk_darwin(OpaqueTypeMetadata2);
  v91 = (char *)&v76 - v28;
  v29 = type metadata accessor for AccessibilityAttachmentModifier(255);
  v94 = OpaqueTypeMetadata2;
  v92 = type metadata accessor for ModifiedContent(0, OpaqueTypeMetadata2, v29);
  v97 = *(_QWORD *)(v92 - 8);
  v30 = __chkstk_darwin(v92);
  v103 = (char *)&v76 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = __chkstk_darwin(v30);
  v100 = (char *)&v76 - v33;
  v34 = __chkstk_darwin(v32);
  v101 = (uint64_t)&v76 - v35;
  v36 = static Alignment.bottom.getter(v34);
  v104 = v11;
  v105 = v12;
  v106 = v2;
  ZStack.init(alignment:content:)(v36);
  (*(void (**)(uint64_t, uint64_t))(v12 + 48))(v11, v12);
  View.offset(_:)(v18, v84);
  (*(void (**)(char *, uint64_t))(v88 + 8))(v20, v18);
  v37 = (*(double (**)(uint64_t, uint64_t))(v12 + 32))(v11, v12);
  v38 = _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0();
  v39 = v86;
  View.frame(width:height:alignment:)(*(_QWORD *)&v37, 0, 0, 1, v38, v40, v21, v85);
  v41 = v23;
  v42 = v11;
  (*(void (**)(char *, uint64_t))(v89 + 8))(v41, v21);
  v89 = *(_QWORD *)(v12 + 56);
  v43 = ((uint64_t (*)(uint64_t, uint64_t))v89)(v11, v12);
  v44 = v96;
  if ((v43 & 1) != 0)
    static AccessibilityChildBehavior.combine.getter(v43);
  else
    static AccessibilityChildBehavior.contain.getter();
  v45 = v91;
  v46 = v90;
  View.accessibilityElement(children:)(v44, v24, v90);
  (*(void (**)(char *, uint64_t))(v98 + 8))(v44, v99);
  (*(void (**)(char *, uint64_t))(v95 + 8))(v39, v24);
  v47 = (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 64))(v11, v12);
  v49 = v48;
  v110 = v47;
  v111 = v48;
  v109[0] = v24;
  v109[1] = v46;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v109, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
  v51 = sub_C57C();
  v52 = v94;
  View.accessibilityLabel<A>(_:)(&v110, v94, &type metadata for String, OpaqueTypeConformance2, v51);
  swift_bridgeObjectRelease(v49);
  (*(void (**)(char *, uint64_t))(v93 + 8))(v45, v52);
  if ((((uint64_t (*)(uint64_t, uint64_t))v89)(v42, v12) & 1) != 0)
  {
    v53 = v77;
    v54 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000017, 0x80000000001FF690);
    v99 = OpaqueTypeConformance2;
    v55 = v81;
    static Locale.current.getter(v54);
    v56 = v79;
    v57 = v76;
    v58 = v80;
    (*(void (**)(char *, char *, uint64_t))(v79 + 16))(v76, v53, v80);
    v59 = type metadata accessor for BundleFinder();
    ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v59);
    v61 = objc_msgSend((id)objc_opt_self(NSBundle), "bundleForClass:", ObjCClassFromMetadata);
    v62 = v82;
    v63 = v78;
    v64 = v83;
    (*(void (**)(char *, char *, uint64_t))(v82 + 16))(v78, v55, v83);
    v65 = String.init(localized:table:bundle:locale:comment:)(v57, 0, 0, v61, v63, "Accessibility value for book cover series", 41, 2);
    v67 = v66;
    v68 = v55;
    OpaqueTypeConformance2 = v99;
    (*(void (**)(char *, uint64_t))(v62 + 8))(v68, v64);
    (*(void (**)(char *, uint64_t))(v56 + 8))(v53, v58);
  }
  else
  {
    v65 = 0;
    v67 = 0xE000000000000000;
  }
  v110 = v65;
  v111 = (void *)v67;
  v69 = (uint64_t)v100;
  v70 = v92;
  v71 = v103;
  ModifiedContent<>.accessibilityValue<A>(_:)(&v110, v92, &type metadata for String, v51);
  swift_bridgeObjectRelease(v67);
  v72 = *(void (**)(char *, uint64_t))(v97 + 8);
  v72(v71, v70);
  v73 = sub_6FD0((unint64_t *)&qword_25EEA0, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
  v107 = OpaqueTypeConformance2;
  v108 = v73;
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v70);
  v74 = v101;
  sub_10F80(v69, v70, v101);
  v72((char *)v69, v70);
  sub_C5C0(v74, v70, v102);
  return ((uint64_t (*)(uint64_t, uint64_t))v72)(v74, v70);
}

unint64_t sub_1CE60C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_26C2B0;
  if (!qword_26C2B0)
  {
    v1 = sub_7EF8(&qword_26C2A8);
    sub_1CE6A8(&qword_26C2B8, &qword_26C2C0, (void (*)(void))sub_1CE72C);
    sub_1CE6A8(&qword_26C300, &qword_26C308, (void (*)(void))sub_1CE89C);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_26C2B0);
  }
  return result;
}

uint64_t sub_1CE6A8(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_7EF8(a2);
    a3();
    sub_6FD0((unint64_t *)&qword_25EEA0, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v6);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1CE72C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t OpaqueTypeConformance2;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  result = qword_26C2C8;
  if (!qword_26C2C8)
  {
    v1 = sub_7EF8(&qword_26C2D0);
    v2 = sub_7EF8(&qword_25F668);
    v3 = sub_7EF8(&qword_26C2D8);
    v4 = sub_C2B4C();
    v5 = sub_7EF8(&qword_26C2E0);
    v8 = type metadata accessor for EmptyVisualEffect(255);
    v9 = sub_6FD0(&qword_26C2E8, (uint64_t (*)(uint64_t))&type metadata accessor for EmptyVisualEffect, (uint64_t)&protocol conformance descriptor for EmptyVisualEffect);
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v8, &opaque type descriptor for <<opaque return type of VisualEffect.scaleEffect(_:anchor:)>>, 1);
    v8 = v5;
    v9 = OpaqueTypeConformance2;
    v7 = swift_getOpaqueTypeConformance2(&v8, &opaque type descriptor for <<opaque return type of VisualEffect.offset(_:)>>, 1);
    v8 = v2;
    v9 = v3;
    v10 = v4;
    v11 = v7;
    swift_getOpaqueTypeConformance2(&v8, &opaque type descriptor for <<opaque return type of View.visualEffect<A>(_:)>>, 1);
    sub_1CE850();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_26C2C8);
  }
  return result;
}

unint64_t sub_1CE850()
{
  unint64_t result;
  uint64_t v1;

  result = qword_26C2F0;
  if (!qword_26C2F0)
  {
    v1 = sub_7EF8(&qword_26C2F8);
    result = swift_getWitnessTable(&protocol conformance descriptor for _TraitWritingModifier<A>, v1);
    atomic_store(result, (unint64_t *)&qword_26C2F0);
  }
  return result;
}

unint64_t sub_1CE89C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_26C310;
  if (!qword_26C310)
  {
    v1 = sub_7EF8(&qword_26C318);
    sub_1CE908();
    sub_1CE850();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_26C310);
  }
  return result;
}

unint64_t sub_1CE908()
{
  unint64_t result;
  uint64_t v1;

  result = qword_26C320;
  if (!qword_26C320)
  {
    v1 = sub_7EF8(qword_26C328);
    sub_C2B4C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_26C320);
  }
  return result;
}

uint64_t sub_1CE974@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  void (*v27)(char *, uint64_t);
  uint64_t v29;
  uint64_t KeyPath;
  uint64_t WitnessTable;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  _QWORD v40[5];

  v36 = a5;
  v34 = type metadata accessor for CoverStackView(0, a2, a3, a4);
  v8 = *(_QWORD *)(v34 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  __chkstk_darwin(v34);
  v11 = (char *)&v29 - v10;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, a3, a2, &protocol requirements base descriptor for CoverStackLayout, &associated type descriptor for CoverStackLayout.CoverLayout);
  v13 = type metadata accessor for Array(255, AssociatedTypeWitness);
  v33 = v13;
  v14 = sub_7EF8(&qword_26C2A8);
  v32 = v14;
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v13);
  v40[0] = v13;
  v40[1] = &type metadata for Double;
  v40[2] = v14;
  v40[3] = WitnessTable;
  v40[4] = &protocol witness table for Double;
  v15 = type metadata accessor for ForEach(0, v40);
  v35 = *(_QWORD *)(v15 - 8);
  v16 = __chkstk_darwin(v15);
  v18 = (char *)&v29 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v20 = (char *)&v29 - v19;
  v40[0] = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 40))(a2, a3);
  v37 = a2;
  v38 = a3;
  KeyPath = swift_getKeyPath(&unk_1F8E48);
  v21 = a1;
  v22 = v34;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, v21, v34);
  v23 = *(unsigned __int8 *)(v8 + 80);
  v24 = (v23 + 32) & ~v23;
  v25 = swift_allocObject(&unk_25AD58, v24 + v9, v23 | 7);
  *(_QWORD *)(v25 + 16) = a2;
  *(_QWORD *)(v25 + 24) = a3;
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v25 + v24, v11, v22);
  v26 = sub_1CE60C();
  ForEach<>.init(_:id:content:)(v40, KeyPath, sub_1D07BC, v25, v33, v32, WitnessTable, &protocol witness table for Double, v26);
  v39 = v26;
  swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v15);
  sub_10F80((uint64_t)v18, v15, (uint64_t)v20);
  v27 = *(void (**)(char *, uint64_t))(v35 + 8);
  v27(v18, v15);
  sub_C5C0((uint64_t)v20, v15, v36);
  return ((uint64_t (*)(char *, uint64_t))v27)(v20, v15);
}

uint64_t sub_1CEBEC@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return sub_1CE974(v2[4], v2[2], v2[3], a1, a2);
}

void sub_1CEBF8(uint64_t a1@<X1>, uint64_t a2@<X2>, double *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  double (*v8)(uint64_t, uint64_t);
  uint64_t v9;

  v4 = *(_QWORD *)(a2 + a1 - 16);
  v5 = *(_QWORD *)(a2 + a1 - 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v5, v4, &protocol requirements base descriptor for CoverStackLayout, &associated type descriptor for CoverStackLayout.CoverLayout);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v5, v4, AssociatedTypeWitness, &protocol requirements base descriptor for CoverStackLayout, &associated conformance descriptor for CoverStackLayout.CoverStackLayout.CoverLayout: CoverStackCoverLayout);
  v8 = *(double (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 24);
  v9 = swift_checkMetadataState(0, AssociatedTypeWitness);
  *a3 = v8(v9, AssociatedConformanceWitness);
}

uint64_t sub_1CEC94@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t AssociatedTypeWitness;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  double (*v39)(uint64_t, uint64_t);
  double v40;
  double v41;
  double v42;
  uint64_t AssociatedConformanceWitness;
  double v44;
  double v45;
  uint64_t v46;
  uint64_t v47;
  double v48;
  void (*v49)(_QWORD *__return_ptr, uint64_t, uint64_t);
  uint64_t v50;
  uint64_t v51;
  int *v52;
  char *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  unint64_t v62;
  char *v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _OWORD *v72;
  __int128 v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t OpaqueTypeConformance2;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t (*v99)(uint64_t);
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  int *v104;
  char *v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  unint64_t v114;
  char *v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  _OWORD *v124;
  __int128 v125;
  uint64_t v126;
  double *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t (*v131)(uint64_t, uint64_t);
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  unint64_t v135;
  unint64_t v136;
  unint64_t v137;
  uint64_t v138;
  unint64_t v139;
  unint64_t v140;
  unint64_t v141;
  unint64_t v142;
  uint64_t v143;
  unint64_t v144;
  char *v145;
  uint64_t v146;
  char *v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t ObjCClassFromMetadata;
  id v152;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  unint64_t v156;
  char *v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t v160;
  uint64_t *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  char *v170;
  uint64_t v171;
  char *v172;
  char *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  id v177;
  uint64_t v178;
  uint64_t v179;
  char *v180;
  unint64_t v181;
  char *v182;
  uint64_t v183;
  unint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v189;
  uint64_t v190;
  char *v191;
  uint64_t v192;
  uint64_t v193;
  char *v194;
  uint64_t v195;
  char *v196;
  char *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  char *v205;
  uint64_t v206;
  char *v207;
  uint64_t v208;
  char *v209;
  char *v210;
  char *v211;
  char *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  char *v218;
  char *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  char v231;
  uint64_t v232;
  unint64_t v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;
  __int128 v242;
  __int128 v243;
  uint64_t v244;
  _QWORD v245[22];

  v225 = a5;
  v201 = sub_5440(qword_26C328);
  __chkstk_darwin(v201);
  v203 = (uint64_t)&v189 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v204 = sub_5440(&qword_26C318);
  __chkstk_darwin(v204);
  v202 = (uint64_t)&v189 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v224 = sub_5440(&qword_26C308);
  v11 = __chkstk_darwin(v224);
  v219 = (char *)&v189 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v11);
  v207 = (char *)&v189 - v14;
  __chkstk_darwin(v13);
  v208 = (uint64_t)&v189 - v15;
  v222 = sub_5440(&qword_26C3B0);
  __chkstk_darwin(v222);
  v223 = (uint64_t)&v189 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for Locale(0);
  v214 = *(_QWORD *)(v17 - 8);
  v215 = v17;
  v18 = __chkstk_darwin(v17);
  v210 = (char *)&v189 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v212 = (char *)&v189 - v20;
  v213 = type metadata accessor for String.LocalizationValue(0);
  v220 = *(_QWORD *)(v213 - 8);
  v21 = __chkstk_darwin(v213);
  v209 = (char *)&v189 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v211 = (char *)&v189 - v23;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a4, a3, &protocol requirements base descriptor for CoverStackLayout, &associated type descriptor for CoverStackLayout.CoverLayout);
  v195 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v193 = *(_QWORD *)(v195 + 64);
  __chkstk_darwin(AssociatedTypeWitness);
  v194 = (char *)&v189 - v25;
  v216 = type metadata accessor for CoverStackView(0, a3, a4, v26);
  v192 = *(_QWORD *)(v216 - 8);
  v189 = *(_QWORD *)(v192 + 64);
  __chkstk_darwin(v216);
  v191 = (char *)&v189 - v27;
  v217 = type metadata accessor for CoverView(0);
  __chkstk_darwin(v217);
  v29 = (char *)&v189 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v227 = sub_5440(&qword_25F668);
  __chkstk_darwin(v227);
  v228 = (uint64_t)&v189 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = sub_5440(&qword_26C3B8);
  v199 = *(_QWORD *)(v31 - 8);
  v200 = v31;
  __chkstk_darwin(v31);
  v197 = (char *)&v189 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v198 = sub_5440(&qword_26C2D0);
  __chkstk_darwin(v198);
  v196 = (char *)&v189 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v221 = sub_5440(&qword_26C2C0);
  v34 = __chkstk_darwin(v221);
  v218 = (char *)&v189 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = __chkstk_darwin(v34);
  v205 = (char *)&v189 - v37;
  __chkstk_darwin(v36);
  v206 = (uint64_t)&v189 - v38;
  v39 = *(double (**)(uint64_t, uint64_t))(a4 + 32);
  v40 = v39(a3, a4);
  v42 = v41;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a4, a3, AssociatedTypeWitness, &protocol requirements base descriptor for CoverStackLayout, &associated conformance descriptor for CoverStackLayout.CoverStackLayout.CoverLayout: CoverStackCoverLayout);
  v44 = (*(double (**)(uint64_t, uint64_t, double, double))(AssociatedConformanceWitness + 40))(AssociatedTypeWitness, AssociatedConformanceWitness, v40, v42);
  v229 = a3;
  v226 = a4;
  v39(a3, a4);
  v45 = (*(double (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 32))(AssociatedTypeWitness, AssociatedConformanceWitness);
  v47 = v46;
  v48 = (*(double (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 24))(AssociatedTypeWitness, AssociatedConformanceWitness);
  v49 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(AssociatedConformanceWitness + 16);
  v190 = AssociatedTypeWitness;
  v49(v245, AssociatedTypeWitness, AssociatedConformanceWitness);
  v50 = v216;
  v51 = *(int *)(v216 + 36);
  v230 = a2;
  if (*(_BYTE *)(a2 + v51) == 1)
  {
    sub_51C90((uint64_t)v245, (uint64_t)&v234);
    *(_QWORD *)v29 = swift_getKeyPath(&unk_1F8E78);
    v29[40] = 0;
    *((_QWORD *)v29 + 6) = swift_getKeyPath(&unk_1F8EA0);
    v29[56] = 0;
    v52 = (int *)v217;
    v53 = &v29[*(int *)(v217 + 24)];
    *(_QWORD *)v53 = swift_getKeyPath(&unk_1F8ED0);
    v54 = sub_5440(&qword_25F1E8);
    swift_storeEnumTagMultiPayload(v53, v54, 0);
    v55 = &v29[v52[7]];
    *(_QWORD *)v55 = swift_getKeyPath(&unk_1F8EF8);
    v56 = sub_5440(&qword_25F758);
    swift_storeEnumTagMultiPayload(v55, v56, 0);
    v57 = &v29[v52[8]];
    v58 = type metadata accessor for ProfileRestrictions(0);
    v59 = sub_6FD0((unint64_t *)&qword_26AF00, type metadata accessor for ProfileRestrictions, (uint64_t)&protocol conformance descriptor for ProfileRestrictions);
    *(_QWORD *)v57 = EnvironmentObject.init()(v58, v59);
    *((_QWORD *)v57 + 1) = v60;
    v61 = &v29[v52[9]];
    v231 = 1;
    State.init(wrappedValue:)(&v232, &v231, &type metadata for Bool);
    v62 = v233;
    *v61 = v232;
    *((_QWORD *)v61 + 1) = v62;
    v63 = &v29[v52[10]];
    v64 = v241;
    v65 = v243;
    *((_OWORD *)v63 + 8) = v242;
    *((_OWORD *)v63 + 9) = v65;
    *((_QWORD *)v63 + 20) = v244;
    v66 = v239;
    *((_OWORD *)v63 + 4) = v238;
    *((_OWORD *)v63 + 5) = v66;
    *((_OWORD *)v63 + 6) = v240;
    *((_OWORD *)v63 + 7) = v64;
    v67 = v235;
    *(_OWORD *)v63 = v234;
    *((_OWORD *)v63 + 1) = v67;
    v68 = v237;
    *((_OWORD *)v63 + 2) = v236;
    *((_OWORD *)v63 + 3) = v68;
    v29[v52[11]] = 0;
    v69 = _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0();
    _FrameLayout.init(width:height:alignment:)(&v234, 0, 1, *(_QWORD *)&v44, 0, v69, v70);
    v71 = v228;
    sub_1D0840((uint64_t)v29, v228);
    v72 = (_OWORD *)(v71 + *(int *)(v227 + 36));
    v73 = v235;
    *v72 = v234;
    v72[1] = v73;
    v72[2] = v236;
    sub_1D0884((uint64_t)v29);
    v75 = v191;
    v74 = v192;
    (*(void (**)(char *, uint64_t, uint64_t))(v192 + 16))(v191, v230, v50);
    v77 = v194;
    v76 = v195;
    v78 = v190;
    (*(void (**)(char *, uint64_t, uint64_t))(v195 + 16))(v194, a1, v190);
    v79 = *(unsigned __int8 *)(v74 + 80);
    v80 = (v79 + 32) & ~v79;
    v81 = *(unsigned __int8 *)(v76 + 80);
    v82 = (v189 + v80 + v81) & ~v81;
    v83 = swift_allocObject(&unk_25AD80, v82 + v193, v79 | v81 | 7);
    v84 = v226;
    *(_QWORD *)(v83 + 16) = v229;
    *(_QWORD *)(v83 + 24) = v84;
    (*(void (**)(uint64_t, char *, uint64_t))(v74 + 32))(v83 + v80, v75, v50);
    (*(void (**)(uint64_t, char *, uint64_t))(v76 + 32))(v83 + v82, v77, v78);
    v85 = sub_5440(&qword_26C2D8);
    v86 = sub_C2B4C();
    v87 = sub_7EF8(&qword_26C2E0);
    v88 = type metadata accessor for EmptyVisualEffect(255);
    v89 = sub_6FD0(&qword_26C2E8, (uint64_t (*)(uint64_t))&type metadata accessor for EmptyVisualEffect, (uint64_t)&protocol conformance descriptor for EmptyVisualEffect);
    v232 = v88;
    v233 = v89;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v232, &opaque type descriptor for <<opaque return type of VisualEffect.scaleEffect(_:anchor:)>>, 1);
    v232 = v87;
    v233 = OpaqueTypeConformance2;
    v91 = swift_getOpaqueTypeConformance2(&v232, &opaque type descriptor for <<opaque return type of VisualEffect.offset(_:)>>, 1);
    v92 = v197;
    v93 = v85;
    v94 = v228;
    View.visualEffect<A>(_:)(sub_1D0990, v83, v227, v93, v86, v91);
    swift_release(v83);
    sub_B414(v94, &qword_25F668);
    v96 = v199;
    v95 = v200;
    v97 = (uint64_t)v196;
    (*(void (**)(char *, char *, uint64_t))(v199 + 16))(v196, v92, v200);
    v98 = v198;
    *(double *)(v97 + *(int *)(v198 + 36)) = v48;
    (*(void (**)(char *, uint64_t))(v96 + 8))(v92, v95);
    v99 = *(uint64_t (**)(uint64_t))(v226 + 56);
    v100 = v229;
    v101 = v226;
    if ((v99(v229) & 1) != 0)
    {
      v102 = 0;
      v103 = 0xE000000000000000;
    }
    else
    {
      v102 = CoverViewModel.axLabel.getter();
      v103 = v135;
    }
    v232 = v102;
    v233 = v103;
    v136 = sub_1CE72C();
    v137 = sub_C57C();
    View.accessibilityLabel<A>(_:)(&v232, v98, &type metadata for String, v136, v137);
    swift_bridgeObjectRelease(v103);
    sub_B414(v97, &qword_26C2D0);
    if ((((uint64_t (*)(uint64_t, uint64_t))v99)(v100, v101) & 1) != 0)
    {
      v138 = 0;
      v139 = 0xE000000000000000;
    }
    else
    {
      v145 = v211;
      v146 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000010, 0x80000000001FF6E0);
      v147 = v212;
      static Locale.current.getter(v146);
      v148 = v209;
      v149 = v213;
      (*(void (**)(char *, char *, uint64_t))(v220 + 16))(v209, v145, v213);
      v150 = type metadata accessor for BundleFinder();
      ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v150);
      v152 = objc_msgSend((id)objc_opt_self(NSBundle), "bundleForClass:", ObjCClassFromMetadata);
      v154 = v214;
      v153 = v215;
      v155 = v210;
      (*(void (**)(char *, char *, uint64_t))(v214 + 16))(v210, v147, v215);
      v138 = String.init(localized:table:bundle:locale:comment:)(v148, 0, 0, v152, v155, "Accessibility book cover image value", 36, 2);
      v139 = v156;
      (*(void (**)(char *, uint64_t))(v154 + 8))(v147, v153);
      (*(void (**)(char *, uint64_t))(v220 + 8))(v145, v149);
    }
    v232 = v138;
    v233 = v139;
    v157 = v205;
    v158 = v221;
    v159 = v137;
    v160 = (uint64_t)v218;
    ModifiedContent<>.accessibilityValue<A>(_:)(&v232, v221, &type metadata for String, v159);
    swift_bridgeObjectRelease(v139);
    v161 = &qword_26C2C0;
    sub_B414(v160, &qword_26C2C0);
    v162 = (uint64_t)v157;
    v163 = v206;
    sub_167A4(v162, v206, &qword_26C2C0);
    v164 = v223;
    sub_B3D0(v163, v223, &qword_26C2C0);
    swift_storeEnumTagMultiPayload(v164, v222, 0);
    v165 = sub_1CE6A8(&qword_26C2B8, &qword_26C2C0, (void (*)(void))sub_1CE72C);
    v166 = sub_1CE6A8(&qword_26C300, &qword_26C308, (void (*)(void))sub_1CE89C);
    v167 = v224;
    v168 = v164;
    v169 = v158;
  }
  else
  {
    sub_51C90((uint64_t)v245, (uint64_t)&v234);
    *(_QWORD *)v29 = swift_getKeyPath(&unk_1F8E78);
    v29[40] = 0;
    *((_QWORD *)v29 + 6) = swift_getKeyPath(&unk_1F8EA0);
    v29[56] = 0;
    v104 = (int *)v217;
    v105 = &v29[*(int *)(v217 + 24)];
    *(_QWORD *)v105 = swift_getKeyPath(&unk_1F8ED0);
    v106 = sub_5440(&qword_25F1E8);
    swift_storeEnumTagMultiPayload(v105, v106, 0);
    v107 = &v29[v104[7]];
    *(_QWORD *)v107 = swift_getKeyPath(&unk_1F8EF8);
    v108 = sub_5440(&qword_25F758);
    swift_storeEnumTagMultiPayload(v107, v108, 0);
    v109 = &v29[v104[8]];
    v110 = type metadata accessor for ProfileRestrictions(0);
    v111 = sub_6FD0((unint64_t *)&qword_26AF00, type metadata accessor for ProfileRestrictions, (uint64_t)&protocol conformance descriptor for ProfileRestrictions);
    *(_QWORD *)v109 = EnvironmentObject.init()(v110, v111);
    *((_QWORD *)v109 + 1) = v112;
    v113 = &v29[v104[9]];
    v231 = 1;
    State.init(wrappedValue:)(&v232, &v231, &type metadata for Bool);
    v114 = v233;
    *v113 = v232;
    *((_QWORD *)v113 + 1) = v114;
    v115 = &v29[v104[10]];
    v116 = v241;
    v117 = v243;
    *((_OWORD *)v115 + 8) = v242;
    *((_OWORD *)v115 + 9) = v117;
    *((_QWORD *)v115 + 20) = v244;
    v118 = v239;
    *((_OWORD *)v115 + 4) = v238;
    *((_OWORD *)v115 + 5) = v118;
    *((_OWORD *)v115 + 6) = v240;
    *((_OWORD *)v115 + 7) = v116;
    v119 = v235;
    *(_OWORD *)v115 = v234;
    *((_OWORD *)v115 + 1) = v119;
    v120 = v237;
    *((_OWORD *)v115 + 2) = v236;
    *((_OWORD *)v115 + 3) = v120;
    v29[v104[11]] = 0;
    v121 = _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0();
    _FrameLayout.init(width:height:alignment:)(&v234, 0, 1, *(_QWORD *)&v44, 0, v121, v122);
    v123 = v228;
    sub_1D0840((uint64_t)v29, v228);
    v124 = (_OWORD *)(v123 + *(int *)(v227 + 36));
    v125 = v235;
    *v124 = v234;
    v124[1] = v125;
    v124[2] = v236;
    sub_1D0884((uint64_t)v29);
    v126 = v203;
    sub_B3D0(v123, v203, &qword_25F668);
    v127 = (double *)(v126 + *(int *)(v201 + 36));
    *v127 = v45;
    *((_QWORD *)v127 + 1) = v47;
    sub_B414(v123, &qword_25F668);
    v128 = v202;
    sub_B3D0(v126, v202, qword_26C328);
    v129 = v204;
    *(double *)(v128 + *(int *)(v204 + 36)) = v48;
    sub_B414(v126, qword_26C328);
    v130 = v226;
    v131 = *(uint64_t (**)(uint64_t, uint64_t))(v226 + 56);
    v132 = v229;
    if ((v131(v229, v226) & 1) != 0)
    {
      v133 = 0;
      v134 = 0xE000000000000000;
    }
    else
    {
      v133 = CoverViewModel.axLabel.getter();
      v134 = v140;
    }
    v232 = v133;
    v233 = v134;
    v141 = sub_1CE89C();
    v142 = sub_C57C();
    View.accessibilityLabel<A>(_:)(&v232, v129, &type metadata for String, v141, v142);
    swift_bridgeObjectRelease(v134);
    sub_B414(v128, &qword_26C318);
    if ((v131(v132, v130) & 1) != 0)
    {
      v143 = 0;
      v144 = 0xE000000000000000;
    }
    else
    {
      v170 = v211;
      v171 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000010, 0x80000000001FF6E0);
      v172 = v212;
      static Locale.current.getter(v171);
      v173 = v209;
      v174 = v213;
      (*(void (**)(char *, char *, uint64_t))(v220 + 16))(v209, v170, v213);
      v175 = type metadata accessor for BundleFinder();
      v176 = swift_getObjCClassFromMetadata(v175);
      v177 = objc_msgSend((id)objc_opt_self(NSBundle), "bundleForClass:", v176);
      v179 = v214;
      v178 = v215;
      v180 = v210;
      (*(void (**)(char *, char *, uint64_t))(v214 + 16))(v210, v172, v215);
      v143 = String.init(localized:table:bundle:locale:comment:)(v173, 0, 0, v177, v180, "Accessibility book cover image value", 36, 2);
      v144 = v181;
      (*(void (**)(char *, uint64_t))(v179 + 8))(v172, v178);
      (*(void (**)(char *, uint64_t))(v220 + 8))(v170, v174);
    }
    v232 = v143;
    v233 = v144;
    v182 = v207;
    v183 = v224;
    v184 = v142;
    v185 = (uint64_t)v219;
    ModifiedContent<>.accessibilityValue<A>(_:)(&v232, v224, &type metadata for String, v184);
    swift_bridgeObjectRelease(v144);
    v161 = &qword_26C308;
    sub_B414(v185, &qword_26C308);
    v186 = (uint64_t)v182;
    v163 = v208;
    sub_167A4(v186, v208, &qword_26C308);
    v187 = v223;
    sub_B3D0(v163, v223, &qword_26C308);
    swift_storeEnumTagMultiPayload(v187, v222, 1);
    v165 = sub_1CE6A8(&qword_26C2B8, &qword_26C2C0, (void (*)(void))sub_1CE72C);
    v166 = sub_1CE6A8(&qword_26C300, &qword_26C308, (void (*)(void))sub_1CE89C);
    v168 = v187;
    v169 = v221;
    v167 = v183;
  }
  _ConditionalContent<>.init(storage:)(v168, v169, v167, v165, v166);
  sub_B414(v163, v161);
  return sub_22488((uint64_t)v245);
}

uint64_t sub_1CFCC4@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  CGFloat v12;
  double v13;
  CGFloat v14;
  double v15;
  CGFloat v16;
  double v17;
  CGFloat v18;
  double MinY;
  uint64_t v20;
  double v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  double (*v28)(uint64_t, uint64_t, double);
  uint64_t v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t OpaqueTypeConformance2;
  _QWORD v41[2];
  _QWORD v42[2];
  CGRect v43;
  CGRect v44;

  v41[1] = a2;
  v3 = sub_5440(&qword_26C2E0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for CoordinateSpace(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  static CoordinateSpace.shelfContainerScrollView.getter(v9);
  v12 = GeometryProxy.frame(in:)(v11);
  v14 = v13;
  v16 = v15;
  v18 = v17;
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  v43.origin.x = v12;
  v43.origin.y = v14;
  v43.size.width = v16;
  v43.size.height = v18;
  MinY = CGRectGetMinY(v43);
  if (qword_25DD50 != -1)
    swift_once(&qword_25DD50, sub_1BC0FC);
  v20 = sub_7120(v7, (uint64_t)qword_26B4A8);
  v44.origin.x = GeometryProxy.frame(in:)(v20);
  v21 = MinY - CGRectGetMinY(v44);
  if (v21 > 0.0)
    v22 = v21;
  else
    v22 = 0.0;
  v25 = a1 + 16;
  v24 = *(_QWORD *)(a1 + 16);
  v23 = *(_QWORD *)(v25 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v23, v24, &protocol requirements base descriptor for CoverStackLayout, &associated type descriptor for CoverStackLayout.CoverLayout);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v23, v24, AssociatedTypeWitness, &protocol requirements base descriptor for CoverStackLayout, &associated conformance descriptor for CoverStackLayout.CoverStackLayout.CoverLayout: CoverStackCoverLayout);
  v28 = *(double (**)(uint64_t, uint64_t, double))(AssociatedConformanceWitness + 48);
  v29 = swift_checkMetadataState(0, AssociatedTypeWitness);
  v30 = v28(v29, AssociatedConformanceWitness, v22);
  v31 = (*(double (**)(uint64_t, uint64_t, double))(AssociatedConformanceWitness + 56))(v29, AssociatedConformanceWitness, v22);
  v33 = v32;
  v34 = static UnitPoint.bottom.getter();
  v36 = v35;
  v37 = type metadata accessor for EmptyVisualEffect(0);
  v38 = sub_6FD0(&qword_26C2E8, (uint64_t (*)(uint64_t))&type metadata accessor for EmptyVisualEffect, (uint64_t)&protocol conformance descriptor for EmptyVisualEffect);
  VisualEffect.scaleEffect(_:anchor:)(v37, v38, v30, v34, v36);
  v42[0] = v37;
  v42[1] = v38;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v42, &opaque type descriptor for <<opaque return type of VisualEffect.scaleEffect(_:anchor:)>>, 1);
  VisualEffect.offset(_:)(v3, OpaqueTypeConformance2, v31, v33);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t static CoverStackView.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char v10;

  if ((dispatch thunk of static Equatable.== infix(_:_:)(a1, a2, a3, *(_QWORD *)(a4 + 8)) & 1) != 0)
  {
    v9 = type metadata accessor for CoverStackView(0, a3, a4, v8);
    v10 = *(_BYTE *)(a1 + *(int *)(v9 + 36)) ^ *(_BYTE *)(a2 + *(int *)(v9 + 36)) ^ 1;
  }
  else
  {
    v10 = 0;
  }
  return v10 & 1;
}

uint64_t sub_1CFFE0(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  return swift_getOpaqueTypeConformance2(&v3, &opaque type descriptor for <<opaque return type of CoverStackView.body>>, 1);
}

uint64_t sub_1D0014(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static CoverStackView.== infix(_:_:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

uint64_t sub_1D0020(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 16));
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_1F8E20;
    swift_initStructMetadata(a1, 0, 2, v4, a1 + 32);
    return 0;
  }
  return result;
}

_QWORD *sub_1D0094(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if (v7 <= 7 && (unint64_t)(v6 + 1) <= 0x18 && (*(_DWORD *)(v5 + 80) & 0x100000) == 0)
  {
    (*(void (**)(_QWORD *, _QWORD *))(v5 + 16))(a1, a2);
    *((_BYTE *)v4 + v6) = *((_BYTE *)a2 + v6);
  }
  else
  {
    v10 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v10 + ((v7 + 16) & ~v7));
    swift_retain(v10);
  }
  return v4;
}

uint64_t sub_1D0120(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  *(_BYTE *)(*(_QWORD *)(v5 + 64) + a1) = *(_BYTE *)(*(_QWORD *)(v5 + 64) + a2);
  return a1;
}

uint64_t sub_1D0168(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  *(_BYTE *)(*(_QWORD *)(v5 + 64) + a1) = *(_BYTE *)(*(_QWORD *)(v5 + 64) + a2);
  return a1;
}

uint64_t sub_1D01B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  *(_BYTE *)(*(_QWORD *)(v5 + 64) + a1) = *(_BYTE *)(*(_QWORD *)(v5 + 64) + a2);
  return a1;
}

uint64_t sub_1D01F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  *(_BYTE *)(*(_QWORD *)(v5 + 64) + a1) = *(_BYTE *)(*(_QWORD *)(v5 + 64) + a2);
  return a1;
}

uint64_t sub_1D0240(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v12;
  int v13;
  unsigned int v15;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0xFE)
    v6 = 254;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_21;
  v9 = v7 + 1;
  v10 = 8 * (v7 + 1);
  if ((v7 + 1) > 3)
    goto LABEL_7;
  v12 = ((v8 + ~(-1 << v10)) >> v10) + 1;
  if (HIWORD(v12))
  {
    v11 = *(_DWORD *)(a1 + v9);
    if (v11)
      goto LABEL_14;
  }
  else
  {
    if (v12 <= 0xFF)
    {
      if (v12 < 2)
        goto LABEL_21;
LABEL_7:
      v11 = *(unsigned __int8 *)(a1 + v9);
      if (!*(_BYTE *)(a1 + v9))
        goto LABEL_21;
LABEL_14:
      v13 = (v11 - 1) << v10;
      if (v9 > 3)
        v13 = 0;
      if ((_DWORD)v7 == -1)
        return v6 + v13 + 1;
      if (v9 > 3)
        LODWORD(v9) = 4;
      return ((uint64_t (*)(void))((char *)&loc_1D0300 + 4 * byte_1F8D80[(v9 - 1)]))();
    }
    v11 = *(unsigned __int16 *)(a1 + v9);
    if (*(_WORD *)(a1 + v9))
      goto LABEL_14;
  }
LABEL_21:
  if (v5 >= 0xFE)
    return (*(uint64_t (**)(void))(v4 + 48))();
  v15 = *(unsigned __int8 *)(v7 + a1);
  if (v15 < 2)
    return 0;
  return ((v15 + 2147483646) & 0x7FFFFFFF) + 1;
}

void sub_1D0374(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  size_t v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0xFEu)
    v6 = 254;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = v7 + 1;
  if (a3 > v6)
  {
    if (v8 <= 3)
    {
      v11 = ((a3 - v6 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v11))
      {
        v9 = &dword_4;
      }
      else if (v11 >= 0x100)
      {
        v9 = 2;
      }
      else
      {
        v9 = v11 > 1;
      }
    }
    else
    {
      v9 = &dword_0 + 1;
    }
  }
  else
  {
    v9 = 0;
  }
  if (v6 < a2)
  {
    v10 = ~v6 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v7 != -1)
      {
        v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v12;
          *((_BYTE *)a1 + 2) = BYTE2(v12);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v12;
        }
        else
        {
          *(_BYTE *)a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, v7 + 1);
      *(_DWORD *)a1 = v10;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X12 }
}

uint64_t sub_1D054C(_QWORD *a1)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t OpaqueTypeMetadata2;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t WitnessTable;
  void *v16;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, a1[1], *a1, &protocol requirements base descriptor for CoverStackLayout, &associated type descriptor for CoverStackLayout.CoverLayout);
  v12 = type metadata accessor for Array(255, AssociatedTypeWitness);
  v13 = &type metadata for Double;
  v14 = sub_7EF8(&qword_26C2A8);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v12);
  v16 = &protocol witness table for Double;
  v2 = type metadata accessor for ForEach(255, &v12);
  sub_1CE60C();
  v3 = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v2);
  v4 = type metadata accessor for ZStack(255, v2, v3);
  v5 = type metadata accessor for ModifiedContent(255, v4, &type metadata for _OffsetEffect);
  v6 = type metadata accessor for ModifiedContent(255, v5, &type metadata for _FrameLayout);
  swift_getWitnessTable(&protocol conformance descriptor for ZStack<A>, v4);
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v5);
  v7 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v6);
  v12 = v6;
  v13 = (void *)v7;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(255, &v12, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 0);
  v9 = type metadata accessor for AccessibilityAttachmentModifier(255);
  v10 = type metadata accessor for ModifiedContent(255, OpaqueTypeMetadata2, v9);
  v12 = v6;
  v13 = (void *)v7;
  swift_getOpaqueTypeConformance2(&v12, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
  sub_6FD0((unint64_t *)&qword_25EEA0, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
  return swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v10);
}

uint64_t sub_1D0738()
{
  return 16;
}

__n128 sub_1D0744(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1D0750(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = *(_QWORD *)(type metadata accessor for CoverStackView(0, v5, *(_QWORD *)(v4 + 24), a4) - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (v7 + 32) & ~v7;
  v9 = v8 + *(_QWORD *)(v6 + 64);
  v10 = v7 | 7;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4 + v8, v5);
  return swift_deallocObject(v4, v9, v10);
}

uint64_t sub_1D07BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = *(_QWORD *)(v3 + 16);
  v7 = *(_QWORD *)(v3 + 24);
  v8 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for CoverStackView(0, v6, v7, a2) - 8) + 80);
  return sub_1CEC94(a1, v3 + ((v8 + 32) & ~v8), v6, v7, a3);
}

uint64_t sub_1D0840(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CoverView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1D0884(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for CoverView(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1D08C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = *(_QWORD *)(v4 + 24);
  v7 = *(_QWORD *)(type metadata accessor for CoverStackView(0, v5, v6, a4) - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v8 + 32) & ~v8;
  v10 = *(_QWORD *)(v7 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v6, v5, &protocol requirements base descriptor for CoverStackLayout, &associated type descriptor for CoverStackLayout.CoverLayout);
  v12 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v13 = *(unsigned __int8 *)(v12 + 80);
  v14 = (v9 + v10 + v13) & ~v13;
  v15 = v14 + *(_QWORD *)(v12 + 64);
  v16 = v8 | v13 | 7;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4 + v9, v5);
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v4 + v14, AssociatedTypeWitness);
  return swift_deallocObject(v4, v15, v16);
}

uint64_t sub_1D0990@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(v2 + 16);
  v5 = *(_QWORD *)(v2 + 24);
  v6 = type metadata accessor for CoverStackView(0, v4, v5, a1);
  swift_getAssociatedTypeWitness(0, v5, v4, &protocol requirements base descriptor for CoverStackLayout, &associated type descriptor for CoverStackLayout.CoverLayout);
  return sub_1CFCC4(v6, a2);
}

uint64_t YearInReviewPagedFrame.exposureEventType.getter()
{
  uint64_t v0;

  v0 = type metadata accessor for YearInReviewExposureEvent(0);
  sub_1D0A88();
  return v0;
}

unint64_t sub_1D0A88()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25EF08;
  if (!qword_25EF08)
  {
    v1 = type metadata accessor for YearInReviewExposureEvent(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for YearInReviewExposureEvent, v1);
    atomic_store(result, (unint64_t *)&qword_25EF08);
  }
  return result;
}

uint64_t ListItemView.init(_:contextActionMenuView:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t result;
  _QWORD *v20;

  v8 = (int *)type metadata accessor for ListItemView(0);
  v9 = (_QWORD *)(a4 + v8[5]);
  *v9 = swift_getKeyPath(&unk_1F8F48);
  v10 = sub_5440(&qword_25F548);
  swift_storeEnumTagMultiPayload(v9, v10, 0);
  v11 = (_QWORD *)(a4 + v8[6]);
  *v11 = swift_getKeyPath(&unk_1F8F70);
  v12 = sub_5440(&qword_25F1E8);
  swift_storeEnumTagMultiPayload(v11, v12, 0);
  v13 = a4 + v8[7];
  *(_QWORD *)v13 = swift_getKeyPath(&unk_1F8F98);
  *(_BYTE *)(v13 + 8) = 0;
  v14 = a4 + v8[8];
  *(_QWORD *)v14 = swift_getKeyPath(&unk_1F8FC0);
  *(_BYTE *)(v14 + 8) = 0;
  v15 = a4 + v8[9];
  *(_QWORD *)v15 = swift_getKeyPath(&unk_1F8FE8);
  *(_BYTE *)(v15 + 8) = 0;
  v16 = a4 + v8[10];
  *(_QWORD *)v16 = swift_getKeyPath(&unk_1F9010);
  *(_BYTE *)(v16 + 8) = 0;
  v17 = (_QWORD *)(a4 + v8[11]);
  *v17 = swift_getKeyPath(&unk_1F9038);
  v18 = sub_5440(&qword_25FAA8);
  swift_storeEnumTagMultiPayload(v17, v18, 0);
  result = sub_21C88(a1, a4, type metadata accessor for ListItemViewModel);
  v20 = (_QWORD *)(a4 + v8[12]);
  *v20 = a2;
  v20[1] = a3;
  return result;
}

uint64_t type metadata accessor for ListItemView(uint64_t a1)
{
  uint64_t result;

  result = qword_26C578;
  if (!qword_26C578)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ListItemView);
  return result;
}

double sub_1D0C8C(uint64_t a1, double a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  double *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  double *v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  double v24;
  double v25;
  double v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  double v40;

  v37 = a1;
  v3 = type metadata accessor for FloatingPointRoundingRule(0);
  v38 = *(_QWORD *)(v3 - 8);
  v39 = v3;
  __chkstk_darwin(v3);
  v34 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = type metadata accessor for SizeConstants.Environment(0);
  __chkstk_darwin(v35);
  v6 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Font.TextStyle(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = sub_5440(&qword_26C618);
  __chkstk_darwin(v36);
  v12 = (double *)((char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = sub_5440(&qword_26C620);
  v14 = __chkstk_darwin(v13);
  v16 = (char *)&v33 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v14);
  v19 = (double *)((char *)&v33 - v18);
  sub_1E428(v33, (uint64_t)&v33 + *(int *)(v17 + 28) - v18, type metadata accessor for SizeConstants.Environment);
  *v19 = a2;
  sub_B3D0((uint64_t)v19, (uint64_t)v16, &qword_26C620);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v37, v7);
  sub_B3D0((uint64_t)v16, (uint64_t)v12, &qword_26C620);
  sub_1E428((uint64_t)&v16[*(int *)(v13 + 28)], (uint64_t)v6, type metadata accessor for SizeConstants.Environment);
  v20 = v35;
  v21 = (uint64_t)&v6[*(int *)(v35 + 24)];
  v22 = sub_173CC((uint64_t)v10, v21);
  v23 = type metadata accessor for DynamicTypeSize(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 8))(v21, v23);
  v24 = 1.0;
  if ((*(_QWORD *)&v22 & 0xFFFFFFFFFFFFFLL) == 0)
    v24 = v22;
  if ((~*(_QWORD *)&v22 & 0x7FF0000000000000) == 0)
    v22 = v24;
  sub_B414((uint64_t)v16, &qword_26C620);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  *(double *)((char *)v12 + *(int *)(v36 + 36)) = v22;
  v25 = *v12;
  v26 = v25 * KeyedEncodingContainer.encode<A>(_:forKey:)(v22);
  v27 = KeyedEncodingContainer.encode<A>(_:forKey:)(*(double *)((char *)v12 + *(int *)(v13 + 28) + *(int *)(v20 + 28)));
  v29 = v38;
  v28 = v39;
  v30 = (uint64_t)v34;
  (*(void (**)(char *, _QWORD, uint64_t))(v38 + 104))(v34, enum case for FloatingPointRoundingRule.toNearestOrAwayFromZero(_:), v39);
  v40 = v26;
  sub_13603C(v30, v27);
  v31 = v40;
  (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v30, v28);
  sub_B414((uint64_t)v12, &qword_26C618);
  sub_B414((uint64_t)v19, &qword_26C620);
  return v31;
}

uint64_t ListItemView.body.getter@<X0>(uint64_t a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void (**v61)(char *, char *, uint64_t);
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  double v80;
  double v81;
  double v82;
  double v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t *v93;
  _OWORD *v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t (*v110)(char *, uint64_t);
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t *v123;
  uint64_t v124;
  char *v125;
  unint64_t v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  void (**v131)(char *, char *, uint64_t);
  char *v132;
  uint64_t v133;
  char *v134;
  uint64_t *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  double v162;
  double v163;
  void (*v164)(uint64_t, uint64_t);
  uint64_t v165;
  uint64_t v166;
  double v167;
  double v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  double v172;
  uint64_t v173;
  double v174;
  double v175;
  double v176;
  double v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  unint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t *v209;
  uint64_t v210;
  uint64_t KeyPath;
  char *v212;
  uint64_t v213;
  uint64_t v214;
  char *v215;
  uint64_t v216;
  unint64_t v217;
  void (**v218)(char *, char *, uint64_t);
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  unint64_t v228;
  uint64_t v230;
  char *v231;
  char *v232;
  uint64_t v233;
  uint64_t v234;
  char *v235;
  char *v236;
  char *v237;
  uint64_t *v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  char *v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t (*v257)(char *, uint64_t);
  char *v258;
  char *v259;
  char *v260;
  uint64_t v261;
  char *v262;
  char *v263;
  char *v264;
  void (**v265)(char *, char *, uint64_t);
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  char *v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  char *v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  __int128 v286;
  _QWORD v287[2];
  __int128 v288;
  uint64_t v289;
  __int128 v290;
  __int128 v291;
  __int128 v292;
  __int128 v293;
  __int128 v294;
  __int128 v295;
  __int128 v296;
  __int128 v297;
  __int128 v298;
  __int128 v299;
  __int128 v300;
  __int128 v301;
  __int128 v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  char v306;
  uint64_t (*v307)(uint64_t);
  uint64_t v308;
  char v309;
  double v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  char v314;

  v285 = a1;
  v2 = sub_5440(&qword_26C3C0);
  __chkstk_darwin(v2);
  v257 = (uint64_t (*)(char *, uint64_t))((char *)&v230 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v255 = sub_5440(&qword_26C3C8);
  __chkstk_darwin(v255);
  v259 = (char *)&v230 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v284 = sub_5440(&qword_26C3D0);
  v5 = __chkstk_darwin(v284);
  v258 = (char *)&v230 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v268 = (uint64_t)&v230 - v7;
  v254 = sub_5440(&qword_26C3D8);
  __chkstk_darwin(v254);
  v256 = (uint64_t)&v230 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for SizeConstants.Spacing(0);
  __chkstk_darwin(v9);
  v251 = (uint64_t)&v230 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v253 = sub_5440(&qword_26C3E0);
  __chkstk_darwin(v253);
  v260 = (char *)&v230 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v261 = sub_5440(&qword_26C3E8);
  __chkstk_darwin(v261);
  v262 = (char *)&v230 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_5440(&qword_26C3F0);
  v265 = *(void (***)(char *, char *, uint64_t))(v13 - 8);
  v266 = v13;
  __chkstk_darwin(v13);
  v264 = (char *)&v230 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v279 = sub_5440(&qword_26C3F8);
  v15 = __chkstk_darwin(v279);
  v263 = (char *)&v230 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v267 = (uint64_t)&v230 - v17;
  v281 = sub_5440(&qword_26C400);
  __chkstk_darwin(v281);
  v283 = (uint64_t)&v230 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v276 = sub_5440(&qword_26C408);
  __chkstk_darwin(v276);
  v277 = (uint64_t)&v230 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v282 = sub_5440(&qword_26C410);
  __chkstk_darwin(v282);
  v278 = (char *)&v230 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for AccessibilityChildBehavior(0);
  v274 = *(_QWORD *)(v21 - 8);
  v275 = v21;
  __chkstk_darwin(v21);
  v273 = (char *)&v230 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v280 = sub_5440(&qword_261FD8);
  __chkstk_darwin(v280);
  v238 = (uint64_t *)((char *)&v230 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  v24 = sub_5440(&qword_2618C8);
  v25 = __chkstk_darwin(v24);
  v244 = (uint64_t)&v230 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __chkstk_darwin(v25);
  v250 = (uint64_t)&v230 - v28;
  __chkstk_darwin(v27);
  v252 = (uint64_t)&v230 - v29;
  v30 = sub_5440(&qword_25FAC0);
  v31 = __chkstk_darwin(v30);
  v235 = (char *)&v230 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = __chkstk_darwin(v31);
  v236 = (char *)&v230 - v34;
  __chkstk_darwin(v33);
  v237 = (char *)&v230 - v35;
  v36 = type metadata accessor for FloatingPointRoundingRule(0);
  v248 = *(_QWORD *)(v36 - 8);
  v249 = v36;
  __chkstk_darwin(v36);
  v247 = (char *)&v230 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v246 = type metadata accessor for SizeConstants.Environment(0);
  __chkstk_darwin(v246);
  v243 = (uint64_t)&v230 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = type metadata accessor for Font.TextStyle(0);
  v233 = *(_QWORD *)(v39 - 8);
  v234 = v39;
  v40 = __chkstk_darwin(v39);
  v232 = (char *)&v230 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v40);
  v231 = (char *)&v230 - v42;
  v242 = sub_5440(&qword_262710);
  __chkstk_darwin(v242);
  v245 = (uint64_t)&v230 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = type metadata accessor for SizeConstants(0);
  v45 = __chkstk_darwin(v44);
  v240 = (uint64_t)&v230 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = __chkstk_darwin(v45);
  v241 = (uint64_t)&v230 - v48;
  __chkstk_darwin(v47);
  v50 = (char *)&v230 - v49;
  v272 = type metadata accessor for ListItemView(0);
  v269 = *(_QWORD *)(v272 - 8);
  __chkstk_darwin(v272);
  v270 = v51;
  v271 = (uint64_t)&v230 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = type metadata accessor for DynamicTypeSize(0);
  v239 = *(_QWORD *)(v52 - 8);
  __chkstk_darwin(v52);
  v54 = (char *)&v230 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = sub_5440(&qword_26C418);
  __chkstk_darwin(v55);
  v57 = (char *)&v230 - ((v56 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58 = sub_5440(&qword_26C420);
  v59 = *(_QWORD *)(v58 - 8);
  __chkstk_darwin(v58);
  v61 = (void (**)(char *, char *, uint64_t))((char *)&v230 - ((v60 + 15) & 0xFFFFFFFFFFFFFFF0));
  v62 = sub_5440(&qword_26C428);
  v63 = __chkstk_darwin(v62);
  v64 = __chkstk_darwin(v63);
  *(_QWORD *)&v286 = v1;
  if (!*v1)
  {
    v258 = v50;
    v262 = (char *)v55;
    v263 = v57;
    v264 = v66;
    v265 = v61;
    v266 = v59;
    v267 = (uint64_t)&v230 - v65;
    v261 = v58;
    v268 = v64;
    v106 = sub_31CB4((uint64_t)v54);
    v107 = DynamicTypeSize.isAccessibilitySize.getter(v106);
    v257 = *(uint64_t (**)(char *, uint64_t))(v239 + 8);
    v108 = v257(v54, v52);
    v230 = v52;
    if ((v107 & 1) != 0)
      v109 = static HorizontalAlignment.leading.getter(v108);
    else
      v109 = static VerticalAlignment.center.getter(v108);
    v260 = (char *)v109;
    v145 = v233;
    v146 = v234;
    v147 = v231;
    v148 = (uint64_t)v232;
    LODWORD(v259) = v107 ^ 1;
    v149 = v271;
    sub_1E428(v286, v271, type metadata accessor for ListItemView);
    v150 = *(unsigned __int8 *)(v269 + 80);
    v151 = (v150 + 16) & ~v150;
    v270 = swift_allocObject(&unk_25AE30, v151 + v270, v150 | 7);
    v152 = sub_21C88(v149, v270 + v151, type metadata accessor for ListItemView);
    LODWORD(v271) = static Edge.Set.vertical.getter(v152);
    v153 = (uint64_t)v258;
    sub_3168C((uint64_t)v258);
    (*(void (**)(char *, _QWORD, uint64_t))(v145 + 104))(v147, enum case for Font.TextStyle.body(_:), v146);
    v154 = v241;
    sub_1E428(v153, v241, type metadata accessor for SizeConstants);
    (*(void (**)(uint64_t, char *, uint64_t))(v145 + 16))(v148, v147, v146);
    v155 = v147;
    v156 = v145;
    v157 = v146;
    v158 = v245;
    sub_1E428(v154, v245, type metadata accessor for SizeConstants);
    v159 = v243;
    sub_1E428(v154, v243, type metadata accessor for SizeConstants.Environment);
    v160 = v246;
    v161 = v159 + *(int *)(v246 + 24);
    v162 = sub_173CC(v148, v161);
    v257((char *)v161, v230);
    v163 = 1.0;
    if ((*(_QWORD *)&v162 & 0xFFFFFFFFFFFFFLL) == 0)
      v163 = v162;
    if ((~*(_QWORD *)&v162 & 0x7FF0000000000000) == 0)
      v162 = v163;
    sub_224DC(v154, type metadata accessor for SizeConstants);
    v164 = *(void (**)(uint64_t, uint64_t))(v156 + 8);
    v164(v148, v157);
    v165 = v160;
    v166 = *(int *)(v242 + 36);
    *(double *)(v158 + v166) = v162;
    v164((uint64_t)v155, v157);
    sub_224DC(v153, type metadata accessor for SizeConstants);
    v167 = KeyedEncodingContainer.encode<A>(_:forKey:)(*(double *)(v158 + v166)) * 9.0;
    v168 = KeyedEncodingContainer.encode<A>(_:forKey:)(*(double *)(v158 + *(int *)(v165 + 28)));
    v170 = (uint64_t)v247;
    v169 = v248;
    v171 = v249;
    (*(void (**)(char *, _QWORD, uint64_t))(v248 + 104))(v247, enum case for FloatingPointRoundingRule.toNearestOrAwayFromZero(_:), v249);
    *(double *)&v290 = v167;
    sub_13603C(v170, v168);
    v172 = *(double *)&v290;
    (*(void (**)(uint64_t, uint64_t))(v169 + 8))(v170, v171);
    v173 = sub_B414(v158, &qword_262710);
    v177 = EdgeInsets.init(_all:)(v173, v172, v174, v175, v176);
    v179 = v178;
    v181 = v180;
    v183 = v182;
    v184 = type metadata accessor for ListItemViewModel(0);
    v185 = v252;
    sub_B3D0(v286 + *(int *)(v184 + 40), v252, &qword_2618C8);
    v186 = type metadata accessor for CardInfo(0);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v186 - 8) + 48))(v185, 1, v186) == 1)
    {
      sub_B414(v185, &qword_2618C8);
      v187 = type metadata accessor for UUID(0);
      v188 = (uint64_t)v237;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v187 - 8) + 56))(v237, 1, 1, v187);
    }
    else
    {
      v206 = v185 + *(int *)(v186 + 20);
      v207 = type metadata accessor for UUID(0);
      v208 = *(_QWORD *)(v207 - 8);
      v188 = (uint64_t)v237;
      (*(void (**)(char *, uint64_t, uint64_t))(v208 + 16))(v237, v206, v207);
      sub_224DC(v185, type metadata accessor for CardInfo);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v208 + 56))(v188, 0, 1, v207);
    }
    v209 = v238;
    v210 = v261;
    KeyPath = swift_getKeyPath(&unk_1F9068);
    sub_B3D0(v188, (uint64_t)v209 + *(int *)(v280 + 28), &qword_25FAC0);
    *v209 = KeyPath;
    v212 = v262;
    v213 = (uint64_t)v263;
    sub_B3D0((uint64_t)v209, (uint64_t)&v263[*((int *)v262 + 9)], &qword_261FD8);
    *(_QWORD *)v213 = v260;
    *(_BYTE *)(v213 + 8) = v259 & 1;
    *(_QWORD *)(v213 + 16) = 0;
    *(_BYTE *)(v213 + 24) = 0;
    v214 = v270;
    *(_QWORD *)(v213 + 32) = sub_1D8634;
    *(_QWORD *)(v213 + 40) = v214;
    *(_BYTE *)(v213 + 48) = v271;
    *(double *)(v213 + 56) = v177;
    *(_QWORD *)(v213 + 64) = v179;
    *(_QWORD *)(v213 + 72) = v181;
    *(_QWORD *)(v213 + 80) = v183;
    *(_BYTE *)(v213 + 88) = 0;
    swift_retain(v214);
    sub_B414((uint64_t)v209, &qword_261FD8);
    sub_B414(v188, &qword_25FAC0);
    swift_release(v214);
    v215 = v273;
    static AccessibilityChildBehavior.combine.getter(v216);
    v217 = sub_1D7D58();
    v218 = v265;
    View.accessibilityElement(children:)(v215, v212, v217);
    (*(void (**)(char *, uint64_t))(v274 + 8))(v215, v275);
    sub_B414(v213, &qword_26C418);
    v303 = 0;
    v304 = 0;
    v219 = sub_5440(&qword_25E950);
    State.init(wrappedValue:)(&v290, &v303, v219);
    v286 = v290;
    v220 = v291;
    v221 = v266;
    v222 = (uint64_t)v264;
    (*(void (**)(char *, _QWORD, uint64_t))(v266 + 16))(v264, v218, v210);
    v223 = v268;
    v224 = v222 + *(int *)(v268 + 36);
    *(_OWORD *)v224 = v286;
    *(_QWORD *)(v224 + 16) = v220;
    (*(void (**)(void (**)(char *, char *, uint64_t), uint64_t))(v221 + 8))(v218, v210);
    v135 = &qword_26C428;
    v137 = v267;
    sub_167A4(v222, v267, &qword_26C428);
    v225 = v277;
    sub_B3D0(v137, v277, &qword_26C428);
    swift_storeEnumTagMultiPayload(v225, v276, 0);
    v139 = sub_1D7D34();
    v140 = sub_1D7DFC();
    v141 = (uint64_t)v278;
    v144 = v279;
    v142 = v225;
    v143 = v223;
    goto LABEL_22;
  }
  if (*v1 == 1)
  {
    v268 = v64;
    v67 = v286;
    v68 = sub_1D4454();
    v70 = v69;
    v71 = v271;
    sub_1E428(v67, v271, type metadata accessor for ListItemView);
    v72 = *(unsigned __int8 *)(v269 + 80);
    v73 = (v72 + 16) & ~v72;
    v74 = swift_allocObject(&unk_25AE08, v73 + v270, v72 | 7);
    v75 = sub_21C88(v71, v74 + v73, type metadata accessor for ListItemView);
    v76 = static Edge.Set.all.getter(v75);
    v77 = v240;
    sub_3168C(v240);
    v78 = v251;
    sub_1E428(v77, v251, type metadata accessor for SizeConstants.Environment);
    sub_224DC(v77, type metadata accessor for SizeConstants);
    v79 = sub_224DC(v78, type metadata accessor for SizeConstants.Spacing);
    v83 = EdgeInsets.init(_all:)(v79, 12.0, v80, v81, v82);
    v303 = v68;
    LOBYTE(v304) = v70 & 1;
    v305 = 0;
    v306 = 0;
    v307 = sub_1D830C;
    v308 = v74;
    v309 = v76;
    v310 = v83;
    v311 = v84;
    v312 = v85;
    v313 = v86;
    v314 = 0;
    v87 = _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0();
    sub_884C4(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, &v290, 0.0, 1, 0.0, 1, v87, v88);
    swift_release(v74);
    v89 = _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0();
    v91 = v90;
    v92 = v256;
    sub_1D4F54(v67, v256);
    v93 = (uint64_t *)(v92 + *(int *)(v254 + 36));
    *v93 = v89;
    v93[1] = v91;
    v94 = v260;
    sub_B3D0(v92, (uint64_t)&v260[*(int *)(v253 + 36)], &qword_26C3D8);
    v95 = v301;
    v94[10] = v300;
    v94[11] = v95;
    v94[12] = v302;
    v96 = v297;
    v94[6] = v296;
    v94[7] = v96;
    v97 = v299;
    v94[8] = v298;
    v94[9] = v97;
    v98 = v293;
    v94[2] = v292;
    v94[3] = v98;
    v99 = v295;
    v94[4] = v294;
    v94[5] = v99;
    v100 = v291;
    *v94 = v290;
    v94[1] = v100;
    sub_B414(v92, &qword_26C3D8);
    v101 = type metadata accessor for ListItemViewModel(0);
    v102 = v250;
    sub_B3D0(v67 + *(int *)(v101 + 40), v250, &qword_2618C8);
    v103 = type metadata accessor for CardInfo(0);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v103 - 8) + 48))(v102, 1, v103) == 1)
    {
      sub_B414(v102, &qword_2618C8);
      v104 = type metadata accessor for UUID(0);
      v105 = (uint64_t)v236;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v104 - 8) + 56))(v236, 1, 1, v104);
    }
    else
    {
      v117 = v102 + *(int *)(v103 + 20);
      v118 = type metadata accessor for UUID(0);
      v119 = *(_QWORD *)(v118 - 8);
      v105 = (uint64_t)v236;
      (*(void (**)(char *, uint64_t, uint64_t))(v119 + 16))(v236, v117, v118);
      sub_224DC(v102, type metadata accessor for CardInfo);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v119 + 56))(v105, 0, 1, v118);
    }
    v120 = swift_getKeyPath(&unk_1F9068);
    v122 = v261;
    v121 = (uint64_t)v262;
    v123 = (uint64_t *)&v262[*(int *)(v261 + 36)];
    sub_B3D0(v105, (uint64_t)v123 + *(int *)(v280 + 28), &qword_25FAC0);
    *v123 = v120;
    sub_B3D0((uint64_t)v94, v121, &qword_26C3E0);
    sub_B414(v105, &qword_25FAC0);
    v124 = sub_B414((uint64_t)v94, &qword_26C3E0);
    v125 = v273;
    static AccessibilityChildBehavior.combine.getter(v124);
    v126 = sub_1D7ECC();
    v127 = v264;
    View.accessibilityElement(children:)(v125, v122, v126);
    (*(void (**)(char *, uint64_t))(v274 + 8))(v125, v275);
    sub_B414(v121, &qword_26C3E8);
    v287[0] = 0;
    v287[1] = 0;
    v128 = sub_5440(&qword_25E950);
    State.init(wrappedValue:)(&v288, v287, v128);
    v286 = v288;
    v129 = v289;
    v131 = v265;
    v130 = v266;
    v132 = v263;
    v265[2](v263, v127, v266);
    v133 = v279;
    v134 = &v132[*(int *)(v279 + 36)];
    *(_OWORD *)v134 = v286;
    *((_QWORD *)v134 + 2) = v129;
    ((void (*)(char *, uint64_t))v131[1])(v127, v130);
    v135 = &qword_26C3F8;
    v136 = (uint64_t)v132;
    v137 = v267;
    sub_167A4(v136, v267, &qword_26C3F8);
    v138 = v277;
    sub_B3D0(v137, v277, &qword_26C3F8);
    swift_storeEnumTagMultiPayload(v138, v276, 1);
    v139 = sub_1D7D34();
    v140 = sub_1D7DFC();
    v141 = (uint64_t)v278;
    v142 = v138;
    v143 = v268;
    v144 = v133;
LABEL_22:
    _ConditionalContent<>.init(storage:)(v142, v143, v144, v139, v140);
    v226 = v283;
    sub_B3D0(v141, v283, &qword_26C410);
    swift_storeEnumTagMultiPayload(v226, v281, 0);
    v227 = sub_1D7D10();
    v228 = sub_1D80E0();
    _ConditionalContent<>.init(storage:)(v226, v282, v284, v227, v228);
    sub_B414(v141, &qword_26C410);
    v205 = v137;
    return sub_B414(v205, v135);
  }
  v110 = v257;
  v111 = v286;
  sub_1D523C((uint64_t)v257);
  v112 = type metadata accessor for ListItemViewModel(0);
  v113 = v244;
  sub_B3D0(v111 + *(int *)(v112 + 40), v244, &qword_2618C8);
  v114 = type metadata accessor for CardInfo(0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v114 - 8) + 48))(v113, 1, v114) == 1)
  {
    sub_B414(v113, &qword_2618C8);
    v115 = type metadata accessor for UUID(0);
    v116 = (uint64_t)v235;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v115 - 8) + 56))(v235, 1, 1, v115);
  }
  else
  {
    v189 = v113 + *(int *)(v114 + 20);
    v190 = type metadata accessor for UUID(0);
    v191 = *(_QWORD *)(v190 - 8);
    v116 = (uint64_t)v235;
    (*(void (**)(char *, uint64_t, uint64_t))(v191 + 16))(v235, v189, v190);
    sub_224DC(v113, type metadata accessor for CardInfo);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v191 + 56))(v116, 0, 1, v190);
  }
  v192 = swift_getKeyPath(&unk_1F9068);
  v193 = (uint64_t)v259;
  v194 = (uint64_t *)&v259[*(int *)(v255 + 36)];
  sub_B3D0(v116, (uint64_t)v194 + *(int *)(v280 + 28), &qword_25FAC0);
  *v194 = v192;
  sub_B3D0((uint64_t)v110, v193, &qword_26C3C0);
  sub_B414(v116, &qword_25FAC0);
  sub_B414((uint64_t)v110, &qword_26C3C0);
  v303 = 0;
  v304 = 0;
  v195 = sub_5440(&qword_25E950);
  State.init(wrappedValue:)(&v290, &v303, v195);
  v286 = v290;
  v196 = v291;
  v197 = (uint64_t)v258;
  sub_B3D0(v193, (uint64_t)v258, &qword_26C3C8);
  v198 = v284;
  v199 = v197 + *(int *)(v284 + 36);
  *(_OWORD *)v199 = v286;
  *(_QWORD *)(v199 + 16) = v196;
  sub_B414(v193, &qword_26C3C8);
  v135 = &qword_26C3D0;
  v200 = v197;
  v201 = v268;
  sub_167A4(v200, v268, &qword_26C3D0);
  v202 = v283;
  sub_B3D0(v201, v283, &qword_26C3D0);
  swift_storeEnumTagMultiPayload(v202, v281, 1);
  v203 = sub_1D7D10();
  v204 = sub_1D80E0();
  _ConditionalContent<>.init(storage:)(v202, v282, v198, v203, v204);
  v205 = v201;
  return sub_B414(v205, v135);
}

uint64_t sub_1D242C@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  char v111;
  char v112;
  uint64_t v113;
  double v114;
  double v115;
  double v116;
  double v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char v123;
  double v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  double v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  double v148;
  uint64_t v149;
  double v150;
  void (*v151)(uint64_t, uint64_t);
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  double v156;
  double v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  Class isa;
  uint64_t v163;
  char *v164;
  void (*v165)(_QWORD, _QWORD, _QWORD);
  char *v166;
  char *v167;
  uint64_t v168;
  char *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  double v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t KeyPath;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  double v191;
  double v192;
  double v193;
  double v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  char *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  double v211;
  uint64_t v212;
  double v213;
  void (*v214)(char *, uint64_t);
  uint64_t v215;
  double v216;
  double v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  double v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  char *v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  double v237;
  uint64_t v238;
  double v239;
  void (*v240)(char *, uint64_t);
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  double v244;
  double v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  id v253;
  NSString v254;
  unsigned __int8 v255;
  uint64_t v256;
  uint64_t *v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  id v265;
  NSString v266;
  unsigned __int8 v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t *v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t WitnessTable;
  _QWORD *v276;
  uint64_t v277;
  uint64_t v278;
  char *v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  char *v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  double v292;
  uint64_t v293;
  double v294;
  void (*v295)(uint64_t, uint64_t);
  uint64_t v296;
  double v297;
  double v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  char *v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  double v308;
  uint64_t v309;
  double v310;
  void (*v311)(uint64_t, uint64_t);
  uint64_t v312;
  double v313;
  double v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  int *v326;
  uint64_t v327;
  uint64_t *v328;
  uint64_t v330;
  char *v331;
  uint64_t v332;
  uint64_t v333;
  char *v334;
  char *v335;
  char *v336;
  char *v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  char *v346;
  char *v347;
  char *v348;
  char *v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  char *v356;
  char *v357;
  char *v358;
  uint64_t v359;
  void (*v360)(_QWORD, _QWORD, _QWORD);
  uint64_t v361;
  uint64_t v362;
  char *v363;
  uint64_t v364;
  char *v365;
  uint64_t v366;
  char *v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  char *v375;
  uint64_t v376;
  uint64_t *v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  char *v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  int v402;
  __int128 v403;
  uint64_t v404;
  uint64_t v405;
  _QWORD v406[36];

  v387 = a3;
  v5 = type metadata accessor for ListItemMetadataView(0);
  v383 = *(_QWORD *)(v5 - 8);
  v384 = v5;
  __chkstk_darwin(v5);
  v377 = (uint64_t *)((char *)&v330 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = sub_5440(&qword_26C5E0);
  v8 = __chkstk_darwin(v7);
  v386 = (uint64_t)&v330 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v8);
  v382 = (uint64_t)&v330 - v11;
  v12 = __chkstk_darwin(v10);
  v381 = (uint64_t)&v330 - v13;
  __chkstk_darwin(v12);
  v399 = (uint64_t)&v330 - v14;
  v15 = type metadata accessor for SizeConstants.Spacing(0);
  v16 = __chkstk_darwin(v15);
  v341 = (uint64_t)&v330 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v16);
  v353 = (uint64_t)&v330 - v19;
  v20 = __chkstk_darwin(v18);
  v340 = (uint64_t)&v330 - v21;
  v22 = __chkstk_darwin(v20);
  v352 = (uint64_t)&v330 - v23;
  __chkstk_darwin(v22);
  v370 = (uint64_t)&v330 - v24;
  v25 = sub_5440(&qword_25FE08);
  __chkstk_darwin(v25);
  v367 = (char *)&v330 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = type metadata accessor for LocalizerContext(0);
  v359 = *(_QWORD *)(v27 - 8);
  v360 = (void (*)(_QWORD, _QWORD, _QWORD))v27;
  __chkstk_darwin(v27);
  v358 = (char *)&v330 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = type metadata accessor for LocalizerRequest(0);
  __chkstk_darwin(v29);
  v357 = (char *)&v330 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v366 = type metadata accessor for LocalizedText(0);
  v364 = *(_QWORD *)(v366 - 8);
  __chkstk_darwin(v366);
  v363 = (char *)&v330 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v361 = sub_5440(&qword_25FE10);
  __chkstk_darwin(v361);
  v365 = (char *)&v330 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v362 = sub_5440(&qword_25FE18);
  __chkstk_darwin(v362);
  v369 = (uint64_t)&v330 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v368 = sub_5440(&qword_262698);
  __chkstk_darwin(v368);
  v372 = (uint64_t)&v330 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = sub_5440(&qword_2626A0);
  v36 = __chkstk_darwin(v35);
  v374 = (uint64_t)&v330 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = __chkstk_darwin(v36);
  v371 = (uint64_t)&v330 - v39;
  __chkstk_darwin(v38);
  v373 = (uint64_t)&v330 - v40;
  v41 = sub_5440(&qword_26C5E8);
  v42 = __chkstk_darwin(v41);
  v393 = (uint64_t)&v330 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v42);
  v398 = (uint64_t)&v330 - v44;
  v45 = type metadata accessor for FloatingPointRoundingRule(0);
  v391 = *(_QWORD *)(v45 - 8);
  v392 = v45;
  __chkstk_darwin(v45);
  v390 = (char *)&v330 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  v388 = sub_5440(&qword_2627D0);
  v47 = __chkstk_darwin(v388);
  v338 = (uint64_t)&v330 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = __chkstk_darwin(v47);
  v339 = (uint64_t)&v330 - v50;
  __chkstk_darwin(v49);
  v376 = (uint64_t)&v330 - v51;
  v395 = type metadata accessor for SizeConstants.Environment(0);
  __chkstk_darwin(v395);
  v389 = (uint64_t)&v330 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0);
  v379 = sub_5440(&qword_262710);
  v53 = __chkstk_darwin(v379);
  v351 = (uint64_t)&v330 - ((v54 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = __chkstk_darwin(v53);
  v350 = (uint64_t)&v330 - v56;
  __chkstk_darwin(v55);
  v380 = (uint64_t)&v330 - v57;
  v394 = type metadata accessor for Font.TextStyle(0);
  v400 = *(_QWORD *)(v394 - 8);
  v58 = __chkstk_darwin(v394);
  v337 = (char *)&v330 - ((v59 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = __chkstk_darwin(v58);
  v336 = (char *)&v330 - v61;
  v62 = __chkstk_darwin(v60);
  v335 = (char *)&v330 - v63;
  v64 = __chkstk_darwin(v62);
  v334 = (char *)&v330 - v65;
  v66 = __chkstk_darwin(v64);
  v349 = (char *)&v330 - v67;
  v68 = __chkstk_darwin(v66);
  v348 = (char *)&v330 - v69;
  v70 = __chkstk_darwin(v68);
  v347 = (char *)&v330 - v71;
  v72 = __chkstk_darwin(v70);
  v346 = (char *)&v330 - v73;
  v74 = __chkstk_darwin(v72);
  v356 = (char *)&v330 - v75;
  v76 = __chkstk_darwin(v74);
  v78 = (char *)&v330 - v77;
  __chkstk_darwin(v76);
  v375 = (char *)&v330 - v79;
  v80 = type metadata accessor for SizeConstants(0);
  v81 = __chkstk_darwin(v80);
  v333 = (uint64_t)&v330 - ((v82 + 15) & 0xFFFFFFFFFFFFFFF0);
  v83 = __chkstk_darwin(v81);
  v332 = (uint64_t)&v330 - v84;
  v85 = __chkstk_darwin(v83);
  v344 = (uint64_t)&v330 - v86;
  v87 = __chkstk_darwin(v85);
  v345 = (uint64_t)&v330 - v88;
  v89 = __chkstk_darwin(v87);
  v342 = (uint64_t)&v330 - v90;
  v91 = __chkstk_darwin(v89);
  v343 = (uint64_t)&v330 - v92;
  v93 = __chkstk_darwin(v91);
  v354 = (uint64_t)&v330 - v94;
  v95 = __chkstk_darwin(v93);
  v355 = (uint64_t)&v330 - v96;
  __chkstk_darwin(v95);
  v378 = (uint64_t)&v330 - v97;
  v396 = type metadata accessor for ListItemView(0);
  __chkstk_darwin(v396);
  v99 = (char *)&v330 - ((v98 + 15) & 0xFFFFFFFFFFFFFFF0);
  v100 = sub_5440(&qword_26C5F0);
  __chkstk_darwin(v100);
  v102 = (char *)&v330 - ((v101 + 15) & 0xFFFFFFFFFFFFFFF0);
  v103 = sub_5440(&qword_26C5F8);
  v104 = __chkstk_darwin(v103);
  v385 = (uint64_t)&v330 - ((v105 + 15) & 0xFFFFFFFFFFFFFFF0);
  v106 = __chkstk_darwin(v104);
  v108 = (char *)&v330 - v107;
  __chkstk_darwin(v106);
  v397 = (uint64_t)&v330 - v109;
  v110 = sub_1D411C((uint64_t)v102);
  v111 = static Edge.Set.trailing.getter(v110);
  v401 = a2;
  sub_1E428(a2, (uint64_t)v99, type metadata accessor for ListItemView);
  v402 = a1;
  if ((a1 & 1) != 0)
  {
    v112 = v99[16];
    v113 = sub_224DC((uint64_t)v99, type metadata accessor for ListItemView);
    v117 = 0.0;
    if ((v112 & 1) != 0)
    {
      v118 = v396;
      v119 = v401;
      v331 = v78;
      v120 = (uint64_t)v375;
      sub_3168C(v378);
      v121 = v119 + *(int *)(v118 + 32);
      v122 = *(_QWORD *)v121;
      v123 = *(_BYTE *)(v121 + 8);
      sub_F9E4(*(_QWORD *)v121, v123);
      LOBYTE(v119) = sub_30DB4(v122, v123);
      sub_BE0C(v122, v123);
      v124 = ListItemThumbnailViewModel.unscaledTrailingPadding(isCompact:)(v119 & 1);
      v125 = v400;
      v126 = v394;
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v400 + 104))(v120, enum case for Font.TextStyle.body(_:), v394);
      v127 = v378;
      v117 = sub_1D0C8C(v120, v124);
      v128 = v120;
      v78 = v331;
      (*(void (**)(uint64_t, uint64_t))(v125 + 8))(v128, v126);
      v113 = sub_224DC(v127, type metadata accessor for SizeConstants);
    }
  }
  else
  {
    v113 = sub_224DC((uint64_t)v99, type metadata accessor for ListItemView);
    v117 = 0.0;
  }
  v129 = EdgeInsets.init(_all:)(v113, v117, v114, v115, v116);
  v131 = v130;
  v133 = v132;
  v135 = v134;
  sub_B3D0((uint64_t)v102, (uint64_t)v108, &qword_26C5F0);
  v136 = &v108[*(int *)(v103 + 36)];
  *v136 = v111;
  *((double *)v136 + 1) = v129;
  *((_QWORD *)v136 + 2) = v131;
  *((_QWORD *)v136 + 3) = v133;
  *((_QWORD *)v136 + 4) = v135;
  v136[40] = 0;
  sub_B414((uint64_t)v102, &qword_26C5F0);
  sub_167A4((uint64_t)v108, v397, &qword_26C5F8);
  v137 = v401;
  if ((v402 & 1) != 0)
  {
    v380 = 0;
    v138 = v394;
  }
  else
  {
    v139 = v355;
    sub_3168C(v355);
    v140 = v400;
    v138 = v394;
    (*(void (**)(char *, _QWORD, uint64_t))(v400 + 104))(v78, enum case for Font.TextStyle.body(_:), v394);
    v141 = v354;
    sub_1E428(v139, v354, type metadata accessor for SizeConstants);
    v142 = v78;
    v143 = (uint64_t)v356;
    (*(void (**)(char *, char *, uint64_t))(v140 + 16))(v356, v142, v138);
    v144 = v380;
    sub_1E428(v141, v380, type metadata accessor for SizeConstants);
    v145 = v389;
    sub_1E428(v141, v389, type metadata accessor for SizeConstants.Environment);
    v146 = v395;
    v147 = v145 + *(int *)(v395 + 24);
    v148 = sub_173CC(v143, v147);
    v149 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v149 - 8) + 8))(v147, v149);
    v150 = 1.0;
    if ((*(_QWORD *)&v148 & 0xFFFFFFFFFFFFFLL) == 0)
      v150 = v148;
    if ((~*(_QWORD *)&v148 & 0x7FF0000000000000) == 0)
      v148 = v150;
    sub_224DC(v141, type metadata accessor for SizeConstants);
    v151 = *(void (**)(uint64_t, uint64_t))(v140 + 8);
    v151(v143, v138);
    v152 = *(int *)(v379 + 36);
    *(double *)(v144 + v152) = v148;
    v151((uint64_t)v142, v138);
    v153 = v139;
    v137 = v401;
    sub_224DC(v153, type metadata accessor for SizeConstants);
    v154 = v376;
    sub_1E428(v144, v376, type metadata accessor for SizeConstants.Environment);
    v155 = *(int *)(v388 + 36);
    *(_QWORD *)(v154 + v155) = *(_QWORD *)(v144 + v152);
    sub_B414(v144, &qword_262710);
    v156 = KeyedEncodingContainer.encode<A>(_:forKey:)(*(double *)(v154 + v155)) * 16.0;
    v157 = KeyedEncodingContainer.encode<A>(_:forKey:)(*(double *)(v154 + *(int *)(v146 + 28)));
    v158 = (uint64_t)v390;
    v159 = v391;
    v160 = v392;
    (*(void (**)(char *, _QWORD, uint64_t))(v391 + 104))(v390, enum case for FloatingPointRoundingRule.toNearestOrAwayFromZero(_:), v392);
    *(double *)v406 = v156;
    sub_13603C(v158, v157);
    v380 = v406[0];
    (*(void (**)(uint64_t, uint64_t))(v159 + 8))(v158, v160);
    sub_B414(v154, &qword_2627D0);
  }
  if (*(_BYTE *)(v137 + 16) == 1)
  {
    v161 = sub_5440(&qword_26C600);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v161 - 8) + 56))(v398, 1, 1, v161);
  }
  else
  {
    isa = Int._bridgeToObjectiveC()().super.super.isa;
    v164 = v358;
    v163 = v359;
    v165 = v360;
    (*(void (**)(char *, _QWORD, _QWORD))(v359 + 104))(v358, enum case for LocalizerContext.standalone(_:), v360);
    v166 = v357;
    static LocalizerRequest.decimal(forNumber:minimumFractionDigits:maximumFractionDigits:in:)(isa, 0, 1, 0, 1, v164);

    (*(void (**)(char *, void (*)(_QWORD, _QWORD, _QWORD)))(v163 + 8))(v164, v165);
    v167 = v363;
    LocalizedText.init(_:)(v166);
    v168 = v400;
    v169 = v375;
    v360 = *(void (**)(_QWORD, _QWORD, _QWORD))(v400 + 104);
    v360(v375, enum case for Font.TextStyle.title(_:), v138);
    v170 = enum case for Font.Design.serif (_:);
    v171 = type metadata accessor for Font.Design(0);
    v172 = *(_QWORD *)(v171 - 8);
    v173 = (uint64_t)v367;
    (*(void (**)(char *, uint64_t, uint64_t))(v172 + 104))(v367, v170, v171);
    v174 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v172 + 56))(v173, 0, 1, v171);
    v175 = static Font.Weight.semibold.getter(v174);
    v176 = static Font.system(_:design:weight:)(v169, v173, *(_QWORD *)&v175, 0);
    sub_B414(v173, &qword_25FE08);
    v177 = v138;
    v375 = *(char **)(v168 + 8);
    ((void (*)(char *, uint64_t))v375)(v169, v138);
    KeyPath = swift_getKeyPath(&unk_1F9148);
    v179 = v364;
    v180 = (uint64_t)v365;
    v181 = v366;
    (*(void (**)(char *, char *, uint64_t))(v364 + 16))(v365, v167, v366);
    v182 = (uint64_t *)(v180 + *(int *)(v361 + 36));
    *v182 = KeyPath;
    v182[1] = v176;
    (*(void (**)(char *, uint64_t))(v179 + 8))(v167, v181);
    v183 = _s7BooksUI14ColorConstantsV14vibrantPrimary05SwiftB00C0Vvg_0();
    v184 = swift_getKeyPath(&unk_1F9178);
    v185 = v369;
    sub_B3D0(v180, v369, &qword_25FE10);
    v186 = (uint64_t *)(v185 + *(int *)(v362 + 36));
    *v186 = v184;
    v186[1] = v183;
    v187 = sub_B414(v180, &qword_25FE10);
    LOBYTE(v181) = static Edge.Set.horizontal.getter(v187);
    v188 = v378;
    sub_3168C(v378);
    v189 = v370;
    sub_1E428(v188, v370, type metadata accessor for SizeConstants.Environment);
    sub_224DC(v188, type metadata accessor for SizeConstants);
    v190 = sub_224DC(v189, type metadata accessor for SizeConstants.Spacing);
    v194 = EdgeInsets.init(_all:)(v190, 12.0, v191, v192, v193);
    v196 = v195;
    v198 = v197;
    v200 = v199;
    v201 = v372;
    sub_B3D0(v185, v372, &qword_25FE18);
    v202 = v201 + *(int *)(v368 + 36);
    *(_BYTE *)v202 = v181;
    *(double *)(v202 + 8) = v194;
    *(_QWORD *)(v202 + 16) = v196;
    *(_QWORD *)(v202 + 24) = v198;
    *(_QWORD *)(v202 + 32) = v200;
    *(_BYTE *)(v202 + 40) = 0;
    sub_B414(v185, &qword_25FE18);
    if ((v402 & 1) != 0)
    {
      v203 = v343;
      sub_3168C(v343);
      v204 = v346;
      v360(v346, enum case for Font.TextStyle.body(_:), v177);
      v205 = v342;
      sub_1E428(v203, v342, type metadata accessor for SizeConstants);
      v206 = (uint64_t)v347;
      (*(void (**)(char *, char *, uint64_t))(v400 + 16))(v347, v204, v177);
      v207 = v350;
      sub_1E428(v205, v350, type metadata accessor for SizeConstants);
      v208 = v389;
      sub_1E428(v205, v389, type metadata accessor for SizeConstants.Environment);
      v209 = v395;
      v210 = v208 + *(int *)(v395 + 24);
      v211 = sub_173CC(v206, v210);
      v212 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v212 - 8) + 8))(v210, v212);
      v213 = 1.0;
      if ((*(_QWORD *)&v211 & 0xFFFFFFFFFFFFFLL) == 0)
        v213 = v211;
      if ((~*(_QWORD *)&v211 & 0x7FF0000000000000) == 0)
        v211 = v213;
      sub_224DC(v205, type metadata accessor for SizeConstants);
      v214 = (void (*)(char *, uint64_t))v375;
      ((void (*)(uint64_t, uint64_t))v375)(v206, v177);
      v215 = *(int *)(v379 + 36);
      *(double *)(v207 + v215) = v211;
      v214(v204, v177);
      sub_224DC(v203, type metadata accessor for SizeConstants);
      v216 = KeyedEncodingContainer.encode<A>(_:forKey:)(*(double *)(v207 + v215)) * 44.0;
      v217 = KeyedEncodingContainer.encode<A>(_:forKey:)(*(double *)(v207 + *(int *)(v209 + 28)));
      v218 = (uint64_t)v390;
      v219 = v391;
      v220 = v392;
      (*(void (**)(char *, _QWORD, uint64_t))(v391 + 104))(v390, enum case for FloatingPointRoundingRule.toNearestOrAwayFromZero(_:), v392);
      *(double *)v406 = v216;
      sub_13603C(v218, v217);
      v221 = *(double *)v406;
      (*(void (**)(uint64_t, uint64_t))(v219 + 8))(v218, v220);
      sub_B414(v207, &qword_262710);
      v222 = _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0();
      v223 = v371;
      sub_88678(v221, 0, 0.0, 1, 0.0, 1, 0.0, 1, v371, 0.0, 1, 0.0, 1, v222, v224);
      sub_B414(v201, &qword_262698);
      v225 = v373;
      sub_167A4(v223, v373, &qword_2626A0);
      v226 = 0;
    }
    else
    {
      v227 = _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0();
      v228 = v371;
      sub_88678(0.0, 1, 0.0, 1, 0.0, 1, 0.0, 1, v371, 0.0, 1, 0.0, 1, v227, v229);
      sub_B414(v201, &qword_262698);
      v225 = v373;
      sub_167A4(v228, v373, &qword_2626A0);
      v230 = v345;
      sub_3168C(v345);
      v231 = v348;
      v360(v348, enum case for Font.TextStyle.body(_:), v177);
      v232 = v344;
      sub_1E428(v230, v344, type metadata accessor for SizeConstants);
      v233 = (uint64_t)v349;
      (*(void (**)(char *, char *, uint64_t))(v400 + 16))(v349, v231, v177);
      v234 = v351;
      sub_1E428(v232, v351, type metadata accessor for SizeConstants);
      v235 = v389;
      sub_1E428(v232, v389, type metadata accessor for SizeConstants.Environment);
      v236 = v235 + *(int *)(v395 + 24);
      v237 = sub_173CC(v233, v236);
      v238 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v238 - 8) + 8))(v236, v238);
      v239 = 1.0;
      if ((*(_QWORD *)&v237 & 0xFFFFFFFFFFFFFLL) == 0)
        v239 = v237;
      if ((~*(_QWORD *)&v237 & 0x7FF0000000000000) == 0)
        v237 = v239;
      sub_224DC(v232, type metadata accessor for SizeConstants);
      v240 = (void (*)(char *, uint64_t))v375;
      ((void (*)(uint64_t, uint64_t))v375)(v233, v177);
      v241 = *(int *)(v379 + 36);
      *(double *)(v234 + v241) = v237;
      v240(v231, v177);
      sub_224DC(v230, type metadata accessor for SizeConstants);
      v242 = v376;
      sub_1E428(v234, v376, type metadata accessor for SizeConstants.Environment);
      v243 = *(int *)(v388 + 36);
      *(_QWORD *)(v242 + v243) = *(_QWORD *)(v234 + v241);
      sub_B414(v234, &qword_262710);
      v244 = KeyedEncodingContainer.encode<A>(_:forKey:)(*(double *)(v242 + v243)) * 16.0;
      v245 = KeyedEncodingContainer.encode<A>(_:forKey:)(*(double *)(v242 + *(int *)(v395 + 28)));
      v246 = (uint64_t)v390;
      v247 = v391;
      v248 = v392;
      (*(void (**)(char *, _QWORD, uint64_t))(v391 + 104))(v390, enum case for FloatingPointRoundingRule.toNearestOrAwayFromZero(_:), v392);
      *(double *)v406 = v244;
      sub_13603C(v246, v245);
      v226 = v406[0];
      (*(void (**)(uint64_t, uint64_t))(v247 + 8))(v246, v248);
      sub_B414(v242, &qword_2627D0);
    }
    v249 = v374;
    sub_B3D0(v225, v374, &qword_2626A0);
    v250 = v393;
    sub_B3D0(v249, v393, &qword_2626A0);
    v251 = v250 + *(int *)(sub_5440(&qword_26C610) + 48);
    *(_QWORD *)v251 = v226;
    *(_BYTE *)(v251 + 8) = 0;
    *(_BYTE *)(v251 + 9) = v402 & 1;
    sub_B414(v225, &qword_2626A0);
    sub_B414(v249, &qword_2626A0);
    v252 = sub_5440(&qword_26C600);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v252 - 8) + 56))(v250, 0, 1, v252);
    sub_167A4(v250, v398, &qword_26C5E8);
    v137 = v401;
  }
  if (qword_25DC10 != -1)
    swift_once(&qword_25DC10, sub_AD7D8);
  if (byte_2632E8 == 1
    && (v253 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults"),
        v254 = String._bridgeToObjectiveC()(),
        v255 = objc_msgSend(v253, "integerForKey:", v254),
        v253,
        v254,
        (v255 & 2) != 0))
  {
    v262 = 1;
    v259 = v384;
    v261 = v382;
  }
  else
  {
    sub_ADA04(v137 + 96, (uint64_t)v406);
    v256 = swift_getKeyPath(&unk_1F9110);
    v257 = v377;
    *v377 = v256;
    v258 = sub_5440(&qword_25F200);
    swift_storeEnumTagMultiPayload(v257, v258, 0);
    v259 = v384;
    memcpy((char *)v257 + *(int *)(v384 + 20), v406, 0x118uLL);
    v260 = (uint64_t)v257;
    v261 = v382;
    sub_21C88(v260, v382, type metadata accessor for ListItemMetadataView);
    v262 = 0;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v383 + 56))(v261, v262, 1, v259);
  v263 = v261;
  v264 = v381;
  sub_167A4(v263, v381, &qword_26C5E0);
  sub_167A4(v264, v399, &qword_26C5E0);
  sub_B3D0(v137 + 376, (uint64_t)&v403, &qword_2618D8);
  if (!v404)
  {
    sub_B414((uint64_t)&v403, &qword_2618D8);
LABEL_49:
    v401 = 0;
    v318 = 0;
    goto LABEL_50;
  }
  sub_AC68(&v403, (uint64_t)v406);
  if ((byte_2632E8 & 1) != 0)
  {
    v265 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
    v266 = String._bridgeToObjectiveC()();
    v267 = objc_msgSend(v265, "integerForKey:", v266);

    if ((v267 & 1) != 0)
    {
      _s7BooksUI13AnyPagedFrameVwxx_0(v406);
      goto LABEL_49;
    }
  }
  v268 = v406[3];
  v269 = v406[4];
  sub_5480(v406, v406[3]);
  v270 = (uint64_t *)(v137 + *(int *)(v396 + 48));
  v271 = *v270;
  v272 = v270[1];
  v274 = type metadata accessor for ListItemAccessoryView(0, v268, v269, v273);
  v404 = v274;
  WitnessTable = swift_getWitnessTable(&unk_1E10C8, v274);
  v405 = WitnessTable;
  v276 = sub_C404(&v403);
  sub_1D56D0(v271, v272, v268, v269, (uint64_t)v276);
  __chkstk_darwin(v277);
  v279 = (char *)&v330 - v278;
  (*(void (**)(char *, _QWORD *, uint64_t))(v280 + 16))((char *)&v330 - v278, v276, v274);
  v384 = AnyView.init<A>(_:)(v279, v274, WitnessTable);
  _s7BooksUI13AnyPagedFrameVwxx_0(&v403);
  _s7BooksUI13AnyPagedFrameVwxx_0(v406);
  if ((v402 & 1) != 0)
  {
    v281 = v332;
    sub_3168C(v332);
    v282 = v352;
    sub_1E428(v281, v352, type metadata accessor for SizeConstants.Environment);
    sub_224DC(v281, type metadata accessor for SizeConstants);
    v283 = v400;
    v284 = v334;
    v285 = v394;
    (*(void (**)(char *, _QWORD, uint64_t))(v400 + 104))(v334, enum case for Font.TextStyle.body(_:), v394);
    v286 = v340;
    sub_1E428(v282, v340, type metadata accessor for SizeConstants.Spacing);
    v287 = (uint64_t)v335;
    (*(void (**)(char *, char *, uint64_t))(v283 + 16))(v335, v284, v285);
    v288 = v339;
    sub_1E428(v286, v339, type metadata accessor for SizeConstants.Spacing);
    v289 = v389;
    sub_1E428(v286, v389, type metadata accessor for SizeConstants.Environment);
    v290 = v395;
    v291 = v289 + *(int *)(v395 + 24);
    v292 = sub_173CC(v287, v291);
    v293 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v293 - 8) + 8))(v291, v293);
    v294 = 1.0;
    if ((*(_QWORD *)&v292 & 0xFFFFFFFFFFFFFLL) == 0)
      v294 = v292;
    if ((~*(_QWORD *)&v292 & 0x7FF0000000000000) == 0)
      v292 = v294;
    sub_224DC(v286, type metadata accessor for SizeConstants.Spacing);
    v295 = *(void (**)(uint64_t, uint64_t))(v283 + 8);
    v295(v287, v285);
    v296 = *(int *)(v388 + 36);
    *(double *)(v288 + v296) = v292;
    v295((uint64_t)v284, v285);
    sub_224DC(v352, type metadata accessor for SizeConstants.Spacing);
    v297 = KeyedEncodingContainer.encode<A>(_:forKey:)(*(double *)(v288 + v296));
    v298 = 8.0;
  }
  else
  {
    v299 = v333;
    sub_3168C(v333);
    v300 = v353;
    sub_1E428(v299, v353, type metadata accessor for SizeConstants.Environment);
    sub_224DC(v299, type metadata accessor for SizeConstants);
    v301 = v400;
    v302 = v336;
    v303 = v394;
    (*(void (**)(char *, _QWORD, uint64_t))(v400 + 104))(v336, enum case for Font.TextStyle.body(_:), v394);
    v304 = v341;
    sub_1E428(v300, v341, type metadata accessor for SizeConstants.Spacing);
    v305 = (uint64_t)v337;
    (*(void (**)(char *, char *, uint64_t))(v301 + 16))(v337, v302, v303);
    v288 = v338;
    sub_1E428(v304, v338, type metadata accessor for SizeConstants.Spacing);
    v306 = v389;
    sub_1E428(v304, v389, type metadata accessor for SizeConstants.Environment);
    v290 = v395;
    v307 = v306 + *(int *)(v395 + 24);
    v308 = sub_173CC(v305, v307);
    v309 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v309 - 8) + 8))(v307, v309);
    v310 = 1.0;
    if ((*(_QWORD *)&v308 & 0xFFFFFFFFFFFFFLL) == 0)
      v310 = v308;
    if ((~*(_QWORD *)&v308 & 0x7FF0000000000000) == 0)
      v308 = v310;
    sub_224DC(v304, type metadata accessor for SizeConstants.Spacing);
    v311 = *(void (**)(uint64_t, uint64_t))(v301 + 8);
    v311(v305, v303);
    v312 = *(int *)(v388 + 36);
    *(double *)(v288 + v312) = v308;
    v311((uint64_t)v302, v303);
    sub_224DC(v353, type metadata accessor for SizeConstants.Spacing);
    v297 = KeyedEncodingContainer.encode<A>(_:forKey:)(*(double *)(v288 + v312));
    v298 = 16.0;
  }
  v313 = v297 * v298;
  v314 = KeyedEncodingContainer.encode<A>(_:forKey:)(*(double *)(v288 + *(int *)(v290 + 28)));
  v316 = (uint64_t)v390;
  v315 = v391;
  v317 = v392;
  (*(void (**)(char *, _QWORD, uint64_t))(v391 + 104))(v390, enum case for FloatingPointRoundingRule.toNearestOrAwayFromZero(_:), v392);
  *(double *)v406 = v313;
  sub_13603C(v316, v314);
  v401 = v406[0];
  (*(void (**)(uint64_t, uint64_t))(v315 + 8))(v316, v317);
  sub_B414(v288, &qword_2627D0);
  v318 = v384;
LABEL_50:
  v319 = v397;
  v320 = v385;
  sub_B3D0(v397, v385, &qword_26C5F8);
  v321 = v398;
  v322 = v393;
  sub_B3D0(v398, v393, &qword_26C5E8);
  v323 = v399;
  v324 = v386;
  sub_B3D0(v399, v386, &qword_26C5E0);
  v325 = v387;
  sub_B3D0(v320, v387, &qword_26C5F8);
  v326 = (int *)sub_5440(&qword_26C608);
  v327 = v325 + v326[12];
  *(_QWORD *)v327 = v380;
  *(_BYTE *)(v327 + 8) = 0;
  *(_BYTE *)(v327 + 9) = v402 & 1;
  sub_B3D0(v322, v325 + v326[16], &qword_26C5E8);
  sub_B3D0(v324, v325 + v326[20], &qword_26C5E0);
  v328 = (uint64_t *)(v325 + v326[24]);
  *v328 = v401;
  v328[1] = 0;
  v328[2] = v318;
  swift_retain(v318);
  sub_B414(v323, &qword_26C5E0);
  sub_B414(v321, &qword_26C5E8);
  sub_B414(v319, &qword_26C5F8);
  swift_release(v318);
  sub_B414(v324, &qword_26C5E0);
  sub_B414(v322, &qword_26C5E8);
  return sub_B414(v320, &qword_26C5F8);
}

uint64_t sub_1D411C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  id v12;
  NSString v13;
  unsigned __int8 v14;
  char *v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  char v30;
  __int128 v31;
  uint64_t v32;
  char v33;
  double v34;
  double v35;
  double v36;
  double v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int16 v51;

  v3 = type metadata accessor for ListItemThumbnailView(0);
  v4 = __chkstk_darwin(v3);
  v6 = (char *)&v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v44 - v7;
  v9 = sub_5440(&qword_26C628);
  __chkstk_darwin(v9);
  v11 = (char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_25DC10 != -1)
    swift_once(&qword_25DC10, sub_AD7D8);
  if (byte_2632E8 == 1
    && (v12 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults"),
        v13 = String._bridgeToObjectiveC()(),
        v14 = objc_msgSend(v12, "integerForKey:", v13),
        v12,
        v13,
        (v14 & 4) != 0))
  {
    v45 = static Color.indigo.getter();
    v24 = _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0();
    v26 = _FrameLayout.init(width:height:alignment:)(&v47, 0x404A000000000000, 0, 0x4054400000000000, 0, v24, v25);
    v27 = v47;
    v28 = BYTE8(v47);
    v29 = v48;
    v30 = BYTE8(v48);
    v46 = a1;
    v31 = v49;
    v32 = static Edge.Set.trailing.getter(v26);
    v33 = v32;
    v37 = EdgeInsets.init(_all:)(v32, 12.0, v34, v35, v36);
    *(_QWORD *)v11 = v45;
    *((_QWORD *)v11 + 1) = v27;
    v11[16] = v28;
    *((_QWORD *)v11 + 3) = v29;
    v11[32] = v30;
    *(_OWORD *)(v11 + 40) = v31;
    v11[56] = v33;
    *((double *)v11 + 8) = v37;
    *((_QWORD *)v11 + 9) = v38;
    *((_QWORD *)v11 + 10) = v39;
    *((_QWORD *)v11 + 11) = v40;
    v11[96] = 0;
    swift_storeEnumTagMultiPayload(v11, v9, 0);
    v41 = sub_5440(&qword_26C630);
    v42 = sub_1DADBC();
    v43 = sub_1DAE8C();
    return _ConditionalContent<>.init(storage:)(v11, v41, v3, v42, v43);
  }
  else
  {
    sub_2F4C8(v1 + 24, (uint64_t)&v47);
    v15 = &v6[*(int *)(v3 + 20)];
    *(_QWORD *)v15 = swift_getKeyPath(&unk_1F8F48);
    v16 = sub_5440(&qword_25F548);
    swift_storeEnumTagMultiPayload(v15, v16, 0);
    v17 = &v6[*(int *)(v3 + 24)];
    *(_QWORD *)v17 = swift_getKeyPath(&unk_1F8FC0);
    v17[8] = 0;
    *((_WORD *)v6 + 32) = v51;
    v18 = v50;
    *((_OWORD *)v6 + 2) = v49;
    *((_OWORD *)v6 + 3) = v18;
    v19 = v48;
    *(_OWORD *)v6 = v47;
    *((_OWORD *)v6 + 1) = v19;
    sub_21C88((uint64_t)v6, (uint64_t)v8, type metadata accessor for ListItemThumbnailView);
    sub_1E428((uint64_t)v8, (uint64_t)v11, type metadata accessor for ListItemThumbnailView);
    swift_storeEnumTagMultiPayload(v11, v9, 1);
    v20 = sub_5440(&qword_26C630);
    v21 = sub_1DADBC();
    v22 = sub_1DAE8C();
    _ConditionalContent<>.init(storage:)(v11, v20, v3, v21, v22);
    return sub_224DC((uint64_t)v8, type metadata accessor for ListItemThumbnailView);
  }
}

uint64_t sub_1D4454()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v18;

  v1 = v0;
  v2 = type metadata accessor for DynamicTypeSize(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for ListItemView(0);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = v1 + *(int *)(v7 + 32);
  v11 = *(_QWORD *)v10;
  v12 = *(_BYTE *)(v10 + 8);
  sub_F9E4(*(_QWORD *)v10, v12);
  v13 = sub_30DB4(v11, v12);
  sub_BE0C(v11, v12);
  sub_1E428(v1, (uint64_t)v9, type metadata accessor for ListItemView);
  if ((v13 & 1) != 0)
  {
    v14 = sub_31CB4((uint64_t)v5);
    v15 = DynamicTypeSize.isAccessibilitySize.getter(v14);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    v16 = sub_224DC((uint64_t)v9, type metadata accessor for ListItemView);
    if ((v15 & 1) != 0)
      return static HorizontalAlignment.leading.getter(v16);
  }
  else
  {
    v16 = sub_224DC((uint64_t)v9, type metadata accessor for ListItemView);
  }
  return static VerticalAlignment.center.getter(v16);
}

uint64_t sub_1D45C0@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  id v45;
  NSString v46;
  unsigned __int8 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t WitnessTable;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  double v74;
  uint64_t v75;
  double v76;
  void (*v77)(uint64_t, uint64_t);
  uint64_t v78;
  double v79;
  double v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  double v90;
  uint64_t v91;
  double v92;
  void (*v93)(uint64_t, uint64_t);
  uint64_t v94;
  double v95;
  double v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  char *v115;
  char *v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  int v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  __int128 v128;
  uint64_t v129;
  uint64_t v130;
  _QWORD v131[3];
  uint64_t v132;
  uint64_t v133;

  v123 = a1;
  v5 = type metadata accessor for FloatingPointRoundingRule(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v103 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for SizeConstants.Environment(0);
  __chkstk_darwin(v9);
  v124 = (uint64_t)&v103 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Font.TextStyle(0);
  v126 = *(_QWORD *)(v11 - 8);
  v127 = v11;
  v12 = __chkstk_darwin(v11);
  v117 = (char *)&v103 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v12);
  v116 = (char *)&v103 - v15;
  v16 = __chkstk_darwin(v14);
  v115 = (char *)&v103 - v17;
  __chkstk_darwin(v16);
  v114 = (char *)&v103 - v18;
  v125 = sub_5440(&qword_2627D0);
  v19 = __chkstk_darwin(v125);
  v118 = (uint64_t)&v103 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v119 = (uint64_t)&v103 - v21;
  v22 = type metadata accessor for SizeConstants.Spacing(0);
  v23 = __chkstk_darwin(v22);
  v113 = (uint64_t)&v103 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = __chkstk_darwin(v23);
  v122 = (uint64_t)&v103 - v26;
  v27 = __chkstk_darwin(v25);
  v112 = (uint64_t)&v103 - v28;
  __chkstk_darwin(v27);
  v121 = (uint64_t)&v103 - v29;
  v30 = type metadata accessor for SizeConstants(0);
  v31 = __chkstk_darwin(v30);
  v111 = (uint64_t)&v103 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v31);
  v110 = (uint64_t)&v103 - v33;
  v34 = sub_5440(&qword_26C660);
  v35 = __chkstk_darwin(v34);
  v37 = (char *)&v103 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = __chkstk_darwin(v35);
  v40 = (char *)&v103 - v39;
  v41 = __chkstk_darwin(v38);
  v43 = (char *)&v103 - v42;
  *(_QWORD *)v40 = static VerticalAlignment.center.getter(v41);
  *((_QWORD *)v40 + 1) = 0;
  v40[16] = 0;
  v44 = sub_5440(&qword_26C668);
  sub_1D6CBC(a2, (uint64_t)&v40[*(int *)(v44 + 44)]);
  sub_167A4((uint64_t)v40, (uint64_t)v43, &qword_26C660);
  sub_B3D0(a2 + 376, (uint64_t)&v128, &qword_2618D8);
  if (!v129)
  {
    sub_B414((uint64_t)&v128, &qword_2618D8);
LABEL_20:
    v100 = 0;
    v61 = 0;
    goto LABEL_21;
  }
  v120 = v43;
  sub_AC68(&v128, (uint64_t)v131);
  if (qword_25DC10 != -1)
    swift_once(&qword_25DC10, sub_AD7D8);
  if ((byte_2632E8 & 1) != 0)
  {
    v45 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
    v46 = String._bridgeToObjectiveC()();
    v47 = objc_msgSend(v45, "integerForKey:", v46);

    if ((v47 & 1) != 0)
    {
      _s7BooksUI13AnyPagedFrameVwxx_0(v131);
      v43 = v120;
      goto LABEL_20;
    }
  }
  v104 = v37;
  v105 = v9;
  v106 = v8;
  v107 = v6;
  v108 = v5;
  v109 = a3;
  v48 = v132;
  v49 = v133;
  sub_5480(v131, v132);
  v50 = (uint64_t *)(a2 + *(int *)(type metadata accessor for ListItemView(0) + 48));
  v52 = *v50;
  v51 = v50[1];
  v54 = type metadata accessor for ListItemAccessoryView(0, v48, v49, v53);
  v129 = v54;
  WitnessTable = swift_getWitnessTable(&unk_1E10C8, v54);
  v130 = WitnessTable;
  v56 = sub_C404(&v128);
  sub_1D56D0(v52, v51, v48, v49, (uint64_t)v56);
  __chkstk_darwin(v57);
  v59 = (char *)&v103 - v58;
  (*(void (**)(char *, _QWORD *, uint64_t))(v60 + 16))((char *)&v103 - v58, v56, v54);
  v61 = AnyView.init<A>(_:)(v59, v54, WitnessTable);
  _s7BooksUI13AnyPagedFrameVwxx_0(&v128);
  _s7BooksUI13AnyPagedFrameVwxx_0(v131);
  if ((v123 & 1) != 0)
  {
    v62 = v110;
    sub_3168C(v110);
    v63 = v121;
    sub_1E428(v62, v121, type metadata accessor for SizeConstants.Environment);
    sub_224DC(v62, type metadata accessor for SizeConstants);
    v64 = v126;
    v65 = v127;
    v66 = v114;
    (*(void (**)(char *, _QWORD, uint64_t))(v126 + 104))(v114, enum case for Font.TextStyle.body(_:), v127);
    v67 = v63;
    v68 = v112;
    sub_1E428(v67, v112, type metadata accessor for SizeConstants.Spacing);
    v69 = (uint64_t)v115;
    (*(void (**)(char *, char *, uint64_t))(v64 + 16))(v115, v66, v65);
    v70 = v119;
    sub_1E428(v68, v119, type metadata accessor for SizeConstants.Spacing);
    v71 = v124;
    sub_1E428(v68, v124, type metadata accessor for SizeConstants.Environment);
    v72 = v105;
    v73 = v71 + *(int *)(v105 + 24);
    v74 = sub_173CC(v69, v73);
    v75 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v75 - 8) + 8))(v73, v75);
    v76 = 1.0;
    if ((*(_QWORD *)&v74 & 0xFFFFFFFFFFFFFLL) == 0)
      v76 = v74;
    if ((~*(_QWORD *)&v74 & 0x7FF0000000000000) == 0)
      v74 = v76;
    sub_224DC(v68, type metadata accessor for SizeConstants.Spacing);
    v77 = *(void (**)(uint64_t, uint64_t))(v64 + 8);
    v77(v69, v65);
    v78 = *(int *)(v125 + 36);
    *(double *)(v70 + v78) = v74;
    v77((uint64_t)v66, v65);
    sub_224DC(v121, type metadata accessor for SizeConstants.Spacing);
    v79 = KeyedEncodingContainer.encode<A>(_:forKey:)(*(double *)(v70 + v78));
    v80 = 8.0;
  }
  else
  {
    v81 = v111;
    sub_3168C(v111);
    v82 = v122;
    sub_1E428(v81, v122, type metadata accessor for SizeConstants.Environment);
    sub_224DC(v81, type metadata accessor for SizeConstants);
    v83 = v126;
    v84 = v127;
    v85 = v116;
    (*(void (**)(char *, _QWORD, uint64_t))(v126 + 104))(v116, enum case for Font.TextStyle.body(_:), v127);
    v86 = v113;
    sub_1E428(v82, v113, type metadata accessor for SizeConstants.Spacing);
    v87 = (uint64_t)v117;
    (*(void (**)(char *, char *, uint64_t))(v83 + 16))(v117, v85, v84);
    v70 = v118;
    sub_1E428(v86, v118, type metadata accessor for SizeConstants.Spacing);
    v88 = v124;
    sub_1E428(v86, v124, type metadata accessor for SizeConstants.Environment);
    v72 = v105;
    v89 = v88 + *(int *)(v105 + 24);
    v90 = sub_173CC(v87, v89);
    v91 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v91 - 8) + 8))(v89, v91);
    v92 = 1.0;
    if ((*(_QWORD *)&v90 & 0xFFFFFFFFFFFFFLL) == 0)
      v92 = v90;
    if ((~*(_QWORD *)&v90 & 0x7FF0000000000000) == 0)
      v90 = v92;
    sub_224DC(v86, type metadata accessor for SizeConstants.Spacing);
    v93 = *(void (**)(uint64_t, uint64_t))(v83 + 8);
    v93(v87, v84);
    v94 = *(int *)(v125 + 36);
    *(double *)(v70 + v94) = v90;
    v93((uint64_t)v85, v84);
    sub_224DC(v122, type metadata accessor for SizeConstants.Spacing);
    v79 = KeyedEncodingContainer.encode<A>(_:forKey:)(*(double *)(v70 + v94));
    v80 = 16.0;
  }
  v95 = v79 * v80;
  v96 = KeyedEncodingContainer.encode<A>(_:forKey:)(*(double *)(v70 + *(int *)(v72 + 28)));
  v97 = v107;
  v98 = (uint64_t)v106;
  v99 = v108;
  (*(void (**)(char *, _QWORD, uint64_t))(v107 + 104))(v106, enum case for FloatingPointRoundingRule.toNearestOrAwayFromZero(_:), v108);
  *(double *)v131 = v95;
  sub_13603C(v98, v96);
  v100 = v131[0];
  a3 = v109;
  v37 = v104;
  (*(void (**)(uint64_t, uint64_t))(v97 + 8))(v98, v99);
  sub_B414(v70, &qword_2627D0);
  v43 = v120;
LABEL_21:
  sub_B3D0((uint64_t)v43, (uint64_t)v37, &qword_26C660);
  sub_B3D0((uint64_t)v37, a3, &qword_26C660);
  v101 = (_QWORD *)(a3 + *(int *)(sub_5440(&qword_26C670) + 48));
  *v101 = v100;
  v101[1] = 0;
  v101[2] = v61;
  swift_retain(v61);
  sub_B414((uint64_t)v43, &qword_26C660);
  swift_release(v61);
  return sub_B414((uint64_t)v37, &qword_26C660);
}

uint64_t sub_1D4F54@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  uint64_t KeyPath;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;

  v38 = a2;
  v3 = type metadata accessor for DefaultBlendModeModifier(0);
  __chkstk_darwin(v3);
  v37 = (uint64_t *)((char *)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = type metadata accessor for ColorConstants(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v8);
  v10 = (_OWORD *)((char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = sub_5440(&qword_260860);
  __chkstk_darwin(v11);
  v13 = (char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = sub_5440(&qword_26C658);
  __chkstk_darwin(v36);
  v15 = (char *)&v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = (char *)v10 + *(int *)(v8 + 20);
  v17 = enum case for RoundedCornerStyle.continuous(_:);
  v18 = type metadata accessor for RoundedCornerStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 104))(v16, v17, v18);
  __asm { FMOV            V0.2D, #12.0 }
  *v10 = _Q0;
  v24 = a1 + *(int *)(type metadata accessor for ListItemView(0) + 28);
  v25 = *(_QWORD *)v24;
  v26 = *(_BYTE *)(v24 + 8);
  sub_F9E4(*(_QWORD *)v24, v26);
  v27 = sub_30DB4(v25, v26);
  sub_BE0C(v25, v26);
  _s7BooksUI18BuyButtonExternalsV6colorsAA14ColorConstantsVvg_0((uint64_t)v7);
  if ((v27 & 1) != 0)
  {
    v28 = ColorConstants.vibrantButtonBackground.getter();
  }
  else
  {
    v29 = objc_msgSend((id)objc_opt_self(UIColor), "secondarySystemBackgroundColor");
    v28 = Color.init(_:)(v29);
  }
  v30 = v28;
  sub_224DC((uint64_t)v7, type metadata accessor for ColorConstants);
  sub_1E428((uint64_t)v10, (uint64_t)v13, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  *(_QWORD *)&v13[*(int *)(v11 + 52)] = v30;
  *(_WORD *)&v13[*(int *)(v11 + 56)] = 256;
  sub_224DC((uint64_t)v10, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  KeyPath = swift_getKeyPath(&unk_1F91A8);
  v32 = (uint64_t)v37;
  *v37 = KeyPath;
  v33 = sub_5440(&qword_25F208);
  swift_storeEnumTagMultiPayload(v32, v33, 0);
  sub_21C88(v32, (uint64_t)&v15[*(int *)(v36 + 36)], type metadata accessor for DefaultBlendModeModifier);
  sub_167A4((uint64_t)v13, (uint64_t)v15, &qword_260860);
  return sub_167A4((uint64_t)v15, v38, &qword_26C658);
}

uint64_t sub_1D523C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v36 = a1;
  v37 = sub_5440(&qword_26C518);
  __chkstk_darwin(v37);
  v3 = (char *)&v34 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_5440(&qword_26C508);
  __chkstk_darwin(v4);
  v6 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = sub_5440(&qword_26C680);
  __chkstk_darwin(v34);
  v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_5440(&qword_26C688);
  __chkstk_darwin(v9);
  v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = sub_5440(&qword_26C4E8);
  __chkstk_darwin(v35);
  v13 = (char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_5440(&qword_26C4F8);
  __chkstk_darwin(v14);
  v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_1D5778();
  if ((_BYTE)v17)
  {
    if (v17 == 1)
    {
      *(_QWORD *)v6 = static HorizontalAlignment.leading.getter(v17);
      *((_QWORD *)v6 + 1) = 0;
      v6[16] = 0;
      v18 = sub_5440(&qword_26C698);
      sub_1D655C(v1, (uint64_t)&v6[*(int *)(v18 + 44)]);
      sub_B3D0((uint64_t)v6, (uint64_t)v11, &qword_26C508);
      swift_storeEnumTagMultiPayload(v11, v9, 1);
      v19 = sub_7FD8(&qword_26C4F0, &qword_26C4F8, (uint64_t)&protocol conformance descriptor for HStack<A>);
      v20 = sub_7FD8(&qword_26C500, &qword_26C508, (uint64_t)&protocol conformance descriptor for VStack<A>);
      _ConditionalContent<>.init(storage:)(v11, v14, v4, v19, v20);
      sub_B3D0((uint64_t)v13, (uint64_t)v8, &qword_26C4E8);
      swift_storeEnumTagMultiPayload(v8, v34, 0);
      v21 = sub_1D826C();
      v22 = sub_7FD8(&qword_26C510, &qword_26C518, (uint64_t)&protocol conformance descriptor for VStack<A>);
      _ConditionalContent<>.init(storage:)(v8, v35, v37, v21, v22);
      sub_B414((uint64_t)v13, &qword_26C4E8);
      v23 = (uint64_t)v6;
      v24 = &qword_26C508;
    }
    else
    {
      *(_QWORD *)v3 = static HorizontalAlignment.leading.getter(v17);
      *((_QWORD *)v3 + 1) = 0;
      v3[16] = 0;
      v30 = sub_5440(&qword_26C690);
      sub_1D722C(v1, (uint64_t)&v3[*(int *)(v30 + 44)]);
      sub_B3D0((uint64_t)v3, (uint64_t)v8, &qword_26C518);
      swift_storeEnumTagMultiPayload(v8, v34, 1);
      v31 = sub_1D826C();
      v32 = sub_7FD8(&qword_26C510, &qword_26C518, (uint64_t)&protocol conformance descriptor for VStack<A>);
      _ConditionalContent<>.init(storage:)(v8, v35, v37, v31, v32);
      v23 = (uint64_t)v3;
      v24 = &qword_26C518;
    }
  }
  else
  {
    *(_QWORD *)v16 = static VerticalAlignment.top.getter(v17);
    *((_QWORD *)v16 + 1) = 0;
    v16[16] = 0;
    v25 = sub_5440(&qword_26C6A0);
    sub_1D5958(v1, (uint64_t)&v16[*(int *)(v25 + 44)]);
    sub_B3D0((uint64_t)v16, (uint64_t)v11, &qword_26C4F8);
    swift_storeEnumTagMultiPayload(v11, v9, 0);
    v26 = sub_7FD8(&qword_26C4F0, &qword_26C4F8, (uint64_t)&protocol conformance descriptor for HStack<A>);
    v27 = sub_7FD8(&qword_26C500, &qword_26C508, (uint64_t)&protocol conformance descriptor for VStack<A>);
    _ConditionalContent<>.init(storage:)(v11, v14, v4, v26, v27);
    sub_B3D0((uint64_t)v13, (uint64_t)v8, &qword_26C4E8);
    swift_storeEnumTagMultiPayload(v8, v34, 0);
    v28 = sub_1D826C();
    v29 = sub_7FD8(&qword_26C510, &qword_26C518, (uint64_t)&protocol conformance descriptor for VStack<A>);
    _ConditionalContent<>.init(storage:)(v8, v35, v37, v28, v29);
    sub_B414((uint64_t)v13, &qword_26C4E8);
    v23 = (uint64_t)v16;
    v24 = &qword_26C4F8;
  }
  return sub_B414(v23, v24);
}

double sub_1D56D0@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  double result;
  uint64_t v15;

  __chkstk_darwin(a1);
  v12 = (char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v13 + 16))(v12, v5);
  sub_11904((uint64_t)v12, a1, a2, a3, a4, a5);
  *(_QWORD *)&result = swift_retain(a2).n128_u64[0];
  return result;
}

uint64_t sub_1D5778()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  void (*v12)(char *, _QWORD, uint64_t);
  char v13;
  void (*v14)(char *, uint64_t);
  char v16;
  void (*v17)(char *, uint64_t);
  char v18;
  uint64_t v19;

  v1 = type metadata accessor for DynamicTypeSize(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = __chkstk_darwin(v1);
  v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v7 = (char *)&v19 - v6;
  v8 = v0 + *(int *)(type metadata accessor for ListItemView(0) + 32);
  v9 = *(_QWORD *)v8;
  v10 = *(_BYTE *)(v8 + 8);
  sub_F9E4(*(_QWORD *)v8, v10);
  v11 = sub_30DB4(v9, v10);
  sub_BE0C(v9, v10);
  sub_31CB4((uint64_t)v7);
  v12 = *(void (**)(char *, _QWORD, uint64_t))(v2 + 104);
  if ((v11 & 1) != 0)
  {
    v12(v5, enum case for DynamicTypeSize.accessibility1(_:), v1);
    v13 = static DynamicTypeSize.< infix(_:_:)(v7, v5);
    v14 = *(void (**)(char *, uint64_t))(v2 + 8);
    v14(v5, v1);
    v14(v7, v1);
    if ((v13 & 1) != 0)
    {
      return 0;
    }
    else
    {
      sub_31CB4((uint64_t)v7);
      v12(v5, enum case for DynamicTypeSize.accessibility3(_:), v1);
      v18 = static DynamicTypeSize.< infix(_:_:)(v7, v5);
      v14(v5, v1);
      v14(v7, v1);
      if ((v18 & 1) != 0)
        return 1;
      else
        return 2;
    }
  }
  else
  {
    v12(v5, enum case for DynamicTypeSize.accessibility5(_:), v1);
    v16 = static DynamicTypeSize.< infix(_:_:)(v7, v5);
    v17 = *(void (**)(char *, uint64_t))(v2 + 8);
    v17(v5, v1);
    v17(v7, v1);
    return (v16 & 1) == 0;
  }
}

uint64_t sub_1D5958@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  uint64_t v31;
  double v32;
  double v33;
  double v34;
  double v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  double *v42;
  uint64_t v43;
  uint64_t v44;
  _BYTE *v45;
  uint64_t v46;
  uint64_t v47;
  _BYTE v49[12];
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _BYTE *v55;
  uint64_t v56;

  v56 = a2;
  v3 = sub_5440(&qword_26C6A8);
  v4 = __chkstk_darwin(v3);
  v55 = &v49[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v4);
  v7 = &v49[-v6];
  v8 = type metadata accessor for Font.TextStyle(0);
  v53 = *(_QWORD *)(v8 - 8);
  v54 = v8;
  __chkstk_darwin(v8);
  v10 = &v49[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = type metadata accessor for SizeConstants(0);
  __chkstk_darwin(v11);
  v13 = &v49[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v14 = sub_5440(&qword_26C5F0);
  __chkstk_darwin(v14);
  v16 = &v49[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v52 = sub_5440(&qword_26C5F8);
  v17 = __chkstk_darwin(v52);
  v19 = &v49[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v17);
  v21 = &v49[-v20];
  v22 = sub_1D411C((uint64_t)v16);
  v50 = static Edge.Set.trailing.getter(v22);
  v23 = type metadata accessor for ListItemView(0);
  sub_3168C((uint64_t)v13);
  v51 = a1;
  v24 = a1 + *(int *)(v23 + 32);
  v25 = *(_QWORD *)v24;
  v26 = *(_BYTE *)(v24 + 8);
  sub_F9E4(*(_QWORD *)v24, v26);
  LOBYTE(a1) = sub_30DB4(v25, v26);
  sub_BE0C(v25, v26);
  v27 = ListItemThumbnailViewModel.unscaledTrailingPadding(isCompact:)(a1 & 1);
  v29 = v53;
  v28 = v54;
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v53 + 104))(v10, enum case for Font.TextStyle.body(_:), v54);
  v30 = sub_1D0C8C((uint64_t)v10, v27);
  (*(void (**)(_BYTE *, uint64_t))(v29 + 8))(v10, v28);
  v31 = sub_224DC((uint64_t)v13, type metadata accessor for SizeConstants);
  v35 = EdgeInsets.init(_all:)(v31, v30, v32, v33, v34);
  v37 = v36;
  v39 = v38;
  v41 = v40;
  sub_B3D0((uint64_t)v16, (uint64_t)v19, &qword_26C5F0);
  v42 = (double *)&v19[*(int *)(v52 + 36)];
  *(_BYTE *)v42 = v50;
  v42[1] = v35;
  *((_QWORD *)v42 + 2) = v37;
  *((_QWORD *)v42 + 3) = v39;
  *((_QWORD *)v42 + 4) = v41;
  *((_BYTE *)v42 + 40) = 0;
  sub_B414((uint64_t)v16, &qword_26C5F0);
  v43 = sub_167A4((uint64_t)v19, (uint64_t)v21, &qword_26C5F8);
  *(_QWORD *)v7 = static HorizontalAlignment.leading.getter(v43);
  *((_QWORD *)v7 + 1) = 0;
  v7[16] = 0;
  v44 = sub_5440(&qword_26C6B0);
  sub_1D5D00(v51, (uint64_t)&v7[*(int *)(v44 + 44)]);
  sub_B3D0((uint64_t)v21, (uint64_t)v19, &qword_26C5F8);
  v45 = v55;
  sub_B3D0((uint64_t)v7, (uint64_t)v55, &qword_26C6A8);
  v46 = v56;
  sub_B3D0((uint64_t)v19, v56, &qword_26C5F8);
  v47 = sub_5440(&qword_26C6B8);
  sub_B3D0((uint64_t)v45, v46 + *(int *)(v47 + 48), &qword_26C6A8);
  sub_B414((uint64_t)v7, &qword_26C6A8);
  sub_B414((uint64_t)v21, &qword_26C5F8);
  sub_B414((uint64_t)v45, &qword_26C6A8);
  return sub_B414((uint64_t)v19, &qword_26C5F8);
}

uint64_t sub_1D5D00@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  id v31;
  uint64_t v32;
  char *v33;
  char *v34;
  NSString v35;
  unsigned __int8 v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  NSString v40;
  unsigned __int8 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t WitnessTable;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  double v67;
  uint64_t v68;
  double v69;
  void (*v70)(uint64_t, uint64_t);
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  double v75;
  double v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  __int128 v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD v107[36];

  v103 = a1;
  v3 = type metadata accessor for FloatingPointRoundingRule(0);
  v98 = *(_QWORD *)(v3 - 8);
  v99 = v3;
  __chkstk_darwin(v3);
  v97 = (char *)&v85 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v95 = sub_5440(&qword_2627D0);
  __chkstk_darwin(v95);
  v96 = (uint64_t)&v85 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v100 = type metadata accessor for SizeConstants.Environment(0);
  __chkstk_darwin(v100);
  v88 = (uint64_t)&v85 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Font.TextStyle(0);
  v93 = *(_QWORD *)(v7 - 8);
  v94 = v7;
  v8 = __chkstk_darwin(v7);
  v91 = (char *)&v85 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v90 = (char *)&v85 - v10;
  v89 = sub_5440(&qword_262710);
  __chkstk_darwin(v89);
  v92 = (uint64_t)&v85 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for SizeConstants(0);
  v13 = __chkstk_darwin(v12);
  v86 = (uint64_t)&v85 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v87 = (uint64_t)&v85 - v15;
  v102 = type metadata accessor for ListItemMetadataView(0);
  v16 = *(_QWORD *)(v102 - 8);
  __chkstk_darwin(v102);
  v18 = (char **)((char *)&v85 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  v19 = sub_5440(&qword_26C5E0);
  v20 = __chkstk_darwin(v19);
  v22 = (char *)&v85 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __chkstk_darwin(v20);
  v25 = (char *)&v85 - v24;
  v26 = __chkstk_darwin(v23);
  v28 = (char *)&v85 - v27;
  __chkstk_darwin(v26);
  v30 = (char *)&v85 - v29;
  if (qword_25DC10 != -1)
    swift_once(&qword_25DC10, sub_AD7D8);
  v101 = a2;
  if (byte_2632E8 != 1)
    goto LABEL_5;
  v31 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v32 = v16;
  v33 = v30;
  v34 = v22;
  v35 = String._bridgeToObjectiveC()();
  v36 = objc_msgSend(v31, "integerForKey:", v35);

  a2 = v101;
  v22 = v34;
  v30 = v33;
  v16 = v32;
  if ((v36 & 2) != 0)
  {
    v38 = 1;
  }
  else
  {
LABEL_5:
    sub_ADA04(v103 + 96, (uint64_t)v107);
    *v18 = swift_getKeyPath(&unk_1F9110);
    v37 = sub_5440(&qword_25F200);
    swift_storeEnumTagMultiPayload(v18, v37, 0);
    memcpy((char *)v18 + *(int *)(v102 + 20), v107, 0x118uLL);
    sub_21C88((uint64_t)v18, (uint64_t)v25, type metadata accessor for ListItemMetadataView);
    v38 = 0;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56))(v25, v38, 1, v102);
  sub_167A4((uint64_t)v25, (uint64_t)v28, &qword_26C5E0);
  sub_167A4((uint64_t)v28, (uint64_t)v30, &qword_26C5E0);
  sub_B3D0(v103 + 376, (uint64_t)&v104, &qword_2618D8);
  if (!v105)
  {
    sub_B414((uint64_t)&v104, &qword_2618D8);
LABEL_17:
    v80 = 0;
    v57 = 0;
    goto LABEL_18;
  }
  sub_AC68(&v104, (uint64_t)v107);
  if ((byte_2632E8 & 1) != 0)
  {
    v39 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
    v40 = String._bridgeToObjectiveC()();
    v41 = objc_msgSend(v39, "integerForKey:", v40);

    if ((v41 & 1) != 0)
    {
      _s7BooksUI13AnyPagedFrameVwxx_0(v107);
      goto LABEL_17;
    }
  }
  v42 = v107[3];
  v43 = v107[4];
  sub_5480(v107, v107[3]);
  v44 = (uint64_t *)(v103 + *(int *)(type metadata accessor for ListItemView(0) + 48));
  v45 = *v44;
  v46 = v44[1];
  v48 = type metadata accessor for ListItemAccessoryView(0, v42, v43, v47);
  v102 = (uint64_t)v22;
  v49 = v48;
  v105 = v48;
  WitnessTable = swift_getWitnessTable(&unk_1E10C8, v48);
  v85 = v30;
  v51 = WitnessTable;
  v106 = WitnessTable;
  v52 = sub_C404(&v104);
  sub_1D56D0(v45, v46, v42, v43, (uint64_t)v52);
  __chkstk_darwin(v53);
  v55 = (char *)&v85 - v54;
  (*(void (**)(char *, _QWORD *, uint64_t))(v56 + 16))((char *)&v85 - v54, v52, v49);
  v57 = AnyView.init<A>(_:)(v55, v49, v51);
  _s7BooksUI13AnyPagedFrameVwxx_0(&v104);
  _s7BooksUI13AnyPagedFrameVwxx_0(v107);
  v58 = v87;
  sub_3168C(v87);
  v59 = v93;
  v60 = v94;
  v61 = v90;
  (*(void (**)(char *, _QWORD, uint64_t))(v93 + 104))(v90, enum case for Font.TextStyle.body(_:), v94);
  v62 = v86;
  sub_1E428(v58, v86, type metadata accessor for SizeConstants);
  v63 = (uint64_t)v91;
  (*(void (**)(char *, char *, uint64_t))(v59 + 16))(v91, v61, v60);
  v64 = v92;
  sub_1E428(v62, v92, type metadata accessor for SizeConstants);
  v65 = v88;
  sub_1E428(v62, v88, type metadata accessor for SizeConstants.Environment);
  v66 = v65 + *(int *)(v100 + 24);
  v67 = sub_173CC(v63, v66);
  v68 = type metadata accessor for DynamicTypeSize(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v68 - 8) + 8))(v66, v68);
  v69 = 1.0;
  if ((*(_QWORD *)&v67 & 0xFFFFFFFFFFFFFLL) == 0)
    v69 = v67;
  if ((~*(_QWORD *)&v67 & 0x7FF0000000000000) == 0)
    v67 = v69;
  sub_224DC(v62, type metadata accessor for SizeConstants);
  v70 = *(void (**)(uint64_t, uint64_t))(v59 + 8);
  v70(v63, v60);
  v71 = *(int *)(v89 + 36);
  *(double *)(v64 + v71) = v67;
  v70((uint64_t)v61, v60);
  sub_224DC(v58, type metadata accessor for SizeConstants);
  v72 = v96;
  sub_1E428(v64, v96, type metadata accessor for SizeConstants.Environment);
  v73 = *(_QWORD *)(v64 + v71);
  a2 = v101;
  v74 = *(int *)(v95 + 36);
  *(_QWORD *)(v72 + v74) = v73;
  sub_B414(v64, &qword_262710);
  v75 = KeyedEncodingContainer.encode<A>(_:forKey:)(*(double *)(v72 + v74)) * 16.0;
  v76 = KeyedEncodingContainer.encode<A>(_:forKey:)(*(double *)(v72 + *(int *)(v100 + 28)));
  v78 = (uint64_t)v97;
  v77 = v98;
  v79 = v99;
  (*(void (**)(char *, _QWORD, uint64_t))(v98 + 104))(v97, enum case for FloatingPointRoundingRule.toNearestOrAwayFromZero(_:), v99);
  *(double *)v107 = v75;
  sub_13603C(v78, v76);
  v80 = v107[0];
  v81 = v78;
  v22 = (char *)v102;
  (*(void (**)(uint64_t, uint64_t))(v77 + 8))(v81, v79);
  v82 = v72;
  v30 = v85;
  sub_B414(v82, &qword_2627D0);
LABEL_18:
  sub_B3D0((uint64_t)v30, (uint64_t)v22, &qword_26C5E0);
  sub_B3D0((uint64_t)v22, a2, &qword_26C5E0);
  v83 = (_QWORD *)(a2 + *(int *)(sub_5440(&qword_26C6C0) + 48));
  *v83 = v80;
  v83[1] = 0;
  v83[2] = v57;
  swift_retain(v57);
  sub_B414((uint64_t)v30, &qword_26C5E0);
  swift_release(v57);
  return sub_B414((uint64_t)v22, &qword_26C5E0);
}

uint64_t sub_1D655C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  id v31;
  NSString v32;
  unsigned __int8 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t WitnessTable;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  double v59;
  uint64_t v60;
  double v61;
  void (*v62)(uint64_t, uint64_t);
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  double v66;
  uint64_t v67;
  double v68;
  double v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  __int128 v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD v99[3];
  uint64_t v100;
  uint64_t v101;

  v94 = type metadata accessor for FloatingPointRoundingRule(0);
  v88 = *(_QWORD *)(v94 - 8);
  __chkstk_darwin(v94);
  v87 = (char *)&v77 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_5440(&qword_2627D0);
  __chkstk_darwin(v5);
  v7 = (char *)&v77 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for SizeConstants.Environment(0);
  __chkstk_darwin(v8);
  v86 = (uint64_t)&v77 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Font.TextStyle(0);
  v92 = *(_QWORD *)(v10 - 8);
  v93 = v10;
  v11 = __chkstk_darwin(v10);
  v90 = (char *)&v77 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v89 = (char *)&v77 - v13;
  v14 = sub_5440(&qword_262710);
  __chkstk_darwin(v14);
  v91 = (uint64_t)&v77 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for SizeConstants(0);
  v17 = __chkstk_darwin(v16);
  v84 = (uint64_t)&v77 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v85 = (uint64_t)&v77 - v19;
  v20 = sub_5440(&qword_26C660);
  v21 = __chkstk_darwin(v20);
  v23 = (char *)&v77 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = __chkstk_darwin(v21);
  v26 = (char *)&v77 - v25;
  v27 = __chkstk_darwin(v24);
  v29 = (char *)&v77 - v28;
  *(_QWORD *)v26 = static VerticalAlignment.top.getter(v27);
  *((_QWORD *)v26 + 1) = 0;
  v26[16] = 0;
  v30 = sub_5440(&qword_26C668);
  sub_1D6CBC(a1, (uint64_t)&v26[*(int *)(v30 + 44)]);
  v95 = v29;
  sub_167A4((uint64_t)v26, (uint64_t)v29, &qword_26C660);
  sub_B3D0(a1 + 376, (uint64_t)&v96, &qword_2618D8);
  if (!v97)
  {
    sub_B414((uint64_t)&v96, &qword_2618D8);
LABEL_13:
    v73 = 0;
    v48 = 0;
    goto LABEL_14;
  }
  v81 = v8;
  v82 = v23;
  v83 = a2;
  sub_AC68(&v96, (uint64_t)v99);
  if (qword_25DC10 != -1)
    swift_once(&qword_25DC10, sub_AD7D8);
  if ((byte_2632E8 & 1) != 0)
  {
    v31 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
    v32 = String._bridgeToObjectiveC()();
    v33 = objc_msgSend(v31, "integerForKey:", v32);

    if ((v33 & 1) != 0)
    {
      _s7BooksUI13AnyPagedFrameVwxx_0(v99);
      a2 = v83;
      v23 = v82;
      goto LABEL_13;
    }
  }
  v34 = v100;
  v35 = v101;
  sub_5480(v99, v100);
  v80 = v5;
  v36 = type metadata accessor for ListItemView(0);
  v78 = v14;
  v37 = (uint64_t *)(a1 + *(int *)(v36 + 48));
  v38 = *v37;
  v39 = v37[1];
  v79 = v7;
  v41 = type metadata accessor for ListItemAccessoryView(0, v34, v35, v40);
  v97 = v41;
  WitnessTable = swift_getWitnessTable(&unk_1E10C8, v41);
  v98 = WitnessTable;
  v43 = sub_C404(&v96);
  sub_1D56D0(v38, v39, v34, v35, (uint64_t)v43);
  __chkstk_darwin(v44);
  v46 = (char *)&v77 - v45;
  (*(void (**)(char *, _QWORD *, uint64_t))(v47 + 16))((char *)&v77 - v45, v43, v41);
  v48 = AnyView.init<A>(_:)(v46, v41, WitnessTable);
  _s7BooksUI13AnyPagedFrameVwxx_0(&v96);
  _s7BooksUI13AnyPagedFrameVwxx_0(v99);
  v49 = v85;
  sub_3168C(v85);
  v50 = v92;
  v51 = v93;
  v52 = v89;
  (*(void (**)(char *, _QWORD, uint64_t))(v92 + 104))(v89, enum case for Font.TextStyle.body(_:), v93);
  v53 = v84;
  sub_1E428(v49, v84, type metadata accessor for SizeConstants);
  v54 = (uint64_t)v90;
  (*(void (**)(char *, char *, uint64_t))(v50 + 16))(v90, v52, v51);
  v55 = v91;
  sub_1E428(v53, v91, type metadata accessor for SizeConstants);
  v56 = v86;
  sub_1E428(v53, v86, type metadata accessor for SizeConstants.Environment);
  v57 = v81;
  v58 = v56 + *(int *)(v81 + 24);
  v59 = sub_173CC(v54, v58);
  v60 = type metadata accessor for DynamicTypeSize(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v60 - 8) + 8))(v58, v60);
  v61 = 1.0;
  if ((*(_QWORD *)&v59 & 0xFFFFFFFFFFFFFLL) == 0)
    v61 = v59;
  if ((~*(_QWORD *)&v59 & 0x7FF0000000000000) == 0)
    v59 = v61;
  sub_224DC(v53, type metadata accessor for SizeConstants);
  v62 = *(void (**)(uint64_t, uint64_t))(v50 + 8);
  v62(v54, v51);
  v63 = *(int *)(v78 + 36);
  *(double *)(v55 + v63) = v59;
  v62((uint64_t)v52, v51);
  sub_224DC(v49, type metadata accessor for SizeConstants);
  v64 = (uint64_t)v79;
  sub_1E428(v55, (uint64_t)v79, type metadata accessor for SizeConstants.Environment);
  v65 = *(int *)(v80 + 36);
  *(_QWORD *)(v64 + v65) = *(_QWORD *)(v55 + v63);
  sub_B414(v55, &qword_262710);
  v66 = *(double *)(v64 + v65);
  v67 = v64;
  v68 = KeyedEncodingContainer.encode<A>(_:forKey:)(v66) * 16.0;
  v69 = KeyedEncodingContainer.encode<A>(_:forKey:)(*(double *)(v64 + *(int *)(v57 + 28)));
  v71 = (uint64_t)v87;
  v70 = v88;
  v72 = v94;
  (*(void (**)(char *, _QWORD, uint64_t))(v88 + 104))(v87, enum case for FloatingPointRoundingRule.toNearestOrAwayFromZero(_:), v94);
  *(double *)v99 = v68;
  sub_13603C(v71, v69);
  v73 = v99[0];
  (*(void (**)(uint64_t, uint64_t))(v70 + 8))(v71, v72);
  sub_B414(v67, &qword_2627D0);
  a2 = v83;
  v23 = v82;
LABEL_14:
  v74 = (uint64_t)v95;
  sub_B3D0((uint64_t)v95, (uint64_t)v23, &qword_26C660);
  sub_B3D0((uint64_t)v23, a2, &qword_26C660);
  v75 = (_QWORD *)(a2 + *(int *)(sub_5440(&qword_26C670) + 48));
  *v75 = v73;
  v75[1] = 0;
  v75[2] = v48;
  swift_retain(v48);
  sub_B414(v74, &qword_26C660);
  swift_release(v48);
  return sub_B414((uint64_t)v23, &qword_26C660);
}

uint64_t sub_1D6CBC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  double v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  double v40;
  double v41;
  double v42;
  double v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  id v51;
  NSString v52;
  unsigned __int8 v53;
  uint64_t KeyPath;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _BYTE v82[288];

  v81 = a2;
  v3 = type metadata accessor for ListItemMetadataView(0);
  v77 = *(_QWORD *)(v3 - 8);
  v78 = v3;
  __chkstk_darwin(v3);
  v70 = (uint64_t *)((char *)&v68 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = sub_5440(&qword_26C5E0);
  v6 = __chkstk_darwin(v5);
  v80 = (uint64_t)&v68 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v6);
  v76 = (uint64_t)&v68 - v9;
  v10 = __chkstk_darwin(v8);
  v75 = (uint64_t)&v68 - v11;
  __chkstk_darwin(v10);
  v79 = (uint64_t)&v68 - v12;
  v13 = type metadata accessor for Font.TextStyle(0);
  v73 = *(_QWORD *)(v13 - 8);
  v74 = v13;
  __chkstk_darwin(v13);
  v15 = (char *)&v68 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for SizeConstants(0);
  __chkstk_darwin(v16);
  v18 = (char *)&v68 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_5440(&qword_26C5F0);
  __chkstk_darwin(v19);
  v21 = (char *)&v68 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v72 = sub_5440(&qword_26C5F8);
  v22 = __chkstk_darwin(v72);
  v24 = (char *)&v68 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v26 = (char *)&v68 - v25;
  v27 = sub_1D411C((uint64_t)v21);
  v71 = static Edge.Set.trailing.getter(v27);
  v28 = type metadata accessor for ListItemView(0);
  sub_3168C((uint64_t)v18);
  v29 = *(int *)(v28 + 32);
  v69 = a1;
  v30 = a1 + v29;
  v31 = *(_QWORD *)v30;
  LOBYTE(a1) = *(_BYTE *)(v30 + 8);
  sub_F9E4(*(_QWORD *)v30, a1);
  v32 = sub_30DB4(v31, a1);
  sub_BE0C(v31, a1);
  v33 = ListItemThumbnailViewModel.unscaledTrailingPadding(isCompact:)(v32 & 1);
  v35 = v73;
  v34 = v74;
  (*(void (**)(char *, _QWORD, uint64_t))(v73 + 104))(v15, enum case for Font.TextStyle.body(_:), v74);
  v36 = sub_1D0C8C((uint64_t)v15, v33);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v15, v34);
  v37 = (uint64_t)v18;
  v38 = (uint64_t)v24;
  v39 = sub_224DC(v37, type metadata accessor for SizeConstants);
  v43 = EdgeInsets.init(_all:)(v39, v36, v40, v41, v42);
  v45 = v44;
  v47 = v46;
  v49 = v48;
  sub_B3D0((uint64_t)v21, (uint64_t)v24, &qword_26C5F0);
  v50 = &v24[*(int *)(v72 + 36)];
  *v50 = v71;
  *((double *)v50 + 1) = v43;
  *((_QWORD *)v50 + 2) = v45;
  *((_QWORD *)v50 + 3) = v47;
  *((_QWORD *)v50 + 4) = v49;
  v50[40] = 0;
  sub_B414((uint64_t)v21, &qword_26C5F0);
  sub_167A4((uint64_t)v24, (uint64_t)v26, &qword_26C5F8);
  if (qword_25DC10 != -1)
    swift_once(&qword_25DC10, sub_AD7D8);
  if (byte_2632E8 == 1
    && (v51 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults"),
        v52 = String._bridgeToObjectiveC()(),
        v53 = objc_msgSend(v51, "integerForKey:", v52),
        v51,
        v52,
        (v53 & 2) != 0))
  {
    v60 = 1;
    v57 = v78;
    v59 = v76;
  }
  else
  {
    sub_ADA04(v69 + 96, (uint64_t)v82);
    KeyPath = swift_getKeyPath(&unk_1F9110);
    v55 = v70;
    *v70 = KeyPath;
    v56 = sub_5440(&qword_25F200);
    swift_storeEnumTagMultiPayload(v55, v56, 0);
    v57 = v78;
    memcpy((char *)v55 + *(int *)(v78 + 20), v82, 0x118uLL);
    v58 = (uint64_t)v55;
    v59 = v76;
    sub_21C88(v58, v76, type metadata accessor for ListItemMetadataView);
    v60 = 0;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v77 + 56))(v59, v60, 1, v57);
  v61 = v59;
  v62 = v75;
  sub_167A4(v61, v75, &qword_26C5E0);
  v63 = v79;
  sub_167A4(v62, v79, &qword_26C5E0);
  sub_B3D0((uint64_t)v26, v38, &qword_26C5F8);
  v64 = v80;
  sub_B3D0(v63, v80, &qword_26C5E0);
  v65 = v81;
  sub_B3D0(v38, v81, &qword_26C5F8);
  v66 = sub_5440(&qword_26C678);
  sub_B3D0(v64, v65 + *(int *)(v66 + 48), &qword_26C5E0);
  sub_B414(v63, &qword_26C5E0);
  sub_B414((uint64_t)v26, &qword_26C5F8);
  sub_B414(v64, &qword_26C5E0);
  return sub_B414(v38, &qword_26C5F8);
}

uint64_t sub_1D722C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  double v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(char *);
  double v50;
  void (*v51)(char *, uint64_t);
  uint64_t v52;
  double v53;
  double v54;
  double v55;
  double v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  id v64;
  NSString v65;
  unsigned __int8 v66;
  uint64_t v67;
  uint64_t KeyPath;
  uint64_t *v69;
  uint64_t v70;
  int *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  id v78;
  NSString v79;
  unsigned __int8 v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t WitnessTable;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  void (*v96)(char *);
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  double v105;
  uint64_t v106;
  double v107;
  void (*v108)(char *, uint64_t);
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  double v112;
  double v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  _QWORD *v124;
  uint64_t v125;
  uint64_t v127;
  unsigned int v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t *v143;
  char *v144;
  uint64_t v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  int *v150;
  uint64_t v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  __int128 v156;
  uint64_t v157;
  uint64_t v158;
  _QWORD v159[36];

  v145 = a2;
  v3 = type metadata accessor for FloatingPointRoundingRule(0);
  v141 = *(_QWORD *)(v3 - 8);
  v142 = v3;
  __chkstk_darwin(v3);
  v140 = (char *)&v127 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v138 = sub_5440(&qword_2627D0);
  __chkstk_darwin(v138);
  v139 = (uint64_t)&v127 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v137 = type metadata accessor for SizeConstants.Environment(0);
  __chkstk_darwin(v137);
  v134 = (uint64_t)&v127 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v135 = sub_5440(&qword_262710);
  __chkstk_darwin(v135);
  v136 = (uint64_t)&v127 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for ListItemMetadataView(0);
  v149 = *(_QWORD *)(v8 - 8);
  v150 = (int *)v8;
  __chkstk_darwin(v8);
  v143 = (uint64_t *)((char *)&v127 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = sub_5440(&qword_26C5E0);
  v11 = __chkstk_darwin(v10);
  v144 = (char *)&v127 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v11);
  v148 = (uint64_t)&v127 - v14;
  v15 = __chkstk_darwin(v13);
  v147 = (uint64_t)&v127 - v16;
  __chkstk_darwin(v15);
  v155 = (char *)&v127 - v17;
  v18 = type metadata accessor for Font.TextStyle(0);
  v153 = *(_QWORD *)(v18 - 8);
  v154 = v18;
  v19 = __chkstk_darwin(v18);
  v133 = (char *)&v127 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __chkstk_darwin(v19);
  v132 = (char *)&v127 - v22;
  __chkstk_darwin(v21);
  v24 = (char *)&v127 - v23;
  v25 = type metadata accessor for SizeConstants(0);
  v26 = __chkstk_darwin(v25);
  v130 = (uint64_t)&v127 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __chkstk_darwin(v26);
  v131 = (uint64_t)&v127 - v29;
  __chkstk_darwin(v28);
  v31 = (char *)&v127 - v30;
  v32 = sub_5440(&qword_26C5F0);
  __chkstk_darwin(v32);
  v34 = (char *)&v127 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v152 = (char *)sub_5440(&qword_26C5F8);
  v35 = __chkstk_darwin(v152);
  v37 = (char *)&v127 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v35);
  v39 = (char *)&v127 - v38;
  v40 = sub_1D411C((uint64_t)v34);
  LODWORD(v146) = static Edge.Set.bottom.getter(v40);
  v41 = type metadata accessor for ListItemView(0);
  v129 = a1 + *(int *)(v41 + 20);
  sub_3168C((uint64_t)v31);
  v127 = v41;
  v42 = *(int *)(v41 + 32);
  v151 = a1;
  v43 = a1 + v42;
  v44 = *(_QWORD *)v43;
  v45 = *(_BYTE *)(v43 + 8);
  sub_F9E4(*(_QWORD *)v43, v45);
  LOBYTE(v41) = sub_30DB4(v44, v45);
  sub_BE0C(v44, v45);
  v46 = ListItemThumbnailViewModel.unscaledTrailingPadding(isCompact:)(v41 & 1);
  v48 = v153;
  v47 = v154;
  v49 = *(void (**)(char *))(v153 + 104);
  v128 = enum case for Font.TextStyle.body(_:);
  v49(v24);
  v50 = sub_1D0C8C((uint64_t)v24, v46);
  v51 = *(void (**)(char *, uint64_t))(v48 + 8);
  v51(v24, v47);
  v52 = sub_224DC((uint64_t)v31, type metadata accessor for SizeConstants);
  v56 = EdgeInsets.init(_all:)(v52, v50, v53, v54, v55);
  v58 = v57;
  v60 = v59;
  v62 = v61;
  sub_B3D0((uint64_t)v34, (uint64_t)v37, &qword_26C5F0);
  v63 = &v37[*((int *)v152 + 9)];
  *v63 = (char)v146;
  *((double *)v63 + 1) = v56;
  *((_QWORD *)v63 + 2) = v58;
  *((_QWORD *)v63 + 3) = v60;
  *((_QWORD *)v63 + 4) = v62;
  v63[40] = 0;
  sub_B414((uint64_t)v34, &qword_26C5F0);
  v146 = v37;
  v152 = v39;
  sub_167A4((uint64_t)v37, (uint64_t)v39, &qword_26C5F8);
  if (qword_25DC10 != -1)
    swift_once(&qword_25DC10, sub_AD7D8);
  if (byte_2632E8 == 1
    && (v64 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults"),
        v65 = String._bridgeToObjectiveC()(),
        v66 = objc_msgSend(v64, "integerForKey:", v65),
        v64,
        v65,
        (v66 & 2) != 0))
  {
    v74 = 1;
    v75 = (uint64_t)v155;
    v71 = v150;
    v67 = v151;
    v73 = v148;
  }
  else
  {
    v67 = v151;
    sub_ADA04(v151 + 96, (uint64_t)v159);
    KeyPath = swift_getKeyPath(&unk_1F9110);
    v69 = v143;
    *v143 = KeyPath;
    v70 = sub_5440(&qword_25F200);
    swift_storeEnumTagMultiPayload(v69, v70, 0);
    v71 = v150;
    memcpy((char *)v69 + v150[5], v159, 0x118uLL);
    v72 = (uint64_t)v69;
    v73 = v148;
    sub_21C88(v72, v148, type metadata accessor for ListItemMetadataView);
    v74 = 0;
    v75 = (uint64_t)v155;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, int *))(v149 + 56))(v73, v74, 1, v71);
  v76 = v73;
  v77 = v147;
  sub_167A4(v76, v147, &qword_26C5E0);
  sub_167A4(v77, v75, &qword_26C5E0);
  sub_B3D0(v67 + 376, (uint64_t)&v156, &qword_2618D8);
  if (!v157)
  {
    v118 = v75;
    sub_B414((uint64_t)&v156, &qword_2618D8);
LABEL_17:
    v117 = 0;
    v151 = 0;
    goto LABEL_18;
  }
  sub_AC68(&v156, (uint64_t)v159);
  if ((byte_2632E8 & 1) != 0)
  {
    v78 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
    v79 = String._bridgeToObjectiveC()();
    v80 = objc_msgSend(v78, "integerForKey:", v79);

    if ((v80 & 1) != 0)
    {
      v118 = v75;
      _s7BooksUI13AnyPagedFrameVwxx_0(v159);
      goto LABEL_17;
    }
  }
  v81 = v159[3];
  v82 = v159[4];
  sub_5480(v159, v159[3]);
  v83 = (uint64_t *)(v67 + *(int *)(v127 + 48));
  v84 = *v83;
  v85 = v83[1];
  v87 = type metadata accessor for ListItemAccessoryView(0, v81, v82, v86);
  v150 = (int *)v51;
  v88 = v87;
  v157 = v87;
  WitnessTable = swift_getWitnessTable(&unk_1E10C8, v87);
  v158 = WitnessTable;
  v90 = sub_C404(&v156);
  sub_1D56D0(v84, v85, v81, v82, (uint64_t)v90);
  __chkstk_darwin(v91);
  v93 = (char *)&v127 - v92;
  (*(void (**)(char *, _QWORD *, uint64_t))(v94 + 16))((char *)&v127 - v92, v90, v88);
  v151 = AnyView.init<A>(_:)(v93, v88, WitnessTable);
  _s7BooksUI13AnyPagedFrameVwxx_0(&v156);
  _s7BooksUI13AnyPagedFrameVwxx_0(v159);
  v95 = v131;
  sub_3168C(v131);
  v96 = v49;
  v97 = v132;
  v98 = v154;
  ((void (*)(char *, _QWORD, uint64_t))v96)(v132, v128, v154);
  v99 = v130;
  sub_1E428(v95, v130, type metadata accessor for SizeConstants);
  v100 = (uint64_t)v133;
  (*(void (**)(char *, char *, uint64_t))(v153 + 16))(v133, v97, v98);
  v101 = v136;
  sub_1E428(v99, v136, type metadata accessor for SizeConstants);
  v102 = v134;
  sub_1E428(v99, v134, type metadata accessor for SizeConstants.Environment);
  v103 = v137;
  v104 = v102 + *(int *)(v137 + 24);
  v105 = sub_173CC(v100, v104);
  v106 = type metadata accessor for DynamicTypeSize(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v106 - 8) + 8))(v104, v106);
  v107 = 1.0;
  if ((*(_QWORD *)&v105 & 0xFFFFFFFFFFFFFLL) == 0)
    v107 = v105;
  if ((~*(_QWORD *)&v105 & 0x7FF0000000000000) == 0)
    v105 = v107;
  sub_224DC(v99, type metadata accessor for SizeConstants);
  v108 = (void (*)(char *, uint64_t))v150;
  ((void (*)(uint64_t, uint64_t))v150)(v100, v98);
  v109 = *(int *)(v135 + 36);
  *(double *)(v101 + v109) = v105;
  v108(v97, v98);
  sub_224DC(v95, type metadata accessor for SizeConstants);
  v110 = v139;
  sub_1E428(v101, v139, type metadata accessor for SizeConstants.Environment);
  v111 = *(int *)(v138 + 36);
  *(_QWORD *)(v110 + v111) = *(_QWORD *)(v101 + v109);
  sub_B414(v101, &qword_262710);
  v112 = KeyedEncodingContainer.encode<A>(_:forKey:)(*(double *)(v110 + v111)) * 16.0;
  v113 = KeyedEncodingContainer.encode<A>(_:forKey:)(*(double *)(v110 + *(int *)(v103 + 28)));
  v115 = (uint64_t)v140;
  v114 = v141;
  v116 = v142;
  (*(void (**)(char *, _QWORD, uint64_t))(v141 + 104))(v140, enum case for FloatingPointRoundingRule.toNearestOrAwayFromZero(_:), v142);
  *(double *)v159 = v112;
  sub_13603C(v115, v113);
  v117 = v159[0];
  v118 = (uint64_t)v155;
  (*(void (**)(uint64_t, uint64_t))(v114 + 8))(v115, v116);
  sub_B414(v110, &qword_2627D0);
LABEL_18:
  v120 = (uint64_t)v144;
  v119 = v145;
  v121 = (uint64_t)v146;
  v122 = (uint64_t)v152;
  sub_B3D0((uint64_t)v152, (uint64_t)v146, &qword_26C5F8);
  sub_B3D0(v118, v120, &qword_26C5E0);
  sub_B3D0(v121, v119, &qword_26C5F8);
  v123 = sub_5440(&qword_26C6C8);
  sub_B3D0(v120, v119 + *(int *)(v123 + 48), &qword_26C5E0);
  v124 = (_QWORD *)(v119 + *(int *)(v123 + 64));
  *v124 = v117;
  v124[1] = 0;
  v125 = v151;
  v124[2] = v151;
  swift_retain(v125);
  sub_B414(v118, &qword_26C5E0);
  sub_B414(v122, &qword_26C5F8);
  swift_release(v125);
  sub_B414(v120, &qword_26C5E0);
  return sub_B414(v121, &qword_26C5F8);
}

uint64_t sub_1D7D10()
{
  return sub_2F608(&qword_26C430, &qword_26C410, (void (*)(void))sub_1D7D34, (void (*)(void))sub_1D7DFC);
}

uint64_t sub_1D7D34()
{
  return sub_1D7E20(&qword_26C438, &qword_26C428, &qword_26C418, (uint64_t (*)(void))sub_1D7D58);
}

unint64_t sub_1D7D58()
{
  unint64_t result;
  uint64_t v1;

  result = qword_26C440;
  if (!qword_26C440)
  {
    v1 = sub_7EF8(&qword_26C418);
    sub_1D8060(&qword_26C448, &qword_26C450, &qword_26C458, &qword_26C460);
    sub_7FD8((unint64_t *)&qword_261FE0, &qword_261FD8, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_26C440);
  }
  return result;
}

uint64_t sub_1D7DFC()
{
  return sub_1D7E20(&qword_26C478, &qword_26C3F8, &qword_26C3E8, (uint64_t (*)(void))sub_1D7ECC);
}

uint64_t sub_1D7E20(unint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t result;
  uint64_t v8;
  _QWORD v9[2];

  result = *a1;
  if (!result)
  {
    v8 = sub_7EF8(a2);
    v9[0] = sub_7EF8(a3);
    v9[1] = a4();
    swift_getOpaqueTypeConformance2(v9, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
    sub_7FD8(&qword_26C468, &qword_26C470, (uint64_t)&unk_1EF7F4);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1D7ECC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_26C480;
  if (!qword_26C480)
  {
    v1 = sub_7EF8(&qword_26C3E8);
    sub_1D7F50();
    sub_7FD8((unint64_t *)&qword_261FE0, &qword_261FD8, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_26C480);
  }
  return result;
}

unint64_t sub_1D7F50()
{
  unint64_t result;
  uint64_t v1;

  result = qword_26C488;
  if (!qword_26C488)
  {
    v1 = sub_7EF8(&qword_26C3E0);
    sub_1D7FD4();
    sub_7FD8(&qword_26C4C0, &qword_26C3D8, (uint64_t)&protocol conformance descriptor for _BackgroundModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_26C488);
  }
  return result;
}

unint64_t sub_1D7FD4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_26C490;
  if (!qword_26C490)
  {
    v1 = sub_7EF8(&qword_26C498);
    sub_1D8060(&qword_26C4A0, &qword_26C4A8, &qword_26C4B0, &qword_26C4B8);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_26C490);
  }
  return result;
}

uint64_t sub_1D8060(unint64_t *a1, uint64_t *a2, unint64_t *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v8 = sub_7EF8(a2);
    sub_7FD8(a3, a4, (uint64_t)&unk_1F6000);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1D80E0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_26C4C8;
  if (!qword_26C4C8)
  {
    v1 = sub_7EF8(&qword_26C3D0);
    sub_1D8164();
    sub_7FD8(&qword_26C468, &qword_26C470, (uint64_t)&unk_1EF7F4);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_26C4C8);
  }
  return result;
}

unint64_t sub_1D8164()
{
  unint64_t result;
  uint64_t v1;

  result = qword_26C4D0;
  if (!qword_26C4D0)
  {
    v1 = sub_7EF8(&qword_26C3C8);
    sub_1D81E8();
    sub_7FD8((unint64_t *)&qword_261FE0, &qword_261FD8, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_26C4D0);
  }
  return result;
}

unint64_t sub_1D81E8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_26C4D8;
  if (!qword_26C4D8)
  {
    v1 = sub_7EF8(&qword_26C3C0);
    sub_1D826C();
    sub_7FD8(&qword_26C510, &qword_26C518, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_26C4D8);
  }
  return result;
}

unint64_t sub_1D826C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_26C4E0;
  if (!qword_26C4E0)
  {
    v1 = sub_7EF8(&qword_26C4E8);
    sub_7FD8(&qword_26C4F0, &qword_26C4F8, (uint64_t)&protocol conformance descriptor for HStack<A>);
    sub_7FD8(&qword_26C500, &qword_26C508, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_26C4E0);
  }
  return result;
}

uint64_t sub_1D830C(uint64_t a1)
{
  return sub_1D8640(a1, (uint64_t (*)(uint64_t, uint64_t))sub_1D45C0);
}

uint64_t sub_1D831C()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;

  v1 = (int *)type metadata accessor for ListItemView(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = (_QWORD *)(v0 + v4);
  _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)(v0 + v4 + 24));
  if (*(_QWORD *)(v0 + v4 + 120))
    _s7BooksUI13AnyPagedFrameVwxx_0(v6 + 12);
  if (v6[20])
    _s7BooksUI13AnyPagedFrameVwxx_0(v6 + 17);
  if (v6[25])
    _s7BooksUI13AnyPagedFrameVwxx_0(v6 + 22);
  if (v6[30])
    _s7BooksUI13AnyPagedFrameVwxx_0(v6 + 27);
  if (v6[35])
    _s7BooksUI13AnyPagedFrameVwxx_0(v6 + 32);
  if (v6[40])
    _s7BooksUI13AnyPagedFrameVwxx_0(v6 + 37);
  if (v6[45])
    _s7BooksUI13AnyPagedFrameVwxx_0(v6 + 42);
  if (v6[50])
    _s7BooksUI13AnyPagedFrameVwxx_0(v6 + 47);
  _s7BooksUI13AnyPagedFrameVwxx_0(v6 + 52);
  v7 = type metadata accessor for ListItemViewModel(0);
  v8 = (_QWORD *)((char *)v6 + *(int *)(v7 + 40));
  v9 = type metadata accessor for CardInfo(0);
  if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v8, 1, v9))
  {
    swift_bridgeObjectRelease(*v8);
    v10 = (char *)v8 + *(int *)(v9 + 20);
    v11 = type metadata accessor for UUID(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  }
  v12 = (_QWORD *)((char *)v6 + *(int *)(v7 + 44));
  swift_bridgeObjectRelease(v12[1]);
  swift_bridgeObjectRelease(v12[3]);
  swift_bridgeObjectRelease(v12[5]);
  swift_bridgeObjectRelease(v12[7]);
  swift_bridgeObjectRelease(v12[9]);
  swift_bridgeObjectRelease(v12[11]);
  swift_bridgeObjectRelease(v12[13]);
  swift_bridgeObjectRelease(v12[15]);
  swift_bridgeObjectRelease(v12[17]);
  v13 = (_QWORD *)((char *)v6 + v1[5]);
  v14 = sub_5440(&qword_25F548);
  if (swift_getEnumCaseMultiPayload(v13, v14) == 1)
  {
    v15 = (char *)v13 + *(int *)(type metadata accessor for SizeConstants.Environment(0) + 24);
    v16 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v15, v16);
  }
  else
  {
    swift_release(*v13);
  }
  v17 = (_QWORD *)((char *)v6 + v1[6]);
  v18 = sub_5440(&qword_25F1E8);
  if (swift_getEnumCaseMultiPayload(v17, v18) == 1)
  {
    v19 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(v17, v19);
  }
  else
  {
    swift_release(*v17);
  }
  sub_BE0C(*(_QWORD *)((char *)v6 + v1[7]), *((_BYTE *)v6 + v1[7] + 8));
  sub_BE0C(*(_QWORD *)((char *)v6 + v1[8]), *((_BYTE *)v6 + v1[8] + 8));
  sub_BE0C(*(_QWORD *)((char *)v6 + v1[9]), *((_BYTE *)v6 + v1[9] + 8));
  sub_BE0C(*(_QWORD *)((char *)v6 + v1[10]), *((_BYTE *)v6 + v1[10] + 8));
  v20 = (_QWORD *)((char *)v6 + v1[11]);
  v21 = sub_5440(&qword_25FAA8);
  if (swift_getEnumCaseMultiPayload(v20, v21) == 1)
  {
    v22 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v22 - 8) + 8))(v20, v22);
  }
  else
  {
    swift_release(*v20);
  }
  swift_release(*(_QWORD *)((char *)v6 + v1[12] + 8));
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_1D8634(uint64_t a1)
{
  return sub_1D8640(a1, (uint64_t (*)(uint64_t, uint64_t))sub_1D242C);
}

uint64_t sub_1D8640(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t))
{
  uint64_t v2;
  uint64_t v4;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ListItemView(0) - 8) + 80);
  return a2(a1, v2 + ((v4 + 16) & ~v4));
}

uint64_t sub_1D869C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &opaque type descriptor for <<opaque return type of ListItemView.body>>, 1);
}

uint64_t initializeBufferWithCopyOfBuffer for ListItemView(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v4;
  int v5;
  char v7;
  __int128 v8;
  _BYTE *v9;
  _BYTE *v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  _OWORD *v17;
  _OWORD *v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  _OWORD *v22;
  _OWORD *v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  _OWORD *v27;
  _OWORD *v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  _OWORD *v32;
  _OWORD *v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  _OWORD *v37;
  _OWORD *v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  _OWORD *v42;
  _OWORD *v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  _OWORD *v47;
  _OWORD *v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  void (*v65)(char *, char *, uint64_t);
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _WORD *v78;
  uint64_t v79;
  _WORD *v80;
  int *v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char v119;
  uint64_t v120;
  uint64_t *v121;
  uint64_t *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  _QWORD *v128;
  _QWORD *v129;
  _WORD *v131;
  char *v132;
  uint64_t v133;
  int *v134;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *a2;
    *(_QWORD *)v4 = *a2;
    v4 = v11 + ((v5 + 16) & ~(unint64_t)v5);
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    *(_QWORD *)(a1 + 8) = a2[1];
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    v7 = *((_BYTE *)a2 + 89);
    v8 = *((_OWORD *)a2 + 3);
    *(_OWORD *)(a1 + 48) = v8;
    (**(void (***)(uint64_t, uint64_t))(v8 - 8))(a1 + 24, (uint64_t)(a2 + 3));
    v9 = (_BYTE *)(v4 + 64);
    v10 = a2 + 8;
    if ((v7 & 1) != 0)
    {
      *v9 = *v10;
    }
    else
    {
      *(_QWORD *)v9 = *(_QWORD *)v10;
      *(_BYTE *)(v4 + 72) = *((_BYTE *)a2 + 72);
      *(_QWORD *)(v4 + 80) = a2[10];
      *(_BYTE *)(v4 + 88) = *((_BYTE *)a2 + 88);
    }
    *(_BYTE *)(v4 + 89) = v7;
    v12 = (_OWORD *)(v4 + 96);
    v13 = a2 + 12;
    v14 = a2[15];
    if (v14)
    {
      v15 = a2[16];
      *(_QWORD *)(v4 + 120) = v14;
      *(_QWORD *)(v4 + 128) = v15;
      (**(void (***)(_OWORD *, _OWORD *))(v14 - 8))(v12, v13);
    }
    else
    {
      v16 = *((_OWORD *)a2 + 7);
      *v12 = *v13;
      *(_OWORD *)(v4 + 112) = v16;
      *(_QWORD *)(v4 + 128) = a2[16];
    }
    v17 = (_OWORD *)(v4 + 136);
    v18 = a2 + 17;
    v19 = a2[20];
    if (v19)
    {
      v20 = a2[21];
      *(_QWORD *)(v4 + 160) = v19;
      *(_QWORD *)(v4 + 168) = v20;
      (**(void (***)(_OWORD *, _OWORD *))(v19 - 8))(v17, v18);
    }
    else
    {
      v21 = *(_OWORD *)(a2 + 19);
      *v17 = *v18;
      *(_OWORD *)(v4 + 152) = v21;
      *(_QWORD *)(v4 + 168) = a2[21];
    }
    v22 = (_OWORD *)(v4 + 176);
    v23 = a2 + 22;
    v24 = a2[25];
    if (v24)
    {
      v25 = a2[26];
      *(_QWORD *)(v4 + 200) = v24;
      *(_QWORD *)(v4 + 208) = v25;
      (**(void (***)(_OWORD *, _OWORD *))(v24 - 8))(v22, v23);
    }
    else
    {
      v26 = *((_OWORD *)a2 + 12);
      *v22 = *v23;
      *(_OWORD *)(v4 + 192) = v26;
      *(_QWORD *)(v4 + 208) = a2[26];
    }
    v27 = (_OWORD *)(v4 + 216);
    v28 = a2 + 27;
    v29 = a2[30];
    if (v29)
    {
      v30 = a2[31];
      *(_QWORD *)(v4 + 240) = v29;
      *(_QWORD *)(v4 + 248) = v30;
      (**(void (***)(_OWORD *, _OWORD *))(v29 - 8))(v27, v28);
    }
    else
    {
      v31 = *(_OWORD *)(a2 + 29);
      *v27 = *v28;
      *(_OWORD *)(v4 + 232) = v31;
      *(_QWORD *)(v4 + 248) = a2[31];
    }
    v32 = (_OWORD *)(v4 + 256);
    v33 = a2 + 32;
    v34 = a2[35];
    if (v34)
    {
      v35 = a2[36];
      *(_QWORD *)(v4 + 280) = v34;
      *(_QWORD *)(v4 + 288) = v35;
      (**(void (***)(_OWORD *, _OWORD *))(v34 - 8))(v32, v33);
    }
    else
    {
      v36 = *((_OWORD *)a2 + 17);
      *v32 = *v33;
      *(_OWORD *)(v4 + 272) = v36;
      *(_QWORD *)(v4 + 288) = a2[36];
    }
    v37 = (_OWORD *)(v4 + 296);
    v38 = a2 + 37;
    v39 = a2[40];
    if (v39)
    {
      v40 = a2[41];
      *(_QWORD *)(v4 + 320) = v39;
      *(_QWORD *)(v4 + 328) = v40;
      (**(void (***)(_OWORD *, _OWORD *))(v39 - 8))(v37, v38);
    }
    else
    {
      v41 = *(_OWORD *)(a2 + 39);
      *v37 = *v38;
      *(_OWORD *)(v4 + 312) = v41;
      *(_QWORD *)(v4 + 328) = a2[41];
    }
    v42 = (_OWORD *)(v4 + 336);
    v43 = a2 + 42;
    v44 = a2[45];
    if (v44)
    {
      v45 = a2[46];
      *(_QWORD *)(v4 + 360) = v44;
      *(_QWORD *)(v4 + 368) = v45;
      (**(void (***)(_OWORD *, _OWORD *))(v44 - 8))(v42, v43);
    }
    else
    {
      v46 = *((_OWORD *)a2 + 22);
      *v42 = *v43;
      *(_OWORD *)(v4 + 352) = v46;
      *(_QWORD *)(v4 + 368) = a2[46];
    }
    v47 = (_OWORD *)(v4 + 376);
    v48 = a2 + 47;
    v49 = a2[50];
    v134 = a3;
    if (v49)
    {
      v50 = a2[51];
      *(_QWORD *)(v4 + 400) = v49;
      *(_QWORD *)(v4 + 408) = v50;
      (**(void (***)(_OWORD *, _OWORD *))(v49 - 8))(v47, v48);
    }
    else
    {
      v51 = *(_OWORD *)(a2 + 49);
      *v47 = *v48;
      *(_OWORD *)(v4 + 392) = v51;
      *(_QWORD *)(v4 + 408) = a2[51];
    }
    v52 = a2[55];
    v53 = a2[56];
    *(_QWORD *)(v4 + 440) = v52;
    *(_QWORD *)(v4 + 448) = v53;
    (**(void (***)(uint64_t, uint64_t))(v52 - 8))(v4 + 416, (uint64_t)(a2 + 52));
    v54 = type metadata accessor for ListItemViewModel(0);
    v55 = *(int *)(v54 + 40);
    v56 = (uint64_t *)(v4 + v55);
    v57 = (uint64_t *)((char *)a2 + v55);
    v58 = type metadata accessor for CardInfo(0);
    v59 = *(_QWORD *)(v58 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v59 + 48))(v57, 1, v58))
    {
      v60 = sub_5440(&qword_2618C8);
      memcpy(v56, v57, *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64));
    }
    else
    {
      v61 = *v57;
      *v56 = *v57;
      v62 = *(int *)(v58 + 20);
      v63 = (char *)v56 + v62;
      v132 = (char *)v57 + v62;
      v64 = type metadata accessor for UUID(0);
      v65 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v64 - 8) + 16);
      swift_bridgeObjectRetain(v61);
      v65(v63, v132, v64);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v59 + 56))(v56, 0, 1, v58);
    }
    v66 = *(int *)(v54 + 44);
    v67 = v4 + v66;
    v68 = (uint64_t)a2 + v66;
    v69 = *(_QWORD *)(v68 + 8);
    *(_QWORD *)v67 = *(_QWORD *)v68;
    *(_QWORD *)(v67 + 8) = v69;
    v70 = *(_QWORD *)(v68 + 24);
    *(_QWORD *)(v67 + 16) = *(_QWORD *)(v68 + 16);
    *(_QWORD *)(v67 + 24) = v70;
    v133 = *(_QWORD *)(v68 + 40);
    *(_QWORD *)(v67 + 32) = *(_QWORD *)(v68 + 32);
    *(_QWORD *)(v67 + 40) = v133;
    v71 = *(_QWORD *)(v68 + 56);
    *(_QWORD *)(v67 + 48) = *(_QWORD *)(v68 + 48);
    *(_QWORD *)(v67 + 56) = v71;
    v72 = *(_QWORD *)(v68 + 72);
    *(_QWORD *)(v67 + 64) = *(_QWORD *)(v68 + 64);
    *(_QWORD *)(v67 + 72) = v72;
    v73 = *(_QWORD *)(v68 + 88);
    *(_QWORD *)(v67 + 80) = *(_QWORD *)(v68 + 80);
    *(_QWORD *)(v67 + 88) = v73;
    v74 = *(_QWORD *)(v68 + 104);
    *(_QWORD *)(v67 + 96) = *(_QWORD *)(v68 + 96);
    *(_QWORD *)(v67 + 104) = v74;
    v75 = *(_QWORD *)(v68 + 120);
    *(_QWORD *)(v67 + 112) = *(_QWORD *)(v68 + 112);
    *(_QWORD *)(v67 + 120) = v75;
    v76 = *(_QWORD *)(v68 + 136);
    *(_QWORD *)(v67 + 128) = *(_QWORD *)(v68 + 128);
    *(_QWORD *)(v67 + 136) = v76;
    *(_BYTE *)(v67 + 144) = *(_BYTE *)(v68 + 144);
    v77 = v134[5];
    v131 = (_WORD *)(v4 + v77);
    v78 = (_WORD *)((char *)a2 + v77);
    swift_bridgeObjectRetain(v69);
    swift_bridgeObjectRetain(v70);
    swift_bridgeObjectRetain(v133);
    swift_bridgeObjectRetain(v71);
    swift_bridgeObjectRetain(v72);
    swift_bridgeObjectRetain(v73);
    swift_bridgeObjectRetain(v74);
    swift_bridgeObjectRetain(v75);
    swift_bridgeObjectRetain(v76);
    v79 = sub_5440(&qword_25F548);
    if (swift_getEnumCaseMultiPayload(v78, v79) == 1)
    {
      v80 = v131;
      *v131 = *v78;
      v81 = (int *)type metadata accessor for SizeConstants.Environment(0);
      v82 = v81[6];
      v83 = (char *)v131 + v82;
      v84 = (char *)v78 + v82;
      v85 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v85 - 8) + 16))(v83, v84, v85);
      *(_QWORD *)((char *)v131 + v81[7]) = *(_QWORD *)((char *)v78 + v81[7]);
      v86 = v81[8];
      v87 = (char *)v131 + v86;
      v88 = (char *)v78 + v86;
      v87[2] = v88[2];
      *(_WORD *)v87 = *(_WORD *)v88;
      v89 = 1;
    }
    else
    {
      v90 = *(_QWORD *)v78;
      v80 = v131;
      *(_QWORD *)v131 = *(_QWORD *)v78;
      swift_retain(v90);
      v89 = 0;
    }
    swift_storeEnumTagMultiPayload(v80, v79, v89);
    v91 = v134[6];
    v92 = (uint64_t *)(v4 + v91);
    v93 = (uint64_t *)((char *)a2 + v91);
    v94 = sub_5440(&qword_25F1E8);
    if (swift_getEnumCaseMultiPayload(v93, v94) == 1)
    {
      v95 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v95 - 8) + 16))(v92, v93, v95);
      v96 = v92;
      v97 = v94;
      v98 = 1;
    }
    else
    {
      v99 = *v93;
      *v92 = *v93;
      swift_retain(v99);
      v96 = v92;
      v97 = v94;
      v98 = 0;
    }
    swift_storeEnumTagMultiPayload(v96, v97, v98);
    v100 = v134[7];
    v101 = v4 + v100;
    v102 = (uint64_t)a2 + v100;
    v103 = *(_QWORD *)v102;
    v104 = *(_BYTE *)(v102 + 8);
    sub_F9E4(*(_QWORD *)v102, v104);
    *(_QWORD *)v101 = v103;
    *(_BYTE *)(v101 + 8) = v104;
    v105 = v134[8];
    v106 = v4 + v105;
    v107 = (uint64_t)a2 + v105;
    v108 = *(_QWORD *)v107;
    v109 = *(_BYTE *)(v107 + 8);
    sub_F9E4(*(_QWORD *)v107, v109);
    *(_QWORD *)v106 = v108;
    *(_BYTE *)(v106 + 8) = v109;
    v110 = v134[9];
    v111 = v4 + v110;
    v112 = (uint64_t)a2 + v110;
    v113 = *(_QWORD *)v112;
    v114 = *(_BYTE *)(v112 + 8);
    sub_F9E4(*(_QWORD *)v112, v114);
    *(_QWORD *)v111 = v113;
    *(_BYTE *)(v111 + 8) = v114;
    v115 = v134[10];
    v116 = v4 + v115;
    v117 = (uint64_t)a2 + v115;
    v118 = *(_QWORD *)v117;
    v119 = *(_BYTE *)(v117 + 8);
    sub_F9E4(*(_QWORD *)v117, v119);
    *(_QWORD *)v116 = v118;
    *(_BYTE *)(v116 + 8) = v119;
    v120 = v134[11];
    v121 = (uint64_t *)(v4 + v120);
    v122 = (uint64_t *)((char *)a2 + v120);
    v123 = sub_5440(&qword_25FAA8);
    if (swift_getEnumCaseMultiPayload(v122, v123) == 1)
    {
      v124 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v124 - 8) + 16))(v121, v122, v124);
      v125 = 1;
    }
    else
    {
      v126 = *v122;
      *v121 = *v122;
      swift_retain(v126);
      v125 = 0;
    }
    swift_storeEnumTagMultiPayload(v121, v123, v125);
    v127 = v134[12];
    v128 = (_QWORD *)(v4 + v127);
    v129 = (uint64_t *)((char *)a2 + v127);
    v11 = v129[1];
    *v128 = *v129;
    v128[1] = v11;
  }
  swift_retain(v11);
  return v4;
}

double destroy for ListItemView(_QWORD *a1, int *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  double result;

  _s7BooksUI13AnyPagedFrameVwxx_0(a1 + 3);
  if (a1[15])
    _s7BooksUI13AnyPagedFrameVwxx_0(a1 + 12);
  if (a1[20])
    _s7BooksUI13AnyPagedFrameVwxx_0(a1 + 17);
  if (a1[25])
    _s7BooksUI13AnyPagedFrameVwxx_0(a1 + 22);
  if (a1[30])
    _s7BooksUI13AnyPagedFrameVwxx_0(a1 + 27);
  if (a1[35])
    _s7BooksUI13AnyPagedFrameVwxx_0(a1 + 32);
  if (a1[40])
    _s7BooksUI13AnyPagedFrameVwxx_0(a1 + 37);
  if (a1[45])
    _s7BooksUI13AnyPagedFrameVwxx_0(a1 + 42);
  if (a1[50])
    _s7BooksUI13AnyPagedFrameVwxx_0(a1 + 47);
  _s7BooksUI13AnyPagedFrameVwxx_0(a1 + 52);
  v4 = type metadata accessor for ListItemViewModel(0);
  v5 = (_QWORD *)((char *)a1 + *(int *)(v4 + 40));
  v6 = type metadata accessor for CardInfo(0);
  if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v5, 1, v6))
  {
    swift_bridgeObjectRelease(*v5);
    v7 = (char *)v5 + *(int *)(v6 + 20);
    v8 = type metadata accessor for UUID(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  }
  v9 = (_QWORD *)((char *)a1 + *(int *)(v4 + 44));
  swift_bridgeObjectRelease(v9[1]);
  swift_bridgeObjectRelease(v9[3]);
  swift_bridgeObjectRelease(v9[5]);
  swift_bridgeObjectRelease(v9[7]);
  swift_bridgeObjectRelease(v9[9]);
  swift_bridgeObjectRelease(v9[11]);
  swift_bridgeObjectRelease(v9[13]);
  swift_bridgeObjectRelease(v9[15]);
  swift_bridgeObjectRelease(v9[17]);
  v10 = (_QWORD *)((char *)a1 + a2[5]);
  v11 = sub_5440(&qword_25F548);
  if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
  {
    v12 = (char *)v10 + *(int *)(type metadata accessor for SizeConstants.Environment(0) + 24);
    v13 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
  }
  else
  {
    swift_release(*v10);
  }
  v14 = (_QWORD *)((char *)a1 + a2[6]);
  v15 = sub_5440(&qword_25F1E8);
  if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
  {
    v16 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v14, v16);
  }
  else
  {
    swift_release(*v14);
  }
  sub_BE0C(*(_QWORD *)((char *)a1 + a2[7]), *((_BYTE *)a1 + a2[7] + 8));
  sub_BE0C(*(_QWORD *)((char *)a1 + a2[8]), *((_BYTE *)a1 + a2[8] + 8));
  sub_BE0C(*(_QWORD *)((char *)a1 + a2[9]), *((_BYTE *)a1 + a2[9] + 8));
  sub_BE0C(*(_QWORD *)((char *)a1 + a2[10]), *((_BYTE *)a1 + a2[10] + 8));
  v17 = (_QWORD *)((char *)a1 + a2[11]);
  v18 = sub_5440(&qword_25FAA8);
  if (swift_getEnumCaseMultiPayload(v17, v18) == 1)
  {
    v19 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(v17, v19);
  }
  else
  {
    swift_release(*v17);
  }
  *(_QWORD *)&result = swift_release(*(_QWORD *)((char *)a1 + a2[12] + 8)).n128_u64[0];
  return result;
}

uint64_t initializeWithCopy for ListItemView(uint64_t a1, uint64_t a2, int *a3)
{
  char v6;
  __int128 v7;
  _BYTE *v8;
  _BYTE *v9;
  _OWORD *v10;
  _OWORD *v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  _OWORD *v15;
  _OWORD *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  _OWORD *v20;
  _OWORD *v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  _OWORD *v25;
  _OWORD *v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  _OWORD *v30;
  _OWORD *v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  _OWORD *v35;
  _OWORD *v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  _OWORD *v40;
  _OWORD *v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  _OWORD *v45;
  _OWORD *v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  void (*v63)(char *, char *, uint64_t);
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _WORD *v76;
  uint64_t v77;
  _WORD *v78;
  int *v79;
  uint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char v117;
  uint64_t v118;
  uint64_t *v119;
  uint64_t *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  _QWORD *v126;
  _QWORD *v127;
  uint64_t v128;
  _WORD *v130;
  char *v131;
  uint64_t v132;
  int *v133;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v6 = *(_BYTE *)(a2 + 89);
  v7 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 48) = v7;
  (**(void (***)(uint64_t, uint64_t))(v7 - 8))(a1 + 24, a2 + 24);
  v8 = (_BYTE *)(a1 + 64);
  v9 = (_BYTE *)(a2 + 64);
  if ((v6 & 1) != 0)
  {
    *v8 = *v9;
  }
  else
  {
    *(_QWORD *)v8 = *(_QWORD *)v9;
    *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  }
  *(_BYTE *)(a1 + 89) = v6;
  v10 = (_OWORD *)(a1 + 96);
  v11 = (_OWORD *)(a2 + 96);
  v12 = *(_QWORD *)(a2 + 120);
  if (v12)
  {
    v13 = *(_QWORD *)(a2 + 128);
    *(_QWORD *)(a1 + 120) = v12;
    *(_QWORD *)(a1 + 128) = v13;
    (**(void (***)(_OWORD *, _OWORD *))(v12 - 8))(v10, v11);
  }
  else
  {
    v14 = *(_OWORD *)(a2 + 112);
    *v10 = *v11;
    *(_OWORD *)(a1 + 112) = v14;
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  }
  v15 = (_OWORD *)(a1 + 136);
  v16 = (_OWORD *)(a2 + 136);
  v17 = *(_QWORD *)(a2 + 160);
  if (v17)
  {
    v18 = *(_QWORD *)(a2 + 168);
    *(_QWORD *)(a1 + 160) = v17;
    *(_QWORD *)(a1 + 168) = v18;
    (**(void (***)(_OWORD *, _OWORD *))(v17 - 8))(v15, v16);
  }
  else
  {
    v19 = *(_OWORD *)(a2 + 152);
    *v15 = *v16;
    *(_OWORD *)(a1 + 152) = v19;
    *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  }
  v20 = (_OWORD *)(a1 + 176);
  v21 = (_OWORD *)(a2 + 176);
  v22 = *(_QWORD *)(a2 + 200);
  if (v22)
  {
    v23 = *(_QWORD *)(a2 + 208);
    *(_QWORD *)(a1 + 200) = v22;
    *(_QWORD *)(a1 + 208) = v23;
    (**(void (***)(_OWORD *, _OWORD *))(v22 - 8))(v20, v21);
  }
  else
  {
    v24 = *(_OWORD *)(a2 + 192);
    *v20 = *v21;
    *(_OWORD *)(a1 + 192) = v24;
    *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  }
  v25 = (_OWORD *)(a1 + 216);
  v26 = (_OWORD *)(a2 + 216);
  v27 = *(_QWORD *)(a2 + 240);
  if (v27)
  {
    v28 = *(_QWORD *)(a2 + 248);
    *(_QWORD *)(a1 + 240) = v27;
    *(_QWORD *)(a1 + 248) = v28;
    (**(void (***)(_OWORD *, _OWORD *))(v27 - 8))(v25, v26);
  }
  else
  {
    v29 = *(_OWORD *)(a2 + 232);
    *v25 = *v26;
    *(_OWORD *)(a1 + 232) = v29;
    *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
  }
  v30 = (_OWORD *)(a1 + 256);
  v31 = (_OWORD *)(a2 + 256);
  v32 = *(_QWORD *)(a2 + 280);
  if (v32)
  {
    v33 = *(_QWORD *)(a2 + 288);
    *(_QWORD *)(a1 + 280) = v32;
    *(_QWORD *)(a1 + 288) = v33;
    (**(void (***)(_OWORD *, _OWORD *))(v32 - 8))(v30, v31);
  }
  else
  {
    v34 = *(_OWORD *)(a2 + 272);
    *v30 = *v31;
    *(_OWORD *)(a1 + 272) = v34;
    *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
  }
  v35 = (_OWORD *)(a1 + 296);
  v36 = (_OWORD *)(a2 + 296);
  v37 = *(_QWORD *)(a2 + 320);
  if (v37)
  {
    v38 = *(_QWORD *)(a2 + 328);
    *(_QWORD *)(a1 + 320) = v37;
    *(_QWORD *)(a1 + 328) = v38;
    (**(void (***)(_OWORD *, _OWORD *))(v37 - 8))(v35, v36);
  }
  else
  {
    v39 = *(_OWORD *)(a2 + 312);
    *v35 = *v36;
    *(_OWORD *)(a1 + 312) = v39;
    *(_QWORD *)(a1 + 328) = *(_QWORD *)(a2 + 328);
  }
  v40 = (_OWORD *)(a1 + 336);
  v41 = (_OWORD *)(a2 + 336);
  v42 = *(_QWORD *)(a2 + 360);
  if (v42)
  {
    v43 = *(_QWORD *)(a2 + 368);
    *(_QWORD *)(a1 + 360) = v42;
    *(_QWORD *)(a1 + 368) = v43;
    (**(void (***)(_OWORD *, _OWORD *))(v42 - 8))(v40, v41);
  }
  else
  {
    v44 = *(_OWORD *)(a2 + 352);
    *v40 = *v41;
    *(_OWORD *)(a1 + 352) = v44;
    *(_QWORD *)(a1 + 368) = *(_QWORD *)(a2 + 368);
  }
  v45 = (_OWORD *)(a1 + 376);
  v46 = (_OWORD *)(a2 + 376);
  v47 = *(_QWORD *)(a2 + 400);
  v133 = a3;
  if (v47)
  {
    v48 = *(_QWORD *)(a2 + 408);
    *(_QWORD *)(a1 + 400) = v47;
    *(_QWORD *)(a1 + 408) = v48;
    (**(void (***)(_OWORD *, _OWORD *))(v47 - 8))(v45, v46);
  }
  else
  {
    v49 = *(_OWORD *)(a2 + 392);
    *v45 = *v46;
    *(_OWORD *)(a1 + 392) = v49;
    *(_QWORD *)(a1 + 408) = *(_QWORD *)(a2 + 408);
  }
  v50 = *(_QWORD *)(a2 + 440);
  v51 = *(_QWORD *)(a2 + 448);
  *(_QWORD *)(a1 + 440) = v50;
  *(_QWORD *)(a1 + 448) = v51;
  (**(void (***)(uint64_t, uint64_t))(v50 - 8))(a1 + 416, a2 + 416);
  v52 = type metadata accessor for ListItemViewModel(0);
  v53 = *(int *)(v52 + 40);
  v54 = (uint64_t *)(a1 + v53);
  v55 = (uint64_t *)(a2 + v53);
  v56 = type metadata accessor for CardInfo(0);
  v57 = *(_QWORD *)(v56 - 8);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v57 + 48))(v55, 1, v56))
  {
    v58 = sub_5440(&qword_2618C8);
    memcpy(v54, v55, *(_QWORD *)(*(_QWORD *)(v58 - 8) + 64));
  }
  else
  {
    v59 = *v55;
    *v54 = *v55;
    v60 = *(int *)(v56 + 20);
    v61 = (char *)v54 + v60;
    v131 = (char *)v55 + v60;
    v62 = type metadata accessor for UUID(0);
    v63 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v62 - 8) + 16);
    swift_bridgeObjectRetain(v59);
    v63(v61, v131, v62);
    (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v57 + 56))(v54, 0, 1, v56);
  }
  v64 = *(int *)(v52 + 44);
  v65 = a1 + v64;
  v66 = a2 + v64;
  v67 = *(_QWORD *)(v66 + 8);
  *(_QWORD *)v65 = *(_QWORD *)v66;
  *(_QWORD *)(v65 + 8) = v67;
  v68 = *(_QWORD *)(v66 + 24);
  *(_QWORD *)(v65 + 16) = *(_QWORD *)(v66 + 16);
  *(_QWORD *)(v65 + 24) = v68;
  v132 = *(_QWORD *)(v66 + 40);
  *(_QWORD *)(v65 + 32) = *(_QWORD *)(v66 + 32);
  *(_QWORD *)(v65 + 40) = v132;
  v69 = *(_QWORD *)(v66 + 56);
  *(_QWORD *)(v65 + 48) = *(_QWORD *)(v66 + 48);
  *(_QWORD *)(v65 + 56) = v69;
  v70 = *(_QWORD *)(v66 + 72);
  *(_QWORD *)(v65 + 64) = *(_QWORD *)(v66 + 64);
  *(_QWORD *)(v65 + 72) = v70;
  v71 = *(_QWORD *)(v66 + 88);
  *(_QWORD *)(v65 + 80) = *(_QWORD *)(v66 + 80);
  *(_QWORD *)(v65 + 88) = v71;
  v72 = *(_QWORD *)(v66 + 104);
  *(_QWORD *)(v65 + 96) = *(_QWORD *)(v66 + 96);
  *(_QWORD *)(v65 + 104) = v72;
  v73 = *(_QWORD *)(v66 + 120);
  *(_QWORD *)(v65 + 112) = *(_QWORD *)(v66 + 112);
  *(_QWORD *)(v65 + 120) = v73;
  v74 = *(_QWORD *)(v66 + 136);
  *(_QWORD *)(v65 + 128) = *(_QWORD *)(v66 + 128);
  *(_QWORD *)(v65 + 136) = v74;
  *(_BYTE *)(v65 + 144) = *(_BYTE *)(v66 + 144);
  v75 = v133[5];
  v130 = (_WORD *)(a1 + v75);
  v76 = (_WORD *)(a2 + v75);
  swift_bridgeObjectRetain(v67);
  swift_bridgeObjectRetain(v68);
  swift_bridgeObjectRetain(v132);
  swift_bridgeObjectRetain(v69);
  swift_bridgeObjectRetain(v70);
  swift_bridgeObjectRetain(v71);
  swift_bridgeObjectRetain(v72);
  swift_bridgeObjectRetain(v73);
  swift_bridgeObjectRetain(v74);
  v77 = sub_5440(&qword_25F548);
  if (swift_getEnumCaseMultiPayload(v76, v77) == 1)
  {
    v78 = v130;
    *v130 = *v76;
    v79 = (int *)type metadata accessor for SizeConstants.Environment(0);
    v80 = v79[6];
    v81 = (char *)v130 + v80;
    v82 = (char *)v76 + v80;
    v83 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v83 - 8) + 16))(v81, v82, v83);
    *(_QWORD *)((char *)v130 + v79[7]) = *(_QWORD *)((char *)v76 + v79[7]);
    v84 = v79[8];
    v85 = (char *)v130 + v84;
    v86 = (char *)v76 + v84;
    v85[2] = v86[2];
    *(_WORD *)v85 = *(_WORD *)v86;
    v87 = 1;
  }
  else
  {
    v88 = *(_QWORD *)v76;
    v78 = v130;
    *(_QWORD *)v130 = *(_QWORD *)v76;
    swift_retain(v88);
    v87 = 0;
  }
  swift_storeEnumTagMultiPayload(v78, v77, v87);
  v89 = v133[6];
  v90 = (uint64_t *)(a1 + v89);
  v91 = (uint64_t *)(a2 + v89);
  v92 = sub_5440(&qword_25F1E8);
  if (swift_getEnumCaseMultiPayload(v91, v92) == 1)
  {
    v93 = type metadata accessor for ColorScheme(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v93 - 8) + 16))(v90, v91, v93);
    v94 = v90;
    v95 = v92;
    v96 = 1;
  }
  else
  {
    v97 = *v91;
    *v90 = *v91;
    swift_retain(v97);
    v94 = v90;
    v95 = v92;
    v96 = 0;
  }
  swift_storeEnumTagMultiPayload(v94, v95, v96);
  v98 = v133[7];
  v99 = a1 + v98;
  v100 = a2 + v98;
  v101 = *(_QWORD *)v100;
  v102 = *(_BYTE *)(v100 + 8);
  sub_F9E4(*(_QWORD *)v100, v102);
  *(_QWORD *)v99 = v101;
  *(_BYTE *)(v99 + 8) = v102;
  v103 = v133[8];
  v104 = a1 + v103;
  v105 = a2 + v103;
  v106 = *(_QWORD *)v105;
  v107 = *(_BYTE *)(v105 + 8);
  sub_F9E4(*(_QWORD *)v105, v107);
  *(_QWORD *)v104 = v106;
  *(_BYTE *)(v104 + 8) = v107;
  v108 = v133[9];
  v109 = a1 + v108;
  v110 = a2 + v108;
  v111 = *(_QWORD *)v110;
  v112 = *(_BYTE *)(v110 + 8);
  sub_F9E4(*(_QWORD *)v110, v112);
  *(_QWORD *)v109 = v111;
  *(_BYTE *)(v109 + 8) = v112;
  v113 = v133[10];
  v114 = a1 + v113;
  v115 = a2 + v113;
  v116 = *(_QWORD *)v115;
  v117 = *(_BYTE *)(v115 + 8);
  sub_F9E4(*(_QWORD *)v115, v117);
  *(_QWORD *)v114 = v116;
  *(_BYTE *)(v114 + 8) = v117;
  v118 = v133[11];
  v119 = (uint64_t *)(a1 + v118);
  v120 = (uint64_t *)(a2 + v118);
  v121 = sub_5440(&qword_25FAA8);
  if (swift_getEnumCaseMultiPayload(v120, v121) == 1)
  {
    v122 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v122 - 8) + 16))(v119, v120, v122);
    v123 = 1;
  }
  else
  {
    v124 = *v120;
    *v119 = *v120;
    swift_retain(v124);
    v123 = 0;
  }
  swift_storeEnumTagMultiPayload(v119, v121, v123);
  v125 = v133[12];
  v126 = (_QWORD *)(a1 + v125);
  v127 = (_QWORD *)(a2 + v125);
  v128 = v127[1];
  *v126 = *v127;
  v126[1] = v128;
  swift_retain(v128);
  return a1;
}

uint64_t assignWithCopy for ListItemView(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  _BYTE *v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t (*v43)(uint64_t *, uint64_t, uint64_t);
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  int *v48;
  uint64_t v49;
  void (*v50)(char *, char *, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _BYTE *v75;
  _BYTE *v76;
  uint64_t v77;
  int *v78;
  uint64_t v79;
  _BYTE *v80;
  _BYTE *v81;
  uint64_t v82;
  uint64_t v83;
  _BYTE *v84;
  _BYTE *v85;
  char v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char v102;
  uint64_t v103;
  char v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char v109;
  uint64_t v110;
  char v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char v116;
  uint64_t v117;
  char v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char v123;
  uint64_t v124;
  char v125;
  uint64_t v126;
  uint64_t *v127;
  uint64_t *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  _QWORD *v134;
  _QWORD *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  char *v143;
  uint64_t v144;
  char *v145;
  char *v146;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v6;
  if (a1 != a2)
  {
    sub_2EFF0((_QWORD *)(a1 + 24));
    v7 = *(_BYTE *)(a2 + 89);
    v8 = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 48) = v8;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    (**(void (***)(uint64_t, uint64_t))(v8 - 8))(a1 + 24, a2 + 24);
    v9 = (_BYTE *)(a1 + 64);
    v10 = (_BYTE *)(a2 + 64);
    if ((v7 & 1) != 0)
    {
      *v9 = *v10;
    }
    else
    {
      v11 = *(_QWORD *)v10;
      *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
      *(_QWORD *)v9 = v11;
      v12 = *(_QWORD *)(a2 + 80);
      *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
      *(_QWORD *)(a1 + 80) = v12;
    }
    *(_BYTE *)(a1 + 89) = v7;
  }
  v13 = *(_QWORD *)(a2 + 120);
  if (*(_QWORD *)(a1 + 120))
  {
    if (v13)
    {
      sub_142F8((_QWORD *)(a1 + 96), (_QWORD *)(a2 + 96));
      goto LABEL_13;
    }
    _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)(a1 + 96));
  }
  else if (v13)
  {
    *(_QWORD *)(a1 + 120) = v13;
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
    (**(void (***)(uint64_t, uint64_t))(v13 - 8))(a1 + 96, a2 + 96);
    goto LABEL_13;
  }
  v14 = *(_OWORD *)(a2 + 96);
  v15 = *(_OWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 96) = v14;
  *(_OWORD *)(a1 + 112) = v15;
LABEL_13:
  v16 = *(_QWORD *)(a2 + 160);
  if (*(_QWORD *)(a1 + 160))
  {
    if (v16)
    {
      sub_142F8((_QWORD *)(a1 + 136), (_QWORD *)(a2 + 136));
      goto LABEL_20;
    }
    _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)(a1 + 136));
  }
  else if (v16)
  {
    *(_QWORD *)(a1 + 160) = v16;
    *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
    (**(void (***)(uint64_t, uint64_t))(v16 - 8))(a1 + 136, a2 + 136);
    goto LABEL_20;
  }
  v17 = *(_OWORD *)(a2 + 136);
  v18 = *(_OWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 136) = v17;
  *(_OWORD *)(a1 + 152) = v18;
LABEL_20:
  v19 = *(_QWORD *)(a2 + 200);
  if (*(_QWORD *)(a1 + 200))
  {
    if (v19)
    {
      sub_142F8((_QWORD *)(a1 + 176), (_QWORD *)(a2 + 176));
      goto LABEL_27;
    }
    _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)(a1 + 176));
  }
  else if (v19)
  {
    *(_QWORD *)(a1 + 200) = v19;
    *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
    (**(void (***)(uint64_t, uint64_t))(v19 - 8))(a1 + 176, a2 + 176);
    goto LABEL_27;
  }
  v20 = *(_OWORD *)(a2 + 176);
  v21 = *(_OWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 176) = v20;
  *(_OWORD *)(a1 + 192) = v21;
LABEL_27:
  v22 = *(_QWORD *)(a2 + 240);
  if (*(_QWORD *)(a1 + 240))
  {
    if (v22)
    {
      sub_142F8((_QWORD *)(a1 + 216), (_QWORD *)(a2 + 216));
      goto LABEL_34;
    }
    _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)(a1 + 216));
  }
  else if (v22)
  {
    *(_QWORD *)(a1 + 240) = v22;
    *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
    (**(void (***)(uint64_t, uint64_t))(v22 - 8))(a1 + 216, a2 + 216);
    goto LABEL_34;
  }
  v23 = *(_OWORD *)(a2 + 216);
  v24 = *(_OWORD *)(a2 + 232);
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
  *(_OWORD *)(a1 + 216) = v23;
  *(_OWORD *)(a1 + 232) = v24;
LABEL_34:
  v25 = *(_QWORD *)(a2 + 280);
  if (*(_QWORD *)(a1 + 280))
  {
    if (v25)
    {
      sub_142F8((_QWORD *)(a1 + 256), (_QWORD *)(a2 + 256));
      goto LABEL_41;
    }
    _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)(a1 + 256));
  }
  else if (v25)
  {
    *(_QWORD *)(a1 + 280) = v25;
    *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
    (**(void (***)(uint64_t, uint64_t))(v25 - 8))(a1 + 256, a2 + 256);
    goto LABEL_41;
  }
  v26 = *(_OWORD *)(a2 + 256);
  v27 = *(_OWORD *)(a2 + 272);
  *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
  *(_OWORD *)(a1 + 256) = v26;
  *(_OWORD *)(a1 + 272) = v27;
LABEL_41:
  v28 = *(_QWORD *)(a2 + 320);
  if (*(_QWORD *)(a1 + 320))
  {
    if (v28)
    {
      sub_142F8((_QWORD *)(a1 + 296), (_QWORD *)(a2 + 296));
      goto LABEL_48;
    }
    _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)(a1 + 296));
  }
  else if (v28)
  {
    *(_QWORD *)(a1 + 320) = v28;
    *(_QWORD *)(a1 + 328) = *(_QWORD *)(a2 + 328);
    (**(void (***)(uint64_t, uint64_t))(v28 - 8))(a1 + 296, a2 + 296);
    goto LABEL_48;
  }
  v29 = *(_OWORD *)(a2 + 296);
  v30 = *(_OWORD *)(a2 + 312);
  *(_QWORD *)(a1 + 328) = *(_QWORD *)(a2 + 328);
  *(_OWORD *)(a1 + 296) = v29;
  *(_OWORD *)(a1 + 312) = v30;
LABEL_48:
  v31 = *(_QWORD *)(a2 + 360);
  if (*(_QWORD *)(a1 + 360))
  {
    if (v31)
    {
      sub_142F8((_QWORD *)(a1 + 336), (_QWORD *)(a2 + 336));
      goto LABEL_55;
    }
    _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)(a1 + 336));
  }
  else if (v31)
  {
    *(_QWORD *)(a1 + 360) = v31;
    *(_QWORD *)(a1 + 368) = *(_QWORD *)(a2 + 368);
    (**(void (***)(uint64_t, uint64_t))(v31 - 8))(a1 + 336, a2 + 336);
    goto LABEL_55;
  }
  v32 = *(_OWORD *)(a2 + 336);
  v33 = *(_OWORD *)(a2 + 352);
  *(_QWORD *)(a1 + 368) = *(_QWORD *)(a2 + 368);
  *(_OWORD *)(a1 + 336) = v32;
  *(_OWORD *)(a1 + 352) = v33;
LABEL_55:
  v34 = *(_QWORD *)(a2 + 400);
  if (*(_QWORD *)(a1 + 400))
  {
    if (v34)
    {
      sub_142F8((_QWORD *)(a1 + 376), (_QWORD *)(a2 + 376));
      goto LABEL_62;
    }
    _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)(a1 + 376));
  }
  else if (v34)
  {
    *(_QWORD *)(a1 + 400) = v34;
    *(_QWORD *)(a1 + 408) = *(_QWORD *)(a2 + 408);
    (**(void (***)(uint64_t, uint64_t))(v34 - 8))(a1 + 376, a2 + 376);
    goto LABEL_62;
  }
  v35 = *(_OWORD *)(a2 + 376);
  v36 = *(_OWORD *)(a2 + 392);
  *(_QWORD *)(a1 + 408) = *(_QWORD *)(a2 + 408);
  *(_OWORD *)(a1 + 376) = v35;
  *(_OWORD *)(a1 + 392) = v36;
LABEL_62:
  sub_142F8((_QWORD *)(a1 + 416), (_QWORD *)(a2 + 416));
  v37 = type metadata accessor for ListItemViewModel(0);
  v38 = *(int *)(v37 + 40);
  v39 = (uint64_t *)(a1 + v38);
  v40 = (uint64_t *)(a2 + v38);
  v41 = type metadata accessor for CardInfo(0);
  v42 = *(_QWORD *)(v41 - 8);
  v43 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v42 + 48);
  v44 = v43(v39, 1, v41);
  v45 = v43(v40, 1, v41);
  if (v44)
  {
    if (!v45)
    {
      v46 = *v40;
      *v39 = *v40;
      v47 = *(int *)(v41 + 20);
      v145 = (char *)v40 + v47;
      v146 = (char *)v39 + v47;
      v48 = a3;
      v49 = type metadata accessor for UUID(0);
      v50 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v49 - 8) + 16);
      swift_bridgeObjectRetain(v46);
      v51 = v49;
      a3 = v48;
      v50(v146, v145, v51);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v42 + 56))(v39, 0, 1, v41);
      goto LABEL_68;
    }
    goto LABEL_67;
  }
  if (v45)
  {
    sub_224DC((uint64_t)v39, type metadata accessor for CardInfo);
LABEL_67:
    v52 = sub_5440(&qword_2618C8);
    memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
    goto LABEL_68;
  }
  v139 = *v40;
  v140 = *v39;
  *v39 = *v40;
  swift_bridgeObjectRetain(v139);
  swift_bridgeObjectRelease(v140);
  v141 = *(int *)(v41 + 20);
  v142 = (char *)v39 + v141;
  v143 = (char *)v40 + v141;
  v144 = type metadata accessor for UUID(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v144 - 8) + 24))(v142, v143, v144);
LABEL_68:
  v53 = *(int *)(v37 + 44);
  v54 = a1 + v53;
  v55 = a2 + v53;
  *(_QWORD *)v54 = *(_QWORD *)(a2 + v53);
  v56 = *(_QWORD *)(a2 + v53 + 8);
  v57 = *(_QWORD *)(a1 + v53 + 8);
  *(_QWORD *)(v54 + 8) = v56;
  swift_bridgeObjectRetain(v56);
  swift_bridgeObjectRelease(v57);
  *(_QWORD *)(v54 + 16) = *(_QWORD *)(v55 + 16);
  v58 = *(_QWORD *)(v55 + 24);
  v59 = *(_QWORD *)(v54 + 24);
  *(_QWORD *)(v54 + 24) = v58;
  swift_bridgeObjectRetain(v58);
  swift_bridgeObjectRelease(v59);
  *(_QWORD *)(v54 + 32) = *(_QWORD *)(v55 + 32);
  v60 = *(_QWORD *)(v55 + 40);
  v61 = *(_QWORD *)(v54 + 40);
  *(_QWORD *)(v54 + 40) = v60;
  swift_bridgeObjectRetain(v60);
  swift_bridgeObjectRelease(v61);
  *(_QWORD *)(v54 + 48) = *(_QWORD *)(v55 + 48);
  v62 = *(_QWORD *)(v55 + 56);
  v63 = *(_QWORD *)(v54 + 56);
  *(_QWORD *)(v54 + 56) = v62;
  swift_bridgeObjectRetain(v62);
  swift_bridgeObjectRelease(v63);
  *(_QWORD *)(v54 + 64) = *(_QWORD *)(v55 + 64);
  v64 = *(_QWORD *)(v55 + 72);
  v65 = *(_QWORD *)(v54 + 72);
  *(_QWORD *)(v54 + 72) = v64;
  swift_bridgeObjectRetain(v64);
  swift_bridgeObjectRelease(v65);
  *(_QWORD *)(v54 + 80) = *(_QWORD *)(v55 + 80);
  v66 = *(_QWORD *)(v55 + 88);
  v67 = *(_QWORD *)(v54 + 88);
  *(_QWORD *)(v54 + 88) = v66;
  swift_bridgeObjectRetain(v66);
  swift_bridgeObjectRelease(v67);
  *(_QWORD *)(v54 + 96) = *(_QWORD *)(v55 + 96);
  v68 = *(_QWORD *)(v55 + 104);
  v69 = *(_QWORD *)(v54 + 104);
  *(_QWORD *)(v54 + 104) = v68;
  swift_bridgeObjectRetain(v68);
  swift_bridgeObjectRelease(v69);
  *(_QWORD *)(v54 + 112) = *(_QWORD *)(v55 + 112);
  v70 = *(_QWORD *)(v55 + 120);
  v71 = *(_QWORD *)(v54 + 120);
  *(_QWORD *)(v54 + 120) = v70;
  swift_bridgeObjectRetain(v70);
  swift_bridgeObjectRelease(v71);
  *(_QWORD *)(v54 + 128) = *(_QWORD *)(v55 + 128);
  v72 = *(_QWORD *)(v55 + 136);
  v73 = *(_QWORD *)(v54 + 136);
  *(_QWORD *)(v54 + 136) = v72;
  swift_bridgeObjectRetain(v72);
  swift_bridgeObjectRelease(v73);
  *(_BYTE *)(v54 + 144) = *(_BYTE *)(v55 + 144);
  if (a1 != a2)
  {
    v74 = a3[5];
    v75 = (_BYTE *)(a1 + v74);
    v76 = (_BYTE *)(a2 + v74);
    sub_B414(a1 + v74, &qword_25F548);
    v77 = sub_5440(&qword_25F548);
    if (swift_getEnumCaseMultiPayload(v76, v77) == 1)
    {
      *v75 = *v76;
      v75[1] = v76[1];
      v78 = (int *)type metadata accessor for SizeConstants.Environment(0);
      v79 = v78[6];
      v80 = &v75[v79];
      v81 = &v76[v79];
      v82 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v82 - 8) + 16))(v80, v81, v82);
      *(_QWORD *)&v75[v78[7]] = *(_QWORD *)&v76[v78[7]];
      v83 = v78[8];
      v84 = &v75[v83];
      v85 = &v76[v83];
      v86 = v85[2];
      *(_WORD *)v84 = *(_WORD *)v85;
      v84[2] = v86;
      v87 = 1;
    }
    else
    {
      v88 = *(_QWORD *)v76;
      *(_QWORD *)v75 = *(_QWORD *)v76;
      swift_retain(v88);
      v87 = 0;
    }
    swift_storeEnumTagMultiPayload(v75, v77, v87);
    v89 = a3[6];
    v90 = (uint64_t *)(a1 + v89);
    v91 = (uint64_t *)(a2 + v89);
    sub_B414(a1 + v89, &qword_25F1E8);
    v92 = sub_5440(&qword_25F1E8);
    if (swift_getEnumCaseMultiPayload(v91, v92) == 1)
    {
      v93 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v93 - 8) + 16))(v90, v91, v93);
      v94 = v90;
      v95 = v92;
      v96 = 1;
    }
    else
    {
      v97 = *v91;
      *v90 = *v91;
      swift_retain(v97);
      v94 = v90;
      v95 = v92;
      v96 = 0;
    }
    swift_storeEnumTagMultiPayload(v94, v95, v96);
  }
  v98 = a3[7];
  v99 = a1 + v98;
  v100 = a2 + v98;
  v101 = *(_QWORD *)v100;
  v102 = *(_BYTE *)(v100 + 8);
  sub_F9E4(*(_QWORD *)v100, v102);
  v103 = *(_QWORD *)v99;
  v104 = *(_BYTE *)(v99 + 8);
  *(_QWORD *)v99 = v101;
  *(_BYTE *)(v99 + 8) = v102;
  sub_BE0C(v103, v104);
  v105 = a3[8];
  v106 = a1 + v105;
  v107 = a2 + v105;
  v108 = *(_QWORD *)v107;
  v109 = *(_BYTE *)(v107 + 8);
  sub_F9E4(*(_QWORD *)v107, v109);
  v110 = *(_QWORD *)v106;
  v111 = *(_BYTE *)(v106 + 8);
  *(_QWORD *)v106 = v108;
  *(_BYTE *)(v106 + 8) = v109;
  sub_BE0C(v110, v111);
  v112 = a3[9];
  v113 = a1 + v112;
  v114 = a2 + v112;
  v115 = *(_QWORD *)v114;
  v116 = *(_BYTE *)(v114 + 8);
  sub_F9E4(*(_QWORD *)v114, v116);
  v117 = *(_QWORD *)v113;
  v118 = *(_BYTE *)(v113 + 8);
  *(_QWORD *)v113 = v115;
  *(_BYTE *)(v113 + 8) = v116;
  sub_BE0C(v117, v118);
  v119 = a3[10];
  v120 = a1 + v119;
  v121 = a2 + v119;
  v122 = *(_QWORD *)v121;
  v123 = *(_BYTE *)(v121 + 8);
  sub_F9E4(*(_QWORD *)v121, v123);
  v124 = *(_QWORD *)v120;
  v125 = *(_BYTE *)(v120 + 8);
  *(_QWORD *)v120 = v122;
  *(_BYTE *)(v120 + 8) = v123;
  sub_BE0C(v124, v125);
  if (a1 != a2)
  {
    v126 = a3[11];
    v127 = (uint64_t *)(a1 + v126);
    v128 = (uint64_t *)(a2 + v126);
    sub_B414(a1 + v126, &qword_25FAA8);
    v129 = sub_5440(&qword_25FAA8);
    if (swift_getEnumCaseMultiPayload(v128, v129) == 1)
    {
      v130 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v130 - 8) + 16))(v127, v128, v130);
      v131 = 1;
    }
    else
    {
      v132 = *v128;
      *v127 = *v128;
      swift_retain(v132);
      v131 = 0;
    }
    swift_storeEnumTagMultiPayload(v127, v129, v131);
  }
  v133 = a3[12];
  v134 = (_QWORD *)(a1 + v133);
  v135 = (_QWORD *)(a2 + v133);
  v136 = v135[1];
  v137 = v134[1];
  *v134 = *v135;
  v134[1] = v136;
  swift_retain(v136);
  swift_release(v137);
  return a1;
}

uint64_t initializeWithTake for ListItemView(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  _WORD *v28;
  _WORD *v29;
  uint64_t v30;
  int *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  void *v40;
  const void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  const void *v58;
  uint64_t v59;
  uint64_t v60;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_WORD *)(a1 + 88) = *(_WORD *)(a2 + 88);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  memcpy((void *)(a1 + 96), (const void *)(a2 + 96), 0x118uLL);
  v6 = *(_OWORD *)(a2 + 392);
  *(_OWORD *)(a1 + 376) = *(_OWORD *)(a2 + 376);
  *(_OWORD *)(a1 + 392) = v6;
  *(_QWORD *)(a1 + 408) = *(_QWORD *)(a2 + 408);
  v7 = *(_OWORD *)(a2 + 432);
  *(_OWORD *)(a1 + 416) = *(_OWORD *)(a2 + 416);
  *(_OWORD *)(a1 + 432) = v7;
  *(_QWORD *)(a1 + 448) = *(_QWORD *)(a2 + 448);
  v8 = type metadata accessor for ListItemViewModel(0);
  v9 = *(int *)(v8 + 40);
  v10 = (_QWORD *)(a1 + v9);
  v11 = (_QWORD *)(a2 + v9);
  v12 = type metadata accessor for CardInfo(0);
  v13 = *(_QWORD *)(v12 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
  {
    v14 = sub_5440(&qword_2618C8);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    *v10 = *v11;
    v15 = *(int *)(v12 + 20);
    v16 = (char *)v10 + v15;
    v17 = (char *)v11 + v15;
    v18 = type metadata accessor for UUID(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v16, v17, v18);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  }
  v19 = *(int *)(v8 + 44);
  v20 = a1 + v19;
  v21 = (__int128 *)(a2 + v19);
  v22 = v21[7];
  *(_OWORD *)(v20 + 96) = v21[6];
  *(_OWORD *)(v20 + 112) = v22;
  *(_OWORD *)(v20 + 128) = v21[8];
  *(_BYTE *)(v20 + 144) = *((_BYTE *)v21 + 144);
  v23 = v21[3];
  *(_OWORD *)(v20 + 32) = v21[2];
  *(_OWORD *)(v20 + 48) = v23;
  v24 = v21[5];
  *(_OWORD *)(v20 + 64) = v21[4];
  *(_OWORD *)(v20 + 80) = v24;
  v25 = *v21;
  v26 = v21[1];
  v27 = a3[5];
  v28 = (_WORD *)(a1 + v27);
  v29 = (_WORD *)(a2 + v27);
  *(_OWORD *)v20 = v25;
  *(_OWORD *)(v20 + 16) = v26;
  v30 = sub_5440(&qword_25F548);
  if (swift_getEnumCaseMultiPayload(v29, v30) == 1)
  {
    *v28 = *v29;
    v31 = (int *)type metadata accessor for SizeConstants.Environment(0);
    v32 = v31[6];
    v33 = (char *)v28 + v32;
    v34 = (char *)v29 + v32;
    v35 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v35 - 8) + 32))(v33, v34, v35);
    *(_QWORD *)((char *)v28 + v31[7]) = *(_QWORD *)((char *)v29 + v31[7]);
    v36 = v31[8];
    v37 = (char *)v28 + v36;
    v38 = (char *)v29 + v36;
    v37[2] = v38[2];
    *(_WORD *)v37 = *(_WORD *)v38;
    swift_storeEnumTagMultiPayload(v28, v30, 1);
  }
  else
  {
    memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
  }
  v39 = a3[6];
  v40 = (void *)(a1 + v39);
  v41 = (const void *)(a2 + v39);
  v42 = sub_5440(&qword_25F1E8);
  if (swift_getEnumCaseMultiPayload(v41, v42) == 1)
  {
    v43 = type metadata accessor for ColorScheme(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v43 - 8) + 32))(v40, v41, v43);
    swift_storeEnumTagMultiPayload(v40, v42, 1);
  }
  else
  {
    memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
  }
  v44 = a3[7];
  v45 = a3[8];
  v46 = a1 + v44;
  v47 = a2 + v44;
  *(_QWORD *)v46 = *(_QWORD *)v47;
  *(_BYTE *)(v46 + 8) = *(_BYTE *)(v47 + 8);
  v48 = a1 + v45;
  v49 = a2 + v45;
  *(_QWORD *)v48 = *(_QWORD *)v49;
  *(_BYTE *)(v48 + 8) = *(_BYTE *)(v49 + 8);
  v50 = a3[9];
  v51 = a3[10];
  v52 = a1 + v50;
  v53 = a2 + v50;
  *(_QWORD *)v52 = *(_QWORD *)v53;
  *(_BYTE *)(v52 + 8) = *(_BYTE *)(v53 + 8);
  v54 = a1 + v51;
  v55 = a2 + v51;
  *(_QWORD *)v54 = *(_QWORD *)v55;
  *(_BYTE *)(v54 + 8) = *(_BYTE *)(v55 + 8);
  v56 = a3[11];
  v57 = (void *)(a1 + v56);
  v58 = (const void *)(a2 + v56);
  v59 = sub_5440(&qword_25FAA8);
  if (swift_getEnumCaseMultiPayload(v58, v59) == 1)
  {
    v60 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v60 - 8) + 32))(v57, v58, v60);
    swift_storeEnumTagMultiPayload(v57, v59, 1);
  }
  else
  {
    memcpy(v57, v58, *(_QWORD *)(*(_QWORD *)(v59 - 8) + 64));
  }
  *(_OWORD *)(a1 + a3[12]) = *(_OWORD *)(a2 + a3[12]);
  return a1;
}

uint64_t assignWithTake for ListItemView(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t *, uint64_t, uint64_t);
  int v22;
  int v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _WORD *v51;
  _WORD *v52;
  uint64_t v53;
  int *v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  void *v63;
  const void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  char v90;
  uint64_t v91;
  void *v92;
  const void *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  if (a1 != a2)
  {
    sub_2EFF0((_QWORD *)(a1 + 24));
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(_WORD *)(a1 + 88) = *(_WORD *)(a2 + 88);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  }
  if (*(_QWORD *)(a1 + 120))
    _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)(a1 + 96));
  v6 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v6;
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  if (*(_QWORD *)(a1 + 160))
    _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)(a1 + 136));
  v7 = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = v7;
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  if (*(_QWORD *)(a1 + 200))
    _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)(a1 + 176));
  v8 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 192) = v8;
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  if (*(_QWORD *)(a1 + 240))
    _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)(a1 + 216));
  v9 = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(a1 + 232) = v9;
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
  if (*(_QWORD *)(a1 + 280))
    _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)(a1 + 256));
  v10 = *(_OWORD *)(a2 + 272);
  *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
  *(_OWORD *)(a1 + 272) = v10;
  *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
  if (*(_QWORD *)(a1 + 320))
    _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)(a1 + 296));
  v11 = *(_OWORD *)(a2 + 312);
  *(_OWORD *)(a1 + 296) = *(_OWORD *)(a2 + 296);
  *(_OWORD *)(a1 + 312) = v11;
  *(_QWORD *)(a1 + 328) = *(_QWORD *)(a2 + 328);
  if (*(_QWORD *)(a1 + 360))
    _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)(a1 + 336));
  v12 = *(_OWORD *)(a2 + 352);
  *(_OWORD *)(a1 + 336) = *(_OWORD *)(a2 + 336);
  *(_OWORD *)(a1 + 352) = v12;
  *(_QWORD *)(a1 + 368) = *(_QWORD *)(a2 + 368);
  if (*(_QWORD *)(a1 + 400))
    _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)(a1 + 376));
  v13 = *(_OWORD *)(a2 + 392);
  *(_OWORD *)(a1 + 376) = *(_OWORD *)(a2 + 376);
  *(_OWORD *)(a1 + 392) = v13;
  *(_QWORD *)(a1 + 408) = *(_QWORD *)(a2 + 408);
  _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)(a1 + 416));
  v14 = *(_OWORD *)(a2 + 432);
  *(_OWORD *)(a1 + 416) = *(_OWORD *)(a2 + 416);
  *(_OWORD *)(a1 + 432) = v14;
  *(_QWORD *)(a1 + 448) = *(_QWORD *)(a2 + 448);
  v15 = type metadata accessor for ListItemViewModel(0);
  v16 = *(int *)(v15 + 40);
  v17 = (uint64_t *)(a1 + v16);
  v18 = (uint64_t *)(a2 + v16);
  v19 = type metadata accessor for CardInfo(0);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v20 + 48);
  v22 = v21(v17, 1, v19);
  v23 = v21(v18, 1, v19);
  if (v22)
  {
    if (!v23)
    {
      *v17 = *v18;
      v24 = *(int *)(v19 + 20);
      v25 = (char *)v17 + v24;
      v26 = (char *)v18 + v24;
      v27 = type metadata accessor for UUID(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 32))(v25, v26, v27);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (v23)
  {
    sub_224DC((uint64_t)v17, type metadata accessor for CardInfo);
LABEL_24:
    v28 = sub_5440(&qword_2618C8);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    goto LABEL_25;
  }
  v99 = *v17;
  *v17 = *v18;
  swift_bridgeObjectRelease(v99);
  v100 = *(int *)(v19 + 20);
  v101 = (char *)v17 + v100;
  v102 = (char *)v18 + v100;
  v103 = type metadata accessor for UUID(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v103 - 8) + 40))(v101, v102, v103);
LABEL_25:
  v29 = *(int *)(v15 + 44);
  v30 = a1 + v29;
  v31 = a2 + v29;
  v32 = *(_QWORD *)(a2 + v29 + 8);
  v33 = *(_QWORD *)(a1 + v29 + 8);
  *(_QWORD *)v30 = *(_QWORD *)(a2 + v29);
  *(_QWORD *)(v30 + 8) = v32;
  swift_bridgeObjectRelease(v33);
  v34 = *(_QWORD *)(v31 + 24);
  v35 = *(_QWORD *)(v30 + 24);
  *(_QWORD *)(v30 + 16) = *(_QWORD *)(v31 + 16);
  *(_QWORD *)(v30 + 24) = v34;
  swift_bridgeObjectRelease(v35);
  v36 = *(_QWORD *)(v31 + 40);
  v37 = *(_QWORD *)(v30 + 40);
  *(_QWORD *)(v30 + 32) = *(_QWORD *)(v31 + 32);
  *(_QWORD *)(v30 + 40) = v36;
  swift_bridgeObjectRelease(v37);
  v38 = *(_QWORD *)(v31 + 56);
  v39 = *(_QWORD *)(v30 + 56);
  *(_QWORD *)(v30 + 48) = *(_QWORD *)(v31 + 48);
  *(_QWORD *)(v30 + 56) = v38;
  swift_bridgeObjectRelease(v39);
  v40 = *(_QWORD *)(v31 + 72);
  v41 = *(_QWORD *)(v30 + 72);
  *(_QWORD *)(v30 + 64) = *(_QWORD *)(v31 + 64);
  *(_QWORD *)(v30 + 72) = v40;
  swift_bridgeObjectRelease(v41);
  v42 = *(_QWORD *)(v31 + 88);
  v43 = *(_QWORD *)(v30 + 88);
  *(_QWORD *)(v30 + 80) = *(_QWORD *)(v31 + 80);
  *(_QWORD *)(v30 + 88) = v42;
  swift_bridgeObjectRelease(v43);
  v44 = *(_QWORD *)(v31 + 104);
  v45 = *(_QWORD *)(v30 + 104);
  *(_QWORD *)(v30 + 96) = *(_QWORD *)(v31 + 96);
  *(_QWORD *)(v30 + 104) = v44;
  swift_bridgeObjectRelease(v45);
  v46 = *(_QWORD *)(v31 + 120);
  v47 = *(_QWORD *)(v30 + 120);
  *(_QWORD *)(v30 + 112) = *(_QWORD *)(v31 + 112);
  *(_QWORD *)(v30 + 120) = v46;
  swift_bridgeObjectRelease(v47);
  v48 = *(_QWORD *)(v31 + 136);
  v49 = *(_QWORD *)(v30 + 136);
  *(_QWORD *)(v30 + 128) = *(_QWORD *)(v31 + 128);
  *(_QWORD *)(v30 + 136) = v48;
  swift_bridgeObjectRelease(v49);
  *(_BYTE *)(v30 + 144) = *(_BYTE *)(v31 + 144);
  if (a1 != a2)
  {
    v50 = a3[5];
    v51 = (_WORD *)(a1 + v50);
    v52 = (_WORD *)(a2 + v50);
    sub_B414(a1 + v50, &qword_25F548);
    v53 = sub_5440(&qword_25F548);
    if (swift_getEnumCaseMultiPayload(v52, v53) == 1)
    {
      *v51 = *v52;
      v54 = (int *)type metadata accessor for SizeConstants.Environment(0);
      v55 = v54[6];
      v56 = (char *)v51 + v55;
      v57 = (char *)v52 + v55;
      v58 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v58 - 8) + 32))(v56, v57, v58);
      *(_QWORD *)((char *)v51 + v54[7]) = *(_QWORD *)((char *)v52 + v54[7]);
      v59 = v54[8];
      v60 = (char *)v51 + v59;
      v61 = (char *)v52 + v59;
      v60[2] = v61[2];
      *(_WORD *)v60 = *(_WORD *)v61;
      swift_storeEnumTagMultiPayload(v51, v53, 1);
    }
    else
    {
      memcpy(v51, v52, *(_QWORD *)(*(_QWORD *)(v53 - 8) + 64));
    }
    v62 = a3[6];
    v63 = (void *)(a1 + v62);
    v64 = (const void *)(a2 + v62);
    sub_B414(a1 + v62, &qword_25F1E8);
    v65 = sub_5440(&qword_25F1E8);
    if (swift_getEnumCaseMultiPayload(v64, v65) == 1)
    {
      v66 = type metadata accessor for ColorScheme(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v66 - 8) + 32))(v63, v64, v66);
      swift_storeEnumTagMultiPayload(v63, v65, 1);
    }
    else
    {
      memcpy(v63, v64, *(_QWORD *)(*(_QWORD *)(v65 - 8) + 64));
    }
  }
  v67 = a3[7];
  v68 = a1 + v67;
  v69 = (uint64_t *)(a2 + v67);
  v70 = *v69;
  LOBYTE(v69) = *((_BYTE *)v69 + 8);
  v71 = *(_QWORD *)v68;
  v72 = *(_BYTE *)(v68 + 8);
  *(_QWORD *)v68 = v70;
  *(_BYTE *)(v68 + 8) = (_BYTE)v69;
  sub_BE0C(v71, v72);
  v73 = a3[8];
  v74 = a1 + v73;
  v75 = (uint64_t *)(a2 + v73);
  v76 = *v75;
  LOBYTE(v75) = *((_BYTE *)v75 + 8);
  v77 = *(_QWORD *)v74;
  v78 = *(_BYTE *)(v74 + 8);
  *(_QWORD *)v74 = v76;
  *(_BYTE *)(v74 + 8) = (_BYTE)v75;
  sub_BE0C(v77, v78);
  v79 = a3[9];
  v80 = a1 + v79;
  v81 = (uint64_t *)(a2 + v79);
  v82 = *v81;
  LOBYTE(v81) = *((_BYTE *)v81 + 8);
  v83 = *(_QWORD *)v80;
  v84 = *(_BYTE *)(v80 + 8);
  *(_QWORD *)v80 = v82;
  *(_BYTE *)(v80 + 8) = (_BYTE)v81;
  sub_BE0C(v83, v84);
  v85 = a3[10];
  v86 = a1 + v85;
  v87 = (uint64_t *)(a2 + v85);
  v88 = *v87;
  LOBYTE(v87) = *((_BYTE *)v87 + 8);
  v89 = *(_QWORD *)v86;
  v90 = *(_BYTE *)(v86 + 8);
  *(_QWORD *)v86 = v88;
  *(_BYTE *)(v86 + 8) = (_BYTE)v87;
  sub_BE0C(v89, v90);
  if (a1 != a2)
  {
    v91 = a3[11];
    v92 = (void *)(a1 + v91);
    v93 = (const void *)(a2 + v91);
    sub_B414(a1 + v91, &qword_25FAA8);
    v94 = sub_5440(&qword_25FAA8);
    if (swift_getEnumCaseMultiPayload(v93, v94) == 1)
    {
      v95 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v95 - 8) + 32))(v92, v93, v95);
      swift_storeEnumTagMultiPayload(v92, v94, 1);
    }
    else
    {
      memcpy(v92, v93, *(_QWORD *)(*(_QWORD *)(v94 - 8) + 64));
    }
  }
  v96 = a3[12];
  v97 = *(_QWORD *)(a1 + v96 + 8);
  *(_OWORD *)(a1 + v96) = *(_OWORD *)(a2 + v96);
  swift_release(v97);
  return a1;
}

uint64_t getEnumTagSinglePayload for ListItemView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1DAA68);
}

uint64_t sub_1DAA68(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v17;

  v6 = type metadata accessor for ListItemViewModel(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = sub_5440(&qword_25F558);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v13 = a3[5];
LABEL_9:
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = sub_5440(&qword_25F210);
  v12 = *(_QWORD *)(v14 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v14;
    v13 = a3[6];
    goto LABEL_9;
  }
  v15 = sub_5440(&qword_260E40);
  v12 = *(_QWORD *)(v15 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v15;
    v13 = a3[11];
    goto LABEL_9;
  }
  v17 = *(_QWORD *)(a1 + a3[12]);
  if (v17 >= 0xFFFFFFFF)
    LODWORD(v17) = -1;
  return (v17 + 1);
}

uint64_t storeEnumTagSinglePayload for ListItemView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1DAB70);
}

uint64_t sub_1DAB70(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;

  v8 = type metadata accessor for ListItemViewModel(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  v13 = sub_5440(&qword_25F558);
  v14 = *(_QWORD *)(v13 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = v13;
    v15 = a4[5];
LABEL_9:
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  v16 = sub_5440(&qword_25F210);
  v14 = *(_QWORD *)(v16 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = v16;
    v15 = a4[6];
    goto LABEL_9;
  }
  result = sub_5440(&qword_260E40);
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v15 = a4[11];
    goto LABEL_9;
  }
  *(_QWORD *)(a1 + a4[12]) = (a2 - 1);
  return result;
}

void sub_1DAC68(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD v10[9];

  v2 = type metadata accessor for ListItemViewModel(319);
  if (v3 <= 0x3F)
  {
    v10[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_2ADCC(319, (unint64_t *)&qword_25F5C8, type metadata accessor for SizeConstants);
    if (v5 <= 0x3F)
    {
      v10[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_2ADCC(319, (unint64_t *)&qword_25F298, type metadata accessor for ColorConstants);
      if (v7 <= 0x3F)
      {
        v10[2] = *(_QWORD *)(v6 - 8) + 64;
        v10[3] = "\t";
        v10[4] = "\t";
        v10[5] = "\t";
        v10[6] = "\t";
        sub_2ADCC(319, (unint64_t *)&qword_260EB0, (uint64_t (*)(uint64_t))&type metadata accessor for DynamicTypeSize);
        if (v9 <= 0x3F)
        {
          v10[7] = *(_QWORD *)(v8 - 8) + 64;
          v10[8] = (char *)&value witness table for () + 64;
          swift_initStructMetadata(a1, 256, 9, v10, a1 + 16);
        }
      }
    }
  }
}

uint64_t sub_1DAD70()
{
  return sub_2F608(&qword_26C5D0, &qword_26C5D8, (void (*)(void))sub_1D7D10, (void (*)(void))sub_1D80E0);
}

unint64_t sub_1DADBC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_26C638;
  if (!qword_26C638)
  {
    v1 = sub_7EF8(&qword_26C630);
    sub_1DAE28();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_26C638);
  }
  return result;
}

unint64_t sub_1DAE28()
{
  unint64_t result;
  uint64_t v1;

  result = qword_26C640;
  if (!qword_26C640)
  {
    v1 = sub_7EF8(&qword_26C648);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_26C640);
  }
  return result;
}

unint64_t sub_1DAE8C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_26C650;
  if (!qword_26C650)
  {
    v1 = type metadata accessor for ListItemThumbnailView(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for ListItemThumbnailView, v1);
    atomic_store(result, (unint64_t *)&qword_26C650);
  }
  return result;
}

uint64_t YIRSourceData.init(frameName:readerType:totalReadTime:longestPageCount:longestAudiobook:finishedSeries:mostContentGenre:mostContentAuthor:totalRatedContent:finishedBooks:longestStreak:readingGoalsReachedDays:avgReadingTime:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, int a6, uint64_t a7, int a8, double a9, double a10, double a11, double a12, double a13, double a14, double a15, double a16, uint64_t a17, unint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,char a26,uint64_t a27,char a28,uint64_t a29,char a30,double a31,char a32)
{
  uint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  uint64_t result;
  uint64_t v36;
  uint64_t v37;
  char v38;
  char v39;
  uint64_t v40;
  uint64_t v45;
  _BYTE v46[4];
  int v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;

  v49 = a8;
  v47 = a6;
  v48 = a5;
  v29 = sub_5440(&qword_2642E8);
  __chkstk_darwin(v29);
  v31 = &v46[-((v30 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v32 = sub_5440(&qword_2642F0);
  __chkstk_darwin(v32);
  v34 = &v46[-((v33 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_B3D0(a1, (uint64_t)v34, &qword_2642F0);
  result = sub_B3D0(a2, (uint64_t)v31, &qword_2642E8);
  v50 = a2;
  v51 = a1;
  if ((a4 & 1) == 0)
  {
    if ((~a3 & 0x7FF0000000000000) != 0)
    {
      if (*(double *)&a3 > -9.22337204e18)
      {
        if (*(double *)&a3 < 9.22337204e18)
        {
          v36 = (uint64_t)*(double *)&a3;
          goto LABEL_7;
        }
LABEL_26:
        __break(1u);
LABEL_27:
        __break(1u);
        goto LABEL_28;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_26;
  }
  v36 = 0;
LABEL_7:
  v37 = sub_1DB180(a17, a18);
  v39 = v38;
  result = swift_bridgeObjectRelease(a18);
  if ((a32 & 1) != 0)
  {
    v40 = 0;
    goto LABEL_13;
  }
  if ((~*(_QWORD *)&a31 & 0x7FF0000000000000) == 0)
    goto LABEL_27;
  if (a31 <= -9.22337204e18)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  if (a31 >= 9.22337204e18)
  {
LABEL_29:
    __break(1u);
    return result;
  }
  v40 = (uint64_t)a31;
LABEL_13:
  if ((a30 & 1) != 0)
    a29 = 0;
  if ((a28 & 1) != 0)
    a27 = 0;
  if ((a26 & 1) != 0)
    a25 = 0;
  if ((a24 & 1) != 0)
    a23 = 0;
  v45 = v48;
  if ((v47 & 1) != 0)
    v45 = 0;
  YIRSourceData.init(frameName:readerType:totalReadTime:longestPageCount:longestAudiobook:finishedSeries:mostContentGenre:mostContentAuthor:totalRatedContent:finishedBooks:longestStreak:readingGoalsReachedDays:avgReadingTime:)(v34, v31, v36, a4 & 1, v45, v47 & 1, a7, v49 & 1, v37, v39 & 1, a19, a20, a21, a22, a23, a24 & 1, a25, a26 & 1, a27,
    a28 & 1,
    a29,
    a30 & 1,
    v40,
    a32 & 1);
  sub_B414(v50, &qword_2642E8);
  return sub_B414(v51, &qword_2642F0);
}

uint64_t sub_1DB180(uint64_t result, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  unsigned __int8 *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 *v20;
  unsigned int v21;
  uint64_t v22;
  char v23;
  _QWORD v24[3];

  if (!a2)
    return 0;
  v3 = result;
  v4 = HIBYTE(a2) & 0xF;
  v5 = result & 0xFFFFFFFFFFFFLL;
  if (!((a2 & 0x2000000000000000) != 0 ? v4 : result & 0xFFFFFFFFFFFFLL))
    return 0;
  if ((a2 & 0x1000000000000000) == 0)
  {
    if ((a2 & 0x2000000000000000) == 0)
    {
      if ((result & 0x1000000000000000) != 0)
        v7 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
      else
        v7 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(result, a2);
      v8 = (uint64_t)sub_1DB9FC(v7, v5, 10);
      v10 = v9 & 1;
      goto LABEL_46;
    }
    v24[0] = result;
    v24[1] = a2 & 0xFFFFFFFFFFFFFFLL;
    if (result == 43)
    {
      if (!v4)
        goto LABEL_58;
      if (v4 == 1 || (BYTE1(result) - 48) > 9u)
        goto LABEL_33;
      v8 = (BYTE1(result) - 48);
      if (v4 != 2)
      {
        if ((BYTE2(result) - 48) > 9u)
          goto LABEL_33;
        v8 = 10 * (BYTE1(result) - 48) + (BYTE2(result) - 48);
        v11 = v4 - 3;
        if (v11)
        {
          v12 = (unsigned __int8 *)v24 + 3;
          while (1)
          {
            v13 = *v12 - 48;
            if (v13 > 9)
              goto LABEL_33;
            v14 = 10 * v8;
            if ((unsigned __int128)(v8 * (__int128)10) >> 64 != (10 * v8) >> 63)
              goto LABEL_33;
            v8 = v14 + v13;
            if (__OFADD__(v14, v13))
              goto LABEL_33;
            v10 = 0;
            ++v12;
            if (!--v11)
              goto LABEL_46;
          }
        }
      }
    }
    else
    {
      if (result == 45)
      {
        if (v4)
        {
          if (v4 != 1 && (BYTE1(result) - 48) <= 9u)
          {
            if (v4 == 2)
            {
              v10 = 0;
              v8 = -(uint64_t)(BYTE1(result) - 48);
              goto LABEL_46;
            }
            if ((BYTE2(result) - 48) <= 9u)
            {
              v8 = -10 * (BYTE1(result) - 48) - (BYTE2(result) - 48);
              v19 = v4 - 3;
              if (!v19)
                goto LABEL_45;
              v20 = (unsigned __int8 *)v24 + 3;
              while (1)
              {
                v21 = *v20 - 48;
                if (v21 > 9)
                  break;
                v22 = 10 * v8;
                if ((unsigned __int128)(v8 * (__int128)10) >> 64 != (10 * v8) >> 63)
                  break;
                v8 = v22 - v21;
                if (__OFSUB__(v22, v21))
                  break;
                v10 = 0;
                ++v20;
                if (!--v19)
                  goto LABEL_46;
              }
            }
          }
LABEL_33:
          v8 = 0;
          v10 = 1;
          goto LABEL_46;
        }
        __break(1u);
LABEL_58:
        __break(1u);
        return result;
      }
      if (!v4 || (result - 48) > 9u)
        goto LABEL_33;
      v8 = (result - 48);
      if (v4 != 1)
      {
        if ((BYTE1(result) - 48) > 9u)
          goto LABEL_33;
        v8 = 10 * (result - 48) + (BYTE1(result) - 48);
        v15 = v4 - 2;
        if (v15)
        {
          v16 = (unsigned __int8 *)v24 + 2;
          while (1)
          {
            v17 = *v16 - 48;
            if (v17 > 9)
              goto LABEL_33;
            v18 = 10 * v8;
            if ((unsigned __int128)(v8 * (__int128)10) >> 64 != (10 * v8) >> 63)
              goto LABEL_33;
            v8 = v18 + v17;
            if (__OFADD__(v18, v17))
              goto LABEL_33;
            v10 = 0;
            ++v16;
            if (!--v15)
              goto LABEL_46;
          }
        }
      }
    }
LABEL_45:
    v10 = 0;
    goto LABEL_46;
  }
  swift_bridgeObjectRetain(a2);
  v8 = (uint64_t)sub_1DB918(v3, a2, 10);
  v10 = v23;
  swift_bridgeObjectRelease(a2);
LABEL_46:
  if ((v10 & 1) != 0)
    return 0;
  else
    return v8;
}

uint64_t sub_1DB45C(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v2 = a1;
  v3 = 7;
  if (((a2 >> 60) & ((a1 & 0x800000000000000) == 0)) != 0)
    v3 = 11;
  v4 = String.subscript.getter(15, v3 | (v2 << 16), a1, a2);
  v6 = v5;
  v9 = sub_1DB4D8(v4, v7, v8, v5);
  swift_bridgeObjectRelease(v6);
  return v9;
}

uint64_t sub_1DB4D8(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v5;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[5];

  v5 = a3;
  if ((a4 & 0x1000000000000000) != 0)
  {
    v12 = sub_1DB61C(a1, a2, a3, a4);
    if (v12)
    {
      v9 = v12;
      v8 = (unint64_t)sub_14B0CC(v12, 0);
      v5 = sub_1DB708((unint64_t)v15, v8 + 32, v9, a1, a2, v5, a4);
      v13 = v15[3];
      swift_bridgeObjectRetain(a4);
      swift_bridgeObjectRelease(v13);
      if (v5 != v9)
      {
        __break(1u);
        goto LABEL_11;
      }
    }
    else
    {
      v8 = (unint64_t)&_swiftEmptyArrayStorage;
    }
    v14 = static String._uncheckedFromUTF8(_:)(v8 + 32, *(_QWORD *)(v8 + 16));
    swift_release(v8);
    return v14;
  }
  else
  {
    v8 = a1 >> 16;
    v9 = a2 >> 16;
    if ((a4 & 0x2000000000000000) == 0)
    {
      if ((a3 & 0x1000000000000000) != 0)
      {
        v10 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
LABEL_5:
        v10 += v8;
        return static String._uncheckedFromUTF8(_:)(v10, v9 - v8);
      }
LABEL_11:
      v10 = _StringObject.sharedUTF8.getter(v5, a4);
      if (!v10)
        return static String._uncheckedFromUTF8(_:)(v10, v9 - v8);
      goto LABEL_5;
    }
    v15[0] = a3;
    v15[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    return static String._uncheckedFromUTF8(_:)((char *)v15 + v8, v9 - v8);
  }
}

unint64_t sub_1DB61C(unint64_t result, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v7 = result;
  v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0)
    LOBYTE(v8) = 1;
  v9 = 4 << v8;
  if ((result & 0xC) == 4 << v8)
  {
    result = sub_14B130(result, a3, a4);
    v7 = result;
  }
  if ((a2 & 0xC) == v9)
  {
    result = sub_14B130(a2, a3, a4);
    a2 = result;
    if ((a4 & 0x1000000000000000) == 0)
      return (a2 >> 16) - (v7 >> 16);
  }
  else if ((a4 & 0x1000000000000000) == 0)
  {
    return (a2 >> 16) - (v7 >> 16);
  }
  v10 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0)
    v10 = a3 & 0xFFFFFFFFFFFFLL;
  if (v10 < v7 >> 16)
  {
    __break(1u);
  }
  else if (v10 >= a2 >> 16)
  {
    return String.UTF8View._foreignDistance(from:to:)(v7, a2, a3, a4);
  }
  __break(1u);
  return result;
}

unint64_t sub_1DB708(unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v26;
  unint64_t v27;
  _QWORD v28[2];

  v9 = (_QWORD *)result;
  if (!a2)
    goto LABEL_5;
  if (!a3)
  {
    v12 = a4;
    v11 = 0;
    goto LABEL_33;
  }
  if (a3 < 0)
    goto LABEL_36;
  v10 = a5 >> 14;
  v27 = a4 >> 14;
  if (a4 >> 14 == a5 >> 14)
  {
LABEL_5:
    v11 = 0;
    v12 = a4;
LABEL_33:
    *v9 = a4;
    v9[1] = a5;
    v9[2] = a6;
    v9[3] = a7;
    v9[4] = v12;
    return v11;
  }
  v11 = 0;
  v14 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000) == 0)
    LOBYTE(v14) = 1;
  v15 = 4 << v14;
  v21 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  v22 = a7 & 0xFFFFFFFFFFFFFFLL;
  v16 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000) == 0)
    v16 = a6 & 0xFFFFFFFFFFFFLL;
  v23 = v16;
  v26 = a3 - 1;
  v12 = a4;
  while (1)
  {
    v17 = v12 & 0xC;
    result = v12;
    if (v17 == v15)
      result = sub_14B130(v12, a6, a7);
    if (result >> 14 < v27 || result >> 14 >= v10)
      break;
    if ((a7 & 0x1000000000000000) != 0)
    {
      result = String.UTF8View._foreignSubscript(position:)();
      v19 = result;
      if (v17 != v15)
        goto LABEL_23;
    }
    else
    {
      v18 = result >> 16;
      if ((a7 & 0x2000000000000000) != 0)
      {
        v28[0] = a6;
        v28[1] = v22;
        v19 = *((_BYTE *)v28 + v18);
        if (v17 != v15)
          goto LABEL_23;
      }
      else
      {
        result = v21;
        if ((a6 & 0x1000000000000000) == 0)
          result = _StringObject.sharedUTF8.getter(a6, a7);
        v19 = *(_BYTE *)(result + v18);
        if (v17 != v15)
        {
LABEL_23:
          if ((a7 & 0x1000000000000000) == 0)
            goto LABEL_24;
          goto LABEL_27;
        }
      }
    }
    result = sub_14B130(v12, a6, a7);
    v12 = result;
    if ((a7 & 0x1000000000000000) == 0)
    {
LABEL_24:
      v12 = (v12 & 0xFFFFFFFFFFFF0000) + 65540;
      goto LABEL_29;
    }
LABEL_27:
    if (v23 <= v12 >> 16)
      goto LABEL_35;
    v12 = String.UTF8View._foreignIndex(after:)(v12, a6, a7);
LABEL_29:
    *(_BYTE *)(a2 + v11) = v19;
    if (v26 == v11)
    {
      v11 = a3;
      goto LABEL_33;
    }
    ++v11;
    if (v10 == v12 >> 14)
      goto LABEL_33;
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

unsigned __int8 *sub_1DB918(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned __int8 *v12;
  uint64_t v14;
  uint64_t v15;

  v14 = a1;
  v15 = a2;
  swift_bridgeObjectRetain(a2);
  v4 = String.init<A>(_:)(&v14, &type metadata for String, &protocol witness table for String, &protocol witness table for String);
  v6 = v4;
  v7 = v5;
  if ((v5 & 0x1000000000000000) == 0)
  {
    if ((v5 & 0x2000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    v9 = HIBYTE(v7) & 0xF;
    v14 = v6;
    v15 = v7 & 0xFFFFFFFFFFFFFFLL;
    v8 = (unsigned __int8 *)&v14;
    goto LABEL_7;
  }
  v6 = sub_1DB45C(v4, v5);
  v11 = v10;
  swift_bridgeObjectRelease(v7);
  v7 = v11;
  if ((v11 & 0x2000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if ((v6 & 0x1000000000000000) != 0)
  {
    v8 = (unsigned __int8 *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v9 = v6 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v8 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v6, v7);
  }
LABEL_7:
  v12 = sub_1DB9FC(v8, v9, a3);
  swift_bridgeObjectRelease(v7);
  return v12;
}

unsigned __int8 *sub_1DB9FC(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  uint64_t v9;
  unsigned __int8 *i;
  unsigned int v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned __int8 *v18;
  unsigned int v19;
  char v20;
  uint64_t v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  unsigned __int8 v24;
  uint64_t v25;
  unsigned int v26;
  char v27;
  uint64_t v28;

  v3 = a2;
  v4 = *result;
  if (v4 != 43)
  {
    if (v4 == 45)
    {
      if (a2 >= 1)
      {
        v5 = a2 - 1;
        if (a2 != 1)
        {
          v6 = a3 + 48;
          v7 = a3 + 55;
          v8 = a3 + 87;
          if (a3 > 10)
          {
            v6 = 58;
          }
          else
          {
            v8 = 97;
            v7 = 65;
          }
          if (result)
          {
            v9 = 0;
            for (i = result + 1; ; ++i)
            {
              v11 = *i;
              if (v11 < 0x30 || v11 >= v6)
              {
                if (v11 < 0x41 || v11 >= v7)
                {
                  if (v11 < 0x61 || v11 >= v8)
                    return 0;
                  v12 = -87;
                }
                else
                {
                  v12 = -55;
                }
              }
              else
              {
                v12 = -48;
              }
              v13 = v9 * a3;
              if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63)
                return 0;
              v9 = v13 - (v11 + v12);
              if (__OFSUB__(v13, (v11 + v12)))
                return 0;
              if (!--v5)
                return (unsigned __int8 *)v9;
            }
          }
          return 0;
        }
        return 0;
      }
      __break(1u);
      goto LABEL_65;
    }
    if (a2)
    {
      v22 = a3 + 48;
      v23 = a3 + 55;
      v24 = a3 + 87;
      if (a3 > 10)
      {
        v22 = 58;
      }
      else
      {
        v24 = 97;
        v23 = 65;
      }
      if (result)
      {
        v25 = 0;
        do
        {
          v26 = *result;
          if (v26 < 0x30 || v26 >= v22)
          {
            if (v26 < 0x41 || v26 >= v23)
            {
              if (v26 < 0x61 || v26 >= v24)
                return 0;
              v27 = -87;
            }
            else
            {
              v27 = -55;
            }
          }
          else
          {
            v27 = -48;
          }
          v28 = v25 * a3;
          if ((unsigned __int128)(v25 * (__int128)a3) >> 64 != (v25 * a3) >> 63)
            return 0;
          v25 = v28 + (v26 + v27);
          if (__OFADD__(v28, (v26 + v27)))
            return 0;
          ++result;
          --v3;
        }
        while (v3);
        return (unsigned __int8 *)(v28 + (v26 + v27));
      }
      return 0;
    }
    return 0;
  }
  if (a2 < 1)
  {
LABEL_65:
    __break(1u);
    return result;
  }
  v14 = a2 - 1;
  if (a2 == 1)
    return 0;
  v15 = a3 + 48;
  v16 = a3 + 55;
  v17 = a3 + 87;
  if (a3 > 10)
  {
    v15 = 58;
  }
  else
  {
    v17 = 97;
    v16 = 65;
  }
  if (!result)
    return 0;
  v9 = 0;
  v18 = result + 1;
  do
  {
    v19 = *v18;
    if (v19 < 0x30 || v19 >= v15)
    {
      if (v19 < 0x41 || v19 >= v16)
      {
        if (v19 < 0x61 || v19 >= v17)
          return 0;
        v20 = -87;
      }
      else
      {
        v20 = -55;
      }
    }
    else
    {
      v20 = -48;
    }
    v21 = v9 * a3;
    if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63)
      return 0;
    v9 = v21 + (v19 + v20);
    if (__OFADD__(v21, (v19 + v20)))
      return 0;
    ++v18;
    --v14;
  }
  while (v14);
  return (unsigned __int8 *)v9;
}

uint64_t type metadata accessor for ResourceBundleClass()
{
  return objc_opt_self(_TtC7BooksUIP33_A3BEDE31368861F33EA56F4D790E45F719ResourceBundleClass);
}

uint64_t _s7BooksUI13FontConstantsV6ButtonV8subtitle05SwiftB00C0Vvg_0()
{
  return static Font.caption.getter();
}

uint64_t _s7BooksUI14ColorConstantsV25vibrantPrimaryButtonLabel05SwiftB00C0Vvg_0()
{
  return static Color.white.getter();
}

uint64_t _s7BooksUI14ColorConstantsV14vibrantPrimary05SwiftB00C0Vvg_0()
{
  return static Color.primary.getter();
}

uint64_t _s7BooksUI14ColorConstantsV19booksSecondaryLabel05SwiftB00C0Vvg_0()
{
  return static Color.secondary.getter();
}

uint64_t _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0()
{
  return static Alignment.center.getter();
}

uint64_t _s9JetEngine22NativeIntentDispatcherV7BooksUIE014booksUIBuiltInD15ImplementationsACvgZ_0()
{
  return NativeIntentDispatcher.init()();
}

uint64_t _s7BooksUI017_IntentKindTable_A16ReturningUnknownO12_defaultTypeypXpSgvgZ_0()
{
  return static _IntentKindTable_Returning._defaultType.getter();
}

uint64_t _s7BooksUI017_IntentKindTable_A16ReturningUnknownO6_tableSDySSypXpGvgZ_0()
{
  return static _IntentKindTable_Returning._table.getter();
}

id objc_msgSend_UTF8String(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "UTF8String");
}

id objc_msgSend__parserContext(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_parserContext");
}

id objc_msgSend_copy(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copy");
}

id objc_msgSend_delegate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "delegate");
}

id objc_msgSend_doesNotRecognizeSelector_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "doesNotRecognizeSelector:");
}

id objc_msgSend_errorWithDomain_code_userInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "errorWithDomain:code:userInfo:");
}

id objc_msgSend_initWithBytes_length_encoding_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBytes:length:encoding:");
}

id objc_msgSend_initWithUTF8String_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithUTF8String:");
}

id objc_msgSend_lengthOfBytesUsingEncoding_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lengthOfBytesUsingEncoding:");
}

id objc_msgSend_numberWithInt_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithInt:");
}

id objc_msgSend_parser_didEndElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "parser:didEndElement:");
}

id objc_msgSend_parser_didFindCharacters_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "parser:didFindCharacters:");
}

id objc_msgSend_parser_didStartElement_attributes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "parser:didStartElement:attributes:");
}

id objc_msgSend_parser_parseErrorOccurred_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "parser:parseErrorOccurred:");
}

id objc_msgSend_parserDidEndDocument_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "parserDidEndDocument:");
}

id objc_msgSend_parserDidFindNewline_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "parserDidFindNewline:");
}

id objc_msgSend_parserDidStartDocument_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "parserDidStartDocument:");
}

id objc_msgSend_reportErrorWithCode_userInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reportErrorWithCode:userInfo:");
}

id objc_msgSend_reportParseError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reportParseError:");
}

id objc_msgSend_setObject_forKeyedSubscript_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setObject:forKeyedSubscript:");
}

id objc_msgSend_set_parserContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "set_parserContext:");
}

id objc_msgSend_string(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "string");
}
