void sub_4288(void *a1)
{
  id v1;
  id v2;

  v1 = a1;
  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "delegate"));
  objc_msgSend(v2, "parserDidStartDocument:", v1);

}

void sub_42CC(void *a1)
{
  id v1;
  id v2;

  v1 = a1;
  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "delegate"));
  objc_msgSend(v2, "parserDidEndDocument:", v1);

}

void sub_4310(void *a1, const xmlChar *a2, xmlChar **a3)
{
  void *v5;
  uint64_t v6;
  id v7;
  xmlChar *v8;
  xmlChar **v9;
  xmlChar *v10;
  int v11;
  __CFString *v12;
  void *v13;
  int v14;
  __CFString *v15;
  void *v16;
  xmlChar *v17;
  id v18;
  uint64_t v19;

  v18 = a1;
  v19 = 0;
  if (sub_45E8(a2, &v19))
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "delegate"));
    v6 = v19;
    if (a3)
    {
      v7 = objc_alloc_init((Class)NSMutableDictionary);
      v8 = *a3;
      if (*a3)
      {
        v9 = a3 + 2;
        do
        {
          v10 = *(v9 - 1);
          v11 = xmlStrlen(v8);
          v12 = sub_46D0((__CFString *)v8, v11);
          v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
          v14 = xmlStrlen(v10);
          v15 = sub_46D0((__CFString *)v10, v14);
          v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
          objc_msgSend(v7, "setObject:forKeyedSubscript:", v16, v13);

          v17 = *v9;
          v9 += 2;
          v8 = v17;
        }
        while (v17);
      }
    }
    else
    {
      v7 = &__NSDictionary0__struct;
    }
    objc_msgSend(v5, "parser:didStartElement:attributes:", v18, v6, v7, v18);

  }
}

void sub_441C(void *a1, const xmlChar *a2)
{
  void *v3;
  int v4;
  void *v5;
  id v6;
  uint64_t v7;

  v6 = a1;
  if (xmlStrEqual(a2, (const xmlChar *)"br"))
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "delegate"));
    objc_msgSend(v3, "parserDidFindNewline:", v6);
LABEL_5:

    v5 = v6;
    goto LABEL_6;
  }
  v7 = 0;
  v4 = sub_45E8(a2, &v7);
  v5 = v6;
  if (v4)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "delegate"));
    objc_msgSend(v3, "parser:didEndElement:", v6, v7);
    goto LABEL_5;
  }
LABEL_6:

}

void sub_44B0(void *a1, __CFString *a2, int a3)
{
  __CFString *v5;
  void *v6;
  void *v7;
  id v8;

  v8 = a1;
  v5 = sub_46D0(a2, a3);
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  if (v6)
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "delegate"));
    objc_msgSend(v7, "parser:didFindCharacters:", v8, v6);

  }
}

void sub_4520(void *a1)
{
  xmlErrorPtr LastError;
  xmlErrorPtr v2;
  id v3;

  v3 = a1;
  LastError = xmlCtxtGetLastError(objc_msgSend(v3, "_parserContext"));
  if (LastError)
  {
    v2 = LastError;
    objc_msgSend(v3, "reportParseError:", LastError);
    if (v2->level == XML_ERR_FATAL)
      xmlStopParser((xmlParserCtxtPtr)objc_msgSend(v3, "_parserContext"));
  }

}

uint64_t sub_45E8(const xmlChar *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t result;

  if (xmlStrEqual(a1, (const xmlChar *)"b") || xmlStrEqual(a1, (const xmlChar *)"strong"))
  {
    v4 = 0;
LABEL_4:
    *a2 = v4;
    return 1;
  }
  if (xmlStrEqual(a1, (const xmlChar *)"i") || xmlStrEqual(a1, (const xmlChar *)"em"))
  {
    v4 = 1;
    goto LABEL_4;
  }
  if (xmlStrEqual(a1, (const xmlChar *)"u"))
  {
    v4 = 2;
    goto LABEL_4;
  }
  if (xmlStrEqual(a1, (const xmlChar *)"strike") || xmlStrEqual(a1, (const xmlChar *)"del"))
  {
    v4 = 3;
    goto LABEL_4;
  }
  result = xmlStrEqual(a1, (const xmlChar *)"a");
  if ((_DWORD)result)
  {
    v4 = 4;
    goto LABEL_4;
  }
  return result;
}

__CFString *sub_46D0(__CFString *a1, uint64_t a2)
{
  if (a1)
  {
    if (a2)
      return (__CFString *)objc_msgSend(objc_alloc((Class)NSString), "initWithBytes:length:encoding:", a1, a2, 4);
    a1 = &stru_25AF18;
  }
  return a1;
}

BooksUI::ActionOrigin::Kind_optional __swiftcall ActionOrigin.Kind.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  unint64_t v5;
  BooksUI::ActionOrigin::Kind_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_249050, v3);
  result.value = swift_bridgeObjectRelease(object);
  v7 = 4;
  if (v5 < 4)
    v7 = v5;
  *v4 = v7;
  return result;
}

uint64_t ActionOrigin.Kind.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_47A4 + 4 * byte_1E0280[*v0]))(0x726564616568, 0xE600000000000000);
}

uint64_t sub_47A4()
{
  return 0x7265746F6F66;
}

uint64_t sub_47B4()
{
  return 0x70756B636F6CLL;
}

uint64_t sub_47C4()
{
  return 0x726568746FLL;
}

void sub_47D8(char *a1)
{
  sub_C76C0(*a1);
}

void sub_47E4()
{
  unsigned __int8 *v0;
  uint64_t v1;
  _QWORD v2[9];

  v1 = *v0;
  Hasher.init(_seed:)(v2, 0);
  __asm { BR              X9 }
}

Swift::Int sub_482C()
{
  uint64_t v0;
  uint64_t v2;

  ((void (*)(uint64_t *, uint64_t, uint64_t))String.hash(into:))(&v2, 0x7265746F6F66, v0);
  swift_bridgeObjectRelease(v0);
  return Hasher._finalize()();
}

void sub_4888()
{
  __asm { BR              X10 }
}

uint64_t sub_48C0(uint64_t a1)
{
  uint64_t v1;

  ((void (*)(uint64_t, uint64_t, uint64_t))String.hash(into:))(a1, 0x7265746F6F66, v1);
  return swift_bridgeObjectRelease(v1);
}

void sub_4908(uint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t v2;
  _QWORD v3[9];

  v2 = *v1;
  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X9 }
}

Swift::Int sub_494C()
{
  uint64_t v0;
  uint64_t v2;

  ((void (*)(uint64_t *, uint64_t, uint64_t))String.hash(into:))(&v2, 0x7265746F6F66, v0);
  swift_bridgeObjectRelease(v0);
  return Hasher._finalize()();
}

BooksUI::ActionOrigin::Kind_optional sub_49A8(Swift::String *a1)
{
  return ActionOrigin.Kind.init(rawValue:)(*a1);
}

uint64_t sub_49B4()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_49E0 + 4 * byte_1E0290[*v0]))();
}

void sub_49E0(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = 0x7265746F6F66;
  a1[1] = v1;
}

void sub_49F4(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = 0x70756B636F6CLL;
  a1[1] = v1;
}

void sub_4A08(_QWORD *a1@<X8>)
{
  *a1 = 0x726568746FLL;
  a1[1] = 0xE500000000000000;
}

uint64_t sub_4A20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_6E2C();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_4A7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_6E2C();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t Metrics.Location.adamId.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain(v0[1]);
  return v1;
}

uint64_t Metrics.Location.artistName.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 24));
  return v1;
}

uint64_t Metrics.Location.fcKind.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 40));
  return v1;
}

uint64_t Metrics.Location.id.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 48);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 56));
  return v1;
}

uint64_t Metrics.Location.idType.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 64);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 72));
  return v1;
}

uint64_t Metrics.Location.kind.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 80);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 88));
  return v1;
}

uint64_t CoverViewModel.id.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 96);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 104));
  return v1;
}

uint64_t Metrics.Location.locationType.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 112);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 120));
  return v1;
}

uint64_t Metrics.Location.name.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 128);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 136));
  return v1;
}

void ActionOrigin.kind.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 144);
}

void __swiftcall ActionOrigin.init(sectionID:sectionName:contentID:kind:seriesID:genreID:collectionID:authorID:flowcaseID:brickID:)(BooksUI::ActionOrigin *__return_ptr retstr, Swift::String_optional sectionID, Swift::String_optional sectionName, Swift::String_optional contentID, BooksUI::ActionOrigin::Kind kind, Swift::String_optional seriesID, Swift::String_optional genreID, Swift::String_optional collectionID, Swift::String_optional authorID, Swift::String_optional flowcaseID, Swift::String_optional brickID)
{
  BooksUI::ActionOrigin::Kind v11;

  v11 = *(_BYTE *)kind;
  retstr->sectionID = sectionID;
  retstr->sectionName = sectionName;
  retstr->seriesID.value._countAndFlagsBits = seriesID.value._countAndFlagsBits;
  *(Swift::String_optional *)&retstr->seriesID.value._object = *(Swift::String_optional *)&seriesID.value._object;
  *(Swift::String_optional *)&retstr->genreID.value._object = *(Swift::String_optional *)((char *)&collectionID - 8);
  *(Swift::String_optional *)&retstr->collectionID.value._object = *(Swift::String_optional *)&collectionID.value._object;
  *(Swift::String_optional *)&retstr->authorID.value._object = *(Swift::String_optional *)&authorID.value._object;
  *(Swift::String_optional *)&retstr->flowcaseID.value._object = *(Swift::String_optional *)((char *)&brickID - 8);
  retstr->brickID.value._object = brickID.value._object;
  retstr->contentID = contentID;
  retstr->kind = v11;
}

uint64_t sub_4CA4(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_4CDC + 4 * byte_1E0294[a1]))(0x496E6F6974636573, 0xE900000000000044);
}

uint64_t sub_4CDC()
{
  return 0x4E6E6F6974636573;
}

uint64_t sub_4CFC()
{
  return 0x49746E65746E6F63;
}

uint64_t sub_4D10()
{
  return 0x646E696B24;
}

uint64_t sub_4D24()
{
  return 0x4449736569726573;
}

uint64_t sub_4D3C()
{
  return 0x444965726E6567;
}

uint64_t sub_4D54()
{
  return 0x697463656C6C6F63;
}

uint64_t sub_4D74()
{
  return 0x4449726F68747561;
}

uint64_t sub_4D8C()
{
  return 0x65736163776F6C66;
}

uint64_t sub_4DA8()
{
  return 0x44496B63697262;
}

uint64_t sub_4DC0(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_4DF8 + 4 * byte_1E029E[a1]))(0x496E6F6974636573, 0xE900000000000044);
}

uint64_t sub_4DF8()
{
  return 0x4E6E6F6974636573;
}

uint64_t sub_4E18()
{
  return 0x49746E65746E6F63;
}

uint64_t sub_4E2C()
{
  return 0x646E696B24;
}

uint64_t sub_4E40()
{
  return 0x4449736569726573;
}

uint64_t sub_4E58()
{
  return 0x444965726E6567;
}

uint64_t sub_4E70()
{
  return 0x697463656C6C6F63;
}

uint64_t sub_4E90()
{
  return 0x4449726F68747561;
}

uint64_t sub_4EA8()
{
  return 0x65736163776F6C66;
}

uint64_t sub_4EC4()
{
  return 0x44496B63697262;
}

uint64_t sub_4EDC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  char v10;

  v2 = *a2;
  v3 = sub_4CA4(*a1);
  v5 = v4;
  v6 = sub_4CA4(v2);
  if (v3 == v6 && v5 == v7)
  {
    v10 = 1;
    v9 = v5;
  }
  else
  {
    v9 = v7;
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0);
  }
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v9);
  return v10 & 1;
}

Swift::Int sub_4F64()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[9];

  v1 = *v0;
  Hasher.init(_seed:)(v6, 0);
  v2 = sub_4CA4(v1);
  v4 = v3;
  String.hash(into:)(v6, v2, v3);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_4FC4(uint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = sub_4CA4(*v1);
  v5 = v4;
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_5004(uint64_t a1)
{
  unsigned __int8 *v1;
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[9];

  v2 = *v1;
  Hasher.init(_seed:)(v7, a1);
  v3 = sub_4CA4(v2);
  v5 = v4;
  String.hash(into:)(v7, v3, v4);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

unint64_t sub_5060@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_6DE4(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_508C@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_4CA4(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_50B4()
{
  unsigned __int8 *v0;

  return sub_4DC0(*v0);
}

unint64_t sub_50BC@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_6DE4(a1);
  *a2 = result;
  return result;
}

uint64_t sub_50E0()
{
  return 0;
}

void sub_50EC(_BYTE *a1@<X8>)
{
  *a1 = 10;
}

uint64_t sub_50F8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_54A4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_5120(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_54A4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t ActionOrigin.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  char *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  char v48;
  char v49;
  char v50;
  char v51;
  char v52;
  char v53;
  char v54;
  char v55;
  char v56;
  char v57;

  v3 = sub_5440(&qword_25DD78);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = *v1;
  v7 = v1[1];
  v8 = v1[2];
  v44 = v1[3];
  v45 = v8;
  v43 = v1[4];
  v9 = v1[5];
  v39 = v1[6];
  v40 = v9;
  v10 = v1[7];
  v37 = v1[8];
  v38 = v10;
  v11 = v1[9];
  v35 = v1[10];
  v36 = v11;
  v12 = v1[11];
  v13 = v1[12];
  v33 = v1[13];
  v34 = v12;
  v31 = v1[14];
  v32 = v13;
  v30 = v1[15];
  v14 = v1[16];
  v41 = v1[17];
  v42 = v14;
  v15 = *((_BYTE *)v1 + 144);
  v16 = a1[3];
  v17 = a1[4];
  v18 = a1;
  v19 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_5480(v18, v16);
  v20 = sub_54A4();
  v21 = v16;
  v22 = v3;
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ActionOrigin.CodingKeys, &type metadata for ActionOrigin.CodingKeys, v20, v21, v17);
  v57 = 0;
  v23 = v46;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v6, v7, &v57, v3);
  if (!v23)
  {
    v25 = v41;
    v24 = v42;
    v26 = v15;
    v27 = v43;
    v56 = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v45, v44, &v56, v22);
    v55 = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v24, v25, &v55, v22);
    v54 = v26;
    v53 = 3;
    v28 = sub_54E8();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v54, &v53, v22, &type metadata for ActionOrigin.Kind, v28);
    v52 = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v27, v40, &v52, v22);
    v51 = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v39, v38, &v51, v22);
    v50 = 6;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v37, v36, &v50, v22);
    v49 = 7;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v35, v34, &v49, v22);
    v48 = 8;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v32, v33, &v48, v22);
    v47 = 9;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v31, v30, &v47, v22);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v19, v22);
}

uint64_t sub_5440(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = swift_getTypeByMangledNameInContext2((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

_QWORD *sub_5480(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

unint64_t sub_54A4()
{
  unint64_t result;

  result = qword_25DD80;
  if (!qword_25DD80)
  {
    result = swift_getWitnessTable(&unk_1E0604, &type metadata for ActionOrigin.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25DD80);
  }
  return result;
}

unint64_t sub_54E8()
{
  unint64_t result;

  result = qword_25DD88;
  if (!qword_25DD88)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ActionOrigin.Kind, &type metadata for ActionOrigin.Kind);
    atomic_store(result, (unint64_t *)&qword_25DD88);
  }
  return result;
}

_QWORD *ActionOrigin.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  char v72;
  _QWORD v73[18];
  char v74;
  int v75;
  char v76;

  v5 = sub_5440(&qword_25DD90);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  v62 = a1;
  sub_5480(a1, v9);
  v11 = sub_54A4();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ActionOrigin.CodingKeys, &type metadata for ActionOrigin.CodingKeys, v11, v9, v10);
  if (v2)
    return (_QWORD *)_s7BooksUI13AnyPagedFrameVwxx_0(v62);
  LOBYTE(v73[0]) = 0;
  v12 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v73, v5);
  v14 = v13;
  LOBYTE(v73[0]) = 1;
  swift_bridgeObjectRetain(v13);
  v58 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v73, v5);
  v59 = v12;
  LOBYTE(v73[0]) = 2;
  v16 = v15;
  swift_bridgeObjectRetain(v15);
  v17 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v73, v5);
  v61 = v16;
  v57 = v17;
  LOBYTE(v63) = 3;
  v19 = v18;
  v20 = sub_5CEC();
  swift_bridgeObjectRetain(v19);
  KeyedDecodingContainer.decode<A>(_:forKey:)(v73, &type metadata for ActionOrigin.Kind, &v63, v5, &type metadata for ActionOrigin.Kind, v20);
  v60 = v19;
  LODWORD(v19) = LOBYTE(v73[0]);
  LOBYTE(v73[0]) = 4;
  v56 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v73, v5);
  v75 = v19;
  LOBYTE(v73[0]) = 5;
  v22 = v21;
  swift_bridgeObjectRetain(v21);
  v53 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v73, v5);
  v55 = v22;
  LOBYTE(v73[0]) = 6;
  v24 = v23;
  swift_bridgeObjectRetain(v23);
  v25 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v73, v5);
  v54 = v26;
  v49 = v25;
  LOBYTE(v73[0]) = 7;
  swift_bridgeObjectRetain(v26);
  v51 = 0;
  v47 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v73, v5);
  v48 = v24;
  LOBYTE(v73[0]) = 8;
  v52 = v27;
  swift_bridgeObjectRetain(v27);
  v46 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v73, v5);
  v76 = 9;
  v50 = v28;
  swift_bridgeObjectRetain(v28);
  v29 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v76, v5);
  v31 = v30;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  *(_QWORD *)&v63 = v59;
  *((_QWORD *)&v63 + 1) = v14;
  v32 = v61;
  *(_QWORD *)&v64 = v58;
  *((_QWORD *)&v64 + 1) = v61;
  v33 = v55;
  *(_QWORD *)&v65 = v56;
  *((_QWORD *)&v65 + 1) = v55;
  *(_QWORD *)&v66 = v53;
  *((_QWORD *)&v66 + 1) = v48;
  *(_QWORD *)&v67 = v49;
  *((_QWORD *)&v67 + 1) = v54;
  *(_QWORD *)&v68 = v47;
  *((_QWORD *)&v68 + 1) = v52;
  *(_QWORD *)&v69 = v46;
  *((_QWORD *)&v69 + 1) = v50;
  v44 = v31;
  v45 = v29;
  *(_QWORD *)&v70 = v29;
  *((_QWORD *)&v70 + 1) = v31;
  v34 = v60;
  *(_QWORD *)&v71 = v57;
  *((_QWORD *)&v71 + 1) = v60;
  v72 = v75;
  sub_5D30(&v63);
  swift_bridgeObjectRelease(v14);
  swift_bridgeObjectRelease(v32);
  swift_bridgeObjectRelease(v33);
  v35 = v48;
  swift_bridgeObjectRelease(v48);
  v36 = v54;
  swift_bridgeObjectRelease(v54);
  v37 = v52;
  swift_bridgeObjectRelease(v52);
  v38 = v50;
  swift_bridgeObjectRelease(v50);
  swift_bridgeObjectRelease(v34);
  v39 = v70;
  *(_OWORD *)(a2 + 96) = v69;
  *(_OWORD *)(a2 + 112) = v39;
  *(_OWORD *)(a2 + 128) = v71;
  *(_BYTE *)(a2 + 144) = v72;
  v40 = v66;
  *(_OWORD *)(a2 + 32) = v65;
  *(_OWORD *)(a2 + 48) = v40;
  v41 = v68;
  *(_OWORD *)(a2 + 64) = v67;
  *(_OWORD *)(a2 + 80) = v41;
  v42 = v64;
  *(_OWORD *)a2 = v63;
  *(_OWORD *)(a2 + 16) = v42;
  _s7BooksUI13AnyPagedFrameVwxx_0(v62);
  v73[0] = v59;
  v73[1] = v14;
  v73[2] = v58;
  v73[3] = v61;
  v73[4] = v56;
  v73[5] = v55;
  v73[6] = v53;
  v73[7] = v35;
  v73[8] = v49;
  v73[9] = v36;
  v73[10] = v47;
  v73[11] = v37;
  v73[12] = v46;
  v73[13] = v38;
  v73[14] = v45;
  v73[15] = v44;
  v73[16] = v57;
  v73[17] = v34;
  v74 = v75;
  return sub_5DD8(v73);
}

uint64_t _s7BooksUI13AnyPagedFrameVwxx_0(_QWORD *a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1[3] - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release(*a1);
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

unint64_t sub_5CEC()
{
  unint64_t result;

  result = qword_25DD98;
  if (!qword_25DD98)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ActionOrigin.Kind, &type metadata for ActionOrigin.Kind);
    atomic_store(result, (unint64_t *)&qword_25DD98);
  }
  return result;
}

_QWORD *sub_5D30(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = a1[1];
  v3 = a1[3];
  v4 = a1[5];
  v5 = a1[7];
  v6 = a1[9];
  v7 = a1[11];
  v8 = a1[13];
  v9 = a1[15];
  swift_bridgeObjectRetain(a1[17]);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  return a1;
}

_QWORD *sub_5DD8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = a1[3];
  v3 = a1[5];
  v4 = a1[7];
  v5 = a1[9];
  v6 = a1[11];
  v7 = a1[13];
  v8 = a1[15];
  v9 = a1[17];
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease(v8);
  swift_bridgeObjectRelease(v9);
  return a1;
}

unint64_t sub_5E84()
{
  unint64_t result;

  result = qword_25DDA0;
  if (!qword_25DDA0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ActionOrigin.Kind, &type metadata for ActionOrigin.Kind);
    atomic_store(result, (unint64_t *)&qword_25DDA0);
  }
  return result;
}

_QWORD *sub_5EC8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return ActionOrigin.init(from:)(a1, a2);
}

uint64_t sub_5EDC(_QWORD *a1)
{
  return ActionOrigin.encode(to:)(a1);
}

uint64_t initializeBufferWithCopyOfBuffer for ActionOrigin(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain(v2);
  return v3;
}

uint64_t destroy for ActionOrigin(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[5]);
  swift_bridgeObjectRelease(a1[7]);
  swift_bridgeObjectRelease(a1[9]);
  swift_bridgeObjectRelease(a1[11]);
  swift_bridgeObjectRelease(a1[13]);
  swift_bridgeObjectRelease(a1[15]);
  return swift_bridgeObjectRelease(a1[17]);
}

uint64_t initializeWithCopy for ActionOrigin(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  v6 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v6;
  v7 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v7;
  v8 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v8;
  v9 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v9;
  v10 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v10;
  v11 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = v11;
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v11);
  return a1;
}

uint64_t assignWithCopy for ActionOrigin(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v12 = *(_QWORD *)(a2 + 72);
  v13 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  v14 = *(_QWORD *)(a2 + 88);
  v15 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  v16 = *(_QWORD *)(a2 + 104);
  v17 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 104) = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease(v17);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  v18 = *(_QWORD *)(a2 + 120);
  v19 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 120) = v18;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRelease(v19);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  v20 = *(_QWORD *)(a2 + 136);
  v21 = *(_QWORD *)(a1 + 136);
  *(_QWORD *)(a1 + 136) = v20;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRelease(v21);
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  return a1;
}

__n128 initializeWithTake for ActionOrigin(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;
  __int128 v7;
  __int128 v8;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  result = *(__n128 *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  v8 = *(_OWORD *)(a2 + 128);
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  *(__n128 *)(a1 + 96) = result;
  return result;
}

uint64_t assignWithTake for ActionOrigin(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v8;
  swift_bridgeObjectRelease(v9);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v10;
  swift_bridgeObjectRelease(v11);
  v12 = *(_QWORD *)(a2 + 72);
  v13 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v12;
  swift_bridgeObjectRelease(v13);
  v14 = *(_QWORD *)(a2 + 88);
  v15 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v14;
  swift_bridgeObjectRelease(v15);
  v16 = *(_QWORD *)(a2 + 104);
  v17 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v16;
  swift_bridgeObjectRelease(v17);
  v18 = *(_QWORD *)(a2 + 120);
  v19 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v18;
  swift_bridgeObjectRelease(v19);
  v20 = *(_QWORD *)(a2 + 136);
  v21 = *(_QWORD *)(a1 + 136);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = v20;
  swift_bridgeObjectRelease(v21);
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  return a1;
}

uint64_t getEnumTagSinglePayload for ActionOrigin(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 145))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ActionOrigin(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 136) = 0;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 144) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 145) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 145) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for ActionOrigin()
{
  return &type metadata for ActionOrigin;
}

_BYTE *initializeBufferWithCopyOfBuffer for ActionOrigin.Kind(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for ActionOrigin.Kind(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFD)
    goto LABEL_17;
  if (a2 + 3 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 3) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 3;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 3;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 3;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 4;
  v8 = v6 - 4;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ActionOrigin.Kind(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_646C + 4 * byte_1E02AD[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_64A0 + 4 * byte_1E02A8[v4]))();
}

uint64_t sub_64A0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_64A8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x64B0);
  return result;
}

uint64_t sub_64BC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x64C4);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_64C8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_64D0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ActionOrigin.Kind()
{
  return &type metadata for ActionOrigin.Kind;
}

void type metadata accessor for HorizontalAlignment(uint64_t a1)
{
  sub_6F34(a1, &qword_25DDA8, (uint64_t)&unk_24AA88);
}

void type metadata accessor for ButtonType(uint64_t a1)
{
  sub_6F34(a1, &qword_25DDB0, (uint64_t)&unk_24AAA8);
}

void type metadata accessor for CGImage(uint64_t a1)
{
  sub_6F34(a1, &qword_25DDB8, (uint64_t)&unk_24AAC8);
}

__n128 initializeWithCopy for GenericGeometryReference(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for GenericGeometryReference(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for GenericGeometryReference(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 32) = v3;
  return result;
}

void type metadata accessor for CGRect(uint64_t a1)
{
  sub_6F34(a1, &qword_25DDC0, (uint64_t)&unk_24AB50);
}

__n128 initializeWithTake for ViewSizeConditionsViewModifier(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

void type metadata accessor for CGPoint(uint64_t a1)
{
  sub_6F34(a1, &qword_25DDC8, (uint64_t)&unk_24ABD0);
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
  sub_6F34(a1, &qword_25DDD0, (uint64_t)&unk_24ABF8);
}

uint64_t getEnumTagSinglePayload for TranslationEffect(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for TranslationEffect(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 16) = v3;
  return result;
}

void type metadata accessor for CGSize(uint64_t a1)
{
  sub_6F34(a1, &qword_25DDD8, (uint64_t)&unk_24AC78);
}

uint64_t getEnumTagSinglePayload for ActionOrigin.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF7)
    goto LABEL_17;
  if (a2 + 9 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 9) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 9;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 9;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 9;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xA;
  v8 = v6 - 10;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ActionOrigin.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 9 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 9) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF7)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF6)
    return ((uint64_t (*)(void))((char *)&loc_6704 + 4 * byte_1E02B7[v4]))();
  *a1 = a2 + 9;
  return ((uint64_t (*)(void))((char *)sub_6738 + 4 * byte_1E02B2[v4]))();
}

uint64_t sub_6738(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_6740(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x6748);
  return result;
}

uint64_t sub_6754(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x675CLL);
  *(_BYTE *)result = a2 + 9;
  return result;
}

uint64_t sub_6760(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_6768(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_6774(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_677C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for ActionOrigin.CodingKeys()
{
  return &type metadata for ActionOrigin.CodingKeys;
}

unint64_t sub_6798()
{
  unint64_t result;

  result = qword_25DDE0;
  if (!qword_25DDE0)
  {
    result = swift_getWitnessTable(&unk_1E05DC, &type metadata for ActionOrigin.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25DDE0);
  }
  return result;
}

unint64_t sub_67E0()
{
  unint64_t result;

  result = qword_25DDE8;
  if (!qword_25DDE8)
  {
    result = swift_getWitnessTable(&unk_1E0514, &type metadata for ActionOrigin.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25DDE8);
  }
  return result;
}

unint64_t sub_6828()
{
  unint64_t result;

  result = qword_25DDF0;
  if (!qword_25DDF0)
  {
    result = swift_getWitnessTable(&unk_1E053C, &type metadata for ActionOrigin.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25DDF0);
  }
  return result;
}

NSNumber sub_686C()
{
  return UInt64._bridgeToObjectiveC()();
}

uint64_t sub_6874(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;

  v6 = 0;
  v7 = 1;
  result = static UInt64._forceBridgeFromObjectiveC(_:result:)(a1, &v6);
  v4 = v6;
  v5 = v7;
  if (v7)
    v4 = 0;
  *(_QWORD *)a2 = v4;
  *(_BYTE *)(a2 + 8) = v5;
  return result;
}

uint64_t sub_68C4(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  char v5;
  uint64_t v7;
  char v8;

  v7 = 0;
  v8 = 1;
  v3 = static UInt64._conditionallyBridgeFromObjectiveC(_:result:)(a1, &v7);
  v4 = v7;
  v5 = v8;
  if (v8)
    v4 = 0;
  *(_QWORD *)a2 = v4;
  *(_BYTE *)(a2 + 8) = v5;
  return v3 & 1;
}

uint64_t sub_6918@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = static UInt64._unconditionallyBridgeFromObjectiveC(_:)();
  *a1 = result;
  return result;
}

uint64_t sub_693C(uint64_t a1, uint64_t a2)
{
  return sub_6A84(a1, a2, (uint64_t (*)(uint64_t))&String._bridgeToObjectiveC());
}

uint64_t sub_6948(uint64_t a1, id *a2)
{
  uint64_t result;
  uint64_t v5;
  NSString v6;
  uint64_t v7;
  uint64_t v8;

  v7 = 0;
  v8 = 0;
  result = static String._forceBridgeFromObjectiveC(_:result:)(a1, &v7);
  v5 = v8;
  if (v8)
  {
    v6 = String._bridgeToObjectiveC()();
    result = swift_bridgeObjectRelease(v5);
  }
  else
  {
    v6 = 0;
  }
  *a2 = v6;
  return result;
}

uint64_t sub_69BC(uint64_t a1, id *a2)
{
  char v4;
  uint64_t v5;
  NSString v6;
  uint64_t v8;
  uint64_t v9;

  v8 = 0;
  v9 = 0;
  v4 = static String._conditionallyBridgeFromObjectiveC(_:result:)(a1, &v8);
  v5 = v9;
  if (v9)
  {
    v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v5);
  }
  else
  {
    v6 = 0;
  }
  *a2 = v6;
  return v4 & 1;
}

uint64_t sub_6A38@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  NSString v4;
  uint64_t result;

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  v3 = v2;
  v4 = String._bridgeToObjectiveC()();
  result = swift_bridgeObjectRelease(v3);
  *a1 = v4;
  return result;
}

uint64_t sub_6A78(uint64_t a1, uint64_t a2)
{
  return sub_6A84(a1, a2, (uint64_t (*)(uint64_t))&String.hashValue.getter);
}

uint64_t sub_6A84(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v3);
  v7 = v6;
  v8 = a3(v5);
  swift_bridgeObjectRelease(v7);
  return v8;
}

uint64_t sub_6AC0(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  v5 = v4;
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_6B00(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::Int v6;
  _QWORD v8[9];

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  v5 = v4;
  Hasher.init(_seed:)(v8, a1);
  String.hash(into:)(v8, v3, v5);
  v6 = Hasher._finalize()();
  swift_bridgeObjectRelease(v5);
  return v6;
}

_QWORD *sub_6B70@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

void sub_6B80(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

BOOL sub_6B8C(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

uint64_t sub_6BA0(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  char v10;

  v2 = *a2;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*a1);
  v5 = v4;
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  if (v3 == v6 && v5 == v7)
  {
    v10 = 1;
    v9 = v5;
  }
  else
  {
    v9 = v7;
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0);
  }
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v9);
  return v10 & 1;
}

uint64_t sub_6C28(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_6FD0(&qword_25DE60, (uint64_t (*)(uint64_t))type metadata accessor for UIAccessibilityTraits, (uint64_t)&unk_1E0854);
  v3 = sub_6FD0(&qword_25DE68, (uint64_t (*)(uint64_t))type metadata accessor for UIAccessibilityTraits, (uint64_t)&unk_1E07F4);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for UInt64);
}

uint64_t sub_6CBC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  NSString v4;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = String._bridgeToObjectiveC()();
  result = swift_bridgeObjectRelease(v3);
  *a2 = v4;
  return result;
}

uint64_t sub_6D00@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t result;
  uint64_t v4;

  result = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_6D28(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_6FD0((unint64_t *)&qword_2683C0, (uint64_t (*)(uint64_t))type metadata accessor for NQMLAttributeName, (uint64_t)&unk_1E09F8);
  v3 = sub_6FD0(&qword_25DE58, (uint64_t (*)(uint64_t))type metadata accessor for NQMLAttributeName, (uint64_t)&unk_1E094C);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_6DAC()
{
  _QWORD *v0;

  return UInt64.hashValue.getter(*v0);
}

void sub_6DB4()
{
  Swift::UInt64 *v0;

  Hasher._combine(_:)(*v0);
}

uint64_t sub_6DDC(uint64_t a1)
{
  _QWORD *v1;

  return static Hasher._hash(seed:_:)(a1, *v1);
}

unint64_t sub_6DE4(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_2490D0, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 0xA)
    return 10;
  else
    return v3;
}

unint64_t sub_6E2C()
{
  unint64_t result;

  result = qword_25DDF8;
  if (!qword_25DDF8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ActionOrigin.Kind, &type metadata for ActionOrigin.Kind);
    atomic_store(result, (unint64_t *)&qword_25DDF8);
  }
  return result;
}

__n128 sub_6E70(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u32[0] = a2[1].n128_u32[0];
  *a1 = result;
  return result;
}

uint64_t sub_6E84(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 20))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_6EA4(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_DWORD *)(result + 16) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 20) = v3;
  return result;
}

void type metadata accessor for Decimal(uint64_t a1)
{
  sub_6F34(a1, &qword_25DE00, (uint64_t)&unk_24AD88);
}

void type metadata accessor for NQMLAttributeName(uint64_t a1)
{
  sub_6F34(a1, &qword_25DE08, (uint64_t)&unk_24ADB0);
}

void type metadata accessor for CGColor(uint64_t a1)
{
  sub_6F34(a1, &qword_25DE10, (uint64_t)&unk_24ADD8);
}

void type metadata accessor for UIAccessibilityTraits(uint64_t a1)
{
  sub_6F34(a1, &qword_25DE18, (uint64_t)&unk_24AE08);
}

void type metadata accessor for NQMLTextElement(uint64_t a1)
{
  sub_6F34(a1, &qword_25DE20, (uint64_t)&unk_24AE30);
}

void sub_6F34(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  unint64_t ForeignTypeMetadata;
  uint64_t v5;

  if (!*a2)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata(0, a3);
    if (!v5)
      atomic_store(ForeignTypeMetadata, a2);
  }
}

uint64_t sub_6F78()
{
  return sub_6FD0(&qword_25DE28, (uint64_t (*)(uint64_t))type metadata accessor for UIAccessibilityTraits, (uint64_t)&unk_1E07B8);
}

uint64_t sub_6FA4()
{
  return sub_6FD0(&qword_25DE30, (uint64_t (*)(uint64_t))type metadata accessor for UIAccessibilityTraits, (uint64_t)&unk_1E078C);
}

uint64_t sub_6FD0(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_7010()
{
  return sub_6FD0(&qword_25DE38, (uint64_t (*)(uint64_t))type metadata accessor for UIAccessibilityTraits, (uint64_t)&unk_1E0828);
}

uint64_t sub_703C()
{
  return sub_6FD0(&qword_25DE40, (uint64_t (*)(uint64_t))type metadata accessor for NQMLAttributeName, (uint64_t)&unk_1E0910);
}

uint64_t sub_7068()
{
  return sub_6FD0(&qword_25DE48, (uint64_t (*)(uint64_t))type metadata accessor for NQMLAttributeName, (uint64_t)&unk_1E08E4);
}

uint64_t sub_7094()
{
  return sub_6FD0(&qword_25DE50, (uint64_t (*)(uint64_t))type metadata accessor for NQMLAttributeName, (uint64_t)&unk_1E0980);
}

uint64_t sub_70E0(uint64_t a1)
{
  return sub_7310(a1, qword_25DE70, 0xD000000000000010, 0x80000000001F9930);
}

uint64_t static Logger.backdrop.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_7178(&qword_25DAE0, (uint64_t)qword_25DE70, a1);
}

uint64_t sub_7120(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

uint64_t sub_7138(uint64_t a1)
{
  return sub_7310(a1, qword_25DE88, 0xD00000000000001ALL, 0x80000000001F9910);
}

uint64_t static Logger.booksHTMLConverter.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_7178(&qword_25DAE8, (uint64_t)qword_25DE88, a1);
}

uint64_t sub_7178@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;

  if (*a1 != -1)
    swift_once();
  v5 = type metadata accessor for Logger(0);
  v6 = sub_7120(v5, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a3, v6, v5);
}

uint64_t sub_71E0(uint64_t a1)
{
  return sub_7310(a1, qword_25DEA0, 0x2E4955736B6F6F42, 0xEF7363697274654DLL);
}

uint64_t static Logger.metrics.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_7178(&qword_25DAF0, (uint64_t)qword_25DEA0, a1);
}

uint64_t sub_7228(uint64_t a1)
{
  return sub_7310(a1, qword_25DEB8, 0xD000000000000012, 0x80000000001F98F0);
}

uint64_t static Logger.pageUpdate.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_7178(&qword_25DAF8, (uint64_t)qword_25DEB8, a1);
}

uint64_t sub_7268(uint64_t a1)
{
  return sub_7310(a1, qword_25DED0, 0xD000000000000029, 0x80000000001F98C0);
}

uint64_t static Logger.synchronousNativeIntentDispatcher.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_7178(&qword_25DB00, (uint64_t)qword_25DED0, a1);
}

uint64_t sub_72A8(uint64_t a1)
{
  return sub_7310(a1, qword_25DEE8, 0xD000000000000017, 0x80000000001F98A0);
}

uint64_t static Logger.toolbarItemType.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_7178(&qword_25DB08, (uint64_t)qword_25DEE8, a1);
}

uint64_t sub_72E8(uint64_t a1)
{
  return sub_7310(a1, qword_25DF00, 0x2E4955736B6F6F42, 0xEC00000077656956);
}

uint64_t sub_7310(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  v7 = type metadata accessor for Logger(0);
  sub_73A0(v7, a2);
  sub_7120(v7, (uint64_t)a2);
  return Logger.init(subsystem:category:)(0xD000000000000010, 0x80000000001F9880, a3, a4);
}

uint64_t static Logger.view.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_7178(&qword_25DB10, (uint64_t)qword_25DF00, a1);
}

uint64_t *sub_73A0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 - 8);
  if ((*(_DWORD *)(v3 + 80) & 0x20000) != 0)
  {
    v4 = swift_slowAlloc(*(_QWORD *)(v3 + 64), *(_DWORD *)(v3 + 80));
    *a2 = v4;
    return (uint64_t *)v4;
  }
  return a2;
}

uint64_t ShelfBackgroundViewModel.ignoreShelf.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t ViewSizeConditions.isNarrow.setter(uint64_t result)
{
  _BYTE *v1;

  *v1 = result;
  return result;
}

uint64_t (*FontSpec.font.modify())()
{
  return KeyedEncodingContainer.encode<A>(_:forKey:);
}

uint64_t ViewSizeConditions.isWide.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 1);
}

uint64_t ViewSizeConditions.isWide.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 1) = result;
  return result;
}

uint64_t (*ViewSizeConditions.isWide.modify())()
{
  return KeyedEncodingContainer.encode<A>(_:forKey:);
}

uint64_t ViewSizeConditions.isSuperWide.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 2);
}

uint64_t ViewSizeConditions.isSuperWide.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 2) = result;
  return result;
}

uint64_t (*ViewSizeConditions.isSuperWide.modify())()
{
  return KeyedEncodingContainer.encode<A>(_:forKey:);
}

void sub_7440(uint64_t a1@<X8>)
{
  *(_BYTE *)(a1 + 2) = 0;
  *(_WORD *)a1 = 2;
}

_QWORD *EnvironmentValues.viewSizeConditions.getter@<X0>(_QWORD *a1@<X8>)
{
  unint64_t v2;

  v2 = sub_7488();
  return EnvironmentValues.subscript.getter(a1, &type metadata for ViewSizeConditionsKey, &type metadata for ViewSizeConditionsKey, v2);
}

unint64_t sub_7488()
{
  unint64_t result;

  result = qword_25DF18;
  if (!qword_25DF18)
  {
    result = swift_getWitnessTable(&unk_1E0AF8, &type metadata for ViewSizeConditionsKey);
    atomic_store(result, (unint64_t *)&qword_25DF18);
  }
  return result;
}

_QWORD *sub_74CC@<X0>(uint64_t a1@<X8>)
{
  unint64_t v2;
  _QWORD *result;
  __int16 v4;
  uint64_t v5;

  v2 = sub_7488();
  result = EnvironmentValues.subscript.getter(&v5, &type metadata for ViewSizeConditionsKey, &type metadata for ViewSizeConditionsKey, v2);
  v4 = v5;
  *(_BYTE *)(a1 + 2) = BYTE2(v5);
  *(_WORD *)a1 = v4;
  return result;
}

uint64_t sub_7520(__int16 *a1)
{
  __int16 v1;
  unint64_t v2;
  __int16 v4;
  char v5;

  v1 = *a1;
  v5 = *((_BYTE *)a1 + 2);
  v4 = v1;
  v2 = sub_7488();
  return EnvironmentValues.subscript.setter(&v4, &type metadata for ViewSizeConditionsKey, &type metadata for ViewSizeConditionsKey, v2);
}

uint64_t EnvironmentValues.viewSizeConditions.setter(__int16 *a1)
{
  __int16 v1;
  unint64_t v2;
  __int16 v4;
  char v5;

  v1 = *a1;
  v5 = *((_BYTE *)a1 + 2);
  v4 = v1;
  v2 = sub_7488();
  return EnvironmentValues.subscript.setter(&v4, &type metadata for ViewSizeConditionsKey, &type metadata for ViewSizeConditionsKey, v2);
}

uint64_t (*EnvironmentValues.viewSizeConditions.modify(_QWORD *a1))(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  unint64_t v4;

  v3 = a1 + 2;
  *a1 = v1;
  v4 = sub_7488();
  a1[1] = v4;
  EnvironmentValues.subscript.getter(v3, &type metadata for ViewSizeConditionsKey, &type metadata for ViewSizeConditionsKey, v4);
  return sub_760C;
}

uint64_t sub_760C(uint64_t a1)
{
  __int16 v1;
  uint64_t v2;

  v1 = *(_WORD *)(a1 + 16);
  v2 = *(_QWORD *)(a1 + 8);
  *(_BYTE *)(a1 + 22) = *(_BYTE *)(a1 + 18);
  *(_WORD *)(a1 + 20) = v1;
  return EnvironmentValues.subscript.setter(a1 + 20, &type metadata for ViewSizeConditionsKey, &type metadata for ViewSizeConditionsKey, v2);
}

uint64_t sub_7648@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char *v2;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  char v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (**v14)(uint64_t@<X8>);
  uint64_t KeyPath;
  uint64_t v16;
  __int16 v17;
  __int16 v18;
  BOOL v19;
  uint64_t v20;
  _BYTE v22[16];
  uint64_t v23;
  uint64_t v24;

  v5 = sub_5440(&qword_25DF28);
  __chkstk_darwin(v5);
  v7 = &v22[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = *v2;
  v9 = v2[1];
  v10 = v2[2];
  v11 = *((_QWORD *)v2 + 1);
  v12 = swift_allocObject(&unk_24B0B0, 32, 7);
  *(_BYTE *)(v12 + 16) = v8;
  *(_BYTE *)(v12 + 17) = v9;
  *(_BYTE *)(v12 + 18) = v10;
  *(_QWORD *)(v12 + 24) = v11;
  v13 = sub_5440(&qword_25DF30);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v7, a1, v13);
  v14 = (void (**)(uint64_t@<X8>))&v7[*(int *)(v5 + 36)];
  *v14 = sub_77E8;
  v14[1] = 0;
  v14[2] = (void (*)(uint64_t@<X8>))sub_7DB4;
  v14[3] = (void (*)(uint64_t@<X8>))v12;
  KeyPath = swift_getKeyPath(&unk_1E0B30);
  v22[8] = v8;
  v22[9] = v9;
  v22[10] = v10;
  v23 = v11;
  swift_retain(v11);
  v16 = sub_5440(&qword_25DF38);
  State.wrappedValue.getter(&v24, v16);
  if (BYTE1(v24))
    v17 = 256;
  else
    v17 = 0;
  v18 = v17 | v24;
  v19 = BYTE2(v24) != 0;
  sub_7DE8((uint64_t)v7, a2);
  v20 = a2 + *(int *)(sub_5440(&qword_25DF40) + 36);
  *(_QWORD *)v20 = KeyPath;
  *(_BYTE *)(v20 + 10) = v19;
  *(_WORD *)(v20 + 8) = v18;
  return sub_7E30((uint64_t)v7);
}

void sub_77E8(uint64_t a1@<X8>)
{
  uint64_t v2;

  *(double *)a1 = GeometryProxy.size.getter();
  *(_QWORD *)(a1 + 8) = v2;
}

uint64_t sub_7810(double *a1, int a2, uint64_t a3)
{
  double v3;
  BOOL v4;
  BOOL v5;
  uint64_t v6;
  _BYTE v8[3];
  __int16 v9;
  char v10;
  uint64_t v11;

  v3 = *a1;
  v4 = *a1 <= 320.0;
  v5 = *a1 > 414.0;
  v9 = a2 & 0x101;
  v10 = BYTE2(a2) & 1;
  v11 = a3;
  v8[0] = v4;
  v8[1] = v5;
  v8[2] = v3 >= 1024.0;
  v6 = sub_5440(&qword_25DF38);
  return State.wrappedValue.setter(v8, v6);
}

uint64_t sub_78B4()
{
  return static ViewModifier._viewListCount(inputs:body:)();
}

uint64_t View.rootForViewSizeConditions()(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int16 v6;
  char v7;
  _QWORD v8[2];

  v6 = 0;
  v7 = 0;
  State.init(wrappedValue:)(v8, &v6, &type metadata for ViewSizeConditions);
  v4 = v8[1];
  View.modifier<A>(_:)(v8, a1, &type metadata for ViewSizeConditionsViewModifier, a2);
  return swift_release(v4);
}

_QWORD *sub_796C@<X0>(uint64_t a1@<X8>)
{
  unint64_t v2;
  _QWORD *result;
  __int16 v4;
  uint64_t v5;

  v2 = sub_7488();
  result = EnvironmentValues.subscript.getter(&v5, &type metadata for ViewSizeConditionsKey, &type metadata for ViewSizeConditionsKey, v2);
  v4 = v5;
  *(_BYTE *)(a1 + 2) = BYTE2(v5);
  *(_WORD *)a1 = v4;
  return result;
}

uint64_t sub_79C0(__int16 *a1)
{
  __int16 v1;
  unint64_t v2;
  __int16 v4;
  char v5;

  v1 = *a1;
  v5 = *((_BYTE *)a1 + 2);
  v4 = v1;
  v2 = sub_7488();
  return EnvironmentValues.subscript.setter(&v4, &type metadata for ViewSizeConditionsKey, &type metadata for ViewSizeConditionsKey, v2);
}

uint64_t initializeBufferWithCopyOfBuffer for ViewSizeConditions(uint64_t result, __int16 *a2)
{
  __int16 v2;

  v2 = *a2;
  *(_BYTE *)(result + 2) = *((_BYTE *)a2 + 2);
  *(_WORD *)result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for ViewSizeConditions(unsigned __int16 *a1, unsigned int a2)
{
  int v2;
  unsigned int v4;
  BOOL v5;
  int v6;

  if (!a2)
    return 0;
  if (a2 >= 0xFF)
  {
    if ((a2 + 33554177) >> 24)
    {
      v2 = *((unsigned __int8 *)a1 + 3);
      if (*((_BYTE *)a1 + 3))
        return (*a1 | (*((unsigned __int8 *)a1 + 2) << 16) | (v2 << 24)) - 16776961;
    }
    else
    {
      v2 = *(unsigned __int16 *)((char *)a1 + 3);
      if (*(unsigned __int16 *)((char *)a1 + 3))
        return (*a1 | (*((unsigned __int8 *)a1 + 2) << 16) | (v2 << 24)) - 16776961;
    }
  }
  v4 = *(unsigned __int8 *)a1;
  v5 = v4 >= 2;
  v6 = (v4 + 2147483646) & 0x7FFFFFFF;
  if (!v5)
    v6 = -1;
  return (v6 + 1);
}

uint64_t storeEnumTagSinglePayload for ViewSizeConditions(uint64_t result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;

  if ((a3 + 33554177) >> 24)
    v3 = 1;
  else
    v3 = 2;
  if (a3 <= 0xFE)
    v3 = 0;
  if (a2 > 0xFE)
  {
    *(_WORD *)result = a2 - 255;
    *(_BYTE *)(result + 2) = (a2 - 255) >> 16;
    if (v3)
    {
      v4 = ((a2 - 255) >> 24) + 1;
      if (v3 == 2)
        *(_WORD *)(result + 3) = v4;
      else
        *(_BYTE *)(result + 3) = v4;
    }
  }
  else
  {
    if (!v3)
      goto LABEL_10;
    if (v3 == 2)
    {
      *(_WORD *)(result + 3) = 0;
LABEL_10:
      if (!a2)
        return result;
LABEL_16:
      *(_BYTE *)result = a2 + 1;
      return result;
    }
    *(_BYTE *)(result + 3) = 0;
    if (a2)
      goto LABEL_16;
  }
  return result;
}

ValueMetadata *type metadata accessor for ViewSizeConditions()
{
  return &type metadata for ViewSizeConditions;
}

uint64_t sub_7B40(_QWORD *a1)
{
  uint64_t v1;

  v1 = type metadata accessor for ModifiedContent(255, *a1, &type metadata for ViewSizeConditionsViewModifier);
  sub_7B94();
  return swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
}

unint64_t sub_7B94()
{
  unint64_t result;

  result = qword_25DF20;
  if (!qword_25DF20)
  {
    result = swift_getWitnessTable(&unk_1E0AA8, &type metadata for ViewSizeConditionsViewModifier);
    atomic_store(result, (unint64_t *)&qword_25DF20);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for ViewSizeConditionsViewModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_WORD *)a1 = *(_WORD *)a2;
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v3;
  swift_retain(v3);
  return a1;
}

uint64_t destroy for ViewSizeConditionsViewModifier(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 8));
}

uint64_t assignWithCopy for ViewSizeConditionsViewModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_retain(v4);
  swift_release(v3);
  return a1;
}

uint64_t assignWithTake for ViewSizeConditionsViewModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_release(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for ViewSizeConditionsViewModifier(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ViewSizeConditionsViewModifier(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for ViewSizeConditionsViewModifier()
{
  return &type metadata for ViewSizeConditionsViewModifier;
}

ValueMetadata *type metadata accessor for ViewSizeConditionsKey()
{
  return &type metadata for ViewSizeConditionsKey;
}

uint64_t sub_7D80(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_229DB4, 1);
}

uint64_t sub_7D90()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_7DB4(double *a1)
{
  uint64_t v1;
  int v2;
  int v3;
  int v4;

  if (*(_BYTE *)(v1 + 17))
    v2 = 256;
  else
    v2 = 0;
  v3 = v2 | *(unsigned __int8 *)(v1 + 16);
  if (*(_BYTE *)(v1 + 18))
    v4 = 0x10000;
  else
    v4 = 0;
  return sub_7810(a1, v3 | v4, *(_QWORD *)(v1 + 24));
}

uint64_t sub_7DE8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_5440(&qword_25DF28);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_7E30(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_5440(&qword_25DF28);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_7E74()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25DF48;
  if (!qword_25DF48)
  {
    v1 = sub_7EF8(&qword_25DF40);
    sub_7F3C();
    sub_7FD8(&qword_25DF70, &qword_25DF78, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_25DF48);
  }
  return result;
}

uint64_t sub_7EF8(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = swift_getTypeByMangledNameInContextInMetadataState2(255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

unint64_t sub_7F3C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25DF50;
  if (!qword_25DF50)
  {
    v1 = sub_7EF8(&qword_25DF28);
    sub_7FD8(&qword_25DF58, &qword_25DF30, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
    sub_7FD8(&qword_25DF60, &qword_25DF68, (uint64_t)&protocol conformance descriptor for _GeometryActionModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_25DF50);
  }
  return result;
}

uint64_t sub_7FD8(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_7EF8(a2);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t Metrics.DialogActionType.init(rawValue:)@<X0>(Swift::String string@<0:X0, 8:X1>, BOOL *a2@<X8>)
{
  void *object;
  Swift::String v3;
  Swift::Int v5;
  uint64_t result;

  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_2491E0, v3);
  result = swift_bridgeObjectRelease(object);
  *a2 = v5 != 0;
  return result;
}

uint64_t Metrics.DialogActionType.rawValue.getter()
{
  return 27503;
}

uint64_t static GenericGeometryReferenceBuilder.== infix(_:_:)()
{
  return 1;
}

Swift::Int sub_8084()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1, 0);
  String.hash(into:)(v1, 27503, 0xE200000000000000);
  return Hasher._finalize()();
}

uint64_t sub_80C8(uint64_t a1)
{
  return String.hash(into:)(a1, 27503, 0xE200000000000000);
}

Swift::Int sub_80D4(uint64_t a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, a1);
  String.hash(into:)(v2, 27503, 0xE200000000000000);
  return Hasher._finalize()();
}

uint64_t sub_8114@<X0>(uint64_t *a1@<X0>, BOOL *a2@<X8>)
{
  Swift::String v3;
  void *v4;
  Swift::Int v5;
  uint64_t result;

  v3._countAndFlagsBits = *a1;
  v4 = (void *)a1[1];
  v3._object = v4;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_249218, v3);
  result = swift_bridgeObjectRelease(v4);
  *a2 = v5 != 0;
  return result;
}

void sub_8164(_QWORD *a1@<X8>)
{
  *a1 = 27503;
  a1[1] = 0xE200000000000000;
}

uint64_t Metrics.DialogType.init(rawValue:)@<X0>(Swift::String string@<0:X0, 8:X1>, char *a2@<X8>)
{
  void *object;
  Swift::String v3;
  Swift::Int v5;
  uint64_t result;
  char v7;

  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_249250, v3);
  result = swift_bridgeObjectRelease(object);
  if (v5 == 1)
    v7 = 1;
  else
    v7 = 2;
  if (!v5)
    v7 = 0;
  *a2 = v7;
  return result;
}

uint64_t Metrics.DialogType.rawValue.getter()
{
  _BYTE *v0;

  if (*v0)
    return 0x7472656C61;
  else
    return 0x68536E6F69746361;
}

uint64_t sub_8214(char *a1, char *a2)
{
  return sub_C64DC(*a1, *a2);
}

Swift::Int sub_8220()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5, 0);
  if (v1)
    v2 = 0x7472656C61;
  else
    v2 = 0x68536E6F69746361;
  if (v1)
    v3 = 0xE500000000000000;
  else
    v3 = 0xEB00000000746565;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_82A4(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  if (*v1)
    v2 = 0x7472656C61;
  else
    v2 = 0x68536E6F69746361;
  if (*v1)
    v3 = 0xE500000000000000;
  else
    v3 = 0xEB00000000746565;
  String.hash(into:)(a1, v2, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_8304(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD v6[9];

  v2 = *v1;
  Hasher.init(_seed:)(v6, a1);
  if (v2)
    v3 = 0x7472656C61;
  else
    v3 = 0x68536E6F69746361;
  if (v2)
    v4 = 0xE500000000000000;
  else
    v4 = 0xEB00000000746565;
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_8384@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  return Metrics.DialogType.init(rawValue:)(*a1, a2);
}

void sub_8390(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 0x68536E6F69746361;
  if (*v1)
    v2 = 0x7472656C61;
  v3 = 0xEB00000000746565;
  if (*v1)
    v3 = 0xE500000000000000;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t static Metrics.createDialogMetrics(actionType:dialogType:message:options:result:targetID:title:)@<X0>(unsigned __int8 *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, int a5@<W5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, __int128 a9)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int v21;
  char isUniquelyReferenced_nonNull_native;
  void *v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  void *v32;
  char v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  void *v39;
  uint64_t v40;
  char v41;
  void *v42;
  char v43;
  void *v44;
  char v45;
  uint64_t v46;
  uint64_t inited;
  uint64_t v48;
  double v49;
  uint64_t v50;
  unint64_t v51;
  char v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char v59;
  void *v60;
  uint64_t v61;
  unint64_t v62;
  char v63;
  void *v64;
  uint64_t v65;
  char *v66;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  _BYTE v76[176];
  void *v77;
  __int128 v78;
  __int128 v79;
  void *v80;

  v75 = a6;
  v74 = a5;
  v73 = a8;
  v14 = type metadata accessor for ScalarDictionary(0);
  __chkstk_darwin(v14);
  v72 = (char *)&v68 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = type metadata accessor for Date(0);
  v68 = *(_QWORD *)(v69 - 8);
  __chkstk_darwin(v69);
  v17 = (char *)&v68 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v71 = type metadata accessor for MetricsEventType(0);
  v70 = *(_QWORD *)(v71 - 8);
  v18 = __chkstk_darwin(v71);
  v20 = (char *)&v68 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = *a1;
  static MetricsEventType.dialog.getter(v18);
  v80 = &type metadata for String;
  *(_QWORD *)&v79 = 27503;
  *((_QWORD *)&v79 + 1) = 0xE200000000000000;
  sub_8C4C(&v79, &v78);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
  v77 = &_swiftEmptyDictionarySingleton;
  sub_A7C8(&v78, 0x79546E6F69746361, 0xEA00000000006570, isUniquelyReferenced_nonNull_native);
  v23 = v77;
  swift_bridgeObjectRelease(0x8000000000000000);
  v24 = 0x68536E6F69746361;
  if (v21)
    v24 = 0x7472656C61;
  v25 = 0xEB00000000746565;
  v80 = &type metadata for String;
  if (v21)
    v25 = 0xE500000000000000;
  *(_QWORD *)&v79 = v24;
  *((_QWORD *)&v79 + 1) = v25;
  sub_8C4C(&v79, &v78);
  v26 = swift_isUniquelyReferenced_nonNull_native(v23);
  v77 = v23;
  sub_A7C8(&v78, 0x7954676F6C616964, 0xEA00000000006570, v26);
  v27 = v77;
  v28 = swift_bridgeObjectRelease(0x8000000000000000);
  v29 = MetricsEventType.rawValue.getter(v28);
  v80 = &type metadata for String;
  *(_QWORD *)&v79 = v29;
  *((_QWORD *)&v79 + 1) = v30;
  sub_8C4C(&v79, &v78);
  v31 = swift_isUniquelyReferenced_nonNull_native(v27);
  v77 = v27;
  sub_A7C8(&v78, 0x707954746E657665, 0xE900000000000065, v31);
  v32 = v77;
  swift_bridgeObjectRelease(0x8000000000000000);
  if (a3)
  {
    v80 = &type metadata for String;
    *(_QWORD *)&v79 = a2;
    *((_QWORD *)&v79 + 1) = a3;
    sub_8C4C(&v79, &v78);
    swift_bridgeObjectRetain(a3);
    v33 = swift_isUniquelyReferenced_nonNull_native(v32);
    v77 = v32;
    sub_A7C8(&v78, 0x6567617373656DLL, 0xE700000000000000, v33);
    v32 = v77;
    swift_bridgeObjectRelease(0x8000000000000000);
  }
  *(_QWORD *)&v79 = a4;
  v34 = sub_5440(&qword_25DF80);
  v35 = sub_A8F8();
  v36 = BidirectionalCollection<>.joined(separator:)(32, 0xE100000000000000, v34, v35);
  v80 = &type metadata for String;
  *(_QWORD *)&v79 = v36;
  *((_QWORD *)&v79 + 1) = v37;
  sub_8C4C(&v79, &v78);
  v38 = swift_isUniquelyReferenced_nonNull_native(v32);
  v77 = v32;
  sub_A7C8(&v78, 0x736E6F6974706FLL, 0xE700000000000000, v38);
  v39 = v77;
  swift_bridgeObjectRelease(0x8000000000000000);
  v40 = 0x6572756C696166;
  v80 = &type metadata for String;
  if ((v74 & 1) != 0)
    v40 = 0x73736563637573;
  *(_QWORD *)&v79 = v40;
  *((_QWORD *)&v79 + 1) = 0xE700000000000000;
  sub_8C4C(&v79, &v78);
  v41 = swift_isUniquelyReferenced_nonNull_native(v39);
  v77 = v39;
  sub_A7C8(&v78, 0x746C75736572, 0xE600000000000000, v41);
  v42 = v77;
  swift_bridgeObjectRelease(0x8000000000000000);
  v80 = &type metadata for String;
  *(_QWORD *)&v79 = v75;
  *((_QWORD *)&v79 + 1) = a7;
  sub_8C4C(&v79, &v78);
  swift_bridgeObjectRetain(a7);
  v43 = swift_isUniquelyReferenced_nonNull_native(v42);
  v77 = v42;
  sub_A7C8(&v78, 0x6449746567726174, 0xE800000000000000, v43);
  v44 = v77;
  swift_bridgeObjectRelease(0x8000000000000000);
  if (*((_QWORD *)&a9 + 1))
  {
    v80 = &type metadata for String;
    v79 = a9;
    sub_8C4C(&v79, &v78);
    swift_bridgeObjectRetain(*((_QWORD *)&a9 + 1));
    v45 = swift_isUniquelyReferenced_nonNull_native(v44);
    v77 = v44;
    sub_A7C8(&v78, 0x656C746974, 0xE500000000000000, v45);
    v44 = v77;
    swift_bridgeObjectRelease(0x8000000000000000);
  }
  v46 = sub_5440(&qword_25DF90);
  inited = swift_initStackObject(v46, v76);
  *(_OWORD *)(inited + 16) = xmmword_1E0B60;
  strcpy((char *)(inited + 32), "responseTime");
  *(_BYTE *)(inited + 45) = 0;
  *(_WORD *)(inited + 46) = -5120;
  v48 = Date.init()();
  v49 = Date.timeIntervalSince1970.getter(v48);
  (*(void (**)(char *, uint64_t))(v68 + 8))(v17, v69);
  *(double *)(inited + 48) = v49 * 1000.0;
  *(_QWORD *)(inited + 72) = &type metadata for Double;
  *(_QWORD *)(inited + 80) = 0x746C75736572;
  *(_QWORD *)(inited + 88) = 0xE600000000000000;
  *(_BYTE *)(inited + 96) = v74 & 1;
  *(_QWORD *)(inited + 120) = &type metadata for Bool;
  *(_QWORD *)(inited + 128) = 0x6449746567726174;
  *(_QWORD *)(inited + 168) = &type metadata for String;
  v50 = v75;
  *(_QWORD *)(inited + 136) = 0xE800000000000000;
  *(_QWORD *)(inited + 144) = v50;
  *(_QWORD *)(inited + 152) = a7;
  swift_bridgeObjectRetain(a7);
  v51 = sub_8FD8(inited, &qword_25E0B0, &qword_25E0B8, (uint64_t (*)(uint64_t *, unint64_t))sub_8C4C);
  v80 = (void *)sub_5440(&qword_25DF98);
  *(_QWORD *)&v79 = v51;
  sub_8C4C(&v79, &v78);
  v52 = swift_isUniquelyReferenced_nonNull_native(v44);
  v77 = v44;
  sub_A7C8(&v78, 0x6974634172657375, 0xEB00000000736E6FLL, v52);
  v53 = v77;
  swift_bridgeObjectRelease(0x8000000000000000);
  v54 = sub_5440(&qword_25DFA0);
  v55 = type metadata accessor for MetricsData(0);
  v56 = swift_allocObject(v54, ((*(unsigned __int8 *)(*(_QWORD *)(v55 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v55 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v55 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v55 - 8) + 80) | 7);
  *(_OWORD *)(v56 + 16) = xmmword_1E0B70;
  if (qword_25DB68 != -1)
    swift_once(&qword_25DB68, sub_2BA10);
  v57 = qword_288CD0;
  if (*(_QWORD *)(qword_288CD0 + 16) && (v58 = sub_9F10((uint64_t)v20), (v59 & 1) != 0))
  {
    v60 = *(void **)(*(_QWORD *)(v57 + 56) + 8 * v58);
    swift_bridgeObjectRetain(v60);
  }
  else
  {
    v60 = &_swiftEmptySetSingleton;
  }
  if (qword_25DB70 != -1)
    swift_once(&qword_25DB70, sub_2BD7C);
  v61 = qword_288CD8;
  if (*(_QWORD *)(qword_288CD8 + 16) && (v62 = sub_9F10((uint64_t)v20), (v63 & 1) != 0))
  {
    v64 = *(void **)(*(_QWORD *)(v61 + 56) + 8 * v62);
    swift_bridgeObjectRetain(v64);
  }
  else
  {
    v64 = &_swiftEmptySetSingleton;
  }
  v65 = MetricsData.init(topic:shouldFlush:fields:includingFields:excludingFields:)(0xD000000000000010, 0x80000000001F9950, 0, v53, v60, v64);
  v66 = v72;
  ScalarDictionary.init()(v65);
  ActionMetrics.init(data:custom:)(v56, v66);
  return (*(uint64_t (**)(char *, uint64_t))(v70 + 8))(v20, v71);
}

uint64_t sub_8B78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  uint64_t v10;
  _OWORD v11[2];

  v4 = v3;
  if (*(_QWORD *)(a1 + 24))
  {
    sub_8C4C((_OWORD *)a1, v11);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v10 = *v3;
    *v3 = 0x8000000000000000;
    sub_A7C8(v11, a2, a3, isUniquelyReferenced_nonNull_native);
    v8 = *v3;
    *v4 = v10;
    swift_bridgeObjectRelease(a3);
    return swift_bridgeObjectRelease(v8);
  }
  else
  {
    sub_B414(a1, &qword_25E0C0);
    sub_1AC0B0(a2, a3, v11);
    swift_bridgeObjectRelease(a3);
    return sub_B414((uint64_t)v11, &qword_25E0C0);
  }
}

_OWORD *sub_8C4C(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_8C5C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v5;
  uint64_t v7;
  __int128 v8[2];

  if (*(_QWORD *)(a1 + 24))
  {
    sub_AC68((__int128 *)a1, (uint64_t)v8);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
    v7 = *v2;
    *v2 = 0x8000000000000000;
    sub_AC80(v8, a2, isUniquelyReferenced_nonNull_native);
    v5 = *v2;
    *v2 = v7;
    swift_bridgeObjectRelease(v5);
    return sub_AC34(a2);
  }
  else
  {
    sub_B414(a1, &qword_25DFD0);
    sub_1AC1B8(a2, (uint64_t)v8);
    sub_AC34(a2);
    return sub_B414((uint64_t)v8, &qword_25DFD0);
  }
}

uint64_t sub_8D18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  uint64_t v10;
  __int128 v11[2];

  v4 = v3;
  if (*(_QWORD *)(a1 + 24))
  {
    sub_AC68((__int128 *)a1, (uint64_t)v11);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v10 = *v3;
    *v3 = 0x8000000000000000;
    sub_AF3C(v11, a2, a3, isUniquelyReferenced_nonNull_native);
    v8 = *v3;
    *v4 = v10;
    swift_bridgeObjectRelease(a3);
    return swift_bridgeObjectRelease(v8);
  }
  else
  {
    sub_B414(a1, &qword_25DFE8);
    sub_1AC2A8(a2, a3, (uint64_t)v11);
    swift_bridgeObjectRelease(a3);
    return sub_B414((uint64_t)v11, &qword_25DFE8);
  }
}

unint64_t sub_8DEC(uint64_t a1)
{
  return sub_8E14(a1, &qword_25E0A0, &qword_25E0A8);
}

unint64_t sub_8E00(uint64_t a1)
{
  return sub_8E14(a1, &qword_25E080, &qword_25E088);
}

unint64_t sub_8E14(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t result;
  char v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v6 = sub_5440(a2);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(a1 + 16);
  if (!v10)
  {
    v12 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    v27 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v27);
    return (unint64_t)v12;
  }
  sub_5440(a3);
  v11 = static _DictionaryStorage.allocate(capacity:)(v10);
  v12 = (_QWORD *)v11;
  v13 = *(_QWORD *)(a1 + 16);
  if (!v13)
    goto LABEL_9;
  v14 = *(int *)(v6 + 48);
  v15 = v11 + 64;
  v16 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v29 = a1;
  v17 = a1 + v16;
  v18 = *(_QWORD *)(v7 + 72);
  swift_retain(v11);
  while (1)
  {
    sub_B3D0(v17, (uint64_t)v9, a2);
    result = sub_9F10((uint64_t)v9);
    if ((v20 & 1) != 0)
      break;
    v21 = result;
    *(_QWORD *)(v15 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v22 = v12[6];
    v23 = type metadata accessor for MetricsEventType(0);
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 32))(v22 + *(_QWORD *)(*(_QWORD *)(v23 - 8) + 72) * v21, v9, v23);
    *(_QWORD *)(v12[7] + 8 * v21) = *(_QWORD *)&v9[v14];
    v24 = v12[2];
    v25 = __OFADD__(v24, 1);
    v26 = v24 + 1;
    if (v25)
      goto LABEL_12;
    v12[2] = v26;
    v17 += v18;
    if (!--v13)
    {
      swift_release(v12);
      v27 = v29;
      goto LABEL_10;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_8FA0(uint64_t a1)
{
  return sub_8FD8(a1, &qword_25E0B0, &qword_25E0B8, (uint64_t (*)(uint64_t *, unint64_t))sub_8C4C);
}

unint64_t sub_8FBC(uint64_t a1)
{
  return sub_8FD8(a1, &qword_25E070, &qword_25E078, (uint64_t (*)(uint64_t *, unint64_t))sub_8C4C);
}

unint64_t sub_8FD8(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t (*a4)(uint64_t *, unint64_t))
{
  uint64_t v5;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t result;
  char v16;
  uint64_t *v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
    v9 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    v21 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v21);
    return (unint64_t)v9;
  }
  sub_5440(a2);
  v8 = static _DictionaryStorage.allocate(capacity:)(v5);
  v9 = (_QWORD *)v8;
  v10 = *(_QWORD *)(a1 + 16);
  if (!v10)
    goto LABEL_9;
  v11 = v8 + 64;
  v12 = a1 + 32;
  swift_retain(v8);
  while (1)
  {
    sub_B3D0(v12, (uint64_t)&v22, a3);
    v13 = v22;
    v14 = v23;
    result = sub_9F7C(v22, v23);
    if ((v16 & 1) != 0)
      break;
    *(_QWORD *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v17 = (uint64_t *)(v9[6] + 16 * result);
    *v17 = v13;
    v17[1] = v14;
    result = a4(&v24, v9[7] + 32 * result);
    v18 = v9[2];
    v19 = __OFADD__(v18, 1);
    v20 = v18 + 1;
    if (v19)
      goto LABEL_12;
    v9[2] = v20;
    v12 += 48;
    if (!--v10)
    {
      swift_release(v9);
      v21 = a1;
      goto LABEL_10;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_9110(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  _OWORD v15[2];
  uint64_t v16;
  __int128 v17;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_5440(&qword_25E060);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  v6 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_B3D0(v6, (uint64_t)v15, &qword_25E068);
    result = sub_9FE0((uint64_t)v15);
    if ((v8 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v9 = v4[6] + 40 * result;
    v10 = v15[0];
    v11 = v15[1];
    *(_QWORD *)(v9 + 32) = v16;
    *(_OWORD *)v9 = v10;
    *(_OWORD *)(v9 + 16) = v11;
    result = sub_AC68(&v17, v4[7] + 40 * result);
    v12 = v4[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v4[2] = v14;
    v6 += 80;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_9248(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t result;
  char v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v2 = sub_5440(&qword_25E050);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
    v8 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    v23 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v23);
    return (unint64_t)v8;
  }
  sub_5440(&qword_25E058);
  v7 = static _DictionaryStorage.allocate(capacity:)(v6);
  v8 = (_QWORD *)v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
    goto LABEL_9;
  v10 = *(int *)(v2 + 48);
  v11 = v7 + 64;
  v12 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v25 = a1;
  v13 = a1 + v12;
  v14 = *(_QWORD *)(v3 + 72);
  swift_retain(v7);
  while (1)
  {
    sub_B3D0(v13, (uint64_t)v5, &qword_25E050);
    result = sub_A010((uint64_t)v5);
    if ((v16 & 1) != 0)
      break;
    v17 = result;
    *(_QWORD *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v18 = v8[6];
    v19 = _s8RatioKeyVMa(0);
    result = sub_B38C((uint64_t)v5, v18 + *(_QWORD *)(*(_QWORD *)(v19 - 8) + 72) * v17);
    *(_QWORD *)(v8[7] + 8 * v17) = *(_QWORD *)&v5[v10];
    v20 = v8[2];
    v21 = __OFADD__(v20, 1);
    v22 = v20 + 1;
    if (v21)
      goto LABEL_12;
    v8[2] = v22;
    v13 += v14;
    if (!--v9)
    {
      swift_release(v8);
      v23 = v25;
      goto LABEL_10;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_93D4(uint64_t a1)
{
  return sub_9544(a1, &qword_25DFC8);
}

unint64_t sub_93E0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  _OWORD v16[2];
  uint64_t v17;
  __int128 v18;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_5440(&qword_25E000);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  v6 = v3 + 64;
  v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_B3D0(v7, (uint64_t)v16, &qword_25E008);
    result = sub_9FE0((uint64_t)v16);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v10 = v4[6] + 40 * result;
    v11 = v16[0];
    v12 = v16[1];
    *(_QWORD *)(v10 + 32) = v17;
    *(_OWORD *)v10 = v11;
    *(_OWORD *)(v10 + 16) = v12;
    result = (unint64_t)sub_8C4C(&v18, (_OWORD *)(v4[7] + 32 * result));
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4[2] = v15;
    v7 += 72;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_9520(uint64_t a1)
{
  return sub_9544(a1, &qword_25E028);
}

unint64_t sub_952C(uint64_t a1)
{
  return sub_9544(a1, &qword_25DFC0);
}

unint64_t sub_9538(uint64_t a1)
{
  return sub_9544(a1, &qword_25E010);
}

unint64_t sub_9544(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _OWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  __int128 v16;

  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
    v5 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_5440(a2);
  v4 = static _DictionaryStorage.allocate(capacity:)(v3);
  v5 = (_QWORD *)v4;
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v5;
  }
  swift_retain(v4);
  v7 = (_OWORD *)(a1 + 48);
  while (1)
  {
    v8 = *((_QWORD *)v7 - 2);
    v9 = *((_QWORD *)v7 - 1);
    v16 = *v7;
    swift_bridgeObjectRetain(v9);
    result = sub_9F7C(v8, v9);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)((char *)v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v12 = (uint64_t *)(v5[6] + 16 * result);
    *v12 = v8;
    v12[1] = v9;
    *(_OWORD *)(v5[7] + 16 * result) = v16;
    v13 = v5[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v5[2] = v15;
    v7 += 2;
    if (!--v6)
    {
      swift_release(v5);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_965C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t result;
  char v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_5440(&qword_25DFF8);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (uint64_t *)(a1 + 56);
  while (1)
  {
    v7 = *(v6 - 3);
    v8 = *(v6 - 2);
    v10 = *(v6 - 1);
    v9 = *v6;
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    result = sub_9F7C(v7, v8);
    if ((v12 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v13 = (uint64_t *)(v4[6] + 16 * result);
    *v13 = v7;
    v13[1] = v8;
    v14 = (_QWORD *)(v4[7] + 16 * result);
    *v14 = v10;
    v14[1] = v9;
    v15 = v4[2];
    v16 = __OFADD__(v15, 1);
    v17 = v15 + 1;
    if (v16)
      goto LABEL_11;
    v6 += 4;
    v4[2] = v17;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_977C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_5440(&qword_25E038);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v7 = *(v6 - 2);
    v8 = *(v6 - 1);
    v9 = *v6;
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    result = sub_9F7C(v7, v8);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v12 = (uint64_t *)(v4[6] + 16 * result);
    *v12 = v7;
    v12[1] = v8;
    *(_QWORD *)(v4[7] + 8 * result) = v9;
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4[2] = v15;
    v6 += 3;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_9894(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    v16 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v16);
    return (unint64_t)v4;
  }
  sub_5440(&qword_25E018);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
    goto LABEL_9;
  v6 = v3 + 64;
  v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_B3D0(v7, (uint64_t)&v17, &qword_25E020);
    v8 = v17;
    v9 = v18;
    result = sub_9F7C(v17, v18);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v12 = (uint64_t *)(v4[6] + 16 * result);
    *v12 = v8;
    v12[1] = v9;
    result = sub_AC68(&v19, v4[7] + 40 * result);
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_12;
    v4[2] = v15;
    v7 += 56;
    if (!--v5)
    {
      swift_release(v4);
      v16 = a1;
      goto LABEL_10;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_99D4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  unint64_t result;
  char v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char v27;
  uint64_t v28;
  char v29;
  char v30;
  char v31;
  char v32;
  char v33;

  v1 = a1;
  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_5440(&qword_25DFB8);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(v1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(v1);
    return (unint64_t)v4;
  }
  v24 = v3 + 64;
  swift_retain(v3);
  v23 = v1;
  v6 = (char *)(v1 + 113);
  while (1)
  {
    v25 = v5;
    v7 = *(_QWORD *)(v6 - 81);
    v8 = *(_QWORD *)(v6 - 73);
    v9 = *(_QWORD *)(v6 - 65);
    v10 = *(_QWORD *)(v6 - 57);
    v11 = *(v6 - 49);
    v12 = *(_QWORD *)(v6 - 41);
    v13 = *(v6 - 33);
    v14 = *(v6 - 32);
    v15 = *(_QWORD *)(v6 - 25);
    v32 = *(v6 - 16);
    v33 = *(v6 - 17);
    v30 = *(v6 - 14);
    v31 = *(v6 - 15);
    v29 = *(v6 - 13);
    v28 = *(_QWORD *)(v6 - 9);
    v26 = *v6;
    v27 = *(v6 - 1);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v10);
    result = sub_9F7C(v7, v8);
    if ((v17 & 1) != 0)
      break;
    *(_QWORD *)(v24 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v18 = (uint64_t *)(v4[6] + 16 * result);
    *v18 = v7;
    v18[1] = v8;
    v19 = v4[7] + 72 * result;
    *(_QWORD *)v19 = v9;
    *(_QWORD *)(v19 + 8) = v10;
    *(_BYTE *)(v19 + 16) = v11;
    *(_QWORD *)(v19 + 24) = v12;
    *(_BYTE *)(v19 + 32) = v13;
    *(_BYTE *)(v19 + 33) = v14;
    *(_QWORD *)(v19 + 40) = v15;
    *(_BYTE *)(v19 + 48) = v33;
    *(_BYTE *)(v19 + 49) = v32;
    *(_BYTE *)(v19 + 50) = v31;
    *(_BYTE *)(v19 + 51) = v30;
    *(_BYTE *)(v19 + 52) = v29;
    *(_QWORD *)(v19 + 56) = v28;
    *(_BYTE *)(v19 + 64) = v27;
    *(_BYTE *)(v19 + 65) = v26;
    v20 = v4[2];
    v21 = __OFADD__(v20, 1);
    v22 = v20 + 1;
    if (v21)
      goto LABEL_11;
    v4[2] = v22;
    v6 += 88;
    v5 = v25 - 1;
    if (v25 == 1)
    {
      swift_release(v4);
      v1 = v23;
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_9BC0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t result;
  char v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_5440(&qword_25DFF0);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (_QWORD *)(a1 + 56);
  while (1)
  {
    v7 = *(v6 - 3);
    v8 = *(v6 - 2);
    v10 = *(v6 - 1);
    v9 = *v6;
    swift_bridgeObjectRetain(*v6);
    swift_bridgeObjectRetain(v8);
    result = sub_9F7C(v7, v8);
    if ((v12 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v13 = (uint64_t *)(v4[6] + 16 * result);
    *v13 = v7;
    v13[1] = v8;
    v14 = (_QWORD *)(v4[7] + 16 * result);
    *v14 = v10;
    v14[1] = v9;
    v15 = v4[2];
    v16 = __OFADD__(v15, 1);
    v17 = v15 + 1;
    if (v16)
      goto LABEL_11;
    v6 += 4;
    v4[2] = v17;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_9CE0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_5440(&qword_25DFE0);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v7 = *(v6 - 2);
    v8 = *(v6 - 1);
    v9 = *v6;
    swift_bridgeObjectRetain(v8);
    swift_retain(v9);
    result = sub_9F7C(v7, v8);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v12 = (uint64_t *)(v4[6] + 16 * result);
    *v12 = v7;
    v12[1] = v8;
    *(_QWORD *)(v4[7] + 8 * result) = v9;
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4[2] = v15;
    v6 += 3;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_9DF8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  unint64_t result;
  char v12;
  uint64_t *v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_5440(&qword_25DFD8);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (void **)(a1 + 48);
  while (1)
  {
    v7 = (uint64_t)*(v6 - 2);
    v8 = (uint64_t)*(v6 - 1);
    v9 = *v6;
    swift_bridgeObjectRetain(v8);
    v10 = v9;
    result = sub_9F7C(v7, v8);
    if ((v12 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v13 = (uint64_t *)(v4[6] + 16 * result);
    *v13 = v7;
    v13[1] = v8;
    *(_QWORD *)(v4[7] + 8 * result) = v10;
    v14 = v4[2];
    v15 = __OFADD__(v14, 1);
    v16 = v14 + 1;
    if (v15)
      goto LABEL_11;
    v4[2] = v16;
    v6 += 3;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_9F10(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = v1;
  v4 = *(_QWORD *)(v2 + 40);
  v5 = type metadata accessor for MetricsEventType(0);
  v6 = sub_6FD0(&qword_25E090, (uint64_t (*)(uint64_t))&type metadata accessor for MetricsEventType, (uint64_t)&protocol conformance descriptor for MetricsEventType);
  v7 = dispatch thunk of Hashable._rawHashValue(seed:)(v4, v5, v6);
  return sub_A1B8(a1, v7);
}

unint64_t sub_9F7C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  Swift::Int v5;
  _QWORD v7[9];

  Hasher.init(_seed:)(v7, *(_QWORD *)(v2 + 40));
  String.hash(into:)(v7, a1, a2);
  v5 = Hasher._finalize()();
  return sub_A2F8(a1, a2, v5);
}

unint64_t sub_9FE0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;

  v2 = v1;
  v4 = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
  return sub_A3D8(a1, v4);
}

unint64_t sub_A010(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::Int v7;
  _QWORD v9[9];

  Hasher.init(_seed:)(v9, *(_QWORD *)(v1 + 40));
  v3 = type metadata accessor for Font.TextStyle(0);
  v4 = sub_6FD0(&qword_25E040, (uint64_t (*)(uint64_t))&type metadata accessor for Font.TextStyle, (uint64_t)&protocol conformance descriptor for Font.TextStyle);
  dispatch thunk of Hashable.hash(into:)(v9, v3, v4);
  _s8RatioKeyVMa(0);
  v5 = type metadata accessor for DynamicTypeSize(0);
  v6 = sub_6FD0(&qword_25E048, (uint64_t (*)(uint64_t))&type metadata accessor for DynamicTypeSize, (uint64_t)&protocol conformance descriptor for DynamicTypeSize);
  dispatch thunk of Hashable.hash(into:)(v9, v5, v6);
  v7 = Hasher._finalize()();
  return sub_A49C(a1, v7);
}

unint64_t sub_A0E0(unsigned __int8 a1)
{
  uint64_t v1;
  Swift::Int v3;
  _QWORD v5[9];

  Hasher.init(_seed:)(v5, *(_QWORD *)(v1 + 40));
  Hasher._combine(_:)(a1);
  v3 = Hasher._finalize()();
  return sub_A5B4(a1, v3);
}

unint64_t sub_A138(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::Int v7;
  _QWORD v9[9];

  v3 = *(_QWORD *)(v1 + 40);
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v6 = v5;
  Hasher.init(_seed:)(v9, v3);
  String.hash(into:)(v9, v4, v6);
  v7 = Hasher._finalize()();
  swift_bridgeObjectRelease(v6);
  return sub_A654(a1, v7);
}

unint64_t sub_A1B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, unint64_t, uint64_t);
  uint64_t v14;
  char v15;
  uint64_t v17;
  uint64_t v18;

  v3 = v2;
  v18 = a1;
  v5 = type metadata accessor for MetricsEventType(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = -1 << *(_BYTE *)(v3 + 32);
  v10 = a2 & ~v9;
  if (((*(_QWORD *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = ~v9;
    v12 = *(_QWORD *)(v6 + 72);
    v13 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    do
    {
      v13(v8, *(_QWORD *)(v3 + 48) + v12 * v10, v5);
      v14 = sub_6FD0(&qword_25E098, (uint64_t (*)(uint64_t))&type metadata accessor for MetricsEventType, (uint64_t)&protocol conformance descriptor for MetricsEventType);
      v15 = dispatch thunk of static Equatable.== infix(_:_:)(v8, v18, v5, v14);
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      if ((v15 & 1) != 0)
        break;
      v10 = (v10 + 1) & v11;
    }
    while (((*(_QWORD *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
  }
  return v10;
}

unint64_t sub_A2F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  BOOL v16;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = v10[1];
    v12 = *v10 == a1 && v11 == a2;
    if (!v12 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v10, v11, a1, a2, 0) & 1) == 0)
    {
      v13 = ~v5;
      do
      {
        v6 = (v6 + 1) & v13;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v14 = (_QWORD *)(v9 + 16 * v6);
        v15 = v14[1];
        v16 = *v14 == a1 && v15 == a2;
      }
      while (!v16 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v14, v15, a1, a2, 0) & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_A3D8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  char v7;
  _BYTE v9[40];

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v6 = ~v3;
    do
    {
      sub_B1FC(*(_QWORD *)(v2 + 48) + 40 * v4, (uint64_t)v9);
      v7 = static AnyHashable.== infix(_:_:)(v9, a1);
      sub_AC34((uint64_t)v9);
      if ((v7 & 1) != 0)
        break;
      v4 = (v4 + 1) & v6;
    }
    while (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

unint64_t sub_A49C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v5 = _s8RatioKeyVMa(0);
  __chkstk_darwin(v5);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = -1 << *(_BYTE *)(v2 + 32);
  v10 = a2 & ~v9;
  if (((*(_QWORD *)(v2 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = ~v9;
    v12 = *(_QWORD *)(v6 + 72);
    while (1)
    {
      sub_B30C(*(_QWORD *)(v2 + 48) + v12 * v10, (uint64_t)v8);
      if ((static Font.TextStyle.== infix(_:_:)(v8, a1) & 1) != 0
        && (static DynamicTypeSize.== infix(_:_:)(&v8[*(int *)(v5 + 20)], a1 + *(int *)(v5 + 20)) & 1) != 0)
      {
        break;
      }
      sub_B350((uint64_t)v8);
      v10 = (v10 + 1) & v11;
      if (((*(_QWORD *)(v2 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
        return v10;
    }
    sub_B350((uint64_t)v8);
  }
  return v10;
}

unint64_t sub_A5B4(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48);
    if (*(unsigned __int8 *)(v7 + result) != a1)
    {
      v8 = ~v5;
      for (result = (result + 1) & v8;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v8)
      {
        if (*(unsigned __int8 *)(v7 + result) == a1)
          break;
      }
    }
  }
  return result;
}

unint64_t sub_A654(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  char v22;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  v5 = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
  {
    v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v5));
    v9 = v8;
    v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
    if (v7 == v10 && v9 == v11)
    {
LABEL_16:
      swift_bridgeObjectRelease_n(v9, 2);
      return v5;
    }
    v13 = v11;
    v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v9, v10, v11, 0);
    swift_bridgeObjectRelease(v9);
    swift_bridgeObjectRelease(v13);
    if ((v14 & 1) == 0)
    {
      v15 = ~v4;
      v5 = (v5 + 1) & v15;
      if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
      {
        while (1)
        {
          v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v5));
          v9 = v17;
          v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
          if (v16 == v18 && v9 == v19)
            break;
          v21 = v19;
          v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v9, v18, v19, 0);
          swift_bridgeObjectRelease(v9);
          swift_bridgeObjectRelease(v21);
          if ((v22 & 1) == 0)
          {
            v5 = (v5 + 1) & v15;
            if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
              continue;
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

_OWORD *sub_A7C8(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _OWORD *result;
  unint64_t v21;
  char v22;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = sub_9F7C(a2, a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = (_QWORD *)(v18[7] + 32 * v12);
        _s7BooksUI13AnyPagedFrameVwxx_0(v19);
        return sub_8C4C(a1, v19);
      }
      goto LABEL_11;
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_1AE000();
      goto LABEL_7;
    }
    sub_1AC3B0(v15, a4 & 1);
    v21 = sub_9F7C(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      v12 = v21;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_1ADDCC(v12, a2, a3, a1, v18);
      return (_OWORD *)swift_bridgeObjectRetain(a3);
    }
  }
  result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

unint64_t sub_A8F8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25DF88;
  if (!qword_25DF88)
  {
    v1 = sub_7EF8(&qword_25DF80);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_25DF88);
  }
  return result;
}

unint64_t sub_A948()
{
  unint64_t result;

  result = qword_25DFA8;
  if (!qword_25DFA8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Metrics.DialogActionType, &type metadata for Metrics.DialogActionType);
    atomic_store(result, (unint64_t *)&qword_25DFA8);
  }
  return result;
}

unint64_t sub_A990()
{
  unint64_t result;

  result = qword_25DFB0;
  if (!qword_25DFB0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Metrics.DialogType, &type metadata for Metrics.DialogType);
    atomic_store(result, (unint64_t *)&qword_25DFB0);
  }
  return result;
}

uint64_t _s16DialogActionTypeOwet(unsigned int *a1, int a2)
{
  int v2;
  int v3;

  if (!a2)
    return 0;
  if ((a2 + 1) >= 0x10000)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) < 0x100)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
    return *a1;
  if (v3 == 2)
    return *(unsigned __int16 *)a1;
  return *(unsigned __int8 *)a1;
}

uint64_t _s16DialogActionTypeOwst(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_AA68 + 4 * byte_1E0B80[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_AA88 + 4 * byte_1E0B85[v4]))();
}

_BYTE *sub_AA68(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_AA88(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_AA90(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_AA98(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_AAA0(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_AAA8(_DWORD *result)
{
  *result = 0;
  return result;
}

uint64_t EnvironmentValues.hostingViewBarType.getter()
{
  return 0;
}

ValueMetadata *type metadata accessor for Metrics.DialogActionType()
{
  return &type metadata for Metrics.DialogActionType;
}

uint64_t _s10DialogTypeOwet(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s10DialogTypeOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_ABA8 + 4 * byte_1E0B8F[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_ABDC + 4 * byte_1E0B8A[v4]))();
}

uint64_t sub_ABDC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_ABE4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0xABECLL);
  return result;
}

uint64_t sub_ABF8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0xAC00);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_AC04(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_AC0C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *sub_AC18(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for Metrics.DialogType()
{
  return &type metadata for Metrics.DialogType;
}

uint64_t sub_AC34(uint64_t a1)
{
  (*(void (**)(void))(*(&type metadata for AnyHashable - 1) + 8))();
  return a1;
}

uint64_t sub_AC68(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_AC80(__int128 *a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t result;
  unint64_t v19;
  char v20;
  _BYTE v21[40];

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = sub_9FE0(a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        v17 = (_QWORD *)(v16[7] + 40 * v10);
        _s7BooksUI13AnyPagedFrameVwxx_0(v17);
        return sub_AC68(a1, (uint64_t)v17);
      }
      goto LABEL_11;
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_1AE228();
      goto LABEL_7;
    }
    sub_1AC710(v13, a3 & 1);
    v19 = sub_9FE0(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      v10 = v19;
      v16 = *v4;
      if ((v14 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_B1FC(a2, (uint64_t)v21);
      return sub_1ADE34(v10, (uint64_t)v21, a1, v16);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for AnyHashable);
  __break(1u);
  return result;
}

uint64_t sub_ADBC(uint64_t a1, char a2, double a3)
{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _QWORD *v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t result;
  char v17;
  uint64_t v18;
  _QWORD *v19;
  char v20;
  uint64_t v21;

  v4 = (_QWORD **)v3;
  v8 = _s8RatioKeyVMa(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (_QWORD *)*v3;
  v13 = sub_A010(a1);
  v14 = v11[2];
  v15 = (v12 & 1) == 0;
  result = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
  }
  else
  {
    v17 = v12;
    v18 = v11[3];
    if (v18 >= result && (a2 & 1) != 0)
    {
LABEL_7:
      v19 = *v4;
      if ((v17 & 1) != 0)
      {
LABEL_8:
        *(double *)(v19[7] + 8 * v13) = a3;
        return result;
      }
      goto LABEL_11;
    }
    if (v18 >= result && (a2 & 1) == 0)
    {
      result = (uint64_t)sub_1AE400();
      goto LABEL_7;
    }
    sub_1ACA2C(result, a2 & 1);
    result = sub_A010(a1);
    if ((v17 & 1) == (v20 & 1))
    {
      v13 = result;
      v19 = *v4;
      if ((v17 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_B30C(a1, (uint64_t)v10);
      return sub_1ADEB0(v13, (uint64_t)v10, v19, a3);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v8);
  __break(1u);
  return result;
}

int64_t sub_AF04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  return sub_B0A8(a1, a2, a3, a4, a5, (uint64_t (*)(void))sub_1AE618, (void (*)(void))sub_1ACDF8, (void (*)(unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1ADF40);
}

int64_t sub_AF20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  return sub_B0A8(a1, a2, a3, a4, a5, (uint64_t (*)(void))sub_1AE84C, (void (*)(void))sub_1AD1D8, (void (*)(unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1ADF40);
}

uint64_t sub_AF3C(__int128 *a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t result;
  unint64_t v21;
  char v22;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = sub_9F7C(a2, a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = (_QWORD *)(v18[7] + 40 * v12);
        _s7BooksUI13AnyPagedFrameVwxx_0(v19);
        return sub_AC68(a1, (uint64_t)v19);
      }
      goto LABEL_11;
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_1AE858();
      goto LABEL_7;
    }
    sub_1AD1E4(v15, a4 & 1);
    v21 = sub_9F7C(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      v12 = v21;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_1ADF44(v12, a2, a3, a1, v18);
      return swift_bridgeObjectRetain(a3);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

int64_t sub_B070(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  return sub_B0A8(a1, a2, a3, a4, a5, (uint64_t (*)(void))sub_1AE86C, (void (*)(void))sub_1AD1F8, (void (*)(unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1ADF40);
}

int64_t sub_B08C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  return sub_B0A8(a1, a2, a3, a4, a5, (uint64_t (*)(void))sub_1AEA78, (void (*)(void))sub_1AD52C, (void (*)(unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1ADF40);
}

int64_t sub_B0A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t (*a6)(void), void (*a7)(void), void (*a8)(unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t *v8;
  uint64_t *v10;
  uint64_t v16;
  char v17;
  unint64_t v18;
  uint64_t v19;
  _BOOL8 v20;
  int64_t result;
  char v22;
  int64_t v23;
  uint64_t v24;
  _QWORD *v25;
  char v26;

  v10 = v8;
  v16 = *v8;
  v18 = sub_9F7C(a3, a4);
  v19 = *(_QWORD *)(v16 + 16);
  v20 = (v17 & 1) == 0;
  result = v19 + v20;
  if (__OFADD__(v19, v20))
  {
    __break(1u);
  }
  else
  {
    v22 = v17;
    v23 = *(_QWORD *)(v16 + 24);
    if (v23 >= result && (a5 & 1) != 0)
    {
LABEL_7:
      v24 = *v10;
      if ((v22 & 1) != 0)
      {
LABEL_8:
        v25 = (_QWORD *)(*(_QWORD *)(v24 + 56) + 16 * v18);
        *v25 = a1;
        v25[1] = a2;
        return result;
      }
      goto LABEL_11;
    }
    if (v23 >= result && (a5 & 1) == 0)
    {
      result = a6();
      goto LABEL_7;
    }
    a7();
    result = sub_9F7C(a3, a4);
    if ((v22 & 1) == (v26 & 1))
    {
      v18 = result;
      v24 = *v10;
      if ((v22 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      a8(v18, a3, a4, a1, a2, v24);
      return swift_bridgeObjectRetain(a4);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

uint64_t sub_B1FC(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(&type metadata for AnyHashable - 1) + 16))(a2, a1);
  return a2;
}

unint64_t sub_B238(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  _QWORD *i;
  unsigned __int8 v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_5440(&qword_25E030);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v1);
    for (i = (_QWORD *)(a1 + 40); ; i += 2)
    {
      v5 = *((_BYTE *)i - 8);
      v6 = *i;
      result = sub_A0E0(v5);
      if ((v8 & 1) != 0)
        break;
      *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(_BYTE *)(v3[6] + result) = v5;
      *(_QWORD *)(v3[7] + 8 * result) = v6;
      v9 = v3[2];
      v10 = __OFADD__(v9, 1);
      v11 = v9 + 1;
      if (v10)
        goto LABEL_10;
      v3[2] = v11;
      if (!--v1)
        return (unint64_t)v3;
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  }
  return result;
}

uint64_t sub_B30C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = _s8RatioKeyVMa(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_B350(uint64_t a1)
{
  uint64_t v2;

  v2 = _s8RatioKeyVMa(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_B38C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = _s8RatioKeyVMa(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_B3D0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_5440(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_B414(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = sub_5440(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t static ListItemMetadata.seriesPage(assetInfo:)@<X0>(_QWORD *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int (*v27)(char *, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  void (*v35)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t KeyPath;
  uint64_t v49;
  uint64_t v50;
  void (*v52)(char *, char *, uint64_t);
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  char *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  char *v65;
  __int128 v66[18];
  _BYTE v67[32];
  uint64_t v68;
  _BYTE v69[32];
  uint64_t v70;
  _OWORD v71[2];
  uint64_t v72;
  _QWORD v73[5];
  _QWORD v74[5];
  __int128 v75;
  __int128 v76;
  uint64_t v77;

  v64 = a2;
  v60 = type metadata accessor for ShrinkableText(0);
  __chkstk_darwin(v60);
  v61 = (char *)&v52 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for LocalizerRequest(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v59 = (char *)&v52 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v9 = (char *)&v52 - v8;
  v10 = sub_5440(&qword_25E0C8);
  v11 = __chkstk_darwin(v10);
  v58 = (char *)&v52 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v11);
  v57 = (char *)&v52 - v14;
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v52 - v16;
  __chkstk_darwin(v15);
  v19 = (char *)&v52 - v18;
  v20 = a1[3];
  v21 = a1[4];
  sub_5480(a1, v20);
  sub_B9CC(v20, v21, (uint64_t)v19);
  v22 = a1[3];
  v23 = a1[4];
  sub_5480(a1, v22);
  v24 = AssetInfo.title.getter(v22, v23);
  v62 = v25;
  v63 = v24;
  v26 = v5;
  v27 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48);
  v65 = v19;
  v28 = 0;
  v29 = 0;
  if (v27(v19, 1, v4) == 1)
  {
    v30 = a1[3];
    v31 = a1[4];
    sub_5480(a1, v30);
    v28 = AssetInfo.author.getter(v30, v31);
    v29 = v32;
  }
  sub_BC48((uint64_t)v65, (uint64_t)v17);
  if (v27(v17, 1, v4) == 1)
  {
    v77 = 0;
    v75 = 0u;
    v76 = 0u;
  }
  else
  {
    v56 = v28;
    v52 = *(void (**)(char *, char *, uint64_t))(v26 + 32);
    v53 = v26;
    v33 = v9;
    v54 = v9;
    v52(v9, v17, v4);
    v34 = v59;
    (*(void (**)(char *, char *, uint64_t))(v26 + 16))(v59, v33, v4);
    v35 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v26 + 56);
    v36 = (uint64_t)v57;
    v35(v57, 1, 1, v4);
    v37 = (uint64_t)v58;
    v35(v58, 1, 1, v4);
    v39 = v60;
    v38 = (uint64_t)v61;
    v40 = *(int *)(v60 + 20);
    v55 = v29;
    v41 = (uint64_t)&v61[v40];
    v35(&v61[v40], 1, 1, v4);
    v42 = v38 + *(int *)(v39 + 24);
    v35((char *)v42, 1, 1, v4);
    v52((char *)v38, v34, v4);
    sub_B414(v41, &qword_25E0C8);
    v43 = v41;
    v29 = v55;
    sub_C3BC(v36, v43);
    v28 = v56;
    sub_B414(v42, &qword_25E0C8);
    sub_C3BC(v37, v42);
    *((_QWORD *)&v76 + 1) = type metadata accessor for ListItemMetadataEyebrow(0);
    v77 = sub_6FD0(&qword_25E118, type metadata accessor for ListItemMetadataEyebrow, (uint64_t)&protocol conformance descriptor for ListItemMetadataEyebrow);
    v44 = sub_C404(&v75);
    sub_C440(v38, (uint64_t)v44);
    (*(void (**)(char *, uint64_t))(v53 + 8))(v54, v4);
  }
  v74[3] = &type metadata for ListItemMetadataTitleWithSubtitle;
  v74[4] = sub_BC90();
  v45 = swift_allocObject(&unk_24B2B8, 49, 7);
  v74[0] = v45;
  v46 = v62;
  *(_QWORD *)(v45 + 16) = v63;
  *(_QWORD *)(v45 + 24) = v46;
  *(_QWORD *)(v45 + 32) = v28;
  *(_QWORD *)(v45 + 40) = v29;
  *(_BYTE *)(v45 + 48) = 0;
  sub_BD00((uint64_t)a1, (uint64_t)v66);
  v73[3] = sub_5440(&qword_25E0D8);
  v73[4] = sub_BD44();
  v47 = swift_allocObject(&unk_24B2E0, 160, 7);
  v73[0] = v47;
  KeyPath = swift_getKeyPath(&unk_1E0D10);
  v49 = swift_getKeyPath(&unk_1E0D38);
  v50 = swift_getKeyPath(&unk_1E0D60);
  *(_QWORD *)(v47 + 16) = KeyPath;
  *(_OWORD *)(v47 + 24) = 0u;
  *(_OWORD *)(v47 + 40) = 0u;
  *(_OWORD *)(v47 + 56) = 0u;
  *(_OWORD *)(v47 + 67) = 0u;
  *(_QWORD *)(v47 + 88) = v49;
  *(_BYTE *)(v47 + 96) = 0;
  *(_QWORD *)(v47 + 104) = v50;
  *(_WORD *)(v47 + 112) = 0;
  sub_AC68(v66, v47 + 120);
  v72 = 0;
  memset(v71, 0, sizeof(v71));
  v70 = 0;
  memset(v69, 0, sizeof(v69));
  v68 = 0;
  memset(v67, 0, sizeof(v67));
  memset(v66, 0, 280);
  sub_C378((uint64_t)&v75, (uint64_t)v66, &qword_25E0E8);
  sub_C378((uint64_t)v74, (uint64_t)&v66[2] + 8, &qword_25E0F0);
  sub_C378((uint64_t)v73, (uint64_t)&v66[5], &qword_25E0F8);
  sub_C378((uint64_t)v71, (uint64_t)&v66[10], &qword_25E100);
  sub_C378((uint64_t)v69, (uint64_t)&v66[12] + 8, &qword_25E108);
  sub_C378((uint64_t)v67, (uint64_t)&v66[15], &qword_25E110);
  memcpy(v64, v66, 0x118uLL);
  return sub_B414((uint64_t)v65, &qword_25E0C8);
}

uint64_t sub_B9CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char v19;
  void (*v20)(char *, uint64_t);
  uint64_t v21;
  uint64_t v22;
  char v23;
  void (*v24)(char *, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v39 = a3;
  v6 = type metadata accessor for ContentKind(0);
  v35 = *(_QWORD *)(v6 - 8);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v34 - v10;
  v12 = type metadata accessor for SeriesOrdering(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v18 = (char *)&v34 - v17;
  v36 = a1;
  v37 = a2;
  v38 = v3;
  AssetInfo.seriesOrdering.getter(a1, a2);
  (*(void (**)(char *, _QWORD, uint64_t))(v13 + 104))(v16, enum case for SeriesOrdering.orderedSeries(_:), v12);
  v19 = static SeriesOrdering.== infix(_:_:)(v18, v16);
  v20 = *(void (**)(char *, uint64_t))(v13 + 8);
  v20(v16, v12);
  v20(v18, v12);
  if ((v19 & 1) == 0)
    goto LABEL_5;
  dispatch thunk of AssetInfo.contentKind.getter(v36, v37);
  v21 = v35;
  (*(void (**)(char *, _QWORD, uint64_t))(v35 + 104))(v9, enum case for ContentKind.manga(_:), v6);
  v22 = sub_6FD0(&qword_25E130, (uint64_t (*)(uint64_t))&type metadata accessor for ContentKind, (uint64_t)&protocol conformance descriptor for ContentKind);
  v23 = dispatch thunk of static Equatable.== infix(_:_:)(v11, v9, v6, v22);
  v24 = *(void (**)(char *, uint64_t))(v21 + 8);
  v24(v9, v6);
  v24(v11, v6);
  if ((v23 & 1) != 0)
    goto LABEL_5;
  v25 = AssetInfo.sequenceLabel.getter(v36, v37);
  if (v26)
  {
    v27 = v25;
    v28 = v26;
    v29 = swift_allocObject(&unk_24B308, 32, 7);
    *(_QWORD *)(v29 + 16) = v27;
    *(_QWORD *)(v29 + 24) = v28;
    v30 = v39;
    static LocalizerRequest.custom(_:)(sub_C574, v29);
    swift_release(v29);
    v31 = type metadata accessor for LocalizerRequest(0);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v30, 0, 1, v31);
  }
  else
  {
LABEL_5:
    v33 = type metadata accessor for LocalizerRequest(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56))(v39, 1, 1, v33);
  }
}

uint64_t sub_BC48(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_5440(&qword_25E0C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_BC90()
{
  unint64_t result;

  result = qword_25E0D0;
  if (!qword_25E0D0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ListItemMetadataTitleWithSubtitle, &type metadata for ListItemMetadataTitleWithSubtitle);
    atomic_store(result, (unint64_t *)&qword_25E0D0);
  }
  return result;
}

uint64_t sub_BCD4()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 49, 7);
}

uint64_t sub_BD00(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

unint64_t sub_BD44()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25E0E0;
  if (!qword_25E0E0)
  {
    v1 = sub_7EF8(&qword_25E0D8);
    result = swift_getWitnessTable(&protocol conformance descriptor for ListItemMetadataFormatAndDescriptorBase<A>, v1);
    atomic_store(result, (unint64_t *)&qword_25E0E0);
  }
  return result;
}

uint64_t sub_BD90()
{
  uint64_t v0;

  sub_BDF8(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_WORD *)(v0 + 80), *(_BYTE *)(v0 + 82));
  sub_BE0C(*(_QWORD *)(v0 + 88), *(_BYTE *)(v0 + 96));
  sub_BE0C(*(_QWORD *)(v0 + 104), *(_BYTE *)(v0 + 112));
  _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)(v0 + 120));
  return swift_deallocObject(v0, 160, 7);
}

uint64_t sub_BDF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int16 a9, char a10)
{
  if ((a10 & 1) != 0)
    return swift_bridgeObjectRelease(a2);
  else
    return swift_release(a1);
}

uint64_t sub_BE0C(uint64_t result, char a2)
{
  if ((a2 & 1) == 0)
    return swift_release(result);
  return result;
}

uint64_t static ListItemMetadata.seriesHeaderQuickActionButton(assetInfo:eyebrowText:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD v14[2];
  uint64_t v15;
  _OWORD v16[2];
  uint64_t v17;
  _OWORD v18[2];
  uint64_t v19;
  _OWORD v20[2];
  uint64_t v21;
  _QWORD v22[5];
  _QWORD v23[5];

  v23[3] = type metadata accessor for ListItemMetadataEyebrow(0);
  v23[4] = sub_6FD0(&qword_25E118, type metadata accessor for ListItemMetadataEyebrow, (uint64_t)&protocol conformance descriptor for ListItemMetadataEyebrow);
  v6 = sub_C404(v23);
  sub_C484(a2, (uint64_t)v6);
  v7 = a1[3];
  v8 = a1[4];
  sub_5480(a1, v7);
  v9 = AssetInfo.title.getter(v7, v8);
  v11 = v10;
  v22[3] = &type metadata for ListItemMetadataTitleWithSubtitle;
  v22[4] = sub_BC90();
  v12 = swift_allocObject(&unk_24B2B8, 49, 7);
  v22[0] = v12;
  *(_QWORD *)(v12 + 16) = v9;
  *(_QWORD *)(v12 + 24) = v11;
  *(_QWORD *)(v12 + 32) = 0;
  *(_QWORD *)(v12 + 40) = 0;
  *(_BYTE *)(v12 + 48) = 0;
  v21 = 0;
  memset(v20, 0, sizeof(v20));
  v19 = 0;
  memset(v18, 0, sizeof(v18));
  v17 = 0;
  memset(v16, 0, sizeof(v16));
  v15 = 0;
  memset(v14, 0, sizeof(v14));
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_OWORD *)(a3 + 112) = 0u;
  *(_OWORD *)(a3 + 128) = 0u;
  *(_OWORD *)(a3 + 144) = 0u;
  *(_OWORD *)(a3 + 176) = 0u;
  *(_OWORD *)(a3 + 192) = 0u;
  *(_OWORD *)(a3 + 208) = 0u;
  *(_OWORD *)(a3 + 224) = 0u;
  *(_OWORD *)(a3 + 256) = 0u;
  *(_QWORD *)(a3 + 272) = 0;
  *(_OWORD *)(a3 + 240) = 0u;
  *(_OWORD *)(a3 + 160) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  sub_C378((uint64_t)v23, a3, &qword_25E0E8);
  sub_C378((uint64_t)v22, a3 + 40, &qword_25E0F0);
  sub_C378((uint64_t)v20, a3 + 80, &qword_25E0F8);
  sub_C378((uint64_t)v18, a3 + 160, &qword_25E100);
  sub_C378((uint64_t)v16, a3 + 200, &qword_25E108);
  return sub_C378((uint64_t)v14, a3 + 240, &qword_25E110);
}

uint64_t sub_BFE0(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD v15[2];

  v6 = sub_5440(&qword_25E138);
  __chkstk_darwin(v6);
  v8 = (char *)v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15[0] = a2;
  v15[1] = a3;
  v9 = a1[3];
  v10 = a1[4];
  sub_5480(a1, v9);
  dispatch thunk of Localizer.locale.getter(v9, v10);
  v11 = type metadata accessor for Locale(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v8, 0, 1, v11);
  v12 = sub_C57C();
  v13 = StringProtocol.uppercased(with:)(v8, &type metadata for String, v12);
  sub_B414((uint64_t)v8, &qword_25E138);
  return v13;
}

double sub_C0DC@<D0>(uint64_t a1@<X8>)
{
  __int16 v2;
  __int128 v3;
  double result;
  __int128 v5;
  _OWORD v6[2];
  __int128 v7;
  __int128 v8;
  __int16 v9;

  EnvironmentValues.libraryAssetState.getter((uint64_t)v6);
  v2 = v9;
  v3 = v6[1];
  *(_OWORD *)a1 = v6[0];
  *(_OWORD *)(a1 + 16) = v3;
  result = *(double *)&v7;
  v5 = v8;
  *(_OWORD *)(a1 + 32) = v7;
  *(_OWORD *)(a1 + 48) = v5;
  *(_WORD *)(a1 + 64) = v2;
  return result;
}

_QWORD *sub_C128@<X0>(_BYTE *a1@<X8>)
{
  unint64_t v2;
  _QWORD *result;
  uint64_t v4;

  v2 = sub_C4C8();
  result = EnvironmentValues.subscript.getter(&v4, &type metadata for PageIntentDispatchStateKey, &type metadata for PageIntentDispatchStateKey, v2);
  *a1 = v4;
  return result;
}

uint64_t sub_C174(char *a1)
{
  unint64_t v1;
  char v3;

  v3 = *a1;
  v1 = sub_C4C8();
  return EnvironmentValues.subscript.setter(&v3, &type metadata for PageIntentDispatchStateKey, &type metadata for PageIntentDispatchStateKey, v1);
}

_QWORD *sub_C1BC@<X0>(_BYTE *a1@<X8>)
{
  unint64_t v2;
  _QWORD *result;
  uint64_t v4;

  v2 = sub_C50C();
  result = EnvironmentValues.subscript.getter(&v4, &type metadata for IsReachableKey, &type metadata for IsReachableKey, v2);
  *a1 = v4;
  return result;
}

_QWORD *sub_C208@<X0>(_BYTE *a1@<X8>)
{
  unint64_t v2;
  _QWORD *result;
  uint64_t v4;

  v2 = sub_C50C();
  result = EnvironmentValues.subscript.getter(&v4, &type metadata for IsReachableKey, &type metadata for IsReachableKey, v2);
  *a1 = v4;
  return result;
}

uint64_t sub_C254(char *a1)
{
  unint64_t v1;
  char v3;

  v3 = *a1;
  v1 = sub_C50C();
  return EnvironmentValues.subscript.setter(&v3, &type metadata for IsReachableKey, &type metadata for IsReachableKey, v1);
}

uint64_t sub_C29C(char *a1)
{
  unint64_t v1;
  char v3;

  v3 = *a1;
  v1 = sub_C50C();
  return EnvironmentValues.subscript.setter(&v3, &type metadata for IsReachableKey, &type metadata for IsReachableKey, v1);
}

_QWORD *sub_C2E4@<X0>(_BYTE *a1@<X8>)
{
  unint64_t v2;
  _QWORD *result;
  uint64_t v4;

  v2 = sub_C4C8();
  result = EnvironmentValues.subscript.getter(&v4, &type metadata for PageIntentDispatchStateKey, &type metadata for PageIntentDispatchStateKey, v2);
  *a1 = v4;
  return result;
}

uint64_t sub_C330(char *a1)
{
  unint64_t v1;
  char v3;

  v3 = *a1;
  v1 = sub_C4C8();
  return EnvironmentValues.subscript.setter(&v3, &type metadata for PageIntentDispatchStateKey, &type metadata for PageIntentDispatchStateKey, v1);
}

uint64_t sub_C378(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_5440(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t sub_C3BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_5440(&qword_25E0C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

_QWORD *sub_C404(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (_QWORD *)v2;
  }
  return v1;
}

uint64_t sub_C440(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ShrinkableText(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_C484(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ShrinkableText(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_C4C8()
{
  unint64_t result;

  result = qword_25E120;
  if (!qword_25E120)
  {
    result = swift_getWitnessTable(&unk_1F147C, &type metadata for PageIntentDispatchStateKey);
    atomic_store(result, (unint64_t *)&qword_25E120);
  }
  return result;
}

unint64_t sub_C50C()
{
  unint64_t result;

  result = qword_25E128;
  if (!qword_25E128)
  {
    result = swift_getWitnessTable(&unk_1F8BF8, &type metadata for IsReachableKey);
    atomic_store(result, (unint64_t *)&qword_25E128);
  }
  return result;
}

uint64_t sub_C550()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_C574(_QWORD *a1)
{
  uint64_t v1;

  return sub_BFE0(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

unint64_t sub_C57C()
{
  unint64_t result;

  result = qword_25E140;
  if (!qword_25E140)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_25E140);
  }
  return result;
}

uint64_t sub_C5C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(a3, a1);
}

double sub_C5D8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  double v5;

  v2 = v1 + *(int *)(a1 + 44);
  v3 = *(_QWORD *)v2;
  v4 = *(_BYTE *)(v2 + 8);
  sub_F9E4(*(_QWORD *)v2, v4);
  v5 = sub_30784(v3, v4);
  sub_BE0C(v3, v4);
  return v5;
}

double sub_C634()
{
  uint64_t v0;
  double v2;

  v0 = sub_5440(&qword_25E378);
  State.wrappedValue.getter(&v2, v0);
  return v2;
}

uint64_t sub_C688(uint64_t a1, double a2, double a3)
{
  uint64_t v3;
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[2];
  __int128 v9;
  uint64_t v10;

  v4 = (__int128 *)(v3 + *(int *)(a1 + 48));
  v5 = *((_QWORD *)v4 + 2);
  v9 = *v4;
  v10 = v5;
  *(double *)v8 = a2;
  *(double *)&v8[1] = a3;
  v6 = sub_5440(&qword_25E378);
  return State.wrappedValue.setter(v8, v6);
}

uint64_t sub_C6E0()
{
  uint64_t v0;
  uint64_t v2;

  v0 = sub_5440(&qword_25E370);
  State.wrappedValue.getter(&v2, v0);
  return v2;
}

uint64_t sub_C728(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  __int128 v6;

  v6 = *(_OWORD *)(v2 + *(int *)(a2 + 52));
  v5 = a1;
  v3 = sub_5440(&qword_25E370);
  return State.wrappedValue.setter(&v5, v3);
}

uint64_t sub_C774(double a1, double a2)
{
  uint64_t v2;
  _QWORD v4[2];
  _QWORD v5[3];

  *(double *)v4 = a1;
  *(double *)&v4[1] = a2;
  type metadata accessor for CGSize(0);
  State.init(wrappedValue:)(v5, v4, v2);
  return v5[2];
}

double sub_C7B0()
{
  uint64_t v0;
  double v2;

  v0 = sub_5440(&qword_25E378);
  State.wrappedValue.getter(&v2, v0);
  return v2;
}

uint64_t sub_C804(uint64_t a1, double a2, double a3)
{
  uint64_t v3;
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[2];
  __int128 v9;
  uint64_t v10;

  v4 = (__int128 *)(v3 + *(int *)(a1 + 56));
  v5 = *((_QWORD *)v4 + 2);
  v9 = *v4;
  v10 = v5;
  *(double *)v8 = a2;
  *(double *)&v8[1] = a3;
  v6 = sub_5440(&qword_25E378);
  return State.wrappedValue.setter(v8, v6);
}

uint64_t BackdropView.init(resource:placeholder:useSnapshot:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  int *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  __int128 v25;

  v11 = (int *)type metadata accessor for BackdropView(0, a4, a5, a4);
  v12 = a6 + v11[11];
  *(_QWORD *)v12 = swift_getKeyPath(&unk_1E0DC0);
  *(_BYTE *)(v12 + 8) = 0;
  v13 = (_QWORD *)(a6 + v11[12]);
  v14 = sub_C774(0.0, 0.0);
  *v13 = v15;
  v13[1] = v16;
  v13[2] = v14;
  v17 = v11[13];
  v24 = 0;
  v18 = sub_5440(&qword_25E158);
  State.init(wrappedValue:)(&v25, &v24, v18);
  *(_OWORD *)(a6 + v17) = v25;
  v19 = (_QWORD *)(a6 + v11[14]);
  v20 = sub_C774(0.0, 0.0);
  *v19 = v21;
  v19[1] = v22;
  v19[2] = v20;
  *(_QWORD *)(a6 + v11[9]) = a1;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 32))(a6, a2, a4);
  *(_BYTE *)(a6 + v11[10]) = a3;
  return result;
}

uint64_t type metadata accessor for BackdropView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10E40(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for BackdropView);
}

uint64_t BackdropView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t WitnessTable;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t OpaqueTypeMetadata2;
  uint64_t v25;
  uint64_t v26;
  uint64_t OpaqueTypeConformance2;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  _QWORD v42[11];
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;

  v5 = *(_QWORD *)(a1 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = (char *)v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(v2 + *(int *)(__chkstk_darwin(a1) + 36));
  (*(void (**)(char *))(v5 + 16))(v7);
  v9 = *(unsigned __int8 *)(v5 + 80);
  v10 = (v9 + 32) & ~v9;
  v11 = swift_allocObject(&unk_24B330, v10 + v6, v9 | 7);
  v12 = *(_QWORD *)(a1 + 16);
  v13 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(v11 + 16) = v12;
  *(_QWORD *)(v11 + 24) = v13;
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v11 + v10, v7, a1);
  v14 = type metadata accessor for _BackgroundStyleModifier(255, v12, v13);
  v15 = type metadata accessor for ModifiedContent(255, &type metadata for Image, v14);
  swift_unknownObjectRetain(v8);
  v16 = sub_7EF8(&qword_25DF68);
  v17 = type metadata accessor for ModifiedContent(255, v15, v16);
  v18 = sub_7EF8(&qword_25E158);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for _BackgroundStyleModifier<A>, v14);
  v42[9] = &protocol witness table for Image;
  v42[10] = WitnessTable;
  v20 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v15);
  v21 = sub_7FD8(&qword_25DF60, &qword_25DF68, (uint64_t)&protocol conformance descriptor for _GeometryActionModifier<A>);
  v42[7] = v20;
  v42[8] = v21;
  v22 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v17);
  v23 = sub_F720();
  v48 = v17;
  v49 = v18;
  v50 = v22;
  v51 = v23;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(255, &v48, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 0);
  v25 = type metadata accessor for BackdropView(255);
  v26 = type metadata accessor for _ConditionalContent(0, OpaqueTypeMetadata2, v25);
  v48 = v17;
  v49 = v18;
  v50 = v22;
  v51 = v23;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v48, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
  v28 = sub_6FD0(qword_25E178, (uint64_t (*)(uint64_t))&type metadata accessor for BackdropView, (uint64_t)&protocol conformance descriptor for BackdropView);
  v42[5] = OpaqueTypeConformance2;
  v42[6] = v28;
  v29 = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v26);
  AsyncResourceImage.init(resource:content:)(v8, (uint64_t)sub_F6B8, v11, &v43);
  v30 = v44;
  v31 = v45;
  v32 = v46;
  v33 = v47;
  v42[0] = v43;
  v42[1] = v44;
  v42[2] = v45;
  v42[3] = v46;
  v42[4] = v47;
  v35 = type metadata accessor for AsyncResourceImage(0, v26, v29, v34);
  swift_getWitnessTable(&protocol conformance descriptor for AsyncResourceImage<A>, v35);
  v36 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v35 - 8) + 16);
  v36(&v48, v42, v35);
  swift_release(v32);
  swift_release(v30);
  swift_unknownObjectRelease(v31);
  swift_release(v33);
  v37 = v49;
  v38 = v50;
  v39 = v51;
  v40 = v52;
  v43 = v48;
  v44 = v49;
  v45 = v50;
  v46 = v51;
  v47 = v52;
  v36(a2, &v43, v35);
  swift_release(v39);
  swift_release(v37);
  swift_unknownObjectRelease(v38);
  return swift_release(v40);
}

uint64_t sub_CC90@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t WitnessTable;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t OpaqueTypeMetadata2;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  id v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  id v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  void (*v71)(char *, char *, uint64_t);
  char *v72;
  uint64_t v73;
  void (*v74)(char *, uint64_t);
  uint64_t v75;
  uint64_t v76;
  id v77;
  id v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  id v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  char *v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  char *v99;
  unint64_t v100;
  uint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  char *v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  id OpaqueTypeConformance2;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  void *v125;
  uint64_t v126;

  OpaqueTypeConformance2 = a1;
  v116 = a5;
  v8 = type metadata accessor for BackdropView(0);
  v96 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v10 = (char *)&v86 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for BackdropView(0, a3, a4, v11);
  v104 = *(_QWORD *)(v12 - 8);
  v100 = *(_QWORD *)(v104 + 64);
  __chkstk_darwin(v12);
  v110 = (char *)&v86 - v13;
  v97 = (_QWORD *)type metadata accessor for Image.ResizingMode(0);
  v95 = *(v97 - 1);
  __chkstk_darwin(v97);
  v15 = (char *)&v86 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v113 = a3;
  v114 = a4;
  v16 = type metadata accessor for _BackgroundStyleModifier(255, a3, a4);
  v17 = type metadata accessor for ModifiedContent(0, &type metadata for Image, v16);
  v105 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v102 = (char *)&v86 - v18;
  v19 = sub_7EF8(&qword_25DF68);
  v20 = type metadata accessor for ModifiedContent(0, v17, v19);
  v109 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20);
  v108 = (char *)&v86 - v21;
  v22 = sub_7EF8(&qword_25E158);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for _BackgroundStyleModifier<A>, v16);
  v125 = &protocol witness table for Image;
  v126 = WitnessTable;
  v106 = v17;
  v24 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v17);
  v25 = sub_7FD8(&qword_25DF60, &qword_25DF68, (uint64_t)&protocol conformance descriptor for _GeometryActionModifier<A>);
  v98 = v24;
  v123 = v24;
  v124 = v25;
  v26 = a2;
  v27 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v20);
  v28 = sub_F720();
  v119 = v20;
  v120 = v22;
  v121 = v27;
  v122 = v28;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(0, &v119, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 0);
  v101 = *(_QWORD *)(OpaqueTypeMetadata2 - 8);
  v30 = __chkstk_darwin(OpaqueTypeMetadata2);
  v107 = (char *)&v86 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = __chkstk_darwin(v30);
  v99 = (char *)&v86 - v33;
  __chkstk_darwin(v32);
  v103 = (char *)&v86 - v34;
  v35 = type metadata accessor for _ConditionalContent(0, OpaqueTypeMetadata2, v8);
  v111 = *(_QWORD *)(v35 - 8);
  v112 = v35;
  __chkstk_darwin(v35);
  v38 = (char *)&v86 - v36;
  if (*(_BYTE *)(v26 + *(int *)(v37 + 40)) == 1)
  {
    v90 = (char *)&v86 - v36;
    v91 = v28;
    v93 = v22;
    v96 = v20;
    v39 = v37;
    v40 = (id)sub_C6E0();
    v94 = v8;
    v92 = v27;
    v89 = OpaqueTypeMetadata2;
    if (!v40)
      v40 = objc_msgSend(objc_allocWithZone((Class)UIImage), "init");
    v41 = Image.init(uiImage:)(v40);
    v42 = v95;
    v43 = v97;
    (*(void (**)(char *, _QWORD, _QWORD *))(v95 + 104))(v15, enum case for Image.ResizingMode.stretch(_:), v97);
    v44 = Image.resizable(capInsets:resizingMode:)(v15, v41, 0.0, 0.0, 0.0, 0.0);
    swift_release(v41);
    v45 = (*(uint64_t (**)(char *, _QWORD *))(v42 + 8))(v15, v43);
    v119 = v44;
    v46 = static Edge.Set.all.getter(v45);
    v47 = v102;
    v48 = v113;
    v49 = v114;
    View.background<A>(_:ignoresSafeAreaEdges:)(v26, v46, &type metadata for Image);
    swift_release(v44);
    v50 = v104;
    v97 = *(_QWORD **)(v104 + 16);
    v51 = v110;
    ((void (*)(char *, uint64_t, uint64_t))v97)(v110, v26, v39);
    v52 = *(unsigned __int8 *)(v50 + 80);
    v53 = (v52 + 32) & ~v52;
    v54 = v52 | 7;
    v95 = v52 | 7;
    v55 = (v100 + v53 + 7) & 0xFFFFFFFFFFFFFFF8;
    v100 = v55 + 8;
    v56 = v55;
    v88 = v55;
    v57 = swift_allocObject(&unk_24B3D8, v55 + 8, v54);
    v87 = v26;
    v58 = v57;
    *(_QWORD *)(v57 + 16) = v48;
    *(_QWORD *)(v57 + 24) = v49;
    v104 = *(_QWORD *)(v50 + 32);
    ((void (*)(uint64_t, char *, uint64_t))v104)(v57 + v53, v51, v39);
    v59 = OpaqueTypeConformance2;
    *(_QWORD *)(v58 + v56) = OpaqueTypeConformance2;
    type metadata accessor for CGSize(0);
    v61 = v60;
    v62 = sub_6FD0(&qword_25E308, (uint64_t (*)(uint64_t))type metadata accessor for CGSize, (uint64_t)&protocol conformance descriptor for CGSize);
    v86 = v59;
    v63 = v108;
    v64 = v106;
    View.onGeometryChange<A>(of:do:)(sub_77E8, 0, sub_10494, v58, v106, v61, v98, v62);
    swift_release(v58);
    (*(void (**)(char *, uint64_t))(v105 + 8))(v47, v64);
    v119 = (uint64_t)v59;
    ((void (*)(char *, uint64_t, uint64_t))v97)(v51, v87, v39);
    v65 = swift_allocObject(&unk_24B400, v100, v95);
    v66 = v114;
    *(_QWORD *)(v65 + 16) = v113;
    *(_QWORD *)(v65 + 24) = v66;
    ((void (*)(uint64_t, char *, uint64_t))v104)(v65 + v53, v51, v39);
    *(_QWORD *)(v65 + v88) = v59;
    v67 = v86;
    v68 = v99;
    v69 = v96;
    v22 = v93;
    v27 = v92;
    v28 = v91;
    View.onChange<A>(of:initial:_:)(&v119, 0, sub_105F4, v65, v96, v93, v92, v91);
    swift_release(v65);
    (*(void (**)(char *, uint64_t))(v109 + 8))(v63, v69);
    v119 = v69;
    v120 = v22;
    v121 = v27;
    v122 = v28;
    OpaqueTypeConformance2 = (id)swift_getOpaqueTypeConformance2(&v119, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
    v70 = v101;
    v71 = *(void (**)(char *, char *, uint64_t))(v101 + 16);
    v72 = v103;
    v73 = v89;
    v71(v103, v68, v89);
    v74 = *(void (**)(char *, uint64_t))(v70 + 8);
    v74(v68, v73);
    v75 = (uint64_t)v107;
    v71(v107, v72, v73);
    v76 = sub_6FD0(qword_25E178, (uint64_t (*)(uint64_t))&type metadata accessor for BackdropView, (uint64_t)&protocol conformance descriptor for BackdropView);
    v38 = v90;
    sub_17C7C(v75, v73, v94, (uint64_t)OpaqueTypeConformance2, v76);
    v74((char *)v75, v73);
    v74(v72, v73);
  }
  else
  {
    v77 = OpaqueTypeConformance2;
    v78 = OpaqueTypeConformance2;
    BackdropView.init(image:useMask:)(v77, 0);
    v119 = v20;
    v120 = v22;
    v121 = v27;
    v122 = v28;
    v79 = swift_getOpaqueTypeConformance2(&v119, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
    v80 = sub_6FD0(qword_25E178, (uint64_t (*)(uint64_t))&type metadata accessor for BackdropView, (uint64_t)&protocol conformance descriptor for BackdropView);
    sub_17D40((uint64_t)v10, OpaqueTypeMetadata2, v8, v79, v80);
    (*(void (**)(char *, uint64_t))(v96 + 8))(v10, v8);
    v69 = v20;
  }
  v119 = v69;
  v120 = v22;
  v121 = v27;
  v122 = v28;
  v81 = swift_getOpaqueTypeConformance2(&v119, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
  v82 = sub_6FD0(qword_25E178, (uint64_t (*)(uint64_t))&type metadata accessor for BackdropView, (uint64_t)&protocol conformance descriptor for BackdropView);
  v117 = v81;
  v118 = v82;
  v83 = v112;
  swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v112);
  v84 = v111;
  (*(void (**)(uint64_t, char *, uint64_t))(v111 + 16))(v116, v38, v83);
  return (*(uint64_t (**)(char *, uint64_t))(v84 + 8))(v38, v83);
}

void sub_D51C(double *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  double v6;
  double v7;
  uint64_t v8;
  id v9;

  v6 = *a1;
  v7 = a1[1];
  v8 = type metadata accessor for BackdropView(0, a4, a5, a4);
  sub_C804(v8, v6, v7);
  if (a3)
  {
    v9 = a3;
    sub_D5B0(v9, v8, v6, v7);

  }
}

void sub_D5B0(void *a1, uint64_t a2, double a3, double a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  void *v26;
  void (*v27)(char *, uint64_t, uint64_t);
  double v28;
  void (*v29)(char *, uint64_t);
  double v30;
  double v31;
  double v32;
  _BOOL4 v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  double v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  NSObject *v55;
  os_log_type_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  double v61;
  double v62;
  double v63;
  char *v64;
  void (*v65)(char *, uint64_t);
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  char *v74;
  void (*v75)(char *, uint64_t, __n128);
  __n128 v76;
  char *v77;
  char *v78;
  void (*v79)(char *, uint64_t);
  char *v80;
  uint64_t v81;
  char *v82;

  v5 = v4;
  v10 = sub_5440(&qword_25E2E8);
  v11 = __chkstk_darwin(v10);
  v77 = (char *)&v77 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(a2 - 8);
  v14 = *(_QWORD *)(v13 + 64);
  v15 = __chkstk_darwin(v11);
  v80 = (char *)&v77 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v15);
  v78 = (char *)&v77 - v17;
  v18 = __chkstk_darwin(v16);
  v20 = (char *)&v77 - v19;
  v21 = __chkstk_darwin(v18);
  v23 = (char *)&v77 - v22;
  __chkstk_darwin(v21);
  v25 = (char *)&v77 - v24;
  v26 = (void *)sub_C6E0();

  v27 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  v27(v25, v5, a2);
  if (v26)
  {
    v28 = sub_C634();
    v29 = *(void (**)(char *, uint64_t))(v13 + 8);
    v29(v25, a2);
    v27(v23, v5, a2);
    if (v28 + v28 > a3)
    {
      v30 = sub_C634();
      v32 = v31;
      v79 = v29;
      ((void (*)(char *, uint64_t, double))v29)(v23, a2, v30);
      v33 = v32 + v32 <= a4;
      goto LABEL_6;
    }
  }
  else
  {
    v29 = *(void (**)(char *, uint64_t))(v13 + 8);
    v29(v25, a2);
    v27(v23, v5, a2);
  }
  v79 = v29;
  v29(v23, a2);
  v33 = 1;
LABEL_6:
  v34 = sub_5440(&qword_25E310);
  v35 = swift_allocObject(v34, 72, 7);
  *(_OWORD *)(v35 + 16) = xmmword_1E0B70;
  *(_QWORD *)(v35 + 56) = sub_10BBC(0, &qword_25E170, UIImage_ptr);
  *(_QWORD *)(v35 + 64) = sub_10658(&qword_25E318, (uint64_t)&protocol conformance descriptor for NSObject);
  *(_QWORD *)(v35 + 32) = a1;
  v36 = a1;
  v37 = String.init(format:_:)(28709, 0xE200000000000000, v35);
  v39 = v38;
  if (v33)
  {
    v80 = (char *)v37;
    v40 = sub_C5D8(a2);
    sub_C688(a2, a3, a4);
    v41 = type metadata accessor for TaskPriority(0);
    v42 = (uint64_t)v77;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 56))(v77, 1, 1, v41);
    v27(v20, v5, a2);
    v43 = *(unsigned __int8 *)(v13 + 80);
    v44 = (v43 + 80) & ~v43;
    v45 = (v14 + v44 + 7) & 0xFFFFFFFFFFFFFFF8;
    v46 = (v45 + 15) & 0xFFFFFFFFFFFFFFF8;
    v47 = swift_allocObject(&unk_24B428, v46 + 8, v43 | 7);
    *(_QWORD *)(v47 + 16) = 0;
    *(_QWORD *)(v47 + 24) = 0;
    *(_OWORD *)(v47 + 32) = *(_OWORD *)(a2 + 16);
    *(_QWORD *)(v47 + 48) = v80;
    *(_QWORD *)(v47 + 56) = v39;
    *(double *)(v47 + 64) = a3;
    *(double *)(v47 + 72) = a4;
    (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(v47 + v44, v20, a2);
    *(_QWORD *)(v47 + v45) = v36;
    *(double *)(v47 + v46) = v40;
    v48 = v36;
    v49 = sub_EA20(v42, (uint64_t)&unk_25E328, v47);
    swift_release(v49);
    sub_108F8(v42);
  }
  else
  {
    v50 = v37;
    if (qword_25DAE0 != -1)
      swift_once(&qword_25DAE0, sub_70E0);
    v51 = type metadata accessor for Logger(0);
    sub_7120(v51, (uint64_t)qword_25DE70);
    v52 = v78;
    v27(v78, v5, a2);
    v53 = v80;
    v27(v80, v5, a2);
    v54 = swift_bridgeObjectRetain(v39);
    v55 = Logger.logObject.getter(v54);
    v56 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v55, v56))
    {
      v57 = swift_slowAlloc(42, -1);
      v77 = (char *)swift_slowAlloc(128, -1);
      v82 = v77;
      *(_DWORD *)v57 = 136315906;
      swift_bridgeObjectRetain(v39);
      v81 = sub_14AC3C(v50, v39, (uint64_t *)&v82);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v81, &v82, v57 + 4, v57 + 12);
      swift_bridgeObjectRelease_n(v39, 3);
      *(_WORD *)(v57 + 12) = 2080;
      v58 = CGSize.description.getter(a3, a4);
      v60 = v59;
      v81 = sub_14AC3C(v58, v59, (uint64_t *)&v82);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v81, &v82, v57 + 14, v57 + 22);
      swift_bridgeObjectRelease(v60);
      *(_WORD *)(v57 + 22) = 2080;
      v61 = sub_C634();
      v63 = v62;
      v64 = v52;
      v65 = v79;
      v79(v64, a2);
      v66 = CGSize.description.getter(v61, v63);
      v68 = v67;
      v81 = sub_14AC3C(v66, v67, (uint64_t *)&v82);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v81, &v82, v57 + 24, v57 + 32);
      swift_bridgeObjectRelease(v68);
      *(_WORD *)(v57 + 32) = 2080;
      v69 = (void *)sub_C6E0();
      v81 = (uint64_t)v69;
      v70 = sub_5440(&qword_25E158);
      v71 = Optional.debugDescription.getter(v70);
      v73 = v72;

      v81 = sub_14AC3C(v71, v73, (uint64_t *)&v82);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v81, &v82, v57 + 34, v57 + 42);
      swift_bridgeObjectRelease(v73);
      v65(v53, a2);
      _os_log_impl(&dword_0, v55, v56, "Skipping backdrop generation for %s for view size=%s due to existing, size=%s, %s", (uint8_t *)v57, 0x2Au);
      v74 = v77;
      swift_arrayDestroy(v77, 4, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v74, -1, -1);
      swift_slowDealloc(v57, -1, -1);
    }
    else
    {
      v75 = (void (*)(char *, uint64_t, __n128))v79;
      v79(v52, a2);
      v76 = swift_bridgeObjectRelease_n(v39, 2);
      v75(v53, a2, v76);
    }

  }
}

void sub_DBF4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  double v6;
  double v7;
  double v10;
  double v11;
  id v12;

  v5 = type metadata accessor for BackdropView(0, a3, a4, a4);
  v6 = sub_C7B0();
  if ((v7 != 0.0 || v6 != 0.0) && a2 != 0)
  {
    v12 = a2;
    v10 = sub_C7B0();
    sub_D5B0(v12, v5, v10, v11);

  }
}

uint64_t sub_DC84(double a1, double a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v17;

  *(_QWORD *)(v11 + 120) = a11;
  *(_QWORD *)(v11 + 128) = v17;
  *(double *)(v11 + 112) = a3;
  *(_QWORD *)(v11 + 96) = a9;
  *(_QWORD *)(v11 + 104) = a10;
  *(double *)(v11 + 80) = a1;
  *(double *)(v11 + 88) = a2;
  *(_QWORD *)(v11 + 64) = a7;
  *(_QWORD *)(v11 + 72) = a8;
  v12 = type metadata accessor for BackdropView(0, a11, v17, a7);
  *(_QWORD *)(v11 + 136) = v12;
  v13 = *(_QWORD *)(v12 - 8);
  *(_QWORD *)(v11 + 144) = v13;
  v14 = *(_QWORD *)(v13 + 64);
  *(_QWORD *)(v11 + 152) = v14;
  v15 = (v14 + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v11 + 160) = swift_task_alloc(v15);
  *(_QWORD *)(v11 + 168) = swift_task_alloc(v15);
  return swift_task_switch(sub_DD10, 0, 0);
}

uint64_t sub_DD10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  _BOOL4 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  double v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  __n128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  objc_class *v46;
  char *v47;
  uint64_t v48;
  id v49;
  id v50;
  char *v51;
  char *v52;
  uint64_t (**v53)(void *, uint64_t, uint64_t, uint64_t);
  id v54;
  id v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v59;
  uint64_t v60;
  __int128 v61;
  os_log_type_t type;
  os_log_type_t typea[8];
  void (*v64)(uint64_t, uint64_t, uint64_t);
  void *v65;
  uint64_t v66;

  if (qword_25DAE0 != -1)
    swift_once(&qword_25DAE0, sub_70E0);
  v1 = *(_QWORD *)(v0 + 168);
  v2 = *(_QWORD *)(v0 + 136);
  v3 = *(_QWORD *)(v0 + 144);
  v4 = *(_QWORD *)(v0 + 96);
  v5 = *(_QWORD *)(v0 + 72);
  v6 = type metadata accessor for Logger(0);
  sub_7120(v6, (uint64_t)qword_25DE70);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v7(v1, v4, v2);
  v8 = swift_bridgeObjectRetain_n(v5, 2);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.info.getter();
  v11 = os_log_type_enabled(v9, v10);
  v12 = *(_QWORD *)(v0 + 168);
  v14 = *(_QWORD *)(v0 + 136);
  v13 = *(_QWORD *)(v0 + 144);
  if (v11)
  {
    type = v10;
    v15 = *(_QWORD *)(v0 + 64);
    v17 = *(double *)(v0 + 80);
    v16 = *(double *)(v0 + 88);
    v18 = *(_QWORD *)(v0 + 72);
    v64 = v7;
    v19 = swift_slowAlloc(32, -1);
    v60 = swift_slowAlloc(96, -1);
    v66 = v60;
    *(_DWORD *)v19 = 136315650;
    swift_bridgeObjectRetain(v18);
    *(_QWORD *)(v0 + 32) = sub_14AC3C(v15, v18, &v66);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v19 + 4, v19 + 12);
    swift_bridgeObjectRelease_n(v18, 3);
    *(_WORD *)(v19 + 12) = 2080;
    v20 = CGSize.description.getter(v17, v16);
    v22 = v21;
    *(_QWORD *)(v0 + 40) = sub_14AC3C(v20, v21, &v66);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v19 + 14, v19 + 22);
    swift_bridgeObjectRelease(v22);
    *(_WORD *)(v19 + 22) = 2080;
    v59 = v14;
    v23 = (void *)sub_C6E0();
    *(_QWORD *)(v0 + 48) = v23;
    v24 = sub_5440(&qword_25E158);
    v25 = Optional.debugDescription.getter(v24);
    v27 = v26;

    *(_QWORD *)(v0 + 56) = sub_14AC3C(v25, v27, &v66);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64, v19 + 24, v19 + 32);
    swift_bridgeObjectRelease(v27);
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
    _os_log_impl(&dword_0, v9, type, "Generating backdrop for %s for view size=%s, %s", (uint8_t *)v19, 0x20u);
    swift_arrayDestroy(v60, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v60, -1, -1);
    v28 = v19;
    v7 = v64;
    swift_slowDealloc(v28, -1, -1);
  }
  else
  {
    v29 = swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 72), 2);
    (*(void (**)(uint64_t, uint64_t, __n128))(v13 + 8))(v12, v14, v29);
  }

  v31 = *(_QWORD *)(v0 + 152);
  v30 = *(_QWORD *)(v0 + 160);
  v32 = *(_QWORD *)(v0 + 136);
  v33 = *(_QWORD *)(v0 + 144);
  v34 = *(_QWORD *)(v0 + 112);
  v36 = *(_QWORD *)(v0 + 80);
  v35 = *(_QWORD *)(v0 + 88);
  v37 = *(_QWORD *)(v0 + 72);
  *(_QWORD *)typea = *(_QWORD *)(v0 + 64);
  v65 = *(void **)(v0 + 104);
  v61 = *(_OWORD *)(v0 + 120);
  v7(v30, *(_QWORD *)(v0 + 96), v32);
  v38 = *(unsigned __int8 *)(v33 + 80);
  v39 = (v38 + 32) & ~v38;
  v40 = (v31 + v39 + 7) & 0xFFFFFFFFFFFFFFF8;
  v41 = (v40 + 23) & 0xFFFFFFFFFFFFFFF8;
  v42 = (v41 + 23) & 0xFFFFFFFFFFFFFFF8;
  v43 = swift_allocObject(&unk_24B478, v42 + 8, v38 | 7);
  *(_OWORD *)(v43 + 16) = v61;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v33 + 32))(v43 + v39, v30, v32);
  v44 = (_QWORD *)(v43 + v40);
  *v44 = *(_QWORD *)typea;
  v44[1] = v37;
  v45 = (_QWORD *)(v43 + v41);
  *v45 = v36;
  v45[1] = v35;
  *(_QWORD *)(v43 + v42) = v65;
  v46 = (objc_class *)type metadata accessor for MediaBackdropSnapshotRendererOperation();
  v47 = (char *)objc_allocWithZone(v46);
  v48 = OBJC_IVAR____TtC7BooksUI38MediaBackdropSnapshotRendererOperation_semaphore;
  v49 = v65;
  swift_bridgeObjectRetain(v37);
  v50 = v49;
  swift_retain(v43);
  v51 = v47;
  *(_QWORD *)&v47[v48] = dispatch_semaphore_create(0);
  *(_QWORD *)&v51[OBJC_IVAR____TtC7BooksUI38MediaBackdropSnapshotRendererOperation_content] = v50;
  v52 = &v51[OBJC_IVAR____TtC7BooksUI38MediaBackdropSnapshotRendererOperation_size];
  *(_QWORD *)v52 = v36;
  *((_QWORD *)v52 + 1) = v35;
  *(_QWORD *)&v51[OBJC_IVAR____TtC7BooksUI38MediaBackdropSnapshotRendererOperation_contentScale] = v34;
  v53 = (uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))&v51[OBJC_IVAR____TtC7BooksUI38MediaBackdropSnapshotRendererOperation_completion];
  *v53 = sub_10B20;
  v53[1] = (uint64_t (*)(void *, uint64_t, uint64_t, uint64_t))v43;
  v54 = v50;
  swift_retain(v43);

  *(_QWORD *)(v0 + 16) = v51;
  *(_QWORD *)(v0 + 24) = v46;
  v55 = objc_msgSendSuper2((objc_super *)(v0 + 16), "init");
  swift_release(v43);

  if (qword_25DB20 != -1)
    swift_once(&qword_25DB20, sub_EDA0);
  v57 = *(_QWORD *)(v0 + 160);
  v56 = *(_QWORD *)(v0 + 168);
  objc_msgSend((id)qword_25E150, "addOperation:", v55, v59);

  swift_release(v43);
  swift_task_dealloc(v56);
  swift_task_dealloc(v57);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_E1D4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, double a9, double a10)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  double *v40;
  uint64_t v41;
  void *v43;
  uint64_t v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v48 = a7;
  v49 = a8;
  v46 = a5;
  v50 = a4;
  v43 = a1;
  v44 = a2;
  v17 = type metadata accessor for BackdropView(0, a7, a8, a4);
  v18 = *(_QWORD *)(v17 - 8);
  v47 = v17;
  v19 = *(_QWORD *)(v18 + 64);
  __chkstk_darwin(v17);
  v21 = (char *)&v43 - v20;
  v22 = sub_5440(&qword_25E2E8);
  __chkstk_darwin(v22);
  v24 = (char *)&v43 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v24, 1, 1, v25);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v21, a3, v17);
  type metadata accessor for MainActor(0);
  v26 = a1;
  swift_bridgeObjectRetain(a5);
  v45 = a6;
  v27 = swift_errorRetain(a2);
  v28 = static MainActor.shared.getter(v27);
  v29 = *(unsigned __int8 *)(v18 + 80);
  v30 = (v29 + 56) & ~v29;
  v31 = (v19 + v30 + 7) & 0xFFFFFFFFFFFFFFF8;
  v32 = (v31 + 23) & 0xFFFFFFFFFFFFFFF8;
  v33 = (v32 + 23) & 0xFFFFFFFFFFFFFFF8;
  v34 = (v33 + 15) & 0xFFFFFFFFFFFFFFF8;
  v35 = (char *)swift_allocObject(&unk_24B4A0, v34 + 8, v29 | 7);
  *((_QWORD *)v35 + 2) = v28;
  *((_QWORD *)v35 + 3) = &protocol witness table for MainActor;
  v36 = v47;
  v37 = v49;
  *((_QWORD *)v35 + 4) = v48;
  *((_QWORD *)v35 + 5) = v37;
  *((_QWORD *)v35 + 6) = v43;
  (*(void (**)(char *, char *, uint64_t))(v18 + 32))(&v35[v30], v21, v36);
  v38 = (uint64_t *)&v35[v31];
  v39 = v46;
  *v38 = v50;
  v38[1] = v39;
  v40 = (double *)&v35[v32];
  *v40 = a9;
  v40[1] = a10;
  *(_QWORD *)&v35[v33] = v45;
  *(_QWORD *)&v35[v34] = v44;
  v41 = sub_13BC30((uint64_t)v24, (uint64_t)&unk_25E360, (uint64_t)v35);
  return swift_release(v41);
}

uint64_t sub_E3E4(double a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  *(_QWORD *)(v10 + 120) = a10;
  *(_QWORD *)(v10 + 128) = v17;
  *(double *)(v10 + 104) = a1;
  *(double *)(v10 + 112) = a2;
  *(_QWORD *)(v10 + 88) = a8;
  *(_QWORD *)(v10 + 96) = a9;
  *(_QWORD *)(v10 + 72) = a6;
  *(_QWORD *)(v10 + 80) = a7;
  v11 = type metadata accessor for BackdropView(0, v18, v19, a6);
  *(_QWORD *)(v10 + 136) = v11;
  v12 = *(_QWORD *)(v11 - 8);
  *(_QWORD *)(v10 + 144) = v12;
  *(_QWORD *)(v10 + 152) = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v10 + 160) = static MainActor.shared.getter(v13);
  v14 = dispatch thunk of Actor.unownedExecutor.getter(v13, &protocol witness table for MainActor);
  return swift_task_switch(sub_E4C0, v14, v15);
}

uint64_t sub_E4C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  _BOOL4 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  double v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  void *v39;
  uint64_t v40;
  _QWORD *v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  __n128 v45;
  void *v46;
  uint64_t v47;
  NSObject *log;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  os_log_type_t type;
  id v56;
  uint64_t *v57;
  uint64_t v58;

  v1 = *(_QWORD *)(v0 + 72);
  swift_release(*(_QWORD *)(v0 + 160));
  if (v1)
  {
    v2 = *(_QWORD *)(v0 + 136);
    v3 = *(void **)(v0 + 72);
    v4 = objc_allocWithZone((Class)UIImage);
    v56 = v3;
    sub_C728((uint64_t)objc_msgSend(v4, "initWithCGImage:scale:orientation:", 1.0), v2);
    if (qword_25DAE0 != -1)
      swift_once(&qword_25DAE0, sub_70E0);
    v6 = *(_QWORD *)(v0 + 144);
    v5 = *(_QWORD *)(v0 + 152);
    v7 = *(_QWORD *)(v0 + 136);
    v8 = *(_QWORD *)(v0 + 96);
    v9 = *(_QWORD *)(v0 + 80);
    v10 = type metadata accessor for Logger(0);
    sub_7120(v10, (uint64_t)qword_25DE70);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v5, v9, v7);
    v11 = swift_bridgeObjectRetain_n(v8, 2);
    v12 = Logger.logObject.getter(v11);
    v13 = static os_log_type_t.info.getter();
    v14 = os_log_type_enabled(v12, v13);
    v16 = *(_QWORD *)(v0 + 144);
    v15 = *(_QWORD *)(v0 + 152);
    v17 = *(_QWORD *)(v0 + 136);
    if (v14)
    {
      type = v13;
      v51 = *(_QWORD *)(v0 + 144);
      v19 = *(double *)(v0 + 104);
      v18 = *(double *)(v0 + 112);
      v50 = *(_QWORD *)(v0 + 152);
      v20 = *(_QWORD *)(v0 + 88);
      v21 = *(_QWORD *)(v0 + 96);
      v22 = swift_slowAlloc(32, -1);
      v53 = swift_slowAlloc(96, -1);
      v58 = v53;
      *(_DWORD *)v22 = 136315650;
      swift_bridgeObjectRetain(v21);
      *(_QWORD *)(v0 + 40) = sub_14AC3C(v20, v21, &v58);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v22 + 4, v22 + 12);
      swift_bridgeObjectRelease_n(v21, 3);
      *(_WORD *)(v22 + 12) = 2080;
      v23 = CGSize.description.getter(v19, v18);
      v25 = v24;
      *(_QWORD *)(v0 + 48) = sub_14AC3C(v23, v24, &v58);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v22 + 14, v22 + 22);
      swift_bridgeObjectRelease(v25);
      *(_WORD *)(v22 + 22) = 2080;
      log = v12;
      v26 = v17;
      v27 = (void *)sub_C6E0();
      *(_QWORD *)(v0 + 56) = v27;
      v28 = sub_5440(&qword_25E158);
      v29 = Optional.debugDescription.getter(v28);
      v31 = v30;

      *(_QWORD *)(v0 + 64) = sub_14AC3C(v29, v31, &v58);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v22 + 24, v22 + 32);
      swift_bridgeObjectRelease(v31);
      (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v50, v26);
      _os_log_impl(&dword_0, log, type, "Done generation of backdrop for %s for view size=%s, %s", (uint8_t *)v22, 0x20u);
      swift_arrayDestroy(v53, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v53, -1, -1);
      swift_slowDealloc(v22, -1, -1);

    }
    else
    {
      v44 = *(_QWORD *)(v0 + 96);

      v45 = swift_bridgeObjectRelease_n(v44, 2);
      (*(void (**)(uint64_t, uint64_t, __n128))(v16 + 8))(v15, v17, v45);

    }
  }
  else
  {
    if (qword_25DAE0 != -1)
      swift_once(&qword_25DAE0, sub_70E0);
    v32 = *(void **)(v0 + 120);
    v33 = *(_QWORD *)(v0 + 128);
    v34 = type metadata accessor for Logger(0);
    sub_7120(v34, (uint64_t)qword_25DE70);
    v35 = v32;
    v36 = swift_errorRetain(v33);
    v37 = Logger.logObject.getter(v36);
    v38 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v37, v38))
    {
      v57 = (uint64_t *)(v0 + 32);
      v39 = *(void **)(v0 + 120);
      v54 = *(_QWORD *)(v0 + 128);
      v40 = swift_slowAlloc(22, -1);
      v41 = (_QWORD *)swift_slowAlloc(16, -1);
      *(_DWORD *)v40 = 138412546;
      *(_QWORD *)(v0 + 16) = v39;
      v42 = v39;
      v52 = (_QWORD *)(v0 + 24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v40 + 4, v40 + 12);
      *v41 = v39;

      *(_WORD *)(v40 + 12) = 2112;
      if (v54)
      {
        v43 = _convertErrorToNSError(_:)(v33);
        *v57 = v43;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v57, v0 + 40, v40 + 14, v40 + 22);
      }
      else
      {
        *v52 = 0;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v52, v57, v40 + 14, v40 + 22);
        v43 = 0;
      }
      v41[1] = v43;
      swift_errorRelease(v33);
      _os_log_impl(&dword_0, v37, v38, "Failed to generate backdrop snapshot for image: %@, error: %@", (uint8_t *)v40, 0x16u);
      v47 = sub_5440(&qword_25E368);
      swift_arrayDestroy(v41, 2, v47);
      swift_slowDealloc(v41, -1, -1);
      swift_slowDealloc(v40, -1, -1);
    }
    else
    {
      v46 = *(void **)(v0 + 120);

      swift_errorRelease(v33);
    }

  }
  swift_task_dealloc(*(_QWORD *)(v0 + 152));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_EA20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t ObjectType;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD v22[4];

  v6 = sub_5440(&qword_25E2E8);
  __chkstk_darwin(v6);
  v8 = (char *)v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10938(a1, (uint64_t)v8);
  v9 = type metadata accessor for TaskPriority(0);
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    sub_108F8((uint64_t)v8);
    v11 = 4096;
    v12 = *(_QWORD *)(a3 + 16);
    if (v12)
    {
LABEL_3:
      v13 = *(_QWORD *)(a3 + 24);
      ObjectType = swift_getObjectType(v12);
      swift_unknownObjectRetain(v12);
      v15 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v13);
      v17 = v16;
      swift_unknownObjectRelease(v12);
      goto LABEL_6;
    }
  }
  else
  {
    v18 = TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v9);
    v11 = v18 | 0x1000;
    v12 = *(_QWORD *)(a3 + 16);
    if (v12)
      goto LABEL_3;
  }
  v15 = 0;
  v17 = 0;
LABEL_6:
  v19 = swift_allocObject(&unk_24B450, 32, 7);
  *(_QWORD *)(v19 + 16) = a2;
  *(_QWORD *)(v19 + 24) = a3;
  if (v17 | v15)
  {
    v22[0] = 0;
    v22[1] = 0;
    v20 = v22;
    v22[2] = v15;
    v22[3] = v17;
  }
  else
  {
    v20 = 0;
  }
  return swift_task_create(v11, v20, (char *)&type metadata for () + 8, &unk_25E330, v19);
}

uint64_t sub_EBB0()
{
  return static View._viewListCount(inputs:)();
}

uint64_t sub_EBCC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  void *v15;

  v0 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v14 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10BBC(0, (unint64_t *)&qword_25E338, OS_dispatch_queue_ptr);
  static DispatchQoS.userInitiated.getter();
  v15 = &_swiftEmptyArrayStorage;
  v10 = sub_6FD0(&qword_25E340, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v11 = sub_5440(&qword_25E348);
  v12 = sub_7FD8(&qword_25E350, &qword_25E348, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v15, v11, v12, v4, v10);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v0);
  result = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000019, 0x80000000001F9AD0, v9, v6, v3, 0);
  qword_25E148 = result;
  return result;
}

id sub_EDA0()
{
  id v0;
  id result;

  v0 = objc_msgSend(objc_allocWithZone((Class)NSOperationQueue), "init");
  objc_msgSend(v0, "setMaxConcurrentOperationCount:", 1);
  if (qword_25DB18 != -1)
    swift_once(&qword_25DB18, sub_EBCC);
  result = objc_msgSend(v0, "setUnderlyingQueue:", qword_25E148);
  qword_25E150 = (uint64_t)v0;
  return result;
}

uint64_t sub_EE2C()
{
  uint64_t v0;

  return swift_deallocClassInstance(v0, 16, 7);
}

BOOL static ShelfGridPaddleButtonView.Context.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

Swift::Int ReaderTypeFrameViewModel.Type.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void ShelfGridPaddleButtonView.Context.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int sub_EEC0(uint64_t a1)
{
  unsigned __int8 *v1;
  Swift::UInt v2;
  _QWORD v4[9];

  v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t sub_EF10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v4[2] = a4;
  v5 = type metadata accessor for Backdrop.SnapshotConfiguration(0);
  v4[3] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[4] = v6;
  v4[5] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_EF70, 0, 0);
}

uint64_t sub_EF70()
{
  uint64_t v0;
  uint64_t v1;
  double v2;
  double v3;
  void *v4;
  void *v5;
  id v6;
  _QWORD *v7;
  unint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  void (*v12)(_QWORD, uint64_t);
  uint64_t v13;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(double *)(v1 + OBJC_IVAR____TtC7BooksUI38MediaBackdropSnapshotRendererOperation_size);
  if (v2 <= 0.0
    || (v3 = *(double *)(v1 + OBJC_IVAR____TtC7BooksUI38MediaBackdropSnapshotRendererOperation_size + 8), v3 <= 0.0))
  {
    v9 = sub_1044C();
    v10 = swift_allocError(&type metadata for MediaBackdropSnapshotRendererOperation.BackdropRenderOperationError, v9, 0, 0);
    *v11 = 0;
    swift_willThrow();
    v12 = *(void (**)(_QWORD, uint64_t))(*(_QWORD *)(v0 + 16)
                                                 + OBJC_IVAR____TtC7BooksUI38MediaBackdropSnapshotRendererOperation_completion);
    swift_errorRetain(v10);
    v12(0, v10);
    swift_errorRelease(v10);
    swift_errorRelease(v10);
    v13 = *(_QWORD *)(v0 + 40);
    OS_dispatch_semaphore.signal()();
    swift_task_dealloc(v13);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v4 = *(void **)(v1 + OBJC_IVAR____TtC7BooksUI38MediaBackdropSnapshotRendererOperation_content);
    v5 = (void *)objc_opt_self(UITraitCollection);
    v6 = v4;
    Backdrop.SnapshotConfiguration.init(image:size:scale:offset:traitCollection:)(v4, objc_msgSend(v5, "traitCollectionWithUserInterfaceStyle:", 2), v2, v3, 1.0, 0.0);
    type metadata accessor for Backdrop.CompositeRenderer(0);
    v7 = (_QWORD *)swift_task_alloc(async function pointer to static Backdrop.CompositeRenderer.snapshot(configuration:)[1]);
    *(_QWORD *)(v0 + 48) = v7;
    *v7 = v0;
    v7[1] = sub_F104;
    return static Backdrop.CompositeRenderer.snapshot(configuration:)(*(_QWORD *)(v0 + 40));
  }
}

uint64_t sub_F104(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 48);
  *(_QWORD *)(v3 + 56) = a1;
  *(_QWORD *)(v3 + 64) = v1;
  swift_task_dealloc(v4);
  if (v1)
    v5 = sub_F32C;
  else
    v5 = sub_F170;
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_F170()
{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  void *v4;
  id v5;
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(id, _QWORD);
  id v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  void (*v19)(_QWORD, uint64_t);
  uint64_t v20;
  uint64_t v22;

  v1 = *(void **)(v0 + 56);
  v2 = objc_msgSend(objc_allocWithZone((Class)CIContext), "init");
  v3 = objc_msgSend(v1, "CIImage");
  if (!v3)
    goto LABEL_5;
  v4 = v3;
  objc_msgSend(v3, "extent");
  v5 = objc_msgSend(v2, "createCGImage:fromRect:", v4);
  if (!v5)
  {

LABEL_5:
    v12 = *(void **)(v0 + 56);
    v14 = *(_QWORD *)(v0 + 32);
    v13 = *(_QWORD *)(v0 + 40);
    v15 = *(_QWORD *)(v0 + 24);
    v16 = sub_1044C();
    v17 = swift_allocError(&type metadata for MediaBackdropSnapshotRendererOperation.BackdropRenderOperationError, v16, 0, 0);
    *v18 = 1;
    swift_willThrow();

    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v15);
    v19 = *(void (**)(_QWORD, uint64_t))(*(_QWORD *)(v0 + 16)
                                                 + OBJC_IVAR____TtC7BooksUI38MediaBackdropSnapshotRendererOperation_completion);
    swift_errorRetain(v17);
    v19(0, v17);
    swift_errorRelease(v17);
    swift_errorRelease(v17);
    goto LABEL_6;
  }
  v6 = v5;
  v7 = *(void **)(v0 + 56);
  v8 = *(_QWORD *)(v0 + 32);
  v22 = *(_QWORD *)(v0 + 40);
  v9 = *(_QWORD *)(v0 + 24);
  v10 = *(void (**)(id, _QWORD))(*(_QWORD *)(v0 + 16)
                                          + OBJC_IVAR____TtC7BooksUI38MediaBackdropSnapshotRendererOperation_completion);
  v11 = v5;
  v10(v6, 0);

  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v22, v9);
LABEL_6:
  v20 = *(_QWORD *)(v0 + 40);
  OS_dispatch_semaphore.signal()();
  swift_task_dealloc(v20);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_F32C()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(_QWORD, uint64_t);
  uint64_t v3;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 32) + 8))(*(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 24));
  v1 = *(_QWORD *)(v0 + 64);
  v2 = *(void (**)(_QWORD, uint64_t))(*(_QWORD *)(v0 + 16)
                                              + OBJC_IVAR____TtC7BooksUI38MediaBackdropSnapshotRendererOperation_completion);
  swift_errorRetain(v1);
  v2(0, v1);
  swift_errorRelease(v1);
  swift_errorRelease(v1);
  v3 = *(_QWORD *)(v0 + 40);
  OS_dispatch_semaphore.signal()();
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

id sub_F4D0()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MediaBackdropSnapshotRendererOperation();
  return objc_msgSendSuper2(&v2, "dealloc");
}

void sub_F54C(double *a1@<X8>)
{
  *a1 = EnvironmentValues.displayScale.getter();
}

void sub_F574(double *a1@<X8>)
{
  *a1 = EnvironmentValues.displayScale.getter();
}

uint64_t sub_F59C(double *a1)
{
  return EnvironmentValues.displayScale.setter(*a1);
}

uint64_t sub_F5C0(double *a1)
{
  return EnvironmentValues.displayScale.setter(*a1);
}

uint64_t sub_F5E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = (int *)type metadata accessor for BackdropView(0, v5, *(_QWORD *)(v4 + 24), a4);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v8 + 32) & ~v8;
  v10 = v9 + *(_QWORD *)(v7 + 64);
  v11 = v8 | 7;
  v12 = v4 + v9;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4 + v9, v5);
  swift_unknownObjectRelease(*(_QWORD *)(v12 + v6[9]));
  sub_BE0C(*(_QWORD *)(v12 + v6[11]), *(_BYTE *)(v12 + v6[11] + 8));
  swift_release(*(_QWORD *)(v12 + v6[12] + 16));
  v13 = v12 + v6[13];

  swift_release(*(_QWORD *)(v13 + 8));
  swift_release(*(_QWORD *)(v12 + v6[14] + 16));
  return swift_deallocObject(v4, v10, v11);
}

uint64_t sub_F6B8@<X0>(void *a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = *(_QWORD *)(v3 + 16);
  v7 = *(_QWORD *)(v3 + 24);
  v8 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for BackdropView(0, v6, v7, a2) - 8) + 80);
  return sub_CC90(a1, v3 + ((v8 + 32) & ~v8), v6, v7, a3);
}

unint64_t sub_F720()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25E160;
  if (!qword_25E160)
  {
    v1 = sub_7EF8(&qword_25E158);
    sub_10658(&qword_25E168, (uint64_t)&protocol conformance descriptor for NSObject);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_25E160);
  }
  return result;
}

uint64_t sub_F794(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  return swift_getOpaqueTypeConformance2(&v3, &opaque type descriptor for <<opaque return type of BackdropView.body>>, 1);
}

uint64_t sub_F7C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 48);
}

uint64_t sub_F7D0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[7];

  result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 16));
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = "\b";
    v4[2] = &unk_1E0E78;
    v4[3] = &unk_1E0E90;
    v4[4] = &unk_1E0EA8;
    v4[5] = &unk_1E0EC0;
    v4[6] = &unk_1E0EA8;
    swift_initStructMetadata(a1, 0, 7, v4, a1 + 32);
    return 0;
  }
  return result;
}

uint64_t *sub_F870(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  char *v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  id v28;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0
    || ((((((v6 + 39) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) != 0
    && ((((((v6 + 39) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) < 0xFFFFFFFFFFFFFFE8)
  {
    v27 = *a2;
    *a1 = *a2;
    v4 = (uint64_t *)(v27 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    v9 = (char *)v4 + v6;
    v10 = (char *)a2 + v6;
    v11 = ((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    v12 = ((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    v13 = *(_QWORD *)v12;
    *(_QWORD *)v11 = *(_QWORD *)v12;
    *(_BYTE *)(v11 + 8) = *(_BYTE *)(v12 + 8);
    v14 = ((unint64_t)v4 + v6 + 23) & 0xFFFFFFFFFFFFFFF8;
    v15 = ((unint64_t)a2 + v6 + 23) & 0xFFFFFFFFFFFFFFF8;
    v16 = *(_QWORD *)v15;
    v17 = *(_BYTE *)(v15 + 8);
    swift_unknownObjectRetain(v13);
    sub_F9E4(v16, v17);
    *(_QWORD *)v14 = v16;
    *(_BYTE *)(v14 + 8) = v17;
    v18 = (unint64_t)(v9 + 39) & 0xFFFFFFFFFFFFFFF8;
    v19 = (unint64_t)(v10 + 39) & 0xFFFFFFFFFFFFFFF8;
    *(_OWORD *)v18 = *(_OWORD *)v19;
    v20 = *(_QWORD *)(v19 + 16);
    *(_QWORD *)(v18 + 16) = v20;
    v21 = (_QWORD *)((v18 + 31) & 0xFFFFFFFFFFFFFFF8);
    v22 = (v19 + 31) & 0xFFFFFFFFFFFFFFF8;
    v23 = *(void **)v22;
    *v21 = *(_QWORD *)v22;
    v24 = *(_QWORD *)(v22 + 8);
    v21[1] = v24;
    v25 = ((unint64_t)v21 + 23) & 0xFFFFFFFFFFFFFFF8;
    v26 = (v22 + 23) & 0xFFFFFFFFFFFFFFF8;
    *(_OWORD *)v25 = *(_OWORD *)v26;
    v27 = *(_QWORD *)(v26 + 16);
    *(_QWORD *)(v25 + 16) = v27;
    swift_retain(v20);
    v28 = v23;
    swift_retain(v24);
  }
  swift_retain(v27);
  return v4;
}

uint64_t sub_F9E4(uint64_t result, char a2)
{
  if ((a2 & 1) == 0)
    return swift_retain(result);
  return result;
}

uint64_t sub_F9F0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  (*(void (**)(void))(v3 + 8))();
  v4 = *(_QWORD *)(v3 + 64) + a1;
  swift_unknownObjectRelease(*(_QWORD *)((v4 + 7) & 0xFFFFFFFFFFFFF8));
  sub_BE0C(*(_QWORD *)((v4 + 23) & 0xFFFFFFFFFFFFFFF8), *(_BYTE *)(((v4 + 23) & 0xFFFFFFFFFFFFFFF8) + 8));
  v5 = (v4 + 39) & 0xFFFFFFFFFFFFFFF8;
  swift_release(*(_QWORD *)(v5 + 16));
  v6 = (v5 + 31) & 0xFFFFFFFFFFFFFFF8;

  swift_release(*(_QWORD *)(v6 + 8));
  return swift_release(*(_QWORD *)((char *)&dword_10 + ((v6 + 23) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_FA7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  id v25;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = v6 + a1;
  v8 = v6 + a2;
  v9 = (v6 + a1 + 7) & 0xFFFFFFFFFFFFFFF8;
  v10 = (v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  v11 = *(_QWORD *)v10;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  v12 = (v7 + 23) & 0xFFFFFFFFFFFFFFF8;
  v13 = (v8 + 23) & 0xFFFFFFFFFFFFFFF8;
  v14 = *(_QWORD *)v13;
  LOBYTE(v5) = *(_BYTE *)(v13 + 8);
  swift_unknownObjectRetain(v11);
  sub_F9E4(v14, v5);
  *(_QWORD *)v12 = v14;
  *(_BYTE *)(v12 + 8) = v5;
  v15 = (v7 + 39) & 0xFFFFFFFFFFFFFFF8;
  v16 = (v8 + 39) & 0xFFFFFFFFFFFFFFF8;
  *(_OWORD *)v15 = *(_OWORD *)v16;
  v17 = *(_QWORD *)(v16 + 16);
  *(_QWORD *)(v15 + 16) = v17;
  v18 = (_QWORD *)((v15 + 31) & 0xFFFFFFFFFFFFFFF8);
  v19 = (v16 + 31) & 0xFFFFFFFFFFFFFFF8;
  v20 = *(void **)v19;
  *v18 = *(_QWORD *)v19;
  v21 = *(_QWORD *)(v19 + 8);
  v18[1] = v21;
  v22 = ((unint64_t)v18 + 23) & 0xFFFFFFFFFFFFFFF8;
  v23 = (v19 + 23) & 0xFFFFFFFFFFFFFFF8;
  *(_OWORD *)v22 = *(_OWORD *)v23;
  v24 = *(_QWORD *)(v23 + 16);
  *(_QWORD *)(v22 + 16) = v24;
  swift_retain(v17);
  v25 = v20;
  swift_retain(v21);
  swift_retain(v24);
  return a1;
}

uint64_t sub_FB94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  void *v24;
  void *v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = v6 + a1;
  v8 = v6 + a2;
  v9 = (v6 + a1 + 7) & 0xFFFFFFFFFFFFFFF8;
  v10 = (v6 + a2 + 7) & 0xFFFFFFFFFFFFFFF8;
  v11 = *(_QWORD *)v10;
  v12 = *(_QWORD *)v9;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  swift_unknownObjectRetain(v11);
  swift_unknownObjectRelease(v12);
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  v13 = (v7 + 23) & 0xFFFFFFFFFFFFFFF8;
  v14 = (v8 + 23) & 0xFFFFFFFFFFFFFFF8;
  v15 = *(_QWORD *)v14;
  LOBYTE(v9) = *(_BYTE *)(v14 + 8);
  sub_F9E4(*(_QWORD *)v14, v9);
  v16 = *(_QWORD *)v13;
  v17 = *(_BYTE *)(v13 + 8);
  *(_QWORD *)v13 = v15;
  *(_BYTE *)(v13 + 8) = v9;
  sub_BE0C(v16, v17);
  v18 = (_QWORD *)((v7 + 39) & 0xFFFFFFFFFFFFFFF8);
  v19 = (_QWORD *)((v8 + 39) & 0xFFFFFFFFFFFFFFF8);
  *v18 = *v19;
  v18[1] = v19[1];
  v20 = v18[2];
  v21 = v19[2];
  v18[2] = v21;
  swift_retain(v21);
  swift_release(v20);
  v22 = ((unint64_t)v18 + 31) & 0xFFFFFFFFFFFFFFF8;
  v23 = ((unint64_t)v19 + 31) & 0xFFFFFFFFFFFFFFF8;
  v24 = *(void **)v22;
  v25 = *(void **)v23;
  *(_QWORD *)v22 = *(_QWORD *)v23;
  v26 = v25;

  v27 = *(_QWORD *)(v22 + 8);
  v28 = *(_QWORD *)(v23 + 8);
  *(_QWORD *)(v22 + 8) = v28;
  swift_retain(v28);
  swift_release(v27);
  v29 = (_QWORD *)((v22 + 23) & 0xFFFFFFFFFFFFFFF8);
  v30 = (_QWORD *)((v23 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v29 = *v30;
  v29[1] = v30[1];
  v31 = v29[2];
  v32 = v30[2];
  v29[2] = v32;
  swift_retain(v32);
  swift_release(v31);
  return a1;
}

uint64_t sub_FCF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _OWORD *v17;
  _OWORD *v18;
  unint64_t v19;
  unint64_t v20;
  __int128 v21;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = v6 + a1;
  v8 = v6 + a2;
  v9 = (v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  v10 = (v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  v11 = (v7 + 23) & 0xFFFFFFFFFFFFFFF8;
  v12 = (v8 + 23) & 0xFFFFFFFFFFFFFFF8;
  v13 = *(_BYTE *)(v12 + 8);
  *(_QWORD *)v11 = *(_QWORD *)v12;
  *(_BYTE *)(v11 + 8) = v13;
  v14 = (v7 + 39) & 0xFFFFFFFFFFFFFFF8;
  v15 = (v8 + 39) & 0xFFFFFFFFFFFFFFF8;
  v16 = *(_QWORD *)(v15 + 16);
  *(_OWORD *)v14 = *(_OWORD *)v15;
  *(_QWORD *)(v14 + 16) = v16;
  v17 = (_OWORD *)((v14 + 31) & 0xFFFFFFFFFFFFFFF8);
  v18 = (_OWORD *)((v15 + 31) & 0xFFFFFFFFFFFFFFF8);
  *v17 = *v18;
  v19 = ((unint64_t)v17 + 23) & 0xFFFFFFFFFFFFFFF8;
  v20 = ((unint64_t)v18 + 23) & 0xFFFFFFFFFFFFFFF8;
  v21 = *(_OWORD *)v20;
  *(_QWORD *)(v19 + 16) = *(_QWORD *)(v20 + 16);
  *(_OWORD *)v19 = v21;
  return a1;
}

uint64_t sub_FDCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  void *v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = v6 + a1;
  v8 = v6 + a2;
  v9 = (v6 + a1 + 7) & 0xFFFFFFFFFFFFFFF8;
  v10 = (v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  v11 = *(_QWORD *)v9;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  swift_unknownObjectRelease(v11);
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  v12 = (v7 + 23) & 0xFFFFFFFFFFFFFFF8;
  v13 = (v8 + 23) & 0xFFFFFFFFFFFFFFF8;
  v14 = *(_QWORD *)v13;
  LOBYTE(v13) = *(_BYTE *)(v13 + 8);
  v15 = *(_QWORD *)v12;
  v16 = *(_BYTE *)(v12 + 8);
  *(_QWORD *)v12 = v14;
  *(_BYTE *)(v12 + 8) = v13;
  sub_BE0C(v15, v16);
  v17 = (_QWORD *)((v7 + 39) & 0xFFFFFFFFFFFFFFF8);
  v18 = (_QWORD *)((v8 + 39) & 0xFFFFFFFFFFFFFFF8);
  *v17 = *v18;
  v17[1] = v18[1];
  v19 = v17[2];
  v17[2] = v18[2];
  swift_release(v19);
  v20 = ((unint64_t)v17 + 31) & 0xFFFFFFFFFFFFFFF8;
  v21 = (_QWORD *)(((unint64_t)v18 + 31) & 0xFFFFFFFFFFFFFFF8);
  v22 = *(void **)v20;
  *(_QWORD *)v20 = *v21;

  v23 = *(_QWORD *)(v20 + 8);
  *(_QWORD *)(v20 + 8) = v21[1];
  swift_release(v23);
  v24 = (_QWORD *)((v20 + 23) & 0xFFFFFFFFFFFFFFF8);
  v25 = (_QWORD *)(((unint64_t)v21 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v24 = *v25;
  v24[1] = v25[1];
  v26 = v24[2];
  v24[2] = v25[2];
  swift_release(v26);
  return a1;
}

uint64_t sub_FF00(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFE)
    v6 = 2147483646;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFE)
    {
      v12 = *(_QWORD *)((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8);
      if (v12 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      if ((v12 + 1) >= 2)
        return v12;
      else
        return 0;
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    if (((((((((v7 + 39) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 24) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_FF8C + 4 * byte_1E0DA0[v10]))();
  }
}

void sub_10018(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFEu)
    v6 = 2147483646;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((((((*(_DWORD *)(v5 + 64) + 39) & 0xFFFFFFF8) + 31) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) == 0xFFFFFFE8)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((((((*(_DWORD *)(v5 + 64) + 39) & 0xFFFFFFF8) + 31) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) != 0xFFFFFFE8)
  {
    v10 = ~v6 + a2;
    bzero(a1, ((((((*(_QWORD *)(v5 + 64) + 39) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)+ 24);
    *a1 = v10;
  }
  __asm { BR              X10 }
}

void sub_1011C()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x101A0);
}

void sub_10124(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x1012CLL);
  JUMPOUT(0x101A0);
}

void sub_10174()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x101A0);
}

void sub_1017C()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x101A0);
}

uint64_t sub_10184(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_WORD *)(v6 + v7) = 0;
  if (!a2)
    goto LABEL_6;
  if (a3 < 0x7FFFFFFE)
  {
    if (a2 > 0x7FFFFFFE)
      JUMPOUT(0x10190);
    *(_QWORD *)((v6 + v5 + 7) & 0xFFFFFFFFFFFFFFF8) = a2;
LABEL_6:
    JUMPOUT(0x101A0);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v6);
}

uint64_t type metadata accessor for MediaBackdropSnapshotRenderer()
{
  return objc_opt_self(_TtC7BooksUIP33_E60A196F1E83FE6FE7914723BF2ACBE929MediaBackdropSnapshotRenderer);
}

uint64_t type metadata accessor for MediaBackdropSnapshotRendererOperation()
{
  return objc_opt_self(_TtC7BooksUI38MediaBackdropSnapshotRendererOperation);
}

uint64_t sub_101F8(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t OpaqueTypeMetadata2;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t WitnessTable;

  v1 = type metadata accessor for _BackgroundStyleModifier(255, *a1, a1[1]);
  v2 = type metadata accessor for ModifiedContent(255, &type metadata for Image, v1);
  v3 = sub_7EF8(&qword_25DF68);
  v4 = type metadata accessor for ModifiedContent(255, v2, v3);
  v5 = sub_7EF8(&qword_25E158);
  v21 = &protocol witness table for Image;
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for _BackgroundStyleModifier<A>, v1);
  v19 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v2);
  v20 = sub_7FD8(&qword_25DF60, &qword_25DF68, (uint64_t)&protocol conformance descriptor for _GeometryActionModifier<A>);
  v6 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v4);
  v7 = sub_F720();
  v15 = v4;
  v16 = v5;
  v17 = v6;
  v18 = v7;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(255, &v15, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 0);
  v9 = type metadata accessor for BackdropView(255);
  v10 = type metadata accessor for _ConditionalContent(255, OpaqueTypeMetadata2, v9);
  v15 = v4;
  v16 = v5;
  v17 = v6;
  v18 = v7;
  swift_getOpaqueTypeConformance2(&v15, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
  sub_6FD0(qword_25E178, (uint64_t (*)(uint64_t))&type metadata accessor for BackdropView, (uint64_t)&protocol conformance descriptor for BackdropView);
  v11 = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v10);
  v13 = type metadata accessor for AsyncResourceImage(255, v10, v11, v12);
  return swift_getWitnessTable(&protocol conformance descriptor for AsyncResourceImage<A>, v13);
}

uint64_t sub_103B4()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_103E0(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_25E2F4);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_10F84;
  return sub_EF10(a1, v4, v5, v6);
}

unint64_t sub_1044C()
{
  unint64_t result;

  result = qword_25E300;
  if (!qword_25E300)
  {
    result = swift_getWitnessTable(&unk_1E0FC8, &type metadata for MediaBackdropSnapshotRendererOperation.BackdropRenderOperationError);
    atomic_store(result, (unint64_t *)&qword_25E300);
  }
  return result;
}

void sub_10494(double *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v6 = *(_QWORD *)(v4 + 16);
  v7 = *(_QWORD *)(v4 + 24);
  v8 = *(_QWORD *)(type metadata accessor for BackdropView(0, v6, v7, a4) - 8);
  v9 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  sub_D51C(a1, v4 + v9, *(void **)(v4 + ((*(_QWORD *)(v8 + 64) + v9 + 7) & 0xFFFFFFFFFFFFF8)), v6, v7);
}

uint64_t sub_10504(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = (int *)type metadata accessor for BackdropView(0, v5, *(_QWORD *)(v4 + 24), a4);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v8 + 32) & ~v8;
  v10 = v8 | 7;
  v11 = (*(_QWORD *)(v7 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  v12 = v4 + v9;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4 + v9, v5);
  swift_unknownObjectRelease(*(_QWORD *)(v12 + v6[9]));
  sub_BE0C(*(_QWORD *)(v12 + v6[11]), *(_BYTE *)(v12 + v6[11] + 8));
  swift_release(*(_QWORD *)(v12 + v6[12] + 16));
  v13 = v12 + v6[13];

  swift_release(*(_QWORD *)(v13 + 8));
  swift_release(*(_QWORD *)(v12 + v6[14] + 16));

  return swift_deallocObject(v4, v11 + 8, v10);
}

void sub_105F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = *(_QWORD *)(v4 + 24);
  v7 = *(_QWORD *)(type metadata accessor for BackdropView(0, v5, v6, a4) - 8);
  v8 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  sub_DBF4(v4 + v8, *(void **)(v4 + ((*(_QWORD *)(v7 + 64) + v8 + 7) & 0xFFFFFFFFFFFFF8)), v5, v6);
}

uint64_t sub_10658(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = sub_10BBC(255, &qword_25E170, UIImage_ptr);
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_106A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;

  v5 = v4[4];
  v6 = (int *)type metadata accessor for BackdropView(0, v5, v4[5], a4);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v8 + 80) & ~v8;
  v10 = v8 | 7;
  v11 = (*(_QWORD *)(v7 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease(v4[2]);
  swift_bridgeObjectRelease(v4[7]);
  v12 = (char *)v4 + v9;
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v12, v5);
  swift_unknownObjectRelease(*(_QWORD *)&v12[v6[9]]);
  sub_BE0C(*(_QWORD *)&v12[v6[11]], v12[v6[11] + 8]);
  swift_release(*(_QWORD *)&v12[v6[12] + 16]);
  v13 = &v12[v6[13]];

  swift_release(*((_QWORD *)v13 + 1));
  swift_release(*(_QWORD *)&v12[v6[14] + 16]);

  return swift_deallocObject(v4, ((v11 + 15) & 0xFFFFFFFFFFFFFFF8) + 8, v10);
}

uint64_t sub_107B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  double *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  _QWORD *v19;

  v6 = *((_QWORD *)v4 + 4);
  v7 = *(_QWORD *)(type metadata accessor for BackdropView(0, v6, *((_QWORD *)v4 + 5), a4) - 8);
  v8 = (*(unsigned __int8 *)(v7 + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v9 = (*(_QWORD *)(v7 + 64) + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  v10 = *((_QWORD *)v4 + 2);
  v11 = *((_QWORD *)v4 + 3);
  v12 = *((_QWORD *)v4 + 6);
  v13 = *((_QWORD *)v4 + 7);
  v14 = v4[8];
  v15 = v4[9];
  v16 = (uint64_t)v4 + v8;
  v17 = *(_QWORD *)((char *)v4 + v9);
  v18 = *(double *)((char *)v4 + ((v9 + 15) & 0xFFFFFFFFFFFFF8));
  v19 = (_QWORD *)swift_task_alloc(dword_25E324);
  *(_QWORD *)(v5 + 16) = v19;
  *v19 = v5;
  v19[1] = sub_108B0;
  return sub_DC84(v14, v15, v18, a1, v10, v11, v12, v13, v16, v17, v6);
}

uint64_t sub_108B0()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_108F8(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_5440(&qword_25E2E8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10938(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_5440(&qword_25E2E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10980()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_109A4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_267504);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_108B0;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_267500 + dword_267500))(a1, v4);
}

uint64_t sub_10A14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = (int *)type metadata accessor for BackdropView(0, v5, *(_QWORD *)(v4 + 24), a4);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v8 + 32) & ~v8;
  v10 = v8 | 7;
  v11 = (*(_QWORD *)(v7 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  v12 = (((v11 + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  v13 = v4 + v9;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4 + v9, v5);
  swift_unknownObjectRelease(*(_QWORD *)(v13 + v6[9]));
  sub_BE0C(*(_QWORD *)(v13 + v6[11]), *(_BYTE *)(v13 + v6[11] + 8));
  swift_release(*(_QWORD *)(v13 + v6[12] + 16));
  v14 = v13 + v6[13];

  swift_release(*(_QWORD *)(v14 + 8));
  swift_release(*(_QWORD *)(v13 + v6[14] + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + v11 + 8));

  return swift_deallocObject(v4, v12 + 8, v10);
}

uint64_t sub_10B20(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v7 = *(_QWORD *)(v4 + 16);
  v8 = *(_QWORD *)(v4 + 24);
  v9 = *(_QWORD *)(type metadata accessor for BackdropView(0, v7, v8, a4) - 8);
  v10 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v11 = (*(_QWORD *)(v9 + 64) + v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_E1D4(a1, a2, v4 + v10, *(_QWORD *)(v4 + v11), *(_QWORD *)(v4 + v11 + 8), *(void **)(v4 + ((((v11 + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFF8)), v7, v8, *(double *)(v4 + ((v11 + 23) & 0xFFFFFFFFFFFFFFF8)), *(double *)(v4 + ((v11 + 23) & 0xFFFFFFFFFFFFFFF8) + 8));
}

uint64_t sub_10BBC(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v5;

  result = *a2;
  if (!*a2)
  {
    v5 = objc_opt_self(*a3);
    result = swift_getObjCClassMetadata(v5);
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_10BF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v5 = *(_QWORD *)(v4 + 32);
  v6 = (int *)type metadata accessor for BackdropView(0, v5, *(_QWORD *)(v4 + 40), a4);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v8 + 56) & ~v8;
  v10 = v8 | 7;
  v11 = (*(_QWORD *)(v7 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  v12 = (((v11 + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  v13 = (v12 + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease(*(_QWORD *)(v4 + 16));

  v14 = v4 + v9;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v14, v5);
  swift_unknownObjectRelease(*(_QWORD *)(v14 + v6[9]));
  sub_BE0C(*(_QWORD *)(v14 + v6[11]), *(_BYTE *)(v14 + v6[11] + 8));
  swift_release(*(_QWORD *)(v14 + v6[12] + 16));
  v15 = v14 + v6[13];

  swift_release(*(_QWORD *)(v15 + 8));
  swift_release(*(_QWORD *)(v14 + v6[14] + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + v11 + 8));

  swift_errorRelease(*(_QWORD *)(v4 + v13));
  return swift_deallocObject(v4, v13 + 8, v10);
}

uint64_t sub_10D28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  double v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v21;

  v6 = *(_QWORD *)(type metadata accessor for BackdropView(0, v4[4], v4[5], a4) - 8);
  v7 = (*(unsigned __int8 *)(v6 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v8 = (*(_QWORD *)(v6 + 64) + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  v9 = (v8 + 23) & 0xFFFFFFFFFFFFFFF8;
  v10 = v4[3];
  v21 = v4[2];
  v11 = v4[6];
  v12 = (uint64_t)v4 + v7;
  v13 = (_QWORD *)((char *)v4 + v8);
  v15 = *v13;
  v14 = v13[1];
  v16 = *(double *)((char *)v4 + v9);
  v17 = *(double *)((char *)v4 + v9 + 8);
  v18 = *(_QWORD *)((char *)v4 + ((v9 + 23) & 0xFFFFFFFFFFFFFFF8));
  v19 = (_QWORD *)swift_task_alloc(dword_25E35C);
  *(_QWORD *)(v5 + 16) = v19;
  *v19 = v5;
  v19[1] = sub_10F84;
  return sub_E3E4(v16, v17, a1, v21, v10, v11, v12, v15, v14, v18);
}

uint64_t sub_10E40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[3];

  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return swift_getGenericMetadata(a1, v6, a5);
}

uint64_t storeEnumTagSinglePayload for MediaBackdropSnapshotRendererOperation.BackdropRenderOperationError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_10EB8 + 4 * byte_1E0DB4[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10EEC + 4 * byte_1E0DAF[v4]))();
}

uint64_t sub_10EEC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10EF4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10EFCLL);
  return result;
}

uint64_t sub_10F08(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10F10);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_10F14(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10F1C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MediaBackdropSnapshotRendererOperation.BackdropRenderOperationError()
{
  return &type metadata for MediaBackdropSnapshotRendererOperation.BackdropRenderOperationError;
}

unint64_t sub_10F3C()
{
  unint64_t result;

  result = qword_25E380;
  if (!qword_25E380)
  {
    result = swift_getWitnessTable(&unk_1E0FA0, &type metadata for MediaBackdropSnapshotRendererOperation.BackdropRenderOperationError);
    atomic_store(result, (unint64_t *)&qword_25E380);
  }
  return result;
}

uint64_t sub_10F88()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t OpaqueTypeConformance2;
  uint64_t v14;
  _QWORD v16[4];

  v0 = type metadata accessor for ToolbarItemPlacement(0);
  __chkstk_darwin(v0);
  v2 = (char *)v16 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_5440(&qword_25E3B0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (char *)v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  static ToolbarItemPlacement.primaryAction.getter(v5);
  v8 = sub_5440(&qword_25E3C0);
  v9 = sub_7EF8(&qword_25E3C8);
  v10 = sub_7EF8(&qword_25E3D0);
  v11 = sub_7FD8(&qword_25E3D8, &qword_25E3C8, (uint64_t)&protocol conformance descriptor for ActionButton<A>);
  v12 = sub_7FD8(&qword_25E3E0, &qword_25E3D0, (uint64_t)&protocol conformance descriptor for Label<A, B>);
  v16[0] = v9;
  v16[1] = v10;
  v16[2] = v11;
  v16[3] = v12;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v16, &opaque type descriptor for <<opaque return type of View.accessibilityShowsLargeContentViewer<A>(_:)>>, 1);
  ToolbarItem<>.init(placement:content:)(v2, sub_117CC, 0, v8, OpaqueTypeConformance2);
  v14 = sub_7FD8(&qword_25E3B8, &qword_25E3B0, (uint64_t)&protocol conformance descriptor for ToolbarItem<A, B>);
  static ToolbarContentBuilder.buildBlock<A>(_:)(v7, v3, v14);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
}

uint64_t sub_1112C()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v21[5];

  v0 = type metadata accessor for ActionMetrics(0);
  __chkstk_darwin(v0);
  v2 = (char *)&v21[-1] - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_5440(qword_25E3E8);
  __chkstk_darwin(v3);
  v5 = (char *)&v21[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_5440(&qword_25E3C8);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v21[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for ButtonRole(0);
  v11 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v5, 1, 1, v10);
  v12 = static ActionMetrics.notInstrumented.getter(v11);
  v13 = static Models.FlowBackAction.Dismissal.sheetDismiss.getter(v12);
  v15 = v14;
  v21[3] = type metadata accessor for Models.FlowBackAction(0);
  v21[4] = &protocol witness table for Models.FlowBackAction;
  sub_C404(v21);
  Models.FlowBackAction.init(actionMetrics:dismissal:)(v2, v13, v15);
  ActionButton.init(role:action:label:)(v5, v21, sub_117D0, 0, &type metadata for Image, &protocol witness table for Image);
  v16 = sub_5440(&qword_25E3D0);
  v17 = sub_7FD8(&qword_25E3D8, &qword_25E3C8, (uint64_t)&protocol conformance descriptor for ActionButton<A>);
  v18 = sub_7FD8(&qword_25E3E0, &qword_25E3D0, (uint64_t)&protocol conformance descriptor for Label<A, B>);
  View.accessibilityShowsLargeContentViewer<A>(_:)(sub_1132C, 0, v6, v16, v17, v18);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t sub_1132C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t ObjCClassFromMetadata;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD v24[3];

  v0 = type metadata accessor for Locale(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = (char *)&v24[-1] - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  v6 = (char *)&v24[-1] - v5;
  v7 = type metadata accessor for String.LocalizationValue(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v24[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v24[-1] - v12;
  v14 = String.LocalizationValue.init(stringLiteral:)(0x65736F6C43, 0xE500000000000000);
  static Locale.current.getter(v14);
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v11, v13, v7);
  v15 = type metadata accessor for BundleFinder();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v15);
  v17 = objc_msgSend((id)objc_opt_self(NSBundle), "bundleForClass:", ObjCClassFromMetadata);
  (*(void (**)(char *, char *, uint64_t))(v1 + 16))(v4, v6, v0);
  v18 = String.init(localized:table:bundle:locale:comment:)(v11, 0, 0, v17, v4, "An accessibility title for a close button", 41, 2);
  v20 = v19;
  (*(void (**)(char *, uint64_t))(v1 + 8))(v6, v0);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v7);
  v24[0] = v18;
  v24[1] = v20;
  v21 = sub_C57C();
  return Label<>.init<A>(_:systemImage:)(v24, 0x6B72616D78, 0xE500000000000000, &type metadata for String, v21);
}

uint64_t sub_11518@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t OpaqueTypeConformance2;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v19 = a1;
  v17 = type metadata accessor for NavigationBarItem.TitleDisplayMode(0);
  v1 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v3 = (char *)&v16 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_5440(&qword_25E390);
  v18 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_5440(&qword_25E398);
  v8 = sub_5440(&qword_25E3A0);
  v9 = sub_7FD8(&qword_25E3A8, &qword_25E398, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
  v10 = sub_7EF8(&qword_25E3B0);
  v11 = sub_7FD8(&qword_25E3B8, &qword_25E3B0, (uint64_t)&protocol conformance descriptor for ToolbarItem<A, B>);
  v20 = v10;
  v21 = v11;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v20, &opaque type descriptor for <<opaque return type of static ToolbarContentBuilder.buildBlock<A>(_:)>>, 1);
  View.toolbar<A>(content:)(sub_117C8, 0, v7, v8, v9, OpaqueTypeConformance2);
  v13 = v17;
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for NavigationBarItem.TitleDisplayMode.inline(_:), v17);
  v20 = v7;
  v21 = v8;
  v22 = v9;
  v23 = OpaqueTypeConformance2;
  v14 = swift_getOpaqueTypeConformance2(&v20, &opaque type descriptor for <<opaque return type of View.toolbar<A>(content:)>>, 1);
  View.navigationBarTitleDisplayMode(_:)(v3, v4, v14);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v13);
  return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v6, v4);
}

uint64_t View.toolbarCloseButton()(uint64_t a1, uint64_t a2)
{
  return View.modifier<A>(_:)(a1, a1, &type metadata for ToolbarCloseButtonViewModifier, a2);
}

uint64_t sub_11710(_QWORD *a1)
{
  uint64_t v1;

  v1 = type metadata accessor for ModifiedContent(255, *a1, &type metadata for ToolbarCloseButtonViewModifier);
  sub_11764();
  return swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
}

unint64_t sub_11764()
{
  unint64_t result;

  result = qword_25E388;
  if (!qword_25E388)
  {
    result = swift_getWitnessTable(&unk_1E1030, &type metadata for ToolbarCloseButtonViewModifier);
    atomic_store(result, (unint64_t *)&qword_25E388);
  }
  return result;
}

ValueMetadata *type metadata accessor for ToolbarCloseButtonViewModifier()
{
  return &type metadata for ToolbarCloseButtonViewModifier;
}

uint64_t sub_117B8(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_229FA0, 1);
}

uint64_t sub_117D0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = Image.init(systemName:)(0xD000000000000011, 0x80000000001F9B20);
  *a1 = result;
  return result;
}

uint64_t sub_1180C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t OpaqueTypeConformance2;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v0 = sub_7EF8(&qword_25E390);
  v1 = sub_7EF8(&qword_25E398);
  v2 = sub_7EF8(&qword_25E3A0);
  v3 = sub_7FD8(&qword_25E3A8, &qword_25E398, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
  v7 = sub_7EF8(&qword_25E3B0);
  v8 = sub_7FD8(&qword_25E3B8, &qword_25E3B0, (uint64_t)&protocol conformance descriptor for ToolbarItem<A, B>);
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v7, &opaque type descriptor for <<opaque return type of static ToolbarContentBuilder.buildBlock<A>(_:)>>, 1);
  v7 = v1;
  v8 = v2;
  v9 = v3;
  v10 = OpaqueTypeConformance2;
  v5 = swift_getOpaqueTypeConformance2(&v7, &opaque type descriptor for <<opaque return type of View.toolbar<A>(content:)>>, 1);
  v7 = v0;
  v8 = v5;
  return swift_getOpaqueTypeConformance2(&v7, &opaque type descriptor for <<opaque return type of View.navigationBarTitleDisplayMode(_:)>>, 1);
}

uint64_t sub_11904@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v11;
  uint64_t result;
  _QWORD *v13;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 32))(a6, a1, a4);
  result = type metadata accessor for ListItemAccessoryView(0, a4, a5, v11);
  v13 = (_QWORD *)(a6 + *(int *)(result + 36));
  *v13 = a2;
  v13[1] = a3;
  return result;
}

uint64_t type metadata accessor for ListItemAccessoryView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10E40(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ListItemAccessoryView);
}

uint64_t sub_11980(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 24);
}

uint64_t sub_11988(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 16));
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = (char *)&value witness table for () + 64;
    swift_initStructMetadata(a1, 0, 2, v4, a1 + 32);
    return 0;
  }
  return result;
}

uint64_t *sub_11A00(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    v10 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v10 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    v9 = (_QWORD *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    v10 = v9[1];
    v11 = (_QWORD *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    *v11 = *v9;
    v11[1] = v10;
  }
  swift_retain(v10);
  return v4;
}

uint64_t sub_11AB0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  (*(void (**)(void))(v3 + 8))();
  return swift_release(*(_QWORD *)((char *)&dword_8 + ((a1 + *(_QWORD *)(v3 + 64) + 7) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_11AF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  v9 = v8[1];
  *v7 = *v8;
  v7[1] = v9;
  swift_retain(v9);
  return a1;
}

uint64_t sub_11B50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  v9 = v8[1];
  v10 = v7[1];
  *v7 = *v8;
  v7[1] = v9;
  swift_retain(v9);
  swift_release(v10);
  return a1;
}

uint64_t sub_11BBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  *(_OWORD *)((*(_QWORD *)(v5 + 64) + 7 + a1) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)((*(_QWORD *)(v5 + 64) + 7 + a2) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_11C18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = *(_QWORD *)(v7 + 8);
  *(_OWORD *)v7 = *(_OWORD *)((v6 + a2) & 0xFFFFFFFFFFFFF8);
  swift_release(v8);
  return a1;
}

uint64_t sub_11C7C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFF)
    {
      v12 = *(_QWORD *)((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8);
      if (v12 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      return (v12 + 1);
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    if (((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 16) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_11CF8 + 4 * byte_1E1090[v10]))();
  }
}

void sub_11D7C(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF0)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    v10 = ~v6 + a2;
    bzero(a1, ((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 16);
    *a1 = v10;
  }
  __asm { BR              X10 }
}

void sub_11E70()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x11EE8);
}

void sub_11E78(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x11E80);
  JUMPOUT(0x11EE8);
}

void sub_11EC0()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x11EE8);
}

void sub_11EC8()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x11EE8);
}

uint64_t sub_11ED0(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_WORD *)(v5 + v6) = 0;
  if (!a2)
    JUMPOUT(0x11EE8);
  if (a3 < 0x7FFFFFFF)
  {
    if ((a2 & 0x80000000) == 0)
      JUMPOUT(0x11EE4);
    JUMPOUT(0x11EDCLL);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v5);
}

uint64_t sub_11F00(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  return swift_getOpaqueTypeConformance2(&v3, &unk_22A004, 1);
}

uint64_t sub_11F34@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  void (*v17)(_BYTE *, uint64_t);
  _BYTE v19[16];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v5 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v4, v5, &protocol requirements base descriptor for ListItemAccessory, &associated type descriptor for ListItemAccessory.Content);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v4, v5, AssociatedTypeWitness, &protocol requirements base descriptor for ListItemAccessory, &associated conformance descriptor for ListItemAccessory.ListItemAccessory.Content: View);
  v8 = type metadata accessor for HStack(0, AssociatedTypeWitness, AssociatedConformanceWitness);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = &v19[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = __chkstk_darwin(v10);
  v15 = &v19[-v14];
  v20 = v5;
  v21 = v4;
  v22 = v2;
  v16 = static VerticalAlignment.center.getter(v13);
  HStack.init(alignment:spacing:content:)(v16, 0, 1, sub_121FC, v19, AssociatedTypeWitness, AssociatedConformanceWitness);
  swift_getWitnessTable(&protocol conformance descriptor for HStack<A>, v8);
  sub_10F80((uint64_t)v12, v8, (uint64_t)v15);
  v17 = *(void (**)(_BYTE *, uint64_t))(v9 + 8);
  v17(v12, v8);
  sub_C5C0((uint64_t)v15, v8, a2);
  return ((uint64_t (*)(_BYTE *, uint64_t))v17)(v15, v8);
}

uint64_t sub_120A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t);
  uint64_t v19;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a3, a2, &protocol requirements base descriptor for ListItemAccessory, &associated type descriptor for ListItemAccessory.Content);
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v10 = __chkstk_darwin(AssociatedTypeWitness);
  v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v19 - v13;
  v16 = type metadata accessor for ListItemAccessoryView(0, a2, a3, v15);
  (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t))(a3 + 24))(*(_QWORD *)(a1 + *(int *)(v16 + 36)), *(_QWORD *)(a1 + *(int *)(v16 + 36) + 8), a2, a3);
  swift_getAssociatedConformanceWitness(a3, a2, AssociatedTypeWitness, &protocol requirements base descriptor for ListItemAccessory, &associated conformance descriptor for ListItemAccessory.ListItemAccessory.Content: View);
  sub_10F80((uint64_t)v12, AssociatedTypeWitness, (uint64_t)v14);
  v17 = *(void (**)(char *, uint64_t))(v9 + 8);
  v17(v12, AssociatedTypeWitness);
  sub_C5C0((uint64_t)v14, AssociatedTypeWitness, a4);
  return ((uint64_t (*)(char *, uint64_t))v17)(v14, AssociatedTypeWitness);
}

uint64_t sub_121FC@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_120A8(v1[4], v1[2], v1[3], a1);
}

uint64_t sub_12208(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v5;

  v1 = *a1;
  v2 = a1[1];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v2, *a1, &protocol requirements base descriptor for ListItemAccessory, &associated type descriptor for ListItemAccessory.Content);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v2, v1, AssociatedTypeWitness, &protocol requirements base descriptor for ListItemAccessory, &associated conformance descriptor for ListItemAccessory.ListItemAccessory.Content: View);
  v5 = type metadata accessor for HStack(255, AssociatedTypeWitness, AssociatedConformanceWitness);
  return swift_getWitnessTable(&protocol conformance descriptor for HStack<A>, v5);
}

uint64_t CardInfo.identifier.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for CardInfo(0) + 20);
  v4 = type metadata accessor for UUID(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for CardInfo(uint64_t a1)
{
  uint64_t result;

  result = qword_25E4D8;
  if (!qword_25E4D8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CardInfo);
  return result;
}

uint64_t CardInfo.init(options:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = type metadata accessor for CardInfo(0);
  result = UUID.init()(v4);
  *a2 = a1;
  return result;
}

uint64_t CardInfo.options.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  void *v16;

  v1 = *v0;
  type metadata accessor for CardInfo(0);
  v2 = swift_bridgeObjectRetain(v1);
  v16 = &type metadata for String;
  *(_QWORD *)&v15 = UUID.uuidString.getter(v2);
  *((_QWORD *)&v15 + 1) = v3;
  sub_8C4C(&v15, &v13);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v1);
  v12 = v1;
  v5 = sub_1244C((uint64_t)&v13, v14);
  __chkstk_darwin(v5);
  v7 = (uint64_t *)((char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v8 + 16))(v7);
  sub_12A9C(*v7, v7[1], 0x65636E6174736E69, 0xEA00000000006449, isUniquelyReferenced_nonNull_native, &v12);
  _s7BooksUI13AnyPagedFrameVwxx_0(&v13);
  v9 = v12;
  swift_bridgeObjectRelease(0x8000000000000000);
  return v9;
}

uint64_t sub_1244C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

uint64_t CardInfo.init(with:alwaysPresentNewCardSet:)@<X0>(_QWORD *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t inited;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t AssociatedTypeWitness;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t AssociatedConformanceWitness;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  unsigned int *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  unint64_t *v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD v71[6];

  v65 = a2;
  v5 = type metadata accessor for MResourceType(0);
  v61 = *(_QWORD *)(v5 - 8);
  v62 = v5;
  __chkstk_darwin(v5);
  v60 = (char *)&v59 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_5440(&qword_268370);
  __chkstk_darwin(v7);
  v9 = (char *)&v59 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for URL(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v59 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v68 = type metadata accessor for CardInfo(0);
  v14 = *(_QWORD *)(v68 - 8);
  __chkstk_darwin(v68);
  v64 = (unint64_t *)((char *)&v59 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16 = a1[3];
  v17 = a1[4];
  sub_5480(a1, v16);
  AssetInfo.sharableURL.getter(v16, v17);
  v18 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10);
  v67 = v14;
  if (v18 == 1)
  {
    v66 = a3;
    sub_12C34((uint64_t)v9);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v13, v9, v10);
    v19 = a1[3];
    v20 = a1[4];
    sub_5480(a1, v19);
    v21 = AssetInfo.serverData.getter(v19, v20);
    if (v21)
    {
      v22 = v21;
      v23 = sub_5440(&qword_25E470);
      inited = swift_initStackObject(v23, &v69);
      *(_OWORD *)(inited + 16) = xmmword_1E1120;
      *(_QWORD *)(inited + 32) = 25705;
      *(_QWORD *)(inited + 40) = 0xE200000000000000;
      v25 = a1[3];
      v26 = a1[4];
      sub_5480(a1, v25);
      *(_QWORD *)(inited + 48) = ContentInfo.id.getter(v25, *(_QWORD *)(v26 + 8));
      *(_QWORD *)(inited + 56) = v27;
      *(_QWORD *)(inited + 72) = &type metadata for String;
      *(_QWORD *)(inited + 80) = 7107189;
      *(_QWORD *)(inited + 88) = 0xE300000000000000;
      *(_QWORD *)(inited + 96) = URL.absoluteString.getter();
      *(_QWORD *)(inited + 104) = v28;
      *(_QWORD *)(inited + 120) = &type metadata for String;
      *(_QWORD *)(inited + 128) = 0x656372756F736572;
      *(_QWORD *)(inited + 136) = 0xE800000000000000;
      v29 = sub_5440(&qword_25E478);
      *(_QWORD *)(inited + 144) = v22;
      *(_QWORD *)(inited + 168) = v29;
      *(_QWORD *)(inited + 176) = 0xD000000000000017;
      *(_QWORD *)(inited + 184) = 0x80000000001F9B40;
      *(_QWORD *)(inited + 216) = &type metadata for Bool;
      *(_BYTE *)(inited + 192) = v65 & 1;
      v30 = sub_8FBC(inited);
      v31 = v68;
      v32 = v64;
      UUID.init()(v30);
      *v32 = v30;
      (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
      goto LABEL_14;
    }
    v66 = a3;
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  }
  v34 = a1[3];
  v33 = a1[4];
  sub_5480(a1, v34);
  v59 = v33;
  v35 = *(_QWORD *)(v33 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v35, v34, &protocol requirements base descriptor for ContentInfo, &associated type descriptor for ContentInfo.LibraryType);
  v37 = type metadata accessor for Optional(0, AssociatedTypeWitness);
  v63 = &v59;
  v38 = *(_QWORD *)(v37 - 8);
  __chkstk_darwin(v37);
  v40 = (char *)&v59 - v39;
  ContentInfo.libraryData.getter(v34, v35);
  v41 = *(_QWORD *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48))(v40, 1, AssociatedTypeWitness) != 1)
  {
    v71[3] = AssociatedTypeWitness;
    v71[4] = swift_getAssociatedConformanceWitness(v59, v34, AssociatedTypeWitness, &protocol requirements base descriptor for AssetInfo, &associated conformance descriptor for AssetInfo.ContentInfo.LibraryType: LibraryAssetInfo);
    sub_C404(v71);
    (*(void (**)(void))(v41 + 32))();
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v35, v34, AssociatedTypeWitness, &protocol requirements base descriptor for ContentInfo, &associated conformance descriptor for ContentInfo.ContentInfo.LibraryType: LibraryContentInfo);
    v44 = dispatch thunk of LibraryContentInfo.storeID.getter(AssociatedTypeWitness, AssociatedConformanceWitness);
    v46 = v45;
    _s7BooksUI13AnyPagedFrameVwxx_0(v71);
    v42 = v66;
    if (!v46)
      goto LABEL_16;
    v47 = a1[3];
    v48 = a1[4];
    sub_5480(a1, v47);
    v49 = dispatch thunk of AssetInfo.assetType.getter(v47, v48);
    if (v49)
    {
      if (v49 != 1)
      {
        swift_bridgeObjectRelease(v46);
        goto LABEL_16;
      }
      v66 = v42;
      v50 = (unsigned int *)&enum case for MResourceType.books(_:);
    }
    else
    {
      v66 = v42;
      v50 = (unsigned int *)&enum case for MResourceType.audiobooks(_:);
    }
    v51 = v60;
    v52 = v61;
    v53 = v62;
    (*(void (**)(char *, _QWORD, uint64_t))(v61 + 104))(v60, *v50, v62);
    v54 = sub_5440(&qword_25E470);
    v55 = swift_initStackObject(v54, &v70);
    *(_OWORD *)(v55 + 16) = xmmword_1E1120;
    *(_QWORD *)(v55 + 32) = 0x644965726F7473;
    *(_QWORD *)(v55 + 40) = 0xE700000000000000;
    *(_QWORD *)(v55 + 48) = v44;
    *(_QWORD *)(v55 + 56) = v46;
    *(_QWORD *)(v55 + 72) = &type metadata for String;
    *(_QWORD *)(v55 + 80) = 1701869940;
    *(_QWORD *)(v55 + 88) = 0xE400000000000000;
    *(_QWORD *)(v55 + 96) = MResourceType.name.getter();
    *(_QWORD *)(v55 + 104) = v56;
    *(_QWORD *)(v55 + 120) = &type metadata for String;
    *(_QWORD *)(v55 + 128) = 0x446B6E694C736168;
    *(_QWORD *)(v55 + 136) = 0xEB00000000617461;
    *(_BYTE *)(v55 + 144) = 1;
    *(_QWORD *)(v55 + 168) = &type metadata for Bool;
    *(_QWORD *)(v55 + 176) = 0xD000000000000017;
    *(_QWORD *)(v55 + 184) = 0x80000000001F9B40;
    *(_QWORD *)(v55 + 216) = &type metadata for Bool;
    *(_BYTE *)(v55 + 192) = v65 & 1;
    v57 = sub_8FBC(v55);
    v31 = v68;
    v32 = v64;
    UUID.init()(v57);
    *v32 = v57;
    (*(void (**)(char *, uint64_t))(v52 + 8))(v51, v53);
    a3 = v66;
LABEL_14:
    sub_12C74((uint64_t)v32, a3);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v67 + 56))(a3, 0, 1, v31);
    return _s7BooksUI13AnyPagedFrameVwxx_0(a1);
  }
  (*(void (**)(char *, uint64_t))(v38 + 8))(v40, v37);
  v42 = v66;
LABEL_16:
  _s7BooksUI13AnyPagedFrameVwxx_0(a1);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v67 + 56))(v42, 1, 1, v68);
}

_OWORD *sub_12A9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, _QWORD *a6)
{
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _OWORD *result;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  __int128 v27;
  void *v28;

  v28 = &type metadata for String;
  *(_QWORD *)&v27 = a1;
  *((_QWORD *)&v27 + 1) = a2;
  v10 = (_QWORD *)*a6;
  v12 = sub_9F7C(a3, a4);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_14;
  }
  v16 = v11;
  v17 = v10[3];
  if (v17 >= v15 && (a5 & 1) != 0)
  {
LABEL_7:
    v18 = (_QWORD *)*a6;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      v19 = (_QWORD *)(v18[7] + 32 * v12);
      _s7BooksUI13AnyPagedFrameVwxx_0(v19);
      return sub_8C4C(&v27, v19);
    }
    goto LABEL_11;
  }
  if (v17 >= v15 && (a5 & 1) == 0)
  {
    sub_1AE01C();
    goto LABEL_7;
  }
  sub_1AC3CC(v15, a5 & 1);
  v21 = sub_9F7C(a3, a4);
  if ((v16 & 1) != (v22 & 1))
  {
LABEL_14:
    result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
    __break(1u);
    return result;
  }
  v12 = v21;
  v18 = (_QWORD *)*a6;
  if ((v16 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  v23 = sub_1244C((uint64_t)&v27, (uint64_t)&type metadata for String);
  __chkstk_darwin(v23);
  v25 = (uint64_t *)((char *)&v27 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v26 + 16))(v25);
  sub_130C4(v12, a3, a4, *v25, v25[1], v18);
  _s7BooksUI13AnyPagedFrameVwxx_0(&v27);
  return (_OWORD *)swift_bridgeObjectRetain(a4);
}

uint64_t sub_12C34(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_5440(&qword_268370);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_12C74(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CardInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t *initializeBufferWithCopyOfBuffer for CardInfo(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v5 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain(v4);
  }
  else
  {
    v5 = a1;
    v6 = *(int *)(a3 + 20);
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    v9 = type metadata accessor for UUID(0);
    v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
    swift_bridgeObjectRetain(v4);
    v10(v7, v8, v9);
  }
  return v5;
}

uint64_t destroy for CardInfo(_QWORD *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;

  swift_bridgeObjectRelease(*a1);
  v4 = (char *)a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for UUID(0);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t *initializeWithCopy for CardInfo(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *, char *, uint64_t);

  v4 = *a2;
  *a1 = *a2;
  v5 = *(int *)(a3 + 20);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = type metadata accessor for UUID(0);
  v9 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
  swift_bridgeObjectRetain(v4);
  v9(v6, v7, v8);
  return a1;
}

uint64_t *assignWithCopy for CardInfo(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  v6 = *a2;
  v7 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = *(int *)(a3 + 20);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for UUID(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 24))(v9, v10, v11);
  return a1;
}

_QWORD *initializeWithTake for CardInfo(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for UUID(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t *assignWithTake for CardInfo(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;

  v6 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v6);
  v7 = *(int *)(a3 + 20);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for UUID(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for CardInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_12F50);
}

uint64_t sub_12F50(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UUID(0);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 20)], a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for CardInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_12FD8);
}

char *sub_12FD8(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

uint64_t sub_1304C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

_OWORD *sub_130C4(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  _QWORD *v7;
  _OWORD *result;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  __int128 v12;
  void *v13;

  v13 = &type metadata for String;
  *(_QWORD *)&v12 = a4;
  *((_QWORD *)&v12 + 1) = a5;
  a6[(a1 >> 6) + 8] |= 1 << a1;
  v7 = (_QWORD *)(a6[6] + 16 * a1);
  *v7 = a2;
  v7[1] = a3;
  result = sub_8C4C(&v12, (_OWORD *)(a6[7] + 32 * a1));
  v9 = a6[2];
  v10 = __OFADD__(v9, 1);
  v11 = v9 + 1;
  if (v10)
    __break(1u);
  else
    a6[2] = v11;
  return result;
}

double ShelfGridBlurEdgeMaskView.insets.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

uint64_t GeometryReferenceContext.isInList.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 32);
}

void GenericGeometryReference.init(frame:)(double *a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>)
{
  *a1 = a2;
  a1[1] = a3;
  a1[2] = a4;
  a1[3] = a5;
}

__n128 GenericGeometryReferenceBuilder.makeReference(context:)@<Q0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t GeometryCache.__allocating_init()()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = swift_allocObject(v0, 24, 7);
  v2 = sub_9110((uint64_t)&_swiftEmptyArrayStorage);
  v3 = sub_5440(&qword_25E528);
  v4 = swift_allocObject(v3, 28, 7);
  *(_DWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 16) = v2;
  *(_QWORD *)(v1 + 16) = v4;
  return v1;
}

uint64_t GeometryCache.init()()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = sub_9110((uint64_t)&_swiftEmptyArrayStorage);
  v2 = sub_5440(&qword_25E528);
  v3 = swift_allocObject(v2, 28, 7);
  *(_DWORD *)(v3 + 24) = 0;
  *(_QWORD *)(v3 + 16) = v1;
  *(_QWORD *)(v0 + 16) = v3;
  return v0;
}

void sub_13224(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  os_unfair_lock_s *v5;
  uint64_t *v6;
  os_unfair_lock_s *v7;

  v5 = *(os_unfair_lock_s **)(v2 + 16);
  v6 = (uint64_t *)&v5[4];
  v7 = v5 + 6;
  os_unfair_lock_lock(v5 + 6);
  sub_13280(v6, a1, a2);
  os_unfair_lock_unlock(v7);
}

double sub_13280@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  char v6;
  double result;

  v4 = *a1;
  if (*(_QWORD *)(*a1 + 16) && (v5 = sub_9FE0(a2), (v6 & 1) != 0))
  {
    sub_BD00(*(_QWORD *)(v4 + 56) + 40 * v5, a3);
  }
  else
  {
    *(_QWORD *)(a3 + 32) = 0;
    result = 0.0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }
  return result;
}

uint64_t sub_132E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BYTE v5[40];
  _BYTE v6[40];

  sub_B1FC(a2, (uint64_t)v6);
  sub_BD00(a3, (uint64_t)v5);
  return sub_8C5C((uint64_t)v5, (uint64_t)v6);
}

uint64_t GeometryCache.deinit()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return v0;
}

uint64_t GeometryCache.__deallocating_deinit()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocClassInstance(v0, 24, 7);
}

uint64_t GeometryCache.size(for:)(uint64_t a1)
{
  uint64_t v1;
  os_unfair_lock_s *v3;
  uint64_t *v4;
  os_unfair_lock_s *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[3];
  uint64_t v12;
  uint64_t v13;

  v3 = *(os_unfair_lock_s **)(v1 + 16);
  v4 = (uint64_t *)&v3[4];
  v5 = v3 + 6;
  os_unfair_lock_lock(v3 + 6);
  sub_13280(v4, a1, (uint64_t)v11);
  os_unfair_lock_unlock(v5);
  v6 = v12;
  if (v12)
  {
    v7 = v13;
    sub_5480(v11, v12);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v7);
    v9 = v8;
    _s7BooksUI13AnyPagedFrameVwxx_0(v11);
  }
  else
  {
    sub_B414((uint64_t)v11, &qword_25DFD0);
    return 0;
  }
  return v9;
}

uint64_t sub_13450(uint64_t a1)
{
  return GeometryCache.size(for:)(a1);
}

void sub_13474(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t sub_1347C()
{
  unint64_t v0;
  uint64_t v2;

  v0 = sub_167E8();
  EnvironmentValues.subscript.getter(&v2, &type metadata for GeometryCacheKey, &type metadata for GeometryCacheKey, v0);
  return v2;
}

uint64_t View.geometryCache(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t KeyPath;
  uint64_t v8;

  KeyPath = swift_getKeyPath(&off_1E1160);
  v8 = a1;
  swift_retain(a1);
  View.environment<A>(_:_:)(KeyPath, &v8, a2, a3);
  swift_release(a1);
  return swift_release(KeyPath);
}

_QWORD *sub_13538@<X0>(_QWORD *a1@<X8>)
{
  unint64_t v2;
  _QWORD *result;
  uint64_t v4;

  v2 = sub_167E8();
  result = EnvironmentValues.subscript.getter(&v4, &type metadata for GeometryCacheKey, &type metadata for GeometryCacheKey, v2);
  *a1 = v4;
  return result;
}

_QWORD *sub_13584@<X0>(_QWORD *a1@<X8>)
{
  unint64_t v2;
  _QWORD *result;
  uint64_t v4;

  v2 = sub_167E8();
  result = EnvironmentValues.subscript.getter(&v4, &type metadata for GeometryCacheKey, &type metadata for GeometryCacheKey, v2);
  *a1 = v4;
  return result;
}

uint64_t sub_135D0(uint64_t *a1)
{
  unint64_t v1;
  uint64_t v3;

  v3 = *a1;
  v1 = sub_167E8();
  swift_retain(v3);
  return EnvironmentValues.subscript.setter(&v3, &type metadata for GeometryCacheKey, &type metadata for GeometryCacheKey, v1);
}

uint64_t View.geometryCache(from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t KeyPath;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  KeyPath = swift_getKeyPath(&off_1E1160);
  v7 = type metadata accessor for GeometryCache();
  v8 = type metadata accessor for BaseObjectGraph(0);
  inject<A, B>(_:from:)(&v12, v7, a1, v7, v8);
  v9 = v12;
  v11 = v12;
  View.environment<A>(_:_:)(KeyPath, &v11, a2, a3);
  swift_release(v9);
  return swift_release(KeyPath);
}

uint64_t type metadata accessor for GeometryCache()
{
  return objc_opt_self(_TtC7BooksUI13GeometryCache);
}

uint64_t View.cacheGeometry<A>(for:referenceBuilder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v20;
  uint64_t v21;
  _BYTE v22[40];

  v21 = a5;
  v20 = a3;
  v10 = *(_QWORD *)(a4 - 8);
  __chkstk_darwin(a1);
  v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for CacheGeometryViewModifier(0, v13, v14, v13);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v20 - v17;
  sub_13830(a1, (uint64_t)v22);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a2, a4);
  sub_13878((uint64_t)v22, (uint64_t)v12, a4, a6, (uint64_t)v18);
  View.modifier<A>(_:)(v18, v20, v15, v21);
  return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v18, v15);
}

uint64_t type metadata accessor for CacheGeometryViewModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10E40(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CacheGeometryViewModifier);
}

uint64_t sub_13830(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_5440(&qword_25E530);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_13878@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD v14[3];
  _OWORD v15[2];
  char v16;

  *(_QWORD *)a5 = swift_getKeyPath(&unk_1E13D0);
  *(_BYTE *)(a5 + 40) = 0;
  *(_QWORD *)(a5 + 48) = swift_getKeyPath(&off_1E1160);
  *(_BYTE *)(a5 + 56) = 0;
  *(_QWORD *)(a5 + 64) = swift_getKeyPath(&unk_1E13F8);
  *(_BYTE *)(a5 + 72) = 0;
  memset(v15, 0, sizeof(v15));
  v16 = 1;
  sub_14B6C((uint64_t)v15, (uint64_t)v14);
  v10 = v14[1];
  *(_OWORD *)(a5 + 80) = v14[0];
  *(_OWORD *)(a5 + 96) = v10;
  *(_OWORD *)(a5 + 112) = v14[2];
  sub_167A4(a1, a5 + 128, &qword_25E530);
  v12 = type metadata accessor for CacheGeometryViewModifier(0, a3, a4, v11);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 32))(a5 + *(int *)(v12 + 52), a2, a3);
}

uint64_t View.geometryCacheNamespace()(uint64_t a1, uint64_t a2)
{
  _QWORD v3[2];

  v3[0] = 0xD000000000000024;
  v3[1] = 0x80000000001F9B60;
  return View.coordinateSpace<A>(name:)(v3, a1, &type metadata for String, a2, &protocol witness table for String);
}

uint64_t sub_139BC(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &opaque type descriptor for <<opaque return type of GenericGeometryReferenceBuilder.makeReference(context:)>>, 1);
}

unint64_t sub_139CC(uint64_t a1)
{
  unint64_t result;

  result = sub_139F0();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_139F0()
{
  unint64_t result;

  result = qword_25E560;
  if (!qword_25E560)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for GenericGeometryReferenceBuilder, &type metadata for GenericGeometryReferenceBuilder);
    atomic_store(result, (unint64_t *)&qword_25E560);
  }
  return result;
}

uint64_t dispatch thunk of HighlightAttributionViewProviding.refreshPublisher.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of GeometryReferenceBuilding.makeReference(context:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

__n128 initializeWithCopy for GeometryReferenceContext(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for GeometryReferenceContext(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 33))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 32);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for GeometryReferenceContext(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 33) = 0;
    if (a2)
      *(_BYTE *)(result + 32) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for GeometryReferenceContext()
{
  return &type metadata for GeometryReferenceContext;
}

ValueMetadata *type metadata accessor for GenericGeometryReference()
{
  return &type metadata for GenericGeometryReference;
}

ValueMetadata *type metadata accessor for GenericGeometryReferenceBuilder()
{
  return &type metadata for GenericGeometryReferenceBuilder;
}

uint64_t method lookup function for GeometryCache(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for GeometryCache);
}

uint64_t dispatch thunk of GeometryCache.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t dispatch thunk of GeometryCache.reference(forKey:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 96))();
}

_UNKNOWN **sub_13B44()
{
  return &protocol witness table for GenericGeometryReference;
}

uint64_t sub_13B50(uint64_t *a1)
{
  return sub_13C00(a1, &qword_25E620, &qword_25E628, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
}

uint64_t sub_13B6C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *a1;
  v5 = type metadata accessor for CacheGeometryViewModifier(255, a1[1], a1[3], a4);
  v6 = type metadata accessor for ModifiedContent(255, v4, v5);
  swift_getWitnessTable(&unk_1E1380, v5);
  return swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v6);
}

uint64_t sub_13BE4(uint64_t *a1)
{
  return sub_13C00(a1, &qword_25E630, &qword_25E638, (uint64_t)&protocol conformance descriptor for _CoordinateSpaceModifier<A>);
}

uint64_t sub_13C00(uint64_t *a1, uint64_t *a2, unint64_t *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v7 = *a1;
  v8 = sub_7EF8(a2);
  v9 = type metadata accessor for ModifiedContent(255, v7, v8);
  sub_7FD8(a3, a2, a4);
  return swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v9);
}

uint64_t sub_13C84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 40);
}

uint64_t sub_13C8C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[6];

  v4[0] = ")";
  v4[1] = L"\t";
  v4[2] = L"\t";
  v4[3] = &unk_1E1340;
  v4[4] = &unk_1E1358;
  result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 16));
  if (v3 <= 0x3F)
  {
    v4[5] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 0, 6, v4, a1 + 32);
    return 0;
  }
  return result;
}

uint64_t sub_13D24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  char v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  __int128 v27;
  __int128 v28;

  v4 = a1;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_DWORD *)(v6 + 80);
  if (v7 > 7
    || (*(_DWORD *)(v6 + 80) & 0x100000) != 0
    || ((v7 + 168) & (unint64_t)~v7) + *(_QWORD *)(v6 + 64) > 0x18)
  {
    v10 = *(_QWORD *)a2;
    *(_QWORD *)v4 = *(_QWORD *)a2;
    v4 = v10 + ((v7 & 0xF8 ^ 0x1F8) & (v7 + 16));
    swift_retain(v10);
  }
  else
  {
    if ((*(_BYTE *)(a2 + 40) & 1) != 0)
    {
      v11 = *(_QWORD *)(a2 + 24);
      if (v11)
      {
        v12 = *(_QWORD *)(a2 + 32);
        *(_QWORD *)(a1 + 24) = v11;
        *(_QWORD *)(a1 + 32) = v12;
        (**(void (***)(uint64_t, uint64_t))(v11 - 8))(a1, a2);
      }
      else
      {
        v14 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v14;
        *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      }
      *(_BYTE *)(v4 + 40) = 1;
    }
    else
    {
      v13 = *(_QWORD *)a2;
      *(_QWORD *)v4 = *(_QWORD *)a2;
      *(_BYTE *)(v4 + 40) = 0;
      swift_retain(v13);
    }
    v15 = v4 & 0xFFFFFFFFFFFFFFF8;
    v16 = a2 & 0xFFFFFFFFFFFFFFF8;
    v17 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 48);
    v18 = *(_BYTE *)(v16 + 56);
    j__swift_retain(v17);
    *(_QWORD *)(v15 + 48) = v17;
    *(_BYTE *)(v15 + 56) = v18;
    v19 = *(_QWORD *)(v16 + 64);
    v20 = *(_BYTE *)(v16 + 72);
    sub_F9E4(v19, v20);
    *(_QWORD *)(v15 + 64) = v19;
    *(_BYTE *)(v15 + 72) = v20;
    v21 = *(_OWORD *)(v16 + 80);
    v22 = *(_OWORD *)(v16 + 96);
    *(_BYTE *)(v15 + 112) = *(_BYTE *)(v16 + 112);
    *(_OWORD *)(v15 + 80) = v21;
    *(_OWORD *)(v15 + 96) = v22;
    v23 = *(_QWORD *)(v16 + 120);
    *(_QWORD *)(v15 + 120) = v23;
    v24 = ((v4 & 0xFFFFFFFFFFFFFFF8) + 135) & 0xFFFFFFFFFFFFFFF8;
    v25 = (v16 + 135) & 0xFFFFFFFFFFFFFFF8;
    v26 = *(_QWORD *)(v25 + 24);
    swift_retain(v23);
    if (v26 < 0xFFFFFFFF)
    {
      v27 = *(_OWORD *)v25;
      v28 = *(_OWORD *)(v25 + 16);
      *(_QWORD *)(v24 + 32) = *(_QWORD *)(v25 + 32);
      *(_OWORD *)v24 = v27;
      *(_OWORD *)(v24 + 16) = v28;
    }
    else
    {
      *(_QWORD *)(v24 + 24) = v26;
      *(_QWORD *)(v24 + 32) = *(_QWORD *)(v25 + 32);
      (**(void (***)(unint64_t, unint64_t, unint64_t))(v26 - 8))(v24, (v16 + 135) & 0xFFFFFFFFFFFFFFF8, v26);
    }
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 16))((v24 + v7 + 40) & ~v7, (v25 + v7 + 40) & ~v7, v5);
  }
  return v4;
}

uint64_t sub_13EFC(unint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _QWORD *v5;

  if ((*(_BYTE *)(a1 + 40) & 1) != 0)
  {
    if (*(_QWORD *)(a1 + 24))
      _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)a1);
  }
  else
  {
    swift_release(*(_QWORD *)a1);
  }
  v4 = a1 & 0xFFFFFFFFFFFFFFF8;
  j__swift_release(*(_QWORD *)(v4 + 48));
  sub_BE0C(*(_QWORD *)(v4 + 64), *(_BYTE *)(v4 + 72));
  swift_release(*(_QWORD *)(v4 + 120));
  v5 = (_QWORD *)((v4 + 135) & 0xFFFFFFFFFFFFFFF8);
  if (v5[3] >= 0xFFFFFFFFuLL)
    _s7BooksUI13AnyPagedFrameVwxx_0(v5);
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))(((unint64_t)v5 + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
}

uint64_t sub_13FA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;

  if ((*(_BYTE *)(a2 + 40) & 1) != 0)
  {
    v6 = *(_QWORD *)(a2 + 24);
    if (v6)
    {
      v7 = *(_QWORD *)(a2 + 32);
      *(_QWORD *)(a1 + 24) = v6;
      *(_QWORD *)(a1 + 32) = v7;
      (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1, a2);
    }
    else
    {
      v9 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v9;
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    }
    *(_BYTE *)(a1 + 40) = 1;
  }
  else
  {
    v8 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_BYTE *)(a1 + 40) = 0;
    swift_retain(v8);
  }
  v10 = a1 & 0xFFFFFFFFFFFFFFF8;
  v11 = a2 & 0xFFFFFFFFFFFFFFF8;
  v12 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 48);
  v13 = *(_BYTE *)(v11 + 56);
  j__swift_retain(v12);
  *(_QWORD *)(v10 + 48) = v12;
  *(_BYTE *)(v10 + 56) = v13;
  v14 = *(_QWORD *)(v11 + 64);
  v15 = *(_BYTE *)(v11 + 72);
  sub_F9E4(v14, v15);
  *(_QWORD *)(v10 + 64) = v14;
  *(_BYTE *)(v10 + 72) = v15;
  v16 = *(_OWORD *)(v11 + 80);
  v17 = *(_OWORD *)(v11 + 96);
  *(_BYTE *)(v10 + 112) = *(_BYTE *)(v11 + 112);
  *(_OWORD *)(v10 + 80) = v16;
  *(_OWORD *)(v10 + 96) = v17;
  v18 = *(_QWORD *)(v11 + 120);
  *(_QWORD *)(v10 + 120) = v18;
  v19 = ((a1 & 0xFFFFFFFFFFFFFFF8) + 135) & 0xFFFFFFFFFFFFFFF8;
  v20 = (v11 + 135) & 0xFFFFFFFFFFFFFFF8;
  v21 = *(_QWORD *)(v20 + 24);
  swift_retain(v18);
  if (v21 < 0xFFFFFFFF)
  {
    v22 = *(_OWORD *)v20;
    v23 = *(_OWORD *)(v20 + 16);
    *(_QWORD *)(v19 + 32) = *(_QWORD *)(v20 + 32);
    *(_OWORD *)v19 = v22;
    *(_OWORD *)(v19 + 16) = v23;
  }
  else
  {
    *(_QWORD *)(v19 + 24) = v21;
    *(_QWORD *)(v19 + 32) = *(_QWORD *)(v20 + 32);
    (**(void (***)(unint64_t, unint64_t, unint64_t))(v21 - 8))(v19, (v11 + 135) & 0xFFFFFFFFFFFFFFF8, v21);
  }
  v24 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v24 + 16))((v19 + *(unsigned __int8 *)(v24 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80), (v20 + *(unsigned __int8 *)(v24 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80));
  return a1;
}

uint64_t sub_14118(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;

  if (a1 != a2)
  {
    sub_B414(a1, qword_25E640);
    if ((*(_BYTE *)(a2 + 40) & 1) != 0)
    {
      v6 = *(_QWORD *)(a2 + 24);
      if (v6)
      {
        *(_QWORD *)(a1 + 24) = v6;
        *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
        (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1, a2);
      }
      else
      {
        v8 = *(_OWORD *)a2;
        v9 = *(_OWORD *)(a2 + 16);
        *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
        *(_OWORD *)a1 = v8;
        *(_OWORD *)(a1 + 16) = v9;
      }
      *(_BYTE *)(a1 + 40) = 1;
    }
    else
    {
      v7 = *(_QWORD *)a2;
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_BYTE *)(a1 + 40) = 0;
      swift_retain(v7);
    }
  }
  v10 = a1 & 0xFFFFFFFFFFFFFFF8;
  v11 = a2 & 0xFFFFFFFFFFFFFFF8;
  v12 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 48);
  v13 = *(_BYTE *)(v11 + 56);
  j__swift_retain(v12);
  v14 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + 48);
  *(_QWORD *)(v10 + 48) = v12;
  *(_BYTE *)(v10 + 56) = v13;
  j__swift_release(v14);
  v15 = *(_QWORD *)(v11 + 64);
  v16 = *(_BYTE *)(v11 + 72);
  sub_F9E4(v15, v16);
  v17 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + 64);
  v18 = *(_BYTE *)((a1 & 0xFFFFFFFFFFFFFFF8) + 72);
  *(_QWORD *)(v10 + 64) = v15;
  *(_BYTE *)(v10 + 72) = v16;
  sub_BE0C(v17, v18);
  v19 = *(_OWORD *)(v11 + 80);
  v20 = *(_OWORD *)(v11 + 96);
  *(_BYTE *)(v10 + 112) = *(_BYTE *)(v11 + 112);
  *(_OWORD *)(v10 + 80) = v19;
  *(_OWORD *)(v10 + 96) = v20;
  v21 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + 120);
  v22 = *(_QWORD *)(v11 + 120);
  *(_QWORD *)(v10 + 120) = v22;
  swift_retain(v22);
  swift_release(v21);
  v23 = ((a1 & 0xFFFFFFFFFFFFFFF8) + 135) & 0xFFFFFFFFFFFFFFF8;
  v24 = (v11 + 135) & 0xFFFFFFFFFFFFFFF8;
  v25 = *(_QWORD *)(v24 + 24);
  if (*(_QWORD *)(v23 + 24) < 0xFFFFFFFFuLL)
  {
    if (v25 >= 0xFFFFFFFF)
    {
      *(_QWORD *)(v23 + 24) = v25;
      *(_QWORD *)(v23 + 32) = *(_QWORD *)(v24 + 32);
      (**(void (***)(unint64_t, unint64_t))(v25 - 8))((v10 + 135) & 0xFFFFFFFFFFFFFFF8, (v11 + 135) & 0xFFFFFFFFFFFFFFF8);
      goto LABEL_15;
    }
LABEL_14:
    v27 = *(_OWORD *)v24;
    v28 = *(_OWORD *)(v24 + 16);
    *(_QWORD *)(v23 + 32) = *(_QWORD *)(v24 + 32);
    *(_OWORD *)v23 = v27;
    *(_OWORD *)(v23 + 16) = v28;
    goto LABEL_15;
  }
  v26 = (_QWORD *)((v10 + 135) & 0xFFFFFFFFFFFFFFF8);
  if (v25 < 0xFFFFFFFF)
  {
    _s7BooksUI13AnyPagedFrameVwxx_0(v26);
    goto LABEL_14;
  }
  sub_142F8(v26, (_QWORD *)((v11 + 135) & 0xFFFFFFFFFFFFFFF8));
LABEL_15:
  v29 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v29 + 24))((v23 + *(unsigned __int8 *)(v29 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80), (v24 + *(unsigned __int8 *)(v29 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80));
  return a1;
}

_QWORD *sub_142F8(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[24];

  if (result != a2)
  {
    v3 = result;
    v4 = result[3];
    v5 = a2[3];
    if (v4 == v5)
    {
      v9 = *(_QWORD *)(v4 - 8);
      if ((*(_BYTE *)(v9 + 82) & 2) != 0)
      {
        v11 = *result;
        v12 = *a2;
        swift_retain(*a2);
        result = (_QWORD *)swift_release(v11);
        *v3 = v12;
      }
      else
      {
        return (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD *, _QWORD))(v9 + 24))(result, a2, result[3]);
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      v6 = *(_QWORD *)(v4 - 8);
      v7 = *(_QWORD *)(v5 - 8);
      v8 = *(_DWORD *)(v7 + 80);
      if ((*(_BYTE *)(v6 + 82) & 2) != 0)
      {
        v10 = *result;
        if ((v8 & 0x20000) != 0)
        {
          v14 = *a2;
          *v3 = *a2;
          swift_retain(v14);
        }
        else
        {
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (_QWORD *)swift_release(v10);
      }
      else
      {
        (*(void (**)(_BYTE *, _QWORD *, uint64_t))(v6 + 32))(v15, result, v4);
        if ((v8 & 0x20000) != 0)
        {
          v13 = *a2;
          *v3 = *a2;
          swift_retain(v13);
        }
        else
        {
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 16))(v3, a2, v5);
        }
        return (_QWORD *)(*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v15, v4);
      }
    }
  }
  return result;
}

unint64_t sub_14460(unint64_t a1, unint64_t a2, uint64_t a3)
{
  __int128 v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  v5 = a1 & 0xFFFFFFFFFFFFFFF8;
  v6 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 48);
  *(_BYTE *)(v5 + 56) = *(_BYTE *)((a2 & 0xFFFFFFFFFFFFFFF8) + 56);
  *(_QWORD *)(v5 + 48) = v6;
  v7 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 64);
  *(_BYTE *)(v5 + 72) = *(_BYTE *)((a2 & 0xFFFFFFFFFFFFFFF8) + 72);
  *(_QWORD *)(v5 + 64) = v7;
  v8 = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 80);
  v9 = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 112);
  *(_OWORD *)(v5 + 96) = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 96);
  *(_OWORD *)(v5 + 112) = v9;
  *(_OWORD *)(v5 + 80) = v8;
  v10 = ((a1 & 0xFFFFFFFFFFFFFFF8) + 135) & 0xFFFFFFFFFFFFFFF8;
  v11 = ((a2 & 0xFFFFFFFFFFFFFFF8) + 135) & 0xFFFFFFFFFFFFFFF8;
  v12 = *(_OWORD *)v11;
  v13 = *(_OWORD *)(v11 + 16);
  *(_QWORD *)(v10 + 32) = *(_QWORD *)(v11 + 32);
  *(_OWORD *)v10 = v12;
  *(_OWORD *)(v10 + 16) = v13;
  v14 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v14 + 32))((v10 + *(unsigned __int8 *)(v14 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80), (v11 + *(unsigned __int8 *)(v14 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
  return a1;
}

uint64_t sub_14514(uint64_t a1, unint64_t a2, uint64_t a3)
{
  __int128 v6;
  unint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;

  if (a1 != a2)
  {
    sub_B414(a1, qword_25E640);
    v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v6;
    *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  }
  v7 = a1 & 0xFFFFFFFFFFFFFFF8;
  v8 = a2 & 0xFFFFFFFFFFFFFFF8;
  v9 = *(_BYTE *)((a2 & 0xFFFFFFFFFFFFFFF8) + 56);
  v10 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + 48);
  *(_QWORD *)(v7 + 48) = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 48);
  *(_BYTE *)(v7 + 56) = v9;
  j__swift_release(v10);
  v11 = *(_BYTE *)((a2 & 0xFFFFFFFFFFFFFFF8) + 72);
  v12 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + 64);
  v13 = *(_BYTE *)((a1 & 0xFFFFFFFFFFFFFFF8) + 72);
  *(_QWORD *)(v7 + 64) = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 64);
  *(_BYTE *)(v7 + 72) = v11;
  sub_BE0C(v12, v13);
  v14 = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 80);
  v15 = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 96);
  *(_BYTE *)(v7 + 112) = *(_BYTE *)((a2 & 0xFFFFFFFFFFFFFFF8) + 112);
  *(_OWORD *)(v7 + 80) = v14;
  *(_OWORD *)(v7 + 96) = v15;
  v16 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + 120);
  *(_QWORD *)(v7 + 120) = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 120);
  swift_release(v16);
  v17 = ((a1 & 0xFFFFFFFFFFFFFFF8) + 135) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v17 + 24) >= 0xFFFFFFFFuLL)
    _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)((v7 + 135) & 0xFFFFFFFFFFFFFFF8));
  v18 = (v8 + 135) & 0xFFFFFFFFFFFFFFF8;
  v19 = *(_OWORD *)v18;
  v20 = *(_OWORD *)(v18 + 16);
  *(_QWORD *)(v17 + 32) = *(_QWORD *)(v18 + 32);
  *(_OWORD *)v17 = v19;
  *(_OWORD *)(v17 + 16) = v20;
  v21 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v21 + 40))((v17 + *(unsigned __int8 *)(v21 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80), (v18 + *(unsigned __int8 *)(v21 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80));
  return a1;
}

uint64_t sub_14638(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  int v17;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFE)
    v6 = 2147483646;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_22;
  v9 = ((v7 + 168) & ~v7) + *(_QWORD *)(v4 + 64);
  v10 = 8 * (((v7 - 88) & ~(_BYTE)v7) + *(_BYTE *)(v4 + 64));
  if (v9 <= 3)
  {
    v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      v11 = *(_DWORD *)(a1 + v9);
      if (!v11)
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      v11 = *(unsigned __int16 *)(a1 + v9);
      if (!*(_WORD *)(a1 + v9))
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_22:
      v15 = a1 & 0xFFFFFFFFFFFFFFF8;
      if (v5 > 0x7FFFFFFE)
        return (*(uint64_t (**)(unint64_t))(v4 + 48))((((v15 + 135) & 0xFFFFFFFFFFFFFFF8) + v7 + 40) & ~v7);
      v16 = *(_QWORD *)(v15 + 120);
      if (v16 >= 0xFFFFFFFF)
        LODWORD(v16) = -1;
      v17 = v16 - 1;
      if (v17 < 0)
        v17 = -1;
      return (v17 + 1);
    }
  }
  v11 = *(unsigned __int8 *)(a1 + v9);
  if (!*(_BYTE *)(a1 + v9))
    goto LABEL_22;
LABEL_15:
  v14 = (v11 - 1) << v10;
  if (v9 > 3)
    v14 = 0;
  if (!(_DWORD)v9)
    return v6 + v14 + 1;
  if (v9 > 3)
    LODWORD(v9) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1470C + 4 * byte_1E1150[(v9 - 1)]))();
}

void sub_1479C(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFEu)
    v6 = 2147483646;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((*(unsigned __int8 *)(v5 + 80) + 168) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
     + *(_QWORD *)(v5 + 64);
  if (a3 > v6)
  {
    if (v7 <= 3)
    {
      v10 = ((a3 - v6 + ~(-1 << (8 * v7))) >> (8 * v7)) + 1;
      if (HIWORD(v10))
      {
        v8 = &dword_4;
      }
      else if (v10 >= 0x100)
      {
        v8 = 2;
      }
      else
      {
        v8 = v10 > 1;
      }
    }
    else
    {
      v8 = &dword_0 + 1;
    }
  }
  else
  {
    v8 = 0;
  }
  if (v6 < a2)
  {
    v9 = ~v6 + a2;
    if (v7 < 4)
    {
      if ((_DWORD)v7)
      {
        v11 = v9 & ~(-1 << (8 * (((*(_BYTE *)(v5 + 80) - 88) & ~*(_BYTE *)(v5 + 80)) + *(_BYTE *)(v5 + 64))));
        bzero(a1, v7);
        if ((_DWORD)v7 == 3)
        {
          *a1 = v11;
          *((_BYTE *)a1 + 2) = BYTE2(v11);
        }
        else if ((_DWORD)v7 == 2)
        {
          *a1 = v11;
        }
        else
        {
          *(_BYTE *)a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v7);
      *(_DWORD *)a1 = v9;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

uint64_t sub_149C0(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  return swift_getOpaqueTypeConformance2(&v3, &unk_22A3E4, 1);
}

BOOL sub_149F4(uint64_t a1, uint64_t a2)
{
  char v4;
  _OWORD v6[2];
  uint64_t v7;
  _BYTE v8[40];
  _BYTE v9[24];
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  _BYTE v14[40];
  _BYTE v15[40];

  sub_13830(a1, (uint64_t)v15);
  sub_13830(a2, (uint64_t)v14);
  sub_13830((uint64_t)v15, (uint64_t)v9);
  sub_13830((uint64_t)v14, (uint64_t)&v11);
  if (v10)
  {
    sub_13830((uint64_t)v9, (uint64_t)v8);
    if (*((_QWORD *)&v12 + 1))
    {
      v6[0] = v11;
      v6[1] = v12;
      v7 = v13;
      v4 = static AnyHashable.== infix(_:_:)(v8, v6);
      sub_AC34((uint64_t)v6);
      sub_B414((uint64_t)v14, &qword_25E530);
      sub_B414((uint64_t)v15, &qword_25E530);
      sub_AC34((uint64_t)v8);
      sub_B414((uint64_t)v9, &qword_25E530);
      if ((v4 & 1) == 0)
        return 0;
      return CGRectEqualToRect(*(CGRect *)(a1 + 40), *(CGRect *)(a2 + 40));
    }
    sub_B414((uint64_t)v14, &qword_25E530);
    sub_B414((uint64_t)v15, &qword_25E530);
    sub_AC34((uint64_t)v8);
  }
  else
  {
    sub_B414((uint64_t)v14, &qword_25E530);
    sub_B414((uint64_t)v15, &qword_25E530);
    if (!*((_QWORD *)&v12 + 1))
    {
      sub_B414((uint64_t)v9, &qword_25E530);
      return CGRectEqualToRect(*(CGRect *)(a1 + 40), *(CGRect *)(a2 + 40));
    }
  }
  sub_B414((uint64_t)v9, &qword_25E768);
  return 0;
}

double sub_14B6C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  double result;
  __int128 v7;
  _BYTE v8[40];
  _OWORD v9[2];
  char v10;
  uint64_t v11;

  sub_167A4(a1, (uint64_t)v8, &qword_25E6D8);
  v3 = sub_5440(&qword_25E6D8);
  State.init(wrappedValue:)(v9, v8, v3);
  v4 = v10;
  v5 = v11;
  result = *(double *)v9;
  v7 = v9[1];
  *(_OWORD *)a2 = v9[0];
  *(_OWORD *)(a2 + 16) = v7;
  *(_BYTE *)(a2 + 32) = v4;
  *(_QWORD *)(a2 + 40) = v5;
  return result;
}

BOOL sub_14BD4(uint64_t a1, uint64_t a2)
{
  return sub_149F4(a1, a2);
}

uint64_t sub_14BE0@<X0>(void (*a1)(char *, unint64_t, uint64_t)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t WitnessTable;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t OpaqueTypeMetadata2;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void (*v61)(uint64_t, char *, uint64_t);
  char *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void (*v80)(char *, uint64_t);
  uint64_t v81;
  uint64_t OpaqueTypeConformance2;
  uint64_t v83;
  uint64_t v84;
  void (*v85)(uint64_t, uint64_t);
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void (*v91)(uint64_t, uint64_t);
  uint64_t v92;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  void (*v118)(char *, unint64_t, uint64_t);
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  void *v138;
  uint64_t v139;
  void *v140;
  uint64_t v141;
  uint64_t v142;
  void *v143;
  uint64_t v144;

  v118 = a1;
  v124 = a3;
  WitnessTable = swift_getWitnessTable(&unk_1E1380, a2);
  v5 = type metadata accessor for _ViewModifier_Content(0, a2, WitnessTable);
  v99 = *(_QWORD *)(v5 - 8);
  v6 = __chkstk_darwin(v5);
  v98 = (char *)&v94 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v6);
  v97 = (char *)&v94 - v9;
  v10 = *(_QWORD *)(a2 + 16);
  v114 = *(_QWORD *)(v10 - 8);
  v11 = __chkstk_darwin(v8);
  v113 = (char *)&v94 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v108 = *(_QWORD *)(a2 - 8);
  __chkstk_darwin(v11);
  v116 = v13;
  v111 = (char *)&v94 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v112 = a2;
  v14 = *(_QWORD *)(a2 + 24);
  v16 = type metadata accessor for CacheGeometryViewModifier.KeyFramePair(255, v10, v14, v15);
  v17 = swift_getWitnessTable(&unk_1E14A0, v16);
  v18 = type metadata accessor for _GeometryActionModifier(255, v16, v17);
  v19 = type metadata accessor for ModifiedContent(255, &type metadata for EmptyView, v18);
  v20 = swift_getWitnessTable(&protocol conformance descriptor for _GeometryActionModifier<A>, v18);
  v143 = &protocol witness table for EmptyView;
  v144 = v20;
  v21 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v19);
  v117 = v19;
  v101 = v21;
  v22 = type metadata accessor for _BackgroundModifier(255, v19);
  v23 = type metadata accessor for ModifiedContent(0, v5, v22);
  v103 = *(_QWORD *)(v23 - 8);
  __chkstk_darwin(v23);
  v102 = (char *)&v94 - v24;
  v25 = type metadata accessor for ModifiedContent(0, v23, &type metadata for _AppearanceActionModifier);
  v106 = *(_QWORD *)(v25 - 8);
  __chkstk_darwin(v25);
  v105 = (char *)&v94 - v26;
  v27 = type metadata accessor for ModifiedContent(0, v25, &type metadata for _AppearanceActionModifier);
  v110 = *(_QWORD *)(v27 - 8);
  __chkstk_darwin(v27);
  v109 = (char *)&v94 - v28;
  v29 = swift_getWitnessTable(&protocol conformance descriptor for _ViewModifier_Content<A>, v5);
  v30 = swift_getWitnessTable(&protocol conformance descriptor for _BackgroundModifier<A>, v22);
  v127 = v29;
  v141 = v29;
  v142 = v30;
  v104 = v23;
  v31 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v23);
  v139 = v31;
  v140 = &protocol witness table for _AppearanceActionModifier;
  v107 = v25;
  v100 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v25);
  v137 = v100;
  v138 = &protocol witness table for _AppearanceActionModifier;
  v32 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v27);
  v128 = v27;
  v129 = v14;
  v33 = *(_QWORD *)(v14 + 8);
  v133 = v27;
  v134 = v10;
  v130 = v10;
  v123 = v32;
  v135 = v32;
  v136 = v33;
  v122 = v33;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(0, &v133, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 0);
  v35 = *(_QWORD *)(OpaqueTypeMetadata2 - 8);
  v36 = __chkstk_darwin(OpaqueTypeMetadata2);
  v38 = (char *)&v94 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v36);
  v40 = (char *)&v94 - v39;
  v125 = v5;
  v121 = type metadata accessor for _ConditionalContent(0, OpaqueTypeMetadata2, v5);
  v120 = *(_QWORD *)(v121 - 8);
  __chkstk_darwin(v121);
  v119 = (char *)&v94 - v41;
  v42 = *(_QWORD *)(v126 + 48);
  v43 = v126;
  LOBYTE(v22) = *(_BYTE *)(v126 + 56);
  j__swift_retain(v42);
  v44 = sub_30BC8(v42, v22);
  v45 = j__swift_release(v42);
  if (v44)
  {
    v99 = OpaqueTypeMetadata2;
    __chkstk_darwin(v45);
    v98 = v40;
    v46 = v129;
    v47 = v130;
    *(&v94 - 4) = v130;
    *(&v94 - 3) = v46;
    v48 = v43;
    *(&v94 - 2) = v43;
    *(&v94 - 1) = v44;
    v49 = _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0();
    v96 = v31;
    v50 = v102;
    View.background<A>(alignment:content:)(v49);
    v51 = v108;
    v118 = *(void (**)(char *, unint64_t, uint64_t))(v108 + 16);
    v97 = v38;
    v52 = v111;
    v101 = v35;
    v53 = v112;
    v118(v111, v48, v112);
    v54 = *(unsigned __int8 *)(v51 + 80);
    v55 = (v54 + 32) & ~v54;
    v56 = v54 | 7;
    v117 = v54 | 7;
    v57 = (v116 + v55 + 7) & 0xFFFFFFFFFFFFFFF8;
    v116 = v57 + 8;
    v58 = v57;
    v94 = v57;
    v59 = swift_allocObject(&unk_24B880, v57 + 8, v56);
    v60 = v129;
    *(_QWORD *)(v59 + 16) = v47;
    *(_QWORD *)(v59 + 24) = v60;
    v95 = v55;
    v61 = *(void (**)(uint64_t, char *, uint64_t))(v51 + 32);
    v61(v59 + v55, v52, v53);
    *(_QWORD *)(v59 + v58) = v44;
    swift_retain(v44);
    v62 = v105;
    v63 = v104;
    View.onDisappear(perform:)(sub_16350, v59, v104, v96);
    swift_release(v59);
    (*(void (**)(char *, uint64_t))(v103 + 8))(v50, v63);
    v64 = v126;
    v118(v52, v126, v53);
    v65 = swift_allocObject(&unk_24B8A8, v116, v117);
    v66 = v129;
    *(_QWORD *)(v65 + 16) = v130;
    *(_QWORD *)(v65 + 24) = v66;
    v61(v65 + v55, v52, v53);
    v67 = v94;
    *(_QWORD *)(v65 + v94) = v44;
    swift_retain(v44);
    v115 = v44;
    v68 = v109;
    v69 = v107;
    View.onAppear(perform:)(sub_16360, v65, v107, v100);
    swift_release(v65);
    (*(void (**)(char *, uint64_t))(v106 + 8))(v62, v69);
    v70 = v114;
    v71 = v113;
    (*(void (**)(char *, unint64_t, uint64_t))(v114 + 16))(v113, v64 + *(int *)(v53 + 52), v130);
    v118(v52, v64, v53);
    v72 = swift_allocObject(&unk_24B8D0, v116, v117);
    v73 = v129;
    *(_QWORD *)(v72 + 16) = v130;
    *(_QWORD *)(v72 + 24) = v73;
    v61(v72 + v95, v52, v53);
    v74 = v130;
    v75 = v115;
    *(_QWORD *)(v72 + v67) = v115;
    v76 = v128;
    swift_retain(v75);
    v77 = (uint64_t)v97;
    v78 = v123;
    v79 = v122;
    View.onChange<A>(of:initial:_:)(v71, 0, sub_163E4, v72, v76, v74, v123, v122);
    swift_release(v72);
    v80 = *(void (**)(char *, uint64_t))(v70 + 8);
    v81 = v127;
    v80(v71, v74);
    (*(void (**)(char *, uint64_t))(v110 + 8))(v68, v76);
    v133 = v76;
    v134 = v74;
    v135 = v78;
    v136 = v79;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v133, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
    v83 = (uint64_t)v98;
    v84 = v99;
    sub_10F80(v77, v99, (uint64_t)v98);
    v85 = *(void (**)(uint64_t, uint64_t))(v101 + 8);
    v85(v77, v84);
    sub_C5C0(v83, v84, v77);
    v86 = (uint64_t)v119;
    sub_17C7C(v77, v84, v125, OpaqueTypeConformance2, v81);
    swift_release(v115);
    v85(v77, v84);
    v85(v83, v84);
  }
  else
  {
    v87 = (uint64_t)v97;
    v88 = v125;
    v81 = v127;
    sub_10F80((uint64_t)v118, v125, (uint64_t)v97);
    v89 = (uint64_t)v98;
    sub_C5C0(v87, v88, (uint64_t)v98);
    v133 = v128;
    v134 = v130;
    v78 = v123;
    v79 = v122;
    v135 = v123;
    v136 = v122;
    v90 = swift_getOpaqueTypeConformance2(&v133, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
    v86 = (uint64_t)v119;
    sub_17D40(v89, OpaqueTypeMetadata2, v88, v90, v81);
    v91 = *(void (**)(uint64_t, uint64_t))(v99 + 8);
    v91(v89, v88);
    v91(v87, v88);
  }
  v133 = v128;
  v134 = v130;
  v135 = v78;
  v136 = v79;
  v131 = swift_getOpaqueTypeConformance2(&v133, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
  v132 = v81;
  v92 = v121;
  swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v121);
  sub_C5C0(v86, v92, v124);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v120 + 8))(v86, v92);
}

uint64_t sub_155EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, char *, uint64_t);
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t WitnessTable;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;

  v33 = a1;
  *(_QWORD *)&v34 = a2;
  v35 = a5;
  v8 = type metadata accessor for CacheGeometryViewModifier(0, a3, a4, a4);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  __chkstk_darwin(v8);
  v12 = (char *)&v32 - v11;
  v13 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v13((char *)&v32 - v11, a1, v8);
  v14 = *(unsigned __int8 *)(v9 + 80);
  v15 = (v14 + 32) & ~v14;
  v16 = v15 + v10;
  v17 = v14 | 7;
  v18 = swift_allocObject(&unk_24B8F8, v15 + v10, v14 | 7);
  *(_QWORD *)(v18 + 16) = a3;
  *(_QWORD *)(v18 + 24) = a4;
  v19 = *(void (**)(uint64_t, char *, uint64_t))(v9 + 32);
  v19(v18 + v15, v12, v8);
  v13(v12, v33, v8);
  v20 = (v16 + 7) & 0xFFFFFFFFFFFFFFF8;
  v21 = swift_allocObject(&unk_24B920, v20 + 8, v17);
  *(_QWORD *)(v21 + 16) = a3;
  *(_QWORD *)(v21 + 24) = a4;
  v19(v21 + v15, v12, v8);
  v22 = v34;
  *(_QWORD *)(v21 + v20) = v34;
  v24 = type metadata accessor for CacheGeometryViewModifier.KeyFramePair(0, a3, a4, v23);
  swift_retain(v22);
  WitnessTable = swift_getWitnessTable(&unk_1E14A0, v24);
  View.onGeometryChange<A>(of:do:)(sub_165CC, v18, sub_16728, v21, &type metadata for EmptyView, v24, &protocol witness table for EmptyView, WitnessTable);
  swift_release(v18);
  swift_release(v21);
  v26 = v43;
  v38 = v41;
  v34 = v42;
  v39 = v42;
  v40 = v43;
  v27 = type metadata accessor for _GeometryActionModifier(255, v24, WitnessTable);
  v28 = type metadata accessor for ModifiedContent(0, &type metadata for EmptyView, v27);
  v29 = swift_getWitnessTable(&protocol conformance descriptor for _GeometryActionModifier<A>, v27);
  v36 = &protocol witness table for EmptyView;
  v37 = v29;
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v28);
  sub_10F80((uint64_t)&v38, v28, (uint64_t)&v44);
  swift_release(v26);
  swift_release(v34);
  v30 = v46;
  v41 = v44;
  v34 = v45;
  v42 = v45;
  v43 = v46;
  sub_C5C0((uint64_t)&v41, v28, v35);
  swift_release(v30);
  return swift_release(v34);
}

uint64_t sub_15880@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, double *a4@<X8>)
{
  uint64_t v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  _BYTE v16[40];

  sub_13830(a1 + 128, (uint64_t)v16);
  type metadata accessor for CacheGeometryViewModifier(0, a2, a3, v7);
  v8 = sub_1592C();
  v10 = v9;
  v12 = v11;
  v14 = v13;
  result = sub_167A4((uint64_t)v16, (uint64_t)a4, &qword_25E530);
  a4[5] = v8;
  *((_QWORD *)a4 + 6) = v10;
  *((_QWORD *)a4 + 7) = v12;
  *((_QWORD *)a4 + 8) = v14;
  return result;
}

double sub_1592C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v21;
  uint64_t v22;
  _QWORD v23[3];
  uint64_t v24;
  uint64_t v25;

  v1 = type metadata accessor for GlobalCoordinateSpace(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_30D88((uint64_t)&v21);
  if (v22)
  {
    sub_AC68(&v21, (uint64_t)v23);
    v5 = *(_QWORD *)(v0 + 64);
    v6 = *(_BYTE *)(v0 + 72);
    sub_F9E4(v5, v6);
    v7 = sub_30DB4(v5, v6);
    sub_BE0C(v5, v6);
    if ((v7 & 1) != 0)
    {
      v8 = v24;
      v9 = v25;
      sub_5480(v23, v24);
      static CoordinateSpaceProtocol<>.global.getter();
      v10 = GeometryProxy.frame<A>(in:)(v4, v1, &protocol witness table for GlobalCoordinateSpace);
      v12 = v11;
      v14 = v13;
      v16 = v15;
      (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
      v17 = (*(double (**)(uint64_t, uint64_t, double, double, double, double))(v9 + 8))(v8, v9, v10, v12, v14, v16);
      _s7BooksUI13AnyPagedFrameVwxx_0(v23);
      return v17;
    }
    _s7BooksUI13AnyPagedFrameVwxx_0(v23);
  }
  else
  {
    sub_B414((uint64_t)&v21, &qword_25E6D0);
  }
  if (qword_25DB28 != -1)
    swift_once(&qword_25DB28, sub_1629C);
  v18 = type metadata accessor for CoordinateSpace(0);
  v19 = sub_7120(v18, (uint64_t)qword_25E510);
  return GeometryProxy.frame(in:)(v19);
}

uint64_t sub_15B14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t AssociatedConformanceWitness;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  _OWORD v26[2];
  uint64_t v27;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a5, a4, &protocol requirements base descriptor for GeometryReferenceBuilding, &associated type descriptor for GeometryReferenceBuilding.ReferenceType);
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  v13 = (char *)&v22 - v12;
  sub_13830(a1, (uint64_t)&v23);
  if (!*((_QWORD *)&v24 + 1))
    return sub_B414((uint64_t)&v23, &qword_25E530);
  v26[0] = v23;
  v26[1] = v24;
  v27 = v25;
  v22 = *(_OWORD *)(a1 + 40);
  v14 = *(_QWORD *)(a1 + 56);
  v15 = *(_QWORD *)(a1 + 64);
  v16 = *(_QWORD *)(a2 + 64);
  v17 = *(_BYTE *)(a2 + 72);
  sub_F9E4(v16, v17);
  v18 = sub_30DB4(v16, v17);
  sub_BE0C(v16, v17);
  type metadata accessor for CacheGeometryViewModifier(0, a4, a5, v19);
  v23 = v22;
  *(_QWORD *)&v24 = v14;
  *((_QWORD *)&v24 + 1) = v15;
  LOBYTE(v25) = v18 & 1;
  (*(void (**)(__int128 *, uint64_t, uint64_t))(a5 + 32))(&v23, a4, a5);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a5, a4, AssociatedTypeWitness, &protocol requirements base descriptor for GeometryReferenceBuilding, &associated conformance descriptor for GeometryReferenceBuilding.GeometryReferenceBuilding.ReferenceType: GeometryReference);
  sub_16460((uint64_t)v13, (uint64_t)v26, a3, AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, AssociatedTypeWitness);
  return sub_AC34((uint64_t)v26);
}

uint64_t sub_15CC8(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_s *v4;
  uint64_t *v5;
  os_unfair_lock_s *v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  _OWORD v25[2];
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;

  sub_13830(a1 + 128, (uint64_t)&v21);
  if (!*((_QWORD *)&v22 + 1))
    return sub_B414((uint64_t)&v21, &qword_25E530);
  v25[0] = v21;
  v25[1] = v22;
  v26 = v23;
  v4 = *(os_unfair_lock_s **)(a2 + 16);
  v5 = (uint64_t *)&v4[4];
  v6 = v4 + 6;
  os_unfair_lock_lock(v4 + 6);
  sub_13280(v5, (uint64_t)v25, (uint64_t)&v21);
  os_unfair_lock_unlock(v6);
  v7 = *((_QWORD *)&v22 + 1);
  if (*((_QWORD *)&v22 + 1))
  {
    v8 = v23;
    sub_5480(&v21, *((uint64_t *)&v22 + 1));
    v9 = (*(double (**)(uint64_t, uint64_t))(v8 + 8))(v7, v8);
    v11 = v10;
    v13 = v12;
    v15 = v14;
    _s7BooksUI13AnyPagedFrameVwxx_0(&v21);
  }
  else
  {
    sub_B414((uint64_t)&v21, &qword_25DFD0);
    v9 = 0.0;
    v11 = 0;
    v13 = 0;
    v15 = 0;
  }
  v17 = *(_BYTE *)(a1 + 112);
  v18 = *(_QWORD *)(a1 + 120);
  v19 = *(_OWORD *)(a1 + 96);
  v21 = *(_OWORD *)(a1 + 80);
  v22 = v19;
  LOBYTE(v23) = v17;
  v24 = v18;
  *(double *)&v27 = v9;
  *((_QWORD *)&v27 + 1) = v11;
  *(_QWORD *)&v28 = v13;
  *((_QWORD *)&v28 + 1) = v15;
  LOBYTE(v29) = v7 == 0;
  v20 = sub_5440(&qword_25E6C8);
  State.wrappedValue.setter(&v27, v20);
  os_unfair_lock_lock(v6);
  sub_B1FC((uint64_t)v25, (uint64_t)&v21);
  v29 = 0;
  v27 = 0u;
  v28 = 0u;
  sub_8C5C((uint64_t)&v27, (uint64_t)&v21);
  os_unfair_lock_unlock(v6);
  return sub_AC34((uint64_t)v25);
}

uint64_t sub_15E80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  uint64_t AssociatedConformanceWitness;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[4];
  char v31;
  _OWORD v32[2];
  uint64_t v33;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a4, a3, &protocol requirements base descriptor for GeometryReferenceBuilding, &associated type descriptor for GeometryReferenceBuilding.ReferenceType);
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  v11 = (char *)&v26 - v10;
  sub_13830(a1 + 128, (uint64_t)&v26);
  if (!*((_QWORD *)&v27 + 1))
    return sub_B414((uint64_t)&v26, &qword_25E530);
  v32[0] = v26;
  v32[1] = v27;
  v33 = v28;
  v12 = *(_BYTE *)(a1 + 112);
  v13 = *(_QWORD *)(a1 + 120);
  v14 = *(_OWORD *)(a1 + 96);
  v26 = *(_OWORD *)(a1 + 80);
  v27 = v14;
  LOBYTE(v28) = v12;
  v29 = v13;
  v15 = sub_5440(&qword_25E6C8);
  State.wrappedValue.getter(v30, v15);
  if ((v31 & 1) == 0)
  {
    v16 = v30[0];
    v17 = v30[1];
    v18 = v30[2];
    v19 = v30[3];
    v20 = *(_QWORD *)(a1 + 64);
    v21 = *(_BYTE *)(a1 + 72);
    sub_F9E4(v20, v21);
    v22 = sub_30DB4(v20, v21);
    sub_BE0C(v20, v21);
    type metadata accessor for CacheGeometryViewModifier(0, a3, a4, v23);
    *(_QWORD *)&v26 = v16;
    *((_QWORD *)&v26 + 1) = v17;
    *(_QWORD *)&v27 = v18;
    *((_QWORD *)&v27 + 1) = v19;
    LOBYTE(v28) = v22 & 1;
    (*(void (**)(__int128 *, uint64_t, uint64_t))(a4 + 32))(&v26, a3, a4);
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a4, a3, AssociatedTypeWitness, &protocol requirements base descriptor for GeometryReferenceBuilding, &associated conformance descriptor for GeometryReferenceBuilding.GeometryReferenceBuilding.ReferenceType: GeometryReference);
    sub_16460((uint64_t)v11, (uint64_t)v32, a2, AssociatedTypeWitness, AssociatedConformanceWitness);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, AssociatedTypeWitness);
  }
  return sub_AC34((uint64_t)v32);
}

uint64_t sub_16060(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  os_unfair_lock_s *v15;
  uint64_t *v16;
  os_unfair_lock_s *v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char v29;
  uint64_t AssociatedConformanceWitness;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  _OWORD v37[2];
  uint64_t v38;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a6, a5, &protocol requirements base descriptor for GeometryReferenceBuilding, &associated type descriptor for GeometryReferenceBuilding.ReferenceType);
  v12 = *(_QWORD *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  v14 = (char *)&v32 - v13;
  sub_13830(a3 + 128, (uint64_t)&v34);
  if (!*((_QWORD *)&v35 + 1))
    return sub_B414((uint64_t)&v34, &qword_25E530);
  v32 = a2;
  v33 = a4;
  v37[0] = v34;
  v37[1] = v35;
  v38 = v36;
  v15 = *(os_unfair_lock_s **)(a4 + 16);
  v16 = (uint64_t *)&v15[4];
  v17 = v15 + 6;
  os_unfair_lock_lock(v15 + 6);
  sub_13280(v16, (uint64_t)v37, (uint64_t)&v34);
  os_unfair_lock_unlock(v17);
  v18 = *((_QWORD *)&v35 + 1);
  if (*((_QWORD *)&v35 + 1))
  {
    v19 = v36;
    sub_5480(&v34, *((uint64_t *)&v35 + 1));
    v20 = (*(double (**)(uint64_t, uint64_t))(v19 + 8))(v18, v19);
    v22 = v21;
    v24 = v23;
    v26 = v25;
    _s7BooksUI13AnyPagedFrameVwxx_0(&v34);
    v27 = *(_QWORD *)(a3 + 64);
    v28 = *(_BYTE *)(a3 + 72);
    sub_F9E4(v27, v28);
    v29 = sub_30DB4(v27, v28);
    sub_BE0C(v27, v28);
    *(double *)&v34 = v20;
    *((_QWORD *)&v34 + 1) = v22;
    *(_QWORD *)&v35 = v24;
    *((_QWORD *)&v35 + 1) = v26;
    LOBYTE(v36) = v29 & 1;
    (*(void (**)(__int128 *, uint64_t, uint64_t))(a6 + 32))(&v34, a5, a6);
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a6, a5, AssociatedTypeWitness, &protocol requirements base descriptor for GeometryReferenceBuilding, &associated conformance descriptor for GeometryReferenceBuilding.GeometryReferenceBuilding.ReferenceType: GeometryReference);
    sub_16460((uint64_t)v14, (uint64_t)v37, v33, AssociatedTypeWitness, AssociatedConformanceWitness);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, AssociatedTypeWitness);
  }
  else
  {
    sub_B414((uint64_t)&v34, &qword_25DFD0);
  }
  return sub_AC34((uint64_t)v37);
}

uint64_t type metadata accessor for CacheGeometryViewModifier.KeyFramePair(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10E40(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CacheGeometryViewModifier.KeyFramePair);
}

uint64_t sub_1629C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD v3[2];

  v0 = type metadata accessor for CoordinateSpace(0);
  sub_73A0(v0, qword_25E510);
  v1 = sub_7120(v0, (uint64_t)qword_25E510);
  v3[0] = 0xD000000000000024;
  v3[1] = 0x80000000001F9B60;
  AnyHashable.init<A>(_:)(v3, &type metadata for String, &protocol witness table for String);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v0 - 8) + 104))(v1, enum case for CoordinateSpace.named(_:), v0);
}

uint64_t sub_16340@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_155EC(v1[4], v1[5], v1[2], v1[3], a1);
}

uint64_t sub_16350(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1636C((uint64_t (*)(unint64_t, _QWORD, uint64_t, uint64_t))sub_15CC8, a2, a3, a4);
}

uint64_t sub_16360(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1636C((uint64_t (*)(unint64_t, _QWORD, uint64_t, uint64_t))sub_15E80, a2, a3, a4);
}

uint64_t sub_1636C(uint64_t (*a1)(unint64_t, _QWORD, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = *(_QWORD *)(v4 + 24);
  v7 = *(_QWORD *)(type metadata accessor for CacheGeometryViewModifier(0, v5, v6, a4) - 8);
  v8 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  return a1(v4 + v8, *(_QWORD *)(v4 + ((*(_QWORD *)(v7 + 64) + v8 + 7) & 0xFFFFFFFFFFFFF8)), v5, v6);
}

uint64_t sub_163E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v7 = *(_QWORD *)(v4 + 16);
  v8 = *(_QWORD *)(v4 + 24);
  v9 = *(_QWORD *)(type metadata accessor for CacheGeometryViewModifier(0, v7, v8, a4) - 8);
  v10 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  return sub_16060(a1, a2, v4 + v10, *(_QWORD *)(v4 + ((*(_QWORD *)(v9 + 64) + v10 + 7) & 0xFFFFFFFFFFFFF8)), v7, v8);
}

uint64_t sub_16460(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v9;
  os_unfair_lock_s *v10;
  uint64_t v11;
  os_unfair_lock_s *v12;
  _QWORD v14[5];

  v14[3] = a4;
  v14[4] = a5;
  v9 = sub_C404(v14);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 16))(v9, a1, a4);
  v10 = *(os_unfair_lock_s **)(a3 + 16);
  v11 = (uint64_t)&v10[4];
  v12 = v10 + 6;
  os_unfair_lock_lock(v10 + 6);
  sub_132E8(v11, a2, (uint64_t)v14);
  os_unfair_lock_unlock(v12);
  return _s7BooksUI13AnyPagedFrameVwxx_0(v14);
}

uint64_t sub_164F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = type metadata accessor for CacheGeometryViewModifier(0, v5, *(_QWORD *)(v4 + 24), a4);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v8 + 32) & ~v8;
  v10 = *(_QWORD *)(v7 + 64);
  v11 = v4 + v9;
  if ((*(_BYTE *)(v4 + v9 + 40) & 1) != 0)
  {
    if (*(_QWORD *)(v11 + 24))
      _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)(v4 + v9));
  }
  else
  {
    swift_release(*(_QWORD *)v11);
  }
  j__swift_release(*(_QWORD *)(v11 + 48));
  sub_BE0C(*(_QWORD *)(v11 + 64), *(_BYTE *)(v11 + 72));
  swift_release(*(_QWORD *)(v11 + 120));
  if (*(_QWORD *)(v11 + 152))
    _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)(v11 + 128));
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v11 + *(int *)(v6 + 52), v5);
  return swift_deallocObject(v4, v9 + v10, v8 | 7);
}

uint64_t sub_165CC@<X0>(uint64_t a1@<X3>, double *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(v2 + 16);
  v5 = *(_QWORD *)(v2 + 24);
  v6 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for CacheGeometryViewModifier(0, v4, v5, a1) - 8) + 80);
  return sub_15880(v2 + ((v6 + 32) & ~v6), v4, v5, a2);
}

uint64_t sub_16638(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = type metadata accessor for CacheGeometryViewModifier(0, v5, *(_QWORD *)(v4 + 24), a4);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v8 + 32) & ~v8;
  v10 = *(_QWORD *)(v7 + 64);
  v11 = v4 + v9;
  if ((*(_BYTE *)(v4 + v9 + 40) & 1) != 0)
  {
    if (*(_QWORD *)(v11 + 24))
      _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)(v4 + v9));
  }
  else
  {
    swift_release(*(_QWORD *)v11);
  }
  j__swift_release(*(_QWORD *)(v11 + 48));
  sub_BE0C(*(_QWORD *)(v11 + 64), *(_BYTE *)(v11 + 72));
  swift_release(*(_QWORD *)(v11 + 120));
  if (*(_QWORD *)(v11 + 152))
    _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)(v11 + 128));
  v12 = (v10 + v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v11 + *(int *)(v6 + 52), v5);
  swift_release(*(_QWORD *)(v4 + v12));
  return swift_deallocObject(v4, v12 + 8, v8 | 7);
}

uint64_t sub_16728(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v6 = *(_QWORD *)(v4 + 16);
  v7 = *(_QWORD *)(v4 + 24);
  v8 = *(_QWORD *)(type metadata accessor for CacheGeometryViewModifier(0, v6, v7, a4) - 8);
  v9 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  return sub_15B14(a1, v4 + v9, *(_QWORD *)(v4 + ((*(_QWORD *)(v8 + 64) + v9 + 7) & 0xFFFFFFFFFFFFF8)), v6, v7);
}

uint64_t sub_167A4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_5440(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

unint64_t sub_167E8()
{
  unint64_t result;

  result = qword_25E6E0[0];
  if (!qword_25E6E0[0])
  {
    result = swift_getWitnessTable(&unk_1E1468, &type metadata for GeometryCacheKey);
    atomic_store(result, qword_25E6E0);
  }
  return result;
}

ValueMetadata *type metadata accessor for GeometryCacheKey()
{
  return &type metadata for GeometryCacheKey;
}

_QWORD *destroy for _CodeAnyActionModel_OrNil(_QWORD *a1)
{
  if (a1[3])
    return (_QWORD *)_s7BooksUI13AnyPagedFrameVwxx_0(a1);
  return a1;
}

uint64_t sub_1684C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;

  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    v5 = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 24) = v4;
    *(_QWORD *)(a1 + 32) = v5;
    (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1, a2);
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v6;
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  }
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  return a1;
}

uint64_t sub_168B8(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  v4 = *((_QWORD *)a2 + 3);
  if (*(_QWORD *)(a1 + 24))
  {
    if (v4)
    {
      sub_142F8((_QWORD *)a1, a2);
    }
    else
    {
      sub_AC34(a1);
      v5 = *((_QWORD *)a2 + 4);
      v6 = a2[1];
      *(_OWORD *)a1 = *a2;
      *(_OWORD *)(a1 + 16) = v6;
      *(_QWORD *)(a1 + 32) = v5;
    }
  }
  else if (v4)
  {
    *(_QWORD *)(a1 + 24) = v4;
    *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
    (**(void (***)(uint64_t, __int128 *))(v4 - 8))(a1, a2);
  }
  else
  {
    v7 = *a2;
    v8 = a2[1];
    *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
    *(_OWORD *)a1 = v7;
    *(_OWORD *)(a1 + 16) = v8;
  }
  *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
  *(_QWORD *)(a1 + 48) = *((_QWORD *)a2 + 6);
  *(_QWORD *)(a1 + 56) = *((_QWORD *)a2 + 7);
  *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
  return a1;
}

__n128 initializeWithTake for ListItemMetadataRatingView(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t sub_16990(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  if (*(_QWORD *)(a1 + 24))
  {
    if (*(_QWORD *)(a2 + 24))
      _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)a1);
    else
      sub_AC34(a1);
  }
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  return a1;
}

uint64_t sub_169F8(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 72))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 24);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t sub_16A54(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 72) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 72) = 0;
    if (a2)
      *(_QWORD *)(result + 24) = a2;
  }
  return result;
}

uint64_t sub_16AB8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t WitnessTable;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t OpaqueTypeMetadata2;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;

  v4 = *a1;
  v5 = a1[1];
  v6 = type metadata accessor for CacheGeometryViewModifier(255, *a1, v5, a4);
  WitnessTable = swift_getWitnessTable(&unk_1E1380, v6);
  v8 = type metadata accessor for _ViewModifier_Content(255, v6, WitnessTable);
  v10 = type metadata accessor for CacheGeometryViewModifier.KeyFramePair(255, v4, v5, v9);
  v11 = swift_getWitnessTable(&unk_1E14A0, v10);
  v12 = type metadata accessor for _GeometryActionModifier(255, v10, v11);
  v13 = type metadata accessor for ModifiedContent(255, &type metadata for EmptyView, v12);
  v33 = &protocol witness table for EmptyView;
  v34 = swift_getWitnessTable(&protocol conformance descriptor for _GeometryActionModifier<A>, v12);
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v13);
  v14 = type metadata accessor for _BackgroundModifier(255, v13);
  v15 = type metadata accessor for ModifiedContent(255, v8, v14);
  v16 = type metadata accessor for ModifiedContent(255, v15, &type metadata for _AppearanceActionModifier);
  v17 = type metadata accessor for ModifiedContent(255, v16, &type metadata for _AppearanceActionModifier);
  v31 = swift_getWitnessTable(&protocol conformance descriptor for _ViewModifier_Content<A>, v8);
  v32 = swift_getWitnessTable(&protocol conformance descriptor for _BackgroundModifier<A>, v14);
  v29 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v15);
  v30 = &protocol witness table for _AppearanceActionModifier;
  v27 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v16);
  v28 = &protocol witness table for _AppearanceActionModifier;
  v18 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v17);
  v19 = *(_QWORD *)(v5 + 8);
  v23 = v17;
  v24 = v4;
  v25 = v18;
  v26 = v19;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(255, &v23, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 0);
  v21 = type metadata accessor for _ConditionalContent(255, OpaqueTypeMetadata2, v8);
  v23 = v17;
  v24 = v4;
  v25 = v18;
  v26 = v19;
  swift_getOpaqueTypeConformance2(&v23, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
  return swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v21);
}

Swift::Int sub_16CE8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[9];

  Hasher.init(_seed:)(v5, 0);
  v0 = type metadata accessor for Font.TextStyle(0);
  v1 = sub_6FD0(&qword_25E040, (uint64_t (*)(uint64_t))&type metadata accessor for Font.TextStyle, (uint64_t)&protocol conformance descriptor for Font.TextStyle);
  dispatch thunk of Hashable.hash(into:)(v5, v0, v1);
  v2 = type metadata accessor for DynamicTypeSize(0);
  v3 = sub_6FD0(&qword_25E048, (uint64_t (*)(uint64_t))&type metadata accessor for DynamicTypeSize, (uint64_t)&protocol conformance descriptor for DynamicTypeSize);
  dispatch thunk of Hashable.hash(into:)(v5, v2, v3);
  return Hasher._finalize()();
}

uint64_t sub_16DA0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = type metadata accessor for Font.TextStyle(0);
  v3 = sub_6FD0(&qword_25E040, (uint64_t (*)(uint64_t))&type metadata accessor for Font.TextStyle, (uint64_t)&protocol conformance descriptor for Font.TextStyle);
  dispatch thunk of Hashable.hash(into:)(a1, v2, v3);
  v4 = type metadata accessor for DynamicTypeSize(0);
  v5 = sub_6FD0(&qword_25E048, (uint64_t (*)(uint64_t))&type metadata accessor for DynamicTypeSize, (uint64_t)&protocol conformance descriptor for DynamicTypeSize);
  return dispatch thunk of Hashable.hash(into:)(a1, v4, v5);
}

Swift::Int sub_16E40(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[9];

  Hasher.init(_seed:)(v6, a1);
  v1 = type metadata accessor for Font.TextStyle(0);
  v2 = sub_6FD0(&qword_25E040, (uint64_t (*)(uint64_t))&type metadata accessor for Font.TextStyle, (uint64_t)&protocol conformance descriptor for Font.TextStyle);
  dispatch thunk of Hashable.hash(into:)(v6, v1, v2);
  v3 = type metadata accessor for DynamicTypeSize(0);
  v4 = sub_6FD0(&qword_25E048, (uint64_t (*)(uint64_t))&type metadata accessor for DynamicTypeSize, (uint64_t)&protocol conformance descriptor for DynamicTypeSize);
  dispatch thunk of Hashable.hash(into:)(v6, v3, v4);
  return Hasher._finalize()();
}

uint64_t sub_16EF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((static Font.TextStyle.== infix(_:_:)() & 1) != 0)
    return static DynamicTypeSize.== infix(_:_:)(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20));
  else
    return 0;
}

int *sub_16F48()
{
  int *result;

  result = (int *)sub_9248((uint64_t)&_swiftEmptyArrayStorage);
  off_25E770 = result;
  return result;
}

id sub_16F6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  int v6;
  id *v7;
  void (*v9)(char *, uint64_t);
  id v10;
  uint64_t v11;

  v1 = v0;
  v2 = type metadata accessor for Font.TextStyle(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin();
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v1, v2);
  v6 = (*(uint64_t (**)(char *, uint64_t))(v3 + 88))(v5, v2);
  if (v6 == enum case for Font.TextStyle.largeTitle(_:))
  {
    v7 = (id *)&kCTUIFontTextStyleTitle0;
    return *v7;
  }
  if (v6 == enum case for Font.TextStyle.title(_:))
  {
    v7 = (id *)&kCTUIFontTextStyleTitle1;
    return *v7;
  }
  if (v6 == enum case for Font.TextStyle.title2(_:))
  {
    v7 = (id *)&kCTUIFontTextStyleTitle2;
    return *v7;
  }
  if (v6 == enum case for Font.TextStyle.title3(_:))
  {
    v7 = (id *)&kCTUIFontTextStyleTitle3;
    return *v7;
  }
  if (v6 == enum case for Font.TextStyle.headline(_:))
  {
    v7 = (id *)&kCTUIFontTextStyleHeadline;
    return *v7;
  }
  if (v6 == enum case for Font.TextStyle.subheadline(_:))
  {
    v7 = (id *)&kCTUIFontTextStyleSubhead;
    return *v7;
  }
  if (v6 == enum case for Font.TextStyle.body(_:))
  {
    v7 = (id *)&kCTUIFontTextStyleBody;
    return *v7;
  }
  if (v6 == enum case for Font.TextStyle.callout(_:))
  {
    v7 = (id *)&kCTUIFontTextStyleCallout;
    return *v7;
  }
  if (v6 == enum case for Font.TextStyle.footnote(_:))
  {
    v7 = (id *)&kCTUIFontTextStyleFootnote;
    return *v7;
  }
  if (v6 == enum case for Font.TextStyle.caption(_:))
  {
    v7 = (id *)&kCTUIFontTextStyleCaption1;
    return *v7;
  }
  if (v6 == enum case for Font.TextStyle.caption2(_:))
  {
    v7 = (id *)&kCTUIFontTextStyleCaption2;
    return *v7;
  }
  v9 = *(void (**)(char *, uint64_t))(v3 + 8);
  v10 = kCTUIFontTextStyleBody;
  v9(v5, v2);
  return v10;
}

id sub_1718C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  int v6;
  id *v7;
  void (*v9)(char *, uint64_t);
  id v10;
  uint64_t v11;

  v1 = v0;
  v2 = type metadata accessor for DynamicTypeSize(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin();
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v1, v2);
  v6 = (*(uint64_t (**)(char *, uint64_t))(v3 + 88))(v5, v2);
  if (v6 == enum case for DynamicTypeSize.xSmall(_:))
  {
    v7 = (id *)&kCTFontContentSizeCategoryXS;
    return *v7;
  }
  if (v6 == enum case for DynamicTypeSize.small(_:))
  {
    v7 = (id *)&kCTFontContentSizeCategoryS;
    return *v7;
  }
  if (v6 == enum case for DynamicTypeSize.medium(_:))
  {
    v7 = (id *)&kCTFontContentSizeCategoryM;
    return *v7;
  }
  if (v6 == enum case for DynamicTypeSize.large(_:))
  {
    v7 = (id *)&kCTFontContentSizeCategoryL;
    return *v7;
  }
  if (v6 == enum case for DynamicTypeSize.xLarge(_:))
  {
    v7 = (id *)&kCTFontContentSizeCategoryXL;
    return *v7;
  }
  if (v6 == enum case for DynamicTypeSize.xxLarge(_:))
  {
    v7 = (id *)&kCTFontContentSizeCategoryXXL;
    return *v7;
  }
  if (v6 == enum case for DynamicTypeSize.xxxLarge(_:))
  {
    v7 = (id *)&kCTFontContentSizeCategoryXXXL;
    return *v7;
  }
  if (v6 == enum case for DynamicTypeSize.accessibility1(_:))
  {
    v7 = (id *)&kCTFontContentSizeCategoryAccessibilityM;
    return *v7;
  }
  if (v6 == enum case for DynamicTypeSize.accessibility2(_:))
  {
    v7 = (id *)&kCTFontContentSizeCategoryAccessibilityL;
    return *v7;
  }
  if (v6 == enum case for DynamicTypeSize.accessibility3(_:))
  {
    v7 = (id *)&kCTFontContentSizeCategoryAccessibilityXL;
    return *v7;
  }
  if (v6 == enum case for DynamicTypeSize.accessibility4(_:))
  {
    v7 = (id *)&kCTFontContentSizeCategoryAccessibilityXXL;
    return *v7;
  }
  if (v6 == enum case for DynamicTypeSize.accessibility5(_:))
  {
    v7 = (id *)&kCTFontContentSizeCategoryAccessibilityXXXL;
    return *v7;
  }
  v9 = *(void (**)(char *, uint64_t))(v3 + 8);
  v10 = kCTFontContentSizeCategoryL;
  v9(v5, v2);
  return v10;
}

double sub_173CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  int *v18;
  unint64_t v19;
  char v20;
  double v21;
  id v22;
  id v23;
  id v24;
  NSString *v25;
  int v26;
  uint64_t v27;
  id v28;
  char isUniquelyReferenced_nonNull_native;
  int *v30;
  char *v32;
  int *v33;
  double v34;
  double v35;
  _BYTE v36[24];

  v4 = sub_5440(&qword_25E778);
  __chkstk_darwin(v4);
  v6 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DynamicTypeSize(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = _s8RatioKeyVMa(0);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v16 = (char *)&v32 - v15;
  v17 = type metadata accessor for Font.TextStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v16, a1, v17);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(&v16[*(int *)(v11 + 20)], a2, v7);
  if (qword_25DB30 != -1)
    swift_once(&qword_25DB30, sub_16F48);
  swift_beginAccess(&off_25E770, v36, 32, 0);
  v18 = off_25E770;
  if (*(_QWORD *)((char *)&dword_10 + (_QWORD)off_25E770) && (v19 = sub_A010((uint64_t)v16), (v20 & 1) != 0))
  {
    v21 = *(double *)(*(_QWORD *)&stru_20.segname[(_QWORD)v18 + 16] + 8 * v19);
  }
  else
  {
    v32 = v14;
    swift_endAccess(v36);
    v34 = 0.0;
    v35 = 0.0;
    v22 = sub_16F6C();
    v23 = sub_1718C();
    CTFontDescriptorGetTextStyleSize(v22, v23, 0xFFFFFFFFLL, 0, &v35);

    v24 = sub_16F6C();
    v25 = (NSString *)objc_msgSend((id)objc_opt_self(UIApplication), "_defaultContentSizeCategory");
    if (!v25)
      v25 = UIContentSizeCategoryLarge;
    DynamicTypeSize.init(_:)(v25);
    v26 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7);
    v27 = (uint64_t)v32;
    if (v26 == 1)
    {
      (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v10, enum case for DynamicTypeSize.large(_:), v7);
      sub_17790((uint64_t)v6);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v6, v7);
    }
    v28 = sub_1718C();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    CTFontDescriptorGetTextStyleSize(v24, v28, 0xFFFFFFFFLL, 0, &v34);

    v21 = v35 / v34;
    sub_B30C((uint64_t)v16, v27);
    swift_beginAccess(&off_25E770, v36, 33, 0);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(off_25E770);
    v33 = off_25E770;
    off_25E770 = (int *)0x8000000000000000;
    sub_ADBC(v27, isUniquelyReferenced_nonNull_native, v21);
    v30 = off_25E770;
    off_25E770 = v33;
    swift_bridgeObjectRelease(v30);
    sub_B350(v27);
  }
  swift_endAccess(v36);
  sub_B350((uint64_t)v16);
  return v21;
}

uint64_t _s8RatioKeyVMa(uint64_t a1)
{
  uint64_t result;

  result = qword_25E7D8;
  if (!qword_25E7D8)
    return swift_getSingletonMetadata(a1, &_s8RatioKeyVMn);
  return result;
}

uint64_t sub_17790(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_5440(&qword_25E778);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t *sub_177D0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = type metadata accessor for Font.TextStyle(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
  }
  return a1;
}

uint64_t sub_17878(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = type metadata accessor for Font.TextStyle(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);
  v6 = type metadata accessor for DynamicTypeSize(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
}

uint64_t sub_178D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = type metadata accessor for Font.TextStyle(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for DynamicTypeSize(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  return a1;
}

uint64_t sub_17950(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = type metadata accessor for Font.TextStyle(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for DynamicTypeSize(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  return a1;
}

uint64_t sub_179CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = type metadata accessor for Font.TextStyle(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for DynamicTypeSize(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  return a1;
}

uint64_t sub_17A48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = type metadata accessor for Font.TextStyle(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for DynamicTypeSize(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t sub_17AC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_17AD0);
}

uint64_t sub_17AD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v6 = type metadata accessor for Font.TextStyle(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v8 = type metadata accessor for DynamicTypeSize(0);
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t sub_17B44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_17B50);
}

uint64_t sub_17B50(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v8 = type metadata accessor for Font.TextStyle(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v10 = type metadata accessor for DynamicTypeSize(0);
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t sub_17BCC(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[2];

  result = type metadata accessor for Font.TextStyle(319);
  if (v3 <= 0x3F)
  {
    v5[0] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for DynamicTypeSize(319);
    if (v4 <= 0x3F)
    {
      v5[1] = *(_QWORD *)(result - 8) + 64;
      swift_initStructMetadata(a1, 256, 2, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

uint64_t sub_17C50()
{
  return sub_6FD0(&qword_25E810, _s8RatioKeyVMa, (uint64_t)&unk_1E14D4);
}

uint64_t sub_17C7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v14;

  v10 = type metadata accessor for _ConditionalContent.Storage(0);
  __chkstk_darwin();
  v12 = (char *)&v14 - v11;
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))((char *)&v14 - v11, a1, a2);
  swift_storeEnumTagMultiPayload(v12, v10, 0);
  return _ConditionalContent<>.init(storage:)(v12, a2, a3, a4, a5);
}

uint64_t sub_17D40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v14;

  v10 = type metadata accessor for _ConditionalContent.Storage(0);
  __chkstk_darwin();
  v12 = (char *)&v14 - v11;
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 16))((char *)&v14 - v11, a1, a3);
  swift_storeEnumTagMultiPayload(v12, v10, 1);
  return _ConditionalContent<>.init(storage:)(v12, a2, a3, a4, a5);
}

uint64_t sub_17E04(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  id v3;
  char v4;
  uint64_t v5;

  v2 = v1 + *(int *)(a1 + 36);
  v3 = *(id *)v2;
  v4 = *(_BYTE *)(v2 + 8);
  sub_18EF0(*(id *)v2, v4);
  v5 = sub_30F6C(v3, v4);
  sub_19034(v3, v4);
  return v5;
}

uint64_t BooksActionButton.init(role:action:label:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  _QWORD *v25;
  uint64_t v26;

  v14 = type metadata accessor for DataStackID(0);
  v15 = __chkstk_darwin(v14);
  v17 = (char *)&v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  static DataStackID.additionalEventData.getter(v15);
  AppAnalyticsData.init(_:)(v17);
  v19 = (int *)type metadata accessor for BooksActionButton(0, a5, a6, v18);
  v20 = a7 + v19[9];
  *(_QWORD *)v20 = swift_getKeyPath(&unk_1E1540);
  *(_BYTE *)(v20 + 8) = 0;
  v21 = (_QWORD *)(a7 + v19[10]);
  *v21 = swift_getKeyPath(&unk_1E1570);
  v22 = sub_5440(&qword_25E818);
  swift_storeEnumTagMultiPayload(v21, v22, 0);
  v23 = a7 + v19[11];
  *(_QWORD *)v23 = swift_getKeyPath(&unk_1E15A0);
  *(_BYTE *)(v23 + 40) = 0;
  sub_167A4(a1, a7 + v19[12], qword_25E3E8);
  result = sub_167A4(a2, a7 + v19[13], &qword_25E820);
  v25 = (_QWORD *)(a7 + v19[14]);
  *v25 = a3;
  v25[1] = a4;
  return result;
}

uint64_t type metadata accessor for BooksActionButton(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10E40(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for BooksActionButton);
}

uint64_t BooksActionButton.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(char *, uint64_t);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  void (*v53)(uint64_t, uint64_t);
  uint64_t v54;
  unint64_t v55;
  uint64_t v57;
  uint64_t v58;
  id v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t WitnessTable;
  uint64_t v67;
  void (*v68)(char *, uint64_t);
  id v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  id v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _BYTE v92[40];
  uint64_t v93;
  uint64_t v94;
  __int128 v95;
  __int128 v96;
  uint64_t v97;
  __int128 v98;
  __int128 v99;
  uint64_t v100;
  _QWORD v101[2];
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;

  v91 = a2;
  v74 = type metadata accessor for DataStack(0);
  v73 = *(_QWORD *)(v74 - 8);
  __chkstk_darwin(v74);
  v72 = (uint64_t)&v69 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_5440(qword_25E3E8);
  __chkstk_darwin(v5);
  v90 = (uint64_t)&v69 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(a1 + 24);
  v83 = *(_QWORD *)(a1 + 16);
  v84 = v7;
  v8 = type metadata accessor for ActionButton(0);
  v85 = *(_QWORD *)(v8 - 8);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v69 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v86 = (uint64_t)&v69 - v12;
  v13 = sub_5440(&qword_25E828);
  __chkstk_darwin(v13);
  v15 = (char *)&v69 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v76 = type metadata accessor for ClickData(0);
  v75 = *(_QWORD *)(v76 - 8);
  __chkstk_darwin(v76);
  v77 = (char *)&v69 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for _ConditionalContent(0, v8, v8);
  v89 = *(_QWORD *)(v17 - 8);
  v18 = __chkstk_darwin(v17);
  v88 = (uint64_t)&v69 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v87 = (char *)&v69 - v20;
  v21 = sub_7EF8(&qword_25E830);
  v22 = type metadata accessor for _ConditionalContent(0, v17, v21);
  v23 = *(_QWORD *)(v22 - 8);
  __chkstk_darwin(v22);
  v25 = (char *)&v69 - v24;
  v26 = (void *)sub_17E04(a1);
  if (v26)
  {
    v82 = v26;
    v78 = v21;
    v79 = v25;
    v80 = v23;
    v27 = v2 + *(int *)(a1 + 52);
    sub_B3D0(v27, (uint64_t)&v95, &qword_25E820);
    v28 = v2;
    v81 = v22;
    if (*((_QWORD *)&v96 + 1))
    {
      v29 = sub_5440(&qword_25E848);
      v30 = sub_5440(&qword_25E850);
      if ((swift_dynamicCast(&v98, &v95, v29, v30, 6) & 1) != 0)
      {
        if (*((_QWORD *)&v99 + 1))
        {
          sub_AC68(&v98, (uint64_t)v101);
          v31 = v28;
          v32 = v102;
          v33 = v103;
          sub_5480(v101, v102);
          v34 = *(void (**)(uint64_t, uint64_t))(v33 + 16);
          v35 = v33;
          v28 = v31;
          v34(v32, v35);
          v36 = v75;
          v37 = v76;
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v75 + 48))(v15, 1, v76) != 1)
          {
            (*(void (**)(char *, char *, uint64_t))(v36 + 32))(v77, v15, v37);
            sub_B3D0(v31 + *(int *)(a1 + 48), v90, qword_25E3E8);
            v57 = v102;
            v70 = v103;
            v71 = sub_5480(v101, v102);
            v97 = 0;
            v96 = 0u;
            v95 = 0u;
            v58 = v31;
            v59 = v82;
            v69 = v82;
            v60 = v72;
            sub_31134(v72);
            v61 = sub_31160((uint64_t)v92);
            v62 = AppAnalyticsData.wrappedValue.getter(v61);
            ActionModel.instrumentingAppAnalyticsClickEvent(using:refId:dataStack:sizeProvider:clickData:additionalData:)(&v98, v59, &v95, v60, v92, v77, v62, v57, *(_QWORD *)(v70 + 8));

            swift_bridgeObjectRelease(v62);
            sub_B414((uint64_t)v92, &qword_25E858);
            (*(void (**)(uint64_t, uint64_t))(v73 + 8))(v60, v74);
            sub_B414((uint64_t)&v95, &qword_25E530);
            v63 = (uint64_t *)(v58 + *(int *)(a1 + 56));
            v64 = *v63;
            v65 = v63[1];
            swift_retain(v65);
            ActionButton.init(role:action:label:)(v90, &v98, v64, v65, v83, v84);
            WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for ActionButton<A>, v8);
            v67 = v86;
            sub_10F80((uint64_t)v11, v8, v86);
            v68 = *(void (**)(char *, uint64_t))(v85 + 8);
            v68(v11, v8);
            sub_C5C0(v67, v8, (uint64_t)v11);
            v48 = (uint64_t)v87;
            sub_17C7C((uint64_t)v11, v8, v8, WitnessTable, WitnessTable);
            v68(v11, v8);
            v68((char *)v67, v8);
            (*(void (**)(char *, uint64_t))(v75 + 8))(v77, v76);
            _s7BooksUI13AnyPagedFrameVwxx_0(v101);
            goto LABEL_12;
          }
          sub_B414((uint64_t)v15, &qword_25E828);
          _s7BooksUI13AnyPagedFrameVwxx_0(v101);
LABEL_11:
          v41 = v90;
          sub_B3D0(v28 + *(int *)(a1 + 48), v90, qword_25E3E8);
          sub_B3D0(v27, (uint64_t)v101, &qword_25E820);
          v42 = (uint64_t *)(v28 + *(int *)(a1 + 56));
          v43 = *v42;
          v44 = v42[1];
          swift_retain(v44);
          ActionButton.init(role:action:label:)(v41, v101, v43, v44, v83, v84);
          v45 = swift_getWitnessTable(&protocol conformance descriptor for ActionButton<A>, v8);
          v46 = v86;
          sub_10F80((uint64_t)v11, v8, v86);
          v47 = *(void (**)(char *, uint64_t))(v85 + 8);
          v47(v11, v8);
          sub_C5C0(v46, v8, (uint64_t)v11);
          v48 = (uint64_t)v87;
          sub_17D40((uint64_t)v11, v8, v8, v45, v45);
          v47(v11, v8);
          v47((char *)v46, v8);
LABEL_12:
          v49 = v78;
          v93 = swift_getWitnessTable(&protocol conformance descriptor for ActionButton<A>, v8);
          v94 = v93;
          v50 = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v17);
          v51 = v88;
          sub_C5C0(v48, v17, v88);
          v52 = sub_18B18();
          v25 = v79;
          sub_17C7C(v51, v17, v49, v50, v52);

          v53 = *(void (**)(uint64_t, uint64_t))(v89 + 8);
          v53(v51, v17);
          v53(v48, v17);
          v22 = v81;
          v23 = v80;
          goto LABEL_13;
        }
      }
      else
      {
        v100 = 0;
        v98 = 0u;
        v99 = 0u;
      }
    }
    else
    {
      sub_B414((uint64_t)&v95, &qword_25E820);
      v98 = 0u;
      v99 = 0u;
      v100 = 0;
    }
    sub_B414((uint64_t)&v98, &qword_25E840);
    goto LABEL_11;
  }
  v38 = swift_allocObject(&unk_24BA78, 32, 7);
  *(_QWORD *)(v38 + 16) = 0xD00000000000002ALL;
  *(_QWORD *)(v38 + 24) = 0x80000000001F9BC0;
  v101[0] = sub_18B10;
  v101[1] = v38;
  v108 = swift_getWitnessTable(&protocol conformance descriptor for ActionButton<A>, v8);
  v109 = v108;
  v39 = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v17);
  v40 = sub_18B18();
  sub_17D40((uint64_t)v101, v17, v21, v39, v40);
  swift_release(v38);
LABEL_13:
  v106 = swift_getWitnessTable(&protocol conformance descriptor for ActionButton<A>, v8);
  v107 = v106;
  v54 = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v17);
  v55 = sub_18B18();
  v104 = v54;
  v105 = v55;
  swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v22);
  sub_C5C0((uint64_t)v25, v22, v91);
  return (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v25, v22);
}

uint64_t sub_188CC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.tracker.getter();
  *a1 = result;
  return result;
}

uint64_t sub_188F4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.tracker.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1891C(id *a1)
{
  id v1;
  id v2;

  v1 = *a1;
  v2 = *a1;
  return EnvironmentValues.tracker.setter(v1);
}

uint64_t sub_18948(id *a1)
{
  id v1;
  id v2;

  v1 = *a1;
  v2 = *a1;
  return EnvironmentValues.tracker.setter(v1);
}

uint64_t sub_18974()
{
  return EnvironmentValues._dataStack.getter();
}

uint64_t sub_18994()
{
  return EnvironmentValues._dataStack.getter();
}

uint64_t sub_189B4(uint64_t a1)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v6;

  type metadata accessor for DataStack(0);
  __chkstk_darwin();
  v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v4 + 16))(v3, a1);
  return EnvironmentValues._dataStack.setter(v3);
}

uint64_t sub_18A34()
{
  return EnvironmentValues._sizeProvider.getter();
}

uint64_t sub_18A54()
{
  return EnvironmentValues._sizeProvider.getter();
}

uint64_t sub_18A74(uint64_t a1)
{
  _BYTE v2[40];

  sub_B3D0(a1, (uint64_t)v2, &qword_25E858);
  return EnvironmentValues._sizeProvider.setter(v2);
}

uint64_t sub_18AB0(uint64_t a1)
{
  _BYTE v2[40];

  sub_B3D0(a1, (uint64_t)v2, &qword_25E858);
  return EnvironmentValues._sizeProvider.setter(v2);
}

uint64_t sub_18AEC()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_18B10@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_6CCF8(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

unint64_t sub_18B18()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25E838;
  if (!qword_25E838)
  {
    v1 = sub_7EF8(&qword_25E830);
    result = swift_getWitnessTable(&protocol conformance descriptor for BooksFailureView<A>, v1);
    atomic_store(result, (unint64_t *)&qword_25E838);
  }
  return result;
}

uint64_t sub_18B64(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  return swift_getOpaqueTypeConformance2(&v3, &opaque type descriptor for <<opaque return type of BooksActionButton.body>>, 1);
}

void sub_18B98(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[7];

  v2 = type metadata accessor for AppAnalyticsData(319);
  if (v3 <= 0x3F)
  {
    v8[0] = *(_QWORD *)(v2 - 8) + 64;
    v8[1] = "\t";
    sub_19B38(319, &qword_25E8F0, (uint64_t (*)(uint64_t))&type metadata accessor for DataStack, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
    if (v5 <= 0x3F)
    {
      v8[2] = *(_QWORD *)(v4 - 8) + 64;
      v8[3] = &unk_1E1660;
      sub_19B38(319, &qword_25E8F8, (uint64_t (*)(uint64_t))&type metadata accessor for ButtonRole, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
      if (v7 <= 0x3F)
      {
        v8[4] = *(_QWORD *)(v6 - 8) + 64;
        v8[5] = &unk_1E1678;
        v8[6] = (char *)&value witness table for () + 64;
        swift_initStructMetadata(a1, 0, 7, v8, a1 + 32);
      }
    }
  }
}

_QWORD *sub_18C90(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  id v11;
  char v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v19 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = type metadata accessor for AppAnalyticsData(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[9];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = *(id *)v10;
    v12 = v10[8];
    sub_18EF0(*(id *)v10, v12);
    *(_QWORD *)v9 = v11;
    v9[8] = v12;
    v13 = a3[10];
    v14 = (_QWORD *)((char *)a1 + v13);
    v15 = (_QWORD *)((char *)a2 + v13);
    v16 = sub_5440(&qword_25E818);
    if (swift_getEnumCaseMultiPayload(v15, v16) == 1)
    {
      v17 = type metadata accessor for DataStack(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v14, v15, v17);
      v18 = 1;
    }
    else
    {
      v20 = *v15;
      *v14 = *v15;
      swift_retain(v20);
      v18 = 0;
    }
    swift_storeEnumTagMultiPayload(v14, v16, v18);
    v21 = a3[11];
    v22 = (char *)a1 + v21;
    v23 = (char *)a2 + v21;
    if ((*((_BYTE *)a2 + v21 + 40) & 1) != 0)
    {
      v24 = *((_QWORD *)v23 + 3);
      if (v24)
      {
        v25 = *((_QWORD *)v23 + 4);
        *((_QWORD *)v22 + 3) = v24;
        *((_QWORD *)v22 + 4) = v25;
        (**(void (***)(char *))(v24 - 8))(v22);
      }
      else
      {
        v27 = *((_OWORD *)v23 + 1);
        *(_OWORD *)v22 = *(_OWORD *)v23;
        *((_OWORD *)v22 + 1) = v27;
        *((_QWORD *)v22 + 4) = *((_QWORD *)v23 + 4);
      }
      v22[40] = 1;
    }
    else
    {
      v26 = *(_QWORD *)v23;
      *(_QWORD *)v22 = *(_QWORD *)v23;
      v22[40] = 0;
      swift_retain(v26);
    }
    v28 = a3[12];
    v29 = (char *)a1 + v28;
    v30 = (char *)a2 + v28;
    v31 = type metadata accessor for ButtonRole(0);
    v32 = *(_QWORD *)(v31 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v30, 1, v31))
    {
      v33 = sub_5440(qword_25E3E8);
      memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v32 + 16))(v29, v30, v31);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v29, 0, 1, v31);
    }
    v34 = a3[13];
    v35 = (char *)a1 + v34;
    v36 = (char *)a2 + v34;
    v37 = *(_QWORD *)((char *)a2 + v34 + 24);
    if (v37)
    {
      v38 = *((_QWORD *)v36 + 4);
      *((_QWORD *)v35 + 3) = v37;
      *((_QWORD *)v35 + 4) = v38;
      (**(void (***)(void))(v37 - 8))();
    }
    else
    {
      v39 = *((_OWORD *)v36 + 1);
      *(_OWORD *)v35 = *(_OWORD *)v36;
      *((_OWORD *)v35 + 1) = v39;
      *((_QWORD *)v35 + 4) = *((_QWORD *)v36 + 4);
    }
    v40 = a3[14];
    v41 = (_QWORD *)((char *)a1 + v40);
    v42 = (_QWORD *)((char *)a2 + v40);
    v19 = v42[1];
    *v41 = *v42;
    v41[1] = v19;
  }
  swift_retain(v19);
  return a1;
}

id sub_18EF0(id a1, char a2)
{
  if ((a2 & 1) != 0)
    return a1;
  else
    return (id)swift_retain(a1);
}

uint64_t sub_18EFC(uint64_t a1, int *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v4 = type metadata accessor for AppAnalyticsData(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  sub_19034(*(id *)(a1 + a2[9]), *(_BYTE *)(a1 + a2[9] + 8));
  v5 = (_QWORD *)(a1 + a2[10]);
  v6 = sub_5440(&qword_25E818);
  if (swift_getEnumCaseMultiPayload(v5, v6) == 1)
  {
    v7 = type metadata accessor for DataStack(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v5, v7);
  }
  else
  {
    swift_release(*v5);
  }
  v8 = (_QWORD *)(a1 + a2[11]);
  if ((v8[5] & 1) != 0)
  {
    if (v8[3])
      _s7BooksUI13AnyPagedFrameVwxx_0(v8);
  }
  else
  {
    swift_release(*v8);
  }
  v9 = a1 + a2[12];
  v10 = type metadata accessor for ButtonRole(0);
  v11 = *(_QWORD *)(v10 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
  v12 = (_QWORD *)(a1 + a2[13]);
  if (v12[3])
    _s7BooksUI13AnyPagedFrameVwxx_0(v12);
  return swift_release(*(_QWORD *)(a1 + a2[14] + 8));
}

void sub_19034(id a1, char a2)
{
  if ((a2 & 1) != 0)

  else
    swift_release(a1);
}

uint64_t sub_19040(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  char v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  void *v27;
  const void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;

  v6 = type metadata accessor for AppAnalyticsData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[9];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = *(id *)v9;
  v11 = *(_BYTE *)(v9 + 8);
  sub_18EF0(*(id *)v9, v11);
  *(_QWORD *)v8 = v10;
  *(_BYTE *)(v8 + 8) = v11;
  v12 = a3[10];
  v13 = (uint64_t *)(a1 + v12);
  v14 = (uint64_t *)(a2 + v12);
  v15 = sub_5440(&qword_25E818);
  if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
  {
    v16 = type metadata accessor for DataStack(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v13, v14, v16);
    v17 = 1;
  }
  else
  {
    v18 = *v14;
    *v13 = *v14;
    swift_retain(v18);
    v17 = 0;
  }
  swift_storeEnumTagMultiPayload(v13, v15, v17);
  v19 = a3[11];
  v20 = a1 + v19;
  v21 = (uint64_t *)(a2 + v19);
  if ((*(_BYTE *)(a2 + v19 + 40) & 1) != 0)
  {
    v22 = v21[3];
    if (v22)
    {
      v23 = v21[4];
      *(_QWORD *)(v20 + 24) = v22;
      *(_QWORD *)(v20 + 32) = v23;
      (**(void (***)(uint64_t))(v22 - 8))(v20);
    }
    else
    {
      v25 = *((_OWORD *)v21 + 1);
      *(_OWORD *)v20 = *(_OWORD *)v21;
      *(_OWORD *)(v20 + 16) = v25;
      *(_QWORD *)(v20 + 32) = v21[4];
    }
    *(_BYTE *)(v20 + 40) = 1;
  }
  else
  {
    v24 = *v21;
    *(_QWORD *)v20 = *v21;
    *(_BYTE *)(v20 + 40) = 0;
    swift_retain(v24);
  }
  v26 = a3[12];
  v27 = (void *)(a1 + v26);
  v28 = (const void *)(a2 + v26);
  v29 = type metadata accessor for ButtonRole(0);
  v30 = *(_QWORD *)(v29 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29))
  {
    v31 = sub_5440(qword_25E3E8);
    memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v30 + 16))(v27, v28, v29);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
  }
  v32 = a3[13];
  v33 = a1 + v32;
  v34 = a2 + v32;
  v35 = *(_QWORD *)(a2 + v32 + 24);
  if (v35)
  {
    v36 = *(_QWORD *)(v34 + 32);
    *(_QWORD *)(v33 + 24) = v35;
    *(_QWORD *)(v33 + 32) = v36;
    (**(void (***)(void))(v35 - 8))();
  }
  else
  {
    v37 = *(_OWORD *)(v34 + 16);
    *(_OWORD *)v33 = *(_OWORD *)v34;
    *(_OWORD *)(v33 + 16) = v37;
    *(_QWORD *)(v33 + 32) = *(_QWORD *)(v34 + 32);
  }
  v38 = a3[14];
  v39 = (_QWORD *)(a1 + v38);
  v40 = (_QWORD *)(a2 + v38);
  v41 = v40[1];
  *v39 = *v40;
  v39[1] = v41;
  swift_retain(v41);
  return a1;
}

uint64_t sub_19278(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  char v11;
  void *v12;
  char v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 *v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  void *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(void *, uint64_t, uint64_t);
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 *v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;

  v6 = type metadata accessor for AppAnalyticsData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[9];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = *(id *)v9;
  v11 = *(_BYTE *)(v9 + 8);
  sub_18EF0(*(id *)v9, v11);
  v12 = *(void **)v8;
  v13 = *(_BYTE *)(v8 + 8);
  *(_QWORD *)v8 = v10;
  *(_BYTE *)(v8 + 8) = v11;
  sub_19034(v12, v13);
  if (a1 != a2)
  {
    v14 = a3[10];
    v15 = (uint64_t *)(a1 + v14);
    v16 = (uint64_t *)(a2 + v14);
    sub_B414(a1 + v14, &qword_25E818);
    v17 = sub_5440(&qword_25E818);
    if (swift_getEnumCaseMultiPayload(v16, v17) == 1)
    {
      v18 = type metadata accessor for DataStack(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v15, v16, v18);
      v19 = 1;
    }
    else
    {
      v20 = *v16;
      *v15 = *v16;
      swift_retain(v20);
      v19 = 0;
    }
    swift_storeEnumTagMultiPayload(v15, v17, v19);
    v21 = a3[11];
    v22 = a1 + v21;
    v23 = (__int128 *)(a2 + v21);
    sub_B414(a1 + v21, &qword_25E860);
    if ((*((_BYTE *)v23 + 40) & 1) != 0)
    {
      v24 = *((_QWORD *)v23 + 3);
      if (v24)
      {
        *(_QWORD *)(v22 + 24) = v24;
        *(_QWORD *)(v22 + 32) = *((_QWORD *)v23 + 4);
        (**(void (***)(uint64_t, __int128 *))(v24 - 8))(v22, v23);
      }
      else
      {
        v26 = *v23;
        v27 = v23[1];
        *(_QWORD *)(v22 + 32) = *((_QWORD *)v23 + 4);
        *(_OWORD *)v22 = v26;
        *(_OWORD *)(v22 + 16) = v27;
      }
      *(_BYTE *)(v22 + 40) = 1;
    }
    else
    {
      v25 = *(_QWORD *)v23;
      *(_QWORD *)v22 = *(_QWORD *)v23;
      *(_BYTE *)(v22 + 40) = 0;
      swift_retain(v25);
    }
  }
  v28 = a3[12];
  v29 = (void *)(a1 + v28);
  v30 = (void *)(a2 + v28);
  v31 = type metadata accessor for ButtonRole(0);
  v32 = *(_QWORD *)(v31 - 8);
  v33 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v32 + 48);
  v34 = v33(v29, 1, v31);
  v35 = v33(v30, 1, v31);
  if (v34)
  {
    if (!v35)
    {
      (*(void (**)(void *, void *, uint64_t))(v32 + 16))(v29, v30, v31);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v29, 0, 1, v31);
      goto LABEL_17;
    }
    goto LABEL_16;
  }
  if (v35)
  {
    (*(void (**)(void *, uint64_t))(v32 + 8))(v29, v31);
LABEL_16:
    v36 = sub_5440(qword_25E3E8);
    memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
    goto LABEL_17;
  }
  (*(void (**)(void *, void *, uint64_t))(v32 + 24))(v29, v30, v31);
LABEL_17:
  v37 = a3[13];
  v38 = a1 + v37;
  v39 = (__int128 *)(a2 + v37);
  v40 = *(_QWORD *)(a2 + v37 + 24);
  if (!*(_QWORD *)(a1 + v37 + 24))
  {
    if (v40)
    {
      *(_QWORD *)(v38 + 24) = v40;
      *(_QWORD *)(v38 + 32) = *((_QWORD *)v39 + 4);
      (**(void (***)(uint64_t, __int128 *))(v40 - 8))(v38, v39);
      goto LABEL_24;
    }
LABEL_23:
    v41 = *v39;
    v42 = v39[1];
    *(_QWORD *)(v38 + 32) = *((_QWORD *)v39 + 4);
    *(_OWORD *)v38 = v41;
    *(_OWORD *)(v38 + 16) = v42;
    goto LABEL_24;
  }
  if (!v40)
  {
    _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)v38);
    goto LABEL_23;
  }
  sub_142F8((_QWORD *)v38, v39);
LABEL_24:
  v43 = a3[14];
  v44 = (_QWORD *)(a1 + v43);
  v45 = (_QWORD *)(a2 + v43);
  v46 = v45[1];
  v47 = v44[1];
  *v44 = *v45;
  v44[1] = v46;
  swift_retain(v46);
  swift_release(v47);
  return a1;
}

uint64_t sub_19574(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD *v17;
  _OWORD *v18;
  __int128 v19;
  void *v20;
  const void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;

  v6 = type metadata accessor for AppAnalyticsData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[9];
  v8 = a3[10];
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  v11 = (void *)(a1 + v8);
  v12 = (const void *)(a2 + v8);
  v13 = sub_5440(&qword_25E818);
  if (swift_getEnumCaseMultiPayload(v12, v13) == 1)
  {
    v14 = type metadata accessor for DataStack(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v11, v12, v14);
    swift_storeEnumTagMultiPayload(v11, v13, 1);
  }
  else
  {
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  v15 = a3[11];
  v16 = a3[12];
  v17 = (_OWORD *)(a1 + v15);
  v18 = (_OWORD *)(a2 + v15);
  v19 = v18[1];
  *v17 = *v18;
  v17[1] = v19;
  *(_OWORD *)((char *)v17 + 25) = *(_OWORD *)((char *)v18 + 25);
  v20 = (void *)(a1 + v16);
  v21 = (const void *)(a2 + v16);
  v22 = type metadata accessor for ButtonRole(0);
  v23 = *(_QWORD *)(v22 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
  {
    v24 = sub_5440(qword_25E3E8);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v23 + 32))(v20, v21, v22);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
  }
  v25 = a3[13];
  v26 = a3[14];
  v27 = a1 + v25;
  v28 = a2 + v25;
  v29 = *(_OWORD *)(v28 + 16);
  *(_OWORD *)v27 = *(_OWORD *)v28;
  *(_OWORD *)(v27 + 16) = v29;
  *(_QWORD *)(v27 + 32) = *(_QWORD *)(v28 + 32);
  *(_OWORD *)(a1 + v26) = *(_OWORD *)(a2 + v26);
  return a1;
}

uint64_t sub_19724(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  void *v11;
  char v12;
  uint64_t v13;
  void *v14;
  const void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD *v19;
  _OWORD *v20;
  __int128 v21;
  uint64_t v22;
  void *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(void *, uint64_t, uint64_t);
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;

  v6 = type metadata accessor for AppAnalyticsData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[9];
  v8 = a1 + v7;
  v9 = (uint64_t *)(a2 + v7);
  v10 = *v9;
  LOBYTE(v9) = *((_BYTE *)v9 + 8);
  v11 = *(void **)v8;
  v12 = *(_BYTE *)(v8 + 8);
  *(_QWORD *)v8 = v10;
  *(_BYTE *)(v8 + 8) = (_BYTE)v9;
  sub_19034(v11, v12);
  if (a1 != a2)
  {
    v13 = a3[10];
    v14 = (void *)(a1 + v13);
    v15 = (const void *)(a2 + v13);
    sub_B414(a1 + v13, &qword_25E818);
    v16 = sub_5440(&qword_25E818);
    if (swift_getEnumCaseMultiPayload(v15, v16) == 1)
    {
      v17 = type metadata accessor for DataStack(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v14, v15, v17);
      swift_storeEnumTagMultiPayload(v14, v16, 1);
    }
    else
    {
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    }
    v18 = a3[11];
    v19 = (_OWORD *)(a2 + v18);
    v20 = (_OWORD *)(a1 + v18);
    sub_B414(a1 + v18, &qword_25E860);
    v21 = v19[1];
    *v20 = *v19;
    v20[1] = v21;
    *(_OWORD *)((char *)v20 + 25) = *(_OWORD *)((char *)v19 + 25);
  }
  v22 = a3[12];
  v23 = (void *)(a1 + v22);
  v24 = (void *)(a2 + v22);
  v25 = type metadata accessor for ButtonRole(0);
  v26 = *(_QWORD *)(v25 - 8);
  v27 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v26 + 48);
  v28 = v27(v23, 1, v25);
  v29 = v27(v24, 1, v25);
  if (v28)
  {
    if (!v29)
    {
      (*(void (**)(void *, void *, uint64_t))(v26 + 32))(v23, v24, v25);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  if (v29)
  {
    (*(void (**)(void *, uint64_t))(v26 + 8))(v23, v25);
LABEL_11:
    v30 = sub_5440(qword_25E3E8);
    memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    goto LABEL_12;
  }
  (*(void (**)(void *, void *, uint64_t))(v26 + 40))(v23, v24, v25);
LABEL_12:
  v31 = a3[13];
  v32 = a1 + v31;
  if (*(_QWORD *)(a1 + v31 + 24))
    _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)(a1 + v31));
  v33 = *(_OWORD *)(a2 + v31 + 16);
  *(_OWORD *)v32 = *(_OWORD *)(a2 + v31);
  *(_OWORD *)(v32 + 16) = v33;
  *(_QWORD *)(v32 + 32) = *(_QWORD *)(a2 + v31 + 32);
  v34 = a3[14];
  v35 = *(_QWORD *)(a1 + v34 + 8);
  *(_OWORD *)(a1 + v34) = *(_OWORD *)(a2 + v34);
  swift_release(v35);
  return a1;
}

uint64_t sub_1997C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_19988);
}

uint64_t sub_19988(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v16;

  v6 = type metadata accessor for AppAnalyticsData(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = sub_5440(qword_25E868);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v13 = a3[10];
LABEL_7:
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = sub_5440(qword_25E3E8);
  v12 = *(_QWORD *)(v14 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v14;
    v13 = a3[12];
    goto LABEL_7;
  }
  v16 = *(_QWORD *)(a1 + a3[14]);
  if (v16 >= 0xFFFFFFFF)
    LODWORD(v16) = -1;
  return (v16 + 1);
}

uint64_t sub_19A5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_19A68);
}

uint64_t sub_19A68(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;

  v8 = type metadata accessor for AppAnalyticsData(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  v13 = sub_5440(qword_25E868);
  v14 = *(_QWORD *)(v13 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = v13;
    v15 = a4[10];
LABEL_7:
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  result = sub_5440(qword_25E3E8);
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v15 = a4[12];
    goto LABEL_7;
  }
  *(_QWORD *)(a1 + a4[14]) = (a2 - 1);
  return result;
}

void sub_19B38(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if (!*a2)
  {
    v7 = a3(255);
    v8 = a4(a1, v7);
    if (!v9)
      atomic_store(v8, a2);
  }
}

uint64_t sub_19B90()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v0 = type metadata accessor for ActionButton(255);
  v1 = type metadata accessor for _ConditionalContent(255, v0, v0);
  v2 = sub_7EF8(&qword_25E830);
  v3 = type metadata accessor for _ConditionalContent(255, v1, v2);
  swift_getWitnessTable(&protocol conformance descriptor for ActionButton<A>, v0);
  swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
  sub_18B18();
  return swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v3);
}

ValueMetadata *type metadata accessor for TranslationEffect()
{
  return &type metadata for TranslationEffect;
}

void *sub_19C54()
{
  return &protocol witness table for Never;
}

CGFloat sub_19C60@<D0>(uint64_t a1@<X8>)
{
  CGFloat *v1;
  CGFloat result;
  __int128 v4;
  __int128 v5;
  CGAffineTransform v6;

  CGAffineTransformMakeTranslation(&v6, *v1, v1[1]);
  result = v6.a;
  v4 = *(_OWORD *)&v6.c;
  v5 = *(_OWORD *)&v6.tx;
  *(_OWORD *)a1 = *(_OWORD *)&v6.a;
  *(_QWORD *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 48) = v5;
  *(_QWORD *)(a1 + 64) = 0x3FF0000000000000;
  return result;
}

__n128 sub_19CB8@<Q0>(__n128 *a1@<X8>)
{
  __n128 *v1;
  __n128 result;

  result = *v1;
  *a1 = *v1;
  return result;
}

__n128 sub_19CC4(__n128 *a1)
{
  __n128 *v1;
  __n128 result;

  result = *a1;
  *v1 = *a1;
  return result;
}

__n128 (*sub_19CD0(uint64_t a1))(__n128 *a1)
{
  _OWORD *v1;

  *(_QWORD *)(a1 + 16) = v1;
  *(_OWORD *)a1 = *v1;
  return sub_19CEC;
}

__n128 sub_19CEC(__n128 *a1)
{
  __n128 result;

  result = *a1;
  *(__n128 *)a1[1].n128_u64[0] = *a1;
  return result;
}

uint64_t sub_19D00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v10;

  v10 = sub_19F18();
  return static GeometryEffect._makeView(modifier:inputs:body:)(a1, a2, a3, a4, a5, v10);
}

uint64_t sub_19D68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v10;

  v10 = sub_19F18();
  return static GeometryEffect._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, a5, v10);
}

uint64_t sub_19DD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8;

  v8 = sub_19F18();
  return static GeometryEffect._viewListCount(inputs:body:)(a1, a2, a3, a4, v8);
}

void sub_19E28()
{
  ViewModifier<>.body(content:)();
  __break(1u);
}

unint64_t sub_19E3C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25E900;
  if (!qword_25E900)
  {
    v1 = sub_7EF8(&qword_25E908);
    result = swift_getWitnessTable(&protocol conformance descriptor for AnimatablePair<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_25E900);
  }
  return result;
}

unint64_t sub_19E8C()
{
  unint64_t result;

  result = qword_25E910;
  if (!qword_25E910)
  {
    result = swift_getWitnessTable(&unk_1E1704, &type metadata for TranslationEffect);
    atomic_store(result, (unint64_t *)&qword_25E910);
  }
  return result;
}

unint64_t sub_19ED4()
{
  unint64_t result;

  result = qword_25E918;
  if (!qword_25E918)
  {
    result = swift_getWitnessTable(&unk_1E16B4, &type metadata for TranslationEffect);
    atomic_store(result, (unint64_t *)&qword_25E918);
  }
  return result;
}

unint64_t sub_19F18()
{
  unint64_t result;

  result = qword_25E920;
  if (!qword_25E920)
  {
    result = swift_getWitnessTable(&unk_1E1754, &type metadata for TranslationEffect);
    atomic_store(result, (unint64_t *)&qword_25E920);
  }
  return result;
}

uint64_t PageBackground.resolvedColorScheme.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t (*v22)(_QWORD);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  void *v30;
  id v31;
  __n128 v32;
  double v33;
  unsigned int *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  double v39;

  v2 = v1;
  v4 = type metadata accessor for ColorScheme(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v36 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v9 = (char *)&v35 - v8;
  v10 = type metadata accessor for EnvironmentValues(0);
  v37 = *(_QWORD *)(v10 - 8);
  v38 = v10;
  __chkstk_darwin(v10);
  v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_5440(&qword_25E928);
  v14 = __chkstk_darwin(v13);
  v16 = (char *)&v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v18 = (char *)&v35 - v17;
  v19 = type metadata accessor for PageBackground(0);
  __chkstk_darwin(v19);
  v21 = (uint64_t *)((char *)&v35 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1E428(v2, (uint64_t)v21, v22);
  if (swift_getEnumCaseMultiPayload(v21, v19) == 1)
  {
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v5 + 104))(a1, enum case for ColorScheme.dark(_:), v4);
    return sub_224DC((uint64_t)v21, type metadata accessor for PageBackground);
  }
  else
  {
    v24 = *v21;
    v25 = sub_5440(&qword_25E930);
    v26 = sub_167A4((uint64_t)v21 + *(int *)(v25 + 48), (uint64_t)v18, &qword_25E928);
    EnvironmentValues.init()(v26);
    sub_B3D0((uint64_t)v18, (uint64_t)v16, &qword_25E928);
    v27 = v4;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v16, 1, v4) == 1)
    {
      sub_B414((uint64_t)v16, &qword_25E928);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v9, v16, v4);
      v28 = v36;
      (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v36, v9, v4);
      EnvironmentValues.colorScheme.setter(v28);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v9, v4);
    }
    v29 = Color.resolve(in:)(v12, v24);
    v30 = (void *)Color.Resolved.cgColor.getter(v29);
    v31 = objc_msgSend(objc_allocWithZone((Class)UIColor), "initWithCGColor:", v30);

    v39 = 0.0;
    objc_msgSend(v31, "getWhite:alpha:", &v39, 0);

    v32 = swift_release(v24);
    v33 = v39;
    (*(void (**)(char *, uint64_t, __n128))(v37 + 8))(v12, v38, v32);
    sub_B414((uint64_t)v18, &qword_25E928);
    if (v33 >= 0.7)
      v34 = (unsigned int *)&enum case for ColorScheme.light(_:);
    else
      v34 = (unsigned int *)&enum case for ColorScheme.dark(_:);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v5 + 104))(a1, *v34, v27);
  }
}

uint64_t type metadata accessor for PageBackground(uint64_t a1)
{
  return sub_1FE90(a1, (uint64_t *)&unk_25E9C8, (uint64_t)&nominal type descriptor for PageBackground);
}

uint64_t PagedFrame.id.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t MetatypeMetadata;
  uint64_t DynamicType;

  DynamicType = swift_getDynamicType(v1, a1, 0);
  MetatypeMetadata = swift_getMetatypeMetadata(a1);
  return String.init<A>(reflecting:)(&DynamicType, MetatypeMetadata);
}

double SizeConstants.Spacing.xxxl.getter()
{
  return 32.0;
}

uint64_t sub_1A33C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[3];
  v2 = v0[4];
  sub_5480(v0, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 16))(v1, v2);
}

uint64_t sub_1A380()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[3];
  v2 = v0[4];
  sub_5480(v0, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 24))(v1, v2);
}

uint64_t sub_1A3CC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[3];
  v2 = v0[4];
  sub_5480(v0, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 32))(v1, v2);
}

uint64_t sub_1A410()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[3];
  v2 = v0[4];
  sub_5480(v0, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 40))(v1, v2);
}

uint64_t sub_1A454()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[3];
  v2 = v0[4];
  sub_5480(v0, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 48))(v1, v2);
}

uint64_t sub_1A4A0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[3];
  v2 = v0[4];
  sub_5480(v0, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 56))(v1, v2);
}

uint64_t sub_1A4E4@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v3 = v1[3];
  v4 = v1[4];
  sub_5480(v1, v3);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 16))(v3, v4);
  *a1 = result;
  a1[1] = v6;
  return result;
}

uint64_t sub_1A530@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;

  v2 = v1;
  v4 = v1[3];
  v5 = v2[4];
  v6 = sub_5480(v2, v4);
  __chkstk_darwin(v6);
  v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v9 + 16))(v8);
  result = AnyView.init<A>(_:)(v8, v4, *(_QWORD *)(v5 + 8));
  *a1 = result;
  return result;
}

uint64_t sub_1A5C0()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  double v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  KeyPath = swift_getKeyPath(&unk_1E1BE8);
  v12 = v0;
  v2 = sub_6FD0(&qword_25E940, type metadata accessor for PagedScrollViewModel, (uint64_t)&protocol conformance descriptor for PagedScrollViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v12, KeyPath, v2);
  result = swift_release(KeyPath);
  if (*(double *)(v0 + 32) <= 0.0)
    return result;
  v4 = swift_getKeyPath(&unk_1E1C38);
  v12 = v0;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v12, v4, v2);
  swift_release(v4);
  v5 = *(double *)(v0 + 16);
  v6 = swift_getKeyPath(&unk_1E1C10);
  v12 = v0;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v12, v6, v2);
  swift_release(v6);
  v7 = v5 + *(double *)(v0 + 40) * 0.5;
  v8 = swift_getKeyPath(&unk_1E1BE8);
  v12 = v0;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v12, v8, v2);
  result = swift_release(v8);
  v9 = v7 / *(double *)(v0 + 32);
  if ((~*(_QWORD *)&v9 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_11;
  }
  if (v9 <= -9.22337204e18)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (v9 >= 9.22337204e18)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v10 = *(_QWORD *)(v0 + 48);
  if (v10 < 0)
  {
LABEL_13:
    __break(1u);
    return result;
  }
  if (((uint64_t)v9 & 0x8000000000000000) == 0 && v10 > (uint64_t)v9)
  {
    v11 = swift_getKeyPath(&unk_1E17B0);
    __chkstk_darwin(v11);
    v12 = v0;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v12, v11, sub_1AC24);
    return swift_release(v11);
  }
  return result;
}

double sub_1A7C8()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_1E1C38);
  v4 = v0;
  v2 = sub_6FD0(&qword_25E940, type metadata accessor for PagedScrollViewModel, (uint64_t)&protocol conformance descriptor for PagedScrollViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v4, KeyPath, v2);
  swift_release(KeyPath);
  return *(double *)(v0 + 16);
}

double sub_1A84C@<D0>(uint64_t *a1@<X0>, double *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  double result;
  uint64_t v7;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1E1C38);
  v7 = v3;
  v5 = sub_6FD0(&qword_25E940, type metadata accessor for PagedScrollViewModel, (uint64_t)&protocol conformance descriptor for PagedScrollViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v7, KeyPath, v5);
  swift_release(KeyPath);
  result = *(double *)(v3 + 16);
  *a2 = result;
  return result;
}

uint64_t sub_1A8D8(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v5;

  v2 = *a2;
  KeyPath = swift_getKeyPath(&unk_1E1C38);
  v5 = v2;
  sub_6FD0(&qword_25E940, type metadata accessor for PagedScrollViewModel, (uint64_t)&protocol conformance descriptor for PagedScrollViewModel);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v5, KeyPath, sub_21D40);
  return swift_release(KeyPath);
}

uint64_t PagedScrollViewModel.currentPageIndex.getter()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  _QWORD v4[3];

  KeyPath = swift_getKeyPath(&unk_1E17B0);
  v4[0] = v0;
  v2 = sub_6FD0(&qword_25E940, type metadata accessor for PagedScrollViewModel, (uint64_t)&protocol conformance descriptor for PagedScrollViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v4, KeyPath, v2);
  swift_release(KeyPath);
  swift_beginAccess(v0 + 24, v4, 0, 0);
  return *(_QWORD *)(v0 + 24);
}

uint64_t sub_1AA20@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t result;
  _QWORD v7[3];

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1E17B0);
  v7[0] = v3;
  v5 = sub_6FD0(&qword_25E940, type metadata accessor for PagedScrollViewModel, (uint64_t)&protocol conformance descriptor for PagedScrollViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v7, KeyPath, v5);
  swift_release(KeyPath);
  result = swift_beginAccess(v3 + 24, v7, 0, 0);
  *a2 = *(_QWORD *)(v3 + 24);
  return result;
}

uint64_t sub_1AAC4(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v5;

  v2 = *a2;
  KeyPath = swift_getKeyPath(&unk_1E17B0);
  v5 = v2;
  sub_6FD0(&qword_25E940, type metadata accessor for PagedScrollViewModel, (uint64_t)&protocol conformance descriptor for PagedScrollViewModel);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v5, KeyPath, sub_1AC24);
  return swift_release(KeyPath);
}

uint64_t type metadata accessor for PagedScrollViewModel(uint64_t a1)
{
  return sub_1FE90(a1, qword_25EA30, (uint64_t)&nominal type descriptor for PagedScrollViewModel);
}

uint64_t PagedScrollViewModel.currentPageIndex.setter()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v3;

  KeyPath = swift_getKeyPath(&unk_1E17B0);
  v3 = v0;
  sub_6FD0(&qword_25E940, type metadata accessor for PagedScrollViewModel, (uint64_t)&protocol conformance descriptor for PagedScrollViewModel);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v3, KeyPath, sub_1AC24);
  return swift_release(KeyPath);
}

uint64_t sub_1AC24()
{
  return sub_229BC();
}

void (*PagedScrollViewModel.currentPageIndex.modify(_QWORD *a1))(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t KeyPath;
  uint64_t v6;
  uint64_t v7;

  v2 = v1;
  v4 = malloc(0x30uLL);
  *a1 = v4;
  v4[3] = v2;
  KeyPath = swift_getKeyPath(&unk_1E17B0);
  v4[4] = OBJC_IVAR____TtC7BooksUI20PagedScrollViewModel___observationRegistrar;
  *v4 = v2;
  v6 = sub_6FD0(&qword_25E940, type metadata accessor for PagedScrollViewModel, (uint64_t)&protocol conformance descriptor for PagedScrollViewModel);
  v4[5] = v6;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v4, KeyPath, v6);
  swift_release(KeyPath);
  *v4 = v2;
  v7 = swift_getKeyPath(&unk_1E17B0);
  ObservationRegistrar.willSet<A, B>(_:keyPath:)(v4, v7, v6);
  swift_release(v7);
  swift_beginAccess(v2 + 24, v4, 33, 0);
  return sub_1AD2C;
}

void sub_1AD2C(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t KeyPath;

  v1 = (_QWORD *)*a1;
  swift_endAccess(*a1);
  v2 = v1[5];
  *v1 = v1[3];
  KeyPath = swift_getKeyPath(&unk_1E17B0);
  ObservationRegistrar.didSet<A, B>(_:keyPath:)(v1, KeyPath, v2);
  swift_release(KeyPath);
  free(v1);
}

double sub_1AD94()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_1E1BE8);
  v4 = v0;
  v2 = sub_6FD0(&qword_25E940, type metadata accessor for PagedScrollViewModel, (uint64_t)&protocol conformance descriptor for PagedScrollViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v4, KeyPath, v2);
  swift_release(KeyPath);
  return *(double *)(v0 + 32);
}

double sub_1AE18@<D0>(uint64_t *a1@<X0>, double *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  double result;
  uint64_t v7;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1E1BE8);
  v7 = v3;
  v5 = sub_6FD0(&qword_25E940, type metadata accessor for PagedScrollViewModel, (uint64_t)&protocol conformance descriptor for PagedScrollViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v7, KeyPath, v5);
  swift_release(KeyPath);
  result = *(double *)(v3 + 32);
  *a2 = result;
  return result;
}

uint64_t sub_1AEA4(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v5;

  v2 = *a2;
  KeyPath = swift_getKeyPath(&unk_1E1BE8);
  v5 = v2;
  sub_6FD0(&qword_25E940, type metadata accessor for PagedScrollViewModel, (uint64_t)&protocol conformance descriptor for PagedScrollViewModel);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v5, KeyPath, sub_22C38);
  return swift_release(KeyPath);
}

double sub_1AF54()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_1E1C10);
  v4 = v0;
  v2 = sub_6FD0(&qword_25E940, type metadata accessor for PagedScrollViewModel, (uint64_t)&protocol conformance descriptor for PagedScrollViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v4, KeyPath, v2);
  swift_release(KeyPath);
  return *(double *)(v0 + 40);
}

double sub_1AFD8@<D0>(uint64_t *a1@<X0>, double *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  double result;
  uint64_t v7;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1E1C10);
  v7 = v3;
  v5 = sub_6FD0(&qword_25E940, type metadata accessor for PagedScrollViewModel, (uint64_t)&protocol conformance descriptor for PagedScrollViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v7, KeyPath, v5);
  swift_release(KeyPath);
  result = *(double *)(v3 + 40);
  *a2 = result;
  return result;
}

uint64_t sub_1B064(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v5;

  v2 = *a2;
  KeyPath = swift_getKeyPath(&unk_1E1C10);
  v5 = v2;
  sub_6FD0(&qword_25E940, type metadata accessor for PagedScrollViewModel, (uint64_t)&protocol conformance descriptor for PagedScrollViewModel);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v5, KeyPath, sub_22C24);
  return swift_release(KeyPath);
}

uint64_t PagedScrollViewModel.__allocating_init(totalPages:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = swift_allocObject(v1, *(unsigned int *)(v1 + 48), *(unsigned __int16 *)(v1 + 52));
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  ObservationRegistrar.init()();
  *(_QWORD *)(v3 + 48) = a1;
  return v3;
}

uint64_t PagedScrollViewModel.init(totalPages:)(uint64_t a1)
{
  uint64_t v1;

  *(_OWORD *)(v1 + 16) = 0u;
  *(_OWORD *)(v1 + 32) = 0u;
  ObservationRegistrar.init()();
  *(_QWORD *)(v1 + 48) = a1;
  return v1;
}

uint64_t PagedScrollViewModel.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC7BooksUI20PagedScrollViewModel___observationRegistrar;
  v2 = type metadata accessor for ObservationRegistrar(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t PagedScrollViewModel.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC7BooksUI20PagedScrollViewModel___observationRegistrar;
  v2 = type metadata accessor for ObservationRegistrar(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

double sub_1B234@<D0>(double *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  double v7;
  double v8;
  double result;
  uint64_t v10;

  v2 = type metadata accessor for NamedCoordinateSpace(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin();
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  static CoordinateSpaceProtocol<>.scrollView.getter(v4);
  GeometryProxy.frame<A>(in:)(v6, v2, &protocol witness table for NamedCoordinateSpace);
  v8 = v7;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  result = -v8;
  *a1 = -v8;
  return result;
}

uint64_t sub_1B2E0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t KeyPath;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v3 = *(int *)(type metadata accessor for PagedScrollViewPositionObserverModifier(0) + 24);
  v4 = *(_QWORD *)(a2 + v3);
  v5 = GeometryProxy.size.getter();
  GeometryProxy.safeAreaInsets.getter(v5);
  GeometryProxy.safeAreaInsets.getter(v6);
  KeyPath = swift_getKeyPath(&unk_1E1BE8);
  v14 = v4;
  sub_6FD0(&qword_25E940, type metadata accessor for PagedScrollViewModel, (uint64_t)&protocol conformance descriptor for PagedScrollViewModel);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v14, KeyPath, sub_21D10);
  v8 = swift_release(KeyPath);
  v9 = *(_QWORD *)(a2 + v3);
  GeometryProxy.safeAreaInsets.getter(v8);
  v10 = swift_getKeyPath(&unk_1E1C10);
  v14 = v9;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v14, v10, sub_21D28);
  swift_release(v10);
  v11 = *(_QWORD *)(a2 + v3);
  v12 = swift_getKeyPath(&unk_1E1C38);
  v14 = v11;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v14, v12, sub_21D40);
  return swift_release(v12);
}

uint64_t sub_1B488@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  double (**v13)@<D0>(double *@<X8>);
  uint64_t v14;

  v6 = *(_QWORD *)(a2 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  __chkstk_darwin(a1);
  sub_1E428(v3, (uint64_t)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for PagedScrollViewPositionObserverModifier);
  v8 = *(unsigned __int8 *)(v6 + 80);
  v9 = (v8 + 16) & ~v8;
  v10 = swift_allocObject(&unk_24BE30, v9 + v7, v8 | 7);
  sub_21C88((uint64_t)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v10 + v9, type metadata accessor for PagedScrollViewPositionObserverModifier);
  v11 = sub_5440(&qword_25ECE0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a3, a1, v11);
  result = sub_5440(&qword_25ECE8);
  v13 = (double (**)@<D0>(double *@<X8>))(a3 + *(int *)(result + 36));
  *v13 = sub_1B234;
  v13[1] = 0;
  v13[2] = (double (*)@<D0>(double *@<X8>))sub_21CCC;
  v13[3] = (double (*)@<D0>(double *@<X8>))v10;
  return result;
}

uint64_t PagedScrollView.init(frames:viewModel:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  int *v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  _QWORD v32[3];
  __int128 v33;
  __int128 v34;
  _BYTE v35[24];
  _QWORD *v36;

  *a3 = swift_getKeyPath(&unk_1E17D8);
  v6 = sub_5440(&qword_25E948);
  swift_storeEnumTagMultiPayload(a3, v6, 0);
  v7 = (int *)type metadata accessor for PagedScrollView(0);
  v8 = (char *)a3 + v7[5];
  *(_QWORD *)v8 = swift_getKeyPath(&unk_1E1808);
  v8[8] = 0;
  v9 = (char *)a3 + v7[6];
  *(_QWORD *)v9 = swift_getKeyPath(&unk_1E1838);
  v9[40] = 0;
  v10 = (char *)a3 + v7[7];
  v32[0] = 0;
  v32[1] = 0;
  v11 = sub_5440(&qword_25E950);
  State.init(wrappedValue:)(&v34, v32, v11);
  v12 = *(_QWORD *)v35;
  *(_OWORD *)v10 = v34;
  *((_QWORD *)v10 + 2) = v12;
  v13 = *(_QWORD *)(a1 + 16);
  if (v13)
  {
    v30 = a2;
    v36 = &_swiftEmptyArrayStorage;
    sub_1E40C(0, v13, 0);
    v29 = a1;
    v14 = a1 + 32;
    v15 = v36;
    do
    {
      sub_BD00(v14, (uint64_t)v32);
      v31 = v33;
      v16 = v33;
      v17 = sub_5480(v32, v33);
      v18 = *(_QWORD *)(v16 - 8);
      __chkstk_darwin(v17);
      v20 = (char *)&v29 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *))(v18 + 16))(v20);
      *(_OWORD *)&v35[8] = v31;
      v21 = sub_C404(&v34);
      (*(void (**)(_QWORD *, char *, uint64_t))(v18 + 32))(v21, v20, v16);
      _s7BooksUI13AnyPagedFrameVwxx_0(v32);
      if ((swift_isUniquelyReferenced_nonNull_native(v15) & 1) == 0)
      {
        sub_1E40C(0, v15[2] + 1, 1);
        v15 = v36;
      }
      v23 = v15[2];
      v22 = v15[3];
      if (v23 >= v22 >> 1)
      {
        sub_1E40C(v22 > 1, v23 + 1, 1);
        v15 = v36;
      }
      v15[2] = v23 + 1;
      v24 = (char *)&v15[5 * v23];
      v25 = v34;
      v26 = *(_OWORD *)v35;
      *((_QWORD *)v24 + 8) = *(_QWORD *)&v35[16];
      *((_OWORD *)v24 + 2) = v25;
      *((_OWORD *)v24 + 3) = v26;
      v14 += 40;
      --v13;
    }
    while (v13);
    v27 = swift_bridgeObjectRelease(v29);
    a2 = v30;
  }
  else
  {
    v27 = swift_bridgeObjectRelease(a1);
    v15 = &_swiftEmptyArrayStorage;
  }
  *(_QWORD *)((char *)a3 + v7[8]) = v15;
  *(_QWORD *)((char *)a3 + v7[9]) = a2;
  return UUID.init()(v27);
}

uint64_t PagedScrollView.body.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  v3 = type metadata accessor for PagedScrollView(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  __chkstk_darwin(v3);
  sub_1E428(v1, (uint64_t)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for PagedScrollView);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = (v6 + 16) & ~v6;
  v8 = swift_allocObject(&unk_24BC60, v7 + v5, v6 | 7);
  result = sub_21C88((uint64_t)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v8 + v7, type metadata accessor for PagedScrollView);
  *a1 = sub_1E470;
  a1[1] = v8;
  return result;
}

uint64_t sub_1B8C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  __int128 *v24;
  uint64_t v25;
  _QWORD *v26;
  __int128 v27;
  uint64_t v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t OpaqueTypeConformance2;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  int v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t (**v90)();
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  char *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  char *v122;
  uint64_t v123;
  char v124[8];
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  __int128 v129;
  __int128 v130;
  uint64_t v131;
  __int128 v132;
  __int128 v133;
  uint64_t v134;

  v120 = a3;
  v5 = type metadata accessor for PagedScrollView(0);
  v95 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v96 = v6;
  v97 = (char *)&v92 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_5440(&qword_25EDA0);
  __chkstk_darwin(v7);
  v94 = (char *)&v92 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v111 = type metadata accessor for ScrollIndicatorVisibility(0);
  v110 = *(_QWORD *)(v111 - 8);
  __chkstk_darwin(v111);
  v121 = (char *)&v92 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v103 = type metadata accessor for PagingScrollTargetBehavior(0);
  v107 = *(_QWORD *)(v103 - 8);
  __chkstk_darwin(v103);
  v105 = (char *)&v92 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v100 = sub_5440(&qword_25EDA8);
  v101 = *(_QWORD *)(v100 - 8);
  __chkstk_darwin(v100);
  v12 = (char *)&v92 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v104 = sub_5440(&qword_25EDB0);
  v106 = *(_QWORD *)(v104 - 8);
  __chkstk_darwin(v104);
  v99 = (char *)&v92 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v109 = sub_5440(&qword_25EDB8);
  v108 = *(_QWORD *)(v109 - 8);
  __chkstk_darwin(v109);
  v98 = (char *)&v92 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v116 = sub_5440(&qword_25EDC0);
  v114 = *(_QWORD *)(v116 - 8);
  __chkstk_darwin(v116);
  v122 = (char *)&v92 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v93 = sub_5440(&qword_25EDC8);
  __chkstk_darwin(v93);
  v115 = (char *)&v92 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v113 = sub_5440(&qword_25EDD0);
  __chkstk_darwin(v113);
  v119 = (uint64_t)&v92 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v117 = sub_5440(&qword_25EDD8);
  v18 = __chkstk_darwin(v117);
  v118 = (uint64_t)&v92 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = static Axis.Set.vertical.getter(v18);
  v125 = a2;
  v126 = a1;
  v21 = sub_5440(&qword_25EDE0);
  v22 = sub_220F4();
  ScrollView.init(_:showsIndicators:content:)(v20, 1, sub_220EC, v124, v21, v22);
  v112 = v5;
  v23 = *(int *)(v5 + 28);
  v123 = a2;
  v24 = (__int128 *)(a2 + v23);
  v25 = *(_QWORD *)(a2 + v23 + 16);
  v129 = *v24;
  *(_QWORD *)&v130 = v25;
  v102 = sub_5440(&qword_25EE08);
  v26 = State.projectedValue.getter(&v132, v102);
  v27 = v132;
  v28 = *((_QWORD *)&v133 + 1);
  v29 = static UnitPoint.center.getter(v26);
  v31 = v30;
  v32 = sub_7FD8(&qword_25EE10, &qword_25EDA8, (uint64_t)&protocol conformance descriptor for ScrollView<A>);
  v33 = v99;
  v34 = v31;
  v35 = v100;
  View.scrollPosition<A>(id:anchor:)(&v132, *(_QWORD *)&v29, v34, 0, v100, &type metadata for String, v32, &protocol witness table for String);
  v36 = v103;
  swift_release(*((_QWORD *)&v27 + 1));
  v37 = v98;
  swift_release(v27);
  swift_bridgeObjectRelease(v28);
  v38 = (*(uint64_t (**)(char *, uint64_t))(v101 + 8))(v12, v35);
  v39 = v105;
  PagingScrollTargetBehavior.init()(v38);
  *(_QWORD *)&v132 = v35;
  *((_QWORD *)&v132 + 1) = &type metadata for String;
  *(_QWORD *)&v133 = v32;
  *((_QWORD *)&v133 + 1) = &protocol witness table for String;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v132, &opaque type descriptor for <<opaque return type of View.scrollPosition<A>(id:anchor:)>>, 1);
  v41 = v104;
  View.scrollTargetBehavior<A>(_:)(v39, v104, v36, OpaqueTypeConformance2, &protocol witness table for PagingScrollTargetBehavior);
  (*(void (**)(char *, uint64_t))(v107 + 8))(v39, v36);
  v42 = v41;
  v43 = (*(uint64_t (**)(char *, uint64_t))(v106 + 8))(v33, v41);
  v44 = static ScrollIndicatorVisibility.never.getter(v43);
  v45 = static Axis.Set.vertical.getter(v44);
  v46 = v45;
  v47 = static Axis.Set.horizontal.getter(v45);
  v48 = Axis.Set.init(rawValue:)(0);
  v49 = Axis.Set.init(rawValue:)(v48);
  if (Axis.Set.init(rawValue:)(v49 & v46) != v46)
    v48 = Axis.Set.init(rawValue:)(v48 | v46);
  v50 = Axis.Set.init(rawValue:)(v48);
  if (Axis.Set.init(rawValue:)(v50 & v47) != v47)
    v48 = Axis.Set.init(rawValue:)(v48 | v47);
  v51 = v102;
  *(_QWORD *)&v132 = v42;
  *((_QWORD *)&v132 + 1) = v36;
  *(_QWORD *)&v133 = OpaqueTypeConformance2;
  *((_QWORD *)&v133 + 1) = &protocol witness table for PagingScrollTargetBehavior;
  v52 = swift_getOpaqueTypeConformance2(&v132, &opaque type descriptor for <<opaque return type of View.scrollTargetBehavior<A>(_:)>>, 1);
  v53 = v121;
  v54 = v109;
  View.scrollIndicators(_:axes:)(v121, v48, v109, v52);
  (*(void (**)(char *, uint64_t))(v110 + 8))(v53, v111);
  (*(void (**)(char *, uint64_t))(v108 + 8))(v37, v54);
  v55 = _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0();
  v57 = v56;
  v58 = *(int *)(v112 + 32);
  v59 = *(_QWORD *)(v123 + v58);
  v60 = *(_QWORD *)(v59 + 16);
  if (!v60)
  {
    swift_bridgeObjectRetain(*(_QWORD *)(v123 + v58));
LABEL_18:
    v72 = (uint64_t)v97;
    v73 = v96;
    v74 = v95;
    v75 = (uint64_t)v94;
    v76 = v93;
    v134 = 0;
    v132 = 0u;
    v133 = 0u;
    swift_bridgeObjectRelease(v59);
    goto LABEL_21;
  }
  v61 = v59 + 32;
  swift_bridgeObjectRetain_n(*(_QWORD *)(v123 + v58), 2);
  while (1)
  {
    sub_221C0(v61, (uint64_t)&v129);
    v62 = *((_QWORD *)&v130 + 1);
    v63 = v131;
    sub_5480(&v129, *((uint64_t *)&v130 + 1));
    v64 = (*(uint64_t (**)(uint64_t, uint64_t))(v63 + 16))(v62, v63);
    v66 = v65;
    v67 = *((_QWORD *)v24 + 2);
    v132 = *v24;
    *(_QWORD *)&v133 = v67;
    State.wrappedValue.getter(&v127, v51);
    v68 = v128;
    if (!v128)
    {
      swift_bridgeObjectRelease(v66);
      goto LABEL_8;
    }
    if (v64 == v127 && v128 == v66)
      break;
    v70 = _stringCompareWithSmolCheck(_:_:expecting:)(v64, v66, v127, v128, 0);
    swift_bridgeObjectRelease(v66);
    swift_bridgeObjectRelease(v68);
    if ((v70 & 1) != 0)
    {
      v71 = v59;
      goto LABEL_20;
    }
LABEL_8:
    sub_22200(&v129);
    v61 += 40;
    if (!--v60)
    {
      swift_bridgeObjectRelease(v59);
      goto LABEL_18;
    }
  }
  swift_bridgeObjectRelease(v59);
  swift_bridgeObjectRelease(v66);
  v71 = v68;
LABEL_20:
  swift_bridgeObjectRelease(v71);
  v132 = v129;
  v133 = v130;
  v134 = v131;
  swift_bridgeObjectRelease(v59);
  v72 = (uint64_t)v97;
  v73 = v96;
  v74 = v95;
  v75 = (uint64_t)v94;
  v76 = v93;
LABEL_21:
  v77 = (uint64_t)v115;
  v78 = (uint64_t)&v115[*(int *)(v76 + 36)];
  v79 = v123;
  sub_1CDFC((uint64_t)&v132, v75);
  sub_B414((uint64_t)&v132, &qword_25EE18);
  sub_167A4(v75, v78, &qword_25EDA0);
  v80 = (uint64_t *)(v78 + *(int *)(sub_5440(&qword_25EE20) + 36));
  *v80 = v55;
  v80[1] = v57;
  v81 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v114 + 32))(v77, v122, v116);
  v82 = static SafeAreaRegions.all.getter(v81);
  v83 = static Edge.Set.all.getter(v82);
  v84 = v119;
  sub_B3D0(v77, v119, &qword_25EDC8);
  v85 = v84 + *(int *)(v113 + 36);
  *(_QWORD *)v85 = v82;
  *(_BYTE *)(v85 + 8) = v83;
  sub_B414(v77, &qword_25EDC8);
  sub_1E428(v79, v72, type metadata accessor for PagedScrollView);
  v86 = *(unsigned __int8 *)(v74 + 80);
  v87 = (v86 + 16) & ~v86;
  v88 = swift_allocObject(&unk_24BE80, v87 + v73, v86 | 7);
  sub_21C88(v72, v88 + v87, type metadata accessor for PagedScrollView);
  v89 = v118;
  sub_B3D0(v84, v118, &qword_25EDD0);
  v90 = (uint64_t (**)())(v89 + *(int *)(v117 + 36));
  *v90 = sub_22228;
  v90[1] = (uint64_t (*)())v88;
  v90[2] = 0;
  v90[3] = 0;
  sub_B414(v84, &qword_25EDD0);
  return sub_167A4(v89, v120, &qword_25EDD8);
}

uint64_t sub_1C244@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t OpaqueTypeConformance2;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(char *, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE v37[16];
  uint64_t v38;
  uint64_t v39;
  _QWORD v40[2];

  v35 = a2;
  v36 = a3;
  v5 = type metadata accessor for PinnedScrollableViews(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_5440(&qword_25EDF0);
  v34 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_5440(&qword_25EEA8);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = a1;
  v39 = a2;
  v16 = static HorizontalAlignment.center.getter(v13);
  LODWORD(v40[0]) = 0;
  v17 = sub_6FD0(&qword_25EEB0, (uint64_t (*)(uint64_t))&type metadata accessor for PinnedScrollableViews, (uint64_t)&protocol conformance descriptor for PinnedScrollableViews);
  dispatch thunk of OptionSet.init(rawValue:)(v40, v5, v17);
  v18 = sub_5440(&qword_25EEB8);
  v19 = sub_7EF8(&qword_25EEC0);
  v20 = sub_22520();
  v40[0] = v19;
  v40[1] = v20;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v40, &opaque type descriptor for <<opaque return type of View.containerRelativeFrame(_:alignment:)>>, 1);
  LazyVStack.init(alignment:spacing:pinnedViews:content:)(v16, 0, 0, v7, sub_22518, v37, v18, OpaqueTypeConformance2);
  v22 = sub_7FD8(&qword_25EDF8, &qword_25EDF0, (uint64_t)&protocol conformance descriptor for LazyVStack<A>);
  View.scrollTargetLayout(isEnabled:)(1, v8, v22);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v10, v8);
  v23 = type metadata accessor for PagedScrollView(0);
  v24 = *(_QWORD *)(*(_QWORD *)(a1 + *(int *)(v23 + 32)) + 16);
  v25 = *(_QWORD *)(a1 + *(int *)(v23 + 36));
  v26 = sub_5440(&qword_25EDE0);
  v27 = v36;
  v28 = v36 + *(int *)(v26 + 36);
  v29 = type metadata accessor for GeometryProxy(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 16))(v28, v35, v29);
  v30 = type metadata accessor for PagedScrollViewPositionObserverModifier(0);
  *(_QWORD *)(v28 + *(int *)(v30 + 20)) = v24;
  *(_QWORD *)(v28 + *(int *)(v30 + 24)) = v25;
  (*(void (**)(uint64_t, char *, uint64_t))(v12 + 16))(v27, v15, v11);
  v31 = *(uint64_t (**)(char *, uint64_t))(v12 + 8);
  swift_retain(v25);
  return v31(v15, v11);
}

uint64_t sub_1C4C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, char *, uint64_t);
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t OpaqueTypeConformance2;
  unint64_t v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD v52[2];
  uint64_t v53;

  v45 = a2;
  v51 = a3;
  v4 = type metadata accessor for PagedScrollView(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  __chkstk_darwin(v4);
  v7 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for GeometryProxy(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  __chkstk_darwin(v8);
  v11 = sub_5440(&qword_25EEC0);
  v49 = *(_QWORD *)(v11 - 8);
  v50 = v11;
  __chkstk_darwin(v11);
  v13 = (char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_5440(&qword_25EEB8);
  v47 = *(_QWORD *)(v14 - 8);
  v48 = v14;
  __chkstk_darwin(v14);
  v46 = (char *)&v45 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_QWORD *)(a1 + *(int *)(v4 + 32));
  v53 = v16;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v45, v8);
  sub_1E428(a1, (uint64_t)v7, type metadata accessor for PagedScrollView);
  v17 = *(unsigned __int8 *)(v9 + 80);
  v18 = (v17 + 16) & ~v17;
  v19 = *(unsigned __int8 *)(v5 + 80);
  v20 = (v10 + v19 + v18) & ~v19;
  v21 = swift_allocObject(&unk_24BED0, v20 + v6, v17 | v19 | 7);
  v22 = *(void (**)(uint64_t, char *, uint64_t))(v9 + 32);
  v23 = v13;
  v22(v21 + v18, (char *)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
  sub_21C88((uint64_t)v7, v21 + v20, type metadata accessor for PagedScrollView);
  swift_bridgeObjectRetain(v16);
  v24 = sub_5440(&qword_25EF10);
  v25 = sub_5440(&qword_25EF18);
  v26 = sub_7FD8(&qword_25EF20, &qword_25EF10, (uint64_t)&protocol conformance descriptor for [A]);
  v27 = sub_7EF8(&qword_25EED0);
  v28 = sub_225AC();
  v52[0] = v27;
  v52[1] = v28;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v52, &opaque type descriptor for <<opaque return type of View.appAnalyticsData(_:for:)>>, 1);
  v30 = sub_22934();
  v31 = ForEach<>.init(_:content:)(&v53, sub_228BC, v21, v24, &type metadata for String, v25, v26, OpaqueTypeConformance2, v30);
  v32 = static Axis.Set.horizontal.getter(v31);
  v33 = static Axis.Set.vertical.getter();
  v34 = Axis.Set.init(rawValue:)(0);
  v35 = Axis.Set.init(rawValue:)(v34);
  if (Axis.Set.init(rawValue:)(v35 & v32) != v32)
    v34 = Axis.Set.init(rawValue:)(v34 | v32);
  v36 = Axis.Set.init(rawValue:)(v34);
  if (Axis.Set.init(rawValue:)(v36 & v33) != v33)
    v34 = Axis.Set.init(rawValue:)(v34 | v33);
  v37 = _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0();
  v39 = v38;
  v40 = sub_22520();
  v41 = v46;
  v42 = v34;
  v43 = v50;
  View.containerRelativeFrame(_:alignment:)(v42, v37, v39, v50, v40);
  (*(void (**)(char *, uint64_t))(v49 + 8))(v23, v43);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v47 + 32))(v51, v41, v48);
}

uint64_t sub_1C814@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  __int128 v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _BYTE v80[40];
  __int128 v81;
  uint64_t v82;
  __int128 v83;
  uint64_t v84;
  uint64_t v85;

  v78 = a4;
  v79 = a3;
  v77 = sub_5440(&qword_25EED0);
  __chkstk_darwin(v77);
  v74 = (char *)&v65 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v76 = type metadata accessor for DataStackID(0);
  v75 = *(_QWORD *)(v76 - 8);
  __chkstk_darwin(v76);
  v73 = (char *)&v65 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_5440(&qword_25EDA0);
  v9 = __chkstk_darwin(v8);
  v68 = (uint64_t)&v65 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  *(_QWORD *)&v69 = (char *)&v65 - v11;
  v72 = type metadata accessor for PagedScrollView(0);
  __chkstk_darwin(v72);
  v13 = (char *)&v65 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for GeometryProxy(0);
  v66 = *(_QWORD *)(v14 - 8);
  v15 = v66;
  __chkstk_darwin(v14);
  v17 = (char *)&v65 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = (int *)sub_5440(&qword_25EEF8);
  v19 = __chkstk_darwin(v18);
  v21 = (char *)&v65 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v67 = (uint64_t)&v65 - v22;
  v71 = sub_5440(&qword_25EEE0);
  __chkstk_darwin(v71);
  v70 = (uint64_t)&v65 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
  v24(v17, a2, v14);
  v26 = a1[3];
  v25 = a1[4];
  sub_5480(a1, v26);
  v27 = (*(double (**)(uint64_t, uint64_t))(v25 + 32))(v26, v25);
  v28 = a1[3];
  v29 = a1[4];
  sub_5480(a1, v28);
  v30 = (*(uint64_t (**)(uint64_t, uint64_t))(v29 + 40))(v28, v29);
  v32 = v31;
  sub_221C0((uint64_t)a1, (uint64_t)&v83);
  v33 = v79;
  sub_1E428(v79, (uint64_t)v13, type metadata accessor for PagedScrollView);
  sub_221C0((uint64_t)a1, (uint64_t)&v81);
  *(double *)&v21[v18[13]] = v27;
  v34 = (uint64_t *)&v21[v18[14]];
  *v34 = v30;
  v34[1] = v32;
  v24(v21, (uint64_t)v17, v14);
  sub_221C0((uint64_t)&v83, (uint64_t)&v21[v18[15]]);
  sub_221C0((uint64_t)&v81, (uint64_t)v80);
  v35 = v68;
  sub_1CDFC((uint64_t)v80, v68);
  sub_B414((uint64_t)v80, &qword_25EE18);
  v36 = v35;
  v37 = v69;
  sub_167A4(v36, v69, &qword_25EDA0);
  sub_224DC((uint64_t)v13, type metadata accessor for PagedScrollView);
  sub_22200(&v81);
  sub_22200(&v83);
  (*(void (**)(char *, uint64_t))(v66 + 8))(v17, v14);
  sub_167A4(v37, (uint64_t)&v21[v18[16]], &qword_25EDA0);
  v38 = v67;
  sub_167A4((uint64_t)v21, v67, &qword_25EEF8);
  v39 = a1[3];
  v40 = a1[4];
  sub_5480(a1, v39);
  v41 = (*(uint64_t (**)(uint64_t, uint64_t))(v40 + 16))(v39, v40);
  v43 = v42;
  v44 = v33 + *(int *)(v72 + 28);
  v45 = *(_QWORD *)(v44 + 16);
  v81 = *(_OWORD *)v44;
  v82 = v45;
  v46 = sub_5440(&qword_25EE08);
  State.projectedValue.getter(&v83, v46);
  v69 = v83;
  v47 = v84;
  v48 = v85;
  v49 = v70;
  sub_B3D0(v38, v70, &qword_25EEF8);
  v50 = v71;
  v51 = v49 + *(int *)(v71 + 36);
  *(_QWORD *)v51 = v41;
  *(_QWORD *)(v51 + 8) = v43;
  *(_OWORD *)(v51 + 16) = v69;
  *(_QWORD *)(v51 + 32) = v47;
  *(_QWORD *)(v51 + 40) = v48;
  sub_B414(v38, &qword_25EEF8);
  v52 = type metadata accessor for YearInReviewExposureEvent(0);
  v53 = sub_5440(&qword_25EF30);
  v54 = swift_allocObject(v53, 80, 7);
  *(_OWORD *)(v54 + 16) = xmmword_1E0B70;
  v55 = a1[3];
  v56 = a1[4];
  sub_5480(a1, v55);
  v57 = (*(uint64_t (**)(uint64_t, uint64_t))(v56 + 48))(v55, v56);
  v58 = UUID.uuidString.getter(v57);
  v59 = v73;
  DataStackID.init(stringLiteral:)(v58);
  v60 = sub_2267C();
  v61 = sub_6FD0((unint64_t *)&qword_25EF08, (uint64_t (*)(uint64_t))&type metadata accessor for YearInReviewExposureEvent, (uint64_t)&protocol conformance descriptor for YearInReviewExposureEvent);
  v62 = (uint64_t)v74;
  View.emitAppAnalyticsExposureEvent<A>(_:)(v52, v50, v52, v60, v61);
  v63 = sub_225AC();
  View.appAnalyticsData(_:for:)(v54, v59, v77, v63);
  sub_B414(v62, &qword_25EED0);
  swift_bridgeObjectRelease(v54);
  (*(void (**)(char *, uint64_t))(v75 + 8))(v59, v76);
  return sub_B414(v49, &qword_25EEE0);
}

uint64_t sub_1CDFC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  unsigned __int8 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  double v45;
  id v46;
  uint64_t v47;
  uint64_t KeyPath;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t (**v63)@<X0>(uint64_t@<X8>);
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t (**v88)@<X0>(uint64_t@<X8>);
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t (**v109)@<X0>(uint64_t@<X8>);
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unsigned __int8 v124;
  uint64_t v125;
  uint64_t v126;
  void *v127;
  uint64_t v128;
  uint64_t v129;
  void *v130;
  uint64_t v131;
  void *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  void *v137;
  uint64_t v138;
  uint64_t v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  uint64_t v150;

  v121 = a2;
  v107 = sub_5440(&qword_25EE28);
  __chkstk_darwin(v107);
  v109 = (uint64_t (**)@<X0>(uint64_t@<X8>))((char *)&v98 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v108 = sub_5440(&qword_25EE30);
  __chkstk_darwin(v108);
  v100 = (char *)&v98 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v119 = sub_5440(&qword_25EE38);
  __chkstk_darwin(v119);
  v110 = (char *)&v98 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_5440(&qword_25EE40);
  __chkstk_darwin(v6);
  v8 = (char *)&v98 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v117 = sub_5440(&qword_25EE48);
  __chkstk_darwin(v117);
  v118 = (uint64_t)&v98 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_5440(&qword_25EE50);
  __chkstk_darwin(v10);
  v120 = (char *)&v98 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v105 = sub_5440(&qword_25EE58);
  __chkstk_darwin(v105);
  v106 = (uint64_t *)((char *)&v98 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v99 = type metadata accessor for PagedScrollView(0);
  __chkstk_darwin(v99);
  v14 = (char *)&v98 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v111 = type metadata accessor for ColorScheme(0);
  v113 = *(_QWORD *)(v111 - 8);
  __chkstk_darwin(v111);
  v104 = (uint64_t)&v98 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v116 = sub_5440(&qword_25EE60);
  v16 = __chkstk_darwin(v116);
  v18 = (uint64_t *)((char *)&v98 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v16);
  v112 = (uint64_t)&v98 - v19;
  v20 = sub_5440(&qword_25E928);
  v21 = __chkstk_darwin(v20);
  v23 = (char *)&v98 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v115 = (uint64_t)&v98 - v24;
  v25 = type metadata accessor for PageBackground(0);
  __chkstk_darwin(v25);
  v27 = (char *)&v98 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_B3D0(a1, (uint64_t)&v140, &qword_25EE18);
  v28 = *((_QWORD *)&v141 + 1);
  if (*((_QWORD *)&v141 + 1))
  {
    v102 = v6;
    v103 = v10;
    v101 = v8;
    v29 = v142;
    sub_5480(&v140, *((uint64_t *)&v141 + 1));
    (*(void (**)(uint64_t, uint64_t))(v29 + 24))(v28, v29);
    sub_22200(&v140);
    if (swift_getEnumCaseMultiPayload(v27, v25) == 1)
    {
      v30 = *((_OWORD *)v27 + 9);
      v148 = *((_OWORD *)v27 + 8);
      v149 = v30;
      v150 = *((_QWORD *)v27 + 20);
      v31 = *((_OWORD *)v27 + 5);
      v144 = *((_OWORD *)v27 + 4);
      v145 = v31;
      v32 = *((_OWORD *)v27 + 7);
      v146 = *((_OWORD *)v27 + 6);
      v147 = v32;
      v33 = *((_OWORD *)v27 + 1);
      v140 = *(_OWORD *)v27;
      v141 = v33;
      v34 = *((_OWORD *)v27 + 3);
      v142 = *((_OWORD *)v27 + 2);
      v143 = v34;
      CoverViewModel.source.getter((uint64_t)&v122);
      v35 = v124;
      if (v124 == 255)
      {
        v87 = swift_allocObject(&unk_24BEA8, 32, 7);
        *(_QWORD *)(v87 + 16) = 0xD00000000000002FLL;
        *(_QWORD *)(v87 + 24) = 0x80000000001F9CF0;
        v88 = v109;
        *v109 = sub_18B10;
        v88[1] = (uint64_t (*)@<X0>(uint64_t@<X8>))v87;
        swift_storeEnumTagMultiPayload(v88, v107, 1);
        v89 = sub_5440(&qword_25E830);
        v90 = sub_223C8();
        v91 = sub_7FD8((unint64_t *)&qword_25E838, &qword_25E830, (uint64_t)&protocol conformance descriptor for BooksFailureView<A>);
        v67 = (uint64_t)v110;
        _ConditionalContent<>.init(storage:)(v88, v108, v89, v90, v91);
      }
      else
      {
        v37 = v122;
        v36 = v123;
        v38 = v99;
        v39 = v114;
        sub_315E0((uint64_t)&v122);
        v40 = v125;
        v41 = v126;
        sub_5480(&v122, v125);
        v137 = (void *)v37;
        v138 = v36;
        LOBYTE(v139) = v35 & 1;
        v42 = v144;
        v43 = v39 + *(int *)(v38 + 20);
        v44 = *(_QWORD *)v43;
        LOBYTE(v38) = *(_BYTE *)(v43 + 8);
        sub_F9E4(*(_QWORD *)v43, v38);
        v45 = sub_30784(v44, v38);
        sub_BE0C(v44, v38);
        BYTE2(v135) = -2;
        LOWORD(v135) = -772;
        v115 = (*(uint64_t (**)(void **, uint64_t *, uint64_t, uint64_t, double, double, double))(v41 + 16))(&v137, &v135, v40, v41, *(double *)&v42, *((double *)&v42 + 1), v45);
        sub_224BC(v37, v36, v35);
        v46 = objc_msgSend((id)objc_opt_self(UIColor), "systemGrayColor");
        v47 = Color.init(uiColor:)(v46);
        KeyPath = swift_getKeyPath(&unk_1E1808);
        type metadata accessor for CGSize(0);
        v50 = v49;
        v135 = 0;
        v136 = 0;
        State.init(wrappedValue:)(&v137, &v135, v49);
        v51 = v137;
        v52 = v138;
        v53 = v139;
        v135 = 0;
        v54 = sub_5440(&qword_25E158);
        State.init(wrappedValue:)(&v137, &v135, v54);
        v55 = v137;
        v56 = v138;
        v135 = 0;
        v136 = 0;
        State.init(wrappedValue:)(&v137, &v135, v50);
        v57 = v137;
        v58 = v138;
        v59 = v139;
        _s7BooksUI13AnyPagedFrameVwxx_0(&v122);
        v122 = v47;
        v123 = v115;
        v124 = 0;
        v125 = KeyPath;
        LOBYTE(v126) = 0;
        v127 = v51;
        v128 = v52;
        v129 = v53;
        v130 = v55;
        v131 = v56;
        v132 = v57;
        v133 = v58;
        v134 = v59;
        v60 = sub_5440(&qword_25EE98);
        v61 = sub_7FD8(&qword_25EE90, &qword_25EE98, (uint64_t)&protocol conformance descriptor for BackdropView<A>);
        v62 = (uint64_t)v100;
        View.accessibilityHidden(_:)(1, v60, v61);
        swift_release(v47);
        swift_unknownObjectRelease(v115);
        sub_BE0C(KeyPath, 0);
        swift_release(v53);

        swift_release(v56);
        swift_release(v59);
        v63 = v109;
        sub_B3D0(v62, (uint64_t)v109, &qword_25EE30);
        swift_storeEnumTagMultiPayload(v63, v107, 0);
        v64 = sub_5440(&qword_25E830);
        v65 = sub_223C8();
        v66 = sub_7FD8((unint64_t *)&qword_25E838, &qword_25E830, (uint64_t)&protocol conformance descriptor for BooksFailureView<A>);
        v67 = (uint64_t)v110;
        _ConditionalContent<>.init(storage:)(v63, v108, v64, v65, v66);
        sub_B414(v62, &qword_25EE30);
      }
      v92 = v118;
      sub_B3D0(v67, v118, &qword_25EE38);
      swift_storeEnumTagMultiPayload(v92, v117, 1);
      v93 = sub_222C0();
      v94 = sub_22344();
      v95 = (uint64_t)v120;
      _ConditionalContent<>.init(storage:)(v92, v116, v119, v93, v94);
      v96 = (uint64_t)v101;
      sub_B3D0(v95, (uint64_t)v101, &qword_25EE50);
      swift_storeEnumTagMultiPayload(v96, v102, 0);
      v97 = sub_22254();
      _ConditionalContent<>.init(storage:)(v96, v103, &type metadata for EmptyView, v97, &protocol witness table for EmptyView);
      sub_B414(v95, &qword_25EE50);
      sub_B414(v67, &qword_25EE38);
      return sub_22488((uint64_t)&v140);
    }
    else
    {
      v70 = *(_QWORD *)v27;
      v71 = sub_5440(&qword_25E930);
      v72 = v115;
      sub_167A4((uint64_t)&v27[*(int *)(v71 + 48)], v115, &qword_25E928);
      v73 = swift_getKeyPath(&unk_1E17D8);
      sub_B3D0(v72, (uint64_t)v23, &qword_25E928);
      sub_1E428(v114, (uint64_t)v14, type metadata accessor for PagedScrollView);
      v74 = v113;
      v75 = v111;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v113 + 48))(v23, 1, v111) == 1)
      {
        v76 = v104;
        sub_31378(v104);
        v74 = v113;
        sub_224DC((uint64_t)v14, type metadata accessor for PagedScrollView);
        sub_B414((uint64_t)v23, &qword_25E928);
      }
      else
      {
        sub_224DC((uint64_t)v14, type metadata accessor for PagedScrollView);
        v76 = v104;
        (*(void (**)(uint64_t, char *, uint64_t))(v74 + 32))(v104, v23, v75);
      }
      v77 = (uint64_t)v101;
      v78 = v106;
      (*(void (**)(char *, uint64_t, uint64_t))(v74 + 16))((char *)v106 + *(int *)(v105 + 28), v76, v75);
      *v78 = v73;
      v79 = v75;
      v80 = v116;
      sub_B3D0((uint64_t)v78, (uint64_t)v18 + *(int *)(v116 + 36), &qword_25EE58);
      *v18 = v70;
      swift_retain(v70);
      sub_B414((uint64_t)v78, &qword_25EE58);
      (*(void (**)(uint64_t, uint64_t))(v74 + 8))(v76, v79);
      v81 = v112;
      sub_167A4((uint64_t)v18, v112, &qword_25EE60);
      v82 = v118;
      sub_B3D0(v81, v118, &qword_25EE60);
      swift_storeEnumTagMultiPayload(v82, v117, 0);
      v83 = sub_222C0();
      v84 = sub_22344();
      v85 = (uint64_t)v120;
      _ConditionalContent<>.init(storage:)(v82, v80, v119, v83, v84);
      sub_B3D0(v85, v77, &qword_25EE50);
      swift_storeEnumTagMultiPayload(v77, v102, 0);
      v86 = sub_22254();
      _ConditionalContent<>.init(storage:)(v77, v103, &type metadata for EmptyView, v86, &protocol witness table for EmptyView);
      swift_release(v70);
      sub_B414(v85, &qword_25EE50);
      sub_B414(v81, &qword_25EE60);
      return sub_B414(v115, &qword_25E928);
    }
  }
  else
  {
    sub_B414((uint64_t)&v140, &qword_25EE18);
    swift_storeEnumTagMultiPayload(v8, v6, 1);
    v68 = sub_22254();
    return _ConditionalContent<>.init(storage:)(v8, v10, &type metadata for EmptyView, v68, &protocol witness table for EmptyView);
  }
}

uint64_t sub_1D8C8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[2];
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v2 = type metadata accessor for PagedScrollView(0);
  v3 = *(_QWORD *)(a1 + *(int *)(v2 + 32));
  if (*(_QWORD *)(v3 + 16))
  {
    sub_221C0(v3 + 32, (uint64_t)&v14);
    v4 = v16;
    v5 = v17;
    sub_5480(&v14, v16);
    v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 16))(v4, v5);
    v8 = v7;
    sub_22200(&v14);
  }
  else
  {
    v6 = 0;
    v8 = 0;
  }
  v9 = (__int128 *)(a1 + *(int *)(v2 + 28));
  v10 = *((_QWORD *)v9 + 2);
  v14 = *v9;
  v15 = v10;
  v13[0] = v6;
  v13[1] = v8;
  v11 = sub_5440(&qword_25EE08);
  return State.wrappedValue.setter(v13, v11);
}

uint64_t sub_1D99C()
{
  return EnvironmentValues.colorScheme.getter();
}

uint64_t sub_1D9BC()
{
  return EnvironmentValues.colorScheme.getter();
}

uint64_t sub_1D9DC(uint64_t a1)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v6;

  type metadata accessor for ColorScheme(0);
  __chkstk_darwin();
  v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v4 + 16))(v3, a1);
  return EnvironmentValues.colorScheme.setter(v3);
}

uint64_t type metadata accessor for PagedScrollView(uint64_t a1)
{
  return sub_1FE90(a1, (uint64_t *)&unk_25EB48, (uint64_t)&nominal type descriptor for PagedScrollView);
}

uint64_t sub_1DA70@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  v4 = *(_QWORD *)(a1 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  __chkstk_darwin(a1);
  sub_1E428(v2, (uint64_t)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for PagedScrollView);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = (v6 + 16) & ~v6;
  v8 = swift_allocObject(&unk_24BE58, v7 + v5, v6 | 7);
  result = sub_21C88((uint64_t)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v8 + v7, type metadata accessor for PagedScrollView);
  *a2 = sub_1E470;
  a2[1] = v8;
  return result;
}

uint64_t sub_1DB24@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t TupleTypeMetadata2;
  uint64_t v11;
  uint64_t WitnessTable;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;

  v24 = a2;
  v4 = *(_QWORD *)(a1 + 24);
  v5 = type metadata accessor for ModifiedContent(255, v4, &type metadata for _SafeAreaIgnoringLayout);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = type metadata accessor for ModifiedContent(255, v6, &type metadata for _FrameLayout);
  v8 = sub_7EF8(&qword_25ED08);
  v9 = type metadata accessor for ModifiedContent(255, v7, v8);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v5, v9, 0, 0);
  v11 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v11);
  v13 = type metadata accessor for ZStack(0, v11, WitnessTable);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v23 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v19 = (char *)&v23 - v18;
  v25 = v6;
  v26 = v4;
  v27 = *(_OWORD *)(a1 + 32);
  v28 = v2;
  v20 = _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0();
  ZStack.init(alignment:content:)(v20);
  swift_getWitnessTable(&protocol conformance descriptor for ZStack<A>, v13);
  sub_10F80((uint64_t)v17, v13, (uint64_t)v19);
  v21 = *(void (**)(char *, uint64_t))(v14 + 8);
  v21(v17, v13);
  sub_C5C0((uint64_t)v19, v13, v24);
  return ((uint64_t (*)(char *, uint64_t))v21)(v19, v13);
}

uint64_t sub_1DCE0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t (*a5)(_QWORD, _QWORD)@<X4>, uint64_t a6@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t (*v26)(_QWORD, _QWORD);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  double v31;
  _QWORD *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(uint64_t, uint64_t);
  void (*v43)(char *, char *, uint64_t);
  char *v44;
  uint64_t (*v45)(char *, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t WitnessTable;
  char *v53;
  uint64_t (*v54)(_QWORD, _QWORD);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD v62[8];
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t (*v66)(_QWORD, _QWORD);

  v54 = a5;
  v48 = a4;
  v59 = a6;
  v49 = a2;
  v10 = type metadata accessor for ModifiedContent(0, a2, &type metadata for _FrameLayout);
  v11 = *(_QWORD *)(v10 - 8);
  v55 = v10;
  v57 = v11;
  __chkstk_darwin(v10);
  v53 = (char *)&v47 - v12;
  v13 = sub_7EF8(&qword_25ED08);
  v14 = type metadata accessor for ModifiedContent(0, v10, v13);
  v58 = *(_QWORD *)(v14 - 8);
  v15 = __chkstk_darwin(v14);
  v50 = (char *)&v47 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v56 = (uint64_t)&v47 - v17;
  v18 = type metadata accessor for ModifiedContent(0, a3, &type metadata for _SafeAreaIgnoringLayout);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = __chkstk_darwin(v18);
  v22 = (char *)&v47 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v24 = (char *)&v47 - v23;
  v51 = (char *)&v47 - v23;
  v63 = (char *)a2;
  v64 = a3;
  v25 = a3;
  v26 = v54;
  v65 = a4;
  v66 = v54;
  v27 = type metadata accessor for FrameView(0, (uint64_t)&v63);
  v28 = static Edge.Set.all.getter(v27);
  View.edgesIgnoringSafeArea(_:)(v28, v25, v26);
  v62[6] = v26;
  v62[7] = &protocol witness table for _SafeAreaIgnoringLayout;
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v18);
  sub_10F80((uint64_t)v22, v18, (uint64_t)v24);
  v54 = *(uint64_t (**)(_QWORD, _QWORD))(v19 + 8);
  v29 = v54(v22, v18);
  v30 = GeometryProxy.size.getter(v29) - (*(double *)(a1 + *(int *)(v27 + 52)) + *(double *)(a1 + *(int *)(v27 + 52)));
  v31 = sub_1E0B8();
  v32 = (_QWORD *)(a1 + *(int *)(v27 + 56));
  v33 = v53;
  v34 = v48;
  View.frame(width:height:alignment:)(*(_QWORD *)&v30, 0, *(_QWORD *)&v31, 0, *v32, v32[1], v49, v48);
  v62[4] = v34;
  v62[5] = &protocol witness table for _FrameLayout;
  v35 = v55;
  v36 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v55);
  v37 = (uint64_t)v50;
  View.animateIn()(v35, v36);
  (*(void (**)(char *, uint64_t))(v57 + 8))(v33, v35);
  v38 = sub_7FD8((unint64_t *)&qword_25ED10, &qword_25ED08, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
  v62[2] = v36;
  v62[3] = v38;
  v39 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v14);
  v40 = v56;
  sub_10F80(v37, v14, v56);
  v41 = v58;
  v42 = *(void (**)(uint64_t, uint64_t))(v58 + 8);
  v42(v37, v14);
  v43 = *(void (**)(char *, char *, uint64_t))(v19 + 16);
  v44 = v51;
  v43(v22, v51, v18);
  v63 = v22;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v41 + 16))(v37, v40, v14);
  v64 = v37;
  v62[0] = v18;
  v62[1] = v14;
  v60 = WitnessTable;
  v61 = v39;
  sub_DAC78((uint64_t *)&v63, 2uLL, (uint64_t)v62);
  v42(v40, v14);
  v45 = (uint64_t (*)(char *, uint64_t))v54;
  v54(v44, v18);
  v42(v37, v14);
  return v45(v22, v18);
}

double sub_1E0B8()
{
  uint64_t v0;
  double v1;
  double v2;
  uint64_t v3;
  double v4;

  v0 = GeometryProxy.size.getter();
  v2 = v1 - GeometryProxy.safeAreaInsets.getter(v0);
  GeometryProxy.safeAreaInsets.getter(v3);
  return v2 + v4;
}

void sub_1E0EC(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t sub_1E0F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static EnvironmentKey<>._valuesEqual(_:_:)(a1, a2, a3, a4, &protocol witness table for Bool);
}

uint64_t sub_1E100()
{
  unint64_t v0;
  uint64_t var1;

  v0 = sub_220A8();
  EnvironmentValues.subscript.getter(&var1, &type metadata for IsVisibleFrameKey, &type metadata for IsVisibleFrameKey, v0);
  return var1;
}

uint64_t sub_1E138@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t KeyPath;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char *v16;
  _OWORD v18[2];
  uint64_t v19;
  uint64_t v20;

  v3 = (_QWORD *)v2;
  v6 = sub_5440(&qword_25ECF0);
  __chkstk_darwin(v6);
  v8 = (char *)v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  KeyPath = swift_getKeyPath(&unk_1E1C60);
  v10 = *(_OWORD *)(v2 + 32);
  v18[0] = *(_OWORD *)(v2 + 16);
  v18[1] = v10;
  v11 = sub_5440(&qword_25ECF8);
  Binding.wrappedValue.getter(&v19, v11);
  v12 = v20;
  if (v20)
  {
    v13 = v3[1];
    if (v19 == *v3 && v20 == v13)
      v14 = 1;
    else
      v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v19, v20, *v3, v13, 0);
    swift_bridgeObjectRelease(v12);
  }
  else
  {
    v14 = 0;
  }
  v15 = sub_5440(&qword_25ED00);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v8, a1, v15);
  v16 = &v8[*(int *)(v6 + 36)];
  *(_QWORD *)v16 = KeyPath;
  v16[8] = v14 & 1;
  return sub_167A4((uint64_t)v8, a2, &qword_25ECF0);
}

uint64_t sub_1E27C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1E138(a1, a2);
}

uint64_t sub_1E2B4(uint64_t a1, uint64_t a2)
{
  return sub_1E394(a1, a2, &qword_25ED40);
}

_QWORD *sub_1E2C0@<X0>(_QWORD *a1@<X8>)
{
  unint64_t v2;

  v2 = sub_22978();
  return EnvironmentValues.subscript.getter(a1, &type metadata for ImageResourceProviderKey, &type metadata for ImageResourceProviderKey, v2);
}

uint64_t sub_1E2FC(uint64_t a1)
{
  unint64_t v1;
  _BYTE v3[40];
  _QWORD v4[5];

  sub_BD00(a1, (uint64_t)v4);
  sub_BD00((uint64_t)v4, (uint64_t)v3);
  v1 = sub_22978();
  EnvironmentValues.subscript.setter(v3, &type metadata for ImageResourceProviderKey, &type metadata for ImageResourceProviderKey, v1);
  return _s7BooksUI13AnyPagedFrameVwxx_0(v4);
}

uint64_t sub_1E358(uint64_t a1, uint64_t a2)
{
  return sub_1E394(a1, a2, &qword_25ED38);
}

uint64_t sub_1E364(uint64_t a1, uint64_t a2)
{
  return sub_1E394(a1, a2, &qword_25ED30);
}

uint64_t sub_1E370(uint64_t a1, uint64_t a2)
{
  return sub_1E394(a1, a2, &qword_25ED28);
}

uint64_t sub_1E37C(uint64_t a1, uint64_t a2)
{
  return sub_1E394(a1, a2, &qword_25ED20);
}

uint64_t sub_1E388(uint64_t a1, uint64_t a2)
{
  return sub_1E394(a1, a2, &qword_25ED18);
}

uint64_t sub_1E394(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v5;

  v5 = a1;
  v3 = sub_5440(a3);
  return String.init<A>(reflecting:)(&v5, v3);
}

_QWORD *sub_1E3CC@<X0>(_QWORD *a1@<X8>)
{
  unint64_t v2;

  v2 = sub_22978();
  return EnvironmentValues.subscript.getter(a1, &type metadata for ImageResourceProviderKey, &type metadata for ImageResourceProviderKey, v2);
}

uint64_t sub_1E40C(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_20FEC(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1E428(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1E474(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &opaque type descriptor for <<opaque return type of PagedScrollView.body>>, 1);
}

uint64_t initializeBufferWithCopyOfBuffer for PageBackground(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v8 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v8 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain(v8);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
    {
      if (*((_BYTE *)a2 + 56))
      {
        v7 = *((_OWORD *)a2 + 1);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v7;
        *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
        *(_OWORD *)(a1 + 41) = *(_OWORD *)((char *)a2 + 41);
      }
      else
      {
        v16 = *(_OWORD *)(a2 + 3);
        *(_OWORD *)(a1 + 24) = v16;
        (**(void (***)(uint64_t, uint64_t *))(v16 - 8))(a1, a2);
        *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 5);
        *(_BYTE *)(a1 + 56) = 0;
      }
      *(_OWORD *)(a1 + 64) = *((_OWORD *)a2 + 4);
      *(_BYTE *)(a1 + 80) = *((_BYTE *)a2 + 80);
      *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 11);
      v17 = a2[13];
      *(_QWORD *)(a1 + 104) = v17;
      v18 = a2[15];
      swift_bridgeObjectRetain(v17);
      if (v18)
      {
        *(_QWORD *)(a1 + 112) = a2[14];
        *(_QWORD *)(a1 + 120) = v18;
        v19 = a2[17];
        *(_QWORD *)(a1 + 128) = a2[16];
        *(_QWORD *)(a1 + 136) = v19;
        *(_BYTE *)(a1 + 144) = *((_BYTE *)a2 + 144);
        v20 = a2[19];
        v21 = a2[20];
        *(_QWORD *)(a1 + 152) = v20;
        *(_QWORD *)(a1 + 160) = v21;
        swift_bridgeObjectRetain(v18);
        swift_bridgeObjectRetain(v19);
        swift_bridgeObjectRetain(v21);
      }
      else
      {
        v25 = *((_OWORD *)a2 + 8);
        *(_OWORD *)(a1 + 112) = *((_OWORD *)a2 + 7);
        *(_OWORD *)(a1 + 128) = v25;
        *(_OWORD *)(a1 + 144) = *((_OWORD *)a2 + 9);
        *(_QWORD *)(a1 + 160) = a2[20];
      }
      v22 = a1;
      v23 = a3;
      v24 = 1;
    }
    else
    {
      v9 = *a2;
      *(_QWORD *)a1 = *a2;
      swift_retain(v9);
      v10 = *(int *)(sub_5440(&qword_25E930) + 48);
      v11 = (void *)(a1 + v10);
      v12 = (char *)a2 + v10;
      v13 = type metadata accessor for ColorScheme(0);
      v14 = *(_QWORD *)(v13 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
      {
        v15 = sub_5440(&qword_25E928);
        memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, char *, uint64_t))(v14 + 16))(v11, v12, v13);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
      }
      v22 = a1;
      v23 = a3;
      v24 = 0;
    }
    swift_storeEnumTagMultiPayload(v22, v23, v24);
  }
  return a1;
}

uint64_t destroy for PageBackground(_QWORD *a1, uint64_t a2)
{
  uint64_t result;
  char *v4;
  uint64_t v5;
  uint64_t v6;

  if (swift_getEnumCaseMultiPayload(a1, a2) == 1)
  {
    if (!*((_BYTE *)a1 + 56))
      _s7BooksUI13AnyPagedFrameVwxx_0(a1);
    swift_bridgeObjectRelease(a1[13]);
    result = a1[15];
    if (result)
    {
      swift_bridgeObjectRelease(result);
      swift_bridgeObjectRelease(a1[17]);
      return swift_bridgeObjectRelease(a1[20]);
    }
  }
  else
  {
    swift_release(*a1);
    v4 = (char *)a1 + *(int *)(sub_5440(&qword_25E930) + 48);
    v5 = type metadata accessor for ColorScheme(0);
    v6 = *(_QWORD *)(v5 - 8);
    result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5);
    if (!(_DWORD)result)
      return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v4, v5);
  }
  return result;
}

uint64_t initializeWithCopy for PageBackground(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;

  if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
  {
    if (*((_BYTE *)a2 + 56))
    {
      v6 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v6;
      *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
      *(_OWORD *)(a1 + 41) = *(_OWORD *)((char *)a2 + 41);
    }
    else
    {
      v15 = *(_OWORD *)(a2 + 3);
      *(_OWORD *)(a1 + 24) = v15;
      (**(void (***)(uint64_t, uint64_t *))(v15 - 8))(a1, a2);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 5);
      *(_BYTE *)(a1 + 56) = 0;
    }
    *(_OWORD *)(a1 + 64) = *((_OWORD *)a2 + 4);
    *(_BYTE *)(a1 + 80) = *((_BYTE *)a2 + 80);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 11);
    v16 = a2[13];
    *(_QWORD *)(a1 + 104) = v16;
    v17 = a2[15];
    swift_bridgeObjectRetain(v16);
    if (v17)
    {
      *(_QWORD *)(a1 + 112) = a2[14];
      *(_QWORD *)(a1 + 120) = v17;
      v18 = a2[17];
      *(_QWORD *)(a1 + 128) = a2[16];
      *(_QWORD *)(a1 + 136) = v18;
      *(_BYTE *)(a1 + 144) = *((_BYTE *)a2 + 144);
      v19 = a2[19];
      v20 = a2[20];
      *(_QWORD *)(a1 + 152) = v19;
      *(_QWORD *)(a1 + 160) = v20;
      swift_bridgeObjectRetain(v17);
      swift_bridgeObjectRetain(v18);
      swift_bridgeObjectRetain(v20);
    }
    else
    {
      v21 = *((_OWORD *)a2 + 8);
      *(_OWORD *)(a1 + 112) = *((_OWORD *)a2 + 7);
      *(_OWORD *)(a1 + 128) = v21;
      *(_OWORD *)(a1 + 144) = *((_OWORD *)a2 + 9);
      *(_QWORD *)(a1 + 160) = a2[20];
    }
    v14 = 1;
  }
  else
  {
    v7 = *a2;
    *(_QWORD *)a1 = *a2;
    swift_retain(v7);
    v8 = *(int *)(sub_5440(&qword_25E930) + 48);
    v9 = (void *)(a1 + v8);
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for ColorScheme(0);
    v12 = *(_QWORD *)(v11 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
    {
      v13 = sub_5440(&qword_25E928);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
    v14 = 0;
  }
  swift_storeEnumTagMultiPayload(a1, a3, v14);
  return a1;
}

uint64_t assignWithCopy for PageBackground(uint64_t a1, __int128 *a2, uint64_t a3)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;

  if ((__int128 *)a1 != a2)
  {
    sub_224DC(a1, type metadata accessor for PageBackground);
    if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
    {
      if (*((_BYTE *)a2 + 56))
      {
        v6 = *a2;
        v7 = a2[1];
        v8 = a2[2];
        *(_OWORD *)(a1 + 41) = *(__int128 *)((char *)a2 + 41);
        *(_OWORD *)(a1 + 16) = v7;
        *(_OWORD *)(a1 + 32) = v8;
        *(_OWORD *)a1 = v6;
      }
      else
      {
        v17 = *((_QWORD *)a2 + 3);
        *(_QWORD *)(a1 + 24) = v17;
        *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
        (**(void (***)(uint64_t, __int128 *))(v17 - 8))(a1, a2);
        *(_OWORD *)(a1 + 40) = *(__int128 *)((char *)a2 + 40);
        *(_BYTE *)(a1 + 56) = 0;
      }
      *(_OWORD *)(a1 + 64) = a2[4];
      *(_BYTE *)(a1 + 80) = *((_BYTE *)a2 + 80);
      *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 11);
      *(_QWORD *)(a1 + 96) = *((_QWORD *)a2 + 12);
      v18 = *((_QWORD *)a2 + 13);
      *(_QWORD *)(a1 + 104) = v18;
      v19 = *((_QWORD *)a2 + 15);
      swift_bridgeObjectRetain(v18);
      if (v19)
      {
        *(_QWORD *)(a1 + 112) = *((_QWORD *)a2 + 14);
        v20 = *((_QWORD *)a2 + 15);
        *(_QWORD *)(a1 + 120) = v20;
        *(_QWORD *)(a1 + 128) = *((_QWORD *)a2 + 16);
        v21 = *((_QWORD *)a2 + 17);
        *(_QWORD *)(a1 + 136) = v21;
        *(_BYTE *)(a1 + 144) = *((_BYTE *)a2 + 144);
        *(_QWORD *)(a1 + 152) = *((_QWORD *)a2 + 19);
        v22 = *((_QWORD *)a2 + 20);
        *(_QWORD *)(a1 + 160) = v22;
        swift_bridgeObjectRetain(v20);
        swift_bridgeObjectRetain(v21);
        swift_bridgeObjectRetain(v22);
      }
      else
      {
        v23 = a2[7];
        v24 = a2[8];
        v25 = a2[9];
        *(_QWORD *)(a1 + 160) = *((_QWORD *)a2 + 20);
        *(_OWORD *)(a1 + 128) = v24;
        *(_OWORD *)(a1 + 144) = v25;
        *(_OWORD *)(a1 + 112) = v23;
      }
      v16 = 1;
    }
    else
    {
      v9 = *(_QWORD *)a2;
      *(_QWORD *)a1 = *(_QWORD *)a2;
      swift_retain(v9);
      v10 = *(int *)(sub_5440(&qword_25E930) + 48);
      v11 = (void *)(a1 + v10);
      v12 = (char *)a2 + v10;
      v13 = type metadata accessor for ColorScheme(0);
      v14 = *(_QWORD *)(v13 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
      {
        v15 = sub_5440(&qword_25E928);
        memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, char *, uint64_t))(v14 + 16))(v11, v12, v13);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
      }
      v16 = 0;
    }
    swift_storeEnumTagMultiPayload(a1, a3, v16);
  }
  return a1;
}

_QWORD *initializeWithTake for PageBackground(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (swift_getEnumCaseMultiPayload(a2, a3))
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    *a1 = *a2;
    v6 = *(int *)(sub_5440(&qword_25E930) + 48);
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    v9 = type metadata accessor for ColorScheme(0);
    v10 = *(_QWORD *)(v9 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
    {
      v11 = sub_5440(&qword_25E928);
      memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
    }
    swift_storeEnumTagMultiPayload(a1, a3, 0);
  }
  return a1;
}

_QWORD *assignWithTake for PageBackground(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (a1 != a2)
  {
    sub_224DC((uint64_t)a1, type metadata accessor for PageBackground);
    if (swift_getEnumCaseMultiPayload(a2, a3))
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
    else
    {
      *a1 = *a2;
      v6 = *(int *)(sub_5440(&qword_25E930) + 48);
      v7 = (char *)a1 + v6;
      v8 = (char *)a2 + v6;
      v9 = type metadata accessor for ColorScheme(0);
      v10 = *(_QWORD *)(v9 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
      {
        v11 = sub_5440(&qword_25E928);
        memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      }
      swift_storeEnumTagMultiPayload(a1, a3, 0);
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for PageBackground(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a3 - 8) + 48))();
}

uint64_t storeEnumTagSinglePayload for PageBackground(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a4 - 8) + 56))();
}

uint64_t sub_1ED94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_storeEnumTagMultiPayload(a1, a3, a2);
}

void sub_1EDA4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _BYTE v4[32];
  _QWORD v5[2];

  sub_1FA68(319, (unint64_t *)&unk_25E9D8, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  if (v3 <= 0x3F)
  {
    swift_getTupleTypeLayout2(v4, (char *)&value witness table for Builtin.NativeObject + 64, *(_QWORD *)(v2 - 8) + 64);
    v5[0] = v4;
    v5[1] = &unk_1E18E8;
    swift_initEnumMetadataMultiPayload(a1, 256, 2, v5);
  }
}

uint64_t dispatch thunk of ListItemMetadataDescriptorExternalsProtocol.spacing.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of ListItemMetadataRecommendationCreatorDescriptionExternalsProtocol.isCompact.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of ListItemMetadataFormatAndDescriptorExternalsProtocol.isReachable.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of ListItemMetadataFormatAndDescriptorExternalsProtocol.dispatchState.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of CoverStackLayout.centeringOffset.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of CoverStackLayout.axIsSeries.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t sub_1EE68()
{
  return type metadata accessor for PagedScrollViewModel(0);
}

uint64_t sub_1EE70(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[6];

  v4[0] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[1] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[2] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[3] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[4] = (char *)&value witness table for Builtin.Int64 + 64;
  result = type metadata accessor for ObservationRegistrar(319);
  if (v3 <= 0x3F)
  {
    v4[5] = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 6, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for PagedScrollViewModel(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for PagedScrollViewModel);
}

uint64_t dispatch thunk of PagedScrollViewModel.__allocating_init(totalPages:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 128))();
}

_QWORD *initializeBufferWithCopyOfBuffer for PagedScrollView(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  void (*v38)(char *, char *, uint64_t);

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = sub_5440(&qword_25E948);
    if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
    {
      v8 = type metadata accessor for ColorScheme(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      v9 = a1;
      v10 = v7;
      v11 = 1;
    }
    else
    {
      v13 = *a2;
      *a1 = *a2;
      swift_retain(v13);
      v9 = a1;
      v10 = v7;
      v11 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v10, v11);
    v14 = a3[5];
    v15 = (char *)a1 + v14;
    v16 = (char *)a2 + v14;
    v17 = *(_QWORD *)v16;
    v18 = v16[8];
    sub_F9E4(*(_QWORD *)v16, v18);
    *(_QWORD *)v15 = v17;
    v15[8] = v18;
    v19 = a3[6];
    v20 = (char *)a1 + v19;
    v21 = (char *)a2 + v19;
    v22 = *((_BYTE *)a2 + v19 + 40);
    if ((v22 & 1) != 0)
    {
      v23 = *(_OWORD *)(v21 + 24);
      *(_OWORD *)(v20 + 24) = v23;
      (**(void (***)(char *))(v23 - 8))(v20);
    }
    else
    {
      v24 = *(_QWORD *)v21;
      *(_QWORD *)v20 = *(_QWORD *)v21;
      swift_retain(v24);
    }
    v20[40] = v22;
    v25 = a3[7];
    v26 = a3[8];
    v27 = (_QWORD *)((char *)a1 + v25);
    v28 = (_QWORD *)((char *)a2 + v25);
    v29 = v28[1];
    *v27 = *v28;
    v27[1] = v29;
    v30 = v28[2];
    v27[2] = v30;
    v31 = *(_QWORD *)((char *)a2 + v26);
    *(_QWORD *)((char *)a1 + v26) = v31;
    v32 = a3[9];
    v33 = a3[10];
    v34 = *(_QWORD *)((char *)a2 + v32);
    *(_QWORD *)((char *)a1 + v32) = v34;
    v35 = (char *)a1 + v33;
    v36 = (char *)a2 + v33;
    v37 = type metadata accessor for UUID(0);
    v38 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v37 - 8) + 16);
    swift_bridgeObjectRetain(v29);
    swift_retain(v30);
    swift_bridgeObjectRetain(v31);
    swift_retain(v34);
    v38(v35, v36, v37);
  }
  return a1;
}

uint64_t destroy for PagedScrollView(_QWORD *a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  char *v7;
  char *v8;
  uint64_t v9;

  v4 = sub_5440(&qword_25E948);
  if (swift_getEnumCaseMultiPayload(a1, v4) == 1)
  {
    v5 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  }
  else
  {
    swift_release(*a1);
  }
  sub_BE0C(*(_QWORD *)((char *)a1 + a2[5]), *((_BYTE *)a1 + a2[5] + 8));
  v6 = (_QWORD *)((char *)a1 + a2[6]);
  if ((v6[5] & 1) != 0)
    _s7BooksUI13AnyPagedFrameVwxx_0(v6);
  else
    swift_release(*v6);
  v7 = (char *)a1 + a2[7];
  swift_bridgeObjectRelease(*((_QWORD *)v7 + 1));
  swift_release(*((_QWORD *)v7 + 2));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + a2[8]));
  swift_release(*(_QWORD *)((char *)a1 + a2[9]));
  v8 = (char *)a1 + a2[10];
  v9 = type metadata accessor for UUID(0);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
}

_QWORD *initializeWithCopy for PagedScrollView(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  void (*v36)(char *, char *, uint64_t);

  v6 = sub_5440(&qword_25E948);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a1;
    v9 = v6;
    v10 = 1;
  }
  else
  {
    v11 = *a2;
    *a1 = *a2;
    swift_retain(v11);
    v8 = a1;
    v9 = v6;
    v10 = 0;
  }
  swift_storeEnumTagMultiPayload(v8, v9, v10);
  v12 = a3[5];
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = *(_QWORD *)v14;
  v16 = v14[8];
  sub_F9E4(*(_QWORD *)v14, v16);
  *(_QWORD *)v13 = v15;
  v13[8] = v16;
  v17 = a3[6];
  v18 = (char *)a1 + v17;
  v19 = (char *)a2 + v17;
  v20 = *((_BYTE *)a2 + v17 + 40);
  if ((v20 & 1) != 0)
  {
    v21 = *(_OWORD *)(v19 + 24);
    *(_OWORD *)(v18 + 24) = v21;
    (**(void (***)(char *))(v21 - 8))(v18);
  }
  else
  {
    v22 = *(_QWORD *)v19;
    *(_QWORD *)v18 = *(_QWORD *)v19;
    swift_retain(v22);
  }
  v18[40] = v20;
  v23 = a3[7];
  v24 = a3[8];
  v25 = (_QWORD *)((char *)a1 + v23);
  v26 = (_QWORD *)((char *)a2 + v23);
  v27 = v26[1];
  *v25 = *v26;
  v25[1] = v27;
  v28 = v26[2];
  v25[2] = v28;
  v29 = *(_QWORD *)((char *)a2 + v24);
  *(_QWORD *)((char *)a1 + v24) = v29;
  v30 = a3[9];
  v31 = a3[10];
  v32 = *(_QWORD *)((char *)a2 + v30);
  *(_QWORD *)((char *)a1 + v30) = v32;
  v33 = (char *)a1 + v31;
  v34 = (char *)a2 + v31;
  v35 = type metadata accessor for UUID(0);
  v36 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v35 - 8) + 16);
  swift_bridgeObjectRetain(v27);
  swift_retain(v28);
  swift_bridgeObjectRetain(v29);
  swift_retain(v32);
  v36(v33, v34, v35);
  return a1;
}

uint64_t *assignWithCopy for PagedScrollView(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;

  if (a1 != a2)
  {
    sub_B414((uint64_t)a1, &qword_25E948);
    v6 = sub_5440(&qword_25E948);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = v6;
      v10 = 1;
    }
    else
    {
      v11 = *a2;
      *a1 = *a2;
      swift_retain(v11);
      v8 = a1;
      v9 = v6;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
  }
  v12 = a3[5];
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = *(_QWORD *)v14;
  v16 = v14[8];
  sub_F9E4(*(_QWORD *)v14, v16);
  v17 = *(_QWORD *)v13;
  v18 = v13[8];
  *(_QWORD *)v13 = v15;
  v13[8] = v16;
  sub_BE0C(v17, v18);
  if (a1 != a2)
  {
    v19 = a3[6];
    v20 = (char *)a1 + v19;
    v21 = (char *)a2 + v19;
    sub_B414((uint64_t)a1 + v19, &qword_25EAE0);
    if ((v21[40] & 1) != 0)
    {
      v22 = *((_QWORD *)v21 + 3);
      *((_QWORD *)v20 + 3) = v22;
      *((_QWORD *)v20 + 4) = *((_QWORD *)v21 + 4);
      (**(void (***)(char *, char *))(v22 - 8))(v20, v21);
      v20[40] = 1;
    }
    else
    {
      v23 = *(_QWORD *)v21;
      *(_QWORD *)v20 = *(_QWORD *)v21;
      v20[40] = 0;
      swift_retain(v23);
    }
  }
  v24 = a3[7];
  v25 = (uint64_t *)((char *)a1 + v24);
  v26 = (char *)a2 + v24;
  *v25 = *(uint64_t *)((char *)a2 + v24);
  v27 = *(uint64_t *)((char *)a2 + v24 + 8);
  v28 = *(uint64_t *)((char *)a1 + v24 + 8);
  v25[1] = v27;
  swift_bridgeObjectRetain(v27);
  swift_bridgeObjectRelease(v28);
  v29 = v25[2];
  v30 = *((_QWORD *)v26 + 2);
  v25[2] = v30;
  swift_retain(v30);
  swift_release(v29);
  v31 = a3[8];
  v32 = *(uint64_t *)((char *)a2 + v31);
  v33 = *(uint64_t *)((char *)a1 + v31);
  *(uint64_t *)((char *)a1 + v31) = v32;
  swift_bridgeObjectRetain(v32);
  swift_bridgeObjectRelease(v33);
  v34 = a3[9];
  v35 = *(uint64_t *)((char *)a2 + v34);
  v36 = *(uint64_t *)((char *)a1 + v34);
  *(uint64_t *)((char *)a1 + v34) = v35;
  swift_retain(v35);
  swift_release(v36);
  v37 = a3[10];
  v38 = (char *)a1 + v37;
  v39 = (char *)a2 + v37;
  v40 = type metadata accessor for UUID(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v40 - 8) + 24))(v38, v39, v40);
  return a1;
}

char *initializeWithTake for PagedScrollView(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;

  v6 = sub_5440(&qword_25E948);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for ColorScheme(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v8 = a3[5];
  v9 = a3[6];
  v10 = &a1[v8];
  v11 = &a2[v8];
  *(_QWORD *)v10 = *(_QWORD *)v11;
  v10[8] = v11[8];
  v12 = &a1[v9];
  v13 = &a2[v9];
  v14 = *((_OWORD *)v13 + 1);
  *(_OWORD *)v12 = *(_OWORD *)v13;
  *((_OWORD *)v12 + 1) = v14;
  *(_OWORD *)(v12 + 25) = *(_OWORD *)(v13 + 25);
  v15 = a3[7];
  v16 = a3[8];
  v17 = &a1[v15];
  v18 = &a2[v15];
  *(_OWORD *)v17 = *(_OWORD *)v18;
  *((_QWORD *)v17 + 2) = *((_QWORD *)v18 + 2);
  *(_QWORD *)&a1[v16] = *(_QWORD *)&a2[v16];
  v19 = a3[9];
  v20 = a3[10];
  v21 = &a1[v20];
  v22 = &a2[v20];
  *(_QWORD *)&a1[v19] = *(_QWORD *)&a2[v19];
  v23 = type metadata accessor for UUID(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 32))(v21, v22, v23);
  return a1;
}

char *assignWithTake for PagedScrollView(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char *v15;
  char *v16;
  __int128 v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;

  if (a1 != a2)
  {
    sub_B414((uint64_t)a1, &qword_25E948);
    v6 = sub_5440(&qword_25E948);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for ColorScheme(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
  }
  v8 = a3[5];
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = *(_QWORD *)v10;
  LOBYTE(v10) = v10[8];
  v12 = *(_QWORD *)v9;
  v13 = v9[8];
  *(_QWORD *)v9 = v11;
  v9[8] = (char)v10;
  sub_BE0C(v12, v13);
  if (a1 != a2)
  {
    v14 = a3[6];
    v15 = &a2[v14];
    v16 = &a1[v14];
    sub_B414((uint64_t)&a1[v14], &qword_25EAE0);
    v17 = *((_OWORD *)v15 + 1);
    *(_OWORD *)v16 = *(_OWORD *)v15;
    *((_OWORD *)v16 + 1) = v17;
    *(_OWORD *)(v16 + 25) = *(_OWORD *)(v15 + 25);
  }
  v18 = a3[7];
  v19 = &a1[v18];
  v20 = &a2[v18];
  v21 = *(_QWORD *)&a2[v18 + 8];
  v22 = *(_QWORD *)&a1[v18 + 8];
  *(_QWORD *)v19 = *(_QWORD *)&a2[v18];
  *((_QWORD *)v19 + 1) = v21;
  swift_bridgeObjectRelease(v22);
  v23 = *((_QWORD *)v19 + 2);
  *((_QWORD *)v19 + 2) = *((_QWORD *)v20 + 2);
  swift_release(v23);
  v24 = a3[8];
  v25 = *(_QWORD *)&a1[v24];
  *(_QWORD *)&a1[v24] = *(_QWORD *)&a2[v24];
  swift_bridgeObjectRelease(v25);
  v26 = a3[9];
  v27 = *(_QWORD *)&a1[v26];
  *(_QWORD *)&a1[v26] = *(_QWORD *)&a2[v26];
  swift_release(v27);
  v28 = a3[10];
  v29 = &a1[v28];
  v30 = &a2[v28];
  v31 = type metadata accessor for UUID(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v31 - 8) + 40))(v29, v30, v31);
  return a1;
}

uint64_t getEnumTagSinglePayload for PagedScrollView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1F83C);
}

uint64_t sub_1F83C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  unint64_t v11;

  v6 = sub_5440(&qword_25EAE8);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v8 = type metadata accessor for UUID(0);
    v10 = a1 + *(int *)(a3 + 40);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
    return v9(v10, a2, v8);
  }
  v11 = *(_QWORD *)(a1 + *(int *)(a3 + 32));
  if (v11 >= 0xFFFFFFFF)
    LODWORD(v11) = -1;
  return (v11 + 1);
}

uint64_t storeEnumTagSinglePayload for PagedScrollView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1F8F4);
}

uint64_t sub_1F8F4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  result = sub_5440(&qword_25EAE8);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(_QWORD *)(a1 + *(int *)(a4 + 32)) = (a2 - 1);
      return result;
    }
    v10 = type metadata accessor for UUID(0);
    v12 = a1 + *(int *)(a4 + 40);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_1F99C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[7];

  sub_1FA68(319, (unint64_t *)&qword_25EB58, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    v6[1] = "\t";
    v6[2] = &unk_1E1990;
    v6[3] = &unk_1E19A8;
    v6[4] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v6[5] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4 = type metadata accessor for UUID(319);
    if (v5 <= 0x3F)
    {
      v6[6] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 256, 7, v6, a1 + 16);
    }
  }
}

void sub_1FA68(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = type metadata accessor for ColorScheme(255);
    v7 = a3(a1, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t sub_1FAC0()
{
  return sub_7FD8(&qword_25EBA0, &qword_25EBA8, (uint64_t)&protocol conformance descriptor for GeometryReader<A>);
}

uint64_t *sub_1FAEC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = type metadata accessor for GeometryProxy(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 24);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
    v9 = *(uint64_t *)((char *)a2 + v8);
    *(uint64_t *)((char *)a1 + v8) = v9;
  }
  swift_retain(v9);
  return a1;
}

uint64_t sub_1FB7C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for GeometryProxy(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  return swift_release(*(_QWORD *)(a1 + *(int *)(a2 + 24)));
}

uint64_t sub_1FBC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = type metadata accessor for GeometryProxy(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 24);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  v8 = *(_QWORD *)(a2 + v7);
  *(_QWORD *)(a1 + v7) = v8;
  swift_retain(v8);
  return a1;
}

uint64_t sub_1FC28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = type metadata accessor for GeometryProxy(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  v7 = *(int *)(a3 + 24);
  v8 = *(_QWORD *)(a2 + v7);
  v9 = *(_QWORD *)(a1 + v7);
  *(_QWORD *)(a1 + v7) = v8;
  swift_retain(v8);
  swift_release(v9);
  return a1;
}

uint64_t sub_1FCA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for GeometryProxy(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 24);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  return a1;
}

uint64_t sub_1FD04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = type metadata accessor for GeometryProxy(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 24);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  v8 = *(_QWORD *)(a1 + v7);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  swift_release(v8);
  return a1;
}

uint64_t sub_1FD70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1FD7C);
}

uint64_t sub_1FD7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for GeometryProxy(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 24));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_1FDF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1FE04);
}

uint64_t sub_1FE04(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for GeometryProxy(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 24)) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for PagedScrollViewPositionObserverModifier(uint64_t a1)
{
  return sub_1FE90(a1, qword_25EC08, (uint64_t)&nominal type descriptor for PagedScrollViewPositionObserverModifier);
}

uint64_t sub_1FE90(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    return swift_getSingletonMetadata(a1, a3);
  return result;
}

uint64_t sub_1FEC4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  result = type metadata accessor for GeometryProxy(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[2] = (char *)&value witness table for Builtin.NativeObject + 64;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t destroy for IsVisibleFrameModifier(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_release(a1[2]);
  swift_release(a1[3]);
  return swift_bridgeObjectRelease(a1[5]);
}

_QWORD *initializeWithCopy for IsVisibleFrameModifier(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[2];
  v5 = a2[3];
  a1[2] = v4;
  a1[3] = v5;
  v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  swift_bridgeObjectRetain(v3);
  swift_retain(v4);
  swift_retain(v5);
  swift_bridgeObjectRetain(v6);
  return a1;
}

_QWORD *assignWithCopy for IsVisibleFrameModifier(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = a1[2];
  v7 = a2[2];
  a1[2] = v7;
  swift_retain(v7);
  swift_release(v6);
  v8 = a2[3];
  v9 = a1[3];
  a1[3] = v8;
  swift_retain(v8);
  swift_release(v9);
  a1[4] = a2[4];
  v10 = a2[5];
  v11 = a1[5];
  a1[5] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  return a1;
}

__n128 initializeWithTake for IsVisibleFrameModifier(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

_QWORD *assignWithTake for IsVisibleFrameModifier(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease(a1[1]);
  v4 = a1[2];
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 8);
  swift_release(v4);
  v5 = a1[3];
  a1[3] = *(_QWORD *)(a2 + 24);
  swift_release(v5);
  v6 = *(_QWORD *)(a2 + 40);
  v7 = a1[5];
  a1[4] = *(_QWORD *)(a2 + 32);
  a1[5] = v6;
  swift_bridgeObjectRelease(v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for IsVisibleFrameModifier(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for IsVisibleFrameModifier(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for IsVisibleFrameModifier()
{
  return &type metadata for IsVisibleFrameModifier;
}

uint64_t sub_20194(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 56);
}

uint64_t sub_2019C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD v6[5];

  result = type metadata accessor for GeometryProxy(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(result - 8) + 64;
    v6[1] = (char *)&value witness table for Builtin.Int64 + 64;
    v6[2] = &unk_1E1A18;
    result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 16));
    if (v4 <= 0x3F)
    {
      v6[3] = *(_QWORD *)(result - 8) + 64;
      result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 24));
      if (v5 <= 0x3F)
      {
        v6[4] = *(_QWORD *)(result - 8) + 64;
        swift_initStructMetadata(a1, 0, 5, v6, a1 + 48);
        return 0;
      }
    }
  }
  return result;
}

uint64_t *sub_2025C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _OWORD *v22;
  _OWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;

  v6 = type metadata accessor for GeometryProxy(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v9 = *(_QWORD *)(a3 + 16);
  v10 = *(_QWORD *)(a3 + 24);
  v11 = *(_QWORD *)(v9 - 8);
  v12 = *(_DWORD *)(v11 + 80);
  v13 = *(_QWORD *)(v10 - 8);
  v14 = *(_DWORD *)(v13 + 80);
  v15 = *(_QWORD *)(v11 + 64) + v14;
  v16 = v14 | *(_DWORD *)(v7 + 80) & 0xF8 | v12;
  if (((v15 + ((v12 + ((((v8 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16) & ~v12)) & ~v14)
     + *(_QWORD *)(v13 + 64) > 0x18
    || ((*(_DWORD *)(v13 + 80) | *(_DWORD *)(v11 + 80) | *(_DWORD *)(v7 + 80)) & 0x100000) != 0
    || v16 > 7)
  {
    v19 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v19 + (((v16 | 7) + 16) & ~(unint64_t)(v16 | 7)));
    swift_retain(v19);
  }
  else
  {
    v27 = ~v14;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(a1, a2, v6);
    v20 = (_QWORD *)(((unint64_t)a1 + v8 + 7) & 0xFFFFFFFFFFFFF8);
    v21 = (_QWORD *)(((unint64_t)a2 + v8 + 7) & 0xFFFFFFFFFFFFF8);
    *v20 = *v21;
    v22 = (_OWORD *)(((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFFFF8);
    v23 = (_OWORD *)(((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8);
    *v22 = *v23;
    v24 = ((unint64_t)v22 + v12 + 16) & ~v12;
    v25 = ((unint64_t)v23 + v12 + 16) & ~v12;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v24, v25, v9);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16))((v24 + v15) & v27, (v25 + v15) & v27, v10);
  }
  return a1;
}

uint64_t sub_203F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v4 = type metadata accessor for GeometryProxy(0);
  v5 = *(_QWORD *)(v4 - 8);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  v6 = (((a1 + *(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  v7 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v8 = (v6 + *(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  (*(void (**)(unint64_t))(v7 + 8))(v8);
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 8))((v8 + *(_QWORD *)(v7 + 64) + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 80));
}

uint64_t sub_20494(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _OWORD *v11;
  _OWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v6 = type metadata accessor for GeometryProxy(0);
  v7 = *(_QWORD *)(v6 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(a1, a2, v6);
  v8 = *(_QWORD *)(v7 + 64) + 7;
  v9 = (_QWORD *)((v8 + a1) & 0xFFFFFFFFFFFFFFF8);
  v10 = (_QWORD *)((v8 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v9 = *v10;
  v11 = (_OWORD *)(((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8);
  v12 = (_OWORD *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v11 = *v12;
  v13 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v14 = *(unsigned __int8 *)(v13 + 80);
  v15 = ((unint64_t)v11 + v14 + 16) & ~v14;
  v16 = ((unint64_t)v12 + v14 + 16) & ~v14;
  (*(void (**)(uint64_t, uint64_t))(v13 + 16))(v15, v16);
  v17 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v17 + 16))((*(_QWORD *)(v13 + 64) + *(unsigned __int8 *)(v17 + 80) + v15) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80), (*(_QWORD *)(v13 + 64) + *(unsigned __int8 *)(v17 + 80) + v16) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80));
  return a1;
}

uint64_t sub_20578(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v6 = type metadata accessor for GeometryProxy(0);
  v7 = *(_QWORD *)(v6 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24))(a1, a2, v6);
  v8 = *(_QWORD *)(v7 + 64) + 7;
  v9 = v8 + a1;
  v10 = (_QWORD *)((v8 + a2) & 0xFFFFFFFFFFFFFFF8);
  v9 &= 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v9 = *v10;
  v11 = (_QWORD *)((v9 + 15) & 0xFFFFFFFFFFFFFFF8);
  v12 = (_QWORD *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v11 = *v12;
  v11[1] = v12[1];
  v13 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v14 = *(unsigned __int8 *)(v13 + 80);
  v15 = ((unint64_t)v11 + v14 + 16) & ~v14;
  v16 = ((unint64_t)v12 + v14 + 16) & ~v14;
  (*(void (**)(uint64_t, uint64_t))(v13 + 24))(v15, v16);
  v17 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v17 + 24))((*(_QWORD *)(v13 + 64) + *(unsigned __int8 *)(v17 + 80) + v15) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80), (*(_QWORD *)(v13 + 64) + *(unsigned __int8 *)(v17 + 80) + v16) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80));
  return a1;
}

uint64_t sub_20664(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _OWORD *v11;
  _OWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v6 = type metadata accessor for GeometryProxy(0);
  v7 = *(_QWORD *)(v6 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(a1, a2, v6);
  v8 = *(_QWORD *)(v7 + 64) + 7;
  v9 = (_QWORD *)((v8 + a1) & 0xFFFFFFFFFFFFFFF8);
  v10 = (_QWORD *)((v8 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v9 = *v10;
  v11 = (_OWORD *)(((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8);
  v12 = (_OWORD *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v11 = *v12;
  v13 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v14 = *(unsigned __int8 *)(v13 + 80);
  v15 = ((unint64_t)v11 + v14 + 16) & ~v14;
  v16 = ((unint64_t)v12 + v14 + 16) & ~v14;
  (*(void (**)(uint64_t, uint64_t))(v13 + 32))(v15, v16);
  v17 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v17 + 32))((*(_QWORD *)(v13 + 64) + *(unsigned __int8 *)(v17 + 80) + v15) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80), (*(_QWORD *)(v13 + 64) + *(unsigned __int8 *)(v17 + 80) + v16) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80));
  return a1;
}

uint64_t sub_20748(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v6 = type metadata accessor for GeometryProxy(0);
  v7 = *(_QWORD *)(v6 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 40))(a1, a2, v6);
  v8 = *(_QWORD *)(v7 + 64) + 7;
  v9 = v8 + a1;
  v10 = (_QWORD *)((v8 + a2) & 0xFFFFFFFFFFFFFFF8);
  v9 &= 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v9 = *v10;
  v11 = (_QWORD *)((v9 + 15) & 0xFFFFFFFFFFFFFFF8);
  v12 = (_QWORD *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v11 = *v12;
  v11[1] = v12[1];
  v13 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v14 = *(unsigned __int8 *)(v13 + 80);
  v15 = ((unint64_t)v11 + v14 + 16) & ~v14;
  v16 = ((unint64_t)v12 + v14 + 16) & ~v14;
  (*(void (**)(uint64_t, uint64_t))(v13 + 40))(v15, v16);
  v17 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v17 + 40))((*(_QWORD *)(v13 + 64) + *(unsigned __int8 *)(v17 + 80) + v15) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80), (*(_QWORD *)(v13 + 64) + *(unsigned __int8 *)(v17 + 80) + v16) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80));
  return a1;
}

uint64_t sub_20834(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  int v22;
  unsigned int v23;
  int v24;
  int v25;
  unint64_t v26;

  v6 = type metadata accessor for GeometryProxy(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_DWORD *)(v7 + 84);
  v9 = *(_QWORD *)(a3 + 16);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned int *)(v10 + 84);
  if (v11 <= v8)
    v12 = *(_DWORD *)(v7 + 84);
  else
    v12 = *(_DWORD *)(v10 + 84);
  v13 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  if (*(_DWORD *)(v13 + 84) > v12)
    v12 = *(_DWORD *)(v13 + 84);
  if (!a2)
    return 0;
  v14 = v6;
  v15 = *(_QWORD *)(v7 + 64);
  v16 = *(unsigned __int8 *)(v10 + 80);
  v17 = v16 + 16;
  v18 = *(unsigned __int8 *)(v13 + 80);
  v19 = *(_QWORD *)(v10 + 64) + v18;
  if (a2 <= v12)
    goto LABEL_25;
  v20 = ((v19 + ((v17 + ((((v15 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v16)) & ~v18)
      + *(_QWORD *)(v13 + 64);
  v21 = 8 * v20;
  if (v20 <= 3)
  {
    v23 = ((a2 - v12 + ~(-1 << v21)) >> v21) + 1;
    if (HIWORD(v23))
    {
      v22 = *(_DWORD *)(a1 + v20);
      if (!v22)
        goto LABEL_25;
      goto LABEL_16;
    }
    if (v23 > 0xFF)
    {
      v22 = *(unsigned __int16 *)(a1 + v20);
      if (!*(_WORD *)(a1 + v20))
        goto LABEL_25;
      goto LABEL_16;
    }
    if (v23 < 2)
    {
LABEL_25:
      if (v12)
      {
        if (v8 == v12)
          return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v7 + 48))(a1, *(unsigned int *)(v7 + 84), v14);
        v26 = (v17 + ((((a1 + v15 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v16;
        if ((_DWORD)v11 == v12)
          return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v10 + 48))(v26, v11, v9);
        else
          return (*(uint64_t (**)(unint64_t, _QWORD, _QWORD))(v13 + 48))((v19 + v26) & ~v18, *(unsigned int *)(v13 + 84), *(_QWORD *)(a3 + 24));
      }
      return 0;
    }
  }
  v22 = *(unsigned __int8 *)(a1 + v20);
  if (!*(_BYTE *)(a1 + v20))
    goto LABEL_25;
LABEL_16:
  v24 = (v22 - 1) << v21;
  if (v20 > 3)
    v24 = 0;
  if ((_DWORD)v20)
  {
    if (v20 <= 3)
      v25 = ((v19 + ((v17 + ((((v15 + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8)) & ~(_DWORD)v16)) & ~(_DWORD)v18)
          + *(_DWORD *)(v13 + 64);
    else
      v25 = 4;
    __asm { BR              X11 }
  }
  return v12 + v24 + 1;
}

void sub_20A34(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  size_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  int v16;

  v8 = *(_QWORD *)(type metadata accessor for GeometryProxy(0) - 8);
  v9 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v9 + 84) <= *(_DWORD *)(v8 + 84))
    v10 = *(_DWORD *)(v8 + 84);
  else
    v10 = *(_DWORD *)(v9 + 84);
  v11 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v11 + 84) > v10)
    v10 = *(_DWORD *)(v11 + 84);
  v12 = ((*(_QWORD *)(v9 + 64)
        + *(unsigned __int8 *)(v11 + 80)
        + ((*(unsigned __int8 *)(v9 + 80)
          + 16
          + ((((*(_QWORD *)(v8 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80))
      + *(_QWORD *)(v11 + 64);
  if (a3 <= v10)
  {
    v13 = 0;
  }
  else if (v12 <= 3)
  {
    v15 = ((a3 - v10 + ~(-1 << (8 * v12))) >> (8 * v12)) + 1;
    if (HIWORD(v15))
    {
      v13 = &dword_4;
    }
    else if (v15 >= 0x100)
    {
      v13 = 2;
    }
    else
    {
      v13 = v15 > 1;
    }
  }
  else
  {
    v13 = &dword_0 + 1;
  }
  if (v10 < a2)
  {
    v14 = ~v10 + a2;
    if (v12 < 4)
    {
      if ((_DWORD)v12)
      {
        v16 = v14 & ~(-1 << (8 * v12));
        bzero(a1, v12);
        if ((_DWORD)v12 == 3)
        {
          *(_WORD *)a1 = v16;
          a1[2] = BYTE2(v16);
        }
        else if ((_DWORD)v12 == 2)
        {
          *(_WORD *)a1 = v16;
        }
        else
        {
          *a1 = v16;
        }
      }
    }
    else
    {
      bzero(a1, v12);
      *(_DWORD *)a1 = v14;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X7 }
}

uint64_t type metadata accessor for FrameView(uint64_t a1, uint64_t a2)
{
  return swift_getGenericMetadata(a1, a2, &nominal type descriptor for FrameView);
}

uint64_t initializeWithCopy for AnyPagedFrame(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v3;
  (**(void (***)(void))(v3 - 8))();
  return a1;
}

_QWORD *assignWithCopy for AnyPagedFrame(_QWORD *a1, _QWORD *a2)
{
  sub_142F8(a1, a2);
  return a1;
}

__n128 initializeWithTake for AnyPagedFrame(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for AnyPagedFrame(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for AnyPagedFrame(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AnyPagedFrame(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AnyPagedFrame()
{
  return &type metadata for AnyPagedFrame;
}

uint64_t sub_20E14(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_22A79C, 1);
}

void *sub_20E24()
{
  return &protocol witness table for String;
}

unint64_t sub_20E30(uint64_t a1)
{
  unint64_t result;

  result = sub_20E54();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_20E54()
{
  unint64_t result;

  result = qword_25ECC8;
  if (!qword_25ECC8)
  {
    result = swift_getWitnessTable(&unk_1E1A50, &type metadata for AnyPagedFrame);
    atomic_store(result, (unint64_t *)&qword_25ECC8);
  }
  return result;
}

uint64_t sub_20E98(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  _OWORD v4[2];

  v2 = *(_OWORD *)(a2 + 32);
  v4[0] = *(_OWORD *)(a2 + 16);
  v4[1] = v2;
  return swift_getOpaqueTypeConformance2(v4, &unk_22A75C, 1);
}

uint64_t sub_20ECC(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_22A734, 1);
}

uint64_t sub_20EDC(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_22A70C, 1);
}

uint64_t sub_20EEC(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_2116C(a1, a2, a3, (_QWORD *)*v3, &qword_25ED68, &qword_25E848);
  *v3 = result;
  return result;
}

uint64_t sub_20F18(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_2116C(a1, a2, a3, (_QWORD *)*v3, &qword_25ED58, &qword_25ED60);
  *v3 = result;
  return result;
}

uint64_t sub_20F44(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_21310(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_20F60(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_21478(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_20F7C(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_21600(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_20F98(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_218B8(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_20FB4(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_21A54(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_20FD0(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_21F20(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_20FEC(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_5440(&qword_25EF38);
    v11 = (char *)swift_allocObject(v10, 40 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 40);
  }
  else
  {
    v11 = (char *)&_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[40 * v8])
      memmove(v13, v14, 40 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[40 * v8] || v13 >= &v14[40 * v8])
  {
    swift_arrayInitWithCopy(v13);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_2116C(char a1, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t *a6)
{
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  size_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (v12)
  {
    v13 = sub_5440(a5);
    v14 = (_QWORD *)swift_allocObject(v13, 40 * v12 + 32, 7);
    v15 = j__malloc_size(v14);
    v14[2] = v11;
    v14[3] = 2 * ((uint64_t)(v15 - 32) / 40);
  }
  else
  {
    v14 = _swiftEmptyArrayStorage;
  }
  v16 = (unint64_t)(v14 + 4);
  v17 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v14 != a4 || v16 >= v17 + 40 * v11)
      memmove(v14 + 4, a4 + 4, 40 * v11);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v17 >= v16 + 40 * v11 || v16 >= v17 + 40 * v11)
  {
    sub_5440(a6);
    swift_arrayInitWithCopy(v14 + 4);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v14;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_21310(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_5440(&qword_25ED50);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8])
      memmove(v14, v15, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[16 * v8] || v14 >= &v15[16 * v8])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_21478(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_5440(&qword_25ED90);
    v11 = (char *)swift_allocObject(v10, 168 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 168);
  }
  else
  {
    v11 = (char *)&_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[168 * v8])
      memmove(v13, v14, 168 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[168 * v8] || v13 >= &v14[168 * v8])
  {
    swift_arrayInitWithCopy(v13);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_21600(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_5440(&qword_25ED88);
    v11 = (char *)swift_allocObject(v10, 8 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 25;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 3);
  }
  else
  {
    v11 = (char *)&_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[8 * v8])
      memmove(v14, v15, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[8 * v8] || v14 >= &v15[8 * v8])
  {
    memcpy(v14, v15, 8 * v8);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_2175C(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_5440(&qword_25ED80);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8])
      memmove(v14, v15, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[16 * v8] || v14 >= &v15[16 * v8])
  {
    memcpy(v14, v15, 16 * v8);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_218B8(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;
  _QWORD *v14;
  size_t v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_5440(&qword_25ED70);
    v11 = (_QWORD *)swift_allocObject(v10, 88 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v11[2] = v8;
    v11[3] = 2 * ((uint64_t)(v12 - 32) / 88);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  v13 = v11 + 4;
  v14 = a4 + 4;
  v15 = 11 * v8;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v15])
      memmove(v11 + 4, a4 + 4, v15 * 8);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[v15] || v13 >= &v14[v15])
  {
    sub_5440(&qword_25ED78);
    swift_arrayInitWithCopy(v11 + 4);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_21A54(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_5440(&qword_25ECD0);
    v11 = (_QWORD *)swift_allocObject(v10, 56 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v11[2] = v8;
    v11[3] = 2 * ((uint64_t)(v12 - 32) / 56);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  v13 = (unint64_t)(v11 + 4);
  v14 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= v14 + 56 * v8)
      memmove(v11 + 4, a4 + 4, 56 * v8);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v14 >= v13 + 56 * v8 || v13 >= v14 + 56 * v8)
  {
    sub_5440(&qword_25ECD8);
    swift_arrayInitWithCopy(v11 + 4);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_21C00()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = type metadata accessor for PagedScrollViewPositionObserverModifier(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  v7 = v0 + v4;
  v8 = type metadata accessor for GeometryProxy(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  swift_release(*(_QWORD *)(v7 + *(int *)(v1 + 24)));
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_21C88(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_21CCC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for PagedScrollViewPositionObserverModifier(0) - 8)
                          + 80);
  return sub_1B2E0(a1, v1 + ((v3 + 16) & ~v3));
}

double sub_21D10()
{
  uint64_t v0;
  double result;

  result = *(double *)(v0 + 24);
  *(double *)(*(_QWORD *)(v0 + 16) + 32) = result;
  return result;
}

double sub_21D28()
{
  uint64_t v0;
  double result;

  result = *(double *)(v0 + 24);
  *(double *)(*(_QWORD *)(v0 + 16) + 40) = result;
  return result;
}

uint64_t sub_21D40()
{
  return sub_21D54();
}

uint64_t sub_21D54()
{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)(v0 + 16) + 16) = *(_QWORD *)(v0 + 24);
  return sub_1A5C0();
}

uint64_t sub_21D90@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1DCE0(*(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(uint64_t (**)(_QWORD, _QWORD))(v1 + 40), a1);
}

uint64_t sub_21DA4()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v1 = (int *)type metadata accessor for PagedScrollView(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = (_QWORD *)(v0 + v4);
  v7 = sub_5440(&qword_25E948);
  if (swift_getEnumCaseMultiPayload(v0 + v4, v7) == 1)
  {
    v8 = type metadata accessor for ColorScheme(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v0 + v4, v8);
  }
  else
  {
    swift_release(*v6);
  }
  sub_BE0C(*(_QWORD *)((char *)v6 + v1[5]), *((_BYTE *)v6 + v1[5] + 8));
  v9 = (_QWORD *)((char *)v6 + v1[6]);
  if ((v9[5] & 1) != 0)
    _s7BooksUI13AnyPagedFrameVwxx_0(v9);
  else
    swift_release(*v9);
  v10 = v4 + v5;
  v11 = (char *)v6 + v1[7];
  swift_bridgeObjectRelease(*((_QWORD *)v11 + 1));
  swift_release(*((_QWORD *)v11 + 2));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v6 + v1[8]));
  swift_release(*(_QWORD *)((char *)v6 + v1[9]));
  v12 = (char *)v6 + v1[10];
  v13 = type metadata accessor for UUID(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
  return swift_deallocObject(v0, v10, v3 | 7);
}

uint64_t sub_21ED4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for PagedScrollView(0) - 8) + 80);
  return sub_1B8C8(a1, v2 + ((v5 + 16) & ~v5), a2);
}

uint64_t sub_21F20(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_5440(&qword_25ED48);
    v11 = (_QWORD *)swift_allocObject(v10, 8 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 25;
    v11[2] = v8;
    v11[3] = 2 * (v13 >> 3);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  v14 = (unint64_t)(v11 + 4);
  v15 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= v15 + 8 * v8)
      memmove(v11 + 4, a4 + 4, 8 * v8);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v15 >= v14 + 8 * v8 || v14 >= v15 + 8 * v8)
  {
    sub_5440(&qword_25DF98);
    swift_arrayInitWithCopy(v11 + 4);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

unint64_t sub_220A8()
{
  unint64_t result;

  result = qword_25ED98;
  if (!qword_25ED98)
  {
    result = swift_getWitnessTable(&unk_1E1CA4, &type metadata for IsVisibleFrameKey);
    atomic_store(result, (unint64_t *)&qword_25ED98);
  }
  return result;
}

uint64_t sub_220EC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1C244(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

unint64_t sub_220F4()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_25EDE8;
  if (!qword_25EDE8)
  {
    v1 = sub_7EF8(&qword_25EDE0);
    v2[0] = sub_7EF8(&qword_25EDF0);
    v2[1] = sub_7FD8(&qword_25EDF8, &qword_25EDF0, (uint64_t)&protocol conformance descriptor for LazyVStack<A>);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.scrollTargetLayout(isEnabled:)>>, 1);
    sub_6FD0(&qword_25EE00, type metadata accessor for PagedScrollViewPositionObserverModifier, (uint64_t)&unk_1E1B94);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_25EDE8);
  }
  return result;
}

uint64_t sub_221C0(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

_QWORD *sub_22200(_QWORD *a1)
{
  _s7BooksUI13AnyPagedFrameVwxx_0(a1);
  return a1;
}

uint64_t sub_22228()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for PagedScrollView(0) - 8) + 80);
  return sub_1D8C8(v0 + ((v1 + 16) & ~v1));
}

unint64_t sub_22254()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25EE68;
  if (!qword_25EE68)
  {
    v1 = sub_7EF8(&qword_25EE50);
    sub_222C0();
    sub_22344();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_25EE68);
  }
  return result;
}

unint64_t sub_222C0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25EE70;
  if (!qword_25EE70)
  {
    v1 = sub_7EF8(&qword_25EE60);
    sub_7FD8((unint64_t *)&qword_25EE78, &qword_25EE58, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_25EE70);
  }
  return result;
}

unint64_t sub_22344()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25EE80;
  if (!qword_25EE80)
  {
    v1 = sub_7EF8(&qword_25EE38);
    sub_223C8();
    sub_7FD8((unint64_t *)&qword_25E838, &qword_25E830, (uint64_t)&protocol conformance descriptor for BooksFailureView<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_25EE80);
  }
  return result;
}

unint64_t sub_223C8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25EE88;
  if (!qword_25EE88)
  {
    v1 = sub_7EF8(&qword_25EE30);
    sub_7FD8(&qword_25EE90, &qword_25EE98, (uint64_t)&protocol conformance descriptor for BackdropView<A>);
    sub_6FD0((unint64_t *)&qword_25EEA0, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_25EE88);
  }
  return result;
}

uint64_t sub_22464()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_22488(uint64_t a1)
{
  destroy for CoverViewModel(a1);
  return a1;
}

uint64_t sub_224BC(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 != 255)
    return sub_224D4(a1, a2);
  return a1;
}

uint64_t sub_224D4(uint64_t a1, uint64_t a2)
{
  return swift_bridgeObjectRelease(a2);
}

uint64_t sub_224DC(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;

  v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_22518@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1C4C8(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

unint64_t sub_22520()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_25EEC8;
  if (!qword_25EEC8)
  {
    v1 = sub_7EF8(&qword_25EEC0);
    v2[0] = sub_7EF8(&qword_25EED0);
    v2[1] = sub_225AC();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.appAnalyticsData(_:for:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v1);
    atomic_store(result, (unint64_t *)&qword_25EEC8);
  }
  return result;
}

unint64_t sub_225AC()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[4];

  result = qword_25EED8;
  if (!qword_25EED8)
  {
    v1 = sub_7EF8(&qword_25EED0);
    v2[0] = sub_7EF8(&qword_25EEE0);
    v2[1] = type metadata accessor for YearInReviewExposureEvent(255);
    v2[2] = sub_2267C();
    v2[3] = sub_6FD0((unint64_t *)&qword_25EF08, (uint64_t (*)(uint64_t))&type metadata accessor for YearInReviewExposureEvent, (uint64_t)&protocol conformance descriptor for YearInReviewExposureEvent);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.emitAppAnalyticsExposureEvent<A>(_:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> Group<A>, v1);
    atomic_store(result, (unint64_t *)&qword_25EED8);
  }
  return result;
}

unint64_t sub_2267C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25EEE8;
  if (!qword_25EEE8)
  {
    v1 = sub_7EF8(&qword_25EEE0);
    sub_7FD8(&qword_25EEF0, &qword_25EEF8, (uint64_t)&unk_1E1AF4);
    sub_22700();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_25EEE8);
  }
  return result;
}

unint64_t sub_22700()
{
  unint64_t result;

  result = qword_25EF00;
  if (!qword_25EF00)
  {
    result = swift_getWitnessTable(&unk_1E1B44, &type metadata for IsVisibleFrameModifier);
    atomic_store(result, (unint64_t *)&qword_25EF00);
  }
  return result;
}

uint64_t sub_22744()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v1 = type metadata accessor for GeometryProxy(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = (int *)type metadata accessor for PagedScrollView(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v4 + v5 + v8) & ~v8;
  v10 = *(_QWORD *)(v7 + 64);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  v11 = (_QWORD *)(v0 + v9);
  v12 = sub_5440(&qword_25E948);
  if (swift_getEnumCaseMultiPayload(v0 + v9, v12) == 1)
  {
    v13 = type metadata accessor for ColorScheme(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v0 + v9, v13);
  }
  else
  {
    swift_release(*v11);
  }
  sub_BE0C(*(_QWORD *)((char *)v11 + v6[5]), *((_BYTE *)v11 + v6[5] + 8));
  v14 = (_QWORD *)((char *)v11 + v6[6]);
  if ((v14[5] & 1) != 0)
    _s7BooksUI13AnyPagedFrameVwxx_0(v14);
  else
    swift_release(*v14);
  v15 = v3 | v8 | 7;
  v16 = v9 + v10;
  v17 = (char *)v11 + v6[7];
  swift_bridgeObjectRelease(*((_QWORD *)v17 + 1));
  swift_release(*((_QWORD *)v17 + 2));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v11 + v6[8]));
  swift_release(*(_QWORD *)((char *)v11 + v6[9]));
  v18 = (char *)v11 + v6[10];
  v19 = type metadata accessor for UUID(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(v18, v19);
  return swift_deallocObject(v0, v16, v15);
}

uint64_t sub_228BC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_QWORD *)(type metadata accessor for GeometryProxy(0) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for PagedScrollView(0) - 8) + 80);
  return sub_1C814(a1, v2 + v6, v2 + ((v6 + v7 + v8) & ~v8), a2);
}

unint64_t sub_22934()
{
  unint64_t result;

  result = qword_25EF28;
  if (!qword_25EF28)
  {
    result = swift_getWitnessTable(&unk_1E1AA0, &type metadata for AnyPagedFrame);
    atomic_store(result, (unint64_t *)&qword_25EF28);
  }
  return result;
}

unint64_t sub_22978()
{
  unint64_t result;

  result = qword_25EF40;
  if (!qword_25EF40)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ImageResourceProviderKey, &type metadata for ImageResourceProviderKey);
    atomic_store(result, (unint64_t *)&qword_25EF40);
  }
  return result;
}

uint64_t sub_229BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  _BYTE v4[24];

  v2 = *(_QWORD *)(v0 + 16);
  v1 = *(_QWORD *)(v0 + 24);
  result = swift_beginAccess(v2 + 24, v4, 1, 0);
  *(_QWORD *)(v2 + 24) = v1;
  return result;
}

ValueMetadata *type metadata accessor for IsVisibleFrameKey()
{
  return &type metadata for IsVisibleFrameKey;
}

unint64_t sub_22A1C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25EF48;
  if (!qword_25EF48)
  {
    v1 = sub_7EF8(&qword_25ECE8);
    sub_7FD8(&qword_25EF50, &qword_25ECE0, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
    sub_7FD8(&qword_25EF58, &qword_25EF60, (uint64_t)&protocol conformance descriptor for _GeometryActionModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_25EF48);
  }
  return result;
}

unint64_t sub_22ABC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25EF68;
  if (!qword_25EF68)
  {
    v1 = sub_7EF8(&qword_25ECF0);
    sub_7FD8(&qword_25EF70, &qword_25ED00, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
    sub_7FD8((unint64_t *)&qword_25ED10, &qword_25ED08, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_25EF68);
  }
  return result;
}

uint64_t sub_22B58(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t TupleTypeMetadata2;
  uint64_t v7;
  uint64_t WitnessTable;
  uint64_t v9;

  v1 = *a1;
  v2 = type metadata accessor for ModifiedContent(255, a1[1], &type metadata for _SafeAreaIgnoringLayout);
  v3 = type metadata accessor for ModifiedContent(255, v1, &type metadata for _FrameLayout);
  v4 = sub_7EF8(&qword_25ED08);
  v5 = type metadata accessor for ModifiedContent(255, v3, v4);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v2, v5, 0, 0);
  v7 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v7);
  v9 = type metadata accessor for ZStack(255, v7, WitnessTable);
  return swift_getWitnessTable(&protocol conformance descriptor for ZStack<A>, v9);
}

void *sub_22C10()
{
  return &protocol witness table for AnyView;
}

double sub_22C24()
{
  return sub_21D28();
}

double sub_22C38()
{
  return sub_21D10();
}

uint64_t AverageMonthlyReadingFrameViewModel.MonthAverage.init(date:value:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v6 = type metadata accessor for AverageMonthlyReadingFrameViewModel.MonthAverage(0);
  *(_BYTE *)(a2 + *(int *)(v6 + 24)) = 0;
  v7 = type metadata accessor for Date(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a2, a1, v7);
  *(double *)(a2 + *(int *)(v6 + 20)) = a3;
  return result;
}

uint64_t type metadata accessor for AverageMonthlyReadingFrameViewModel.MonthAverage(uint64_t a1)
{
  return sub_1FE90(a1, qword_25F108, (uint64_t)&nominal type descriptor for AverageMonthlyReadingFrameViewModel.MonthAverage);
}

uint64_t AverageMonthlyReadingFrameViewModel.MonthAverage.id.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t AverageMonthlyReadingFrameViewModel.MonthAverage.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(char *, uint64_t);
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  void *object;
  Swift::String v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  Swift::String v36;
  void *v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  Swift::String v49;
  uint64_t v50;
  unint64_t v51;

  v0 = type metadata accessor for Date.FormatStyle.Symbol.Day(0);
  v46 = *(_QWORD *)(v0 - 8);
  v47 = v0;
  __chkstk_darwin(v0);
  v45 = (char *)&v39 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = type metadata accessor for Date.FormatStyle.Symbol.Month(0);
  v43 = *(_QWORD *)(v2 - 8);
  v44 = v2;
  __chkstk_darwin(v2);
  v42 = (char *)&v39 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Date.FormatStyle.Symbol.Year(0);
  v40 = *(_QWORD *)(v4 - 8);
  v41 = v4;
  __chkstk_darwin(v4);
  v6 = (char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Date.FormatStyle(0);
  v39 = *(_QWORD *)(v7 - 8);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v8);
  v13 = (char *)&v39 - v12;
  v14 = __chkstk_darwin(v11);
  v16 = (char *)&v39 - v15;
  __chkstk_darwin(v14);
  v18 = (char *)&v39 - v17;
  v19 = type metadata accessor for Date(0);
  v20 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v22 = (char *)&v39 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = 0;
  v51 = 0xE000000000000000;
  _StringGuts.grow(_:)(18);
  swift_bridgeObjectRelease(v51);
  v50 = 0x203A65746164;
  v51 = 0xE600000000000000;
  v23 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v20 + 16))(v22, v48, v19);
  v24 = static FormatStyle<>.dateTime.getter(v23);
  static Date.FormatStyle.Symbol.Year.defaultDigits.getter(v24);
  Date.FormatStyle.year(_:)(v6);
  (*(void (**)(char *, uint64_t))(v40 + 8))(v6, v41);
  v25 = *(uint64_t (**)(char *, uint64_t))(v39 + 8);
  v26 = v25(v10, v7);
  v27 = v42;
  static Date.FormatStyle.Symbol.Month.abbreviated.getter(v26);
  Date.FormatStyle.month(_:)(v27);
  (*(void (**)(char *, uint64_t))(v43 + 8))(v27, v44);
  v28 = v25(v13, v7);
  v29 = v45;
  static Date.FormatStyle.Symbol.Day.defaultDigits.getter(v28);
  Date.FormatStyle.day(_:)(v29);
  (*(void (**)(char *, uint64_t))(v46 + 8))(v29, v47);
  v25(v16, v7);
  v30 = sub_6FD0(&qword_25EFC0, (uint64_t (*)(uint64_t))&type metadata accessor for Date.FormatStyle, (uint64_t)&protocol conformance descriptor for Date.FormatStyle);
  Date.formatted<A>(_:)(&v49, v18, v7, v30);
  v25(v18, v7);
  (*(void (**)(char *, uint64_t))(v20 + 8))(v22, v19);
  object = v49._object;
  String.append(_:)(v49);
  swift_bridgeObjectRelease(object);
  v32._countAndFlagsBits = 0x203A65756C617620;
  v32._object = (void *)0xE800000000000000;
  String.append(_:)(v32);
  v33 = sub_5440(&qword_25E310);
  v34 = swift_allocObject(v33, 72, 7);
  *(_OWORD *)(v34 + 16) = xmmword_1E0B70;
  v35 = *(_QWORD *)(v48 + *(int *)(type metadata accessor for AverageMonthlyReadingFrameViewModel.MonthAverage(0) + 20));
  *(_QWORD *)(v34 + 56) = &type metadata for Double;
  *(_QWORD *)(v34 + 64) = &protocol witness table for Double;
  *(_QWORD *)(v34 + 32) = v35;
  v36._countAndFlagsBits = String.init(format:_:)(1714564645, 0xE400000000000000, v34);
  v37 = v36._object;
  String.append(_:)(v36);
  swift_bridgeObjectRelease(v37);
  return v50;
}

uint64_t AverageMonthlyReadingFrameViewModel.MonthAverage.axLabel.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  void (*v44)(char *, uint64_t);
  uint64_t v45;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v1 = v0;
  v2 = type metadata accessor for Date.FormatStyle.Symbol.Month(0);
  v53 = *(_QWORD *)(v2 - 8);
  v54 = v2;
  __chkstk_darwin(v2);
  v52 = (char *)&v47 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for FormatStyleCapitalizationContext(0);
  __chkstk_darwin(v4);
  v51 = (char *)&v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for TimeZone(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Calendar(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Locale(0);
  __chkstk_darwin(v12);
  v14 = (char *)&v47 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_5440(&qword_25EFC8);
  __chkstk_darwin(v15);
  v17 = (char *)&v47 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_5440(&qword_25EFD0);
  __chkstk_darwin(v18);
  v20 = (char *)&v47 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for Date.FormatStyle(0);
  v50 = *(_QWORD *)(v21 - 8);
  v22 = __chkstk_darwin(v21);
  v24 = (char *)&v47 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v26 = (char *)&v47 - v25;
  v27 = type metadata accessor for Date(0);
  v28 = *(_QWORD *)(v27 - 8);
  v48 = v27;
  v49 = v28;
  __chkstk_darwin(v27);
  v30 = (char *)&v47 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v31 + 16))(v30, v1);
  v32 = type metadata accessor for Date.FormatStyle.DateStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(v20, 1, 1, v32);
  v33 = type metadata accessor for Date.FormatStyle.TimeStyle(0);
  v34 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56))(v17, 1, 1, v33);
  v35 = v14;
  v36 = static Locale.autoupdatingCurrent.getter(v34);
  v37 = v11;
  v38 = static Calendar.autoupdatingCurrent.getter(v36);
  v39 = v8;
  v40 = static TimeZone.autoupdatingCurrent.getter(v38);
  v41 = v51;
  static FormatStyleCapitalizationContext.unknown.getter(v40);
  v42 = Date.FormatStyle.init(date:time:locale:calendar:timeZone:capitalizationContext:)(v20, v17, v35, v37, v39, v41);
  v43 = v52;
  static Date.FormatStyle.Symbol.Month.wide.getter(v42);
  Date.FormatStyle.month(_:)(v43);
  (*(void (**)(char *, uint64_t))(v53 + 8))(v43, v54);
  v44 = *(void (**)(char *, uint64_t))(v50 + 8);
  v44(v24, v21);
  v45 = sub_6FD0(&qword_25EFC0, (uint64_t (*)(uint64_t))&type metadata accessor for Date.FormatStyle, (uint64_t)&protocol conformance descriptor for Date.FormatStyle);
  Date.formatted<A>(_:)(&v55, v26, v21, v45);
  v44(v26, v21);
  (*(void (**)(char *, uint64_t))(v49 + 8))(v30, v48);
  return v55;
}

uint64_t AverageMonthlyReadingFrameViewModel.MonthAverage.axValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v1 = type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(0);
  v36 = *(_QWORD *)(v1 - 8);
  v37 = v1;
  __chkstk_darwin(v1);
  v3 = (char *)&v30 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy(0);
  v34 = *(_QWORD *)(v4 - 8);
  v35 = v4;
  __chkstk_darwin(v4);
  v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = type metadata accessor for Duration.UnitsFormatStyle.UnitWidth(0);
  v7 = *(_QWORD *)(v32 - 8);
  __chkstk_darwin(v32);
  v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Duration.UnitsFormatStyle(0);
  v33 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for AverageMonthlyReadingFrameViewModel.MonthAverage(0);
  v14 = static Duration.seconds(_:)(*(double *)(v0 + *(int *)(v13 + 20)));
  v30 = v15;
  v31 = v14;
  v16 = sub_5440(&qword_25EFD8);
  v17 = type metadata accessor for Duration.UnitsFormatStyle.Unit(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(_QWORD *)(v18 + 72);
  v20 = *(unsigned __int8 *)(v18 + 80);
  v21 = (v20 + 32) & ~v20;
  v22 = swift_allocObject(v16, v21 + 2 * v19, v20 | 7);
  *(_OWORD *)(v22 + 16) = xmmword_1E1CE0;
  v23 = static Duration.UnitsFormatStyle.Unit.minutes.getter();
  static Duration.UnitsFormatStyle.Unit.hours.getter(v23);
  v24 = sub_27E1C(v22);
  swift_setDeallocating(v22);
  swift_arrayDestroy(v22 + v21, 2, v17);
  v25 = swift_deallocClassInstance(v22, 32, 7);
  v26 = static Duration.UnitsFormatStyle.UnitWidth.wide.getter(v25);
  v27 = static Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.hide.getter(v26);
  static Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.hide.getter(v27);
  static FormatStyle<>.units(allowed:width:maximumUnitCount:zeroValueUnits:valueLength:fractionalPart:)(v24, v9, 0, 1, v6, 0, 1, v3);
  swift_bridgeObjectRelease(v24);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v3, v37);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v6, v35);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v32);
  v28 = sub_6FD0(&qword_25EFE0, (uint64_t (*)(uint64_t))&type metadata accessor for Duration.UnitsFormatStyle, (uint64_t)&protocol conformance descriptor for Duration.UnitsFormatStyle);
  Duration.formatted<A>(_:)(&v38, v12, v31, v30, v10, v28);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v12, v10);
  return v38;
}

uint64_t static AverageMonthlyReadingFrameViewModel.MonthAverage.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;

  if ((static Date.== infix(_:_:)() & 1) != 0
    && (v4 = type metadata accessor for AverageMonthlyReadingFrameViewModel.MonthAverage(0),
        *(double *)(a1 + *(int *)(v4 + 20)) == *(double *)(a2 + *(int *)(v4 + 20))))
  {
    v5 = *(_BYTE *)(a1 + *(int *)(v4 + 24)) ^ *(_BYTE *)(a2 + *(int *)(v4 + 24)) ^ 1;
  }
  else
  {
    v5 = 0;
  }
  return v5 & 1;
}

uint64_t sub_23754(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6;

  if ((static Date.== infix(_:_:)() & 1) != 0
    && *(double *)(a1 + *(int *)(a3 + 20)) == *(double *)(a2 + *(int *)(a3 + 20)))
  {
    v6 = *(_BYTE *)(a1 + *(int *)(a3 + 24)) ^ *(_BYTE *)(a2 + *(int *)(a3 + 24)) ^ 1;
  }
  else
  {
    v6 = 0;
  }
  return v6 & 1;
}

uint64_t AverageMonthlyReadingFrameViewModel.init(dailyAverageReadingTime:monthlyAverages:exposureData:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  uint64_t v5;
  uint64_t v6;

  *(double *)a3 = a4;
  *(_QWORD *)(a3 + 8) = a1;
  v5 = a3 + *(int *)(type metadata accessor for AverageMonthlyReadingFrameViewModel(0) + 24);
  v6 = type metadata accessor for YIRSourceData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(v5, a2, v6);
}

uint64_t sub_2381C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t ObjCClassFromMetadata;
  id v17;
  uint64_t v18;
  __int16 v20;
  _BYTE v21[16];

  v0 = type metadata accessor for Locale(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = &v21[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v2);
  v6 = &v21[-v5];
  v7 = type metadata accessor for String.LocalizationValue(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = &v21[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v9);
  v13 = &v21[-v12];
  v14 = String.LocalizationValue.init(stringLiteral:)(0x1000000000000015, 0x80000000001F9EC0);
  static Locale.current.getter(v14);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v8 + 16))(v11, v13, v7);
  v15 = type metadata accessor for BundleFinder();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v15);
  v17 = objc_msgSend((id)objc_opt_self(NSBundle), "bundleForClass:", ObjCClassFromMetadata);
  static Locale.current.getter(v17);
  v20 = 2;
  v18 = String.init(localized:defaultValue:table:bundle:locale:comment:)("Average Reading\\U00A0Time", 25, 2, v11, 0, 0, v17, v4, "Year in Review: Average Reading frame title", 43, v20);
  (*(void (**)(_BYTE *, uint64_t))(v1 + 8))(v6, v0);
  (*(void (**)(_BYTE *, uint64_t))(v8 + 8))(v13, v7);
  return v18;
}

uint64_t sub_239F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  void (*v35)(char *, uint64_t);
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v1 = type metadata accessor for Date.FormatStyle.Symbol.Month(0);
  v49 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v47 = (char *)&v39 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for Date.FormatStyle(0);
  v45 = *(_QWORD *)(v3 - 8);
  v4 = __chkstk_darwin(v3);
  v44 = (char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v7 = (char *)&v39 - v6;
  v50 = type metadata accessor for Date(0);
  v48 = *(_QWORD *)(v50 - 8);
  __chkstk_darwin(v50);
  v46 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_5440(&qword_25F490);
  __chkstk_darwin(v9);
  v11 = (char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for AverageMonthlyReadingFrameViewModel.MonthAverage(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v14);
  v19 = (char *)&v39 - v18;
  __chkstk_darwin(v17);
  v21 = *(_QWORD *)(v0 + 8);
  v22 = *(_QWORD *)(v21 + 16);
  if (!v22)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v11, 1, 1, v12);
LABEL_6:
    sub_B414((uint64_t)v11, &qword_25F490);
    return 0;
  }
  v40 = (uint64_t)&v39 - v20;
  v41 = v7;
  v42 = v1;
  v43 = v3;
  v23 = v21 + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
  sub_1E428(v23, (uint64_t)v19, type metadata accessor for AverageMonthlyReadingFrameViewModel.MonthAverage);
  result = swift_bridgeObjectRetain(v21);
  if (v22 == 1)
  {
LABEL_3:
    sub_21C88((uint64_t)v19, (uint64_t)v11, type metadata accessor for AverageMonthlyReadingFrameViewModel.MonthAverage);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v11, 0, 1, v12);
    swift_bridgeObjectRelease(v21);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) != 1)
    {
      v25 = (uint64_t)v11;
      v26 = v40;
      sub_21C88(v25, v40, type metadata accessor for AverageMonthlyReadingFrameViewModel.MonthAverage);
      v27 = v48;
      v28 = v46;
      v29 = v50;
      v30 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v48 + 16))(v46, v26, v50);
      v31 = v44;
      v32 = static FormatStyle<>.dateTime.getter(v30);
      v33 = v47;
      static Date.FormatStyle.Symbol.Month.wide.getter(v32);
      v34 = v41;
      Date.FormatStyle.month(_:)(v33);
      (*(void (**)(char *, uint64_t))(v49 + 8))(v33, v42);
      v35 = *(void (**)(char *, uint64_t))(v45 + 8);
      v36 = v43;
      v35(v31, v43);
      v37 = sub_6FD0(&qword_25EFC0, (uint64_t (*)(uint64_t))&type metadata accessor for Date.FormatStyle, (uint64_t)&protocol conformance descriptor for Date.FormatStyle);
      Date.formatted<A>(_:)(&v51, v34, v36, v37);
      v35(v34, v36);
      (*(void (**)(char *, uint64_t))(v27 + 8))(v28, v29);
      sub_224DC(v26, type metadata accessor for AverageMonthlyReadingFrameViewModel.MonthAverage);
      return v51;
    }
    goto LABEL_6;
  }
  v38 = 1;
  while (v38 < *(_QWORD *)(v21 + 16))
  {
    sub_1E428(v23 + *(_QWORD *)(v13 + 72) * v38, (uint64_t)v16, type metadata accessor for AverageMonthlyReadingFrameViewModel.MonthAverage);
    if (*(double *)&v19[*(int *)(v12 + 20)] >= *(double *)&v16[*(int *)(v12 + 20)])
    {
      result = sub_224DC((uint64_t)v16, type metadata accessor for AverageMonthlyReadingFrameViewModel.MonthAverage);
    }
    else
    {
      sub_224DC((uint64_t)v19, type metadata accessor for AverageMonthlyReadingFrameViewModel.MonthAverage);
      result = sub_21C88((uint64_t)v16, (uint64_t)v19, type metadata accessor for AverageMonthlyReadingFrameViewModel.MonthAverage);
    }
    if (v22 == ++v38)
      goto LABEL_3;
  }
  __break(1u);
  return result;
}

void sub_23DF8()
{
  double *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  Swift::String v19;
  double v20;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t ObjCClassFromMetadata;
  id v28;
  __int16 v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v1 = type metadata accessor for Locale(0);
  v32 = *(_QWORD *)(v1 - 8);
  v33 = v1;
  v2 = __chkstk_darwin(v1);
  v4 = (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  v31 = (char *)&v30 - v5;
  v6 = type metadata accessor for String.LocalizationValue(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v30 - v11;
  v13 = type metadata accessor for String.LocalizationValue.StringInterpolation(0);
  __chkstk_darwin(v13);
  v15 = (char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_239F8();
  v18 = v17;
  if (v17)
  {
    String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)(60, 2);
    v19._countAndFlagsBits = 0xD000000000000017;
    v19._object = (void *)0x80000000001F9E10;
    String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v19);
    v20 = ceil(*v0 / 60.0);
    if ((~*(_QWORD *)&v20 & 0x7FF0000000000000) != 0)
    {
      if (v20 > -9.22337204e18)
      {
        if (v20 < 9.22337204e18)
        {
          v34 = (uint64_t)v20;
          String.LocalizationValue.StringInterpolation.appendInterpolation<A>(_:specifier:)(&v34, 1684827173, 0xE400000000000000, &type metadata for Int, &protocol witness table for Int);
          v21._object = (void *)0x80000000001F9E30;
          v21._countAndFlagsBits = 0xD000000000000010;
          String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v21);
          v22._countAndFlagsBits = v16;
          v22._object = v18;
          String.LocalizationValue.StringInterpolation.appendInterpolation(_:)(v22);
          swift_bridgeObjectRelease(v18);
          v23._countAndFlagsBits = 0xD000000000000015;
          v23._object = (void *)0x80000000001F9E50;
          String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v23);
          v24 = String.LocalizationValue.init(stringInterpolation:)(v15);
          v25 = v31;
          static Locale.current.getter(v24);
          (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v10, v12, v6);
          v26 = type metadata accessor for BundleFinder();
          ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v26);
          v28 = objc_msgSend((id)objc_opt_self(NSBundle), "bundleForClass:", ObjCClassFromMetadata);
          static Locale.current.getter(v28);
          v29 = 2;
          String.init(localized:defaultValue:table:bundle:locale:comment:)("YIR_Avg_Monthly_Reading_Frame_Subtitle", 38, 2, v10, 0, 0, v28, v4, "Year in Review: Average Reading frame subtitle", 46, v29);
          (*(void (**)(char *, uint64_t))(v32 + 8))(v25, v33);
          (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v6);
          return;
        }
LABEL_9:
        __break(1u);
        return;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_9;
  }
}

uint64_t sub_24118()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  unint64_t v20;
  _QWORD v21[3];
  uint64_t v22;

  v1 = type metadata accessor for AverageMonthlyReadingFrameViewModel.MonthAverage(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = __chkstk_darwin(v1);
  v5 = (char *)v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v7 = (char *)v21 - v6;
  v8 = sub_5440(&qword_25F490);
  __chkstk_darwin(v8);
  v10 = (char *)v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (uint64_t *)(v0 + *(int *)(type metadata accessor for AverageMonthlyReadingChart(0) + 40));
  v13 = *v11;
  v12 = v11[1];
  v21[1] = v13;
  v21[2] = v12;
  v14 = sub_5440(&qword_25F350);
  State.wrappedValue.getter(&v22, v14);
  v15 = v22;
  v16 = *(_QWORD *)(v22 + 16);
  if (!v16)
  {
    v19 = 1;
LABEL_5:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v2 + 56))(v10, v19, 1, v1);
    swift_bridgeObjectRelease(v15);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48))(v10, 1, v1) == 1)
      return sub_B414((uint64_t)v10, &qword_25F490);
    else
      return sub_224DC((uint64_t)v10, type metadata accessor for AverageMonthlyReadingFrameViewModel.MonthAverage);
  }
  v17 = v22 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  sub_1E428(v17, (uint64_t)v7, type metadata accessor for AverageMonthlyReadingFrameViewModel.MonthAverage);
  result = swift_bridgeObjectRetain(v15);
  if (v16 == 1)
  {
LABEL_3:
    swift_bridgeObjectRelease(v15);
    sub_21C88((uint64_t)v7, (uint64_t)v10, type metadata accessor for AverageMonthlyReadingFrameViewModel.MonthAverage);
    v19 = 0;
    goto LABEL_5;
  }
  v20 = 1;
  while (v20 < *(_QWORD *)(v15 + 16))
  {
    sub_1E428(v17 + *(_QWORD *)(v2 + 72) * v20, (uint64_t)v5, type metadata accessor for AverageMonthlyReadingFrameViewModel.MonthAverage);
    if (*(double *)&v7[*(int *)(v1 + 20)] >= *(double *)&v5[*(int *)(v1 + 20)])
    {
      result = sub_224DC((uint64_t)v5, type metadata accessor for AverageMonthlyReadingFrameViewModel.MonthAverage);
    }
    else
    {
      sub_224DC((uint64_t)v7, type metadata accessor for AverageMonthlyReadingFrameViewModel.MonthAverage);
      result = sub_21C88((uint64_t)v5, (uint64_t)v7, type metadata accessor for AverageMonthlyReadingFrameViewModel.MonthAverage);
    }
    if (v16 == ++v20)
      goto LABEL_3;
  }
  __break(1u);
  return result;
}

uint64_t sub_24370()
{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for RoundedCornerStyle(0);
  sub_73A0(v0, qword_25EF78);
  v1 = sub_7120(v0, (uint64_t)qword_25EF78);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v0 - 8) + 104))(v1, enum case for RoundedCornerStyle.continuous(_:), v0);
}

void sub_243C8()
{
  qword_25EF90 = 0;
}

void sub_243D4()
{
  qword_25EF98 = 0x4010000000000000;
}

uint64_t sub_243E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t ObjCClassFromMetadata;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  _BYTE v22[16];

  v0 = type metadata accessor for Locale(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = &v22[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v2);
  v6 = &v22[-v5];
  v7 = type metadata accessor for String.LocalizationValue(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = &v22[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v9);
  v13 = &v22[-v12];
  v14 = String.LocalizationValue.init(stringLiteral:)(0xD00000000000001ALL, 0x80000000001F9D70);
  static Locale.current.getter(v14);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v8 + 16))(v11, v13, v7);
  v15 = type metadata accessor for BundleFinder();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v15);
  v17 = objc_msgSend((id)objc_opt_self(NSBundle), "bundleForClass:", ObjCClassFromMetadata);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v1 + 16))(v4, v6, v0);
  v18 = String.init(localized:table:bundle:locale:comment:)(v11, 0, 0, v17, v4, "Year in Review: Average monthly reading frame chart x-axis label", 64, 2);
  v20 = v19;
  (*(void (**)(_BYTE *, uint64_t))(v1 + 8))(v6, v0);
  result = (*(uint64_t (**)(_BYTE *, uint64_t))(v8 + 8))(v13, v7);
  qword_25EFA0 = v18;
  *(_QWORD *)algn_25EFA8 = v20;
  return result;
}

uint64_t sub_245B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t ObjCClassFromMetadata;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  _BYTE v22[16];

  v0 = type metadata accessor for Locale(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = &v22[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v2);
  v6 = &v22[-v5];
  v7 = type metadata accessor for String.LocalizationValue(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = &v22[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v9);
  v13 = &v22[-v12];
  v14 = String.LocalizationValue.init(stringLiteral:)(0x68746E6F4DLL, 0xE500000000000000);
  static Locale.current.getter(v14);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v8 + 16))(v11, v13, v7);
  v15 = type metadata accessor for BundleFinder();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v15);
  v17 = objc_msgSend((id)objc_opt_self(NSBundle), "bundleForClass:", ObjCClassFromMetadata);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v1 + 16))(v4, v6, v0);
  v18 = String.init(localized:table:bundle:locale:comment:)(v11, 0, 0, v17, v4, "Year in Review: Average monthly reading frame chart y-axis label", 64, 2);
  v20 = v19;
  (*(void (**)(_BYTE *, uint64_t))(v1 + 8))(v6, v0);
  result = (*(uint64_t (**)(_BYTE *, uint64_t))(v8 + 8))(v13, v7);
  qword_25EFB0 = v18;
  *(_QWORD *)algn_25EFB8 = v20;
  return result;
}

uint64_t sub_24774@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t OpaqueTypeConformance2;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t result;
  double v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  double v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int (*v64)(uint64_t, uint64_t, uint64_t);
  double v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  char v69;
  void (*v70)(char *, uint64_t);
  uint64_t v71;
  uint64_t v72;
  double v73;
  double v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  char *v81;
  uint64_t v82;
  void *v83;
  char *v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char v108;
  char v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  uint64_t v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  uint64_t v158;
  char *v159;
  uint64_t v160;
  char *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  char *v165;
  char *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  char *v173;
  uint64_t v174;
  uint64_t v175;
  double v176;
  void *v177;
  void *v178;
  unint64_t v179;
  void *v180;
  _QWORD v181[2];
  double v182;

  v135 = a1;
  v134 = sub_5440(&qword_25F2F8);
  __chkstk_darwin(v134);
  v166 = (char *)&v127 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_5440(&qword_25F300);
  __chkstk_darwin(v3);
  v159 = (char *)&v127 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for SizeConstants.Spacing(0);
  __chkstk_darwin(v5);
  v147 = (uint64_t)&v127 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v140 = type metadata accessor for UserInterfaceSizeClass(0);
  v139 = *(_QWORD *)(v140 - 8);
  __chkstk_darwin(v140);
  v127 = (char *)&v127 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v137 = sub_5440(&qword_25F308);
  __chkstk_darwin(v137);
  v138 = (uint64_t)&v127 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_5440(&qword_25F1F8);
  v10 = __chkstk_darwin(v9);
  v128 = (uint64_t)&v127 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v10);
  v136 = (char *)&v127 - v13;
  __chkstk_darwin(v12);
  v171 = (uint64_t)&v127 - v14;
  v149 = type metadata accessor for PlotDimensionScaleRange(0);
  v146 = *(_QWORD *)(v149 - 8);
  __chkstk_darwin(v149);
  v145 = (char *)&v127 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for AverageMonthlyReadingChart(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(_QWORD *)(v17 + 64);
  __chkstk_darwin(v16);
  v142 = sub_5440(&qword_25F310);
  v141 = *(_QWORD *)(v142 - 8);
  __chkstk_darwin(v142);
  v173 = (char *)&v127 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v148 = sub_5440(&qword_25F318);
  v144 = *(_QWORD *)(v148 - 8);
  __chkstk_darwin(v148);
  v143 = (char *)&v127 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v156 = sub_5440(&qword_25F320);
  v154 = *(_QWORD *)(v156 - 8);
  __chkstk_darwin(v156);
  v152 = (char *)&v127 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v160 = sub_5440(&qword_25F328);
  v158 = *(_QWORD *)(v160 - 8);
  __chkstk_darwin(v160);
  v157 = (char *)&v127 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v155 = sub_5440(&qword_25F330);
  __chkstk_darwin(v155);
  v161 = (char *)&v127 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v163 = sub_5440(&qword_25F338);
  __chkstk_darwin(v163);
  v162 = (uint64_t)&v127 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v133 = sub_5440(&qword_25F340);
  v132 = *(_QWORD *)(v133 - 8);
  __chkstk_darwin(v133);
  v165 = (char *)&v127 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v131 = sub_5440(&qword_25F348);
  v130 = *(_QWORD *)(v131 - 8);
  __chkstk_darwin(v131);
  v129 = (char *)&v127 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v172 = v16;
  v27 = (uint64_t *)(v1 + *(int *)(v16 + 40));
  v29 = *v27;
  v28 = *((double *)v27 + 1);
  v175 = v29;
  v176 = v28;
  v30 = sub_5440(&qword_25F350);
  State.wrappedValue.getter(v181, v30);
  sub_1E428(v1, (uint64_t)&v127 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for AverageMonthlyReadingChart);
  v31 = *(unsigned __int8 *)(v17 + 80);
  v32 = (v31 + 16) & ~v31;
  v151 = v32 + v18;
  v150 = v31 | 7;
  v174 = swift_allocObject(&unk_24C038, v32 + v18, v31 | 7);
  v153 = v32;
  v164 = (uint64_t)&v127 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21C88(v164, v174 + v32, type metadata accessor for AverageMonthlyReadingChart);
  v170 = sub_5440(&qword_25F358);
  v169 = sub_5440(&qword_25F360);
  v168 = sub_7FD8(&qword_25F368, &qword_25F358, (uint64_t)&protocol conformance descriptor for [A]);
  v167 = sub_7EF8(&qword_25F370);
  v33 = sub_7EF8(&qword_25F378);
  v34 = sub_7EF8(&qword_25F380);
  *(double *)&v35 = COERCE_DOUBLE(sub_7EF8(&qword_25F388));
  v36 = sub_7EF8(&qword_25F390);
  *(double *)&v37 = COERCE_DOUBLE(sub_7EF8(&qword_25F398));
  v38 = sub_7EF8(&qword_25F3A0);
  *(double *)&v39 = COERCE_DOUBLE(type metadata accessor for UnevenRoundedRectangle(255));
  v175 = type metadata accessor for BarMark(255);
  v176 = COERCE_DOUBLE(&type metadata for Color);
  v177 = &protocol witness table for BarMark;
  v178 = &protocol witness table for Color;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v175, &opaque type descriptor for <<opaque return type of ChartContent.foregroundStyle<A>(_:)>>, 1);
  v41 = sub_6FD0(&qword_25F3A8, (uint64_t (*)(uint64_t))&type metadata accessor for UnevenRoundedRectangle, (uint64_t)&protocol conformance descriptor for UnevenRoundedRectangle);
  v175 = v38;
  v176 = *(double *)&v39;
  v177 = (void *)OpaqueTypeConformance2;
  v178 = (void *)v41;
  v42 = swift_getOpaqueTypeConformance2(&v175, &opaque type descriptor for <<opaque return type of ChartContent.clipShape<A>(_:style:)>>, 1);
  v43 = sub_2AE38();
  v175 = v36;
  v176 = *(double *)&v37;
  v177 = (void *)v42;
  v178 = (void *)v43;
  v44 = swift_getOpaqueTypeConformance2(&v175, &opaque type descriptor for <<opaque return type of ChartContent.annotation<A>(position:alignment:spacing:content:)>>, 1);
  v45 = sub_2AF20(&qword_25F3B8, &qword_25F388, &qword_25F3C0, &qword_25F3C8);
  v175 = v34;
  v176 = *(double *)&v35;
  v177 = (void *)v44;
  v178 = (void *)v45;
  v46 = swift_getOpaqueTypeConformance2(&v175, &opaque type descriptor for <<opaque return type of ChartContent.compositingLayer<A>(style:)>>, 1);
  v47 = sub_C57C();
  v175 = v33;
  v176 = COERCE_DOUBLE(&type metadata for String);
  v177 = (void *)v46;
  v178 = (void *)v47;
  v48 = swift_getOpaqueTypeConformance2(&v175, &opaque type descriptor for <<opaque return type of ChartContent.accessibilityLabel<A>(_:)>>, 1);
  v175 = v167;
  v176 = COERCE_DOUBLE(&type metadata for String);
  v177 = (void *)v48;
  v178 = (void *)v47;
  v49 = swift_getOpaqueTypeConformance2(&v175, &opaque type descriptor for <<opaque return type of ChartContent.accessibilityValue<A>(_:)>>, 1);
  v50 = sub_6FD0(&qword_25F3D0, type metadata accessor for AverageMonthlyReadingFrameViewModel.MonthAverage, (uint64_t)&protocol conformance descriptor for AverageMonthlyReadingFrameViewModel.MonthAverage);
  Chart.init<A, B>(_:content:)(v181, sub_2AE2C, v174, v170, v169, v168, v49, v50);
  v174 = v1;
  result = sub_24118();
  if (v52 < 0.0)
  {
    __break(1u);
    goto LABEL_15;
  }
  v175 = 0;
  v176 = v52;
  v53 = (uint64_t *)(v174 + *(int *)(v172 + 44));
  v54 = *v53;
  v55 = v53[1];
  v181[0] = v54;
  v181[1] = v55;
  v56 = sub_5440(&qword_25F3D8);
  State.wrappedValue.getter(&v182, v56);
  v57 = v182;
  v58 = v171;
  sub_3160C(v171);
  v59 = v139;
  v60 = (uint64_t)v136;
  v61 = v140;
  (*(void (**)(char *, _QWORD, uint64_t))(v139 + 104))(v136, enum case for UserInterfaceSizeClass.compact(_:), v140);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v59 + 56))(v60, 0, 1, v61);
  v62 = v138;
  v63 = v138 + *(int *)(v137 + 48);
  sub_B3D0(v58, v138, &qword_25F1F8);
  sub_B3D0(v60, v63, &qword_25F1F8);
  v64 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v59 + 48);
  if (v64(v62, 1, v61) == 1)
  {
    sub_B414(v60, &qword_25F1F8);
    sub_B414(v58, &qword_25F1F8);
    if (v64(v63, 1, v61) == 1)
    {
      sub_B414(v62, &qword_25F1F8);
      v65 = 8.0;
      goto LABEL_10;
    }
  }
  else
  {
    v66 = v128;
    sub_B3D0(v62, v128, &qword_25F1F8);
    if (v64(v63, 1, v61) != 1)
    {
      v67 = v127;
      (*(void (**)(char *, uint64_t, uint64_t))(v59 + 32))(v127, v63, v61);
      v68 = sub_6FD0((unint64_t *)&qword_25F460, (uint64_t (*)(uint64_t))&type metadata accessor for UserInterfaceSizeClass, (uint64_t)&protocol conformance descriptor for UserInterfaceSizeClass);
      v69 = dispatch thunk of static Equatable.== infix(_:_:)(v66, v67, v61, v68);
      v70 = *(void (**)(char *, uint64_t))(v59 + 8);
      v70(v67, v61);
      sub_B414(v60, &qword_25F1F8);
      sub_B414(v171, &qword_25F1F8);
      v70((char *)v66, v61);
      sub_B414(v62, &qword_25F1F8);
      v65 = 8.0;
      if ((v69 & 1) != 0)
        goto LABEL_10;
      goto LABEL_9;
    }
    sub_B414(v60, &qword_25F1F8);
    sub_B414(v58, &qword_25F1F8);
    (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v66, v61);
  }
  sub_B414(v62, &qword_25F308);
LABEL_9:
  v65 = 12.0;
LABEL_10:
  v71 = v147;
  _s7BooksUI35ListItemEditionsDescriptorExternalsV7spacingAA13SizeConstantsV7SpacingVvg_0(v147);
  v72 = sub_224DC(v71, type metadata accessor for SizeConstants.Spacing);
  v73 = v57 + v65;
  v74 = 0.0;
  v75 = v145;
  static PositionScaleRange<>.plotDimension(startPadding:endPadding:)(v72, 0.0, v73);
  v76 = type metadata accessor for ScaleType(0);
  v77 = (uint64_t)v159;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v76 - 8) + 56))(v159, 1, 1, v76);
  *(double *)&v78 = COERCE_DOUBLE(sub_5440(&qword_25F3E0));
  v79 = sub_7FD8(&qword_25F3E8, &qword_25F310, (uint64_t)&protocol conformance descriptor for Chart<A>);
  v80 = sub_2AEBC();
  v81 = v143;
  v82 = v142;
  v83 = (void *)v149;
  v84 = v173;
  View.chartXScale<A, B>(domain:range:type:)(&v175, v75, v77, v142, v78, v149, v79, v80, &protocol witness table for PlotDimensionScaleRange);
  sub_B414(v77, &qword_25F300);
  (*(void (**)(char *, void *))(v146 + 8))(v75, v83);
  (*(void (**)(char *, uint64_t))(v141 + 8))(v84, v82);
  v175 = v82;
  v176 = *(double *)&v78;
  v177 = v83;
  v178 = (void *)v79;
  v179 = v80;
  v180 = &protocol witness table for PlotDimensionScaleRange;
  *(double *)&v85 = COERCE_DOUBLE(swift_getOpaqueTypeConformance2(&v175, &opaque type descriptor for <<opaque return type of View.chartXScale<A, B>(domain:range:type:)>>, 1));
  v86 = v152;
  v87 = v148;
  View.chartXAxis(_:)(2, v148, v85);
  v88 = (*(uint64_t (**)(char *, uint64_t))(v144 + 8))(v81, v87);
  __chkstk_darwin(v88);
  v89 = v174;
  v90 = sub_5440(&qword_25F3F8);
  v175 = v87;
  v176 = *(double *)&v85;
  v91 = swift_getOpaqueTypeConformance2(&v175, &opaque type descriptor for <<opaque return type of View.chartXAxis(_:)>>, 1);
  v92 = sub_7EF8(&qword_25F400);
  *(double *)&v93 = COERCE_DOUBLE(sub_7EF8(&qword_25F408));
  v94 = sub_7FD8(&qword_25F410, &qword_25F400, (uint64_t)&protocol conformance descriptor for AxisMarks<A>);
  v95 = sub_2AF20(&qword_25F418, &qword_25F408, &qword_25F420, &qword_25F428);
  v175 = v92;
  v176 = *(double *)&v93;
  v177 = (void *)v94;
  v178 = (void *)v95;
  v96 = swift_getOpaqueTypeConformance2(&v175, &opaque type descriptor for <<opaque return type of AxisContent.compositingLayer<A>(style:)>>, 1);
  v97 = v157;
  v98 = v156;
  View.chartYAxis<A>(content:)(sub_2AF18, &v127 - 4, v156, v90, v91, v96);
  (*(void (**)(char *, uint64_t))(v154 + 8))(v86, v98);
  v99 = v89 + *(int *)(v172 + 36);
  v100 = v89;
  v101 = *(_QWORD *)v99;
  LOBYTE(v90) = *(_BYTE *)(v99 + 8);
  sub_F9E4(*(_QWORD *)v99, v90);
  LOBYTE(v91) = sub_30DB4(v101, v90);
  sub_BE0C(v101, v90);
  if ((v91 & 1) != 0)
    v74 = 1.0;
  v102 = v158;
  v103 = (uint64_t)v161;
  v104 = v160;
  (*(void (**)(char *, char *, uint64_t))(v158 + 16))(v161, v97, v160);
  *(double *)(v103 + *(int *)(v155 + 36)) = v74;
  v105 = (*(uint64_t (**)(char *, uint64_t))(v102 + 8))(v97, v104);
  v106 = static Animation.easeIn(duration:)(v105, 0.15);
  v107 = *(_QWORD *)v99;
  v108 = *(_BYTE *)(v99 + 8);
  sub_F9E4(*(_QWORD *)v99, v108);
  v109 = sub_30DB4(v107, v108);
  sub_BE0C(v107, v108);
  v110 = v162;
  sub_B3D0(v103, v162, &qword_25F330);
  v111 = v163;
  v112 = v110 + *(int *)(v163 + 36);
  *(_QWORD *)v112 = v106;
  *(_BYTE *)(v112 + 8) = v109 & 1;
  sub_B414(v103, &qword_25F330);
  v113 = *(_QWORD *)v99;
  LOBYTE(v107) = *(_BYTE *)(v99 + 8);
  sub_F9E4(*(_QWORD *)v99, v107);
  v114 = sub_30DB4(v113, v107);
  sub_BE0C(v113, v107);
  LOBYTE(v175) = v114 & 1;
  v115 = v164;
  sub_1E428(v100, v164, type metadata accessor for AverageMonthlyReadingChart);
  v116 = swift_allocObject(&unk_24C060, v151, v150);
  sub_21C88(v115, v116 + v153, type metadata accessor for AverageMonthlyReadingChart);
  v117 = sub_2B214();
  v118 = v165;
  View.onChange<A>(of:initial:_:)(&v175, 0, sub_2B1C8, v116, v111, &type metadata for Bool, v117, &protocol witness table for Bool);
  swift_release(v116);
  sub_B414(v110, &qword_25F338);
  v119 = enum case for DynamicTypeSize.xxxLarge(_:);
  v120 = type metadata accessor for DynamicTypeSize(0);
  v121 = (uint64_t)v166;
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v120 - 8) + 104))(v166, v119, v120);
  v122 = sub_6FD0(&qword_25F450, (uint64_t (*)(uint64_t))&type metadata accessor for DynamicTypeSize, (uint64_t)&protocol conformance descriptor for DynamicTypeSize);
  result = dispatch thunk of static Equatable.== infix(_:_:)(v121, v121, v120, v122);
  if ((result & 1) != 0)
  {
    v175 = v111;
    v176 = COERCE_DOUBLE(&type metadata for Bool);
    v177 = (void *)v117;
    v178 = &protocol witness table for Bool;
    v123 = swift_getOpaqueTypeConformance2(&v175, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
    v124 = sub_7FD8(&qword_25F458, &qword_25F2F8, (uint64_t)&protocol conformance descriptor for PartialRangeThrough<A>);
    v125 = v129;
    v126 = v133;
    View.dynamicTypeSize<A>(_:)(v121, v133, v134, v123, v124);
    sub_B414(v121, &qword_25F2F8);
    (*(void (**)(char *, uint64_t))(v132 + 8))(v118, v126);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v130 + 32))(v135, v125, v131);
  }
LABEL_15:
  __break(1u);
  return result;
}

uint64_t sub_257EC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  double v47;
  double v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t OpaqueTypeConformance2;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  _QWORD v97[2];
  unint64_t v98;
  unint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  void *v134;
  void *v135;
  void *v136;

  v130 = a1;
  v127 = a3;
  v122 = type metadata accessor for AnnotationPosition(0);
  v119 = *(_QWORD *)(v122 - 8);
  __chkstk_darwin(v122);
  v117 = (char *)&v100 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v116 = type metadata accessor for UnevenRoundedRectangle(0);
  __chkstk_darwin(v116);
  v6 = (char *)&v100 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for ColorConstants(0);
  __chkstk_darwin(v7);
  v110 = (unint64_t)&v100 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_5440(&qword_25F468);
  __chkstk_darwin(v9);
  v11 = (char *)&v100 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v102 = type metadata accessor for Calendar.Component(0);
  v101 = *(_QWORD *)(v102 - 8);
  __chkstk_darwin(v102);
  v13 = (char *)&v100 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_5440(&qword_25F498);
  __chkstk_darwin(v14);
  v100 = (char *)&v100 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_5440(&qword_25F4A0);
  __chkstk_darwin(v16);
  v18 = (char *)&v100 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v104 = type metadata accessor for BarMark(0);
  v103 = *(_QWORD *)(v104 - 8);
  __chkstk_darwin(v104);
  v20 = (char *)&v100 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v106 = sub_5440(&qword_25F3A0);
  v105 = *(_QWORD *)(v106 - 8);
  __chkstk_darwin(v106);
  v128 = (char *)&v100 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v109 = sub_5440(&qword_25F390);
  v108 = *(_QWORD *)(v109 - 8);
  __chkstk_darwin(v109);
  v107 = (char *)&v100 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v113 = sub_5440(&qword_25F380);
  v112 = *(_QWORD *)(v113 - 8);
  __chkstk_darwin(v113);
  v111 = (char *)&v100 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v121 = sub_5440(&qword_25F378);
  v115 = *(_QWORD *)(v121 - 8);
  __chkstk_darwin(v121);
  v114 = (char *)&v100 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = sub_5440(&qword_25F370);
  v125 = *(_QWORD *)(v25 - 8);
  v126 = v25;
  __chkstk_darwin(v25);
  v124 = (char *)&v100 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v123 = sub_5440(&qword_25F360);
  v120 = *(_QWORD *)(v123 - 8);
  __chkstk_darwin(v123);
  v118 = (char *)&v100 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_25DB50 != -1)
    swift_once(&qword_25DB50, sub_243E4);
  v28 = *(_QWORD *)algn_25EFA8;
  v133 = qword_25EFA0;
  v134 = *(void **)algn_25EFA8;
  v29 = *(int *)(type metadata accessor for AverageMonthlyReadingChart(0) + 32);
  v129 = a2;
  v30 = a2 + v29;
  v31 = *(_QWORD *)v30;
  v32 = *(_BYTE *)(v30 + 8);
  swift_bridgeObjectRetain(v28);
  sub_F9E4(v31, v32);
  v33 = sub_30DB4(v31, v32);
  sub_BE0C(v31, v32);
  v34 = type metadata accessor for AverageMonthlyReadingFrameViewModel.MonthAverage(0);
  if ((v33 & 1) == 0 || (v35 = 0, *(_BYTE *)(v130 + *(int *)(v34 + 24)) == 1))
    v35 = *(_QWORD *)(v130 + *(int *)(v34 + 20));
  v131 = v35;
  v36 = sub_C57C();
  static PlottableValue.value<A>(_:_:)(&v133, &v131, &type metadata for Double, &type metadata for String, &protocol witness table for Double, v36);
  swift_bridgeObjectRelease(v28);
  if (qword_25DB58 != -1)
    swift_once(&qword_25DB58, sub_245B0);
  v37 = *(_QWORD *)algn_25EFB8;
  v133 = qword_25EFB0;
  v134 = *(void **)algn_25EFB8;
  v38 = v101;
  v39 = v102;
  (*(void (**)(char *, _QWORD, uint64_t))(v101 + 104))(v13, enum case for Calendar.Component.month(_:), v102);
  v40 = type metadata accessor for Calendar(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 56))(v11, 1, 1, v40);
  swift_bridgeObjectRetain(v37);
  v41 = v100;
  static PlottableValue.value<A>(_:_:unit:calendar:)(&v133, v130, v13, v11, &type metadata for String, v36);
  sub_B414((uint64_t)v11, &qword_25F468);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v13, v39);
  swift_bridgeObjectRelease(v134);
  v42 = type metadata accessor for Date(0);
  BarMark.init<A, B>(x:y:width:height:stacking:)(v18, v41, 0, 3, 0, 3, 0, &type metadata for Double, v42, &protocol witness table for Double, &protocol witness table for Date);
  v43 = v110;
  _s7BooksUI18BuyButtonExternalsV6colorsAA14ColorConstantsVvg_0(v110);
  v44 = _s7BooksUI14ColorConstantsV19booksSecondaryLabel05SwiftB00C0Vvg_0();
  v45 = Color.opacity(_:)(0.8);
  swift_release(v44);
  sub_224DC(v43, type metadata accessor for ColorConstants);
  v133 = v45;
  v46 = v104;
  ChartContent.foregroundStyle<A>(_:)(&v133, v104, &type metadata for Color, &protocol witness table for BarMark, &protocol witness table for Color);
  swift_release(v45);
  (*(void (**)(char *, uint64_t))(v103 + 8))(v20, v46);
  if (qword_25DB40 != -1)
    swift_once(&qword_25DB40, sub_243C8);
  v47 = *(double *)&qword_25EF90;
  if (qword_25DB48 != -1)
    swift_once(&qword_25DB48, sub_243D4);
  v110 = v36;
  v48 = *(double *)&qword_25EF98;
  if (qword_25DB38 != -1)
    swift_once(&qword_25DB38, sub_24370);
  v49 = type metadata accessor for RoundedCornerStyle(0);
  v50 = sub_7120(v49, (uint64_t)qword_25EF78);
  v51 = (void *)v116;
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 16))(&v6[*(int *)(v116 + 20)], v50, v49);
  *(double *)v6 = RectangleCornerRadii.init(topLeft:topRight:bottomRight:bottomLeft:)(v47, v48, v48, v47);
  *((_QWORD *)v6 + 1) = v52;
  *((_QWORD *)v6 + 2) = v53;
  *((_QWORD *)v6 + 3) = v54;
  v133 = v46;
  v134 = &type metadata for Color;
  v135 = &protocol witness table for BarMark;
  v136 = &protocol witness table for Color;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v133, &opaque type descriptor for <<opaque return type of ChartContent.foregroundStyle<A>(_:)>>, 1);
  v56 = sub_6FD0(&qword_25F3A8, (uint64_t (*)(uint64_t))&type metadata accessor for UnevenRoundedRectangle, (uint64_t)&protocol conformance descriptor for UnevenRoundedRectangle);
  v57 = v107;
  v58 = v106;
  v59 = v128;
  ChartContent.clipShape<A>(_:style:)(v6, 256, v106, v51, OpaqueTypeConformance2, v56);
  sub_224DC((uint64_t)v6, (uint64_t (*)(_QWORD))&type metadata accessor for UnevenRoundedRectangle);
  v60 = (*(uint64_t (**)(char *, uint64_t))(v105 + 8))(v59, v58);
  v61 = v117;
  v62 = static AnnotationPosition.trailing.getter(v60);
  v128 = (char *)&v100;
  __chkstk_darwin(v62);
  v99 = v129;
  v63 = _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0();
  v65 = v64;
  v66 = sub_5440(&qword_25F398);
  v133 = v58;
  v134 = v51;
  v135 = (void *)OpaqueTypeConformance2;
  v136 = (void *)v56;
  v67 = swift_getOpaqueTypeConformance2(&v133, &opaque type descriptor for <<opaque return type of ChartContent.clipShape<A>(_:style:)>>, 1);
  v68 = sub_2AE38();
  v97[1] = v67;
  v98 = v68;
  v97[0] = v66;
  v69 = v111;
  v70 = v109;
  ((void (*)(char *, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t (*)@<X0>(uint64_t *@<X8>), _QWORD *, uint64_t))ChartContent.annotation<A>(position:alignment:spacing:content:))(v61, v63, v65, 0, 1, sub_2B544, v97, v109);
  (*(void (**)(char *, uint64_t))(v119 + 8))(v61, v122);
  v71 = (*(uint64_t (**)(char *, uint64_t))(v108 + 8))(v57, v70);
  __chkstk_darwin(v71);
  v98 = v129;
  v72 = sub_5440(&qword_25F388);
  v133 = v70;
  v134 = (void *)v66;
  v135 = (void *)v67;
  v136 = (void *)v68;
  v73 = swift_getOpaqueTypeConformance2(&v133, &opaque type descriptor for <<opaque return type of ChartContent.annotation<A>(position:alignment:spacing:content:)>>, 1);
  v74 = sub_2AF20(&qword_25F3B8, &qword_25F388, &qword_25F3C0, &qword_25F3C8);
  v75 = v114;
  v76 = v113;
  ChartContent.compositingLayer<A>(style:)(sub_2B54C, v97, v113, v72, v73, v74);
  (*(void (**)(char *, uint64_t))(v112 + 8))(v69, v76);
  v77 = AverageMonthlyReadingFrameViewModel.MonthAverage.axLabel.getter();
  v79 = v78;
  v131 = v77;
  v132 = v78;
  v133 = v76;
  v134 = (void *)v72;
  v135 = (void *)v73;
  v136 = (void *)v74;
  v80 = swift_getOpaqueTypeConformance2(&v133, &opaque type descriptor for <<opaque return type of ChartContent.compositingLayer<A>(style:)>>, 1);
  v81 = v124;
  v82 = v121;
  v83 = v110;
  ChartContent.accessibilityLabel<A>(_:)(&v131, v121, &type metadata for String, v80, v110);
  swift_bridgeObjectRelease(v79);
  (*(void (**)(char *, uint64_t))(v115 + 8))(v75, v82);
  v84 = sub_5440(&qword_25ED50);
  v85 = swift_allocObject(v84, 64, 7);
  *(_OWORD *)(v85 + 16) = xmmword_1E1CE0;
  v86 = *(_QWORD *)algn_25EFA8;
  *(_QWORD *)(v85 + 32) = qword_25EFA0;
  *(_QWORD *)(v85 + 40) = v86;
  swift_bridgeObjectRetain(v86);
  *(_QWORD *)(v85 + 48) = AverageMonthlyReadingFrameViewModel.MonthAverage.axValue.getter();
  *(_QWORD *)(v85 + 56) = v87;
  v133 = v85;
  v88 = sub_5440(&qword_25DF80);
  v89 = sub_7FD8((unint64_t *)&qword_25DF88, &qword_25DF80, (uint64_t)&protocol conformance descriptor for [A]);
  v90 = BidirectionalCollection<>.joined(separator:)(8236, 0xE200000000000000, v88, v89);
  v92 = v91;
  swift_bridgeObjectRelease(v85);
  v131 = v90;
  v132 = v92;
  v133 = v82;
  v134 = &type metadata for String;
  v135 = (void *)v80;
  v136 = (void *)v83;
  v93 = swift_getOpaqueTypeConformance2(&v133, &opaque type descriptor for <<opaque return type of ChartContent.accessibilityLabel<A>(_:)>>, 1);
  v94 = v118;
  v95 = v126;
  ChartContent.accessibilityValue<A>(_:)(&v131, v126, &type metadata for String, v93, v83);
  swift_bridgeObjectRelease(v92);
  (*(void (**)(char *, uint64_t))(v125 + 8))(v81, v95);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v120 + 32))(v127, v94, v123);
}

uint64_t sub_263C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t result;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;

  v78 = a2;
  v82 = a3;
  v4 = type metadata accessor for AverageMonthlyReadingChart(0);
  v5 = *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64);
  v80 = *(_QWORD *)(v4 - 8);
  v81 = v5;
  __chkstk_darwin(v4);
  v79 = (uint64_t)&v69 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for ColorConstants(0);
  __chkstk_darwin(v7);
  v77 = (uint64_t)&v69 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(0);
  v75 = *(_QWORD *)(v9 - 8);
  v76 = v9;
  __chkstk_darwin(v9);
  v11 = (char *)&v69 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy(0);
  v73 = *(_QWORD *)(v12 - 8);
  v74 = v12;
  __chkstk_darwin(v12);
  v14 = (char *)&v69 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for Duration.UnitsFormatStyle.UnitWidth(0);
  v71 = *(_QWORD *)(v15 - 8);
  v72 = v15;
  __chkstk_darwin(v15);
  v17 = (char *)&v69 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for Duration.UnitsFormatStyle(0);
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v21 = (char *)&v69 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for AverageMonthlyReadingFrameViewModel.MonthAverage(0);
  v23 = static Duration.seconds(_:)(*(double *)(a1 + *(int *)(v22 + 20)));
  v69 = v24;
  v70 = v23;
  v25 = sub_5440(&qword_25EFD8);
  v26 = type metadata accessor for Duration.UnitsFormatStyle.Unit(0);
  v27 = *(_QWORD *)(v26 - 8);
  v28 = *(_QWORD *)(v27 + 72);
  v29 = *(unsigned __int8 *)(v27 + 80);
  v30 = (v29 + 32) & ~v29;
  v31 = swift_allocObject(v25, v30 + 2 * v28, v29 | 7);
  *(_OWORD *)(v31 + 16) = xmmword_1E1CE0;
  v32 = static Duration.UnitsFormatStyle.Unit.minutes.getter();
  static Duration.UnitsFormatStyle.Unit.hours.getter(v32);
  v33 = sub_27E1C(v31);
  swift_setDeallocating(v31);
  swift_arrayDestroy(v31 + v30, 2, v26);
  v34 = swift_deallocClassInstance(v31, 32, 7);
  v35 = static Duration.UnitsFormatStyle.UnitWidth.narrow.getter(v34);
  v36 = static Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.hide.getter(v35);
  static Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.hide.getter(v36);
  static FormatStyle<>.units(allowed:width:maximumUnitCount:zeroValueUnits:valueLength:fractionalPart:)(v33, v17, 0, 1, v14, 0, 1, v11);
  swift_bridgeObjectRelease(v33);
  (*(void (**)(char *, uint64_t))(v75 + 8))(v11, v76);
  (*(void (**)(char *, uint64_t))(v73 + 8))(v14, v74);
  (*(void (**)(char *, uint64_t))(v71 + 8))(v17, v72);
  v37 = sub_6FD0(&qword_25EFE0, (uint64_t (*)(uint64_t))&type metadata accessor for Duration.UnitsFormatStyle, (uint64_t)&protocol conformance descriptor for Duration.UnitsFormatStyle);
  Duration.formatted<A>(_:)(&v83, v21, v70, v69, v18, v37);
  (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
  v38 = sub_C57C();
  v39 = Text.init<A>(_:)(&v83, &type metadata for String, v38);
  v41 = v40;
  v43 = v42;
  v45 = v44 & 1;
  v46 = _s7BooksUI13FontConstantsV6ButtonV8subtitle05SwiftB00C0Vvg_0();
  v47 = Text.font(_:)(v46, v39, v41, v45, v43);
  v49 = v48;
  LOBYTE(v30) = v50;
  v52 = v51;
  swift_release(v46);
  LOBYTE(v46) = v30 & 1;
  sub_2B574(v39, v41, v45);
  swift_bridgeObjectRelease(v43);
  v54 = v77;
  v53 = v78;
  _s7BooksUI18BuyButtonExternalsV6colorsAA14ColorConstantsVvg_0(v77);
  v55 = _s7BooksUI14ColorConstantsV19booksSecondaryLabel05SwiftB00C0Vvg_0();
  v56 = Color.opacity(_:)(0.8);
  swift_release(v55);
  sub_224DC(v54, type metadata accessor for ColorConstants);
  v83 = v56;
  v57 = Text.foregroundStyle<A>(_:)(&v83, v47, v49, v30 & 1, v52, &type metadata for Color, &protocol witness table for Color);
  v59 = v58;
  LOBYTE(v45) = v60;
  v62 = v61;
  sub_2B574(v47, v49, v46);
  swift_release(v56);
  swift_bridgeObjectRelease(v52);
  v63 = v79;
  sub_1E428(v53, v79, type metadata accessor for AverageMonthlyReadingChart);
  v64 = *(unsigned __int8 *)(v80 + 80);
  v65 = (v64 + 16) & ~v64;
  v66 = swift_allocObject(&unk_24C0B0, v65 + v81, v64 | 7);
  result = sub_21C88(v63, v66 + v65, type metadata accessor for AverageMonthlyReadingChart);
  v68 = v82;
  *v82 = v57;
  v68[1] = v59;
  *((_BYTE *)v68 + 16) = v45 & 1;
  v68[3] = v62;
  v68[4] = (uint64_t)sub_26870;
  v68[5] = 0;
  v68[6] = (uint64_t)sub_2B588;
  v68[7] = v66;
  return result;
}

void sub_26870(double *a1@<X8>)
{
  *a1 = GeometryProxy.size.getter();
}

uint64_t sub_26898(double *a1)
{
  double v1;
  uint64_t v2;
  double v3;
  double v5;

  v1 = *a1;
  type metadata accessor for AverageMonthlyReadingChart(0);
  v2 = sub_5440(&qword_25F3D8);
  State.wrappedValue.getter(&v5, v2);
  v3 = v5;
  if (v1 > v5)
    v3 = v1;
  v5 = v3;
  return State.wrappedValue.setter(&v5, v2);
}

uint64_t sub_26934@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t OpaqueTypeConformance2;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47[16];
  uint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  void *v52;

  v43 = a1;
  v46 = a2;
  v2 = type metadata accessor for AverageMonthlyReadingChart(0);
  v42 = *(_QWORD *)(v2 - 8);
  v3 = *(_QWORD *)(v42 + 64);
  __chkstk_darwin(v2);
  v4 = sub_5440(&qword_25F468);
  __chkstk_darwin(v4);
  v6 = (char *)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Calendar.Component(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for AxisMarkValues(0);
  __chkstk_darwin(v11);
  v41 = (char *)&v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for AxisMarkPosition(0);
  __chkstk_darwin(v13);
  v15 = (char *)&v41 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for AxisMarkPreset(0);
  __chkstk_darwin(v16);
  v18 = (char *)&v41 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_5440(&qword_25F400);
  v20 = *(_QWORD *)(v19 - 8);
  v44 = v19;
  v45 = v20;
  v21 = __chkstk_darwin(v19);
  v23 = (char *)&v41 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = static AxisMarkPreset.extended.getter(v21);
  static AxisMarkPosition.leading.getter(v24);
  (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v10, enum case for Calendar.Component.month(_:), v7);
  v25 = type metadata accessor for Calendar(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v6, 1, 1, v25);
  static AxisMarkValues.stride(by:count:roundLowerBound:roundUpperBound:calendar:)(v10, 1, 2, 2, v6);
  sub_B414((uint64_t)v6, &qword_25F468);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  v26 = v43;
  sub_1E428(v43, (uint64_t)&v41 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for AverageMonthlyReadingChart);
  v27 = *(unsigned __int8 *)(v42 + 80);
  v28 = (v27 + 16) & ~v27;
  v29 = swift_allocObject(&unk_24C088, v28 + v3, v27 | 7);
  sub_21C88((uint64_t)&v41 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), v29 + v28, type metadata accessor for AverageMonthlyReadingChart);
  v30 = sub_5440(&qword_25F470);
  v31 = sub_7EF8(&qword_25F478);
  v32 = sub_7EF8(&qword_25F480);
  v33 = sub_7FD8(&qword_25F488, &qword_25F480, (uint64_t)&protocol conformance descriptor for AxisValueLabel<A>);
  v49 = v32;
  v50 = (void *)v33;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v49, &opaque type descriptor for <<opaque return type of AxisMark.font(_:)>>, 1);
  v49 = v31;
  v50 = &type metadata for Color;
  v51 = OpaqueTypeConformance2;
  v52 = &protocol witness table for Color;
  v35 = swift_getOpaqueTypeConformance2(&v49, &opaque type descriptor for <<opaque return type of AxisMark.foregroundStyle<A>(_:)>>, 1);
  AxisMarks.init(preset:position:values:content:)(v18, v15, v41, sub_2B4B4, v29, v30, v35);
  v48 = v26;
  v36 = sub_5440(&qword_25F408);
  v37 = sub_7FD8(&qword_25F410, &qword_25F400, (uint64_t)&protocol conformance descriptor for AxisMarks<A>);
  v38 = sub_2AF20(&qword_25F418, &qword_25F408, &qword_25F420, &qword_25F428);
  v39 = v44;
  AxisContent.compositingLayer<A>(style:)(sub_2B51C, v47, v44, v36, v37, v38);
  return (*(uint64_t (**)(char *, uint64_t))(v45 + 8))(v23, v39);
}

uint64_t sub_26D30@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t OpaqueTypeConformance2;
  uint64_t v44;
  char v46;
  char v47;
  char v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD v58[2];
  uint64_t v59;

  v56 = a1;
  v57 = a2;
  v2 = type metadata accessor for ColorConstants(0);
  __chkstk_darwin(v2);
  v55 = (uint64_t)&v49 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for AxisValueLabelOrientation(0);
  __chkstk_darwin(v4);
  v51 = (char *)&v49 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for AxisValueLabelCollisionResolution(0);
  __chkstk_darwin(v6);
  v50 = (char *)&v49 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Date.FormatStyle.Symbol.Month(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Date.FormatStyle(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v49 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v18 = (char *)&v49 - v17;
  v19 = sub_5440(&qword_25F480);
  v52 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v21 = (char *)&v49 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_5440(&qword_25F478);
  v23 = *(_QWORD *)(v22 - 8);
  v53 = v22;
  v54 = v23;
  v24 = __chkstk_darwin(v22);
  v26 = (char *)&v49 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = static FormatStyle<>.dateTime.getter(v24);
  static Date.FormatStyle.Symbol.Month.abbreviated.getter(v27);
  Date.FormatStyle.month(_:)(v11);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  v28 = (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v16, v12);
  v29 = static UnitPoint.trailing.getter(v28);
  v31 = v30;
  v32 = v50;
  v33 = static AxisValueLabelCollisionResolution.automatic.getter();
  v34 = v51;
  static AxisValueLabelOrientation.automatic.getter(v33);
  v35 = sub_6FD0(&qword_25EFC0, (uint64_t (*)(uint64_t))&type metadata accessor for Date.FormatStyle, (uint64_t)&protocol conformance descriptor for Date.FormatStyle);
  v48 = 1;
  v47 = 1;
  v46 = 2;
  v36 = AxisValueLabel.init<A>(format:centered:anchor:multiLabelAlignment:collisionResolution:offsetsMarks:orientation:horizontalSpacing:verticalSpacing:)(v18, 1, *(_QWORD *)&v29, v31, 0, 0, 0, 1, v32, v46, v34, 0, v47, 0, v48, v12, v35, &protocol witness table for Date);
  v37 = static Font.footnote.getter(v36);
  v38 = Font.bold()();
  swift_release(v37);
  v39 = sub_7FD8(&qword_25F488, &qword_25F480, (uint64_t)&protocol conformance descriptor for AxisValueLabel<A>);
  AxisMark.font(_:)(v38, v19, v39);
  swift_release(v38);
  (*(void (**)(char *, uint64_t))(v52 + 8))(v21, v19);
  v40 = v55;
  _s7BooksUI18BuyButtonExternalsV6colorsAA14ColorConstantsVvg_0(v55);
  v41 = _s7BooksUI14ColorConstantsV19booksSecondaryLabel05SwiftB00C0Vvg_0();
  v42 = Color.opacity(_:)(0.8);
  swift_release(v41);
  sub_224DC(v40, type metadata accessor for ColorConstants);
  v58[1] = v39;
  v59 = v42;
  v58[0] = v19;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v58, &opaque type descriptor for <<opaque return type of AxisMark.font(_:)>>, 1);
  v44 = v53;
  AxisMark.foregroundStyle<A>(_:)(&v59, v53, &type metadata for Color, OpaqueTypeConformance2, &protocol witness table for Color);
  swift_release(v42);
  return (*(uint64_t (**)(char *, uint64_t))(v54 + 8))(v26, v44);
}

uint64_t sub_27110@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X2>, uint64_t *a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v8 = type metadata accessor for BlendMode(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for AverageMonthlyReadingChart(0);
  sub_31660((uint64_t)v11);
  v12 = sub_5440(a2);
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 16))(a4 + *(int *)(v12 + 36), v11, v8);
  v13 = sub_5440(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(a4, a1, v13);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t sub_271F8(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  int v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t i;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE v22[16];
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v4 = *a2;
  v5 = (uint64_t *)(a3 + *(int *)(type metadata accessor for AverageMonthlyReadingChart(0) + 40));
  v7 = *v5;
  v6 = v5[1];
  if (v4 == 1)
  {
    v25 = v7;
    v26 = v6;
    v8 = sub_5440(&qword_25F350);
    State.wrappedValue.getter(&v27, v8);
    v9 = *(_QWORD *)(v27 + 16);
    result = swift_bridgeObjectRelease(v27);
    if (v9)
    {
      for (i = 0; i != v9; ++i)
      {
        v12 = static Animation.spring(response:dampingFraction:blendDuration:)(result, 0.3, 1.2, 0.0);
        v13 = Animation.delay(_:)((double)i * 0.05 + 0.15);
        v14 = swift_release(v12);
        __chkstk_darwin(v14);
        v23 = a3;
        v24 = i;
        withAnimation<A>(_:_:)(v13, sub_2B494, v22, (char *)&type metadata for () + 8);
        result = swift_release(v13);
      }
    }
  }
  else
  {
    v25 = v7;
    v26 = v6;
    v15 = sub_5440(&qword_25F350);
    State.wrappedValue.getter(&v27, v15);
    v16 = *(_QWORD *)(v27 + 16);
    result = swift_bridgeObjectRelease(v27);
    if (v16)
    {
      v17 = 0;
      do
      {
        v18 = v17 + 1;
        v19 = __chkstk_darwin(result);
        v23 = a3;
        v24 = v20;
        v21 = static Animation.default.getter(v19);
        withAnimation<A>(_:_:)(v21, sub_2B478, v22, (char *)&type metadata for () + 8);
        result = swift_release(v21);
        v17 = v18;
      }
      while (v16 != v18);
    }
  }
  return result;
}

uint64_t sub_273F0(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t result;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;

  v5 = (uint64_t *)(a1 + *(int *)(type metadata accessor for AverageMonthlyReadingChart(0) + 40));
  v7 = v5[1];
  v13 = *v5;
  v6 = v13;
  v14 = v7;
  swift_retain(v7);
  swift_bridgeObjectRetain(v13);
  v8 = sub_5440(&qword_25F350);
  State.wrappedValue.getter(&v15, v8);
  v9 = v15;
  result = swift_isUniquelyReferenced_nonNull_native(v15);
  if ((result & 1) != 0)
  {
    if ((a2 & 0x8000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  result = sub_1AEC24(v9);
  v9 = result;
  if ((a2 & 0x8000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if (*(_QWORD *)(v9 + 16) > a2)
  {
    v11 = type metadata accessor for AverageMonthlyReadingFrameViewModel.MonthAverage(0);
    *(_BYTE *)(v9
             + ((*(unsigned __int8 *)(*(_QWORD *)(v11 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v11 - 8) + 80))
             + *(_QWORD *)(*(_QWORD *)(v11 - 8) + 72) * a2
             + *(int *)(v11 + 24)) = a3;
    v13 = v6;
    v14 = v7;
    v12 = v9;
    State.wrappedValue.setter(&v12, v8);
    swift_release(v7);
    return swift_bridgeObjectRelease(v6);
  }
LABEL_7:
  __break(1u);
  return result;
}

double sub_2750C@<D0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  int *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  double *v14;
  uint64_t v15;
  uint64_t v16;
  double *v17;
  double result;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v22;

  *a2 = swift_getKeyPath(&unk_1E1F68);
  v4 = sub_5440(&qword_25F1E8);
  swift_storeEnumTagMultiPayload(a2, v4, 0);
  v5 = (int *)type metadata accessor for AverageMonthlyReadingChart(0);
  v6 = (_QWORD *)((char *)a2 + v5[5]);
  *v6 = swift_getKeyPath(&unk_1E1F90);
  v7 = sub_5440(&qword_25F1F0);
  swift_storeEnumTagMultiPayload(v6, v7, 0);
  v8 = (_QWORD *)((char *)a2 + v5[6]);
  *v8 = swift_getKeyPath(&unk_1E1FC0);
  v9 = sub_5440(&qword_25F200);
  swift_storeEnumTagMultiPayload(v8, v9, 0);
  v10 = (_QWORD *)((char *)a2 + v5[7]);
  *v10 = swift_getKeyPath(&off_1E1FF8);
  v11 = sub_5440(&qword_25F208);
  swift_storeEnumTagMultiPayload(v10, v11, 0);
  v12 = (char *)a2 + v5[8];
  *(_QWORD *)v12 = swift_getKeyPath(&unk_1E2020);
  v12[8] = 0;
  v13 = (char *)a2 + v5[9];
  *(_QWORD *)v13 = swift_getKeyPath(&unk_1E2048);
  v13[8] = 0;
  v14 = (double *)((char *)a2 + v5[10]);
  v20 = a1;
  v15 = sub_5440(&qword_25F358);
  State.init(wrappedValue:)(&v21, &v20, v15);
  v16 = v22;
  *v14 = v21;
  *((_QWORD *)v14 + 1) = v16;
  v17 = (double *)((char *)a2 + v5[11]);
  v20 = 0x4049000000000000;
  State.init(wrappedValue:)(&v21, &v20, &type metadata for CGFloat);
  result = v21;
  v19 = v22;
  *v17 = v21;
  *((_QWORD *)v17 + 1) = v19;
  return result;
}

uint64_t AverageMonthlyReadingFrame.alignment.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t AverageMonthlyReadingFrame.background.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for AverageMonthlyReadingFrame(0);
  return sub_1E428(v1 + *(int *)(v3 + 20), a1, type metadata accessor for PageBackground);
}

uint64_t AverageMonthlyReadingFrame.sharableView.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v6;

  v1 = type metadata accessor for AverageMonthlyReadingFrame(0);
  __chkstk_darwin(v1);
  v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1E428(v0, (uint64_t)v3, type metadata accessor for AverageMonthlyReadingFrame);
  v4 = sub_6FD0(&qword_25EFE8, type metadata accessor for AverageMonthlyReadingFrame, (uint64_t)&protocol conformance descriptor for AverageMonthlyReadingFrame);
  return AnyView.init<A>(_:)(v3, v1, v4);
}

uint64_t AverageMonthlyReadingFrame.exposureData.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v3 = v1 + *(int *)(type metadata accessor for AverageMonthlyReadingFrame(0) + 24);
  v4 = v3 + *(int *)(type metadata accessor for AverageMonthlyReadingFrameViewModel(0) + 24);
  v5 = type metadata accessor for YIRSourceData(0);
  a1[3] = v5;
  a1[4] = sub_6FD0(&qword_25EFF0, (uint64_t (*)(uint64_t))&type metadata accessor for YIRSourceData, (uint64_t)&protocol conformance descriptor for YIRSourceData);
  a1[5] = sub_6FD0(&qword_25EFF8, (uint64_t (*)(uint64_t))&type metadata accessor for YIRSourceData, (uint64_t)&protocol conformance descriptor for YIRSourceData);
  v6 = sub_C404(a1);
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(v6, v4, v5);
}

uint64_t AverageMonthlyReadingFrame.init(model:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *a2 = static Alignment.top.getter();
  a2[1] = v4;
  v5 = type metadata accessor for AverageMonthlyReadingFrame(0);
  v6 = (_QWORD *)((char *)a2 + *(int *)(v5 + 20));
  v7 = (char *)v6 + *(int *)(sub_5440(&qword_25E930) + 48);
  *v6 = static Color.cyan.getter();
  v8 = enum case for ColorScheme.light(_:);
  v9 = type metadata accessor for ColorScheme(0);
  v10 = *(_QWORD *)(v9 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 104))(v7, v8, v9);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  v11 = type metadata accessor for PageBackground(0);
  swift_storeEnumTagMultiPayload(v6, v11, 0);
  return sub_21C88(a1, (uint64_t)a2 + *(int *)(v5 + 24), type metadata accessor for AverageMonthlyReadingFrameViewModel);
}

void AverageMonthlyReadingFrame.body.getter(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  _QWORD *v10;
  uint64_t v11;

  v3 = v1 + *(int *)(type metadata accessor for AverageMonthlyReadingFrame(0) + 24);
  v4 = sub_2381C();
  v6 = v5;
  sub_23DF8();
  *a1 = v4;
  a1[1] = v6;
  a1[2] = v7;
  a1[3] = v8;
  v9 = (int *)sub_5440(&qword_25F000);
  v10 = (uint64_t *)((char *)a1 + v9[10]);
  v11 = swift_bridgeObjectRetain(*(_QWORD *)(v3 + 8));
  sub_2750C(v11, v10);
  *(uint64_t *)((char *)a1 + v9[11]) = 0x3FC999999999999ALL;
  *(uint64_t *)((char *)a1 + v9[12]) = 0x4040000000000000;
  *(uint64_t *)((char *)a1 + v9[13]) = 0x4040000000000000;
}

uint64_t sub_279C0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v8;

  v3 = __chkstk_darwin(v1);
  v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1E428(v3, (uint64_t)v5, type metadata accessor for AverageMonthlyReadingFrame);
  v6 = sub_6FD0(&qword_25EFE8, type metadata accessor for AverageMonthlyReadingFrame, (uint64_t)&protocol conformance descriptor for AverageMonthlyReadingFrame);
  return AnyView.init<A>(_:)(v5, a1, v6);
}

uint64_t sub_27A54@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1E428(v2 + *(int *)(a1 + 20), a2, type metadata accessor for PageBackground);
}

uint64_t sub_27A7C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v2 + *(int *)(a1 + 24);
  v5 = v4 + *(int *)(type metadata accessor for AverageMonthlyReadingFrameViewModel(0) + 24);
  v6 = type metadata accessor for YIRSourceData(0);
  a2[3] = v6;
  a2[4] = sub_6FD0(&qword_25EFF0, (uint64_t (*)(uint64_t))&type metadata accessor for YIRSourceData, (uint64_t)&protocol conformance descriptor for YIRSourceData);
  a2[5] = sub_6FD0(&qword_25EFF8, (uint64_t (*)(uint64_t))&type metadata accessor for YIRSourceData, (uint64_t)&protocol conformance descriptor for YIRSourceData);
  v7 = sub_C404(a2);
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(v7, v5, v6);
}

void sub_27B20(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  _QWORD *v11;
  uint64_t v12;

  v4 = v2 + *(int *)(a1 + 24);
  v5 = sub_2381C();
  v7 = v6;
  sub_23DF8();
  *a2 = v5;
  a2[1] = v7;
  a2[2] = v8;
  a2[3] = v9;
  v10 = (int *)sub_5440(&qword_25F000);
  v11 = (uint64_t *)((char *)a2 + v10[10]);
  v12 = swift_bridgeObjectRetain(*(_QWORD *)(v4 + 8));
  sub_2750C(v12, v11);
  *(uint64_t *)((char *)a2 + v10[11]) = 0x3FC999999999999ALL;
  *(uint64_t *)((char *)a2 + v10[12]) = 0x4040000000000000;
  *(uint64_t *)((char *)a2 + v10[13]) = 0x4040000000000000;
}

void *sub_27BB4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t);
  void *result;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t, uint64_t);
  uint64_t v35;

  v2 = type metadata accessor for MetricsFieldInclusionRequest(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v30 - v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (v9)
  {
    sub_5440(&qword_25F4D8);
    v10 = static _SetStorage.allocate(capacity:)(v9);
    v11 = 0;
    v12 = *(unsigned __int8 *)(v3 + 80);
    v31 = v9;
    v32 = a1 + ((v12 + 32) & ~v12);
    v13 = *(_QWORD *)(v3 + 72);
    v34 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    v35 = v10 + 56;
    while (1)
    {
      v33 = v11;
      v34(v8, v32 + v13 * v11, v2);
      v14 = *(_QWORD *)(v10 + 40);
      v15 = sub_6FD0(&qword_25F4E0, (uint64_t (*)(uint64_t))&type metadata accessor for MetricsFieldInclusionRequest, (uint64_t)&protocol conformance descriptor for MetricsFieldInclusionRequest);
      v16 = dispatch thunk of Hashable._rawHashValue(seed:)(v14, v2, v15);
      v17 = ~(-1 << *(_BYTE *)(v10 + 32));
      v18 = v16 & v17;
      v19 = (v16 & (unint64_t)v17) >> 6;
      v20 = *(_QWORD *)(v35 + 8 * v19);
      v21 = 1 << (v16 & v17);
      if ((v21 & v20) != 0)
      {
        do
        {
          v34(v6, *(_QWORD *)(v10 + 48) + v18 * v13, v2);
          v22 = sub_6FD0(&qword_25F4E8, (uint64_t (*)(uint64_t))&type metadata accessor for MetricsFieldInclusionRequest, (uint64_t)&protocol conformance descriptor for MetricsFieldInclusionRequest);
          v23 = dispatch thunk of static Equatable.== infix(_:_:)(v6, v8, v2, v22);
          v24 = v3;
          v25 = *(void (**)(char *, uint64_t))(v3 + 8);
          v25(v6, v2);
          if ((v23 & 1) != 0)
          {
            v25(v8, v2);
            v3 = v24;
            v9 = v31;
            goto LABEL_4;
          }
          v18 = (v18 + 1) & v17;
          v19 = v18 >> 6;
          v20 = *(_QWORD *)(v35 + 8 * (v18 >> 6));
          v21 = 1 << v18;
          v3 = v24;
        }
        while ((v20 & (1 << v18)) != 0);
        v9 = v31;
      }
      *(_QWORD *)(v35 + 8 * v19) = v21 | v20;
      result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v10 + 48) + v18 * v13, v8, v2);
      v27 = *(_QWORD *)(v10 + 16);
      v28 = __OFADD__(v27, 1);
      v29 = v27 + 1;
      if (v28)
        break;
      *(_QWORD *)(v10 + 16) = v29;
LABEL_4:
      v11 = v33 + 1;
      if (v33 + 1 == v9)
        return (void *)v10;
    }
    __break(1u);
  }
  else
  {
    return &_swiftEmptySetSingleton;
  }
  return result;
}

void *sub_27E1C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t);
  void *result;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t, uint64_t);
  uint64_t v35;

  v2 = type metadata accessor for Duration.UnitsFormatStyle.Unit(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v30 - v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (v9)
  {
    sub_5440(&qword_25F4C0);
    v10 = static _SetStorage.allocate(capacity:)(v9);
    v11 = 0;
    v12 = *(unsigned __int8 *)(v3 + 80);
    v31 = v9;
    v32 = a1 + ((v12 + 32) & ~v12);
    v13 = *(_QWORD *)(v3 + 72);
    v34 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    v35 = v10 + 56;
    while (1)
    {
      v33 = v11;
      v34(v8, v32 + v13 * v11, v2);
      v14 = *(_QWORD *)(v10 + 40);
      v15 = sub_6FD0(&qword_25F4C8, (uint64_t (*)(uint64_t))&type metadata accessor for Duration.UnitsFormatStyle.Unit, (uint64_t)&protocol conformance descriptor for Duration.UnitsFormatStyle.Unit);
      v16 = dispatch thunk of Hashable._rawHashValue(seed:)(v14, v2, v15);
      v17 = ~(-1 << *(_BYTE *)(v10 + 32));
      v18 = v16 & v17;
      v19 = (v16 & (unint64_t)v17) >> 6;
      v20 = *(_QWORD *)(v35 + 8 * v19);
      v21 = 1 << (v16 & v17);
      if ((v21 & v20) != 0)
      {
        do
        {
          v34(v6, *(_QWORD *)(v10 + 48) + v18 * v13, v2);
          v22 = sub_6FD0(&qword_25F4D0, (uint64_t (*)(uint64_t))&type metadata accessor for Duration.UnitsFormatStyle.Unit, (uint64_t)&protocol conformance descriptor for Duration.UnitsFormatStyle.Unit);
          v23 = dispatch thunk of static Equatable.== infix(_:_:)(v6, v8, v2, v22);
          v24 = v3;
          v25 = *(void (**)(char *, uint64_t))(v3 + 8);
          v25(v6, v2);
          if ((v23 & 1) != 0)
          {
            v25(v8, v2);
            v3 = v24;
            v9 = v31;
            goto LABEL_4;
          }
          v18 = (v18 + 1) & v17;
          v19 = v18 >> 6;
          v20 = *(_QWORD *)(v35 + 8 * (v18 >> 6));
          v21 = 1 << v18;
          v3 = v24;
        }
        while ((v20 & (1 << v18)) != 0);
        v9 = v31;
      }
      *(_QWORD *)(v35 + 8 * v19) = v21 | v20;
      result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v10 + 48) + v18 * v13, v8, v2);
      v27 = *(_QWORD *)(v10 + 16);
      v28 = __OFADD__(v27, 1);
      v29 = v27 + 1;
      if (v28)
        break;
      *(_QWORD *)(v10 + 16) = v29;
LABEL_4:
      v11 = v33 + 1;
      if (v33 + 1 == v9)
        return (void *)v10;
    }
    __break(1u);
  }
  else
  {
    return &_swiftEmptySetSingleton;
  }
  return result;
}

uint64_t type metadata accessor for AverageMonthlyReadingFrameViewModel(uint64_t a1)
{
  return sub_1FE90(a1, qword_25F070, (uint64_t)&nominal type descriptor for AverageMonthlyReadingFrameViewModel);
}

uint64_t type metadata accessor for AverageMonthlyReadingFrame(uint64_t a1)
{
  return sub_1FE90(a1, qword_25F1A0, (uint64_t)&nominal type descriptor for AverageMonthlyReadingFrame);
}

uint64_t sub_280AC()
{
  return sub_6FD0(&qword_25F008, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
}

uint64_t sub_280D8(uint64_t a1)
{
  uint64_t result;

  result = sub_6FD0(&qword_25F010, type metadata accessor for AverageMonthlyReadingFrame, (uint64_t)&protocol conformance descriptor for AverageMonthlyReadingFrame);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_28114(uint64_t a1)
{
  uint64_t result;

  result = sub_6FD0(&qword_25EFE8, type metadata accessor for AverageMonthlyReadingFrame, (uint64_t)&protocol conformance descriptor for AverageMonthlyReadingFrame);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_28150(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &opaque type descriptor for <<opaque return type of AverageMonthlyReadingFrame.body>>, 1);
}

uint64_t *initializeBufferWithCopyOfBuffer for AverageMonthlyReadingFrameViewModel(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v11 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain(v11);
  }
  else
  {
    v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    v6 = *(int *)(a3 + 24);
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    v9 = type metadata accessor for YIRSourceData(0);
    v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
    swift_bridgeObjectRetain(v5);
    v10(v7, v8, v9);
  }
  return v3;
}

uint64_t destroy for AverageMonthlyReadingFrameViewModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  v4 = a1 + *(int *)(a2 + 24);
  v5 = type metadata accessor for YIRSourceData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

_QWORD *initializeWithCopy for AverageMonthlyReadingFrameViewModel(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *, char *, uint64_t);

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = *(int *)(a3 + 24);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = type metadata accessor for YIRSourceData(0);
  v9 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
  swift_bridgeObjectRetain(v4);
  v9(v6, v7, v8);
  return a1;
}

_QWORD *assignWithCopy for AverageMonthlyReadingFrameViewModel(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  *a1 = *a2;
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = *(int *)(a3 + 24);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for YIRSourceData(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 24))(v9, v10, v11);
  return a1;
}

_OWORD *initializeWithTake for AverageMonthlyReadingFrameViewModel(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 24);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for YIRSourceData(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

_QWORD *assignWithTake for AverageMonthlyReadingFrameViewModel(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;

  *a1 = *a2;
  v6 = a1[1];
  a1[1] = a2[1];
  swift_bridgeObjectRelease(v6);
  v7 = *(int *)(a3 + 24);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for YIRSourceData(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for AverageMonthlyReadingFrameViewModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_2840C);
}

uint64_t sub_2840C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for YIRSourceData(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for AverageMonthlyReadingFrameViewModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_28494);
}

uint64_t sub_28494(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for YIRSourceData(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

uint64_t sub_28508(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
  result = type metadata accessor for YIRSourceData(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
    return 0;
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for AverageMonthlyReadingFrameViewModel.MonthAverage(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v9);
  }
  else
  {
    v7 = type metadata accessor for Date(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 24);
    *(_QWORD *)((char *)a1 + *(int *)(a3 + 20)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 20));
    *((_BYTE *)a1 + v8) = *((_BYTE *)a2 + v8);
  }
  return a1;
}

uint64_t destroy for AverageMonthlyReadingFrameViewModel.MonthAverage(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t initializeWithCopy for AverageMonthlyReadingFrameViewModel.MonthAverage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 24);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  *(_BYTE *)(a1 + v7) = *(_BYTE *)(a2 + v7);
  return a1;
}

uint64_t assignWithCopy for AverageMonthlyReadingFrameViewModel.MonthAverage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  *(_BYTE *)(a1 + *(int *)(a3 + 24)) = *(_BYTE *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t initializeWithTake for AverageMonthlyReadingFrameViewModel.MonthAverage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 24);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  *(_BYTE *)(a1 + v7) = *(_BYTE *)(a2 + v7);
  return a1;
}

uint64_t assignWithTake for AverageMonthlyReadingFrameViewModel.MonthAverage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 24);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  *(_BYTE *)(a1 + v7) = *(_BYTE *)(a2 + v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for AverageMonthlyReadingFrameViewModel.MonthAverage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_287F0);
}

uint64_t sub_287F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 24));
  if (v9 >= 2)
    return ((v9 + 2147483646) & 0x7FFFFFFF) + 1;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for AverageMonthlyReadingFrameViewModel.MonthAverage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_28888);
}

uint64_t sub_28888(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_BYTE *)(a1 + *(int *)(a4 + 24)) = a2 + 1;
  return result;
}

uint64_t sub_28900(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  result = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[2] = &unk_1E1E58;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for AverageMonthlyReadingFrame(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  _QWORD *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  void (*v37)(char *, char *, uint64_t);

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    v7 = *(int *)(a3 + 20);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for PageBackground(0);
    if (swift_getEnumCaseMultiPayload(v9, v10) == 1)
    {
      if (v9[56])
      {
        v11 = *((_OWORD *)v9 + 1);
        *(_OWORD *)v8 = *(_OWORD *)v9;
        *((_OWORD *)v8 + 1) = v11;
        *((_OWORD *)v8 + 2) = *((_OWORD *)v9 + 2);
        *(_OWORD *)(v8 + 41) = *(_OWORD *)(v9 + 41);
      }
      else
      {
        v21 = *(_OWORD *)(v9 + 24);
        *(_OWORD *)(v8 + 24) = v21;
        (**(void (***)(char *, char *))(v21 - 8))(v8, v9);
        *(_OWORD *)(v8 + 40) = *(_OWORD *)(v9 + 40);
        v8[56] = 0;
      }
      *((_OWORD *)v8 + 4) = *((_OWORD *)v9 + 4);
      v8[80] = v9[80];
      *(_OWORD *)(v8 + 88) = *(_OWORD *)(v9 + 88);
      v22 = *((_QWORD *)v9 + 13);
      *((_QWORD *)v8 + 13) = v22;
      v23 = *((_QWORD *)v9 + 15);
      swift_bridgeObjectRetain(v22);
      if (v23)
      {
        *((_QWORD *)v8 + 14) = *((_QWORD *)v9 + 14);
        *((_QWORD *)v8 + 15) = v23;
        v24 = *((_QWORD *)v9 + 17);
        *((_QWORD *)v8 + 16) = *((_QWORD *)v9 + 16);
        *((_QWORD *)v8 + 17) = v24;
        v8[144] = v9[144];
        v25 = *((_QWORD *)v9 + 19);
        v26 = *((_QWORD *)v9 + 20);
        *((_QWORD *)v8 + 19) = v25;
        *((_QWORD *)v8 + 20) = v26;
        swift_bridgeObjectRetain(v23);
        swift_bridgeObjectRetain(v24);
        swift_bridgeObjectRetain(v26);
      }
      else
      {
        v27 = *((_OWORD *)v9 + 8);
        *((_OWORD *)v8 + 7) = *((_OWORD *)v9 + 7);
        *((_OWORD *)v8 + 8) = v27;
        *((_OWORD *)v8 + 9) = *((_OWORD *)v9 + 9);
        *((_QWORD *)v8 + 20) = *((_QWORD *)v9 + 20);
      }
      v20 = 1;
    }
    else
    {
      v13 = *(_QWORD *)v9;
      *(_QWORD *)v8 = *(_QWORD *)v9;
      swift_retain(v13);
      v14 = *(int *)(sub_5440(&qword_25E930) + 48);
      v15 = &v8[v14];
      v16 = &v9[v14];
      v17 = type metadata accessor for ColorScheme(0);
      v18 = *(_QWORD *)(v17 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
      {
        v19 = sub_5440(&qword_25E928);
        memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v15, v16, v17);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
      }
      v20 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v10, v20);
    v28 = *(int *)(a3 + 24);
    v29 = (uint64_t *)((char *)v4 + v28);
    v30 = (char *)a2 + v28;
    v31 = *(uint64_t *)((char *)a2 + v28);
    v32 = *((_QWORD *)v30 + 1);
    *v29 = v31;
    v29[1] = v32;
    v33 = *(int *)(type metadata accessor for AverageMonthlyReadingFrameViewModel(0) + 24);
    v34 = (char *)v29 + v33;
    v35 = &v30[v33];
    v36 = type metadata accessor for YIRSourceData(0);
    v37 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v36 - 8) + 16);
    swift_bridgeObjectRetain(v32);
    v37(v34, v35, v36);
  }
  return v4;
}

uint64_t destroy for AverageMonthlyReadingFrame(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = (_QWORD *)(a1 + *(int *)(a2 + 20));
  v5 = type metadata accessor for PageBackground(0);
  if (swift_getEnumCaseMultiPayload(v4, v5) == 1)
  {
    if (!*((_BYTE *)v4 + 56))
      _s7BooksUI13AnyPagedFrameVwxx_0(v4);
    swift_bridgeObjectRelease(v4[13]);
    v6 = v4[15];
    if (v6)
    {
      swift_bridgeObjectRelease(v6);
      swift_bridgeObjectRelease(v4[17]);
      swift_bridgeObjectRelease(v4[20]);
    }
  }
  else
  {
    swift_release(*v4);
    v7 = (char *)v4 + *(int *)(sub_5440(&qword_25E930) + 48);
    v8 = type metadata accessor for ColorScheme(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8))
      (*(void (**)(char *, uint64_t))(v9 + 8))(v7, v8);
  }
  v10 = a1 + *(int *)(a2 + 24);
  swift_bridgeObjectRelease(*(_QWORD *)(v10 + 8));
  v11 = v10 + *(int *)(type metadata accessor for AverageMonthlyReadingFrameViewModel(0) + 24);
  v12 = type metadata accessor for YIRSourceData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
}

_OWORD *initializeWithCopy for AverageMonthlyReadingFrame(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  _QWORD *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  void (*v35)(char *, char *, uint64_t);

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for PageBackground(0);
  if (swift_getEnumCaseMultiPayload(v8, v9) == 1)
  {
    if (v8[56])
    {
      v10 = *((_OWORD *)v8 + 1);
      *(_OWORD *)v7 = *(_OWORD *)v8;
      *((_OWORD *)v7 + 1) = v10;
      *((_OWORD *)v7 + 2) = *((_OWORD *)v8 + 2);
      *(_OWORD *)(v7 + 41) = *(_OWORD *)(v8 + 41);
    }
    else
    {
      v19 = *(_OWORD *)(v8 + 24);
      *(_OWORD *)(v7 + 24) = v19;
      (**(void (***)(char *, char *))(v19 - 8))(v7, v8);
      *(_OWORD *)(v7 + 40) = *(_OWORD *)(v8 + 40);
      v7[56] = 0;
    }
    *((_OWORD *)v7 + 4) = *((_OWORD *)v8 + 4);
    v7[80] = v8[80];
    *(_OWORD *)(v7 + 88) = *(_OWORD *)(v8 + 88);
    v20 = *((_QWORD *)v8 + 13);
    *((_QWORD *)v7 + 13) = v20;
    v21 = *((_QWORD *)v8 + 15);
    swift_bridgeObjectRetain(v20);
    if (v21)
    {
      *((_QWORD *)v7 + 14) = *((_QWORD *)v8 + 14);
      *((_QWORD *)v7 + 15) = v21;
      v22 = *((_QWORD *)v8 + 17);
      *((_QWORD *)v7 + 16) = *((_QWORD *)v8 + 16);
      *((_QWORD *)v7 + 17) = v22;
      v7[144] = v8[144];
      v23 = *((_QWORD *)v8 + 19);
      v24 = *((_QWORD *)v8 + 20);
      *((_QWORD *)v7 + 19) = v23;
      *((_QWORD *)v7 + 20) = v24;
      swift_bridgeObjectRetain(v21);
      swift_bridgeObjectRetain(v22);
      swift_bridgeObjectRetain(v24);
    }
    else
    {
      v25 = *((_OWORD *)v8 + 8);
      *((_OWORD *)v7 + 7) = *((_OWORD *)v8 + 7);
      *((_OWORD *)v7 + 8) = v25;
      *((_OWORD *)v7 + 9) = *((_OWORD *)v8 + 9);
      *((_QWORD *)v7 + 20) = *((_QWORD *)v8 + 20);
    }
    v18 = 1;
  }
  else
  {
    v11 = *(_QWORD *)v8;
    *(_QWORD *)v7 = *(_QWORD *)v8;
    swift_retain(v11);
    v12 = *(int *)(sub_5440(&qword_25E930) + 48);
    v13 = &v7[v12];
    v14 = &v8[v12];
    v15 = type metadata accessor for ColorScheme(0);
    v16 = *(_QWORD *)(v15 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
    {
      v17 = sub_5440(&qword_25E928);
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v13, v14, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
    }
    v18 = 0;
  }
  swift_storeEnumTagMultiPayload(v7, v9, v18);
  v26 = *(int *)(a3 + 24);
  v27 = (_QWORD *)((char *)a1 + v26);
  v28 = (char *)a2 + v26;
  v29 = *(_QWORD *)((char *)a2 + v26);
  v30 = *((_QWORD *)v28 + 1);
  *v27 = v29;
  v27[1] = v30;
  v31 = *(int *)(type metadata accessor for AverageMonthlyReadingFrameViewModel(0) + 24);
  v32 = (char *)v27 + v31;
  v33 = &v28[v31];
  v34 = type metadata accessor for YIRSourceData(0);
  v35 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v34 - 8) + 16);
  swift_bridgeObjectRetain(v30);
  v35(v32, v33, v34);
  return a1;
}

_QWORD *assignWithCopy for AverageMonthlyReadingFrame(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  _QWORD *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;

  *a1 = *a2;
  a1[1] = a2[1];
  if (a1 != a2)
  {
    v6 = *(int *)(a3 + 20);
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    sub_224DC((uint64_t)a1 + v6, type metadata accessor for PageBackground);
    v9 = type metadata accessor for PageBackground(0);
    if (swift_getEnumCaseMultiPayload(v8, v9) == 1)
    {
      if (v8[56])
      {
        v10 = *(_OWORD *)v8;
        v11 = *((_OWORD *)v8 + 1);
        v12 = *((_OWORD *)v8 + 2);
        *(_OWORD *)(v7 + 41) = *(_OWORD *)(v8 + 41);
        *((_OWORD *)v7 + 1) = v11;
        *((_OWORD *)v7 + 2) = v12;
        *(_OWORD *)v7 = v10;
      }
      else
      {
        v21 = *((_QWORD *)v8 + 3);
        *((_QWORD *)v7 + 3) = v21;
        *((_QWORD *)v7 + 4) = *((_QWORD *)v8 + 4);
        (**(void (***)(char *, char *))(v21 - 8))(v7, v8);
        *(_OWORD *)(v7 + 40) = *(_OWORD *)(v8 + 40);
        v7[56] = 0;
      }
      *((_OWORD *)v7 + 4) = *((_OWORD *)v8 + 4);
      v7[80] = v8[80];
      *((_QWORD *)v7 + 11) = *((_QWORD *)v8 + 11);
      *((_QWORD *)v7 + 12) = *((_QWORD *)v8 + 12);
      v22 = *((_QWORD *)v8 + 13);
      *((_QWORD *)v7 + 13) = v22;
      v23 = *((_QWORD *)v8 + 15);
      swift_bridgeObjectRetain(v22);
      if (v23)
      {
        *((_QWORD *)v7 + 14) = *((_QWORD *)v8 + 14);
        v24 = *((_QWORD *)v8 + 15);
        *((_QWORD *)v7 + 15) = v24;
        *((_QWORD *)v7 + 16) = *((_QWORD *)v8 + 16);
        v25 = *((_QWORD *)v8 + 17);
        *((_QWORD *)v7 + 17) = v25;
        v7[144] = v8[144];
        *((_QWORD *)v7 + 19) = *((_QWORD *)v8 + 19);
        v26 = *((_QWORD *)v8 + 20);
        *((_QWORD *)v7 + 20) = v26;
        swift_bridgeObjectRetain(v24);
        swift_bridgeObjectRetain(v25);
        swift_bridgeObjectRetain(v26);
      }
      else
      {
        v27 = *((_OWORD *)v8 + 7);
        v28 = *((_OWORD *)v8 + 8);
        v29 = *((_OWORD *)v8 + 9);
        *((_QWORD *)v7 + 20) = *((_QWORD *)v8 + 20);
        *((_OWORD *)v7 + 8) = v28;
        *((_OWORD *)v7 + 9) = v29;
        *((_OWORD *)v7 + 7) = v27;
      }
      v20 = 1;
    }
    else
    {
      v13 = *(_QWORD *)v8;
      *(_QWORD *)v7 = *(_QWORD *)v8;
      swift_retain(v13);
      v14 = *(int *)(sub_5440(&qword_25E930) + 48);
      v15 = &v7[v14];
      v16 = &v8[v14];
      v17 = type metadata accessor for ColorScheme(0);
      v18 = *(_QWORD *)(v17 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
      {
        v19 = sub_5440(&qword_25E928);
        memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v15, v16, v17);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
      }
      v20 = 0;
    }
    swift_storeEnumTagMultiPayload(v7, v9, v20);
  }
  v30 = *(int *)(a3 + 24);
  v31 = (_QWORD *)((char *)a1 + v30);
  v32 = (char *)a2 + v30;
  *v31 = *(_QWORD *)((char *)a2 + v30);
  v33 = *(_QWORD *)((char *)a2 + v30 + 8);
  v34 = *(_QWORD *)((char *)a1 + v30 + 8);
  v31[1] = v33;
  swift_bridgeObjectRetain(v33);
  swift_bridgeObjectRelease(v34);
  v35 = *(int *)(type metadata accessor for AverageMonthlyReadingFrameViewModel(0) + 24);
  v36 = (char *)v31 + v35;
  v37 = &v32[v35];
  v38 = type metadata accessor for YIRSourceData(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v38 - 8) + 24))(v36, v37, v38);
  return a1;
}

_OWORD *initializeWithTake for AverageMonthlyReadingFrame(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (_QWORD *)((char *)a1 + v6);
  v8 = (_QWORD *)((char *)a2 + v6);
  v9 = type metadata accessor for PageBackground(0);
  if (swift_getEnumCaseMultiPayload(v8, v9))
  {
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  else
  {
    *v7 = *v8;
    v10 = *(int *)(sub_5440(&qword_25E930) + 48);
    v11 = (char *)v7 + v10;
    v12 = (char *)v8 + v10;
    v13 = type metadata accessor for ColorScheme(0);
    v14 = *(_QWORD *)(v13 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
    {
      v15 = sub_5440(&qword_25E928);
      memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v12, v13);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
    }
    swift_storeEnumTagMultiPayload(v7, v9, 0);
  }
  v16 = *(int *)(a3 + 24);
  v17 = (char *)a1 + v16;
  v18 = (char *)a2 + v16;
  *(_OWORD *)((char *)a1 + v16) = *(_OWORD *)((char *)a2 + v16);
  v19 = *(int *)(type metadata accessor for AverageMonthlyReadingFrameViewModel(0) + 24);
  v20 = &v17[v19];
  v21 = &v18[v19];
  v22 = type metadata accessor for YIRSourceData(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v20, v21, v22);
  return a1;
}

_OWORD *assignWithTake for AverageMonthlyReadingFrame(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;

  *a1 = *a2;
  if (a1 != a2)
  {
    v6 = *(int *)(a3 + 20);
    v7 = (_QWORD *)((char *)a1 + v6);
    v8 = (_QWORD *)((char *)a2 + v6);
    sub_224DC((uint64_t)a1 + v6, type metadata accessor for PageBackground);
    v9 = type metadata accessor for PageBackground(0);
    if (swift_getEnumCaseMultiPayload(v8, v9))
    {
      memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      *v7 = *v8;
      v10 = *(int *)(sub_5440(&qword_25E930) + 48);
      v11 = (char *)v7 + v10;
      v12 = (char *)v8 + v10;
      v13 = type metadata accessor for ColorScheme(0);
      v14 = *(_QWORD *)(v13 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
      {
        v15 = sub_5440(&qword_25E928);
        memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v12, v13);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
      }
      swift_storeEnumTagMultiPayload(v7, v9, 0);
    }
  }
  v16 = *(int *)(a3 + 24);
  v17 = (_QWORD *)((char *)a1 + v16);
  v18 = (char *)a2 + v16;
  *v17 = *(_QWORD *)((char *)a2 + v16);
  v19 = *(_QWORD *)((char *)a1 + v16 + 8);
  v17[1] = *(_QWORD *)((char *)a2 + v16 + 8);
  swift_bridgeObjectRelease(v19);
  v20 = *(int *)(type metadata accessor for AverageMonthlyReadingFrameViewModel(0) + 24);
  v21 = (char *)v17 + v20;
  v22 = &v18[v20];
  v23 = type metadata accessor for YIRSourceData(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 40))(v21, v22, v23);
  return a1;
}

uint64_t getEnumTagSinglePayload for AverageMonthlyReadingFrame(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_29564);
}

uint64_t sub_29564(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = type metadata accessor for PageBackground(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(int *)(a3 + 20);
  }
  else
  {
    v8 = type metadata accessor for AverageMonthlyReadingFrameViewModel(0);
    v7 = *(_QWORD *)(v8 - 8);
    v9 = *(int *)(a3 + 24);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
}

uint64_t storeEnumTagSinglePayload for AverageMonthlyReadingFrame(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_295E0);
}

uint64_t sub_295E0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v8 = type metadata accessor for PageBackground(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(int *)(a4 + 20);
  }
  else
  {
    v10 = type metadata accessor for AverageMonthlyReadingFrameViewModel(0);
    v9 = *(_QWORD *)(v10 - 8);
    v11 = *(int *)(a4 + 24);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
}

uint64_t sub_29658(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[3];

  v5[0] = &unk_1E1E90;
  result = type metadata accessor for PageBackground(319);
  if (v3 <= 0x3F)
  {
    v5[1] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for AverageMonthlyReadingFrameViewModel(319);
    if (v4 <= 0x3F)
    {
      v5[2] = *(_QWORD *)(result - 8) + 64;
      swift_initStructMetadata(a1, 256, 3, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

uint64_t sub_296E8()
{
  return sub_7FD8(&qword_25F1E0, &qword_25F000, (uint64_t)&unk_1EAAB8);
}

uint64_t *sub_29714(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _WORD *v26;
  _WORD *v27;
  uint64_t v28;
  int *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  _QWORD *v65;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    v4 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = sub_5440(&qword_25F1E8);
    if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
    {
      v8 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v4, a2, v8);
      v9 = v4;
      v10 = v7;
      v11 = 1;
    }
    else
    {
      v13 = *a2;
      *v4 = *a2;
      swift_retain(v13);
      v9 = v4;
      v10 = v7;
      v11 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v10, v11);
    v14 = a3[5];
    v15 = (uint64_t *)((char *)v4 + v14);
    v16 = (uint64_t *)((char *)a2 + v14);
    v17 = sub_5440(&qword_25F1F0);
    if (swift_getEnumCaseMultiPayload(v16, v17) == 1)
    {
      v18 = type metadata accessor for UserInterfaceSizeClass(0);
      v19 = *(_QWORD *)(v18 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v19 + 48))(v16, 1, v18))
      {
        v20 = sub_5440(&qword_25F1F8);
        memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v19 + 16))(v15, v16, v18);
        (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v15, 0, 1, v18);
      }
      v22 = v15;
      v23 = v17;
      v24 = 1;
    }
    else
    {
      v21 = *v16;
      *v15 = *v16;
      swift_retain(v21);
      v22 = v15;
      v23 = v17;
      v24 = 0;
    }
    swift_storeEnumTagMultiPayload(v22, v23, v24);
    v25 = a3[6];
    v26 = (_WORD *)((char *)v4 + v25);
    v27 = (_WORD *)((char *)a2 + v25);
    v28 = sub_5440(&qword_25F200);
    if (swift_getEnumCaseMultiPayload(v27, v28) == 1)
    {
      *v26 = *v27;
      v29 = (int *)type metadata accessor for SizeConstants.Environment(0);
      v30 = v29[6];
      v31 = (char *)v26 + v30;
      v32 = (char *)v27 + v30;
      v33 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v33 - 8) + 16))(v31, v32, v33);
      *(_QWORD *)((char *)v26 + v29[7]) = *(_QWORD *)((char *)v27 + v29[7]);
      v34 = v29[8];
      v35 = (char *)v26 + v34;
      v36 = (char *)v27 + v34;
      v35[2] = v36[2];
      *(_WORD *)v35 = *(_WORD *)v36;
      v37 = 1;
    }
    else
    {
      v38 = *(_QWORD *)v27;
      *(_QWORD *)v26 = *(_QWORD *)v27;
      swift_retain(v38);
      v37 = 0;
    }
    swift_storeEnumTagMultiPayload(v26, v28, v37);
    v39 = a3[7];
    v40 = (uint64_t *)((char *)v4 + v39);
    v41 = (uint64_t *)((char *)a2 + v39);
    v42 = sub_5440(&qword_25F208);
    if (swift_getEnumCaseMultiPayload(v41, v42) == 1)
    {
      v43 = type metadata accessor for BlendMode(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v43 - 8) + 16))(v40, v41, v43);
      v44 = v40;
      v45 = v42;
      v46 = 1;
    }
    else
    {
      v47 = *v41;
      *v40 = *v41;
      swift_retain(v47);
      v44 = v40;
      v45 = v42;
      v46 = 0;
    }
    swift_storeEnumTagMultiPayload(v44, v45, v46);
    v48 = a3[8];
    v49 = (char *)v4 + v48;
    v50 = (char *)a2 + v48;
    v51 = *(_QWORD *)v50;
    v52 = v50[8];
    sub_F9E4(*(_QWORD *)v50, v52);
    *(_QWORD *)v49 = v51;
    v49[8] = v52;
    v53 = a3[9];
    v54 = (char *)v4 + v53;
    v55 = (char *)a2 + v53;
    v56 = *(_QWORD *)v55;
    v57 = v55[8];
    sub_F9E4(*(_QWORD *)v55, v57);
    *(_QWORD *)v54 = v56;
    v54[8] = v57;
    v58 = a3[10];
    v59 = a3[11];
    v60 = (uint64_t *)((char *)v4 + v58);
    v61 = (uint64_t *)((char *)a2 + v58);
    v62 = *v61;
    v63 = v61[1];
    *v60 = *v61;
    v60[1] = v63;
    v64 = (uint64_t *)((char *)v4 + v59);
    v65 = (uint64_t *)((char *)a2 + v59);
    v12 = v65[1];
    *v64 = *v65;
    v64[1] = v12;
    swift_bridgeObjectRetain(v62);
    swift_retain(v63);
  }
  swift_retain(v12);
  return v4;
}

uint64_t sub_29A88(_QWORD *a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;

  v4 = sub_5440(&qword_25F1E8);
  if (swift_getEnumCaseMultiPayload(a1, v4) == 1)
  {
    v5 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  }
  else
  {
    swift_release(*a1);
  }
  v6 = (_QWORD *)((char *)a1 + a2[5]);
  v7 = sub_5440(&qword_25F1F0);
  if (swift_getEnumCaseMultiPayload(v6, v7) == 1)
  {
    v8 = type metadata accessor for UserInterfaceSizeClass(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v9 + 48))(v6, 1, v8))
      (*(void (**)(_QWORD *, uint64_t))(v9 + 8))(v6, v8);
  }
  else
  {
    swift_release(*v6);
  }
  v10 = (_QWORD *)((char *)a1 + a2[6]);
  v11 = sub_5440(&qword_25F200);
  if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
  {
    v12 = (char *)v10 + *(int *)(type metadata accessor for SizeConstants.Environment(0) + 24);
    v13 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
  }
  else
  {
    swift_release(*v10);
  }
  v14 = (_QWORD *)((char *)a1 + a2[7]);
  v15 = sub_5440(&qword_25F208);
  if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
  {
    v16 = type metadata accessor for BlendMode(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v14, v16);
  }
  else
  {
    swift_release(*v14);
  }
  sub_BE0C(*(_QWORD *)((char *)a1 + a2[8]), *((_BYTE *)a1 + a2[8] + 8));
  sub_BE0C(*(_QWORD *)((char *)a1 + a2[9]), *((_BYTE *)a1 + a2[9] + 8));
  v17 = (_QWORD *)((char *)a1 + a2[10]);
  swift_bridgeObjectRelease(*v17);
  swift_release(v17[1]);
  return swift_release(*(_QWORD *)((char *)a1 + a2[11] + 8));
}

uint64_t *sub_29C68(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _WORD *v24;
  _WORD *v25;
  uint64_t v26;
  int *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  uint64_t v64;

  v6 = sub_5440(&qword_25F1E8);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for ColorScheme(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a1;
    v9 = v6;
    v10 = 1;
  }
  else
  {
    v11 = *a2;
    *a1 = *a2;
    swift_retain(v11);
    v8 = a1;
    v9 = v6;
    v10 = 0;
  }
  swift_storeEnumTagMultiPayload(v8, v9, v10);
  v12 = a3[5];
  v13 = (uint64_t *)((char *)a1 + v12);
  v14 = (uint64_t *)((char *)a2 + v12);
  v15 = sub_5440(&qword_25F1F0);
  if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
  {
    v16 = type metadata accessor for UserInterfaceSizeClass(0);
    v17 = *(_QWORD *)(v16 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v17 + 48))(v14, 1, v16))
    {
      v18 = sub_5440(&qword_25F1F8);
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v17 + 16))(v13, v14, v16);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v13, 0, 1, v16);
    }
    v20 = v13;
    v21 = v15;
    v22 = 1;
  }
  else
  {
    v19 = *v14;
    *v13 = *v14;
    swift_retain(v19);
    v20 = v13;
    v21 = v15;
    v22 = 0;
  }
  swift_storeEnumTagMultiPayload(v20, v21, v22);
  v23 = a3[6];
  v24 = (_WORD *)((char *)a1 + v23);
  v25 = (_WORD *)((char *)a2 + v23);
  v26 = sub_5440(&qword_25F200);
  if (swift_getEnumCaseMultiPayload(v25, v26) == 1)
  {
    *v24 = *v25;
    v27 = (int *)type metadata accessor for SizeConstants.Environment(0);
    v28 = v27[6];
    v29 = (char *)v24 + v28;
    v30 = (char *)v25 + v28;
    v31 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v31 - 8) + 16))(v29, v30, v31);
    *(_QWORD *)((char *)v24 + v27[7]) = *(_QWORD *)((char *)v25 + v27[7]);
    v32 = v27[8];
    v33 = (char *)v24 + v32;
    v34 = (char *)v25 + v32;
    v33[2] = v34[2];
    *(_WORD *)v33 = *(_WORD *)v34;
    v35 = 1;
  }
  else
  {
    v36 = *(_QWORD *)v25;
    *(_QWORD *)v24 = *(_QWORD *)v25;
    swift_retain(v36);
    v35 = 0;
  }
  swift_storeEnumTagMultiPayload(v24, v26, v35);
  v37 = a3[7];
  v38 = (uint64_t *)((char *)a1 + v37);
  v39 = (uint64_t *)((char *)a2 + v37);
  v40 = sub_5440(&qword_25F208);
  if (swift_getEnumCaseMultiPayload(v39, v40) == 1)
  {
    v41 = type metadata accessor for BlendMode(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v41 - 8) + 16))(v38, v39, v41);
    v42 = v38;
    v43 = v40;
    v44 = 1;
  }
  else
  {
    v45 = *v39;
    *v38 = *v39;
    swift_retain(v45);
    v42 = v38;
    v43 = v40;
    v44 = 0;
  }
  swift_storeEnumTagMultiPayload(v42, v43, v44);
  v46 = a3[8];
  v47 = (char *)a1 + v46;
  v48 = (char *)a2 + v46;
  v49 = *(_QWORD *)v48;
  v50 = v48[8];
  sub_F9E4(*(_QWORD *)v48, v50);
  *(_QWORD *)v47 = v49;
  v47[8] = v50;
  v51 = a3[9];
  v52 = (char *)a1 + v51;
  v53 = (char *)a2 + v51;
  v54 = *(_QWORD *)v53;
  v55 = v53[8];
  sub_F9E4(*(_QWORD *)v53, v55);
  *(_QWORD *)v52 = v54;
  v52[8] = v55;
  v56 = a3[10];
  v57 = a3[11];
  v58 = (uint64_t *)((char *)a1 + v56);
  v59 = (uint64_t *)((char *)a2 + v56);
  v60 = *v59;
  v61 = v59[1];
  *v58 = *v59;
  v58[1] = v61;
  v62 = (uint64_t *)((char *)a1 + v57);
  v63 = (uint64_t *)((char *)a2 + v57);
  v64 = v63[1];
  *v62 = *v63;
  v62[1] = v64;
  swift_bridgeObjectRetain(v60);
  swift_retain(v61);
  swift_retain(v64);
  return a1;
}

uint64_t *sub_29FB4(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  _BYTE *v25;
  uint64_t v26;
  int *v27;
  uint64_t v28;
  _BYTE *v29;
  _BYTE *v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE *v33;
  _BYTE *v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;

  if (a1 != a2)
  {
    sub_B414((uint64_t)a1, &qword_25F1E8);
    v6 = sub_5440(&qword_25F1E8);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = v6;
      v10 = 1;
    }
    else
    {
      v11 = *a2;
      *a1 = *a2;
      swift_retain(v11);
      v8 = a1;
      v9 = v6;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
    v12 = a3[5];
    v13 = (uint64_t *)((char *)a1 + v12);
    v14 = (uint64_t *)((char *)a2 + v12);
    sub_B414((uint64_t)a1 + v12, &qword_25F1F0);
    v15 = sub_5440(&qword_25F1F0);
    if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
    {
      v16 = type metadata accessor for UserInterfaceSizeClass(0);
      v17 = *(_QWORD *)(v16 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v17 + 48))(v14, 1, v16))
      {
        v18 = sub_5440(&qword_25F1F8);
        memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v17 + 16))(v13, v14, v16);
        (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v13, 0, 1, v16);
      }
      v20 = v13;
      v21 = v15;
      v22 = 1;
    }
    else
    {
      v19 = *v14;
      *v13 = *v14;
      swift_retain(v19);
      v20 = v13;
      v21 = v15;
      v22 = 0;
    }
    swift_storeEnumTagMultiPayload(v20, v21, v22);
    v23 = a3[6];
    v24 = (char *)a1 + v23;
    v25 = (char *)a2 + v23;
    sub_B414((uint64_t)a1 + v23, &qword_25F200);
    v26 = sub_5440(&qword_25F200);
    if (swift_getEnumCaseMultiPayload(v25, v26) == 1)
    {
      *v24 = *v25;
      v24[1] = v25[1];
      v27 = (int *)type metadata accessor for SizeConstants.Environment(0);
      v28 = v27[6];
      v29 = &v24[v28];
      v30 = &v25[v28];
      v31 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v31 - 8) + 16))(v29, v30, v31);
      *(_QWORD *)&v24[v27[7]] = *(_QWORD *)&v25[v27[7]];
      v32 = v27[8];
      v33 = &v24[v32];
      v34 = &v25[v32];
      v35 = v34[2];
      *(_WORD *)v33 = *(_WORD *)v34;
      v33[2] = v35;
      v36 = 1;
    }
    else
    {
      v37 = *(_QWORD *)v25;
      *(_QWORD *)v24 = *(_QWORD *)v25;
      swift_retain(v37);
      v36 = 0;
    }
    swift_storeEnumTagMultiPayload(v24, v26, v36);
    v38 = a3[7];
    v39 = (uint64_t *)((char *)a1 + v38);
    v40 = (uint64_t *)((char *)a2 + v38);
    sub_B414((uint64_t)a1 + v38, &qword_25F208);
    v41 = sub_5440(&qword_25F208);
    if (swift_getEnumCaseMultiPayload(v40, v41) == 1)
    {
      v42 = type metadata accessor for BlendMode(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v42 - 8) + 16))(v39, v40, v42);
      v43 = v39;
      v44 = v41;
      v45 = 1;
    }
    else
    {
      v46 = *v40;
      *v39 = *v40;
      swift_retain(v46);
      v43 = v39;
      v44 = v41;
      v45 = 0;
    }
    swift_storeEnumTagMultiPayload(v43, v44, v45);
  }
  v47 = a3[8];
  v48 = (char *)a1 + v47;
  v49 = (char *)a2 + v47;
  v50 = *(_QWORD *)v49;
  v51 = v49[8];
  sub_F9E4(*(_QWORD *)v49, v51);
  v52 = *(_QWORD *)v48;
  v53 = v48[8];
  *(_QWORD *)v48 = v50;
  v48[8] = v51;
  sub_BE0C(v52, v53);
  v54 = a3[9];
  v55 = (char *)a1 + v54;
  v56 = (char *)a2 + v54;
  v57 = *(_QWORD *)v56;
  v58 = v56[8];
  sub_F9E4(*(_QWORD *)v56, v58);
  v59 = *(_QWORD *)v55;
  v60 = v55[8];
  *(_QWORD *)v55 = v57;
  v55[8] = v58;
  sub_BE0C(v59, v60);
  v61 = a3[10];
  v62 = (char *)a1 + v61;
  v63 = (char *)a2 + v61;
  v64 = *(uint64_t *)((char *)a2 + v61);
  v65 = *(uint64_t *)((char *)a1 + v61);
  *(uint64_t *)((char *)a1 + v61) = v64;
  swift_bridgeObjectRetain(v64);
  swift_bridgeObjectRelease(v65);
  v66 = *((_QWORD *)v62 + 1);
  v67 = *((_QWORD *)v63 + 1);
  *((_QWORD *)v62 + 1) = v67;
  swift_retain(v67);
  swift_release(v66);
  v68 = a3[11];
  v69 = (uint64_t *)((char *)a1 + v68);
  v70 = (uint64_t *)((char *)a2 + v68);
  *v69 = *v70;
  v71 = v69[1];
  v72 = v70[1];
  v69[1] = v72;
  swift_retain(v72);
  swift_release(v71);
  return a1;
}

char *sub_2A398(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  uint64_t v38;

  v6 = sub_5440(&qword_25F1E8);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for ColorScheme(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v8 = a3[5];
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = sub_5440(&qword_25F1F0);
  if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
  {
    v12 = type metadata accessor for UserInterfaceSizeClass(0);
    v13 = *(_QWORD *)(v12 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v10, 1, v12))
    {
      v14 = sub_5440(&qword_25F1F8);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v9, v10, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v9, 0, 1, v12);
    }
    swift_storeEnumTagMultiPayload(v9, v11, 1);
  }
  else
  {
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  v15 = a3[6];
  v16 = &a1[v15];
  v17 = &a2[v15];
  v18 = sub_5440(&qword_25F200);
  if (swift_getEnumCaseMultiPayload(v17, v18) == 1)
  {
    *(_WORD *)v16 = *(_WORD *)v17;
    v19 = (int *)type metadata accessor for SizeConstants.Environment(0);
    v20 = v19[6];
    v21 = &v16[v20];
    v22 = &v17[v20];
    v23 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 32))(v21, v22, v23);
    *(_QWORD *)&v16[v19[7]] = *(_QWORD *)&v17[v19[7]];
    v24 = v19[8];
    v25 = &v16[v24];
    v26 = &v17[v24];
    v25[2] = v26[2];
    *(_WORD *)v25 = *(_WORD *)v26;
    swift_storeEnumTagMultiPayload(v16, v18, 1);
  }
  else
  {
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  v27 = a3[7];
  v28 = &a1[v27];
  v29 = &a2[v27];
  v30 = sub_5440(&qword_25F208);
  if (swift_getEnumCaseMultiPayload(v29, v30) == 1)
  {
    v31 = type metadata accessor for BlendMode(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v31 - 8) + 32))(v28, v29, v31);
    swift_storeEnumTagMultiPayload(v28, v30, 1);
  }
  else
  {
    memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
  }
  v32 = a3[8];
  v33 = a3[9];
  v34 = &a1[v32];
  v35 = &a2[v32];
  *(_QWORD *)v34 = *(_QWORD *)v35;
  v34[8] = v35[8];
  v36 = &a1[v33];
  v37 = &a2[v33];
  *(_QWORD *)v36 = *(_QWORD *)v37;
  v36[8] = v37[8];
  v38 = a3[11];
  *(_OWORD *)&a1[a3[10]] = *(_OWORD *)&a2[a3[10]];
  *(_OWORD *)&a1[v38] = *(_OWORD *)&a2[v38];
  return a1;
}

char *sub_2A69C(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;

  if (a1 != a2)
  {
    sub_B414((uint64_t)a1, &qword_25F1E8);
    v6 = sub_5440(&qword_25F1E8);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for ColorScheme(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
    v8 = a3[5];
    v9 = &a1[v8];
    v10 = &a2[v8];
    sub_B414((uint64_t)&a1[v8], &qword_25F1F0);
    v11 = sub_5440(&qword_25F1F0);
    if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
    {
      v12 = type metadata accessor for UserInterfaceSizeClass(0);
      v13 = *(_QWORD *)(v12 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v10, 1, v12))
      {
        v14 = sub_5440(&qword_25F1F8);
        memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v9, v10, v12);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v9, 0, 1, v12);
      }
      swift_storeEnumTagMultiPayload(v9, v11, 1);
    }
    else
    {
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    }
    v15 = a3[6];
    v16 = &a1[v15];
    v17 = &a2[v15];
    sub_B414((uint64_t)&a1[v15], &qword_25F200);
    v18 = sub_5440(&qword_25F200);
    if (swift_getEnumCaseMultiPayload(v17, v18) == 1)
    {
      *(_WORD *)v16 = *(_WORD *)v17;
      v19 = (int *)type metadata accessor for SizeConstants.Environment(0);
      v20 = v19[6];
      v21 = &v16[v20];
      v22 = &v17[v20];
      v23 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 32))(v21, v22, v23);
      *(_QWORD *)&v16[v19[7]] = *(_QWORD *)&v17[v19[7]];
      v24 = v19[8];
      v25 = &v16[v24];
      v26 = &v17[v24];
      v25[2] = v26[2];
      *(_WORD *)v25 = *(_WORD *)v26;
      swift_storeEnumTagMultiPayload(v16, v18, 1);
    }
    else
    {
      memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    v27 = a3[7];
    v28 = &a1[v27];
    v29 = &a2[v27];
    sub_B414((uint64_t)&a1[v27], &qword_25F208);
    v30 = sub_5440(&qword_25F208);
    if (swift_getEnumCaseMultiPayload(v29, v30) == 1)
    {
      v31 = type metadata accessor for BlendMode(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v31 - 8) + 32))(v28, v29, v31);
      swift_storeEnumTagMultiPayload(v28, v30, 1);
    }
    else
    {
      memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    }
  }
  v32 = a3[8];
  v33 = &a1[v32];
  v34 = &a2[v32];
  v35 = *(_QWORD *)v34;
  LOBYTE(v34) = v34[8];
  v36 = *(_QWORD *)v33;
  v37 = v33[8];
  *(_QWORD *)v33 = v35;
  v33[8] = (char)v34;
  sub_BE0C(v36, v37);
  v38 = a3[9];
  v39 = &a1[v38];
  v40 = &a2[v38];
  v41 = *(_QWORD *)v40;
  LOBYTE(v40) = v40[8];
  v42 = *(_QWORD *)v39;
  v43 = v39[8];
  *(_QWORD *)v39 = v41;
  v39[8] = (char)v40;
  sub_BE0C(v42, v43);
  v44 = a3[10];
  v45 = &a1[v44];
  v46 = &a2[v44];
  v47 = *(_QWORD *)&a1[v44];
  *(_QWORD *)&a1[v44] = *(_QWORD *)&a2[v44];
  swift_bridgeObjectRelease(v47);
  v48 = *((_QWORD *)v45 + 1);
  *((_QWORD *)v45 + 1) = *((_QWORD *)v46 + 1);
  swift_release(v48);
  v49 = a3[11];
  v50 = &a1[v49];
  v51 = &a2[v49];
  *(_QWORD *)v50 = *(_QWORD *)v51;
  v52 = *((_QWORD *)v50 + 1);
  *((_QWORD *)v50 + 1) = *((_QWORD *)v51 + 1);
  swift_release(v52);
  return a1;
}

uint64_t sub_2AA40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_2AA4C);
}

uint64_t sub_2AA4C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v17;

  v6 = sub_5440(&qword_25F210);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = sub_5440(&qword_25F218);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v13 = a3[5];
LABEL_9:
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = sub_5440(&qword_25F220);
  v12 = *(_QWORD *)(v14 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v14;
    v13 = a3[6];
    goto LABEL_9;
  }
  v15 = sub_5440(&qword_25F228);
  v12 = *(_QWORD *)(v15 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v15;
    v13 = a3[7];
    goto LABEL_9;
  }
  v17 = *(_QWORD *)(a1 + a3[10]);
  if (v17 >= 0xFFFFFFFF)
    LODWORD(v17) = -1;
  return (v17 + 1);
}

uint64_t sub_2AB4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_2AB58);
}

uint64_t sub_2AB58(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;

  v8 = sub_5440(&qword_25F210);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  v13 = sub_5440(&qword_25F218);
  v14 = *(_QWORD *)(v13 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = v13;
    v15 = a4[5];
LABEL_9:
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  v16 = sub_5440(&qword_25F220);
  v14 = *(_QWORD *)(v16 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = v16;
    v15 = a4[6];
    goto LABEL_9;
  }
  result = sub_5440(&qword_25F228);
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v15 = a4[7];
    goto LABEL_9;
  }
  *(_QWORD *)(a1 + a4[10]) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for AverageMonthlyReadingChart(uint64_t a1)
{
  return sub_1FE90(a1, (uint64_t *)&unk_25F288, (uint64_t)&nominal type descriptor for AverageMonthlyReadingChart);
}

void sub_2AC68(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD v10[8];

  sub_2ADCC(319, (unint64_t *)&qword_25F298, type metadata accessor for ColorConstants);
  if (v3 <= 0x3F)
  {
    v10[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_2AD74(319);
    if (v5 <= 0x3F)
    {
      v10[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_2ADCC(319, (unint64_t *)&qword_25F2A8, type metadata accessor for SizeConstants.Spacing);
      if (v7 <= 0x3F)
      {
        v10[2] = *(_QWORD *)(v6 - 8) + 64;
        sub_2ADCC(319, (unint64_t *)&qword_25F2B0, (uint64_t (*)(uint64_t))&type metadata accessor for BlendMode);
        if (v9 <= 0x3F)
        {
          v10[3] = *(_QWORD *)(v8 - 8) + 64;
          v10[4] = "\t";
          v10[5] = "\t";
          v10[6] = &unk_1E1EE8;
          v10[7] = &unk_1E1F00;
          swift_initStructMetadata(a1, 256, 8, v10, a1 + 16);
        }
      }
    }
  }
}

void sub_2AD74(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_25F2A0)
  {
    v2 = sub_7EF8(&qword_25F1F8);
    v3 = type metadata accessor for Environment.Content(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_25F2A0);
  }
}

void sub_2ADCC(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    v5 = a3(255);
    v6 = type metadata accessor for Environment.Content(a1, v5);
    if (!v7)
      atomic_store(v6, a2);
  }
}

uint64_t sub_2AE18(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_22A894, 1);
}

uint64_t sub_2AE2C(uint64_t a1)
{
  return sub_2B4C0(a1, (uint64_t (*)(uint64_t, uint64_t))sub_257EC);
}

unint64_t sub_2AE38()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25F3B0;
  if (!qword_25F3B0)
  {
    v1 = sub_7EF8(&qword_25F398);
    sub_7FD8(&qword_25EF58, &qword_25EF60, (uint64_t)&protocol conformance descriptor for _GeometryActionModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_25F3B0);
  }
  return result;
}

unint64_t sub_2AEBC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25F3F0;
  if (!qword_25F3F0)
  {
    v1 = sub_7EF8(&qword_25F3E0);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ClosedRange<A>, v1);
    atomic_store(result, (unint64_t *)&qword_25F3F0);
  }
  return result;
}

uint64_t sub_2AF18@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_26934(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_2AF20(unint64_t *a1, uint64_t *a2, unint64_t *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v8 = sub_7EF8(a2);
    sub_7FD8(a3, a4, (uint64_t)&protocol conformance descriptor for PlaceholderContentView<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v8);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_2AFA4()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;

  v1 = (int *)type metadata accessor for AverageMonthlyReadingChart(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = (_QWORD *)(v0 + v4);
  v7 = sub_5440(&qword_25F1E8);
  if (swift_getEnumCaseMultiPayload(v0 + v4, v7) == 1)
  {
    v8 = type metadata accessor for ColorScheme(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v0 + v4, v8);
  }
  else
  {
    swift_release(*v6);
  }
  v9 = (_QWORD *)((char *)v6 + v1[5]);
  v10 = sub_5440(&qword_25F1F0);
  if (swift_getEnumCaseMultiPayload(v9, v10) == 1)
  {
    v11 = type metadata accessor for UserInterfaceSizeClass(0);
    v12 = *(_QWORD *)(v11 - 8);
    if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v12 + 48))(v9, 1, v11))
      (*(void (**)(_QWORD *, uint64_t))(v12 + 8))(v9, v11);
  }
  else
  {
    swift_release(*v9);
  }
  v13 = (_QWORD *)((char *)v6 + v1[6]);
  v14 = sub_5440(&qword_25F200);
  if (swift_getEnumCaseMultiPayload(v13, v14) == 1)
  {
    v15 = (char *)v13 + *(int *)(type metadata accessor for SizeConstants.Environment(0) + 24);
    v16 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v15, v16);
  }
  else
  {
    swift_release(*v13);
  }
  v17 = (_QWORD *)((char *)v6 + v1[7]);
  v18 = sub_5440(&qword_25F208);
  if (swift_getEnumCaseMultiPayload(v17, v18) == 1)
  {
    v19 = type metadata accessor for BlendMode(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(v17, v19);
  }
  else
  {
    swift_release(*v17);
  }
  v20 = v3 | 7;
  sub_BE0C(*(_QWORD *)((char *)v6 + v1[8]), *((_BYTE *)v6 + v1[8] + 8));
  sub_BE0C(*(_QWORD *)((char *)v6 + v1[9]), *((_BYTE *)v6 + v1[9] + 8));
  v21 = (_QWORD *)((char *)v6 + v1[10]);
  swift_bridgeObjectRelease(*v21);
  swift_release(v21[1]);
  swift_release(*(_QWORD *)((char *)v6 + v1[11] + 8));
  return swift_deallocObject(v0, v4 + v5, v20);
}

uint64_t sub_2B1C8(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for AverageMonthlyReadingChart(0) - 8) + 80);
  return sub_271F8(a1, a2, v2 + ((v5 + 16) & ~v5));
}

unint64_t sub_2B214()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25F430;
  if (!qword_25F430)
  {
    v1 = sub_7EF8(&qword_25F338);
    sub_2B298();
    sub_7FD8(&qword_25F440, &qword_25F448, (uint64_t)&protocol conformance descriptor for _AnimationModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_25F430);
  }
  return result;
}

unint64_t sub_2B298()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t OpaqueTypeConformance2;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  void *v17;

  result = qword_25F438;
  if (!qword_25F438)
  {
    v1 = sub_7EF8(&qword_25F330);
    v2 = sub_7EF8(&qword_25F320);
    v3 = sub_7EF8(&qword_25F3F8);
    v4 = sub_7EF8(&qword_25F318);
    v12 = sub_7EF8(&qword_25F310);
    v13 = sub_7EF8(&qword_25F3E0);
    v14 = type metadata accessor for PlotDimensionScaleRange(255);
    v15 = sub_7FD8(&qword_25F3E8, &qword_25F310, (uint64_t)&protocol conformance descriptor for Chart<A>);
    v16 = sub_2AEBC();
    v17 = &protocol witness table for PlotDimensionScaleRange;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v12, &opaque type descriptor for <<opaque return type of View.chartXScale<A, B>(domain:range:type:)>>, 1);
    v12 = v4;
    v13 = OpaqueTypeConformance2;
    v6 = swift_getOpaqueTypeConformance2(&v12, &opaque type descriptor for <<opaque return type of View.chartXAxis(_:)>>, 1);
    v7 = sub_7EF8(&qword_25F400);
    v8 = sub_7EF8(&qword_25F408);
    v9 = sub_7FD8(&qword_25F410, &qword_25F400, (uint64_t)&protocol conformance descriptor for AxisMarks<A>);
    v10 = sub_2AF20(&qword_25F418, &qword_25F408, &qword_25F420, &qword_25F428);
    v12 = v7;
    v13 = v8;
    v14 = v9;
    v15 = v10;
    v11 = swift_getOpaqueTypeConformance2(&v12, &opaque type descriptor for <<opaque return type of AxisContent.compositingLayer<A>(style:)>>, 1);
    v12 = v2;
    v13 = v3;
    v14 = v6;
    v15 = v11;
    swift_getOpaqueTypeConformance2(&v12, &opaque type descriptor for <<opaque return type of View.chartYAxis<A>(content:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_25F438);
  }
  return result;
}

uint64_t sub_2B478()
{
  uint64_t v0;

  return sub_273F0(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), 0);
}

uint64_t sub_2B494()
{
  uint64_t v0;

  return sub_273F0(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), 1);
}

uint64_t sub_2B4B4(uint64_t a1)
{
  return sub_2B4C0(a1, (uint64_t (*)(uint64_t, uint64_t))sub_26D30);
}

uint64_t sub_2B4C0(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t))
{
  uint64_t v2;
  uint64_t v4;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for AverageMonthlyReadingChart(0) - 8) + 80);
  return a2(a1, v2 + ((v4 + 16) & ~v4));
}

uint64_t sub_2B51C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_27110(a1, &qword_25F408, &qword_25F428, a2);
}

uint64_t sub_2B544@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return sub_263C4(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_2B54C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_27110(a1, &qword_25F388, &qword_25F3C8, a2);
}

uint64_t sub_2B574(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_release(a1);
  else
    return swift_bridgeObjectRelease(a2);
}

uint64_t sub_2B588(double *a1)
{
  type metadata accessor for AverageMonthlyReadingChart(0);
  return sub_26898(a1);
}

void *sub_2B5C4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t);
  void *result;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t, uint64_t);
  uint64_t v35;

  v2 = type metadata accessor for PageMetrics.InvocationPoint(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v30 - v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (v9)
  {
    sub_5440(&qword_25F4A8);
    v10 = static _SetStorage.allocate(capacity:)(v9);
    v11 = 0;
    v12 = *(unsigned __int8 *)(v3 + 80);
    v31 = v9;
    v32 = a1 + ((v12 + 32) & ~v12);
    v13 = *(_QWORD *)(v3 + 72);
    v34 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    v35 = v10 + 56;
    while (1)
    {
      v33 = v11;
      v34(v8, v32 + v13 * v11, v2);
      v14 = *(_QWORD *)(v10 + 40);
      v15 = sub_6FD0(&qword_25F4B0, (uint64_t (*)(uint64_t))&type metadata accessor for PageMetrics.InvocationPoint, (uint64_t)&protocol conformance descriptor for PageMetrics.InvocationPoint);
      v16 = dispatch thunk of Hashable._rawHashValue(seed:)(v14, v2, v15);
      v17 = ~(-1 << *(_BYTE *)(v10 + 32));
      v18 = v16 & v17;
      v19 = (v16 & (unint64_t)v17) >> 6;
      v20 = *(_QWORD *)(v35 + 8 * v19);
      v21 = 1 << (v16 & v17);
      if ((v21 & v20) != 0)
      {
        do
        {
          v34(v6, *(_QWORD *)(v10 + 48) + v18 * v13, v2);
          v22 = sub_6FD0(&qword_25F4B8, (uint64_t (*)(uint64_t))&type metadata accessor for PageMetrics.InvocationPoint, (uint64_t)&protocol conformance descriptor for PageMetrics.InvocationPoint);
          v23 = dispatch thunk of static Equatable.== infix(_:_:)(v6, v8, v2, v22);
          v24 = v3;
          v25 = *(void (**)(char *, uint64_t))(v3 + 8);
          v25(v6, v2);
          if ((v23 & 1) != 0)
          {
            v25(v8, v2);
            v3 = v24;
            v9 = v31;
            goto LABEL_4;
          }
          v18 = (v18 + 1) & v17;
          v19 = v18 >> 6;
          v20 = *(_QWORD *)(v35 + 8 * (v18 >> 6));
          v21 = 1 << v18;
          v3 = v24;
        }
        while ((v20 & (1 << v18)) != 0);
        v9 = v31;
      }
      *(_QWORD *)(v35 + 8 * v19) = v21 | v20;
      result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v10 + 48) + v18 * v13, v8, v2);
      v27 = *(_QWORD *)(v10 + 16);
      v28 = __OFADD__(v27, 1);
      v29 = v27 + 1;
      if (v28)
        break;
      *(_QWORD *)(v10 + 16) = v29;
LABEL_4:
      v11 = v33 + 1;
      if (v33 + 1 == v9)
        return (void *)v10;
    }
    __break(1u);
  }
  else
  {
    return &_swiftEmptySetSingleton;
  }
  return result;
}

uint64_t sub_2B854()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t OpaqueTypeConformance2;
  uint64_t v3;
  uint64_t v5;
  void *v6;
  unint64_t v7;
  void *v8;

  v0 = sub_7EF8(&qword_25F340);
  v1 = sub_7EF8(&qword_25F2F8);
  v5 = sub_7EF8(&qword_25F338);
  v6 = &type metadata for Bool;
  v7 = sub_2B214();
  v8 = &protocol witness table for Bool;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v5, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
  v3 = sub_7FD8(&qword_25F458, &qword_25F2F8, (uint64_t)&protocol conformance descriptor for PartialRangeThrough<A>);
  v5 = v0;
  v6 = (void *)v1;
  v7 = OpaqueTypeConformance2;
  v8 = (void *)v3;
  return swift_getOpaqueTypeConformance2(&v5, &opaque type descriptor for <<opaque return type of View.dynamicTypeSize<A>(_:)>>, 1);
}

unint64_t static Metrics.defaultTopic.getter()
{
  return 0xD000000000000010;
}

unint64_t static Metrics.defaultPerfTopic.getter()
{
  return 0xD000000000000015;
}

uint64_t sub_2B950()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t result;

  v0 = sub_5440(&qword_25F510);
  v1 = type metadata accessor for MetricsFieldInclusionRequest(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = *(unsigned __int8 *)(v2 + 80);
  v5 = (v4 + 32) & ~v4;
  v6 = swift_allocObject(v0, v5 + 2 * v3, v4 | 7);
  *(_OWORD *)(v6 + 16) = xmmword_1E1CE0;
  v7 = static MetricsFieldInclusionRequest.pageFields.getter();
  static MetricsFieldInclusionRequest.dsId.getter(v7);
  v8 = sub_27BB4(v6);
  swift_setDeallocating(v6);
  swift_arrayDestroy(v6 + v5, 2, v1);
  result = swift_deallocClassInstance(v6, 32, 7);
  qword_25F4F0 = (uint64_t)v8;
  return result;
}

unint64_t sub_2BA10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t result;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v0 = sub_5440(&qword_25F508);
  v1 = sub_5440(&qword_25E0A0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = *(unsigned __int8 *)(v2 + 80);
  v5 = (v4 + 32) & ~v4;
  v44 = v3;
  v6 = swift_allocObject(v0, v5 - v3 + 8 * v3, v4 | 7);
  *(_OWORD *)(v6 + 16) = xmmword_1E2070;
  v45 = v6;
  v7 = v6 + v5;
  v43 = v1;
  v8 = *(int *)(v1 + 48);
  static MetricsEventType.click.getter();
  if (qword_25DB60 != -1)
    swift_once(&qword_25DB60, sub_2B950);
  v9 = qword_25F4F0;
  v10 = sub_5440(&qword_25F510);
  v11 = type metadata accessor for MetricsFieldInclusionRequest(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 72);
  v14 = *(unsigned __int8 *)(v12 + 80);
  v15 = (v14 + 32) & ~v14;
  v41 = v14 | 7;
  v16 = swift_allocObject(v10, v15 + 3 * v13, v14 | 7);
  *(_OWORD *)(v16 + 16) = xmmword_1E0B60;
  v42 = v15;
  v17 = v16 + v15;
  v18 = qword_25DBE0;
  swift_bridgeObjectRetain(v9);
  if (v18 != -1)
    swift_once(&qword_25DBE0, sub_9307C);
  v19 = sub_7120(v11, (uint64_t)qword_2628C8);
  v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16);
  v20(v17, v19, v11);
  if (qword_25DD38 != -1)
    swift_once(&qword_25DD38, sub_1ABFE4);
  v21 = sub_7120(v11, (uint64_t)qword_26AFC0);
  v22 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v20)(v17 + v13, v21, v11);
  static MetricsFieldInclusionRequest.impressionsSnapshot.getter(v22);
  v23 = sub_2C680(v16, v9);
  swift_setDeallocating(v16);
  swift_arrayDestroy(v17, *(_QWORD *)(v16 + 16), v11);
  v24 = swift_deallocClassInstance(v16, 32, 7);
  *(_QWORD *)(v7 + v8) = v23;
  v25 = *(int *)(v43 + 48);
  static MetricsEventType.dialog.getter(v24);
  v26 = qword_25F4F0;
  *(_QWORD *)(v7 + v44 + v25) = qword_25F4F0;
  v40 = *(int *)(v43 + 48);
  v27 = swift_bridgeObjectRetain(v26);
  static MetricsEventType.impressions.getter(v27);
  v28 = swift_allocObject(v10, v42 + v13, v41);
  *(_OWORD *)(v28 + 16) = xmmword_1E0B70;
  v29 = swift_bridgeObjectRetain(v26);
  static MetricsFieldInclusionRequest.impressions.getter(v29);
  v30 = sub_2C680(v28, v26);
  swift_setDeallocating(v28);
  swift_arrayDestroy(v28 + v42, 1, v11);
  v31 = swift_deallocClassInstance(v28, 32, 7);
  *(_QWORD *)(v7 + 2 * v44 + v40) = v30;
  v32 = *(int *)(v43 + 48);
  static MetricsEventType.media.getter(v31);
  *(_QWORD *)(v7 + 3 * v44 + v32) = v26;
  v33 = *(int *)(v43 + 48);
  v34 = swift_bridgeObjectRetain(v26);
  static MetricsEventType.page.getter(v34);
  *(_QWORD *)(v7 + 4 * v44 + v33) = v26;
  v35 = *(int *)(v43 + 48);
  v36 = swift_bridgeObjectRetain(v26);
  static MetricsEventType.pageRender.getter(v36);
  *(_QWORD *)(v7 + 5 * v44 + v35) = v26;
  v37 = *(int *)(v43 + 48);
  v38 = swift_bridgeObjectRetain(v26);
  static MetricsEventType.search.getter(v38);
  *(_QWORD *)(v7 + 6 * v44 + v37) = v26;
  swift_bridgeObjectRetain(v26);
  result = sub_8DEC(v45);
  qword_288CD0 = result;
  return result;
}

unint64_t sub_2BD7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t result;

  v0 = sub_5440(&qword_25F500);
  v1 = sub_5440(&qword_25E080);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = *(unsigned __int8 *)(v2 + 80);
  v5 = (v4 + 32) & ~v4;
  v6 = swift_allocObject(v0, v5 - v3 + 8 * v3, v4 | 7);
  *(_OWORD *)(v6 + 16) = xmmword_1E2070;
  v7 = v6 + v5;
  v8 = *(int *)(v1 + 48);
  v9 = static MetricsEventType.click.getter();
  *(_QWORD *)(v7 + v8) = &_swiftEmptySetSingleton;
  v10 = *(int *)(v1 + 48);
  v11 = static MetricsEventType.dialog.getter(v9);
  *(_QWORD *)(v7 + v3 + v10) = &_swiftEmptySetSingleton;
  v12 = *(int *)(v1 + 48);
  v13 = static MetricsEventType.impressions.getter(v11);
  *(_QWORD *)(v7 + 2 * v3 + v12) = &_swiftEmptySetSingleton;
  v14 = *(int *)(v1 + 48);
  v15 = static MetricsEventType.media.getter(v13);
  *(_QWORD *)(v7 + 3 * v3 + v14) = &_swiftEmptySetSingleton;
  v16 = *(int *)(v1 + 48);
  v17 = static MetricsEventType.page.getter(v15);
  *(_QWORD *)(v7 + 4 * v3 + v16) = &_swiftEmptySetSingleton;
  v18 = *(int *)(v1 + 48);
  v19 = static MetricsEventType.pageRender.getter(v17);
  *(_QWORD *)(v7 + 5 * v3 + v18) = &_swiftEmptySetSingleton;
  v20 = *(int *)(v1 + 48);
  static MetricsEventType.search.getter(v19);
  *(_QWORD *)(v7 + 6 * v3 + v20) = &_swiftEmptySetSingleton;
  result = sub_8E00(v6);
  qword_288CD8 = result;
  return result;
}

uint64_t sub_2BEBC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v0 = type metadata accessor for MetricsData.Configuration(0);
  sub_73A0(v0, qword_288CE0);
  sub_7120(v0, (uint64_t)qword_288CE0);
  if (qword_25DB68 != -1)
    swift_once(&qword_25DB68, sub_2BA10);
  v1 = qword_288CD0;
  v2 = qword_25DB70;
  swift_bridgeObjectRetain(qword_288CD0);
  if (v2 != -1)
    swift_once(&qword_25DB70, sub_2BD7C);
  v3 = qword_288CD8;
  swift_bridgeObjectRetain(qword_288CD8);
  return MetricsData.Configuration.init(defaultTopic:defaultIncludingFields:defaultExcludingFields:shouldFlush:)(0xD000000000000010, 0x80000000001F9950, v1, v3, 0, 0);
}

BooksUI::Metrics::IdType_optional __swiftcall Metrics.IdType.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  Swift::Int v5;
  BooksUI::Metrics::IdType_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_2495F0, v3);
  result.value = swift_bridgeObjectRelease(object);
  if (v5 == 1)
    v7 = 1;
  else
    v7 = 2;
  if (!v5)
    v7 = 0;
  *v4 = v7;
  return result;
}

uint64_t Metrics.IdType.rawValue.getter()
{
  _BYTE *v0;

  if (*v0)
    return 0x69746E6575716573;
  else
    return 0x64695F737469;
}

uint64_t sub_2C044(char *a1, char *a2)
{
  return sub_C5CC4(*a1, *a2);
}

Swift::Int sub_2C050()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5, 0);
  if (v1)
    v2 = 0x69746E6575716573;
  else
    v2 = 0x64695F737469;
  if (v1)
    v3 = 0xEA00000000006C61;
  else
    v3 = 0xE600000000000000;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_2C0D0(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  if (*v1)
    v2 = 0x69746E6575716573;
  else
    v2 = 0x64695F737469;
  if (*v1)
    v3 = 0xEA00000000006C61;
  else
    v3 = 0xE600000000000000;
  String.hash(into:)(a1, v2, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_2C12C(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD v6[9];

  v2 = *v1;
  Hasher.init(_seed:)(v6, a1);
  if (v2)
    v3 = 0x69746E6575716573;
  else
    v3 = 0x64695F737469;
  if (v2)
    v4 = 0xEA00000000006C61;
  else
    v4 = 0xE600000000000000;
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

BooksUI::Metrics::IdType_optional sub_2C1A8(Swift::String *a1)
{
  return Metrics.IdType.init(rawValue:)(*a1);
}

void sub_2C1B4(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 0x64695F737469;
  if (*v1)
    v2 = 0x69746E6575716573;
  v3 = 0xE600000000000000;
  if (*v1)
    v3 = 0xEA00000000006C61;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t static Metrics.Keys.eventType.getter()
{
  return 0x707954746E657665;
}

uint64_t static Metrics.Keys.pageContext.getter()
{
  return 0x746E6F4365676170;
}

uint64_t static Metrics.Keys.pageId.getter()
{
  return 0x644965676170;
}

uint64_t static Metrics.Keys.pageType.getter()
{
  return 0x6570795465676170;
}

uint64_t static Metrics.Keys.actionType.getter()
{
  return 0x79546E6F69746361;
}

uint64_t static Metrics.Keys.targetID.getter()
{
  return 0x6449746567726174;
}

uint64_t static Metrics.Keys.actionContext.getter()
{
  return 0x6F436E6F69746361;
}

uint64_t static Metrics.Keys.actionDetails.getter()
{
  return 0x65446E6F69746361;
}

uint64_t static Metrics.Keys.actionUrl.getter()
{
  return 0x72556E6F69746361;
}

uint64_t static Metrics.Keys.buyParams.getter()
{
  return 0x6D61726150797562;
}

uint64_t static Metrics.Keys.isUPP.getter()
{
  return 0x5050557369;
}

uint64_t static Metrics.Keys.location.getter()
{
  return 0x6E6F697461636F6CLL;
}

unint64_t static Metrics.Keys.locationPosition.getter()
{
  return 0xD000000000000010;
}

uint64_t static Metrics.Keys.rating.getter()
{
  return 0x676E69746172;
}

uint64_t static Metrics.Keys.dialogType.getter()
{
  return 0x7954676F6C616964;
}

uint64_t static Metrics.Keys.message.getter()
{
  return 0x6567617373656DLL;
}

uint64_t static Metrics.Keys.options.getter()
{
  return 0x736E6F6974706FLL;
}

uint64_t static Metrics.Keys.responseTime.getter()
{
  return 0x65736E6F70736572;
}

uint64_t static Metrics.Keys.result.getter()
{
  return 0x746C75736572;
}

uint64_t static Metrics.Keys.title.getter()
{
  return 0x656C746974;
}

uint64_t static Metrics.Keys.userActions.getter()
{
  return 0x6974634172657375;
}

uint64_t static Metrics.Keys.impressionIndex.getter()
{
  return 0x6973736572706D69;
}

uint64_t static Metrics.Keys.navigation.getter()
{
  return 0x697461676976616ELL;
}

uint64_t static Metrics.Values.buyPill.getter()
{
  return 0x6C6C6950797562;
}

uint64_t static Metrics.Values.audiobooksKind.getter()
{
  return 0x6F6F626F69647561;
}

uint64_t static Metrics.Values.booksKind.getter()
{
  return 0x6B6F6F6265;
}

uint64_t static Metrics.Values.mangaKind.getter()
{
  return 0x61676E616DLL;
}

uint64_t static Metrics.Values.sgNarratorType.getter()
{
  return 0x696F56736B6F6F42;
}

uint64_t static Metrics.Values.seriesKind.getter()
{
  return 0x736569726573;
}

uint64_t static Metrics.contentKind(for:)(uint64_t a1)
{
  if ((static AssetType.== infix(_:_:)(a1, 0) & 1) != 0)
    return 0x6F6F626F69647561;
  else
    return 0x6B6F6F6265;
}

unint64_t sub_2C540()
{
  unint64_t result;

  result = qword_25F4F8;
  if (!qword_25F4F8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Metrics.IdType, &type metadata for Metrics.IdType);
    atomic_store(result, (unint64_t *)&qword_25F4F8);
  }
  return result;
}

ValueMetadata *type metadata accessor for Metrics()
{
  return &type metadata for Metrics;
}

uint64_t storeEnumTagSinglePayload for Metrics.IdType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_2C5E0 + 4 * byte_1E2085[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_2C614 + 4 * byte_1E2080[v4]))();
}

uint64_t sub_2C614(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2C61C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2C624);
  return result;
}

uint64_t sub_2C630(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2C638);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_2C63C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2C644(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Metrics.IdType()
{
  return &type metadata for Metrics.IdType;
}

ValueMetadata *type metadata accessor for Metrics.Keys()
{
  return &type metadata for Metrics.Keys;
}

ValueMetadata *type metadata accessor for Metrics.Values()
{
  return &type metadata for Metrics.Values;
}

uint64_t sub_2C680(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;

  v4 = type metadata accessor for MetricsFieldInclusionRequest(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v16 - v9;
  v17 = a2;
  v11 = *(_QWORD *)(a1 + 16);
  if (v11)
  {
    v12 = a1 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    v13 = *(_QWORD *)(v5 + 72);
    v14 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    do
    {
      v14(v8, v12, v4);
      sub_ED1B8((uint64_t)v10, v8);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
      v12 += v13;
      --v11;
    }
    while (v11);
    return v17;
  }
  return a2;
}

uint64_t ListItemAccessoryBuyButton.init(assetInfo:)@<X0>(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = swift_getKeyPath(&unk_1E2160);
  *(_BYTE *)(a2 + 8) = 0;
  return sub_AC68(a1, a2 + 16);
}

uint64_t ListItemAccessoryBuyButton.content(contextActionMenuView:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  __int128 v4[2];

  sub_BD00(v1 + 16, (uint64_t)v4);
  *(_QWORD *)a1 = swift_getKeyPath(&unk_1E2188);
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 51) = 0u;
  *(_QWORD *)(a1 + 72) = swift_getKeyPath(&unk_1E2160);
  *(_BYTE *)(a1 + 80) = 0;
  result = sub_AC68(v4, a1 + 88);
  *(_BYTE *)(a1 + 128) = 0;
  return result;
}

uint64_t sub_2C838(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return static DynamicProperty._makeProperty<A>(in:container:fieldOffset:inputs:)(a1, a2, a3, a4, a6, a5);
}

_QWORD *sub_2C850@<X0>(_BYTE *a1@<X8>)
{
  unint64_t v2;
  _QWORD *result;
  uint64_t v4;

  v2 = sub_2CBE0();
  result = EnvironmentValues.subscript.getter(&v4, &type metadata for IsInVibrantContextKey, &type metadata for IsInVibrantContextKey, v2);
  *a1 = v4;
  return result;
}

_QWORD *sub_2C89C@<X0>(_BYTE *a1@<X8>)
{
  unint64_t v2;
  _QWORD *result;
  uint64_t v4;

  v2 = sub_2CBE0();
  result = EnvironmentValues.subscript.getter(&v4, &type metadata for IsInVibrantContextKey, &type metadata for IsInVibrantContextKey, v2);
  *a1 = v4;
  return result;
}

uint64_t sub_2C8E8(char *a1)
{
  unint64_t v1;
  char v3;

  v3 = *a1;
  v1 = sub_2CBE0();
  return EnvironmentValues.subscript.setter(&v3, &type metadata for IsInVibrantContextKey, &type metadata for IsInVibrantContextKey, v1);
}

uint64_t sub_2C930(char *a1)
{
  unint64_t v1;
  char v3;

  v3 = *a1;
  v1 = sub_2CBE0();
  return EnvironmentValues.subscript.setter(&v3, &type metadata for IsInVibrantContextKey, &type metadata for IsInVibrantContextKey, v1);
}

uint64_t sub_2C97C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &opaque type descriptor for <<opaque return type of ListItemAccessoryBuyButton.content(contextActionMenuView:)>>, 1);
}

uint64_t destroy for ListItemAccessoryBuyButton(uint64_t a1)
{
  sub_BE0C(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
  return _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)(a1 + 16));
}

uint64_t initializeWithCopy for ListItemAccessoryBuyButton(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  __int128 v6;

  v4 = *(_QWORD *)a2;
  v5 = *(_BYTE *)(a2 + 8);
  sub_F9E4(*(_QWORD *)a2, v5);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v5;
  v6 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 40) = v6;
  (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1 + 16, a2 + 16);
  return a1;
}

uint64_t assignWithCopy for ListItemAccessoryBuyButton(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;

  v4 = *(_QWORD *)a2;
  v5 = *(_BYTE *)(a2 + 8);
  sub_F9E4(*(_QWORD *)a2, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v5;
  sub_BE0C(v6, v7);
  sub_142F8((_QWORD *)(a1 + 16), (_QWORD *)(a2 + 16));
  return a1;
}

__n128 initializeWithTake for CoverViewModel.AccessibilityCoverProperties(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for ListItemAccessoryBuyButton(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  __int128 v8;

  v4 = *a2;
  v5 = *((_BYTE *)a2 + 8);
  v6 = *(_QWORD *)a1;
  v7 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v5;
  sub_BE0C(v6, v7);
  _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)(a1 + 16));
  v8 = *((_OWORD *)a2 + 2);
  *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
  *(_OWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 48) = a2[6];
  return a1;
}

uint64_t getEnumTagSinglePayload for ListItemAccessoryBuyButton(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 56))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ListItemAccessoryBuyButton(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 40) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 56) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ListItemAccessoryBuyButton()
{
  return &type metadata for ListItemAccessoryBuyButton;
}

unint64_t sub_2CB9C()
{
  unint64_t result;

  result = qword_25F538;
  if (!qword_25F538)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ListItemAccessoryBuyButtonView, &type metadata for ListItemAccessoryBuyButtonView);
    atomic_store(result, (unint64_t *)&qword_25F538);
  }
  return result;
}

unint64_t sub_2CBE0()
{
  unint64_t result;

  result = qword_25F540;
  if (!qword_25F540)
  {
    result = swift_getWitnessTable(&unk_1F8D48, &type metadata for IsInVibrantContextKey);
    atomic_store(result, (unint64_t *)&qword_25F540);
  }
  return result;
}

__n128 ListItemThumbnailView.init(_:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __n128 result;
  __int128 v10;

  v4 = type metadata accessor for ListItemThumbnailView(0);
  v5 = (_QWORD *)(a2 + *(int *)(v4 + 20));
  *v5 = swift_getKeyPath(&unk_1E2230);
  v6 = sub_5440(&qword_25F548);
  swift_storeEnumTagMultiPayload(v5, v6, 0);
  v7 = a2 + *(int *)(v4 + 24);
  *(_QWORD *)v7 = swift_getKeyPath(&unk_1E2258);
  *(_BYTE *)(v7 + 8) = 0;
  *(_WORD *)(a2 + 64) = *(_WORD *)(a1 + 64);
  v8 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 48) = v8;
  result = *(__n128 *)a1;
  v10 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v10;
  return result;
}

uint64_t type metadata accessor for ListItemThumbnailView(uint64_t a1)
{
  uint64_t result;

  result = qword_25F5B8;
  if (!qword_25F5B8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ListItemThumbnailView);
  return result;
}

uint64_t ListItemThumbnailView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;

  *(_QWORD *)a2 = static VerticalAlignment.center.getter(a1);
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 1;
  v4 = sub_5440(&qword_25F550);
  return sub_2CD44(v2, a2 + *(int *)(v4 + 44));
}

uint64_t sub_2CD44@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  __int128 *v41;
  uint64_t v42;
  unsigned __int8 v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  char v49;
  uint64_t v50;
  unsigned __int8 v51;
  uint64_t v52;
  uint64_t v53;
  int *v54;
  _QWORD *v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  uint64_t v71;
  uint64_t v72;
  double v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _OWORD *v78;
  __int128 v79;
  double v80;
  double v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  BOOL v97;
  int v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  double v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  _OWORD *v110;
  __int128 v111;
  double v112;
  double *v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  void (*v117)(char *, uint64_t, uint64_t);
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  double v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  double v128;
  uint64_t v129;
  uint64_t v130;
  __int128 v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t *v136;
  _QWORD *v137;
  uint64_t v138;
  uint64_t *v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  double v150;
  double v151;
  double v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  _OWORD *v161;
  __int128 v162;
  uint64_t v163;
  unint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  unint64_t v168;
  uint64_t v169;
  uint64_t *v170;
  double v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  _OWORD *v175;
  __int128 v176;
  double v177;
  double v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  unint64_t v183;
  unint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  unint64_t v189;
  uint64_t v190;
  uint64_t v191;
  double v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  _OWORD *v197;
  __int128 v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  double v204;
  unint64_t v205;
  unint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  unint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  unint64_t v223;
  unint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  unint64_t v233;
  unint64_t v234;
  uint64_t v235;
  char *v236;
  uint64_t v237;
  uint64_t v238;
  char *v239;
  uint64_t v240;
  char *v241;
  uint64_t v242;
  char *v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  double *v250;
  char *v251;
  char *v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  char *v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  char *v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  char *v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  _QWORD *v280;
  uint64_t v281;
  uint64_t v282;
  char v283;
  __int128 v284;
  __int128 v285;
  uint64_t v286;
  double v287;
  uint64_t v288;
  char v289;
  __int128 v290;
  __int128 v291;
  __int128 v292;
  __int128 v293;
  __int128 v294;
  __int128 v295;
  __int128 v296;
  __int128 v297;
  __int128 v298;
  __int128 v299;
  uint64_t v300;
  _BYTE v301[40];
  __int128 v302[2];
  uint64_t v303;
  unsigned __int8 v304;
  uint64_t v305;
  unsigned __int8 v306;
  char v307;
  _BYTE v308[80];

  v281 = a2;
  v282 = a1;
  v279 = sub_5440(&qword_25F610);
  __chkstk_darwin(v279);
  v280 = (uint64_t *)((char *)&v235 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  v267 = sub_5440(&qword_25F618);
  __chkstk_darwin(v267);
  v269 = (uint64_t)&v235 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v276 = sub_5440(&qword_25F620);
  __chkstk_darwin(v276);
  v270 = (char *)&v235 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v268 = sub_5440(&qword_25F628);
  v5 = __chkstk_darwin(v268);
  v259 = (uint64_t)&v235 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v260 = (uint64_t)&v235 - v7;
  v246 = sub_5440(&qword_25F630);
  __chkstk_darwin(v246);
  v248 = (uint64_t)&v235 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v266 = sub_5440(&qword_25F638);
  v9 = __chkstk_darwin(v266);
  v247 = (uint64_t)&v235 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v249 = (uint64_t)&v235 - v11;
  v253 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v253);
  v250 = (double *)((char *)&v235 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v245 = sub_5440(&qword_25F640);
  __chkstk_darwin(v245);
  v254 = (uint64_t)&v235 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v261 = sub_5440(&qword_25F648);
  __chkstk_darwin(v261);
  v251 = (char *)&v235 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v262 = sub_5440(&qword_25F650);
  __chkstk_darwin(v262);
  v264 = (uint64_t)&v235 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v256 = sub_5440(&qword_25F658);
  __chkstk_darwin(v256);
  v257 = (uint64_t)&v235 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v263 = sub_5440(&qword_25F660);
  __chkstk_darwin(v263);
  v258 = (char *)&v235 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v272 = sub_5440(&qword_25F668);
  __chkstk_darwin(v272);
  v273 = (uint64_t)&v235 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v255 = sub_5440(&qword_25F670);
  v19 = __chkstk_darwin(v255);
  v244 = (uint64_t)&v235 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v278 = (uint64_t)&v235 - v21;
  v271 = sub_5440(&qword_25F678);
  __chkstk_darwin(v271);
  v265 = (char *)&v235 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v274 = sub_5440(&qword_25F680);
  __chkstk_darwin(v274);
  v275 = (uint64_t)&v235 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = sub_5440(&qword_25F688);
  __chkstk_darwin(v24);
  v26 = (char *)&v235 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = sub_5440(&qword_25F690);
  __chkstk_darwin(v27);
  v29 = (char *)&v235 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = sub_5440(&qword_25F698);
  __chkstk_darwin(v30);
  v32 = (char *)&v235 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = sub_5440(&qword_25F6A0);
  __chkstk_darwin(v33);
  v35 = (char *)&v235 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v277 = type metadata accessor for CoverView(0);
  __chkstk_darwin(v277);
  v37 = (char *)&v235 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2F4C8(v282, (uint64_t)v308);
  sub_2F504((uint64_t)v308, (uint64_t)v302);
  if ((v307 & 1) == 0)
  {
    v236 = v32;
    v237 = v24;
    v238 = v30;
    v239 = v29;
    v252 = v26;
    v240 = v27;
    v241 = v35;
    v242 = v33;
    v243 = v37;
    v42 = v303;
    v43 = v304;
    v44 = v305;
    v45 = v306;
    sub_AC68(v302, (uint64_t)v301);
    v46 = v282 + *(int *)(type metadata accessor for ListItemThumbnailView(0) + 24);
    v47 = *(_QWORD *)v46;
    v48 = *(_BYTE *)(v46 + 8);
    sub_F9E4(*(_QWORD *)v46, v48);
    v49 = sub_30DB4(v47, v48);
    sub_BE0C(v47, v48);
    if (v49 & 1 | (v45 == 255))
      v50 = v42;
    else
      v50 = v44;
    if (v49 & 1 | (v45 == 255))
      v51 = v43;
    else
      v51 = v45;
    v52 = (uint64_t)v243;
    sub_BD00((uint64_t)v301, (uint64_t)&v284);
    v287 = sub_2E37C();
    v288 = v53;
    v289 = 0;
    CoverViewModel.init(style:)((uint64_t)&v284, (uint64_t)&v290);
    *(_QWORD *)v52 = swift_getKeyPath(&unk_1E2318);
    *(_BYTE *)(v52 + 40) = 0;
    *(_QWORD *)(v52 + 48) = swift_getKeyPath(&unk_1E2340);
    *(_BYTE *)(v52 + 56) = 0;
    v54 = (int *)v277;
    v55 = (_QWORD *)(v52 + *(int *)(v277 + 24));
    *v55 = swift_getKeyPath(&unk_1E2370);
    v56 = sub_5440(&qword_25F1E8);
    swift_storeEnumTagMultiPayload(v55, v56, 0);
    v57 = (_QWORD *)(v52 + v54[7]);
    *v57 = swift_getKeyPath(&unk_1E2398);
    v58 = sub_5440(&qword_25F758);
    swift_storeEnumTagMultiPayload(v57, v58, 0);
    v59 = (_QWORD *)(v52 + v54[8]);
    v60 = type metadata accessor for ProfileRestrictions(0);
    v61 = sub_6FD0((unint64_t *)&qword_26AF00, type metadata accessor for ProfileRestrictions, (uint64_t)&protocol conformance descriptor for ProfileRestrictions);
    *v59 = EnvironmentObject.init()(v60, v61);
    v59[1] = v62;
    v63 = v52 + v54[9];
    v283 = 1;
    State.init(wrappedValue:)(&v284, &v283, &type metadata for Bool);
    v64 = *((_QWORD *)&v284 + 1);
    *(_BYTE *)v63 = v284;
    *(_QWORD *)(v63 + 8) = v64;
    v65 = v52 + v54[10];
    v66 = v299;
    *(_OWORD *)(v65 + 128) = v298;
    *(_OWORD *)(v65 + 144) = v66;
    *(_QWORD *)(v65 + 160) = v300;
    v67 = v295;
    *(_OWORD *)(v65 + 64) = v294;
    *(_OWORD *)(v65 + 80) = v67;
    v68 = v297;
    *(_OWORD *)(v65 + 96) = v296;
    *(_OWORD *)(v65 + 112) = v68;
    v69 = v291;
    *(_OWORD *)v65 = v290;
    *(_OWORD *)(v65 + 16) = v69;
    v70 = v293;
    *(_OWORD *)(v65 + 32) = v292;
    *(_OWORD *)(v65 + 48) = v70;
    *(_BYTE *)(v52 + v54[11]) = 1;
    if (v51 < 2u)
    {
      v98 = v50;
      v97 = v50 == 0;
      v99 = v239;
      v100 = v271;
      v101 = (uint64_t)v252;
      v102 = v278;
      if (v97)
      {
        v171 = sub_2E37C();
        v172 = _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0();
        _FrameLayout.init(width:height:alignment:)(&v290, *(_QWORD *)&v171, 0, 0, 1, v172, v173);
        v174 = v273;
        sub_1E428(v52, v273, type metadata accessor for CoverView);
        v175 = (_OWORD *)(v174 + *(int *)(v272 + 36));
        v176 = v291;
        *v175 = v290;
        v175[1] = v176;
        v175[2] = v292;
        sub_2E37C();
        v178 = v177;
        v179 = _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0();
        v180 = v244;
        sub_86FE0(0.0, 1, 0.0, 1, 0.0, 1, 0.0, 1, v244, 0.0, 1, v178, 0, v179, v181);
        sub_B414(v174, &qword_25F668);
        sub_167A4(v180, v102, &qword_25F670);
        v182 = v257;
        sub_B3D0(v102, v257, &qword_25F670);
        swift_storeEnumTagMultiPayload(v182, v256, 0);
        v183 = sub_2F678();
        v184 = sub_2F778();
        v185 = (uint64_t)v99;
        v186 = (uint64_t)v258;
        _ConditionalContent<>.init(storage:)(v182, v255, v261, v183, v184);
        v187 = v264;
        sub_B3D0(v186, v264, &qword_25F660);
        swift_storeEnumTagMultiPayload(v187, v262, 0);
        v188 = sub_2F5E4();
        v189 = sub_2F8BC();
        v148 = (uint64_t)v265;
        _ConditionalContent<>.init(storage:)(v187, v263, v266, v188, v189);
        v190 = v186;
        v125 = v185;
        sub_B414(v190, &qword_25F660);
        sub_B414(v278, &qword_25F670);
        v191 = v275;
      }
      else
      {
        v104 = v272;
        v103 = v273;
        if (v98 == 1)
        {
          v105 = sub_2E37C();
          sub_2E37C();
          v107 = v106;
          v108 = _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0();
          _FrameLayout.init(width:height:alignment:)(&v290, *(_QWORD *)&v105, 0, v107, 0, v108, v109);
          sub_1E428(v52, v103, type metadata accessor for CoverView);
          v110 = (_OWORD *)(v103 + *(int *)(v104 + 36));
          v111 = v291;
          *v110 = v290;
          v110[1] = v111;
          v110[2] = v292;
          v112 = sub_2E718();
          v113 = v250;
          v114 = (char *)v250 + *(int *)(v253 + 20);
          v115 = enum case for RoundedCornerStyle.continuous(_:);
          LODWORD(v272) = enum case for RoundedCornerStyle.continuous(_:);
          v116 = type metadata accessor for RoundedCornerStyle(0);
          v117 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v116 - 8) + 104);
          v117(v114, v115, v116);
          *v113 = v112;
          v113[1] = v112;
          v118 = v254;
          v119 = v254 + *(int *)(v245 + 36);
          sub_1E428((uint64_t)v113, v119, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
          *(_WORD *)(v119 + *(int *)(sub_5440(&qword_25F700) + 36)) = 256;
          sub_B3D0(v103, v118, &qword_25F668);
          sub_224DC((uint64_t)v113, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
          sub_B414(v103, &qword_25F668);
          v120 = _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0();
          v277 = v121;
          v278 = v120;
          v122 = (uint64_t)v251;
          v123 = (uint64_t)&v251[*(int *)(v261 + 36)];
          v124 = sub_2E718();
          v117((char *)v113 + *(int *)(v253 + 20), v272, v116);
          v125 = (uint64_t)v239;
          *v113 = v124;
          v113[1] = v124;
          v126 = _s7BooksUI14ColorConstantsV14vibrantPrimary05SwiftB00C0Vvg_0();
          v127 = Color.opacity(_:)(0.08);
          swift_release(v126);
          StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)(&v284, 0, 0, &_swiftEmptyArrayStorage, 1.0, 10.0, 0.0);
          sub_1E428((uint64_t)v113, v123, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
          v128 = *(double *)&v284 * 0.5;
          v129 = v123 + *(int *)(sub_5440(&qword_25F760) + 68);
          sub_1E428((uint64_t)v113, v129, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
          *(double *)(v129 + *(int *)(type metadata accessor for RoundedRectangle._Inset(0) + 20)) = v128;
          v130 = v129 + *(int *)(sub_5440(&qword_25F768) + 36);
          v131 = v285;
          *(_OWORD *)v130 = v284;
          *(_OWORD *)(v130 + 16) = v131;
          *(_QWORD *)(v130 + 32) = v286;
          v132 = sub_5440(&qword_25F770);
          *(_QWORD *)(v129 + *(int *)(v132 + 52)) = v127;
          *(_WORD *)(v129 + *(int *)(v132 + 56)) = 256;
          v133 = _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0();
          v135 = v134;
          v136 = (uint64_t *)(v129 + *(int *)(sub_5440(&qword_25F778) + 36));
          *v136 = v133;
          v136[1] = v135;
          sub_224DC((uint64_t)v113, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
          v137 = (_QWORD *)(v123 + *(int *)(sub_5440(&qword_25F710) + 36));
          v138 = v277;
          *v137 = v278;
          v137[1] = v138;
          sub_167A4(v254, v122, &qword_25F640);
          v139 = &qword_25F648;
          v140 = v122;
          v141 = v257;
          sub_B3D0(v122, v257, &qword_25F648);
          swift_storeEnumTagMultiPayload(v141, v256, 1);
          v142 = sub_2F678();
          v143 = sub_2F778();
          v144 = (uint64_t)v258;
          _ConditionalContent<>.init(storage:)(v141, v255, v261, v142, v143);
          v145 = v264;
          sub_B3D0(v144, v264, &qword_25F660);
          swift_storeEnumTagMultiPayload(v145, v262, 0);
          v146 = sub_2F5E4();
          v147 = sub_2F8BC();
          v148 = (uint64_t)v265;
          _ConditionalContent<>.init(storage:)(v145, v263, v266, v146, v147);
          sub_B414(v144, &qword_25F660);
          v149 = v140;
        }
        else
        {
          v192 = sub_2E37C();
          sub_2E37C();
          v194 = v193;
          v195 = _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0();
          _FrameLayout.init(width:height:alignment:)(&v290, *(_QWORD *)&v192, 0, v194, 0, v195, v196);
          sub_1E428(v52, v103, type metadata accessor for CoverView);
          v197 = (_OWORD *)(v103 + *(int *)(v104 + 36));
          v198 = v291;
          *v197 = v290;
          v197[1] = v198;
          v197[2] = v292;
          v199 = v248;
          sub_B3D0(v103, v248, &qword_25F668);
          *(_WORD *)(v199 + *(int *)(v246 + 36)) = 256;
          sub_B414(v103, &qword_25F668);
          v200 = _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0();
          v282 = v201;
          v202 = _s7BooksUI14ColorConstantsV14vibrantPrimary05SwiftB00C0Vvg_0();
          v203 = Color.opacity(_:)(0.08);
          swift_release(v202);
          StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)(&v284, 0, 0, &_swiftEmptyArrayStorage, 1.0, 10.0, 0.0);
          *(_QWORD *)&v204 = v284;
          v205 = *((_QWORD *)&v285 + 1);
          v206 = v285;
          v207 = v286;
          v208 = _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0();
          v210 = v209;
          v211 = v247;
          sub_B3D0(v199, v247, &qword_25F630);
          v212 = v266;
          v213 = v211 + *(int *)(v266 + 36);
          *(double *)v213 = v204 * 0.5;
          *(_OWORD *)(v213 + 8) = __PAIR128__(*((unint64_t *)&v284 + 1), *(unint64_t *)&v204);
          *(_OWORD *)(v213 + 24) = __PAIR128__(v205, v206);
          v52 = (uint64_t)v243;
          *(_QWORD *)(v213 + 40) = v207;
          *(_QWORD *)(v213 + 48) = v203;
          *(_WORD *)(v213 + 56) = 256;
          *(_QWORD *)(v213 + 64) = v208;
          *(_QWORD *)(v213 + 72) = v210;
          v214 = v282;
          *(_QWORD *)(v213 + 80) = v200;
          *(_QWORD *)(v213 + 88) = v214;
          v215 = v199;
          v125 = (uint64_t)v239;
          sub_B414(v215, &qword_25F630);
          v139 = &qword_25F638;
          v216 = v249;
          sub_167A4(v211, v249, &qword_25F638);
          v217 = v264;
          sub_B3D0(v216, v264, &qword_25F638);
          swift_storeEnumTagMultiPayload(v217, v262, 1);
          v218 = sub_2F5E4();
          v219 = sub_2F8BC();
          v220 = v212;
          v148 = (uint64_t)v265;
          _ConditionalContent<>.init(storage:)(v217, v263, v220, v218, v219);
          v149 = v216;
        }
        sub_B414(v149, v139);
        v191 = v275;
        v100 = v271;
        v101 = (uint64_t)v252;
      }
      v86 = &qword_25F678;
      sub_B3D0(v148, v101, &qword_25F678);
      swift_storeEnumTagMultiPayload(v101, v237, 1);
      v221 = sub_2F6FC(&qword_25F6B8, &qword_25F698);
      v222 = sub_2F608(&qword_25F6C8, &qword_25F678, (void (*)(void))sub_2F5E4, (void (*)(void))sub_2F8BC);
      _ConditionalContent<>.init(storage:)(v101, v238, v100, v221, v222);
      sub_B3D0(v125, v191, &qword_25F690);
      swift_storeEnumTagMultiPayload(v191, v274, 0);
      v223 = sub_2F540();
      v224 = sub_2F960();
      v95 = (uint64_t)v241;
      _ConditionalContent<>.init(storage:)(v191, v240, v276, v223, v224);
      sub_B414(v125, &qword_25F690);
      v96 = v148;
    }
    else
    {
      v71 = (uint64_t)v252;
      v72 = v278;
      if (v51 - 2 >= 2)
      {
        v150 = sub_2E37C();
        sub_2E37C();
        v152 = v151;
        v153 = _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0();
        v155 = v242;
        v156 = v274;
        v157 = v275;
        v158 = (uint64_t)v236;
        if (v50)
        {
          _FrameLayout.init(width:height:alignment:)(&v290, *(_QWORD *)&v150, 0, *(_QWORD *)&v152, 0, v153, v154);
          v159 = v273;
          sub_1E428(v52, v273, type metadata accessor for CoverView);
          v160 = v272;
          v161 = (_OWORD *)(v159 + *(int *)(v272 + 36));
          v162 = v291;
          *v161 = v290;
          v161[1] = v162;
          v161[2] = v292;
          v163 = v269;
          sub_B3D0(v159, v269, &qword_25F668);
          swift_storeEnumTagMultiPayload(v163, v267, 1);
          v164 = sub_2F9E4();
          v165 = sub_2F6FC((unint64_t *)&qword_25F6E0, &qword_25F668);
          v166 = (uint64_t)v270;
          _ConditionalContent<>.init(storage:)(v163, v268, v160, v164, v165);
          sub_B3D0(v166, v157, &qword_25F620);
          swift_storeEnumTagMultiPayload(v157, v156, 1);
          v167 = sub_2F540();
          v168 = sub_2F960();
          v95 = (uint64_t)v241;
          _ConditionalContent<>.init(storage:)(v157, v240, v276, v167, v168);
          sub_B414(v166, &qword_25F620);
          v169 = v159;
          v170 = &qword_25F668;
        }
        else
        {
          sub_86F7C(0.0, 1, 0.0, 1, v150, 0, 0.0, 1, (uint64_t)v236, 0.0, 1, v152, 0, v153, v154);
          sub_B3D0(v158, v71, &qword_25F698);
          swift_storeEnumTagMultiPayload(v71, v237, 0);
          v229 = v158;
          v230 = sub_2F6FC(&qword_25F6B8, &qword_25F698);
          v231 = sub_2F608(&qword_25F6C8, &qword_25F678, (void (*)(void))sub_2F5E4, (void (*)(void))sub_2F8BC);
          v232 = (uint64_t)v239;
          _ConditionalContent<>.init(storage:)(v71, v238, v271, v230, v231);
          sub_B3D0(v232, v157, &qword_25F690);
          swift_storeEnumTagMultiPayload(v157, v156, 0);
          v233 = sub_2F540();
          v234 = sub_2F960();
          v95 = (uint64_t)v241;
          _ConditionalContent<>.init(storage:)(v157, v240, v276, v233, v234);
          sub_B414(v232, &qword_25F690);
          v169 = v229;
          v170 = &qword_25F698;
        }
        sub_B414(v169, v170);
        v225 = (uint64_t)v280;
        v226 = v279;
        goto LABEL_22;
      }
      v73 = sub_2E37C();
      v74 = _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0();
      _FrameLayout.init(width:height:alignment:)(&v290, *(_QWORD *)&v73, 0, 0, 1, v74, v75);
      v76 = v273;
      sub_1E428(v52, v273, type metadata accessor for CoverView);
      v77 = v272;
      v78 = (_OWORD *)(v76 + *(int *)(v272 + 36));
      v79 = v291;
      *v78 = v290;
      v78[1] = v79;
      v78[2] = v292;
      sub_2E37C();
      v81 = v80;
      v82 = _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0();
      sub_86FE0(0.0, 1, 0.0, 1, 0.0, 1, 0.0, 1, v72, 0.0, 1, v81, 0, v82, v83);
      sub_B414(v76, &qword_25F668);
      v84 = v259;
      sub_B3D0(v72, v259, &qword_25F670);
      v85 = v268;
      *(_WORD *)(v84 + *(int *)(v268 + 36)) = 257;
      sub_B414(v72, &qword_25F670);
      v86 = &qword_25F628;
      v87 = v260;
      sub_167A4(v84, v260, &qword_25F628);
      v88 = v269;
      sub_B3D0(v87, v269, &qword_25F628);
      swift_storeEnumTagMultiPayload(v88, v267, 0);
      v89 = sub_2F9E4();
      v90 = sub_2F6FC((unint64_t *)&qword_25F6E0, &qword_25F668);
      v91 = (uint64_t)v270;
      _ConditionalContent<>.init(storage:)(v88, v85, v77, v89, v90);
      v92 = v275;
      sub_B3D0(v91, v275, &qword_25F620);
      swift_storeEnumTagMultiPayload(v92, v274, 1);
      v93 = sub_2F540();
      v94 = sub_2F960();
      v95 = (uint64_t)v241;
      _ConditionalContent<>.init(storage:)(v92, v240, v276, v93, v94);
      sub_B414(v91, &qword_25F620);
      v96 = v87;
    }
    sub_B414(v96, v86);
    v225 = (uint64_t)v280;
    v226 = v279;
    v155 = v242;
LABEL_22:
    sub_B3D0(v95, v225, &qword_25F6A0);
    swift_storeEnumTagMultiPayload(v225, v226, 0);
    v227 = sub_2F608(&qword_25F6A8, &qword_25F6A0, (void (*)(void))sub_2F540, (void (*)(void))sub_2F960);
    _ConditionalContent<>.init(storage:)(v225, v155, &type metadata for Spacer, v227, &protocol witness table for Spacer);
    sub_B414(v95, &qword_25F6A0);
    sub_224DC(v52, type metadata accessor for CoverView);
    v41 = (__int128 *)v301;
    return _s7BooksUI13AnyPagedFrameVwxx_0(v41);
  }
  v38 = v279;
  v39 = v280;
  *v280 = 0;
  *((_BYTE *)v39 + 8) = 1;
  swift_storeEnumTagMultiPayload(v39, v38, 1);
  v40 = sub_2F608(&qword_25F6A8, &qword_25F6A0, (void (*)(void))sub_2F540, (void (*)(void))sub_2F960);
  _ConditionalContent<>.init(storage:)(v39, v33, &type metadata for Spacer, v40, &protocol witness table for Spacer);
  v41 = v302;
  return _s7BooksUI13AnyPagedFrameVwxx_0(v41);
}

double sub_2E37C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  double *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  uint64_t v30;
  double v31;
  void (*v32)(char *, uint64_t);
  uint64_t KeyPath;
  double v34;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;

  v41 = type metadata accessor for SizeConstants.Environment(0);
  __chkstk_darwin(v41);
  v40 = (uint64_t)&v36 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = sub_5440(&qword_25F780);
  __chkstk_darwin(v42);
  v39 = (uint64_t)&v36 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = sub_5440(&qword_25F788);
  v3 = __chkstk_darwin(v37);
  v5 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v7 = (double *)((char *)&v36 - v6);
  v8 = type metadata accessor for Font.TextStyle(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v43 = (char *)&v36 - v13;
  v14 = type metadata accessor for SizeConstants(0);
  __chkstk_darwin(v14);
  v16 = (char *)&v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for ListItemThumbnailView(0);
  v38 = v16;
  sub_3168C((uint64_t)v16);
  v18 = v0 + *(int *)(v17 + 24);
  v19 = *(_QWORD *)v18;
  LOBYTE(v17) = *(_BYTE *)(v18 + 8);
  sub_F9E4(*(_QWORD *)v18, v17);
  v20 = sub_30DB4(v19, v17);
  sub_BE0C(v19, v17);
  v21 = ListItemThumbnailViewModel.unscaledThumbnailSize(isCompact:)(v20 & 1);
  v23 = v22;
  v24 = v43;
  (*(void (**)(char *, _QWORD, uint64_t))(v9 + 104))(v43, enum case for Font.TextStyle.body(_:), v8);
  v25 = v37;
  sub_1E428((uint64_t)v16, (uint64_t)v7 + *(int *)(v37 + 28), type metadata accessor for SizeConstants.Environment);
  *v7 = v21;
  *((_QWORD *)v7 + 1) = v23;
  sub_B3D0((uint64_t)v7, (uint64_t)v5, &qword_25F788);
  (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v12, v24, v8);
  v26 = v39;
  sub_B3D0((uint64_t)v5, v39, &qword_25F788);
  v27 = v40;
  sub_1E428((uint64_t)&v5[*(int *)(v25 + 28)], v40, type metadata accessor for SizeConstants.Environment);
  v28 = v27 + *(int *)(v41 + 24);
  v29 = sub_173CC((uint64_t)v12, v28);
  v30 = type metadata accessor for DynamicTypeSize(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 8))(v28, v30);
  v31 = 1.0;
  if ((*(_QWORD *)&v29 & 0xFFFFFFFFFFFFFLL) == 0)
    v31 = v29;
  if ((~*(_QWORD *)&v29 & 0x7FF0000000000000) == 0)
    v29 = v31;
  sub_B414((uint64_t)v5, &qword_25F788);
  v32 = *(void (**)(char *, uint64_t))(v9 + 8);
  v32(v12, v8);
  *(double *)(v26 + *(int *)(v42 + 36)) = v29;
  KeyPath = swift_getKeyPath(&unk_1E23C0);
  v34 = sub_1A3634(KeyPath);
  swift_release(KeyPath);
  sub_B414(v26, &qword_25F780);
  sub_B414((uint64_t)v7, &qword_25F788);
  v32(v43, v8);
  sub_224DC((uint64_t)v38, type metadata accessor for SizeConstants);
  return v34;
}

double sub_2E718()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  char v4;
  unsigned __int8 v5;
  double result;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[6];
  unsigned __int8 v10;
  unsigned __int8 v11;
  char v12;

  v1 = v0 + *(int *)(type metadata accessor for ListItemThumbnailView(0) + 24);
  v2 = *(_QWORD *)v1;
  v3 = *(_BYTE *)(v1 + 8);
  sub_F9E4(*(_QWORD *)v1, v3);
  v4 = sub_30DB4(v2, v3);
  sub_BE0C(v2, v3);
  sub_2FA6C(v0, (uint64_t)v9);
  if ((v12 & 1) != 0)
    goto LABEL_5;
  v5 = v10;
  if (!(v4 & 1 | (v11 == 255)))
    v5 = v11;
  if (v5)
  {
LABEL_5:
    _s7BooksUI13AnyPagedFrameVwxx_0(v9);
    return 6.0;
  }
  else
  {
    v7 = 7;
    if (v4 & 1 | (v11 == 255))
      v7 = 5;
    v8 = LOBYTE(v9[v7]);
    _s7BooksUI13AnyPagedFrameVwxx_0(v9);
    result = 6.0;
    if (v8 == 1)
      return 4.0;
  }
  return result;
}

uint64_t sub_2E7F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  _BYTE *v13;
  void (*v14)(_BYTE *, uint64_t, uint64_t);
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  void (*v19)(_BYTE *, uint64_t);
  __int16 v20;
  _BYTE *v21;
  _BYTE v23[12];
  uint64_t v24;

  v4 = type metadata accessor for SizeConstants.Environment(0);
  __chkstk_darwin(v4);
  v6 = &v23[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = type metadata accessor for EnvironmentValues(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = &v23[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v9);
  v13 = &v23[-v12];
  v14 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v8 + 16);
  v14(&v23[-v12], a1, v7);
  v14(v11, (uint64_t)v13, v7);
  *v6 = EnvironmentValues.isCompact.getter() & 1;
  v15 = sub_2FAA8();
  v16 = EnvironmentValues.subscript.getter((uint64_t *)((char *)&v24 + 3), &type metadata for IsInCardKey, &type metadata for IsInCardKey, v15);
  v6[1] = BYTE3(v24);
  v17 = EnvironmentValues.dynamicTypeSize.getter(v16);
  *(double *)&v6[*(int *)(v4 + 28)] = EnvironmentValues.pixelLength.getter(v17);
  v18 = sub_7488();
  EnvironmentValues.subscript.getter(&v24, &type metadata for ViewSizeConditionsKey, &type metadata for ViewSizeConditionsKey, v18);
  v19 = *(void (**)(_BYTE *, uint64_t))(v8 + 8);
  v19(v11, v7);
  v20 = v24;
  v21 = &v6[*(int *)(v4 + 32)];
  v21[2] = BYTE2(v24);
  *(_WORD *)v21 = v20;
  v19(v13, v7);
  return sub_2FAEC((uint64_t)v6, a2);
}

uint64_t sub_2E998@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.isCompact.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_2E9C4@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.isCompact.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_2E9F0(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &opaque type descriptor for <<opaque return type of ListItemThumbnailView.body>>, 1);
}

uint64_t initializeBufferWithCopyOfBuffer for ListItemThumbnailView(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  char v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  _WORD *v11;
  _WORD *v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v9 = *a2;
    *(_QWORD *)v4 = *a2;
    v4 = v9 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain(v9);
  }
  else
  {
    v7 = *((_BYTE *)a2 + 65);
    v8 = *(_OWORD *)(a2 + 3);
    *(_OWORD *)(a1 + 24) = v8;
    (**(void (***)(uint64_t, uint64_t *))(v8 - 8))(a1, a2);
    if ((v7 & 1) != 0)
    {
      *(_BYTE *)(v4 + 40) = *((_BYTE *)a2 + 40);
    }
    else
    {
      *(_QWORD *)(v4 + 40) = a2[5];
      *(_BYTE *)(v4 + 48) = *((_BYTE *)a2 + 48);
      *(_QWORD *)(v4 + 56) = a2[7];
      *(_BYTE *)(v4 + 64) = *((_BYTE *)a2 + 64);
    }
    *(_BYTE *)(v4 + 65) = v7;
    v10 = *(int *)(a3 + 20);
    v11 = (_WORD *)(v4 + v10);
    v12 = (_WORD *)((char *)a2 + v10);
    v13 = sub_5440(&qword_25F548);
    if (swift_getEnumCaseMultiPayload(v12, v13) == 1)
    {
      *v11 = *v12;
      v14 = (int *)type metadata accessor for SizeConstants.Environment(0);
      v15 = v14[6];
      v16 = (char *)v11 + v15;
      v17 = (char *)v12 + v15;
      v18 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
      *(_QWORD *)((char *)v11 + v14[7]) = *(_QWORD *)((char *)v12 + v14[7]);
      v19 = v14[8];
      v20 = (char *)v11 + v19;
      v21 = (char *)v12 + v19;
      v20[2] = v21[2];
      *(_WORD *)v20 = *(_WORD *)v21;
      v22 = 1;
    }
    else
    {
      v23 = *(_QWORD *)v12;
      *(_QWORD *)v11 = *(_QWORD *)v12;
      swift_retain(v23);
      v22 = 0;
    }
    swift_storeEnumTagMultiPayload(v11, v13, v22);
    v24 = *(int *)(a3 + 24);
    v25 = v4 + v24;
    v26 = (uint64_t)a2 + v24;
    v27 = *(_QWORD *)v26;
    v28 = *(_BYTE *)(v26 + 8);
    sub_F9E4(*(_QWORD *)v26, v28);
    *(_QWORD *)v25 = v27;
    *(_BYTE *)(v25 + 8) = v28;
  }
  return v4;
}

uint64_t destroy for ListItemThumbnailView(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;

  _s7BooksUI13AnyPagedFrameVwxx_0(a1);
  v4 = (_QWORD *)((char *)a1 + *(int *)(a2 + 20));
  v5 = sub_5440(&qword_25F548);
  if (swift_getEnumCaseMultiPayload(v4, v5) == 1)
  {
    v6 = (char *)v4 + *(int *)(type metadata accessor for SizeConstants.Environment(0) + 24);
    v7 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  }
  else
  {
    swift_release(*v4);
  }
  return sub_BE0C(*(_QWORD *)((char *)a1 + *(int *)(a2 + 24)), *((_BYTE *)a1 + *(int *)(a2 + 24) + 8));
}

uint64_t initializeWithCopy for ListItemThumbnailView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6;
  __int128 v7;
  uint64_t v8;
  _WORD *v9;
  _WORD *v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;

  v6 = *(_BYTE *)(a2 + 65);
  v7 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v7;
  (**(void (***)(uint64_t, uint64_t))(v7 - 8))(a1, a2);
  if ((v6 & 1) != 0)
  {
    *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  }
  else
  {
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  }
  *(_BYTE *)(a1 + 65) = v6;
  v8 = *(int *)(a3 + 20);
  v9 = (_WORD *)(a1 + v8);
  v10 = (_WORD *)(a2 + v8);
  v11 = sub_5440(&qword_25F548);
  if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
  {
    *v9 = *v10;
    v12 = (int *)type metadata accessor for SizeConstants.Environment(0);
    v13 = v12[6];
    v14 = (char *)v9 + v13;
    v15 = (char *)v10 + v13;
    v16 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v14, v15, v16);
    *(_QWORD *)((char *)v9 + v12[7]) = *(_QWORD *)((char *)v10 + v12[7]);
    v17 = v12[8];
    v18 = (char *)v9 + v17;
    v19 = (char *)v10 + v17;
    v18[2] = v19[2];
    *(_WORD *)v18 = *(_WORD *)v19;
    v20 = 1;
  }
  else
  {
    v21 = *(_QWORD *)v10;
    *(_QWORD *)v9 = *(_QWORD *)v10;
    swift_retain(v21);
    v20 = 0;
  }
  swift_storeEnumTagMultiPayload(v9, v11, v20);
  v22 = *(int *)(a3 + 24);
  v23 = a1 + v22;
  v24 = a2 + v22;
  v25 = *(_QWORD *)v24;
  v26 = *(_BYTE *)(v24 + 8);
  sub_F9E4(*(_QWORD *)v24, v26);
  *(_QWORD *)v23 = v25;
  *(_BYTE *)(v23 + 8) = v26;
  return a1;
}

uint64_t assignWithCopy for ListItemThumbnailView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  _BYTE *v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  _BYTE *v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  _BYTE *v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  char v30;

  if (a1 != a2)
  {
    sub_2EFF0((_QWORD *)a1);
    v6 = *(_BYTE *)(a2 + 65);
    v7 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 24) = v7;
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    (**(void (***)(uint64_t, uint64_t))(v7 - 8))(a1, a2);
    if ((v6 & 1) != 0)
    {
      *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
    }
    else
    {
      v8 = *(_QWORD *)(a2 + 40);
      *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
      *(_QWORD *)(a1 + 40) = v8;
      LOBYTE(v8) = *(_BYTE *)(a2 + 64);
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
      *(_BYTE *)(a1 + 64) = v8;
    }
    *(_BYTE *)(a1 + 65) = v6;
    v9 = *(int *)(a3 + 20);
    v10 = (_BYTE *)(a1 + v9);
    v11 = (_BYTE *)(a2 + v9);
    sub_B414(a1 + v9, &qword_25F548);
    v12 = sub_5440(&qword_25F548);
    if (swift_getEnumCaseMultiPayload(v11, v12) == 1)
    {
      *v10 = *v11;
      v10[1] = v11[1];
      v13 = (int *)type metadata accessor for SizeConstants.Environment(0);
      v14 = v13[6];
      v15 = &v10[v14];
      v16 = &v11[v14];
      v17 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v15, v16, v17);
      *(_QWORD *)&v10[v13[7]] = *(_QWORD *)&v11[v13[7]];
      v18 = v13[8];
      v19 = &v10[v18];
      v20 = &v11[v18];
      v21 = v20[2];
      *(_WORD *)v19 = *(_WORD *)v20;
      v19[2] = v21;
      v22 = 1;
    }
    else
    {
      v23 = *(_QWORD *)v11;
      *(_QWORD *)v10 = *(_QWORD *)v11;
      swift_retain(v23);
      v22 = 0;
    }
    swift_storeEnumTagMultiPayload(v10, v12, v22);
  }
  v24 = *(int *)(a3 + 24);
  v25 = a1 + v24;
  v26 = a2 + v24;
  v27 = *(_QWORD *)v26;
  v28 = *(_BYTE *)(v26 + 8);
  sub_F9E4(*(_QWORD *)v26, v28);
  v29 = *(_QWORD *)v25;
  v30 = *(_BYTE *)(v25 + 8);
  *(_QWORD *)v25 = v27;
  *(_BYTE *)(v25 + 8) = v28;
  sub_BE0C(v29, v30);
  return a1;
}

_QWORD *sub_2EFF0(_QWORD *a1)
{
  destroy for AnyPagedFrame(a1);
  return a1;
}

uint64_t initializeWithTake for ListItemThumbnailView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  _WORD *v9;
  _WORD *v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v6;
  *(_WORD *)(a1 + 64) = *(_WORD *)(a2 + 64);
  v7 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v7;
  v8 = *(int *)(a3 + 20);
  v9 = (_WORD *)(a1 + v8);
  v10 = (_WORD *)(a2 + v8);
  v11 = sub_5440(&qword_25F548);
  if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
  {
    *v9 = *v10;
    v12 = (int *)type metadata accessor for SizeConstants.Environment(0);
    v13 = v12[6];
    v14 = (char *)v9 + v13;
    v15 = (char *)v10 + v13;
    v16 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v14, v15, v16);
    *(_QWORD *)((char *)v9 + v12[7]) = *(_QWORD *)((char *)v10 + v12[7]);
    v17 = v12[8];
    v18 = (char *)v9 + v17;
    v19 = (char *)v10 + v17;
    v18[2] = v19[2];
    *(_WORD *)v18 = *(_WORD *)v19;
    swift_storeEnumTagMultiPayload(v9, v11, 1);
  }
  else
  {
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  v20 = *(int *)(a3 + 24);
  v21 = a1 + v20;
  v22 = a2 + v20;
  *(_QWORD *)v21 = *(_QWORD *)v22;
  *(_BYTE *)(v21 + 8) = *(_BYTE *)(v22 + 8);
  return a1;
}

uint64_t assignWithTake for ListItemThumbnailView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  _WORD *v9;
  _WORD *v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  char v25;

  if (a1 != a2)
  {
    sub_2EFF0((_QWORD *)a1);
    v6 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v6;
    *(_WORD *)(a1 + 64) = *(_WORD *)(a2 + 64);
    v7 = *(_OWORD *)(a2 + 16);
    v8 = *(int *)(a3 + 20);
    v9 = (_WORD *)(a1 + v8);
    v10 = (_WORD *)(a2 + v8);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v7;
    sub_B414(a1 + v8, &qword_25F548);
    v11 = sub_5440(&qword_25F548);
    if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
    {
      *v9 = *v10;
      v12 = (int *)type metadata accessor for SizeConstants.Environment(0);
      v13 = v12[6];
      v14 = (char *)v9 + v13;
      v15 = (char *)v10 + v13;
      v16 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v14, v15, v16);
      *(_QWORD *)((char *)v9 + v12[7]) = *(_QWORD *)((char *)v10 + v12[7]);
      v17 = v12[8];
      v18 = (char *)v9 + v17;
      v19 = (char *)v10 + v17;
      v18[2] = v19[2];
      *(_WORD *)v18 = *(_WORD *)v19;
      swift_storeEnumTagMultiPayload(v9, v11, 1);
    }
    else
    {
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    }
  }
  v20 = *(int *)(a3 + 24);
  v21 = a1 + v20;
  v22 = (uint64_t *)(a2 + v20);
  v23 = *v22;
  LOBYTE(v22) = *((_BYTE *)v22 + 8);
  v24 = *(_QWORD *)v21;
  v25 = *(_BYTE *)(v21 + 8);
  *(_QWORD *)v21 = v23;
  *(_BYTE *)(v21 + 8) = (_BYTE)v22;
  sub_BE0C(v24, v25);
  return a1;
}

uint64_t getEnumTagSinglePayload for ListItemThumbnailView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_2F2D4);
}

uint64_t sub_2F2D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4;
  uint64_t v8;

  if ((_DWORD)a2 == 254)
  {
    v4 = *(unsigned __int8 *)(a1 + 65);
    if (v4 > 1)
      return (v4 ^ 0xFF) + 1;
    else
      return 0;
  }
  else
  {
    v8 = sub_5440(&qword_25F558);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for ListItemThumbnailView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_2F358);
}

uint64_t sub_2F358(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 254)
  {
    *(_BYTE *)(result + 65) = -(char)a2;
  }
  else
  {
    v7 = sub_5440(&qword_25F558);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 20), a2, a2, v7);
  }
  return result;
}

void sub_2F3CC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = "B";
  sub_2F448(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(v2 - 8) + 64;
    v4[2] = L"\t";
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
  }
}

void sub_2F448(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_25F5C8)
  {
    v2 = type metadata accessor for SizeConstants(255);
    v3 = type metadata accessor for Environment.Content(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_25F5C8);
  }
}

uint64_t sub_2F49C()
{
  return sub_7FD8(&qword_25F600, &qword_25F608, (uint64_t)&protocol conformance descriptor for HStack<A>);
}

uint64_t sub_2F4C8(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for ListItemThumbnailViewModel(a2, a1);
  return a2;
}

uint64_t sub_2F504(uint64_t a1, uint64_t a2)
{
  initializeWithTake for ListItemThumbnailStyle(a2, a1);
  return a2;
}

unint64_t sub_2F540()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25F6B0;
  if (!qword_25F6B0)
  {
    v1 = sub_7EF8(&qword_25F690);
    sub_2F6FC(&qword_25F6B8, &qword_25F698);
    sub_2F608(&qword_25F6C8, &qword_25F678, (void (*)(void))sub_2F5E4, (void (*)(void))sub_2F8BC);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_25F6B0);
  }
  return result;
}

uint64_t sub_2F5E4()
{
  return sub_2F608(&qword_25F6D0, &qword_25F660, (void (*)(void))sub_2F678, (void (*)(void))sub_2F778);
}

uint64_t sub_2F608(unint64_t *a1, uint64_t *a2, void (*a3)(void), void (*a4)(void))
{
  uint64_t result;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v8 = sub_7EF8(a2);
    a3();
    a4();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_2F678()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25F6D8;
  if (!qword_25F6D8)
  {
    v1 = sub_7EF8(&qword_25F670);
    sub_2F6FC((unint64_t *)&qword_25F6E0, &qword_25F668);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_25F6D8);
  }
  return result;
}

uint64_t sub_2F6FC(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = sub_7EF8(a2);
    sub_6FD0(&qword_25F6C0, type metadata accessor for CoverView, (uint64_t)&protocol conformance descriptor for CoverView);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v4);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_2F778()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25F6E8;
  if (!qword_25F6E8)
  {
    v1 = sub_7EF8(&qword_25F648);
    sub_2F81C(&qword_25F6F0, &qword_25F640, &qword_25F6F8, &qword_25F700);
    sub_7FD8(&qword_25F708, &qword_25F710, (uint64_t)&protocol conformance descriptor for _OverlayModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_25F6E8);
  }
  return result;
}

uint64_t sub_2F81C(unint64_t *a1, uint64_t *a2, unint64_t *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v8 = sub_7EF8(a2);
    sub_2F6FC((unint64_t *)&qword_25F6E0, &qword_25F668);
    sub_7FD8(a3, a4, (uint64_t)&protocol conformance descriptor for _ClipEffect<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_2F8BC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25F718;
  if (!qword_25F718)
  {
    v1 = sub_7EF8(&qword_25F638);
    sub_2F81C(&qword_25F720, &qword_25F630, &qword_25F728, &qword_25F730);
    sub_7FD8(&qword_25F738, &qword_25F740, (uint64_t)&protocol conformance descriptor for _OverlayModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_25F718);
  }
  return result;
}

unint64_t sub_2F960()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25F748;
  if (!qword_25F748)
  {
    v1 = sub_7EF8(&qword_25F620);
    sub_2F9E4();
    sub_2F6FC((unint64_t *)&qword_25F6E0, &qword_25F668);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_25F748);
  }
  return result;
}

unint64_t sub_2F9E4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25F750;
  if (!qword_25F750)
  {
    v1 = sub_7EF8(&qword_25F628);
    sub_2F678();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_25F750);
  }
  return result;
}

uint64_t sub_2FA6C(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for ListItemThumbnailStyle(a2, a1);
  return a2;
}

unint64_t sub_2FAA8()
{
  unint64_t result;

  result = qword_25F790;
  if (!qword_25F790)
  {
    result = swift_getWitnessTable(&unk_1F8D10, &type metadata for IsInCardKey);
    atomic_store(result, (unint64_t *)&qword_25F790);
  }
  return result;
}

uint64_t sub_2FAEC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SizeConstants.Environment(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t static IntentKinds.table.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  if (qword_25DB80 != -1)
    swift_once(&qword_25DB80, sub_2FBA0);
  v0 = qword_25F798;
  v1 = sub_5440(&qword_25F7A8);
  OSAllocatedUnfairLock.valueWithLock.getter(&v3, v0, v1);
  return v3;
}

uint64_t sub_2FBA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  if (qword_25DB88 != -1)
    swift_once(&qword_25DB88, sub_2FC14);
  v0 = qword_25F7A0;
  v1 = sub_5440(&qword_25F838);
  v2 = swift_allocObject(v1, 28, 7);
  *(_DWORD *)(v2 + 24) = 0;
  *(_QWORD *)(v2 + 16) = v0;
  qword_25F798 = v2;
  return swift_bridgeObjectRetain(v0);
}

unint64_t sub_2FC14()
{
  uint64_t v0;
  uint64_t inited;
  uint64_t v2;
  unint64_t v3;
  unint64_t result;
  uint64_t v5;

  v0 = sub_5440(&qword_25F840);
  inited = swift_initStackObject(v0, &v5);
  *(_OWORD *)(inited + 16) = xmmword_1E0B70;
  *(_QWORD *)(inited + 32) = 0xD00000000000001ALL;
  *(_QWORD *)(inited + 40) = 0x80000000001F9F50;
  v2 = sub_5440(&qword_25F848);
  v3 = sub_2FFEC();
  *(_QWORD *)(inited + 48) = v2;
  *(_QWORD *)(inited + 56) = v3;
  result = sub_93D4(inited);
  qword_25F7A0 = result;
  return result;
}

unint64_t sub_2FC9C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v5;

  if (qword_25DB80 != -1)
    swift_once(&qword_25DB80, sub_2FBA0);
  v0 = qword_25F798;
  v1 = sub_5440(&qword_25F7A8);
  OSAllocatedUnfairLock.valueWithLock.getter(&v5, v0, v1);
  v2 = v5;
  v3 = sub_1B9674(v5);
  swift_bridgeObjectRelease(v2);
  return v3;
}

uint64_t YearInReviewPagedFrame.sharableView.getter()
{
  return 0;
}

_QWORD *sub_2FD2C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_1B8538(a1, a2, a3);
}

uint64_t static _IntentKindTable_BooksReturningUnknown._unknownTypeWrapper.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return type metadata accessor for BooksOpaqueIntentModel(0, a2, a3, a4);
}

uint64_t static _IntentKindTable_BooksReturningUnknown._decode(_:from:)()
{
  return static _IntentKindTable_Returning._decode(_:from:)();
}

uint64_t sub_2FD64(_QWORD *a1)
{
  return static _IntentKindTable_BooksReturningUnknown._table.getter(a1[2], a1[3], a1[4]);
}

uint64_t sub_2FD74(_QWORD *a1)
{
  return static _IntentKindTable_BooksReturningUnknown._defaultType.getter(a1[2], a1[3], a1[4]);
}

uint64_t sub_2FD84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static _IntentKindTable_BooksReturningUnknown._unknownTypeWrapper.getter(a1, *(_QWORD *)(a1 + 24), a3, a4);
}

uint64_t sub_2FD8C()
{
  return static _IntentKindTable_BooksReturningUnknown._decode(_:from:)();
}

void static IntentKinds.register<A>(_:name:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v10;
  os_unfair_lock_s *v11;

  if (qword_25DB80 != -1)
    swift_once(&qword_25DB80, sub_2FBA0);
  v10 = (_QWORD *)(qword_25F798 + 16);
  v11 = (os_unfair_lock_s *)(qword_25F798 + 24);
  os_unfair_lock_lock((os_unfair_lock_t)(qword_25F798 + 24));
  sub_2FE5C(v10, a2, a3, a1, a4, a5);
  os_unfair_lock_unlock(v11);
}

uint64_t sub_2FE5C(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  char isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  uint64_t v14;

  swift_bridgeObjectRetain(a3);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a1);
  v14 = *a1;
  *a1 = 0x8000000000000000;
  sub_AF04(a4, a6, a2, a3, isUniquelyReferenced_nonNull_native);
  v12 = *a1;
  *a1 = v14;
  swift_bridgeObjectRelease(a3);
  return swift_bridgeObjectRelease(v12);
}

uint64_t static IntentKinds.register<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;

  dispatch thunk of static IntentModel.kind.getter(&v8, a2, a3);
  v6 = v9;
  static IntentKinds.register<A>(_:name:)(a1, v8, v9, a2, a3);
  return swift_bridgeObjectRelease(v6);
}

void static IntentModel.registerIntentKind(name:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  static IntentKinds.register<A>(_:name:)(a3, a1, a2, a3, a4);
}

uint64_t static IntentModel<>.registerIntentKind()(uint64_t a1, uint64_t a2)
{
  return static IntentKinds.register<A>(_:)(a1, a1, a2);
}

unint64_t sub_2FF8C()
{
  unint64_t result;

  result = qword_25F7B0[0];
  if (!qword_25F7B0[0])
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for IntentKinds, &type metadata for IntentKinds);
    atomic_store(result, qword_25F7B0);
  }
  return result;
}

ValueMetadata *type metadata accessor for IntentKinds()
{
  return &type metadata for IntentKinds;
}

uint64_t type metadata accessor for _IntentKindTable_BooksReturningUnknown(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10E40(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _IntentKindTable_BooksReturningUnknown);
}

unint64_t sub_2FFEC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25F850;
  if (!qword_25F850)
  {
    v1 = sub_7EF8(&qword_25F848);
    result = swift_getWitnessTable(&protocol conformance descriptor for PaginatedResourceSetIntent<A>, v1);
    atomic_store(result, (unint64_t *)&qword_25F850);
  }
  return result;
}

uint64_t _CodeAnyActionModel_OrNil.init(wrappedValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  return sub_3004C(a1, a2);
}

uint64_t sub_3004C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_5440(&qword_25E820);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t _CodeAnyActionModel_OrNil.wrappedValue.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_300A0(v1, a1);
}

uint64_t sub_300A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_5440(&qword_25E820);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t _CodeAnyActionModel_OrNil.wrappedValue.setter(uint64_t a1)
{
  uint64_t v1;

  return sub_3004C(a1, v1);
}

uint64_t _CodeAnyActionModel_OrNil.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v4;
  uint64_t v5;
  _QWORD v6[5];

  sub_300A0(v0, (uint64_t)&v4);
  if (v5)
  {
    sub_AC68(&v4, (uint64_t)v6);
    *(_QWORD *)&v4 = 0;
    *((_QWORD *)&v4 + 1) = 0xE000000000000000;
    v1 = sub_5440(&qword_25E848);
    _print_unlocked<A, B>(_:_:)(v6, &v4, v1, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    v2 = v4;
    _s7BooksUI13AnyPagedFrameVwxx_0(v6);
  }
  else
  {
    sub_B414((uint64_t)&v4, &qword_25E820);
    return 7104878;
  }
  return v2;
}

_QWORD *_CodeAnyActionModel_OrNil.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  unint64_t v5;
  _BYTE v7[40];
  _QWORD v8[5];
  _OWORD v9[2];
  uint64_t v10;

  *(_QWORD *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  sub_BD00((uint64_t)a1, (uint64_t)v7);
  v5 = sub_30268();
  Optional<A>.init(from:)(v8, v7, &type metadata for CodeAnyActionModel, v5);
  _s7BooksUI13AnyPagedFrameVwxx_0(a1);
  if (v2)
    return sub_302AC((_QWORD *)a2);
  if (v8[3])
  {
    sub_BD00((uint64_t)v8, (uint64_t)v9);
    sub_302DC(v8);
  }
  else
  {
    sub_B414((uint64_t)v8, &qword_25F860);
    memset(v9, 0, sizeof(v9));
    v10 = 0;
  }
  return (_QWORD *)sub_3004C((uint64_t)v9, a2);
}

unint64_t sub_30268()
{
  unint64_t result;

  result = qword_25F858;
  if (!qword_25F858)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CodeAnyActionModel, &type metadata for CodeAnyActionModel);
    atomic_store(result, (unint64_t *)&qword_25F858);
  }
  return result;
}

_QWORD *sub_302AC(_QWORD *a1)
{
  if (a1[3])
    _s7BooksUI13AnyPagedFrameVwxx_0(a1);
  return a1;
}

_QWORD *sub_302DC(_QWORD *a1)
{
  destroy for AnyPagedFrame(a1);
  return a1;
}

uint64_t _CodeAnyActionModel_OrNil.init(_partiallyFrom:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  _QWORD v6[5];
  _OWORD v7[2];
  uint64_t v8;

  *(_QWORD *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  sub_BD00((uint64_t)a1, (uint64_t)v7);
  v4 = sub_30268();
  Optional<A>.init(_partiallyFrom:)(v6, v7, &type metadata for CodeAnyActionModel, v4);
  _s7BooksUI13AnyPagedFrameVwxx_0(a1);
  if (v6[3])
  {
    sub_BD00((uint64_t)v6, (uint64_t)v7);
    sub_302DC(v6);
  }
  else
  {
    sub_B414((uint64_t)v6, &qword_25F860);
    memset(v7, 0, sizeof(v7));
    v8 = 0;
  }
  return sub_3004C((uint64_t)v7, a2);
}

_QWORD *sub_303BC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return _CodeAnyActionModel_OrNil.init(from:)(a1, a2);
}

uint64_t initializeWithCopy for _CodeAnyActionModel_OrNil(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  __int128 v5;

  v3 = *(_QWORD *)(a2 + 24);
  if (v3)
  {
    v4 = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 24) = v3;
    *(_QWORD *)(a1 + 32) = v4;
    (**(void (***)(uint64_t))(v3 - 8))(a1);
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  }
  return a1;
}

uint64_t assignWithCopy for _CodeAnyActionModel_OrNil(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;

  v4 = *((_QWORD *)a2 + 3);
  if (!*(_QWORD *)(a1 + 24))
  {
    if (v4)
    {
      *(_QWORD *)(a1 + 24) = v4;
      *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
      (**(void (***)(uint64_t, __int128 *))(v4 - 8))(a1, a2);
      return a1;
    }
LABEL_7:
    v5 = *a2;
    v6 = a2[1];
    *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
    *(_OWORD *)a1 = v5;
    *(_OWORD *)(a1 + 16) = v6;
    return a1;
  }
  if (!v4)
  {
    _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)a1);
    goto LABEL_7;
  }
  sub_142F8((_QWORD *)a1, a2);
  return a1;
}

uint64_t assignWithTake for _CodeAnyActionModel_OrNil(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  if (*(_QWORD *)(a1 + 24))
    _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for _CodeAnyActionModel_OrNil(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 40))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 24);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for _CodeAnyActionModel_OrNil(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 40) = 0;
    if (a2)
      *(_QWORD *)(result + 24) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for _CodeAnyActionModel_OrNil()
{
  return &type metadata for _CodeAnyActionModel_OrNil;
}

uint64_t ListItemAccessoryMoreButton.init(assetInfo:)@<X0>(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_AC68(a1, a2);
}

uint64_t ListItemAccessoryMoreButton.content(contextActionMenuView:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  __int128 v8[2];

  sub_BD00(v3, (uint64_t)v8);
  swift_retain(a2);
  return ListItemAccessoryMoreButtonView.init(assetInfo:contextActionMenuView:showDownloadProgress:)(v8, a1, a2, 1, a3);
}

uint64_t sub_3061C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &opaque type descriptor for <<opaque return type of ListItemAccessoryMoreButton.content(contextActionMenuView:)>>, 1);
}

ValueMetadata *type metadata accessor for ListItemAccessoryMoreButton()
{
  return &type metadata for ListItemAccessoryMoreButton;
}

unint64_t sub_30640()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25F888;
  if (!qword_25F888)
  {
    v1 = type metadata accessor for ListItemAccessoryMoreButtonView(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for ListItemAccessoryMoreButtonView, v1);
    atomic_store(result, (unint64_t *)&qword_25F888);
  }
  return result;
}

uint64_t ListItemMetadataFormatAndDescriptorBase.init<>(showFormat:assetInfo:)@<X0>(char a1@<W0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t KeyPath;
  uint64_t v7;
  uint64_t v8;

  KeyPath = swift_getKeyPath(&unk_1E2650);
  v7 = swift_getKeyPath(&unk_1E2678);
  v8 = swift_getKeyPath(&unk_1E26A0);
  *(_QWORD *)a3 = KeyPath;
  *(_OWORD *)(a3 + 8) = 0u;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 51) = 0u;
  *(_QWORD *)(a3 + 72) = v7;
  *(_BYTE *)(a3 + 80) = 0;
  *(_QWORD *)(a3 + 88) = v8;
  *(_BYTE *)(a3 + 96) = 0;
  *(_BYTE *)(a3 + 97) = a1;
  return sub_AC68(a2, a3 + 104);
}

uint64_t ListItemMetadataFormatAndDescriptorExternals.assetState.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __int128 v3;
  __int128 v4;
  _OWORD v6[3];
  _OWORD v7[2];

  v3 = *(_OWORD *)(v1 + 48);
  v6[2] = *(_OWORD *)(v1 + 32);
  v7[0] = v3;
  *(_DWORD *)((char *)v7 + 15) = *(_DWORD *)(v1 + 63);
  v4 = *(_OWORD *)(v1 + 16);
  v6[0] = *(_OWORD *)v1;
  v6[1] = v4;
  sub_34820((uint64_t)v6, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))sub_3480C);
  sub_316C0(a1);
  return sub_34820((uint64_t)v6, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))sub_BDF8);
}

double sub_30784(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  os_log_type_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v15;
  double v16;

  v4 = type metadata accessor for EnvironmentValues(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a2 & 1) != 0)
    return *(double *)&a1;
  v8 = swift_retain(a1);
  v9 = static os_log_type_t.fault.getter(v8);
  v10 = static Log.runtimeIssuesLog.getter();
  v11 = v9;
  if (os_log_type_enabled(v10, v9))
  {
    v12 = (uint8_t *)swift_slowAlloc(12, -1);
    v13 = swift_slowAlloc(32, -1);
    v16 = *(double *)&v13;
    *(_DWORD *)v12 = 136315138;
    v15 = sub_14AC3C(0x74616F6C464743, 0xE700000000000000, (uint64_t *)&v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16, v12 + 4, v12 + 12);
    _os_log_impl(&dword_0, v10, v11, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v12, 0xCu);
    swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v13, -1, -1);
    swift_slowDealloc(v12, -1, -1);
  }

  EnvironmentValues.init()();
  swift_getAtKeyPath(v7, a1);
  sub_BE0C(a1, 0);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v16;
}

uint64_t _s7BooksUI18BuyButtonExternalsV6colorsAA14ColorConstantsVvg_0@<X0>(uint64_t a1@<X8>)
{
  return sub_309A0(&qword_25F1E8, type metadata accessor for ColorConstants, 0x6E6F43726F6C6F43, 0xEE0073746E617473, a1);
}

uint64_t sub_30978@<X0>(uint64_t a1@<X8>)
{
  return sub_309A0(&qword_25FAD0, type metadata accessor for FontConstants.ListItem, 0x6D6574497473694CLL, 0xE800000000000000, a1);
}

uint64_t sub_309A0@<X0>(uint64_t *a1@<X0>, uint64_t (*a2)(_QWORD)@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t EnumCaseMultiPayload;
  uint64_t v20;
  os_log_type_t v21;
  NSObject *v22;
  uint64_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v29 = a3;
  v9 = v5;
  v11 = type metadata accessor for EnvironmentValues(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_5440(a1);
  __chkstk_darwin(v15);
  v17 = (uint64_t *)((char *)&v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_B3D0(v9, (uint64_t)v17, a1);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v17, v15);
  if ((_DWORD)EnumCaseMultiPayload == 1)
    return sub_21C88((uint64_t)v17, a5, a2);
  v20 = *v17;
  v21 = static os_log_type_t.fault.getter(EnumCaseMultiPayload);
  v22 = static Log.runtimeIssuesLog.getter();
  if (os_log_type_enabled(v22, v21))
  {
    v27 = a4;
    v23 = swift_slowAlloc(12, -1);
    v28 = a5;
    v24 = (uint8_t *)v23;
    v25 = swift_slowAlloc(32, -1);
    v31 = v25;
    *(_DWORD *)v24 = 136315138;
    v30 = sub_14AC3C(v29, v27, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31, v24 + 4, v24 + 12);
    _os_log_impl(&dword_0, v22, v21, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v24, 0xCu);
    swift_arrayDestroy(v25, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v25, -1, -1);
    swift_slowDealloc(v24, -1, -1);
  }

  EnvironmentValues.init()();
  swift_getAtKeyPath(v14, v20);
  swift_release(v20);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
}

uint64_t sub_30BC8(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  os_log_type_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v4 = type metadata accessor for EnvironmentValues(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = swift_retain(a1);
  if ((a2 & 1) == 0)
  {
    v9 = static os_log_type_t.fault.getter(v8);
    v10 = static Log.runtimeIssuesLog.getter();
    v11 = v9;
    if (os_log_type_enabled(v10, v9))
    {
      v12 = (uint8_t *)swift_slowAlloc(12, -1);
      v13 = swift_slowAlloc(32, -1);
      v16 = v13;
      *(_DWORD *)v12 = 136315138;
      v15 = sub_14AC3C(0xD000000000000017, 0x80000000001FA090, &v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16, v12 + 4, v12 + 12);
      _os_log_impl(&dword_0, v10, v11, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v12, 0xCu);
      swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v13, -1, -1);
      swift_slowDealloc(v12, -1, -1);
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath(v7, a1);
    j__swift_release(a1);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    return v16;
  }
  return a1;
}

uint64_t sub_30D88@<X0>(uint64_t a1@<X8>)
{
  return sub_3118C(qword_25E640, &qword_25E6D0, 0xD000000000000027, 0x80000000001FA060, a1);
}

uint64_t sub_30DB4(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  os_log_type_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v4 = type metadata accessor for EnvironmentValues(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a2 & 1) != 0)
    return a1 & 1;
  v8 = swift_retain(a1);
  v9 = static os_log_type_t.fault.getter(v8);
  v10 = static Log.runtimeIssuesLog.getter();
  v11 = v9;
  if (os_log_type_enabled(v10, v9))
  {
    v12 = (uint8_t *)swift_slowAlloc(12, -1);
    v13 = swift_slowAlloc(32, -1);
    v16 = v13;
    *(_DWORD *)v12 = 136315138;
    v15 = sub_14AC3C(1819242306, 0xE400000000000000, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16, v12 + 4, v12 + 12);
    _os_log_impl(&dword_0, v10, v11, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v12, 0xCu);
    swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v13, -1, -1);
    swift_slowDealloc(v12, -1, -1);
  }

  EnvironmentValues.init()();
  swift_getAtKeyPath(v7, a1);
  sub_BE0C(a1, 0);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v16;
}

uint64_t sub_30F6C(void *a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  os_log_type_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  id v14;
  uint64_t v16;
  uint64_t v17;

  v4 = type metadata accessor for EnvironmentValues(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a2 & 1) != 0)
  {
    v14 = a1;
  }
  else
  {
    v8 = swift_retain(a1);
    v9 = static os_log_type_t.fault.getter(v8);
    v10 = static Log.runtimeIssuesLog.getter();
    v11 = v9;
    if (os_log_type_enabled(v10, v9))
    {
      v12 = (uint8_t *)swift_slowAlloc(12, -1);
      v13 = swift_slowAlloc(32, -1);
      v17 = v13;
      *(_DWORD *)v12 = 136315138;
      v16 = sub_14AC3C(0xD000000000000013, 0x80000000001FA190, &v17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v16, &v17, v12 + 4, v12 + 12);
      _os_log_impl(&dword_0, v10, v11, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v12, 0xCu);
      swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v13, -1, -1);
      swift_slowDealloc(v12, -1, -1);
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath(v7, a1);
    sub_19034(a1, 0);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    return v17;
  }
  return (uint64_t)a1;
}

uint64_t sub_31134@<X0>(uint64_t a1@<X8>)
{
  return sub_313A8(&qword_25E818, (uint64_t (*)(_QWORD))&type metadata accessor for DataStack, 0x6361745361746144, 0xE90000000000006BLL, a1);
}

uint64_t sub_31160@<X0>(uint64_t a1@<X8>)
{
  return sub_3118C(&qword_25E860, &qword_25E858, 0xD000000000000017, 0x80000000001FA170, a1);
}

uint64_t sub_3118C@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v18;
  os_log_type_t v19;
  NSObject *v20;
  uint64_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint8_t *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[5];
  char v32;

  v10 = v5;
  v12 = type metadata accessor for EnvironmentValues(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_B3D0(v10, (uint64_t)v31, a1);
  if (v32 == 1)
    return sub_167A4((uint64_t)v31, a5, a2);
  v18 = v31[0];
  v19 = static os_log_type_t.fault.getter(v16);
  v20 = static Log.runtimeIssuesLog.getter();
  if (os_log_type_enabled(v20, v19))
  {
    v27 = a4;
    v21 = swift_slowAlloc(12, -1);
    v28 = v18;
    v22 = (uint8_t *)v21;
    v23 = swift_slowAlloc(32, -1);
    v24 = a3;
    v25 = v23;
    v30 = v23;
    *(_DWORD *)v22 = 136315138;
    v29 = sub_14AC3C(v24, v27, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30, v22 + 4, v22 + 12);
    _os_log_impl(&dword_0, v20, v19, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v22, 0xCu);
    swift_arrayDestroy(v25, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v25, -1, -1);
    v26 = v22;
    v18 = v28;
    swift_slowDealloc(v26, -1, -1);
  }

  EnvironmentValues.init()();
  swift_getAtKeyPath(v15, v18);
  swift_release(v18);
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v12);
}

uint64_t sub_31378@<X0>(uint64_t a1@<X8>)
{
  return sub_313A8(&qword_25E948, (uint64_t (*)(_QWORD))&type metadata accessor for ColorScheme, 0x686353726F6C6F43, 0xEB00000000656D65, a1);
}

uint64_t sub_313A8@<X0>(uint64_t *a1@<X0>, uint64_t (*a2)(_QWORD)@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t EnumCaseMultiPayload;
  uint64_t v19;
  uint64_t v21;
  os_log_type_t v22;
  NSObject *v23;
  uint64_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v30 = a3;
  v9 = v5;
  v11 = type metadata accessor for EnvironmentValues(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_5440(a1);
  __chkstk_darwin(v15);
  v17 = (uint64_t *)((char *)&v27 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_B3D0(v9, (uint64_t)v17, a1);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v17, v15);
  if ((_DWORD)EnumCaseMultiPayload == 1)
  {
    v19 = a2(0);
    return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(a5, v17, v19);
  }
  else
  {
    v21 = *v17;
    v22 = static os_log_type_t.fault.getter(EnumCaseMultiPayload);
    v23 = static Log.runtimeIssuesLog.getter();
    if (os_log_type_enabled(v23, v22))
    {
      v28 = a4;
      v24 = swift_slowAlloc(12, -1);
      v29 = a5;
      v25 = (uint8_t *)v24;
      v26 = swift_slowAlloc(32, -1);
      v32 = v26;
      *(_DWORD *)v25 = 136315138;
      v31 = sub_14AC3C(v30, v28, &v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32, v25 + 4, v25 + 12);
      _os_log_impl(&dword_0, v23, v22, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v25, 0xCu);
      swift_arrayDestroy(v26, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v26, -1, -1);
      swift_slowDealloc(v25, -1, -1);
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath(v14, v21);
    swift_release(v21);
    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  }
}

uint64_t sub_315E0@<X0>(uint64_t a1@<X8>)
{
  return sub_322E8(&qword_25EAE0, (uint64_t (*)(_QWORD *, uint64_t))sub_AC68, 0xD000000000000016, 0x80000000001FA040, a1);
}

uint64_t sub_3160C@<X0>(uint64_t a1@<X8>)
{
  return sub_31EE4(&qword_25F1F0, &qword_25F1F8, 0xD000000000000020, 0x80000000001FA0D0, a1);
}

uint64_t _s7BooksUI35ListItemEditionsDescriptorExternalsV7spacingAA13SizeConstantsV7SpacingVvg_0@<X0>(uint64_t a1@<X8>)
{
  return sub_309A0(&qword_25F200, type metadata accessor for SizeConstants.Spacing, 0x676E6963617053, 0xE700000000000000, a1);
}

uint64_t sub_31660@<X0>(uint64_t a1@<X8>)
{
  return sub_313A8(&qword_25F208, (uint64_t (*)(_QWORD))&type metadata accessor for BlendMode, 0x646F4D646E656C42, 0xE900000000000065, a1);
}

uint64_t sub_3168C@<X0>(uint64_t a1@<X8>)
{
  return sub_309A0(&qword_25F548, type metadata accessor for SizeConstants, 0x736E6F43657A6953, 0xED000073746E6174, a1);
}

uint64_t sub_316C0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  __int16 v8;
  uint64_t v9;
  uint64_t v11;
  os_log_type_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v3 = type metadata accessor for EnvironmentValues(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)v1;
  if (*(_BYTE *)(v1 + 66) == 1)
  {
    v8 = *(_WORD *)(v1 + 64);
    v9 = *(_QWORD *)(v1 + 56);
    *(_QWORD *)a1 = v7;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(v1 + 8);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(v1 + 24);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(v1 + 40);
    *(_QWORD *)(a1 + 56) = v9;
    *(_WORD *)(a1 + 64) = v8;
    return sub_34820(v1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))sub_3480C);
  }
  else
  {
    v11 = sub_34820(v1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))sub_3480C);
    v12 = static os_log_type_t.fault.getter(v11);
    v13 = static Log.runtimeIssuesLog.getter();
    v14 = v12;
    if (os_log_type_enabled(v13, v12))
    {
      v15 = (uint8_t *)swift_slowAlloc(12, -1);
      v16 = swift_slowAlloc(32, -1);
      v20 = v7;
      v17 = v16;
      v22 = v16;
      *(_DWORD *)v15 = 136315138;
      v19 = v15 + 4;
      v21 = sub_14AC3C(0xD00000000000001BLL, 0x80000000001FA2C0, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22, v19, v15 + 12);
      _os_log_impl(&dword_0, v13, v14, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v15, 0xCu);
      swift_arrayDestroy(v17, 1, (char *)&type metadata for Any + 8);
      v18 = v17;
      v7 = v20;
      swift_slowDealloc(v18, -1, -1);
      swift_slowDealloc(v15, -1, -1);
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath(v6, v7);
    sub_34820(v1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))sub_BDF8);
    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
}

uint64_t sub_318D8@<X0>(uint64_t a1@<X0>, char a2@<W1>, _BYTE *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  os_log_type_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[2];
  uint64_t v19;
  uint64_t v20;

  v6 = type metadata accessor for EnvironmentValues(0);
  v7 = *(_QWORD *)(v6 - 8);
  result = __chkstk_darwin(v6);
  v10 = (char *)v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a2 & 1) != 0)
  {
    *a3 = a1;
  }
  else
  {
    v11 = sub_F9E4(a1, 0);
    v12 = static os_log_type_t.fault.getter(v11);
    v13 = static Log.runtimeIssuesLog.getter();
    v14 = v12;
    if (os_log_type_enabled(v13, v12))
    {
      v15 = (uint8_t *)swift_slowAlloc(12, -1);
      v16 = swift_slowAlloc(32, -1);
      v18[1] = a3;
      v17 = v16;
      v20 = v16;
      *(_DWORD *)v15 = 136315138;
      v19 = sub_14AC3C(0xD00000000000001DLL, 0x80000000001FA2A0, &v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, &v20, v15 + 4, v15 + 12);
      _os_log_impl(&dword_0, v13, v14, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v15, 0xCu);
      swift_arrayDestroy(v17, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v17, -1, -1);
      swift_slowDealloc(v15, -1, -1);
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath(v10, a1);
    sub_BE0C(a1, 0);
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  }
  return result;
}

uint64_t sub_31AA8@<X0>(uint64_t a1@<X0>, char a2@<W1>, _BYTE *a3@<X8>)
{
  return sub_324E4(a1, a2, (uint64_t (*)(uint64_t, _QWORD))sub_F9E4, (void (*)(_QWORD, _QWORD))sub_BE0C, a3);
}

uint64_t sub_31ABC(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  os_log_type_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v4 = type metadata accessor for EnvironmentValues(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a2 & 1) != 0)
    return a1 & 1;
  v8 = swift_retain(a1);
  v9 = static os_log_type_t.fault.getter(v8);
  v10 = static Log.runtimeIssuesLog.getter();
  v11 = v9;
  if (os_log_type_enabled(v10, v9))
  {
    v12 = (uint8_t *)swift_slowAlloc(12, -1);
    v13 = swift_slowAlloc(32, -1);
    v17 = v13;
    *(_DWORD *)v12 = 136315138;
    v16 = sub_14AC3C(0xD000000000000012, 0x80000000001FA0B0, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v16, &v17, v12 + 4, v12 + 12);
    _os_log_impl(&dword_0, v10, v11, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v12, 0xCu);
    swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v13, -1, -1);
    swift_slowDealloc(v12, -1, -1);
  }

  EnvironmentValues.init()(v14);
  swift_getAtKeyPath(v7, a1);
  sub_BE0C(a1, 0);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v17;
}

uint64_t sub_31C80@<X0>(uint64_t a1@<X8>)
{
  return sub_313A8(&qword_25FA98, (uint64_t (*)(_QWORD))&type metadata accessor for LayoutDirection, 0x694474756F79614CLL, 0xEF6E6F6974636572, a1);
}

uint64_t sub_31CB4@<X0>(uint64_t a1@<X8>)
{
  return sub_313A8(&qword_25FAA8, (uint64_t (*)(_QWORD))&type metadata accessor for DynamicTypeSize, 0x5463696D616E7944, 0xEF657A6953657079, a1);
}

uint64_t sub_31CE8(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  os_log_type_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v4 = type metadata accessor for EnvironmentValues(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a2 & 1) == 0)
  {
    v8 = swift_retain(a1);
    v9 = static os_log_type_t.fault.getter(v8);
    v10 = static Log.runtimeIssuesLog.getter();
    v11 = v9;
    if (os_log_type_enabled(v10, v9))
    {
      v12 = (uint8_t *)swift_slowAlloc(12, -1);
      v13 = swift_slowAlloc(32, -1);
      v17 = v13;
      *(_DWORD *)v12 = 136315138;
      v16 = sub_14AC3C(0x6C616E6F6974704FLL, 0xEE003E6C6F6F423CLL, &v17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v16, &v17, v12 + 4, v12 + 12);
      _os_log_impl(&dword_0, v10, v11, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v12, 0xCu);
      swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v13, -1, -1);
      swift_slowDealloc(v12, -1, -1);
    }

    EnvironmentValues.init()(v14);
    swift_getAtKeyPath(v7, a1);
    sub_BE0C(a1, 0);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    return v17;
  }
  return a1;
}

uint64_t sub_31EB0@<X0>(uint64_t a1@<X8>)
{
  return sub_31EE4(&qword_25F758, &qword_25FAC0, 0x6C616E6F6974704FLL, 0xEE003E444955553CLL, a1);
}

uint64_t sub_31EE4@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t EnumCaseMultiPayload;
  uint64_t v20;
  os_log_type_t v21;
  NSObject *v22;
  uint64_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v29 = a3;
  v9 = v5;
  v11 = type metadata accessor for EnvironmentValues(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_5440(a1);
  __chkstk_darwin(v15);
  v17 = (uint64_t *)((char *)&v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_B3D0(v9, (uint64_t)v17, a1);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v17, v15);
  if ((_DWORD)EnumCaseMultiPayload == 1)
    return sub_167A4((uint64_t)v17, a5, a2);
  v20 = *v17;
  v21 = static os_log_type_t.fault.getter(EnumCaseMultiPayload);
  v22 = static Log.runtimeIssuesLog.getter();
  if (os_log_type_enabled(v22, v21))
  {
    v27 = a4;
    v23 = swift_slowAlloc(12, -1);
    v28 = a5;
    v24 = (uint8_t *)v23;
    v25 = swift_slowAlloc(32, -1);
    v31 = v25;
    *(_DWORD *)v24 = 136315138;
    v30 = sub_14AC3C(v29, v27, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31, v24 + 4, v24 + 12);
    _os_log_impl(&dword_0, v22, v21, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v24, 0xCu);
    swift_arrayDestroy(v25, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v25, -1, -1);
    swift_slowDealloc(v24, -1, -1);
  }

  EnvironmentValues.init()();
  swift_getAtKeyPath(v14, v20);
  swift_release(v20);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
}

uint64_t sub_3210C@<X0>(uint64_t a1@<X8>)
{
  return sub_313A8(&qword_25FAE0, (uint64_t (*)(_QWORD))&type metadata accessor for OpaqueMetricsFieldsContext, 0xD00000000000001ALL, 0x80000000001FA130, a1);
}

uint64_t sub_32138@<X0>(uint64_t a1@<X8>)
{
  return sub_3118C(&qword_25FAE8, &qword_25FAF0, 0xD000000000000017, 0x80000000001FA150, a1);
}

uint64_t sub_32164@<X0>(uint64_t a1@<X8>)
{
  return sub_309A0(&qword_25FAA0, type metadata accessor for FontConstants, 0x736E6F43746E6F46, 0xED000073746E6174, a1);
}

uint64_t sub_32198@<X0>(uint64_t a1@<X8>)
{
  return sub_309A0(&qword_25FB20, type metadata accessor for FontConstants.Button, 0x6E6F74747542, 0xE600000000000000, a1);
}

uint64_t sub_321BC@<X0>(uint64_t a1@<X8>)
{
  return sub_3118C(&qword_25FAB0, &qword_25FAB8, 0xD00000000000002BLL, 0x80000000001FA100, a1);
}

uint64_t sub_321E8@<X0>(uint64_t a1@<X8>)
{
  return sub_313A8(&qword_25FB18, (uint64_t (*)(_QWORD))&type metadata accessor for RedactionReasons, 0xD000000000000010, 0x80000000001FA200, a1);
}

uint64_t sub_32214@<X0>(uint64_t a1@<X8>)
{
  return sub_3118C(&qword_25FB08, &qword_25FB10, 0xD000000000000013, 0x80000000001FA1E0, a1);
}

uint64_t sub_32240@<X0>(uint64_t a1@<X8>)
{
  return sub_3118C(&qword_25FAF8, &qword_25FB00, 0xD00000000000002CLL, 0x80000000001FA1B0, a1);
}

uint64_t sub_3226C@<X0>(uint64_t a1@<X8>)
{
  return sub_309A0(&qword_25FAC8, type metadata accessor for FontConstants.Navigation, 0x697461676976614ELL, 0xEA00000000006E6FLL, a1);
}

uint64_t sub_32298@<X0>(uint64_t a1@<X8>)
{
  return sub_313A8(&qword_25FAD8, (uint64_t (*)(_QWORD))&type metadata accessor for Image.Scale, 0x656C616353, 0xE500000000000000, a1);
}

uint64_t sub_322BC@<X0>(uint64_t a1@<X8>)
{
  return sub_322E8(&qword_25FA90, (uint64_t (*)(_QWORD *, uint64_t))sub_AC68, 0xD000000000000022, 0x80000000001FA010, a1);
}

uint64_t sub_322E8@<X0>(uint64_t *a1@<X0>, uint64_t (*a2)(_QWORD *, uint64_t)@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v18;
  os_log_type_t v19;
  NSObject *v20;
  uint64_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint8_t *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[5];
  char v32;

  v10 = v5;
  v12 = type metadata accessor for EnvironmentValues(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_B3D0(v10, (uint64_t)v31, a1);
  if (v32 == 1)
    return a2(v31, a5);
  v18 = v31[0];
  v19 = static os_log_type_t.fault.getter(v16);
  v20 = static Log.runtimeIssuesLog.getter();
  if (os_log_type_enabled(v20, v19))
  {
    v27 = a4;
    v21 = swift_slowAlloc(12, -1);
    v28 = v18;
    v22 = (uint8_t *)v21;
    v23 = swift_slowAlloc(32, -1);
    v24 = a3;
    v25 = v23;
    v30 = v23;
    *(_DWORD *)v22 = 136315138;
    v29 = sub_14AC3C(v24, v27, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30, v22 + 4, v22 + 12);
    _os_log_impl(&dword_0, v20, v19, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v22, 0xCu);
    swift_arrayDestroy(v25, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v25, -1, -1);
    v26 = v22;
    v18 = v28;
    swift_slowDealloc(v26, -1, -1);
  }

  EnvironmentValues.init()();
  swift_getAtKeyPath(v15, v18);
  swift_release(v18);
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v12);
}

uint64_t sub_324D0@<X0>(uint64_t a1@<X0>, char a2@<W1>, _BYTE *a3@<X8>)
{
  return sub_324E4(a1, a2, (uint64_t (*)(uint64_t, _QWORD))sub_35D60, (void (*)(_QWORD, _QWORD))sub_35D64, a3);
}

uint64_t sub_324E4@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t (*a3)(uint64_t, _QWORD)@<X2>, void (*a4)(_QWORD, _QWORD)@<X3>, _BYTE *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  os_log_type_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  void (*v24)(_QWORD, _QWORD);
  uint64_t v25;
  uint64_t v26;

  v10 = type metadata accessor for EnvironmentValues(0);
  v11 = *(_QWORD *)(v10 - 8);
  result = __chkstk_darwin(v10);
  v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a2 & 1) != 0)
  {
    *a5 = a1;
  }
  else
  {
    v15 = a3(a1, 0);
    v16 = static os_log_type_t.fault.getter(v15);
    v17 = static Log.runtimeIssuesLog.getter();
    v18 = v16;
    if (os_log_type_enabled(v17, v16))
    {
      v24 = a4;
      v19 = (uint8_t *)swift_slowAlloc(12, -1);
      v20 = swift_slowAlloc(32, -1);
      v23 = a5;
      v21 = v20;
      v26 = v20;
      *(_DWORD *)v19 = 136315138;
      v25 = sub_14AC3C(1702521171, 0xE400000000000000, &v26);
      a4 = v24;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26, v19 + 4, v19 + 12);
      _os_log_impl(&dword_0, v17, v18, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v19, 0xCu);
      swift_arrayDestroy(v21, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v21, -1, -1);
      swift_slowDealloc(v19, -1, -1);
    }

    EnvironmentValues.init()(v22);
    swift_getAtKeyPath(v14, a1);
    a4(a1, 0);
    return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  }
  return result;
}

double sub_326B8(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  os_log_type_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  double v22;

  v6 = type metadata accessor for EnvironmentValues(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a3 & 1) != 0)
    return *(double *)&a1;
  swift_retain(a1);
  v11 = static os_log_type_t.fault.getter(v10);
  v12 = static Log.runtimeIssuesLog.getter();
  v13 = v11;
  if (os_log_type_enabled(v12, v11))
  {
    v14 = (uint8_t *)swift_slowAlloc(12, -1);
    v15 = swift_slowAlloc(32, -1);
    v20 = a2;
    v16 = v15;
    v22 = *(double *)&v15;
    *(_DWORD *)v14 = 136315138;
    v21 = sub_14AC3C(0x657A69534743, 0xE600000000000000, (uint64_t *)&v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22, v14 + 4, v14 + 12);
    _os_log_impl(&dword_0, v12, v13, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v14, 0xCu);
    swift_arrayDestroy(v16, 1, (char *)&type metadata for Any + 8);
    v17 = v16;
    a2 = v20;
    swift_slowDealloc(v17, -1, -1);
    swift_slowDealloc(v14, -1, -1);
  }

  EnvironmentValues.init()(v18);
  swift_getAtKeyPath(v9, a1);
  sub_35C5C(a1, a2, 0);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  return v22;
}

uint64_t ListItemMetadataFormatAndDescriptorExternals.isReachable.getter()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  char v3;

  v1 = *(_QWORD *)(v0 + 72);
  v2 = *(_BYTE *)(v0 + 80);
  sub_F9E4(v1, v2);
  v3 = sub_30DB4(v1, v2);
  sub_BE0C(v1, v2);
  return v3 & 1;
}

uint64_t ListItemMetadataFormatAndDescriptorExternals.dispatchState.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  char v4;

  v3 = *(_QWORD *)(v1 + 88);
  v4 = *(_BYTE *)(v1 + 96);
  sub_F9E4(v3, v4);
  sub_318D8(v3, v4, a1);
  return sub_BE0C(v3, v4);
}

double ListItemMetadataFormatAndDescriptorExternals.init()@<D0>(uint64_t a1@<X8>)
{
  uint64_t KeyPath;
  uint64_t v3;
  uint64_t v4;
  double result;

  KeyPath = swift_getKeyPath(&unk_1E2650);
  v3 = swift_getKeyPath(&unk_1E2678);
  v4 = swift_getKeyPath(&unk_1E26A0);
  *(_QWORD *)a1 = KeyPath;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 51) = 0u;
  *(_QWORD *)(a1 + 72) = v3;
  *(_BYTE *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = v4;
  *(_BYTE *)(a1 + 96) = 0;
  return result;
}

double ListItemMetadataFormatAndDescriptorExternals.init(from:)@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  double result;

  KeyPath = swift_getKeyPath(&unk_1E2650);
  v5 = swift_getKeyPath(&unk_1E2678);
  v6 = swift_getKeyPath(&unk_1E26A0);
  _s7BooksUI13AnyPagedFrameVwxx_0(a1);
  *(_QWORD *)a2 = KeyPath;
  result = 0.0;
  *(_OWORD *)(a2 + 8) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 51) = 0u;
  *(_QWORD *)(a2 + 72) = v5;
  *(_BYTE *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = v6;
  *(_BYTE *)(a2 + 96) = 0;
  return result;
}

uint64_t ListItemMetadataRecommendationCreatorDescriptorBase.externals.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t ListItemMetadataFormatAndDescriptorBase.showFormat.getter(uint64_t a1)
{
  uint64_t v1;

  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 36));
}

uint64_t ListItemMetadataFormatAndDescriptorBase.showFormat.setter(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_BYTE *)(v2 + *(int *)(a2 + 36)) = result;
  return result;
}

uint64_t (*ListItemMetadataRecommendationCreatorDescriptorBase.description.modify())()
{
  return KeyedEncodingContainer.encode<A>(_:forKey:);
}

uint64_t ListItemMetadataFormatAndDescriptorBase.content(localizer:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *KeyPath;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  NSString v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  unsigned __int8 v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _OWORD *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t OpaqueTypeConformance2;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  char v62;
  char v63;
  __int128 v64;
  _OWORD *v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char v90;
  __int128 v91;
  _OWORD *v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _OWORD *v107;
  char *v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  char *v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  _OWORD *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  __int128 v136;
  __int128 v137;
  _OWORD v138[2];
  uint64_t v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  uint64_t v145;

  v126 = a1;
  v133 = a3;
  v4 = sub_5440(&qword_25F890);
  __chkstk_darwin(v4);
  v6 = (char *)&v114 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v132 = sub_5440(&qword_25F898);
  v130 = *(_QWORD *)(v132 - 8);
  __chkstk_darwin(v132);
  v8 = (char *)&v114 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v115 = sub_5440(&qword_25F8A0);
  __chkstk_darwin(v115);
  v116 = (uint64_t)&v114 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v129 = sub_5440(&qword_25F8A8);
  __chkstk_darwin(v129);
  v117 = (char *)&v114 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_5440(&qword_25E0C8);
  __chkstk_darwin(v11);
  v13 = (char *)&v114 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v125 = type metadata accessor for LocalizerRequest(0);
  v124 = *(_QWORD *)(v125 - 8);
  v14 = __chkstk_darwin(v125);
  v118 = (char *)&v114 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v123 = (char *)&v114 - v16;
  v127 = sub_5440(&qword_25F8B0);
  __chkstk_darwin(v127);
  v128 = (_OWORD *)((char *)&v114 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  v18 = sub_5440(&qword_25F8B8);
  v19 = __chkstk_darwin(v18);
  v122 = (char *)&v114 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v131 = (uint64_t)&v114 - v21;
  v22 = *(_QWORD *)(a2 + 24);
  v134 = *(_QWORD *)(a2 + 16);
  v135 = v22;
  KeyPath = (_QWORD *)swift_getKeyPath(&unk_1E26C8);
  swift_getWitnessTable(&protocol conformance descriptor for ListItemMetadataFormatAndDescriptorBase<A>, a2);
  ViewModelWithExternals.subscript.getter(KeyPath);
  swift_release(KeyPath);
  if (!*((_QWORD *)&v141 + 1))
  {
    sub_33CE0();
    v51 = v130;
    v52 = v132;
    (*(void (**)(char *, char *, uint64_t))(v130 + 16))(v6, v8, v132);
    swift_storeEnumTagMultiPayload(v6, v4, 1);
    v53 = sub_34890();
    *(_QWORD *)&v141 = &type metadata for Text;
    *((_QWORD *)&v141 + 1) = &protocol witness table for Text;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v141, &opaque type descriptor for <<opaque return type of View.redacted(reason:)>>, 1);
    _ConditionalContent<>.init(storage:)(v6, v18, v52, v53, OpaqueTypeConformance2);
    return (*(uint64_t (**)(char *, uint64_t))(v51 + 8))(v8, v52);
  }
  v120 = v18;
  v121 = v4;
  v119 = v6;
  v24 = v144;
  swift_bridgeObjectRelease(*((_QWORD *)&v141 + 1));
  if ((v24 & 0x1000000) != 0)
  {
    v56 = sub_34B2C(v126);
    v58 = v57;
    v60 = v59;
    *(_QWORD *)&v136 = v56;
    *((_QWORD *)&v136 + 1) = v57;
    v62 = v61 & 1;
    *(_QWORD *)&v137 = v61 & 1;
    *((_QWORD *)&v137 + 1) = v59;
    LOBYTE(v138[0]) = 0;
    sub_34B1C(v56, v57, v61 & 1);
    swift_bridgeObjectRetain(v60);
    _ConditionalContent<>.init(storage:)(&v136, &type metadata for Text, &type metadata for Text, &protocol witness table for Text, &protocol witness table for Text);
    v63 = v143;
    v64 = v142;
    v65 = v128;
    *v128 = v141;
    v65[1] = v64;
    *((_BYTE *)v65 + 32) = v63;
    swift_storeEnumTagMultiPayload(v65, v127, 0);
    v66 = sub_5440(&qword_25F8E0);
    v67 = sub_34978();
    v68 = sub_35AD0(&qword_25F8E8, &qword_25F8A8, (void (*)(void))sub_349D4);
    v29 = v131;
    _ConditionalContent<>.init(storage:)(v65, v66, v129, v67, v68);
    sub_2B574(v56, v58, v62);
    swift_bridgeObjectRelease(v60);
    v69 = sub_5440(&qword_25F8D0);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v69 - 8) + 56))(v29, 0, 1, v69);
LABEL_13:
    v45 = v132;
    v98 = (uint64_t)v119;
    v99 = v121;
    v100 = v120;
    goto LABEL_14;
  }
  sub_33794(a2, (uint64_t)v13);
  v25 = v124;
  v26 = v125;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v124 + 48))(v13, 1, v125) != 1)
  {
    v70 = v123;
    (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v123, v13, v26);
    v71 = v118;
    (*(void (**)(char *, char *, uint64_t))(v25 + 16))(v118, v70, v26);
    sub_BD00(v126, (uint64_t)&v141);
    v72 = Text.init(_:localizer:)(v71, &v141);
    v74 = v73;
    v76 = v75;
    v78 = v77 & 1;
    v79 = _s7BooksUI14ColorConstantsV19booksSecondaryLabel05SwiftB00C0Vvg_0();
    v80 = Text.foregroundColor(_:)(v79, v72, v74, v78, v76);
    v82 = v81;
    LOBYTE(v70) = v83;
    v85 = v84;
    swift_release(v79);
    LOBYTE(v79) = v70 & 1;
    sub_2B574(v72, v74, v78);
    swift_bridgeObjectRelease(v76);
    *(_QWORD *)&v136 = v80;
    *((_QWORD *)&v136 + 1) = v82;
    *(_QWORD *)&v137 = v70 & 1;
    *((_QWORD *)&v137 + 1) = v85;
    LOBYTE(v138[0]) = 1;
    v86 = v80;
    v87 = v80;
    v88 = v82;
    sub_34B1C(v86, v82, v70 & 1);
    v89 = v85;
    swift_bridgeObjectRetain(v85);
    _ConditionalContent<>.init(storage:)(&v136, &type metadata for Text, &type metadata for Text, &protocol witness table for Text, &protocol witness table for Text);
    v90 = v143;
    v91 = v142;
    v92 = v128;
    *v128 = v141;
    v92[1] = v91;
    *((_BYTE *)v92 + 32) = v90;
    swift_storeEnumTagMultiPayload(v92, v127, 0);
    v93 = sub_5440(&qword_25F8E0);
    v94 = sub_34978();
    v95 = sub_35AD0(&qword_25F8E8, &qword_25F8A8, (void (*)(void))sub_349D4);
    v96 = (uint64_t)v122;
    _ConditionalContent<>.init(storage:)(v92, v93, v129, v94, v95);
    sub_2B574(v87, v88, v79);
    swift_bridgeObjectRelease(v89);
    (*(void (**)(char *, uint64_t))(v25 + 8))(v123, v125);
    v97 = sub_5440(&qword_25F8D0);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v97 - 8) + 56))(v96, 0, 1, v97);
    v29 = v131;
    sub_167A4(v96, v131, &qword_25F8B8);
    goto LABEL_13;
  }
  sub_B414((uint64_t)v13, &qword_25E0C8);
  v27 = sub_33A84(a2);
  v29 = v131;
  v30 = v130;
  v31 = v8;
  if ((v32 & 1) != 0)
    goto LABEL_15;
  v33 = v27;
  v34 = v28;
  if (qword_25DC10 != -1)
    swift_once(&qword_25DC10, sub_AD7D8);
  if (byte_2632E8 != 1)
    goto LABEL_9;
  v35 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v36 = String._bridgeToObjectiveC()();
  v125 = v34;
  v37 = v33;
  v38 = v30;
  v39 = v36;
  v40 = objc_msgSend(v35, "integerForKey:", v36);

  v31 = v8;
  v30 = v38;
  v33 = v37;
  v34 = v125;
  if ((v40 & 0x10) != 0)
  {
LABEL_15:
    if (!sub_33B84(a2))
    {
      v113 = sub_5440(&qword_25F8D0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v113 - 8) + 56))(v29, 1, 1, v113);
      v45 = v132;
      v98 = (uint64_t)v119;
      v99 = v121;
      v100 = v120;
      goto LABEL_14;
    }
    sub_33CE0();
    v103 = v116;
    v45 = v132;
    (*(void (**)(uint64_t, char *, uint64_t))(v30 + 16))(v116, v31, v132);
    swift_storeEnumTagMultiPayload(v103, v115, 1);
    v104 = sub_349D4();
    *(_QWORD *)&v141 = &type metadata for Text;
    *((_QWORD *)&v141 + 1) = &protocol witness table for Text;
    v105 = swift_getOpaqueTypeConformance2(&v141, &opaque type descriptor for <<opaque return type of View.redacted(reason:)>>, 1);
    v106 = (uint64_t)v117;
    _ConditionalContent<>.init(storage:)(v103, &type metadata for ListItemMetadataRatingView, v45, v104, v105);
    v107 = v128;
    sub_B3D0(v106, (uint64_t)v128, &qword_25F8A8);
    swift_storeEnumTagMultiPayload(v107, v127, 1);
    v108 = v31;
    v109 = sub_5440(&qword_25F8E0);
    v110 = sub_34978();
    v111 = sub_35AD0(&qword_25F8E8, &qword_25F8A8, (void (*)(void))sub_349D4);
    v50 = (uint64_t)v122;
    _ConditionalContent<>.init(storage:)(v107, v109, v129, v110, v111);
    sub_B414(v106, &qword_25F8A8);
    (*(void (**)(char *, uint64_t))(v130 + 8))(v108, v45);
  }
  else
  {
LABEL_9:
    sub_BD00(v126, (uint64_t)&v140);
    *(_QWORD *)&v136 = swift_getKeyPath(&unk_1E26F8);
    BYTE8(v136) = 0;
    *(_QWORD *)&v137 = v33;
    *((_QWORD *)&v137 + 1) = v34;
    sub_AC68(&v140, (uint64_t)v138);
    v143 = v138[0];
    v144 = v138[1];
    v145 = v139;
    v141 = v136;
    v142 = v137;
    v41 = v116;
    sub_34AAC((uint64_t)&v141, v116);
    swift_storeEnumTagMultiPayload(v41, v115, 0);
    v42 = sub_349D4();
    *(_QWORD *)&v136 = &type metadata for Text;
    *((_QWORD *)&v136 + 1) = &protocol witness table for Text;
    v43 = swift_getOpaqueTypeConformance2(&v136, &opaque type descriptor for <<opaque return type of View.redacted(reason:)>>, 1);
    v44 = (uint64_t)v117;
    v45 = v132;
    _ConditionalContent<>.init(storage:)(v41, &type metadata for ListItemMetadataRatingView, v132, v42, v43);
    v46 = v128;
    sub_B3D0(v44, (uint64_t)v128, &qword_25F8A8);
    swift_storeEnumTagMultiPayload(v46, v127, 1);
    v47 = sub_5440(&qword_25F8E0);
    v48 = sub_34978();
    v49 = sub_35AD0(&qword_25F8E8, &qword_25F8A8, (void (*)(void))sub_349D4);
    v50 = (uint64_t)v122;
    _ConditionalContent<>.init(storage:)(v46, v47, v129, v48, v49);
    sub_B414(v44, &qword_25F8A8);
    sub_34AE8((uint64_t)&v141);
  }
  v112 = sub_5440(&qword_25F8D0);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v112 - 8) + 56))(v50, 0, 1, v112);
  sub_167A4(v50, v29, &qword_25F8B8);
  v98 = (uint64_t)v119;
  v99 = v121;
  v100 = v120;
LABEL_14:
  sub_B3D0(v29, v98, &qword_25F8B8);
  swift_storeEnumTagMultiPayload(v98, v99, 0);
  v101 = sub_34890();
  *(_QWORD *)&v141 = &type metadata for Text;
  *((_QWORD *)&v141 + 1) = &protocol witness table for Text;
  v102 = swift_getOpaqueTypeConformance2(&v141, &opaque type descriptor for <<opaque return type of View.redacted(reason:)>>, 1);
  _ConditionalContent<>.init(storage:)(v98, v100, v45, v101, v102);
  return sub_B414(v29, &qword_25F8B8);
}

double sub_3373C@<D0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  __int16 v4;
  __int128 v5;
  double result;
  __int128 v7;
  _OWORD v8[2];
  __int128 v9;
  __int128 v10;
  __int16 v11;

  (*(void (**)(_OWORD *__return_ptr, _QWORD))(*(_QWORD *)(a2 + a1 - 8) + 24))(v8, *(_QWORD *)(a2 + a1 - 16));
  v4 = v11;
  v5 = v8[1];
  *(_OWORD *)a3 = v8[0];
  *(_OWORD *)(a3 + 16) = v5;
  result = *(double *)&v9;
  v7 = v10;
  *(_OWORD *)(a3 + 32) = v9;
  *(_OWORD *)(a3 + 48) = v7;
  *(_WORD *)(a3 + 64) = v4;
  return result;
}

uint64_t sub_33794@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _QWORD *KeyPath;
  uint64_t v15;
  char v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  Class isa;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  unsigned __int8 v32;
  double v33;
  uint64_t v34;

  v4 = type metadata accessor for LocalizerContext(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = type metadata accessor for LocalizerLookupStrategy(0);
  v8 = *(_QWORD *)(v29 - 8);
  __chkstk_darwin(v29);
  v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for LocalizerDefaultValue(0);
  v27 = *(_QWORD *)(v11 - 8);
  v28 = v11;
  __chkstk_darwin(v11);
  v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = *(_OWORD *)(a1 + 16);
  KeyPath = (_QWORD *)swift_getKeyPath(&unk_1E26C8);
  swift_getWitnessTable(&protocol conformance descriptor for ListItemMetadataFormatAndDescriptorBase<A>, a1);
  ViewModelWithExternals.subscript.getter(KeyPath);
  swift_release(KeyPath);
  v15 = v31;
  if (!v31)
    goto LABEL_5;
  v16 = v34;
  v17 = v33;
  v18 = v32;
  swift_bridgeObjectRelease(v31);
  if (v18)
  {
    if ((v16 & 1) == 0)
    {
      v15 = 0;
LABEL_5:
      v19 = type metadata accessor for LocalizerRequest(v15);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(a2, 1, 1, v19);
    }
    LocalizerDefaultValue.init(stringLiteral:)("Sample", 6, 2);
    v21 = v29;
    (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v10, enum case for LocalizerLookupStrategy.default(_:), v29);
    v23 = 0xD000000000000014;
    v22 = 0x80000000001FA260;
  }
  else
  {
    if (v17 >= 0.01)
    {
      isa = Double._bridgeToObjectiveC()().super.super.isa;
      (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for LocalizerContext.standalone(_:), v4);
      static LocalizerRequest.percentage(forNumber:minimumFractionDigits:maximumFractionDigits:in:)(isa, 0, 1, 0, 1, v7);

      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      goto LABEL_11;
    }
    LocalizerDefaultValue.init(stringLiteral:)("New", 3, 2);
    v21 = v29;
    (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v10, enum case for LocalizerLookupStrategy.default(_:), v29);
    v22 = 0x80000000001FA280;
    v23 = 0xD000000000000011;
  }
  static LocalizerRequest.string(forKey:with:defaultValue:using:)(v23, v22, 0, v13, v10);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v21);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v13, v28);
LABEL_11:
  v25 = type metadata accessor for LocalizerRequest(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(a2, 0, 1, v25);
}

uint64_t sub_33A84(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  double v7;
  double v8;
  _BOOL4 v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  id v15;
  _BOOL4 v16;

  v2 = (_QWORD *)(v1 + *(int *)(a1 + 40));
  v3 = v2[3];
  v4 = v2[4];
  sub_5480(v2, v3);
  v5 = (void *)ContentInfo.storeData.getter(v3, *(_QWORD *)(v4 + 8));
  if (v5)
  {
    v6 = v5;
    objc_msgSend(v5, "averageRating");
    v8 = v7;

    v9 = v8 == 0.0;
    if (v8 == 0.0)
      v10 = 0.0;
    else
      v10 = v8 * 5.0;
  }
  else
  {
    v10 = 0.0;
    v9 = 1;
  }
  v11 = v2[3];
  v12 = v2[4];
  sub_5480(v2, v11);
  v13 = (void *)ContentInfo.storeData.getter(v11, *(_QWORD *)(v12 + 8));
  if (v13)
  {
    v14 = v13;
    v15 = objc_msgSend(v13, "ratingCount");

    v16 = v15 == 0;
  }
  else
  {
    v16 = 1;
  }
  if (v9 || v16)
    return 0;
  else
    return *(_QWORD *)&v10;
}

BOOL sub_33B84(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *KeyPath;
  __n128 v10;
  uint64_t v11;
  _QWORD *v12;
  __n128 v13;
  _QWORD v15[3];
  char v16;
  unsigned __int8 v17;

  v3 = *(_QWORD *)(a1 - 8);
  v4 = __chkstk_darwin(a1);
  v6 = (char *)v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(v4 + 16);
  v8 = *(_QWORD *)(v4 + 24);
  v15[0] = v7;
  v15[1] = v8;
  KeyPath = (_QWORD *)swift_getKeyPath(&unk_1E2AB8);
  swift_getWitnessTable(&protocol conformance descriptor for ListItemMetadataFormatAndDescriptorBase<A>, a1);
  ViewModelWithExternals.subscript.getter(KeyPath);
  v10 = swift_release(KeyPath);
  LODWORD(KeyPath) = v17;
  v11 = (*(uint64_t (**)(char *, uint64_t, uint64_t, __n128))(v3 + 16))(v6, v1, a1, v10);
  if ((_DWORD)KeyPath == 1)
  {
    __chkstk_darwin(v11);
    v15[-2] = v7;
    v15[-1] = v8;
    v12 = (_QWORD *)swift_getKeyPath(&unk_1E2AE8);
    ViewModelWithExternals.subscript.getter(v12);
    v13 = swift_release(v12);
    (*(void (**)(char *, uint64_t, __n128))(v3 + 8))(v6, a1, v13);
    return v16 == 0;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, a1);
    return 0;
  }
}

uint64_t sub_33CE0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  Swift::String v4;
  Swift::String v6;
  char v7;
  void *v8;

  v0 = type metadata accessor for RedactionReasons(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4._countAndFlagsBits = 32;
  v4._object = (void *)0xE100000000000000;
  v6 = String.init(repeating:count:)(v4, 12);
  v7 = 0;
  v8 = &_swiftEmptyArrayStorage;
  static RedactionReasons.placeholder.getter();
  View.redacted(reason:)(v3, &type metadata for Text, &protocol witness table for Text);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  sub_2B574(v6._countAndFlagsBits, (uint64_t)v6._object, v7);
  return swift_bridgeObjectRelease(v8);
}

uint64_t sub_33DBC(Swift::String string)
{
  void *object;
  Swift::String v2;
  Swift::Int v3;
  unsigned int v4;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_249640, v2);
  swift_bridgeObjectRelease(object);
  if (v3 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (v3)
    return v4;
  else
    return 0;
}

uint64_t sub_33E0C(char a1)
{
  if ((a1 & 1) != 0)
    return 0x666E497465737361;
  else
    return 0x6D726F46776F6873;
}

uint64_t sub_33E54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_1E29C8, a3);
  return == infix<A>(_:_:)(a1, a2, a3, WitnessTable, &protocol witness table for String);
}

uint64_t sub_33EA8(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_1E29C8, a1);
  return RawRepresentable<>.hashValue.getter(a1, a2, WitnessTable, &protocol witness table for String);
}

uint64_t sub_33EF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_1E29C8, a2);
  return RawRepresentable<>.hash(into:)(a1, a2, a3, WitnessTable, &protocol witness table for String);
}

uint64_t sub_33F44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_1E29C8, a2);
  return RawRepresentable<>._rawHashValue(seed:)(a1, a2, a3, WitnessTable, &protocol witness table for String);
}

uint64_t sub_33F94@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  void *v3;
  uint64_t result;
  Swift::String v5;

  v3 = (void *)a1[1];
  v5._countAndFlagsBits = *a1;
  v5._object = v3;
  result = sub_33DBC(v5);
  *a2 = result;
  return result;
}

uint64_t sub_33FC8@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_33E0C(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_33FF8()
{
  char *v0;

  return sub_33E0C(*v0);
}

uint64_t sub_34008@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_33DBC(a1);
  *a2 = result;
  return result;
}

uint64_t sub_34034@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_35C54();
  *a1 = result;
  return result;
}

uint64_t sub_3405C(uint64_t a1)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_1E2A68, a1);
  return CodingKey.description.getter(a1, WitnessTable);
}

uint64_t sub_34090(uint64_t a1)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_1E2A68, a1);
  return CodingKey.debugDescription.getter(a1, WitnessTable);
}

uint64_t ListItemMetadataFormatAndDescriptorBase.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t KeyPath;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  void (*v24)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  char *v31;
  void (*v32)(char *, uint64_t);
  uint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  Swift::String v40;
  Swift::String v41;
  void *object;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  _BYTE *v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t WitnessTable;
  uint64_t v69;
  id v70;
  char *v71;
  __int128 v72;
  uint64_t v73;
  void *v74;
  __int128 v75;
  __int128 v76;
  _BYTE v77[27];
  uint64_t v78;
  char v79;
  uint64_t v80;
  char v81;
  _QWORD *v82;

  v82 = a1;
  v63 = a5;
  v69 = type metadata accessor for ListItemMetadataFormatAndDescriptorBase.CodingKeys(255, a2, a3, a4);
  WitnessTable = swift_getWitnessTable(&unk_1E2A68, v69);
  v67 = type metadata accessor for KeyedDecodingContainer(0, v69);
  v64 = *(_QWORD *)(v67 - 8);
  __chkstk_darwin(v67);
  v71 = (char *)&v63 - v7;
  v66 = type metadata accessor for Optional(0, a2);
  v65 = *(_QWORD *)(v66 - 8);
  v8 = __chkstk_darwin(v66);
  v10 = (char *)&v63 - v9;
  v11 = *(_QWORD *)(a2 - 8);
  __chkstk_darwin(v8);
  v13 = (char *)&v63 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for ListItemMetadataFormatAndDescriptorBase(0, a2, a3, v14);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v63 - v17;
  KeyPath = swift_getKeyPath(&unk_1E2650);
  v20 = swift_getKeyPath(&unk_1E2678);
  v21 = swift_getKeyPath(&unk_1E26A0);
  v74 = (void *)KeyPath;
  v22 = a2;
  v75 = 0u;
  v76 = 0u;
  memset(v77, 0, sizeof(v77));
  v78 = v20;
  v79 = 0;
  v80 = v21;
  v81 = 0;
  v23 = swift_dynamicCast(v10, &v74, &type metadata for ListItemMetadataFormatAndDescriptorExternals, a2, 6);
  v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
  if ((v23 & 1) == 0)
  {
    v24(v10, 1, 1, a2);
    (*(void (**)(char *, uint64_t))(v65 + 8))(v10, v66);
    v33 = type metadata accessor for DecodingError(0);
    swift_allocError(v33, &protocol witness table for DecodingError, 0, 0);
    v35 = v34;
    v71 = (char *)v34 + *(int *)(sub_5440(&qword_25F8F8) + 48);
    *v35 = a2;
    v36 = v82;
    v37 = v82[3];
    v38 = v82[4];
    sub_5480(v82, v37);
    v39 = dispatch thunk of Decoder.codingPath.getter(v37, v38);
    v74 = 0;
    *(_QWORD *)&v75 = 0xE000000000000000;
    _StringGuts.grow(_:)(97);
    v40._countAndFlagsBits = 0xD00000000000005FLL;
    v40._object = (void *)0x80000000001F9F90;
    String.append(_:)(v40);
    v41._countAndFlagsBits = _typeName(_:qualified:)(a2, 0);
    object = v41._object;
    String.append(_:)(v41);
    swift_bridgeObjectRelease(object);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)(v39, v74, v75, 0);
    v43 = (*(uint64_t (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v33 - 8) + 104))(v35, enum case for DecodingError.typeMismatch(_:), v33);
    swift_willThrow(v43);
    return _s7BooksUI13AnyPagedFrameVwxx_0(v36);
  }
  v65 = v16;
  v25 = v67;
  v66 = v15;
  v24(v10, 0, 1, v22);
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v13, v10, v22);
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v18, v13, v22);
  v26 = v11;
  v27 = v22;
  v28 = v82[3];
  v29 = v82[4];
  sub_5480(v82, v28);
  v30 = v70;
  dispatch thunk of Decoder.container<A>(keyedBy:)(v69, v69, WitnessTable, v28, v29);
  v31 = v18;
  if (v30)
  {
    v32 = *(void (**)(char *, uint64_t))(v26 + 8);
    v32(v13, v27);
LABEL_6:
    _s7BooksUI13AnyPagedFrameVwxx_0(v82);
    return ((uint64_t (*)(char *, uint64_t))v32)(v31, v27);
  }
  v44 = v26;
  v45 = v13;
  v46 = sub_5440(&qword_25F900);
  LOBYTE(v72) = 1;
  v47 = sub_34E9C();
  v48 = v71;
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v74, v46, &v72, v25, v46, v47);
  v50 = v74;
  static ContentInfoUtilities.assetInfo(storeAsset:)(&v72, v74);
  v70 = v50;
  if (!v73)
  {
    sub_B414((uint64_t)&v72, &qword_25F910);
    v52 = type metadata accessor for DecodingError(0);
    swift_allocError(v52, &protocol witness table for DecodingError, 0, 0);
    v69 = (uint64_t)v31;
    v54 = v53;
    v55 = KeyedDecodingContainer.codingPath.getter(v25);
    v56 = sub_34EE8();
    v57 = swift_allocError(&type metadata for ListItemDecodingError, v56, 0, 0);
    *v58 = 0;
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)(v55, 0xD00000000000001ALL, 0x80000000001F9FF0, v57);
    v59 = v54;
    v31 = (char *)v69;
    v60 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v52 - 8) + 104))(v59, enum case for DecodingError.dataCorrupted(_:), v52);
    swift_willThrow(v60);

    (*(void (**)(char *, uint64_t))(v64 + 8))(v48, v25);
    v32 = *(void (**)(char *, uint64_t))(v44 + 8);
    v32(v45, v27);
    goto LABEL_6;
  }
  sub_AC68(&v72, (uint64_t)&v74);
  v51 = v66;
  sub_BD00((uint64_t)&v74, (uint64_t)&v31[*(int *)(v66 + 40)]);
  LOBYTE(v72) = 0;
  v61 = KeyedDecodingContainer.decode(_:forKey:)(&v72, v25);

  _s7BooksUI13AnyPagedFrameVwxx_0(&v74);
  (*(void (**)(char *, uint64_t))(v64 + 8))(v48, v25);
  (*(void (**)(char *, uint64_t))(v44 + 8))(v45, v27);
  v31[*(int *)(v51 + 36)] = v61 & 1;
  v62 = v65;
  (*(void (**)(uint64_t, char *, uint64_t))(v65 + 16))(v63, v31, v51);
  _s7BooksUI13AnyPagedFrameVwxx_0(v82);
  return (*(uint64_t (**)(char *, uint64_t))(v62 + 8))(v31, v51);
}

uint64_t sub_34748@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  return ListItemMetadataFormatAndDescriptorBase.init(from:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a3, a4);
}

_QWORD *sub_34768@<X0>(_BYTE *a1@<X8>)
{
  unint64_t v2;
  _QWORD *result;
  uint64_t v4;

  v2 = sub_35C68();
  result = EnvironmentValues.subscript.getter(&v4, &type metadata for IsPendingData, &type metadata for IsPendingData, v2);
  *a1 = v4;
  return result;
}

uint64_t sub_347B4(char *a1)
{
  unint64_t v1;
  char v3;

  v3 = *a1;
  v1 = sub_35C68();
  return EnvironmentValues.subscript.setter(&v3, &type metadata for IsPendingData, &type metadata for IsPendingData, v1);
}

uint64_t sub_3480C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int16 a9, char a10)
{
  if ((a10 & 1) != 0)
    return swift_bridgeObjectRetain(a2);
  else
    return swift_retain(a1);
}

uint64_t sub_34820(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))
{
  int v4;

  BYTE2(v4) = *(_BYTE *)(a1 + 66);
  LOWORD(v4) = *(_WORD *)(a1 + 64);
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), v4);
  return a1;
}

uint64_t sub_34878()
{
  return 16;
}

__n128 sub_34884(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

unint64_t sub_34890()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25F8C0;
  if (!qword_25F8C0)
  {
    v1 = sub_7EF8(&qword_25F8B8);
    sub_348F4();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_25F8C0);
  }
  return result;
}

unint64_t sub_348F4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25F8C8;
  if (!qword_25F8C8)
  {
    v1 = sub_7EF8(&qword_25F8D0);
    sub_34978();
    sub_35AD0(&qword_25F8E8, &qword_25F8A8, (void (*)(void))sub_349D4);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_25F8C8);
  }
  return result;
}

unint64_t sub_34978()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25F8D8;
  if (!qword_25F8D8)
  {
    v1 = sub_7EF8(&qword_25F8E0);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_25F8D8);
  }
  return result;
}

unint64_t sub_349D4()
{
  unint64_t result;

  result = qword_25F8F0;
  if (!qword_25F8F0)
  {
    result = swift_getWitnessTable(&unk_1F44BC, &type metadata for ListItemMetadataRatingView);
    atomic_store(result, (unint64_t *)&qword_25F8F0);
  }
  return result;
}

_QWORD *sub_34A18@<X0>(_BYTE *a1@<X8>)
{
  unint64_t v2;
  _QWORD *result;
  uint64_t v4;

  v2 = sub_35C68();
  result = EnvironmentValues.subscript.getter(&v4, &type metadata for IsPendingData, &type metadata for IsPendingData, v2);
  *a1 = v4;
  return result;
}

uint64_t sub_34A64(char *a1)
{
  unint64_t v1;
  char v3;

  v3 = *a1;
  v1 = sub_35C68();
  return EnvironmentValues.subscript.setter(&v3, &type metadata for IsPendingData, &type metadata for IsPendingData, v1);
}

uint64_t sub_34AAC(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for ListItemMetadataRatingView(a2, a1);
  return a2;
}

uint64_t sub_34AE8(uint64_t a1)
{
  destroy for ListItemMetadataRatingView(a1);
  return a1;
}

uint64_t sub_34B1C(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_retain(a1);
  else
    return swift_bridgeObjectRetain(a2);
}

uint64_t sub_34B2C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  _BYTE *v29;
  uint64_t v30;
  _BYTE *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _BYTE v52[12];
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  _BYTE *v56;
  _BYTE *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD v63[9];

  v62 = a1;
  v1 = type metadata accessor for LocalizerLookupStrategy(0);
  v58 = *(_QWORD *)(v1 - 8);
  v59 = v1;
  __chkstk_darwin(v1);
  v57 = &v52[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v3 = type metadata accessor for LocalizerDefaultValue(0);
  v60 = *(_QWORD *)(v3 - 8);
  v61 = v3;
  __chkstk_darwin(v3);
  v5 = &v52[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = type metadata accessor for LocalizerRequest(0);
  __chkstk_darwin(v6);
  v56 = &v52[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = Image.init(systemName:)(0xD000000000000015, 0x80000000001FA220);
  v9 = Text.init(_:)(v8);
  v11 = v10;
  v13 = v12;
  v15 = v14 & 1;
  v16 = static Color.cyan.getter();
  v63[0] = v16;
  v17 = Text.foregroundStyle<A>(_:)(v63, v9, v11, v15, v13, &type metadata for Color, &protocol witness table for Color);
  v19 = v18;
  v21 = v20;
  v23 = v22 & 1;
  sub_2B574(v9, v11, v15);
  swift_release(v16);
  swift_bridgeObjectRelease(v13);
  v24 = static Text.+ infix(_:_:)(v17, v19, v23, v21, 32, 0xE100000000000000, 0, &_swiftEmptyArrayStorage);
  v54 = v25;
  v55 = v26;
  v53 = v27 & 1;
  sub_2B574(v17, v19, v23);
  swift_bridgeObjectRelease(v21);
  LocalizerDefaultValue.init(stringLiteral:)("Finished", 8, 2);
  v29 = v57;
  v28 = v58;
  v30 = v59;
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v58 + 104))(v57, enum case for LocalizerLookupStrategy.default(_:), v59);
  v31 = v56;
  static LocalizerRequest.string(forKey:with:defaultValue:using:)(0xD000000000000016, 0x80000000001FA240, 0, v5, v29);
  (*(void (**)(_BYTE *, uint64_t))(v28 + 8))(v29, v30);
  (*(void (**)(_BYTE *, uint64_t))(v60 + 8))(v5, v61);
  sub_BD00(v62, (uint64_t)v63);
  v32 = Text.init(_:localizer:)(v31, v63);
  v34 = v33;
  v36 = v35;
  v38 = v37 & 1;
  v39 = _s7BooksUI14ColorConstantsV19booksSecondaryLabel05SwiftB00C0Vvg_0();
  v40 = Text.foregroundColor(_:)(v39, v32, v34, v38, v36);
  v42 = v41;
  LOBYTE(v11) = v43;
  v45 = v44;
  swift_release(v39);
  v46 = v11 & 1;
  sub_2B574(v32, v34, v38);
  swift_bridgeObjectRelease(v36);
  v47 = v54;
  v48 = v55;
  LOBYTE(v34) = v53;
  v49 = static Text.+ infix(_:_:)(v24, v54, v53, v55, v40, v42, v46, v45);
  v61 = v50;
  v62 = v49;
  sub_2B574(v40, v42, v46);
  swift_bridgeObjectRelease(v45);
  sub_2B574(v24, v47, v34);
  swift_bridgeObjectRelease(v48);
  return v62;
}

uint64_t type metadata accessor for ListItemMetadataFormatAndDescriptorBase.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10E40(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ListItemMetadataFormatAndDescriptorBase.CodingKeys);
}

uint64_t type metadata accessor for ListItemMetadataFormatAndDescriptorBase(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10E40(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ListItemMetadataFormatAndDescriptorBase);
}

unint64_t sub_34E9C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25F908;
  if (!qword_25F908)
  {
    v1 = sub_7EF8(&qword_25F900);
    result = swift_getWitnessTable(&protocol conformance descriptor for MResourceDecoder<A>, v1);
    atomic_store(result, (unint64_t *)&qword_25F908);
  }
  return result;
}

unint64_t sub_34EE8()
{
  unint64_t result;

  result = qword_25F918;
  if (!qword_25F918)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ListItemDecodingError, &type metadata for ListItemDecodingError);
    atomic_store(result, (unint64_t *)&qword_25F918);
  }
  return result;
}

unint64_t sub_34F2C(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = sub_34F58();
  result = sub_34F9C();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_34F58()
{
  unint64_t result;

  result = qword_25F920;
  if (!qword_25F920)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ListItemMetadataFormatAndDescriptorExternals, &type metadata for ListItemMetadataFormatAndDescriptorExternals);
    atomic_store(result, (unint64_t *)&qword_25F920);
  }
  return result;
}

unint64_t sub_34F9C()
{
  unint64_t result;

  result = qword_25F928;
  if (!qword_25F928)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ListItemMetadataFormatAndDescriptorExternals, &type metadata for ListItemMetadataFormatAndDescriptorExternals);
    atomic_store(result, (unint64_t *)&qword_25F928);
  }
  return result;
}

uint64_t sub_34FE0(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  return swift_getOpaqueTypeConformance2(&v3, &opaque type descriptor for <<opaque return type of ListItemMetadataFormatAndDescriptorBase.content(localizer:)>>, 1);
}

uint64_t sub_35014(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = swift_getWitnessTable(&protocol conformance descriptor for ListItemMetadataFormatAndDescriptorBase<A>, a2);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_35040(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(*(_QWORD *)(a2 + 24) + 16);
}

uint64_t sub_3504C(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = swift_getWitnessTable(&protocol conformance descriptor for ListItemMetadataFormatAndDescriptorBase<A>, a2);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_35078(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = swift_getWitnessTable(&protocol conformance descriptor for ListItemMetadataFormatAndDescriptorBase<A>, a2);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_350A4(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = swift_getWitnessTable(&protocol conformance descriptor for ListItemMetadataFormatAndDescriptorBase<A>, a2);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t destroy for ListItemMetadataFormatAndDescriptorExternals(uint64_t a1)
{
  sub_BDF8(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_WORD *)(a1 + 64), *(_BYTE *)(a1 + 66));
  sub_BE0C(*(_QWORD *)(a1 + 72), *(_BYTE *)(a1 + 80));
  return sub_BE0C(*(_QWORD *)(a1 + 88), *(_BYTE *)(a1 + 96));
}

uint64_t initializeWithCopy for ListItemMetadataFormatAndDescriptorExternals(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int16 v15;
  char v16;

  v2 = a2;
  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a2 + 56);
  v15 = *(_WORD *)(a2 + 64);
  v16 = *(_BYTE *)(a2 + 66);
  sub_3480C(*(_QWORD *)a2, v5, v6, v7, v8, v9, v10, v11, v15, v16);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 40) = v9;
  *(_QWORD *)(a1 + 48) = v10;
  *(_QWORD *)(a1 + 56) = v11;
  *(_WORD *)(a1 + 64) = v15;
  *(_BYTE *)(a1 + 66) = v16;
  v12 = *(_QWORD *)(v2 + 72);
  LOBYTE(v5) = *(_BYTE *)(v2 + 80);
  sub_F9E4(v12, v5);
  *(_QWORD *)(a1 + 72) = v12;
  *(_BYTE *)(a1 + 80) = v5;
  v13 = *(_QWORD *)(v2 + 88);
  LOBYTE(v2) = *(_BYTE *)(v2 + 96);
  sub_F9E4(v13, v2);
  *(_QWORD *)(a1 + 88) = v13;
  *(_BYTE *)(a1 + 96) = v2;
  return a1;
}

uint64_t assignWithCopy for ListItemMetadataFormatAndDescriptorExternals(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int16 v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  __int16 v29;
  char v30;

  v2 = a2;
  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a2 + 56);
  v29 = *(_WORD *)(a2 + 64);
  v30 = *(_BYTE *)(a2 + 66);
  sub_3480C(*(_QWORD *)a2, v5, v6, v7, v8, v9, v10, v11, v29, v30);
  v12 = *(_QWORD *)a1;
  v13 = *(_QWORD *)(a1 + 8);
  v14 = *(_QWORD *)(a1 + 16);
  v15 = *(_QWORD *)(a1 + 24);
  v16 = *(_QWORD *)(a1 + 32);
  v17 = *(_QWORD *)(a1 + 40);
  v18 = *(_QWORD *)(a1 + 48);
  v19 = *(_QWORD *)(a1 + 56);
  v20 = *(_WORD *)(a1 + 64);
  v21 = *(_BYTE *)(a1 + 66);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 40) = v9;
  *(_QWORD *)(a1 + 48) = v10;
  *(_QWORD *)(a1 + 56) = v11;
  *(_WORD *)(a1 + 64) = v29;
  *(_BYTE *)(a1 + 66) = v30;
  sub_BDF8(v12, v13, v14, v15, v16, v17, v18, v19, v20, v21);
  v22 = *(_QWORD *)(v2 + 72);
  LOBYTE(v5) = *(_BYTE *)(v2 + 80);
  sub_F9E4(v22, v5);
  v23 = *(_QWORD *)(a1 + 72);
  v24 = *(_BYTE *)(a1 + 80);
  *(_QWORD *)(a1 + 72) = v22;
  *(_BYTE *)(a1 + 80) = v5;
  sub_BE0C(v23, v24);
  v25 = *(_QWORD *)(v2 + 88);
  LOBYTE(v2) = *(_BYTE *)(v2 + 96);
  sub_F9E4(v25, v2);
  v26 = *(_QWORD *)(a1 + 88);
  v27 = *(_BYTE *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = v25;
  *(_BYTE *)(a1 + 96) = v2;
  sub_BE0C(v26, v27);
  return a1;
}

__n128 initializeWithTake for ListItemMetadataFormatAndDescriptorExternals(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  result = (__n128)a2[3];
  v5 = a2[4];
  v6 = a2[5];
  *(_BYTE *)(a1 + 96) = *((_BYTE *)a2 + 96);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t assignWithTake for ListItemMetadataFormatAndDescriptorExternals(uint64_t a1, uint64_t a2)
{
  __int16 v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int16 v14;
  char v15;
  __int128 v16;
  __int128 v17;
  char v18;
  uint64_t v19;
  char v20;
  char v21;
  uint64_t v22;
  char v23;

  v4 = *(_WORD *)(a2 + 64);
  v5 = *(_BYTE *)(a2 + 66);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_QWORD *)(a1 + 24);
  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(_QWORD *)(a1 + 40);
  v12 = *(_QWORD *)(a1 + 48);
  v13 = *(_QWORD *)(a1 + 56);
  v14 = *(_WORD *)(a1 + 64);
  v15 = *(_BYTE *)(a1 + 66);
  v16 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v16;
  v17 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v17;
  *(_WORD *)(a1 + 64) = v4;
  *(_BYTE *)(a1 + 66) = v5;
  sub_BDF8(v6, v7, v8, v9, v10, v11, v12, v13, v14, v15);
  v18 = *(_BYTE *)(a2 + 80);
  v19 = *(_QWORD *)(a1 + 72);
  v20 = *(_BYTE *)(a1 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = v18;
  sub_BE0C(v19, v20);
  v21 = *(_BYTE *)(a2 + 96);
  v22 = *(_QWORD *)(a1 + 88);
  v23 = *(_BYTE *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 96) = v21;
  sub_BE0C(v22, v23);
  return a1;
}

uint64_t getEnumTagSinglePayload for ListItemMetadataFormatAndDescriptorExternals(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 97))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 66);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ListItemMetadataFormatAndDescriptorExternals(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 96) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 97) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 97) = 0;
    if (a2)
      *(_BYTE *)(result + 66) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for ListItemMetadataFormatAndDescriptorExternals()
{
  return &type metadata for ListItemMetadataFormatAndDescriptorExternals;
}

uint64_t sub_354D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 32);
}

uint64_t sub_354DC(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 16));
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_1E2918;
    v4[2] = &unk_1E2930;
    swift_initStructMetadata(a1, 0, 3, v4, a1 + 32);
    return 0;
  }
  return result;
}

_QWORD *sub_3555C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || (v6 & 0xFFFFFFFFFFFFFFF8) + 48 > 0x18)
  {
    v9 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain(v9);
  }
  else
  {
    (*(void (**)(_QWORD *, _QWORD *))(v5 + 16))(a1, a2);
    *((_BYTE *)v4 + v6) = *((_BYTE *)a2 + v6);
    v10 = ((unint64_t)v4 + v6) & 0xFFFFFFFFFFFFFFF8;
    v11 = ((unint64_t)a2 + v6) & 0xFFFFFFFFFFFFFFF8;
    v12 = *(_QWORD *)(v11 + 32);
    *(_QWORD *)(v10 + 32) = v12;
    *(_QWORD *)(v10 + 40) = *(_QWORD *)(v11 + 40);
    (**(void (***)(uint64_t, uint64_t))(v12 - 8))(v10 + 8, v11 + 8);
  }
  return v4;
}

uint64_t sub_35624(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  (*(void (**)(void))(v3 + 8))();
  return _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)(((*(_QWORD *)(v3 + 64) + a1) & 0xFFFFFFFFFFFFFFF8) + 8));
}

uint64_t sub_35660(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = v6 + a1;
  v8 = v6 + a2;
  *(_BYTE *)v7 = *(_BYTE *)v8;
  v7 &= 0xFFFFFFFFFFFFFFF8;
  v8 &= 0xFFFFFFFFFFFFFFF8;
  v9 = *(_QWORD *)(v8 + 32);
  *(_QWORD *)(v7 + 32) = v9;
  *(_QWORD *)(v7 + 40) = *(_QWORD *)(v8 + 40);
  (**(void (***)(uint64_t, uint64_t))(v9 - 8))(v7 + 8, v8 + 8);
  return a1;
}

uint64_t sub_356DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = v6 + a1;
  v8 = v6 + a2;
  *(_BYTE *)v7 = *(_BYTE *)v8;
  sub_142F8((_QWORD *)((v7 & 0xFFFFFFFFFFFFFFF8) + 8), (_QWORD *)((v8 & 0xFFFFFFFFFFFFFFF8) + 8));
  return a1;
}

uint64_t sub_35740(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = v6 + a1;
  v8 = v6 + a2;
  *(_BYTE *)v7 = *(_BYTE *)v8;
  v7 &= 0xFFFFFFFFFFFFFFF8;
  v8 &= 0xFFFFFFFFFFFFFFF8;
  v9 = *(_OWORD *)(v8 + 24);
  v10 = *(_QWORD *)(v8 + 40);
  *(_OWORD *)(v7 + 8) = *(_OWORD *)(v8 + 8);
  *(_QWORD *)(v7 + 40) = v10;
  *(_OWORD *)(v7 + 24) = v9;
  return a1;
}

uint64_t sub_357B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  __int128 v11;
  __int128 v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = v6 + a1;
  v8 = v6 + a2;
  *(_BYTE *)v7 = *(_BYTE *)v8;
  v9 = v7 & 0xFFFFFFFFFFFFFFF8;
  v10 = v8 & 0xFFFFFFFFFFFFFFF8;
  _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)((v7 & 0xFFFFFFFFFFFFFFF8) + 8));
  v11 = *(_OWORD *)(v10 + 8);
  v12 = *(_OWORD *)(v10 + 24);
  *(_QWORD *)(v9 + 40) = *(_QWORD *)(v10 + 40);
  *(_OWORD *)(v9 + 24) = v12;
  *(_OWORD *)(v9 + 8) = v11;
  return a1;
}

uint64_t sub_35828(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFF)
    {
      v12 = *(_QWORD *)((char *)&stru_20.cmd + ((v7 + a1) & 0xFFFFFFFFFFFFF8));
      if (v12 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      return (v12 + 1);
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    if ((((v7 & 0xFFFFFFFFFFFFFFF8) + 48) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_358A0 + 4 * byte_1E2630[v10]))();
  }
}

void sub_35920(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if ((*(_DWORD *)(v5 + 64) & 0xFFFFFFF8) == 0xFFFFFFD0)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X12 }
  }
  if ((*(_DWORD *)(v5 + 64) & 0xFFFFFFF8) != 0xFFFFFFD0)
  {
    v10 = ~v6 + a2;
    bzero(a1, (*(_QWORD *)(v5 + 64) & 0xFFFFFFFFFFFFFFF8) + 48);
    *a1 = v10;
  }
  __asm { BR              X10 }
}

void sub_35A10()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x35A8CLL);
}

void sub_35A18(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x35A20);
  JUMPOUT(0x35A8CLL);
}

void sub_35A60()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x35A8CLL);
}

void sub_35A68()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x35A8CLL);
}

uint64_t sub_35A70(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_WORD *)(v6 + v7) = 0;
  if (!a2)
    goto LABEL_6;
  if (a3 < 0x7FFFFFFF)
  {
    if (a2 < 0)
      JUMPOUT(0x35A7CLL);
    *(_QWORD *)(((v5 + v6) & 0xFFFFFFFFFFFFFFF8) + 32) = (a2 - 1);
LABEL_6:
    JUMPOUT(0x35A8CLL);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v6);
}

uint64_t sub_35AA4()
{
  return sub_35AD0(&qword_25FA00, qword_25FA08, (void (*)(void))sub_34890);
}

uint64_t sub_35AD0(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result;
  uint64_t v6;
  _QWORD v7[2];

  result = *a1;
  if (!result)
  {
    v6 = sub_7EF8(a2);
    v7[0] = &type metadata for Text;
    v7[1] = &protocol witness table for Text;
    a3();
    swift_getOpaqueTypeConformance2(v7, &opaque type descriptor for <<opaque return type of View.redacted(reason:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_35B60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 16);
}

uint64_t sub_35B68(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_35BB4 + 4 * byte_1E2644[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_35BE8 + 4 * byte_1E263F[v4]))();
}

uint64_t sub_35BE8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_35BF0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x35BF8);
  return result;
}

uint64_t sub_35C04(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x35C0CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_35C10(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_35C18(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_35C24(uint64_t a1)
{
  return swift_getWitnessTable(&unk_1E2A40, a1);
}

uint64_t sub_35C34(uint64_t a1)
{
  return swift_getWitnessTable(&unk_1E2978, a1);
}

uint64_t sub_35C44(uint64_t a1)
{
  return swift_getWitnessTable(&unk_1E29A0, a1);
}

uint64_t sub_35C54()
{
  return 2;
}

uint64_t sub_35C5C(uint64_t result, uint64_t a2, char a3)
{
  if ((a3 & 1) == 0)
    return swift_release(result);
  return result;
}

unint64_t sub_35C68()
{
  unint64_t result;

  result = qword_25FB28;
  if (!qword_25FB28)
  {
    result = swift_getWitnessTable(&unk_1F8C30, &type metadata for IsPendingData);
    atomic_store(result, (unint64_t *)&qword_25FB28);
  }
  return result;
}

uint64_t sub_35CAC@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)(a2 + a1 - 8) + 32))(*(_QWORD *)(a2 + a1 - 16));
  *a3 = result & 1;
  return result;
}

uint64_t sub_35CE8()
{
  return 16;
}

__n128 sub_35CF4(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

_QWORD *sub_35D00@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, _BYTE *a3@<X8>)
{
  _QWORD *result;
  uint64_t v5;

  result = (*(_QWORD *(**)(uint64_t *__return_ptr, _QWORD))(*(_QWORD *)(a2 + a1 - 8) + 40))(&v5, *(_QWORD *)(a2 + a1 - 16));
  *a3 = v5;
  return result;
}

uint64_t sub_35D48()
{
  return 16;
}

__n128 sub_35D54(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t ListItemMetadataRecommendationCreatorDescriptionExternals.isCompact.getter()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  char v3;

  v1 = *(_QWORD *)v0;
  v2 = *(_BYTE *)(v0 + 8);
  sub_F9E4(v1, v2);
  v3 = sub_30DB4(v1, v2);
  sub_BE0C(v1, v2);
  return v3 & 1;
}

uint64_t SegmentedControl.init(model:containingShelfID:style:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  char v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  _QWORD *v20;

  v13 = *a4;
  *(_QWORD *)a7 = swift_getKeyPath(&unk_1E2B50);
  *(_BYTE *)(a7 + 8) = 0;
  v15 = (int *)type metadata accessor for SegmentedControl(0, a5, a6, v14);
  *(_QWORD *)(a7 + v15[12]) = 0;
  v16 = a7 + v15[9];
  v18 = type metadata accessor for SegmentedControlViewModel(0, a5, a6, v17);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v16, a1, v18);
  v20 = (_QWORD *)(a7 + v15[10]);
  *v20 = a2;
  v20[1] = a3;
  *(_BYTE *)(a7 + v15[11]) = v13;
  return result;
}

uint64_t SegmentedControl.items.getter(uint64_t a1)
{
  uint64_t v1;

  v1 = sub_3AC70(a1);
  return swift_bridgeObjectRetain(v1);
}

uint64_t SegmentedControl.selection.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = v3 + *(int *)(a1 + 36);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = v5 + *(int *)(type metadata accessor for SegmentedControlViewModel(0, v6, *(_QWORD *)(a1 + 24), a2) + 36);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a3, v7, v6);
}

uint64_t SegmentedControl.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t WitnessTable;
  uint64_t v7;
  uint64_t v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t AssociatedConformanceWitness;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t OpaqueTypeConformance2;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t OpaqueTypeMetadata2;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void (*v85)(uint64_t, uint64_t);
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v103;
  uint64_t v104;
  uint64_t *v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;

  v136 = a2;
  v122 = type metadata accessor for ScrollBounceBehavior(0);
  v121 = *(_QWORD *)(v122 - 8);
  __chkstk_darwin(v122);
  v120 = (char *)&v103 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = *(_QWORD *)(a1 + 16);
  v5 = type metadata accessor for Array(255, v4);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v5);
  v119 = v5;
  v7 = type metadata accessor for IndexedRandomAccessCollection(255, v5, WitnessTable);
  v124 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(v124 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v8, v4, &protocol requirements base descriptor for Identifiable, &associated type descriptor for Identifiable.ID);
  v10 = sub_7EF8(&qword_25FB30);
  v11 = swift_getWitnessTable(&protocol conformance descriptor for IndexedRandomAccessCollection<A>, v7);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v8, v4, AssociatedTypeWitness, &protocol requirements base descriptor for Identifiable, &associated conformance descriptor for Identifiable.Identifiable.ID: Hashable);
  v141 = v7;
  v142 = AssociatedTypeWitness;
  v143 = v10;
  v144 = v11;
  v145 = AssociatedConformanceWitness;
  v13 = type metadata accessor for ForEach(255, &v141);
  v14 = sub_7EF8(&qword_25FB38);
  v15 = sub_7EF8(&qword_25FB40);
  v16 = sub_3AC7C();
  v141 = v15;
  v142 = v16;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v141, &opaque type descriptor for <<opaque return type of View.transformMetricsContext(transform:)>>, 1);
  v141 = v14;
  v142 = OpaqueTypeConformance2;
  v140 = swift_getOpaqueTypeConformance2(&v141, &opaque type descriptor for <<opaque return type of View.impressionable(_:configuration:position:definesParentContext:)>>, 1);
  v18 = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v13);
  v19 = type metadata accessor for HStack(255, v13, v18);
  v20 = swift_getWitnessTable(&protocol conformance descriptor for HStack<A>, v19);
  v115 = v19;
  v113 = v20;
  v21 = type metadata accessor for ScrollView(0, v19);
  v118 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  v117 = (char *)&v103 - v22;
  v23 = swift_getWitnessTable(&protocol conformance descriptor for ScrollView<A>, v21);
  v141 = v21;
  v142 = v23;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(0, &v141, &opaque type descriptor for <<opaque return type of View.scrollBounceBehavior(_:axes:)>>, 0);
  v114 = *(_QWORD *)(OpaqueTypeMetadata2 - 8);
  __chkstk_darwin(OpaqueTypeMetadata2);
  v112 = (char *)&v103 - v25;
  v141 = v21;
  v142 = v23;
  v110 = v23;
  v134 = swift_getOpaqueTypeConformance2(&v141, &opaque type descriptor for <<opaque return type of View.scrollBounceBehavior(_:axes:)>>, 1);
  v135 = OpaqueTypeMetadata2;
  v141 = OpaqueTypeMetadata2;
  v142 = v134;
  v26 = swift_getOpaqueTypeMetadata2(0, &v141, &opaque type descriptor for <<opaque return type of View.scrollClipDisabled(_:)>>, 0);
  v111 = *(_QWORD *)(v26 - 8);
  v27 = __chkstk_darwin(v26);
  v109 = (char *)&v103 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27);
  v116 = (uint64_t)&v103 - v29;
  v107 = sub_5440(&qword_25FB68);
  __chkstk_darwin(v107);
  v106 = (char *)&v103 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v123 = sub_5440(&qword_25FB70);
  __chkstk_darwin(v123);
  v105 = (uint64_t *)((char *)&v103 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0));
  v104 = type metadata accessor for Optional(0, v4);
  v32 = *(_QWORD *)(v104 - 8);
  v33 = __chkstk_darwin(v104);
  v35 = (char *)&v103 - v34;
  v108 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v33);
  v37 = (char *)&v103 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v127 = sub_5440(&qword_25FB78);
  __chkstk_darwin(v127);
  v39 = (char *)&v103 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v126 = sub_5440(&qword_25FB80);
  __chkstk_darwin(v126);
  v125 = (uint64_t)&v103 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = sub_5440(&qword_25FB88);
  __chkstk_darwin(v41);
  v128 = (char *)&v103 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  v129 = v43;
  v133 = v26;
  v44 = type metadata accessor for _ConditionalContent(0, v43, v26);
  v131 = *(_QWORD *)(v44 - 8);
  v132 = v44;
  __chkstk_darwin(v44);
  v130 = (char *)&v103 - v45;
  v46 = a1;
  v47 = v137;
  v48 = *(_QWORD *)(v137 + *(int *)(a1 + 36));
  v49 = swift_bridgeObjectRetain(v48);
  v50 = v4;
  v51 = Array.count.getter(v49, v4);
  v52 = swift_bridgeObjectRelease(v48);
  if (v51 == 1)
  {
    v122 = v32;
    v141 = *(_QWORD *)(v47 + *(int *)(v46 + 36));
    v63 = v119;
    v64 = swift_getWitnessTable(&protocol conformance descriptor for [A], v119);
    Collection.first.getter(v63, v64);
    v65 = v108;
    v66 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v108 + 48))(v35, 1, v50);
    v57 = v135;
    v67 = (uint64_t)v39;
    v68 = (uint64_t)v106;
    v69 = v123;
    v70 = v107;
    if (v66 == 1)
    {
      (*(void (**)(char *, uint64_t))(v122 + 8))(v35, v104);
      swift_storeEnumTagMultiPayload(v68, v70, 1);
      v71 = sub_7FD8(&qword_25FBA0, &qword_25FB70, (uint64_t)&protocol conformance descriptor for HStack<A>);
      _ConditionalContent<>.init(storage:)(v68, v69, &type metadata for EmptyView, v71, &protocol witness table for EmptyView);
    }
    else
    {
      v87 = (*(uint64_t (**)(char *, char *, uint64_t))(v65 + 32))(v37, v35, v50);
      v88 = static VerticalAlignment.center.getter(v87);
      v89 = (uint64_t)v105;
      *v105 = v88;
      *(_QWORD *)(v89 + 8) = 0;
      *(_BYTE *)(v89 + 16) = 0;
      v90 = sub_5440(&qword_25FBA8);
      sub_369A4((uint64_t)v37, v50, v124, v89 + *(int *)(v90 + 44));
      sub_B3D0(v89, v68, &qword_25FB70);
      swift_storeEnumTagMultiPayload(v68, v70, 0);
      v91 = sub_7FD8(&qword_25FBA0, &qword_25FB70, (uint64_t)&protocol conformance descriptor for HStack<A>);
      _ConditionalContent<>.init(storage:)(v68, v123, &type metadata for EmptyView, v91, &protocol witness table for EmptyView);
      sub_B414(v89, &qword_25FB70);
      (*(void (**)(char *, uint64_t))(v65 + 8))(v37, v50);
    }
    v92 = v125;
    sub_B3D0(v67, v125, &qword_25FB78);
    swift_storeEnumTagMultiPayload(v92, v126, 1);
    v93 = sub_3ADBC();
    v94 = (uint64_t)v128;
    _ConditionalContent<>.init(storage:)(v92, &type metadata for EmptyView, v127, &protocol witness table for EmptyView, v93);
    v95 = sub_3AD50();
    v58 = v134;
    v141 = v57;
    v142 = v134;
    v96 = swift_getOpaqueTypeConformance2(&v141, &opaque type descriptor for <<opaque return type of View.scrollClipDisabled(_:)>>, 1);
    v60 = (uint64_t)v130;
    sub_17C7C(v94, v129, v133, v95, v96);
    sub_B414(v94, &qword_25FB88);
    v62 = v67;
    v61 = &qword_25FB78;
    goto LABEL_9;
  }
  if (!v51)
  {
    v53 = v125;
    swift_storeEnumTagMultiPayload(v125, v126, 0);
    v54 = sub_3ADBC();
    v55 = (uint64_t)v128;
    _ConditionalContent<>.init(storage:)(v53, &type metadata for EmptyView, v127, &protocol witness table for EmptyView, v54);
    v56 = sub_3AD50();
    v58 = v134;
    v57 = v135;
    v141 = v135;
    v142 = v134;
    v59 = swift_getOpaqueTypeConformance2(&v141, &opaque type descriptor for <<opaque return type of View.scrollClipDisabled(_:)>>, 1);
    v60 = (uint64_t)v130;
    sub_17C7C(v55, v129, v133, v56, v59);
    v61 = &qword_25FB88;
    v62 = v55;
LABEL_9:
    sub_B414(v62, v61);
    goto LABEL_10;
  }
  v72 = static Axis.Set.horizontal.getter(v52);
  v73 = __chkstk_darwin(v72);
  v74 = v124;
  *(&v103 - 4) = v50;
  *(&v103 - 3) = v74;
  *(&v103 - 2) = v47;
  v75 = v117;
  v76 = ScrollView.init(_:showsIndicators:content:)(v73, 0, sub_3AD44, &v103 - 6, v115, v113);
  v77 = v120;
  v78 = static ScrollBounceBehavior.basedOnSize.getter(v76);
  v79 = static Axis.Set.horizontal.getter(v78);
  v80 = v112;
  View.scrollBounceBehavior(_:axes:)(v77, v79, v21, v110);
  (*(void (**)(char *, uint64_t))(v121 + 8))(v77, v122);
  (*(void (**)(char *, uint64_t))(v118 + 8))(v75, v21);
  v81 = (uint64_t)v109;
  v58 = v134;
  v57 = v135;
  View.scrollClipDisabled(_:)(1, v135, v134);
  (*(void (**)(char *, uint64_t))(v114 + 8))(v80, v57);
  v141 = v57;
  v142 = v58;
  v82 = swift_getOpaqueTypeConformance2(&v141, &opaque type descriptor for <<opaque return type of View.scrollClipDisabled(_:)>>, 1);
  v83 = v116;
  v84 = v133;
  sub_10F80(v81, v133, v116);
  v85 = *(void (**)(uint64_t, uint64_t))(v111 + 8);
  v85(v81, v84);
  sub_C5C0(v83, v84, v81);
  v86 = sub_3AD50();
  v60 = (uint64_t)v130;
  sub_17D40(v81, v129, v84, v86, v82);
  v85(v81, v84);
  v85(v83, v84);
LABEL_10:
  v97 = v136;
  v99 = v131;
  v98 = v132;
  v100 = sub_3AD50();
  v141 = v57;
  v142 = v58;
  v101 = swift_getOpaqueTypeConformance2(&v141, &opaque type descriptor for <<opaque return type of View.scrollClipDisabled(_:)>>, 1);
  v138 = v100;
  v139 = v101;
  swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v98);
  sub_C5C0(v60, v98, v97);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v99 + 8))(v60, v98);
}

uint64_t sub_369A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  uint64_t v31;
  uint64_t KeyPath;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  double v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v54 = a1;
  v55 = a2;
  v53 = a4;
  v5 = sub_5440(&qword_25FE08);
  __chkstk_darwin(v5);
  v7 = (char *)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = type metadata accessor for Font.TextStyle(0);
  v8 = *(_QWORD *)(v46 - 8);
  __chkstk_darwin(v46);
  v10 = (char *)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for LocalizerRequest(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = type metadata accessor for LocalizedText(0);
  v48 = *(_QWORD *)(v50 - 8);
  __chkstk_darwin(v50);
  v15 = (char *)&v44 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = sub_5440(&qword_25FE10);
  __chkstk_darwin(v47);
  v17 = (char *)&v44 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = sub_5440(&qword_25FE18);
  __chkstk_darwin(v49);
  v19 = (char *)&v44 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = sub_5440(&qword_25FE20);
  v20 = __chkstk_darwin(v51);
  v52 = (uint64_t)&v44 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __chkstk_darwin(v20);
  v24 = (char *)&v44 - v23;
  __chkstk_darwin(v22);
  v26 = (char *)&v44 - v25;
  v45 = a3;
  (*(void (**)(uint64_t, uint64_t))(a3 + 24))(v55, a3);
  LocalizedText.init(_:)(v13);
  v27 = v46;
  (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v10, enum case for Font.TextStyle.title3(_:), v46);
  v28 = type metadata accessor for Font.Design(0);
  v29 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v7, 1, 1, v28);
  v30 = static Font.Weight.semibold.getter(v29);
  v31 = static Font.system(_:design:weight:)(v10, v7, *(_QWORD *)&v30, 0);
  sub_B414((uint64_t)v7, &qword_25FE08);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v27);
  KeyPath = swift_getKeyPath(&unk_1E2D88);
  v33 = v48;
  v34 = v50;
  (*(void (**)(char *, char *, uint64_t))(v48 + 16))(v17, v15, v50);
  v35 = (uint64_t *)&v17[*(int *)(v47 + 36)];
  *v35 = KeyPath;
  v35[1] = v31;
  (*(void (**)(char *, uint64_t))(v33 + 8))(v15, v34);
  v36 = _s7BooksUI14ColorConstantsV14vibrantPrimary05SwiftB00C0Vvg_0();
  v37 = swift_getKeyPath(&unk_1E2D58);
  sub_B3D0((uint64_t)v17, (uint64_t)v19, &qword_25FE10);
  v38 = (uint64_t *)&v19[*(int *)(v49 + 36)];
  *v38 = v37;
  v38[1] = v36;
  sub_B414((uint64_t)v17, &qword_25FE10);
  if (((*(uint64_t (**)(uint64_t))(v45 + 56))(v55) & 1) != 0)
    v39 = 0.3;
  else
    v39 = 1.0;
  sub_B3D0((uint64_t)v19, (uint64_t)v24, &qword_25FE18);
  *(double *)&v24[*(int *)(v51 + 36)] = v39;
  sub_B414((uint64_t)v19, &qword_25FE18);
  sub_167A4((uint64_t)v24, (uint64_t)v26, &qword_25FE20);
  v40 = v52;
  sub_B3D0((uint64_t)v26, v52, &qword_25FE20);
  v41 = v53;
  sub_B3D0(v40, v53, &qword_25FE20);
  v42 = v41 + *(int *)(sub_5440(&qword_25FE28) + 48);
  *(_QWORD *)v42 = 0;
  *(_BYTE *)(v42 + 8) = 1;
  sub_B414((uint64_t)v26, &qword_25FE20);
  return sub_B414(v40, &qword_25FE20);
}

uint64_t sub_36DD4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t WitnessTable;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t OpaqueTypeConformance2;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t);
  uint64_t v32;
  uint64_t v33;
  _BYTE v34[16];
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t AssociatedTypeWitness;
  uint64_t v41;
  uint64_t v42;
  uint64_t AssociatedConformanceWitness;

  v33 = a4;
  v7 = type metadata accessor for Array(255, a2);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v7);
  v9 = type metadata accessor for IndexedRandomAccessCollection(255, v7, WitnessTable);
  v10 = *(_QWORD *)(a3 + 8);
  v39 = v9;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v10, a2, &protocol requirements base descriptor for Identifiable, &associated type descriptor for Identifiable.ID);
  v41 = sub_7EF8(&qword_25FB30);
  v42 = swift_getWitnessTable(&protocol conformance descriptor for IndexedRandomAccessCollection<A>, v9);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v10, a2, AssociatedTypeWitness, &protocol requirements base descriptor for Identifiable, &associated conformance descriptor for Identifiable.Identifiable.ID: Hashable);
  v11 = type metadata accessor for ForEach(255, &v39);
  v12 = sub_7EF8(&qword_25FB38);
  v13 = sub_7EF8(&qword_25FB40);
  v14 = sub_3AC7C();
  v39 = v13;
  AssociatedTypeWitness = v14;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v39, &opaque type descriptor for <<opaque return type of View.transformMetricsContext(transform:)>>, 1);
  v39 = v12;
  AssociatedTypeWitness = OpaqueTypeConformance2;
  v38 = swift_getOpaqueTypeConformance2(&v39, &opaque type descriptor for <<opaque return type of View.impressionable(_:configuration:position:definesParentContext:)>>, 1);
  v16 = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v11);
  v17 = type metadata accessor for HStack(0, v11, v16);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = __chkstk_darwin(v17);
  v21 = (char *)&v32 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v23 = (char *)&v32 - v22;
  v25 = type metadata accessor for SegmentedControl(0, a2, a3, v24);
  v26 = sub_37048(v25);
  v28 = v27;
  v35 = a2;
  v36 = a3;
  v37 = a1;
  v29 = static VerticalAlignment.center.getter(v26);
  HStack.init(alignment:spacing:content:)(v29, v28, 0, sub_3CFCC, v34, v11, v16);
  swift_getWitnessTable(&protocol conformance descriptor for HStack<A>, v17);
  sub_10F80((uint64_t)v21, v17, (uint64_t)v23);
  v30 = *(void (**)(char *, uint64_t))(v18 + 8);
  v30(v21, v17);
  sub_C5C0((uint64_t)v23, v17, v33);
  return ((uint64_t (*)(char *, uint64_t))v30)(v23, v17);
}

uint64_t sub_37048(uint64_t result)
{
  uint64_t v1;

  if (!*(_BYTE *)(v1 + *(int *)(result + 44)) || *(_BYTE *)(v1 + *(int *)(result + 44)) != 1)
    return ListItemMetadataRecommendationCreatorDescriptionExternals.isCompact.getter();
  return result;
}

uint64_t sub_37094@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t AssociatedTypeWitness;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t OpaqueTypeConformance2;
  uint64_t v35;
  void (*v36)(char *, uint64_t);
  uint64_t v38;
  uint64_t WitnessTable;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t AssociatedConformanceWitness;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v42 = a1;
  v51 = a5;
  v41 = type metadata accessor for SegmentedControl(0, a2, a3, a4);
  v7 = *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64);
  v44 = *(_QWORD *)(v41 - 8);
  v45 = v7;
  __chkstk_darwin(v41);
  v43 = (char *)&v38 - v8;
  v9 = type metadata accessor for Array(255, a2);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v9);
  v10 = type metadata accessor for IndexedRandomAccessCollection(0, v9, WitnessTable);
  v49 = v10;
  __chkstk_darwin(v10);
  v40 = (char *)&v38 - v11;
  v12 = *(_QWORD *)(a3 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v12, a2, &protocol requirements base descriptor for Identifiable, &associated type descriptor for Identifiable.ID);
  v14 = sub_7EF8(&qword_25FB30);
  v48 = v14;
  v15 = swift_getWitnessTable(&protocol conformance descriptor for IndexedRandomAccessCollection<A>, v10);
  v47 = v15;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v12, a2, AssociatedTypeWitness, &protocol requirements base descriptor for Identifiable, &associated conformance descriptor for Identifiable.Identifiable.ID: Hashable);
  v55 = v10;
  v56 = AssociatedTypeWitness;
  v57 = v14;
  v58 = v15;
  v59 = AssociatedConformanceWitness;
  v16 = type metadata accessor for ForEach(0, &v55);
  v50 = *(_QWORD *)(v16 - 8);
  v17 = __chkstk_darwin(v16);
  v19 = (char *)&v38 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v21 = (char *)&v38 - v20;
  v22 = v41;
  v23 = v42;
  v55 = *(_QWORD *)(v42 + *(int *)(v41 + 36));
  RandomAccessCollection.indexed.getter(v9, WitnessTable);
  v52 = a2;
  v53 = a3;
  WitnessTable = swift_getKeyPath(&unk_1E2DB8);
  v24 = v43;
  v25 = v44;
  (*(void (**)(char *, uint64_t, uint64_t))(v44 + 16))(v43, v23, v22);
  v26 = *(unsigned __int8 *)(v25 + 80);
  v27 = v25;
  v28 = (v26 + 32) & ~v26;
  v29 = swift_allocObject(&unk_24C900, v28 + v45, v26 | 7);
  *(_QWORD *)(v29 + 16) = a2;
  *(_QWORD *)(v29 + 24) = a3;
  (*(void (**)(uint64_t, char *, uint64_t))(v27 + 32))(v29 + v28, v24, v22);
  v30 = (_QWORD *)swift_allocObject(&unk_24C928, 48, 7);
  v30[2] = a2;
  v30[3] = a3;
  v30[4] = sub_3D0E8;
  v30[5] = v29;
  v31 = sub_7EF8(&qword_25FB38);
  v32 = sub_7EF8(&qword_25FB40);
  v33 = sub_3AC7C();
  v55 = v32;
  v56 = v33;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v55, &opaque type descriptor for <<opaque return type of View.transformMetricsContext(transform:)>>, 1);
  v55 = v31;
  v56 = OpaqueTypeConformance2;
  v35 = swift_getOpaqueTypeConformance2(&v55, &opaque type descriptor for <<opaque return type of View.impressionable(_:configuration:position:definesParentContext:)>>, 1);
  ForEach<>.init(_:id:content:)(v40, WitnessTable, sub_3D17C, v30, v49, v48, v47, AssociatedConformanceWitness, v35);
  v54 = v35;
  swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v16);
  sub_10F80((uint64_t)v19, v16, (uint64_t)v21);
  v36 = *(void (**)(char *, uint64_t))(v50 + 8);
  v36(v19, v16);
  sub_C5C0((uint64_t)v21, v16, v51);
  return ((uint64_t (*)(char *, uint64_t))v36)(v21, v16);
}

uint64_t sub_37420@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t OpaqueTypeConformance2;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD v35[2];

  v28 = a4;
  v29 = a3;
  v30 = a1;
  v32 = a5;
  v8 = type metadata accessor for ImpressionsCalculator.Configuration(0);
  v33 = *(_QWORD *)(v8 - 8);
  v34 = v8;
  __chkstk_darwin(v8);
  v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_5440(&qword_25FE30);
  __chkstk_darwin(v11);
  v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_5440(&qword_25FB40);
  __chkstk_darwin(v14);
  v16 = (char *)&v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_5440(&qword_25FB38);
  v31 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v19 = (char *)&v27 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for SegmentedControl(0, a3, a4, v20);
  sub_3767C(a2, v21, (uint64_t)v16);
  v22 = swift_allocObject(&unk_24C950, 24, 7);
  *(_QWORD *)(v22 + 16) = v30;
  v23 = sub_3AC7C();
  View.transformMetricsContext(transform:)(sub_3D1F8, v22, v14, v23);
  swift_release(v22);
  sub_B414((uint64_t)v16, &qword_25FB40);
  v24 = (*(uint64_t (**)(uint64_t))(v28 + 48))(v29);
  static ImpressionsCalculator.Configuration.half.getter(v24);
  v35[0] = v14;
  v35[1] = v23;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v35, &opaque type descriptor for <<opaque return type of View.transformMetricsContext(transform:)>>, 1);
  View.impressionable(_:configuration:position:definesParentContext:)(v13, v10, 0, 1, 0, v17, OpaqueTypeConformance2);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v10, v34);
  sub_B414((uint64_t)v13, &qword_25FE30);
  return (*(uint64_t (**)(char *, uint64_t))(v31 + 8))(v19, v17);
}

uint64_t sub_3767C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t AssociatedTypeWitness;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(char *, uint64_t, uint64_t, uint64_t);
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(char *, uint64_t);
  char *v54;
  char *v55;
  void (*v56)(char *, uint64_t);
  uint64_t v57;
  void (*v58)(char *, uint64_t);
  _QWORD *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  int *v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t (**v86)@<X0>(uint64_t@<X3>, uint64_t@<X8>);
  uint64_t KeyPath;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t *v91;
  char *v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  void (*v98)(char *, uint64_t);
  uint64_t v99;
  _QWORD *v100;
  unint64_t v101;
  _QWORD *v102;
  void (*v103)(char *, _QWORD, uint64_t);
  char *v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t result;
  uint64_t v109;
  char *v110;
  char *v111;
  _QWORD *v112;
  char *v113;
  char *v114;
  void (*v115)(char *, char *, uint64_t);
  uint64_t v116;
  char *v117;
  char *v118;
  void (*v119)(char *, char *, uint64_t);
  uint64_t v120;
  void (*v121)(char *, uint64_t);
  char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t OpaqueTypeConformance2;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  char *v138;
  char *v139;
  uint64_t v140;
  char *v141;
  uint64_t v142;
  char *v143;
  void (*v144)(char *, uint64_t);
  uint64_t v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  _BYTE *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t v156;
  uint64_t v157;
  uint64_t v158;
  char *v159;
  UIAccessibilityTraits v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  char *v168;
  uint64_t v169;
  uint64_t v170;
  char *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  char *v175;
  char *v176;
  char *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  char *v181;
  uint64_t v182;
  char *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  char *v188;
  uint64_t v189;
  uint64_t v190;
  char *v191;
  char *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  _QWORD *v197;
  char *v198;
  char *v199;
  _QWORD *v200;
  uint64_t v201;
  char *v202;
  uint64_t v203;
  char *v204;
  char *v205;
  uint64_t v206;
  void (*v207)(char *, uint64_t);
  void (*v208)(char *, uint64_t);
  uint64_t v209;
  uint64_t v210;
  char *v211;
  char **v212;
  char *v213;
  char *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  void (*v218)(char *, uint64_t, uint64_t);
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  char **v223;
  char *v224;
  uint64_t v225;
  void *v226;

  v187 = a3;
  v178 = sub_5440(&qword_25FE38);
  v5 = __chkstk_darwin(v178);
  v183 = (char *)&v168 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v177 = (char *)&v168 - v7;
  v201 = type metadata accessor for DynamicTypeSize(0);
  v200 = *(_QWORD **)(v201 - 8);
  v8 = __chkstk_darwin(v201);
  v199 = (char *)&v168 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v198 = (char *)&v168 - v10;
  v186 = sub_5440(&qword_25FE40);
  v11 = __chkstk_darwin(v186);
  v176 = (char *)&v168 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v179 = (uint64_t)&v168 - v13;
  v212 = (char **)type metadata accessor for CustomPickerButtonStyle(0);
  __chkstk_darwin(v212);
  v197 = (char **)((char *)&v168 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15 = type metadata accessor for DataStackID(0);
  v16 = __chkstk_darwin(v15);
  v202 = (char *)&v168 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v195 = *(_QWORD *)(a2 - 8);
  __chkstk_darwin(v16);
  v194 = v18;
  v191 = (char *)&v168 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for ActionMetrics(0);
  v20 = __chkstk_darwin(v19);
  v168 = (char *)&v168 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = *(_QWORD *)(a2 + 16);
  v220 = a2;
  v23 = *(_QWORD *)(v22 - 8);
  __chkstk_darwin(v20);
  v189 = v24;
  v25 = (char *)&v168 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = *(_QWORD *)(v26 + 24);
  v28 = *(_QWORD *)(v27 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v28, v22, &protocol requirements base descriptor for Identifiable, &associated type descriptor for Identifiable.ID);
  v207 = *(void (**)(char *, uint64_t))(AssociatedTypeWitness - 8);
  v30 = __chkstk_darwin(AssociatedTypeWitness);
  v32 = (char *)&v168 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v30);
  v34 = (char *)&v168 - v33;
  v35 = sub_5440(qword_25E3E8);
  __chkstk_darwin(v35);
  v37 = (char *)&v168 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v193 = sub_5440(&qword_25FE48);
  __chkstk_darwin(v193);
  v188 = (char *)&v168 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v210 = sub_5440(&qword_25FE50);
  __chkstk_darwin(v210);
  v196 = (uint64_t)&v168 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  v170 = sub_5440(&qword_25FE58);
  v169 = *(_QWORD *)(v170 - 8);
  __chkstk_darwin(v170);
  v211 = (char *)&v168 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  v173 = sub_5440(&qword_25FE60);
  v172 = *(_QWORD *)(v173 - 8);
  __chkstk_darwin(v173);
  v171 = (char *)&v168 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  v182 = sub_5440(&qword_25FE68);
  v180 = *(_QWORD *)(v182 - 8);
  v42 = __chkstk_darwin(v182);
  v175 = (char *)&v168 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  v174 = v43;
  __chkstk_darwin(v42);
  v204 = (char *)&v168 - v44;
  v185 = sub_5440(&qword_25FB58);
  v184 = *(_QWORD *)(v185 - 8);
  __chkstk_darwin(v185);
  v181 = (char *)&v168 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = type metadata accessor for ButtonRole(0);
  v47 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 56);
  v192 = v37;
  v48 = v37;
  v49 = v27;
  v47(v48, 1, 1, v46);
  v219 = a1;
  dispatch thunk of Identifiable.id.getter(v22, v28);
  v50 = v221 + *(int *)(v220 + 36);
  v209 = type metadata accessor for SegmentedControlViewModel(0, v22, v27, v51);
  v52 = v50 + *(int *)(v209 + 36);
  v218 = *(void (**)(char *, uint64_t, uint64_t))(v23 + 16);
  v218(v25, v52, v22);
  dispatch thunk of Identifiable.id.getter(v22, v28);
  v190 = v23;
  v53 = *(void (**)(char *, uint64_t))(v23 + 8);
  v54 = v25;
  v55 = v25;
  v56 = v53;
  v57 = v22;
  v53(v55, v22);
  v215 = v28;
  v206 = *(_QWORD *)(swift_getAssociatedConformanceWitness(v28, v22, AssociatedTypeWitness, &protocol requirements base descriptor for Identifiable, &associated conformance descriptor for Identifiable.Identifiable.ID: Hashable)+ 8);
  LOBYTE(v50) = dispatch thunk of static Equatable.== infix(_:_:)(v34, v32, AssociatedTypeWitness, v206);
  v58 = (void (*)(char *, uint64_t))*((_QWORD *)v207 + 1);
  v214 = v32;
  v58(v32, AssociatedTypeWitness);
  v213 = v34;
  v216 = AssociatedTypeWitness;
  v58(v34, AssociatedTypeWitness);
  v207 = v58;
  v208 = v56;
  v217 = v49;
  if ((v50 & 1) != 0)
  {
    v225 = type metadata accessor for EmptyAction(0);
    v226 = &protocol witness table for EmptyAction;
    v59 = sub_C404(&v222);
    v60 = v168;
    static ActionMetrics.notInstrumented.getter(v59);
    EmptyAction.init(actionMetrics:)(v60);
    v62 = v220;
    v61 = v221;
    v63 = v219;
  }
  else
  {
    v62 = v220;
    v61 = v221;
    v63 = v219;
    (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t))(v49 + 64))(&v222, v221 + *(int *)(v220 + 36), *(_QWORD *)(v221 + *(int *)(v220 + 40)), *(_QWORD *)(v221 + *(int *)(v220 + 40) + 8), v22, v49);
  }
  v64 = v54;
  v205 = v54;
  v218(v54, v63, v57);
  v65 = v195;
  v66 = v191;
  (*(void (**)(char *, uint64_t, uint64_t))(v195 + 16))(v191, v61, v62);
  v67 = v190;
  v68 = *(unsigned __int8 *)(v190 + 80);
  v69 = (v68 + 32) & ~v68;
  v70 = *(unsigned __int8 *)(v65 + 80);
  v71 = (v189 + v70 + v69) & ~v70;
  v72 = swift_allocObject(&unk_24C978, v71 + v194, v68 | v70 | 7);
  v73 = v57;
  *(_QWORD *)(v72 + 16) = v57;
  v74 = v217;
  *(_QWORD *)(v72 + 24) = v217;
  v75 = v64;
  v76 = v73;
  (*(void (**)(uint64_t, char *))(v67 + 32))(v72 + v69, v75);
  v77 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v65 + 32))(v72 + v71, v66, v62);
  v78 = v202;
  static DataStackID.additionalEventData.getter(v77);
  v79 = (uint64_t)v188;
  AppAnalyticsData.init(_:)(v78);
  v80 = (int *)v193;
  v81 = v79 + *(int *)(v193 + 36);
  *(_QWORD *)v81 = swift_getKeyPath(&unk_1E2DF8);
  *(_BYTE *)(v81 + 8) = 0;
  v82 = (_QWORD *)(v79 + v80[10]);
  *v82 = swift_getKeyPath(&unk_1E2E28);
  v83 = sub_5440(&qword_25E818);
  swift_storeEnumTagMultiPayload(v82, v83, 0);
  v84 = v79 + v80[11];
  *(_QWORD *)v84 = swift_getKeyPath(&unk_1E2E58);
  *(_BYTE *)(v84 + 40) = 0;
  v85 = v221;
  sub_167A4((uint64_t)v192, v79 + v80[12], qword_25E3E8);
  sub_167A4((uint64_t)&v222, v79 + v80[13], &qword_25E820);
  v86 = (uint64_t (**)@<X0>(uint64_t@<X3>, uint64_t@<X8>))(v79 + v80[14]);
  *v86 = sub_3D2F4;
  v86[1] = (uint64_t (*)@<X0>(uint64_t@<X3>, uint64_t@<X8>))v72;
  v202 = *(char **)(v74 + 56);
  LOBYTE(v72) = ((uint64_t (*)(uint64_t, uint64_t))v202)(v76, v74);
  KeyPath = swift_getKeyPath(&unk_1E2E88);
  v88 = swift_allocObject(&unk_24C9A0, 17, 7);
  *(_BYTE *)(v88 + 16) = v72 & 1;
  v89 = v196;
  sub_B3D0(v79, v196, &qword_25FE48);
  v90 = v210;
  v91 = (uint64_t *)(v89 + *(int *)(v210 + 36));
  *v91 = KeyPath;
  v91[1] = (uint64_t)sub_3D3A0;
  v92 = v205;
  v91[2] = v88;
  sub_B414(v79, &qword_25FE48);
  v93 = v220;
  v218(v92, v85 + *(int *)(v220 + 36) + *(int *)(v209 + 36), v76);
  v94 = v213;
  v95 = v215;
  dispatch thunk of Identifiable.id.getter(v76, v215);
  v208(v92, v76);
  v96 = v214;
  v203 = v76;
  dispatch thunk of Identifiable.id.getter(v76, v95);
  v97 = v216;
  LOBYTE(v92) = dispatch thunk of static Equatable.== infix(_:_:)(v94, v96, v216, v206);
  v98 = v207;
  v207(v96, v97);
  v98(v94, v97);
  v99 = Namespace.wrappedValue.getter(*(_QWORD *)(v85 + *(int *)(v93 + 48)));
  LOBYTE(v222) = *(_BYTE *)(v85 + *(int *)(v93 + 44));
  v100 = v197;
  sub_39268(v92 & 1, v99, (char *)&v222, v197);
  v101 = sub_3D3A8();
  v195 = sub_6FD0(&qword_25FE90, type metadata accessor for CustomPickerButtonStyle, (uint64_t)&unk_1E2D20);
  View.buttonStyle<A>(_:)(v100, v90, v212, v101);
  sub_224DC((uint64_t)v100, type metadata accessor for CustomPickerButtonStyle);
  sub_B414(v89, &qword_25FE50);
  v102 = v200;
  v103 = (void (*)(char *, _QWORD, uint64_t))v200[13];
  v104 = v198;
  v105 = v201;
  v103(v198, enum case for DynamicTypeSize.xSmall(_:), v201);
  v106 = v199;
  v103(v199, enum case for DynamicTypeSize.xxxLarge(_:), v105);
  v107 = sub_6FD0(&qword_25FE98, (uint64_t (*)(uint64_t))&type metadata accessor for DynamicTypeSize, (uint64_t)&protocol conformance descriptor for DynamicTypeSize);
  result = dispatch thunk of static Comparable.<= infix(_:_:)(v104, v106, v105, v107);
  if ((result & 1) != 0)
  {
    v109 = v178;
    v110 = v104;
    v111 = v106;
    v112 = v102;
    v113 = v177;
    v114 = &v177[*(int *)(v178 + 48)];
    v115 = (void (*)(char *, char *, uint64_t))v112[4];
    v115(v177, v110, v105);
    v115(v114, v111, v105);
    v116 = *(int *)(v109 + 48);
    v199 = (char *)v101;
    v117 = v183;
    v118 = &v183[v116];
    v119 = (void (*)(char *, char *, uint64_t))v112[2];
    v119(v183, v113, v105);
    v119(v118, v114, v105);
    v120 = (uint64_t)v176;
    v115(v176, v117, v105);
    v121 = (void (*)(char *, uint64_t))v112[1];
    v121(v118, v105);
    v122 = &v117[*(int *)(v109 + 48)];
    v115(v117, v113, v105);
    v115(v122, v114, v105);
    v123 = v186;
    v115((char *)(v120 + *(int *)(v186 + 36)), v122, v105);
    v121(v117, v105);
    v124 = v179;
    sub_167A4(v120, v179, &qword_25FE40);
    v222 = v210;
    v223 = v212;
    v224 = v199;
    v225 = v195;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v222, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
    v126 = sub_7FD8(&qword_25FEA0, &qword_25FE40, (uint64_t)&protocol conformance descriptor for ClosedRange<A>);
    v127 = v171;
    v128 = v170;
    v129 = v211;
    View.dynamicTypeSize<A>(_:)(v124, v170, v123, OpaqueTypeConformance2, v126);
    sub_B414(v124, &qword_25FE40);
    v130 = (*(uint64_t (**)(char *, uint64_t))(v169 + 8))(v129, v128);
    v212 = &v168;
    __chkstk_darwin(v130);
    v131 = v203;
    v132 = v217;
    v165 = v203;
    v166 = v217;
    v167 = v219;
    v133 = type metadata accessor for LocalizedText(0);
    v222 = v128;
    v223 = (char **)v123;
    v224 = (char *)OpaqueTypeConformance2;
    v225 = v126;
    v134 = swift_getOpaqueTypeConformance2(&v222, &opaque type descriptor for <<opaque return type of View.dynamicTypeSize<A>(_:)>>, 1);
    v135 = sub_6FD0((unint64_t *)&qword_25FEA8, (uint64_t (*)(uint64_t))&type metadata accessor for LocalizedText, (uint64_t)&protocol conformance descriptor for LocalizedText);
    v136 = v204;
    v137 = v173;
    View.accessibilityShowsLargeContentViewer<A>(_:)(sub_3D444, &v168 - 6, v173, v133, v134, v135);
    (*(void (**)(char *, uint64_t))(v172 + 8))(v127, v137);
    v138 = v205;
    v218(v205, v221 + *(int *)(v220 + 36) + *(int *)(v209 + 36), v131);
    v139 = v213;
    v140 = v215;
    dispatch thunk of Identifiable.id.getter(v131, v215);
    v208(v138, v131);
    v141 = v214;
    dispatch thunk of Identifiable.id.getter(v131, v140);
    v142 = v216;
    LOBYTE(v138) = dispatch thunk of static Equatable.== infix(_:_:)(v139, v141, v216, v206);
    v143 = v141;
    v144 = v207;
    v207(v143, v142);
    v144(v139, v142);
    LOBYTE(v133) = ((uint64_t (*)(uint64_t, uint64_t))v202)(v131, v132);
    v145 = v180;
    v146 = v175;
    v147 = v182;
    (*(void (**)(char *, char *, uint64_t))(v180 + 16))(v175, v136, v182);
    v148 = *(unsigned __int8 *)(v145 + 80);
    v149 = (v148 + 16) & ~v148;
    v150 = v149 + v174;
    v151 = swift_allocObject(&unk_24C9C8, v149 + v174 + 2, v148 | 7);
    (*(void (**)(uint64_t, char *, uint64_t))(v145 + 32))(v151 + v149, v146, v147);
    v152 = (_BYTE *)(v151 + v150);
    *v152 = v138 & 1;
    v152[1] = (v133 & 1) == 0;
    v153 = sub_5440(&qword_25FEB0);
    v154 = type metadata accessor for _JetLocalizeDefaultWorking(0);
    v155 = type metadata accessor for _JetLocalizeDefaultFailed(0);
    v156 = sub_3D51C();
    v157 = sub_6FD0(&qword_25FEE0, (uint64_t (*)(uint64_t))&type metadata accessor for _JetLocalizeDefaultWorking, (uint64_t)&protocol conformance descriptor for _JetLocalizeDefaultWorking);
    v158 = sub_6FD0(&qword_25FEE8, (uint64_t (*)(uint64_t))&type metadata accessor for _JetLocalizeDefaultFailed, (uint64_t)&protocol conformance descriptor for _JetLocalizeDefaultFailed);
    v165 = v155;
    v159 = v181;
    JetLocalize.init(working:failed:content:)(&j___s18_JetEngine_SwiftUI01_A22LocalizeDefaultWorkingVACycfC, 0, sub_4ED68, 0, sub_3D4B8, v151, v153, v154, v165, v156, v157, v158);
    (*(void (**)(char *, uint64_t))(v145 + 8))(v204, v147);
    LOBYTE(v151) = ((uint64_t (*)(uint64_t, uint64_t))v202)(v203, v217);
    v160 = UIAccessibilityTraitNotEnabled;
    v161 = v184;
    v162 = v187;
    v163 = v185;
    (*(void (**)(uint64_t, char *, uint64_t))(v184 + 16))(v187, v159, v185);
    v164 = v162 + *(int *)(sub_5440(&qword_25FB40) + 36);
    *(_BYTE *)v164 = v151 & 1;
    *(_QWORD *)(v164 + 8) = v160;
    return (*(uint64_t (**)(char *, uint64_t))(v161 + 8))(v159, v163);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_3871C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;

  *(_QWORD *)a5 = static HorizontalAlignment.leading.getter();
  *(_QWORD *)(a5 + 8) = 0;
  *(_BYTE *)(a5 + 16) = 0;
  v10 = sub_5440(&qword_25FEF0);
  return sub_3878C(a1, a2, a3, a4, a5 + *(int *)(v10 + 44));
}

uint64_t sub_3878C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t KeyPath;
  uint64_t *v37;
  void (*v38)(char *, uint64_t);
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;

  v75 = a2;
  v70 = a1;
  v80 = a5;
  v7 = sub_5440(&qword_25FEF8);
  __chkstk_darwin(v7);
  v67 = (uint64_t *)((char *)&v65 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v65 = sub_5440(&qword_25FF00);
  __chkstk_darwin(v65);
  v68 = (uint64_t)&v65 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v78 = sub_5440(&qword_25FF08);
  v76 = *(_QWORD *)(v78 - 8);
  __chkstk_darwin(v78);
  v66 = (uint64_t)&v65 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_5440(&qword_25E0C8);
  __chkstk_darwin(v11);
  v74 = (char *)&v65 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_5440(&qword_25FF10);
  v14 = __chkstk_darwin(v13);
  v79 = (uint64_t)&v65 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v77 = (uint64_t)&v65 - v16;
  v17 = type metadata accessor for LocalizerRequest(0);
  v18 = *(_QWORD *)(v17 - 8);
  v72 = v17;
  v73 = v18;
  v19 = __chkstk_darwin(v17);
  v69 = (char *)&v65 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v22 = (char *)&v65 - v21;
  v23 = type metadata accessor for LocalizedText(0);
  v24 = *(_QWORD *)(v23 - 8);
  __chkstk_darwin(v23);
  v26 = (char *)&v65 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v71 = sub_5440(&qword_25FE10);
  v27 = __chkstk_darwin(v71);
  v29 = (char *)&v65 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27);
  v31 = (char *)&v65 - v30;
  v32 = a3;
  (*(void (**)(uint64_t, uint64_t))(a4 + 24))(a3, a4);
  LocalizedText.init(_:)(v22);
  v34 = type metadata accessor for SegmentedControl(0, a3, a4, v33);
  v35 = sub_38D18(v34);
  KeyPath = swift_getKeyPath(&unk_1E2D88);
  (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v29, v26, v23);
  v37 = (uint64_t *)&v29[*(int *)(v71 + 36)];
  *v37 = KeyPath;
  v37[1] = v35;
  v38 = *(void (**)(char *, uint64_t))(v24 + 8);
  v39 = v72;
  v40 = v26;
  v42 = v73;
  v41 = (uint64_t)v74;
  v38(v40, v23);
  sub_167A4((uint64_t)v29, (uint64_t)v31, &qword_25FE10);
  (*(void (**)(uint64_t, uint64_t))(a4 + 32))(v32, a4);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v42 + 48))(v41, 1, v39) == 1)
  {
    sub_B414(v41, &qword_25E0C8);
LABEL_6:
    v60 = v77;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v76 + 56))(v77, 1, 1, v78);
    goto LABEL_7;
  }
  v43 = (uint64_t)v69;
  (*(void (**)(char *, uint64_t, uint64_t))(v42 + 32))(v69, v41, v39);
  v44 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 40))(v32, a4);
  if (!v45)
  {
    (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v43, v39);
    goto LABEL_6;
  }
  v46 = v44;
  v47 = v45;
  v48 = static VerticalAlignment.center.getter(v44);
  v49 = (uint64_t)v67;
  *v67 = v48;
  *(_QWORD *)(v49 + 8) = 0x4008000000000000;
  *(_BYTE *)(v49 + 16) = 0;
  v50 = sub_5440(&qword_25FF20);
  sub_38E88(v46, v47, v43, v49 + *(int *)(v50 + 44));
  v51 = swift_bridgeObjectRelease(v47);
  v52 = static Font.caption2.getter(v51);
  v53 = swift_getKeyPath(&unk_1E2D88);
  v54 = v68;
  sub_B3D0(v49, v68, &qword_25FEF8);
  v55 = (uint64_t *)(v54 + *(int *)(v65 + 36));
  *v55 = v53;
  v55[1] = v52;
  v56 = sub_B414(v49, &qword_25FEF8);
  LODWORD(v52) = static HierarchicalShapeStyle.secondary.getter(v56);
  v57 = v66;
  sub_B3D0(v54, v66, &qword_25FF00);
  v58 = v78;
  *(_DWORD *)(v57 + *(int *)(v78 + 36)) = v52;
  sub_B414(v54, &qword_25FF00);
  v59 = v57;
  v60 = v77;
  sub_167A4(v59, v77, &qword_25FF08);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v76 + 56))(v60, 0, 1, v58);
  (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v43, v39);
LABEL_7:
  sub_B3D0((uint64_t)v31, (uint64_t)v29, &qword_25FE10);
  v61 = v79;
  sub_B3D0(v60, v79, &qword_25FF10);
  v62 = v80;
  sub_B3D0((uint64_t)v29, v80, &qword_25FE10);
  v63 = sub_5440(&qword_25FF18);
  sub_B3D0(v61, v62 + *(int *)(v63 + 48), &qword_25FF10);
  sub_B414(v60, &qword_25FF10);
  sub_B414((uint64_t)v31, &qword_25FE10);
  sub_B414(v61, &qword_25FF10);
  return sub_B414((uint64_t)v29, &qword_25FE10);
}

uint64_t sub_38D18(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  void (*v10)(char *, _QWORD, uint64_t);
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  v3 = sub_5440(&qword_25FE08);
  __chkstk_darwin(v3);
  v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Font.TextStyle(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(void (**)(char *, _QWORD, uint64_t))(v7 + 104);
  if (*(_BYTE *)(v1 + *(int *)(a1 + 44)))
  {
    v10(v9, enum case for Font.TextStyle.footnote(_:), v6);
    v11 = type metadata accessor for Font.Design(0);
    v12 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v5, 1, 1, v11);
    static Font.Weight.medium.getter(v12);
  }
  else
  {
    v10(v9, enum case for Font.TextStyle.body(_:), v6);
    v14 = type metadata accessor for Font.Design(0);
    v15 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v5, 1, 1, v14);
    v13 = static Font.Weight.semibold.getter(v15);
  }
  v16 = static Font.system(_:design:weight:)(v9, v5, *(_QWORD *)&v13, 0);
  sub_B414((uint64_t)v5, &qword_25FE08);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  return v16;
}

uint64_t sub_38E88@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t KeyPath;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v47 = a3;
  v48 = a4;
  v45 = type metadata accessor for LocalizerRequest(0);
  v43 = *(_QWORD *)(v45 - 8);
  __chkstk_darwin(v45);
  v42 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = type metadata accessor for LocalizedText(0);
  v44 = *(_QWORD *)(v46 - 8);
  __chkstk_darwin(v46);
  v39 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = sub_5440(&qword_25FF28);
  v8 = __chkstk_darwin(v41);
  v10 = (char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v40 = (uint64_t)&v37 - v11;
  v12 = sub_5440(&qword_25FF30);
  __chkstk_darwin(v12);
  v14 = (uint64_t *)((char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15 = type metadata accessor for Image.Scale(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v37 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_5440(&qword_25FF38);
  v20 = __chkstk_darwin(v19);
  v22 = (uint64_t *)((char *)&v37 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v20);
  v38 = (uint64_t)&v37 - v23;
  swift_bridgeObjectRetain(a2);
  v24 = Image.init(systemName:)(a1, a2);
  (*(void (**)(char *, _QWORD, uint64_t))(v16 + 104))(v18, enum case for Image.Scale.small(_:), v15);
  KeyPath = swift_getKeyPath(&unk_1E2F70);
  (*(void (**)(char *, char *, uint64_t))(v16 + 16))((char *)v14 + *(int *)(v12 + 28), v18, v15);
  *v14 = KeyPath;
  sub_B3D0((uint64_t)v14, (uint64_t)v22 + *(int *)(v19 + 36), &qword_25FF30);
  *v22 = v24;
  swift_retain(v24);
  sub_B414((uint64_t)v14, &qword_25FF30);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  swift_release(v24);
  v26 = v38;
  sub_167A4((uint64_t)v22, v38, &qword_25FF38);
  v27 = v42;
  (*(void (**)(char *, uint64_t, uint64_t))(v43 + 16))(v42, v47, v45);
  v28 = v39;
  LocalizedText.init(_:)(v27);
  v29 = swift_getKeyPath(&unk_1E2FA0);
  v30 = v44;
  v31 = v46;
  (*(void (**)(char *, char *, uint64_t))(v44 + 16))(v10, v28, v46);
  v32 = &v10[*(int *)(v41 + 36)];
  *(_QWORD *)v32 = v29;
  *((_QWORD *)v32 + 1) = 1;
  v32[16] = 0;
  (*(void (**)(char *, uint64_t))(v30 + 8))(v28, v31);
  v33 = v40;
  sub_167A4((uint64_t)v10, v40, &qword_25FF28);
  sub_B3D0(v26, (uint64_t)v22, &qword_25FF38);
  sub_B3D0(v33, (uint64_t)v10, &qword_25FF28);
  v34 = v48;
  sub_B3D0((uint64_t)v22, v48, &qword_25FF38);
  v35 = sub_5440(&qword_25FF40);
  sub_B3D0((uint64_t)v10, v34 + *(int *)(v35 + 48), &qword_25FF28);
  sub_B414(v33, &qword_25FF28);
  sub_B414(v26, &qword_25FF38);
  sub_B414((uint64_t)v10, &qword_25FF28);
  return sub_B414((uint64_t)v22, &qword_25FF38);
}

uint64_t sub_39268@<X0>(int a1@<W0>, uint64_t a2@<X1>, char *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char v10;
  uint64_t v11;
  int *v12;
  _QWORD *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t, uint64_t);
  unint64_t v20;
  uint64_t result;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;

  v24 = a2;
  v23 = a1;
  v6 = type metadata accessor for Font.TextStyle(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *a3;
  *a4 = swift_getKeyPath(&unk_1E2EB8);
  v11 = sub_5440(&qword_25F1E8);
  swift_storeEnumTagMultiPayload(a4, v11, 0);
  v12 = (int *)type metadata accessor for CustomPickerButtonStyle(0);
  v13 = (_QWORD *)((char *)a4 + v12[5]);
  *v13 = swift_getKeyPath(&unk_1E2EE0);
  v14 = sub_5440(&qword_25E948);
  swift_storeEnumTagMultiPayload(v13, v14, 0);
  v15 = (char *)a4 + v12[6];
  *(_QWORD *)v15 = swift_getKeyPath(&unk_1E2F10);
  v15[8] = 0;
  v16 = (char *)a4 + v12[7];
  *(_QWORD *)v16 = swift_getKeyPath(&unk_1E2F40);
  v16[8] = 0;
  v17 = (char *)a4 + v12[8];
  *(_QWORD *)v17 = swift_getKeyPath(&unk_1E2B50);
  v17[8] = 0;
  *(_QWORD *)((char *)a4 + v12[12]) = 0x3FF0000000000000;
  v25 = 0x4040000000000000;
  v18 = enum case for Font.TextStyle.body(_:);
  v19 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 104);
  v19(v9, enum case for Font.TextStyle.body(_:), v6);
  v20 = sub_3CB54();
  ScaledMetric.init(wrappedValue:relativeTo:)(&v25, v9, &type metadata for Double, v20);
  v25 = 0x4042000000000000;
  v19(v9, v18, v6);
  result = ScaledMetric.init(wrappedValue:relativeTo:)(&v25, v9, &type metadata for Double, v20);
  *((_BYTE *)a4 + v12[9]) = v23;
  *(_QWORD *)((char *)a4 + v12[10]) = v24;
  *((_BYTE *)a4 + v12[11]) = v10;
  return result;
}

uint64_t sub_39470(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  char *v6;
  uint64_t v8;

  type metadata accessor for LocalizerRequest(0);
  __chkstk_darwin();
  v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, uint64_t))(a3 + 24))(a2, a3);
  return LocalizedText.init(_:)(v6);
}

uint64_t sub_39504@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  double v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  BOOL v51;
  char *v52;
  char v53;
  void (*v54)(char *, uint64_t);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t KeyPath;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  void (*v80)(uint64_t, uint64_t);
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  unint64_t v86;
  char *v87;
  uint64_t v88;
  __n128 v89;
  uint64_t v90;
  uint64_t v91;
  double v92;
  double v93;
  double v94;
  double v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  double v108;
  double v109;
  double v110;
  double v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  __int128 v126;
  __int128 v127;
  uint64_t v128;
  uint64_t v129;
  __int128 v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  unint64_t v147;
  uint64_t v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  char v153;
  double v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v159;
  char *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  char *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  char *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  char *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  char *v180;
  char *v181;
  uint64_t v182;
  char *v183;
  uint64_t v184;
  uint64_t v185;
  char *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  char *v190;
  uint64_t v191;
  uint64_t v192;
  char *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  uint64_t v205;
  char v206;
  _OWORD v207[3];

  v3 = v2;
  v196 = a2;
  v195 = type metadata accessor for AutomaticHoverEffect(0);
  v194 = *(_QWORD *)(v195 - 8);
  __chkstk_darwin(v195);
  v193 = (char *)&v159 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v192 = type metadata accessor for ContentShapeKinds(0);
  v191 = *(_QWORD *)(v192 - 8);
  __chkstk_darwin(v192);
  v190 = (char *)&v159 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v185 = type metadata accessor for Text.LineStyle.Pattern(0);
  v184 = *(_QWORD *)(v185 - 8);
  __chkstk_darwin(v185);
  v181 = (char *)&v159 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for ColorConstants.Environment(0);
  __chkstk_darwin(v8);
  v175 = (uint64_t)&v159 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for ColorConstants(0);
  __chkstk_darwin(v10);
  v176 = (char *)&v159 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for CustomPickerButtonStyle(0);
  v13 = __chkstk_darwin(v12);
  *(_QWORD *)&v197 = (char *)&v159 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v163 = (uint64_t)&v159 - v15;
  v16 = type metadata accessor for ColorScheme(0);
  v168 = *(_QWORD *)(v16 - 8);
  v17 = __chkstk_darwin(v16);
  v160 = (char *)&v159 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v165 = (uint64_t)&v159 - v19;
  v20 = type metadata accessor for ButtonStyleConfiguration.Label(0);
  v21 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20);
  v23 = (char *)&v159 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = sub_5440(&qword_25FD08);
  __chkstk_darwin(v24);
  v26 = (char *)&v159 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = sub_5440(&qword_25FD10);
  __chkstk_darwin(v27);
  *(_QWORD *)&v198 = (char *)&v159 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v199 = sub_5440(&qword_25FD18);
  __chkstk_darwin(v199);
  *(_QWORD *)&v200 = (char *)&v159 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v170 = sub_5440(&qword_25FD20);
  v169 = *(_QWORD *)(v170 - 8);
  __chkstk_darwin(v170);
  v167 = (char *)&v159 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v164 = sub_5440(&qword_25FD28);
  __chkstk_darwin(v164);
  v171 = (char *)&v159 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v166 = sub_5440(&qword_25FD30);
  __chkstk_darwin(v166);
  v173 = (uint64_t)&v159 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v172 = sub_5440(&qword_25FD38);
  __chkstk_darwin(v172);
  v177 = (uint64_t)&v159 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v174 = sub_5440(&qword_25FD40);
  __chkstk_darwin(v174);
  v178 = (uint64_t)&v159 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v179 = sub_5440(&qword_25FD48);
  __chkstk_darwin(v179);
  v180 = (char *)&v159 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v188 = sub_5440(&qword_25FD50);
  v187 = *(_QWORD *)(v188 - 8);
  __chkstk_darwin(v188);
  v186 = (char *)&v159 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v182 = sub_5440(&qword_25FD58);
  v37 = __chkstk_darwin(v182);
  v183 = (char *)&v159 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v189 = a1;
  ButtonStyleConfiguration.label.getter(v37);
  v39 = sub_5440(&qword_25FC38);
  ScaledMetric.wrappedValue.getter(&v201, v39);
  v40 = v201;
  v41 = _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0();
  _FrameLayout.init(width:height:alignment:)(v207, 0, 1, v40, 0, v41, v42);
  (*(void (**)(char *, char *, uint64_t))(v21 + 16))(v26, v23, v20);
  v43 = &v26[*(int *)(v24 + 36)];
  v44 = v207[1];
  *(_OWORD *)v43 = v207[0];
  *((_OWORD *)v43 + 1) = v44;
  *((_OWORD *)v43 + 2) = v207[2];
  (*(void (**)(char *, uint64_t))(v21 + 8))(v23, v20);
  v45 = v3 + *(int *)(v12 + 32);
  v46 = *(_QWORD *)v45;
  LOBYTE(v23) = *(_BYTE *)(v45 + 8);
  sub_F9E4(*(_QWORD *)v45, (char)v23);
  LOBYTE(v24) = sub_30DB4(v46, (char)v23);
  sub_BE0C(v46, (char)v23);
  if ((v24 & 1) != 0)
    v47 = 160.0;
  else
    v47 = 200.0;
  v48 = _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0();
  sub_87220(0.0, 1, 0.0, 1, v47, 0, 0.0, 1, v198, 0.0, 1, 0.0, 1, v48, v49);
  sub_B414((uint64_t)v26, &qword_25FD08);
  v50 = *(int *)(v12 + 36);
  v51 = *(_BYTE *)(v3 + v50) == 1;
  v162 = v12;
  v161 = v16;
  if (v51)
  {
    v60 = v165;
    sub_31378(v165);
    v59 = v168;
    v52 = v160;
    (*(void (**)(char *, _QWORD, uint64_t))(v168 + 104))(v160, enum case for ColorScheme.light(_:), v16);
    v53 = static ColorScheme.== infix(_:_:)(v60, v52);
    v54 = *(void (**)(char *, uint64_t))(v59 + 8);
    v54(v52, v16);
    v55 = ((uint64_t (*)(uint64_t, uint64_t))v54)(v60, v16);
    v57 = v3;
    if ((v53 & 1) != 0)
      v56 = _s7BooksUI14ColorConstantsV25vibrantPrimaryButtonLabel05SwiftB00C0Vvg_0();
    else
      v56 = static Color.black.getter(v55);
    v58 = v56;
  }
  else
  {
    v57 = v3;
    v58 = _s7BooksUI14ColorConstantsV14vibrantPrimary05SwiftB00C0Vvg_0();
    v59 = v168;
    v60 = v165;
  }
  KeyPath = swift_getKeyPath(&unk_1E2D58);
  v62 = v198;
  v63 = v200;
  sub_B3D0(v198, v200, &qword_25FD10);
  v64 = (uint64_t *)(v63 + *(int *)(v199 + 36));
  *v64 = KeyPath;
  v64[1] = v58;
  sub_B414(v62, &qword_25FD10);
  v65 = v57;
  LOBYTE(v63) = *(_BYTE *)(v57 + v50);
  v66 = v163;
  sub_1E428(v57, v163, type metadata accessor for CustomPickerButtonStyle);
  if ((v63 & 1) != 0)
  {
    sub_224DC(v66, type metadata accessor for CustomPickerButtonStyle);
    v67 = v197;
    sub_1E428(v57, v197, type metadata accessor for CustomPickerButtonStyle);
    v68 = 0;
    v69 = (uint64_t)v176;
    v70 = v161;
    v71 = v162;
  }
  else
  {
    v71 = v162;
    v72 = *(unsigned __int8 *)(v66 + *(int *)(v162 + 44)) - 3;
    sub_224DC(v66, type metadata accessor for CustomPickerButtonStyle);
    v67 = v197;
    sub_1E428(v57, v197, type metadata accessor for CustomPickerButtonStyle);
    v69 = (uint64_t)v176;
    v70 = v161;
    if (v72 > 0xFFFFFFFD)
    {
      v68 = 0;
    }
    else
    {
      v73 = v67 + *(int *)(v71 + 24);
      v74 = *(_QWORD *)v73;
      v75 = *(_BYTE *)(v73 + 8);
      sub_F9E4(*(_QWORD *)v73, v75);
      v68 = sub_30DB4(v74, v75);
      v76 = v75;
      v67 = v197;
      sub_BE0C(v74, v76);
    }
  }
  sub_224DC(v67, type metadata accessor for CustomPickerButtonStyle);
  _s7BooksUI18BuyButtonExternalsV6colorsAA14ColorConstantsVvg_0(v69);
  v77 = v175;
  sub_1E428(v69, v175, type metadata accessor for ColorConstants.Environment);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v59 + 104))(v60, enum case for ColorScheme.dark(_:), v70);
  v78 = sub_6FD0((unint64_t *)&qword_25FD60, (uint64_t (*)(uint64_t))&type metadata accessor for ColorScheme, (uint64_t)&protocol conformance descriptor for ColorScheme);
  v79 = dispatch thunk of static Equatable.== infix(_:_:)(v77, v60, v70, v78);
  v80 = *(void (**)(uint64_t, uint64_t))(v59 + 8);
  v80(v60, v70);
  v81 = ((uint64_t (*)(uint64_t, uint64_t))v80)(v77, v70);
  if ((v79 & 1) != 0)
    v82 = _s7BooksUI14ColorConstantsV25vibrantPrimaryButtonLabel05SwiftB00C0Vvg_0();
  else
    v82 = static Color.black.getter(v81);
  v83 = v82;
  v84 = sub_224DC(v69, type metadata accessor for ColorConstants);
  v85 = v181;
  static Text.LineStyle.Pattern.solid.getter(v84);
  v86 = sub_3CBB0();
  v87 = v167;
  v88 = v200;
  View.underline(_:pattern:color:)(v68 & 1, v85, v83, v199, v86);
  v89 = swift_release(v83);
  (*(void (**)(char *, uint64_t, __n128))(v184 + 8))(v85, v185, v89);
  v90 = sub_B414(v88, &qword_25FD18);
  v91 = static Edge.Set.vertical.getter(v90);
  LOBYTE(v83) = v91;
  v95 = EdgeInsets.init(_all:)(v91, 3.0, v92, v93, v94);
  v97 = v96;
  v99 = v98;
  v101 = v100;
  v102 = v169;
  v103 = (uint64_t)v171;
  v104 = v170;
  (*(void (**)(char *, char *, uint64_t))(v169 + 16))(v171, v87, v170);
  v105 = v103 + *(int *)(v164 + 36);
  *(_BYTE *)v105 = v83;
  *(double *)(v105 + 8) = v95;
  *(_QWORD *)(v105 + 16) = v97;
  *(_QWORD *)(v105 + 24) = v99;
  *(_QWORD *)(v105 + 32) = v101;
  *(_BYTE *)(v105 + 40) = 0;
  v106 = (*(uint64_t (**)(char *, uint64_t))(v102 + 8))(v87, v104);
  v107 = static Edge.Set.horizontal.getter(v106);
  LOBYTE(v83) = v107;
  v111 = EdgeInsets.init(_all:)(v107, 12.0, v108, v109, v110);
  v113 = v112;
  v115 = v114;
  v117 = v116;
  v118 = v173;
  sub_B3D0(v103, v173, &qword_25FD28);
  v119 = v118 + *(int *)(v166 + 36);
  *(_BYTE *)v119 = v83;
  *(double *)(v119 + 8) = v111;
  *(_QWORD *)(v119 + 16) = v113;
  *(_QWORD *)(v119 + 24) = v115;
  *(_QWORD *)(v119 + 32) = v117;
  *(_BYTE *)(v119 + 40) = 0;
  sub_B414(v103, &qword_25FD28);
  v120 = _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0();
  v122 = v121;
  sub_3A400(v65, (uint64_t)&v201);
  v200 = v201;
  v199 = v202;
  v198 = v203;
  v197 = v204;
  v123 = v205;
  LOBYTE(v87) = v206;
  v124 = v177;
  sub_B3D0(v118, v177, &qword_25FD30);
  v125 = v124 + *(int *)(v172 + 36);
  v126 = v199;
  *(_OWORD *)v125 = v200;
  *(_OWORD *)(v125 + 16) = v126;
  v127 = v197;
  *(_OWORD *)(v125 + 32) = v198;
  *(_OWORD *)(v125 + 48) = v127;
  *(_QWORD *)(v125 + 64) = v123;
  *(_BYTE *)(v125 + 72) = (_BYTE)v87;
  *(_QWORD *)(v125 + 80) = v120;
  *(_QWORD *)(v125 + 88) = v122;
  v128 = sub_B414(v118, &qword_25FD30);
  v129 = static VerticalAlignment.center.getter(v128);
  sub_3A87C(v65, (uint64_t)&v201);
  v200 = v201;
  v199 = v202;
  v198 = v203;
  v130 = v204;
  v131 = _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0();
  v133 = v132;
  v134 = v178;
  sub_B3D0(v124, v178, &qword_25FD38);
  v135 = v134 + *(int *)(v174 + 36);
  *(_QWORD *)v135 = v129;
  *(_QWORD *)(v135 + 8) = 0;
  *(_BYTE *)(v135 + 16) = 1;
  *(_OWORD *)(v135 + 24) = v200;
  *(_OWORD *)(v135 + 40) = v199;
  *(_OWORD *)(v135 + 56) = v198;
  *(_OWORD *)(v135 + 72) = v130;
  *(_QWORD *)(v135 + 88) = v131;
  *(_QWORD *)(v135 + 96) = v133;
  v136 = sub_B414(v124, &qword_25FD38);
  v137 = v190;
  static ContentShapeKinds.hoverEffect.getter(v136);
  v138 = sub_3A628();
  v139 = v179;
  v140 = (uint64_t)v180;
  v141 = &v180[*(int *)(v179 + 36)];
  v142 = sub_5440(&qword_25FD98);
  v143 = v191;
  v144 = v192;
  (*(void (**)(char *, char *, uint64_t))(v191 + 16))(&v141[*(int *)(v142 + 40)], v137, v192);
  *(_QWORD *)v141 = v138;
  v141[8] = 0;
  sub_B3D0(v134, v140, &qword_25FD40);
  (*(void (**)(char *, uint64_t))(v143 + 8))(v137, v144);
  v145 = sub_B414(v134, &qword_25FD40);
  v146 = v193;
  static CustomHoverEffect<>.automatic.getter(v145);
  v147 = sub_3CD40();
  v148 = sub_6FD0((unint64_t *)&qword_25FDF0, (uint64_t (*)(uint64_t))&type metadata accessor for AutomaticHoverEffect, (uint64_t)&protocol conformance descriptor for AutomaticHoverEffect);
  v149 = v186;
  v150 = v195;
  View.hoverEffect<A>(_:isEnabled:)(v146, 1, v139, v195, v147, v148);
  (*(void (**)(char *, uint64_t))(v194 + 8))(v146, v150);
  sub_B414(v140, &qword_25FD48);
  v151 = v65 + *(int *)(v71 + 28);
  v152 = *(_QWORD *)v151;
  LOBYTE(v141) = *(_BYTE *)(v151 + 8);
  sub_F9E4(*(_QWORD *)v151, (char)v141);
  v153 = sub_30DB4(v152, (char)v141);
  sub_BE0C(v152, (char)v141);
  if ((v153 & 1) != 0)
    v154 = 1.0;
  else
    v154 = 0.3;
  v155 = v187;
  v156 = (uint64_t)v183;
  v157 = v188;
  (*(void (**)(char *, char *, uint64_t))(v187 + 16))(v183, v149, v188);
  *(double *)(v156 + *(int *)(v182 + 36)) = v154;
  (*(void (**)(char *, uint64_t))(v155 + 8))(v149, v157);
  return sub_167A4(v156, v196, &qword_25FD58);
}

void sub_3A400(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  void (*v19)(char *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  int64x2_t v25;
  double v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;

  v4 = type metadata accessor for ColorScheme(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for ColorConstants.Environment(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for ColorConstants(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for CustomPickerButtonStyle(0);
  if (*(_BYTE *)(a1 + *(int *)(v14 + 36)) == 1)
  {
    v15 = v14;
    v16 = sub_3A628();
    _s7BooksUI18BuyButtonExternalsV6colorsAA14ColorConstantsVvg_0((uint64_t)v13);
    sub_1E428((uint64_t)v13, (uint64_t)v10, type metadata accessor for ColorConstants.Environment);
    (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for ColorScheme.dark(_:), v4);
    v17 = sub_6FD0((unint64_t *)&qword_25FD60, (uint64_t (*)(uint64_t))&type metadata accessor for ColorScheme, (uint64_t)&protocol conformance descriptor for ColorScheme);
    v18 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v7, v4, v17);
    v19 = *(void (**)(char *, uint64_t))(v5 + 8);
    v19(v7, v4);
    v20 = ((uint64_t (*)(char *, uint64_t))v19)(v10, v4);
    if ((v18 & 1) != 0)
      v21 = _s7BooksUI14ColorConstantsV25vibrantPrimaryButtonLabel05SwiftB00C0Vvg_0();
    else
      v21 = static Color.black.getter(v20);
    v29 = v21;
    v30 = sub_224DC((uint64_t)v13, type metadata accessor for ColorConstants);
    v22 = *(_QWORD *)(a1 + *(int *)(v15 + 40));
    v31 = static MatchedGeometryProperties.frame.getter(v30);
    v32 = v31;
    v26 = static UnitPoint.center.getter(v31);
    v25 = vdupq_n_s64(0x100uLL);
    v23 = v32;
    v25.i64[0] = v29;
    v28 = xmmword_1E2B20;
    v24 = 1;
  }
  else
  {
    v16 = 0;
    v22 = 0;
    v23 = 0;
    v24 = 0;
    v25 = 0uLL;
    v26 = 0.0;
    v27 = 0;
    v28 = 0uLL;
  }
  *(_QWORD *)a2 = v16;
  *(int64x2_t *)(a2 + 8) = v25;
  *(_OWORD *)(a2 + 24) = v28;
  *(_QWORD *)(a2 + 40) = v22;
  *(_QWORD *)(a2 + 48) = v23;
  *(double *)(a2 + 56) = v26;
  *(_QWORD *)(a2 + 64) = v27;
  *(_BYTE *)(a2 + 72) = v24;
}

uint64_t sub_3A628()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  double v15;
  void (*v16)(char *, _QWORD, uint64_t);
  unint64_t v17;
  void *v18;
  unint64_t *v19;
  uint64_t v26;
  unint64_t v27;

  v1 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v1);
  v3 = (char *)&v26 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for RoundedRectangle._Inset(0);
  __chkstk_darwin(v4);
  v6 = (unint64_t *)((char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = type metadata accessor for RoundedCornerStyle(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Capsule(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for CustomPickerButtonStyle(0);
  v15 = *(double *)(v0 + *(int *)(v14 + 48)) * 0.5;
  if (*(unsigned __int8 *)(v0 + *(int *)(v14 + 44)) > 1u)
  {
    (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(&v3[*(int *)(v1 + 20)], enum case for RoundedCornerStyle.continuous(_:), v7);
    __asm { FMOV            V0.2D, #10.0 }
    *(_OWORD *)v3 = _Q0;
    sub_1E428((uint64_t)v3, (uint64_t)v6, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
    *(double *)((char *)v6 + *(int *)(v4 + 20)) = v15;
    sub_224DC((uint64_t)v3, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
    v17 = sub_6FD0(&qword_25FDF8, (uint64_t (*)(uint64_t))&type metadata accessor for RoundedRectangle._Inset, (uint64_t)&protocol conformance descriptor for RoundedRectangle._Inset);
    v19 = v6;
    v18 = (void *)v4;
  }
  else
  {
    v16 = *(void (**)(char *, _QWORD, uint64_t))(v8 + 104);
    v16(v13, enum case for RoundedCornerStyle.continuous(_:), v7);
    v16(v10, enum case for RoundedCornerStyle.circular(_:), v7);
    LOBYTE(v16) = static RoundedCornerStyle.== infix(_:_:)(v13, v10);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    sub_224DC((uint64_t)v13, (uint64_t (*)(_QWORD))&type metadata accessor for Capsule);
    v27 = *(_QWORD *)&v15 & 0xFFFFFFFFFFFFFFFELL | ((v16 & 1) == 0);
    v17 = sub_3CF80();
    v18 = &type metadata for Capsule._Inset;
    v19 = &v27;
  }
  return AnyShape.init<A>(_:)(v19, v18, v17);
}

uint64_t sub_3A87C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char v11;
  uint64_t (*v12)(_QWORD);
  uint64_t result;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v4 = type metadata accessor for ColorConstants(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for CustomPickerButtonStyle(0);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_BYTE *)(a1 + *(int *)(v8 + 36));
  sub_1E428(a1, (uint64_t)v10, v12);
  if ((v11 & 1) != 0)
  {
    result = sub_224DC((uint64_t)v10, type metadata accessor for CustomPickerButtonStyle);
LABEL_7:
    v15 = 0;
    v16 = 0;
    v17 = 0;
    v18 = 0;
    v20 = 0;
    v23 = 0;
    v22 = 0uLL;
    goto LABEL_8;
  }
  v14 = v10[*(int *)(v7 + 44)];
  result = sub_224DC((uint64_t)v10, type metadata accessor for CustomPickerButtonStyle);
  if (!v14)
    goto LABEL_7;
  v15 = sub_3A628();
  StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)(&v25, 0, 0, &_swiftEmptyArrayStorage, *(double *)(a1 + *(int *)(v7 + 48)), 10.0, 0.0);
  v24 = v25;
  v16 = v26;
  v17 = v27;
  v18 = v28;
  _s7BooksUI18BuyButtonExternalsV6colorsAA14ColorConstantsVvg_0((uint64_t)v6);
  v19 = objc_msgSend((id)objc_opt_self(UIColor), "quaternaryLabelColor");
  v20 = Color.init(_:)(v19);
  v21 = sub_224DC((uint64_t)v6, type metadata accessor for ColorConstants);
  result = ButtonStyleConfiguration.isPressed.getter(v21);
  v22 = v24;
  v23 = 0x3FF0000000000000;
  if ((result & 1) != 0)
    v23 = 0x3FE3333333333333;
LABEL_8:
  *(_QWORD *)a2 = v15;
  *(_OWORD *)(a2 + 8) = v22;
  *(_QWORD *)(a2 + 24) = v16;
  *(_QWORD *)(a2 + 32) = v17;
  *(_QWORD *)(a2 + 40) = v18;
  *(_QWORD *)(a2 + 48) = v20;
  *(_QWORD *)(a2 + 56) = v23;
  return result;
}

BOOL static ReaderTypeFrameViewModel.Type.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t sub_3AA70@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, char a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v26 = a2;
  v28 = a5;
  v27 = type metadata accessor for LocalizerDefaultValue(0);
  v8 = *(_QWORD *)(v27 - 8);
  __chkstk_darwin(v27);
  v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_5440(&qword_25FEC8);
  __chkstk_darwin(v11);
  v13 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_5440(&qword_25FEB0);
  __chkstk_darwin(v14);
  v16 = (char *)&v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_5440(&qword_25FE68);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v13, v26, v17);
  v13[*(int *)(v11 + 36)] = a3 & a4;
  v18 = a1[3];
  v19 = a1[4];
  sub_5480(a1, v18);
  LocalizerDefaultValue.init(stringLiteral:)("Double tap to select", 20, 2);
  v20 = Localizer.string(forKey:defaultValue:)(0xD000000000000030, 0x80000000001FA2F0, v10, v18, v19);
  v22 = v21;
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v27);
  sub_B3D0((uint64_t)v13, (uint64_t)v16, &qword_25FEC8);
  v23 = &v16[*(int *)(v14 + 36)];
  *v23 = a4 & (a3 ^ 1);
  *((_QWORD *)v23 + 1) = v20;
  *((_QWORD *)v23 + 2) = v22;
  sub_B414((uint64_t)v13, &qword_25FEC8);
  return sub_167A4((uint64_t)v16, v28, &qword_25FEB0);
}

uint64_t type metadata accessor for SegmentedControl(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10E40(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SegmentedControl);
}

uint64_t sub_3AC70(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 36));
}

unint64_t sub_3AC7C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25FB48;
  if (!qword_25FB48)
  {
    v1 = sub_7EF8(&qword_25FB40);
    sub_7FD8(&qword_25FB50, &qword_25FB58, (uint64_t)&protocol conformance descriptor for JetLocalize<A, B, C>);
    sub_3AD00();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_25FB48);
  }
  return result;
}

unint64_t sub_3AD00()
{
  unint64_t result;

  result = qword_25FB60;
  if (!qword_25FB60)
  {
    result = swift_getWitnessTable(&unk_1EF844, &type metadata for AccessibilityConditionalTraits);
    atomic_store(result, (unint64_t *)&qword_25FB60);
  }
  return result;
}

uint64_t sub_3AD44@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_36DD4(v1[4], v1[2], v1[3], a1);
}

unint64_t sub_3AD50()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25FB90;
  if (!qword_25FB90)
  {
    v1 = sub_7EF8(&qword_25FB88);
    sub_3ADBC();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_25FB90);
  }
  return result;
}

unint64_t sub_3ADBC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25FB98;
  if (!qword_25FB98)
  {
    v1 = sub_7EF8(&qword_25FB78);
    sub_7FD8(&qword_25FBA0, &qword_25FB70, (uint64_t)&protocol conformance descriptor for HStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_25FB98);
  }
  return result;
}

uint64_t sub_3AE40(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  return swift_getOpaqueTypeConformance2(&v3, &opaque type descriptor for <<opaque return type of SegmentedControl.body>>, 1);
}

unint64_t sub_3AE78()
{
  unint64_t result;

  result = qword_25FBB0[0];
  if (!qword_25FBB0[0])
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for SegmentedControlStyle, &type metadata for SegmentedControlStyle);
    atomic_store(result, qword_25FBB0);
  }
  return result;
}

uint64_t dispatch thunk of SegmentedItem.action(with:containingShelfID:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 64))();
}

uint64_t sub_3AEC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v6;
  _QWORD v7[5];

  v7[0] = "\t";
  result = type metadata accessor for SegmentedControlViewModel(319, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  if (v6 <= 0x3F)
  {
    v7[1] = *(_QWORD *)(result - 8) + 64;
    v7[2] = &unk_1E2C80;
    v7[3] = &unk_1E2C98;
    v7[4] = (char *)&value witness table for Builtin.Int64 + 64;
    swift_initStructMetadata(a1, 0, 5, v7, a1 + 32);
    return 0;
  }
  return result;
}

uint64_t sub_3AF5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  _QWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  void (*v20)(unint64_t, unint64_t, uint64_t);
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_DWORD *)(v6 + 80);
  v8 = ~(v7 | 7);
  v9 = v7 + 8;
  v10 = ((v7 + 8) & ~v7) + *(_QWORD *)(v6 + 64);
  if (v7 > 7
    || (*(_DWORD *)(v6 + 80) & 0x100000) != 0
    || ((v10 + (((v7 | 7) + 9) & ~(v7 | 7)) + 31) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    v13 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = v13 + ((v7 + 16) & v8);
    swift_retain(v13);
  }
  else
  {
    v14 = ~v7;
    v15 = *(_QWORD *)a2;
    v16 = *(_BYTE *)(a2 + 8);
    sub_F9E4(*(_QWORD *)a2, v16);
    *(_QWORD *)a1 = v15;
    *(_BYTE *)(a1 + 8) = v16;
    v17 = (_QWORD *)((a1 + 16) & v8);
    v18 = (uint64_t *)((a2 + 16) & v8);
    v19 = *v18;
    *v17 = *v18;
    v20 = *(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 16);
    swift_bridgeObjectRetain(v19);
    v20(((unint64_t)v17 + v9) & v14, ((unint64_t)v18 + v9) & v14, v5);
    v21 = ((unint64_t)v17 + v10 + 7) & 0xFFFFFFFFFFFFFFF8;
    v22 = ((unint64_t)v18 + v10 + 7) & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v21 = *(_QWORD *)v22;
    v23 = *(_QWORD *)(v22 + 8);
    *(_QWORD *)(v21 + 8) = v23;
    *(_BYTE *)(v21 + 16) = *(_BYTE *)(v22 + 16);
    *(_QWORD *)(((unint64_t)v17 + v10 + 31) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v18 + v10 + 31) & 0xFFFFFFFFFFFFF8);
    swift_bridgeObjectRetain(v23);
  }
  return a1;
}

uint64_t sub_3B0BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  sub_BE0C(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (_QWORD *)((a1 + (v6 | 7) + 9) & ~(v6 | 7));
  swift_bridgeObjectRelease(*v7);
  (*(void (**)(unint64_t, uint64_t))(v5 + 8))(((unint64_t)v7 + v6 + 8) & ~v6, v4);
  return swift_bridgeObjectRelease(*(_QWORD *)((char *)&dword_8
                                             + (((unint64_t)v7 + ((v6 + 8) & ~v6) + *(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_3B150(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  void (*v15)(unint64_t, unint64_t, uint64_t);
  uint64_t v16;
  char *v17;
  char *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;

  v6 = *(_QWORD *)a2;
  v7 = *(_BYTE *)(a2 + 8);
  sub_F9E4(*(_QWORD *)a2, v7);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  v8 = *(_QWORD *)(a3 + 16);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = (v10 | 7) + 9;
  v12 = (_QWORD *)((v11 + a1) & ~(v10 | 7));
  v13 = (uint64_t *)((v11 + a2) & ~(v10 | 7));
  v14 = *v13;
  *v12 = *v13;
  v15 = *(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 16);
  swift_bridgeObjectRetain(v14);
  v15(((unint64_t)v12 + v10 + 8) & ~v10, ((unint64_t)v13 + v10 + 8) & ~v10, v8);
  v16 = *(_QWORD *)(v9 + 64) + ((v10 + 8) & ~v10);
  v17 = (char *)v12 + v16;
  v18 = (char *)v13 + v16;
  v19 = (unint64_t)(v17 + 7) & 0xFFFFFFFFFFFFFFF8;
  v20 = (unint64_t)(v18 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v19 = *(_QWORD *)v20;
  v21 = *(_QWORD *)(v20 + 8);
  *(_QWORD *)(v19 + 8) = v21;
  *(_BYTE *)(v19 + 16) = *(_BYTE *)(v20 + 16);
  *(_QWORD *)((unint64_t)(v17 + 31) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((unint64_t)(v18 + 31) & 0xFFFFFFFFFFFFF8);
  swift_bridgeObjectRetain(v21);
  return a1;
}

uint64_t sub_3B264(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v6 = *(_QWORD *)a2;
  v7 = *(_BYTE *)(a2 + 8);
  sub_F9E4(*(_QWORD *)a2, v7);
  v8 = *(_QWORD *)a1;
  v9 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  sub_BE0C(v8, v9);
  v10 = *(_QWORD *)(a3 + 16);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned __int8 *)(v11 + 80);
  v13 = (v12 | 7) + 9;
  v14 = (uint64_t *)((v13 + a1) & ~(v12 | 7));
  v15 = (uint64_t *)((v13 + a2) & ~(v12 | 7));
  v16 = *v15;
  v17 = *v14;
  *v14 = *v15;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease(v17);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v11 + 24))(((unint64_t)v14 + v12 + 8) & ~v12, ((unint64_t)v15 + v12 + 8) & ~v12, v10);
  v18 = *(_QWORD *)(v11 + 64) + ((v12 + 8) & ~v12);
  v19 = (char *)v14 + v18;
  v20 = (char *)v15 + v18;
  v21 = ((unint64_t)v14 + v18 + 7) & 0xFFFFFFFFFFFFFFF8;
  v22 = ((unint64_t)v15 + v18 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v21 = *(_QWORD *)v22;
  v23 = *(_QWORD *)(v22 + 8);
  v24 = *(_QWORD *)(v21 + 8);
  *(_QWORD *)(v21 + 8) = v23;
  swift_bridgeObjectRetain(v23);
  swift_bridgeObjectRelease(v24);
  *(_BYTE *)(v21 + 16) = *(_BYTE *)(v22 + 16);
  *(_QWORD *)((unint64_t)(v19 + 31) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((unint64_t)(v20 + 31) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_3B38C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = (v5 | 7) + 9;
  v7 = (_QWORD *)((v6 + a1) & ~(v5 | 7));
  v8 = (_QWORD *)((v6 + a2) & ~(v5 | 7));
  *v7 = *v8;
  (*(void (**)(unint64_t, unint64_t))(v4 + 32))(((unint64_t)v7 + v5 + 8) & ~v5, ((unint64_t)v8 + v5 + 8) & ~v5);
  v9 = *(_QWORD *)(v4 + 64) + ((v5 + 8) & ~v5);
  v10 = (char *)v7 + v9;
  v11 = (char *)v8 + v9;
  v12 = (unint64_t)(v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  v13 = (unint64_t)(v11 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(_OWORD *)v12 = *(_OWORD *)v13;
  *(_BYTE *)(v12 + 16) = *(_BYTE *)(v13 + 16);
  *(_QWORD *)((unint64_t)(v10 + 31) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((unint64_t)(v11 + 31) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_3B460(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;

  v6 = *a2;
  v7 = *((_BYTE *)a2 + 8);
  v8 = *(_QWORD *)a1;
  v9 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  sub_BE0C(v8, v9);
  v10 = *(_QWORD *)(a3 + 16);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned __int8 *)(v11 + 80);
  v13 = (v12 | 7) + 9;
  v14 = (uint64_t *)((v13 + a1) & ~(v12 | 7));
  v15 = (uint64_t *)(((unint64_t)a2 + v13) & ~(v12 | 7));
  v16 = *v14;
  *v14 = *v15;
  swift_bridgeObjectRelease(v16);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v11 + 40))(((unint64_t)v14 + v12 + 8) & ~v12, ((unint64_t)v15 + v12 + 8) & ~v12, v10);
  v17 = *(_QWORD *)(v11 + 64) + ((v12 + 8) & ~v12);
  v18 = (char *)v14 + v17;
  v19 = (char *)v15 + v17;
  v20 = ((unint64_t)v14 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
  v21 = (unint64_t)(v19 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v20 = *(_QWORD *)v21;
  v22 = *(_QWORD *)(v20 + 8);
  *(_QWORD *)(v20 + 8) = *(_QWORD *)(v21 + 8);
  swift_bridgeObjectRelease(v22);
  *(_BYTE *)(v20 + 16) = *(_BYTE *)(v21 + 16);
  *(_QWORD *)((unint64_t)(v18 + 31) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((unint64_t)(v19 + 31) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_3B56C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t *v14;
  unint64_t v15;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = v7 | 7;
  v9 = v7 + 8;
  if (v6 >= a2)
  {
    v14 = (unint64_t *)((a1 + v8 + 9) & ~v8);
    if ((v5 & 0x80000000) != 0)
    {
      return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)v14 + v9) & ~v7);
    }
    else
    {
      v15 = *v14;
      if (v15 >= 0xFFFFFFFF)
        LODWORD(v15) = -1;
      return (v15 + 1);
    }
  }
  else
  {
    if (((((*(_QWORD *)(v4 + 64) + (v9 & ~v7) + ((v8 + 9) & ~v8) + 31) & 0xFFFFFFFFFFFFFFF8) + 8) & 0xFFFFFFF8) != 0)
      v10 = 2;
    else
      v10 = a2 - v6 + 1;
    if (v10 >= 0x10000)
      v11 = 4;
    else
      v11 = 2;
    if (v10 < 0x100)
      v11 = 1;
    if (v10 >= 2)
      v12 = v11;
    else
      v12 = 0;
    return ((uint64_t (*)(void))((char *)&loc_3B608 + 4 * byte_1E2B30[v12]))();
  }
}

void sub_3B694(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  int v10;
  unsigned int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = *(unsigned __int8 *)(v5 + 80);
  if (v6 >= a3)
  {
    v10 = 0;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((*(_DWORD *)(v5 + 64)
         + (((_DWORD)v7 + 8) & ~(_DWORD)v7)
         + (((v7 | 7) + 9) & ~(v7 | 7))
         + 31) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v8 = a3 - v6 + 1;
    else
      v8 = 2;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X15 }
  }
  if (((*(_DWORD *)(v5 + 64)
       + (((_DWORD)v7 + 8) & ~(_DWORD)v7)
       + (((v7 | 7) + 9) & ~(v7 | 7))
       + 31) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    v11 = ~v6 + a2;
    bzero(a1, ((*(_QWORD *)(v5 + 64) + ((v7 + 8) & ~v7) + (((v7 | 7) + 9) & ~(v7 | 7)) + 31) & 0xFFFFFFFFFFFFFFF8) + 8);
    *a1 = v11;
  }
  __asm { BR              X10 }
}

void sub_3B7B0()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x3B820);
}

void sub_3B7B8(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x3B7C0);
  JUMPOUT(0x3B820);
}

void sub_3B7DC()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x3B820);
}

void sub_3B7E4()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x3B820);
}

void sub_3B7EC(uint64_t a1, int a2, int a3)
{
  uint64_t v3;
  uint64_t v4;

  *(_WORD *)(v3 + v4) = 0;
  if (a2)
  {
    if ((a3 & 0x80000000) == 0)
    {
      if ((a2 & 0x80000000) == 0)
        JUMPOUT(0x3B81CLL);
      JUMPOUT(0x3B818);
    }
    JUMPOUT(0x3B7F8);
  }
  JUMPOUT(0x3B820);
}

uint64_t getEnumTagSinglePayload for SingleThumbnailSubStyle(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 2 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 2) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 2;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 2;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 2;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v8 = v6 - 3;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for SegmentedControlStyle(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_3B914 + 4 * byte_1E2B44[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_3B948 + 4 * asc_1E2B3C[v4 + 3]))();
}

uint64_t sub_3B948(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_3B950(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x3B958);
  return result;
}

uint64_t sub_3B964(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x3B96CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_3B970(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_3B978(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SegmentedControlStyle()
{
  return &type metadata for SegmentedControlStyle;
}

uint64_t sub_3B994(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t WitnessTable;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t OpaqueTypeConformance2;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t OpaqueTypeMetadata2;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t AssociatedTypeWitness;
  uint64_t v24;
  uint64_t v25;
  uint64_t AssociatedConformanceWitness;

  v1 = *a1;
  v2 = a1[1];
  v3 = sub_7EF8(&qword_25FB88);
  v4 = type metadata accessor for Array(255, v1);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v4);
  v6 = type metadata accessor for IndexedRandomAccessCollection(255, v4, WitnessTable);
  v7 = *(_QWORD *)(v2 + 8);
  v22 = v6;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v7, v1, &protocol requirements base descriptor for Identifiable, &associated type descriptor for Identifiable.ID);
  v24 = sub_7EF8(&qword_25FB30);
  v25 = swift_getWitnessTable(&protocol conformance descriptor for IndexedRandomAccessCollection<A>, v6);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v7, v1, AssociatedTypeWitness, &protocol requirements base descriptor for Identifiable, &associated conformance descriptor for Identifiable.Identifiable.ID: Hashable);
  v8 = type metadata accessor for ForEach(255, &v22);
  v9 = sub_7EF8(&qword_25FB38);
  v10 = sub_7EF8(&qword_25FB40);
  v11 = sub_3AC7C();
  v22 = v10;
  AssociatedTypeWitness = v11;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v22, &opaque type descriptor for <<opaque return type of View.transformMetricsContext(transform:)>>, 1);
  v22 = v9;
  AssociatedTypeWitness = OpaqueTypeConformance2;
  swift_getOpaqueTypeConformance2(&v22, &opaque type descriptor for <<opaque return type of View.impressionable(_:configuration:position:definesParentContext:)>>, 1);
  v13 = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v8);
  v14 = type metadata accessor for HStack(255, v8, v13);
  swift_getWitnessTable(&protocol conformance descriptor for HStack<A>, v14);
  v15 = type metadata accessor for ScrollView(255, v14);
  v16 = swift_getWitnessTable(&protocol conformance descriptor for ScrollView<A>, v15);
  v22 = v15;
  AssociatedTypeWitness = v16;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(255, &v22, &opaque type descriptor for <<opaque return type of View.scrollBounceBehavior(_:axes:)>>, 0);
  v22 = v15;
  AssociatedTypeWitness = v16;
  v18 = swift_getOpaqueTypeConformance2(&v22, &opaque type descriptor for <<opaque return type of View.scrollBounceBehavior(_:axes:)>>, 1);
  v22 = OpaqueTypeMetadata2;
  AssociatedTypeWitness = v18;
  v19 = swift_getOpaqueTypeMetadata2(255, &v22, &opaque type descriptor for <<opaque return type of View.scrollClipDisabled(_:)>>, 0);
  v20 = type metadata accessor for _ConditionalContent(255, v3, v19);
  sub_3AD50();
  v22 = OpaqueTypeMetadata2;
  AssociatedTypeWitness = v18;
  swift_getOpaqueTypeConformance2(&v22, &opaque type descriptor for <<opaque return type of View.scrollClipDisabled(_:)>>, 1);
  return swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v20);
}

_QWORD *sub_3BBF8(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  void (*v44)(char *, char *, uint64_t);

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = sub_5440(&qword_25F1E8);
    if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
    {
      v8 = type metadata accessor for ColorScheme(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      v9 = a1;
      v10 = v7;
      v11 = 1;
    }
    else
    {
      v13 = *a2;
      *a1 = *a2;
      swift_retain(v13);
      v9 = a1;
      v10 = v7;
      v11 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v10, v11);
    v14 = a3[5];
    v15 = (_QWORD *)((char *)a1 + v14);
    v16 = (_QWORD *)((char *)a2 + v14);
    v17 = sub_5440(&qword_25E948);
    if (swift_getEnumCaseMultiPayload(v16, v17) == 1)
    {
      v18 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v15, v16, v18);
      v19 = v15;
      v20 = v17;
      v21 = 1;
    }
    else
    {
      v22 = *v16;
      *v15 = *v16;
      swift_retain(v22);
      v19 = v15;
      v20 = v17;
      v21 = 0;
    }
    swift_storeEnumTagMultiPayload(v19, v20, v21);
    v23 = a3[6];
    v24 = (char *)a1 + v23;
    v25 = (char *)a2 + v23;
    v26 = *(_QWORD *)v25;
    v27 = v25[8];
    sub_F9E4(*(_QWORD *)v25, v27);
    *(_QWORD *)v24 = v26;
    v24[8] = v27;
    v28 = a3[7];
    v29 = (char *)a1 + v28;
    v30 = (char *)a2 + v28;
    v31 = *(_QWORD *)v30;
    v32 = v30[8];
    sub_F9E4(*(_QWORD *)v30, v32);
    *(_QWORD *)v29 = v31;
    v29[8] = v32;
    v33 = a3[8];
    v34 = (char *)a1 + v33;
    v35 = (char *)a2 + v33;
    v36 = *(_QWORD *)v35;
    v37 = v35[8];
    sub_F9E4(*(_QWORD *)v35, v37);
    *(_QWORD *)v34 = v36;
    v34[8] = v37;
    v38 = a3[10];
    *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
    *(_QWORD *)((char *)a1 + v38) = *(_QWORD *)((char *)a2 + v38);
    v39 = a3[12];
    *((_BYTE *)a1 + a3[11]) = *((_BYTE *)a2 + a3[11]);
    *(_QWORD *)((char *)a1 + v39) = *(_QWORD *)((char *)a2 + v39);
    v40 = a3[13];
    v41 = (char *)a1 + v40;
    v42 = (char *)a2 + v40;
    v43 = sub_5440(&qword_25FC38);
    v44 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v43 - 8) + 16);
    v44(v41, v42, v43);
    v44((char *)a1 + a3[14], (char *)a2 + a3[14], v43);
  }
  return a1;
}

uint64_t sub_3BE38(_QWORD *a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  void (*v12)(char *, uint64_t);

  v4 = sub_5440(&qword_25F1E8);
  if (swift_getEnumCaseMultiPayload(a1, v4) == 1)
  {
    v5 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  }
  else
  {
    swift_release(*a1);
  }
  v6 = (_QWORD *)((char *)a1 + a2[5]);
  v7 = sub_5440(&qword_25E948);
  if (swift_getEnumCaseMultiPayload(v6, v7) == 1)
  {
    v8 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v6, v8);
  }
  else
  {
    swift_release(*v6);
  }
  sub_BE0C(*(_QWORD *)((char *)a1 + a2[6]), *((_BYTE *)a1 + a2[6] + 8));
  sub_BE0C(*(_QWORD *)((char *)a1 + a2[7]), *((_BYTE *)a1 + a2[7] + 8));
  sub_BE0C(*(_QWORD *)((char *)a1 + a2[8]), *((_BYTE *)a1 + a2[8] + 8));
  v9 = (char *)a1 + a2[13];
  v10 = sub_5440(&qword_25FC38);
  v12 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v10 - 8) + 8);
  v12(v9, v10);
  return ((uint64_t (*)(char *, uint64_t))v12)((char *)a1 + a2[14], v10);
}

_QWORD *sub_3BF80(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  void (*v42)(char *, char *, uint64_t);

  v6 = sub_5440(&qword_25F1E8);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a1;
    v9 = v6;
    v10 = 1;
  }
  else
  {
    v11 = *a2;
    *a1 = *a2;
    swift_retain(v11);
    v8 = a1;
    v9 = v6;
    v10 = 0;
  }
  swift_storeEnumTagMultiPayload(v8, v9, v10);
  v12 = a3[5];
  v13 = (_QWORD *)((char *)a1 + v12);
  v14 = (_QWORD *)((char *)a2 + v12);
  v15 = sub_5440(&qword_25E948);
  if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
  {
    v16 = type metadata accessor for ColorScheme(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v13, v14, v16);
    v17 = v13;
    v18 = v15;
    v19 = 1;
  }
  else
  {
    v20 = *v14;
    *v13 = *v14;
    swift_retain(v20);
    v17 = v13;
    v18 = v15;
    v19 = 0;
  }
  swift_storeEnumTagMultiPayload(v17, v18, v19);
  v21 = a3[6];
  v22 = (char *)a1 + v21;
  v23 = (char *)a2 + v21;
  v24 = *(_QWORD *)v23;
  v25 = v23[8];
  sub_F9E4(*(_QWORD *)v23, v25);
  *(_QWORD *)v22 = v24;
  v22[8] = v25;
  v26 = a3[7];
  v27 = (char *)a1 + v26;
  v28 = (char *)a2 + v26;
  v29 = *(_QWORD *)v28;
  v30 = v28[8];
  sub_F9E4(*(_QWORD *)v28, v30);
  *(_QWORD *)v27 = v29;
  v27[8] = v30;
  v31 = a3[8];
  v32 = (char *)a1 + v31;
  v33 = (char *)a2 + v31;
  v34 = *(_QWORD *)v33;
  v35 = v33[8];
  sub_F9E4(*(_QWORD *)v33, v35);
  *(_QWORD *)v32 = v34;
  v32[8] = v35;
  v36 = a3[10];
  *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
  *(_QWORD *)((char *)a1 + v36) = *(_QWORD *)((char *)a2 + v36);
  v37 = a3[12];
  *((_BYTE *)a1 + a3[11]) = *((_BYTE *)a2 + a3[11]);
  *(_QWORD *)((char *)a1 + v37) = *(_QWORD *)((char *)a2 + v37);
  v38 = a3[13];
  v39 = (char *)a1 + v38;
  v40 = (char *)a2 + v38;
  v41 = sub_5440(&qword_25FC38);
  v42 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v41 - 8) + 16);
  v42(v39, v40, v41);
  v42((char *)a1 + a3[14], (char *)a2 + a3[14], v41);
  return a1;
}

_QWORD *sub_3C194(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  void (*v46)(char *, char *, uint64_t);

  if (a1 != a2)
  {
    sub_B414((uint64_t)a1, &qword_25F1E8);
    v6 = sub_5440(&qword_25F1E8);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for ColorScheme(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = v6;
      v10 = 1;
    }
    else
    {
      v11 = *a2;
      *a1 = *a2;
      swift_retain(v11);
      v8 = a1;
      v9 = v6;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
    v12 = a3[5];
    v13 = (_QWORD *)((char *)a1 + v12);
    v14 = (_QWORD *)((char *)a2 + v12);
    sub_B414((uint64_t)a1 + v12, &qword_25E948);
    v15 = sub_5440(&qword_25E948);
    if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
    {
      v16 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v13, v14, v16);
      v17 = v13;
      v18 = v15;
      v19 = 1;
    }
    else
    {
      v20 = *v14;
      *v13 = *v14;
      swift_retain(v20);
      v17 = v13;
      v18 = v15;
      v19 = 0;
    }
    swift_storeEnumTagMultiPayload(v17, v18, v19);
  }
  v21 = a3[6];
  v22 = (char *)a1 + v21;
  v23 = (char *)a2 + v21;
  v24 = *(_QWORD *)v23;
  v25 = v23[8];
  sub_F9E4(*(_QWORD *)v23, v25);
  v26 = *(_QWORD *)v22;
  v27 = v22[8];
  *(_QWORD *)v22 = v24;
  v22[8] = v25;
  sub_BE0C(v26, v27);
  v28 = a3[7];
  v29 = (char *)a1 + v28;
  v30 = (char *)a2 + v28;
  v31 = *(_QWORD *)v30;
  v32 = v30[8];
  sub_F9E4(*(_QWORD *)v30, v32);
  v33 = *(_QWORD *)v29;
  v34 = v29[8];
  *(_QWORD *)v29 = v31;
  v29[8] = v32;
  sub_BE0C(v33, v34);
  v35 = a3[8];
  v36 = (char *)a1 + v35;
  v37 = (char *)a2 + v35;
  v38 = *(_QWORD *)v37;
  v39 = v37[8];
  sub_F9E4(*(_QWORD *)v37, v39);
  v40 = *(_QWORD *)v36;
  v41 = v36[8];
  *(_QWORD *)v36 = v38;
  v36[8] = v39;
  sub_BE0C(v40, v41);
  *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
  *(_QWORD *)((char *)a1 + a3[10]) = *(_QWORD *)((char *)a2 + a3[10]);
  *((_BYTE *)a1 + a3[11]) = *((_BYTE *)a2 + a3[11]);
  *(_QWORD *)((char *)a1 + a3[12]) = *(_QWORD *)((char *)a2 + a3[12]);
  v42 = a3[13];
  v43 = (char *)a1 + v42;
  v44 = (char *)a2 + v42;
  v45 = sub_5440(&qword_25FC38);
  v46 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v45 - 8) + 24);
  v46(v43, v44, v45);
  v46((char *)a1 + a3[14], (char *)a2 + a3[14], v45);
  return a1;
}

char *sub_3C3FC(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  void (*v28)(char *, char *, uint64_t);

  v6 = sub_5440(&qword_25F1E8);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for ColorScheme(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v8 = a3[5];
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = sub_5440(&qword_25E948);
  if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
  {
    v12 = type metadata accessor for ColorScheme(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v9, v10, v12);
    swift_storeEnumTagMultiPayload(v9, v11, 1);
  }
  else
  {
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  v13 = a3[6];
  v14 = a3[7];
  v15 = &a1[v13];
  v16 = &a2[v13];
  *(_QWORD *)v15 = *(_QWORD *)v16;
  v15[8] = v16[8];
  v17 = &a1[v14];
  v18 = &a2[v14];
  *(_QWORD *)v17 = *(_QWORD *)v18;
  v17[8] = v18[8];
  v19 = a3[8];
  v20 = a3[9];
  v21 = &a1[v19];
  v22 = &a2[v19];
  *(_QWORD *)v21 = *(_QWORD *)v22;
  v21[8] = v22[8];
  a1[v20] = a2[v20];
  v23 = a3[11];
  *(_QWORD *)&a1[a3[10]] = *(_QWORD *)&a2[a3[10]];
  a1[v23] = a2[v23];
  v24 = a3[13];
  *(_QWORD *)&a1[a3[12]] = *(_QWORD *)&a2[a3[12]];
  v25 = &a1[v24];
  v26 = &a2[v24];
  v27 = sub_5440(&qword_25FC38);
  v28 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 32);
  v28(v25, v26, v27);
  v28(&a1[a3[14]], &a2[a3[14]], v27);
  return a1;
}

char *sub_3C5DC(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  void (*v37)(char *, char *, uint64_t);

  if (a1 != a2)
  {
    sub_B414((uint64_t)a1, &qword_25F1E8);
    v6 = sub_5440(&qword_25F1E8);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for ColorScheme(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
    v8 = a3[5];
    v9 = &a1[v8];
    v10 = &a2[v8];
    sub_B414((uint64_t)&a1[v8], &qword_25E948);
    v11 = sub_5440(&qword_25E948);
    if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
    {
      v12 = type metadata accessor for ColorScheme(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v9, v10, v12);
      swift_storeEnumTagMultiPayload(v9, v11, 1);
    }
    else
    {
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    }
  }
  v13 = a3[6];
  v14 = &a1[v13];
  v15 = &a2[v13];
  v16 = *(_QWORD *)v15;
  LOBYTE(v15) = v15[8];
  v17 = *(_QWORD *)v14;
  v18 = v14[8];
  *(_QWORD *)v14 = v16;
  v14[8] = (char)v15;
  sub_BE0C(v17, v18);
  v19 = a3[7];
  v20 = &a1[v19];
  v21 = &a2[v19];
  v22 = *(_QWORD *)v21;
  LOBYTE(v21) = v21[8];
  v23 = *(_QWORD *)v20;
  v24 = v20[8];
  *(_QWORD *)v20 = v22;
  v20[8] = (char)v21;
  sub_BE0C(v23, v24);
  v25 = a3[8];
  v26 = &a1[v25];
  v27 = &a2[v25];
  v28 = *(_QWORD *)v27;
  LOBYTE(v27) = v27[8];
  v29 = *(_QWORD *)v26;
  v30 = v26[8];
  *(_QWORD *)v26 = v28;
  v26[8] = (char)v27;
  sub_BE0C(v29, v30);
  v31 = a3[10];
  a1[a3[9]] = a2[a3[9]];
  *(_QWORD *)&a1[v31] = *(_QWORD *)&a2[v31];
  v32 = a3[12];
  a1[a3[11]] = a2[a3[11]];
  *(_QWORD *)&a1[v32] = *(_QWORD *)&a2[v32];
  v33 = a3[13];
  v34 = &a1[v33];
  v35 = &a2[v33];
  v36 = sub_5440(&qword_25FC38);
  v37 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v36 - 8) + 40);
  v37(v34, v35, v36);
  v37(&a1[a3[14]], &a2[a3[14]], v36);
  return a1;
}

uint64_t sub_3C810(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_3C81C);
}

uint64_t sub_3C81C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;

  v6 = sub_5440(&qword_25F210);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = sub_5440(&qword_25EAE8);
  v10 = *(_QWORD *)(v9 - 8);
  if (*(_DWORD *)(v10 + 84) == (_DWORD)a2)
  {
    v11 = v9;
    v12 = a3[5];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1 + v12, a2, v11);
  }
  if ((_DWORD)a2 != 254)
  {
    v11 = sub_5440(&qword_25FC38);
    v10 = *(_QWORD *)(v11 - 8);
    v12 = a3[13];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1 + v12, a2, v11);
  }
  v13 = *(unsigned __int8 *)(a1 + a3[6] + 8);
  if (v13 > 1)
    return (v13 ^ 0xFF) + 1;
  else
    return 0;
}

uint64_t sub_3C8F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_3C8FC);
}

uint64_t sub_3C8FC(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;

  v8 = sub_5440(&qword_25F210);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    result = sub_5440(&qword_25EAE8);
    v14 = *(_QWORD *)(result - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = result;
      v15 = a4[5];
    }
    else
    {
      if (a3 == 254)
      {
        *(_BYTE *)(a1 + a4[6] + 8) = -(char)a2;
        return result;
      }
      v10 = sub_5440(&qword_25FC38);
      v14 = *(_QWORD *)(v10 - 8);
      v15 = a4[13];
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for CustomPickerButtonStyle(uint64_t a1)
{
  uint64_t result;

  result = qword_25FC98;
  if (!qword_25FC98)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CustomPickerButtonStyle);
  return result;
}

void sub_3CA0C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[9];
  uint64_t v9;
  uint64_t v10;

  sub_2ADCC(319, (unint64_t *)&qword_25F298, type metadata accessor for ColorConstants);
  if (v3 <= 0x3F)
  {
    v8[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_2ADCC(319, (unint64_t *)&qword_25EB58, (uint64_t (*)(uint64_t))&type metadata accessor for ColorScheme);
    if (v5 <= 0x3F)
    {
      v8[1] = *(_QWORD *)(v4 - 8) + 64;
      v8[2] = "\t";
      v8[3] = "\t";
      v8[4] = "\t";
      v8[5] = &unk_1E2D08;
      v8[6] = (char *)&value witness table for Builtin.Int64 + 64;
      v8[7] = &unk_1E2C98;
      v8[8] = (char *)&value witness table for Builtin.Int64 + 64;
      sub_3CAFC(319);
      if (v7 <= 0x3F)
      {
        v9 = *(_QWORD *)(v6 - 8) + 64;
        v10 = v9;
        swift_initStructMetadata(a1, 256, 11, v8, a1 + 16);
      }
    }
  }
}

void sub_3CAFC(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_25FCA8)
  {
    v2 = sub_3CB54();
    v3 = type metadata accessor for ScaledMetric(a1, &type metadata for Double, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_25FCA8);
  }
}

unint64_t sub_3CB54()
{
  unint64_t result;

  result = qword_25FCB0;
  if (!qword_25FCB0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Double, &type metadata for Double);
    atomic_store(result, (unint64_t *)&qword_25FCB0);
  }
  return result;
}

uint64_t sub_3CB98(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_22ACF8, 1);
}

unint64_t sub_3CBB0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25FD68;
  if (!qword_25FD68)
  {
    v1 = sub_7EF8(&qword_25FD18);
    sub_3CC54(&qword_25FD70, &qword_25FD10, (void (*)(void))sub_3CCBC);
    sub_7FD8((unint64_t *)&qword_25FD88, &qword_25FD90, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_25FD68);
  }
  return result;
}

uint64_t sub_3CC54(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_7EF8(a2);
    a3();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v6);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_3CCBC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25FD78;
  if (!qword_25FD78)
  {
    v1 = sub_7EF8(&qword_25FD08);
    sub_6FD0((unint64_t *)&qword_25FD80, (uint64_t (*)(uint64_t))&type metadata accessor for ButtonStyleConfiguration.Label, (uint64_t)&protocol conformance descriptor for ButtonStyleConfiguration.Label);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_25FD78);
  }
  return result;
}

unint64_t sub_3CD40()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25FDA0;
  if (!qword_25FDA0)
  {
    v1 = sub_7EF8(&qword_25FD48);
    sub_3CDC4();
    sub_7FD8(&qword_25FDE8, &qword_25FD98, (uint64_t)&protocol conformance descriptor for _ContentShapeKindModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_25FDA0);
  }
  return result;
}

unint64_t sub_3CDC4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25FDA8;
  if (!qword_25FDA8)
  {
    v1 = sub_7EF8(&qword_25FD40);
    sub_3CE48();
    sub_7FD8(&qword_25FDD8, &qword_25FDE0, (uint64_t)&protocol conformance descriptor for _OverlayModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_25FDA8);
  }
  return result;
}

unint64_t sub_3CE48()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25FDB0;
  if (!qword_25FDB0)
  {
    v1 = sub_7EF8(&qword_25FD38);
    sub_3CC54(&qword_25FDB8, &qword_25FD30, (void (*)(void))sub_3CEEC);
    sub_7FD8(&qword_25FDC8, &qword_25FDD0, (uint64_t)&protocol conformance descriptor for _BackgroundModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_25FDB0);
  }
  return result;
}

unint64_t sub_3CEEC()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_25FDC0;
  if (!qword_25FDC0)
  {
    v1 = sub_7EF8(&qword_25FD28);
    v2[0] = sub_7EF8(&qword_25FD18);
    v2[1] = sub_3CBB0();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.underline(_:pattern:color:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_25FDC0);
  }
  return result;
}

unint64_t sub_3CF80()
{
  unint64_t result;

  result = qword_25FE00;
  if (!qword_25FE00)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Capsule._Inset, &type metadata for Capsule._Inset);
    atomic_store(result, (unint64_t *)&qword_25FE00);
  }
  return result;
}

uint64_t sub_3CFCC@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return sub_37094(v2[4], v2[2], v2[3], a1, a2);
}

uint64_t sub_3CFD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return dispatch thunk of Identifiable.id.getter(*(_QWORD *)(a3 + a2 - 16), *(_QWORD *)(*(_QWORD *)(a3 + a2 - 8) + 8));
}

uint64_t sub_3D008()
{
  return 16;
}

__n128 sub_3D014(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_3D020(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = *(_QWORD *)(v4 + 24);
  v7 = type metadata accessor for SegmentedControl(0, v5, v6, a4);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (v9 + 32) & ~v9;
  v11 = v10 + *(_QWORD *)(v8 + 64);
  v12 = v9 | 7;
  v13 = v4 + v10;
  sub_BE0C(*(_QWORD *)(v4 + v10), *(_BYTE *)(v4 + v10 + 8));
  v14 = (char *)(v13 + *(int *)(v7 + 36));
  swift_bridgeObjectRelease(*(_QWORD *)v14);
  v16 = type metadata accessor for SegmentedControlViewModel(0, v5, v6, v15);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(&v14[*(int *)(v16 + 36)], v5);
  swift_bridgeObjectRelease(*(_QWORD *)(v13 + *(int *)(v7 + 40) + 8));
  return swift_deallocObject(v4, v11, v12);
}

uint64_t sub_3D0E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;

  v8 = *(_QWORD *)(v4 + 16);
  v9 = *(_QWORD *)(v4 + 24);
  type metadata accessor for SegmentedControl(0, v8, v9, a3);
  return sub_37420(a1, a2, v8, v9, a4);
}

uint64_t sub_3D158()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_3D17C(char *a1)
{
  uint64_t v1;
  uint64_t (*v3)(uint64_t, char *);
  uint64_t v4;
  uint64_t TupleTypeMetadata2;

  v3 = *(uint64_t (**)(uint64_t, char *))(v1 + 32);
  v4 = *(_QWORD *)a1;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, &type metadata for Int, *(_QWORD *)(v1 + 16), "offset element ", 0);
  return v3(v4, &a1[*(int *)(TupleTypeMetadata2 + 48)]);
}

uint64_t sub_3D1E8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_3D1F8(uint64_t a1)
{
  uint64_t v1;

  return sub_E931C(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_3D200(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t);
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = *(_QWORD *)(v4 + 24);
  v7 = *(_QWORD *)(v5 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v8 + 32) & ~v8;
  v10 = *(_QWORD *)(v7 + 64);
  v11 = type metadata accessor for SegmentedControl(0, v5, v6, a4);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned __int8 *)(v12 + 80);
  v14 = (v9 + v10 + v13) & ~v13;
  v15 = v14 + *(_QWORD *)(v12 + 64);
  v16 = v8 | v13 | 7;
  v17 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v17(v4 + v9, v5);
  v18 = v4 + v14;
  sub_BE0C(*(_QWORD *)(v4 + v14), *(_BYTE *)(v4 + v14 + 8));
  v19 = (_QWORD *)(v4 + v14 + *(int *)(v11 + 36));
  swift_bridgeObjectRelease(*v19);
  v21 = type metadata accessor for SegmentedControlViewModel(0, v5, v6, v20);
  v17((uint64_t)v19 + *(int *)(v21 + 36), v5);
  swift_bridgeObjectRelease(*(_QWORD *)(v18 + *(int *)(v11 + 40) + 8));
  return swift_deallocObject(v4, v15, v16);
}

uint64_t sub_3D2F4@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(_QWORD *)(v2 + 16);
  v5 = *(_QWORD *)(v2 + 24);
  v6 = *(_QWORD *)(v4 - 8);
  v7 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for SegmentedControl(0, v4, v5, a1) - 8) + 80);
  return sub_3871C(v2 + v7, v2 + ((v7 + v8 + v9) & ~v9), v4, v5, a2);
}

uint64_t sub_3D390()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

_BYTE *sub_3D3A0(_BYTE *a1)
{
  uint64_t v1;

  return sub_7BA90(a1, *(_BYTE *)(v1 + 16));
}

unint64_t sub_3D3A8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25FE70;
  if (!qword_25FE70)
  {
    v1 = sub_7EF8(&qword_25FE50);
    sub_7FD8(&qword_25FE78, &qword_25FE48, (uint64_t)&protocol conformance descriptor for BooksActionButton<A>);
    sub_7FD8(&qword_25FE80, &qword_25FE88, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyTransformModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_25FE70);
  }
  return result;
}

uint64_t sub_3D444()
{
  uint64_t *v0;

  return sub_39470(v0[4], v0[2], v0[3]);
}

uint64_t sub_3D450()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = sub_5440(&qword_25FE68);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = *(_QWORD *)(v2 + 64) + v4 + 2;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v6, v5);
}

uint64_t sub_3D4B8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;

  v5 = *(_QWORD *)(sub_5440(&qword_25FE68) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  return sub_3AA70(a1, v2 + v6, *(_BYTE *)(v2 + *(_QWORD *)(v5 + 64) + v6), *(_BYTE *)(v2 + *(_QWORD *)(v5 + 64) + v6 + 1), a2);
}

unint64_t sub_3D51C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25FEB8;
  if (!qword_25FEB8)
  {
    v1 = sub_7EF8(&qword_25FEB0);
    sub_3D588();
    sub_3D768();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_25FEB8);
  }
  return result;
}

unint64_t sub_3D588()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t OpaqueTypeConformance2;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;

  result = qword_25FEC0;
  if (!qword_25FEC0)
  {
    v1 = sub_7EF8(&qword_25FEC8);
    v2 = sub_7EF8(&qword_25FE60);
    v3 = type metadata accessor for LocalizedText(255);
    v4 = sub_7EF8(&qword_25FE58);
    v5 = sub_7EF8(&qword_25FE40);
    v10 = sub_7EF8(&qword_25FE50);
    v11 = type metadata accessor for CustomPickerButtonStyle(255);
    v12 = sub_3D3A8();
    v13 = sub_6FD0(&qword_25FE90, type metadata accessor for CustomPickerButtonStyle, (uint64_t)&unk_1E2D20);
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v10, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
    v7 = sub_7FD8(&qword_25FEA0, &qword_25FE40, (uint64_t)&protocol conformance descriptor for ClosedRange<A>);
    v10 = v4;
    v11 = v5;
    v12 = OpaqueTypeConformance2;
    v13 = v7;
    v8 = swift_getOpaqueTypeConformance2(&v10, &opaque type descriptor for <<opaque return type of View.dynamicTypeSize<A>(_:)>>, 1);
    v9 = sub_6FD0((unint64_t *)&qword_25FEA8, (uint64_t (*)(uint64_t))&type metadata accessor for LocalizedText, (uint64_t)&protocol conformance descriptor for LocalizedText);
    v10 = v2;
    v11 = v3;
    v12 = v8;
    v13 = v9;
    swift_getOpaqueTypeConformance2(&v10, &opaque type descriptor for <<opaque return type of View.accessibilityShowsLargeContentViewer<A>(_:)>>, 1);
    sub_3D724();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_25FEC0);
  }
  return result;
}

unint64_t sub_3D724()
{
  unint64_t result;

  result = qword_25FED0;
  if (!qword_25FED0)
  {
    result = swift_getWitnessTable(&unk_1EF754, &type metadata for AccessibilityConditionallySelected);
    atomic_store(result, (unint64_t *)&qword_25FED0);
  }
  return result;
}

unint64_t sub_3D768()
{
  unint64_t result;

  result = qword_25FED8;
  if (!qword_25FED8)
  {
    result = swift_getWitnessTable(&unk_1EF7A4, &type metadata for AccessibilityConditionalHint);
    atomic_store(result, (unint64_t *)&qword_25FED8);
  }
  return result;
}

uint64_t sub_3D7B8@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.accessibilityShowButtonShapes.getter();
  *a1 = result & 1;
  return result;
}

unint64_t sub_3D800()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[4];

  result = qword_25FF48;
  if (!qword_25FF48)
  {
    v1 = sub_7EF8(&qword_25FD58);
    v2[0] = sub_7EF8(&qword_25FD48);
    v2[1] = type metadata accessor for AutomaticHoverEffect(255);
    v2[2] = sub_3CD40();
    v2[3] = sub_6FD0((unint64_t *)&qword_25FDF0, (uint64_t (*)(uint64_t))&type metadata accessor for AutomaticHoverEffect, (uint64_t)&protocol conformance descriptor for AutomaticHoverEffect);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.hoverEffect<A>(_:isEnabled:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_25FF48);
  }
  return result;
}

double sub_3D8D8()
{
  double result;

  result = 350.0;
  xmmword_25FF50 = xmmword_1E2FD0;
  return result;
}

double static YearInReviewSharableImage.size.getter()
{
  if (qword_25DB90 != -1)
    swift_once(&qword_25DB90, sub_3D8D8);
  return *(double *)&xmmword_25FF50;
}

uint64_t static YearInReviewSharableImage.timeout.getter()
{
  return 200000000000000000;
}

uint64_t YearInReviewSharableImage.init(content:background:localizedYear:)@<X0>(__int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v10;
  int *v11;
  char *v12;
  char *v13;
  uint64_t result;
  _QWORD *v15;

  *a5 = swift_getKeyPath(&unk_1E2FF0);
  v10 = sub_5440(&qword_25E948);
  swift_storeEnumTagMultiPayload(a5, v10, 0);
  v11 = (int *)type metadata accessor for YearInReviewSharableImage(0);
  v12 = (char *)a5 + v11[5];
  *(_QWORD *)v12 = swift_getKeyPath(&unk_1E3020);
  v12[8] = 0;
  v13 = (char *)a5 + v11[6];
  *(_QWORD *)v13 = swift_getKeyPath(&unk_1E3050);
  v13[40] = 0;
  sub_AC68(a1, (uint64_t)a5 + v11[7]);
  result = sub_3F710(a2, (uint64_t)a5 + v11[8]);
  v15 = (_QWORD *)((char *)a5 + v11[9]);
  *v15 = a3;
  v15[1] = a4;
  return result;
}

uint64_t type metadata accessor for YearInReviewSharableImage(uint64_t a1)
{
  uint64_t result;

  result = qword_25FFE0;
  if (!qword_25FFE0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for YearInReviewSharableImage);
  return result;
}

uint64_t YearInReviewSharableImage.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;

  v2 = v1;
  v4 = type metadata accessor for DynamicTypeSize(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_5440(&qword_25FF60);
  __chkstk_darwin(v8);
  v10 = (uint64_t *)((char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = sub_5440(&qword_25FF68);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  *v10 = _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0();
  v10[1] = v15;
  v16 = sub_5440(&qword_25FF70);
  sub_3DC40(v2, (uint64_t)v10 + *(int *)(v16 + 44));
  (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for DynamicTypeSize.large(_:), v4);
  v17 = sub_7FD8(&qword_25FF78, &qword_25FF60, (uint64_t)&protocol conformance descriptor for ZStack<A>);
  View.dynamicTypeSize(_:)(v7, v8, v17);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  v18 = sub_B414((uint64_t)v10, &qword_25FF60);
  v19 = static SafeAreaRegions.all.getter(v18);
  LOBYTE(v4) = static Edge.Set.all.getter(v19);
  (*(void (**)(uint64_t, char *, uint64_t))(v12 + 16))(a1, v14, v11);
  v20 = a1 + *(int *)(sub_5440(&qword_25FF80) + 36);
  *(_QWORD *)v20 = v19;
  *(_BYTE *)(v20 + 8) = v4;
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
}

uint64_t sub_3DC40@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;

  v26 = a2;
  v3 = sub_5440(&qword_260030);
  __chkstk_darwin(v3);
  v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_5440(&qword_260038);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v25 - v10;
  v12 = sub_5440(&qword_260040);
  v13 = __chkstk_darwin(v12);
  v15 = (char *)&v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v17 = (char *)&v25 - v16;
  v18 = sub_3DE84((uint64_t)&v25 - v16);
  *(_QWORD *)v5 = static HorizontalAlignment.center.getter(v18);
  *((_QWORD *)v5 + 1) = 0x4030000000000000;
  v5[16] = 0;
  v19 = sub_5440(&qword_260048);
  sub_3E598(a1, (uint64_t *)&v5[*(int *)(v19 + 44)]);
  LOBYTE(a1) = static Edge.Set.all.getter(v20);
  sub_B3D0((uint64_t)v5, (uint64_t)v9, &qword_260030);
  v21 = &v9[*(int *)(v6 + 36)];
  *v21 = a1;
  *(_OWORD *)(v21 + 8) = 0u;
  *(_OWORD *)(v21 + 24) = 0u;
  v21[40] = 1;
  sub_B414((uint64_t)v5, &qword_260030);
  sub_167A4((uint64_t)v9, (uint64_t)v11, &qword_260038);
  sub_B3D0((uint64_t)v17, (uint64_t)v15, &qword_260040);
  sub_B3D0((uint64_t)v11, (uint64_t)v9, &qword_260038);
  v22 = v26;
  sub_B3D0((uint64_t)v15, v26, &qword_260040);
  v23 = sub_5440(&qword_260050);
  sub_B3D0((uint64_t)v9, v22 + *(int *)(v23 + 48), &qword_260038);
  sub_B414((uint64_t)v11, &qword_260038);
  sub_B414((uint64_t)v17, &qword_260040);
  sub_B414((uint64_t)v9, &qword_260038);
  return sub_B414((uint64_t)v15, &qword_260040);
}

uint64_t sub_3DE84@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t (*v21)(_QWORD);
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  unsigned __int8 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  double v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t KeyPath;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __int128 v64;
  uint64_t v65;
  char v66;
  _OWORD *v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _OWORD *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  __int128 v83;
  uint64_t v84;
  __int128 v85;
  char v86;
  __int128 v87;
  __int128 v88;
  uint64_t v89;
  char v90;
  _OWORD v91[4];
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  uint64_t v98;

  v81 = a1;
  v80 = sub_5440(&qword_2600B8);
  __chkstk_darwin(v80);
  v78 = (_OWORD *)((char *)&v71 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  v75 = sub_5440(&qword_25EE58);
  __chkstk_darwin(v75);
  v74 = (uint64_t *)((char *)&v71 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v4 = type metadata accessor for YearInReviewSharableImage(0);
  __chkstk_darwin(v4);
  v76 = (uint64_t)&v71 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for ColorScheme(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v73 = (uint64_t)&v71 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v79 = sub_5440(&qword_25EE60);
  v9 = __chkstk_darwin(v79);
  v72 = (char *)&v71 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v77 = (uint64_t)&v71 - v11;
  v12 = sub_5440(&qword_25E928);
  v13 = __chkstk_darwin(v12);
  v15 = (char *)&v71 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v17 = (char *)&v71 - v16;
  v18 = type metadata accessor for PageBackground(0);
  __chkstk_darwin(v18);
  v20 = (char *)&v71 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1E428(v1 + *(int *)(v4 + 32), (uint64_t)v20, v21);
  if (swift_getEnumCaseMultiPayload(v20, v18) == 1)
  {
    v22 = *((_OWORD *)v20 + 9);
    v96 = *((_OWORD *)v20 + 8);
    v97 = v22;
    v98 = *((_QWORD *)v20 + 20);
    v23 = *((_OWORD *)v20 + 5);
    v92 = *((_OWORD *)v20 + 4);
    v93 = v23;
    v24 = *((_OWORD *)v20 + 7);
    v94 = *((_OWORD *)v20 + 6);
    v95 = v24;
    v25 = *((_OWORD *)v20 + 1);
    v91[0] = *(_OWORD *)v20;
    v91[1] = v25;
    v26 = *((_OWORD *)v20 + 3);
    v91[2] = *((_OWORD *)v20 + 2);
    v91[3] = v26;
    CoverViewModel.source.getter((uint64_t)&v87);
    v27 = v88;
    if (v88 == 255)
    {
      v59 = swift_allocObject(&unk_24CAD8, 32, 7);
      *(_QWORD *)(v59 + 16) = 0xD00000000000002CLL;
      *(_QWORD *)(v59 + 24) = 0x80000000001FA3A0;
      *(_QWORD *)&v83 = sub_18B10;
      *((_QWORD *)&v83 + 1) = v59;
      v85 = 0uLL;
      v84 = 0;
      v86 = 1;
    }
    else
    {
      v28 = v87;
      sub_315E0((uint64_t)&v87);
      v29 = *((_QWORD *)&v88 + 1);
      v30 = v89;
      sub_5480(&v87, *((uint64_t *)&v88 + 1));
      v83 = v28;
      LOBYTE(v84) = v27 & 1;
      v31 = v92;
      v32 = v1 + *(int *)(v4 + 20);
      v33 = *(_QWORD *)v32;
      v34 = *(_BYTE *)(v32 + 8);
      sub_F9E4(*(_QWORD *)v32, v34);
      v35 = sub_30784(v33, v34);
      sub_BE0C(v33, v34);
      v36 = (*(uint64_t (**)(__int128 *, uint64_t, uint64_t, double, double, double))(v30 + 8))(&v83, v29, v30, *(double *)&v31, *((double *)&v31 + 1), v35);
      sub_224BC(v28, *((uint64_t *)&v28 + 1), v27);
      v37 = type metadata accessor for ImageResourceLoader(0);
      v38 = swift_allocObject(v37, *(unsigned int *)(v37 + 48), *(unsigned __int16 *)(v37 + 52));
      *(_QWORD *)(v38 + 16) = 0;
      v39 = sub_5440(&qword_2600E0);
      v40 = swift_allocObject(v39, 32, 7);
      *(_DWORD *)(v40 + 28) = 0;
      *(_QWORD *)(v40 + 16) = 0;
      *(_BYTE *)(v40 + 24) = 0;
      *(_QWORD *)(v38 + 24) = v40;
      ObservationRegistrar.init()(v40);
      v82 = v38;
      State.init(wrappedValue:)(&v83, &v82, v37);
      v41 = v83;
      _s7BooksUI13AnyPagedFrameVwxx_0(&v87);
      *(_QWORD *)&v83 = sub_3EFEC;
      *((_QWORD *)&v83 + 1) = 0;
      v84 = v36;
      v85 = v41;
      v86 = 0;
    }
    v60 = sub_5440(&qword_2600C0);
    v61 = sub_5440(&qword_25E830);
    v62 = sub_7FD8(&qword_2600C8, &qword_2600C0, (uint64_t)&protocol conformance descriptor for AsyncResourceImage<A>);
    v63 = sub_7FD8((unint64_t *)&qword_25E838, &qword_25E830, (uint64_t)&protocol conformance descriptor for BooksFailureView<A>);
    _ConditionalContent<>.init(storage:)(&v83, v60, v61, v62, v63);
    v64 = v88;
    v65 = v89;
    v66 = v90;
    v67 = v78;
    *v78 = v87;
    v67[1] = v64;
    *((_QWORD *)v67 + 4) = v65;
    *((_BYTE *)v67 + 40) = v66;
    swift_storeEnumTagMultiPayload(v67, v80, 1);
    v68 = sub_5440(&qword_2600D0);
    v69 = sub_222C0();
    v70 = sub_40C70();
    _ConditionalContent<>.init(storage:)(v67, v79, v68, v69, v70);
    return sub_22488((uint64_t)v91);
  }
  else
  {
    v42 = *(_QWORD *)v20;
    v43 = sub_5440(&qword_25E930);
    sub_167A4((uint64_t)&v20[*(int *)(v43 + 48)], (uint64_t)v17, &qword_25E928);
    KeyPath = swift_getKeyPath(&unk_1E2FF0);
    sub_B3D0((uint64_t)v17, (uint64_t)v15, &qword_25E928);
    v45 = v1;
    v46 = v76;
    sub_1E428(v45, v76, type metadata accessor for YearInReviewSharableImage);
    v47 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48))(v15, 1, v6);
    v71 = v17;
    v48 = v42;
    if (v47 == 1)
    {
      v49 = v73;
      sub_31378(v73);
      sub_224DC(v46, type metadata accessor for YearInReviewSharableImage);
      sub_B414((uint64_t)v15, &qword_25E928);
    }
    else
    {
      sub_224DC(v46, type metadata accessor for YearInReviewSharableImage);
      v49 = v73;
      (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v73, v15, v6);
    }
    v50 = (uint64_t)v78;
    v51 = v74;
    v52 = v72;
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)v74 + *(int *)(v75 + 28), v49, v6);
    *v51 = KeyPath;
    v53 = v79;
    sub_B3D0((uint64_t)v51, (uint64_t)v52 + *(int *)(v79 + 36), &qword_25EE58);
    *v52 = v48;
    swift_retain(v48);
    sub_B414((uint64_t)v51, &qword_25EE58);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v49, v6);
    v54 = v77;
    sub_167A4((uint64_t)v52, v77, &qword_25EE60);
    sub_B3D0(v54, v50, &qword_25EE60);
    swift_storeEnumTagMultiPayload(v50, v80, 0);
    v55 = sub_5440(&qword_2600D0);
    v56 = sub_222C0();
    v57 = sub_40C70();
    _ConditionalContent<>.init(storage:)(v50, v53, v55, v56, v57);
    swift_release(v48);
    sub_B414(v54, &qword_25EE60);
    return sub_B414((uint64_t)v71, &qword_25E928);
  }
}

double sub_3E598@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t KeyPath;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  double result;
  _QWORD v30[2];
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  _QWORD v35[7];
  _QWORD v36[3];
  uint64_t v37;
  uint64_t WitnessTable;
  _QWORD v39[3];
  uint64_t v40;
  uint64_t v41;

  v30[1] = a1;
  v31 = a2;
  v3 = sub_5440(&qword_260058);
  v4 = __chkstk_darwin(v3);
  v6 = (char *)v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)v30 - v7;
  v9 = type metadata accessor for YearInReviewSharableImage(0);
  sub_BD00(a1 + *(int *)(v9 + 28), (uint64_t)v39);
  v10 = v40;
  v11 = v41;
  sub_5480(v39, v40);
  KeyPath = swift_getKeyPath(&unk_1E3150);
  LOBYTE(v35[0]) = 1;
  v13 = sub_7EF8(&qword_25ED08);
  v14 = type metadata accessor for ModifiedContent(0, v10, v13);
  v37 = v14;
  v15 = sub_7FD8((unint64_t *)&qword_25ED10, &qword_25ED08, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
  v35[5] = v11;
  v35[6] = v15;
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v14);
  sub_C404(v36);
  View.environment<A>(_:_:)(KeyPath, v35, v10, v11);
  swift_release(KeyPath);
  v16 = v37;
  v17 = WitnessTable;
  sub_5480(v36, v37);
  v18 = swift_getKeyPath(&unk_1E3178);
  v34 = 0;
  v19 = type metadata accessor for ModifiedContent(0, v16, v13);
  v35[3] = v19;
  v32 = v17;
  v33 = v15;
  v20 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v19);
  v35[4] = v20;
  v21 = sub_C404(v35);
  View.environment<A>(_:_:)(v18, &v34, v16, v17);
  swift_release(v18);
  __chkstk_darwin(v22);
  v24 = (char *)v30 - v23;
  (*(void (**)(char *, _QWORD *, uint64_t))(v25 + 16))((char *)v30 - v23, v21, v19);
  v26 = AnyView.init<A>(_:)(v24, v19, v20);
  _s7BooksUI13AnyPagedFrameVwxx_0(v35);
  _s7BooksUI13AnyPagedFrameVwxx_0(v36);
  _s7BooksUI13AnyPagedFrameVwxx_0(v39);
  sub_3E880((uint64_t)v8);
  sub_B3D0((uint64_t)v8, (uint64_t)v6, &qword_260058);
  v27 = v31;
  *v31 = v26;
  v28 = sub_5440(&qword_260060);
  sub_B3D0((uint64_t)v6, (uint64_t)v27 + *(int *)(v28 + 48), &qword_260058);
  swift_retain(v26);
  sub_B414((uint64_t)v8, &qword_260058);
  sub_B414((uint64_t)v6, &qword_260058);
  *(_QWORD *)&result = swift_release(v26).n128_u64[0];
  return result;
}

uint64_t sub_3E880@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t KeyPath;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  double v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __int128 v64;
  _BYTE v65[232];
  _OWORD v66[13];
  __int128 v67;
  _BYTE v68[231];
  char v69;
  _OWORD v70[15];
  uint64_t v71;

  v2 = v1;
  v62 = a1;
  v63 = type metadata accessor for ColorScheme(0);
  v61 = *(_QWORD *)(v63 - 8);
  __chkstk_darwin(v63);
  v60 = (uint64_t)&v48 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for AccessibilityChildBehavior(0);
  v49 = *(_QWORD *)(v4 - 8);
  v50 = v4;
  __chkstk_darwin(v4);
  v6 = (char *)&v48 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = sub_5440(&qword_260068);
  v54 = *(_QWORD *)(v56 - 8);
  __chkstk_darwin(v56);
  v8 = (char *)&v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = sub_5440(&qword_260070);
  __chkstk_darwin(v52);
  v10 = (char *)&v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_5440(&qword_260078);
  v58 = *(_QWORD *)(v11 - 8);
  v59 = v11;
  __chkstk_darwin(v11);
  v51 = (char *)&v48 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = sub_5440(&qword_260080);
  __chkstk_darwin(v55);
  v14 = (char *)&v48 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v57 = sub_5440(&qword_260088);
  v15 = __chkstk_darwin(v57);
  v53 = (uint64_t)&v48 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = static VerticalAlignment.center.getter(v15);
  v18 = sub_3F370(v2, (uint64_t)v66);
  *(_OWORD *)&v68[167] = v66[10];
  *(_OWORD *)&v68[183] = v66[11];
  *(_OWORD *)&v68[199] = v66[12];
  *(_OWORD *)&v68[215] = v67;
  *(_OWORD *)&v68[103] = v66[6];
  *(_OWORD *)&v68[119] = v66[7];
  *(_OWORD *)&v68[135] = v66[8];
  *(_OWORD *)&v68[151] = v66[9];
  *(_OWORD *)&v68[39] = v66[2];
  *(_OWORD *)&v68[55] = v66[3];
  *(_OWORD *)&v68[71] = v66[4];
  *(_OWORD *)&v68[87] = v66[5];
  *(_OWORD *)&v68[7] = v66[0];
  *(_OWORD *)&v68[23] = v66[1];
  *(_OWORD *)&v65[177] = *(_OWORD *)&v68[176];
  *(_OWORD *)&v65[193] = *(_OWORD *)&v68[192];
  *(_OWORD *)&v65[209] = *(_OWORD *)&v68[208];
  *(_OWORD *)&v65[113] = *(_OWORD *)&v68[112];
  *(_OWORD *)&v65[129] = *(_OWORD *)&v68[128];
  *(_OWORD *)&v65[145] = *(_OWORD *)&v68[144];
  *(_OWORD *)&v65[161] = *(_OWORD *)&v68[160];
  *(_OWORD *)&v65[49] = *(_OWORD *)&v68[48];
  *(_OWORD *)&v65[65] = *(_OWORD *)&v68[64];
  *(_OWORD *)&v65[81] = *(_OWORD *)&v68[80];
  *(_OWORD *)&v65[97] = *(_OWORD *)&v68[96];
  *(_OWORD *)&v65[1] = *(_OWORD *)v68;
  *(_OWORD *)&v65[17] = *(_OWORD *)&v68[16];
  v69 = 1;
  v64 = (unint64_t)v17;
  v65[0] = 1;
  *(_QWORD *)&v65[224] = *((_QWORD *)&v67 + 1);
  *(_OWORD *)&v65[33] = *(_OWORD *)&v68[32];
  static AccessibilityChildBehavior.combine.getter(v18);
  v19 = sub_5440(&qword_260090);
  v20 = sub_7FD8(&qword_260098, &qword_260090, (uint64_t)&protocol conformance descriptor for HStack<A>);
  View.accessibilityElement(children:)(v6, v19, v20);
  (*(void (**)(char *, uint64_t))(v49 + 8))(v6, v50);
  v70[12] = *(_OWORD *)&v65[176];
  v70[13] = *(_OWORD *)&v65[192];
  v70[14] = *(_OWORD *)&v65[208];
  v71 = *(_QWORD *)&v65[224];
  v70[8] = *(_OWORD *)&v65[112];
  v70[9] = *(_OWORD *)&v65[128];
  v70[10] = *(_OWORD *)&v65[144];
  v70[11] = *(_OWORD *)&v65[160];
  v70[4] = *(_OWORD *)&v65[48];
  v70[5] = *(_OWORD *)&v65[64];
  v70[6] = *(_OWORD *)&v65[80];
  v70[7] = *(_OWORD *)&v65[96];
  v70[0] = v64;
  v70[1] = *(_OWORD *)v65;
  v70[2] = *(_OWORD *)&v65[16];
  v70[3] = *(_OWORD *)&v65[32];
  v21 = sub_40A80((uint64_t)v70);
  v22 = static Font.subheadline.getter(v21);
  KeyPath = swift_getKeyPath(&unk_1E31A0);
  v24 = v54;
  v25 = v56;
  (*(void (**)(char *, char *, uint64_t))(v54 + 16))(v10, v8, v56);
  v26 = v52;
  v27 = (uint64_t *)&v10[*(int *)(v52 + 36)];
  *v27 = KeyPath;
  v27[1] = v22;
  v28 = (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v8, v25);
  v29 = static Font.Weight.medium.getter(v28);
  v30 = sub_40AF8();
  v31 = v51;
  View.fontWeight(_:)(*(_QWORD *)&v29, 0, v26, v30);
  sub_B414((uint64_t)v10, &qword_260070);
  v32 = swift_getKeyPath(&unk_1E31D0);
  v34 = v58;
  v33 = v59;
  (*(void (**)(char *, char *, uint64_t))(v58 + 16))(v14, v31, v59);
  v35 = &v14[*(int *)(v55 + 36)];
  *(_QWORD *)v35 = v32;
  *((_QWORD *)v35 + 1) = 1;
  v35[16] = 0;
  (*(void (**)(char *, uint64_t))(v34 + 8))(v31, v33);
  v36 = swift_getKeyPath(&unk_1E3200);
  v37 = v53;
  sub_B3D0((uint64_t)v14, v53, &qword_260080);
  v38 = (uint64_t *)(v37 + *(int *)(v57 + 36));
  *v38 = v36;
  v38[1] = 0x3FE0000000000000;
  sub_B414((uint64_t)v14, &qword_260080);
  v39 = swift_getKeyPath(&unk_1E2FF0);
  type metadata accessor for YearInReviewSharableImage(0);
  v40 = v60;
  PageBackground.resolvedColorScheme.getter(v60);
  v41 = sub_5440(&qword_260058);
  v42 = v62;
  v43 = (uint64_t *)(v62 + *(int *)(v41 + 36));
  v44 = sub_5440(&qword_25EE58);
  v45 = v61;
  v46 = v63;
  (*(void (**)(char *, uint64_t, uint64_t))(v61 + 16))((char *)v43 + *(int *)(v44 + 28), v40, v63);
  *v43 = v39;
  sub_B3D0(v37, v42, &qword_260088);
  (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v40, v46);
  return sub_B414(v37, &qword_260088);
}

uint64_t sub_3EE1C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t ObjCClassFromMetadata;
  id v17;
  uint64_t v18;
  _BYTE v20[16];

  v0 = type metadata accessor for Locale(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = &v20[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v2);
  v6 = &v20[-v5];
  v7 = type metadata accessor for String.LocalizationValue(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = &v20[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v9);
  v13 = &v20[-v12];
  v14 = String.LocalizationValue.init(stringLiteral:)(0x206E692072616559, 0xEE00776569766552);
  static Locale.current.getter(v14);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v8 + 16))(v11, v13, v7);
  v15 = type metadata accessor for BundleFinder();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v15);
  v17 = objc_msgSend((id)objc_opt_self(NSBundle), "bundleForClass:", ObjCClassFromMetadata);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v1 + 16))(v4, v6, v0);
  v18 = String.init(localized:table:bundle:locale:comment:)(v11, 0, 0, v17, v4, "Year in review feature name for the bottom of the shareable image template.", 75, 2);
  (*(void (**)(_BYTE *, uint64_t))(v1 + 8))(v6, v0);
  (*(void (**)(_BYTE *, uint64_t))(v8 + 8))(v13, v7);
  return v18;
}

void sub_3EFEC(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  char *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  uint64_t *v24;
  unint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t KeyPath;
  uint64_t v29;
  uint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;

  v37 = a2;
  v3 = type metadata accessor for Image.ResizingMode(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = sub_5440(&qword_2600E8);
  __chkstk_darwin(v35);
  v36 = (uint64_t *)((char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v33 = sub_5440(&qword_25EE58);
  __chkstk_darwin(v33);
  v9 = (uint64_t *)((char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = type metadata accessor for ColorScheme(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = sub_5440(&qword_25EE60);
  v14 = __chkstk_darwin(v34);
  v16 = (uint64_t *)((char *)&v32 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v14);
  v18 = (char *)&v32 - v17;
  if (a1)
  {
    v19 = a1;
    v20 = Image.init(uiImage:)(v19);
    (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v6, enum case for Image.ResizingMode.stretch(_:), v3);
    v21 = Image.resizable(capInsets:resizingMode:)(v6, v20, 0.0, 0.0, 0.0, 0.0);
    v22 = swift_release(v20);
    (*(void (**)(char *, uint64_t, __n128))(v4 + 8))(v6, v3, v22);
    v23 = v35;
    v24 = v36;
    *v36 = v21;
    swift_storeEnumTagMultiPayload(v24, v23, 0);
    v25 = sub_222C0();
    swift_retain(v21);
    _ConditionalContent<>.init(storage:)(v24, &type metadata for Image, v34, &protocol witness table for Image, v25);
    swift_release(v21);

  }
  else
  {
    v26 = objc_msgSend((id)objc_opt_self(UIColor), "secondarySystemBackgroundColor");
    v27 = Color.init(uiColor:)(v26);
    KeyPath = swift_getKeyPath(&unk_1E2FF0);
    (*(void (**)(char *, _QWORD, uint64_t))(v11 + 104))(v13, enum case for ColorScheme.dark(_:), v10);
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))((char *)v9 + *(int *)(v33 + 28), v13, v10);
    *v9 = KeyPath;
    v29 = v34;
    sub_B3D0((uint64_t)v9, (uint64_t)v16 + *(int *)(v34 + 36), &qword_25EE58);
    *v16 = v27;
    swift_retain(v27);
    sub_B414((uint64_t)v9, &qword_25EE58);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    swift_release(v27);
    sub_167A4((uint64_t)v16, (uint64_t)v18, &qword_25EE60);
    v30 = v36;
    sub_B3D0((uint64_t)v18, (uint64_t)v36, &qword_25EE60);
    swift_storeEnumTagMultiPayload(v30, v35, 1);
    v31 = sub_222C0();
    _ConditionalContent<>.init(storage:)(v30, &type metadata for Image, v29, &protocol witness table for Image, v31);
    sub_B414((uint64_t)v18, &qword_25EE60);
  }
}

uint64_t sub_3F370@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  Swift::String v13;
  uint64_t v14;
  void *v15;
  void *v16;
  Swift::String v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  char v45;
  char v46;
  char v48;
  char v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _OWORD v58[9];
  _BYTE v59[7];
  char v60;
  _BYTE v61[7];
  char v62;
  _BYTE v63[7];
  char v64;
  _OWORD v65[9];
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  char v78;
  uint64_t v79;
  uint64_t v80;

  v4 = Text.tracking(_:)(0x6B6F6F4220BFA3EFLL, 0xA900000000000073, 0, &_swiftEmptyArrayStorage, -0.68);
  v55 = v5;
  v56 = v4;
  v7 = v6;
  v57 = v8;
  v9 = static Alignment.leading.getter(v4);
  _FrameLayout.init(width:height:alignment:)(&v75, 0, 1, 0, 1, v9, v10);
  v53 = v77;
  v54 = v75;
  v49 = v78;
  v50 = v76;
  v51 = v80;
  v52 = v79;
  v11 = (_QWORD *)(a1 + *(int *)(type metadata accessor for YearInReviewSharableImage(0) + 36));
  v12 = v11[1];
  if (v12)
  {
    *(_QWORD *)&v66 = *v11;
    *((_QWORD *)&v66 + 1) = v12;
    swift_bridgeObjectRetain(v12);
    v13._countAndFlagsBits = 32;
    v13._object = (void *)0xE100000000000000;
    String.append(_:)(v13);
    v14 = sub_3EE1C();
    v16 = v15;
    swift_bridgeObjectRetain(*((_QWORD *)&v66 + 1));
    v17._countAndFlagsBits = v14;
    v17._object = v16;
    String.append(_:)(v17);
    swift_bridgeObjectRelease(*((_QWORD *)&v66 + 1));
    swift_bridgeObjectRelease(v16);
    v19 = *((_QWORD *)&v66 + 1);
    v18 = v66;
  }
  else
  {
    v18 = sub_3EE1C();
  }
  v48 = v7 & 1;
  *(_QWORD *)&v66 = v18;
  *((_QWORD *)&v66 + 1) = v19;
  v20 = sub_C57C();
  v21 = Text.init<A>(_:)(&v66, &type metadata for String, v20);
  v23 = v22;
  v25 = v24;
  v27 = v26 & 1;
  LODWORD(v66) = static HierarchicalShapeStyle.secondary.getter(v21);
  v28 = Text.foregroundStyle<A>(_:)(&v66, v21, v23, v27, v25, &type metadata for HierarchicalShapeStyle, &protocol witness table for HierarchicalShapeStyle);
  v30 = v29;
  v32 = v31;
  v34 = v33 & 1;
  sub_2B574(v21, v23, v27);
  v35 = swift_bridgeObjectRelease(v25);
  v36 = static Alignment.trailing.getter(v35);
  sub_87284(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)&v66, 0.0, 1, 0.0, 1, v36, v37, v28, v30, v34, v32);
  sub_2B574(v28, v30, v34);
  swift_bridgeObjectRelease(v32);
  v38 = v71;
  v65[6] = v72;
  v65[7] = v73;
  v39 = v73;
  v65[8] = v74;
  v40 = v67;
  v65[2] = v68;
  v41 = v68;
  v65[3] = v69;
  v42 = v69;
  v65[4] = v70;
  v43 = v70;
  v65[5] = v71;
  v65[0] = v66;
  v65[1] = v67;
  v58[6] = v72;
  v58[7] = v73;
  v58[8] = v74;
  v44 = v66;
  v58[2] = v68;
  v58[3] = v69;
  v58[4] = v70;
  v58[5] = v71;
  v58[0] = v66;
  v58[1] = v67;
  *(_OWORD *)(a2 + 176) = v72;
  *(_OWORD *)(a2 + 192) = v39;
  *(_OWORD *)(a2 + 208) = v74;
  *(_OWORD *)(a2 + 112) = v41;
  *(_OWORD *)(a2 + 128) = v42;
  *(_OWORD *)(a2 + 144) = v43;
  *(_OWORD *)(a2 + 160) = v38;
  v64 = v48;
  v62 = v50;
  v60 = v49;
  *(_OWORD *)(a2 + 80) = v44;
  *(_OWORD *)(a2 + 96) = v40;
  *(_DWORD *)(a2 + 17) = *(_DWORD *)v63;
  *(_DWORD *)(a2 + 20) = *(_DWORD *)&v63[3];
  v45 = v62;
  *(_DWORD *)(a2 + 41) = *(_DWORD *)v61;
  *(_DWORD *)(a2 + 44) = *(_DWORD *)&v61[3];
  v46 = v60;
  *(_DWORD *)(a2 + 57) = *(_DWORD *)v59;
  *(_DWORD *)(a2 + 60) = *(_DWORD *)&v59[3];
  *(_QWORD *)a2 = v56;
  *(_QWORD *)(a2 + 8) = v55;
  *(_BYTE *)(a2 + 16) = v48;
  *(_QWORD *)(a2 + 24) = v57;
  *(_QWORD *)(a2 + 32) = v54;
  *(_BYTE *)(a2 + 40) = v45;
  *(_QWORD *)(a2 + 48) = v53;
  *(_BYTE *)(a2 + 56) = v46;
  *(_QWORD *)(a2 + 64) = v52;
  *(_QWORD *)(a2 + 72) = v51;
  sub_34B1C(v56, v55, v48);
  swift_bridgeObjectRetain(v57);
  sub_40BD4((uint64_t)v58);
  sub_40C10((uint64_t)v65);
  sub_2B574(v56, v55, v48);
  return swift_bridgeObjectRelease(v57);
}

uint64_t sub_3F710(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PageBackground(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_3F754(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &opaque type descriptor for <<opaque return type of YearInReviewSharableImage.body>>, 1);
}

_QWORD *initializeBufferWithCopyOfBuffer for YearInReviewSharableImage(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = sub_5440(&qword_25E948);
    if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
    {
      v8 = type metadata accessor for ColorScheme(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      v9 = a1;
      v10 = v7;
      v11 = 1;
    }
    else
    {
      v13 = *a2;
      *a1 = *a2;
      swift_retain(v13);
      v9 = a1;
      v10 = v7;
      v11 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v10, v11);
    v14 = a3[5];
    v15 = (char *)a1 + v14;
    v16 = (char *)a2 + v14;
    v17 = *(_QWORD *)v16;
    v18 = v16[8];
    sub_F9E4(*(_QWORD *)v16, v18);
    *(_QWORD *)v15 = v17;
    v15[8] = v18;
    v19 = a3[6];
    v20 = (char *)a1 + v19;
    v21 = (char *)a2 + v19;
    v22 = *((_BYTE *)a2 + v19 + 40);
    if ((v22 & 1) != 0)
    {
      v23 = *(_OWORD *)(v21 + 24);
      *(_OWORD *)(v20 + 24) = v23;
      (**(void (***)(char *))(v23 - 8))(v20);
    }
    else
    {
      v24 = *(_QWORD *)v21;
      *(_QWORD *)v20 = *(_QWORD *)v21;
      swift_retain(v24);
    }
    v20[40] = v22;
    v25 = a3[7];
    v26 = *(_OWORD *)((char *)a2 + v25 + 24);
    *(_OWORD *)((char *)a1 + v25 + 24) = v26;
    (**(void (***)(void))(v26 - 8))();
    v27 = a3[8];
    v28 = (char *)a1 + v27;
    v29 = (char *)a2 + v27;
    v30 = type metadata accessor for PageBackground(0);
    if (swift_getEnumCaseMultiPayload(v29, v30) == 1)
    {
      if (v29[56])
      {
        v31 = *((_OWORD *)v29 + 1);
        *(_OWORD *)v28 = *(_OWORD *)v29;
        *((_OWORD *)v28 + 1) = v31;
        *((_OWORD *)v28 + 2) = *((_OWORD *)v29 + 2);
        *(_OWORD *)(v28 + 41) = *(_OWORD *)(v29 + 41);
      }
      else
      {
        v40 = *(_OWORD *)(v29 + 24);
        *(_OWORD *)(v28 + 24) = v40;
        (**(void (***)(char *, char *))(v40 - 8))(v28, v29);
        *(_OWORD *)(v28 + 40) = *(_OWORD *)(v29 + 40);
        v28[56] = 0;
      }
      *((_OWORD *)v28 + 4) = *((_OWORD *)v29 + 4);
      v28[80] = v29[80];
      *(_OWORD *)(v28 + 88) = *(_OWORD *)(v29 + 88);
      v41 = *((_QWORD *)v29 + 13);
      *((_QWORD *)v28 + 13) = v41;
      v42 = *((_QWORD *)v29 + 15);
      swift_bridgeObjectRetain(v41);
      if (v42)
      {
        *((_QWORD *)v28 + 14) = *((_QWORD *)v29 + 14);
        *((_QWORD *)v28 + 15) = v42;
        v43 = *((_QWORD *)v29 + 17);
        *((_QWORD *)v28 + 16) = *((_QWORD *)v29 + 16);
        *((_QWORD *)v28 + 17) = v43;
        v28[144] = v29[144];
        v44 = *((_QWORD *)v29 + 19);
        v45 = *((_QWORD *)v29 + 20);
        *((_QWORD *)v28 + 19) = v44;
        *((_QWORD *)v28 + 20) = v45;
        swift_bridgeObjectRetain(v42);
        swift_bridgeObjectRetain(v43);
        swift_bridgeObjectRetain(v45);
      }
      else
      {
        v46 = *((_OWORD *)v29 + 8);
        *((_OWORD *)v28 + 7) = *((_OWORD *)v29 + 7);
        *((_OWORD *)v28 + 8) = v46;
        *((_OWORD *)v28 + 9) = *((_OWORD *)v29 + 9);
        *((_QWORD *)v28 + 20) = *((_QWORD *)v29 + 20);
      }
      v39 = 1;
    }
    else
    {
      v32 = *(_QWORD *)v29;
      *(_QWORD *)v28 = *(_QWORD *)v29;
      swift_retain(v32);
      v33 = *(int *)(sub_5440(&qword_25E930) + 48);
      v34 = &v28[v33];
      v35 = &v29[v33];
      v36 = type metadata accessor for ColorScheme(0);
      v37 = *(_QWORD *)(v36 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48))(v35, 1, v36))
      {
        v38 = sub_5440(&qword_25E928);
        memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v37 + 16))(v34, v35, v36);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v37 + 56))(v34, 0, 1, v36);
      }
      v39 = 0;
    }
    swift_storeEnumTagMultiPayload(v28, v30, v39);
    v47 = a3[9];
    v48 = (_QWORD *)((char *)a1 + v47);
    v49 = (_QWORD *)((char *)a2 + v47);
    v50 = v49[1];
    *v48 = *v49;
    v48[1] = v50;
    swift_bridgeObjectRetain(v50);
  }
  return a1;
}

uint64_t destroy for YearInReviewSharableImage(_QWORD *a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;

  v4 = sub_5440(&qword_25E948);
  if (swift_getEnumCaseMultiPayload(a1, v4) == 1)
  {
    v5 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  }
  else
  {
    swift_release(*a1);
  }
  sub_BE0C(*(_QWORD *)((char *)a1 + a2[5]), *((_BYTE *)a1 + a2[5] + 8));
  v6 = (_QWORD *)((char *)a1 + a2[6]);
  if ((v6[5] & 1) != 0)
    _s7BooksUI13AnyPagedFrameVwxx_0(v6);
  else
    swift_release(*v6);
  _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)((char *)a1 + a2[7]));
  v7 = (_QWORD *)((char *)a1 + a2[8]);
  v8 = type metadata accessor for PageBackground(0);
  if (swift_getEnumCaseMultiPayload(v7, v8) == 1)
  {
    if (!*((_BYTE *)v7 + 56))
      _s7BooksUI13AnyPagedFrameVwxx_0(v7);
    swift_bridgeObjectRelease(v7[13]);
    v9 = v7[15];
    if (v9)
    {
      swift_bridgeObjectRelease(v9);
      swift_bridgeObjectRelease(v7[17]);
      swift_bridgeObjectRelease(v7[20]);
    }
  }
  else
  {
    swift_release(*v7);
    v10 = (char *)v7 + *(int *)(sub_5440(&qword_25E930) + 48);
    v11 = type metadata accessor for ColorScheme(0);
    v12 = *(_QWORD *)(v11 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
      (*(void (**)(char *, uint64_t))(v12 + 8))(v10, v11);
  }
  return swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + a2[9] + 8));
}

_QWORD *initializeWithCopy for YearInReviewSharableImage(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;

  v6 = sub_5440(&qword_25E948);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a1;
    v9 = v6;
    v10 = 1;
  }
  else
  {
    v11 = *a2;
    *a1 = *a2;
    swift_retain(v11);
    v8 = a1;
    v9 = v6;
    v10 = 0;
  }
  swift_storeEnumTagMultiPayload(v8, v9, v10);
  v12 = a3[5];
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = *(_QWORD *)v14;
  v16 = v14[8];
  sub_F9E4(*(_QWORD *)v14, v16);
  *(_QWORD *)v13 = v15;
  v13[8] = v16;
  v17 = a3[6];
  v18 = (char *)a1 + v17;
  v19 = (char *)a2 + v17;
  v20 = *((_BYTE *)a2 + v17 + 40);
  if ((v20 & 1) != 0)
  {
    v21 = *(_OWORD *)(v19 + 24);
    *(_OWORD *)(v18 + 24) = v21;
    (**(void (***)(char *))(v21 - 8))(v18);
  }
  else
  {
    v22 = *(_QWORD *)v19;
    *(_QWORD *)v18 = *(_QWORD *)v19;
    swift_retain(v22);
  }
  v18[40] = v20;
  v23 = a3[7];
  v24 = *(_OWORD *)((char *)a2 + v23 + 24);
  *(_OWORD *)((char *)a1 + v23 + 24) = v24;
  (**(void (***)(void))(v24 - 8))();
  v25 = a3[8];
  v26 = (char *)a1 + v25;
  v27 = (char *)a2 + v25;
  v28 = type metadata accessor for PageBackground(0);
  if (swift_getEnumCaseMultiPayload(v27, v28) == 1)
  {
    if (v27[56])
    {
      v29 = *((_OWORD *)v27 + 1);
      *(_OWORD *)v26 = *(_OWORD *)v27;
      *((_OWORD *)v26 + 1) = v29;
      *((_OWORD *)v26 + 2) = *((_OWORD *)v27 + 2);
      *(_OWORD *)(v26 + 41) = *(_OWORD *)(v27 + 41);
    }
    else
    {
      v38 = *(_OWORD *)(v27 + 24);
      *(_OWORD *)(v26 + 24) = v38;
      (**(void (***)(char *, char *))(v38 - 8))(v26, v27);
      *(_OWORD *)(v26 + 40) = *(_OWORD *)(v27 + 40);
      v26[56] = 0;
    }
    *((_OWORD *)v26 + 4) = *((_OWORD *)v27 + 4);
    v26[80] = v27[80];
    *(_OWORD *)(v26 + 88) = *(_OWORD *)(v27 + 88);
    v39 = *((_QWORD *)v27 + 13);
    *((_QWORD *)v26 + 13) = v39;
    v40 = *((_QWORD *)v27 + 15);
    swift_bridgeObjectRetain(v39);
    if (v40)
    {
      *((_QWORD *)v26 + 14) = *((_QWORD *)v27 + 14);
      *((_QWORD *)v26 + 15) = v40;
      v41 = *((_QWORD *)v27 + 17);
      *((_QWORD *)v26 + 16) = *((_QWORD *)v27 + 16);
      *((_QWORD *)v26 + 17) = v41;
      v26[144] = v27[144];
      v42 = *((_QWORD *)v27 + 19);
      v43 = *((_QWORD *)v27 + 20);
      *((_QWORD *)v26 + 19) = v42;
      *((_QWORD *)v26 + 20) = v43;
      swift_bridgeObjectRetain(v40);
      swift_bridgeObjectRetain(v41);
      swift_bridgeObjectRetain(v43);
    }
    else
    {
      v44 = *((_OWORD *)v27 + 8);
      *((_OWORD *)v26 + 7) = *((_OWORD *)v27 + 7);
      *((_OWORD *)v26 + 8) = v44;
      *((_OWORD *)v26 + 9) = *((_OWORD *)v27 + 9);
      *((_QWORD *)v26 + 20) = *((_QWORD *)v27 + 20);
    }
    v37 = 1;
  }
  else
  {
    v30 = *(_QWORD *)v27;
    *(_QWORD *)v26 = *(_QWORD *)v27;
    swift_retain(v30);
    v31 = *(int *)(sub_5440(&qword_25E930) + 48);
    v32 = &v26[v31];
    v33 = &v27[v31];
    v34 = type metadata accessor for ColorScheme(0);
    v35 = *(_QWORD *)(v34 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v33, 1, v34))
    {
      v36 = sub_5440(&qword_25E928);
      memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v35 + 16))(v32, v33, v34);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, v34);
    }
    v37 = 0;
  }
  swift_storeEnumTagMultiPayload(v26, v28, v37);
  v45 = a3[9];
  v46 = (_QWORD *)((char *)a1 + v45);
  v47 = (_QWORD *)((char *)a2 + v45);
  v48 = v47[1];
  *v46 = *v47;
  v46[1] = v48;
  swift_bridgeObjectRetain(v48);
  return a1;
}

uint64_t *assignWithCopy for YearInReviewSharableImage(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;

  if (a1 != a2)
  {
    sub_B414((uint64_t)a1, &qword_25E948);
    v6 = sub_5440(&qword_25E948);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = v6;
      v10 = 1;
    }
    else
    {
      v11 = *a2;
      *a1 = *a2;
      swift_retain(v11);
      v8 = a1;
      v9 = v6;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
  }
  v12 = a3[5];
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = *(_QWORD *)v14;
  v16 = v14[8];
  sub_F9E4(*(_QWORD *)v14, v16);
  v17 = *(_QWORD *)v13;
  v18 = v13[8];
  *(_QWORD *)v13 = v15;
  v13[8] = v16;
  sub_BE0C(v17, v18);
  if (a1 == a2)
  {
    sub_142F8((uint64_t *)((char *)a1 + a3[7]), (uint64_t *)((char *)a2 + a3[7]));
  }
  else
  {
    v19 = a3[6];
    v20 = (char *)a1 + v19;
    v21 = (char *)a2 + v19;
    sub_B414((uint64_t)a1 + v19, &qword_25EAE0);
    if ((v21[40] & 1) != 0)
    {
      v22 = *((_QWORD *)v21 + 3);
      *((_QWORD *)v20 + 3) = v22;
      *((_QWORD *)v20 + 4) = *((_QWORD *)v21 + 4);
      (**(void (***)(char *, char *))(v22 - 8))(v20, v21);
      v20[40] = 1;
    }
    else
    {
      v23 = *(_QWORD *)v21;
      *(_QWORD *)v20 = *(_QWORD *)v21;
      v20[40] = 0;
      swift_retain(v23);
    }
    sub_142F8((uint64_t *)((char *)a1 + a3[7]), (uint64_t *)((char *)a2 + a3[7]));
    v24 = a3[8];
    v25 = (char *)a1 + v24;
    v26 = (char *)a2 + v24;
    sub_224DC((uint64_t)a1 + v24, type metadata accessor for PageBackground);
    v27 = type metadata accessor for PageBackground(0);
    if (swift_getEnumCaseMultiPayload(v26, v27) == 1)
    {
      if (v26[56])
      {
        v28 = *(_OWORD *)v26;
        v29 = *((_OWORD *)v26 + 1);
        v30 = *((_OWORD *)v26 + 2);
        *(_OWORD *)(v25 + 41) = *(_OWORD *)(v26 + 41);
        *((_OWORD *)v25 + 1) = v29;
        *((_OWORD *)v25 + 2) = v30;
        *(_OWORD *)v25 = v28;
      }
      else
      {
        v38 = *((_QWORD *)v26 + 3);
        *((_QWORD *)v25 + 3) = v38;
        *((_QWORD *)v25 + 4) = *((_QWORD *)v26 + 4);
        (**(void (***)(char *, char *))(v38 - 8))(v25, v26);
        *(_OWORD *)(v25 + 40) = *(_OWORD *)(v26 + 40);
        v25[56] = 0;
      }
      *((_OWORD *)v25 + 4) = *((_OWORD *)v26 + 4);
      v25[80] = v26[80];
      *((_QWORD *)v25 + 11) = *((_QWORD *)v26 + 11);
      *((_QWORD *)v25 + 12) = *((_QWORD *)v26 + 12);
      v39 = *((_QWORD *)v26 + 13);
      *((_QWORD *)v25 + 13) = v39;
      v40 = *((_QWORD *)v26 + 15);
      swift_bridgeObjectRetain(v39);
      if (v40)
      {
        *((_QWORD *)v25 + 14) = *((_QWORD *)v26 + 14);
        v41 = *((_QWORD *)v26 + 15);
        *((_QWORD *)v25 + 15) = v41;
        *((_QWORD *)v25 + 16) = *((_QWORD *)v26 + 16);
        v42 = *((_QWORD *)v26 + 17);
        *((_QWORD *)v25 + 17) = v42;
        v25[144] = v26[144];
        *((_QWORD *)v25 + 19) = *((_QWORD *)v26 + 19);
        v43 = *((_QWORD *)v26 + 20);
        *((_QWORD *)v25 + 20) = v43;
        swift_bridgeObjectRetain(v41);
        swift_bridgeObjectRetain(v42);
        swift_bridgeObjectRetain(v43);
      }
      else
      {
        v47 = *((_OWORD *)v26 + 7);
        v48 = *((_OWORD *)v26 + 8);
        v49 = *((_OWORD *)v26 + 9);
        *((_QWORD *)v25 + 20) = *((_QWORD *)v26 + 20);
        *((_OWORD *)v25 + 8) = v48;
        *((_OWORD *)v25 + 9) = v49;
        *((_OWORD *)v25 + 7) = v47;
      }
      v44 = v25;
      v45 = v27;
      v46 = 1;
    }
    else
    {
      v31 = *(_QWORD *)v26;
      *(_QWORD *)v25 = *(_QWORD *)v26;
      swift_retain(v31);
      v32 = *(int *)(sub_5440(&qword_25E930) + 48);
      v33 = &v25[v32];
      v34 = &v26[v32];
      v35 = type metadata accessor for ColorScheme(0);
      v36 = *(_QWORD *)(v35 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48))(v34, 1, v35))
      {
        v37 = sub_5440(&qword_25E928);
        memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v36 + 16))(v33, v34, v35);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v35);
      }
      v44 = v25;
      v45 = v27;
      v46 = 0;
    }
    swift_storeEnumTagMultiPayload(v44, v45, v46);
  }
  v50 = a3[9];
  v51 = (uint64_t *)((char *)a1 + v50);
  v52 = (uint64_t *)((char *)a2 + v50);
  *v51 = *v52;
  v53 = v52[1];
  v54 = v51[1];
  v51[1] = v53;
  swift_bridgeObjectRetain(v53);
  swift_bridgeObjectRelease(v54);
  return a1;
}

char *initializeWithTake for YearInReviewSharableImage(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  __int128 v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v6 = sub_5440(&qword_25E948);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for ColorScheme(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v8 = a3[5];
  v9 = a3[6];
  v10 = &a1[v8];
  v11 = &a2[v8];
  *(_QWORD *)v10 = *(_QWORD *)v11;
  v10[8] = v11[8];
  v12 = &a1[v9];
  v13 = &a2[v9];
  v14 = *((_OWORD *)v13 + 1);
  *(_OWORD *)v12 = *(_OWORD *)v13;
  *((_OWORD *)v12 + 1) = v14;
  *(_OWORD *)(v12 + 25) = *(_OWORD *)(v13 + 25);
  v15 = a3[7];
  v16 = a3[8];
  v17 = &a1[v15];
  v18 = &a2[v15];
  v19 = *((_OWORD *)v18 + 1);
  *(_OWORD *)v17 = *(_OWORD *)v18;
  *((_OWORD *)v17 + 1) = v19;
  *((_QWORD *)v17 + 4) = *((_QWORD *)v18 + 4);
  v20 = &a1[v16];
  v21 = &a2[v16];
  v22 = type metadata accessor for PageBackground(0);
  if (swift_getEnumCaseMultiPayload(v21, v22))
  {
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  else
  {
    *(_QWORD *)v20 = *(_QWORD *)v21;
    v23 = *(int *)(sub_5440(&qword_25E930) + 48);
    v24 = &v20[v23];
    v25 = &v21[v23];
    v26 = type metadata accessor for ColorScheme(0);
    v27 = *(_QWORD *)(v26 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
    {
      v28 = sub_5440(&qword_25E928);
      memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v24, v25, v26);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
    }
    swift_storeEnumTagMultiPayload(v20, v22, 0);
  }
  *(_OWORD *)&a1[a3[9]] = *(_OWORD *)&a2[a3[9]];
  return a1;
}

char *assignWithTake for YearInReviewSharableImage(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char *v15;
  char *v16;
  __int128 v17;
  uint64_t v18;
  char *v19;
  char *v20;
  __int128 v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  if (a1 != a2)
  {
    sub_B414((uint64_t)a1, &qword_25E948);
    v6 = sub_5440(&qword_25E948);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for ColorScheme(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
  }
  v8 = a3[5];
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = *(_QWORD *)v10;
  LOBYTE(v10) = v10[8];
  v12 = *(_QWORD *)v9;
  v13 = v9[8];
  *(_QWORD *)v9 = v11;
  v9[8] = (char)v10;
  sub_BE0C(v12, v13);
  if (a1 != a2)
  {
    v14 = a3[6];
    v15 = &a2[v14];
    v16 = &a1[v14];
    sub_B414((uint64_t)&a1[v14], &qword_25EAE0);
    v17 = *((_OWORD *)v15 + 1);
    *(_OWORD *)v16 = *(_OWORD *)v15;
    *((_OWORD *)v16 + 1) = v17;
    *(_OWORD *)(v16 + 25) = *(_OWORD *)(v15 + 25);
  }
  v18 = a3[7];
  v19 = &a1[v18];
  v20 = &a2[v18];
  _s7BooksUI13AnyPagedFrameVwxx_0(&a1[v18]);
  v21 = *((_OWORD *)v20 + 1);
  *(_OWORD *)v19 = *(_OWORD *)v20;
  *((_OWORD *)v19 + 1) = v21;
  *((_QWORD *)v19 + 4) = *((_QWORD *)v20 + 4);
  if (a1 != a2)
  {
    v22 = a3[8];
    v23 = &a1[v22];
    v24 = &a2[v22];
    sub_224DC((uint64_t)&a1[v22], type metadata accessor for PageBackground);
    v25 = type metadata accessor for PageBackground(0);
    if (swift_getEnumCaseMultiPayload(v24, v25))
    {
      memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    }
    else
    {
      *(_QWORD *)v23 = *(_QWORD *)v24;
      v26 = *(int *)(sub_5440(&qword_25E930) + 48);
      v27 = &v23[v26];
      v28 = &v24[v26];
      v29 = type metadata accessor for ColorScheme(0);
      v30 = *(_QWORD *)(v29 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29))
      {
        v31 = sub_5440(&qword_25E928);
        memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v30 + 32))(v27, v28, v29);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
      }
      swift_storeEnumTagMultiPayload(v23, v25, 0);
    }
  }
  v32 = a3[9];
  v33 = &a1[v32];
  v34 = &a2[v32];
  v36 = *(_QWORD *)v34;
  v35 = *((_QWORD *)v34 + 1);
  v37 = *((_QWORD *)v33 + 1);
  *(_QWORD *)v33 = v36;
  *((_QWORD *)v33 + 1) = v35;
  swift_bridgeObjectRelease(v37);
  return a1;
}

uint64_t getEnumTagSinglePayload for YearInReviewSharableImage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_40754);
}

uint64_t sub_40754(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  unint64_t v11;

  v6 = sub_5440(&qword_25EAE8);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v8 = type metadata accessor for PageBackground(0);
    v10 = a1 + *(int *)(a3 + 32);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
    return v9(v10, a2, v8);
  }
  v11 = *(_QWORD *)(a1 + *(int *)(a3 + 28) + 24);
  if (v11 >= 0xFFFFFFFF)
    LODWORD(v11) = -1;
  return (v11 + 1);
}

uint64_t storeEnumTagSinglePayload for YearInReviewSharableImage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_40810);
}

uint64_t sub_40810(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  result = sub_5440(&qword_25EAE8);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(_QWORD *)(a1 + *(int *)(a4 + 28) + 24) = (a2 - 1);
      return result;
    }
    v10 = type metadata accessor for PageBackground(0);
    v12 = a1 + *(int *)(a4 + 32);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_408BC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[6];

  sub_40964(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    v6[1] = "\t";
    v6[2] = &unk_1E3108;
    v6[3] = &unk_1E3120;
    v4 = type metadata accessor for PageBackground(319);
    if (v5 <= 0x3F)
    {
      v6[4] = *(_QWORD *)(v4 - 8) + 64;
      v6[5] = &unk_1E3138;
      swift_initStructMetadata(a1, 256, 6, v6, a1 + 16);
    }
  }
}

void sub_40964(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_25EB58)
  {
    v2 = type metadata accessor for ColorScheme(255);
    v3 = type metadata accessor for Environment.Content(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_25EB58);
  }
}

unint64_t sub_409BC()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_260028;
  if (!qword_260028)
  {
    v1 = sub_7EF8(&qword_25FF80);
    v2[0] = sub_7EF8(&qword_25FF60);
    v2[1] = sub_7FD8(&qword_25FF78, &qword_25FF60, (uint64_t)&protocol conformance descriptor for ZStack<A>);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.dynamicTypeSize(_:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_260028);
  }
  return result;
}

uint64_t sub_40A80(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;

  v2 = *(_QWORD *)(a1 + 48);
  v3 = *(_QWORD *)(a1 + 104);
  v4 = *(_QWORD *)(a1 + 112);
  v5 = *(_BYTE *)(a1 + 120);
  v6 = *(_QWORD *)(a1 + 128);
  sub_2B574(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
  swift_bridgeObjectRelease(v2);
  sub_2B574(v3, v4, v5);
  swift_bridgeObjectRelease(v6);
  return a1;
}

unint64_t sub_40AF8()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_2600A0;
  if (!qword_2600A0)
  {
    v1 = sub_7EF8(&qword_260070);
    v2[0] = sub_7EF8(&qword_260090);
    v2[1] = sub_7FD8(&qword_260098, &qword_260090, (uint64_t)&protocol conformance descriptor for HStack<A>);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
    sub_7FD8((unint64_t *)&qword_2600A8, &qword_2600B0, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_2600A0);
  }
  return result;
}

uint64_t sub_40BD4(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 24);
  sub_34B1C(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_bridgeObjectRetain(v2);
  return a1;
}

uint64_t sub_40C10(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 24);
  sub_2B574(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_bridgeObjectRelease(v2);
  return a1;
}

uint64_t sub_40C4C()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

unint64_t sub_40C70()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2600D8;
  if (!qword_2600D8)
  {
    v1 = sub_7EF8(&qword_2600D0);
    sub_7FD8(&qword_2600C8, &qword_2600C0, (uint64_t)&protocol conformance descriptor for AsyncResourceImage<A>);
    sub_7FD8((unint64_t *)&qword_25E838, &qword_25E830, (uint64_t)&protocol conformance descriptor for BooksFailureView<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_2600D8);
  }
  return result;
}

uint64_t *sub_40D0C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _WORD *v15;
  _WORD *v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  _WORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = sub_5440(&qword_25F1E8);
    if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
    {
      v8 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      v9 = a1;
      v10 = v7;
      v11 = 1;
    }
    else
    {
      v13 = *a2;
      *a1 = *a2;
      swift_retain(v13);
      v9 = a1;
      v10 = v7;
      v11 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v10, v11);
    v14 = *(int *)(a3 + 20);
    v15 = (_WORD *)((char *)a1 + v14);
    v16 = (_WORD *)((char *)a2 + v14);
    v17 = sub_5440(&qword_25F200);
    if (swift_getEnumCaseMultiPayload(v16, v17) == 1)
    {
      *v15 = *v16;
      v18 = (int *)type metadata accessor for SizeConstants.Environment(0);
      v19 = v18[6];
      v20 = (char *)v15 + v19;
      v21 = (char *)v16 + v19;
      v22 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v20, v21, v22);
      *(_QWORD *)((char *)v15 + v18[7]) = *(_QWORD *)((char *)v16 + v18[7]);
      v23 = v18[8];
      v24 = (char *)v15 + v23;
      v25 = (char *)v16 + v23;
      v24[2] = v25[2];
      *(_WORD *)v24 = *(_WORD *)v25;
      v26 = v15;
      v27 = v17;
      v28 = 1;
    }
    else
    {
      v29 = *(_QWORD *)v16;
      *(_QWORD *)v15 = *(_QWORD *)v16;
      swift_retain(v29);
      v26 = v15;
      v27 = v17;
      v28 = 0;
    }
    swift_storeEnumTagMultiPayload(v26, v27, v28);
  }
  return a1;
}

double sub_40EAC(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  double result;

  v4 = sub_5440(&qword_25F1E8);
  if (swift_getEnumCaseMultiPayload(a1, v4) == 1)
  {
    v5 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  }
  else
  {
    swift_release(*a1);
  }
  v6 = (_QWORD *)((char *)a1 + *(int *)(a2 + 20));
  v7 = sub_5440(&qword_25F200);
  if (swift_getEnumCaseMultiPayload(v6, v7) == 1)
  {
    v8 = (char *)v6 + *(int *)(type metadata accessor for SizeConstants.Environment(0) + 24);
    v9 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  }
  else
  {
    *(_QWORD *)&result = swift_release(*v6).n128_u64[0];
  }
  return result;
}

uint64_t *sub_40F74(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _WORD *v13;
  _WORD *v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;

  v6 = sub_5440(&qword_25F1E8);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for ColorScheme(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a1;
    v9 = v6;
    v10 = 1;
  }
  else
  {
    v11 = *a2;
    *a1 = *a2;
    swift_retain(v11);
    v8 = a1;
    v9 = v6;
    v10 = 0;
  }
  swift_storeEnumTagMultiPayload(v8, v9, v10);
  v12 = *(int *)(a3 + 20);
  v13 = (_WORD *)((char *)a1 + v12);
  v14 = (_WORD *)((char *)a2 + v12);
  v15 = sub_5440(&qword_25F200);
  if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
  {
    *v13 = *v14;
    v16 = (int *)type metadata accessor for SizeConstants.Environment(0);
    v17 = v16[6];
    v18 = (char *)v13 + v17;
    v19 = (char *)v14 + v17;
    v20 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v18, v19, v20);
    *(_QWORD *)((char *)v13 + v16[7]) = *(_QWORD *)((char *)v14 + v16[7]);
    v21 = v16[8];
    v22 = (char *)v13 + v21;
    v23 = (char *)v14 + v21;
    v22[2] = v23[2];
    *(_WORD *)v22 = *(_WORD *)v23;
    v24 = 1;
  }
  else
  {
    v25 = *(_QWORD *)v14;
    *(_QWORD *)v13 = *(_QWORD *)v14;
    swift_retain(v25);
    v24 = 0;
  }
  swift_storeEnumTagMultiPayload(v13, v15, v24);
  return a1;
}

uint64_t *sub_410E0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  _BYTE *v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  _BYTE *v23;
  char v24;
  uint64_t v25;
  uint64_t v26;

  if (a1 != a2)
  {
    sub_B414((uint64_t)a1, &qword_25F1E8);
    v6 = sub_5440(&qword_25F1E8);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = v6;
      v10 = 1;
    }
    else
    {
      v11 = *a2;
      *a1 = *a2;
      swift_retain(v11);
      v8 = a1;
      v9 = v6;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
    v12 = *(int *)(a3 + 20);
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    sub_B414((uint64_t)a1 + v12, &qword_25F200);
    v15 = sub_5440(&qword_25F200);
    if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
    {
      *v13 = *v14;
      v13[1] = v14[1];
      v16 = (int *)type metadata accessor for SizeConstants.Environment(0);
      v17 = v16[6];
      v18 = &v13[v17];
      v19 = &v14[v17];
      v20 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v18, v19, v20);
      *(_QWORD *)&v13[v16[7]] = *(_QWORD *)&v14[v16[7]];
      v21 = v16[8];
      v22 = &v13[v21];
      v23 = &v14[v21];
      v24 = v23[2];
      *(_WORD *)v22 = *(_WORD *)v23;
      v22[2] = v24;
      v25 = 1;
    }
    else
    {
      v26 = *(_QWORD *)v14;
      *(_QWORD *)v13 = *(_QWORD *)v14;
      swift_retain(v26);
      v25 = 0;
    }
    swift_storeEnumTagMultiPayload(v13, v15, v25);
  }
  return a1;
}

char *sub_4127C(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;

  v6 = sub_5440(&qword_25F1E8);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for ColorScheme(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v8 = *(int *)(a3 + 20);
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = sub_5440(&qword_25F200);
  if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
  {
    *(_WORD *)v9 = *(_WORD *)v10;
    v12 = (int *)type metadata accessor for SizeConstants.Environment(0);
    v13 = v12[6];
    v14 = &v9[v13];
    v15 = &v10[v13];
    v16 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v14, v15, v16);
    *(_QWORD *)&v9[v12[7]] = *(_QWORD *)&v10[v12[7]];
    v17 = v12[8];
    v18 = &v9[v17];
    v19 = &v10[v17];
    v18[2] = v19[2];
    *(_WORD *)v18 = *(_WORD *)v19;
    swift_storeEnumTagMultiPayload(v9, v11, 1);
  }
  else
  {
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  return a1;
}

char *sub_413E8(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;

  if (a1 != a2)
  {
    sub_B414((uint64_t)a1, &qword_25F1E8);
    v6 = sub_5440(&qword_25F1E8);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for ColorScheme(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
    v8 = *(int *)(a3 + 20);
    v9 = &a1[v8];
    v10 = &a2[v8];
    sub_B414((uint64_t)&a1[v8], &qword_25F200);
    v11 = sub_5440(&qword_25F200);
    if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
    {
      *(_WORD *)v9 = *(_WORD *)v10;
      v12 = (int *)type metadata accessor for SizeConstants.Environment(0);
      v13 = v12[6];
      v14 = &v9[v13];
      v15 = &v10[v13];
      v16 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v14, v15, v16);
      *(_QWORD *)&v9[v12[7]] = *(_QWORD *)&v10[v12[7]];
      v17 = v12[8];
      v18 = &v9[v17];
      v19 = &v10[v17];
      v18[2] = v19[2];
      *(_WORD *)v18 = *(_WORD *)v19;
      swift_storeEnumTagMultiPayload(v9, v11, 1);
    }
    else
    {
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_4157C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_41588);
}

uint64_t sub_41588(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v6 = sub_5440(&qword_25F210);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v8 = sub_5440(&qword_25F220);
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t sub_41604(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_41610);
}

uint64_t sub_41610(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v8 = sub_5440(&qword_25F210);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v10 = sub_5440(&qword_25F220);
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for ScrollingCardModifier(uint64_t a1)
{
  return sub_1FE90(a1, qword_260188, (uint64_t)&nominal type descriptor for ScrollingCardModifier);
}

void sub_416A8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[2];

  sub_2ADCC(319, (unint64_t *)&qword_25F298, type metadata accessor for ColorConstants);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_2ADCC(319, (unint64_t *)&qword_25F2A8, type metadata accessor for SizeConstants.Spacing);
    if (v5 <= 0x3F)
    {
      v6[1] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 256, 2, v6, a1 + 16);
    }
  }
}

uint64_t *sub_4174C(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v11);
  }
  else
  {
    v7 = sub_5440(&qword_25F1F0);
    if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
    {
      v8 = type metadata accessor for UserInterfaceSizeClass(0);
      v9 = *(_QWORD *)(v8 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v9 + 48))(a2, 1, v8))
      {
        v10 = sub_5440(&qword_25F1F8);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v9 + 16))(a1, a2, v8);
        (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v9 + 56))(a1, 0, 1, v8);
      }
      v13 = a1;
      v14 = v7;
      v15 = 1;
    }
    else
    {
      v12 = *a2;
      *a1 = *a2;
      swift_retain(v12);
      v13 = a1;
      v14 = v7;
      v15 = 0;
    }
    swift_storeEnumTagMultiPayload(v13, v14, v15);
    v16 = a3[5];
    v17 = (char *)a1 + v16;
    v18 = (char *)a2 + v16;
    v19 = *(_QWORD *)v18;
    v20 = v18[8];
    sub_F9E4(*(_QWORD *)v18, v20);
    *(_QWORD *)v17 = v19;
    v17[8] = v20;
    v21 = a3[6];
    v22 = (uint64_t *)((char *)a1 + v21);
    v23 = (uint64_t *)((char *)a2 + v21);
    v24 = sub_5440(&qword_25F208);
    if (swift_getEnumCaseMultiPayload(v23, v24) == 1)
    {
      v25 = type metadata accessor for BlendMode(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v25 - 8) + 16))(v22, v23, v25);
      v26 = 1;
    }
    else
    {
      v27 = *v23;
      *v22 = *v23;
      swift_retain(v27);
      v26 = 0;
    }
    swift_storeEnumTagMultiPayload(v22, v24, v26);
    v28 = a3[7];
    v29 = (uint64_t *)((char *)a1 + v28);
    v30 = (uint64_t *)((char *)a2 + v28);
    v31 = v30[1];
    *v29 = *v30;
    v29[1] = v31;
    v32 = v30[3];
    v29[2] = v30[2];
    v29[3] = v32;
    v33 = v30[4];
    v29[4] = v33;
    swift_bridgeObjectRetain(v31);
    swift_bridgeObjectRetain(v32);
    swift_bridgeObjectRetain(v33);
  }
  return a1;
}

uint64_t sub_4194C(_QWORD *a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = sub_5440(&qword_25F1F0);
  if (swift_getEnumCaseMultiPayload(a1, v4) == 1)
  {
    v5 = type metadata accessor for UserInterfaceSizeClass(0);
    v6 = *(_QWORD *)(v5 - 8);
    if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v6 + 48))(a1, 1, v5))
      (*(void (**)(_QWORD *, uint64_t))(v6 + 8))(a1, v5);
  }
  else
  {
    swift_release(*a1);
  }
  sub_BE0C(*(_QWORD *)((char *)a1 + a2[5]), *((_BYTE *)a1 + a2[5] + 8));
  v7 = (_QWORD *)((char *)a1 + a2[6]);
  v8 = sub_5440(&qword_25F208);
  if (swift_getEnumCaseMultiPayload(v7, v8) == 1)
  {
    v9 = type metadata accessor for BlendMode(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v7, v9);
  }
  else
  {
    swift_release(*v7);
  }
  v10 = (_QWORD *)((char *)a1 + a2[7]);
  swift_bridgeObjectRelease(v10[1]);
  swift_bridgeObjectRelease(v10[3]);
  return swift_bridgeObjectRelease(v10[4]);
}

uint64_t *sub_41A58(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v6 = sub_5440(&qword_25F1F0);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for UserInterfaceSizeClass(0);
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      v9 = sub_5440(&qword_25F1F8);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    v11 = a1;
    v12 = v6;
    v13 = 1;
  }
  else
  {
    v10 = *a2;
    *a1 = *a2;
    swift_retain(v10);
    v11 = a1;
    v12 = v6;
    v13 = 0;
  }
  swift_storeEnumTagMultiPayload(v11, v12, v13);
  v14 = a3[5];
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  v17 = *(_QWORD *)v16;
  v18 = v16[8];
  sub_F9E4(*(_QWORD *)v16, v18);
  *(_QWORD *)v15 = v17;
  v15[8] = v18;
  v19 = a3[6];
  v20 = (uint64_t *)((char *)a1 + v19);
  v21 = (uint64_t *)((char *)a2 + v19);
  v22 = sub_5440(&qword_25F208);
  if (swift_getEnumCaseMultiPayload(v21, v22) == 1)
  {
    v23 = type metadata accessor for BlendMode(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v20, v21, v23);
    v24 = 1;
  }
  else
  {
    v25 = *v21;
    *v20 = *v21;
    swift_retain(v25);
    v24 = 0;
  }
  swift_storeEnumTagMultiPayload(v20, v22, v24);
  v26 = a3[7];
  v27 = (uint64_t *)((char *)a1 + v26);
  v28 = (uint64_t *)((char *)a2 + v26);
  v29 = v28[1];
  *v27 = *v28;
  v27[1] = v29;
  v30 = v28[3];
  v27[2] = v28[2];
  v27[3] = v30;
  v31 = v28[4];
  v27[4] = v31;
  swift_bridgeObjectRetain(v29);
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRetain(v31);
  return a1;
}

uint64_t *sub_41C2C(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  if (a1 != a2)
  {
    sub_B414((uint64_t)a1, &qword_25F1F0);
    v6 = sub_5440(&qword_25F1F0);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for UserInterfaceSizeClass(0);
      v8 = *(_QWORD *)(v7 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
      {
        v9 = sub_5440(&qword_25F1F8);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
        (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
      }
      v11 = a1;
      v12 = v6;
      v13 = 1;
    }
    else
    {
      v10 = *a2;
      *a1 = *a2;
      swift_retain(v10);
      v11 = a1;
      v12 = v6;
      v13 = 0;
    }
    swift_storeEnumTagMultiPayload(v11, v12, v13);
  }
  v14 = a3[5];
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  v17 = *(_QWORD *)v16;
  v18 = v16[8];
  sub_F9E4(*(_QWORD *)v16, v18);
  v19 = *(_QWORD *)v15;
  v20 = v15[8];
  *(_QWORD *)v15 = v17;
  v15[8] = v18;
  sub_BE0C(v19, v20);
  if (a1 != a2)
  {
    v21 = a3[6];
    v22 = (uint64_t *)((char *)a1 + v21);
    v23 = (uint64_t *)((char *)a2 + v21);
    sub_B414((uint64_t)a1 + v21, &qword_25F208);
    v24 = sub_5440(&qword_25F208);
    if (swift_getEnumCaseMultiPayload(v23, v24) == 1)
    {
      v25 = type metadata accessor for BlendMode(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v25 - 8) + 16))(v22, v23, v25);
      v26 = 1;
    }
    else
    {
      v27 = *v23;
      *v22 = *v23;
      swift_retain(v27);
      v26 = 0;
    }
    swift_storeEnumTagMultiPayload(v22, v24, v26);
  }
  v28 = a3[7];
  v29 = (uint64_t *)((char *)a1 + v28);
  v30 = (uint64_t *)((char *)a2 + v28);
  *v29 = *(uint64_t *)((char *)a2 + v28);
  v31 = *(uint64_t *)((char *)a2 + v28 + 8);
  v32 = *(uint64_t *)((char *)a1 + v28 + 8);
  v29[1] = v31;
  swift_bridgeObjectRetain(v31);
  swift_bridgeObjectRelease(v32);
  v29[2] = v30[2];
  v33 = v30[3];
  v34 = v29[3];
  v29[3] = v33;
  swift_bridgeObjectRetain(v33);
  swift_bridgeObjectRelease(v34);
  v35 = v30[4];
  v36 = v29[4];
  v29[4] = v35;
  swift_bridgeObjectRetain(v35);
  swift_bridgeObjectRelease(v36);
  return a1;
}

char *sub_41E68(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  __int128 v21;

  v6 = sub_5440(&qword_25F1F0);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for UserInterfaceSizeClass(0);
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      v9 = sub_5440(&qword_25F1F8);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v8 + 32))(a1, a2, v7);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v10 = a3[5];
  v11 = a3[6];
  v12 = &a1[v10];
  v13 = &a2[v10];
  *(_QWORD *)v12 = *(_QWORD *)v13;
  v12[8] = v13[8];
  v14 = &a1[v11];
  v15 = &a2[v11];
  v16 = sub_5440(&qword_25F208);
  if (swift_getEnumCaseMultiPayload(v15, v16) == 1)
  {
    v17 = type metadata accessor for BlendMode(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v14, v15, v17);
    swift_storeEnumTagMultiPayload(v14, v16, 1);
  }
  else
  {
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  v18 = a3[7];
  v19 = &a1[v18];
  v20 = &a2[v18];
  v21 = *((_OWORD *)v20 + 1);
  *(_OWORD *)v19 = *(_OWORD *)v20;
  *((_OWORD *)v19 + 1) = v21;
  *((_QWORD *)v19 + 4) = *((_QWORD *)v20 + 4);
  return a1;
}

char *sub_42010(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  if (a1 != a2)
  {
    sub_B414((uint64_t)a1, &qword_25F1F0);
    v6 = sub_5440(&qword_25F1F0);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for UserInterfaceSizeClass(0);
      v8 = *(_QWORD *)(v7 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
      {
        v9 = sub_5440(&qword_25F1F8);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v8 + 32))(a1, a2, v7);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
      }
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
  }
  v10 = a3[5];
  v11 = &a1[v10];
  v12 = &a2[v10];
  v13 = *(_QWORD *)v12;
  LOBYTE(v12) = v12[8];
  v14 = *(_QWORD *)v11;
  v15 = v11[8];
  *(_QWORD *)v11 = v13;
  v11[8] = (char)v12;
  sub_BE0C(v14, v15);
  if (a1 != a2)
  {
    v16 = a3[6];
    v17 = &a1[v16];
    v18 = &a2[v16];
    sub_B414((uint64_t)&a1[v16], &qword_25F208);
    v19 = sub_5440(&qword_25F208);
    if (swift_getEnumCaseMultiPayload(v18, v19) == 1)
    {
      v20 = type metadata accessor for BlendMode(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v17, v18, v20);
      swift_storeEnumTagMultiPayload(v17, v19, 1);
    }
    else
    {
      memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    }
  }
  v21 = a3[7];
  v22 = &a1[v21];
  v23 = &a2[v21];
  v24 = *((_QWORD *)v23 + 1);
  v25 = *(_QWORD *)&a1[v21 + 8];
  *(_QWORD *)v22 = *(_QWORD *)v23;
  *((_QWORD *)v22 + 1) = v24;
  swift_bridgeObjectRelease(v25);
  v26 = *((_QWORD *)v23 + 3);
  v27 = *((_QWORD *)v22 + 3);
  *((_QWORD *)v22 + 2) = *((_QWORD *)v23 + 2);
  *((_QWORD *)v22 + 3) = v26;
  swift_bridgeObjectRelease(v27);
  v28 = *((_QWORD *)v22 + 4);
  *((_QWORD *)v22 + 4) = *((_QWORD *)v23 + 4);
  swift_bridgeObjectRelease(v28);
  return a1;
}

uint64_t sub_42218(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_42224);
}

uint64_t sub_42224(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v14;

  v6 = sub_5440(&qword_25F218);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = sub_5440(&qword_25F228);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v10 = a1 + *(int *)(a3 + 24);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = *(_QWORD *)(a1 + *(int *)(a3 + 28) + 8);
  if (v14 >= 0xFFFFFFFF)
    LODWORD(v14) = -1;
  return (v14 + 1);
}

uint64_t sub_422D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_422E4);
}

uint64_t sub_422E4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v8 = sub_5440(&qword_25F218);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  result = sub_5440(&qword_25F228);
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v12 = a1 + *(int *)(a4 + 24);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  *(_QWORD *)(a1 + *(int *)(a4 + 28) + 8) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for BulletPointStack(uint64_t a1)
{
  return sub_1FE90(a1, qword_260218, (uint64_t)&nominal type descriptor for BulletPointStack);
}

void sub_423A8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[4];

  sub_2AD74(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    v6[1] = "\t";
    sub_2ADCC(319, (unint64_t *)&qword_25F2B0, (uint64_t (*)(uint64_t))&type metadata accessor for BlendMode);
    if (v5 <= 0x3F)
    {
      v6[2] = *(_QWORD *)(v4 - 8) + 64;
      v6[3] = &unk_1E3280;
      swift_initStructMetadata(a1, 256, 4, v6, a1 + 16);
    }
  }
}

uint64_t sub_4244C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_22AE34, 1);
}

uint64_t sub_4245C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 28);
  v5 = type metadata accessor for UUID(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

void sub_4249C()
{
  qword_2600F0 = 0x4028000000000000;
}

void sub_424AC()
{
  qword_2600F8 = 0x403A000000000000;
}

void sub_424BC()
{
  qword_260100 = 0x4040000000000000;
}

void sub_424CC()
{
  qword_260108 = 0x4044000000000000;
}

void sub_424DC()
{
  qword_260110 = 0x4000000000000000;
}

void sub_424EC()
{
  qword_260118 = 0x4018000000000000;
}

void sub_424FC()
{
  qword_260120 = 0x4042800000000000;
}

uint64_t sub_42510@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t KeyPath;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;

  v84 = a5;
  v73 = a3;
  v74 = a4;
  v86 = a6;
  v8 = type metadata accessor for _BlendModeEffect(0);
  __chkstk_darwin(v8);
  v83 = (char *)&v71 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for BlendMode(0);
  v81 = *(_QWORD *)(v10 - 8);
  v82 = v10;
  __chkstk_darwin(v10);
  v87 = (uint64_t)&v71 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v80 = sub_5440(&qword_2603A8);
  v12 = __chkstk_darwin(v80);
  v14 = (char *)&v71 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v85 = (uint64_t)&v71 - v15;
  v88 = a1;
  v89 = a2;
  v16 = sub_C57C();
  v72 = v16;
  swift_bridgeObjectRetain(a2);
  v17 = Text.init<A>(_:)(&v88, &type metadata for String, v16);
  v19 = v18;
  v21 = v20;
  v23 = v22 & 1;
  v24 = static Font.subheadline.getter(v17);
  v25 = Text.font(_:)(v24, v17, v19, v23, v21);
  v27 = v26;
  LOBYTE(v16) = v28;
  v30 = v29;
  swift_release(v24);
  v31 = v16 & 1;
  sub_2B574(v17, v19, v23);
  swift_bridgeObjectRelease(v21);
  v32 = Text.bold()(v25, v27, v31, v30);
  v78 = v33;
  v79 = v32;
  v77 = v34;
  v76 = v35 & 1;
  sub_2B574(v25, v27, v31);
  swift_bridgeObjectRelease(v30);
  KeyPath = swift_getKeyPath(&unk_1E3398);
  v88 = v73;
  v89 = v74;
  swift_bridgeObjectRetain(v74);
  v36 = Text.init<A>(_:)(&v88, &type metadata for String, v72);
  v38 = v37;
  v40 = v39;
  v42 = v41 & 1;
  v43 = static Font.subheadline.getter(v36);
  v44 = Text.font(_:)(v43, v36, v38, v42, v40);
  v46 = v45;
  LOBYTE(v19) = v47;
  v49 = v48;
  swift_release(v43);
  LOBYTE(v43) = v19 & 1;
  sub_2B574(v36, v38, v42);
  swift_bridgeObjectRelease(v40);
  v50 = _s7BooksUI14ColorConstantsV19booksSecondaryLabel05SwiftB00C0Vvg_0();
  v51 = Text.foregroundColor(_:)(v50, v44, v46, v19 & 1, v49);
  v53 = v52;
  LOBYTE(v42) = v54;
  v56 = v55;
  swift_release(v50);
  LOBYTE(v42) = v42 & 1;
  sub_2B574(v44, v46, v43);
  swift_bridgeObjectRelease(v49);
  v57 = swift_getKeyPath(&unk_1E3398);
  type metadata accessor for BulletPointStack(0);
  v58 = v87;
  sub_31660(v87);
  v59 = v81;
  v60 = v82;
  v61 = (uint64_t)v83;
  (*(void (**)(char *, uint64_t, uint64_t))(v81 + 16))(v83, v58, v82);
  sub_1E428(v61, (uint64_t)&v14[*(int *)(v80 + 36)], (uint64_t (*)(_QWORD))&type metadata accessor for _BlendModeEffect);
  *(_QWORD *)v14 = v51;
  *((_QWORD *)v14 + 1) = v53;
  v14[16] = v42;
  *((_QWORD *)v14 + 3) = v56;
  *((_QWORD *)v14 + 4) = v57;
  *((_QWORD *)v14 + 5) = 6;
  v14[48] = 0;
  sub_34B1C(v51, v53, v42);
  swift_bridgeObjectRetain(v56);
  swift_retain(v57);
  sub_224DC(v61, (uint64_t (*)(_QWORD))&type metadata accessor for _BlendModeEffect);
  (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v87, v60);
  sub_2B574(v51, v53, v42);
  swift_release(v57);
  swift_bridgeObjectRelease(v56);
  v62 = v85;
  sub_167A4((uint64_t)v14, v85, &qword_2603A8);
  sub_B3D0(v62, (uint64_t)v14, &qword_2603A8);
  v63 = v86;
  v64 = v78;
  v65 = v79;
  v66 = v77;
  *v86 = v79;
  v63[1] = v66;
  LOBYTE(v53) = v76;
  *((_BYTE *)v63 + 16) = v76;
  v67 = KeyPath;
  v63[3] = v64;
  v63[4] = v67;
  v63[5] = 6;
  *((_BYTE *)v63 + 48) = 0;
  v68 = v63;
  v69 = sub_5440(&qword_2603B0);
  sub_B3D0((uint64_t)v14, (uint64_t)v68 + *(int *)(v69 + 48), &qword_2603A8);
  sub_34B1C(v65, v66, v53);
  swift_bridgeObjectRetain(v64);
  swift_retain(v67);
  sub_B414(v62, &qword_2603A8);
  sub_B414((uint64_t)v14, &qword_2603A8);
  sub_2B574(v65, v66, v53);
  swift_release(v67);
  return swift_bridgeObjectRelease(v64);
}

uint64_t sub_429A0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  void (*v26)(char *, _QWORD, uint64_t);
  uint64_t v27;
  uint64_t result;
  uint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  void (*v34)(char *, char *, uint64_t);
  char *v35;
  void (*v36)(char *, char *, uint64_t);
  uint64_t v37;
  void (*v38)(char *, uint64_t);
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t KeyPath;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  char *v53;
  char *v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;

  v2 = v1;
  v59 = a1;
  v57 = sub_5440(&qword_25FE38);
  v3 = __chkstk_darwin(v57);
  v5 = (char *)&v52 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v56 = (char *)&v52 - v6;
  v7 = type metadata accessor for DynamicTypeSize(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v52 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v52 - v12;
  v61 = sub_5440(&qword_25FE40);
  v14 = __chkstk_darwin(v61);
  v55 = (char *)&v52 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v17 = (char *)&v52 - v16;
  v58 = sub_5440(&qword_2602C8);
  __chkstk_darwin(v58);
  v63 = (uint64_t *)((char *)&v52 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  v62 = sub_5440(&qword_2602D0);
  v60 = *(_QWORD *)(v62 - 8);
  v19 = __chkstk_darwin(v62);
  v21 = (char *)&v52 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_25DBC8 != -1)
    v19 = swift_once(&qword_25DBC8, sub_424FC);
  v22 = qword_260120;
  v23 = static HorizontalAlignment.center.getter(v19);
  v24 = v63;
  *v63 = v23;
  v24[1] = v22;
  *((_BYTE *)v24 + 16) = 0;
  v25 = sub_5440(&qword_2602D8);
  sub_42E04(v2, (uint64_t)v24 + *(int *)(v25 + 44));
  v26 = *(void (**)(char *, _QWORD, uint64_t))(v8 + 104);
  v26(v13, enum case for DynamicTypeSize.xSmall(_:), v7);
  v26(v11, enum case for DynamicTypeSize.accessibility1(_:), v7);
  v27 = sub_6FD0(&qword_25FE98, (uint64_t (*)(uint64_t))&type metadata accessor for DynamicTypeSize, (uint64_t)&protocol conformance descriptor for DynamicTypeSize);
  result = dispatch thunk of static Comparable.<= infix(_:_:)(v13, v11, v7, v27);
  if ((result & 1) != 0)
  {
    v53 = v17;
    v54 = v21;
    v30 = v56;
    v29 = v57;
    v31 = &v56[*(int *)(v57 + 48)];
    v32 = v5;
    v33 = v8;
    v34 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
    v34(v56, v13, v7);
    v34(v31, v11, v7);
    v35 = &v32[*(int *)(v29 + 48)];
    v36 = *(void (**)(char *, char *, uint64_t))(v33 + 16);
    v36(v32, v30, v7);
    v36(v35, v31, v7);
    v37 = (uint64_t)v55;
    v34(v55, v32, v7);
    v38 = *(void (**)(char *, uint64_t))(v33 + 8);
    v38(v35, v7);
    v39 = &v32[*(int *)(v29 + 48)];
    v34(v32, v30, v7);
    v34(v39, v31, v7);
    v40 = v61;
    v34((char *)(v37 + *(int *)(v61 + 36)), v39, v7);
    v38(v32, v7);
    v41 = (uint64_t)v53;
    sub_167A4(v37, (uint64_t)v53, &qword_25FE40);
    v42 = sub_7FD8(&qword_2602E0, &qword_2602C8, (uint64_t)&protocol conformance descriptor for VStack<A>);
    v43 = sub_7FD8(&qword_25FEA0, &qword_25FE40, (uint64_t)&protocol conformance descriptor for ClosedRange<A>);
    v44 = v54;
    v45 = v42;
    v46 = (uint64_t)v63;
    View.dynamicTypeSize<A>(_:)(v41, v58, v40, v45, v43);
    sub_B414(v41, &qword_25FE40);
    sub_B414(v46, &qword_2602C8);
    KeyPath = swift_getKeyPath(&unk_1E3338);
    v49 = v59;
    v48 = v60;
    v50 = v62;
    (*(void (**)(uint64_t, char *, uint64_t))(v60 + 16))(v59, v44, v62);
    v51 = (uint64_t *)(v49 + *(int *)(sub_5440(&qword_2602E8) + 36));
    *v51 = KeyPath;
    v51[1] = 0x3FE0000000000000;
    return (*(uint64_t (**)(char *, uint64_t))(v48 + 8))(v44, v50);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_42E04@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t OpaqueTypeConformance2;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD v41[2];
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD v45[2];
  uint64_t v46;

  v44 = a2;
  v3 = type metadata accessor for BulletPointStack(0);
  v42 = *(_QWORD *)(v3 - 8);
  v4 = *(_QWORD *)(v42 + 64);
  __chkstk_darwin(v3);
  v5 = sub_5440(&qword_2602F0);
  v6 = __chkstk_darwin(v5);
  v43 = (uint64_t)v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v9 = (char *)v41 - v8;
  v10 = sub_5440(&qword_2602F8);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v11);
  v16 = (char *)v41 - v15;
  if (qword_25DBC0 != -1)
    v14 = swift_once(&qword_25DBC0, sub_424EC);
  v17 = qword_260118;
  *(_QWORD *)v16 = static HorizontalAlignment.center.getter(v14);
  *((_QWORD *)v16 + 1) = v17;
  v16[16] = 0;
  v18 = sub_5440(&qword_260300);
  v19 = sub_43208(a1, (uint64_t *)&v16[*(int *)(v18 + 44)]);
  v20 = static Alignment.leading.getter(v19);
  v22 = v21;
  if (qword_25DB98 != -1)
    swift_once(&qword_25DB98, sub_4249C);
  v23 = qword_2600F0;
  if (qword_25DBA0 != -1)
    swift_once(&qword_25DBA0, sub_424AC);
  v24 = qword_2600F8;
  *(_QWORD *)v9 = v20;
  *((_QWORD *)v9 + 1) = v22;
  *((_QWORD *)v9 + 2) = v23;
  v9[24] = 0;
  *((_QWORD *)v9 + 4) = v24;
  v9[40] = 0;
  v41[1] = &v9[*(int *)(sub_5440(&qword_260308) + 44)];
  v46 = *(_QWORD *)(a1 + *(int *)(v3 + 28) + 32);
  v25 = v46;
  sub_1E428(a1, (uint64_t)v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for BulletPointStack);
  v26 = *(unsigned __int8 *)(v42 + 80);
  v27 = (v26 + 16) & ~v26;
  v28 = swift_allocObject(&unk_24CB88, v27 + v4, v26 | 7);
  sub_21C88((uint64_t)v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v28 + v27, type metadata accessor for BulletPointStack);
  swift_bridgeObjectRetain(v25);
  v29 = sub_5440(&qword_260310);
  v30 = type metadata accessor for UUID(0);
  v31 = sub_5440(&qword_260318);
  v32 = sub_7FD8(&qword_260320, &qword_260310, (uint64_t)&protocol conformance descriptor for [A]);
  v33 = sub_7EF8(&qword_260328);
  v34 = sub_7FD8(&qword_260330, &qword_260328, (uint64_t)&protocol conformance descriptor for GridRow<A>);
  v45[0] = v33;
  v45[1] = v34;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v45, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
  v36 = sub_6FD0(&qword_260338, type metadata accessor for BulletPointStack.Bullet, (uint64_t)&unk_1E343C);
  ForEach<>.init(_:content:)(&v46, sub_45140, v28, v29, v30, v31, v32, OpaqueTypeConformance2, v36);
  sub_B3D0((uint64_t)v16, (uint64_t)v13, &qword_2602F8);
  v37 = v43;
  sub_B3D0((uint64_t)v9, v43, &qword_2602F0);
  v38 = v44;
  sub_B3D0((uint64_t)v13, v44, &qword_2602F8);
  v39 = sub_5440(&qword_260340);
  sub_B3D0(v37, v38 + *(int *)(v39 + 48), &qword_2602F0);
  sub_B414((uint64_t)v9, &qword_2602F0);
  sub_B414((uint64_t)v16, &qword_2602F8);
  sub_B414(v37, &qword_2602F0);
  return sub_B414((uint64_t)v13, &qword_2602F8);
}

uint64_t sub_43208@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t *v80;
  uint64_t v81;
  unint64_t v83;
  _QWORD *v84;
  char *KeyPath;
  int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;

  v91 = a1;
  v97 = a2;
  v3 = type metadata accessor for _BlendModeEffect(0);
  __chkstk_darwin(v3);
  v95 = (char *)&v83 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for BlendMode(0);
  v93 = *(_QWORD *)(v5 - 8);
  v94 = v5;
  __chkstk_darwin(v5);
  v98 = (uint64_t)&v83 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v92 = sub_5440(&qword_2603B8);
  v7 = __chkstk_darwin(v92);
  v9 = (char *)&v83 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v96 = (uint64_t)&v83 - v10;
  v11 = sub_5440(&qword_25FE08);
  __chkstk_darwin(v11);
  KeyPath = (char *)&v83 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v90 = type metadata accessor for BulletPointStack(0);
  v84 = (_QWORD *)(a1 + *(int *)(v90 + 28));
  v13 = v84[1];
  v99 = *v84;
  v100 = v13;
  v14 = sub_C57C();
  v83 = v14;
  swift_bridgeObjectRetain(v13);
  v15 = Text.init<A>(_:)(&v99, &type metadata for String, v14);
  v17 = v16;
  v19 = v18;
  v21 = v20 & 1;
  v22 = static Font.title2.getter();
  v23 = Text.font(_:)(v22, v15, v17, v21, v19);
  v25 = v24;
  LOBYTE(v14) = v26;
  v28 = v27;
  swift_release(v22);
  v29 = v14 & 1;
  sub_2B574(v15, v17, v21);
  swift_bridgeObjectRelease(v19);
  v30 = Text.bold()(v23, v25, v29, v28);
  v32 = v31;
  v34 = v33;
  v36 = v35 & 1;
  sub_2B574(v23, v25, v29);
  swift_bridgeObjectRelease(v28);
  v37 = enum case for Font.Design.serif (_:);
  v38 = type metadata accessor for Font.Design(0);
  v39 = *(_QWORD *)(v38 - 8);
  v40 = (uint64_t)KeyPath;
  (*(void (**)(char *, uint64_t, uint64_t))(v39 + 104))(KeyPath, v37, v38);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v39 + 56))(v40, 0, 1, v38);
  v41 = Text.fontDesign(_:)(v40, v30, v32, v36, v34);
  v88 = v42;
  v89 = v41;
  v87 = v43;
  v86 = v44 & 1;
  sub_2B574(v30, v32, v36);
  swift_bridgeObjectRelease(v34);
  sub_B414(v40, &qword_25FE08);
  KeyPath = (char *)swift_getKeyPath(&unk_1E3398);
  v45 = v84[3];
  v99 = v84[2];
  v100 = v45;
  swift_bridgeObjectRetain(v45);
  v46 = Text.init<A>(_:)(&v99, &type metadata for String, v83);
  v48 = v47;
  v50 = v49;
  v52 = v51 & 1;
  v53 = static Font.subheadline.getter(v46);
  v54 = Text.font(_:)(v53, v46, v48, v52, v50);
  v56 = v55;
  LOBYTE(v40) = v57;
  v59 = v58;
  swift_release(v53);
  LOBYTE(v53) = v40 & 1;
  sub_2B574(v46, v48, v52);
  swift_bridgeObjectRelease(v50);
  v60 = _s7BooksUI14ColorConstantsV19booksSecondaryLabel05SwiftB00C0Vvg_0();
  v61 = Text.foregroundColor(_:)(v60, v54, v56, v40 & 1, v59);
  v63 = v62;
  LOBYTE(v50) = v64;
  v84 = v65;
  swift_release(v60);
  LOBYTE(v50) = v50 & 1;
  sub_2B574(v54, v56, v53);
  swift_bridgeObjectRelease(v59);
  v66 = swift_getKeyPath(&unk_1E33C8);
  v67 = swift_getKeyPath(&unk_1E3398);
  v68 = v98;
  sub_31660(v98);
  v69 = v93;
  v70 = (uint64_t)v95;
  v71 = v68;
  v72 = v94;
  (*(void (**)(char *, uint64_t, uint64_t))(v93 + 16))(v95, v71, v94);
  sub_1E428(v70, (uint64_t)&v9[*(int *)(v92 + 36)], (uint64_t (*)(_QWORD))&type metadata accessor for _BlendModeEffect);
  *(_QWORD *)v9 = v61;
  *((_QWORD *)v9 + 1) = v63;
  v9[16] = v50;
  v73 = v84;
  *((_QWORD *)v9 + 3) = v84;
  *((_QWORD *)v9 + 4) = v66;
  v9[40] = 1;
  *((_QWORD *)v9 + 6) = v67;
  *((_QWORD *)v9 + 7) = 3;
  v9[64] = 0;
  sub_34B1C(v61, v63, v50);
  swift_bridgeObjectRetain(v73);
  swift_retain(v66);
  swift_retain(v67);
  sub_224DC(v70, (uint64_t (*)(_QWORD))&type metadata accessor for _BlendModeEffect);
  (*(void (**)(uint64_t, uint64_t))(v69 + 8))(v98, v72);
  sub_2B574(v61, v63, v50);
  swift_release(v67);
  swift_release(v66);
  swift_bridgeObjectRelease(v73);
  v74 = v96;
  sub_167A4((uint64_t)v9, v96, &qword_2603B8);
  sub_B3D0(v74, (uint64_t)v9, &qword_2603B8);
  v75 = v97;
  v76 = v88;
  v77 = v89;
  v78 = v87;
  *v97 = v89;
  v75[1] = v78;
  LOBYTE(v67) = v86;
  *((_BYTE *)v75 + 16) = v86;
  v79 = KeyPath;
  v75[3] = v76;
  v75[4] = (uint64_t)v79;
  v75[5] = 3;
  *((_BYTE *)v75 + 48) = 0;
  v80 = v75;
  v81 = sub_5440(&qword_2603C0);
  sub_B3D0((uint64_t)v9, (uint64_t)v80 + *(int *)(v81 + 48), &qword_2603B8);
  sub_34B1C(v77, v78, v67);
  swift_bridgeObjectRetain(v76);
  swift_retain(v79);
  sub_B414(v74, &qword_2603B8);
  sub_B414((uint64_t)v9, &qword_2603B8);
  sub_2B574(v77, v78, v67);
  swift_release(v79);
  return swift_bridgeObjectRelease(v76);
}

uint64_t sub_437BC(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v4 = type metadata accessor for AccessibilityChildBehavior(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_5440(&qword_260328);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v11 = static VerticalAlignment.top.getter(v9);
  v11[8] = 0;
  v12 = sub_438F0(a2, a1, (uint64_t)&v11[*(int *)(v8 + 36)]);
  static AccessibilityChildBehavior.combine.getter(v12);
  v13 = sub_7FD8(&qword_260330, &qword_260328, (uint64_t)&protocol conformance descriptor for GridRow<A>);
  View.accessibilityElement(children:)(v7, v8, v13);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return sub_B414((uint64_t)v11, &qword_260328);
}

uint64_t sub_438F0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __n128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t (*v47)(uint64_t, uint64_t, uint64_t);
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  char *v53;
  uint64_t v54;
  char v55;
  void (*v56)(char *, uint64_t);
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v86;
  uint64_t KeyPath;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  uint64_t v106;
  uint64_t v107;
  __int16 v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char v112;
  uint64_t v113;
  char v114;
  __int128 v115;
  uint64_t v116;
  char v117;
  uint64_t v118;
  char v119;
  __int128 v120;

  v104 = a3;
  v105 = a2;
  v4 = sub_5440(&qword_260348);
  __chkstk_darwin(v4);
  v97 = (uint64_t *)((char *)&v86 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = sub_5440(&qword_260350);
  v7 = __chkstk_darwin(v6);
  v103 = (uint64_t)&v86 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v102 = (uint64_t)&v86 - v9;
  v94 = type metadata accessor for UserInterfaceSizeClass(0);
  v93 = *(_QWORD *)(v94 - 8);
  __chkstk_darwin(v94);
  v90 = (char *)&v86 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v92 = sub_5440(&qword_25F308);
  __chkstk_darwin(v92);
  v12 = (char *)&v86 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_5440(&qword_25F1F8);
  v14 = __chkstk_darwin(v13);
  v91 = (uint64_t)&v86 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v14);
  v18 = (char *)&v86 - v17;
  __chkstk_darwin(v16);
  v20 = (char *)&v86 - v19;
  v21 = type metadata accessor for Image.ResizingMode(0);
  v22 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  v24 = (char *)&v86 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v99 = sub_5440(&qword_260358);
  v98 = *(_QWORD *)(v99 - 8);
  v25 = __chkstk_darwin(v99);
  v96 = (char *)&v86 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  v95 = (uint64_t)&v86 - v27;
  v28 = sub_5440(&qword_260360);
  v29 = __chkstk_darwin(v28);
  v101 = (uint64_t)&v86 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v29);
  v100 = (char *)&v86 - v31;
  v32 = a1;
  v33 = a1 + *(int *)(type metadata accessor for BulletPointStack(0) + 20);
  v34 = *(_QWORD *)v33;
  LOBYTE(a1) = *(_BYTE *)(v33 + 8);
  sub_F9E4(*(_QWORD *)v33, a1);
  v35 = sub_30DB4(v34, a1);
  sub_BE0C(v34, a1);
  if ((v35 & 1) != 0)
  {
    v36 = 1;
    v37 = v32;
    v38 = v105;
    v39 = (uint64_t)v100;
    goto LABEL_17;
  }
  v40 = *v105;
  v41 = v105[1];
  swift_bridgeObjectRetain(v41);
  v42 = Image.init(systemName:)(v40, v41);
  (*(void (**)(char *, _QWORD, uint64_t))(v22 + 104))(v24, enum case for Image.ResizingMode.stretch(_:), v21);
  v89 = Image.resizable(capInsets:resizingMode:)(v24, v42, 0.0, 0.0, 0.0, 0.0);
  v43 = swift_release(v42);
  (*(void (**)(char *, uint64_t, __n128))(v22 + 8))(v24, v21, v43);
  v88 = _s7BooksUI14ColorConstantsV19booksSecondaryLabel05SwiftB00C0Vvg_0();
  KeyPath = swift_getKeyPath(&unk_1E3368);
  v86 = v32;
  sub_3160C((uint64_t)v20);
  v44 = v93;
  v45 = v94;
  (*(void (**)(char *, _QWORD, uint64_t))(v93 + 104))(v18, enum case for UserInterfaceSizeClass.compact(_:), v94);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v44 + 56))(v18, 0, 1, v45);
  v46 = (uint64_t)&v12[*(int *)(v92 + 48)];
  sub_B3D0((uint64_t)v20, (uint64_t)v12, &qword_25F1F8);
  sub_B3D0((uint64_t)v18, v46, &qword_25F1F8);
  v47 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v44 + 48);
  v48 = (uint64_t)v12;
  if (v47((uint64_t)v12, 1, v45) != 1)
  {
    v50 = (uint64_t)v20;
    v51 = v91;
    sub_B3D0(v48, v91, &qword_25F1F8);
    v52 = v47(v46, 1, v45);
    v39 = (uint64_t)v100;
    if (v52 != 1)
    {
      v53 = v90;
      (*(void (**)(char *, uint64_t, uint64_t))(v44 + 32))(v90, v46, v45);
      v54 = sub_6FD0((unint64_t *)&qword_25F460, (uint64_t (*)(uint64_t))&type metadata accessor for UserInterfaceSizeClass, (uint64_t)&protocol conformance descriptor for UserInterfaceSizeClass);
      v55 = dispatch thunk of static Equatable.== infix(_:_:)(v51, v53, v45, v54);
      v56 = *(void (**)(char *, uint64_t))(v44 + 8);
      v56(v53, v45);
      sub_B414((uint64_t)v18, &qword_25F1F8);
      sub_B414(v50, &qword_25F1F8);
      v56((char *)v51, v45);
      sub_B414(v48, &qword_25F1F8);
      v38 = v105;
      if ((v55 & 1) != 0)
        goto LABEL_10;
LABEL_13:
      v37 = v86;
      if (qword_25DBB0 != -1)
        swift_once(&qword_25DBB0, sub_424CC);
      v57 = &qword_260108;
      goto LABEL_16;
    }
    sub_B414((uint64_t)v18, &qword_25F1F8);
    sub_B414(v50, &qword_25F1F8);
    (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v51, v45);
LABEL_8:
    sub_B414(v48, &qword_25F308);
    v38 = v105;
    goto LABEL_13;
  }
  sub_B414((uint64_t)v18, &qword_25F1F8);
  sub_B414((uint64_t)v20, &qword_25F1F8);
  v49 = v47(v46, 1, v45);
  v39 = (uint64_t)v100;
  if (v49 != 1)
    goto LABEL_8;
  sub_B414((uint64_t)v12, &qword_25F1F8);
  v38 = v105;
LABEL_10:
  v37 = v86;
  if (qword_25DBA8 != -1)
    swift_once(&qword_25DBA8, sub_424BC);
  v57 = &qword_260100;
LABEL_16:
  v58 = *v57;
  v59 = _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0();
  _FrameLayout.init(width:height:alignment:)(&v116, v58, 0, 0, 1, v59, v60);
  v61 = v89;
  v106 = v89;
  v107 = 0;
  v108 = 1;
  v62 = KeyPath;
  v63 = v88;
  v109 = KeyPath;
  v110 = v88;
  v111 = v116;
  v112 = v117;
  v113 = v118;
  v114 = v119;
  v115 = v120;
  v64 = sub_5440(&qword_260368);
  v65 = sub_3CC54(&qword_260370, &qword_260368, (void (*)(void))sub_451A8);
  v66 = (uint64_t)v96;
  View.accessibilityHidden(_:)(1, v64, v65);
  swift_release(v63);
  swift_release(v62);
  swift_release(v61);
  v67 = v95;
  sub_167A4(v66, v95, &qword_260358);
  sub_167A4(v67, v39, &qword_260358);
  v36 = 0;
LABEL_17:
  v68 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v98 + 56))(v39, v36, 1, v99);
  v69 = v38[2];
  v70 = v38[3];
  v71 = v38[4];
  v72 = v38[5];
  v73 = static HorizontalAlignment.leading.getter(v68);
  if (qword_25DBB8 != -1)
    swift_once(&qword_25DBB8, sub_424DC);
  v74 = qword_260110;
  v75 = (uint64_t)v97;
  *v97 = v73;
  *(_QWORD *)(v75 + 8) = v74;
  *(_BYTE *)(v75 + 16) = 0;
  v76 = sub_5440(&qword_260398);
  v77 = sub_42510(v69, v70, v71, v72, v37, (uint64_t *)(v75 + *(int *)(v76 + 44)));
  v78 = static Alignment.leading.getter(v77);
  v79 = v103;
  sub_87464(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v103, 0.0, 1, 0.0, 1, v78, v80);
  sub_B414(v75, &qword_260348);
  v81 = v102;
  sub_167A4(v79, v102, &qword_260350);
  v82 = v101;
  sub_B3D0(v39, v101, &qword_260360);
  sub_B3D0(v81, v79, &qword_260350);
  v83 = v104;
  sub_B3D0(v82, v104, &qword_260360);
  v84 = sub_5440(&qword_2603A0);
  sub_B3D0(v79, v83 + *(int *)(v84 + 48), &qword_260350);
  sub_B414(v81, &qword_260350);
  sub_B414(v39, &qword_260360);
  sub_B414(v79, &qword_260350);
  return sub_B414(v82, &qword_260360);
}

uint64_t sub_4424C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_22AE0C, 1);
}

void sub_4425C()
{
  qword_260128 = 0x4036000000000000;
}

uint64_t sub_4426C@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  _OWORD v47[8];
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  _OWORD v55[3];

  v3 = v2;
  v41 = a1;
  v44 = sub_5440(&qword_25F700);
  __chkstk_darwin(v44);
  v46 = (uint64_t)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v43);
  v45 = (uint64_t *)((char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = type metadata accessor for ColorConstants(0);
  __chkstk_darwin(v7);
  v42 = (uint64_t)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ScrollingCardModifier(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  __chkstk_darwin(v9);
  v12 = sub_5440(&qword_260258);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(_QWORD *)(v13 + 64);
  __chkstk_darwin(v12);
  v15 = (char *)&v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, v41, v12);
  sub_1E428(v3, (uint64_t)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for ScrollingCardModifier);
  v16 = *(unsigned __int8 *)(v13 + 80);
  v17 = (v16 + 16) & ~v16;
  v18 = *(unsigned __int8 *)(v10 + 80);
  v19 = (v14 + v18 + v17) & ~v18;
  v20 = swift_allocObject(&unk_24CB60, v19 + v11, v16 | v18 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(v20 + v17, v15, v12);
  sub_21C88((uint64_t)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v20 + v19, type metadata accessor for ScrollingCardModifier);
  v21 = _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0();
  sub_874C8(0.0, 1, 0.0, 1, 0.0, 1, 0.0, 1, (uint64_t)v47, 0.0, 1, INFINITY, 0, v21, v22, (uint64_t)sub_44DC0, v20);
  swift_release(v20);
  v23 = v42;
  _s7BooksUI18BuyButtonExternalsV6colorsAA14ColorConstantsVvg_0(v42);
  v24 = objc_msgSend((id)objc_opt_self(UIColor), "quaternarySystemFillColor");
  v25 = Color.init(_:)(v24);
  v26 = sub_224DC(v23, type metadata accessor for ColorConstants);
  v27 = static Edge.Set.all.getter(v26);
  v52 = v47[4];
  v53 = v47[5];
  v54 = v47[6];
  v55[0] = v47[7];
  v48 = v47[0];
  v49 = v47[1];
  v50 = v47[2];
  v51 = v47[3];
  *(_QWORD *)&v55[1] = v25;
  BYTE8(v55[1]) = v27;
  if (qword_25DBD0 != -1)
    swift_once(&qword_25DBD0, sub_4425C);
  v28 = qword_260128;
  v29 = v45;
  v30 = (char *)v45 + *(int *)(v43 + 20);
  v31 = enum case for RoundedCornerStyle.continuous(_:);
  v32 = type metadata accessor for RoundedCornerStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 104))(v30, v31, v32);
  *v29 = v28;
  v29[1] = v28;
  v33 = v46;
  sub_1E428((uint64_t)v29, v46, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  *(_WORD *)(v33 + *(int *)(v44 + 36)) = 256;
  v34 = sub_5440(&qword_260260);
  sub_B3D0(v33, (uint64_t)a2 + *(int *)(v34 + 36), &qword_25F700);
  v35 = v55[0];
  a2[6] = v54;
  a2[7] = v35;
  *(_OWORD *)((char *)a2 + 121) = *(_OWORD *)((char *)v55 + 9);
  v36 = v51;
  a2[2] = v50;
  a2[3] = v36;
  v37 = v53;
  a2[4] = v52;
  a2[5] = v37;
  v38 = v49;
  *a2 = v48;
  a2[1] = v38;
  sub_44E3C((uint64_t)&v48);
  sub_B414(v33, &qword_25F700);
  sub_224DC((uint64_t)v29, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  return sub_44E70((uint64_t)&v48);
}

uint64_t sub_44660@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE v32[16];
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v31 = a4;
  v7 = type metadata accessor for ScrollBounceBehavior(0);
  v29 = *(_QWORD *)(v7 - 8);
  v30 = v7;
  __chkstk_darwin(v7);
  v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_5440(&qword_260268);
  v28 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_5440(&qword_260270);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v28 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = static Axis.Set.vertical.getter(v15);
  v33 = a2;
  v34 = a3;
  v35 = a1;
  v19 = sub_5440(&qword_260278);
  v20 = sub_3CC54(&qword_260280, &qword_260278, (void (*)(void))sub_44EB0);
  v21 = ScrollView.init(_:showsIndicators:content:)(v18, 1, sub_44EA4, v32, v19, v20);
  v22 = static ScrollBounceBehavior.basedOnSize.getter(v21);
  v23 = static Axis.Set.vertical.getter(v22);
  v24 = Axis.Set.init(rawValue:)(0);
  v25 = Axis.Set.init(rawValue:)(v24);
  if (Axis.Set.init(rawValue:)(v25 & v23) != v23)
    v24 = Axis.Set.init(rawValue:)(v24 | v23);
  v26 = sub_7FD8(&qword_2602B8, &qword_260268, (uint64_t)&protocol conformance descriptor for ScrollView<A>);
  View.scrollBounceBehavior(_:axes:)(v9, v24, v10, v26);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v9, v30);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v12, v10);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v14 + 32))(v31, v17, v13);
}

uint64_t sub_44878@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  double v24;
  double v25;
  double v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  double v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  char v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _OWORD v56[3];
  _OWORD v57[7];

  v53 = a2;
  v55 = a3;
  v4 = type metadata accessor for SizeConstants.Spacing(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v53 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_5440(&qword_2602B0);
  __chkstk_darwin(v7);
  v9 = (char *)&v53 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_5440(&qword_2602A0);
  __chkstk_darwin(v10);
  v12 = (char *)&v53 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_5440(&qword_260290);
  __chkstk_darwin(v13);
  v15 = (char *)&v53 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = sub_5440(&qword_260278);
  v16 = __chkstk_darwin(v54);
  v18 = (char *)&v53 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v9 = static HorizontalAlignment.center.getter(v16);
  *((_QWORD *)v9 + 1) = 0;
  v9[16] = 1;
  v19 = &v9[*(int *)(sub_5440(&qword_2602C0) + 44)];
  v20 = sub_5440(&qword_260258);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v19, a1, v20);
  type metadata accessor for ScrollingCardModifier(0);
  _s7BooksUI35ListItemEditionsDescriptorExternalsV7spacingAA13SizeConstantsV7SpacingVvg_0((uint64_t)v6);
  v21 = sub_224DC((uint64_t)v6, type metadata accessor for SizeConstants.Spacing);
  v22 = static Edge.Set.all.getter(v21);
  v23 = v22;
  v27 = EdgeInsets.init(_all:)(v22, 32.0, v24, v25, v26);
  v29 = v28;
  v31 = v30;
  v33 = v32;
  sub_B3D0((uint64_t)v9, (uint64_t)v12, &qword_2602B0);
  v34 = &v12[*(int *)(v10 + 36)];
  *v34 = v23;
  *((double *)v34 + 1) = v27;
  *((_QWORD *)v34 + 2) = v29;
  *((_QWORD *)v34 + 3) = v31;
  *((_QWORD *)v34 + 4) = v33;
  v34[40] = 0;
  v35 = sub_B414((uint64_t)v9, &qword_2602B0);
  v36 = GeometryProxy.size.getter(v35);
  v37 = _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0();
  _FrameLayout.init(width:height:alignment:)(v56, *(_QWORD *)&v36, 0, 0, 1, v37, v38);
  sub_B3D0((uint64_t)v12, (uint64_t)v15, &qword_2602A0);
  v39 = &v15[*(int *)(v13 + 36)];
  v40 = v56[1];
  *(_OWORD *)v39 = v56[0];
  *((_OWORD *)v39 + 1) = v40;
  *((_OWORD *)v39 + 2) = v56[2];
  v41 = sub_B414((uint64_t)v12, &qword_2602A0);
  GeometryProxy.size.getter(v41);
  v43 = v42;
  v44 = _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0();
  v52 = 1;
  v51 = 1;
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v57, 0, 1, 0, 1, 0, 1, v43, 0, 0, v51, 0, v52, v44, v45);
  sub_B3D0((uint64_t)v15, (uint64_t)v18, &qword_260290);
  v46 = &v18[*(int *)(v54 + 36)];
  v47 = v57[5];
  *((_OWORD *)v46 + 4) = v57[4];
  *((_OWORD *)v46 + 5) = v47;
  *((_OWORD *)v46 + 6) = v57[6];
  v48 = v57[1];
  *(_OWORD *)v46 = v57[0];
  *((_OWORD *)v46 + 1) = v48;
  v49 = v57[3];
  *((_OWORD *)v46 + 2) = v57[2];
  *((_OWORD *)v46 + 3) = v49;
  sub_B414((uint64_t)v15, &qword_260290);
  return sub_167A4((uint64_t)v18, v55, &qword_260278);
}

uint64_t sub_44C74()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;

  v1 = sub_5440(&qword_260258);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = type metadata accessor for ScrollingCardModifier(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v4 + v5 + v8) & ~v8;
  v10 = *(_QWORD *)(v7 + 64);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  v11 = (_QWORD *)(v0 + v9);
  v12 = sub_5440(&qword_25F1E8);
  if (swift_getEnumCaseMultiPayload(v0 + v9, v12) == 1)
  {
    v13 = type metadata accessor for ColorScheme(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v0 + v9, v13);
  }
  else
  {
    swift_release(*v11);
  }
  v14 = (_QWORD *)((char *)v11 + *(int *)(v6 + 20));
  v15 = sub_5440(&qword_25F200);
  if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
  {
    v16 = (char *)v14 + *(int *)(type metadata accessor for SizeConstants.Environment(0) + 24);
    v17 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(v16, v17);
  }
  else
  {
    swift_release(*v14);
  }
  return swift_deallocObject(v0, v9 + v10, v3 | v8 | 7);
}

uint64_t sub_44DC0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_QWORD *)(sub_5440(&qword_260258) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ScrollingCardModifier(0) - 8) + 80);
  return sub_44660(a1, v2 + v6, v2 + ((v6 + v7 + v8) & ~v8), a2);
}

uint64_t sub_44E3C(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 128);
  swift_retain(*(_QWORD *)(a1 + 8));
  swift_retain(v2);
  return a1;
}

uint64_t sub_44E70(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  swift_release(*(_QWORD *)(a1 + 128));
  swift_release(v2);
  return a1;
}

uint64_t sub_44EA4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_44878(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 32), a1);
}

uint64_t sub_44EB0()
{
  return sub_3CC54(&qword_260288, &qword_260290, (void (*)(void))sub_44ED4);
}

unint64_t sub_44ED4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_260298;
  if (!qword_260298)
  {
    v1 = sub_7EF8(&qword_2602A0);
    sub_7FD8(&qword_2602A8, &qword_2602B0, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_260298);
  }
  return result;
}

void sub_44F58(double *a1@<X8>)
{
  *a1 = EnvironmentValues.minimumScaleFactor.getter();
}

void sub_44F80(double *a1@<X8>)
{
  *a1 = EnvironmentValues.minimumScaleFactor.getter();
}

uint64_t sub_44FA8(double *a1)
{
  return EnvironmentValues.minimumScaleFactor.setter(*a1);
}

uint64_t sub_44FCC(double *a1)
{
  return EnvironmentValues.minimumScaleFactor.setter(*a1);
}

uint64_t sub_44FF0()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v1 = (int *)type metadata accessor for BulletPointStack(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = (_QWORD *)(v0 + v4);
  v7 = sub_5440(&qword_25F1F0);
  if (swift_getEnumCaseMultiPayload(v0 + v4, v7) == 1)
  {
    v8 = type metadata accessor for UserInterfaceSizeClass(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v0 + v4, 1, v8))
      (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v0 + v4, v8);
  }
  else
  {
    swift_release(*v6);
  }
  sub_BE0C(*(_QWORD *)((char *)v6 + v1[5]), *((_BYTE *)v6 + v1[5] + 8));
  v10 = (_QWORD *)((char *)v6 + v1[6]);
  v11 = sub_5440(&qword_25F208);
  if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
  {
    v12 = type metadata accessor for BlendMode(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v10, v12);
  }
  else
  {
    swift_release(*v10);
  }
  v13 = (_QWORD *)((char *)v6 + v1[7]);
  swift_bridgeObjectRelease(v13[1]);
  swift_bridgeObjectRelease(v13[3]);
  swift_bridgeObjectRelease(v13[4]);
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_45140(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for BulletPointStack(0) - 8) + 80);
  return sub_437BC(a1, v1 + ((v3 + 16) & ~v3));
}

uint64_t type metadata accessor for BulletPointStack.Bullet(uint64_t a1)
{
  return sub_1FE90(a1, qword_260420, (uint64_t)&nominal type descriptor for BulletPointStack.Bullet);
}

unint64_t sub_451A8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_260378;
  if (!qword_260378)
  {
    v1 = sub_7EF8(&qword_260380);
    sub_4522C();
    sub_7FD8((unint64_t *)&qword_25FD88, &qword_25FD90, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_260378);
  }
  return result;
}

unint64_t sub_4522C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_260388;
  if (!qword_260388)
  {
    v1 = sub_7EF8(&qword_260390);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_260388);
  }
  return result;
}

uint64_t *sub_452A0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v13 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v13 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain(v13);
  }
  else
  {
    v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    v6 = a2[3];
    a1[2] = a2[2];
    a1[3] = v6;
    v7 = a2[5];
    v8 = *(int *)(a3 + 28);
    v9 = (char *)a2 + v8;
    v10 = (char *)a1 + v8;
    a1[4] = a2[4];
    a1[5] = v7;
    v11 = type metadata accessor for UUID(0);
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain(v5);
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v7);
    v12(v10, v9, v11);
  }
  return v3;
}

uint64_t sub_45364(_QWORD *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;

  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[5]);
  v4 = (char *)a1 + *(int *)(a2 + 28);
  v5 = type metadata accessor for UUID(0);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

_QWORD *sub_453BC(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  v6 = a2[5];
  v7 = *(int *)(a3 + 28);
  v8 = (char *)a2 + v7;
  v9 = (char *)a1 + v7;
  a1[4] = a2[4];
  a1[5] = v6;
  v10 = type metadata accessor for UUID(0);
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  v11(v9, v8, v10);
  return a1;
}

_QWORD *sub_45454(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;

  *a1 = *a2;
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[2] = a2[2];
  v8 = a2[3];
  v9 = a1[3];
  a1[3] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  a1[4] = a2[4];
  v10 = a2[5];
  v11 = a1[5];
  a1[5] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  v12 = *(int *)(a3 + 28);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = type metadata accessor for UUID(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 24))(v13, v14, v15);
  return a1;
}

_OWORD *sub_45510(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  a1[2] = a2[2];
  v5 = *(int *)(a3 + 28);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = type metadata accessor for UUID(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

_QWORD *sub_45574(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;

  v6 = a2[1];
  v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = a2[3];
  v9 = a1[3];
  a1[2] = a2[2];
  a1[3] = v8;
  swift_bridgeObjectRelease(v9);
  v10 = a2[5];
  v11 = a1[5];
  a1[4] = a2[4];
  a1[5] = v10;
  swift_bridgeObjectRelease(v11);
  v12 = *(int *)(a3 + 28);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = type metadata accessor for UUID(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 40))(v13, v14, v15);
  return a1;
}

uint64_t sub_45600(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_4560C);
}

uint64_t sub_4560C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UUID(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 28), a2, v8);
  }
}

uint64_t sub_45688(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_45694);
}

uint64_t sub_45694(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 28), a2, a2, v7);
  }
  return result;
}

uint64_t sub_45708(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = &unk_1E3400;
  v4[1] = &unk_1E3400;
  v4[2] = &unk_1E3400;
  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 4, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t destroy for BulletPointStackViewModel(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  return swift_bridgeObjectRelease(a1[4]);
}

_QWORD *initializeWithCopy for BulletPointStackViewModel(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[4];
  a1[4] = v5;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

_QWORD *assignWithCopy for BulletPointStackViewModel(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  v6 = a2[3];
  v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = a2[4];
  v9 = a1[4];
  a1[4] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  return a1;
}

_QWORD *assignWithTake for BulletPointStackViewModel(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = a1[1];
  *a1 = *(_QWORD *)a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  a1[2] = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease(a1[3]);
  v6 = a1[4];
  *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease(v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for BulletPointStackViewModel(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for BulletPointStackViewModel(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for BulletPointStackViewModel()
{
  return &type metadata for BulletPointStackViewModel;
}

unint64_t sub_45980()
{
  unint64_t result;
  uint64_t v1;

  result = qword_260460;
  if (!qword_260460)
  {
    v1 = sub_7EF8(&qword_260260);
    sub_45A04();
    sub_7FD8(&qword_25F6F8, &qword_25F700, (uint64_t)&protocol conformance descriptor for _ClipEffect<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_260460);
  }
  return result;
}

unint64_t sub_45A04()
{
  unint64_t result;
  uint64_t v1;

  result = qword_260468;
  if (!qword_260468)
  {
    v1 = sub_7EF8(&qword_260470);
    sub_45A88();
    sub_7FD8(&qword_260498, &qword_2604A0, (uint64_t)&protocol conformance descriptor for _BackgroundStyleModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_260468);
  }
  return result;
}

unint64_t sub_45A88()
{
  unint64_t result;
  uint64_t v1;

  result = qword_260478;
  if (!qword_260478)
  {
    v1 = sub_7EF8(&qword_260480);
    sub_7FD8(&qword_260488, &qword_260490, (uint64_t)&protocol conformance descriptor for GeometryReader<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_260478);
  }
  return result;
}

unint64_t sub_45B10()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[4];

  result = qword_2604A8;
  if (!qword_2604A8)
  {
    v1 = sub_7EF8(&qword_2602E8);
    v2[0] = sub_7EF8(&qword_2602C8);
    v2[1] = sub_7EF8(&qword_25FE40);
    v2[2] = sub_7FD8(&qword_2602E0, &qword_2602C8, (uint64_t)&protocol conformance descriptor for VStack<A>);
    v2[3] = sub_7FD8(&qword_25FEA0, &qword_25FE40, (uint64_t)&protocol conformance descriptor for ClosedRange<A>);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.dynamicTypeSize<A>(_:)>>, 1);
    sub_7FD8(&qword_2604B0, &qword_2604B8, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_2604A8);
  }
  return result;
}

uint64_t sub_45C18()
{
  return sub_6FD0(qword_2604C0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
}

__n128 _CodeAnyIntentModel_OrNil.init(wrappedValue:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  if (*(_QWORD *)(a1 + 24))
  {
    sub_AC68((__int128 *)a1, a2);
  }
  else
  {
    result = *(__n128 *)a1;
    v3 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)a2 = *(_OWORD *)a1;
    *(_OWORD *)(a2 + 16) = v3;
    *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  }
  return result;
}

__n128 _CodeAnyIntentModel_OrNil.wrappedValue.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __n128 result;
  __int128 v3;

  if (*(_QWORD *)(v1 + 24))
  {
    sub_BD00(v1, a1);
  }
  else
  {
    result = *(__n128 *)v1;
    v3 = *(_OWORD *)(v1 + 16);
    *(_OWORD *)a1 = *(_OWORD *)v1;
    *(_OWORD *)(a1 + 16) = v3;
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(v1 + 32);
  }
  return result;
}

__n128 _CodeAnyIntentModel_OrNil.wrappedValue.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  __n128 result;
  __int128 v5;

  v3 = *(_QWORD *)(a1 + 24);
  if (*(_QWORD *)(v1 + 24))
  {
    _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)v1);
    if (v3)
    {
LABEL_3:
      sub_AC68((__int128 *)a1, v1);
      return result;
    }
  }
  else if (v3)
  {
    goto LABEL_3;
  }
  result = *(__n128 *)a1;
  v5 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)v1 = *(_OWORD *)a1;
  *(_OWORD *)(v1 + 16) = v5;
  *(_QWORD *)(v1 + 32) = *(_QWORD *)(a1 + 32);
  return result;
}

uint64_t _CodeAnyIntentModel_OrNil.description.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t ExtendedExistentialTypeMetadata;
  uint64_t v4;
  __int128 v5;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  _QWORD v11[5];

  if (!*(_QWORD *)(v1 + 24))
  {
    v5 = *(_OWORD *)(v1 + 16);
    v8 = *(_OWORD *)v1;
    v9 = v5;
    v10 = *(_QWORD *)(v1 + 32);
    if (*((_QWORD *)&v5 + 1))
      goto LABEL_3;
    return 7104878;
  }
  sub_BD00(v1, (uint64_t)&v8);
  if (!*((_QWORD *)&v9 + 1))
    return 7104878;
LABEL_3:
  sub_AC68(&v8, (uint64_t)v11);
  *(_QWORD *)&v8 = 0;
  *((_QWORD *)&v8 + 1) = 0xE000000000000000;
  v7 = *(_QWORD *)(a1 + 16);
  ExtendedExistentialTypeMetadata = swift_getExtendedExistentialTypeMetadata(&unk_1E3480, &v7);
  DefaultStringInterpolation.appendInterpolation<A>(_:)(v11, ExtendedExistentialTypeMetadata);
  v4 = v8;
  _s7BooksUI13AnyPagedFrameVwxx_0(v11);
  return v4;
}

double _CodeAnyIntentModel_OrNil.init(from:)@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t WitnessTable;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double result;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  _BYTE v18[40];
  _QWORD v19[5];
  __int128 v20;
  __int128 v21;
  uint64_t v22;

  *(_QWORD *)(a3 + 32) = 0;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  sub_BD00((uint64_t)a1, (uint64_t)v18);
  v9 = type metadata accessor for CodeAnyIntentModel(0, a2, v7, v8);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for CodeAnyIntentModel<A>, v9);
  Optional<A>.init(from:)(v19, v18, v9, WitnessTable);
  if (v3)
  {
    _s7BooksUI13AnyPagedFrameVwxx_0(a1);
    v13 = type metadata accessor for _CodeAnyIntentModel_OrNil(0, a2, v11, v12);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(a3, v13);
    return result;
  }
  _s7BooksUI13AnyPagedFrameVwxx_0(a1);
  if (v19[3])
  {
    sub_BD00((uint64_t)v19, (uint64_t)&v20);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v19, v9);
  }
  else
  {
    v15 = type metadata accessor for Optional(0, v9);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v19, v15);
    v20 = 0u;
    v21 = 0u;
    v22 = 0;
  }
  v16 = *((_QWORD *)&v21 + 1);
  if (*(_QWORD *)(a3 + 24))
  {
    _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)a3);
    if (v16)
    {
LABEL_8:
      sub_AC68(&v20, a3);
      return result;
    }
  }
  else if (*((_QWORD *)&v21 + 1))
  {
    goto LABEL_8;
  }
  result = *(double *)&v20;
  v17 = v21;
  *(_OWORD *)a3 = v20;
  *(_OWORD *)(a3 + 16) = v17;
  *(_QWORD *)(a3 + 32) = v22;
  return result;
}

uint64_t type metadata accessor for _CodeAnyIntentModel_OrNil(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10E40(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _CodeAnyIntentModel_OrNil);
}

double _CodeAnyIntentModel_OrNil.init(_partiallyFrom:)@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t WitnessTable;
  uint64_t v10;
  uint64_t v11;
  double result;
  __int128 v13;
  _QWORD v14[5];
  __int128 v15;
  __int128 v16;
  uint64_t v17;

  *(_QWORD *)(a3 + 32) = 0;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  sub_BD00((uint64_t)a1, (uint64_t)&v15);
  v8 = type metadata accessor for CodeAnyIntentModel(0, a2, v6, v7);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for CodeAnyIntentModel<A>, v8);
  Optional<A>.init(_partiallyFrom:)(v14, &v15, v8, WitnessTable);
  _s7BooksUI13AnyPagedFrameVwxx_0(a1);
  if (v14[3])
  {
    sub_BD00((uint64_t)v14, (uint64_t)&v15);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v14, v8);
  }
  else
  {
    v10 = type metadata accessor for Optional(0, v8);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v14, v10);
    v15 = 0u;
    v16 = 0u;
    v17 = 0;
  }
  v11 = *((_QWORD *)&v16 + 1);
  if (*(_QWORD *)(a3 + 24))
  {
    _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)a3);
    if (v11)
    {
LABEL_6:
      sub_AC68(&v15, a3);
      return result;
    }
  }
  else if (*((_QWORD *)&v16 + 1))
  {
    goto LABEL_6;
  }
  result = *(double *)&v15;
  v13 = v16;
  *(_OWORD *)a3 = v15;
  *(_OWORD *)(a3 + 16) = v13;
  *(_QWORD *)(a3 + 32) = v17;
  return result;
}

double sub_46054@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return _CodeAnyIntentModel_OrNil.init(from:)(a1, *(_QWORD *)(a2 + 16), a3);
}

double sub_4606C@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return _CodeAnyIntentModel_OrNil.init(_partiallyFrom:)(a1, *(_QWORD *)(a2 + 16), a3);
}

uint64_t ToolbarIconView.init(kind:)@<X0>(char *a1@<X0>, _QWORD *a2@<X8>)
{
  char v3;
  uint64_t v4;
  int *v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t result;

  v3 = *a1;
  *a2 = swift_getKeyPath(&unk_1E3590);
  v4 = sub_5440(&qword_25F1E8);
  swift_storeEnumTagMultiPayload(a2, v4, 0);
  v5 = (int *)type metadata accessor for ToolbarIconView(0);
  v6 = (_QWORD *)((char *)a2 + v5[5]);
  *v6 = swift_getKeyPath(&unk_1E35B8);
  v7 = sub_5440(&qword_25FAC8);
  swift_storeEnumTagMultiPayload(v6, v7, 0);
  v8 = (char *)a2 + v5[6];
  *(_QWORD *)v8 = swift_getKeyPath(&unk_1E35F0);
  v8[8] = 0;
  v9 = (_QWORD *)((char *)a2 + v5[7]);
  *v9 = swift_getKeyPath(&unk_1E3638);
  v10 = sub_5440(&qword_25E948);
  swift_storeEnumTagMultiPayload(v9, v10, 0);
  v11 = (_QWORD *)((char *)a2 + v5[8]);
  *v11 = swift_getKeyPath(&unk_1E3668);
  v12 = sub_5440(&qword_25F208);
  swift_storeEnumTagMultiPayload(v11, v12, 0);
  v13 = (char *)a2 + v5[9];
  *(_QWORD *)v13 = swift_getKeyPath(&unk_1E3690);
  v13[8] = 0;
  v14 = (char *)a2 + v5[10];
  *(_QWORD *)v14 = swift_getKeyPath(&unk_1E36B8);
  v14[8] = 0;
  v15 = (char *)a2 + v5[11];
  *(_QWORD *)v15 = swift_getKeyPath(&unk_1E36E0);
  v15[8] = 0;
  v16 = (char *)a2 + v5[12];
  result = swift_getKeyPath(&unk_1E3708);
  *(_QWORD *)v16 = result;
  v16[8] = 0;
  *((_BYTE *)a2 + v5[13]) = v3;
  return result;
}

uint64_t ToolbarIconView.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  unsigned int *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  __int128 v32;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _OWORD v42[3];

  v41 = a1;
  v2 = type metadata accessor for DynamicTypeSize(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = sub_5440(&qword_260548);
  __chkstk_darwin(v37);
  v7 = (uint64_t *)((char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = sub_5440(&qword_260550);
  v39 = *(_QWORD *)(v8 - 8);
  v40 = v8;
  __chkstk_darwin(v8);
  v36 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = sub_5440(&qword_260558);
  __chkstk_darwin(v38);
  v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  *v7 = _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0();
  v7[1] = v12;
  v13 = (uint64_t)v7 + *(int *)(sub_5440(&qword_260560) + 44);
  v35 = v1;
  sub_4651C(v1, v13);
  v14 = type metadata accessor for ToolbarIconView(0);
  v15 = v1 + *(int *)(v14 + 24);
  v16 = *(_QWORD *)v15;
  v17 = *(_BYTE *)(v15 + 8);
  sub_F9E4(*(_QWORD *)v15, v17);
  v18 = sub_30DB4(v16, v17);
  sub_BE0C(v16, v17);
  v19 = (unsigned int *)&enum case for DynamicTypeSize.large(_:);
  if ((v18 & 1) == 0)
    v19 = (unsigned int *)&enum case for DynamicTypeSize.medium(_:);
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, *v19, v2);
  v20 = sub_7FD8(&qword_260568, &qword_260548, (uint64_t)&protocol conformance descriptor for ZStack<A>);
  v21 = v36;
  View.dynamicTypeSize(_:)(v5, v37, v20);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  sub_B414((uint64_t)v7, &qword_260548);
  v22 = v35 + *(int *)(v14 + 36);
  v23 = *(_QWORD *)v22;
  v24 = *(_BYTE *)(v22 + 8);
  sub_F9E4(*(_QWORD *)v22, v24);
  sub_31AA8(v23, v24, v42);
  sub_BE0C(v23, v24);
  v25 = qword_1E3920[SLOBYTE(v42[0])];
  sub_F9E4(v23, v24);
  sub_31AA8(v23, v24, v42);
  sub_BE0C(v23, v24);
  v26 = qword_1E3920[SLOBYTE(v42[0])];
  v27 = _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0();
  _FrameLayout.init(width:height:alignment:)(v42, v25, 0, v26, 0, v27, v28);
  v30 = v39;
  v29 = v40;
  (*(void (**)(char *, char *, uint64_t))(v39 + 16))(v11, v21, v40);
  v31 = &v11[*(int *)(v38 + 36)];
  v32 = v42[1];
  *(_OWORD *)v31 = v42[0];
  *((_OWORD *)v31 + 1) = v32;
  *((_OWORD *)v31 + 2) = v42[2];
  (*(void (**)(char *, uint64_t))(v30 + 8))(v21, v29);
  return sub_167A4((uint64_t)v11, v41, &qword_260558);
}

uint64_t sub_4651C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(char *, uint64_t, uint64_t);
  unint64_t v56;
  char v57;
  void (*v58)(char *, uint64_t);
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t KeyPath;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD v78[2];
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;

  v92 = a2;
  v83 = type metadata accessor for BlendMode(0);
  v90 = *(_QWORD *)(v83 - 8);
  __chkstk_darwin(v83);
  v89 = (uint64_t)v78 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_5440(&qword_260650);
  __chkstk_darwin(v4);
  v88 = (uint64_t)v78 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v87 = sub_5440(&qword_260658);
  v6 = __chkstk_darwin(v87);
  v84 = (char *)v78 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v91 = (uint64_t)v78 - v8;
  v9 = type metadata accessor for ColorConstants.Environment(0);
  __chkstk_darwin(v9);
  v80 = (uint64_t)v78 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for ColorConstants(0);
  __chkstk_darwin(v11);
  v79 = (uint64_t)v78 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for ColorScheme(0);
  v93 = *(_QWORD *)(v13 - 8);
  v14 = __chkstk_darwin(v13);
  v16 = (char *)v78 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v82 = (uint64_t)v78 - v17;
  v18 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v18);
  v20 = (_OWORD *)((char *)v78 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  v21 = sub_5440(&qword_260660);
  __chkstk_darwin(v21);
  v23 = (char *)v78 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v81 = sub_5440(&qword_260668);
  v24 = __chkstk_darwin(v81);
  v86 = (uint64_t)v78 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = __chkstk_darwin(v24);
  v28 = (char *)v78 - v27;
  __chkstk_darwin(v26);
  v85 = (uint64_t)v78 - v29;
  v30 = (char *)v20 + *(int *)(v18 + 20);
  v31 = enum case for RoundedCornerStyle.continuous(_:);
  v32 = type metadata accessor for RoundedCornerStyle(0);
  v33 = v30;
  v34 = a1;
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 104))(v33, v31, v32);
  __asm { FMOV            V0.2D, #6.0 }
  *v20 = _Q0;
  v94 = type metadata accessor for ToolbarIconView(0);
  v40 = a1 + *(int *)(v94 + 40);
  v41 = *(_QWORD *)v40;
  v42 = *(_BYTE *)(v40 + 8);
  sub_F9E4(*(_QWORD *)v40, v42);
  LOBYTE(a1) = sub_30DB4(v41, v42);
  v43 = sub_BE0C(v41, v42);
  if ((a1 & 1) != 0)
  {
    v44 = sub_46BDC();
  }
  else
  {
    v95 = static Color.clear.getter(v43);
    v44 = AnyShapeStyle.init<A>(_:)(&v95, &type metadata for Color, &protocol witness table for Color);
  }
  v45 = v44;
  v46 = v34;
  sub_1E428((uint64_t)v20, (uint64_t)v23, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  *(_QWORD *)&v23[*(int *)(v21 + 52)] = v45;
  *(_WORD *)&v23[*(int *)(v21 + 56)] = 256;
  sub_224DC((uint64_t)v20, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  v47 = v34 + *(int *)(v94 + 44);
  v48 = *(_QWORD *)v47;
  v49 = *(_BYTE *)(v47 + 8);
  sub_F9E4(*(_QWORD *)v47, v49);
  v50 = sub_30DB4(v48, v49);
  sub_BE0C(v48, v49);
  if ((v50 & 1) != 0)
  {
    v78[0] = v28;
    v78[1] = v46;
    v51 = v79;
    _s7BooksUI18BuyButtonExternalsV6colorsAA14ColorConstantsVvg_0(v79);
    v52 = v80;
    sub_1E428(v51, v80, type metadata accessor for ColorConstants.Environment);
    v53 = enum case for ColorScheme.dark(_:);
    v54 = v93;
    v55 = *(void (**)(char *, uint64_t, uint64_t))(v93 + 104);
    v55(v16, enum case for ColorScheme.dark(_:), v13);
    v56 = sub_4928C();
    v57 = dispatch thunk of static Equatable.== infix(_:_:)(v52, v16, v13, v56);
    v58 = *(void (**)(char *, uint64_t))(v54 + 8);
    v58(v16, v13);
    v58((char *)v52, v13);
    sub_224DC(v51, type metadata accessor for ColorConstants);
    v60 = v82;
    v59 = v83;
    v61 = v81;
    if ((v57 & 1) != 0)
    {
      v62 = enum case for ColorScheme.light(_:);
      v63 = v82;
    }
    else
    {
      v63 = v82;
      v62 = v53;
    }
    v55((char *)v63, v62, v13);
    v28 = (char *)v78[0];
  }
  else
  {
    v60 = v82;
    sub_31378(v82);
    v59 = v83;
    v61 = v81;
  }
  KeyPath = swift_getKeyPath(&unk_1E3848);
  v65 = (uint64_t *)&v28[*(int *)(v61 + 36)];
  v66 = sub_5440(&qword_25EE58);
  v67 = v93;
  (*(void (**)(char *, uint64_t, uint64_t))(v93 + 16))((char *)v65 + *(int *)(v66 + 28), v60, v13);
  *v65 = KeyPath;
  sub_B3D0((uint64_t)v23, (uint64_t)v28, &qword_260660);
  (*(void (**)(uint64_t, uint64_t))(v67 + 8))(v60, v13);
  sub_B414((uint64_t)v23, &qword_260660);
  v68 = v85;
  sub_167A4((uint64_t)v28, v85, &qword_260668);
  v69 = v88;
  sub_46E28(v88);
  v70 = v89;
  sub_31660(v89);
  v71 = (uint64_t)v84;
  v72 = v90;
  (*(void (**)(char *, uint64_t, uint64_t))(v90 + 16))(&v84[*(int *)(v87 + 36)], v70, v59);
  sub_B3D0(v69, v71, &qword_260650);
  (*(void (**)(uint64_t, uint64_t))(v72 + 8))(v70, v59);
  sub_B414(v69, &qword_260650);
  v73 = v91;
  sub_167A4(v71, v91, &qword_260658);
  v74 = v86;
  sub_B3D0(v68, v86, &qword_260668);
  sub_B3D0(v73, v71, &qword_260658);
  v75 = v92;
  sub_B3D0(v74, v92, &qword_260668);
  v76 = sub_5440(&qword_260670);
  sub_B3D0(v71, v75 + *(int *)(v76 + 48), &qword_260658);
  sub_B414(v73, &qword_260658);
  sub_B414(v68, &qword_260668);
  sub_B414(v71, &qword_260658);
  return sub_B414(v74, &qword_260668);
}

uint64_t sub_46BDC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  uint64_t v17;
  void *v18;
  uint64_t *v19;
  void *v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  void (*v24)(char *, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;

  v1 = type metadata accessor for ColorScheme(0);
  v30 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v3 = (char *)&v30 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for ColorConstants.Environment(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for ColorConstants(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Material(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = v0 + *(int *)(type metadata accessor for ToolbarIconView(0) + 44);
  v14 = *(_QWORD *)v13;
  v15 = *(_BYTE *)(v13 + 8);
  sub_F9E4(*(_QWORD *)v13, v15);
  v16 = sub_30DB4(v14, v15);
  v17 = sub_BE0C(v14, v15);
  if ((v16 & 1) != 0)
  {
    static Material.ultraThin.getter(v17);
    v18 = &protocol witness table for Material;
    v19 = (uint64_t *)v12;
    v20 = (void *)v10;
  }
  else
  {
    _s7BooksUI18BuyButtonExternalsV6colorsAA14ColorConstantsVvg_0((uint64_t)v9);
    sub_1E428((uint64_t)v9, (uint64_t)v6, type metadata accessor for ColorConstants.Environment);
    v21 = v30;
    (*(void (**)(char *, _QWORD, uint64_t))(v30 + 104))(v3, enum case for ColorScheme.dark(_:), v1);
    v22 = sub_4928C();
    v23 = dispatch thunk of static Equatable.== infix(_:_:)(v6, v3, v1, v22);
    v24 = *(void (**)(char *, uint64_t))(v21 + 8);
    v24(v3, v1);
    v24(v6, v1);
    v25 = sub_224DC((uint64_t)v9, type metadata accessor for ColorConstants);
    if ((v23 & 1) != 0)
      v26 = _s7BooksUI14ColorConstantsV25vibrantPrimaryButtonLabel05SwiftB00C0Vvg_0();
    else
      v26 = static Color.black.getter(v25);
    v27 = v26;
    v28 = Color.opacity(_:)(0.06);
    swift_release(v27);
    v31 = v28;
    v20 = &type metadata for Color;
    v18 = &protocol witness table for Color;
    v19 = &v31;
  }
  return AnyShapeStyle.init<A>(_:)(v19, v20, v18);
}

uint64_t sub_46E28@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  uint64_t KeyPath;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v45 = a1;
  v2 = sub_5440(&qword_25FE08);
  __chkstk_darwin(v2);
  v4 = (char *)&v42 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = type metadata accessor for Font.TextStyle(0);
  v42 = *(_QWORD *)(v44 - 8);
  __chkstk_darwin(v44);
  v6 = (char *)&v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for SymbolImage(0);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v42 - v11;
  v13 = sub_5440(&qword_260678);
  __chkstk_darwin(v13);
  v15 = (char *)&v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = sub_5440(&qword_260680);
  __chkstk_darwin(v43);
  v17 = (char *)&v42 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = *(_BYTE *)(v1 + *(int *)(type metadata accessor for ToolbarIconView(0) + 52));
  v19 = &v10[*(int *)(v7 + 20)];
  *v19 = swift_getKeyPath(&unk_1E3878);
  v20 = sub_5440(&qword_25FAD8);
  swift_storeEnumTagMultiPayload(v19, v20, 0);
  *v10 = v18;
  sub_492DC((uint64_t)v10, (uint64_t)v12);
  v21 = sub_47174();
  sub_1E428((uint64_t)v12, (uint64_t)v15, type metadata accessor for SymbolImage);
  *(_QWORD *)&v15[*(int *)(v13 + 36)] = v21;
  sub_224DC((uint64_t)v12, type metadata accessor for SymbolImage);
  v22 = v42;
  v23 = v44;
  (*(void (**)(char *, _QWORD, uint64_t))(v42 + 104))(v6, enum case for Font.TextStyle.body(_:), v44);
  v24 = type metadata accessor for Font.Design(0);
  v25 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v4, 1, 1, v24);
  v26 = static Font.Weight.medium.getter(v25);
  v27 = static Font.system(_:design:weight:)(v6, v4, *(_QWORD *)&v26, 0);
  sub_B414((uint64_t)v4, &qword_25FE08);
  (*(void (**)(char *, uint64_t))(v22 + 8))(v6, v23);
  KeyPath = swift_getKeyPath(&unk_1E38A0);
  sub_B3D0((uint64_t)v15, (uint64_t)v17, &qword_260678);
  v29 = (uint64_t *)&v17[*(int *)(v43 + 36)];
  *v29 = KeyPath;
  v29[1] = v27;
  sub_B414((uint64_t)v15, &qword_260678);
  sub_472E0();
  v31 = v30;
  v33 = v32;
  v35 = v34;
  v37 = v36;
  LOBYTE(v27) = static Edge.Set.all.getter(v38);
  v39 = v45;
  sub_B3D0((uint64_t)v17, v45, &qword_260680);
  v40 = v39 + *(int *)(sub_5440(&qword_260650) + 36);
  *(_BYTE *)v40 = v27;
  *(_QWORD *)(v40 + 8) = v31;
  *(_QWORD *)(v40 + 16) = v33;
  *(_QWORD *)(v40 + 24) = v35;
  *(_QWORD *)(v40 + 32) = v37;
  *(_BYTE *)(v40 + 40) = 0;
  return sub_B414((uint64_t)v17, &qword_260680);
}

uint64_t sub_47174()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v1 = type metadata accessor for ColorConstants(0);
  __chkstk_darwin(v1);
  v3 = (char *)&v16 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for ToolbarIconView(0);
  v5 = v0 + *(int *)(v4 + 48);
  v6 = *(_QWORD *)v5;
  v7 = *(_BYTE *)(v5 + 8);
  sub_F9E4(*(_QWORD *)v5, v7);
  v8 = sub_31ABC(v6, v7);
  sub_BE0C(v6, v7);
  v9 = v0 + *(int *)(v4 + 44);
  v10 = *(_QWORD *)v9;
  v11 = *(_BYTE *)(v9 + 8);
  sub_F9E4(*(_QWORD *)v9, v11);
  v12 = sub_30DB4(v10, v11);
  sub_BE0C(v10, v11);
  if ((v8 & 1) != 0)
  {
    _s7BooksUI18BuyButtonExternalsV6colorsAA14ColorConstantsVvg_0((uint64_t)v3);
    v13 = _s7BooksUI14ColorConstantsV19booksSecondaryLabel05SwiftB00C0Vvg_0();
    if ((v12 & 1) != 0)
    {
      v14 = Color.opacity(_:)(0.8);
      swift_release(v13);
      sub_224DC((uint64_t)v3, type metadata accessor for ColorConstants);
      return v14;
    }
LABEL_6:
    sub_224DC((uint64_t)v3, type metadata accessor for ColorConstants);
    return v13;
  }
  if ((v12 & 1) != 0)
  {
    _s7BooksUI18BuyButtonExternalsV6colorsAA14ColorConstantsVvg_0((uint64_t)v3);
    v13 = _s7BooksUI14ColorConstantsV14vibrantPrimary05SwiftB00C0Vvg_0();
    goto LABEL_6;
  }
  return _s7BooksUI14ColorConstantsV14vibrantPrimary05SwiftB00C0Vvg_0();
}

void sub_472E0()
{
  uint64_t v0;
  char *v1;

  v1 = (char *)&loc_47334
     + *((int *)qword_47578 + *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for ToolbarIconView(0) + 52)));
  __asm { BR              X9 }
}

uint64_t sub_47344()
{
  char v1;
  uint64_t result;

  v1 = _stringCompareWithSmolCheck(_:_:expecting:)(0x72616D6B63656863, 0xE90000000000006BLL, 0xD000000000000013, 0x80000000001F9710, 0);
  result = swift_bridgeObjectRelease(0xE90000000000006BLL);
  if ((v1 & 1) != 0)
    __asm { BR              X10 }
  return result;
}

uint64_t sub_475BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8;

  v8 = sub_47AE4();
  return static EnvironmentKey<>._valuesEqual(_:_:)(a1, a2, a3, a4, v8);
}

_QWORD *sub_4760C@<X0>(_QWORD *a1@<X8>)
{
  unint64_t v2;

  v2 = sub_4936C();
  return EnvironmentValues.subscript.getter(a1, &type metadata for ToolbarIconSizeKey, &type metadata for ToolbarIconSizeKey, v2);
}

uint64_t View.toolbarIconButton(size:)(char *a1, uint64_t a2, uint64_t a3)
{
  char v5;
  uint64_t KeyPath;
  char v8;

  v5 = *a1;
  KeyPath = swift_getKeyPath(&unk_1E3690);
  v8 = v5;
  View.environment<A>(_:_:)(KeyPath, &v8, a2, a3);
  return swift_release(KeyPath);
}

uint64_t sub_476B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v9;

  v4 = type metadata accessor for EnvironmentValues(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(_BYTE *, uint64_t))(v7 + 16))(v6, a1);
  return sub_1C6928(v6, a2);
}

uint64_t type metadata accessor for ToolbarIconView(uint64_t a1)
{
  uint64_t result;

  result = qword_2605D8;
  if (!qword_2605D8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ToolbarIconView);
  return result;
}

_QWORD *sub_47774@<X0>(_BYTE *a1@<X8>)
{
  unint64_t v2;
  _QWORD *result;
  uint64_t v4;

  v2 = sub_49328();
  result = EnvironmentValues.subscript.getter(&v4, &type metadata for IsHoveringKey, &type metadata for IsHoveringKey, v2);
  *a1 = v4;
  return result;
}

uint64_t sub_477C0(char *a1)
{
  unint64_t v1;
  char v3;

  v3 = *a1;
  v1 = sub_49328();
  return EnvironmentValues.subscript.setter(&v3, &type metadata for IsHoveringKey, &type metadata for IsHoveringKey, v1);
}

uint64_t sub_47808()
{
  return EnvironmentValues.dynamicTypeSize.getter();
}

uint64_t sub_47828(uint64_t a1)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v6;

  type metadata accessor for DynamicTypeSize(0);
  __chkstk_darwin();
  v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v4 + 16))(v3, a1);
  return EnvironmentValues.dynamicTypeSize.setter(v3);
}

uint64_t sub_478A4@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = DynamicTypeSize.isAccessibilitySize.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_478D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1E428(a1, a2, type metadata accessor for FontConstants.Environment);
}

uint64_t sub_478F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1E428(a1, a2, type metadata accessor for FontConstants.Environment);
}

uint64_t sub_47910()
{
  return EnvironmentValues.dynamicTypeSize.getter();
}

uint64_t sub_47934@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = DynamicTypeSize.isAccessibilitySize.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_47968@<X0>(uint64_t a1@<X8>)
{
  return EnvironmentValues.defaultBlendModeConsideringVibrancy.getter(a1);
}

uint64_t sub_47988@<X0>(uint64_t a1@<X8>)
{
  return EnvironmentValues.defaultBlendModeConsideringVibrancy.getter(a1);
}

_QWORD *sub_479A8@<X0>(_BYTE *a1@<X8>)
{
  unint64_t v2;
  _QWORD *result;
  uint64_t v4;

  v2 = sub_4936C();
  result = EnvironmentValues.subscript.getter(&v4, &type metadata for ToolbarIconSizeKey, &type metadata for ToolbarIconSizeKey, v2);
  *a1 = v4;
  return result;
}

uint64_t sub_479F4(char *a1)
{
  unint64_t v1;
  char v3;

  v3 = *a1;
  v1 = sub_4936C();
  return EnvironmentValues.subscript.setter(&v3, &type metadata for ToolbarIconSizeKey, &type metadata for ToolbarIconSizeKey, v1);
}

_QWORD *sub_47A3C@<X0>(_BYTE *a1@<X8>)
{
  unint64_t v2;
  _QWORD *result;
  uint64_t v4;

  v2 = sub_49328();
  result = EnvironmentValues.subscript.getter(&v4, &type metadata for IsHoveringKey, &type metadata for IsHoveringKey, v2);
  *a1 = v4;
  return result;
}

uint64_t sub_47A88(char *a1)
{
  unint64_t v1;
  char v3;

  v3 = *a1;
  v1 = sub_49328();
  return EnvironmentValues.subscript.setter(&v3, &type metadata for IsHoveringKey, &type metadata for IsHoveringKey, v1);
}

void sub_47AD8(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

unint64_t sub_47AE4()
{
  unint64_t result;

  result = qword_260570;
  if (!qword_260570)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ToolbarIconView.Size, &type metadata for ToolbarIconView.Size);
    atomic_store(result, (unint64_t *)&qword_260570);
  }
  return result;
}

uint64_t sub_47B28(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &opaque type descriptor for <<opaque return type of ToolbarIconView.body>>, 1);
}

_QWORD *initializeBufferWithCopyOfBuffer for ToolbarIconView(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _WORD *v15;
  _WORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  char v65;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = sub_5440(&qword_25F1E8);
    if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
    {
      v8 = type metadata accessor for ColorScheme(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      v9 = a1;
      v10 = v7;
      v11 = 1;
    }
    else
    {
      v13 = *a2;
      *a1 = *a2;
      swift_retain(v13);
      v9 = a1;
      v10 = v7;
      v11 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v10, v11);
    v14 = a3[5];
    v15 = (_WORD *)((char *)a1 + v14);
    v16 = (_WORD *)((char *)a2 + v14);
    v17 = sub_5440(&qword_25FAC8);
    if (swift_getEnumCaseMultiPayload(v16, v17) == 1)
    {
      *v15 = *v16;
      v18 = type metadata accessor for FontConstants.Environment(0);
      v19 = *(int *)(v18 + 24);
      v20 = (char *)v15 + v19;
      v21 = (char *)v16 + v19;
      v22 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v20, v21, v22);
      *(_QWORD *)((char *)v15 + *(int *)(v18 + 28)) = *(_QWORD *)((char *)v16 + *(int *)(v18 + 28));
      v23 = 1;
    }
    else
    {
      v24 = *(_QWORD *)v16;
      *(_QWORD *)v15 = *(_QWORD *)v16;
      swift_retain(v24);
      v23 = 0;
    }
    swift_storeEnumTagMultiPayload(v15, v17, v23);
    v25 = a3[6];
    v26 = (char *)a1 + v25;
    v27 = (char *)a2 + v25;
    v28 = *(_QWORD *)v27;
    v29 = v27[8];
    sub_F9E4(*(_QWORD *)v27, v29);
    *(_QWORD *)v26 = v28;
    v26[8] = v29;
    v30 = a3[7];
    v31 = (_QWORD *)((char *)a1 + v30);
    v32 = (_QWORD *)((char *)a2 + v30);
    v33 = sub_5440(&qword_25E948);
    if (swift_getEnumCaseMultiPayload(v32, v33) == 1)
    {
      v34 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v34 - 8) + 16))(v31, v32, v34);
      v35 = 1;
    }
    else
    {
      v36 = *v32;
      *v31 = *v32;
      swift_retain(v36);
      v35 = 0;
    }
    swift_storeEnumTagMultiPayload(v31, v33, v35);
    v37 = a3[8];
    v38 = (_QWORD *)((char *)a1 + v37);
    v39 = (_QWORD *)((char *)a2 + v37);
    v40 = sub_5440(&qword_25F208);
    if (swift_getEnumCaseMultiPayload(v39, v40) == 1)
    {
      v41 = type metadata accessor for BlendMode(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v41 - 8) + 16))(v38, v39, v41);
      v42 = v38;
      v43 = v40;
      v44 = 1;
    }
    else
    {
      v45 = *v39;
      *v38 = *v39;
      swift_retain(v45);
      v42 = v38;
      v43 = v40;
      v44 = 0;
    }
    swift_storeEnumTagMultiPayload(v42, v43, v44);
    v46 = a3[9];
    v47 = (char *)a1 + v46;
    v48 = (char *)a2 + v46;
    v49 = *(_QWORD *)v48;
    v50 = v48[8];
    sub_F9E4(*(_QWORD *)v48, v50);
    *(_QWORD *)v47 = v49;
    v47[8] = v50;
    v51 = a3[10];
    v52 = (char *)a1 + v51;
    v53 = (char *)a2 + v51;
    v54 = *(_QWORD *)v53;
    v55 = v53[8];
    sub_F9E4(*(_QWORD *)v53, v55);
    *(_QWORD *)v52 = v54;
    v52[8] = v55;
    v56 = a3[11];
    v57 = (char *)a1 + v56;
    v58 = (char *)a2 + v56;
    v59 = *(_QWORD *)v58;
    v60 = v58[8];
    sub_F9E4(*(_QWORD *)v58, v60);
    *(_QWORD *)v57 = v59;
    v57[8] = v60;
    v61 = a3[12];
    v62 = (char *)a1 + v61;
    v63 = (char *)a2 + v61;
    v64 = *(_QWORD *)v63;
    v65 = v63[8];
    sub_F9E4(*(_QWORD *)v63, v65);
    *(_QWORD *)v62 = v64;
    v62[8] = v65;
    *((_BYTE *)a1 + a3[13]) = *((_BYTE *)a2 + a3[13]);
  }
  return a1;
}

uint64_t destroy for ToolbarIconView(_QWORD *a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;

  v4 = sub_5440(&qword_25F1E8);
  if (swift_getEnumCaseMultiPayload(a1, v4) == 1)
  {
    v5 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  }
  else
  {
    swift_release(*a1);
  }
  v6 = (_QWORD *)((char *)a1 + a2[5]);
  v7 = sub_5440(&qword_25FAC8);
  if (swift_getEnumCaseMultiPayload(v6, v7) == 1)
  {
    v8 = (char *)v6 + *(int *)(type metadata accessor for FontConstants.Environment(0) + 24);
    v9 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  }
  else
  {
    swift_release(*v6);
  }
  sub_BE0C(*(_QWORD *)((char *)a1 + a2[6]), *((_BYTE *)a1 + a2[6] + 8));
  v10 = (_QWORD *)((char *)a1 + a2[7]);
  v11 = sub_5440(&qword_25E948);
  if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
  {
    v12 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v10, v12);
  }
  else
  {
    swift_release(*v10);
  }
  v13 = (_QWORD *)((char *)a1 + a2[8]);
  v14 = sub_5440(&qword_25F208);
  if (swift_getEnumCaseMultiPayload(v13, v14) == 1)
  {
    v15 = type metadata accessor for BlendMode(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v13, v15);
  }
  else
  {
    swift_release(*v13);
  }
  sub_BE0C(*(_QWORD *)((char *)a1 + a2[9]), *((_BYTE *)a1 + a2[9] + 8));
  sub_BE0C(*(_QWORD *)((char *)a1 + a2[10]), *((_BYTE *)a1 + a2[10] + 8));
  sub_BE0C(*(_QWORD *)((char *)a1 + a2[11]), *((_BYTE *)a1 + a2[11] + 8));
  return sub_BE0C(*(_QWORD *)((char *)a1 + a2[12]), *((_BYTE *)a1 + a2[12] + 8));
}

_QWORD *initializeWithCopy for ToolbarIconView(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _WORD *v13;
  _WORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  char v63;

  v6 = sub_5440(&qword_25F1E8);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a1;
    v9 = v6;
    v10 = 1;
  }
  else
  {
    v11 = *a2;
    *a1 = *a2;
    swift_retain(v11);
    v8 = a1;
    v9 = v6;
    v10 = 0;
  }
  swift_storeEnumTagMultiPayload(v8, v9, v10);
  v12 = a3[5];
  v13 = (_WORD *)((char *)a1 + v12);
  v14 = (_WORD *)((char *)a2 + v12);
  v15 = sub_5440(&qword_25FAC8);
  if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
  {
    *v13 = *v14;
    v16 = type metadata accessor for FontConstants.Environment(0);
    v17 = *(int *)(v16 + 24);
    v18 = (char *)v13 + v17;
    v19 = (char *)v14 + v17;
    v20 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v18, v19, v20);
    *(_QWORD *)((char *)v13 + *(int *)(v16 + 28)) = *(_QWORD *)((char *)v14 + *(int *)(v16 + 28));
    v21 = 1;
  }
  else
  {
    v22 = *(_QWORD *)v14;
    *(_QWORD *)v13 = *(_QWORD *)v14;
    swift_retain(v22);
    v21 = 0;
  }
  swift_storeEnumTagMultiPayload(v13, v15, v21);
  v23 = a3[6];
  v24 = (char *)a1 + v23;
  v25 = (char *)a2 + v23;
  v26 = *(_QWORD *)v25;
  v27 = v25[8];
  sub_F9E4(*(_QWORD *)v25, v27);
  *(_QWORD *)v24 = v26;
  v24[8] = v27;
  v28 = a3[7];
  v29 = (_QWORD *)((char *)a1 + v28);
  v30 = (_QWORD *)((char *)a2 + v28);
  v31 = sub_5440(&qword_25E948);
  if (swift_getEnumCaseMultiPayload(v30, v31) == 1)
  {
    v32 = type metadata accessor for ColorScheme(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v32 - 8) + 16))(v29, v30, v32);
    v33 = 1;
  }
  else
  {
    v34 = *v30;
    *v29 = *v30;
    swift_retain(v34);
    v33 = 0;
  }
  swift_storeEnumTagMultiPayload(v29, v31, v33);
  v35 = a3[8];
  v36 = (_QWORD *)((char *)a1 + v35);
  v37 = (_QWORD *)((char *)a2 + v35);
  v38 = sub_5440(&qword_25F208);
  if (swift_getEnumCaseMultiPayload(v37, v38) == 1)
  {
    v39 = type metadata accessor for BlendMode(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v39 - 8) + 16))(v36, v37, v39);
    v40 = v36;
    v41 = v38;
    v42 = 1;
  }
  else
  {
    v43 = *v37;
    *v36 = *v37;
    swift_retain(v43);
    v40 = v36;
    v41 = v38;
    v42 = 0;
  }
  swift_storeEnumTagMultiPayload(v40, v41, v42);
  v44 = a3[9];
  v45 = (char *)a1 + v44;
  v46 = (char *)a2 + v44;
  v47 = *(_QWORD *)v46;
  v48 = v46[8];
  sub_F9E4(*(_QWORD *)v46, v48);
  *(_QWORD *)v45 = v47;
  v45[8] = v48;
  v49 = a3[10];
  v50 = (char *)a1 + v49;
  v51 = (char *)a2 + v49;
  v52 = *(_QWORD *)v51;
  v53 = v51[8];
  sub_F9E4(*(_QWORD *)v51, v53);
  *(_QWORD *)v50 = v52;
  v50[8] = v53;
  v54 = a3[11];
  v55 = (char *)a1 + v54;
  v56 = (char *)a2 + v54;
  v57 = *(_QWORD *)v56;
  v58 = v56[8];
  sub_F9E4(*(_QWORD *)v56, v58);
  *(_QWORD *)v55 = v57;
  v55[8] = v58;
  v59 = a3[12];
  v60 = (char *)a1 + v59;
  v61 = (char *)a2 + v59;
  v62 = *(_QWORD *)v61;
  v63 = v61[8];
  sub_F9E4(*(_QWORD *)v61, v63);
  *(_QWORD *)v60 = v62;
  v60[8] = v63;
  *((_BYTE *)a1 + a3[13]) = *((_BYTE *)a2 + a3[13]);
  return a1;
}

_QWORD *assignWithCopy for ToolbarIconView(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  char v73;

  if (a1 != a2)
  {
    sub_B414((uint64_t)a1, &qword_25F1E8);
    v6 = sub_5440(&qword_25F1E8);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for ColorScheme(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = v6;
      v10 = 1;
    }
    else
    {
      v11 = *a2;
      *a1 = *a2;
      swift_retain(v11);
      v8 = a1;
      v9 = v6;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
    v12 = a3[5];
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    sub_B414((uint64_t)a1 + v12, &qword_25FAC8);
    v15 = sub_5440(&qword_25FAC8);
    if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
    {
      *v13 = *v14;
      v13[1] = v14[1];
      v16 = type metadata accessor for FontConstants.Environment(0);
      v17 = *(int *)(v16 + 24);
      v18 = &v13[v17];
      v19 = &v14[v17];
      v20 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v18, v19, v20);
      *(_QWORD *)&v13[*(int *)(v16 + 28)] = *(_QWORD *)&v14[*(int *)(v16 + 28)];
      v21 = 1;
    }
    else
    {
      v22 = *(_QWORD *)v14;
      *(_QWORD *)v13 = *(_QWORD *)v14;
      swift_retain(v22);
      v21 = 0;
    }
    swift_storeEnumTagMultiPayload(v13, v15, v21);
  }
  v23 = a3[6];
  v24 = (char *)a1 + v23;
  v25 = (char *)a2 + v23;
  v26 = *(_QWORD *)v25;
  v27 = v25[8];
  sub_F9E4(*(_QWORD *)v25, v27);
  v28 = *(_QWORD *)v24;
  v29 = v24[8];
  *(_QWORD *)v24 = v26;
  v24[8] = v27;
  sub_BE0C(v28, v29);
  if (a1 != a2)
  {
    v30 = a3[7];
    v31 = (_QWORD *)((char *)a1 + v30);
    v32 = (_QWORD *)((char *)a2 + v30);
    sub_B414((uint64_t)a1 + v30, &qword_25E948);
    v33 = sub_5440(&qword_25E948);
    if (swift_getEnumCaseMultiPayload(v32, v33) == 1)
    {
      v34 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v34 - 8) + 16))(v31, v32, v34);
      v35 = 1;
    }
    else
    {
      v36 = *v32;
      *v31 = *v32;
      swift_retain(v36);
      v35 = 0;
    }
    swift_storeEnumTagMultiPayload(v31, v33, v35);
    v37 = a3[8];
    v38 = (_QWORD *)((char *)a1 + v37);
    v39 = (_QWORD *)((char *)a2 + v37);
    sub_B414((uint64_t)a1 + v37, &qword_25F208);
    v40 = sub_5440(&qword_25F208);
    if (swift_getEnumCaseMultiPayload(v39, v40) == 1)
    {
      v41 = type metadata accessor for BlendMode(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v41 - 8) + 16))(v38, v39, v41);
      v42 = v38;
      v43 = v40;
      v44 = 1;
    }
    else
    {
      v45 = *v39;
      *v38 = *v39;
      swift_retain(v45);
      v42 = v38;
      v43 = v40;
      v44 = 0;
    }
    swift_storeEnumTagMultiPayload(v42, v43, v44);
  }
  v46 = a3[9];
  v47 = (char *)a1 + v46;
  v48 = (char *)a2 + v46;
  v49 = *(_QWORD *)v48;
  v50 = v48[8];
  sub_F9E4(*(_QWORD *)v48, v50);
  v51 = *(_QWORD *)v47;
  v52 = v47[8];
  *(_QWORD *)v47 = v49;
  v47[8] = v50;
  sub_BE0C(v51, v52);
  v53 = a3[10];
  v54 = (char *)a1 + v53;
  v55 = (char *)a2 + v53;
  v56 = *(_QWORD *)v55;
  v57 = v55[8];
  sub_F9E4(*(_QWORD *)v55, v57);
  v58 = *(_QWORD *)v54;
  v59 = v54[8];
  *(_QWORD *)v54 = v56;
  v54[8] = v57;
  sub_BE0C(v58, v59);
  v60 = a3[11];
  v61 = (char *)a1 + v60;
  v62 = (char *)a2 + v60;
  v63 = *(_QWORD *)v62;
  v64 = v62[8];
  sub_F9E4(*(_QWORD *)v62, v64);
  v65 = *(_QWORD *)v61;
  v66 = v61[8];
  *(_QWORD *)v61 = v63;
  v61[8] = v64;
  sub_BE0C(v65, v66);
  v67 = a3[12];
  v68 = (char *)a1 + v67;
  v69 = (char *)a2 + v67;
  v70 = *(_QWORD *)v69;
  v71 = v69[8];
  sub_F9E4(*(_QWORD *)v69, v71);
  v72 = *(_QWORD *)v68;
  v73 = v68[8];
  *(_QWORD *)v68 = v70;
  v68[8] = v71;
  sub_BE0C(v72, v73);
  *((_BYTE *)a1 + a3[13]) = *((_BYTE *)a2 + a3[13]);
  return a1;
}

char *initializeWithTake for ToolbarIconView(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  char *v41;

  v6 = sub_5440(&qword_25F1E8);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for ColorScheme(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v8 = a3[5];
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = sub_5440(&qword_25FAC8);
  if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
  {
    *(_WORD *)v9 = *(_WORD *)v10;
    v12 = type metadata accessor for FontConstants.Environment(0);
    v13 = *(int *)(v12 + 24);
    v14 = &v9[v13];
    v15 = &v10[v13];
    v16 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v14, v15, v16);
    *(_QWORD *)&v9[*(int *)(v12 + 28)] = *(_QWORD *)&v10[*(int *)(v12 + 28)];
    swift_storeEnumTagMultiPayload(v9, v11, 1);
  }
  else
  {
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  v17 = a3[6];
  v18 = a3[7];
  v19 = &a1[v17];
  v20 = &a2[v17];
  *(_QWORD *)v19 = *(_QWORD *)v20;
  v19[8] = v20[8];
  v21 = &a1[v18];
  v22 = &a2[v18];
  v23 = sub_5440(&qword_25E948);
  if (swift_getEnumCaseMultiPayload(v22, v23) == 1)
  {
    v24 = type metadata accessor for ColorScheme(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 32))(v21, v22, v24);
    swift_storeEnumTagMultiPayload(v21, v23, 1);
  }
  else
  {
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
  }
  v25 = a3[8];
  v26 = &a1[v25];
  v27 = &a2[v25];
  v28 = sub_5440(&qword_25F208);
  if (swift_getEnumCaseMultiPayload(v27, v28) == 1)
  {
    v29 = type metadata accessor for BlendMode(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v29 - 8) + 32))(v26, v27, v29);
    swift_storeEnumTagMultiPayload(v26, v28, 1);
  }
  else
  {
    memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
  }
  v30 = a3[9];
  v31 = a3[10];
  v32 = &a1[v30];
  v33 = &a2[v30];
  *(_QWORD *)v32 = *(_QWORD *)v33;
  v32[8] = v33[8];
  v34 = &a1[v31];
  v35 = &a2[v31];
  *(_QWORD *)v34 = *(_QWORD *)v35;
  v34[8] = v35[8];
  v36 = a3[11];
  v37 = a3[12];
  v38 = &a1[v36];
  v39 = &a2[v36];
  *(_QWORD *)v38 = *(_QWORD *)v39;
  v38[8] = v39[8];
  v40 = &a1[v37];
  v41 = &a2[v37];
  v40[8] = v41[8];
  *(_QWORD *)v40 = *(_QWORD *)v41;
  a1[a3[13]] = a2[a3[13]];
  return a1;
}

char *assignWithTake for ToolbarIconView(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char v56;

  if (a1 != a2)
  {
    sub_B414((uint64_t)a1, &qword_25F1E8);
    v6 = sub_5440(&qword_25F1E8);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for ColorScheme(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
    v8 = a3[5];
    v9 = &a1[v8];
    v10 = &a2[v8];
    sub_B414((uint64_t)&a1[v8], &qword_25FAC8);
    v11 = sub_5440(&qword_25FAC8);
    if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
    {
      *(_WORD *)v9 = *(_WORD *)v10;
      v12 = type metadata accessor for FontConstants.Environment(0);
      v13 = *(int *)(v12 + 24);
      v14 = &v9[v13];
      v15 = &v10[v13];
      v16 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v14, v15, v16);
      *(_QWORD *)&v9[*(int *)(v12 + 28)] = *(_QWORD *)&v10[*(int *)(v12 + 28)];
      swift_storeEnumTagMultiPayload(v9, v11, 1);
    }
    else
    {
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    }
  }
  v17 = a3[6];
  v18 = &a1[v17];
  v19 = &a2[v17];
  v20 = *(_QWORD *)v19;
  LOBYTE(v19) = v19[8];
  v21 = *(_QWORD *)v18;
  v22 = v18[8];
  *(_QWORD *)v18 = v20;
  v18[8] = (char)v19;
  sub_BE0C(v21, v22);
  if (a1 != a2)
  {
    v23 = a3[7];
    v24 = &a1[v23];
    v25 = &a2[v23];
    sub_B414((uint64_t)&a1[v23], &qword_25E948);
    v26 = sub_5440(&qword_25E948);
    if (swift_getEnumCaseMultiPayload(v25, v26) == 1)
    {
      v27 = type metadata accessor for ColorScheme(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 32))(v24, v25, v27);
      swift_storeEnumTagMultiPayload(v24, v26, 1);
    }
    else
    {
      memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    }
    v28 = a3[8];
    v29 = &a1[v28];
    v30 = &a2[v28];
    sub_B414((uint64_t)&a1[v28], &qword_25F208);
    v31 = sub_5440(&qword_25F208);
    if (swift_getEnumCaseMultiPayload(v30, v31) == 1)
    {
      v32 = type metadata accessor for BlendMode(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v32 - 8) + 32))(v29, v30, v32);
      swift_storeEnumTagMultiPayload(v29, v31, 1);
    }
    else
    {
      memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
    }
  }
  v33 = a3[9];
  v34 = &a1[v33];
  v35 = &a2[v33];
  v36 = *(_QWORD *)v35;
  LOBYTE(v35) = v35[8];
  v37 = *(_QWORD *)v34;
  v38 = v34[8];
  *(_QWORD *)v34 = v36;
  v34[8] = (char)v35;
  sub_BE0C(v37, v38);
  v39 = a3[10];
  v40 = &a1[v39];
  v41 = &a2[v39];
  v42 = *(_QWORD *)v41;
  LOBYTE(v41) = v41[8];
  v43 = *(_QWORD *)v40;
  v44 = v40[8];
  *(_QWORD *)v40 = v42;
  v40[8] = (char)v41;
  sub_BE0C(v43, v44);
  v45 = a3[11];
  v46 = &a1[v45];
  v47 = &a2[v45];
  v48 = *(_QWORD *)v47;
  LOBYTE(v47) = v47[8];
  v49 = *(_QWORD *)v46;
  v50 = v46[8];
  *(_QWORD *)v46 = v48;
  v46[8] = (char)v47;
  sub_BE0C(v49, v50);
  v51 = a3[12];
  v52 = &a1[v51];
  v53 = &a2[v51];
  v54 = *(_QWORD *)v53;
  LOBYTE(v53) = v53[8];
  v55 = *(_QWORD *)v52;
  v56 = v52[8];
  *(_QWORD *)v52 = v54;
  v52[8] = (char)v53;
  sub_BE0C(v55, v56);
  a1[a3[13]] = a2[a3[13]];
  return a1;
}

uint64_t getEnumTagSinglePayload for ToolbarIconView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_48D68);
}

uint64_t sub_48D68(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;

  v6 = sub_5440(&qword_25F210);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = sub_5440(&qword_260578);
  v10 = *(_QWORD *)(v9 - 8);
  if (*(_DWORD *)(v10 + 84) == (_DWORD)a2)
  {
    v11 = v9;
    v12 = a3[5];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1 + v12, a2, v11);
  }
  if ((_DWORD)a2 != 254)
  {
    v14 = sub_5440(&qword_25EAE8);
    v10 = *(_QWORD *)(v14 - 8);
    if (*(_DWORD *)(v10 + 84) == (_DWORD)a2)
    {
      v11 = v14;
      v12 = a3[7];
    }
    else
    {
      v11 = sub_5440(&qword_25F228);
      v10 = *(_QWORD *)(v11 - 8);
      v12 = a3[8];
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1 + v12, a2, v11);
  }
  v13 = *(unsigned __int8 *)(a1 + a3[6] + 8);
  if (v13 > 1)
    return (v13 ^ 0xFF) + 1;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for ToolbarIconView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_48E70);
}

uint64_t sub_48E70(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = sub_5440(&qword_25F210);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    result = sub_5440(&qword_260578);
    v14 = *(_QWORD *)(result - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = result;
      v15 = a4[5];
    }
    else
    {
      if (a3 == 254)
      {
        *(_BYTE *)(a1 + a4[6] + 8) = -(char)a2;
        return result;
      }
      v16 = sub_5440(&qword_25EAE8);
      v14 = *(_QWORD *)(v16 - 8);
      if (*(_DWORD *)(v14 + 84) == a3)
      {
        v10 = v16;
        v15 = a4[7];
      }
      else
      {
        v10 = sub_5440(&qword_25F228);
        v14 = *(_QWORD *)(v10 - 8);
        v15 = a4[8];
      }
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_48F6C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD v10[10];

  sub_2ADCC(319, (unint64_t *)&qword_25F298, type metadata accessor for ColorConstants);
  if (v3 <= 0x3F)
  {
    v10[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_2ADCC(319, (unint64_t *)&unk_2605E8, type metadata accessor for FontConstants.Navigation);
    if (v5 <= 0x3F)
    {
      v10[1] = *(_QWORD *)(v4 - 8) + 64;
      v10[2] = "\t";
      sub_2ADCC(319, (unint64_t *)&qword_25EB58, (uint64_t (*)(uint64_t))&type metadata accessor for ColorScheme);
      if (v7 <= 0x3F)
      {
        v10[3] = *(_QWORD *)(v6 - 8) + 64;
        sub_2ADCC(319, (unint64_t *)&qword_25F2B0, (uint64_t (*)(uint64_t))&type metadata accessor for BlendMode);
        if (v9 <= 0x3F)
        {
          v10[4] = *(_QWORD *)(v8 - 8) + 64;
          v10[5] = "\t";
          v10[6] = "\t";
          v10[7] = "\t";
          v10[8] = "\t";
          v10[9] = &unk_1E3818;
          swift_initStructMetadata(a1, 256, 10, v10, a1 + 16);
        }
      }
    }
  }
}

uint64_t storeEnumTagSinglePayload for ToolbarIconView.Size(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_490CC + 4 * byte_1E3585[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_49100 + 4 * byte_1E3580[v4]))();
}

uint64_t sub_49100(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_49108(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x49110);
  return result;
}

uint64_t sub_4911C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x49124);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_49128(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_49130(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ToolbarIconView.Size()
{
  return &type metadata for ToolbarIconView.Size;
}

unint64_t sub_49150()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_260638;
  if (!qword_260638)
  {
    v1 = sub_7EF8(&qword_260558);
    v2[0] = sub_7EF8(&qword_260548);
    v2[1] = sub_7FD8(&qword_260568, &qword_260548, (uint64_t)&protocol conformance descriptor for ZStack<A>);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.dynamicTypeSize(_:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_260638);
  }
  return result;
}

uint64_t sub_49204(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *a1;
  v2 = sub_7EF8(&qword_260640);
  v3 = type metadata accessor for ModifiedContent(255, v1, v2);
  sub_7FD8(&qword_260648, &qword_260640, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
  return swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v3);
}

unint64_t sub_4928C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25FD60;
  if (!qword_25FD60)
  {
    v1 = type metadata accessor for ColorScheme(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for ColorScheme, v1);
    atomic_store(result, (unint64_t *)&qword_25FD60);
  }
  return result;
}

uint64_t sub_492DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SymbolImage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_49328()
{
  unint64_t result;

  result = qword_260688;
  if (!qword_260688)
  {
    result = swift_getWitnessTable(&unk_1F701C, &type metadata for IsHoveringKey);
    atomic_store(result, (unint64_t *)&qword_260688);
  }
  return result;
}

unint64_t sub_4936C()
{
  unint64_t result;

  result = qword_260690;
  if (!qword_260690)
  {
    result = swift_getWitnessTable(&unk_1E38E4, &type metadata for ToolbarIconSizeKey);
    atomic_store(result, (unint64_t *)&qword_260690);
  }
  return result;
}

ValueMetadata *type metadata accessor for ToolbarIconSizeKey()
{
  return &type metadata for ToolbarIconSizeKey;
}

uint64_t BookCoverEffect.init(shadowScale:cornerRadius:)@<X0>(double *a1@<X8>, double a2@<D0>, double a3@<D1>)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t result;

  v6 = (_QWORD *)((char *)a1 + *(int *)(type metadata accessor for BookCoverEffect(0) + 24));
  *v6 = swift_getKeyPath(&unk_1E3A20);
  v7 = sub_5440(&qword_25E948);
  result = swift_storeEnumTagMultiPayload(v6, v7, 0);
  *a1 = a2;
  a1[1] = a3;
  return result;
}

uint64_t type metadata accessor for BookCoverEffect(uint64_t a1)
{
  uint64_t result;

  result = qword_260740;
  if (!qword_260740)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for BookCoverEffect);
  return result;
}

uint64_t BookCoverEffect.body(cover:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t (*v13)(_QWORD);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;

  v3 = v2;
  v6 = sub_5440(&qword_260698);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  __chkstk_darwin(v6);
  v9 = type metadata accessor for BookCoverEffect(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  __chkstk_darwin(v9);
  v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1E428(v3, (uint64_t)v12, v13);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v6);
  v14 = *(unsigned __int8 *)(v10 + 80);
  v15 = (v14 + 16) & ~v14;
  v16 = *(unsigned __int8 *)(v7 + 80);
  v17 = (v11 + v16 + v15) & ~v16;
  v18 = swift_allocObject(&unk_24CED8, v17 + v8, v14 | v16 | 7);
  sub_496E4((uint64_t)v12, v18 + v15);
  result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v7 + 32))(v18 + v17, (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  *a2 = sub_49728;
  a2[1] = v18;
  return result;
}

uint64_t sub_495B4@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  double v10;
  double v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD *v17;
  __int128 v18;
  _OWORD v20[3];

  v6 = sub_5440(&qword_260798);
  v7 = __chkstk_darwin(v6);
  v9 = (uint64_t *)((char *)v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = GeometryProxy.size.getter(v7);
  v12 = v11;
  *v9 = _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0();
  v9[1] = v13;
  v14 = sub_5440(&qword_2607A0);
  sub_4972C(a1, a2, (uint64_t)v9 + *(int *)(v14 + 44), v10, v12);
  v15 = _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0();
  _FrameLayout.init(width:height:alignment:)(v20, *(_QWORD *)&v10, 0, *(_QWORD *)&v12, 0, v15, v16);
  sub_B3D0((uint64_t)v9, a3, &qword_260798);
  v17 = (_OWORD *)(a3 + *(int *)(sub_5440(&qword_2607A8) + 36));
  v18 = v20[1];
  *v17 = v20[0];
  v17[1] = v18;
  v17[2] = v20[2];
  return sub_B414((uint64_t)v9, &qword_260798);
}

uint64_t sub_496E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for BookCoverEffect(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_4972C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>)
{
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;

  v39 = a3;
  v9 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v9);
  v11 = (uint64_t *)((char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = sub_5440(&qword_2607B0);
  __chkstk_darwin(v12);
  v14 = (char *)&v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_5440(&qword_2607B8);
  v16 = __chkstk_darwin(v15);
  v18 = (char *)&v38 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v20 = (char *)&v38 - v19;
  v21 = sub_5440(&qword_2607C0);
  v22 = __chkstk_darwin(v21);
  v24 = (char *)&v38 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = __chkstk_darwin(v22);
  v27 = (uint64_t *)((char *)&v38 - v26);
  *v27 = static Alignment.bottom.getter(v25);
  v27[1] = v28;
  v29 = sub_5440(&qword_2607C8);
  sub_49A34(a1, a2, (uint64_t)v27 + *(int *)(v29 + 44), a4, a5);
  sub_4A5DC(a2, a1, (uint64_t)v14, a4, a5);
  v30 = *(_QWORD *)(a1 + 8);
  v31 = (char *)v11 + *(int *)(v9 + 20);
  v32 = enum case for RoundedCornerStyle.continuous(_:);
  v33 = type metadata accessor for RoundedCornerStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 104))(v31, v32, v33);
  *v11 = v30;
  v11[1] = v30;
  v34 = (uint64_t)&v18[*(int *)(v15 + 36)];
  sub_1E428((uint64_t)v11, v34, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  *(_WORD *)(v34 + *(int *)(sub_5440(&qword_25F700) + 36)) = 256;
  sub_B3D0((uint64_t)v14, (uint64_t)v18, &qword_2607B0);
  sub_224DC((uint64_t)v11, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  sub_B414((uint64_t)v14, &qword_2607B0);
  sub_167A4((uint64_t)v18, (uint64_t)v20, &qword_2607B8);
  sub_B3D0((uint64_t)v27, (uint64_t)v24, &qword_2607C0);
  sub_B3D0((uint64_t)v20, (uint64_t)v18, &qword_2607B8);
  v35 = v39;
  sub_B3D0((uint64_t)v24, v39, &qword_2607C0);
  v36 = sub_5440(&qword_2607D0);
  sub_B3D0((uint64_t)v18, v35 + *(int *)(v36 + 48), &qword_2607B8);
  sub_B414((uint64_t)v20, &qword_2607B8);
  sub_B414((uint64_t)v27, &qword_2607C0);
  sub_B414((uint64_t)v18, &qword_2607B8);
  return sub_B414((uint64_t)v24, &qword_2607C0);
}

uint64_t sub_49A34@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  double v45;
  double v46;
  double v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  __int128 v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  void (*v58)(char *, uint64_t);
  double v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _OWORD *v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  double v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void (*v88)(char *);
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t (*v92)(char *, uint64_t, uint64_t);
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unsigned int v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  _OWORD v123[3];
  _OWORD v124[3];

  v107 = a2;
  v121 = a3;
  v8 = type metadata accessor for BlendMode(0);
  v119 = *(_QWORD *)(v8 - 8);
  v120 = v8;
  __chkstk_darwin(v8);
  v118 = (char *)&v88 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v105 = sub_5440(&qword_260820);
  __chkstk_darwin(v105);
  v103 = (char *)&v88 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v106 = sub_5440(&qword_260838);
  __chkstk_darwin(v106);
  v104 = (char *)&v88 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v116 = sub_5440(&qword_260840);
  __chkstk_darwin(v116);
  v111 = (uint64_t)&v88 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v114 = sub_5440(&qword_260848);
  __chkstk_darwin(v114);
  v110 = (uint64_t)&v88 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v113 = sub_5440(&qword_260850);
  __chkstk_darwin(v113);
  v109 = (uint64_t)&v88 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v112 = sub_5440(&qword_260858);
  v15 = __chkstk_darwin(v112);
  v117 = (uint64_t)&v88 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v15);
  v108 = (char *)&v88 - v18;
  __chkstk_darwin(v17);
  v115 = (uint64_t)&v88 - v19;
  v101 = type metadata accessor for ColorScheme(0);
  v100 = *(_QWORD *)(v101 - 8);
  v20 = __chkstk_darwin(v101);
  v99 = (char *)&v88 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v98 = (uint64_t)&v88 - v22;
  v23 = type metadata accessor for RoundedRectangle(0);
  v97 = v23;
  __chkstk_darwin(v23);
  v25 = (char *)&v88 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = sub_5440(&qword_260860);
  __chkstk_darwin(v26);
  v28 = (char *)&v88 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = sub_5440(&qword_260868);
  __chkstk_darwin(v29);
  v31 = (char *)&v88 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v89 = sub_5440(&qword_260870);
  __chkstk_darwin(v89);
  v33 = (char *)&v88 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v94 = sub_5440(&qword_260878);
  __chkstk_darwin(v94);
  v91 = (uint64_t)&v88 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v93 = sub_5440(&qword_260880);
  v35 = __chkstk_darwin(v93);
  v102 = (uint64_t)&v88 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = __chkstk_darwin(v35);
  v90 = (uint64_t)&v88 - v38;
  __chkstk_darwin(v37);
  v122 = (uint64_t)&v88 - v39;
  v40 = *(_QWORD *)(a1 + 8);
  v41 = &v25[*(int *)(v23 + 20)];
  v42 = enum case for RoundedCornerStyle.continuous(_:);
  v96 = enum case for RoundedCornerStyle.continuous(_:);
  v95 = type metadata accessor for RoundedCornerStyle(0);
  v92 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v95 - 8) + 104);
  v43 = v92(v41, v42, v95);
  *(_QWORD *)v25 = v40;
  *((_QWORD *)v25 + 1) = v40;
  v44 = static Color.black.getter(v43);
  sub_1E428((uint64_t)v25, (uint64_t)v28, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  *(_QWORD *)&v28[*(int *)(v26 + 52)] = v44;
  *(_WORD *)&v28[*(int *)(v26 + 56)] = 256;
  sub_224DC((uint64_t)v25, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  v45 = *(double *)a1;
  v46 = *(double *)a1 * a4;
  v47 = *(double *)a1 * a5;
  v48 = _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0();
  _FrameLayout.init(width:height:alignment:)(v123, *(_QWORD *)&v46, 0, *(_QWORD *)&v47, 0, v48, v49);
  sub_B3D0((uint64_t)v28, (uint64_t)v31, &qword_260860);
  v50 = &v31[*(int *)(v29 + 36)];
  v51 = v123[1];
  *(_OWORD *)v50 = v123[0];
  *((_OWORD *)v50 + 1) = v51;
  *((_OWORD *)v50 + 2) = v123[2];
  sub_B414((uint64_t)v28, &qword_260860);
  sub_B3D0((uint64_t)v31, (uint64_t)v33, &qword_260868);
  v52 = &v33[*(int *)(v89 + 36)];
  *(_QWORD *)v52 = 0;
  *((double *)v52 + 1) = (1.0 - v45) * a5 * -0.25;
  sub_B414((uint64_t)v31, &qword_260868);
  type metadata accessor for BookCoverEffect(0);
  v53 = a1;
  v54 = v98;
  sub_31378(v98);
  LODWORD(v89) = enum case for ColorScheme.dark(_:);
  v55 = v100;
  v88 = *(void (**)(char *))(v100 + 104);
  v56 = v99;
  v57 = v101;
  v88(v99);
  LOBYTE(v46) = static ColorScheme.== infix(_:_:)(v54, v56);
  v58 = *(void (**)(char *, uint64_t))(v55 + 8);
  v58(v56, v57);
  v58((char *)v54, v57);
  if ((LOBYTE(v46) & 1) != 0)
    v59 = 0.9;
  else
    v59 = 0.75;
  v60 = v91;
  sub_B3D0((uint64_t)v33, v91, &qword_260870);
  *(double *)(v60 + *(int *)(v94 + 36)) = v59;
  sub_B414((uint64_t)v33, &qword_260870);
  v61 = v90;
  sub_B3D0(v60, v90, &qword_260878);
  v62 = v61 + *(int *)(v93 + 36);
  *(double *)v62 = a4 * 0.1;
  *(_BYTE *)(v62 + 8) = 0;
  sub_B414(v60, &qword_260878);
  sub_167A4(v61, v122, &qword_260880);
  v63 = _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0();
  _FrameLayout.init(width:height:alignment:)(v124, *(_QWORD *)&a4, 0, *(_QWORD *)&a5, 0, v63, v64);
  v65 = sub_5440(&qword_260698);
  v66 = (uint64_t)v103;
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v65 - 8) + 16))(v103, v107, v65);
  v67 = (_OWORD *)(v66 + *(int *)(v105 + 36));
  v68 = v124[1];
  *v67 = v124[0];
  v67[1] = v68;
  v67[2] = v124[2];
  v69 = *(_QWORD *)(v53 + 8);
  v92(&v25[*(int *)(v97 + 20)], v96, v95);
  *(_QWORD *)v25 = v69;
  *((_QWORD *)v25 + 1) = v69;
  v70 = (uint64_t)v104;
  v71 = (uint64_t)&v104[*(int *)(v106 + 36)];
  sub_1E428((uint64_t)v25, v71, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  *(_WORD *)(v71 + *(int *)(sub_5440(&qword_25F700) + 36)) = 256;
  sub_B3D0(v66, v70, &qword_260820);
  sub_224DC((uint64_t)v25, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  sub_B414(v66, &qword_260820);
  sub_31378(v54);
  ((void (*)(char *, _QWORD, uint64_t))v88)(v56, v89, v57);
  LOBYTE(v71) = static ColorScheme.== infix(_:_:)(v54, v56);
  v58(v56, v57);
  v58((char *)v54, v57);
  if ((v71 & 1) != 0)
    v72 = 0.15;
  else
    v72 = 0.5;
  v73 = v111;
  sub_B3D0(v70, v111, &qword_260838);
  *(double *)(v73 + *(int *)(v116 + 36)) = v72;
  sub_B414(v70, &qword_260838);
  v74 = v110;
  sub_B3D0(v73, v110, &qword_260840);
  v75 = v74 + *(int *)(v114 + 36);
  *(double *)v75 = a4 * 0.1;
  *(_BYTE *)(v75 + 8) = 0;
  sub_B414(v73, &qword_260840);
  v76 = v109;
  sub_B3D0(v74, v109, &qword_260848);
  *(_QWORD *)(v76 + *(int *)(v113 + 36)) = 0x3FF199999999999ALL;
  sub_B414(v74, &qword_260848);
  v78 = v118;
  v77 = v119;
  v79 = v120;
  (*(void (**)(char *, _QWORD, uint64_t))(v119 + 104))(v118, enum case for BlendMode.color(_:), v120);
  v80 = (uint64_t)v108;
  (*(void (**)(char *, char *, uint64_t))(v77 + 16))(&v108[*(int *)(v112 + 36)], v78, v79);
  sub_B3D0(v76, v80, &qword_260850);
  (*(void (**)(char *, uint64_t))(v77 + 8))(v78, v79);
  sub_B414(v76, &qword_260850);
  v81 = v115;
  sub_167A4(v80, v115, &qword_260858);
  v82 = v122;
  v83 = v102;
  sub_B3D0(v122, v102, &qword_260880);
  v84 = v117;
  sub_B3D0(v81, v117, &qword_260858);
  v85 = v121;
  sub_B3D0(v83, v121, &qword_260880);
  v86 = sub_5440(qword_260888);
  sub_B3D0(v84, v85 + *(int *)(v86 + 48), &qword_260858);
  sub_B414(v81, &qword_260858);
  sub_B414(v82, &qword_260880);
  sub_B414(v84, &qword_260858);
  return sub_B414(v83, &qword_260880);
}

uint64_t AudiobookCoverEffect.shape.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v3 = *(_QWORD *)(v1 + 8);
  v4 = (char *)a1 + *(int *)(type metadata accessor for RoundedRectangle(0) + 20);
  v5 = enum case for RoundedCornerStyle.continuous(_:);
  v6 = type metadata accessor for RoundedCornerStyle(0);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 104))(v4, v5, v6);
  *a1 = v3;
  a1[1] = v3;
  return result;
}

uint64_t sub_4A5BC(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &opaque type descriptor for <<opaque return type of BookCoverEffect.body(cover:)>>, 1);
}

uint64_t sub_4A5CC(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &opaque type descriptor for <<opaque return type of BookCoverEffect.shape>>, 1);
}

uint64_t sub_4A5DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  double v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(char *, uint64_t, uint64_t);
  char *v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  double v93;
  double v94;
  double v95;
  double v96;
  double v97;
  double v98;
  double v99;
  uint64_t v100;
  uint64_t v101;
  unsigned __int8 v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  double v113;
  double v114;
  double v115;
  double v116;
  double v117;
  double v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  double v165;
  double v166;
  double v167;
  double v168;
  double v169;
  double v170;
  double v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  double v191;
  double v192;
  double v193;
  double v194;
  double v195;
  double v196;
  uint64_t v197;
  char *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  double v216;
  double v217;
  double v218;
  double v219;
  double v220;
  double v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  char *v232;
  char *v233;
  uint64_t v234;
  uint64_t v235;
  char *v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  _QWORD *v241;
  char *v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  _OWORD *v247;
  __int128 v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  double v253;
  double v254;
  char *v255;
  __n128 v256;
  uint64_t *v257;
  char *v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  char *v262;
  uint64_t v263;
  uint64_t v264;
  char *v265;
  void (*v266)(char *, uint64_t);
  uint64_t v267;
  float v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  _OWORD *v279;
  __int128 v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  __n128 v284;
  uint64_t *v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  int *v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  __int128 v310;
  __int128 v311;
  __int128 v312;
  __int128 v313;
  __int128 v314;
  uint64_t v316;
  uint64_t v317;
  void (*v318)(char *, char *, uint64_t);
  double v319;
  char *v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  double v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  char *v334;
  uint64_t v335;
  uint64_t v336;
  char *v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t *v340;
  char *v341;
  char *v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  char *v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  char *v352;
  uint64_t v353;
  char *v354;
  uint64_t v355;
  uint64_t *v356;
  uint64_t v357;
  __int128 v358;
  char *v359;
  char *v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  int v364;
  int v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  char *v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  double v383;
  void (*v384)(char *, _QWORD, uint64_t);
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  __int128 v388;
  __int128 v389;
  __int128 v390;
  __int128 v391;
  __int128 v392;
  __int128 v393;
  __int128 v394;
  __int128 v395;
  __int128 v396;
  char v397;
  uint64_t v398[6];
  char v399;
  _BYTE v400[7];
  uint64_t v401;
  char v402;
  _BYTE v403[7];
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  char v413;
  _OWORD v414[3];
  _QWORD v415[5];
  uint64_t v416;
  unsigned __int8 v417;
  uint64_t v418;
  unsigned __int8 v419;
  uint64_t v420;
  uint64_t v421;
  _QWORD v422[5];
  _QWORD v423[5];
  uint64_t v424;
  char v425;
  uint64_t v426;
  char v427;
  void (*v428)(char *, char *, uint64_t);
  uint64_t v429;
  uint64_t v430;
  __int128 v431;
  __int128 v432;
  _QWORD v433[5];
  uint64_t v434;
  char v435;
  uint64_t v436;
  char v437;
  uint64_t v438;
  uint64_t v439;
  _OWORD v440[3];
  _OWORD v441[3];
  _BYTE v442[7];
  char v443;
  _BYTE v444[7];
  unsigned __int8 v445;
  _DWORD v446[2];
  _DWORD v447[2];
  __int128 v448;
  __int128 v449;
  __int128 v450;
  __int128 v451;
  __int128 v452;
  __int128 v453;
  __int128 v454;
  _OWORD v455[3];

  v373 = a2;
  v329 = a4;
  v357 = a3;
  v8 = type metadata accessor for ColorScheme(0);
  v349 = *(_QWORD *)(v8 - 8);
  v350 = v8;
  v9 = __chkstk_darwin(v8);
  v348 = (char *)&v316 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v346 = (uint64_t)&v316 - v11;
  v375 = type metadata accessor for ShadowStyle(0);
  v344 = *(_QWORD *)(v375 - 8);
  __chkstk_darwin(v375);
  v341 = (char *)&v316 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v382 = sub_5440(&qword_2607D8);
  v13 = __chkstk_darwin(v382);
  v356 = (uint64_t *)((char *)&v316 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v13);
  v340 = (uint64_t *)((char *)&v316 - v15);
  v345 = sub_5440(&qword_2607E0);
  v16 = __chkstk_darwin(v345);
  v355 = (uint64_t)&v316 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v343 = (uint64_t)&v316 - v18;
  v376 = sub_5440(&qword_2607E8);
  v19 = __chkstk_darwin(v376);
  v354 = (char *)&v316 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v342 = (char *)&v316 - v21;
  v377 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v377);
  v334 = (char *)&v316 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v378 = sub_5440(&qword_2607F0);
  v23 = __chkstk_darwin(v378);
  v347 = (uint64_t)&v316 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  v335 = (uint64_t)&v316 - v25;
  v338 = sub_5440(&qword_2607F8);
  v26 = __chkstk_darwin(v338);
  v352 = (char *)&v316 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  v337 = (char *)&v316 - v28;
  v339 = sub_5440(&qword_260800);
  v29 = __chkstk_darwin(v339);
  v353 = (uint64_t)&v316 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = __chkstk_darwin(v29);
  v351 = (uint64_t)&v316 - v32;
  v33 = __chkstk_darwin(v31);
  v380 = (uint64_t)&v316 - v34;
  v35 = __chkstk_darwin(v33);
  v336 = (uint64_t)&v316 - v36;
  __chkstk_darwin(v35);
  v381 = (uint64_t)&v316 - v37;
  v328 = sub_5440(&qword_260808);
  v38 = __chkstk_darwin(v328);
  v362 = (uint64_t)&v316 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v38);
  v386 = (uint64_t)&v316 - v40;
  v41 = type metadata accessor for _BlendModeEffect(0);
  __chkstk_darwin(v41);
  v360 = (char *)&v316 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  v387 = type metadata accessor for BlendMode(0);
  v322 = *(_QWORD *)(v387 - 8);
  __chkstk_darwin(v387);
  v359 = (char *)&v316 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  v321 = sub_5440(&qword_260810);
  __chkstk_darwin(v321);
  v320 = (char *)&v316 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  v323 = sub_5440(&qword_260818);
  v45 = __chkstk_darwin(v323);
  v361 = (uint64_t)&v316 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v45);
  v385 = (uint64_t)&v316 - v47;
  v48 = sub_5440(&qword_260820);
  v49 = __chkstk_darwin(v48);
  v374 = (uint64_t)&v316 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v49);
  v52 = (char *)&v316 - v51;
  v53 = a5;
  v54 = _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0();
  _FrameLayout.init(width:height:alignment:)(v414, *(_QWORD *)&a4, 0, *(_QWORD *)&a5, 0, v54, v55);
  v56 = sub_5440(&qword_260698);
  v57 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v56 - 8) + 16);
  v379 = v52;
  v57(v52, a1, v56);
  v58 = &v52[*(int *)(v48 + 36)];
  v59 = v414[1];
  *(_OWORD *)v58 = v414[0];
  *((_OWORD *)v58 + 1) = v59;
  *((_OWORD *)v58 + 2) = v414[2];
  v60 = sub_5440(&qword_260828);
  v61 = swift_allocObject(v60, 192, 7);
  *(_OWORD *)(v61 + 16) = xmmword_1E3A00;
  v62 = _s7BooksUI14ColorConstantsV25vibrantPrimaryButtonLabel05SwiftB00C0Vvg_0();
  v63 = Color.opacity(_:)(0.0);
  swift_release(v62);
  *(_QWORD *)(v61 + 32) = Gradient.Stop.init(color:location:)(v63, 0.0);
  *(_QWORD *)(v61 + 40) = v64;
  v65 = _s7BooksUI14ColorConstantsV25vibrantPrimaryButtonLabel05SwiftB00C0Vvg_0();
  v66 = Color.opacity(_:)(0.0);
  swift_release(v65);
  *(_QWORD *)(v61 + 48) = Gradient.Stop.init(color:location:)(v66, 0.008);
  *(_QWORD *)(v61 + 56) = v67;
  v68 = _s7BooksUI14ColorConstantsV25vibrantPrimaryButtonLabel05SwiftB00C0Vvg_0();
  v69 = Color.opacity(_:)(0.25);
  swift_release(v68);
  *(_QWORD *)(v61 + 64) = Gradient.Stop.init(color:location:)(v69, 0.014);
  *(_QWORD *)(v61 + 72) = v70;
  v71 = _s7BooksUI14ColorConstantsV25vibrantPrimaryButtonLabel05SwiftB00C0Vvg_0();
  v72 = Color.opacity(_:)(0.0);
  swift_release(v71);
  *(_QWORD *)(v61 + 80) = Gradient.Stop.init(color:location:)(v72, 0.02);
  *(_QWORD *)(v61 + 88) = v73;
  v74 = _s7BooksUI14ColorConstantsV25vibrantPrimaryButtonLabel05SwiftB00C0Vvg_0();
  v75 = Color.opacity(_:)(0.12);
  swift_release(v74);
  *(_QWORD *)(v61 + 96) = Gradient.Stop.init(color:location:)(v75, 0.026);
  *(_QWORD *)(v61 + 104) = v76;
  v77 = _s7BooksUI14ColorConstantsV25vibrantPrimaryButtonLabel05SwiftB00C0Vvg_0();
  v78 = Color.opacity(_:)(0.0);
  swift_release(v77);
  *(_QWORD *)(v61 + 112) = Gradient.Stop.init(color:location:)(v78, 0.034);
  *(_QWORD *)(v61 + 120) = v79;
  v80 = _s7BooksUI14ColorConstantsV25vibrantPrimaryButtonLabel05SwiftB00C0Vvg_0();
  v81 = Color.opacity(_:)(0.0);
  swift_release(v80);
  *(_QWORD *)(v61 + 128) = Gradient.Stop.init(color:location:)(v81, 0.045);
  *(_QWORD *)(v61 + 136) = v82;
  v83 = _s7BooksUI14ColorConstantsV25vibrantPrimaryButtonLabel05SwiftB00C0Vvg_0();
  v84 = Color.opacity(_:)(0.17);
  swift_release(v83);
  *(_QWORD *)(v61 + 144) = Gradient.Stop.init(color:location:)(v84, 0.054);
  *(_QWORD *)(v61 + 152) = v85;
  v86 = _s7BooksUI14ColorConstantsV25vibrantPrimaryButtonLabel05SwiftB00C0Vvg_0();
  v87 = Color.opacity(_:)(0.0);
  swift_release(v86);
  *(_QWORD *)(v61 + 160) = Gradient.Stop.init(color:location:)(v87, 0.067);
  *(_QWORD *)(v61 + 168) = v88;
  v89 = _s7BooksUI14ColorConstantsV25vibrantPrimaryButtonLabel05SwiftB00C0Vvg_0();
  v90 = Color.opacity(_:)(0.0);
  swift_release(v89);
  *(_QWORD *)(v61 + 176) = Gradient.Stop.init(color:location:)(v90, 1.0);
  *(_QWORD *)(v61 + 184) = v91;
  v92 = static UnitPoint.leading.getter();
  v94 = v93;
  v96 = v95;
  v97 = static UnitPoint.trailing.getter(v92);
  v99 = v98;
  Gradient.init(stops:)(v61);
  LinearGradient.init(gradient:startPoint:endPoint:)(v415, v94, v96, v97, v99);
  v363 = v415[0];
  v332 = v415[2];
  v333 = v415[1];
  v330 = v415[4];
  v331 = v415[3];
  v100 = _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0();
  v383 = v53;
  _FrameLayout.init(width:height:alignment:)(&v416, 0, 1, *(_QWORD *)&v53, 0, v100, v101);
  v102 = v417;
  v364 = v417;
  v367 = v416;
  v368 = v418;
  LOBYTE(v52) = v419;
  v365 = v419;
  v371 = v421;
  v372 = v420;
  v103 = _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0();
  v369 = v104;
  v370 = v103;
  v105 = swift_allocObject(v60, 64, 7);
  v358 = xmmword_1E1CE0;
  *(_OWORD *)(v105 + 16) = xmmword_1E1CE0;
  v106 = static Color.black.getter(v105);
  v107 = Color.opacity(_:)(1.0);
  swift_release(v106);
  v108 = Gradient.Stop.init(color:location:)(v107, 0.0);
  *(_QWORD *)(v105 + 32) = v108;
  *(_QWORD *)(v105 + 40) = v109;
  v110 = static Color.black.getter(v108);
  v111 = Color.opacity(_:)(0.5);
  swift_release(v110);
  *(_QWORD *)(v105 + 48) = Gradient.Stop.init(color:location:)(v111, 1.0);
  *(_QWORD *)(v105 + 56) = v112;
  v113 = static UnitPoint.top.getter();
  v115 = v114;
  v116 = static UnitPoint.bottom.getter();
  v118 = v117;
  Gradient.init(stops:)(v105);
  LinearGradient.init(gradient:startPoint:endPoint:)(v422, v113, v115, v116, v118);
  v366 = v422[0];
  v326 = v422[2];
  v327 = v422[1];
  v324 = v422[4];
  v325 = v422[3];
  v445 = v102;
  v443 = (char)v52;
  v447[0] = *(_DWORD *)v444;
  *(_DWORD *)((char *)v447 + 3) = *(_DWORD *)&v444[3];
  v446[0] = *(_DWORD *)v442;
  *(_DWORD *)((char *)v446 + 3) = *(_DWORD *)&v442[3];
  v119 = v60;
  v317 = v60;
  v120 = swift_allocObject(v60, 208, 7);
  *(_OWORD *)(v120 + 16) = xmmword_1E3A10;
  v121 = static Color.black.getter(v120);
  v122 = Color.opacity(_:)(0.0);
  swift_release(v121);
  v123 = Gradient.Stop.init(color:location:)(v122, 0.0);
  *(_QWORD *)(v120 + 32) = v123;
  *(_QWORD *)(v120 + 40) = v124;
  v125 = static Color.black.getter(v123);
  v126 = Color.opacity(_:)(0.2);
  swift_release(v125);
  v319 = 0.01;
  v127 = Gradient.Stop.init(color:location:)(v126, 0.01);
  *(_QWORD *)(v120 + 48) = v127;
  *(_QWORD *)(v120 + 56) = v128;
  v129 = static Color.black.getter(v127);
  v130 = Color.opacity(_:)(0.0);
  swift_release(v129);
  v131 = Gradient.Stop.init(color:location:)(v130, 0.013);
  *(_QWORD *)(v120 + 64) = v131;
  *(_QWORD *)(v120 + 72) = v132;
  v133 = static Color.black.getter(v131);
  v134 = Color.opacity(_:)(0.2);
  swift_release(v133);
  v135 = Gradient.Stop.init(color:location:)(v134, 0.017);
  *(_QWORD *)(v120 + 80) = v135;
  *(_QWORD *)(v120 + 88) = v136;
  v137 = static Color.black.getter(v135);
  v138 = Color.opacity(_:)(0.0);
  swift_release(v137);
  v139 = Gradient.Stop.init(color:location:)(v138, 0.021);
  *(_QWORD *)(v120 + 96) = v139;
  *(_QWORD *)(v120 + 104) = v140;
  v141 = static Color.black.getter(v139);
  v142 = Color.opacity(_:)(0.2);
  swift_release(v141);
  v143 = Gradient.Stop.init(color:location:)(v142, 0.027);
  *(_QWORD *)(v120 + 112) = v143;
  *(_QWORD *)(v120 + 120) = v144;
  v145 = static Color.black.getter(v143);
  v146 = Color.opacity(_:)(0.0);
  swift_release(v145);
  v147 = Gradient.Stop.init(color:location:)(v146, 0.031);
  *(_QWORD *)(v120 + 128) = v147;
  *(_QWORD *)(v120 + 136) = v148;
  v149 = static Color.black.getter(v147);
  v150 = Color.opacity(_:)(0.5);
  swift_release(v149);
  v151 = Gradient.Stop.init(color:location:)(v150, 0.036);
  *(_QWORD *)(v120 + 144) = v151;
  *(_QWORD *)(v120 + 152) = v152;
  v153 = static Color.black.getter(v151);
  v154 = Color.opacity(_:)(0.2);
  swift_release(v153);
  v155 = Gradient.Stop.init(color:location:)(v154, 0.044);
  *(_QWORD *)(v120 + 160) = v155;
  *(_QWORD *)(v120 + 168) = v156;
  v157 = static Color.black.getter(v155);
  v158 = Color.opacity(_:)(0.0);
  swift_release(v157);
  v159 = Gradient.Stop.init(color:location:)(v158, 0.069);
  *(_QWORD *)(v120 + 176) = v159;
  *(_QWORD *)(v120 + 184) = v160;
  v161 = static Color.black.getter(v159);
  v162 = Color.opacity(_:)(0.0);
  swift_release(v161);
  *(_QWORD *)(v120 + 192) = Gradient.Stop.init(color:location:)(v162, 1.0);
  *(_QWORD *)(v120 + 200) = v163;
  v164 = static UnitPoint.leading.getter();
  v166 = v165;
  v168 = v167;
  v169 = static UnitPoint.trailing.getter(v164);
  v171 = v170;
  Gradient.init(stops:)(v120);
  LinearGradient.init(gradient:startPoint:endPoint:)(v423, v166, v168, v169, v171);
  v384 = (void (*)(char *, _QWORD, uint64_t))v423[0];
  v172 = v423[1];
  v173 = v423[2];
  v174 = v423[3];
  v175 = v423[4];
  v176 = _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0();
  _FrameLayout.init(width:height:alignment:)(&v424, 0, 1, *(_QWORD *)&v53, 0, v176, v177);
  v178 = v424;
  LOBYTE(v53) = v425;
  v179 = v426;
  LOBYTE(v60) = v427;
  v318 = v428;
  v316 = v429;
  v180 = _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0();
  v182 = v181;
  v183 = swift_allocObject(v119, 64, 7);
  *(_OWORD *)(v183 + 16) = v358;
  v184 = static Color.black.getter(v183);
  v185 = Color.opacity(_:)(1.0);
  swift_release(v184);
  v186 = Gradient.Stop.init(color:location:)(v185, 0.0);
  *(_QWORD *)(v183 + 32) = v186;
  *(_QWORD *)(v183 + 40) = v187;
  v188 = static Color.black.getter(v186);
  v189 = Color.opacity(_:)(0.5);
  swift_release(v188);
  *(_QWORD *)(v183 + 48) = Gradient.Stop.init(color:location:)(v189, 1.0);
  *(_QWORD *)(v183 + 56) = v190;
  v191 = static UnitPoint.top.getter();
  v193 = v192;
  v194 = static UnitPoint.bottom.getter();
  v196 = v195;
  Gradient.init(stops:)(v183);
  LinearGradient.init(gradient:startPoint:endPoint:)(&v430, v191, v193, v194, v196);
  *(_QWORD *)&v448 = v384;
  *((_QWORD *)&v448 + 1) = v172;
  *(_QWORD *)&v449 = v173;
  *((_QWORD *)&v449 + 1) = v174;
  *(_QWORD *)&v450 = v175;
  *((_QWORD *)&v450 + 1) = v178;
  LOBYTE(v451) = LOBYTE(v53);
  *((_QWORD *)&v451 + 1) = v179;
  LOBYTE(v452) = v60;
  *((_QWORD *)&v452 + 1) = v318;
  *(_QWORD *)&v453 = v316;
  *((_QWORD *)&v453 + 1) = 0x3FD0000000000000;
  *(_QWORD *)&v454 = v180;
  *((_QWORD *)&v454 + 1) = v182;
  *(_QWORD *)&v455[0] = v430;
  *(_OWORD *)((char *)v455 + 8) = v431;
  *(_OWORD *)((char *)&v455[1] + 8) = v432;
  v197 = v322;
  v384 = *(void (**)(char *, _QWORD, uint64_t))(v322 + 104);
  v198 = v359;
  v199 = v387;
  v384(v359, enum case for BlendMode.plusDarker(_:), v387);
  v318 = *(void (**)(char *, char *, uint64_t))(v197 + 16);
  v200 = v197;
  v201 = (uint64_t)v360;
  v318(v360, v198, v199);
  v202 = (uint64_t)v320;
  sub_1E428(v201, (uint64_t)&v320[*(int *)(v321 + 36)], (uint64_t (*)(_QWORD))&type metadata accessor for _BlendModeEffect);
  v203 = v455[0];
  *(_OWORD *)(v202 + 96) = v454;
  *(_OWORD *)(v202 + 112) = v203;
  *(_OWORD *)(v202 + 128) = v455[1];
  *(_QWORD *)(v202 + 144) = *(_QWORD *)&v455[2];
  v204 = v451;
  *(_OWORD *)(v202 + 32) = v450;
  *(_OWORD *)(v202 + 48) = v204;
  v205 = v453;
  *(_OWORD *)(v202 + 64) = v452;
  *(_OWORD *)(v202 + 80) = v205;
  v206 = v449;
  *(_OWORD *)v202 = v448;
  *(_OWORD *)(v202 + 16) = v206;
  sub_4C818(&v448);
  sub_224DC(v201, (uint64_t (*)(_QWORD))&type metadata accessor for _BlendModeEffect);
  v322 = *(_QWORD *)(v200 + 8);
  ((void (*)(char *, uint64_t))v322)(v198, v199);
  sub_4C84C((uint64_t *)&v448);
  v207 = v361;
  sub_B3D0(v202, v361, &qword_260810);
  *(_BYTE *)(v207 + *(int *)(v323 + 36)) = 1;
  sub_B414(v202, &qword_260810);
  sub_167A4(v207, v385, &qword_260818);
  v208 = swift_allocObject(v317, 64, 7);
  *(_OWORD *)(v208 + 16) = v358;
  v209 = _s7BooksUI14ColorConstantsV25vibrantPrimaryButtonLabel05SwiftB00C0Vvg_0();
  v210 = Color.opacity(_:)(1.0);
  swift_release(v209);
  v211 = Gradient.Stop.init(color:location:)(v210, 0.0);
  *(_QWORD *)(v208 + 32) = v211;
  *(_QWORD *)(v208 + 40) = v212;
  v213 = static Color.black.getter(v211);
  v214 = Color.opacity(_:)(0.5);
  swift_release(v213);
  *(_QWORD *)(v208 + 48) = Gradient.Stop.init(color:location:)(v214, 1.0);
  *(_QWORD *)(v208 + 56) = v215;
  v216 = static UnitPoint.top.getter();
  v218 = v217;
  v219 = static UnitPoint.bottom.getter();
  v221 = v220;
  Gradient.init(stops:)(v208);
  LinearGradient.init(gradient:startPoint:endPoint:)(v433, v216, v218, v219, v221);
  *(_QWORD *)&v358 = v433[0];
  v222 = v433[1];
  v223 = v433[2];
  v224 = v433[3];
  v225 = v433[4];
  v226 = _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0();
  _FrameLayout.init(width:height:alignment:)(&v434, 0, 1, *(_QWORD *)&v383, 0, v226, v227);
  v228 = v434;
  LOBYTE(v214) = v435;
  v229 = v436;
  LOBYTE(v53) = v437;
  v230 = v438;
  v231 = v439;
  v232 = v198;
  v233 = v198;
  v234 = v387;
  v384(v233, enum case for BlendMode.softLight(_:), v387);
  v235 = (uint64_t)v360;
  v236 = v232;
  v237 = v234;
  v318(v360, v236, v234);
  v238 = v362;
  sub_1E428(v235, v362 + *(int *)(v328 + 36), (uint64_t (*)(_QWORD))&type metadata accessor for _BlendModeEffect);
  v239 = v358;
  *(_QWORD *)v238 = v358;
  *(_QWORD *)(v238 + 8) = v222;
  *(_QWORD *)(v238 + 16) = v223;
  *(_QWORD *)(v238 + 24) = v224;
  *(_QWORD *)(v238 + 32) = v225;
  *(_QWORD *)(v238 + 40) = v228;
  *(_BYTE *)(v238 + 48) = v214;
  *(_QWORD *)(v238 + 56) = v229;
  *(_BYTE *)(v238 + 64) = LOBYTE(v53);
  *(_QWORD *)(v238 + 72) = v230;
  *(_QWORD *)(v238 + 80) = v231;
  *(_QWORD *)(v238 + 88) = 0x3FD999999999999ALL;
  swift_bridgeObjectRetain(v239);
  sub_224DC(v235, (uint64_t (*)(_QWORD))&type metadata accessor for _BlendModeEffect);
  ((void (*)(char *, uint64_t))v322)(v359, v237);
  sub_4C880(v433);
  sub_167A4(v238, v386, &qword_260808);
  v240 = *(_QWORD *)(v373 + 8);
  v241 = v334;
  v242 = &v334[*(int *)(v377 + 20)];
  v243 = enum case for RoundedCornerStyle.continuous(_:);
  LODWORD(v360) = enum case for RoundedCornerStyle.continuous(_:);
  v359 = (char *)type metadata accessor for RoundedCornerStyle(0);
  *(_QWORD *)&v358 = *(_QWORD *)(*((_QWORD *)v359 - 1) + 104);
  ((void (*)(char *, uint64_t, char *))v358)(v242, v243, v359);
  *v241 = v240;
  v241[1] = v240;
  v244 = _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0();
  _FrameLayout.init(width:height:alignment:)(v440, 0, 1, *(_QWORD *)&v383, 0, v244, v245);
  v246 = v335;
  sub_1E428((uint64_t)v241, v335, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  v247 = (_OWORD *)(v246 + *(int *)(v378 + 36));
  v248 = v440[1];
  *v247 = v440[0];
  v247[1] = v248;
  v247[2] = v440[2];
  v249 = sub_224DC((uint64_t)v241, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  v250 = static Color.black.getter(v249);
  v251 = _s7BooksUI14ColorConstantsV25vibrantPrimaryButtonLabel05SwiftB00C0Vvg_0();
  v252 = Color.opacity(_:)(0.8);
  swift_release(v251);
  v253 = v329;
  v254 = v329 * v319;
  v255 = v341;
  static ShadowStyle.inner(color:radius:x:y:)(v252, v329 * v319, v329 * 0.005, v329 * 0.0075);
  v256 = swift_release(v252);
  v257 = v340;
  v258 = (char *)v340 + *(int *)(v382 + 36);
  v259 = v344;
  v328 = *(_QWORD *)(v344 + 16);
  v260 = v375;
  ((void (*)(char *, char *, uint64_t, __n128))v328)(v258, v255, v375, v256);
  *v257 = v250;
  v344 = *(_QWORD *)(v259 + 8);
  ((void (*)(char *, uint64_t))v344)(v255, v260);
  type metadata accessor for BookCoverEffect(0);
  v261 = v346;
  sub_31378(v346);
  v262 = v348;
  v263 = v349;
  v264 = v350;
  (*(void (**)(char *, _QWORD, uint64_t))(v349 + 104))(v348, enum case for ColorScheme.dark(_:), v350);
  v265 = v262;
  LOBYTE(v262) = static ColorScheme.== infix(_:_:)(v261, v262);
  v266 = *(void (**)(char *, uint64_t))(v263 + 8);
  v266(v265, v264);
  v266((char *)v261, v264);
  v267 = v343;
  sub_B3D0((uint64_t)v257, v343, &qword_2607D8);
  v268 = 0.15;
  if ((v262 & 1) == 0)
    v268 = 0.5;
  v269 = v345;
  *(float *)(v267 + *(int *)(v345 + 36)) = v268;
  sub_B414((uint64_t)v257, &qword_2607D8);
  v270 = (uint64_t)v342;
  v384(&v342[*(int *)(v376 + 36)], enum case for BlendMode.screen(_:), v387);
  sub_167A4(v267, v270, &qword_2607E0);
  v271 = (uint64_t)v337;
  v272 = v338;
  sub_B3D0(v270, (uint64_t)&v337[*(int *)(v338 + 36)], &qword_2607E8);
  sub_B3D0(v246, v271, &qword_2607F0);
  sub_B414(v270, &qword_2607E8);
  sub_B414(v246, &qword_2607F0);
  v273 = v336;
  sub_B3D0(v271, v336, &qword_2607F8);
  v274 = v339;
  *(_BYTE *)(v273 + *(int *)(v339 + 36)) = 1;
  sub_B414(v271, &qword_2607F8);
  sub_167A4(v273, v381, &qword_260800);
  v275 = *(_QWORD *)(v373 + 8);
  ((void (*)(char *, _QWORD, char *))v358)((char *)v241 + *(int *)(v377 + 20), v360, v359);
  *v241 = v275;
  v241[1] = v275;
  v276 = _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0();
  _FrameLayout.init(width:height:alignment:)(v441, 0, 1, *(_QWORD *)&v383, 0, v276, v277);
  v278 = v347;
  sub_1E428((uint64_t)v241, v347, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  v279 = (_OWORD *)(v278 + *(int *)(v378 + 36));
  v280 = v441[1];
  *v279 = v441[0];
  v279[1] = v280;
  v279[2] = v441[2];
  sub_224DC((uint64_t)v241, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  v281 = _s7BooksUI14ColorConstantsV25vibrantPrimaryButtonLabel05SwiftB00C0Vvg_0();
  v282 = static Color.black.getter(v281);
  v283 = Color.opacity(_:)(0.8);
  swift_release(v282);
  static ShadowStyle.inner(color:radius:x:y:)(v283, v254, v253 * -0.0025, v253 * -0.005);
  v284 = swift_release(v283);
  v285 = v356;
  v286 = v375;
  ((void (*)(char *, char *, uint64_t, __n128))v328)((char *)v356 + *(int *)(v382 + 36), v255, v375, v284);
  *v285 = v281;
  ((void (*)(char *, uint64_t))v344)(v255, v286);
  v287 = v355;
  sub_B3D0((uint64_t)v285, v355, &qword_2607D8);
  *(_DWORD *)(v287 + *(int *)(v269 + 36)) = 1048576000;
  sub_B414((uint64_t)v285, &qword_2607D8);
  v288 = (uint64_t)v354;
  v384(&v354[*(int *)(v376 + 36)], enum case for BlendMode.darken(_:), v387);
  sub_167A4(v287, v288, &qword_2607E0);
  v289 = (uint64_t)v352;
  sub_B3D0(v288, (uint64_t)&v352[*(int *)(v272 + 36)], &qword_2607E8);
  sub_B3D0(v278, v289, &qword_2607F0);
  sub_B414(v288, &qword_2607E8);
  sub_B414(v278, &qword_2607F0);
  v290 = v351;
  sub_B3D0(v289, v351, &qword_2607F8);
  *(_BYTE *)(v290 + *(int *)(v274 + 36)) = 1;
  sub_B414(v289, &qword_2607F8);
  v291 = v380;
  sub_167A4(v290, v380, &qword_260800);
  v292 = v374;
  sub_B3D0((uint64_t)v379, v374, &qword_260820);
  v293 = v361;
  sub_B3D0(v385, v361, &qword_260818);
  v294 = v362;
  sub_B3D0(v386, v362, &qword_260808);
  v295 = v381;
  sub_B3D0(v381, v290, &qword_260800);
  v296 = v291;
  v297 = v353;
  sub_B3D0(v296, v353, &qword_260800);
  v298 = v292;
  v299 = v357;
  sub_B3D0(v298, v357, &qword_260820);
  v300 = (int *)sub_5440(&qword_260830);
  v301 = v299 + v300[12];
  *(_QWORD *)&v388 = v363;
  v303 = v332;
  v302 = v333;
  *((_QWORD *)&v388 + 1) = v333;
  *(_QWORD *)&v389 = v332;
  v305 = v330;
  v304 = v331;
  *((_QWORD *)&v389 + 1) = v331;
  *(_QWORD *)&v390 = v330;
  *((_QWORD *)&v390 + 1) = v367;
  LOBYTE(v391) = v364;
  *(_DWORD *)((char *)&v391 + 1) = v447[0];
  DWORD1(v391) = *(_DWORD *)((char *)v447 + 3);
  *((_QWORD *)&v391 + 1) = v368;
  LOBYTE(v392) = v365;
  *(_DWORD *)((char *)&v392 + 1) = v446[0];
  DWORD1(v392) = *(_DWORD *)((char *)v446 + 3);
  *((_QWORD *)&v392 + 1) = v372;
  *(_QWORD *)&v393 = v371;
  *((_QWORD *)&v393 + 1) = v370;
  *(_QWORD *)&v394 = v369;
  *((_QWORD *)&v394 + 1) = v366;
  v307 = v326;
  v306 = v327;
  *(_QWORD *)&v395 = v327;
  *((_QWORD *)&v395 + 1) = v326;
  v309 = v324;
  v308 = v325;
  *(_QWORD *)&v396 = v325;
  *((_QWORD *)&v396 + 1) = v324;
  v397 = 1;
  *(_BYTE *)(v301 + 144) = 1;
  v310 = v389;
  *(_OWORD *)v301 = v388;
  *(_OWORD *)(v301 + 16) = v310;
  v311 = v395;
  *(_OWORD *)(v301 + 96) = v394;
  *(_OWORD *)(v301 + 112) = v311;
  *(_OWORD *)(v301 + 128) = v396;
  v312 = v390;
  v313 = v391;
  v314 = v393;
  *(_OWORD *)(v301 + 64) = v392;
  *(_OWORD *)(v301 + 80) = v314;
  *(_OWORD *)(v301 + 32) = v312;
  *(_OWORD *)(v301 + 48) = v313;
  sub_B3D0(v293, v299 + v300[16], &qword_260818);
  sub_B3D0(v294, v299 + v300[20], &qword_260808);
  sub_B3D0(v290, v299 + v300[24], &qword_260800);
  sub_B3D0(v297, v299 + v300[28], &qword_260800);
  sub_4C8A8(&v388);
  sub_B414(v380, &qword_260800);
  sub_B414(v295, &qword_260800);
  sub_B414(v386, &qword_260808);
  sub_B414(v385, &qword_260818);
  sub_B414((uint64_t)v379, &qword_260820);
  sub_B414(v297, &qword_260800);
  sub_B414(v290, &qword_260800);
  sub_B414(v294, &qword_260808);
  sub_B414(v293, &qword_260818);
  v398[0] = v363;
  v398[1] = v302;
  v398[2] = v303;
  v398[3] = v304;
  v398[4] = v305;
  v398[5] = v367;
  v399 = v364;
  *(_DWORD *)v400 = v447[0];
  *(_DWORD *)&v400[3] = *(_DWORD *)((char *)v447 + 3);
  v401 = v368;
  v402 = v365;
  *(_DWORD *)v403 = v446[0];
  *(_DWORD *)&v403[3] = *(_DWORD *)((char *)v446 + 3);
  v404 = v372;
  v405 = v371;
  v406 = v370;
  v407 = v369;
  v408 = v366;
  v409 = v306;
  v410 = v307;
  v411 = v308;
  v412 = v309;
  v413 = 1;
  sub_4C8DC(v398);
  return sub_B414(v374, &qword_260820);
}

uint64_t sub_4BF78@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;

  v5 = v3;
  v8 = sub_5440(&qword_260698);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  v11 = __chkstk_darwin(v8);
  v12 = *(_QWORD *)(a2 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  __chkstk_darwin(v11);
  v14 = (char *)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1E428(v5, (uint64_t)v14, type metadata accessor for BookCoverEffect);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v8);
  v15 = *(unsigned __int8 *)(v12 + 80);
  v16 = (v15 + 16) & ~v15;
  v17 = *(unsigned __int8 *)(v9 + 80);
  v18 = (v13 + v16 + v17) & ~v17;
  v19 = swift_allocObject(&unk_24CF00, v18 + v10, v15 | v17 | 7);
  sub_496E4((uint64_t)v14, v19 + v16);
  result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v9 + 32))(v19 + v18, (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
  *a3 = sub_49728;
  a3[1] = v19;
  return result;
}

uint64_t sub_4C0B8(uint64_t a1)
{
  uint64_t result;

  result = sub_6FD0(&qword_2606E0, type metadata accessor for BookCoverEffect, (uint64_t)&protocol conformance descriptor for BookCoverEffect);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for BookCoverEffect(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v13 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v13 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain(v13);
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    v5 = *(int *)(a3 + 24);
    v6 = (uint64_t *)((char *)a1 + v5);
    v7 = (uint64_t *)((char *)a2 + v5);
    v8 = sub_5440(&qword_25E948);
    if (swift_getEnumCaseMultiPayload(v7, v8) == 1)
    {
      v9 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v6, v7, v9);
      v10 = v6;
      v11 = v8;
      v12 = 1;
    }
    else
    {
      v14 = *v7;
      *v6 = *v7;
      swift_retain(v14);
      v10 = v6;
      v11 = v8;
      v12 = 0;
    }
    swift_storeEnumTagMultiPayload(v10, v11, v12);
  }
  return v3;
}

double destroy for BookCoverEffect(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  double result;

  v2 = (_QWORD *)(a1 + *(int *)(a2 + 24));
  v3 = sub_5440(&qword_25E948);
  if (swift_getEnumCaseMultiPayload(v2, v3) == 1)
  {
    v4 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v2, v4);
  }
  else
  {
    *(_QWORD *)&result = swift_release(*v2).n128_u64[0];
  }
  return result;
}

_OWORD *initializeWithCopy for BookCoverEffect(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *a1 = *a2;
  v4 = *(int *)(a3 + 24);
  v5 = (uint64_t *)((char *)a1 + v4);
  v6 = (uint64_t *)((char *)a2 + v4);
  v7 = sub_5440(&qword_25E948);
  if (swift_getEnumCaseMultiPayload(v6, v7) == 1)
  {
    v8 = type metadata accessor for ColorScheme(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v5, v6, v8);
    v9 = 1;
  }
  else
  {
    v10 = *v6;
    *v5 = *v6;
    swift_retain(v10);
    v9 = 0;
  }
  swift_storeEnumTagMultiPayload(v5, v7, v9);
  return a1;
}

_QWORD *assignWithCopy for BookCoverEffect(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *a1 = *a2;
  a1[1] = a2[1];
  if (a1 != a2)
  {
    v4 = *(int *)(a3 + 24);
    v5 = (_QWORD *)((char *)a1 + v4);
    v6 = (_QWORD *)((char *)a2 + v4);
    sub_B414((uint64_t)a1 + v4, &qword_25E948);
    v7 = sub_5440(&qword_25E948);
    if (swift_getEnumCaseMultiPayload(v6, v7) == 1)
    {
      v8 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v5, v6, v8);
      v9 = 1;
    }
    else
    {
      v10 = *v6;
      *v5 = *v6;
      swift_retain(v10);
      v9 = 0;
    }
    swift_storeEnumTagMultiPayload(v5, v7, v9);
  }
  return a1;
}

_OWORD *initializeWithTake for BookCoverEffect(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;

  *a1 = *a2;
  v4 = *(int *)(a3 + 24);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = sub_5440(&qword_25E948);
  if (swift_getEnumCaseMultiPayload(v6, v7) == 1)
  {
    v8 = type metadata accessor for ColorScheme(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v5, v6, v8);
    swift_storeEnumTagMultiPayload(v5, v7, 1);
  }
  else
  {
    memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
  }
  return a1;
}

_OWORD *assignWithTake for BookCoverEffect(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;

  *a1 = *a2;
  if (a1 != a2)
  {
    v4 = *(int *)(a3 + 24);
    v5 = (char *)a1 + v4;
    v6 = (char *)a2 + v4;
    sub_B414((uint64_t)a1 + v4, &qword_25E948);
    v7 = sub_5440(&qword_25E948);
    if (swift_getEnumCaseMultiPayload(v6, v7) == 1)
    {
      v8 = type metadata accessor for ColorScheme(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v5, v6, v8);
      swift_storeEnumTagMultiPayload(v5, v7, 1);
    }
    else
    {
      memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for BookCoverEffect(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_4C510);
}

uint64_t sub_4C510(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a1 + *(int *)(a3 + 24);
  v5 = sub_5440(&qword_25EAE8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, a2, v5);
}

uint64_t storeEnumTagSinglePayload for BookCoverEffect(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_4C560);
}

uint64_t sub_4C560(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = a1 + *(int *)(a4 + 24);
  v6 = sub_5440(&qword_25EAE8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, a2, a2, v6);
}

void sub_4C5A8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[1] = (char *)&value witness table for Builtin.Int64 + 64;
  sub_40964(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(v2 - 8) + 64;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
  }
}

unint64_t sub_4C624()
{
  unint64_t result;
  uint64_t v1;

  result = qword_260780;
  if (!qword_260780)
  {
    v1 = sub_7EF8(&qword_260788);
    result = swift_getWitnessTable(&protocol conformance descriptor for GeometryReader<A>, v1);
    atomic_store(result, (unint64_t *)&qword_260780);
  }
  return result;
}

uint64_t sub_4C670()
{
  return sub_6FD0(&qword_260790, (uint64_t (*)(uint64_t))&type metadata accessor for RoundedRectangle, (uint64_t)&protocol conformance descriptor for RoundedRectangle);
}

uint64_t sub_4C6A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = type metadata accessor for BookCoverEffect(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = sub_5440(&qword_260698);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(v7 + 64);
  v10 = (_QWORD *)(v0 + *(int *)(v1 + 24) + v4);
  v11 = sub_5440(&qword_25E948);
  if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
  {
    v12 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v10, v12);
  }
  else
  {
    v13 = swift_release(*v10);
  }
  v14 = v3 | v8 | 7;
  v15 = (v4 + v5 + v8) & ~v8;
  v16 = v15 + v9;
  (*(void (**)(uint64_t, uint64_t, __n128))(v7 + 8))(v0 + v15, v6, v13);
  return swift_deallocObject(v0, v16, v14);
}

uint64_t sub_4C79C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(type metadata accessor for BookCoverEffect(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = v4 + *(_QWORD *)(v3 + 64);
  v6 = *(unsigned __int8 *)(*(_QWORD *)(sub_5440(&qword_260698) - 8) + 80);
  return sub_495B4(v1 + v4, v1 + ((v5 + v6) & ~v6), a1);
}

_QWORD *sub_4C818(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[14];
  swift_bridgeObjectRetain(*a1);
  swift_bridgeObjectRetain(v2);
  return a1;
}

uint64_t *sub_4C84C(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  swift_bridgeObjectRelease(a1[14]);
  swift_bridgeObjectRelease(v2);
  return a1;
}

_QWORD *sub_4C880(_QWORD *a1)
{
  swift_bridgeObjectRelease(*a1);
  return a1;
}

_QWORD *sub_4C8A8(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[13];
  swift_bridgeObjectRetain(*a1);
  swift_bridgeObjectRetain(v2);
  return a1;
}

uint64_t *sub_4C8DC(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  swift_bridgeObjectRelease(a1[13]);
  swift_bridgeObjectRelease(v2);
  return a1;
}

uint64_t sub_4C910(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v2 = *(_QWORD *)(a1 - 8);
  v3 = *(_QWORD *)(v2 + 64);
  __chkstk_darwin(a1);
  v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v2 + 16))(v4);
  v5 = *(unsigned __int8 *)(v2 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(&unk_24CFC0, v6 + v3, v5 | 7);
  *(_OWORD *)(v7 + 16) = *(_OWORD *)(a1 + 16);
  (*(void (**)(uint64_t, char *, uint64_t))(v2 + 32))(v7 + v6, v4, a1);
  v8 = sub_5440(&qword_260918);
  v9 = type metadata accessor for _JetLocalizeDefaultWorking(0);
  v10 = type metadata accessor for _JetLocalizeDefaultFailed(0);
  v11 = sub_4DF50();
  v12 = sub_6FD0(&qword_25FEE0, (uint64_t (*)(uint64_t))&type metadata accessor for _JetLocalizeDefaultWorking, (uint64_t)&protocol conformance descriptor for _JetLocalizeDefaultWorking);
  v13 = sub_6FD0(&qword_25FEE8, (uint64_t (*)(uint64_t))&type metadata accessor for _JetLocalizeDefaultFailed, (uint64_t)&protocol conformance descriptor for _JetLocalizeDefaultFailed);
  return JetLocalize.init(working:failed:content:)(&j___s18_JetEngine_SwiftUI01_A22LocalizeDefaultWorkingVACycfC, 0, sub_4ED68, 0, sub_4DEE8, v7, v8, v9, v10, v11, v12, v13);
}

uint64_t sub_4CA84@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(_QWORD);
  uint64_t v32;
  __n128 v33;
  void (*v34)(char *, uint64_t, __n128);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  __n128 v43;
  unsigned __int8 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __n128 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t KeyPath;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void (*v83)(char *, uint64_t, __n128);
  unsigned int v84;
  void (*v85)(char *, _QWORD, uint64_t);
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  unsigned __int8 v97;

  v94 = a1;
  v96 = a5;
  v8 = type metadata accessor for DefaultBlendModeModifier(0);
  v9 = __chkstk_darwin(v8);
  v92 = (uint64_t *)((char *)&v83 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v9);
  v93 = (uint64_t)&v83 - v11;
  v12 = type metadata accessor for Font.Leading(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v83 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for FontConstants.ListItem(0);
  v17 = __chkstk_darwin(v16);
  v19 = (char *)&v83 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = *(_QWORD *)(a3 - 8);
  __chkstk_darwin(v17);
  v22 = (char *)&v83 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v88 = sub_5440(&qword_260950);
  __chkstk_darwin(v88);
  v89 = (char *)&v83 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v91 = sub_5440(&qword_260940);
  __chkstk_darwin(v91);
  v90 = (uint64_t)&v83 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = sub_5440(&qword_260918);
  __chkstk_darwin(v25);
  v95 = (char *)&v83 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = type metadata accessor for ListItemMetadataCreatorDescriptionView(0, a3, a4, v27);
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v22, a2 + *(int *)(v28 + 36), a3);
  v87 = a2;
  v29 = sub_30978((uint64_t)v19);
  v30 = static Font.footnote.getter(v29);
  v31 = *(void (**)(_QWORD))(v13 + 104);
  v84 = enum case for Font.Leading.tight(_:);
  v85 = (void (*)(char *, _QWORD, uint64_t))v31;
  v31(v15);
  v32 = Font.leading(_:)(v15, v30);
  v33 = swift_release(v30);
  v34 = *(void (**)(char *, uint64_t, __n128))(v13 + 8);
  v86 = v12;
  v83 = v34;
  v34(v15, v12, v33);
  v35 = (uint64_t)v19;
  sub_224DC((uint64_t)v19, type metadata accessor for FontConstants.ListItem);
  v36 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a4 + 16))(v94, v32, a3, a4);
  v38 = v37;
  v40 = v39;
  v42 = v41;
  v43 = swift_release(v32);
  (*(void (**)(char *, uint64_t, __n128))(v20 + 8))(v22, a3, v43);
  if (v42)
  {
    v44 = v40 & 1;
    v45 = v38;
    v46 = v35;
    v47 = sub_30978(v35);
    v48 = static Font.footnote.getter(v47);
    v49 = v86;
    v85(v15, v84, v86);
    v50 = Font.leading(_:)(v15, v48);
    v51 = swift_release(v48);
    v83(v15, v49, v51);
    sub_224DC(v46, type metadata accessor for FontConstants.ListItem);
    v97 = v44;
    v52 = Text.font(_:)(v50, v36, v45, v44, v42);
    v54 = v53;
    v56 = v55;
    v57 = v36;
    v59 = v58 & 1;
    sub_2B574(v57, v45, v44);
    swift_release(v50);
    swift_bridgeObjectRelease(v42);
    v60 = _s7BooksUI14ColorConstantsV19booksSecondaryLabel05SwiftB00C0Vvg_0();
    v61 = Text.foregroundColor(_:)(v60, v52, v54, v59, v56);
    v63 = v62;
    v65 = v64;
    v67 = v66;
    swift_release(v60);
    sub_2B574(v52, v54, v59);
    swift_bridgeObjectRelease(v56);
    KeyPath = swift_getKeyPath(&unk_1E3B98);
    v69 = v92;
    *v92 = KeyPath;
    v70 = sub_5440(&qword_25F208);
    swift_storeEnumTagMultiPayload(v69, v70, 0);
    v71 = (uint64_t)v69;
    v72 = v93;
    sub_4E18C(v71, v93);
    v73 = (uint64_t)v89;
    sub_4E1D0(v72, (uint64_t)&v89[*(int *)(v88 + 36)]);
    *(_QWORD *)v73 = v61;
    *(_QWORD *)(v73 + 8) = v63;
    *(_BYTE *)(v73 + 16) = v65 & 1;
    *(_QWORD *)(v73 + 24) = v67;
    sub_224DC(v72, type metadata accessor for DefaultBlendModeModifier);
    v74 = swift_getKeyPath(&unk_1E3BC0);
    v75 = v90;
    sub_4E21C(v73, v90);
    v76 = v91;
    v77 = v75 + *(int *)(v91 + 36);
    *(_QWORD *)v77 = v74;
    *(_QWORD *)(v77 + 8) = 4;
    *(_BYTE *)(v77 + 16) = 0;
    sub_B414(v73, &qword_260950);
    v78 = sub_4E038();
    v79 = (uint64_t)v95;
    View.accessibilityHidden(_:)(1, v76, v78);
    sub_B414(v75, &qword_260940);
    v80 = sub_5440(&qword_260930);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v80 - 8) + 56))(v79, 0, 1, v80);
  }
  else
  {
    v81 = sub_5440(&qword_260930);
    v79 = (uint64_t)v95;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v81 - 8) + 56))(v95, 1, 1, v81);
  }
  return sub_4E140(v79, v96);
}

uint64_t sub_4CFBC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;

  *a4 = swift_getKeyPath(&unk_1E3AD0);
  v8 = sub_5440(&qword_25FAD0);
  swift_storeEnumTagMultiPayload(a4, v8, 0);
  v10 = (char *)a4 + *(int *)(type metadata accessor for ListItemMetadataCreatorDescriptionView(0, a2, a3, v9) + 36);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(v10, a1, a2);
}

uint64_t type metadata accessor for ListItemMetadataCreatorDescriptionView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10E40(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ListItemMetadataCreatorDescriptionView);
}

void sub_4D058(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[2];

  sub_4DD80(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    v4 = swift_checkMetadataState(319, *(_QWORD *)(a1 + 16));
    if (v5 <= 0x3F)
    {
      v6[1] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 0, 2, v6, a1 + 32);
    }
  }
}

uint64_t sub_4D0E0(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v17;
  unsigned int v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;

  v6 = type metadata accessor for DynamicTypeSize(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_DWORD *)(v7 + 80);
  v9 = *(_QWORD *)(v7 + 64) + 7;
  if (((v9 + ((v8 + 2) & ~v8)) & 0xFFFFFFFFFFFFFFF8) != 0
    && ((v9 + ((v8 + 2) & ~v8)) & 0xFFFFFFFFFFFFFFF8) < 0xFFFFFFFFFFFFFFF8)
  {
    v10 = ((v9 + ((v8 + 2) & ~v8)) & 0xFFFFFFFFFFFFFFF8) + 8;
  }
  else
  {
    v10 = 8;
  }
  v11 = *(_QWORD *)(a3 + 16);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_DWORD *)(v12 + 80);
  v14 = v13 + v10 + 1;
  if ((v13 | v8) > 7
    || ((*(_DWORD *)(v12 + 80) | *(_DWORD *)(v7 + 80)) & 0x100000) != 0
    || (v14 & (unint64_t)~v13) + *(_QWORD *)(v12 + 64) > 0x18)
  {
    v17 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v17 + (((v13 | v8) & 0xF8 ^ 0x1F8) & ((v13 | v8) + 16));
    swift_retain(v17);
  }
  else
  {
    v18 = *((unsigned __int8 *)a2 + v10);
    if ((v10 & 0xFFFFFFF8) != 0 && v18 >= 2)
      v18 = *(_DWORD *)a2 + 2;
    v20 = ~v13;
    if (v18 == 1)
    {
      *(_BYTE *)a1 = *(_BYTE *)a2;
      *(_BYTE *)(a1 + 1) = *((_BYTE *)a2 + 1);
      v21 = (a1 + v8 + 2) & ~v8;
      v22 = ((unint64_t)a2 + v8 + 2) & ~v8;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v21, v22, v6);
      *(_QWORD *)((v9 + v21) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v9 + v22) & 0xFFFFFFFFFFFFF8);
      v23 = 1;
    }
    else
    {
      v24 = *a2;
      *(_QWORD *)a1 = *a2;
      swift_retain(v24);
      v23 = 0;
    }
    *(_BYTE *)(a1 + v10) = v23;
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v12 + 16))((v14 + a1) & v20, ((unint64_t)a2 + v14) & v20, v11);
  }
  return a1;
}

uint64_t sub_4D280(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int v8;

  v4 = type metadata accessor for DynamicTypeSize(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  if (((*(_QWORD *)(v5 + 64) + ((v6 + 2) & ~v6) + 7) & 0xFFFFFFFFFFFFFFF8) != 0
    && ((*(_QWORD *)(v5 + 64) + ((v6 + 2) & ~v6) + 7) & 0xFFFFFFFFFFFFFFF8) < 0xFFFFFFFFFFFFFFF8)
  {
    v7 = ((*(_QWORD *)(v5 + 64) + ((v6 + 2) & ~v6) + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  }
  else
  {
    v7 = 8;
  }
  v8 = *((unsigned __int8 *)a1 + v7);
  if (v8 >= 2 && (v7 & 0xFFFFFFF8) != 0)
    v8 = *(_DWORD *)a1 + 2;
  if (v8 == 1)
    (*(void (**)(unint64_t, uint64_t))(v5 + 8))(((unint64_t)a1 + v6 + 2) & ~v6, v4);
  else
    swift_release(*a1);
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))(((unint64_t)a1 + v7 + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80) + 1) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
}

_BYTE *sub_4D34C(_BYTE *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;

  v6 = type metadata accessor for DynamicTypeSize(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(v7 + 64) + 7;
  if (((v9 + ((v8 + 2) & ~v8)) & 0xFFFFFFFFFFFFFFF8) != 0
    && ((v9 + ((v8 + 2) & ~v8)) & 0xFFFFFFFFFFFFFFF8) < 0xFFFFFFFFFFFFFFF8)
  {
    v10 = ((v9 + ((v8 + 2) & ~v8)) & 0xFFFFFFFFFFFFFFF8) + 8;
  }
  else
  {
    v10 = 8;
  }
  v11 = *((unsigned __int8 *)a2 + v10);
  if (v11 >= 2 && (v10 & 0xFFFFFFF8) != 0)
    v11 = *(_DWORD *)a2 + 2;
  if (v11 == 1)
  {
    *a1 = *(_BYTE *)a2;
    a1[1] = *((_BYTE *)a2 + 1);
    v13 = (unint64_t)&a1[v8 + 2] & ~v8;
    v14 = ((unint64_t)a2 + v8 + 2) & ~v8;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v13, v14, v6);
    *(_QWORD *)((v9 + v13) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v9 + v14) & 0xFFFFFFFFFFFFF8);
    v15 = 1;
  }
  else
  {
    v16 = *a2;
    *(_QWORD *)a1 = *a2;
    swift_retain(v16);
    v15 = 0;
  }
  a1[v10] = v15;
  v17 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v17 + 16))((unint64_t)&a1[(v10 | 1) + *(unsigned __int8 *)(v17 + 80)] & ~(unint64_t)*(unsigned __int8 *)(v17 + 80), ((unint64_t)a2 + (v10 | 1) + *(unsigned __int8 *)(v17 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80));
  return a1;
}

uint64_t *sub_4D488(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  uint64_t v13;
  unsigned int v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;

  if (a1 != a2)
  {
    v6 = type metadata accessor for DynamicTypeSize(0);
    v7 = *(_QWORD *)(v6 - 8);
    v8 = *(unsigned __int8 *)(v7 + 80);
    v9 = *(_QWORD *)(v7 + 64) + 7;
    if (((v9 + ((v8 + 2) & ~v8)) & 0xFFFFFFFFFFFFFFF8) != 0
      && ((v9 + ((v8 + 2) & ~v8)) & 0xFFFFFFFFFFFFFFF8) < 0xFFFFFFFFFFFFFFF8)
    {
      v10 = ((v9 + ((v8 + 2) & ~v8)) & 0xFFFFFFFFFFFFFFF8) + 8;
    }
    else
    {
      v10 = 8;
    }
    v11 = *((unsigned __int8 *)a1 + v10);
    if (v11 >= 2 && (v10 & 0xFFFFFFF8) != 0)
      v11 = *(_DWORD *)a1 + 2;
    v13 = ~v8;
    if (v11 == 1)
      (*(void (**)(unint64_t, uint64_t))(v7 + 8))(((unint64_t)a1 + v8 + 2) & v13, v6);
    else
      swift_release(*a1);
    v14 = *((unsigned __int8 *)a2 + v10);
    if ((v10 & 0xFFFFFFF8) != 0 && v14 >= 2)
      v14 = *(_DWORD *)a2 + 2;
    if (v14 == 1)
    {
      *(_BYTE *)a1 = *(_BYTE *)a2;
      *((_BYTE *)a1 + 1) = *((_BYTE *)a2 + 1);
      v16 = (uint64_t)a2 + v8;
      v17 = ((unint64_t)a1 + v8 + 2) & v13;
      v18 = (v16 + 2) & v13;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v17, v18, v6);
      *(_QWORD *)((v9 + v17) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v9 + v18) & 0xFFFFFFFFFFFFF8);
      *((_BYTE *)a1 + v10) = 1;
    }
    else
    {
      v19 = *a2;
      *a1 = *a2;
      *((_BYTE *)a1 + v10) = 0;
      swift_retain(v19);
    }
  }
  v20 = type metadata accessor for DynamicTypeSize(0);
  v21 = ((*(_QWORD *)(*(_QWORD *)(v20 - 8) + 64)
        + ((*(unsigned __int8 *)(*(_QWORD *)(v20 - 8) + 80) + 2) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v20 - 8) + 80))
        + 7) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  if (v21 <= 8)
    v21 = 8;
  v22 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v22 + 24))(((unint64_t)a1 + *(unsigned __int8 *)(v22 + 80) + v21 + 1) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v22 + 80) + v21 + 1) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80));
  return a1;
}

_BYTE *sub_4D654(_BYTE *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;

  v6 = type metadata accessor for DynamicTypeSize(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(v7 + 64) + 7;
  if (((v9 + ((v8 + 2) & ~v8)) & 0xFFFFFFFFFFFFFFF8) != 0
    && ((v9 + ((v8 + 2) & ~v8)) & 0xFFFFFFFFFFFFFFF8) < 0xFFFFFFFFFFFFFFF8)
  {
    v10 = ((v9 + ((v8 + 2) & ~v8)) & 0xFFFFFFFFFFFFFFF8) + 8;
  }
  else
  {
    v10 = 8;
  }
  v11 = *(unsigned __int8 *)(a2 + v10);
  if (v11 >= 2 && (v10 & 0xFFFFFFF8) != 0)
    v11 = *(_DWORD *)a2 + 2;
  if (v11 == 1)
  {
    *a1 = *(_BYTE *)a2;
    a1[1] = *(_BYTE *)(a2 + 1);
    v13 = (unint64_t)&a1[v8 + 2] & ~v8;
    v14 = (a2 + v8 + 2) & ~v8;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(v13, v14, v6);
    *(_QWORD *)((v9 + v13) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v9 + v14) & 0xFFFFFFFFFFFFF8);
    v15 = 1;
  }
  else
  {
    v15 = 0;
    *(_QWORD *)a1 = *(_QWORD *)a2;
  }
  a1[v10] = v15;
  v16 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v16 + 32))((unint64_t)&a1[(v10 | 1) + *(unsigned __int8 *)(v16 + 80)] & ~(unint64_t)*(unsigned __int8 *)(v16 + 80), ((v10 | 1) + *(unsigned __int8 *)(v16 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80));
  return a1;
}

uint64_t sub_4D78C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  uint64_t v13;
  unsigned int v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;

  if (a1 != a2)
  {
    v6 = type metadata accessor for DynamicTypeSize(0);
    v7 = *(_QWORD *)(v6 - 8);
    v8 = *(unsigned __int8 *)(v7 + 80);
    v9 = *(_QWORD *)(v7 + 64) + 7;
    if (((v9 + ((v8 + 2) & ~v8)) & 0xFFFFFFFFFFFFFFF8) != 0
      && ((v9 + ((v8 + 2) & ~v8)) & 0xFFFFFFFFFFFFFFF8) < 0xFFFFFFFFFFFFFFF8)
    {
      v10 = ((v9 + ((v8 + 2) & ~v8)) & 0xFFFFFFFFFFFFFFF8) + 8;
    }
    else
    {
      v10 = 8;
    }
    v11 = *(unsigned __int8 *)(a1 + v10);
    if (v11 >= 2 && (v10 & 0xFFFFFFF8) != 0)
      v11 = *(_DWORD *)a1 + 2;
    v13 = ~v8;
    if (v11 == 1)
      (*(void (**)(uint64_t, uint64_t))(v7 + 8))((a1 + v8 + 2) & v13, v6);
    else
      swift_release(*(_QWORD *)a1);
    v14 = *(unsigned __int8 *)(a2 + v10);
    if ((v10 & 0xFFFFFFF8) != 0 && v14 >= 2)
      v14 = *(_DWORD *)a2 + 2;
    if (v14 == 1)
    {
      *(_BYTE *)a1 = *(_BYTE *)a2;
      *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
      v16 = a2 + v8;
      v17 = (a1 + v8 + 2) & v13;
      v18 = (v16 + 2) & v13;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(v17, v18, v6);
      *(_QWORD *)((v9 + v17) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v9 + v18) & 0xFFFFFFFFFFFFF8);
      v19 = 1;
    }
    else
    {
      v19 = 0;
      *(_QWORD *)a1 = *(_QWORD *)a2;
    }
    *(_BYTE *)(a1 + v10) = v19;
  }
  v20 = type metadata accessor for DynamicTypeSize(0);
  v21 = ((*(_QWORD *)(*(_QWORD *)(v20 - 8) + 64)
        + ((*(unsigned __int8 *)(*(_QWORD *)(v20 - 8) + 80) + 2) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v20 - 8) + 80))
        + 7) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  if (v21 <= 8)
    v21 = 8;
  v22 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v22 + 40))((*(unsigned __int8 *)(v22 + 80) + v21 + 1 + a1) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80), (*(unsigned __int8 *)(v22 + 80) + v21 + 1 + a2) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80));
  return a1;
}

uint64_t sub_4D954(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  int v15;
  unsigned int v17;
  int v18;
  int v19;
  unsigned int v20;

  v6 = type metadata accessor for DynamicTypeSize(0);
  if (((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64)
       + ((*(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80) + 2) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80))
       + 7) & 0xFFFFFFFFFFFFFFF8)
     + 8 <= 8)
    v7 = 8;
  else
    v7 = ((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64)
         + ((*(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80) + 2) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80))
         + 7) & 0xFFFFFFFFFFFFFFF8)
       + 8;
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v9 = *(_DWORD *)(v8 + 84);
  if (v9 <= 0xFE)
    v10 = 254;
  else
    v10 = *(_DWORD *)(v8 + 84);
  if (!a2)
    return 0;
  v11 = *(unsigned __int8 *)(v8 + 80);
  v12 = v11 + v7 + 1;
  if (a2 <= v10)
    goto LABEL_27;
  v13 = (v12 & ~v11) + *(_QWORD *)(v8 + 64);
  v14 = 8 * v13;
  if (v13 <= 3)
  {
    v17 = ((a2 - v10 + ~(-1 << v14)) >> v14) + 1;
    if (HIWORD(v17))
    {
      v15 = *(_DWORD *)(a1 + v13);
      if (!v15)
        goto LABEL_27;
      goto LABEL_18;
    }
    if (v17 > 0xFF)
    {
      v15 = *(unsigned __int16 *)(a1 + v13);
      if (!*(_WORD *)(a1 + v13))
        goto LABEL_27;
      goto LABEL_18;
    }
    if (v17 < 2)
    {
LABEL_27:
      if (v9 > 0xFE)
        return (*(uint64_t (**)(uint64_t))(v8 + 48))((v12 + a1) & ~v11);
      v20 = *(unsigned __int8 *)(a1 + v7);
      if (v20 >= 2)
        return (v20 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v15 = *(unsigned __int8 *)(a1 + v13);
  if (!*(_BYTE *)(a1 + v13))
    goto LABEL_27;
LABEL_18:
  v18 = (v15 - 1) << v14;
  if (v13 > 3)
    v18 = 0;
  if ((_DWORD)v13)
  {
    if (v13 <= 3)
      v19 = v13;
    else
      v19 = 4;
    __asm { BR              X12 }
  }
  return v10 + v18 + 1;
}

void sub_4DB08(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  size_t v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  int v16;

  v8 = type metadata accessor for DynamicTypeSize(0);
  v9 = ((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64)
       + ((*(unsigned __int8 *)(*(_QWORD *)(v8 - 8) + 80) + 2) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v8 - 8) + 80))
       + 7) & 0xFFFFFFFFFFFFFFF8)
     + 8;
  if (v9 <= 8)
    v9 = 8;
  v10 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v10 + 84) <= 0xFEu)
    v11 = 254;
  else
    v11 = *(_DWORD *)(v10 + 84);
  v12 = (((v9 | 1) + *(unsigned __int8 *)(v10 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80))
      + *(_QWORD *)(v10 + 64);
  if (a3 <= v11)
  {
    v13 = 0;
  }
  else if (v12 <= 3)
  {
    v15 = ((a3 - v11 + ~(-1 << (8 * v12))) >> (8 * v12)) + 1;
    if (HIWORD(v15))
    {
      v13 = &dword_4;
    }
    else if (v15 >= 0x100)
    {
      v13 = 2;
    }
    else
    {
      v13 = v15 > 1;
    }
  }
  else
  {
    v13 = &dword_0 + 1;
  }
  if (v11 < a2)
  {
    v14 = ~v11 + a2;
    if (v12 < 4)
    {
      if ((_DWORD)v12)
      {
        v16 = v14 & ~(-1 << (8 * v12));
        bzero(a1, v12);
        if ((_DWORD)v12 == 3)
        {
          *(_WORD *)a1 = v16;
          a1[2] = BYTE2(v16);
        }
        else if ((_DWORD)v12 == 2)
        {
          *(_WORD *)a1 = v16;
        }
        else
        {
          *a1 = v16;
        }
      }
    }
    else
    {
      bzero(a1, v12);
      *(_DWORD *)a1 = v14;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X14 }
}

void sub_4DD80(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_260910)
  {
    v2 = type metadata accessor for FontConstants.ListItem(255);
    v3 = type metadata accessor for Environment.Content(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_260910);
  }
}

uint64_t sub_4DDD4(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  return swift_getOpaqueTypeConformance2(&v3, &unk_22B024, 1);
}

uint64_t sub_4DE08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  __n128 v15;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = type metadata accessor for ListItemMetadataCreatorDescriptionView(0, v5, *(_QWORD *)(v4 + 24), a4);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v8 + 32) & ~v8;
  v10 = *(_QWORD *)(v7 + 64);
  v11 = (char *)(v4 + v9);
  v12 = sub_5440(&qword_25FAD0);
  if (swift_getEnumCaseMultiPayload(v4 + v9, v12) == 1)
  {
    v13 = &v11[*(int *)(type metadata accessor for FontConstants.Environment(0) + 24)];
    v14 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
  }
  else
  {
    v15 = swift_release(*(_QWORD *)v11);
  }
  (*(void (**)(char *, uint64_t, __n128))(*(_QWORD *)(v5 - 8) + 8))(&v11[*(int *)(v6 + 36)], v5, v15);
  return swift_deallocObject(v4, v9 + v10, v8 | 7);
}

uint64_t sub_4DEE8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = *(_QWORD *)(v3 + 16);
  v7 = *(_QWORD *)(v3 + 24);
  v8 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ListItemMetadataCreatorDescriptionView(0, v6, v7, a2)- 8)+ 80);
  return sub_4CA84(a1, v3 + ((v8 + 32) & ~v8), v6, v7, a3);
}

unint64_t sub_4DF50()
{
  unint64_t result;
  uint64_t v1;

  result = qword_260920;
  if (!qword_260920)
  {
    v1 = sub_7EF8(&qword_260918);
    sub_4DFB4();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_260920);
  }
  return result;
}

unint64_t sub_4DFB4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_260928;
  if (!qword_260928)
  {
    v1 = sub_7EF8(&qword_260930);
    sub_4E038();
    sub_6FD0((unint64_t *)&qword_25EEA0, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_260928);
  }
  return result;
}

unint64_t sub_4E038()
{
  unint64_t result;
  uint64_t v1;

  result = qword_260938;
  if (!qword_260938)
  {
    v1 = sub_7EF8(&qword_260940);
    sub_4E0BC();
    sub_7FD8(&qword_260960, &qword_260968, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_260938);
  }
  return result;
}

unint64_t sub_4E0BC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_260948;
  if (!qword_260948)
  {
    v1 = sub_7EF8(&qword_260950);
    sub_6FD0((unint64_t *)&qword_260958, type metadata accessor for DefaultBlendModeModifier, (uint64_t)&unk_1F136C);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_260948);
  }
  return result;
}

uint64_t sub_4E140(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_5440(&qword_260918);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_4E18C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DefaultBlendModeModifier(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_4E1D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DefaultBlendModeModifier(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_4E21C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_5440(&qword_260950);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_4E264()
{
  return sub_7FD8(&qword_260970, &qword_260978, (uint64_t)&protocol conformance descriptor for JetLocalize<A, B, C>);
}

uint64_t UberNavigationBackButtonView.body.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t OpaqueTypeConformance2;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[4];

  v0 = sub_5440(&qword_260980);
  v1 = type metadata accessor for _JetLocalizeDefaultWorking(0);
  v2 = type metadata accessor for _JetLocalizeDefaultFailed(0);
  v7[0] = sub_7EF8(&qword_260988);
  v7[1] = sub_7EF8(&qword_260990);
  v7[2] = sub_4EDB4();
  v7[3] = sub_7FD8(&qword_2609C8, &qword_260990, (uint64_t)&protocol conformance descriptor for TupleView<A>);
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v7, &opaque type descriptor for <<opaque return type of View.accessibilityShowsLargeContentViewer<A>(_:)>>, 1);
  v4 = sub_6FD0(&qword_25FEE0, (uint64_t (*)(uint64_t))&type metadata accessor for _JetLocalizeDefaultWorking, (uint64_t)&protocol conformance descriptor for _JetLocalizeDefaultWorking);
  v5 = sub_6FD0(&qword_25FEE8, (uint64_t (*)(uint64_t))&type metadata accessor for _JetLocalizeDefaultFailed, (uint64_t)&protocol conformance descriptor for _JetLocalizeDefaultFailed);
  return JetLocalize.init(working:failed:content:)(&j___s18_JetEngine_SwiftUI01_A22LocalizeDefaultWorkingVACycfC, 0, sub_4ED68, 0, sub_4E3E0, 0, v0, v1, v2, OpaqueTypeConformance2, v4, v5);
}

uint64_t sub_4E3E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t OpaqueTypeConformance2;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  char v88[16];
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  void *v94;

  v86 = a1;
  v87 = a2;
  v2 = type metadata accessor for LocalizerRequest(0);
  __chkstk_darwin(v2);
  v85 = (char *)&v68 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for AccessibilityChildBehavior(0);
  v83 = *(_QWORD *)(v4 - 8);
  v84 = v4;
  __chkstk_darwin(v4);
  v82 = (char *)&v68 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for AutomaticHoverEffect(0);
  v7 = *(_QWORD *)(v6 - 8);
  v79 = v6;
  v80 = v7;
  __chkstk_darwin(v6);
  v76 = (char *)&v68 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v71 = type metadata accessor for PlainButtonStyle(0);
  v73 = *(_QWORD *)(v71 - 8);
  __chkstk_darwin(v71);
  v10 = (char *)&v68 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for ActionMetrics(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v68 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_5440(qword_25E3E8);
  __chkstk_darwin(v14);
  v16 = (char *)&v68 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_5440(&qword_2609B0);
  v68 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v19 = (char *)&v68 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_5440(&qword_2609A8);
  v70 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20);
  v22 = (char *)&v68 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v72 = sub_5440(&qword_2609A0);
  v75 = *(_QWORD *)(v72 - 8);
  __chkstk_darwin(v72);
  v24 = (char *)&v68 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = sub_5440(&qword_2609E0);
  v26 = *(_QWORD *)(v25 - 8);
  v77 = v25;
  v78 = v26;
  __chkstk_darwin(v25);
  v69 = (char *)&v68 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v81 = sub_5440(&qword_260988);
  __chkstk_darwin(v81);
  v74 = (char *)&v68 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = type metadata accessor for ButtonRole(0);
  v30 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v16, 1, 1, v29);
  v31 = static ActionMetrics.notInstrumented.getter(v30);
  v32 = static Models.FlowBackAction.Dismissal.stackPop.getter(v31);
  v34 = v33;
  v93 = type metadata accessor for Models.FlowBackAction(0);
  v94 = &protocol witness table for Models.FlowBackAction;
  sub_C404(&v90);
  Models.FlowBackAction.init(actionMetrics:dismissal:)(v13, v32, v34);
  v35 = sub_5440(&qword_2609E8);
  v36 = sub_4EF9C();
  v37 = ActionButton.init(role:action:label:)(v16, &v90, sub_4EA60, 0, v35, v36);
  PlainButtonStyle.init()(v37);
  v38 = sub_7FD8(&qword_2609B8, &qword_2609B0, (uint64_t)&protocol conformance descriptor for ActionButton<A>);
  v39 = sub_6FD0(&qword_2609C0, (uint64_t (*)(uint64_t))&type metadata accessor for PlainButtonStyle, (uint64_t)&protocol conformance descriptor for PlainButtonStyle);
  v40 = v71;
  View.buttonStyle<A>(_:)(v10, v17, v71, v38, v39);
  (*(void (**)(char *, uint64_t))(v73 + 8))(v10, v40);
  v41 = (*(uint64_t (**)(char *, uint64_t))(v68 + 8))(v19, v17);
  v42 = v76;
  static CustomHoverEffect<>.automatic.getter(v41);
  v90 = v17;
  v91 = v40;
  v92 = v38;
  v93 = v39;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v90, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
  v44 = sub_6FD0((unint64_t *)&qword_25FDF0, (uint64_t (*)(uint64_t))&type metadata accessor for AutomaticHoverEffect, (uint64_t)&protocol conformance descriptor for AutomaticHoverEffect);
  v45 = v79;
  View.hoverEffect<A>(_:isEnabled:)(v42, 1, v20, v79, OpaqueTypeConformance2, v44);
  (*(void (**)(char *, uint64_t))(v80 + 8))(v42, v45);
  v46 = (*(uint64_t (**)(char *, uint64_t))(v70 + 8))(v22, v20);
  v47 = v82;
  static AccessibilityChildBehavior.combine.getter(v46);
  v90 = v20;
  v91 = v45;
  v92 = OpaqueTypeConformance2;
  v93 = v44;
  v48 = swift_getOpaqueTypeConformance2(&v90, &opaque type descriptor for <<opaque return type of View.hoverEffect<A>(_:isEnabled:)>>, 1);
  v49 = v69;
  v50 = v72;
  View.accessibilityElement(children:)(v47, v72, v48);
  (*(void (**)(char *, uint64_t))(v83 + 8))(v47, v84);
  v51 = v50;
  (*(void (**)(char *, uint64_t))(v75 + 8))(v24, v50);
  LOBYTE(v90) = 0;
  v52 = v85;
  SymbolImage.Kind.accessibilityLocalizable.getter();
  v53 = v86;
  sub_BD00(v86, (uint64_t)&v90);
  v54 = Text.init(_:localizer:)(v52, &v90);
  v56 = v55;
  v58 = v57;
  v60 = v59 & 1;
  v90 = v51;
  v91 = v48;
  v61 = swift_getOpaqueTypeConformance2(&v90, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
  v62 = (uint64_t)v74;
  v63 = v77;
  View.accessibilityLabel(_:)(v54, v56, v60, v58, v77, v61);
  sub_2B574(v54, v56, v60);
  swift_bridgeObjectRelease(v58);
  (*(void (**)(char *, uint64_t))(v78 + 8))(v49, v63);
  v89 = v53;
  v64 = sub_5440(&qword_260990);
  v65 = sub_4EDB4();
  v66 = sub_7FD8(&qword_2609C8, &qword_260990, (uint64_t)&protocol conformance descriptor for TupleView<A>);
  View.accessibilityShowsLargeContentViewer<A>(_:)(sub_4F0E8, v88, v81, v64, v65, v66);
  return sub_B414(v62, &qword_260988);
}

uint64_t sub_4EA60@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  char *v12;
  uint64_t v13;
  uint64_t KeyPath;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v18;

  v2 = type metadata accessor for Image.Scale(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for UseDarkColorSchemeWhenInVibrantContextViewModifier(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_5440(&qword_260A00);
  __chkstk_darwin(v9);
  v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v8 = swift_getKeyPath(&unk_1E3C70);
  v8[8] = 0;
  v12 = &v8[*(int *)(v6 + 20)];
  *(_QWORD *)v12 = swift_getKeyPath(&unk_1E3C98);
  v13 = sub_5440(&qword_25E948);
  swift_storeEnumTagMultiPayload(v12, v13, 0);
  v8[*(int *)(v6 + 24)] = 1;
  sub_4F100((uint64_t)v8, (uint64_t)&v11[*(int *)(v9 + 36)]);
  *v11 = 0;
  sub_4F144((uint64_t)v8);
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for Image.Scale.medium(_:), v2);
  KeyPath = swift_getKeyPath(&unk_1E3CC8);
  v15 = (uint64_t *)(a1 + *(int *)(sub_5440(&qword_2609E8) + 36));
  v16 = sub_5440(&qword_25FF30);
  (*(void (**)(char *, char *, uint64_t))(v3 + 16))((char *)v15 + *(int *)(v16 + 28), v5, v2);
  *v15 = KeyPath;
  sub_4F188((uint64_t)v11, a1);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return sub_B414((uint64_t)v11, &qword_260A00);
}

uint64_t sub_4EC50@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  _BYTE v17[40];

  v4 = type metadata accessor for LocalizerRequest(0);
  __chkstk_darwin(v4);
  v6 = &v17[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v7 = Image.init(systemName:)(0xD000000000000010, 0x80000000001F96D0);
  v17[0] = 0;
  SymbolImage.Kind.accessibilityLocalizable.getter();
  sub_BD00(a1, (uint64_t)v17);
  v8 = Text.init(_:localizer:)(v6, v17);
  v10 = v9;
  v12 = v11;
  *(_QWORD *)a2 = v7;
  *(_QWORD *)(a2 + 8) = v8;
  v14 = v13 & 1;
  *(_QWORD *)(a2 + 16) = v9;
  *(_BYTE *)(a2 + 24) = v13 & 1;
  *(_QWORD *)(a2 + 32) = v11;
  swift_retain(v7);
  sub_34B1C(v8, v10, v14);
  swift_bridgeObjectRetain(v12);
  sub_2B574(v8, v10, v14);
  swift_release(v7);
  return swift_bridgeObjectRelease(v12);
}

uint64_t sub_4ED68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_errorRetain(a1);
  swift_retain(a3);
  return _JetLocalizeDefaultFailed.init(error:retry:)(a1, a2, a3);
}

unint64_t sub_4EDB4()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t OpaqueTypeConformance2;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = qword_260998;
  if (!qword_260998)
  {
    v1 = sub_7EF8(&qword_260988);
    v2 = sub_7EF8(&qword_2609A0);
    v3 = sub_7EF8(&qword_2609A8);
    v4 = type metadata accessor for AutomaticHoverEffect(255);
    v8 = sub_7EF8(&qword_2609B0);
    v9 = type metadata accessor for PlainButtonStyle(255);
    v10 = sub_7FD8(&qword_2609B8, &qword_2609B0, (uint64_t)&protocol conformance descriptor for ActionButton<A>);
    v11 = sub_6FD0(&qword_2609C0, (uint64_t (*)(uint64_t))&type metadata accessor for PlainButtonStyle, (uint64_t)&protocol conformance descriptor for PlainButtonStyle);
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v8, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
    v6 = sub_6FD0((unint64_t *)&qword_25FDF0, (uint64_t (*)(uint64_t))&type metadata accessor for AutomaticHoverEffect, (uint64_t)&protocol conformance descriptor for AutomaticHoverEffect);
    v8 = v3;
    v9 = v4;
    v10 = OpaqueTypeConformance2;
    v11 = v6;
    v7 = swift_getOpaqueTypeConformance2(&v8, &opaque type descriptor for <<opaque return type of View.hoverEffect<A>(_:isEnabled:)>>, 1);
    v8 = v2;
    v9 = v7;
    swift_getOpaqueTypeConformance2(&v8, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
    sub_6FD0((unint64_t *)&qword_25EEA0, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_260998);
  }
  return result;
}

uint64_t sub_4EF50(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &opaque type descriptor for <<opaque return type of UberNavigationBackButtonView.body>>, 1);
}

ValueMetadata *type metadata accessor for UberNavigationBackButtonView()
{
  return &type metadata for UberNavigationBackButtonView;
}

uint64_t sub_4EF70()
{
  return sub_7FD8(&qword_2609D0, &qword_2609D8, (uint64_t)&protocol conformance descriptor for JetLocalize<A, B, C>);
}

unint64_t sub_4EF9C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2609F0;
  if (!qword_2609F0)
  {
    v1 = sub_7EF8(&qword_2609E8);
    sub_4F020();
    sub_7FD8((unint64_t *)&qword_260A18, &qword_25FF30, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_2609F0);
  }
  return result;
}

unint64_t sub_4F020()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2609F8;
  if (!qword_2609F8)
  {
    v1 = sub_7EF8(&qword_260A00);
    sub_4F0A4();
    sub_6FD0((unint64_t *)&qword_260A10, type metadata accessor for UseDarkColorSchemeWhenInVibrantContextViewModifier, (uint64_t)&unk_1E6FE8);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_2609F8);
  }
  return result;
}

unint64_t sub_4F0A4()
{
  unint64_t result;

  result = qword_260A08;
  if (!qword_260A08)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for BooksToolbarIconView, &type metadata for BooksToolbarIconView);
    atomic_store(result, (unint64_t *)&qword_260A08);
  }
  return result;
}

uint64_t sub_4F0E8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_4EC50(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_4F100(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UseDarkColorSchemeWhenInVibrantContextViewModifier(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_4F144(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for UseDarkColorSchemeWhenInVibrantContextViewModifier(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_4F188(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_5440(&qword_260A00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void **sub_4F1D0(void **a1, void **a2, uint64_t a3)
{
  int v4;
  char *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v5 = (char *)*a2;
  *a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = (void **)&v5[(v4 + 16) & ~(unint64_t)v4];
    swift_retain(v5);
  }
  else
  {
    v6 = *(int *)(a3 + 20);
    v7 = (uint64_t *)((char *)a1 + v6);
    v8 = (uint64_t *)((char *)a2 + v6);
    v9 = v5;
    v10 = sub_5440(&qword_25FA98);
    if (swift_getEnumCaseMultiPayload(v8, v10) == 1)
    {
      v11 = type metadata accessor for LayoutDirection(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v7, v8, v11);
      v12 = v7;
      v13 = v10;
      v14 = 1;
    }
    else
    {
      v15 = *v8;
      *v7 = *v8;
      swift_retain(v15);
      v12 = v7;
      v13 = v10;
      v14 = 0;
    }
    swift_storeEnumTagMultiPayload(v12, v13, v14);
  }
  return a1;
}

double sub_4F2A4(id *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  double result;

  v4 = (id *)((char *)a1 + *(int *)(a2 + 20));
  v5 = sub_5440(&qword_25FA98);
  if (swift_getEnumCaseMultiPayload(v4, v5) == 1)
  {
    v6 = type metadata accessor for LayoutDirection(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v4, v6);
  }
  else
  {
    *(_QWORD *)&result = swift_release(*v4).n128_u64[0];
  }
  return result;
}

void **sub_4F31C(void **a1, void **a2, uint64_t a3)
{
  void *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = *a2;
  *a1 = *a2;
  v5 = *(int *)(a3 + 20);
  v6 = (uint64_t *)((char *)a1 + v5);
  v7 = (uint64_t *)((char *)a2 + v5);
  v8 = v4;
  v9 = sub_5440(&qword_25FA98);
  if (swift_getEnumCaseMultiPayload(v7, v9) == 1)
  {
    v10 = type metadata accessor for LayoutDirection(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v6, v7, v10);
    v11 = 1;
  }
  else
  {
    v12 = *v7;
    *v6 = *v7;
    swift_retain(v12);
    v11 = 0;
  }
  swift_storeEnumTagMultiPayload(v6, v9, v11);
  return a1;
}

void **sub_4F3C4(void **a1, void **a2, uint64_t a3)
{
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = *a2;
  v7 = *a1;
  *a1 = *a2;
  v8 = v6;

  if (a1 != a2)
  {
    v9 = *(int *)(a3 + 20);
    v10 = (uint64_t *)((char *)a1 + v9);
    v11 = (uint64_t *)((char *)a2 + v9);
    sub_4F48C((uint64_t)a1 + v9);
    v12 = sub_5440(&qword_25FA98);
    if (swift_getEnumCaseMultiPayload(v11, v12) == 1)
    {
      v13 = type metadata accessor for LayoutDirection(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v10, v11, v13);
      v14 = 1;
    }
    else
    {
      v15 = *v11;
      *v10 = *v11;
      swift_retain(v15);
      v14 = 0;
    }
    swift_storeEnumTagMultiPayload(v10, v12, v14);
  }
  return a1;
}

uint64_t sub_4F48C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_5440(&qword_25FA98);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

_QWORD *sub_4F4CC(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = sub_5440(&qword_25FA98);
  if (swift_getEnumCaseMultiPayload(v6, v7) == 1)
  {
    v8 = type metadata accessor for LayoutDirection(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v5, v6, v8);
    swift_storeEnumTagMultiPayload(v5, v7, 1);
  }
  else
  {
    memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
  }
  return a1;
}

void **sub_4F574(void **a1, void **a2, uint64_t a3)
{
  void *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;

  v6 = *a1;
  *a1 = *a2;

  if (a1 != a2)
  {
    v7 = *(int *)(a3 + 20);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    sub_4F48C((uint64_t)a1 + v7);
    v10 = sub_5440(&qword_25FA98);
    if (swift_getEnumCaseMultiPayload(v9, v10) == 1)
    {
      v11 = type metadata accessor for LayoutDirection(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v8, v9, v11);
      swift_storeEnumTagMultiPayload(v8, v10, 1);
    }
    else
    {
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_4F63C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_4F648);
}

uint64_t sub_4F648(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_5440(&qword_260A20);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 20)], a2, v8);
  }
}

uint64_t sub_4F6C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_4F6D4);
}

char *sub_4F6D4(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = sub_5440(&qword_260A20);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for AlignmentImageView(uint64_t a1)
{
  uint64_t result;

  result = qword_260A80;
  if (!qword_260A80)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AlignmentImageView);
  return result;
}

void sub_4F788(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  sub_4F800(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(v2 - 8) + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
  }
}

void sub_4F800(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_260A90)
  {
    v2 = type metadata accessor for LayoutDirection(255);
    v3 = type metadata accessor for Environment.Content(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_260A90);
  }
}

uint64_t sub_4F854(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_22B0C4, 1);
}

uint64_t sub_4F864@<X0>(id *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  id v14;
  double v15;
  double v16;
  id v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  int v25;
  UIUserInterfaceLayoutDirection v26;
  double top;
  double left;
  double bottom;
  double right;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __n128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t result;
  uint64_t v46;
  double v47;
  double v48;
  double v49;
  uint64_t v50;
  uint64_t v51;
  UIEdgeInsets v52;

  v4 = type metadata accessor for Image.ResizingMode(0);
  v50 = *(_QWORD *)(v4 - 8);
  v51 = v4;
  __chkstk_darwin(v4);
  v6 = (char *)&v46 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for LayoutDirection(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v46 - v12;
  v14 = *a1;
  objc_msgSend(*a1, "size");
  v48 = v16;
  v49 = v15;
  v17 = objc_msgSend(v14, "alignmentRectInsets");
  v47 = v18;
  v20 = v19;
  v22 = v21;
  v24 = v23;
  objc_msgSend(v14, "alignmentRectInsets", GeometryProxy.size.getter(v17));
  UIEdgeInsets.negated()();
  type metadata accessor for AlignmentImageView(0);
  sub_31C80((uint64_t)v13);
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v11, v13, v7);
  v25 = (*(uint64_t (**)(char *, uint64_t))(v8 + 88))(v11, v7);
  v26 = UIUserInterfaceLayoutDirectionLeftToRight;
  if (v25 != enum case for LayoutDirection.leftToRight(_:))
  {
    if (v25 == enum case for LayoutDirection.rightToLeft(_:))
    {
      v26 = UIUserInterfaceLayoutDirectionRightToLeft;
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
      v26 = UIUserInterfaceLayoutDirectionLeftToRight;
    }
  }
  sub_4FDE8(0.0, 0.0, v49, v48, v47, v20, v22, v24);
  v52 = UIEdgeInsets.applyingLayoutDirection(_:)(v26);
  top = v52.top;
  left = v52.left;
  bottom = v52.bottom;
  right = v52.right;
  (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v7);
  v31 = Image.init(uiImage:)(*a1);
  v33 = v50;
  v32 = v51;
  (*(void (**)(char *, _QWORD, uint64_t))(v50 + 104))(v6, enum case for Image.ResizingMode.stretch(_:), v51);
  v34 = Image.resizable(capInsets:resizingMode:)(v6, v31, 0.0, 0.0, 0.0, 0.0);
  v35 = swift_release(v31);
  (*(void (**)(char *, uint64_t, __n128))(v33 + 8))(v6, v32, v35);
  v36 = EdgeInsets.init(_:)(top, left, bottom, right);
  v38 = v37;
  v40 = v39;
  v42 = v41;
  v44 = v43;
  result = static Edge.Set.all.getter(v36);
  *(_QWORD *)a2 = v34;
  *(_BYTE *)(a2 + 8) = result;
  *(_QWORD *)(a2 + 16) = v38;
  *(_QWORD *)(a2 + 24) = v40;
  *(_QWORD *)(a2 + 32) = v42;
  *(_QWORD *)(a2 + 40) = v44;
  *(_BYTE *)(a2 + 48) = 0;
  return result;
}

double sub_4FB40@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  void **v2;
  void **v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double result;
  uint64_t v26;

  v3 = v2;
  v5 = *(_QWORD *)(a1 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  __chkstk_darwin(a1);
  v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0();
  v10 = v9;
  sub_4FC64((uint64_t)v3, (uint64_t)v7);
  v11 = *(unsigned __int8 *)(v5 + 80);
  v12 = (v11 + 16) & ~v11;
  v13 = swift_allocObject(&unk_24D090, v12 + v6, v11 | 7);
  sub_4FD58((uint64_t)v7, v13 + v12);
  v14 = *v3;
  objc_msgSend(v14, "size");
  v16 = v15;
  v18 = v17;
  objc_msgSend(v14, "alignmentRectInsets");
  v23 = sub_4FDE8(0.0, 0.0, v16, v18, v19, v20, v21, v22);
  *(_QWORD *)a2 = v8;
  *(_QWORD *)(a2 + 8) = v10;
  *(_QWORD *)(a2 + 16) = sub_4FD9C;
  *(_QWORD *)(a2 + 24) = v13;
  result = v23 / v24;
  *(double *)(a2 + 32) = result;
  *(_WORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_4FC64(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AlignmentImageView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_4FCA8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v1 = type metadata accessor for AlignmentImageView(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);

  v6 = (_QWORD *)(v0 + v4 + *(int *)(v1 + 20));
  v7 = sub_5440(&qword_25FA98);
  if (swift_getEnumCaseMultiPayload(v6, v7) == 1)
  {
    v8 = type metadata accessor for LayoutDirection(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v6, v8);
  }
  else
  {
    swift_release(*v6);
  }
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_4FD58(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AlignmentImageView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_4FD9C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for AlignmentImageView(0) - 8) + 80);
  return sub_4F864((id *)(v1 + ((v3 + 16) & ~v3)), a1);
}

double sub_4FDE8(double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8)
{
  return a3 - (a6 + a8);
}

unint64_t sub_4FE00()
{
  unint64_t result;
  uint64_t v1;

  result = qword_260AC0;
  if (!qword_260AC0)
  {
    v1 = sub_7EF8(&qword_260AC8);
    sub_4FE6C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_260AC0);
  }
  return result;
}

unint64_t sub_4FE6C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_260AD0;
  if (!qword_260AD0)
  {
    v1 = sub_7EF8(&qword_260AD8);
    result = swift_getWitnessTable(&protocol conformance descriptor for ZStack<A>, v1);
    atomic_store(result, (unint64_t *)&qword_260AD0);
  }
  return result;
}

_QWORD *sub_4FEB8@<X0>(_BYTE *a1@<X8>)
{
  unint64_t v2;
  _QWORD *result;
  uint64_t v4;

  v2 = sub_220A8();
  result = EnvironmentValues.subscript.getter(&v4, &type metadata for IsVisibleFrameKey, &type metadata for IsVisibleFrameKey, v2);
  *a1 = v4;
  return result;
}

uint64_t sub_4FF04(char *a1)
{
  unint64_t v1;
  char v3;

  v3 = *a1;
  v1 = sub_220A8();
  return EnvironmentValues.subscript.setter(&v3, &type metadata for IsVisibleFrameKey, &type metadata for IsVisibleFrameKey, v1);
}

void sub_4FF4C()
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  type metadata accessor for Locale(0);
  v1 = ((uint64_t (*)(void))__chkstk_darwin)();
  __chkstk_darwin(v1);
  v2 = type metadata accessor for String.LocalizationValue(0);
  v3 = __chkstk_darwin(v2);
  __chkstk_darwin(v3);
  __asm { BR              X10 }
}

uint64_t sub_50030()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t ObjCClassFromMetadata;
  id v11;
  uint64_t v12;

  v8 = String.LocalizationValue.init(stringLiteral:)(0x617473206B6F6F42, 0xEF6E6F6369206B63);
  static Locale.current.getter(v8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v4, v2, v1);
  v9 = type metadata accessor for BundleFinder();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v9);
  v11 = objc_msgSend((id)objc_opt_self(NSBundle), "bundleForClass:", ObjCClassFromMetadata);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v3, v5, v0);
  v12 = String.init(localized:table:bundle:locale:comment:)(v4, 0, 0, v11, v3, "Accessibility string for finished series image", 46, 2);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v0);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v2, v1);
  return v12;
}

void sub_504CC()
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = type metadata accessor for Locale(0);
  v2 = __chkstk_darwin(v1);
  __chkstk_darwin(v2);
  v3 = type metadata accessor for String.LocalizationValue(0);
  v4 = __chkstk_darwin(v3);
  __chkstk_darwin(v4);
  __asm { BR              X10 }
}

uint64_t sub_505B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t ObjCClassFromMetadata;
  id v11;
  uint64_t v12;

  v8 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000016, 0x80000000001FAE30);
  static Locale.current.getter(v8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v4, v1, v0);
  v9 = type metadata accessor for BundleFinder();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v9);
  v11 = objc_msgSend((id)objc_opt_self(NSBundle), "bundleForClass:", ObjCClassFromMetadata);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v3, v2, v6);
  v12 = String.init(localized:table:bundle:locale:comment:)(v4, 0, 0, v11, v3, "Year in Review: Finished Series Highlight preheader.", 52, 2);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v2, v6);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v1, v0);
  return v12;
}

void sub_50AF8()
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = type metadata accessor for Locale(0);
  v6 = *(_QWORD *)(v1 - 8);
  v7 = v1;
  v2 = __chkstk_darwin(v1);
  __chkstk_darwin(v2);
  v3 = type metadata accessor for String.LocalizationValue(0);
  v4 = __chkstk_darwin(v3);
  __chkstk_darwin(v4);
  v5 = type metadata accessor for String.LocalizationValue.StringInterpolation(0);
  __chkstk_darwin(v5);
  __asm { BR              X10 }
}

uint64_t sub_50C14()
{
  uint64_t v0;
  uint64_t v1;

  swift_bridgeObjectRetain(v1);
  return v0;
}

void sub_50DB8()
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v5 = type metadata accessor for Locale(0);
  v1 = __chkstk_darwin(v5);
  __chkstk_darwin(v1);
  v4 = type metadata accessor for String.LocalizationValue(0);
  v2 = __chkstk_darwin(v4);
  __chkstk_darwin(v2);
  v3 = type metadata accessor for String.LocalizationValue.StringInterpolation(0);
  __chkstk_darwin(v3);
  __asm { BR              X10 }
}

uint64_t sub_50EEC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t ObjCClassFromMetadata;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  swift_bridgeObjectRetain(v7);
  String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)(12, 1);
  v9._countAndFlagsBits = 0x64656873696E6946;
  v9._object = (void *)0xEC000000206E6F20;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v9);
  v10._countAndFlagsBits = v6;
  v10._object = v7;
  String.LocalizationValue.StringInterpolation.appendInterpolation(_:)(v10);
  swift_bridgeObjectRelease(v7);
  v11._countAndFlagsBits = 0;
  v11._object = (void *)0xE000000000000000;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v11);
  v12 = String.LocalizationValue.init(stringInterpolation:)(v1);
  static Locale.current.getter(v12);
  v13 = v0;
  v14 = *(_QWORD *)(v8 - 136);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 16))(v5, v2, v14);
  v15 = type metadata accessor for BundleFinder();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v15);
  v17 = objc_msgSend((id)objc_opt_self(NSBundle), "bundleForClass:", ObjCClassFromMetadata);
  v18 = *(_QWORD *)(v8 - 144);
  v19 = *(_QWORD *)(v8 - 128);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16))(v4, v3, v19);
  v20 = String.init(localized:table:bundle:locale:comment:)(v5, 0, 0, v17, v4, "Year in Review: Finished Series Highlight frame subtitle", 56, 2);
  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v3, v19);
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v2, v14);
  return v20;
}

uint64_t HighlightFrameViewModel.init(kind:style:exposureData:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v7 = *(_QWORD *)(a1 + 48);
  v8 = *(_BYTE *)(a1 + 56);
  v9 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a4 = *(_OWORD *)a1;
  *(_OWORD *)(a4 + 16) = v9;
  *(_OWORD *)(a4 + 32) = *(_OWORD *)(a1 + 32);
  *(_QWORD *)(a4 + 48) = v7;
  *(_BYTE *)(a4 + 56) = v8;
  v10 = type metadata accessor for HighlightFrameViewModel(0);
  sub_21C88(a2, a4 + *(int *)(v10 + 20), type metadata accessor for HighlightCoverStyle);
  v11 = a4 + *(int *)(v10 + 24);
  v12 = type metadata accessor for YIRSourceData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v11, a3, v12);
}

uint64_t type metadata accessor for HighlightFrameViewModel(uint64_t a1)
{
  return sub_1FE90(a1, qword_260C08, (uint64_t)&nominal type descriptor for HighlightFrameViewModel);
}

uint64_t type metadata accessor for HighlightCoverStyle(uint64_t a1)
{
  return sub_1FE90(a1, qword_260B78, (uint64_t)&nominal type descriptor for HighlightCoverStyle);
}

uint64_t HighlightFrame.id.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for HighlightFrame(0) + 36));
  v2 = *v1;
  swift_bridgeObjectRetain(v1[1]);
  return v2;
}

uint64_t type metadata accessor for HighlightFrame(uint64_t a1)
{
  return sub_1FE90(a1, qword_260CA0, (uint64_t)&nominal type descriptor for HighlightFrame);
}

uint64_t HighlightFrame.alignment.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for HighlightFrame(0) + 40));
}

uint64_t HighlightFrame.sharableView.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v6;

  v1 = type metadata accessor for HighlightFrame(0);
  __chkstk_darwin(v1);
  v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1E428(v0, (uint64_t)v3, type metadata accessor for HighlightFrame);
  v4 = sub_6FD0(&qword_260AE0, type metadata accessor for HighlightFrame, (uint64_t)&protocol conformance descriptor for HighlightFrame);
  return AnyView.init<A>(_:)(v3, v1, v4);
}

uint64_t HighlightFrame.exposureData.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v3 = v1 + *(int *)(type metadata accessor for HighlightFrame(0) + 44);
  v4 = v3 + *(int *)(type metadata accessor for HighlightFrameViewModel(0) + 24);
  v5 = type metadata accessor for YIRSourceData(0);
  a1[3] = v5;
  a1[4] = sub_6FD0(&qword_25EFF0, (uint64_t (*)(uint64_t))&type metadata accessor for YIRSourceData, (uint64_t)&protocol conformance descriptor for YIRSourceData);
  a1[5] = sub_6FD0(&qword_25EFF8, (uint64_t (*)(uint64_t))&type metadata accessor for YIRSourceData, (uint64_t)&protocol conformance descriptor for YIRSourceData);
  v6 = sub_C404(a1);
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(v6, v4, v5);
}

uint64_t HighlightFrame.background.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;

  v3 = type metadata accessor for HighlightCoverStyle(0);
  __chkstk_darwin(v3);
  v5 = (uint64_t *)((char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = v1 + *(int *)(type metadata accessor for HighlightFrame(0) + 44);
  v7 = type metadata accessor for HighlightFrameViewModel(0);
  sub_1E428(v6 + *(int *)(v7 + 20), (uint64_t)v5, type metadata accessor for HighlightCoverStyle);
  if (swift_getEnumCaseMultiPayload(v5, v3) == 1)
  {
    swift_bridgeObjectRelease(v5[1]);
    v8 = v5[2];
    v9 = (uint64_t)v5 + *(int *)(sub_5440(&qword_260AE8) + 64);
    v10 = sub_5440(&qword_25E930);
    sub_167A4(v9, a1 + *(int *)(v10 + 48), &qword_25E928);
    *(_QWORD *)a1 = v8;
LABEL_9:
    v17 = type metadata accessor for PageBackground(0);
    v18 = a1;
    v19 = 0;
    return swift_storeEnumTagMultiPayload(v18, v17, v19);
  }
  v11 = *v5;
  swift_bridgeObjectRelease(v5[2]);
  if (*(_QWORD *)(v11 + 16))
  {
    sub_51C90(v11 + 32, (uint64_t)&v24);
  }
  else
  {
    v34 = 0;
    v32 = 0u;
    v33 = 0u;
    v30 = 0u;
    v31 = 0u;
    v28 = 0u;
    v29 = 0u;
    v26 = 0u;
    v27 = 0u;
    v24 = 0u;
    v25 = 0u;
  }
  swift_bridgeObjectRelease(v11);
  if (!*((_QWORD *)&v30 + 1))
  {
    sub_B414((uint64_t)&v24, &qword_260AF0);
    v20 = a1 + *(int *)(sub_5440(&qword_25E930) + 48);
    v21 = objc_msgSend((id)objc_opt_self(UIColor), "systemGray6Color");
    *(_QWORD *)a1 = Color.init(uiColor:)(v21);
    v22 = type metadata accessor for ColorScheme(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v20, 1, 1, v22);
    goto LABEL_9;
  }
  v43 = v32;
  v44 = v33;
  v45 = v34;
  v39 = v28;
  v40 = v29;
  v41 = v30;
  v42 = v31;
  v35 = v24;
  v36 = v25;
  v37 = v26;
  v38 = v27;
  v12 = v33;
  *(_OWORD *)(a1 + 128) = v32;
  *(_OWORD *)(a1 + 144) = v12;
  *(_QWORD *)(a1 + 160) = v45;
  v13 = v40;
  *(_OWORD *)(a1 + 64) = v39;
  *(_OWORD *)(a1 + 80) = v13;
  v14 = v42;
  *(_OWORD *)(a1 + 96) = v41;
  *(_OWORD *)(a1 + 112) = v14;
  v15 = v36;
  *(_OWORD *)a1 = v35;
  *(_OWORD *)(a1 + 16) = v15;
  v16 = v38;
  *(_OWORD *)(a1 + 32) = v37;
  *(_OWORD *)(a1 + 48) = v16;
  v17 = type metadata accessor for PageBackground(0);
  v18 = a1;
  v19 = 1;
  return swift_storeEnumTagMultiPayload(v18, v17, v19);
}

uint64_t sub_51C90(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for CoverViewModel(a2, a1);
  return a2;
}

uint64_t HighlightFrame.init(model:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  int *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  Swift::String v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v26;
  unint64_t v27;

  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  *a2 = swift_getKeyPath(&unk_1E3D88);
  v8 = sub_5440(&qword_25E948);
  swift_storeEnumTagMultiPayload(a2, v8, 0);
  v9 = (int *)type metadata accessor for HighlightFrame(0);
  v10 = (char *)a2 + v9[5];
  *(_QWORD *)v10 = swift_getKeyPath(&unk_1E3DB8);
  v10[8] = 0;
  v11 = (char *)a2 + v9[6];
  *(_QWORD *)v11 = swift_getKeyPath(&unk_1E3E00);
  v11[8] = 0;
  v12 = (char *)a2 + v9[7];
  *(_QWORD *)v12 = swift_getKeyPath(&unk_1E3E28);
  v12[8] = 0;
  v13 = (char *)a2 + v9[8];
  *(_QWORD *)v13 = swift_getKeyPath(&unk_1E3E58);
  v13[8] = 0;
  v14 = (_QWORD *)((char *)a2 + v9[9]);
  v26 = 0;
  v27 = 0xE000000000000000;
  _StringGuts.grow(_:)(17);
  v15 = swift_bridgeObjectRelease(v27);
  v26 = 0x6867696C68676948;
  v27 = 0xEF2D656D61724674;
  v16 = UUID.init()(v15);
  v17 = UUID.uuidString.getter(v16);
  v19 = v18;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  v20._countAndFlagsBits = v17;
  v20._object = v19;
  String.append(_:)(v20);
  v21 = swift_bridgeObjectRelease(v19);
  v22 = v27;
  *v14 = v26;
  v14[1] = v22;
  v23 = (_QWORD *)((char *)a2 + v9[10]);
  *v23 = static Alignment.top.getter(v21);
  v23[1] = v24;
  return sub_21C88(a1, (uint64_t)a2 + v9[11], type metadata accessor for HighlightFrameViewModel);
}

double HighlightFrame.body.getter@<D0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(_QWORD);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t KeyPath;
  uint64_t v19;
  double result;
  uint64_t v21;

  v2 = v1;
  v4 = sub_5440(&qword_25EE58);
  __chkstk_darwin(v4);
  v6 = (uint64_t *)((char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = type metadata accessor for ColorScheme(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for HighlightFrame(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  __chkstk_darwin(v11);
  sub_1E428(v2, (uint64_t)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), v14);
  v15 = *(unsigned __int8 *)(v12 + 80);
  v16 = (v15 + 16) & ~v15;
  v17 = swift_allocObject(&unk_24D0F8, v16 + v13, v15 | 7);
  sub_21C88((uint64_t)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), v17 + v16, type metadata accessor for HighlightFrame);
  KeyPath = swift_getKeyPath(&unk_1E3D88);
  (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v10, enum case for ColorScheme.dark(_:), v7);
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))((char *)v6 + *(int *)(v4 + 28), v10, v7);
  *v6 = KeyPath;
  v19 = sub_5440(&qword_260AF8);
  sub_B3D0((uint64_t)v6, (uint64_t)a1 + *(int *)(v19 + 36), &qword_25EE58);
  *a1 = sub_549D8;
  a1[1] = v17;
  swift_retain(v17);
  sub_B414((uint64_t)v6, &qword_25EE58);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  *(_QWORD *)&result = swift_release(v17).n128_u64[0];
  return result;
}

uint64_t sub_52094@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v6 = sub_5440(&qword_260D08);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v9 = static HorizontalAlignment.center.getter(v7);
  *((_QWORD *)v9 + 1) = 0x4040000000000000;
  v9[16] = 0;
  v10 = sub_5440(&qword_260D10);
  sub_52198(a2, a1, (uint64_t)&v9[*(int *)(v10 + 44)]);
  v11 = _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0();
  sub_87674(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, a3, 0.0, 1, INFINITY, 0, v11, v12);
  return sub_B414((uint64_t)v9, &qword_260D08);
}

uint64_t sub_52198@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  int *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t EnumCaseMultiPayload;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  double v67;
  double v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  char v75;
  double v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  double v92;
  uint64_t v93;
  double v94;
  double v95;
  double v96;
  uint64_t v97;
  char v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char v102;
  char v103;
  uint64_t v104;
  uint64_t v105;
  double v106;
  double v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  double v117;
  double v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  _OWORD *v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t *v136;
  uint64_t v137;
  uint64_t v138;
  char v139;
  char v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  _QWORD *v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  int *v160;
  _QWORD *v161;
  uint64_t v162;
  char *v163;
  char *v164;
  char *v165;
  char *v166;
  _QWORD *v167;
  uint64_t v168;
  uint64_t *v169;
  uint64_t v170;
  _QWORD *v171;
  uint64_t v172;
  uint64_t *v173;
  double v174;
  double v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  char *v180;
  uint64_t v181;
  _OWORD *v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  int v196;
  int v197;
  int v198;
  int v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  char *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  char *v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  char v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;

  v228 = a2;
  v232 = a3;
  v233 = sub_5440(&qword_260D18);
  __chkstk_darwin(v233);
  v226 = (uint64_t)&v200 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_5440(&qword_25FE08);
  __chkstk_darwin(v5);
  v219 = (char *)&v200 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_5440(&qword_260D20);
  __chkstk_darwin(v7);
  v223 = (char *)&v200 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v221 = sub_5440(&qword_260D28);
  v9 = __chkstk_darwin(v221);
  v224 = (uint64_t)&v200 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v9);
  v222 = (uint64_t)&v200 - v12;
  __chkstk_darwin(v11);
  v225 = (uint64_t)&v200 - v13;
  v14 = type metadata accessor for HighlightFrame(0);
  __chkstk_darwin(v14);
  v214 = (uint64_t)&v200 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_5440(&qword_260D30);
  __chkstk_darwin(v16);
  v18 = (char *)&v200 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_5440(&qword_260D38);
  __chkstk_darwin(v19);
  v206 = (uint64_t)&v200 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v203 = sub_5440(&qword_260D40);
  __chkstk_darwin(v203);
  v204 = (uint64_t)&v200 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v207 = sub_5440(&qword_260D48);
  __chkstk_darwin(v207);
  v209 = (uint64_t)&v200 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v217 = sub_5440(&qword_260D50);
  v23 = __chkstk_darwin(v217);
  v220 = (uint64_t)&v200 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = __chkstk_darwin(v23);
  v215 = (uint64_t)&v200 - v26;
  __chkstk_darwin(v25);
  v227 = (uint64_t)&v200 - v27;
  v229 = sub_5440(&qword_260D58);
  __chkstk_darwin(v229);
  v231 = (uint64_t)&v200 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v230 = sub_5440(&qword_260D60);
  __chkstk_darwin(v230);
  v218 = (uint64_t)&v200 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = sub_5440(&qword_260D68);
  __chkstk_darwin(v30);
  v32 = (char *)&v200 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v210 = sub_5440(&qword_260D70);
  v33 = __chkstk_darwin(v210);
  v213 = (uint64_t)&v200 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = __chkstk_darwin(v33);
  v211 = (uint64_t)&v200 - v36;
  __chkstk_darwin(v35);
  v216 = (uint64_t)&v200 - v37;
  v38 = sub_5440(&qword_260D78);
  __chkstk_darwin(v38);
  v40 = (char *)&v200 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  v202 = sub_5440(&qword_260D80);
  v41 = *(_QWORD *)(v202 - 8);
  __chkstk_darwin(v202);
  v201 = (uint64_t)&v200 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = sub_5440(&qword_260D88);
  v44 = __chkstk_darwin(v43);
  v208 = (uint64_t)&v200 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v44);
  v212 = (uint64_t)&v200 - v46;
  v47 = type metadata accessor for HighlightCoverStyle(0);
  __chkstk_darwin(v47);
  v49 = (uint64_t *)((char *)&v200 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0));
  v50 = (int *)v14;
  v51 = *(int *)(v14 + 44);
  v52 = a1;
  v53 = a1 + v51;
  v54 = *(int *)(type metadata accessor for HighlightFrameViewModel(0) + 20);
  v205 = v53;
  sub_1E428(v53 + v54, (uint64_t)v49, type metadata accessor for HighlightCoverStyle);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v49, v47);
  if ((_DWORD)EnumCaseMultiPayload == 1)
  {
    v56 = *v49;
    v57 = v49[1];
    swift_release(v49[2]);
    *(_QWORD *)v18 = static HorizontalAlignment.center.getter(v58);
    *((_QWORD *)v18 + 1) = 0;
    v18[16] = 1;
    sub_5440(&qword_260D90);
    v59 = v52;
    sub_54308(v56, v57);
    swift_bridgeObjectRelease(v57);
    v60 = _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0();
    v61 = v206;
    sub_8773C(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v206, 0.0, 1, INFINITY, 0, v60, v62);
    sub_B414((uint64_t)v18, &qword_260D30);
    v63 = v59 + v50[6];
    v64 = *(_QWORD *)v63;
    v65 = *(_BYTE *)(v63 + 8);
    sub_F9E4(*(_QWORD *)v63, v65);
    LOBYTE(v57) = sub_30DB4(v64, v65);
    v66 = sub_BE0C(v64, v65);
    if ((v57 & 1) != 0)
      v67 = 1.0;
    else
      v67 = 0.8;
    v68 = static UnitPoint.center.getter(v66);
    v70 = v69;
    v71 = v204;
    sub_B3D0(v61, v204, &qword_260D38);
    v72 = v71 + *(int *)(v203 + 36);
    *(double *)v72 = v67;
    *(double *)(v72 + 8) = v67;
    *(double *)(v72 + 16) = v68;
    *(_QWORD *)(v72 + 24) = v70;
    sub_B414(v61, &qword_260D38);
    v73 = *(_QWORD *)v63;
    v74 = *(_BYTE *)(v63 + 8);
    sub_F9E4(*(_QWORD *)v63, v74);
    v75 = sub_30DB4(v73, v74);
    sub_BE0C(v73, v74);
    if ((v75 & 1) != 0)
      v76 = 1.0;
    else
      v76 = 0.0;
    v77 = v209;
    sub_B3D0(v71, v209, &qword_260D40);
    *(double *)(v77 + *(int *)(v207 + 36)) = v76;
    sub_B414(v71, &qword_260D40);
    v78 = v59 + v50[7];
    v79 = *(_QWORD *)v78;
    v80 = *(_BYTE *)(v78 + 8);
    sub_F9E4(*(_QWORD *)v78, v80);
    v81 = sub_30DB4(v79, v80);
    sub_BE0C(v79, v80);
    v82 = v59;
    v83 = v214;
    sub_1E428(v82, v214, type metadata accessor for HighlightFrame);
    if ((v81 & 1) != 0)
    {
      sub_224DC(v83, type metadata accessor for HighlightFrame);
      v84 = 0;
      v85 = (uint64_t)v223;
      v86 = v227;
    }
    else
    {
      v100 = v83 + v50[8];
      v101 = *(_QWORD *)v100;
      v102 = *(_BYTE *)(v100 + 8);
      sub_F9E4(*(_QWORD *)v100, v102);
      v103 = sub_30DB4(v101, v102);
      sub_BE0C(v101, v102);
      sub_224DC(v83, type metadata accessor for HighlightFrame);
      v85 = (uint64_t)v223;
      v86 = v227;
      if ((v103 & 1) != 0 || UIAccessibilityIsReduceMotionEnabled())
      {
        v84 = 0;
      }
      else
      {
        v137 = static Animation.easeOut.getter();
        v84 = Animation.delay(_:)(0.05);
        swift_release(v137);
      }
    }
    v138 = *(_QWORD *)v63;
    v139 = *(_BYTE *)(v63 + 8);
    sub_F9E4(*(_QWORD *)v63, v139);
    v140 = sub_30DB4(v138, v139);
    sub_BE0C(v138, v139);
    v141 = v215;
    sub_B3D0(v77, v215, &qword_260D48);
    v142 = v141 + *(int *)(v217 + 36);
    *(_QWORD *)v142 = v84;
    *(_BYTE *)(v142 + 8) = v140 & 1;
    sub_B414(v77, &qword_260D48);
    v143 = sub_167A4(v141, v86, &qword_260D50);
    *(_QWORD *)v85 = static VerticalAlignment.top.getter(v143);
    *(_QWORD *)(v85 + 8) = 0x4030000000000000;
    *(_BYTE *)(v85 + 16) = 0;
    v144 = (_QWORD *)(v85 + *(int *)(sub_5440(&qword_260D98) + 44));
    sub_504CC();
    v223 = v145;
    v218 = v146;
    sub_50AF8();
    v217 = v147;
    v216 = v148;
    sub_50DB8();
    v215 = v149;
    v151 = v150;
    v152 = type metadata accessor for Font.Design(0);
    v153 = (uint64_t)v219;
    v154 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v152 - 8) + 56))(v219, 1, 1, v152);
    v155 = static HorizontalAlignment.leading.getter(v154);
    v156 = static Alignment.leading.getter(v155);
    v158 = v157;
    *v144 = swift_getKeyPath(&unk_1E4000);
    v159 = sub_5440(&qword_25F1E8);
    swift_storeEnumTagMultiPayload(v144, v159, 0);
    v160 = (int *)type metadata accessor for TextLockup(0);
    v161 = (_QWORD *)((char *)v144 + v160[5]);
    *v161 = swift_getKeyPath(&unk_1E4028);
    v162 = sub_5440(&qword_25F208);
    swift_storeEnumTagMultiPayload(v161, v162, 0);
    v163 = (char *)v144 + v160[6];
    *(_QWORD *)v163 = swift_getKeyPath(&unk_1E3E00);
    v163[8] = 0;
    v164 = (char *)v144 + v160[7];
    *(_QWORD *)v164 = swift_getKeyPath(&unk_1E4050);
    v164[8] = 0;
    v165 = (char *)v144 + v160[8];
    *(_QWORD *)v165 = swift_getKeyPath(&unk_1E3E28);
    v165[8] = 0;
    v166 = (char *)v144 + v160[9];
    *(_QWORD *)v166 = swift_getKeyPath(&unk_1E3E58);
    v166[8] = 0;
    *((_BYTE *)v144 + v160[10]) = 4;
    v167 = (_QWORD *)((char *)v144 + v160[11]);
    v168 = v218;
    *v167 = v223;
    v167[1] = v168;
    v169 = (_QWORD *)((char *)v144 + v160[12]);
    v170 = v216;
    *v169 = v217;
    v169[1] = v170;
    v169[2] = 0;
    v171 = (_QWORD *)((char *)v144 + v160[13]);
    *v171 = v215;
    v171[1] = v151;
    v172 = sub_167A4(v153, (uint64_t)v144 + v160[14], &qword_25FE08);
    *(_QWORD *)((char *)v144 + v160[15]) = v155;
    v173 = (_QWORD *)((char *)v144 + v160[16]);
    *v173 = v156;
    v173[1] = v158;
    *((_BYTE *)v144 + v160[17]) = 0;
    GeometryProxy.size.getter(v172);
    v175 = v174 * 0.3;
    v177 = static Alignment.top.getter(v176);
    v179 = v178;
    v180 = (char *)v49 + *(int *)(sub_5440(&qword_260AE8) + 64);
    LOBYTE(v199) = 1;
    LOBYTE(v197) = 1;
    _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(&v235, 0, 1, 0, 1, 0, 1, *(_QWORD *)&v175, 0, 0, v197, 0, v199, v177, v179);
    v181 = v222;
    sub_B3D0(v85, v222, &qword_260D20);
    v182 = (_OWORD *)(v181 + *(int *)(v221 + 36));
    v183 = v240;
    v182[4] = v239;
    v182[5] = v183;
    v182[6] = v241;
    v184 = v236;
    *v182 = v235;
    v182[1] = v184;
    v185 = v238;
    v182[2] = v237;
    v182[3] = v185;
    sub_B414(v85, &qword_260D20);
    v186 = v225;
    sub_167A4(v181, v225, &qword_260D28);
    v187 = v227;
    v188 = v220;
    sub_B3D0(v227, v220, &qword_260D50);
    v189 = v224;
    sub_B3D0(v186, v224, &qword_260D28);
    v190 = v226;
    sub_B3D0(v188, v226, &qword_260D50);
    v191 = sub_5440(&qword_260DA0);
    sub_B3D0(v189, v190 + *(int *)(v191 + 48), &qword_260D28);
    sub_B414(v189, &qword_260D28);
    sub_B414(v188, &qword_260D50);
    v192 = v231;
    sub_B3D0(v190, v231, &qword_260D18);
    swift_storeEnumTagMultiPayload(v192, v229, 1);
    v193 = sub_7FD8(&qword_260DA8, &qword_260D60, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    v194 = sub_7FD8(&qword_260DB0, &qword_260D18, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    _ConditionalContent<>.init(storage:)(v192, v230, v233, v193, v194);
    sub_B414(v190, &qword_260D18);
    sub_B414(v186, &qword_260D28);
    sub_B414(v187, &qword_260D50);
    v136 = &qword_25E928;
    v135 = (uint64_t)v180;
  }
  else
  {
    v87 = v52;
    v89 = *v49;
    v88 = v49[1];
    v90 = v49[2];
    v91 = v228;
    v92 = GeometryProxy.size.getter(EnumCaseMultiPayload);
    v94 = GeometryProxy.size.getter(v93);
    v96 = CGSize.aspectRatio.getter(v94, v95);
    v97 = v91;
    if (v96 < 0.6 || v96 > 0.8)
    {
      v99 = v41;
      if (v96 < 0.8 || v96 > 1.2)
      {
        if (v96 < 1.2)
          v98 = 3;
        else
          v98 = 0;
      }
      else
      {
        v98 = 1;
      }
    }
    else
    {
      v98 = 2;
      v99 = v41;
    }
    v234 = v98;
    SeriesHeaderCoverStackLayout.init(covers:pageWidth:heroWidthScale:)(v89, &v234, (char **)&v235, v92 + -32.0);
    v105 = v235;
    if ((_QWORD)v235)
    {
      v107 = *((double *)&v235 + 1);
      v106 = *(double *)&v236;
      *(_QWORD *)v40 = static HorizontalAlignment.center.getter(v104);
      *((_QWORD *)v40 + 1) = 0;
      v40[16] = 1;
      v108 = sub_5440(&qword_260DC8);
      sub_53470(v105, v87, (uint64_t)&v40[*(int *)(v108 + 44)], v107, v106);
      swift_bridgeObjectRelease(v105);
      v109 = _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0();
      v110 = v201;
      sub_876D8(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v201, 0.0, 1, INFINITY, 0, v109, v111);
      sub_B414((uint64_t)v40, &qword_260D78);
      v112 = v212;
      sub_167A4(v110, v212, &qword_260D80);
      v113 = 0;
    }
    else
    {
      v113 = 1;
      v112 = v212;
    }
    v114 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v99 + 56))(v112, v113, 1, v202);
    *(_QWORD *)v32 = static VerticalAlignment.top.getter(v114);
    *((_QWORD *)v32 + 1) = 0x4030000000000000;
    v32[16] = 0;
    v115 = sub_5440(&qword_260DB8);
    sub_53CBC(v87, v88, v90, v97, (uint64_t)&v32[*(int *)(v115 + 44)]);
    v116 = swift_bridgeObjectRelease(v90);
    GeometryProxy.size.getter(v116);
    v118 = v117 * 0.3;
    v120 = static Alignment.top.getter(v119);
    LOBYTE(v198) = 1;
    LOBYTE(v196) = 1;
    _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(&v235, 0, 1, 0, 1, 0, 1, *(_QWORD *)&v118, 0, 0, v196, 0, v198, v120, v121);
    v122 = v211;
    sub_B3D0((uint64_t)v32, v211, &qword_260D68);
    v123 = (_OWORD *)(v122 + *(int *)(v210 + 36));
    v124 = v240;
    v123[4] = v239;
    v123[5] = v124;
    v123[6] = v241;
    v125 = v236;
    *v123 = v235;
    v123[1] = v125;
    v126 = v238;
    v123[2] = v237;
    v123[3] = v126;
    sub_B414((uint64_t)v32, &qword_260D68);
    v127 = v216;
    sub_167A4(v122, v216, &qword_260D70);
    v128 = v208;
    sub_B3D0(v112, v208, &qword_260D88);
    v129 = v213;
    sub_B3D0(v127, v213, &qword_260D70);
    v130 = v218;
    sub_B3D0(v128, v218, &qword_260D88);
    v131 = sub_5440(&qword_260DC0);
    sub_B3D0(v129, v130 + *(int *)(v131 + 48), &qword_260D70);
    sub_B414(v129, &qword_260D70);
    sub_B414(v128, &qword_260D88);
    v132 = v231;
    sub_B3D0(v130, v231, &qword_260D60);
    swift_storeEnumTagMultiPayload(v132, v229, 0);
    v133 = sub_7FD8(&qword_260DA8, &qword_260D60, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    v134 = sub_7FD8(&qword_260DB0, &qword_260D18, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    _ConditionalContent<>.init(storage:)(v132, v230, v233, v133, v134);
    sub_B414(v130, &qword_260D60);
    sub_B414(v127, &qword_260D70);
    v135 = v112;
    v136 = &qword_260D88;
  }
  return sub_B414(v135, v136);
}

uint64_t sub_53470@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  double *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t KeyPath;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  double v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  double v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;

  v70 = a3;
  v61 = type metadata accessor for HighlightFrame(0);
  v9 = *(_QWORD *)(*(_QWORD *)(v61 - 8) + 64);
  v68 = *(_QWORD *)(v61 - 8);
  v69 = v9;
  __chkstk_darwin(v61);
  v66 = (uint64_t)&v56 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58 = sub_5440(&qword_25EE58);
  __chkstk_darwin(v58);
  v12 = (uint64_t)&v56 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for ColorScheme(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v56 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_5440(&qword_260DD0);
  __chkstk_darwin(v17);
  v19 = (double *)((char *)&v56 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  v60 = sub_5440(&qword_260DD8);
  __chkstk_darwin(v60);
  v21 = (char *)&v56 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v62 = sub_5440(&qword_260DE0);
  __chkstk_darwin(v62);
  v59 = (uint64_t)&v56 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = sub_5440(&qword_260DE8);
  __chkstk_darwin(v64);
  v63 = (uint64_t)&v56 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v67 = sub_5440(&qword_260DF0);
  __chkstk_darwin(v67);
  v65 = (uint64_t)&v56 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain(a1);
  sub_31378((uint64_t)v16);
  KeyPath = swift_getKeyPath(&unk_1E4078);
  (*(void (**)(uint64_t, char *, uint64_t))(v14 + 16))(v12 + *(int *)(v58 + 28), v16, v13);
  *(_QWORD *)v12 = KeyPath;
  sub_B3D0(v12, (uint64_t)v19 + *(int *)(v17 + 36), &qword_25EE58);
  *(_QWORD *)v19 = a1;
  v19[1] = a4;
  v19[2] = a5;
  *((_BYTE *)v19 + 24) = 0;
  swift_bridgeObjectRetain(a1);
  sub_B414(v12, &qword_25EE58);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  swift_bridgeObjectRelease(a1);
  v26 = a2 + *(int *)(v61 + 24);
  v57 = a2;
  v27 = *(_QWORD *)v26;
  LOBYTE(v13) = *(_BYTE *)(v26 + 8);
  sub_F9E4(*(_QWORD *)v26, v13);
  LOBYTE(v12) = sub_30DB4(v27, v13);
  v28 = sub_BE0C(v27, v13);
  if ((v12 & 1) != 0)
    v29 = 1.0;
  else
    v29 = 0.8;
  v30 = static UnitPoint.center.getter(v28);
  v32 = v31;
  sub_B3D0((uint64_t)v19, (uint64_t)v21, &qword_260DD0);
  v33 = &v21[*(int *)(v60 + 36)];
  *(double *)v33 = v29;
  *((double *)v33 + 1) = v29;
  *((double *)v33 + 2) = v30;
  *((_QWORD *)v33 + 3) = v32;
  sub_B414((uint64_t)v19, &qword_260DD0);
  v34 = *(_QWORD *)v26;
  v35 = *(_BYTE *)(v26 + 8);
  sub_F9E4(*(_QWORD *)v26, v35);
  v36 = sub_30DB4(v34, v35);
  sub_BE0C(v34, v35);
  v37 = v66;
  sub_1E428(a2, v66, type metadata accessor for HighlightFrame);
  v38 = *(unsigned __int8 *)(v68 + 80);
  v39 = (v38 + 16) & ~v38;
  v40 = v39 + v69;
  v41 = v38 | 7;
  v42 = swift_allocObject(&unk_24D230, v39 + v69, v38 | 7);
  sub_21C88(v37, v42 + v39, type metadata accessor for HighlightFrame);
  v43 = v59;
  sub_B3D0((uint64_t)v21, v59, &qword_260DD8);
  v44 = v43 + *(int *)(v62 + 36);
  *(_BYTE *)v44 = v36 & 1;
  *(_QWORD *)(v44 + 8) = sub_577F4;
  *(_QWORD *)(v44 + 16) = v42;
  sub_B414((uint64_t)v21, &qword_260DD8);
  v45 = *(_QWORD *)v26;
  LOBYTE(v42) = *(_BYTE *)(v26 + 8);
  sub_F9E4(*(_QWORD *)v26, v42);
  v46 = sub_30DB4(v45, v42);
  sub_BE0C(v45, v42);
  if ((v46 & 1) != 0)
    v47 = 1.0;
  else
    v47 = 0.8;
  v48 = v63;
  sub_B3D0(v43, v63, &qword_260DE0);
  *(double *)(v48 + *(int *)(v64 + 36)) = v47;
  sub_B414(v43, &qword_260DE0);
  v49 = *(_QWORD *)v26;
  v50 = *(_BYTE *)(v26 + 8);
  sub_F9E4(*(_QWORD *)v26, v50);
  v51 = sub_30DB4(v49, v50);
  sub_BE0C(v49, v50);
  sub_1E428(v57, v37, type metadata accessor for HighlightFrame);
  v52 = swift_allocObject(&unk_24D258, v40, v41);
  sub_21C88(v37, v52 + v39, type metadata accessor for HighlightFrame);
  v53 = v65;
  sub_B3D0(v48, v65, &qword_260DE8);
  v54 = v53 + *(int *)(v67 + 36);
  *(_BYTE *)v54 = v51 & 1;
  *(_QWORD *)(v54 + 8) = sub_57804;
  *(_QWORD *)(v54 + 16) = v52;
  sub_B414(v48, &qword_260DE8);
  return sub_167A4(v53, v70, &qword_260DF0);
}

uint64_t sub_53A08(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  __n128 v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char v15;
  char v16;
  uint64_t v17;
  uint64_t v19;

  v3 = type metadata accessor for HighlightFrame(0);
  v4 = __chkstk_darwin(v3);
  v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a2 + *(int *)(v4 + 28);
  v8 = *(_QWORD *)v7;
  v9 = *(_BYTE *)(v7 + 8);
  sub_F9E4(*(_QWORD *)v7, v9);
  v10 = sub_30DB4(v8, v9);
  sub_BE0C(v8, v9);
  sub_1E428(a2, (uint64_t)v6, type metadata accessor for HighlightFrame);
  if ((v10 & 1) != 0)
  {
    sub_224DC((uint64_t)v6, type metadata accessor for HighlightFrame);
    v12 = 0;
  }
  else
  {
    v13 = &v6[*(int *)(v3 + 32)];
    v14 = *(_QWORD *)v13;
    v15 = v13[8];
    sub_F9E4(*(_QWORD *)v13, v15);
    v16 = sub_30DB4(v14, v15);
    sub_BE0C(v14, v15);
    sub_224DC((uint64_t)v6, type metadata accessor for HighlightFrame);
    if ((v16 & 1) != 0 || UIAccessibilityIsReduceMotionEnabled())
    {
      v12 = 0;
    }
    else
    {
      v17 = static Animation.easeOut.getter();
      v12 = Animation.delay(_:)(0.05);
      v11 = swift_release(v17);
    }
  }
  return Transaction.animation.setter(v12, v11);
}

uint64_t sub_53B6C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  __n128 v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char v15;
  char v16;
  _BOOL8 IsReduceMotionEnabled;
  uint64_t v19;

  v3 = type metadata accessor for HighlightFrame(0);
  v4 = __chkstk_darwin(v3);
  v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a2 + *(int *)(v4 + 28);
  v8 = *(_QWORD *)v7;
  v9 = *(_BYTE *)(v7 + 8);
  sub_F9E4(*(_QWORD *)v7, v9);
  v10 = sub_30DB4(v8, v9);
  sub_BE0C(v8, v9);
  sub_1E428(a2, (uint64_t)v6, type metadata accessor for HighlightFrame);
  if ((v10 & 1) != 0)
  {
    sub_224DC((uint64_t)v6, type metadata accessor for HighlightFrame);
    v12 = 0;
  }
  else
  {
    v13 = &v6[*(int *)(v3 + 32)];
    v14 = *(_QWORD *)v13;
    v15 = v13[8];
    sub_F9E4(*(_QWORD *)v13, v15);
    v16 = sub_30DB4(v14, v15);
    sub_BE0C(v14, v15);
    sub_224DC((uint64_t)v6, type metadata accessor for HighlightFrame);
    if ((v16 & 1) != 0 || (IsReduceMotionEnabled = UIAccessibilityIsReduceMotionEnabled()))
      v12 = 0;
    else
      v12 = static Animation.easeIn(duration:)(IsReduceMotionEnabled, 0.15);
  }
  return Transaction.animation.setter(v12, v11);
}

uint64_t sub_53CBC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  char *v41;
  _QWORD *v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t ObjCClassFromMetadata;
  void *v54;
  uint64_t v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  __n128 v62;
  uint64_t v63;
  double v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD v97[2];
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  uint64_t v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  uint64_t v115;
  _OWORD v116[8];
  uint64_t v117;

  v86 = a4;
  v80 = a2;
  v81 = a3;
  v92 = a1;
  v96 = a5;
  v6 = type metadata accessor for Image.ResizingMode(0);
  v83 = *(_QWORD *)(v6 - 8);
  v84 = v6;
  __chkstk_darwin(v6);
  v82 = (char *)&v79 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_5440(&qword_260DF8);
  v9 = __chkstk_darwin(v8);
  v95 = (uint64_t)&v79 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v94 = (char *)&v79 - v11;
  v12 = sub_5440(&qword_25FE08);
  __chkstk_darwin(v12);
  v14 = (uint64_t)&v79 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = (int *)type metadata accessor for TextLockup(0);
  v16 = __chkstk_darwin(v15);
  v93 = (uint64_t)&v79 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v19 = (uint64_t *)((char *)&v79 - v18);
  v20 = type metadata accessor for HighlightFrame(0);
  v21 = a1 + *(int *)(v20 + 44);
  sub_504CC();
  v90 = v23;
  v91 = v22;
  sub_50AF8();
  v88 = v25;
  v89 = v24;
  v85 = v21;
  sub_50DB8();
  v87 = v26;
  v28 = v27;
  v29 = type metadata accessor for Font.Design(0);
  v30 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v14, 1, 1, v29);
  v31 = static HorizontalAlignment.leading.getter(v30);
  v32 = static Alignment.leading.getter(v31);
  v34 = v33;
  *v19 = swift_getKeyPath(&unk_1E4000);
  v35 = sub_5440(&qword_25F1E8);
  swift_storeEnumTagMultiPayload(v19, v35, 0);
  v36 = (_QWORD *)((char *)v19 + v15[5]);
  *v36 = swift_getKeyPath(&unk_1E4028);
  v37 = sub_5440(&qword_25F208);
  swift_storeEnumTagMultiPayload(v36, v37, 0);
  v38 = (char *)v19 + v15[6];
  *(_QWORD *)v38 = swift_getKeyPath(&unk_1E3E00);
  v38[8] = 0;
  v39 = (char *)v19 + v15[7];
  *(_QWORD *)v39 = swift_getKeyPath(&unk_1E4050);
  v39[8] = 0;
  v40 = (char *)v19 + v15[8];
  *(_QWORD *)v40 = swift_getKeyPath(&unk_1E3E28);
  v40[8] = 0;
  v41 = (char *)v19 + v15[9];
  *(_QWORD *)v41 = swift_getKeyPath(&unk_1E3E58);
  v41[8] = 0;
  *((_BYTE *)v19 + v15[10]) = 4;
  v42 = (_QWORD *)((char *)v19 + v15[11]);
  v43 = v90;
  *v42 = v91;
  v42[1] = v43;
  v44 = (_QWORD *)((char *)v19 + v15[12]);
  v45 = v88;
  *v44 = v89;
  v44[1] = v45;
  v44[2] = 0;
  v46 = (_QWORD *)((char *)v19 + v15[13]);
  *v46 = v87;
  v46[1] = v28;
  sub_167A4(v14, (uint64_t)v19 + v15[14], &qword_25FE08);
  *(_QWORD *)((char *)v19 + v15[15]) = v31;
  v47 = (_QWORD *)((char *)v19 + v15[16]);
  *v47 = v32;
  v47[1] = v34;
  *((_BYTE *)v19 + v15[17]) = 0;
  v48 = v92 + *(int *)(v20 + 20);
  v49 = *(_QWORD *)v48;
  LOBYTE(v32) = *(_BYTE *)(v48 + 8);
  sub_F9E4(*(_QWORD *)v48, v32);
  LOBYTE(v14) = sub_30DB4(v49, v32);
  sub_BE0C(v49, v32);
  if ((v14 & 1) != 0)
  {
    v50 = sub_5440(&qword_260E10);
    v51 = (uint64_t)v94;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 56))(v94, 1, 1, v50);
  }
  else
  {
    v52 = type metadata accessor for BundleFinder();
    ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v52);
    v54 = (void *)objc_opt_self(NSBundle);
    v55 = v81;
    swift_bridgeObjectRetain(v81);
    v56 = objc_msgSend(v54, "bundleForClass:", ObjCClassFromMetadata);
    v57 = Image.init(_:bundle:)(v80, v55, v56);
    v59 = v82;
    v58 = v83;
    v60 = v84;
    (*(void (**)(char *, _QWORD, uint64_t))(v83 + 104))(v82, enum case for Image.ResizingMode.stretch(_:), v84);
    v61 = Image.resizable(capInsets:resizingMode:)(v59, v57, 0.0, 0.0, 0.0, 0.0);
    v62 = swift_release(v57);
    v63 = (*(uint64_t (**)(char *, uint64_t, __n128))(v58 + 8))(v59, v60, v62);
    v64 = GeometryProxy.size.getter(v63) * 0.2;
    v65 = _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0();
    sub_877A0(0.0, 1, 0.0, 1, v64, 0, 0.0, 1, (uint64_t)&v107, 0.0, 1, 0.0, 1, v65, v66, v61, 0, 1);
    swift_release(v61);
    v116[6] = v113;
    v116[7] = v114;
    v116[2] = v109;
    v116[3] = v110;
    v116[4] = v111;
    v116[5] = v112;
    v116[0] = v107;
    v116[1] = v108;
    v104 = v113;
    v105 = v114;
    v100 = v109;
    v101 = v110;
    v102 = v111;
    v103 = v112;
    v117 = v115;
    v106 = v115;
    v98 = v107;
    v99 = v108;
    sub_4FF4C();
    v68 = v67;
    v97[0] = v69;
    v97[1] = v67;
    v70 = sub_5440(&qword_260E00);
    v71 = sub_5785C();
    v72 = sub_C57C();
    v51 = (uint64_t)v94;
    View.accessibilityLabel<A>(_:)(v97, v70, &type metadata for String, v71, v72);
    swift_bridgeObjectRelease(v68);
    sub_578C8(v116);
    v73 = sub_5440(&qword_260E10);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v73 - 8) + 56))(v51, 0, 1, v73);
  }
  v74 = v93;
  sub_1E428((uint64_t)v19, v93, type metadata accessor for TextLockup);
  v75 = v95;
  sub_B3D0(v51, v95, &qword_260DF8);
  v76 = v96;
  sub_1E428(v74, v96, type metadata accessor for TextLockup);
  v77 = sub_5440(&qword_260E18);
  sub_B3D0(v75, v76 + *(int *)(v77 + 48), &qword_260DF8);
  sub_B414(v51, &qword_260DF8);
  sub_224DC((uint64_t)v19, type metadata accessor for TextLockup);
  sub_B414(v75, &qword_260DF8);
  return sub_224DC(v74, type metadata accessor for TextLockup);
}

uint64_t sub_54308(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t ObjCClassFromMetadata;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD v22[4];
  __int16 v23;

  v4 = type metadata accessor for Image.ResizingMode(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v22[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for BundleFinder();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v8);
  v10 = (void *)objc_opt_self(NSBundle);
  swift_bridgeObjectRetain(a2);
  v11 = Image.init(_:bundle:)(a1, a2, objc_msgSend(v10, "bundleForClass:", ObjCClassFromMetadata));
  (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for Image.ResizingMode.stretch(_:), v4);
  v12 = Image.resizable(capInsets:resizingMode:)(v7, v11, 0.0, 0.0, 0.0, 0.0);
  v13 = swift_release(v11);
  (*(void (**)(char *, uint64_t, __n128))(v5 + 8))(v7, v4, v13);
  v22[2] = v12;
  v22[3] = 0;
  v23 = 1;
  type metadata accessor for HighlightFrame(0);
  sub_4FF4C();
  v15 = v14;
  v22[0] = v16;
  v22[1] = v14;
  v17 = sub_5440(&qword_260390);
  v18 = sub_4522C();
  v19 = sub_C57C();
  View.accessibilityLabel<A>(_:)(v22, v17, &type metadata for String, v18, v19);
  swift_release(v12);
  return swift_bridgeObjectRelease(v15);
}

uint64_t sub_544B4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v8;

  v3 = __chkstk_darwin(v1);
  v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1E428(v3, (uint64_t)v5, type metadata accessor for HighlightFrame);
  v6 = sub_6FD0(&qword_260AE0, type metadata accessor for HighlightFrame, (uint64_t)&protocol conformance descriptor for HighlightFrame);
  return AnyView.init<A>(_:)(v5, a1, v6);
}

uint64_t ListItemMetadataRecommendationCreatorDescriptorBase.description.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v2 = (uint64_t *)(v1 + *(int *)(a1 + 36));
  v3 = *v2;
  swift_bridgeObjectRetain(v2[1]);
  return v3;
}

uint64_t sub_54580(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 40));
}

uint64_t sub_54590@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v2 + *(int *)(a1 + 44);
  v5 = v4 + *(int *)(type metadata accessor for HighlightFrameViewModel(0) + 24);
  v6 = type metadata accessor for YIRSourceData(0);
  a2[3] = v6;
  a2[4] = sub_6FD0(&qword_25EFF0, (uint64_t (*)(uint64_t))&type metadata accessor for YIRSourceData, (uint64_t)&protocol conformance descriptor for YIRSourceData);
  a2[5] = sub_6FD0(&qword_25EFF8, (uint64_t (*)(uint64_t))&type metadata accessor for YIRSourceData, (uint64_t)&protocol conformance descriptor for YIRSourceData);
  v7 = sub_C404(a2);
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(v7, v5, v6);
}

double sub_54634@<D0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t KeyPath;
  uint64_t v19;
  double result;
  uint64_t v21[2];

  v4 = sub_5440(&qword_25EE58);
  __chkstk_darwin(v4);
  v6 = (uint64_t *)((char *)v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = type metadata accessor for ColorScheme(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(a1 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  __chkstk_darwin(v9);
  v14 = (char *)v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1E428(v21[1], (uint64_t)v14, type metadata accessor for HighlightFrame);
  v15 = *(unsigned __int8 *)(v12 + 80);
  v16 = (v15 + 16) & ~v15;
  v17 = swift_allocObject(&unk_24D208, v16 + v13, v15 | 7);
  sub_21C88((uint64_t)v14, v17 + v16, type metadata accessor for HighlightFrame);
  KeyPath = swift_getKeyPath(&unk_1E3D88);
  (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v11, enum case for ColorScheme.dark(_:), v7);
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))((char *)v6 + *(int *)(v4 + 28), v11, v7);
  *v6 = KeyPath;
  v19 = sub_5440(&qword_260AF8);
  sub_B3D0((uint64_t)v6, (uint64_t)a2 + *(int *)(v19 + 36), &qword_25EE58);
  *a2 = sub_549D8;
  a2[1] = v17;
  swift_retain(v17);
  sub_B414((uint64_t)v6, &qword_25EE58);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  *(_QWORD *)&result = swift_release(v17).n128_u64[0];
  return result;
}

_QWORD *sub_54820@<X0>(_BYTE *a1@<X8>)
{
  unint64_t v2;
  _QWORD *result;
  uint64_t v4;

  v2 = sub_220A8();
  result = EnvironmentValues.subscript.getter(&v4, &type metadata for IsVisibleFrameKey, &type metadata for IsVisibleFrameKey, v2);
  *a1 = v4;
  return result;
}

uint64_t sub_5486C(char *a1)
{
  unint64_t v1;
  char v3;

  v3 = *a1;
  v1 = sub_220A8();
  return EnvironmentValues.subscript.setter(&v3, &type metadata for IsVisibleFrameKey, &type metadata for IsVisibleFrameKey, v1);
}

uint64_t sub_548B4@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.accessibilityVoiceOverEnabled.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_548E0@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.accessibilityVoiceOverEnabled.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_5490C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.accessibilitySwitchControlEnabled.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_54938@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.accessibilitySwitchControlEnabled.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_54968(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned __int8 a8)
{
  uint64_t result;

  if (a8 < 2u)
  {
    a5 = a2;
    a7 = a4;
LABEL_6:
    swift_bridgeObjectRelease(a5);
    a2 = a7;
    return swift_bridgeObjectRelease(a2);
  }
  if (a8 - 4 >= 2)
  {
    if (a8 != 3)
      return result;
    swift_bridgeObjectRelease(a3);
    goto LABEL_6;
  }
  return swift_bridgeObjectRelease(a2);
}

uint64_t sub_549DC(uint64_t a1)
{
  uint64_t result;

  result = sub_6FD0(&qword_260B00, type metadata accessor for HighlightFrame, (uint64_t)&protocol conformance descriptor for HighlightFrame);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_54A18(uint64_t a1)
{
  uint64_t result;

  result = sub_6FD0(&qword_260AE0, type metadata accessor for HighlightFrame, (uint64_t)&protocol conformance descriptor for HighlightFrame);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_54A54(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &opaque type descriptor for <<opaque return type of HighlightFrame.body>>, 1);
}

uint64_t *initializeBufferWithCopyOfBuffer for HighlightCoverStyle(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v15);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
    {
      v7 = a2[1];
      *a1 = *a2;
      a1[1] = v7;
      v8 = a2[2];
      a1[2] = v8;
      swift_bridgeObjectRetain(v7);
      swift_retain(v8);
      v9 = *(int *)(sub_5440(&qword_260AE8) + 64);
      v10 = (char *)a1 + v9;
      v11 = (char *)a2 + v9;
      v12 = type metadata accessor for ColorScheme(0);
      v13 = *(_QWORD *)(v12 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
      {
        v14 = sub_5440(&qword_25E928);
        memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
      }
      v19 = a1;
      v20 = a3;
      v21 = 1;
    }
    else
    {
      v16 = *a2;
      v17 = a2[1];
      *a1 = *a2;
      a1[1] = v17;
      v18 = a2[2];
      a1[2] = v18;
      swift_bridgeObjectRetain(v16);
      swift_bridgeObjectRetain(v18);
      v19 = a1;
      v20 = a3;
      v21 = 0;
    }
    swift_storeEnumTagMultiPayload(v19, v20, v21);
  }
  return a1;
}

uint64_t destroy for HighlightCoverStyle(_QWORD *a1, uint64_t a2)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  if (swift_getEnumCaseMultiPayload(a1, a2) == 1)
  {
    swift_bridgeObjectRelease(a1[1]);
    swift_release(a1[2]);
    v3 = (char *)a1 + *(int *)(sub_5440(&qword_260AE8) + 64);
    v4 = type metadata accessor for ColorScheme(0);
    v5 = *(_QWORD *)(v4 - 8);
    result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4);
    if (!(_DWORD)result)
      return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v3, v4);
  }
  else
  {
    swift_bridgeObjectRelease(*a1);
    return swift_bridgeObjectRelease(a1[2]);
  }
  return result;
}

_QWORD *initializeWithCopy for HighlightCoverStyle(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
  {
    v6 = a2[1];
    *a1 = *a2;
    a1[1] = v6;
    v7 = a2[2];
    a1[2] = v7;
    swift_bridgeObjectRetain(v6);
    swift_retain(v7);
    v8 = *(int *)(sub_5440(&qword_260AE8) + 64);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for ColorScheme(0);
    v12 = *(_QWORD *)(v11 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
    {
      v13 = sub_5440(&qword_25E928);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
      v14 = 1;
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
      v14 = 1;
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
  }
  else
  {
    v15 = *a2;
    v16 = a2[1];
    *a1 = *a2;
    a1[1] = v16;
    v17 = a2[2];
    a1[2] = v17;
    swift_bridgeObjectRetain(v15);
    swift_bridgeObjectRetain(v17);
    v14 = 0;
  }
  swift_storeEnumTagMultiPayload(a1, a3, v14);
  return a1;
}

_QWORD *assignWithCopy for HighlightCoverStyle(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (a1 != a2)
  {
    sub_224DC((uint64_t)a1, type metadata accessor for HighlightCoverStyle);
    if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
    {
      *a1 = *a2;
      v6 = a2[1];
      a1[1] = v6;
      v7 = a2[2];
      a1[2] = v7;
      swift_bridgeObjectRetain(v6);
      swift_retain(v7);
      v8 = *(int *)(sub_5440(&qword_260AE8) + 64);
      v9 = (char *)a1 + v8;
      v10 = (char *)a2 + v8;
      v11 = type metadata accessor for ColorScheme(0);
      v12 = *(_QWORD *)(v11 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
      {
        v13 = sub_5440(&qword_25E928);
        memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
        v14 = 1;
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
        v14 = 1;
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
      }
    }
    else
    {
      v15 = *a2;
      *a1 = *a2;
      a1[1] = a2[1];
      v16 = a2[2];
      a1[2] = v16;
      swift_bridgeObjectRetain(v15);
      swift_bridgeObjectRetain(v16);
      v14 = 0;
    }
    swift_storeEnumTagMultiPayload(a1, a3, v14);
  }
  return a1;
}

_QWORD *initializeWithTake for HighlightCoverStyle(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = a2[2];
    v6 = *(int *)(sub_5440(&qword_260AE8) + 64);
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    v9 = type metadata accessor for ColorScheme(0);
    v10 = *(_QWORD *)(v9 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
    {
      v11 = sub_5440(&qword_25E928);
      memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
    }
    swift_storeEnumTagMultiPayload(a1, a3, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

_QWORD *assignWithTake for HighlightCoverStyle(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (a1 != a2)
  {
    sub_224DC((uint64_t)a1, type metadata accessor for HighlightCoverStyle);
    if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      a1[2] = a2[2];
      v6 = *(int *)(sub_5440(&qword_260AE8) + 64);
      v7 = (char *)a1 + v6;
      v8 = (char *)a2 + v6;
      v9 = type metadata accessor for ColorScheme(0);
      v10 = *(_QWORD *)(v9 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
      {
        v11 = sub_5440(&qword_25E928);
        memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      }
      swift_storeEnumTagMultiPayload(a1, a3, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

void sub_55148(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _BYTE v4[32];
  _QWORD v5[2];

  v5[0] = &unk_1E3F38;
  sub_1FA68(319, (unint64_t *)&unk_25E9D8, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  if (v3 <= 0x3F)
  {
    swift_getTupleTypeLayout3(v4, &unk_1E3F50, (char *)&value witness table for Builtin.NativeObject + 64, *(_QWORD *)(v2 - 8) + 64);
    v5[1] = v4;
    swift_initEnumMetadataMultiPayload(a1, 256, 2, v5);
  }
}

unint64_t initializeBufferWithCopyOfBuffer for HighlightFrameViewModel(unint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v27 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = v27 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain(v27);
  }
  else
  {
    v6 = *(_QWORD *)a2;
    v7 = *(_QWORD *)(a2 + 8);
    v8 = *(_QWORD *)(a2 + 16);
    v9 = *(_QWORD *)(a2 + 24);
    v10 = *(_QWORD *)(a2 + 32);
    v11 = *(_QWORD *)(a2 + 40);
    v12 = *(_QWORD *)(a2 + 48);
    v13 = *(_BYTE *)(a2 + 56);
    sub_553F4(*(_QWORD *)a2, v7, v8, v9, v10, v11, v12, v13);
    *(_QWORD *)a1 = v6;
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = v8;
    *(_QWORD *)(a1 + 24) = v9;
    *(_QWORD *)(a1 + 32) = v10;
    *(_QWORD *)(a1 + 40) = v11;
    *(_QWORD *)(a1 + 48) = v12;
    *(_BYTE *)(a1 + 56) = v13;
    v14 = *(int *)(a3 + 20);
    v15 = (_QWORD *)(a1 + v14);
    v16 = (_QWORD *)(a2 + v14);
    v17 = type metadata accessor for HighlightCoverStyle(0);
    if (swift_getEnumCaseMultiPayload(v16, v17) == 1)
    {
      v18 = v16[1];
      *v15 = *v16;
      v15[1] = v18;
      v19 = v16[2];
      v15[2] = v19;
      swift_bridgeObjectRetain(v18);
      swift_retain(v19);
      v20 = *(int *)(sub_5440(&qword_260AE8) + 64);
      v21 = (char *)v15 + v20;
      v22 = (char *)v16 + v20;
      v23 = type metadata accessor for ColorScheme(0);
      v24 = *(_QWORD *)(v23 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
      {
        v25 = sub_5440(&qword_25E928);
        memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
        v26 = 1;
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v21, v22, v23);
        v26 = 1;
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
      }
    }
    else
    {
      v28 = *v16;
      v29 = v16[1];
      *v15 = *v16;
      v15[1] = v29;
      v30 = v16[2];
      v15[2] = v30;
      swift_bridgeObjectRetain(v28);
      swift_bridgeObjectRetain(v30);
      v26 = 0;
    }
    swift_storeEnumTagMultiPayload(v15, v17, v26);
    v31 = *(int *)(a3 + 24);
    v32 = a1 + v31;
    v33 = a2 + v31;
    v34 = type metadata accessor for YIRSourceData(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 16))(v32, v33, v34);
  }
  return a1;
}

uint64_t sub_553F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  uint64_t v8;
  uint64_t result;

  v8 = a4;
  result = a2;
  switch(a8)
  {
    case 0:
      goto LABEL_4;
    case 1:
      result = a4;
      v8 = a2;
      goto LABEL_4;
    case 3:
      swift_bridgeObjectRetain(a3);
      result = a5;
      v8 = a7;
LABEL_4:
      swift_bridgeObjectRetain(result);
      a2 = v8;
      goto LABEL_5;
    case 4:
    case 5:
LABEL_5:
      result = swift_bridgeObjectRetain(a2);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t destroy for HighlightFrameViewModel(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  sub_54968(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_BYTE *)(a1 + 56));
  v4 = (_QWORD *)(a1 + *(int *)(a2 + 20));
  v5 = type metadata accessor for HighlightCoverStyle(0);
  if (swift_getEnumCaseMultiPayload(v4, v5) == 1)
  {
    swift_bridgeObjectRelease(v4[1]);
    swift_release(v4[2]);
    v6 = (char *)v4 + *(int *)(sub_5440(&qword_260AE8) + 64);
    v7 = type metadata accessor for ColorScheme(0);
    v8 = *(_QWORD *)(v7 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
      (*(void (**)(char *, uint64_t))(v8 + 8))(v6, v7);
  }
  else
  {
    swift_bridgeObjectRelease(*v4);
    swift_bridgeObjectRelease(v4[2]);
  }
  v9 = a1 + *(int *)(a2 + 24);
  v10 = type metadata accessor for YIRSourceData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
}

uint64_t initializeWithCopy for HighlightFrameViewModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v5 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = *(_QWORD *)(a2 + 40);
  v11 = *(_QWORD *)(a2 + 48);
  v12 = *(_BYTE *)(a2 + 56);
  sub_553F4(*(_QWORD *)a2, v6, v7, v8, v9, v10, v11, v12);
  *(_QWORD *)a1 = v5;
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = v7;
  *(_QWORD *)(a1 + 24) = v8;
  *(_QWORD *)(a1 + 32) = v9;
  *(_QWORD *)(a1 + 40) = v10;
  *(_QWORD *)(a1 + 48) = v11;
  *(_BYTE *)(a1 + 56) = v12;
  v13 = *(int *)(a3 + 20);
  v14 = (_QWORD *)(a1 + v13);
  v15 = (_QWORD *)(a2 + v13);
  v16 = type metadata accessor for HighlightCoverStyle(0);
  if (swift_getEnumCaseMultiPayload(v15, v16) == 1)
  {
    v17 = v15[1];
    *v14 = *v15;
    v14[1] = v17;
    v18 = v15[2];
    v14[2] = v18;
    swift_bridgeObjectRetain(v17);
    swift_retain(v18);
    v19 = *(int *)(sub_5440(&qword_260AE8) + 64);
    v20 = (char *)v14 + v19;
    v21 = (char *)v15 + v19;
    v22 = type metadata accessor for ColorScheme(0);
    v23 = *(_QWORD *)(v22 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
    {
      v24 = sub_5440(&qword_25E928);
      memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
      v25 = 1;
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v20, v21, v22);
      v25 = 1;
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
    }
  }
  else
  {
    v26 = *v15;
    v27 = v15[1];
    *v14 = *v15;
    v14[1] = v27;
    v28 = v15[2];
    v14[2] = v28;
    swift_bridgeObjectRetain(v26);
    swift_bridgeObjectRetain(v28);
    v25 = 0;
  }
  swift_storeEnumTagMultiPayload(v14, v16, v25);
  v29 = *(int *)(a3 + 24);
  v30 = a1 + v29;
  v31 = a2 + v29;
  v32 = type metadata accessor for YIRSourceData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 16))(v30, v31, v32);
  return a1;
}

uint64_t assignWithCopy for HighlightFrameViewModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v5 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = *(_QWORD *)(a2 + 40);
  v11 = *(_QWORD *)(a2 + 48);
  v12 = *(_BYTE *)(a2 + 56);
  sub_553F4(*(_QWORD *)a2, v6, v7, v8, v9, v10, v11, v12);
  v13 = *(_QWORD *)a1;
  v14 = *(_QWORD *)(a1 + 8);
  v15 = *(_QWORD *)(a1 + 16);
  v16 = *(_QWORD *)(a1 + 24);
  v17 = *(_QWORD *)(a1 + 32);
  v18 = *(_QWORD *)(a1 + 40);
  v19 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)a1 = v5;
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = v7;
  *(_QWORD *)(a1 + 24) = v8;
  *(_QWORD *)(a1 + 32) = v9;
  *(_QWORD *)(a1 + 40) = v10;
  *(_QWORD *)(a1 + 48) = v11;
  v20 = *(_BYTE *)(a1 + 56);
  *(_BYTE *)(a1 + 56) = v12;
  sub_54968(v13, v14, v15, v16, v17, v18, v19, v20);
  if (a1 != a2)
  {
    v21 = *(int *)(a3 + 20);
    v22 = (_QWORD *)(a1 + v21);
    v23 = (_QWORD *)(a2 + v21);
    sub_224DC(a1 + v21, type metadata accessor for HighlightCoverStyle);
    v24 = type metadata accessor for HighlightCoverStyle(0);
    if (swift_getEnumCaseMultiPayload(v23, v24) == 1)
    {
      *v22 = *v23;
      v25 = v23[1];
      v22[1] = v25;
      v26 = v23[2];
      v22[2] = v26;
      swift_bridgeObjectRetain(v25);
      swift_retain(v26);
      v27 = *(int *)(sub_5440(&qword_260AE8) + 64);
      v28 = (char *)v22 + v27;
      v29 = (char *)v23 + v27;
      v30 = type metadata accessor for ColorScheme(0);
      v31 = *(_QWORD *)(v30 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30))
      {
        v32 = sub_5440(&qword_25E928);
        memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
        v33 = 1;
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v31 + 16))(v28, v29, v30);
        v33 = 1;
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v28, 0, 1, v30);
      }
    }
    else
    {
      v34 = *v23;
      *v22 = *v23;
      v22[1] = v23[1];
      v35 = v23[2];
      v22[2] = v35;
      swift_bridgeObjectRetain(v34);
      swift_bridgeObjectRetain(v35);
      v33 = 0;
    }
    swift_storeEnumTagMultiPayload(v22, v24, v33);
  }
  v36 = *(int *)(a3 + 24);
  v37 = a1 + v36;
  v38 = a2 + v36;
  v39 = type metadata accessor for YIRSourceData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 24))(v37, v38, v39);
  return a1;
}

_OWORD *initializeWithTake for HighlightFrameViewModel(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  a1[2] = a2[2];
  *(_OWORD *)((char *)a1 + 41) = *(_OWORD *)((char *)a2 + 41);
  v7 = *(int *)(a3 + 20);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for HighlightCoverStyle(0);
  if (swift_getEnumCaseMultiPayload(v9, v10) == 1)
  {
    *(_OWORD *)v8 = *(_OWORD *)v9;
    *((_QWORD *)v8 + 2) = *((_QWORD *)v9 + 2);
    v11 = *(int *)(sub_5440(&qword_260AE8) + 64);
    v12 = &v8[v11];
    v13 = &v9[v11];
    v14 = type metadata accessor for ColorScheme(0);
    v15 = *(_QWORD *)(v14 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
    {
      v16 = sub_5440(&qword_25E928);
      memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v12, v13, v14);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
    }
    swift_storeEnumTagMultiPayload(v8, v10, 1);
  }
  else
  {
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  v17 = *(int *)(a3 + 24);
  v18 = (char *)a1 + v17;
  v19 = (char *)a2 + v17;
  v20 = type metadata accessor for YIRSourceData(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v18, v19, v20);
  return a1;
}

uint64_t assignWithTake for HighlightFrameViewModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  unsigned __int8 v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v6 = *(_QWORD *)(a2 + 48);
  v7 = *(_BYTE *)(a2 + 56);
  v8 = *(_QWORD *)a1;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_QWORD *)(a1 + 24);
  v12 = *(_QWORD *)(a1 + 32);
  v13 = *(_QWORD *)(a1 + 40);
  v14 = *(_QWORD *)(a1 + 48);
  v15 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v15;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = v6;
  v16 = *(_BYTE *)(a1 + 56);
  *(_BYTE *)(a1 + 56) = v7;
  sub_54968(v8, v9, v10, v11, v12, v13, v14, v16);
  if (a1 != a2)
  {
    v17 = *(int *)(a3 + 20);
    v18 = (_QWORD *)(a1 + v17);
    v19 = (_QWORD *)(a2 + v17);
    sub_224DC(a1 + v17, type metadata accessor for HighlightCoverStyle);
    v20 = type metadata accessor for HighlightCoverStyle(0);
    if (swift_getEnumCaseMultiPayload(v19, v20) == 1)
    {
      *(_OWORD *)v18 = *(_OWORD *)v19;
      v18[2] = v19[2];
      v21 = *(int *)(sub_5440(&qword_260AE8) + 64);
      v22 = (char *)v18 + v21;
      v23 = (char *)v19 + v21;
      v24 = type metadata accessor for ColorScheme(0);
      v25 = *(_QWORD *)(v24 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
      {
        v26 = sub_5440(&qword_25E928);
        memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v22, v23, v24);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
      }
      swift_storeEnumTagMultiPayload(v18, v20, 1);
    }
    else
    {
      memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    }
  }
  v27 = *(int *)(a3 + 24);
  v28 = a1 + v27;
  v29 = a2 + v27;
  v30 = type metadata accessor for YIRSourceData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 40))(v28, v29, v30);
  return a1;
}

uint64_t getEnumTagSinglePayload for HighlightFrameViewModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_55CC4);
}

uint64_t sub_55CC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 250)
  {
    v4 = *(unsigned __int8 *)(a1 + 56);
    if (v4 > 5)
      return (v4 ^ 0xFF) + 1;
    else
      return 0;
  }
  else
  {
    v8 = type metadata accessor for HighlightCoverStyle(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 20);
    }
    else
    {
      v10 = type metadata accessor for YIRSourceData(0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 24);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for HighlightFrameViewModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_55D68);
}

uint64_t sub_55D68(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 250)
  {
    *(_BYTE *)(result + 56) = -(char)a2;
  }
  else
  {
    v8 = type metadata accessor for HighlightCoverStyle(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 20);
    }
    else
    {
      v10 = type metadata accessor for YIRSourceData(0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 24);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

uint64_t sub_55E00(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[3];

  v5[0] = "9";
  result = type metadata accessor for HighlightCoverStyle(319);
  if (v3 <= 0x3F)
  {
    v5[1] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for YIRSourceData(319);
    if (v4 <= 0x3F)
    {
      v5[2] = *(_QWORD *)(result - 8) + 64;
      swift_initStructMetadata(a1, 256, 3, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

uint64_t destroy for HighlightFrameViewModel.Kind(uint64_t a1)
{
  return sub_54968(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_BYTE *)(a1 + 56));
}

uint64_t initializeWithCopy for HighlightFrameViewModel.Kind(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 48);
  v10 = *(_BYTE *)(a2 + 56);
  sub_553F4(*(_QWORD *)a2, v4, v5, v6, v7, v8, v9, v10);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v9;
  *(_BYTE *)(a1 + 56) = v10;
  return a1;
}

uint64_t assignWithCopy for HighlightFrameViewModel.Kind(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 v18;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 48);
  v10 = *(_BYTE *)(a2 + 56);
  sub_553F4(*(_QWORD *)a2, v4, v5, v6, v7, v8, v9, v10);
  v11 = *(_QWORD *)a1;
  v12 = *(_QWORD *)(a1 + 8);
  v13 = *(_QWORD *)(a1 + 16);
  v14 = *(_QWORD *)(a1 + 24);
  v15 = *(_QWORD *)(a1 + 32);
  v16 = *(_QWORD *)(a1 + 40);
  v17 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v9;
  v18 = *(_BYTE *)(a1 + 56);
  *(_BYTE *)(a1 + 56) = v10;
  sub_54968(v11, v12, v13, v14, v15, v16, v17, v18);
  return a1;
}

__n128 initializeWithTake for CoverViewModel.Style(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for HighlightFrameViewModel.Kind(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  unsigned __int8 v13;

  v3 = *(_QWORD *)(a2 + 48);
  v4 = *(_BYTE *)(a2 + 56);
  v5 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(_QWORD *)(a1 + 40);
  v11 = *(_QWORD *)(a1 + 48);
  v12 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v12;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = v3;
  v13 = *(_BYTE *)(a1 + 56);
  *(_BYTE *)(a1 + 56) = v4;
  sub_54968(v5, v7, v6, v8, v9, v10, v11, v13);
  return a1;
}

uint64_t getEnumTagSinglePayload for HighlightFrameViewModel.Kind(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFB && *(_BYTE *)(a1 + 57))
    return (*(_DWORD *)a1 + 251);
  v3 = *(unsigned __int8 *)(a1 + 56);
  if (v3 <= 5)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for HighlightFrameViewModel.Kind(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFA)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 56) = 0;
    *(_QWORD *)result = a2 - 251;
    if (a3 >= 0xFB)
      *(_BYTE *)(result + 57) = 1;
  }
  else
  {
    if (a3 >= 0xFB)
      *(_BYTE *)(result + 57) = 0;
    if (a2)
      *(_BYTE *)(result + 56) = -(char)a2;
  }
  return result;
}

uint64_t sub_560F0(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 56);
}

uint64_t sub_560F8(uint64_t result, char a2)
{
  *(_BYTE *)(result + 56) = a2;
  return result;
}

ValueMetadata *type metadata accessor for HighlightFrameViewModel.Kind()
{
  return &type metadata for HighlightFrameViewModel.Kind;
}

uint64_t *initializeBufferWithCopyOfBuffer for HighlightFrame(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t *v73;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    v13 = v12 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain(v12);
  }
  else
  {
    v7 = sub_5440(&qword_25E948);
    if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
    {
      v8 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      v9 = a1;
      v10 = v7;
      v11 = 1;
    }
    else
    {
      v14 = *a2;
      *a1 = *a2;
      swift_retain(v14);
      v9 = a1;
      v10 = v7;
      v11 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v10, v11);
    v15 = a3[5];
    v16 = (char *)a1 + v15;
    v17 = (char *)a2 + v15;
    v18 = *(_QWORD *)v17;
    v19 = v17[8];
    sub_F9E4(*(_QWORD *)v17, v19);
    *(_QWORD *)v16 = v18;
    v16[8] = v19;
    v20 = a3[6];
    v21 = (char *)a1 + v20;
    v22 = (char *)a2 + v20;
    v23 = *(_QWORD *)v22;
    v24 = v22[8];
    sub_F9E4(*(_QWORD *)v22, v24);
    *(_QWORD *)v21 = v23;
    v21[8] = v24;
    v25 = a3[7];
    v26 = (char *)a1 + v25;
    v27 = (char *)a2 + v25;
    v28 = *(_QWORD *)v27;
    v29 = v27[8];
    sub_F9E4(*(_QWORD *)v27, v29);
    *(_QWORD *)v26 = v28;
    v26[8] = v29;
    v30 = a3[8];
    v31 = (char *)a1 + v30;
    v32 = (char *)a2 + v30;
    v33 = *(_QWORD *)v32;
    v34 = v32[8];
    sub_F9E4(*(_QWORD *)v32, v34);
    *(_QWORD *)v31 = v33;
    v31[8] = v34;
    v35 = a3[9];
    v36 = a3[10];
    v37 = (uint64_t *)((char *)a1 + v35);
    v38 = (uint64_t *)((char *)a2 + v35);
    v39 = v38[1];
    *v37 = *v38;
    v37[1] = v39;
    *(_OWORD *)((char *)a1 + v36) = *(_OWORD *)((char *)a2 + v36);
    v40 = a3[11];
    v73 = a1;
    v41 = (char *)a1 + v40;
    v42 = (char *)a2 + v40;
    v43 = *(uint64_t *)((char *)a2 + v40);
    v44 = *((_QWORD *)v42 + 1);
    v45 = *((_QWORD *)v42 + 2);
    v46 = *((_QWORD *)v42 + 3);
    v47 = *((_QWORD *)v42 + 4);
    v48 = *((_QWORD *)v42 + 5);
    v49 = *((_QWORD *)v42 + 6);
    v50 = v42[56];
    swift_bridgeObjectRetain(v39);
    sub_553F4(v43, v44, v45, v46, v47, v48, v49, v50);
    *(_QWORD *)v41 = v43;
    *((_QWORD *)v41 + 1) = v44;
    *((_QWORD *)v41 + 2) = v45;
    *((_QWORD *)v41 + 3) = v46;
    *((_QWORD *)v41 + 4) = v47;
    *((_QWORD *)v41 + 5) = v48;
    *((_QWORD *)v41 + 6) = v49;
    v41[56] = v50;
    v51 = type metadata accessor for HighlightFrameViewModel(0);
    v52 = *(int *)(v51 + 20);
    v53 = &v41[v52];
    v54 = &v42[v52];
    v55 = type metadata accessor for HighlightCoverStyle(0);
    if (swift_getEnumCaseMultiPayload(v54, v55) == 1)
    {
      v56 = *((_QWORD *)v54 + 1);
      *(_QWORD *)v53 = *(_QWORD *)v54;
      *((_QWORD *)v53 + 1) = v56;
      v57 = *((_QWORD *)v54 + 2);
      *((_QWORD *)v53 + 2) = v57;
      swift_bridgeObjectRetain(v56);
      swift_retain(v57);
      v58 = *(int *)(sub_5440(&qword_260AE8) + 64);
      v59 = &v53[v58];
      v60 = &v54[v58];
      v61 = type metadata accessor for ColorScheme(0);
      v62 = *(_QWORD *)(v61 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v62 + 48))(v60, 1, v61))
      {
        v63 = sub_5440(&qword_25E928);
        memcpy(v59, v60, *(_QWORD *)(*(_QWORD *)(v63 - 8) + 64));
        v64 = 1;
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v62 + 16))(v59, v60, v61);
        v64 = 1;
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v62 + 56))(v59, 0, 1, v61);
      }
    }
    else
    {
      v65 = *(_QWORD *)v54;
      v66 = *((_QWORD *)v54 + 1);
      *(_QWORD *)v53 = *(_QWORD *)v54;
      *((_QWORD *)v53 + 1) = v66;
      v67 = *((_QWORD *)v54 + 2);
      *((_QWORD *)v53 + 2) = v67;
      swift_bridgeObjectRetain(v65);
      swift_bridgeObjectRetain(v67);
      v64 = 0;
    }
    swift_storeEnumTagMultiPayload(v53, v55, v64);
    v68 = *(int *)(v51 + 24);
    v69 = &v41[v68];
    v70 = &v42[v68];
    v71 = type metadata accessor for YIRSourceData(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v71 - 8) + 16))(v69, v70, v71);
    return v73;
  }
  return (uint64_t *)v13;
}

uint64_t destroy for HighlightFrame(_QWORD *a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;

  v4 = sub_5440(&qword_25E948);
  if (swift_getEnumCaseMultiPayload(a1, v4) == 1)
  {
    v5 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  }
  else
  {
    swift_release(*a1);
  }
  sub_BE0C(*(_QWORD *)((char *)a1 + a2[5]), *((_BYTE *)a1 + a2[5] + 8));
  sub_BE0C(*(_QWORD *)((char *)a1 + a2[6]), *((_BYTE *)a1 + a2[6] + 8));
  sub_BE0C(*(_QWORD *)((char *)a1 + a2[7]), *((_BYTE *)a1 + a2[7] + 8));
  sub_BE0C(*(_QWORD *)((char *)a1 + a2[8]), *((_BYTE *)a1 + a2[8] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + a2[9] + 8));
  v6 = (char *)a1 + a2[11];
  sub_54968(*(_QWORD *)v6, *((_QWORD *)v6 + 1), *((_QWORD *)v6 + 2), *((_QWORD *)v6 + 3), *((_QWORD *)v6 + 4), *((_QWORD *)v6 + 5), *((_QWORD *)v6 + 6), v6[56]);
  v7 = type metadata accessor for HighlightFrameViewModel(0);
  v8 = &v6[*(int *)(v7 + 20)];
  v9 = type metadata accessor for HighlightCoverStyle(0);
  if (swift_getEnumCaseMultiPayload(v8, v9) == 1)
  {
    swift_bridgeObjectRelease(*((_QWORD *)v8 + 1));
    swift_release(*((_QWORD *)v8 + 2));
    v10 = &v8[*(int *)(sub_5440(&qword_260AE8) + 64)];
    v11 = type metadata accessor for ColorScheme(0);
    v12 = *(_QWORD *)(v11 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
      (*(void (**)(char *, uint64_t))(v12 + 8))(v10, v11);
  }
  else
  {
    swift_bridgeObjectRelease(*(_QWORD *)v8);
    swift_bridgeObjectRelease(*((_QWORD *)v8 + 2));
  }
  v13 = &v6[*(int *)(v7 + 24)];
  v14 = type metadata accessor for YIRSourceData(0);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
}

uint64_t *initializeWithCopy for HighlightFrame(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t *v70;

  v6 = sub_5440(&qword_25E948);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for ColorScheme(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a1;
    v9 = v6;
    v10 = 1;
  }
  else
  {
    v11 = *a2;
    *a1 = *a2;
    swift_retain(v11);
    v8 = a1;
    v9 = v6;
    v10 = 0;
  }
  swift_storeEnumTagMultiPayload(v8, v9, v10);
  v12 = a3[5];
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = *(_QWORD *)v14;
  v16 = v14[8];
  sub_F9E4(*(_QWORD *)v14, v16);
  *(_QWORD *)v13 = v15;
  v13[8] = v16;
  v17 = a3[6];
  v18 = (char *)a1 + v17;
  v19 = (char *)a2 + v17;
  v20 = *(_QWORD *)v19;
  v21 = v19[8];
  sub_F9E4(*(_QWORD *)v19, v21);
  *(_QWORD *)v18 = v20;
  v18[8] = v21;
  v22 = a3[7];
  v23 = (char *)a1 + v22;
  v24 = (char *)a2 + v22;
  v25 = *(_QWORD *)v24;
  v26 = v24[8];
  sub_F9E4(*(_QWORD *)v24, v26);
  *(_QWORD *)v23 = v25;
  v23[8] = v26;
  v27 = a3[8];
  v28 = (char *)a1 + v27;
  v29 = (char *)a2 + v27;
  v30 = *(_QWORD *)v29;
  v31 = v29[8];
  sub_F9E4(*(_QWORD *)v29, v31);
  *(_QWORD *)v28 = v30;
  v28[8] = v31;
  v32 = a3[9];
  v33 = a3[10];
  v34 = (uint64_t *)((char *)a1 + v32);
  v35 = (uint64_t *)((char *)a2 + v32);
  v36 = v35[1];
  *v34 = *v35;
  v34[1] = v36;
  *(_OWORD *)((char *)a1 + v33) = *(_OWORD *)((char *)a2 + v33);
  v37 = a3[11];
  v70 = a1;
  v38 = (char *)a1 + v37;
  v39 = (char *)a2 + v37;
  v40 = *(uint64_t *)((char *)a2 + v37);
  v41 = *((_QWORD *)v39 + 1);
  v42 = *((_QWORD *)v39 + 2);
  v43 = *((_QWORD *)v39 + 3);
  v44 = *((_QWORD *)v39 + 4);
  v45 = *((_QWORD *)v39 + 5);
  v46 = *((_QWORD *)v39 + 6);
  v47 = v39[56];
  swift_bridgeObjectRetain(v36);
  sub_553F4(v40, v41, v42, v43, v44, v45, v46, v47);
  *(_QWORD *)v38 = v40;
  *((_QWORD *)v38 + 1) = v41;
  *((_QWORD *)v38 + 2) = v42;
  *((_QWORD *)v38 + 3) = v43;
  *((_QWORD *)v38 + 4) = v44;
  *((_QWORD *)v38 + 5) = v45;
  *((_QWORD *)v38 + 6) = v46;
  v38[56] = v47;
  v48 = type metadata accessor for HighlightFrameViewModel(0);
  v49 = *(int *)(v48 + 20);
  v50 = &v38[v49];
  v51 = &v39[v49];
  v52 = type metadata accessor for HighlightCoverStyle(0);
  if (swift_getEnumCaseMultiPayload(v51, v52) == 1)
  {
    v53 = *((_QWORD *)v51 + 1);
    *(_QWORD *)v50 = *(_QWORD *)v51;
    *((_QWORD *)v50 + 1) = v53;
    v54 = *((_QWORD *)v51 + 2);
    *((_QWORD *)v50 + 2) = v54;
    swift_bridgeObjectRetain(v53);
    swift_retain(v54);
    v55 = *(int *)(sub_5440(&qword_260AE8) + 64);
    v56 = &v50[v55];
    v57 = &v51[v55];
    v58 = type metadata accessor for ColorScheme(0);
    v59 = *(_QWORD *)(v58 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v59 + 48))(v57, 1, v58))
    {
      v60 = sub_5440(&qword_25E928);
      memcpy(v56, v57, *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64));
      v61 = 1;
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v59 + 16))(v56, v57, v58);
      v61 = 1;
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v59 + 56))(v56, 0, 1, v58);
    }
  }
  else
  {
    v62 = *(_QWORD *)v51;
    v63 = *((_QWORD *)v51 + 1);
    *(_QWORD *)v50 = *(_QWORD *)v51;
    *((_QWORD *)v50 + 1) = v63;
    v64 = *((_QWORD *)v51 + 2);
    *((_QWORD *)v50 + 2) = v64;
    swift_bridgeObjectRetain(v62);
    swift_bridgeObjectRetain(v64);
    v61 = 0;
  }
  swift_storeEnumTagMultiPayload(v50, v52, v61);
  v65 = *(int *)(v48 + 24);
  v66 = &v38[v65];
  v67 = &v39[v65];
  v68 = type metadata accessor for YIRSourceData(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v68 - 8) + 16))(v66, v67, v68);
  return v70;
}

_QWORD *assignWithCopy for HighlightFrame(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unsigned __int8 v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  _QWORD *v89;
  _QWORD *v90;

  if (a1 != a2)
  {
    sub_B414((uint64_t)a1, &qword_25E948);
    v6 = sub_5440(&qword_25E948);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for ColorScheme(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = v6;
      v10 = 1;
    }
    else
    {
      v11 = *a2;
      *a1 = *a2;
      swift_retain(v11);
      v8 = a1;
      v9 = v6;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
  }
  v12 = a3[5];
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = *(_QWORD *)v14;
  v16 = v14[8];
  sub_F9E4(*(_QWORD *)v14, v16);
  v17 = *(_QWORD *)v13;
  v18 = v13[8];
  *(_QWORD *)v13 = v15;
  v13[8] = v16;
  sub_BE0C(v17, v18);
  v19 = a3[6];
  v20 = (char *)a1 + v19;
  v21 = (char *)a2 + v19;
  v22 = *(_QWORD *)v21;
  v23 = v21[8];
  sub_F9E4(*(_QWORD *)v21, v23);
  v24 = *(_QWORD *)v20;
  v25 = v20[8];
  *(_QWORD *)v20 = v22;
  v20[8] = v23;
  sub_BE0C(v24, v25);
  v26 = a3[7];
  v27 = (char *)a1 + v26;
  v28 = (char *)a2 + v26;
  v29 = *(_QWORD *)v28;
  v30 = v28[8];
  sub_F9E4(*(_QWORD *)v28, v30);
  v31 = *(_QWORD *)v27;
  v32 = v27[8];
  *(_QWORD *)v27 = v29;
  v27[8] = v30;
  sub_BE0C(v31, v32);
  v33 = a3[8];
  v34 = (char *)a1 + v33;
  v35 = (char *)a2 + v33;
  v36 = *(_QWORD *)v35;
  v37 = v35[8];
  sub_F9E4(*(_QWORD *)v35, v37);
  v38 = *(_QWORD *)v34;
  v39 = v34[8];
  *(_QWORD *)v34 = v36;
  v34[8] = v37;
  sub_BE0C(v38, v39);
  v40 = a3[9];
  v41 = (_QWORD *)((char *)a1 + v40);
  v42 = (_QWORD *)((char *)a2 + v40);
  *v41 = *v42;
  v43 = v42[1];
  v44 = v41[1];
  v41[1] = v43;
  swift_bridgeObjectRetain(v43);
  swift_bridgeObjectRelease(v44);
  v45 = a3[10];
  v46 = (_QWORD *)((char *)a1 + v45);
  v47 = (_QWORD *)((char *)a2 + v45);
  *v46 = *v47;
  v46[1] = v47[1];
  v48 = a3[11];
  v49 = (char *)a1 + v48;
  v50 = (char *)a2 + v48;
  v51 = *(_QWORD *)((char *)a2 + v48);
  v52 = *(_QWORD *)((char *)a2 + v48 + 8);
  v53 = *(_QWORD *)((char *)a2 + v48 + 16);
  v54 = *(_QWORD *)((char *)a2 + v48 + 24);
  v55 = *(_QWORD *)((char *)a2 + v48 + 32);
  v56 = *(_QWORD *)((char *)a2 + v48 + 40);
  v89 = a2;
  v90 = a1;
  v57 = *(_QWORD *)((char *)a2 + v48 + 48);
  v58 = *((_BYTE *)a2 + v48 + 56);
  sub_553F4(v51, v52, v53, v54, v55, v56, v57, v58);
  v59 = *(_QWORD *)v49;
  v60 = *((_QWORD *)v49 + 1);
  v61 = *((_QWORD *)v49 + 2);
  v62 = *((_QWORD *)v49 + 3);
  v63 = *((_QWORD *)v49 + 4);
  v64 = *((_QWORD *)v49 + 5);
  v65 = *((_QWORD *)v49 + 6);
  *(_QWORD *)v49 = v51;
  *((_QWORD *)v49 + 1) = v52;
  *((_QWORD *)v49 + 2) = v53;
  *((_QWORD *)v49 + 3) = v54;
  *((_QWORD *)v49 + 4) = v55;
  *((_QWORD *)v49 + 5) = v56;
  *((_QWORD *)v49 + 6) = v57;
  v66 = v49[56];
  v49[56] = v58;
  sub_54968(v59, v60, v61, v62, v63, v64, v65, v66);
  v67 = type metadata accessor for HighlightFrameViewModel(0);
  v68 = v67;
  if (v90 != v89)
  {
    v69 = *(int *)(v67 + 20);
    v70 = &v49[v69];
    v71 = &v50[v69];
    sub_224DC((uint64_t)&v49[v69], type metadata accessor for HighlightCoverStyle);
    v72 = type metadata accessor for HighlightCoverStyle(0);
    if (swift_getEnumCaseMultiPayload(v71, v72) == 1)
    {
      *(_QWORD *)v70 = *(_QWORD *)v71;
      v73 = *((_QWORD *)v71 + 1);
      *((_QWORD *)v70 + 1) = v73;
      v74 = *((_QWORD *)v71 + 2);
      *((_QWORD *)v70 + 2) = v74;
      swift_bridgeObjectRetain(v73);
      swift_retain(v74);
      v75 = *(int *)(sub_5440(&qword_260AE8) + 64);
      v76 = &v70[v75];
      v77 = &v71[v75];
      v78 = type metadata accessor for ColorScheme(0);
      v79 = *(_QWORD *)(v78 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v79 + 48))(v77, 1, v78))
      {
        v80 = sub_5440(&qword_25E928);
        memcpy(v76, v77, *(_QWORD *)(*(_QWORD *)(v80 - 8) + 64));
        v81 = 1;
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v79 + 16))(v76, v77, v78);
        v81 = 1;
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v79 + 56))(v76, 0, 1, v78);
      }
    }
    else
    {
      v82 = *(_QWORD *)v71;
      *(_QWORD *)v70 = *(_QWORD *)v71;
      *((_QWORD *)v70 + 1) = *((_QWORD *)v71 + 1);
      v83 = *((_QWORD *)v71 + 2);
      *((_QWORD *)v70 + 2) = v83;
      swift_bridgeObjectRetain(v82);
      swift_bridgeObjectRetain(v83);
      v81 = 0;
    }
    swift_storeEnumTagMultiPayload(v70, v72, v81);
  }
  v84 = *(int *)(v68 + 24);
  v85 = &v49[v84];
  v86 = &v50[v84];
  v87 = type metadata accessor for YIRSourceData(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v87 - 8) + 24))(v85, v86, v87);
  return v90;
}

char *initializeWithTake for HighlightFrame(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;

  v6 = sub_5440(&qword_25E948);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for ColorScheme(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v8 = a3[5];
  v9 = a3[6];
  v10 = &a1[v8];
  v11 = &a2[v8];
  *(_QWORD *)v10 = *(_QWORD *)v11;
  v10[8] = v11[8];
  v12 = &a1[v9];
  v13 = &a2[v9];
  *(_QWORD *)v12 = *(_QWORD *)v13;
  v12[8] = v13[8];
  v14 = a3[7];
  v15 = a3[8];
  v16 = &a1[v14];
  v17 = &a2[v14];
  *(_QWORD *)v16 = *(_QWORD *)v17;
  v16[8] = v17[8];
  v18 = &a1[v15];
  v19 = &a2[v15];
  *(_QWORD *)v18 = *(_QWORD *)v19;
  v18[8] = v19[8];
  v20 = a3[10];
  *(_OWORD *)&a1[a3[9]] = *(_OWORD *)&a2[a3[9]];
  *(_OWORD *)&a1[v20] = *(_OWORD *)&a2[v20];
  v21 = a3[11];
  v22 = &a1[v21];
  v23 = &a2[v21];
  *(_OWORD *)(v22 + 41) = *(_OWORD *)&a2[v21 + 41];
  v24 = *(_OWORD *)&a2[v21 + 32];
  v25 = *(_OWORD *)&a2[v21];
  *((_OWORD *)v22 + 1) = *(_OWORD *)&a2[v21 + 16];
  *((_OWORD *)v22 + 2) = v24;
  *(_OWORD *)v22 = v25;
  v26 = type metadata accessor for HighlightFrameViewModel(0);
  v27 = *(int *)(v26 + 20);
  v28 = &v22[v27];
  v29 = &v23[v27];
  v30 = type metadata accessor for HighlightCoverStyle(0);
  if (swift_getEnumCaseMultiPayload(v29, v30) == 1)
  {
    *(_OWORD *)v28 = *(_OWORD *)v29;
    *((_QWORD *)v28 + 2) = *((_QWORD *)v29 + 2);
    v31 = *(int *)(sub_5440(&qword_260AE8) + 64);
    v32 = &v28[v31];
    v33 = &v29[v31];
    v34 = type metadata accessor for ColorScheme(0);
    v35 = *(_QWORD *)(v34 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v33, 1, v34))
    {
      v36 = sub_5440(&qword_25E928);
      memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v35 + 32))(v32, v33, v34);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, v34);
    }
    swift_storeEnumTagMultiPayload(v28, v30, 1);
  }
  else
  {
    memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
  }
  v37 = *(int *)(v26 + 24);
  v38 = &v22[v37];
  v39 = &v23[v37];
  v40 = type metadata accessor for YIRSourceData(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v40 - 8) + 32))(v38, v39, v40);
  return a1;
}

char *assignWithTake for HighlightFrame(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  unsigned __int8 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;

  if (a1 != a2)
  {
    sub_B414((uint64_t)a1, &qword_25E948);
    v6 = sub_5440(&qword_25E948);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for ColorScheme(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
  }
  v8 = a3[5];
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = *(_QWORD *)v10;
  LOBYTE(v10) = v10[8];
  v12 = *(_QWORD *)v9;
  v13 = v9[8];
  *(_QWORD *)v9 = v11;
  v9[8] = (char)v10;
  sub_BE0C(v12, v13);
  v14 = a3[6];
  v15 = &a1[v14];
  v16 = &a2[v14];
  v17 = *(_QWORD *)v16;
  LOBYTE(v16) = v16[8];
  v18 = *(_QWORD *)v15;
  v19 = v15[8];
  *(_QWORD *)v15 = v17;
  v15[8] = (char)v16;
  sub_BE0C(v18, v19);
  v20 = a3[7];
  v21 = &a1[v20];
  v22 = &a2[v20];
  v23 = *(_QWORD *)v22;
  LOBYTE(v22) = v22[8];
  v24 = *(_QWORD *)v21;
  v25 = v21[8];
  *(_QWORD *)v21 = v23;
  v21[8] = (char)v22;
  sub_BE0C(v24, v25);
  v26 = a3[8];
  v27 = &a1[v26];
  v28 = &a2[v26];
  v29 = *(_QWORD *)v28;
  LOBYTE(v28) = v28[8];
  v30 = *(_QWORD *)v27;
  v31 = v27[8];
  *(_QWORD *)v27 = v29;
  v27[8] = (char)v28;
  sub_BE0C(v30, v31);
  v32 = a3[9];
  v33 = &a1[v32];
  v34 = &a2[v32];
  v36 = *(_QWORD *)v34;
  v35 = *((_QWORD *)v34 + 1);
  v37 = *((_QWORD *)v33 + 1);
  *(_QWORD *)v33 = v36;
  *((_QWORD *)v33 + 1) = v35;
  swift_bridgeObjectRelease(v37);
  v38 = a3[11];
  *(_OWORD *)&a1[a3[10]] = *(_OWORD *)&a2[a3[10]];
  v39 = &a1[v38];
  v40 = &a2[v38];
  v41 = *(_QWORD *)&a2[v38 + 48];
  LOBYTE(v38) = a2[v38 + 56];
  v42 = *(_QWORD *)v39;
  v43 = *((_QWORD *)v39 + 1);
  v44 = *((_QWORD *)v39 + 2);
  v45 = *((_QWORD *)v39 + 3);
  v46 = *((_QWORD *)v39 + 4);
  v47 = *((_QWORD *)v39 + 5);
  v48 = *((_QWORD *)v39 + 6);
  v49 = *((_OWORD *)v40 + 1);
  *(_OWORD *)v39 = *(_OWORD *)v40;
  *((_OWORD *)v39 + 1) = v49;
  v50 = v39[56];
  *((_OWORD *)v39 + 2) = *((_OWORD *)v40 + 2);
  *((_QWORD *)v39 + 6) = v41;
  v39[56] = v38;
  sub_54968(v42, v43, v44, v45, v46, v47, v48, v50);
  v51 = type metadata accessor for HighlightFrameViewModel(0);
  v52 = v51;
  if (a1 != a2)
  {
    v53 = *(int *)(v51 + 20);
    v54 = &v39[v53];
    v55 = &v40[v53];
    sub_224DC((uint64_t)&v39[v53], type metadata accessor for HighlightCoverStyle);
    v56 = type metadata accessor for HighlightCoverStyle(0);
    if (swift_getEnumCaseMultiPayload(v55, v56) == 1)
    {
      *(_OWORD *)v54 = *(_OWORD *)v55;
      *((_QWORD *)v54 + 2) = *((_QWORD *)v55 + 2);
      v57 = *(int *)(sub_5440(&qword_260AE8) + 64);
      v58 = &v54[v57];
      v59 = &v55[v57];
      v60 = type metadata accessor for ColorScheme(0);
      v61 = *(_QWORD *)(v60 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v61 + 48))(v59, 1, v60))
      {
        v62 = sub_5440(&qword_25E928);
        memcpy(v58, v59, *(_QWORD *)(*(_QWORD *)(v62 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v61 + 32))(v58, v59, v60);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v61 + 56))(v58, 0, 1, v60);
      }
      swift_storeEnumTagMultiPayload(v54, v56, 1);
    }
    else
    {
      memcpy(v54, v55, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
    }
  }
  v63 = *(int *)(v52 + 24);
  v64 = &v39[v63];
  v65 = &v40[v63];
  v66 = type metadata accessor for YIRSourceData(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v66 - 8) + 40))(v64, v65, v66);
  return a1;
}

uint64_t getEnumTagSinglePayload for HighlightFrame(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_572CC);
}

uint64_t sub_572CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  unint64_t v11;

  v6 = sub_5440(&qword_25EAE8);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v8 = type metadata accessor for HighlightFrameViewModel(0);
    v10 = a1 + *(int *)(a3 + 44);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
    return v9(v10, a2, v8);
  }
  v11 = *(_QWORD *)(a1 + *(int *)(a3 + 36) + 8);
  if (v11 >= 0xFFFFFFFF)
    LODWORD(v11) = -1;
  return (v11 + 1);
}

uint64_t storeEnumTagSinglePayload for HighlightFrame(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_57388);
}

uint64_t sub_57388(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  result = sub_5440(&qword_25EAE8);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(_QWORD *)(a1 + *(int *)(a4 + 36) + 8) = (a2 - 1);
      return result;
    }
    v10 = type metadata accessor for HighlightFrameViewModel(0);
    v12 = a1 + *(int *)(a4 + 44);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_57434(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[8];

  sub_1FA68(319, (unint64_t *)&qword_25EB58, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    v6[1] = "\t";
    v6[2] = "\t";
    v6[3] = "\t";
    v6[4] = "\t";
    v6[5] = &unk_1E3F50;
    v6[6] = &unk_1E3FE8;
    v4 = type metadata accessor for HighlightFrameViewModel(319);
    if (v5 <= 0x3F)
    {
      v6[7] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 256, 8, v6, a1 + 16);
    }
  }
}

unint64_t sub_574F0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_260CF0;
  if (!qword_260CF0)
  {
    v1 = sub_7EF8(&qword_260AF8);
    sub_7FD8(&qword_260CF8, &qword_260D00, (uint64_t)&protocol conformance descriptor for GeometryReader<A>);
    sub_7FD8((unint64_t *)&qword_25EE78, &qword_25EE58, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_260CF0);
  }
  return result;
}

uint64_t sub_57590()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;

  v1 = (int *)type metadata accessor for HighlightFrame(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = (_QWORD *)(v0 + v4);
  v7 = sub_5440(&qword_25E948);
  if (swift_getEnumCaseMultiPayload(v0 + v4, v7) == 1)
  {
    v8 = type metadata accessor for ColorScheme(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v0 + v4, v8);
  }
  else
  {
    swift_release(*v6);
  }
  sub_BE0C(*(_QWORD *)((char *)v6 + v1[5]), *((_BYTE *)v6 + v1[5] + 8));
  sub_BE0C(*(_QWORD *)((char *)v6 + v1[6]), *((_BYTE *)v6 + v1[6] + 8));
  sub_BE0C(*(_QWORD *)((char *)v6 + v1[7]), *((_BYTE *)v6 + v1[7] + 8));
  sub_BE0C(*(_QWORD *)((char *)v6 + v1[8]), *((_BYTE *)v6 + v1[8] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v6 + v1[9] + 8));
  v9 = (char *)v6 + v1[11];
  sub_54968(*(_QWORD *)v9, *((_QWORD *)v9 + 1), *((_QWORD *)v9 + 2), *((_QWORD *)v9 + 3), *((_QWORD *)v9 + 4), *((_QWORD *)v9 + 5), *((_QWORD *)v9 + 6), v9[56]);
  v10 = type metadata accessor for HighlightFrameViewModel(0);
  v11 = &v9[*(int *)(v10 + 20)];
  v12 = type metadata accessor for HighlightCoverStyle(0);
  if (swift_getEnumCaseMultiPayload(v11, v12) == 1)
  {
    swift_bridgeObjectRelease(*((_QWORD *)v11 + 1));
    swift_release(*((_QWORD *)v11 + 2));
    v13 = &v11[*(int *)(sub_5440(&qword_260AE8) + 64)];
    v14 = type metadata accessor for ColorScheme(0);
    v15 = *(_QWORD *)(v14 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
      (*(void (**)(char *, uint64_t))(v15 + 8))(v13, v14);
  }
  else
  {
    swift_bridgeObjectRelease(*(_QWORD *)v11);
    swift_bridgeObjectRelease(*((_QWORD *)v11 + 2));
  }
  v16 = &v9[*(int *)(v10 + 24)];
  v17 = type metadata accessor for YIRSourceData(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(v16, v17);
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_5778C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for HighlightFrame(0) - 8) + 80);
  return sub_52094(a1, v2 + ((v5 + 16) & ~v5), a2);
}

uint64_t sub_577F4(uint64_t a1)
{
  return sub_57810(a1, sub_53A08);
}

uint64_t sub_57804(uint64_t a1)
{
  return sub_57810(a1, sub_53B6C);
}

uint64_t sub_57810(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t))
{
  uint64_t v2;
  uint64_t v4;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for HighlightFrame(0) - 8) + 80);
  return a2(a1, v2 + ((v4 + 16) & ~v4));
}

unint64_t sub_5785C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_260E08;
  if (!qword_260E08)
  {
    v1 = sub_7EF8(&qword_260E00);
    sub_4522C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_260E08);
  }
  return result;
}

_QWORD *sub_578C8(_QWORD *a1)
{
  swift_release(*a1);
  return a1;
}

unint64_t sub_578F0()
{
  unint64_t result;

  result = qword_260E20;
  if (!qword_260E20)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_260E20);
  }
  return result;
}

uint64_t ShelfGridBreakpoint.init(from:for:dynamicTypeSize:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char v11;
  double *v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  Swift::String v16;
  void *object;

  v6 = *a1;
  v5 = a1[1];
  v8 = a1[2];
  v7 = a1[3];
  v9 = CGFloat.rounded.getter();
  if ((DynamicTypeSize.isAccessibilitySize.getter() & 1) != 0 && v8)
  {
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRelease(v5);
    v5 = v7;
  }
  swift_bridgeObjectRelease(v6);
  sub_57AA0(v8, v7);
  v10 = *(_QWORD *)(v5 + 16);
  if (v10)
  {
    v11 = *(_BYTE *)(v5 + 32);
    v12 = (double *)(v5 + 40);
    do
    {
      if (*v12 <= v9)
        v11 = *((_BYTE *)v12 - 8);
      v12 += 2;
      --v10;
    }
    while (v10);
    swift_bridgeObjectRelease(v5);
    v13 = type metadata accessor for DynamicTypeSize(0);
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(a2, v13);
    *a3 = v11;
  }
  else
  {
    swift_bridgeObjectRelease(v5);
    _StringGuts.grow(_:)(33);
    v15 = swift_bridgeObjectRelease(0xE000000000000000);
    v16._countAndFlagsBits = Double.description.getter(v15, v9);
    object = v16._object;
    String.append(_:)(v16);
    swift_bridgeObjectRelease(object);
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD00000000000001FLL, 0x80000000001FAEC0, "BooksUI/ShelfGridBreakpoint.swift", 33, 2, 40, 0);
    __break(1u);
  }
  return result;
}

uint64_t sub_57AA0(uint64_t result, uint64_t a2)
{
  if (result)
  {
    swift_bridgeObjectRelease(result);
    return swift_bridgeObjectRelease(a2);
  }
  return result;
}

uint64_t ShelfGridBreakpoint.resolveColumns(for:dynamicTypeSize:)(uint64_t *a1)
{
  unsigned __int8 *v1;
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 v4;
  unint64_t v5;
  char v6;
  uint64_t v7;

  v2 = *a1;
  v3 = a1[2];
  v4 = *v1;
  if ((DynamicTypeSize.isAccessibilitySize.getter(a1) & 1) != 0 && v3)
  {
    swift_bridgeObjectRetain(v3);
    v2 = v3;
    if (!*(_QWORD *)(v3 + 16))
      goto LABEL_8;
  }
  else
  {
    swift_bridgeObjectRetain(v2);
    if (!*(_QWORD *)(v2 + 16))
    {
LABEL_8:
      v7 = 1;
      goto LABEL_9;
    }
  }
  v5 = sub_A0E0(v4);
  if ((v6 & 1) == 0)
    goto LABEL_8;
  v7 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v5);
LABEL_9:
  swift_bridgeObjectRelease(v2);
  return v7;
}

uint64_t sub_57B5C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  CGFloat v12;
  double v13;
  CGFloat v14;
  double v15;
  CGFloat v16;
  double v17;
  CGFloat v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24[4];
  CGRect v25;

  v2 = v1;
  v4 = type metadata accessor for DynamicTypeSize(0);
  __chkstk_darwin(v4);
  v6 = (char *)v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for LocalCoordinateSpace(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  static CoordinateSpaceProtocol<>.local.getter(v9);
  v12 = GeometryProxy.frame<A>(in:)(v11, v7, &protocol witness table for LocalCoordinateSpace);
  v14 = v13;
  v16 = v15;
  v18 = v17;
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  v25.origin.x = v12;
  v25.origin.y = v14;
  v25.size.width = v16;
  v25.size.height = v18;
  CGRectGetWidth(v25);
  v19 = *(int *)(type metadata accessor for ShelfGridBreakpointViewModifier(0) + 24);
  v20 = *(_QWORD *)(v1 + v19 + 8);
  v21 = *(_QWORD *)(v2 + v19 + 16);
  v22 = *(_QWORD *)(v2 + v19 + 24);
  v24[0] = *(_QWORD *)(v2 + v19);
  v24[1] = v20;
  v24[2] = v21;
  v24[3] = v22;
  swift_bridgeObjectRetain(v24[0]);
  swift_bridgeObjectRetain(v20);
  sub_5802C(v21, v22);
  sub_31CB4((uint64_t)v6);
  return ShelfGridBreakpoint.init(from:for:dynamicTypeSize:)(v24, (uint64_t)v6, a1);
}

uint64_t sub_57CEC(char *a1, uint64_t a2)
{
  char v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;

  v2 = *a1;
  v3 = (uint64_t *)(a2 + *(int *)(type metadata accessor for ShelfGridBreakpointViewModifier(0) + 20));
  v4 = *v3;
  v5 = v3[1];
  LOBYTE(v3) = *((_BYTE *)v3 + 16);
  v9 = v4;
  v10 = v5;
  v11 = (char)v3;
  v8 = v2;
  v6 = sub_5440(&qword_260EF8);
  return Binding.wrappedValue.setter(&v8, v6);
}

uint64_t sub_57D54@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  _QWORD *v21;
  uint64_t v22;

  v4 = v3;
  v7 = *(_QWORD *)(a2 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  __chkstk_darwin(a1);
  v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0();
  v12 = v11;
  sub_58CBC(v4, (uint64_t)v9);
  v13 = *(unsigned __int8 *)(v7 + 80);
  v14 = (v13 + 16) & ~v13;
  v15 = v14 + v8;
  v16 = v13 | 7;
  v17 = swift_allocObject(&unk_24D380, v15, v13 | 7);
  sub_58D04((uint64_t)v9, v17 + v14);
  sub_58CBC(v4, (uint64_t)v9);
  v18 = swift_allocObject(&unk_24D3A8, v15, v16);
  sub_58D04((uint64_t)v9, v18 + v14);
  v19 = sub_5440(&qword_260EE8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(a3, a1, v19);
  result = sub_5440(&qword_260EF0);
  v21 = (_QWORD *)(a3 + *(int *)(result + 36));
  *v21 = sub_58D48;
  v21[1] = v17;
  v21[2] = sub_58E88;
  v21[3] = v18;
  v21[4] = v10;
  v21[5] = v12;
  return result;
}

uint64_t View.shelfGridBreakpoint(_:gridType:maxContentWidth:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  int *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  _QWORD *v22;
  char *v23;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v29 = a6;
  v27 = a7;
  v28 = a5;
  v26 = a4;
  v10 = (int *)type metadata accessor for ShelfGridBreakpointViewModifier(0);
  __chkstk_darwin(v10);
  v12 = (uint64_t *)((char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = *a1;
  v14 = a1[1];
  v15 = *((_BYTE *)a1 + 16);
  v17 = *a2;
  v16 = a2[1];
  v18 = a2[2];
  v19 = a2[3];
  *v12 = swift_getKeyPath(&unk_1E40C0);
  v20 = sub_5440(&qword_25FAA8);
  swift_storeEnumTagMultiPayload(v12, v20, 0);
  v21 = (char *)v12 + v10[5];
  *(_QWORD *)v21 = v13;
  *((_QWORD *)v21 + 1) = v14;
  v21[16] = v15;
  v22 = (_QWORD *)((char *)v12 + v10[6]);
  *v22 = v17;
  v22[1] = v16;
  v22[2] = v18;
  v22[3] = v19;
  v23 = (char *)v12 + v10[7];
  *(_QWORD *)v23 = a3;
  v23[8] = v26 & 1;
  swift_retain(v13);
  swift_retain(v14);
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRetain(v16);
  sub_5802C(v18, v19);
  View.modifier<A>(_:)(v12, v28, v10, v29);
  return sub_58058((uint64_t)v12);
}

uint64_t type metadata accessor for ShelfGridBreakpointViewModifier(uint64_t a1)
{
  uint64_t result;

  result = qword_260EA0;
  if (!qword_260EA0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ShelfGridBreakpointViewModifier);
  return result;
}

uint64_t sub_5802C(uint64_t result, uint64_t a2)
{
  if (result)
  {
    swift_bridgeObjectRetain(result);
    return swift_bridgeObjectRetain(a2);
  }
  return result;
}

uint64_t sub_58058(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ShelfGridBreakpointViewModifier(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_58098()
{
  unint64_t result;

  result = qword_260E28;
  if (!qword_260E28)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ShelfGridBreakpoint, &type metadata for ShelfGridBreakpoint);
    atomic_store(result, (unint64_t *)&qword_260E28);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for ShelfGridBreakpoint(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFA)
    goto LABEL_17;
  if (a2 + 6 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 6) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 6;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 6;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 6;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 7;
  v8 = v6 - 7;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ShelfGridBreakpoint(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_581B8 + 4 * byte_1E40B5[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_581EC + 4 * byte_1E40B0[v4]))();
}

uint64_t sub_581EC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_581F4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x581FCLL);
  return result;
}

uint64_t sub_58208(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x58210);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_58214(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_5821C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ShelfGridBreakpoint()
{
  return &type metadata for ShelfGridBreakpoint;
}

uint64_t sub_58238(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *a1;
  v2 = type metadata accessor for ShelfGridBreakpointViewModifier(255);
  v3 = type metadata accessor for ModifiedContent(255, v1, v2);
  sub_58294();
  return swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v3);
}

unint64_t sub_58294()
{
  unint64_t result;
  uint64_t v1;

  result = qword_260E30;
  if (!qword_260E30)
  {
    v1 = type metadata accessor for ShelfGridBreakpointViewModifier(255);
    result = swift_getWitnessTable(&unk_1E41F8, v1);
    atomic_store(result, (unint64_t *)&qword_260E30);
  }
  return result;
}

uint64_t *sub_582DC(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = sub_5440(&qword_25FAA8);
    if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
    {
      v8 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      v9 = a1;
      v10 = v7;
      v11 = 1;
    }
    else
    {
      v13 = *a2;
      *a1 = *a2;
      swift_retain(v13);
      v9 = a1;
      v10 = v7;
      v11 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v10, v11);
    v14 = a3[5];
    v15 = a3[6];
    v16 = (char *)a1 + v14;
    v17 = (char *)a2 + v14;
    v18 = *(_QWORD *)v17;
    v19 = *((_QWORD *)v17 + 1);
    *(_QWORD *)v16 = *(_QWORD *)v17;
    *((_QWORD *)v16 + 1) = v19;
    v16[16] = v17[16];
    v20 = (uint64_t *)((char *)a1 + v15);
    v21 = (char *)a2 + v15;
    v22 = *(uint64_t *)((char *)a2 + v15);
    v23 = *(uint64_t *)((char *)a2 + v15 + 8);
    *v20 = v22;
    v20[1] = v23;
    v25 = (uint64_t *)((char *)a2 + v15 + 16);
    v24 = *v25;
    swift_retain(v18);
    swift_retain(v19);
    swift_bridgeObjectRetain(v22);
    swift_bridgeObjectRetain(v23);
    if (v24)
    {
      v26 = *((_QWORD *)v21 + 3);
      v20[2] = v24;
      v20[3] = v26;
      swift_bridgeObjectRetain(v24);
      swift_bridgeObjectRetain(v26);
    }
    else
    {
      *((_OWORD *)v20 + 1) = *(_OWORD *)v25;
    }
    v27 = a3[7];
    v28 = (char *)a1 + v27;
    v29 = (char *)a2 + v27;
    *(_QWORD *)v28 = *(_QWORD *)v29;
    v28[8] = v29[8];
  }
  return a1;
}

uint64_t sub_58458(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t result;

  v4 = sub_5440(&qword_25FAA8);
  if (swift_getEnumCaseMultiPayload(a1, v4) == 1)
  {
    v5 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  }
  else
  {
    swift_release(*a1);
  }
  v6 = (_QWORD *)((char *)a1 + *(int *)(a2 + 20));
  swift_release(*v6);
  swift_release(v6[1]);
  v7 = (_QWORD *)((char *)a1 + *(int *)(a2 + 24));
  swift_bridgeObjectRelease(*v7);
  swift_bridgeObjectRelease(v7[1]);
  result = v7[2];
  if (result)
  {
    swift_bridgeObjectRelease(result);
    return swift_bridgeObjectRelease(v7[3]);
  }
  return result;
}

uint64_t *sub_58518(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;

  v6 = sub_5440(&qword_25FAA8);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a1;
    v9 = v6;
    v10 = 1;
  }
  else
  {
    v11 = *a2;
    *a1 = *a2;
    swift_retain(v11);
    v8 = a1;
    v9 = v6;
    v10 = 0;
  }
  swift_storeEnumTagMultiPayload(v8, v9, v10);
  v12 = a3[5];
  v13 = a3[6];
  v14 = (char *)a1 + v12;
  v15 = (char *)a2 + v12;
  v16 = *(_QWORD *)v15;
  v17 = *((_QWORD *)v15 + 1);
  *(_QWORD *)v14 = *(_QWORD *)v15;
  *((_QWORD *)v14 + 1) = v17;
  v14[16] = v15[16];
  v18 = (uint64_t *)((char *)a1 + v13);
  v19 = (char *)a2 + v13;
  v20 = *(uint64_t *)((char *)a2 + v13);
  v21 = *(uint64_t *)((char *)a2 + v13 + 8);
  *v18 = v20;
  v18[1] = v21;
  v23 = (uint64_t *)((char *)a2 + v13 + 16);
  v22 = *v23;
  swift_retain(v16);
  swift_retain(v17);
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRetain(v21);
  if (v22)
  {
    v24 = *((_QWORD *)v19 + 3);
    v18[2] = v22;
    v18[3] = v24;
    swift_bridgeObjectRetain(v22);
    swift_bridgeObjectRetain(v24);
  }
  else
  {
    *((_OWORD *)v18 + 1) = *(_OWORD *)v23;
  }
  v25 = a3[7];
  v26 = (char *)a1 + v25;
  v27 = (char *)a2 + v25;
  *(_QWORD *)v26 = *(_QWORD *)v27;
  v26[8] = v27[8];
  return a1;
}

uint64_t *sub_58668(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;

  if (a1 != a2)
  {
    sub_B414((uint64_t)a1, &qword_25FAA8);
    v6 = sub_5440(&qword_25FAA8);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = v6;
      v10 = 1;
    }
    else
    {
      v11 = *a2;
      *a1 = *a2;
      swift_retain(v11);
      v8 = a1;
      v9 = v6;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
  }
  v12 = a3[5];
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = *(uint64_t *)((char *)a1 + v12);
  v16 = *(uint64_t *)((char *)a2 + v12);
  *(uint64_t *)((char *)a1 + v12) = v16;
  swift_retain(v16);
  swift_release(v15);
  v17 = *((_QWORD *)v14 + 1);
  v18 = *((_QWORD *)v13 + 1);
  *((_QWORD *)v13 + 1) = v17;
  swift_retain(v17);
  swift_release(v18);
  v13[16] = v14[16];
  v19 = a3[6];
  v20 = (uint64_t *)((char *)a1 + v19);
  v21 = (uint64_t *)((char *)a2 + v19);
  v22 = *(uint64_t *)((char *)a2 + v19);
  v23 = *(uint64_t *)((char *)a1 + v19);
  *(uint64_t *)((char *)a1 + v19) = v22;
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRelease(v23);
  v24 = v21[1];
  v25 = v20[1];
  v20[1] = v24;
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRelease(v25);
  v26 = v20[2];
  v27 = v21[2];
  if (!v26)
  {
    if (v27)
    {
      v20[2] = v27;
      v30 = v21[3];
      v20[3] = v30;
      swift_bridgeObjectRetain(v27);
      swift_bridgeObjectRetain(v30);
      goto LABEL_13;
    }
LABEL_12:
    *((_OWORD *)v20 + 1) = *((_OWORD *)v21 + 1);
    goto LABEL_13;
  }
  if (!v27)
  {
    sub_B414((uint64_t)(v20 + 2), &qword_260E38);
    goto LABEL_12;
  }
  v20[2] = v27;
  swift_bridgeObjectRetain(v27);
  swift_bridgeObjectRelease(v26);
  v28 = v21[3];
  v29 = v20[3];
  v20[3] = v28;
  swift_bridgeObjectRetain(v28);
  swift_bridgeObjectRelease(v29);
LABEL_13:
  v31 = a3[7];
  v32 = (char *)a1 + v31;
  v33 = (char *)a2 + v31;
  v34 = *(_QWORD *)v33;
  v32[8] = v33[8];
  *(_QWORD *)v32 = v34;
  return a1;
}

char *sub_58848(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  char *v13;
  char *v14;
  __int128 v15;
  uint64_t v16;
  char *v17;
  char *v18;

  v6 = sub_5440(&qword_25FAA8);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v8 = a3[5];
  v9 = a3[6];
  v10 = &a1[v8];
  v11 = &a2[v8];
  v12 = *(_OWORD *)v11;
  v10[16] = v11[16];
  *(_OWORD *)v10 = v12;
  v13 = &a1[v9];
  v14 = &a2[v9];
  v15 = *((_OWORD *)v14 + 1);
  *(_OWORD *)v13 = *(_OWORD *)v14;
  *((_OWORD *)v13 + 1) = v15;
  v16 = a3[7];
  v17 = &a1[v16];
  v18 = &a2[v16];
  *(_QWORD *)v17 = *(_QWORD *)v18;
  v17[8] = v18[8];
  return a1;
}

char *sub_5892C(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;

  if (a1 != a2)
  {
    sub_B414((uint64_t)a1, &qword_25FAA8);
    v6 = sub_5440(&qword_25FAA8);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
  }
  v8 = a3[5];
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = *(_QWORD *)&a1[v8];
  *(_QWORD *)&a1[v8] = *(_QWORD *)&a2[v8];
  swift_release(v11);
  v12 = *((_QWORD *)v9 + 1);
  *((_QWORD *)v9 + 1) = *((_QWORD *)v10 + 1);
  swift_release(v12);
  v9[16] = v10[16];
  v13 = a3[6];
  v14 = &a1[v13];
  v15 = &a2[v13];
  v16 = *(_QWORD *)&a1[v13];
  *(_QWORD *)&a1[v13] = *(_QWORD *)&a2[v13];
  swift_bridgeObjectRelease(v16);
  v17 = *((_QWORD *)v14 + 1);
  *((_QWORD *)v14 + 1) = *((_QWORD *)v15 + 1);
  swift_bridgeObjectRelease(v17);
  v18 = *((_QWORD *)v14 + 2);
  v19 = *((_QWORD *)v15 + 2);
  if (!v18)
    goto LABEL_9;
  if (!v19)
  {
    sub_B414((uint64_t)(v14 + 16), &qword_260E38);
LABEL_9:
    *((_OWORD *)v14 + 1) = *((_OWORD *)v15 + 1);
    goto LABEL_10;
  }
  *((_QWORD *)v14 + 2) = v19;
  swift_bridgeObjectRelease(v18);
  v20 = *((_QWORD *)v14 + 3);
  *((_QWORD *)v14 + 3) = *((_QWORD *)v15 + 3);
  swift_bridgeObjectRelease(v20);
LABEL_10:
  v21 = a3[7];
  v22 = &a1[v21];
  v23 = &a2[v21];
  *(_QWORD *)v22 = *(_QWORD *)v23;
  v22[8] = v23[8];
  return a1;
}

uint64_t sub_58AB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_58AC4);
}

uint64_t sub_58AC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = sub_5440(&qword_260E40);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_58B48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_58B54);
}

uint64_t sub_58B54(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_5440(&qword_260E40);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  return result;
}

void sub_58BD4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[4];

  sub_58C58(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(v2 - 8) + 64;
    v4[1] = &unk_1E41B0;
    v4[2] = &unk_1E41C8;
    v4[3] = &unk_1E41E0;
    swift_initStructMetadata(a1, 256, 4, v4, a1 + 16);
  }
}

void sub_58C58(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_260EB0)
  {
    v2 = type metadata accessor for DynamicTypeSize(255);
    v3 = type metadata accessor for Environment.Content(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_260EB0);
  }
}

uint64_t sub_58CAC(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_22B274, 1);
}

uint64_t sub_58CBC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ShelfGridBreakpointViewModifier(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_58D04(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ShelfGridBreakpointViewModifier(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_58D48@<X0>(_BYTE *a1@<X8>)
{
  type metadata accessor for ShelfGridBreakpointViewModifier(0);
  return sub_57B5C(a1);
}

uint64_t sub_58D9C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;

  v1 = type metadata accessor for ShelfGridBreakpointViewModifier(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = (_QWORD *)(v0 + v4);
  v7 = sub_5440(&qword_25FAA8);
  if (swift_getEnumCaseMultiPayload(v0 + v4, v7) == 1)
  {
    v8 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v0 + v4, v8);
  }
  else
  {
    swift_release(*v6);
  }
  v9 = (_QWORD *)((char *)v6 + *(int *)(v1 + 20));
  swift_release(*v9);
  swift_release(v9[1]);
  v10 = (_QWORD *)((char *)v6 + *(int *)(v1 + 24));
  swift_bridgeObjectRelease(*v10);
  swift_bridgeObjectRelease(v10[1]);
  v11 = v10[2];
  if (v11)
  {
    swift_bridgeObjectRelease(v11);
    swift_bridgeObjectRelease(v10[3]);
  }
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_58E88(char *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ShelfGridBreakpointViewModifier(0) - 8) + 80);
  return sub_57CEC(a1, v1 + ((v3 + 16) & ~v3));
}

unint64_t sub_58EC8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_260F00;
  if (!qword_260F00)
  {
    v1 = sub_7EF8(&qword_260EF0);
    sub_7FD8(&qword_260F08, &qword_260EE8, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
    sub_7FD8(&qword_260F10, &qword_260F18, (uint64_t)&protocol conformance descriptor for _BackgroundModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_260F00);
  }
  return result;
}

uint64_t LegacyPDFCoverEffect.init(cornerRadius:)@<X0>(double *a1@<X8>, double a2@<D0>)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t result;

  v4 = (_QWORD *)((char *)a1 + *(int *)(type metadata accessor for LegacyPDFCoverEffect(0) + 20));
  *v4 = swift_getKeyPath(&unk_1E4250);
  v5 = sub_5440(&qword_25E948);
  result = swift_storeEnumTagMultiPayload(v4, v5, 0);
  *a1 = a2;
  return result;
}

uint64_t type metadata accessor for LegacyPDFCoverEffect(uint64_t a1)
{
  uint64_t result;

  result = qword_260FC8;
  if (!qword_260FC8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for LegacyPDFCoverEffect);
  return result;
}

uint64_t LegacyPDFCoverEffect.body(cover:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t (*v13)(_QWORD);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;

  v3 = v2;
  v6 = sub_5440(&qword_260F20);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  __chkstk_darwin(v6);
  v9 = type metadata accessor for LegacyPDFCoverEffect(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  __chkstk_darwin(v9);
  v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1E428(v3, (uint64_t)v12, v13);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v6);
  v14 = *(unsigned __int8 *)(v10 + 80);
  v15 = (v14 + 16) & ~v14;
  v16 = *(unsigned __int8 *)(v7 + 80);
  v17 = (v11 + v16 + v15) & ~v16;
  v18 = swift_allocObject(&unk_24D450, v17 + v8, v14 | v16 | 7);
  sub_591CC((uint64_t)v12, v18 + v15);
  result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v7 + 32))(v18 + v17, (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  *a2 = sub_59210;
  a2[1] = v18;
  return result;
}

uint64_t sub_59154@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  double v7;
  double v8;
  double v9;
  uint64_t v10;
  uint64_t v11;

  v7 = GeometryProxy.size.getter(a1);
  v9 = v8;
  *a4 = _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0();
  a4[1] = v10;
  v11 = sub_5440(&qword_261010);
  return sub_59214(a2, a3, (uint64_t)a4 + *(int *)(v11 + 44), v7, v9);
}

uint64_t sub_591CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for LegacyPDFCoverEffect(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_59214@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t, uint64_t);
  double v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  double v44;
  uint64_t v45;
  char *v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _OWORD *v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  double v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  _OWORD v88[3];
  _OWORD v89[3];
  _OWORD v90[3];

  v81 = a2;
  v85 = a1;
  v83 = a3;
  v79 = sub_5440(&qword_261018);
  __chkstk_darwin(v79);
  v77 = (char *)&v69 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v80 = sub_5440(&qword_261020);
  v9 = __chkstk_darwin(v80);
  v78 = (char *)&v69 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v82 = (uint64_t)&v69 - v11;
  v12 = type metadata accessor for RoundedRectangle(0);
  v86 = v12;
  __chkstk_darwin(v12);
  v14 = (char *)&v69 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_5440(&qword_261028);
  v72 = v15;
  __chkstk_darwin(v15);
  v17 = (char *)&v69 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_5440(&qword_261030);
  v70 = v18;
  __chkstk_darwin(v18);
  v20 = (char *)&v69 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v73 = sub_5440(&qword_261038);
  v21 = __chkstk_darwin(v73);
  v76 = (uint64_t)&v69 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __chkstk_darwin(v21);
  v75 = (uint64_t)&v69 - v24;
  v25 = __chkstk_darwin(v23);
  v84 = (uint64_t)&v69 - v26;
  __chkstk_darwin(v25);
  v87 = (uint64_t)&v69 - v27;
  v28 = *a1;
  v29 = &v14[*(int *)(v12 + 20)];
  v30 = enum case for RoundedCornerStyle.continuous(_:);
  v71 = type metadata accessor for RoundedCornerStyle(0);
  v31 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v71 - 8) + 104);
  v74 = v30;
  v31(v29, v30, v71);
  *(_QWORD *)v14 = v28;
  *((_QWORD *)v14 + 1) = v28;
  sub_1E428((uint64_t)v14, (uint64_t)v17, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  *(_WORD *)&v17[*(int *)(v15 + 56)] = 256;
  sub_5A2E0((uint64_t)v14);
  v69 = a4;
  v32 = a5;
  v33 = _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0();
  _FrameLayout.init(width:height:alignment:)(v88, *(_QWORD *)&a4, 0, *(_QWORD *)&a5, 0, v33, v34);
  sub_B3D0((uint64_t)v17, (uint64_t)v20, &qword_261028);
  v35 = &v20[*(int *)(v18 + 36)];
  v36 = v88[1];
  *(_OWORD *)v35 = v88[0];
  *((_OWORD *)v35 + 1) = v36;
  *((_OWORD *)v35 + 2) = v88[2];
  sub_B414((uint64_t)v17, &qword_261028);
  v37 = Color.init(uiColor:)(objc_msgSend(objc_allocWithZone((Class)UIColor), "initWithWhite:alpha:", 0.0, 0.12));
  v38 = v84;
  sub_B3D0((uint64_t)v20, v84, &qword_261030);
  v39 = v73;
  v40 = v38 + *(int *)(v73 + 36);
  *(_QWORD *)v40 = v37;
  *(double *)(v40 + 8) = a4 / 618.0 * 20.0;
  *(_QWORD *)(v40 + 16) = 0;
  *(double *)(v40 + 24) = a4 / 618.0 * 6.0;
  sub_B414((uint64_t)v20, &qword_261030);
  sub_167A4(v38, v87, &qword_261038);
  v41 = *v85;
  v42 = v71;
  v31(&v14[*(int *)(v86 + 20)], v30, v71);
  *(_QWORD *)v14 = v41;
  *((_QWORD *)v14 + 1) = v41;
  sub_1E428((uint64_t)v14, (uint64_t)v17, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  *(_WORD *)&v17[*(int *)(v72 + 56)] = 256;
  sub_5A2E0((uint64_t)v14);
  v43 = _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0();
  v44 = v69;
  _FrameLayout.init(width:height:alignment:)(v89, *(_QWORD *)&v69, 0, *(_QWORD *)&v32, 0, v43, v45);
  sub_B3D0((uint64_t)v17, (uint64_t)v20, &qword_261028);
  v46 = &v20[*(int *)(v70 + 36)];
  v47 = v89[1];
  *(_OWORD *)v46 = v89[0];
  *((_OWORD *)v46 + 1) = v47;
  *((_OWORD *)v46 + 2) = v89[2];
  sub_B414((uint64_t)v17, &qword_261028);
  v48 = Color.init(uiColor:)(objc_msgSend(objc_allocWithZone((Class)UIColor), "initWithWhite:alpha:", 0.0, 0.08));
  v49 = v75;
  sub_B3D0((uint64_t)v20, v75, &qword_261030);
  v50 = v49 + *(int *)(v39 + 36);
  *(_QWORD *)v50 = v48;
  *(double *)(v50 + 8) = a4 / 618.0 * 4.0;
  *(_QWORD *)(v50 + 16) = 0;
  *(double *)(v50 + 24) = a4 / 618.0;
  sub_B414((uint64_t)v20, &qword_261030);
  v51 = v84;
  sub_167A4(v49, v84, &qword_261038);
  v52 = _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0();
  _FrameLayout.init(width:height:alignment:)(v90, *(_QWORD *)&v44, 0, *(_QWORD *)&v32, 0, v52, v53);
  v54 = sub_5440(&qword_260F20);
  v55 = (uint64_t)v77;
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v54 - 8) + 16))(v77, v81, v54);
  v56 = (_OWORD *)(v55 + *(int *)(v79 + 36));
  v57 = v90[1];
  *v56 = v90[0];
  v56[1] = v57;
  v56[2] = v90[2];
  v58 = *v85;
  v31(&v14[*(int *)(v86 + 20)], v74, v42);
  *(_QWORD *)v14 = v58;
  *((_QWORD *)v14 + 1) = v58;
  v59 = (uint64_t)v78;
  v60 = (uint64_t)&v78[*(int *)(v80 + 36)];
  sub_1E428((uint64_t)v14, v60, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  *(_WORD *)(v60 + *(int *)(sub_5440(&qword_25F700) + 36)) = 256;
  sub_B3D0(v55, v59, &qword_261018);
  sub_5A2E0((uint64_t)v14);
  sub_B414(v55, &qword_261018);
  v61 = v82;
  sub_167A4(v59, v82, &qword_261020);
  v62 = v87;
  sub_B3D0(v87, v49, &qword_261038);
  v63 = v51;
  v64 = v76;
  sub_B3D0(v51, v76, &qword_261038);
  v65 = v61;
  sub_B3D0(v61, v59, &qword_261020);
  v66 = v83;
  sub_B3D0(v49, v83, &qword_261038);
  v67 = sub_5440(&qword_261040);
  sub_B3D0(v64, v66 + *(int *)(v67 + 48), &qword_261038);
  sub_B3D0(v59, v66 + *(int *)(v67 + 64), &qword_261020);
  sub_B414(v65, &qword_261020);
  sub_B414(v63, &qword_261038);
  sub_B414(v62, &qword_261038);
  sub_B414(v59, &qword_261020);
  sub_B414(v64, &qword_261038);
  return sub_B414(v49, &qword_261038);
}

uint64_t LegacyPDFCoverEffect.shape.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v3 = *v1;
  v4 = (char *)a1 + *(int *)(type metadata accessor for RoundedRectangle(0) + 20);
  v5 = enum case for RoundedCornerStyle.continuous(_:);
  v6 = type metadata accessor for RoundedCornerStyle(0);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 104))(v4, v5, v6);
  *a1 = v3;
  a1[1] = v3;
  return result;
}

uint64_t sub_59A54(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &opaque type descriptor for <<opaque return type of LegacyPDFCoverEffect.body(cover:)>>, 1);
}

uint64_t sub_59A64(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &opaque type descriptor for <<opaque return type of LegacyPDFCoverEffect.shape>>, 1);
}

uint64_t sub_59A74@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;

  v5 = v3;
  v8 = sub_5440(&qword_260F20);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  v11 = __chkstk_darwin(v8);
  v12 = *(_QWORD *)(a2 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  __chkstk_darwin(v11);
  v14 = (char *)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1E428(v5, (uint64_t)v14, type metadata accessor for LegacyPDFCoverEffect);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v8);
  v15 = *(unsigned __int8 *)(v12 + 80);
  v16 = (v15 + 16) & ~v15;
  v17 = *(unsigned __int8 *)(v9 + 80);
  v18 = (v13 + v16 + v17) & ~v17;
  v19 = swift_allocObject(&unk_24D478, v18 + v10, v15 | v17 | 7);
  sub_591CC((uint64_t)v14, v19 + v16);
  result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v9 + 32))(v19 + v18, (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
  *a3 = sub_59210;
  a3[1] = v19;
  return result;
}

uint64_t sub_59BB4(uint64_t a1)
{
  uint64_t result;

  result = sub_6FD0(&qword_260F68, type metadata accessor for LegacyPDFCoverEffect, (uint64_t)&protocol conformance descriptor for LegacyPDFCoverEffect);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for LegacyPDFCoverEffect(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v13 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v13 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain(v13);
  }
  else
  {
    *a1 = *a2;
    v5 = *(int *)(a3 + 20);
    v6 = (uint64_t *)((char *)a1 + v5);
    v7 = (uint64_t *)((char *)a2 + v5);
    v8 = sub_5440(&qword_25E948);
    if (swift_getEnumCaseMultiPayload(v7, v8) == 1)
    {
      v9 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v6, v7, v9);
      v10 = v6;
      v11 = v8;
      v12 = 1;
    }
    else
    {
      v14 = *v7;
      *v6 = *v7;
      swift_retain(v14);
      v10 = v6;
      v11 = v8;
      v12 = 0;
    }
    swift_storeEnumTagMultiPayload(v10, v11, v12);
  }
  return v3;
}

double destroy for LegacyPDFCoverEffect(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  double result;

  v2 = (_QWORD *)(a1 + *(int *)(a2 + 20));
  v3 = sub_5440(&qword_25E948);
  if (swift_getEnumCaseMultiPayload(v2, v3) == 1)
  {
    v4 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v2, v4);
  }
  else
  {
    *(_QWORD *)&result = swift_release(*v2).n128_u64[0];
  }
  return result;
}

_QWORD *initializeWithCopy for LegacyPDFCoverEffect(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (_QWORD *)((char *)a1 + v4);
  v6 = (_QWORD *)((char *)a2 + v4);
  v7 = sub_5440(&qword_25E948);
  if (swift_getEnumCaseMultiPayload(v6, v7) == 1)
  {
    v8 = type metadata accessor for ColorScheme(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v5, v6, v8);
    v9 = 1;
  }
  else
  {
    v10 = *v6;
    *v5 = *v6;
    swift_retain(v10);
    v9 = 0;
  }
  swift_storeEnumTagMultiPayload(v5, v7, v9);
  return a1;
}

_QWORD *assignWithCopy for LegacyPDFCoverEffect(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *a1 = *a2;
  if (a1 != a2)
  {
    v4 = *(int *)(a3 + 20);
    v5 = (_QWORD *)((char *)a1 + v4);
    v6 = (_QWORD *)((char *)a2 + v4);
    sub_B414((uint64_t)a1 + v4, &qword_25E948);
    v7 = sub_5440(&qword_25E948);
    if (swift_getEnumCaseMultiPayload(v6, v7) == 1)
    {
      v8 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v5, v6, v8);
      v9 = 1;
    }
    else
    {
      v10 = *v6;
      *v5 = *v6;
      swift_retain(v10);
      v9 = 0;
    }
    swift_storeEnumTagMultiPayload(v5, v7, v9);
  }
  return a1;
}

_QWORD *initializeWithTake for LegacyPDFCoverEffect(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = sub_5440(&qword_25E948);
  if (swift_getEnumCaseMultiPayload(v6, v7) == 1)
  {
    v8 = type metadata accessor for ColorScheme(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v5, v6, v8);
    swift_storeEnumTagMultiPayload(v5, v7, 1);
  }
  else
  {
    memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
  }
  return a1;
}

_QWORD *assignWithTake for LegacyPDFCoverEffect(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;

  *a1 = *a2;
  if (a1 != a2)
  {
    v4 = *(int *)(a3 + 20);
    v5 = (char *)a1 + v4;
    v6 = (char *)a2 + v4;
    sub_B414((uint64_t)a1 + v4, &qword_25E948);
    v7 = sub_5440(&qword_25E948);
    if (swift_getEnumCaseMultiPayload(v6, v7) == 1)
    {
      v8 = type metadata accessor for ColorScheme(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v5, v6, v8);
      swift_storeEnumTagMultiPayload(v5, v7, 1);
    }
    else
    {
      memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for LegacyPDFCoverEffect(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_5A004);
}

uint64_t sub_5A004(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a1 + *(int *)(a3 + 20);
  v5 = sub_5440(&qword_25EAE8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, a2, v5);
}

uint64_t storeEnumTagSinglePayload for LegacyPDFCoverEffect(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_5A054);
}

uint64_t sub_5A054(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = a1 + *(int *)(a4 + 20);
  v6 = sub_5440(&qword_25EAE8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, a2, a2, v6);
}

void sub_5A09C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = (char *)&value witness table for Builtin.Int64 + 64;
  sub_40964(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(v2 - 8) + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
  }
}

unint64_t sub_5A118()
{
  unint64_t result;
  uint64_t v1;

  result = qword_261000;
  if (!qword_261000)
  {
    v1 = sub_7EF8(&qword_261008);
    result = swift_getWitnessTable(&protocol conformance descriptor for GeometryReader<A>, v1);
    atomic_store(result, (unint64_t *)&qword_261000);
  }
  return result;
}

uint64_t sub_5A168()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = type metadata accessor for LegacyPDFCoverEffect(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = sub_5440(&qword_260F20);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(v7 + 64);
  v10 = (_QWORD *)(v0 + *(int *)(v1 + 20) + v4);
  v11 = sub_5440(&qword_25E948);
  if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
  {
    v12 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v10, v12);
  }
  else
  {
    v13 = swift_release(*v10);
  }
  v14 = v3 | v8 | 7;
  v15 = (v4 + v5 + v8) & ~v8;
  v16 = v15 + v9;
  (*(void (**)(uint64_t, uint64_t, __n128))(v7 + 8))(v0 + v15, v6, v13);
  return swift_deallocObject(v0, v16, v14);
}

uint64_t sub_5A264@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  v5 = *(_QWORD *)(type metadata accessor for LegacyPDFCoverEffect(0) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = v6 + *(_QWORD *)(v5 + 64);
  v8 = *(unsigned __int8 *)(*(_QWORD *)(sub_5440(&qword_260F20) - 8) + 80);
  return sub_59154(a1, (uint64_t *)(v2 + v6), v2 + ((v7 + v8) & ~v8), a2);
}

uint64_t sub_5A2E0(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for RoundedRectangle(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t PlaceholderTextView.PlaceholderSize.init(rawValue:)@<X0>(uint64_t result@<X0>, char *a2@<X8>)
{
  char v2;
  char v3;

  if (result == 30)
    v2 = 2;
  else
    v2 = 3;
  if (result == 20)
    v3 = 1;
  else
    v3 = v2;
  if (result == 10)
    v3 = 0;
  *a2 = v3;
  return result;
}

uint64_t PlaceholderTextView.PlaceholderSize.rawValue.getter()
{
  unsigned __int8 *v0;

  return 10 * *v0 + 10;
}

uint64_t sub_5A35C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for PlaceholderTextView<A>.PlaceholderSize, a3);
  return == infix<A>(_:_:)(a1, a2, a3, WitnessTable, &protocol witness table for Int);
}

uint64_t sub_5A3B0(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for PlaceholderTextView<A>.PlaceholderSize, a1);
  return RawRepresentable<>.hashValue.getter(a1, a2, WitnessTable, &protocol witness table for Int);
}

uint64_t sub_5A3FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for PlaceholderTextView<A>.PlaceholderSize, a2);
  return RawRepresentable<>.hash(into:)(a1, a2, a3, WitnessTable, &protocol witness table for Int);
}

uint64_t sub_5A44C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for PlaceholderTextView<A>.PlaceholderSize, a2);
  return RawRepresentable<>._rawHashValue(seed:)(a1, a2, a3, WitnessTable, &protocol witness table for Int);
}

uint64_t sub_5A49C@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  return PlaceholderTextView.PlaceholderSize.init(rawValue:)(*a1, a2);
}

uint64_t sub_5A4A4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = PlaceholderTextView.PlaceholderSize.rawValue.getter();
  *a1 = result;
  return result;
}

uint64_t PlaceholderTextView.init<>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t (**v4)(uint64_t);

  sub_5A50C(a1, a2);
  result = sub_5440(&qword_261050);
  v4 = (uint64_t (**)(uint64_t))(a2 + *(int *)(result + 28));
  *v4 = sub_5A554;
  v4[1] = 0;
  return result;
}

uint64_t sub_5A50C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_5440(&qword_261048);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_5A554(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v2 = type metadata accessor for LocalizerRequest(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for LocalizedText(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v16 - v11;
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, a1, v2);
  LocalizedText.init(_:)(v5);
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v10, v12, v6);
  v13 = sub_5C448();
  v14 = AnyView.init<A>(_:)(v10, v6, v13);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v6);
  return v14;
}

uint64_t PlaceholderTextView.init<A>(_:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v14;
  uint64_t (*v15)(uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t (**v19)(uint64_t);

  v14 = type metadata accessor for PlaceholderTextView.ContentType(0, a4, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(a7, a1, v14);
  v15 = (uint64_t (*)(uint64_t))swift_allocObject(&unk_24D4E0, 56, 7);
  *((_QWORD *)v15 + 2) = a4;
  *((_QWORD *)v15 + 3) = a5;
  *((_QWORD *)v15 + 4) = a6;
  *((_QWORD *)v15 + 5) = a2;
  *((_QWORD *)v15 + 6) = a3;
  result = type metadata accessor for PlaceholderTextView(0, a4, v16, v17);
  v19 = (uint64_t (**)(uint64_t))(a7 + *(int *)(result + 28));
  *v19 = sub_5A7F0;
  v19[1] = v15;
  return result;
}

uint64_t type metadata accessor for PlaceholderTextView.ContentType(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10E40(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PlaceholderTextView.ContentType);
}

uint64_t sub_5A738(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v15;

  v8 = *(_QWORD *)(a5 - 8);
  v9 = __chkstk_darwin(a1);
  v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12(v9);
  v13 = sub_5C3CC((uint64_t)v11, a5, a6);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, a5);
  return v13;
}

uint64_t sub_5A7CC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_5A7F0(uint64_t a1)
{
  uint64_t *v1;

  return sub_5A738(a1, v1[5], v1[6], v1[2], v1[3], v1[4]);
}

uint64_t type metadata accessor for PlaceholderTextView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10E40(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PlaceholderTextView);
}

uint64_t PlaceholderTextView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 *v22;
  uint64_t v23;
  int EnumCaseMultiPayload;
  Swift::String v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t OpaqueTypeConformance2;
  uint64_t v33;
  char v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  char object;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  Swift::String v52;
  char v53;
  void *v54;

  v49 = a2;
  v4 = type metadata accessor for RedactionReasons(0);
  v43 = *(_QWORD *)(v4 - 8);
  v44 = v4;
  __chkstk_darwin(v4);
  v6 = (char *)&v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = sub_5440(&qword_25F898);
  v46 = *(_QWORD *)(v48 - 8);
  v7 = __chkstk_darwin(v48);
  v9 = (char *)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v7);
  v45 = (char *)&v42 - v11;
  v12 = *(_QWORD *)(a1 + 16);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v10);
  v15 = (char *)&v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = sub_5440(&qword_261058);
  __chkstk_darwin(v47);
  v17 = (char *)&v42 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for PlaceholderTextView.ContentType(0, v12, v18, v19);
  __chkstk_darwin(v20);
  v22 = (unsigned __int8 *)&v42 - v21;
  (*(void (**)(char *, uint64_t, uint64_t))(v23 + 16))((char *)&v42 - v21, v2, v20);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v22, v20);
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      v25._countAndFlagsBits = 32;
      v25._object = (void *)0xE100000000000000;
      v52 = String.init(repeating:count:)(v25, 10 * (unint64_t)*v22 + 10);
      v53 = 0;
      v54 = &_swiftEmptyArrayStorage;
      static RedactionReasons.placeholder.getter();
      View.redacted(reason:)(v6, &type metadata for Text, &protocol witness table for Text);
      (*(void (**)(char *, uint64_t))(v43 + 8))(v6, v44);
      sub_2B574(v52._countAndFlagsBits, (uint64_t)v52._object, v53);
      swift_bridgeObjectRelease(v54);
      v27 = v45;
      v26 = v46;
      v28 = v48;
      (*(void (**)(char *, char *, uint64_t))(v46 + 32))(v45, v9, v48);
      (*(void (**)(char *, char *, uint64_t))(v26 + 16))(v17, v27, v28);
      swift_storeEnumTagMultiPayload(v17, v47, 1);
      v29 = sub_5440(&qword_261060);
      v30 = sub_5AC90();
      v52._countAndFlagsBits = (uint64_t)&type metadata for Text;
      v52._object = &protocol witness table for Text;
      OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v52, &opaque type descriptor for <<opaque return type of View.redacted(reason:)>>, 1);
      _ConditionalContent<>.init(storage:)(v17, v29, v28, v30, OpaqueTypeConformance2);
      return (*(uint64_t (**)(char *, uint64_t))(v26 + 8))(v27, v28);
    }
    else
    {
      v50 = 0;
      v51 = 0;
      _ConditionalContent<>.init(storage:)(&v50, &type metadata for EmptyView, &type metadata for AnyView, &protocol witness table for EmptyView, &protocol witness table for AnyView);
      object = (char)v52._object;
      *(_QWORD *)v17 = v52._countAndFlagsBits;
      v17[8] = object;
      swift_storeEnumTagMultiPayload(v17, v47, 0);
      v39 = sub_5440(&qword_261060);
      v40 = sub_5AC90();
      v52._countAndFlagsBits = (uint64_t)&type metadata for Text;
      v52._object = &protocol witness table for Text;
      v41 = swift_getOpaqueTypeConformance2(&v52, &opaque type descriptor for <<opaque return type of View.redacted(reason:)>>, 1);
      return _ConditionalContent<>.init(storage:)(v17, v39, v48, v40, v41);
    }
  }
  else
  {
    (*(void (**)(char *, unsigned __int8 *, uint64_t))(v13 + 32))(v15, v22, v12);
    v33 = (*(uint64_t (**)(char *))(v2 + *(int *)(a1 + 28)))(v15);
    v50 = v33;
    v51 = 1;
    swift_retain(v33);
    _ConditionalContent<>.init(storage:)(&v50, &type metadata for EmptyView, &type metadata for AnyView, &protocol witness table for EmptyView, &protocol witness table for AnyView);
    v34 = (char)v52._object;
    *(_QWORD *)v17 = v52._countAndFlagsBits;
    v17[8] = v34;
    swift_storeEnumTagMultiPayload(v17, v47, 0);
    v35 = sub_5440(&qword_261060);
    v36 = sub_5AC90();
    v52._countAndFlagsBits = (uint64_t)&type metadata for Text;
    v52._object = &protocol witness table for Text;
    v37 = swift_getOpaqueTypeConformance2(&v52, &opaque type descriptor for <<opaque return type of View.redacted(reason:)>>, 1);
    _ConditionalContent<>.init(storage:)(v17, v35, v48, v36, v37);
    swift_release(v33);
    return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  }
}

uint64_t type metadata accessor for PlaceholderTextView.PlaceholderSize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10E40(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PlaceholderTextView.PlaceholderSize);
}

unint64_t sub_5AC90()
{
  unint64_t result;
  uint64_t v1;

  result = qword_261068[0];
  if (!qword_261068[0])
  {
    v1 = sub_7EF8(&qword_261060);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, qword_261068);
  }
  return result;
}

uint64_t sub_5ACF4(uint64_t a1)
{
  return swift_getWitnessTable(&protocol conformance descriptor for PlaceholderTextView<A>.PlaceholderSize, a1);
}

uint64_t sub_5AD04(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 16);
  return swift_getOpaqueTypeConformance2(&v3, &opaque type descriptor for <<opaque return type of PlaceholderTextView.body>>, 1);
}

uint64_t sub_5AD3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v6;
  _QWORD v7[2];

  result = type metadata accessor for PlaceholderTextView.ContentType(319, *(_QWORD *)(a1 + 16), a3, a4);
  if (v6 <= 0x3F)
  {
    v7[0] = *(_QWORD *)(result - 8) + 64;
    v7[1] = (char *)&value witness table for () + 64;
    swift_initStructMetadata(a1, 0, 2, v7, a1 + 24);
    return 0;
  }
  return result;
}

unsigned __int8 *sub_5ADB4(unsigned __int8 *__dst, unsigned __int8 *__src, uint64_t a3)
{
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  _QWORD *v14;

  v4 = __dst;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  if (*(_QWORD *)(v5 + 64) <= 1uLL)
    v6 = 1;
  else
    v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || (v6 & 0xFFFFFFFFFFFFFFF8) != 0 && (v6 & 0xFFFFFFFFFFFFFFF8) < 0xFFFFFFFFFFFFFFE8)
  {
    v9 = *(_QWORD *)__src;
    *(_QWORD *)v4 = *(_QWORD *)__src;
    v4 = (unsigned __int8 *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }
  else
  {
    v10 = __src[v6];
    if (v10 >= 2)
    {
      if (v6 <= 3)
        v11 = v6;
      else
        v11 = 4;
      __asm { BR              X13 }
    }
    if (v10 == 1)
    {
      *__dst = *__src;
      __dst[v6] = 1;
    }
    else
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *))(v5 + 16))(__dst, __src);
      v4[v6] = 0;
    }
    v12 = (uint64_t *)((unint64_t)&__src[v6 + 8] & 0xFFFFFFFFFFFFFFF8);
    v13 = *v12;
    v9 = v12[1];
    v14 = (_QWORD *)((unint64_t)&v4[v6 + 8] & 0xFFFFFFFFFFFFFFF8);
    *v14 = v13;
    v14[1] = v9;
  }
  swift_retain(v9);
  return v4;
}

uint64_t sub_5AF0C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  if (*(_QWORD *)(v3 + 64) <= 1uLL)
    v4 = 1;
  else
    v4 = *(_QWORD *)(v3 + 64);
  if (*(unsigned __int8 *)(a1 + v4) >= 2u)
  {
    if (v4 <= 3)
      v5 = v4;
    else
      v5 = 4;
    __asm { BR              X12 }
  }
  if (!*(_BYTE *)(a1 + v4))
    (*(void (**)(uint64_t))(v3 + 8))(a1);
  return swift_release(*(_QWORD *)((char *)&dword_8 + ((a1 + v4 + 8) & 0xFFFFFFFFFFFFF8)));
}

unsigned __int8 *sub_5AFCC(unsigned __int8 *__dst, unsigned __int8 *__src, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  if (*(_QWORD *)(v5 + 64) <= 1uLL)
    v6 = 1;
  else
    v6 = *(_QWORD *)(v5 + 64);
  v7 = __src[v6];
  if (v7 >= 2)
  {
    if (v6 <= 3)
      v8 = v6;
    else
      v8 = 4;
    __asm { BR              X13 }
  }
  if (v7 == 1)
  {
    *__dst = *__src;
    __dst[v6] = 1;
  }
  else
  {
    (*(void (**)(unsigned __int8 *, unsigned __int8 *))(v5 + 16))(__dst, __src);
    __dst[v6] = 0;
  }
  v9 = (uint64_t *)((unint64_t)&__src[v6 + 8] & 0xFFFFFFFFFFFFFFF8);
  v11 = *v9;
  v10 = v9[1];
  v12 = (_QWORD *)((unint64_t)&__dst[v6 + 8] & 0xFFFFFFFFFFFFFFF8);
  *v12 = v11;
  v12[1] = v10;
  swift_retain(v10);
  return __dst;
}

unsigned __int8 *sub_5B0E4(unsigned __int8 *__dst, unsigned __int8 *__src, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  if (*(_QWORD *)(v6 + 64) <= 1uLL)
    v7 = 1;
  else
    v7 = *(_QWORD *)(v6 + 64);
  if (__dst != __src)
  {
    if (__dst[v7] >= 2u)
    {
      if (v7 <= 3)
        v8 = v7;
      else
        v8 = 4;
      __asm { BR              X11 }
    }
    if (!__dst[v7])
      (*(void (**)(unsigned __int8 *, _QWORD))(v6 + 8))(__dst, *(_QWORD *)(a3 + 16));
    v9 = __src[v7];
    if (v9 >= 2)
    {
      if (v7 <= 3)
        v10 = v7;
      else
        v10 = 4;
      __asm { BR              X12 }
    }
    if (v9 == 1)
    {
      *__dst = *__src;
      __dst[v7] = 1;
    }
    else
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 16))(__dst, __src, v5);
      __dst[v7] = 0;
    }
  }
  v11 = (_QWORD *)((unint64_t)&__dst[v7 + 8] & 0xFFFFFFFFFFFFFFF8);
  v12 = (_QWORD *)((unint64_t)&__src[v7 + 8] & 0xFFFFFFFFFFFFFFF8);
  v13 = v12[1];
  v14 = v11[1];
  *v11 = *v12;
  v11[1] = v13;
  swift_retain(v13);
  swift_release(v14);
  return __dst;
}

unsigned __int8 *sub_5B2A0(unsigned __int8 *__dst, unsigned __int8 *__src, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  if (*(_QWORD *)(v5 + 64) <= 1uLL)
    v6 = 1;
  else
    v6 = *(_QWORD *)(v5 + 64);
  v7 = __src[v6];
  if (v7 >= 2)
  {
    if (v6 <= 3)
      v8 = v6;
    else
      v8 = 4;
    __asm { BR              X13 }
  }
  if (v7 == 1)
  {
    *__dst = *__src;
    __dst[v6] = 1;
  }
  else
  {
    (*(void (**)(unsigned __int8 *, unsigned __int8 *))(v5 + 32))(__dst, __src);
    __dst[v6] = 0;
  }
  *(_OWORD *)((unint64_t)&__dst[v6 + 8] & 0xFFFFFFFFFFFFF8) = *(_OWORD *)((unint64_t)&__src[v6 + 8] & 0xFFFFFFFFFFFFF8);
  return __dst;
}

unsigned __int8 *sub_5B3B4(unsigned __int8 *__dst, unsigned __int8 *__src, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  if (*(_QWORD *)(v6 + 64) <= 1uLL)
    v7 = 1;
  else
    v7 = *(_QWORD *)(v6 + 64);
  if (__dst != __src)
  {
    if (__dst[v7] >= 2u)
    {
      if (v7 <= 3)
        v8 = v7;
      else
        v8 = 4;
      __asm { BR              X11 }
    }
    if (!__dst[v7])
      (*(void (**)(unsigned __int8 *, _QWORD))(v6 + 8))(__dst, *(_QWORD *)(a3 + 16));
    v9 = __src[v7];
    if (v9 >= 2)
    {
      if (v7 <= 3)
        v10 = v7;
      else
        v10 = 4;
      __asm { BR              X12 }
    }
    if (v9 == 1)
    {
      *__dst = *__src;
      __dst[v7] = 1;
    }
    else
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 32))(__dst, __src, v5);
      __dst[v7] = 0;
    }
  }
  v11 = (unint64_t)&__dst[v7 + 8] & 0xFFFFFFFFFFFFFFF8;
  v12 = *(_QWORD *)(v11 + 8);
  *(_OWORD *)v11 = *(_OWORD *)((unint64_t)&__src[v7 + 8] & 0xFFFFFFFFFFFFF8);
  swift_release(v12);
  return __dst;
}

uint64_t sub_5B568(_DWORD *a1, int a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  int v10;
  int v11;
  int v12;

  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
  if (v3 <= 1)
    v3 = 1;
  if (!a2)
    return 0;
  if ((a2 & 0x80000000) == 0)
    goto LABEL_5;
  v6 = (v3 & 0xFFFFFFFFFFFFFFF8) + 24;
  v7 = v6 & 0xFFFFFFF8;
  v8 = a2 - 2147483646;
  if ((v6 & 0xFFFFFFF8) != 0)
    v8 = 2;
  if (v8 >= 0x10000)
    v9 = 4;
  else
    v9 = 2;
  if (v8 < 0x100)
    v10 = 1;
  else
    v10 = v9;
  if (v10 == 4)
  {
    v11 = *(_DWORD *)((char *)a1 + v6);
    if (!v11)
      goto LABEL_5;
  }
  else if (v10 == 2)
  {
    v11 = *(unsigned __int16 *)((char *)a1 + v6);
    if (!v11)
      goto LABEL_5;
  }
  else
  {
    v11 = *((unsigned __int8 *)a1 + v6);
    if (!v11)
    {
LABEL_5:
      v4 = *(_QWORD *)(((unint64_t)a1 + v3 + 8) & 0xFFFFFFFFFFFFF8);
      if (v4 >= 0xFFFFFFFF)
        LODWORD(v4) = -1;
      return (v4 + 1);
    }
  }
  v12 = v11 - 1;
  if (v7)
  {
    v12 = 0;
    LODWORD(v7) = *a1;
  }
  return (v7 | v12) ^ 0x80000000;
}

void sub_5B634(unsigned int *a1, int a2, int a3, uint64_t a4)
{
  unint64_t v5;
  int v6;
  unsigned int v7;
  int v8;
  unsigned int v9;

  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 16) - 8) + 64);
  if (v5 <= 1)
    v5 = 1;
  if (a3 < 0)
  {
    v7 = a3 - 2147483646;
    if ((v5 & 0xFFFFFFF8) != 0xFFFFFFE8)
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v6 = 1;
    else
      v6 = v8;
    if ((a2 & 0x80000000) == 0)
LABEL_5:
      __asm { BR              X11 }
  }
  else
  {
    v6 = 0;
    if ((a2 & 0x80000000) == 0)
      goto LABEL_5;
  }
  if ((v5 & 0xFFFFFFF8) != 0xFFFFFFE8)
  {
    v9 = a2 ^ 0x80000000;
    bzero(a1, (v5 & 0xFFFFFFFFFFFFFFF8) + 24);
    *a1 = v9;
  }
  __asm { BR              X10 }
}

void sub_5B748(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (!a2)
    JUMPOUT(0x5B734);
  JUMPOUT(0x5B720);
}

void sub_5B754()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x5B734);
}

void sub_5B75C()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x5B734);
}

uint64_t sub_5B768(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 8);
}

uint64_t sub_5B770(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_5B7BC + 4 * byte_1E4337[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_5B7F0 + 4 * byte_1E4332[v4]))();
}

uint64_t sub_5B7F0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_5B7F8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x5B800);
  return result;
}

uint64_t sub_5B80C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x5B814);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_5B818(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_5B820(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_5B82C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 16));
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_1E44D0;
    swift_initEnumMetadataMultiPayload(a1, 0, 2, v4);
    return 0;
  }
  return result;
}

uint64_t *sub_5B89C(uint64_t *__dst, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;

  v3 = __dst;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  if (*(_QWORD *)(v4 + 64) <= 1uLL)
    v5 = 1;
  else
    v5 = *(_QWORD *)(v4 + 64);
  v6 = *(_DWORD *)(v4 + 80);
  if (v6 > 7 || (*(_DWORD *)(v4 + 80) & 0x100000) != 0 || (unint64_t)(v5 + 1) > 0x18)
  {
    v9 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v9 + ((v6 + 16) & ~v6));
    swift_retain(v9);
  }
  else
  {
    v10 = *((unsigned __int8 *)a2 + v5);
    if (v10 >= 2)
    {
      if (v5 <= 3)
        v11 = v5;
      else
        v11 = 4;
      __asm { BR              X14 }
    }
    if (v10 == 1)
    {
      *(_BYTE *)__dst = *(_BYTE *)a2;
      *((_BYTE *)__dst + v5) = 1;
    }
    else
    {
      (*(void (**)(uint64_t *))(v4 + 16))(__dst);
      *((_BYTE *)v3 + v5) = 0;
    }
  }
  return v3;
}

uint64_t sub_5B9BC(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v3 = *(_QWORD *)(v2 + 64);
  if (v3 <= 1)
    v3 = 1;
  if (*(unsigned __int8 *)(result + v3) < 2u)
  {
    if (!*(_BYTE *)(result + v3))
      return (*(uint64_t (**)(void))(v2 + 8))();
  }
  else
  {
    if (v3 <= 3)
      v4 = v3;
    else
      v4 = 4;
    return ((uint64_t (*)(void))((char *)&loc_5BA00 + 4 * byte_1E4341[v4]))();
  }
  return result;
}

_BYTE *sub_5BA50(_BYTE *__dst, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  if (*(_QWORD *)(v4 + 64) <= 1uLL)
    v5 = 1;
  else
    v5 = *(_QWORD *)(v4 + 64);
  v6 = a2[v5];
  if (v6 >= 2)
  {
    if (v5 <= 3)
      v7 = v5;
    else
      v7 = 4;
    __asm { BR              X13 }
  }
  if (v6 == 1)
  {
    *__dst = *a2;
    __dst[v5] = 1;
  }
  else
  {
    (*(void (**)(_BYTE *))(v4 + 16))(__dst);
    __dst[v5] = 0;
  }
  return __dst;
}

unsigned __int8 *sub_5BB34(unsigned __int8 *__dst, unsigned __int8 *__src, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;

  if (__dst != __src)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(v5 - 8);
    if (*(_QWORD *)(v6 + 64) <= 1uLL)
      v7 = 1;
    else
      v7 = *(_QWORD *)(v6 + 64);
    if (__dst[v7] >= 2u)
    {
      if (v7 <= 3)
        v8 = v7;
      else
        v8 = 4;
      __asm { BR              X11 }
    }
    if (!__dst[v7])
      (*(void (**)(unsigned __int8 *, _QWORD))(v6 + 8))(__dst, *(_QWORD *)(a3 + 16));
    v9 = __src[v7];
    if (v9 >= 2)
    {
      if (v7 <= 3)
        v10 = v7;
      else
        v10 = 4;
      __asm { BR              X12 }
    }
    if (v9 == 1)
    {
      *__dst = *__src;
      __dst[v7] = 1;
    }
    else
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 16))(__dst, __src, v5);
      __dst[v7] = 0;
    }
  }
  return __dst;
}

_BYTE *sub_5BCC4(_BYTE *__dst, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  if (*(_QWORD *)(v4 + 64) <= 1uLL)
    v5 = 1;
  else
    v5 = *(_QWORD *)(v4 + 64);
  v6 = a2[v5];
  if (v6 >= 2)
  {
    if (v5 <= 3)
      v7 = v5;
    else
      v7 = 4;
    __asm { BR              X13 }
  }
  if (v6 == 1)
  {
    *__dst = *a2;
    __dst[v5] = 1;
  }
  else
  {
    (*(void (**)(_BYTE *))(v4 + 32))(__dst);
    __dst[v5] = 0;
  }
  return __dst;
}

unsigned __int8 *sub_5BDA8(unsigned __int8 *__dst, unsigned __int8 *__src, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;

  if (__dst != __src)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(v5 - 8);
    if (*(_QWORD *)(v6 + 64) <= 1uLL)
      v7 = 1;
    else
      v7 = *(_QWORD *)(v6 + 64);
    if (__dst[v7] >= 2u)
    {
      if (v7 <= 3)
        v8 = v7;
      else
        v8 = 4;
      __asm { BR              X11 }
    }
    if (!__dst[v7])
      (*(void (**)(unsigned __int8 *, _QWORD))(v6 + 8))(__dst, *(_QWORD *)(a3 + 16));
    v9 = __src[v7];
    if (v9 >= 2)
    {
      if (v7 <= 3)
        v10 = v7;
      else
        v10 = 4;
      __asm { BR              X12 }
    }
    if (v9 == 1)
    {
      *__dst = *__src;
      __dst[v7] = 1;
    }
    else
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 32))(__dst, __src, v5);
      __dst[v7] = 0;
    }
  }
  return __dst;
}

uint64_t sub_5BF38(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  int v6;
  unsigned int v8;
  int v9;
  unsigned int v10;

  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64) <= 1uLL)
    v3 = 1;
  else
    v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_22;
  v4 = v3 + 1;
  v5 = 8 * (v3 + 1);
  if ((v3 + 1) <= 3)
  {
    v8 = ((a2 + ~(-1 << v5) - 253) >> v5) + 1;
    if (HIWORD(v8))
    {
      v6 = *(_DWORD *)(a1 + v4);
      if (!v6)
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v8 > 0xFF)
    {
      v6 = *(unsigned __int16 *)(a1 + v4);
      if (!*(_WORD *)(a1 + v4))
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v8 < 2)
    {
LABEL_22:
      v10 = *(unsigned __int8 *)(a1 + v3);
      if (v10 >= 3)
        return (v10 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v6 = *(unsigned __int8 *)(a1 + v4);
  if (!*(_BYTE *)(a1 + v4))
    goto LABEL_22;
LABEL_15:
  v9 = (v6 - 1) << v5;
  if (v4 > 3)
    v9 = 0;
  if (!(_DWORD)v4)
    return (v9 + 254);
  if (v4 > 3)
    LODWORD(v4) = 4;
  return ((uint64_t (*)(void))((char *)&loc_5BFF8 + 4 * byte_1E4364[(v4 - 1)]))();
}

void sub_5C044(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5;
  size_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 16) - 8) + 64);
  if (v5 <= 1)
    v5 = 1;
  v6 = v5 + 1;
  if (a3 < 0xFE)
  {
    v7 = 0;
  }
  else if (v6 <= 3)
  {
    v9 = ((a3 + ~(-1 << (8 * v6)) - 253) >> (8 * v6)) + 1;
    if (HIWORD(v9))
    {
      v7 = &dword_4;
    }
    else if (v9 >= 0x100)
    {
      v7 = 2;
    }
    else
    {
      v7 = v9 > 1;
    }
  }
  else
  {
    v7 = &dword_0 + 1;
  }
  if (a2 <= 0xFD)
    __asm { BR              X11 }
  v8 = a2 - 254;
  if (v6 < 4)
  {
    if ((_DWORD)v5 != -1)
    {
      v10 = v8 & ~(-1 << (8 * v6));
      bzero(a1, v6);
      if ((_DWORD)v6 == 3)
      {
        *a1 = v10;
        *((_BYTE *)a1 + 2) = BYTE2(v10);
      }
      else if ((_DWORD)v6 == 2)
      {
        *a1 = v10;
      }
      else
      {
        *(_BYTE *)a1 = v10;
      }
    }
  }
  else
  {
    bzero(a1, v5 + 1);
    *(_DWORD *)a1 = v8;
  }
  __asm { BR              X10 }
}

uint64_t sub_5C1E8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 64) <= 1uLL)
    v2 = 1;
  else
    v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 64);
  if (*(unsigned __int8 *)(a1 + v2) < 2u)
    return *(unsigned __int8 *)(a1 + v2);
  if (v2 <= 3)
    v3 = v2;
  else
    v3 = 4;
  return ((uint64_t (*)(void))((char *)&loc_5C22C + 4 * byte_1E4372[v3]))();
}

void sub_5C274(_BYTE *a1, unsigned int a2, uint64_t a3)
{
  size_t v4;
  unsigned int v5;
  unsigned int v6;
  int v7;

  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64) <= 1uLL)
    v4 = 1;
  else
    v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
  if (a2 > 1)
  {
    v5 = a2 - 2;
    if (v4 < 4)
    {
      v6 = v5 >> (8 * v4);
      v7 = v5 & ~(-1 << (8 * v4));
      a1[v4] = v6 + 2;
      bzero(a1, v4);
      if ((_DWORD)v4 == 3)
      {
        *(_WORD *)a1 = v7;
        a1[2] = BYTE2(v7);
      }
      else if ((_DWORD)v4 == 2)
      {
        *(_WORD *)a1 = v7;
      }
      else
      {
        *a1 = v7;
      }
    }
    else
    {
      a1[v4] = 2;
      bzero(a1, v4);
      *(_DWORD *)a1 = v5;
    }
  }
  else
  {
    a1[v4] = a2;
  }
}

unint64_t sub_5C33C()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_2611F0;
  if (!qword_2611F0)
  {
    v1 = sub_7EF8(&qword_2611F8);
    v2[0] = &type metadata for Text;
    v2[1] = &protocol witness table for Text;
    sub_5AC90();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.redacted(reason:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_2611F0);
  }
  return result;
}

uint64_t sub_5C3CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  __chkstk_darwin(a1);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v7 + 16))(v6);
  return AnyView.init<A>(_:)(v6, a2, a3);
}

unint64_t sub_5C448()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25FEA8;
  if (!qword_25FEA8)
  {
    v1 = type metadata accessor for LocalizedText(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for LocalizedText, v1);
    atomic_store(result, (unint64_t *)&qword_25FEA8);
  }
  return result;
}

uint64_t AsyncResourceImage.init(resource:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[2];

  v8 = type metadata accessor for ImageResourceLoader(0);
  v9 = swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
  *(_QWORD *)(v9 + 16) = 0;
  v10 = sub_5440(&qword_2600E0);
  v11 = swift_allocObject(v10, 32, 7);
  *(_DWORD *)(v11 + 28) = 0;
  *(_QWORD *)(v11 + 16) = 0;
  *(_BYTE *)(v11 + 24) = 0;
  *(_QWORD *)(v9 + 24) = v11;
  v12 = swift_retain(a3);
  ObservationRegistrar.init()(v12);
  v16 = v9;
  State.init(wrappedValue:)(v17, &v16, v8);
  result = swift_release(a3);
  v14 = v17[0];
  v15 = v17[1];
  *a4 = a2;
  a4[1] = a3;
  a4[2] = a1;
  a4[3] = v14;
  a4[4] = v15;
  return result;
}

uint64_t type metadata accessor for ImageResourceLoader(uint64_t a1)
{
  uint64_t result;

  result = qword_2612C0;
  if (!qword_2612C0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ImageResourceLoader);
  return result;
}

uint64_t AsyncResourceImage.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  void (**v2)(void *, __n128);
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(void *, __n128);
  void (*v17)(void *, __n128);
  void (*v18)(void *, __n128);
  uint64_t v19;
  uint64_t v20;
  uint64_t KeyPath;
  unint64_t v22;
  void *v23;
  id v24;
  __n128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  __n128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t WitnessTable;
  uint64_t v34;
  __n128 v35;
  uint64_t v36;
  void (*v37)(uint64_t, uint64_t);
  void (*v39)(void *, __n128);
  void (*v40)(void *, __n128);
  char *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  void *v53;
  void (*v54)(void *, __n128);
  void (*v55)(void *, __n128);
  uint64_t v56;

  v49 = a2;
  v4 = *(_QWORD *)(a1 + 16);
  v45 = *(_QWORD *)(v4 - 8);
  v42 = v4;
  __chkstk_darwin(a1);
  v6 = (char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for ModifiedContent(0, v7, &type metadata for _AppearanceActionModifier);
  v9 = *(_QWORD *)(v8 - 8);
  v44 = v8;
  v47 = v9;
  __chkstk_darwin(v8);
  v41 = (char *)&v39 - v10;
  v12 = type metadata accessor for ModifiedContent(0, v11, &type metadata for _AppearanceActionModifier);
  v48 = *(_QWORD *)(v12 - 8);
  v13 = __chkstk_darwin(v12);
  v43 = (char *)&v39 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v46 = (uint64_t)&v39 - v15;
  v16 = *v2;
  v39 = v2[1];
  v40 = v16;
  v18 = v2[4];
  v54 = v2[3];
  v17 = v54;
  v55 = v18;
  v19 = sub_5440(&qword_261208);
  State.wrappedValue.getter(&v56, v19);
  v20 = v56;
  KeyPath = swift_getKeyPath(&unk_1E4510);
  v54 = (void (*)(void *, __n128))v20;
  v22 = sub_5CBA0();
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v54, KeyPath, v22);
  swift_release(KeyPath);
  v23 = *(void **)(v20 + 16);
  v24 = v23;
  v25 = swift_release(v20);
  v40(v23, v25);

  v54 = v17;
  v55 = v18;
  State.wrappedValue.getter(&v56, v19);
  v26 = v56;
  v27 = *(_QWORD *)(a1 + 24);
  v29 = v41;
  v28 = v42;
  View.onAppear(perform:)(sub_5CBE8, v56, v42, v27);
  v30 = swift_release(v26);
  (*(void (**)(char *, uint64_t, __n128))(v45 + 8))(v6, v28, v30);
  v54 = v17;
  v55 = v18;
  State.wrappedValue.getter(&v56, v19);
  v31 = v56;
  v52 = v27;
  v53 = &protocol witness table for _AppearanceActionModifier;
  v32 = v44;
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v44);
  v34 = (uint64_t)v43;
  View.onDisappear(perform:)(sub_5CBEC, v31, v32, WitnessTable);
  v35 = swift_release(v31);
  (*(void (**)(char *, uint64_t, __n128))(v47 + 8))(v29, v32, v35);
  v50 = WitnessTable;
  v51 = &protocol witness table for _AppearanceActionModifier;
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v12);
  v36 = v46;
  sub_10F80(v34, v12, v46);
  v37 = *(void (**)(uint64_t, uint64_t))(v48 + 8);
  v37(v34, v12);
  sub_C5C0(v36, v12, v49);
  return ((uint64_t (*)(uint64_t, uint64_t))v37)(v36, v12);
}

void sub_5C8B4(uint64_t a1)
{
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(a1 + 24);
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 28));
  *(_BYTE *)(v1 + 24) = 0;
  v2 = *(void **)(v1 + 16);
  if (v2)
    objc_msgSend(v2, "removeNonVolatileInterest");
  os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 28));
}

double sub_5C8FC()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  double result;
  uint64_t v6;

  v1 = v0;
  v2 = sub_5440(&qword_261208);
  State.wrappedValue.getter(&v6, v2);
  v3 = v6;
  v4 = (void *)swift_unknownObjectRetain(*v1);
  sub_5CE40(v4);
  *(_QWORD *)&result = swift_release(v3).n128_u64[0];
  return result;
}

uint64_t sub_5C958(uint64_t result)
{
  uint64_t v1;
  void *v2;
  void *v3;
  BOOL v4;

  v2 = *(void **)v1;
  if (!result)
  {
    if (!v2)
      return result;
    goto LABEL_9;
  }
  v3 = (void *)result;
  if (v2)
    v4 = result == (_QWORD)v2;
  else
    v4 = 0;
  if (!v4)
  {
    objc_msgSend((id)swift_unknownObjectRetain(result), "removeInterest");
    if (*(_BYTE *)(v1 + 8) == 1)
      objc_msgSend(v3, "removeNonVolatileInterest");
    result = swift_unknownObjectRelease(v3);
    if (v2)
    {
LABEL_9:
      objc_msgSend((id)swift_unknownObjectRetain(v2), "addInterest");
      if (*(_BYTE *)(v1 + 8) == 1)
        objc_msgSend(v2, "addNonVolatileInterest");
      return swift_unknownObjectRelease(v2);
    }
  }
  return result;
}

void *sub_5CA14()
{
  uint64_t v0;
  uint64_t KeyPath;
  unint64_t v2;
  void *v3;
  id v4;
  uint64_t v6;

  KeyPath = swift_getKeyPath(&unk_1E4510);
  v6 = v0;
  v2 = sub_5CBA0();
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v2);
  swift_release(KeyPath);
  v3 = *(void **)(v0 + 16);
  v4 = v3;
  return v3;
}

id sub_5CA88@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  unint64_t v5;
  void *v6;
  uint64_t v8;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1E4510);
  v8 = v3;
  v5 = sub_5CBA0();
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v5);
  swift_release(KeyPath);
  v6 = *(void **)(v3 + 16);
  *a2 = v6;
  return v6;
}

void sub_5CB00(void **a1, uint64_t *a2)
{
  void *v2;
  uint64_t v3;
  uint64_t KeyPath;
  id v5;
  uint64_t v6;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1E4510);
  v6 = v3;
  sub_5CBA0();
  v5 = v2;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v6, KeyPath, sub_5DD58);
  swift_release(KeyPath);

}

unint64_t sub_5CBA0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_261210[0];
  if (!qword_261210[0])
  {
    v1 = type metadata accessor for ImageResourceLoader(255);
    result = swift_getWitnessTable(&unk_1E4690, v1);
    atomic_store(result, qword_261210);
  }
  return result;
}

void sub_5CBEC()
{
  uint64_t v0;

  sub_5C8B4(v0);
}

uint64_t sub_5CBF4(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  return swift_getOpaqueTypeConformance2(&v3, &opaque type descriptor for <<opaque return type of AsyncResourceImage.body>>, 1);
}

uint64_t sub_5CC28(_QWORD *a1)
{
  swift_release(a1[1]);
  swift_unknownObjectRelease(a1[2]);
  swift_release(a1[3]);
  return swift_release(a1[4]);
}

_QWORD *sub_5CC60(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[2];
  v5 = a2[3];
  a1[2] = v4;
  a1[3] = v5;
  v6 = a2[4];
  a1[4] = v6;
  swift_retain(v3);
  swift_unknownObjectRetain(v4);
  swift_retain(v5);
  swift_retain(v6);
  return a1;
}

_QWORD *sub_5CCBC(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a2[1];
  v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_retain(v4);
  swift_release(v5);
  v6 = a1[2];
  v7 = a2[2];
  a1[2] = v7;
  swift_unknownObjectRetain(v7);
  swift_unknownObjectRelease(v6);
  v8 = a2[3];
  v9 = a1[3];
  a1[3] = v8;
  swift_retain(v8);
  swift_release(v9);
  v10 = a1[4];
  v11 = a2[4];
  a1[4] = v11;
  swift_retain(v11);
  swift_release(v10);
  return a1;
}

uint64_t sub_5CD48(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release(v4);
  swift_unknownObjectRelease(*(_QWORD *)(a1 + 16));
  v5 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_release(v5);
  v6 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_release(v6);
  return a1;
}

uint64_t sub_5CDA4(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_5CDEC(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t type metadata accessor for AsyncResourceImage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10E40(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AsyncResourceImage);
}

void sub_5CE40(void *a1)
{
  uint64_t v1;
  os_unfair_lock_s *v3;
  id *v4;
  os_unfair_lock_s *v5;
  id v6;
  void *v7;
  uint64_t KeyPath;
  id v9;
  uint64_t v10;
  char v11[16];

  v3 = *(os_unfair_lock_s **)(v1 + 24);
  v4 = (id *)&v3[4];
  v5 = v3 + 7;
  os_unfair_lock_lock(v3 + 7);
  sub_5D034(v4, a1, v1, v11);
  os_unfair_lock_unlock(v5);
  if (v11[0] == 1)
  {
    if (a1)
    {
      v6 = objc_msgSend((id)swift_unknownObjectRetain(a1), "image");
      if (v6)
      {
        v7 = v6;
        KeyPath = swift_getKeyPath(&unk_1E4510);
        __chkstk_darwin(KeyPath);
        *(_QWORD *)v11 = v1;
        sub_5CBA0();
        v9 = v7;
        ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v11, KeyPath, sub_5DD58);
        swift_unknownObjectRelease_n(a1, 2);
        swift_release(KeyPath);

      }
      else
      {
        swift_unknownObjectRelease_n(a1, 2);
      }
    }
    else
    {
      v10 = swift_getKeyPath(&unk_1E4510);
      __chkstk_darwin(v10);
      *(_QWORD *)v11 = v1;
      sub_5CBA0();
      ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v11, v10, sub_5DD58);
      swift_release(v10);
    }
  }
  else
  {
    swift_unknownObjectRelease(a1);
  }
}

id *sub_5D034@<X0>(id *result@<X0>, id a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  id *v6;
  id v8;
  id v9;
  char v10;

  v6 = result;
  v8 = *result;
  if (*result)
  {
    if (!a2 || v8 != a2)
    {
      objc_msgSend(*result, "removeWithObserver:", a3);
      v9 = v8;
      if (!a2)
        goto LABEL_9;
      goto LABEL_8;
    }
LABEL_10:
    v10 = 0;
    goto LABEL_11;
  }
  if (!a2)
    goto LABEL_10;
  v9 = 0;
LABEL_8:
  objc_msgSend(a2, "addWithObserver:", a3);
LABEL_9:
  *v6 = a2;
  swift_unknownObjectRetain(a2);
  sub_5C958((uint64_t)v8);
  result = (id *)swift_unknownObjectRelease(v9);
  v10 = 1;
LABEL_11:
  *a4 = v10;
  return result;
}

void **sub_5D0F8(void **result)
{
  void *v1;
  void **v2;

  v1 = *result;
  *result = 0;
  if (v1)
  {
    v2 = result;
    objc_msgSend((id)swift_unknownObjectRetain(v1), "removeInterest");
    if (((_BYTE)v2[1] & 1) != 0)
      objc_msgSend(v1, "removeNonVolatileInterest");
    return (void **)swift_unknownObjectRelease_n(v1, 2);
  }
  return result;
}

uint64_t sub_5D168()
{
  uint64_t v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  void **v3;
  os_unfair_lock_s *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = v0;
  v2 = *(os_unfair_lock_s **)(v0 + 24);
  v3 = (void **)&v2[4];
  v4 = v2 + 7;
  os_unfair_lock_lock(v2 + 7);
  sub_5D0F8(v3);
  os_unfair_lock_unlock(v4);

  swift_release(*(_QWORD *)(v1 + 24));
  v5 = v1 + OBJC_IVAR____TtC7BooksUIP33_9B0EA36F259AEF224C359BD0BEB5D46019ImageResourceLoader___observationRegistrar;
  v6 = type metadata accessor for ObservationRegistrar(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  return swift_deallocClassInstance(v1, *(unsigned int *)(*(_QWORD *)v1 + 48), *(unsigned __int16 *)(*(_QWORD *)v1 + 52));
}

uint64_t sub_5D208()
{
  return type metadata accessor for ImageResourceLoader(0);
}

uint64_t sub_5D210(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = "\b";
  v4[1] = (char *)&value witness table for Builtin.NativeObject + 64;
  result = type metadata accessor for ObservationRegistrar(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 3, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

double sub_5D294()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  os_unfair_lock_s *v3;
  id v4;
  uint64_t KeyPath;
  unint64_t v6;
  double result;
  uint64_t v8;
  id v9;
  _QWORD v10[2];

  v1 = v0;
  v2 = *(_QWORD *)(v0 + 24);
  v3 = (os_unfair_lock_s *)(v2 + 28);
  os_unfair_lock_lock((os_unfair_lock_t)(v2 + 28));
  *(_BYTE *)(v2 + 24) = 1;
  v4 = *(id *)(v2 + 16);
  if (v4)
  {
    objc_msgSend(v4, "addNonVolatileInterest");
    v4 = objc_msgSend(v4, "image");
  }
  os_unfair_lock_unlock(v3);
  KeyPath = swift_getKeyPath(&unk_1E4510);
  v10[0] = v1;
  v6 = sub_5CBA0();
  ObservationRegistrar.access<A, B>(_:keyPath:)(v10, KeyPath, v6);
  *(_QWORD *)&result = swift_release(KeyPath).n128_u64[0];
  if (*(_QWORD *)(v1 + 16))
  {

  }
  else if (v4)
  {
    v8 = swift_getKeyPath(&unk_1E4510);
    __chkstk_darwin(v8);
    v10[0] = v1;
    v9 = v4;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v10, v8, sub_5DD58);

    *(_QWORD *)&result = swift_release(v8).n128_u64[0];
  }
  return result;
}

uint64_t sub_5D3F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6[4] = a5;
  v6[5] = a6;
  v6[3] = a4;
  v7 = type metadata accessor for MainActor(0);
  v6[6] = static MainActor.shared.getter(v7);
  v8 = dispatch thunk of Actor.unownedExecutor.getter(v7, &protocol witness table for MainActor);
  return swift_task_switch(sub_5D468, v8, v9);
}

uint64_t sub_5D468()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  os_unfair_lock_s *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t KeyPath;
  unint64_t v8;
  void *v9;
  void *v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;

  v1 = *(_QWORD *)(v0 + 32);
  swift_release(*(_QWORD *)(v0 + 48));
  v2 = *(_QWORD *)(v1 + 24);
  v3 = (os_unfair_lock_s *)(v2 + 28);
  os_unfair_lock_lock((os_unfair_lock_t)(v2 + 28));
  v4 = *(_QWORD *)(v2 + 16);
  swift_unknownObjectRetain(v4);
  os_unfair_lock_unlock(v3);
  if (v4)
  {
    v5 = *(_QWORD *)(v0 + 24);
    swift_unknownObjectRelease(v4);
    if (v5 == v4)
    {
      v6 = *(_QWORD *)(v0 + 32);
      KeyPath = swift_getKeyPath(&unk_1E4510);
      *(_QWORD *)(v0 + 16) = v6;
      v8 = sub_5CBA0();
      ObservationRegistrar.access<A, B>(_:keyPath:)(v0 + 16, KeyPath, v8);
      swift_release(KeyPath);
      v9 = *(void **)(v6 + 16);
      v10 = *(void **)(v0 + 40);
      if (!v9 || !v10)
      {
        v16 = *(_QWORD *)(v0 + 32);
        v17 = swift_getKeyPath(&unk_1E4510);
        v18 = swift_task_alloc(32);
        *(_QWORD *)(v18 + 16) = v16;
        *(_QWORD *)(v18 + 24) = v10;
        *(_QWORD *)(v0 + 16) = v16;
        v19 = v10;
        ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v0 + 16, v17, sub_5DD24);

        swift_release(v17);
        v20 = v18;
LABEL_18:
        swift_task_dealloc(v20);
        return (*(uint64_t (**)(void))(v0 + 8))();
      }
      v11 = v9;
      v12 = v10;
      v13 = objc_msgSend(v11, "CGImage");
      v14 = objc_msgSend(v12, "CGImage");
      v15 = v14;
      if (v13)
      {

        if (v15)
        {

          if (v13 == v15)
          {
LABEL_12:
            objc_msgSend(v11, "alignmentRectInsets");
            v22 = v21;
            v24 = v23;
            v26 = v25;
            v28 = v27;
            objc_msgSend(v12, "alignmentRectInsets");
            if (v22 == v32 && v24 == v29 && v26 == v30 && v28 == v31)
            {

              return (*(uint64_t (**)(void))(v0 + 8))();
            }
          }
        }
      }
      else
      {
        if (!v14)
          goto LABEL_12;

      }
      v34 = *(_QWORD *)(v0 + 32);
      v33 = *(_QWORD *)(v0 + 40);
      v35 = swift_getKeyPath(&unk_1E4510);
      v36 = swift_task_alloc(32);
      *(_QWORD *)(v36 + 16) = v34;
      *(_QWORD *)(v36 + 24) = v33;
      *(_QWORD *)(v0 + 16) = v34;
      v37 = v12;
      ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v0 + 16, v35, sub_5DD58);

      swift_release(v35);
      v20 = v36;
      goto LABEL_18;
    }
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_5D854(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = type metadata accessor for ModifiedContent(255, *a1, &type metadata for _AppearanceActionModifier);
  v2 = type metadata accessor for ModifiedContent(255, v1, &type metadata for _AppearanceActionModifier);
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
  return swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v2);
}

uint64_t destroy for ImageResourceContainer(_QWORD *a1)
{
  swift_unknownObjectRelease(*a1);
  swift_release(a1[1]);
  return swift_release(a1[2]);
}

uint64_t *_s7BooksUI22ImageResourceContainerVwCP_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *a2;
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[2];
  a1[2] = v5;
  swift_unknownObjectRetain(v3);
  swift_retain(v4);
  swift_retain(v5);
  return a1;
}

uint64_t *assignWithCopy for ImageResourceContainer(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *a1;
  v5 = *a2;
  *a1 = *a2;
  swift_unknownObjectRetain(v5);
  swift_unknownObjectRelease(v4);
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_retain(v6);
  swift_release(v7);
  v8 = a1[2];
  v9 = a2[2];
  a1[2] = v9;
  swift_retain(v9);
  swift_release(v8);
  return a1;
}

__n128 initializeWithTake for ImageResourceContainer(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

_QWORD *assignWithTake for ImageResourceContainer(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_unknownObjectRelease(*a1);
  v4 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release(v4);
  v5 = a1[2];
  a1[2] = *(_QWORD *)(a2 + 16);
  swift_release(v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for ImageResourceContainer(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ImageResourceContainer(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ImageResourceContainer()
{
  return &type metadata for ImageResourceContainer;
}

uint64_t initializeBufferWithCopyOfBuffer for ImageResourceLoaderState(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a2;
  *(_QWORD *)a1 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  swift_unknownObjectRetain(v3);
  return a1;
}

uint64_t destroy for ImageResourceLoaderState(_QWORD *a1)
{
  return swift_unknownObjectRelease(*a1);
}

uint64_t *assignWithCopy for ImageResourceLoaderState(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *a1;
  v5 = *a2;
  *a1 = *a2;
  swift_unknownObjectRetain(v5);
  swift_unknownObjectRelease(v4);
  *((_BYTE *)a1 + 8) = *((_BYTE *)a2 + 8);
  return a1;
}

uint64_t initializeBufferWithCopyOfBuffer for SingleThumbnailStyle(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t *assignWithTake for ImageResourceLoaderState(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a1;
  *a1 = *a2;
  swift_unknownObjectRelease(v4);
  *((_BYTE *)a1 + 8) = *((_BYTE *)a2 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for ImageResourceLoaderState(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 9))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ImageResourceLoaderState(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for ImageResourceLoaderState()
{
  return &type metadata for ImageResourceLoaderState;
}

uint64_t sub_5DC68()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 32));
  swift_release(*(_QWORD *)(v0 + 40));

  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_5DCA4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = (_QWORD *)swift_task_alloc(dword_2613C4);
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_108B0;
  return sub_5D3F8(a1, v4, v5, v6, v7, v8);
}

void sub_5DD24()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  id v4;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(void **)(v0 + 24);
  v3 = *(void **)(v1 + 16);
  *(_QWORD *)(v1 + 16) = v2;
  v4 = v2;

}

void sub_5DD58()
{
  sub_5DD24();
}

uint64_t _CodeAnyComponentModel_KeyedBy.init(wrappedValue:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t _CodeAnyComponentModel_KeyedBy.wrappedValue.getter()
{
  _QWORD *v0;

  return swift_bridgeObjectRetain(*v0);
}

uint64_t _CodeAnyComponentModel_KeyedBy.wrappedValue.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease(*v1);
  *v1 = a1;
  return result;
}

uint64_t _CodeAnyComponentModel_KeyedBy.description.getter(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t WitnessTable;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v3 = *v1;
  v10 = 0;
  v11 = 0xE000000000000000;
  v9 = v3;
  v4 = *(_QWORD *)(a1 + 16);
  v5 = sub_7EF8(&qword_25ED60);
  v6 = type metadata accessor for Dictionary(0, v4, v5, *(_QWORD *)(a1 + 32));
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A : B], v6);
  DefaultStringInterpolation.appendInterpolation<A>(_:)(&v9, v6, WitnessTable);
  return v10;
}

uint64_t _CodeAnyComponentModel_KeyedBy.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v5;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v17[40];

  sub_BD00((uint64_t)a1, (uint64_t)v17);
  v11 = sub_5DF14();
  v12 = Dictionary<>.init(from:)(v17, a2, &type metadata for CodeAnyComponentModel, a3, a4, v11);
  if (v5)
    return _s7BooksUI13AnyPagedFrameVwxx_0(a1);
  v14 = v12;
  v15 = sub_5440(&qword_25ED60);
  v16 = Dictionary.mapValues<A>(_:)(sub_5DF58, 0, v14, a2, &type metadata for CodeAnyComponentModel, v15, a4);
  swift_bridgeObjectRelease(v14);
  result = _s7BooksUI13AnyPagedFrameVwxx_0(a1);
  *a5 = v16;
  return result;
}

unint64_t sub_5DF14()
{
  unint64_t result;

  result = qword_2613D0[0];
  if (!qword_2613D0[0])
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CodeAnyComponentModel, &type metadata for CodeAnyComponentModel);
    atomic_store(result, qword_2613D0);
  }
  return result;
}

uint64_t sub_5DF58@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_BD00(a1, a2);
}

uint64_t sub_5DF84@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  return _CodeAnyComponentModel_KeyedBy.init(from:)(a1, a2[2], a2[3], a2[4], a3);
}

uint64_t _CodeAnyComponentModel_KeyedBy<>.init(_partiallyFrom:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  _BYTE v8[40];

  sub_BD00((uint64_t)a1, (uint64_t)v8);
  v4 = sub_5DF14();
  v5 = Dictionary<>.init(_partiallyFrom:)(v8, &type metadata for CodeAnyComponentModel, v4);
  v6 = sub_5E018(v5);
  swift_bridgeObjectRelease(v5);
  result = _s7BooksUI13AnyPagedFrameVwxx_0(a1);
  *a2 = v6;
  return result;
}

uint64_t sub_5E018(uint64_t a1)
{
  uint64_t result;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t i;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  int64_t v23;
  __int128 v24[2];
  _QWORD v25[5];
  uint64_t v26;

  sub_5440(&qword_261458);
  result = static _DictionaryStorage.copy(original:)(a1);
  v3 = (_QWORD *)result;
  v4 = 0;
  v26 = a1;
  v5 = *(_QWORD *)(a1 + 64);
  v22 = a1 + 64;
  v6 = 1 << *(_BYTE *)(a1 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & v5;
  v23 = (unint64_t)(v6 + 63) >> 6;
  v9 = result + 64;
  if ((v7 & v5) == 0)
    goto LABEL_5;
LABEL_4:
  v10 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  for (i = v10 | (v4 << 6); ; i = __clz(__rbit64(v13)) + (v4 << 6))
  {
    v15 = (uint64_t *)(*(_QWORD *)(v26 + 48) + 16 * i);
    v17 = *v15;
    v16 = v15[1];
    sub_5E244(*(_QWORD *)(v26 + 56) + 40 * i, (uint64_t)v25);
    sub_BD00((uint64_t)v25, (uint64_t)v24);
    swift_bridgeObjectRetain(v16);
    sub_5E280(v25);
    *(_QWORD *)(v9 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    v18 = (_QWORD *)(v3[6] + 16 * i);
    *v18 = v17;
    v18[1] = v16;
    result = sub_AC68(v24, v3[7] + 40 * i);
    v19 = v3[2];
    v20 = __OFADD__(v19, 1);
    v21 = v19 + 1;
    if (v20)
    {
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v3[2] = v21;
    if (v8)
      goto LABEL_4;
LABEL_5:
    v12 = v4 + 1;
    if (__OFADD__(v4, 1))
      goto LABEL_24;
    if (v12 >= v23)
      return (uint64_t)v3;
    v13 = *(_QWORD *)(v22 + 8 * v12);
    ++v4;
    if (!v13)
    {
      v4 = v12 + 1;
      if (v12 + 1 >= v23)
        return (uint64_t)v3;
      v13 = *(_QWORD *)(v22 + 8 * v4);
      if (!v13)
      {
        v4 = v12 + 2;
        if (v12 + 2 >= v23)
          return (uint64_t)v3;
        v13 = *(_QWORD *)(v22 + 8 * v4);
        if (!v13)
          break;
      }
    }
LABEL_18:
    v8 = (v13 - 1) & v13;
  }
  v14 = v12 + 3;
  if (v14 >= v23)
    return (uint64_t)v3;
  v13 = *(_QWORD *)(v22 + 8 * v14);
  if (v13)
  {
    v4 = v14;
    goto LABEL_18;
  }
  while (1)
  {
    v4 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v4 >= v23)
      return (uint64_t)v3;
    v13 = *(_QWORD *)(v22 + 8 * v4);
    ++v14;
    if (v13)
      goto LABEL_18;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t type metadata accessor for _CodeAnyComponentModel_KeyedBy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10E40(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _CodeAnyComponentModel_KeyedBy);
}

uint64_t sub_5E244(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for AnyPagedFrame(a2, a1);
  return a2;
}

_QWORD *sub_5E280(_QWORD *a1)
{
  destroy for CodeAnyComponentModel(a1);
  return a1;
}

uint64_t sub_5E2B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;

  *a3 = static Alignment.top.getter(a1);
  a3[1] = v5;
  v6 = sub_5440(&qword_261508);
  return sub_5E310(a2, (uint64_t)a3 + *(int *)(v6 + 44));
}

uint64_t sub_5E310@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t OpaqueTypeConformance2;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  char *v49;
  void (*v50)(void);
  void (*v51)(char *, char *, uint64_t);
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(char *, uint64_t);
  void (*v56)(char *, uint64_t);
  uint64_t v58;
  uint64_t v59;
  void (*v60)(void);
  char *v61;
  char *v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  double v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  uint64_t v85;
  char v86;
  uint64_t v87;
  char v88;
  uint64_t v89;
  uint64_t v90;

  v69 = a2;
  v67 = sub_5440(&qword_261510);
  v68 = *(_QWORD *)(v67 - 8);
  __chkstk_darwin(v67);
  v61 = (char *)&v58 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_5440(&qword_261518);
  v65 = *(_QWORD *)(v4 - 8);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v58 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v64 = (char *)&v58 - v8;
  v9 = sub_5440(&qword_261500);
  v66 = *(_QWORD *)(v9 - 8);
  v10 = __chkstk_darwin(v9);
  v63 = (char *)&v58 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v62 = (char *)&v58 - v12;
  v60 = *(void (**)(void))(v13 + 16);
  v60();
  v14 = *(_QWORD *)(a1 + 16);
  v15 = *(_QWORD *)(a1 + 8);
  v59 = a1;
  v16 = swift_retain(v15);
  v17 = static UnitPoint.top.getter(v16);
  v19 = v18;
  v20 = static UnitPoint.bottom.getter();
  v22 = v21;
  v24 = v23;
  v25 = GeometryProxy.safeAreaInsets.getter(v20) + *(double *)a1;
  v26 = _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0();
  v28 = _FrameLayout.init(width:height:alignment:)(&v85, 0, 1, *(_QWORD *)&v25, 0, v26, v27);
  v29 = v85;
  v30 = v86;
  v31 = v87;
  v32 = v88;
  v34 = v89;
  v33 = v90;
  v35 = static Edge.Set.top.getter(v28);
  v70 = v14;
  v71 = 0x3FF0000000000000;
  v72 = v15;
  v73 = v17;
  v74 = v19;
  v75 = v22;
  v76 = v24;
  v77 = 0;
  v78 = v29;
  v79 = v30;
  v80 = v31;
  v81 = v32;
  v82 = v34;
  v83 = v33;
  v84 = v35;
  v36 = sub_5440(&qword_261520);
  v37 = type metadata accessor for ToolbarPlacement(0);
  v38 = swift_allocObject(v36, ((*(unsigned __int8 *)(*(_QWORD *)(v37 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v37 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v37 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v37 - 8) + 80) | 7);
  *(_OWORD *)(v38 + 16) = xmmword_1E0B70;
  static ToolbarPlacement.navigationBar.getter();
  v39 = sub_5440(&qword_261528);
  v40 = sub_3CC54(&qword_261530, &qword_261528, (void (*)(void))sub_5F11C);
  v41 = v61;
  View.toolbarBackground(_:for:)(2, v38, v39, v40);
  swift_release(v15);
  swift_bridgeObjectRelease(v38);
  v42 = v59 + *(int *)(type metadata accessor for ProgressiveBlurToolbarModifier(0) + 28);
  v70 = v39;
  v71 = v40;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v70, &opaque type descriptor for <<opaque return type of View.toolbarBackground(_:for:)>>, 1);
  v44 = v42;
  v45 = v67;
  View.navigationBarTitleDisplayMode(_:)(v44, v67, OpaqueTypeConformance2);
  (*(void (**)(char *, uint64_t))(v68 + 8))(v41, v45);
  v46 = v65;
  v47 = v64;
  (*(void (**)(char *, char *, uint64_t))(v65 + 32))(v64, v7, v4);
  v48 = v63;
  v49 = v62;
  v50 = v60;
  ((void (*)(char *, char *, uint64_t))v60)(v63, v62, v9);
  v51 = *(void (**)(char *, char *, uint64_t))(v46 + 16);
  v52 = v46;
  v51(v7, v47, v4);
  v53 = v69;
  ((void (*)(uint64_t, char *, uint64_t))v50)(v69, v48, v9);
  v54 = sub_5440(&qword_261550);
  v51((char *)(v53 + *(int *)(v54 + 48)), v7, v4);
  v55 = *(void (**)(char *, uint64_t))(v52 + 8);
  v55(v47, v4);
  v56 = *(void (**)(char *, uint64_t))(v66 + 8);
  v56(v49, v9);
  v55(v7, v4);
  return ((uint64_t (*)(char *, uint64_t))v56)(v48, v9);
}

uint64_t sub_5E79C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;

  v6 = *(_QWORD *)(a2 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  __chkstk_darwin(a1);
  v8 = sub_5440(&qword_261500);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  __chkstk_darwin(v8);
  v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a1, v8);
  sub_5EF48(v3, (uint64_t)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = *(unsigned __int8 *)(v9 + 80);
  v13 = (v12 + 16) & ~v12;
  v14 = *(unsigned __int8 *)(v6 + 80);
  v15 = (v10 + v14 + v13) & ~v14;
  v16 = swift_allocObject(&unk_24D8F0, v15 + v7, v12 | v14 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(v16 + v13, v11, v8);
  result = sub_5F05C((uint64_t)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v16 + v15);
  *a3 = sub_5F0A0;
  a3[1] = v16;
  return result;
}

uint64_t View.progressiveBlurToolbar(blurAdditionalHeight:blurFillColor:blurRadius:toolbarTitleDisplayMode:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5, double a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v19;

  v12 = type metadata accessor for ProgressiveBlurToolbarModifier(0);
  v13 = __chkstk_darwin(v12);
  v15 = (char *)&v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = &v15[*(int *)(v13 + 28)];
  v17 = type metadata accessor for NavigationBarItem.TitleDisplayMode(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v16, a2, v17);
  *(double *)v15 = a5;
  *((_QWORD *)v15 + 1) = a1;
  *((double *)v15 + 2) = a6;
  swift_retain(a1);
  View.modifier<A>(_:)(v15, a3, v12, a4);
  return sub_5EA00((uint64_t)v15);
}

uint64_t type metadata accessor for ProgressiveBlurToolbarModifier(uint64_t a1)
{
  uint64_t result;

  result = qword_2614C0;
  if (!qword_2614C0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ProgressiveBlurToolbarModifier);
  return result;
}

uint64_t sub_5EA00(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ProgressiveBlurToolbarModifier(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_5EA3C(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *a1;
  v2 = type metadata accessor for ProgressiveBlurToolbarModifier(255);
  v3 = type metadata accessor for ModifiedContent(255, v1, v2);
  sub_5EA98();
  return swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v3);
}

unint64_t sub_5EA98()
{
  unint64_t result;
  uint64_t v1;

  result = qword_261460;
  if (!qword_261460)
  {
    v1 = type metadata accessor for ProgressiveBlurToolbarModifier(255);
    result = swift_getWitnessTable(&unk_1E47B0, v1);
    atomic_store(result, (unint64_t *)&qword_261460);
  }
  return result;
}

uint64_t *sub_5EAE0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v11 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain(v11);
  }
  else
  {
    v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    a1[2] = a2[2];
    v6 = *(int *)(a3 + 28);
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    v9 = type metadata accessor for NavigationBarItem.TitleDisplayMode(0);
    v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
    swift_retain(v5);
    v10(v7, v8, v9);
  }
  return v3;
}

uint64_t sub_5EB84(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_release(*(_QWORD *)(a1 + 8));
  v4 = a1 + *(int *)(a2 + 28);
  v5 = type metadata accessor for NavigationBarItem.TitleDisplayMode(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

_QWORD *sub_5EBCC(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *, char *, uint64_t);

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  a1[2] = a2[2];
  v5 = *(int *)(a3 + 28);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = type metadata accessor for NavigationBarItem.TitleDisplayMode(0);
  v9 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
  swift_retain(v4);
  v9(v6, v7, v8);
  return a1;
}

_QWORD *sub_5EC44(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  *a1 = *a2;
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_retain(v6);
  swift_release(v7);
  a1[2] = a2[2];
  v8 = *(int *)(a3 + 28);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for NavigationBarItem.TitleDisplayMode(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 24))(v9, v10, v11);
  return a1;
}

uint64_t sub_5ECC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v4 = *(int *)(a3 + 28);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for NavigationBarItem.TitleDisplayMode(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

_QWORD *sub_5ED2C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;

  *a1 = *a2;
  v6 = a1[1];
  a1[1] = a2[1];
  swift_release(v6);
  a1[2] = a2[2];
  v7 = *(int *)(a3 + 28);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for NavigationBarItem.TitleDisplayMode(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t sub_5EDA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_5EDB4);
}

uint64_t sub_5EDB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for NavigationBarItem.TitleDisplayMode(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 28), a2, v8);
  }
}

uint64_t sub_5EE30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_5EE3C);
}

uint64_t sub_5EE3C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for NavigationBarItem.TitleDisplayMode(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 28), a2, a2, v7);
  }
  return result;
}

uint64_t sub_5EEB0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[1] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[2] = (char *)&value witness table for Builtin.Int64 + 64;
  result = type metadata accessor for NavigationBarItem.TitleDisplayMode(319);
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 4, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_5EF38(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_22B608, 1);
}

uint64_t sub_5EF48(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ProgressiveBlurToolbarModifier(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_5EF8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = sub_5440(&qword_261500);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = type metadata accessor for ProgressiveBlurToolbarModifier(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v4 + v5 + v8) & ~v8;
  v10 = v9 + *(_QWORD *)(v7 + 64);
  v11 = v3 | v8 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(_QWORD *)(v0 + v9 + 8));
  v12 = v0 + v9 + *(int *)(v6 + 28);
  v13 = type metadata accessor for NavigationBarItem.TitleDisplayMode(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
  return swift_deallocObject(v0, v10, v11);
}

uint64_t sub_5F05C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ProgressiveBlurToolbarModifier(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_5F0A0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_QWORD *)(sub_5440(&qword_261500) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ProgressiveBlurToolbarModifier(0) - 8) + 80);
  return sub_5E2B4(a1, v2 + ((v6 + v7 + v8) & ~v8), a2);
}

uint64_t sub_5F11C()
{
  return sub_3CC54(&qword_261538, &qword_261540, (void (*)(void))sub_5F140);
}

unint64_t sub_5F140()
{
  unint64_t result;

  result = qword_261548;
  if (!qword_261548)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ProgressiveBlurMaterial, &type metadata for ProgressiveBlurMaterial);
    atomic_store(result, (unint64_t *)&qword_261548);
  }
  return result;
}

unint64_t sub_5F188()
{
  unint64_t result;
  uint64_t v1;

  result = qword_261558;
  if (!qword_261558)
  {
    v1 = sub_7EF8(qword_261560);
    result = swift_getWitnessTable(&protocol conformance descriptor for GeometryReader<A>, v1);
    atomic_store(result, (unint64_t *)&qword_261558);
  }
  return result;
}

uint64_t sub_5F1D4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v2 = *(_QWORD *)(a1 - 8);
  v3 = *(_QWORD *)(v2 + 64);
  __chkstk_darwin(a1);
  v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v2 + 16))(v4);
  v5 = *(unsigned __int8 *)(v2 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(&unk_24D9B0, v6 + v3, v5 | 7);
  *(_OWORD *)(v7 + 16) = *(_OWORD *)(a1 + 16);
  (*(void (**)(uint64_t, char *, uint64_t))(v2 + 32))(v7 + v6, v4, a1);
  v8 = sub_5440(&qword_2615E8);
  v9 = type metadata accessor for _JetLocalizeDefaultWorking(0);
  v10 = type metadata accessor for _JetLocalizeDefaultFailed(0);
  v11 = sub_7FD8(&qword_2615F0, &qword_2615E8, (uint64_t)&protocol conformance descriptor for TupleView<A>);
  v12 = sub_6FD0(&qword_25FEE0, (uint64_t (*)(uint64_t))&type metadata accessor for _JetLocalizeDefaultWorking, (uint64_t)&protocol conformance descriptor for _JetLocalizeDefaultWorking);
  v13 = sub_6FD0(&qword_25FEE8, (uint64_t (*)(uint64_t))&type metadata accessor for _JetLocalizeDefaultFailed, (uint64_t)&protocol conformance descriptor for _JetLocalizeDefaultFailed);
  return JetLocalize.init(working:failed:content:)(&j___s18_JetEngine_SwiftUI01_A22LocalizeDefaultWorkingVACycfC, 0, sub_4ED68, 0, sub_6046C, v7, v8, v9, v10, v11, v12, v13);
}

uint64_t sub_5F360@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t KeyPath;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned __int8 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  char v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v94;
  void (*v95)(uint64_t *__return_ptr, uint64_t, uint64_t);
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  unsigned __int8 v109;
  char v110;
  int v111;
  uint64_t v112;

  v99 = a1;
  v102 = a5;
  v9 = sub_5440(&qword_2615F8);
  v10 = __chkstk_darwin(v9);
  v103 = (uint64_t)&v94 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v101 = (uint64_t)&v94 - v12;
  v13 = type metadata accessor for DefaultBlendModeModifier(0);
  v14 = __chkstk_darwin(v13);
  v104 = (uint64_t *)((char *)&v94 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v14);
  v105 = (uint64_t)&v94 - v16;
  v106 = sub_5440(&qword_261600);
  v100 = *(_QWORD *)(v106 - 8);
  v17 = __chkstk_darwin(v106);
  v19 = (char *)&v94 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v107 = (uint64_t)&v94 - v20;
  v22 = a2 + *(int *)(type metadata accessor for ListItemMetadataTitleLockupView(0, a3, a4, v21) + 36);
  v23 = *(uint64_t (**)(uint64_t, uint64_t))(a4 + 24);
  v96 = a3;
  v97 = v22;
  v24 = v23(a1, a3);
  v26 = v25;
  v28 = v27;
  v30 = v29 & 1;
  v98 = a4;
  v95 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a4 + 16);
  v95(&v112, a3, a4);
  sub_5F904();
  v32 = v31;
  v33 = Text.font(_:)(v31, v24, v26, v30, v28);
  v35 = v34;
  v37 = v36;
  v39 = v38 & 1;
  sub_2B574(v24, v26, v30);
  swift_release(v32);
  v40 = swift_bridgeObjectRelease(v28);
  v111 = static HierarchicalShapeStyle.primary.getter(v40);
  v41 = Text.foregroundStyle<A>(_:)(&v111, v33, v35, v39, v37, &type metadata for HierarchicalShapeStyle, &protocol witness table for HierarchicalShapeStyle);
  v43 = v42;
  LOBYTE(v26) = v44;
  v46 = v45;
  v47 = v33;
  v48 = v96;
  sub_2B574(v47, v35, v39);
  swift_bridgeObjectRelease(v37);
  KeyPath = swift_getKeyPath(&unk_1E48D0);
  v50 = swift_getKeyPath(&unk_1E4900);
  v51 = v104;
  *v104 = v50;
  v52 = sub_5440(&qword_25F208);
  swift_storeEnumTagMultiPayload(v51, v52, 0);
  v53 = (uint64_t)v51;
  v54 = v105;
  sub_4E18C(v53, v105);
  sub_4E1D0(v54, (uint64_t)&v19[*(int *)(v106 + 36)]);
  *(_QWORD *)v19 = v41;
  *((_QWORD *)v19 + 1) = v43;
  v19[16] = v26 & 1;
  *((_QWORD *)v19 + 3) = v46;
  *((_QWORD *)v19 + 4) = KeyPath;
  v55 = v98;
  *((_QWORD *)v19 + 5) = 3;
  v19[48] = 0;
  sub_604E0(v54);
  sub_6051C((uint64_t)v19, v107);
  v56 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v55 + 32))(v99, v48, v55);
  if (v59)
  {
    v60 = v56;
    v61 = v57;
    v62 = v59;
    v63 = v58 & 1;
    v99 = v58 & 1;
    v95((uint64_t *)&v110, v48, v55);
    v64 = sub_5FCEC();
    v109 = v63;
    v65 = Text.font(_:)(v64, v60, v61, v63, v62);
    v98 = v60;
    v66 = v65;
    v68 = v67;
    v70 = v69;
    v96 = v52;
    v72 = v71;
    swift_release(v64);
    v97 = v61;
    LOBYTE(v61) = v70 & 1;
    v108 = static HierarchicalShapeStyle.primary.getter(v73);
    v74 = Text.foregroundStyle<A>(_:)(&v108, v66, v68, v70 & 1, v72, &type metadata for HierarchicalShapeStyle, &protocol witness table for HierarchicalShapeStyle);
    v76 = v75;
    v78 = v77;
    v80 = v79 & 1;
    sub_2B574(v66, v68, v61);
    swift_bridgeObjectRelease(v72);
    v81 = swift_getKeyPath(&unk_1E48D0);
    v82 = swift_getKeyPath(&unk_1E4900);
    v83 = (uint64_t)v104;
    *v104 = v82;
    swift_storeEnumTagMultiPayload(v83, v96, 0);
    v84 = v105;
    sub_4E18C(v83, v105);
    v85 = v106;
    sub_4E1D0(v84, (uint64_t)&v19[*(int *)(v106 + 36)]);
    *(_QWORD *)v19 = v74;
    *((_QWORD *)v19 + 1) = v76;
    v19[16] = v80;
    *((_QWORD *)v19 + 3) = v78;
    *((_QWORD *)v19 + 4) = v81;
    *((_QWORD *)v19 + 5) = 2;
    v19[48] = 0;
    sub_34B1C(v74, v76, v80);
    swift_bridgeObjectRetain(v78);
    swift_retain(v81);
    sub_604E0(v84);
    sub_2B574(v98, v97, v99);
    swift_bridgeObjectRelease(v62);
    sub_2B574(v74, v76, v80);
    swift_release(v81);
    swift_bridgeObjectRelease(v78);
    v86 = v101;
    sub_6051C((uint64_t)v19, v101);
    v87 = 0;
    v88 = v85;
  }
  else
  {
    v87 = 1;
    v86 = v101;
    v88 = v106;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v100 + 56))(v86, v87, 1, v88);
  v89 = v107;
  sub_B3D0(v107, (uint64_t)v19, &qword_261600);
  v90 = v103;
  sub_B3D0(v86, v103, &qword_2615F8);
  v91 = v102;
  sub_B3D0((uint64_t)v19, v102, &qword_261600);
  v92 = sub_5440(&qword_261608);
  sub_B3D0(v90, v91 + *(int *)(v92 + 48), &qword_2615F8);
  sub_B414(v86, &qword_2615F8);
  sub_B414(v89, &qword_261600);
  sub_B414(v90, &qword_2615F8);
  return sub_B414((uint64_t)v19, &qword_261600);
}

void sub_5F904()
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = type metadata accessor for Font.Leading(0);
  __chkstk_darwin(v1);
  v2 = sub_5440(&qword_25FE08);
  v3 = __chkstk_darwin(v2);
  v4 = __chkstk_darwin(v3);
  __chkstk_darwin(v4);
  v5 = type metadata accessor for Font.TextStyle(0);
  v6 = __chkstk_darwin(v5);
  v7 = __chkstk_darwin(v6);
  __chkstk_darwin(v7);
  __asm { BR              X10 }
}

uint64_t sub_5FA58()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;

  (*(void (**)(uint64_t, _QWORD, uint64_t))(v0 + 104))(v3, enum case for Font.TextStyle.footnote(_:), v1);
  v6 = type metadata accessor for Font.Design(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v2, 1, 1, v6);
  v7 = static Font.system(_:design:weight:)(v3, v2, 0, 1);
  sub_B414(v2, &qword_25FE08);
  (*(void (**)(uint64_t, uint64_t))(v0 + 8))(v3, v1);
  v8 = ((uint64_t (*)(uint64_t))Font.bold())(v7);
  v9 = swift_release(v7);
  v11 = *(_QWORD *)(v5 - 96);
  v10 = *(_QWORD *)(v5 - 88);
  (*(void (**)(uint64_t, _QWORD, uint64_t, __n128))(v11 + 104))(v4, enum case for Font.Leading.tight(_:), v10, v9);
  v12 = Font.leading(_:)(v4, v8);
  v13 = swift_release(v8);
  (*(void (**)(uint64_t, uint64_t, __n128))(v11 + 8))(v4, v10, v13);
  return v12;
}

uint64_t sub_5FCEC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v16;

  v0 = type metadata accessor for Font.Leading(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v16 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_5440(&qword_25FE08);
  __chkstk_darwin(v4);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Font.TextStyle(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v10, enum case for Font.TextStyle.footnote(_:), v7);
  v11 = type metadata accessor for Font.Design(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v6, 1, 1, v11);
  v12 = static Font.system(_:design:weight:)(v10, v6, 0, 1);
  sub_B414((uint64_t)v6, &qword_25FE08);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for Font.Leading.tight(_:), v0);
  v13 = Font.leading(_:)(v3, v12);
  v14 = swift_release(v12);
  (*(void (**)(char *, uint64_t, __n128))(v1 + 8))(v3, v0, v14);
  return v13;
}

uint64_t sub_5FE90@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;

  *a4 = swift_getKeyPath(&unk_1E4818);
  v8 = sub_5440(&qword_25FAD0);
  swift_storeEnumTagMultiPayload(a4, v8, 0);
  v10 = (char *)a4 + *(int *)(type metadata accessor for ListItemMetadataTitleLockupView(0, a2, a3, v9) + 36);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(v10, a1, a2);
}

uint64_t type metadata accessor for ListItemMetadataTitleLockupView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10E40(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ListItemMetadataTitleLockupView);
}

uint64_t sub_5FF2C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  int v15;
  unsigned int v17;
  int v18;
  int v19;
  unsigned int v20;

  v6 = type metadata accessor for DynamicTypeSize(0);
  if (((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64)
       + ((*(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80) + 2) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80))
       + 7) & 0xFFFFFFFFFFFFFFF8)
     + 8 <= 8)
    v7 = 8;
  else
    v7 = ((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64)
         + ((*(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80) + 2) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80))
         + 7) & 0xFFFFFFFFFFFFFFF8)
       + 8;
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v9 = *(_DWORD *)(v8 + 84);
  if (v9 <= 0xFE)
    v10 = 254;
  else
    v10 = *(_DWORD *)(v8 + 84);
  if (!a2)
    return 0;
  v11 = *(unsigned __int8 *)(v8 + 80);
  v12 = v11 + v7 + 1;
  if (a2 <= v10)
    goto LABEL_27;
  v13 = (v12 & ~v11) + *(_QWORD *)(v8 + 64);
  v14 = 8 * v13;
  if (v13 <= 3)
  {
    v17 = ((a2 - v10 + ~(-1 << v14)) >> v14) + 1;
    if (HIWORD(v17))
    {
      v15 = *(_DWORD *)(a1 + v13);
      if (!v15)
        goto LABEL_27;
      goto LABEL_18;
    }
    if (v17 > 0xFF)
    {
      v15 = *(unsigned __int16 *)(a1 + v13);
      if (!*(_WORD *)(a1 + v13))
        goto LABEL_27;
      goto LABEL_18;
    }
    if (v17 < 2)
    {
LABEL_27:
      if (v9 > 0xFE)
        return (*(uint64_t (**)(uint64_t))(v8 + 48))((v12 + a1) & ~v11);
      v20 = *(unsigned __int8 *)(a1 + v7);
      if (v20 >= 2)
        return (v20 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v15 = *(unsigned __int8 *)(a1 + v13);
  if (!*(_BYTE *)(a1 + v13))
    goto LABEL_27;
LABEL_18:
  v18 = (v15 - 1) << v14;
  if (v13 > 3)
    v18 = 0;
  if ((_DWORD)v13)
  {
    if (v13 <= 3)
      v19 = v13;
    else
      v19 = 4;
    __asm { BR              X12 }
  }
  return v10 + v18 + 1;
}

void sub_600E0(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  size_t v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  int v16;

  v8 = type metadata accessor for DynamicTypeSize(0);
  v9 = ((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64)
       + ((*(unsigned __int8 *)(*(_QWORD *)(v8 - 8) + 80) + 2) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v8 - 8) + 80))
       + 7) & 0xFFFFFFFFFFFFFFF8)
     + 8;
  if (v9 <= 8)
    v9 = 8;
  v10 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v10 + 84) <= 0xFEu)
    v11 = 254;
  else
    v11 = *(_DWORD *)(v10 + 84);
  v12 = (((v9 | 1) + *(unsigned __int8 *)(v10 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80))
      + *(_QWORD *)(v10 + 64);
  if (a3 <= v11)
  {
    v13 = 0;
  }
  else if (v12 <= 3)
  {
    v15 = ((a3 - v11 + ~(-1 << (8 * v12))) >> (8 * v12)) + 1;
    if (HIWORD(v15))
    {
      v13 = &dword_4;
    }
    else if (v15 >= 0x100)
    {
      v13 = 2;
    }
    else
    {
      v13 = v15 > 1;
    }
  }
  else
  {
    v13 = &dword_0 + 1;
  }
  if (v11 < a2)
  {
    v14 = ~v11 + a2;
    if (v12 < 4)
    {
      if ((_DWORD)v12)
      {
        v16 = v14 & ~(-1 << (8 * v12));
        bzero(a1, v12);
        if ((_DWORD)v12 == 3)
        {
          *(_WORD *)a1 = v16;
          a1[2] = BYTE2(v16);
        }
        else if ((_DWORD)v12 == 2)
        {
          *(_WORD *)a1 = v16;
        }
        else
        {
          *a1 = v16;
        }
      }
    }
    else
    {
      bzero(a1, v12);
      *(_DWORD *)a1 = v14;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X14 }
}

uint64_t sub_60358(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  return swift_getOpaqueTypeConformance2(&v3, &unk_22B66C, 1);
}

uint64_t sub_6038C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  __n128 v15;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = type metadata accessor for ListItemMetadataTitleLockupView(0, v5, *(_QWORD *)(v4 + 24), a4);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v8 + 32) & ~v8;
  v10 = *(_QWORD *)(v7 + 64);
  v11 = (char *)(v4 + v9);
  v12 = sub_5440(&qword_25FAD0);
  if (swift_getEnumCaseMultiPayload(v4 + v9, v12) == 1)
  {
    v13 = &v11[*(int *)(type metadata accessor for FontConstants.Environment(0) + 24)];
    v14 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
  }
  else
  {
    v15 = swift_release(*(_QWORD *)v11);
  }
  (*(void (**)(char *, uint64_t, __n128))(*(_QWORD *)(v5 - 8) + 8))(&v11[*(int *)(v6 + 36)], v5, v15);
  return swift_deallocObject(v4, v9 + v10, v8 | 7);
}

uint64_t sub_6046C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = *(_QWORD *)(v3 + 16);
  v7 = *(_QWORD *)(v3 + 24);
  v8 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ListItemMetadataTitleLockupView(0, v6, v7, a2) - 8)
                          + 80);
  return sub_5F360(a1, v3 + ((v8 + 32) & ~v8), v6, v7, a3);
}

uint64_t sub_604E0(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for DefaultBlendModeModifier(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_6051C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_5440(&qword_261600);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_60564()
{
  return sub_7FD8(&qword_261610, &qword_261618, (uint64_t)&protocol conformance descriptor for JetLocalize<A, B, C>);
}

void sub_60590()
{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000068, 0x80000000001FAF70, "BooksUI/ImageResourceProviding.swift", 36, 2, 38, 0);
  __break(1u);
}

void sub_605E8()
{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000068, 0x80000000001FAF70, "BooksUI/ImageResourceProviding.swift", 36, 2, 42, 0);
  __break(1u);
}

void static ImageResourceProviderKey.defaultValue.getter(uint64_t a1@<X8>)
{
  *(_QWORD *)(a1 + 24) = &type metadata for ImageResourceProviderKey.DefaultImageResourceProvider;
  *(_QWORD *)(a1 + 32) = &off_24DAF0;
}

uint64_t View.imageResourceProvider(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t KeyPath;

  KeyPath = swift_getKeyPath(&unk_1E4930);
  View.environment<A>(_:_:)(KeyPath, a1, a2, a3);
  return swift_release(KeyPath);
}

_QWORD *EnvironmentValues.imageResourceProvider.getter@<X0>(_QWORD *a1@<X8>)
{
  unint64_t v2;

  v2 = sub_22978();
  return EnvironmentValues.subscript.getter(a1, &type metadata for ImageResourceProviderKey, &type metadata for ImageResourceProviderKey, v2);
}

uint64_t EnvironmentValues.imageResourceProvider.setter(_QWORD *a1)
{
  unint64_t v2;
  _BYTE v4[40];

  sub_BD00((uint64_t)a1, (uint64_t)v4);
  v2 = sub_22978();
  EnvironmentValues.subscript.setter(v4, &type metadata for ImageResourceProviderKey, &type metadata for ImageResourceProviderKey, v2);
  return _s7BooksUI13AnyPagedFrameVwxx_0(a1);
}

uint64_t View.imageResourceProvider(from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t KeyPath;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[5];

  KeyPath = swift_getKeyPath(&unk_1E4930);
  v7 = sub_5440(&qword_261620);
  v8 = type metadata accessor for BaseObjectGraph(0);
  inject<A, B>(_:from:)(v10, v7, a1, v7, v8);
  View.environment<A>(_:_:)(KeyPath, v10, a2, a3);
  swift_release(KeyPath);
  return _s7BooksUI13AnyPagedFrameVwxx_0(v10);
}

void (*EnvironmentValues.imageResourceProvider.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  unint64_t v4;

  v3 = malloc(0x88uLL);
  *a1 = v3;
  v3[15] = v1;
  v4 = sub_22978();
  v3[16] = v4;
  EnvironmentValues.subscript.getter(v3, &type metadata for ImageResourceProviderKey, &type metadata for ImageResourceProviderKey, v4);
  return sub_60858;
}

void sub_60858(uint64_t *a1, char a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = (_QWORD *)*a1;
  v3 = (_QWORD *)(*a1 + 40);
  v4 = *(_QWORD *)(*a1 + 128);
  if ((a2 & 1) != 0)
  {
    sub_BD00(*a1, (uint64_t)v3);
    sub_BD00((uint64_t)v3, (uint64_t)(v2 + 10));
    EnvironmentValues.subscript.setter(v2 + 10, &type metadata for ImageResourceProviderKey, &type metadata for ImageResourceProviderKey, v4);
    _s7BooksUI13AnyPagedFrameVwxx_0(v3);
  }
  else
  {
    sub_BD00(*a1, (uint64_t)v3);
    EnvironmentValues.subscript.setter(v3, &type metadata for ImageResourceProviderKey, &type metadata for ImageResourceProviderKey, v4);
  }
  _s7BooksUI13AnyPagedFrameVwxx_0(v2);
  free(v2);
}

uint64_t sub_60910(uint64_t a1, uint64_t a2)
{
  return swift_bridgeObjectRetain(a2);
}

uint64_t destroy for ImageResourceSource(uint64_t *a1)
{
  return sub_224D4(*a1, a1[1]);
}

uint64_t _s7BooksUI19ImageResourceSourceOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_60910(*(_QWORD *)a2, v4);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for ImageResourceSource(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_60910(*(_QWORD *)a2, v4);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  sub_224D4(v6, v7);
  return a1;
}

__n128 initializeWithTake for ImageResourceSource(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for ImageResourceSource(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v3;
  sub_224D4(v4, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for ImageResourceSource(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ImageResourceSource(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t sub_60AA8(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t sub_60AB0(uint64_t result, char a2)
{
  *(_BYTE *)(result + 16) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for ImageResourceSource()
{
  return &type metadata for ImageResourceSource;
}

uint64_t dispatch thunk of static ShelfGridLayoutConfiguring.shelfGridLayout(context:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t dispatch thunk of LibraryAssetStateObserverProviding.libraryAssetState(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

ValueMetadata *type metadata accessor for ImageResourceProviderKey()
{
  return &type metadata for ImageResourceProviderKey;
}

uint64_t sub_60AEC(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *a1;
  v2 = sub_7EF8(&qword_261628);
  v3 = type metadata accessor for ModifiedContent(255, v1, v2);
  sub_60B4C();
  return swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v3);
}

unint64_t sub_60B4C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_261630;
  if (!qword_261630)
  {
    v1 = sub_7EF8(&qword_261628);
    result = swift_getWitnessTable(&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>, v1);
    atomic_store(result, (unint64_t *)&qword_261630);
  }
  return result;
}

ValueMetadata *type metadata accessor for ImageResourceProviderKey.DefaultImageResourceProvider()
{
  return &type metadata for ImageResourceProviderKey.DefaultImageResourceProvider;
}

uint64_t sub_60BA8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char v24;
  int v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;

  v2 = v1;
  v61 = a1;
  v3 = type metadata accessor for UUID(0);
  v54 = *(_QWORD *)(v3 - 8);
  v55 = v3;
  __chkstk_darwin(v3);
  v60 = (char *)&v50 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = type metadata accessor for LinkActionType(0);
  v57 = *(_QWORD *)(v59 - 8);
  __chkstk_darwin(v59);
  v58 = (char *)&v50 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for ClickData.TargetType(0);
  __chkstk_darwin(v6);
  v56 = (char *)&v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_5440(&qword_25E828);
  __chkstk_darwin(v8);
  v10 = (char *)&v50 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for ActionMetrics(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v50 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_5440(&qword_25FAC0);
  __chkstk_darwin(v14);
  v16 = (char *)&v50 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for AssetAction.Kind(0);
  v18 = __chkstk_darwin(v17);
  v20 = (char *)&v50 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v22 = (char *)&v50 - v21;
  v23 = *(_QWORD *)v2;
  v24 = *(_BYTE *)(v2 + 8);
  sub_F9E4(*(_QWORD *)v2, v24);
  v25 = sub_31CE8(v23, v24);
  sub_BE0C(v23, v24);
  *(_QWORD *)v22 = 0xD00000000000001ALL;
  *((_QWORD *)v22 + 1) = 0x80000000001FB080;
  *((_WORD *)v22 + 8) = 0;
  swift_storeEnumTagMultiPayload(v22, v17, (v25 << 31 >> 31) & 5);
  v26 = (_QWORD *)(v2 + *(int *)(type metadata accessor for ListItemAccessoryWantToReadButtonView(0) + 28));
  v27 = v26[3];
  v28 = v26[4];
  sub_5480(v26, v27);
  v29 = ContentInfo.id.getter(v27, *(_QWORD *)(v28 + 8));
  v52 = v30;
  v53 = v29;
  v32 = v54;
  v31 = v55;
  sub_31EB0((uint64_t)v16);
  v33 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v32 + 48))(v16, 1, v31);
  if ((_DWORD)v33 == 1)
  {
    sub_B414((uint64_t)v16, &qword_25FAC0);
    v50 = 0;
    v51 = 0;
  }
  else
  {
    v34 = UUID.uuidString.getter(v33);
    v50 = v35;
    v51 = v34;
    (*(void (**)(char *, uint64_t))(v32 + 8))(v16, v31);
  }
  v36 = v31;
  v37 = v26[3];
  v38 = v26[4];
  sub_5480(v26, v37);
  v39 = AssetInfo.isExplicit.getter(v37, v38);
  LOBYTE(v38) = v39;
  static ActionMetrics.notInstrumented.getter(v39);
  sub_1E428((uint64_t)v22, (uint64_t)v20, type metadata accessor for AssetAction.Kind);
  v40 = v56;
  AssetAction.Kind.appAnalyticsClickTargetType.getter();
  v41 = v58;
  (*(void (**)(char *, _QWORD, uint64_t))(v57 + 104))(v58, enum case for LinkActionType.click(_:), v59);
  ClickData.init(with:linkActionType:index:url:)(v40, v41, 0, 0, 0);
  v42 = type metadata accessor for ClickData(0);
  v43 = (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 56))(v10, 0, 1, v42);
  v44 = v60;
  v45 = UUID.init()(v43);
  v46 = UUID.uuidString.getter(v45);
  v48 = v47;
  (*(void (**)(char *, uint64_t))(v32 + 8))(v44, v36);
  AssetAction.init(id:assetID:instanceID:isExplicit:actionMetrics:kind:clickData:)(v46, v48, v53, v52, v51, v50, v38 & 1, (uint64_t)v13, v61, (uint64_t)v20, (uint64_t)v10);
  return sub_62AF0((uint64_t)v22);
}

uint64_t ListItemAccessoryWantToReadButtonView.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  const char *v42;
  char *v43;
  id v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t ObjCClassFromMetadata;
  id v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  char *v67;
  uint64_t v68;
  char *v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char v77[16];
  uint64_t v78;
  _QWORD v79[3];
  _OWORD v80[3];

  v2 = v1;
  v76 = a1;
  v3 = type metadata accessor for Locale(0);
  v74 = *(_QWORD *)(v3 - 8);
  v75 = v3;
  v4 = __chkstk_darwin(v3);
  v69 = (char *)&v67 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v71 = (char *)&v67 - v6;
  v7 = type metadata accessor for String.LocalizationValue(0);
  v72 = *(_QWORD *)(v7 - 8);
  v73 = v7;
  v8 = __chkstk_darwin(v7);
  v67 = (char *)&v67 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v11 = (char *)&v67 - v10;
  v12 = sub_5440(&qword_261638);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v67 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_5440(&qword_261640);
  __chkstk_darwin(v16);
  v18 = (char *)&v67 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_5440(&qword_261648);
  __chkstk_darwin(v19);
  v70 = (char *)&v67 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v78 = v1;
  v21 = sub_5440(&qword_261650);
  v22 = sub_7FD8(&qword_261658, &qword_261650, (uint64_t)&protocol conformance descriptor for BooksActionButton<A>);
  Button.init(action:label:)(KeyedEncodingContainer.encode<A>(_:forKey:), 0, sub_6176C, v77, v21, v22);
  type metadata accessor for ListItemAccessoryWantToReadButtonView(0);
  v23 = sub_5440(&qword_261660);
  ScaledMetric.wrappedValue.getter(v80, v23);
  v24 = *(_QWORD *)&v80[0];
  ScaledMetric.wrappedValue.getter(v80, v23);
  v25 = *(_QWORD *)&v80[0];
  v26 = _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0();
  _FrameLayout.init(width:height:alignment:)(v80, v24, 0, v25, 0, v26, v27);
  (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v18, v15, v12);
  v68 = v16;
  v28 = &v18[*(int *)(v16 + 36)];
  v29 = v80[1];
  *(_OWORD *)v28 = v80[0];
  *((_OWORD *)v28 + 1) = v29;
  *((_OWORD *)v28 + 2) = v80[2];
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  v30 = *(_QWORD *)v2;
  LOBYTE(v2) = *(_BYTE *)(v2 + 8);
  sub_F9E4(v30, v2);
  LOBYTE(v12) = sub_31CE8(v30, v2);
  sub_BE0C(v30, v2);
  if ((v12 & 1) != 0)
  {
    v47 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000018, 0x80000000001FB030);
    v32 = v71;
    static Locale.current.getter(v47);
    v34 = v72;
    v33 = v73;
    v48 = v67;
    (*(void (**)(char *, char *, uint64_t))(v72 + 16))(v67, v11, v73);
    v49 = type metadata accessor for BundleFinder();
    ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v49);
    v51 = objc_msgSend((id)objc_opt_self(NSBundle), "bundleForClass:", ObjCClassFromMetadata);
    v40 = v74;
    v39 = v75;
    v52 = v69;
    (*(void (**)(char *, char *, uint64_t))(v74 + 16))(v69, v32, v75);
    v42 = "Remove from Want to Read accessoryButton";
    v43 = v48;
    v44 = v51;
    v45 = v52;
    v46 = 40;
  }
  else
  {
    v31 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000013, 0x80000000001FAFE0);
    v32 = v71;
    static Locale.current.getter(v31);
    v34 = v72;
    v33 = v73;
    v35 = v67;
    (*(void (**)(char *, char *, uint64_t))(v72 + 16))(v67, v11, v73);
    v36 = type metadata accessor for BundleFinder();
    v37 = swift_getObjCClassFromMetadata(v36);
    v38 = objc_msgSend((id)objc_opt_self(NSBundle), "bundleForClass:", v37);
    v40 = v74;
    v39 = v75;
    v41 = v69;
    (*(void (**)(char *, char *, uint64_t))(v74 + 16))(v69, v32, v75);
    v42 = "Add to Want to Read accessoryButton";
    v43 = v35;
    v44 = v38;
    v45 = v41;
    v46 = 35;
  }
  v53 = String.init(localized:table:bundle:locale:comment:)(v43, 0, 0, v44, v45, v42, v46, 2);
  v55 = v54;
  (*(void (**)(char *, uint64_t))(v40 + 8))(v32, v39);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v11, v33);
  v79[0] = v53;
  v79[1] = v55;
  v56 = sub_C57C();
  v57 = Text.init<A>(_:)(v79, &type metadata for String, v56);
  v59 = v58;
  v61 = v60;
  v63 = v62 & 1;
  v64 = sub_617B0();
  v65 = (uint64_t)v70;
  View.accessibility(label:)(v57, v59, v63, v61, v68, v64);
  sub_2B574(v57, v59, v63);
  swift_bridgeObjectRelease(v61);
  sub_B414((uint64_t)v18, &qword_261640);
  return sub_167A4(v65, v76, &qword_261648);
}

uint64_t sub_61508@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t ButtonView;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  double (**v25)@<D0>(uint64_t *@<X8>);
  _QWORD v27[5];

  v4 = type metadata accessor for DataStackID(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v27[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  ButtonView = type metadata accessor for ListItemAccessoryWantToReadButtonView(0);
  v8 = *(_QWORD *)(ButtonView - 8);
  v9 = *(_QWORD *)(v8 + 64);
  __chkstk_darwin(ButtonView);
  v10 = sub_5440(qword_25E3E8);
  __chkstk_darwin(v10);
  v12 = (char *)&v27[-1] - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for ButtonRole(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v12, 1, 1, v13);
  v27[3] = type metadata accessor for AssetAction(0);
  v27[4] = sub_6FD0(&qword_261738, type metadata accessor for AssetAction, (uint64_t)&protocol conformance descriptor for AssetAction);
  v14 = sub_C404(v27);
  sub_60BA8((uint64_t)v14);
  sub_1E428(a1, (uint64_t)&v27[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for ListItemAccessoryWantToReadButtonView);
  v15 = *(unsigned __int8 *)(v8 + 80);
  v16 = (v15 + 16) & ~v15;
  v17 = swift_allocObject(&unk_24DB40, v16 + v9, v15 | 7);
  v18 = sub_62A48((uint64_t)&v27[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v17 + v16);
  static DataStackID.additionalEventData.getter(v18);
  AppAnalyticsData.init(_:)(v6);
  v19 = (int *)sub_5440(&qword_261650);
  v20 = a2 + v19[9];
  *(_QWORD *)v20 = swift_getKeyPath(&unk_1E4AD8);
  *(_BYTE *)(v20 + 8) = 0;
  v21 = (_QWORD *)(a2 + v19[10]);
  *v21 = swift_getKeyPath(&unk_1E4B08);
  v22 = sub_5440(&qword_25E818);
  swift_storeEnumTagMultiPayload(v21, v22, 0);
  v23 = a2 + v19[11];
  *(_QWORD *)v23 = swift_getKeyPath(&unk_1E4B38);
  *(_BYTE *)(v23 + 40) = 0;
  sub_167A4((uint64_t)v12, a2 + v19[12], qword_25E3E8);
  result = sub_167A4((uint64_t)v27, a2 + v19[13], &qword_25E820);
  v25 = (double (**)@<D0>(uint64_t *@<X8>))(a2 + v19[14]);
  *v25 = sub_62A8C;
  v25[1] = (double (*)@<D0>(uint64_t *@<X8>))v17;
  return result;
}

uint64_t sub_6176C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_61508(*(_QWORD *)(v1 + 16), a1);
}

uint64_t type metadata accessor for ListItemAccessoryWantToReadButtonView(uint64_t a1)
{
  uint64_t result;

  result = qword_2616D8;
  if (!qword_2616D8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ListItemAccessoryWantToReadButtonView);
  return result;
}

unint64_t sub_617B0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_261668;
  if (!qword_261668)
  {
    v1 = sub_7EF8(&qword_261640);
    sub_7FD8(&qword_261670, &qword_261638, (uint64_t)&protocol conformance descriptor for Button<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_261668);
  }
  return result;
}

uint64_t sub_61834(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &opaque type descriptor for <<opaque return type of ListItemAccessoryWantToReadButtonView.body>>, 1);
}

double sub_61844@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;

  *a2 = _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0();
  a2[1] = v4;
  v5 = sub_5440(&qword_261740);
  return sub_61888(a1, (uint64_t *)((char *)a2 + *(int *)(v5 + 44)));
}

double sub_61888@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t KeyPath;
  uint64_t v32;
  uint64_t (*v33)(char *, uint64_t);
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  double result;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t *v63;

  v63 = a2;
  v62 = sub_5440(&qword_261748);
  __chkstk_darwin(v62);
  v61 = (uint64_t *)((char *)&v52 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v4 = type metadata accessor for SymbolEffectOptions(0);
  v58 = *(_QWORD *)(v4 - 8);
  v59 = v4;
  __chkstk_darwin(v4);
  v6 = (char *)&v52 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for ReplaceSymbolEffect(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v52 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v9);
  v14 = (char *)&v52 - v13;
  __chkstk_darwin(v12);
  v16 = (char *)&v52 - v15;
  v56 = type metadata accessor for ContentTransition(0);
  v54 = *(_QWORD *)(v56 - 8);
  __chkstk_darwin(v56);
  v52 = (char *)&v52 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = sub_5440(&qword_261750);
  v18 = __chkstk_darwin(v53);
  v60 = (uint64_t)&v52 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __chkstk_darwin(v18);
  v22 = (uint64_t *)((char *)&v52 - v21);
  __chkstk_darwin(v20);
  v57 = (uint64_t)&v52 - v23;
  v24 = objc_msgSend((id)objc_opt_self(UIColor), "tertiarySystemFillColor");
  v55 = Color.init(_:)(v24);
  v25 = *(_QWORD *)a1;
  LOBYTE(a1) = *(_BYTE *)(a1 + 8);
  sub_F9E4(v25, a1);
  v26 = sub_31CE8(v25, a1);
  sub_BE0C(v25, a1);
  if ((v26 & 1) != 0)
    v27 = 0x72616D6B63656863;
  else
    v27 = 1937075312;
  if ((v26 & 1) != 0)
    v28 = 0xE90000000000006BLL;
  else
    v28 = 0xE400000000000000;
  v29 = Image.init(systemName:)(v27, v28);
  v30 = static Color.gray.getter();
  KeyPath = swift_getKeyPath(&unk_1E4B68);
  v32 = ReplaceSymbolEffect.init()();
  ReplaceSymbolEffect.downUp.getter(v32);
  v33 = *(uint64_t (**)(char *, uint64_t))(v8 + 8);
  v34 = v33(v16, v7);
  ReplaceSymbolEffect.byLayer.getter(v34);
  v35 = v33(v14, v7);
  v36 = v6;
  static SymbolEffectOptions.default.getter(v35);
  v37 = sub_6FD0(&qword_261758, (uint64_t (*)(uint64_t))&type metadata accessor for ReplaceSymbolEffect, (uint64_t)&protocol conformance descriptor for ReplaceSymbolEffect);
  v38 = v52;
  static ContentTransition.symbolEffect<A>(_:options:)(v11, v36, v7, v37);
  (*(void (**)(char *, uint64_t))(v58 + 8))(v36, v59);
  v33(v11, v7);
  v39 = swift_getKeyPath(&unk_1E4B98);
  v40 = v61;
  v41 = v54;
  v42 = v38;
  v43 = v38;
  v44 = v56;
  (*(void (**)(char *, char *, uint64_t))(v54 + 16))((char *)v61 + *(int *)(v62 + 28), v42, v56);
  *v40 = v39;
  sub_B3D0((uint64_t)v40, (uint64_t)v22 + *(int *)(v53 + 36), &qword_261748);
  *v22 = v29;
  v22[1] = KeyPath;
  v22[2] = v30;
  swift_retain(v29);
  swift_retain(KeyPath);
  swift_retain(v30);
  sub_B414((uint64_t)v40, &qword_261748);
  (*(void (**)(char *, uint64_t))(v41 + 8))(v43, v44);
  swift_release(v30);
  swift_release(KeyPath);
  swift_release(v29);
  v45 = v57;
  sub_167A4((uint64_t)v22, v57, &qword_261750);
  v46 = v60;
  sub_B3D0(v45, v60, &qword_261750);
  v47 = v63;
  v48 = v55;
  *v63 = v55;
  *((_WORD *)v47 + 4) = 256;
  v49 = v47;
  v50 = sub_5440(&qword_261760);
  sub_B3D0(v46, (uint64_t)v49 + *(int *)(v50 + 48), &qword_261750);
  swift_retain(v48);
  sub_B414(v45, &qword_261750);
  sub_B414(v46, &qword_261750);
  *(_QWORD *)&result = swift_release(v48).n128_u64[0];
  return result;
}

unint64_t initializeBufferWithCopyOfBuffer for ListItemAccessoryWantToReadButtonView(unint64_t a1, uint64_t a2, int *a3)
{
  int v5;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v17 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = v17 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain(v17);
  }
  else
  {
    v7 = *(_QWORD *)a2;
    v8 = *(_BYTE *)(a2 + 8);
    sub_F9E4(*(_QWORD *)a2, v8);
    *(_QWORD *)a1 = v7;
    *(_BYTE *)(a1 + 8) = v8;
    v9 = a3[5];
    v10 = (uint64_t *)(a1 + v9);
    v11 = (uint64_t *)(a2 + v9);
    v12 = sub_5440(&qword_25F758);
    if (swift_getEnumCaseMultiPayload(v11, v12) == 1)
    {
      v13 = type metadata accessor for UUID(0);
      v14 = *(_QWORD *)(v13 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v14 + 48))(v11, 1, v13))
      {
        v15 = sub_5440(&qword_25FAC0);
        memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
        v16 = 1;
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v14 + 16))(v10, v11, v13);
        v16 = 1;
        (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v10, 0, 1, v13);
      }
    }
    else
    {
      v18 = *v11;
      *v10 = *v11;
      swift_retain(v18);
      v16 = 0;
    }
    swift_storeEnumTagMultiPayload(v10, v12, v16);
    v19 = a3[6];
    v20 = a1 + v19;
    v21 = a2 + v19;
    v22 = sub_5440(&qword_261660);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v20, v21, v22);
    v23 = a3[7];
    v24 = *(_OWORD *)(a2 + v23 + 24);
    *(_OWORD *)(a1 + v23 + 24) = v24;
    (**(void (***)(void))(v24 - 8))();
  }
  return a1;
}

uint64_t destroy for ListItemAccessoryWantToReadButtonView(uint64_t a1, int *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  sub_BE0C(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
  v4 = (_QWORD *)(a1 + a2[5]);
  v5 = sub_5440(&qword_25F758);
  if (swift_getEnumCaseMultiPayload(v4, v5) == 1)
  {
    v6 = type metadata accessor for UUID(0);
    v7 = *(_QWORD *)(v6 - 8);
    if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v7 + 48))(v4, 1, v6))
      (*(void (**)(_QWORD *, uint64_t))(v7 + 8))(v4, v6);
  }
  else
  {
    swift_release(*v4);
  }
  v8 = a1 + a2[6];
  v9 = sub_5440(&qword_261660);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  return _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)(a1 + a2[7]));
}

uint64_t initializeWithCopy for ListItemAccessoryWantToReadButtonView(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;

  v6 = *(_QWORD *)a2;
  v7 = *(_BYTE *)(a2 + 8);
  sub_F9E4(*(_QWORD *)a2, v7);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  v8 = a3[5];
  v9 = (uint64_t *)(a1 + v8);
  v10 = (uint64_t *)(a2 + v8);
  v11 = sub_5440(&qword_25F758);
  if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
  {
    v12 = type metadata accessor for UUID(0);
    v13 = *(_QWORD *)(v12 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v13 + 48))(v10, 1, v12))
    {
      v14 = sub_5440(&qword_25FAC0);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
      v15 = 1;
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v13 + 16))(v9, v10, v12);
      v15 = 1;
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v9, 0, 1, v12);
    }
  }
  else
  {
    v16 = *v10;
    *v9 = *v10;
    swift_retain(v16);
    v15 = 0;
  }
  swift_storeEnumTagMultiPayload(v9, v11, v15);
  v17 = a3[6];
  v18 = a1 + v17;
  v19 = a2 + v17;
  v20 = sub_5440(&qword_261660);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v18, v19, v20);
  v21 = a3[7];
  v22 = *(_OWORD *)(a2 + v21 + 24);
  *(_OWORD *)(a1 + v21 + 24) = v22;
  (**(void (***)(void))(v22 - 8))();
  return a1;
}

uint64_t assignWithCopy for ListItemAccessoryWantToReadButtonView(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = *(_QWORD *)a2;
  v7 = *(_BYTE *)(a2 + 8);
  sub_F9E4(*(_QWORD *)a2, v7);
  v8 = *(_QWORD *)a1;
  v9 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  sub_BE0C(v8, v9);
  if (a1 != a2)
  {
    v10 = a3[5];
    v11 = (uint64_t *)(a1 + v10);
    v12 = (uint64_t *)(a2 + v10);
    sub_B414(a1 + v10, &qword_25F758);
    v13 = sub_5440(&qword_25F758);
    if (swift_getEnumCaseMultiPayload(v12, v13) == 1)
    {
      v14 = type metadata accessor for UUID(0);
      v15 = *(_QWORD *)(v14 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v15 + 48))(v12, 1, v14))
      {
        v16 = sub_5440(&qword_25FAC0);
        memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
        v17 = 1;
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v15 + 16))(v11, v12, v14);
        v17 = 1;
        (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v11, 0, 1, v14);
      }
    }
    else
    {
      v18 = *v12;
      *v11 = *v12;
      swift_retain(v18);
      v17 = 0;
    }
    swift_storeEnumTagMultiPayload(v11, v13, v17);
  }
  v19 = a3[6];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_5440(&qword_261660);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 24))(v20, v21, v22);
  sub_142F8((_QWORD *)(a1 + a3[7]), (_QWORD *)(a2 + a3[7]));
  return a1;
}

uint64_t initializeWithTake for ListItemAccessoryWantToReadButtonView(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = a3[5];
  v7 = (void *)(a1 + v6);
  v8 = (const void *)(a2 + v6);
  v9 = sub_5440(&qword_25F758);
  if (swift_getEnumCaseMultiPayload(v8, v9) == 1)
  {
    v10 = type metadata accessor for UUID(0);
    v11 = *(_QWORD *)(v10 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48))(v8, 1, v10))
    {
      v12 = sub_5440(&qword_25FAC0);
      memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(v7, v8, v10);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v7, 0, 1, v10);
    }
    swift_storeEnumTagMultiPayload(v7, v9, 1);
  }
  else
  {
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  v13 = a3[6];
  v14 = a1 + v13;
  v15 = a2 + v13;
  v16 = sub_5440(&qword_261660);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v14, v15, v16);
  v17 = a3[7];
  v18 = a1 + v17;
  v19 = a2 + v17;
  v20 = *(_OWORD *)(v19 + 16);
  *(_OWORD *)v18 = *(_OWORD *)v19;
  *(_OWORD *)(v18 + 16) = v20;
  *(_QWORD *)(v18 + 32) = *(_QWORD *)(v19 + 32);
  return a1;
}

uint64_t assignWithTake for ListItemAccessoryWantToReadButtonView(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  void *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;

  v6 = *a2;
  v7 = *((_BYTE *)a2 + 8);
  v8 = *(_QWORD *)a1;
  v9 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  sub_BE0C(v8, v9);
  if ((uint64_t *)a1 != a2)
  {
    v10 = a3[5];
    v11 = (void *)(a1 + v10);
    v12 = (char *)a2 + v10;
    sub_B414(a1 + v10, &qword_25F758);
    v13 = sub_5440(&qword_25F758);
    if (swift_getEnumCaseMultiPayload(v12, v13) == 1)
    {
      v14 = type metadata accessor for UUID(0);
      v15 = *(_QWORD *)(v14 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v12, 1, v14))
      {
        v16 = sub_5440(&qword_25FAC0);
        memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, char *, uint64_t))(v15 + 32))(v11, v12, v14);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v11, 0, 1, v14);
      }
      swift_storeEnumTagMultiPayload(v11, v13, 1);
    }
    else
    {
      memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
  }
  v17 = a3[6];
  v18 = a1 + v17;
  v19 = (uint64_t)a2 + v17;
  v20 = sub_5440(&qword_261660);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 40))(v18, v19, v20);
  v21 = a3[7];
  v22 = a1 + v21;
  v23 = (uint64_t)a2 + v21;
  _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)(a1 + v21));
  v24 = *(_OWORD *)(v23 + 16);
  *(_OWORD *)v22 = *(_OWORD *)v23;
  *(_OWORD *)(v22 + 16) = v24;
  *(_QWORD *)(v22 + 32) = *(_QWORD *)(v23 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for ListItemAccessoryWantToReadButtonView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_625B0);
}

uint64_t sub_625B0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v12;

  v6 = sub_5440(&qword_261678);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = a3[5];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v10 = sub_5440(&qword_261660);
  v7 = *(_QWORD *)(v10 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v10;
    v9 = a3[6];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v12 = *(_QWORD *)(a1 + a3[7] + 24);
  if (v12 >= 0xFFFFFFFF)
    LODWORD(v12) = -1;
  return (v12 + 1);
}

uint64_t storeEnumTagSinglePayload for ListItemAccessoryWantToReadButtonView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_6266C);
}

uint64_t sub_6266C(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  v8 = sub_5440(&qword_261678);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = a4[5];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
  }
  result = sub_5440(&qword_261660);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = a4[6];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
  }
  *(_QWORD *)(a1 + a4[7] + 24) = (a2 - 1);
  return result;
}

void sub_62718(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[4];

  v6[0] = "\t";
  sub_627B0(319);
  if (v3 <= 0x3F)
  {
    v6[1] = *(_QWORD *)(v2 - 8) + 64;
    sub_62808(319);
    if (v5 <= 0x3F)
    {
      v6[2] = *(_QWORD *)(v4 - 8) + 64;
      v6[3] = &unk_1E4AC0;
      swift_initStructMetadata(a1, 256, 4, v6, a1 + 16);
    }
  }
}

void sub_627B0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_2616E8)
  {
    v2 = sub_7EF8(&qword_25FAC0);
    v3 = type metadata accessor for Environment.Content(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_2616E8);
  }
}

void sub_62808(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_2616F0)
  {
    v2 = sub_62860();
    v3 = type metadata accessor for ScaledMetric(a1, &type metadata for CGFloat, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_2616F0);
  }
}

unint64_t sub_62860()
{
  unint64_t result;

  result = qword_2616F8;
  if (!qword_2616F8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CGFloat, &type metadata for CGFloat);
    atomic_store(result, (unint64_t *)&qword_2616F8);
  }
  return result;
}

unint64_t sub_628A8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_261730;
  if (!qword_261730)
  {
    v1 = sub_7EF8(&qword_261648);
    sub_617B0();
    sub_6FD0((unint64_t *)&qword_25EEA0, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_261730);
  }
  return result;
}

uint64_t sub_6292C()
{
  uint64_t v0;
  int *ButtonView;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  ButtonView = (int *)type metadata accessor for ListItemAccessoryWantToReadButtonView(0);
  v2 = *((_QWORD *)ButtonView - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v0 + v4;
  sub_BE0C(*(_QWORD *)(v0 + v4), *(_BYTE *)(v0 + v4 + 8));
  v7 = (_QWORD *)(v0 + v4 + ButtonView[5]);
  v8 = sub_5440(&qword_25F758);
  if (swift_getEnumCaseMultiPayload(v7, v8) == 1)
  {
    v9 = type metadata accessor for UUID(0);
    v10 = *(_QWORD *)(v9 - 8);
    if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v10 + 48))(v7, 1, v9))
      (*(void (**)(_QWORD *, uint64_t))(v10 + 8))(v7, v9);
  }
  else
  {
    swift_release(*v7);
  }
  v11 = v3 | 7;
  v12 = v6 + ButtonView[6];
  v13 = sub_5440(&qword_261660);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
  _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)(v6 + ButtonView[7]));
  return swift_deallocObject(v0, v4 + v5, v11);
}

uint64_t sub_62A48(uint64_t a1, uint64_t a2)
{
  uint64_t ButtonView;

  ButtonView = type metadata accessor for ListItemAccessoryWantToReadButtonView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(ButtonView - 8) + 32))(a2, a1, ButtonView);
  return a2;
}

double sub_62A8C@<D0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ListItemAccessoryWantToReadButtonView(0) - 8) + 80);
  return sub_61844(v1 + ((v3 + 16) & ~v3), a1);
}

uint64_t sub_62AF0(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for AssetAction.Kind(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_62B2C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;

  v4 = sub_5440(&qword_261768);
  __chkstk_darwin(v4);
  v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_67C98(a1, (uint64_t)v6);
  State.init(wrappedValue:)(a2, v6, v4);
  return sub_B414(a1, &qword_261768);
}

uint64_t sub_62BC8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v7;

  v2 = sub_5440(&qword_261768);
  __chkstk_darwin(v2);
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_67C98(a1, (uint64_t)v4);
  v5 = sub_5440(qword_261770);
  State.wrappedValue.setter(v4, v5);
  return sub_B414(a1, &qword_261768);
}

uint64_t BooksMenu.init(_:onPresentationChanged:content:label:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void (*a5)(uint64_t)@<X4>, uint64_t a6@<X5>, uint64_t (*a7)(uint64_t)@<X6>, _QWORD *a8@<X8>, __int128 a9, uint64_t a10, uint64_t a11)
{
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int *v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v34;
  uint64_t v35;
  void (*v36)(uint64_t);
  __int128 v37;
  uint64_t v38;
  uint64_t v39;

  v35 = a6;
  v36 = a5;
  v34 = a9;
  v17 = sub_5440(&qword_261768);
  __chkstk_darwin(v17);
  v19 = (char *)&v34 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = a9;
  v38 = a10;
  v39 = a11;
  v20 = (int *)type metadata accessor for BooksMenu(0, (uint64_t)&v37);
  v21 = (_QWORD *)((char *)a8 + v20[16]);
  *v21 = swift_getKeyPath(&unk_1E4C58);
  v22 = sub_5440(&qword_25E948);
  swift_storeEnumTagMultiPayload(v21, v22, 0);
  v23 = (_QWORD *)((char *)a8 + v20[17]);
  *v23 = swift_getKeyPath(&unk_1E4C88);
  v24 = sub_5440(&qword_25E818);
  swift_storeEnumTagMultiPayload(v23, v24, 0);
  v25 = (_QWORD *)((char *)a8 + v20[18]);
  *v25 = swift_getKeyPath(&unk_1E4CB8);
  v26 = sub_5440(&qword_25FAE0);
  swift_storeEnumTagMultiPayload(v25, v26, 0);
  v27 = (char *)a8 + v20[19];
  *(_QWORD *)v27 = swift_getKeyPath(&unk_1E4CE8);
  v27[40] = 0;
  v28 = (char *)a8 + v20[20];
  *(_QWORD *)v28 = swift_getKeyPath(&unk_1E4D18);
  v28[8] = 0;
  v29 = (_QWORD *)((char *)a8 + v20[21]);
  v30 = type metadata accessor for Date(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v19, 1, 1, v30);
  sub_62B2C((uint64_t)v19, v29);
  Logger.init(subsystem:category:)(0xD000000000000010, 0x80000000001F9880, 0x6E654D736B6F6F42, 0xE900000000000075);
  *a8 = a1;
  a8[1] = a2;
  a8[2] = a3;
  a8[3] = a4;
  v31 = sub_64644(a3, a4);
  v32 = a7(v31);
  v36(v32);
  return sub_64654(a3, a4);
}

uint64_t type metadata accessor for BooksMenu(uint64_t a1, uint64_t a2)
{
  return swift_getGenericMetadata(a1, a2, &nominal type descriptor for BooksMenu);
}

uint64_t sub_62ECC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v0 = type metadata accessor for DataStack(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_31134((uint64_t)v3);
  v4 = type metadata accessor for ContentData(0);
  v5 = sub_6FD0(&qword_261840, (uint64_t (*)(uint64_t))&type metadata accessor for ContentData, (uint64_t)&protocol conformance descriptor for ContentData);
  v6 = sub_6FD0(&qword_261848, (uint64_t (*)(uint64_t))&type metadata accessor for ContentData, (uint64_t)&protocol conformance descriptor for ContentData);
  DataStack.first<A>(of:)(v4, v4, v5, v6);
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

uint64_t sub_62FC4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v0 = type metadata accessor for DataStack(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_31134((uint64_t)v3);
  v4 = type metadata accessor for SectionData(0);
  v5 = sub_6FD0(&qword_261830, (uint64_t (*)(uint64_t))&type metadata accessor for SectionData, (uint64_t)&protocol conformance descriptor for SectionData);
  v6 = sub_6FD0(&qword_261838, (uint64_t (*)(uint64_t))&type metadata accessor for SectionData, (uint64_t)&protocol conformance descriptor for SectionData);
  DataStack.first<A>(of:)(v4, v4, v5, v6);
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

uint64_t BooksMenu.body.getter@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t OpaqueTypeMetadata2;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t);
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t WitnessTable;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46[16];
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52[16];
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;

  v44 = a2;
  v35 = *(a1 - 1);
  v3 = *(_QWORD *)(v35 + 64);
  v32 = (char *)&v32 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = *(_QWORD *)(__chkstk_darwin(a1) + 16);
  v39 = v4;
  v5 = sub_7EF8(&qword_25EE58);
  v6 = type metadata accessor for ModifiedContent(255, v4, v5);
  v43 = v6;
  v8 = a1[3];
  v37 = a1[4];
  v7 = v37;
  v9 = sub_64664();
  v62 = v7;
  v63 = v9;
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v6);
  v10 = a1[5];
  v58 = v6;
  v59 = v8;
  v11 = v8;
  v60 = WitnessTable;
  v61 = v10;
  v12 = type metadata accessor for Menu(0, &v58);
  v42 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v38 = (char *)&v32 - v13;
  v36 = swift_getWitnessTable(&protocol conformance descriptor for Menu<A, B>, v12);
  v58 = v12;
  v59 = v36;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(0, &v58, &opaque type descriptor for <<opaque return type of View.systemColorScheme()>>, 0);
  v41 = *(_QWORD *)(OpaqueTypeMetadata2 - 8);
  v15 = __chkstk_darwin(OpaqueTypeMetadata2);
  v33 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v34 = (uint64_t)&v32 - v17;
  v18 = v35;
  (*(void (**)(char *, uint64_t, _QWORD *))(v35 + 16))((char *)&v32 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), v45, a1);
  v19 = *(unsigned __int8 *)(v18 + 80);
  v20 = v18;
  v21 = (v19 + 48) & ~v19;
  v22 = (char *)swift_allocObject(&unk_24DBC8, v21 + v3, v19 | 7);
  v23 = v39;
  *((_QWORD *)v22 + 2) = v39;
  *((_QWORD *)v22 + 3) = v8;
  v24 = v37;
  *((_QWORD *)v22 + 4) = v37;
  *((_QWORD *)v22 + 5) = v10;
  (*(void (**)(char *, char *, _QWORD *))(v20 + 32))(&v22[v21], v32, a1);
  v53 = v23;
  v54 = v11;
  v55 = v24;
  v56 = v10;
  v57 = v45;
  v47 = v23;
  v48 = v11;
  v25 = v11;
  v49 = v24;
  v50 = v10;
  v51 = v45;
  v26 = v38;
  Menu.init(onPresentationChanged:content:label:)(sub_64940, v22, sub_649B8, v52, sub_649C4, v46, v43, v25, WitnessTable, v10);
  v27 = (uint64_t)v33;
  v28 = v36;
  View.systemColorScheme()(v12, v36);
  (*(void (**)(char *, uint64_t))(v42 + 8))(v26, v12);
  v58 = v12;
  v59 = v28;
  swift_getOpaqueTypeConformance2(&v58, &opaque type descriptor for <<opaque return type of View.systemColorScheme()>>, 1);
  v29 = v34;
  sub_10F80(v27, OpaqueTypeMetadata2, v34);
  v30 = *(void (**)(uint64_t, uint64_t))(v41 + 8);
  v30(v27, OpaqueTypeMetadata2);
  sub_C5C0(v29, OpaqueTypeMetadata2, v44);
  return ((uint64_t (*)(uint64_t, uint64_t))v30)(v29, OpaqueTypeMetadata2);
}

uint64_t sub_63440(int a1, uint64_t *a2, uint64_t a3, uint64_t a4, char *a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  NSObject *v46;
  os_log_type_t v47;
  uint8_t *v48;
  uint64_t result;
  uint64_t (*v50)(_QWORD);
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  char *v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  void (*v74)(char *, char *, uint64_t);
  char *v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  char *v92;
  char *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  void (*v97)(char *, char *, uint64_t);
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  char *v115;
  _QWORD *v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  char *v139;
  _QWORD *v140;
  int v141;
  __int128 v142;
  char *v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  uint64_t v150;
  char v151;
  _BYTE v152[7];
  uint64_t v153;
  unint64_t v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  char v158;
  _BYTE v159[7];
  char v160;
  uint64_t v161;
  uint64_t v162;
  void *v163;

  v143 = a5;
  *((_QWORD *)&v142 + 1) = a4;
  *(_QWORD *)&v142 = a3;
  v141 = a1;
  v140 = (_QWORD *)type metadata accessor for Logger(0);
  v139 = (char *)*(v140 - 1);
  __chkstk_darwin(v140);
  v138 = (char *)&v105 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v125 = type metadata accessor for AppAnalyticsAction(0);
  v108 = *(_QWORD *)(v125 - 8);
  __chkstk_darwin(v125);
  v115 = (char *)&v105 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v135 = type metadata accessor for Date(0);
  v136 = *(_QWORD *)(v135 - 8);
  __chkstk_darwin(v135);
  v114 = (char *)&v105 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v111 = type metadata accessor for OpaqueMetricsFieldsContext(0);
  v110 = *(_QWORD *)(v111 - 8);
  __chkstk_darwin(v111);
  v109 = (uint64_t)&v105 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v127 = type metadata accessor for AppAnalyticsAction.Type(0);
  v126 = *(_QWORD *)(v127 - 8);
  __chkstk_darwin(v127);
  v128 = (char *)&v105 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v113 = type metadata accessor for CompoundAction(0);
  v112 = *(_QWORD *)(v113 - 8);
  __chkstk_darwin(v113);
  v124 = (char *)&v105 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v133 = type metadata accessor for ActionMetrics(0);
  v132 = *(_QWORD *)(v133 - 8);
  v14 = __chkstk_darwin(v133);
  v134 = (char *)&v105 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v131 = (uint64_t)&v105 - v16;
  v122 = type metadata accessor for LinkActionType(0);
  v120 = *(_QWORD *)(v122 - 8);
  __chkstk_darwin(v122);
  v121 = (char *)&v105 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v118 = type metadata accessor for ClickData.TargetType(0);
  v117 = *(_QWORD *)(v118 - 8);
  __chkstk_darwin(v118);
  v119 = (char *)&v105 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v123 = type metadata accessor for ClickData(0);
  v129 = *(_QWORD *)(v123 - 8);
  __chkstk_darwin(v123);
  v130 = (char *)&v105 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_5440(&qword_261768);
  v21 = __chkstk_darwin(v20);
  v116 = (uint64_t *)((char *)&v105 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v21);
  v24 = (char *)&v105 - v23;
  v25 = sub_5440(&qword_261808);
  __chkstk_darwin(v25);
  v27 = (char *)&v105 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = type metadata accessor for SectionData(0);
  v137 = *(_QWORD *)(v28 - 8);
  __chkstk_darwin(v28);
  v30 = (char *)&v105 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = sub_5440(&qword_261810);
  __chkstk_darwin(v31);
  v33 = (char *)&v105 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = type metadata accessor for ContentData(0);
  v35 = *(_QWORD *)(v34 - 8);
  __chkstk_darwin(v34);
  v37 = (char *)&v105 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v144 = v142;
  *(_QWORD *)&v145 = v143;
  *((_QWORD *)&v145 + 1) = a6;
  v38 = type metadata accessor for BooksMenu(0, (uint64_t)&v144);
  sub_62ECC();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v33, 1, v34) != 1)
  {
    v143 = v24;
    (*(void (**)(char *, char *, uint64_t))(v35 + 32))(v37, v33, v34);
    v39 = v38;
    sub_62FC4();
    v41 = v137;
    v40 = a2;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v137 + 48))(v27, 1, v28) == 1)
    {
      (*(void (**)(char *, uint64_t))(v35 + 8))(v37, v34);
      sub_B414((uint64_t)v27, &qword_261808);
      goto LABEL_5;
    }
    *((_QWORD *)&v142 + 1) = v35;
    v51 = (*(uint64_t (**)(char *, char *, uint64_t))(v41 + 32))(v30, v27, v28);
    v107 = v34;
    if ((v141 & 1) != 0)
    {
      v139 = v37;
      v106 = v28;
      v52 = (uint64_t)v143;
      Date.init()(v51);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v136 + 56))(v52, 0, 1, v135);
      *(_QWORD *)&v142 = v39;
      sub_62BC8(v52);
      v53 = v119;
      (*(void (**)(char *, _QWORD, uint64_t))(v117 + 104))(v119, enum case for ClickData.TargetType.button(_:), v118);
      v54 = v121;
      (*(void (**)(char *, _QWORD, uint64_t))(v120 + 104))(v121, enum case for LinkActionType.click(_:), v122);
      v55 = v130;
      ClickData.init(with:linkActionType:index:url:)(v53, v54, 0, 0, 0);
      v56 = *v40;
      v57 = v40[1];
      LOBYTE(v161) = 0;
      v158 = 16;
      v160 = 0;
      v150 = 0;
      v149 = 0u;
      v148 = 0u;
      v147 = 0u;
      v146 = 0u;
      v145 = 0u;
      v144 = 0u;
      v151 = 0;
      *(_DWORD *)v152 = *(_DWORD *)v159;
      *(_DWORD *)&v152[3] = *(_DWORD *)&v159[3];
      v153 = 0x6E6F74747562;
      v154 = 0xE600000000000000;
      v155 = 0u;
      v156 = 0u;
      v157 = 0u;
      v58 = v131;
      static Metrics.createClickMetrics(targetId:targetType:actionType:actionDetails:actionUrl:location:)(v56, v57, (unsigned __int8 *)&v161, &v158, 0, 0, 0, &v144, v131);
      (*(void (**)(char *, uint64_t, uint64_t))(v132 + 16))(v134, v58, v133);
      v59 = sub_5440(&qword_25ED68);
      v60 = v30;
      v61 = swift_allocObject(v59, 72, 7);
      *(_OWORD *)(v61 + 16) = xmmword_1E0B70;
      v140 = (_QWORD *)(v61 + 32);
      v62 = sub_5440(&qword_261828);
      v63 = v128;
      v64 = &v128[*(int *)(v62 + 48)];
      v65 = &v128[*(int *)(v62 + 64)];
      v66 = v40;
      v67 = enum case for LocationType.button(_:);
      v68 = type metadata accessor for LocationType(0);
      v69 = v67;
      v40 = v66;
      (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v68 - 8) + 104))(v63, v69, v68);
      v70 = v41;
      v71 = v129;
      v72 = v64;
      v73 = v123;
      (*(void (**)(char *, char *, uint64_t))(v129 + 16))(v72, v55, v123);
      v74 = *(void (**)(char *, char *, uint64_t))(v70 + 16);
      v75 = v65;
      v76 = v106;
      v143 = v60;
      v74(v75, v60, v106);
      (*(void (**)(char *, _QWORD, uint64_t))(v126 + 104))(v63, enum case for AppAnalyticsAction.Type.clickEvent(_:), v127);
      *(_QWORD *)(v61 + 56) = v125;
      *(_QWORD *)(v61 + 64) = sub_6FD0(&qword_261820, (uint64_t (*)(uint64_t))&type metadata accessor for AppAnalyticsAction, (uint64_t)&protocol conformance descriptor for AppAnalyticsAction);
      sub_C404(v140);
      AppAnalyticsAction.init(type:)(v63);
      v77 = v124;
      CompoundAction.init(actionMetrics:subactions:)(v134, v61);
      sub_32138((uint64_t)&v144);
      v78 = *((_QWORD *)&v145 + 1);
      if (*((_QWORD *)&v145 + 1))
      {
        v140 = (_QWORD *)v146;
        sub_5480(&v144, *((uint64_t *)&v145 + 1));
        v79 = v113;
        v162 = v113;
        v163 = &protocol witness table for CompoundAction;
        v80 = sub_C404(&v161);
        v81 = v112;
        (*(void (**)(_QWORD *, char *, uint64_t))(v112 + 16))(v80, v77, v79);
        v82 = v77;
        v83 = v109;
        sub_3210C(v109);
        PerformAction.callAsFunction(_:withMetrics:)(&v161, v83, v78, v140);
        (*(void (**)(uint64_t, uint64_t))(v110 + 8))(v83, v111);
        (*(void (**)(char *, uint64_t))(v81 + 8))(v82, v79);
        (*(void (**)(uint64_t, uint64_t))(v132 + 8))(v131, v133);
        (*(void (**)(char *, uint64_t))(v129 + 8))(v130, v73);
        (*(void (**)(char *, uint64_t))(v70 + 8))(v143, v106);
        (*(void (**)(char *, uint64_t))(*((_QWORD *)&v142 + 1) + 8))(v139, v107);
LABEL_18:
        _s7BooksUI13AnyPagedFrameVwxx_0(&v161);
        result = _s7BooksUI13AnyPagedFrameVwxx_0(&v144);
        goto LABEL_8;
      }
      (*(void (**)(char *, uint64_t))(v112 + 8))(v77, v113);
      (*(void (**)(uint64_t, uint64_t))(v132 + 8))(v131, v133);
      (*(void (**)(char *, uint64_t))(v71 + 8))(v130, v73);
      (*(void (**)(char *, uint64_t))(v70 + 8))(v143, v76);
      (*(void (**)(char *, uint64_t))(*((_QWORD *)&v142 + 1) + 8))(v139, v107);
    }
    else
    {
      v84 = sub_5440(qword_261770);
      v85 = v116;
      State.wrappedValue.getter(v116, v84);
      v86 = v136;
      v87 = v135;
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v136 + 48))(v85, 1, v135) == 1)
      {
        (*(void (**)(char *, uint64_t))(v137 + 8))(v30, v28);
        (*(void (**)(char *, uint64_t))(*((_QWORD *)&v142 + 1) + 8))(v37, v107);
        result = sub_B414((uint64_t)v85, &qword_261768);
        goto LABEL_8;
      }
      v88 = v114;
      (*(void (**)(char *, _QWORD *, uint64_t))(v86 + 32))(v114, v85, v87);
      v89 = sub_5440(&qword_261818);
      v90 = v128;
      v91 = v86;
      v92 = &v128[*(int *)(v89 + 48)];
      v93 = &v128[*(int *)(v89 + 64)];
      (*(void (**)(char *, char *, uint64_t))(v91 + 16))(v128, v88, v87);
      v94 = v92;
      v95 = v107;
      (*(void (**)(char *, char *, uint64_t))(*((_QWORD *)&v142 + 1) + 16))(v94, v37, v107);
      v96 = v137;
      v97 = *(void (**)(char *, char *, uint64_t))(v137 + 16);
      v143 = v30;
      v97(v93, v30, v28);
      (*(void (**)(char *, _QWORD, uint64_t))(v126 + 104))(v90, enum case for AppAnalyticsAction.Type.reportContextualActionSheetExposure(_:), v127);
      AppAnalyticsAction.init(type:)(v90);
      sub_32138((uint64_t)&v144);
      v98 = *((_QWORD *)&v145 + 1);
      if (*((_QWORD *)&v145 + 1))
      {
        v140 = (_QWORD *)v146;
        sub_5480(&v144, *((uint64_t *)&v145 + 1));
        v106 = v28;
        v99 = v125;
        v162 = v125;
        v163 = (void *)sub_6FD0(&qword_261820, (uint64_t (*)(uint64_t))&type metadata accessor for AppAnalyticsAction, (uint64_t)&protocol conformance descriptor for AppAnalyticsAction);
        v100 = sub_C404(&v161);
        v101 = v108;
        v102 = v115;
        (*(void (**)(_QWORD *, char *, uint64_t))(v108 + 16))(v100, v115, v99);
        v103 = v37;
        v104 = v109;
        sub_3210C(v109);
        PerformAction.callAsFunction(_:withMetrics:)(&v161, v104, v98, v140);
        (*(void (**)(uint64_t, uint64_t))(v110 + 8))(v104, v111);
        (*(void (**)(char *, uint64_t))(v101 + 8))(v102, v99);
        (*(void (**)(char *, uint64_t))(v136 + 8))(v114, v135);
        (*(void (**)(char *, uint64_t))(v137 + 8))(v143, v106);
        (*(void (**)(char *, uint64_t))(*((_QWORD *)&v142 + 1) + 8))(v103, v95);
        goto LABEL_18;
      }
      (*(void (**)(char *, uint64_t))(v108 + 8))(v115, v125);
      (*(void (**)(char *, uint64_t))(v136 + 8))(v114, v87);
      (*(void (**)(char *, uint64_t))(v96 + 8))(v143, v28);
      (*(void (**)(char *, uint64_t))(*((_QWORD *)&v142 + 1) + 8))(v37, v95);
    }
    result = sub_B414((uint64_t)&v144, &qword_25FAF0);
    goto LABEL_8;
  }
  v39 = v38;
  sub_B414((uint64_t)v33, &qword_261810);
  v40 = a2;
LABEL_5:
  v42 = v139;
  v43 = v138;
  v44 = v140;
  v45 = (*((uint64_t (**)(char *, char *, _QWORD *))v139 + 2))(v138, (char *)v40 + *(int *)(v39 + 88), v140);
  v46 = Logger.logObject.getter(v45);
  v47 = static os_log_type_t.fault.getter(v46);
  if (os_log_type_enabled(v46, v47))
  {
    v48 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v48 = 0;
    _os_log_impl(&dword_0, v46, v47, "ContentData and SectionData should be present", v48, 2u);
    swift_slowDealloc(v48, -1, -1);
  }

  result = (*((uint64_t (**)(char *, _QWORD *))v42 + 1))(v43, v44);
LABEL_8:
  v50 = (uint64_t (*)(_QWORD))v40[2];
  if (v50)
    return v50(v141 & 1);
  return result;
}

uint64_t sub_64338@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[4];

  v6 = *(_QWORD *)(a2 - 8);
  __chkstk_darwin(a1);
  v8 = (char *)v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15[0] = v9;
  v15[1] = v10;
  v15[2] = v11;
  v15[3] = v12;
  v13 = type metadata accessor for BooksMenu(0, (uint64_t)v15);
  sub_10F80(a1 + *(int *)(v13 + 60), a2, (uint64_t)v8);
  sub_C5C0((uint64_t)v8, a2, a3);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, a2);
}

uint64_t sub_643F4@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  void (*v20)(char *, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  _QWORD v28[4];

  v23 = a4;
  v25 = a5;
  v8 = type metadata accessor for ColorScheme(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_7EF8(&qword_25EE58);
  v13 = type metadata accessor for ModifiedContent(0, a1, v12);
  v24 = *(_QWORD *)(v13 - 8);
  v14 = __chkstk_darwin(v13);
  v16 = (char *)&v22 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v18 = (char *)&v22 - v17;
  v28[0] = a1;
  v28[1] = a2;
  v28[2] = a3;
  v28[3] = v23;
  type metadata accessor for BooksMenu(0, (uint64_t)v28);
  sub_31378((uint64_t)v11);
  View.colorScheme(_:)(v11, a1, a3);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  v19 = sub_64664();
  v26 = a3;
  v27 = v19;
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v13);
  sub_10F80((uint64_t)v16, v13, (uint64_t)v18);
  v20 = *(void (**)(char *, uint64_t))(v24 + 8);
  v20(v16, v13);
  sub_C5C0((uint64_t)v18, v13, v25);
  return ((uint64_t (*)(char *, uint64_t))v20)(v18, v13);
}

uint64_t sub_645B4()
{
  return EnvironmentValues.metricsFieldsContext.getter();
}

uint64_t sub_645D4()
{
  return EnvironmentValues.performAction.getter();
}

uint64_t sub_645FC()
{
  return EnvironmentValues.metricsFieldsContext.getter();
}

uint64_t sub_6461C()
{
  return EnvironmentValues.performAction.getter();
}

uint64_t sub_64644(uint64_t result, uint64_t a2)
{
  if (result)
    return swift_retain(a2);
  return result;
}

uint64_t sub_64654(uint64_t result, uint64_t a2)
{
  if (result)
    return swift_release(a2);
  return result;
}

unint64_t sub_64664()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25EE78;
  if (!qword_25EE78)
  {
    v1 = sub_7EF8(&qword_25EE58);
    result = swift_getWitnessTable(&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>, v1);
    atomic_store(result, (unint64_t *)&qword_25EE78);
  }
  return result;
}

uint64_t sub_646B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 40);
  v28 = v1;
  v27 = *(_OWORD *)(v0 + 24);
  v29 = v27;
  v30 = v2;
  v3 = (int *)type metadata accessor for BooksMenu(0, (uint64_t)&v28);
  v4 = *((_QWORD *)v3 - 1);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = (v5 + 48) & ~v5;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = v0 + v6;
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v6 + 8));
  if (*(_QWORD *)(v0 + v6 + 16))
    v9 = swift_release(*(_QWORD *)(v8 + 24));
  (*(void (**)(uint64_t, uint64_t, __n128))(*(_QWORD *)(v1 - 8) + 8))(v8 + v3[14], v1, v9);
  (*(void (**)(uint64_t))(*(_QWORD *)(v27 - 8) + 8))(v8 + v3[15]);
  v10 = (_QWORD *)(v8 + v3[16]);
  v11 = sub_5440(&qword_25E948);
  if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
  {
    v12 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v10, v12);
  }
  else
  {
    swift_release(*v10);
  }
  v13 = (_QWORD *)(v8 + v3[17]);
  v14 = sub_5440(&qword_25E818);
  if (swift_getEnumCaseMultiPayload(v13, v14) == 1)
  {
    v15 = type metadata accessor for DataStack(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v13, v15);
  }
  else
  {
    swift_release(*v13);
  }
  v16 = (_QWORD *)(v8 + v3[18]);
  v17 = sub_5440(&qword_25FAE0);
  if (swift_getEnumCaseMultiPayload(v16, v17) == 1)
  {
    v18 = type metadata accessor for OpaqueMetricsFieldsContext(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(v16, v18);
  }
  else
  {
    swift_release(*v16);
  }
  v19 = (_QWORD *)(v8 + v3[19]);
  if ((v19[5] & 1) != 0)
  {
    if (v19[3])
      _s7BooksUI13AnyPagedFrameVwxx_0(v19);
  }
  else
  {
    swift_release(*v19);
  }
  sub_19034(*(id *)(v8 + v3[20]), *(_BYTE *)(v8 + v3[20] + 8));
  v20 = v8 + v3[21];
  v21 = type metadata accessor for Date(0);
  v22 = *(_QWORD *)(v21 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v20, v21);
  v23 = sub_5440(qword_261770);
  swift_release(*(_QWORD *)(v20 + *(int *)(v23 + 28)));
  v24 = v8 + v3[22];
  v25 = type metadata accessor for Logger(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 8))(v24, v25);
  return swift_deallocObject(v0, v6 + v7, v5 | 7);
}

uint64_t sub_64940(int a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[4];

  v4 = v1[3];
  v5 = (char *)v1[4];
  v6 = v1[5];
  v9[0] = v1[2];
  v3 = v9[0];
  v9[1] = v4;
  v9[2] = v5;
  v9[3] = v6;
  v7 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for BooksMenu(0, (uint64_t)v9) - 8) + 80);
  return sub_63440(a1, (_QWORD *)((char *)v1 + ((v7 + 48) & ~v7)), v3, v4, v5, v6);
}

uint64_t sub_649B8()
{
  return sub_649D0((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_64338);
}

uint64_t sub_649C4()
{
  return sub_649D0((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_643F4);
}

uint64_t sub_649D0(uint64_t (*a1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v1;

  return a1(v1[6], v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_649E4(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  _OWORD v4[2];

  v2 = *(_OWORD *)(a2 + 32);
  v4[0] = *(_OWORD *)(a2 + 16);
  v4[1] = v2;
  return swift_getOpaqueTypeConformance2(v4, &opaque type descriptor for <<opaque return type of BooksMenu.body>>, 1);
}

uint64_t sub_64A18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 80);
}

void sub_64A20(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD v16[11];

  v16[0] = &unk_1E4DA8;
  v16[1] = &unk_1E4DC0;
  v2 = swift_checkMetadataState(319, *(_QWORD *)(a1 + 16));
  if (v3 <= 0x3F)
  {
    v16[2] = *(_QWORD *)(v2 - 8) + 64;
    v4 = swift_checkMetadataState(319, *(_QWORD *)(a1 + 24));
    if (v5 <= 0x3F)
    {
      v16[3] = *(_QWORD *)(v4 - 8) + 64;
      sub_2ADCC(319, (unint64_t *)&qword_25EB58, (uint64_t (*)(uint64_t))&type metadata accessor for ColorScheme);
      if (v7 <= 0x3F)
      {
        v16[4] = *(_QWORD *)(v6 - 8) + 64;
        sub_2ADCC(319, &qword_25E8F0, (uint64_t (*)(uint64_t))&type metadata accessor for DataStack);
        if (v9 <= 0x3F)
        {
          v16[5] = *(_QWORD *)(v8 - 8) + 64;
          sub_2ADCC(319, (unint64_t *)&qword_2617F8, (uint64_t (*)(uint64_t))&type metadata accessor for OpaqueMetricsFieldsContext);
          if (v11 <= 0x3F)
          {
            v16[6] = *(_QWORD *)(v10 - 8) + 64;
            v16[7] = &unk_1E4DD8;
            v16[8] = &unk_1E4DF0;
            sub_67B94(319);
            if (v13 <= 0x3F)
            {
              v16[9] = *(_QWORD *)(v12 - 8) + 64;
              v14 = type metadata accessor for Logger(319);
              if (v15 <= 0x3F)
              {
                v16[10] = *(_QWORD *)(v14 - 8) + 64;
                swift_initStructMetadata(a1, 0, 11, v16, a1 + 48);
              }
            }
          }
        }
      }
    }
  }
}

uint64_t *sub_64B90(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t *v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t *v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t *v66;
  unsigned int v67;
  uint64_t v68;
  unint64_t v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  __int128 v79;
  __int128 v80;
  unint64_t v81;
  unint64_t v82;
  id v83;
  char v84;
  void *v85;
  const void *v86;
  uint64_t v87;
  void (*v88)(unint64_t, unint64_t, uint64_t);
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  size_t __n;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  int v119;
  int v120;
  uint64_t v121;
  int v122;
  uint64_t v123;

  v102 = *(_QWORD *)(a3 + 16);
  v3 = *(_QWORD *)(v102 - 8);
  v122 = *(_DWORD *)(v3 + 80);
  v4 = v122;
  v98 = v3;
  v5 = *(_QWORD *)(v3 + 64);
  v103 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(v103 - 8);
  v120 = *(_DWORD *)(v6 + 80);
  v7 = v120;
  v99 = v5;
  v100 = v6;
  v8 = (v5 + v120 + ((v122 + 32) & ~(unint64_t)v122)) & ~(unint64_t)v120;
  v9 = *(_QWORD *)(v6 + 64);
  v91 = type metadata accessor for ColorScheme(0);
  v10 = *(_QWORD *)(v91 - 8);
  v119 = *(_DWORD *)(v10 + 80);
  v117 = v119 & 0xF8;
  v101 = v9;
  v97 = v117 | 7;
  v11 = (v9 + (v117 | 7) + v8) & ~(v117 | 7);
  v90 = v10;
  v12 = *(_QWORD *)(v10 + 64);
  if (v12 <= 8)
    v12 = 8;
  v105 = v12;
  v13 = v12 + 1;
  v14 = type metadata accessor for DataStack(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(_DWORD *)(v15 + 80);
  v106 = v13;
  v104 = v16 & 0xF8 | 7;
  v17 = (v13 + v104 + v11) & ~v104;
  v92 = v15;
  v93 = v14;
  v18 = *(_QWORD *)(v15 + 64);
  if (v18 <= 8)
    v18 = 8;
  v108 = v18;
  v19 = v18 + 1;
  v20 = type metadata accessor for OpaqueMetricsFieldsContext(0);
  v21 = *(_QWORD *)(v20 - 8);
  v22 = *(_DWORD *)(v21 + 80);
  v109 = v19;
  v107 = v22 & 0xF8 | 7;
  v94 = v21;
  v95 = v20;
  v23 = *(_QWORD *)(v21 + 64);
  if (v23 <= 8)
    v23 = 8;
  v111 = v23;
  v24 = (v23 + ((v19 + (v22 & 0xF8 | 7) + v17) & ~(v22 & 0xF8 | 7)) + 56) & 0xFFFFFFFFFFFFFFF8;
  v114 = type metadata accessor for Date(0);
  v25 = *(_QWORD *)(v114 - 8);
  v26 = *(_DWORD *)(v25 + 80);
  v27 = v26 & 0xF8 | 7;
  v112 = (v26 & 0xF8) + 16;
  v28 = (v112 + v24) & ~v27;
  v113 = v25;
  if (*(_DWORD *)(v25 + 84))
    v29 = *(_QWORD *)(v25 + 64);
  else
    v29 = *(_QWORD *)(v25 + 64) + 1;
  __n = v29;
  v115 = v29 + 7;
  v30 = ((v29 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  v31 = type metadata accessor for Logger(0);
  v32 = *(_QWORD *)(v31 - 8);
  v33 = *(_DWORD *)(v32 + 80);
  v116 = v30;
  v34 = v117 | v16 & 0xF8 | v22 & 0xF8;
  v110 = v26 & 0xF8 | 7;
  v118 = v33;
  v35 = v120 | (unint64_t)v122 | v34 | v27 | v33;
  if (v35 != 7
    || ((v120 | v122 | v119 | v16 | v22 | v26 | *(_DWORD *)(v32 + 80)) & 0x100000) != 0
    || ((v30 + v33 + v28) & ~v33) + *(_QWORD *)(v32 + 64) > 0x18)
  {
    v38 = *a2;
    *a1 = *a2;
    v39 = v38 + ((v35 + 16) & ~v35);
    swift_retain(v38);
  }
  else
  {
    v121 = *(_QWORD *)(v31 - 8);
    v123 = v31;
    v40 = ~v4;
    v41 = ~v7;
    v42 = ~v97;
    v43 = a2[1];
    *a1 = *a2;
    a1[1] = v43;
    v44 = ((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8;
    v45 = (unint64_t *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
    v46 = *v45;
    swift_bridgeObjectRetain(v43);
    if (v46 < 0xFFFFFFFF)
    {
      *(_OWORD *)v44 = *(_OWORD *)v45;
    }
    else
    {
      v47 = v45[1];
      *(_QWORD *)v44 = v46;
      *(_QWORD *)(v44 + 8) = v47;
      swift_retain(v47);
    }
    v48 = (v44 + v4 + 16) & v40;
    v49 = ((unint64_t)v45 + v4 + 16) & v40;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v98 + 16))(v48, v49, v102);
    v50 = (v49 + v99 + v7) & v41;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v100 + 16))((v48 + v99 + v7) & v41, v50, v103);
    v51 = (_QWORD *)((((v48 + v99 + v7) & v41) + v101 + v97) & v42);
    v52 = (uint64_t *)((v50 + v101 + v97) & v42);
    v53 = *((unsigned __int8 *)v52 + v105);
    if (v53 >= 2)
    {
      if (v105 <= 3)
        v54 = v105;
      else
        v54 = 4;
      __asm { BR              X12 }
    }
    v55 = ~v104;
    if (v53 == 1)
    {
      (*(void (**)(_QWORD *, uint64_t *, uint64_t))(v90 + 16))(v51, v52, v91);
      v56 = 1;
    }
    else
    {
      v57 = *v52;
      *v51 = *v52;
      swift_retain(v57);
      v56 = 0;
    }
    *((_BYTE *)v51 + v105) = v56;
    v58 = (_QWORD *)(((unint64_t)v51 + v106 + v104) & v55);
    v59 = (uint64_t *)(((unint64_t)v52 + v106 + v104) & v55);
    v60 = *((unsigned __int8 *)v59 + v108);
    if (v60 >= 2)
    {
      if (v108 <= 3)
        v61 = v108;
      else
        v61 = 4;
      __asm { BR              X12 }
    }
    v62 = ~v107;
    if (v60 == 1)
    {
      (*(void (**)(_QWORD *, uint64_t *, uint64_t))(v92 + 16))(v58, v59, v93);
      v63 = 1;
    }
    else
    {
      v64 = *v59;
      *v58 = *v59;
      swift_retain(v64);
      v63 = 0;
    }
    *((_BYTE *)v58 + v108) = v63;
    v65 = (_QWORD *)(((unint64_t)v58 + v109 + v107) & v62);
    v66 = (uint64_t *)(((unint64_t)v59 + v109 + v107) & v62);
    v67 = *((unsigned __int8 *)v66 + v111);
    if (v67 >= 2)
    {
      if (v111 <= 3)
        v68 = v111;
      else
        v68 = 4;
      __asm { BR              X12 }
    }
    v69 = v111 + 1;
    if (v67 == 1)
    {
      (*(void (**)(_QWORD *, unint64_t, uint64_t))(v94 + 16))(v65, ((unint64_t)v59 + v109 + v107) & v62, v95);
      v70 = 1;
    }
    else
    {
      v71 = *v66;
      *v65 = *v66;
      swift_retain(v71);
      v70 = 0;
    }
    v72 = ~v110;
    *((_BYTE *)v65 + v111) = v70;
    v73 = (char *)v66 + v69;
    v74 = ((unint64_t)v65 + v69 + 7) & 0xFFFFFFFFFFFFFFF8;
    v75 = ((unint64_t)v66 + v69 + 7) & 0xFFFFFFFFFFFFFFF8;
    if ((*(_BYTE *)(v75 + 40) & 1) != 0)
    {
      v76 = *(_QWORD *)(v75 + 24);
      v77 = v118;
      if (v76)
      {
        *(_QWORD *)(v74 + 24) = v76;
        *(_QWORD *)(v74 + 32) = *(_QWORD *)(v75 + 32);
        (**(void (***)(unint64_t))(v76 - 8))(((unint64_t)v65 + v69 + 7) & 0xFFFFFFFFFFFFFFF8);
      }
      else
      {
        v79 = *(_OWORD *)v75;
        v80 = *(_OWORD *)(v75 + 16);
        *(_QWORD *)(v74 + 32) = *(_QWORD *)(v75 + 32);
        *(_OWORD *)v74 = v79;
        *(_OWORD *)(v74 + 16) = v80;
      }
      *(_BYTE *)(v74 + 40) = 1;
    }
    else
    {
      v78 = *(_QWORD *)v75;
      *(_QWORD *)v74 = *(_QWORD *)v75;
      *(_BYTE *)(v74 + 40) = 0;
      swift_retain(v78);
      v77 = v118;
    }
    v81 = ((unint64_t)v65 + v69 + 55) & 0xFFFFFFFFFFFFFFF8;
    v82 = (unint64_t)(v73 + 55) & 0xFFFFFFFFFFFFFFF8;
    v83 = *(id *)v82;
    v84 = *(_BYTE *)(v82 + 8);
    sub_18EF0(*(id *)v82, v84);
    *(_QWORD *)v81 = v83;
    *(_BYTE *)(v81 + 8) = v84;
    v85 = (void *)((v112 + v81) & v72);
    v86 = (const void *)((v112 + v82) & v72);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v113 + 48))(v86, 1, v114))
    {
      memcpy(v85, v86, __n);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v113 + 16))(v85, v86, v114);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v113 + 56))(v85, 0, 1, v114);
    }
    v87 = *(_QWORD *)(((unint64_t)v86 + v115) & 0xFFFFFFFFFFFFF8);
    *(_QWORD *)(((unint64_t)v85 + v115) & 0xFFFFFFFFFFFFF8) = v87;
    v88 = *(void (**)(unint64_t, unint64_t, uint64_t))(v121 + 16);
    swift_retain(v87);
    v88(((unint64_t)v85 + v116 + v77) & ~v77, ((unint64_t)v86 + v116 + v77) & ~v77, v123);
    return a1;
  }
  return (uint64_t *)v39;
}

uint64_t sub_652FC(uint64_t a1, uint64_t a2)
{
  __n128 v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  v5 = (_QWORD *)((a1 + 23) & 0xFFFFFFFFFFFFFFF8);
  if (*v5 >= 0xFFFFFFFFuLL)
    v4 = swift_release(v5[1]);
  v6 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v7 = ((unint64_t)v5 + *(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  (*(void (**)(unint64_t, __n128))(v6 + 8))(v7, v4);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = *(_QWORD *)(*(_QWORD *)(a2 + 24) - 8);
  v10 = (v7 + v8 + *(unsigned __int8 *)(v9 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  (*(void (**)(unint64_t))(v9 + 8))(v10);
  v11 = *(_QWORD *)(v9 + 64);
  v12 = type metadata accessor for ColorScheme(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(_DWORD *)(v13 + 80) & 0xF8 | 7;
  v15 = (_QWORD *)((v10 + v11 + v14) & ~v14);
  if (*(_QWORD *)(v13 + 64) <= 8uLL)
    v16 = 8;
  else
    v16 = *(_QWORD *)(v13 + 64);
  v17 = *((unsigned __int8 *)v15 + v16);
  if (v17 >= 2)
  {
    if (v16 <= 3)
      v18 = v16;
    else
      v18 = 4;
    __asm { BR              X13 }
  }
  if (v17 == 1)
    (*(void (**)(_QWORD *, uint64_t))(v13 + 8))(v15, v12);
  else
    swift_release(*v15);
  v19 = type metadata accessor for DataStack(0);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = *(_DWORD *)(v20 + 80) & 0xF8 | 7;
  v22 = (_QWORD *)(((unint64_t)v15 + v16 + v21 + 1) & ~v21);
  if (*(_QWORD *)(v20 + 64) <= 8uLL)
    v23 = 8;
  else
    v23 = *(_QWORD *)(v20 + 64);
  v24 = *((unsigned __int8 *)v22 + v23);
  if (v24 >= 2)
  {
    if (v23 <= 3)
      v25 = v23;
    else
      v25 = 4;
    __asm { BR              X13 }
  }
  if (v24 == 1)
    (*(void (**)(_QWORD *, uint64_t))(v20 + 8))(v22, v19);
  else
    swift_release(*v22);
  v26 = type metadata accessor for OpaqueMetricsFieldsContext(0);
  v27 = *(_QWORD *)(v26 - 8);
  v28 = *(_DWORD *)(v27 + 80) & 0xF8 | 7;
  v29 = (_QWORD *)(((unint64_t)v22 + v23 + v28 + 1) & ~v28);
  if (*(_QWORD *)(v27 + 64) <= 8uLL)
    v30 = 8;
  else
    v30 = *(_QWORD *)(v27 + 64);
  v31 = *((unsigned __int8 *)v29 + v30);
  if (v31 >= 2)
  {
    if (v30 <= 3)
      v32 = v30;
    else
      v32 = 4;
    __asm { BR              X13 }
  }
  if (v31 == 1)
    (*(void (**)(_QWORD *, uint64_t))(v27 + 8))(v29, v26);
  else
    swift_release(*v29);
  v33 = (char *)v29 + v30;
  v34 = (uint64_t)v29 + v30 + 1;
  v35 = (_QWORD *)((unint64_t)(v33 + 8) & 0xFFFFFFFFFFFFFFF8);
  if ((v35[5] & 1) != 0)
  {
    if (v35[3])
      _s7BooksUI13AnyPagedFrameVwxx_0(v35);
  }
  else
  {
    swift_release(*v35);
  }
  v36 = (v34 + 55) & 0xFFFFFFFFFFFFFFF8;
  sub_19034(*(id *)v36, *(_BYTE *)(v36 + 8));
  v37 = type metadata accessor for Date(0);
  v38 = *(_QWORD *)(v37 - 8);
  v39 = *(_DWORD *)(v38 + 80) & 0xF8 | 7;
  v40 = (v36 + v39 + 9) & ~v39;
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v38 + 48))(v40, 1, v37))
    (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v40, v37);
  if (*(_DWORD *)(v38 + 84))
    v41 = *(_QWORD *)(v38 + 64);
  else
    v41 = *(_QWORD *)(v38 + 64) + 1;
  swift_release(*(_QWORD *)(((v40 | 7) + v41) & 0xFFFFFFFFFFFFF8));
  v42 = type metadata accessor for Logger(0);
  return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 8))((v40 + ((v41 + 7) & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(*(_QWORD *)(v42 - 8) + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v42 - 8) + 80), v42);
}

_QWORD *sub_656E4(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t *v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t *v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t *v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  unint64_t v62;
  unint64_t v63;
  id v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  int v74;
  size_t v75;
  size_t v76;
  size_t v77;
  uint64_t *v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  void (*v87)(unint64_t, unint64_t, uint64_t);

  v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  v6 = ((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8;
  v7 = (unint64_t *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
  v8 = *v7;
  swift_bridgeObjectRetain(v5);
  if (v8 < 0xFFFFFFFF)
  {
    *(_OWORD *)v6 = *(_OWORD *)v7;
  }
  else
  {
    v9 = v7[1];
    *(_QWORD *)v6 = v8;
    *(_QWORD *)(v6 + 8) = v9;
    swift_retain(v9);
  }
  v10 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = (v6 + v11 + 16) & ~v11;
  v13 = ((unint64_t)v7 + v11 + 16) & ~v11;
  (*(void (**)(uint64_t, uint64_t))(v10 + 16))(v12, v13);
  v14 = *(_QWORD *)(v10 + 64);
  v15 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v16 = *(unsigned __int8 *)(v15 + 80);
  v17 = v14 + v16;
  v18 = (v17 + v12) & ~v16;
  v19 = (v17 + v13) & ~v16;
  (*(void (**)(uint64_t, uint64_t))(v15 + 16))(v18, v19);
  v20 = *(_QWORD *)(v15 + 64);
  v21 = type metadata accessor for ColorScheme(0);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = *(_DWORD *)(v22 + 80) & 0xF8 | 7;
  v24 = (_QWORD *)((v20 + v23 + v18) & ~v23);
  v25 = (uint64_t *)((v20 + v23 + v19) & ~v23);
  if (*(_QWORD *)(v22 + 64) <= 8uLL)
    v26 = 8;
  else
    v26 = *(_QWORD *)(v22 + 64);
  v27 = *((unsigned __int8 *)v25 + v26);
  if (v27 >= 2)
  {
    if (v26 <= 3)
      v28 = v26;
    else
      v28 = 4;
    __asm { BR              X13 }
  }
  if (v27 == 1)
  {
    (*(void (**)(_QWORD *, uint64_t *, uint64_t))(v22 + 16))(v24, v25, v21);
    v29 = 1;
  }
  else
  {
    v30 = *v25;
    *v24 = *v25;
    swift_retain(v30);
    v29 = 0;
  }
  *((_BYTE *)v24 + v26) = v29;
  v31 = v26 + 1;
  v32 = type metadata accessor for DataStack(0);
  v33 = *(_QWORD *)(v32 - 8);
  v34 = *(_DWORD *)(v33 + 80) & 0xF8 | 7;
  v35 = (_QWORD *)(((unint64_t)v24 + v31 + v34) & ~v34);
  v36 = (uint64_t *)(((unint64_t)v25 + v31 + v34) & ~v34);
  if (*(_QWORD *)(v33 + 64) <= 8uLL)
    v37 = 8;
  else
    v37 = *(_QWORD *)(v33 + 64);
  v38 = *((unsigned __int8 *)v36 + v37);
  if (v38 >= 2)
  {
    if (v37 <= 3)
      v39 = v37;
    else
      v39 = 4;
    __asm { BR              X13 }
  }
  if (v38 == 1)
  {
    (*(void (**)(_QWORD *, uint64_t *, uint64_t))(v33 + 16))(v35, v36, v32);
    v40 = 1;
  }
  else
  {
    v41 = *v36;
    *v35 = *v36;
    swift_retain(v41);
    v40 = 0;
  }
  *((_BYTE *)v35 + v37) = v40;
  v42 = v37 + 1;
  v43 = type metadata accessor for OpaqueMetricsFieldsContext(0);
  v44 = *(_QWORD *)(v43 - 8);
  v45 = *(_DWORD *)(v44 + 80) & 0xF8 | 7;
  v46 = (_QWORD *)(((unint64_t)v35 + v42 + v45) & ~v45);
  v47 = (uint64_t *)(((unint64_t)v36 + v42 + v45) & ~v45);
  if (*(_QWORD *)(v44 + 64) <= 8uLL)
    v48 = 8;
  else
    v48 = *(_QWORD *)(v44 + 64);
  v49 = *((unsigned __int8 *)v47 + v48);
  if (v49 >= 2)
  {
    if (v48 <= 3)
      v50 = v48;
    else
      v50 = 4;
    __asm { BR              X13 }
  }
  if (v49 == 1)
  {
    (*(void (**)(_QWORD *, uint64_t *, uint64_t))(v44 + 16))(v46, v47, v43);
    v51 = 1;
  }
  else
  {
    v52 = *v47;
    *v46 = *v47;
    swift_retain(v52);
    v51 = 0;
  }
  *((_BYTE *)v46 + v48) = v51;
  v53 = v48 + 1;
  v54 = (char *)v46 + v48 + 1;
  v55 = (char *)v47 + v53;
  v56 = (unint64_t)(v54 + 7) & 0xFFFFFFFFFFFFFFF8;
  v57 = (unint64_t)(v55 + 7) & 0xFFFFFFFFFFFFFFF8;
  if ((*(_BYTE *)(v57 + 40) & 1) != 0)
  {
    v58 = *(_QWORD *)(v57 + 24);
    if (v58)
    {
      *(_QWORD *)(v56 + 24) = v58;
      *(_QWORD *)(v56 + 32) = *(_QWORD *)(v57 + 32);
      (**(void (***)(unint64_t))(v58 - 8))((unint64_t)(v54 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
    else
    {
      v60 = *(_OWORD *)v57;
      v61 = *(_OWORD *)(v57 + 16);
      *(_QWORD *)(v56 + 32) = *(_QWORD *)(v57 + 32);
      *(_OWORD *)v56 = v60;
      *(_OWORD *)(v56 + 16) = v61;
    }
    *(_BYTE *)(v56 + 40) = 1;
  }
  else
  {
    v59 = *(_QWORD *)v57;
    *(_QWORD *)v56 = *(_QWORD *)v57;
    *(_BYTE *)(v56 + 40) = 0;
    swift_retain(v59);
  }
  v62 = (unint64_t)(v54 + 55) & 0xFFFFFFFFFFFFFFF8;
  v63 = (unint64_t)(v55 + 55) & 0xFFFFFFFFFFFFFFF8;
  v64 = *(id *)v63;
  v65 = *(_BYTE *)(v63 + 8);
  sub_18EF0(*(id *)v63, v65);
  *(_QWORD *)v62 = v64;
  *(_BYTE *)(v62 + 8) = v65;
  v66 = type metadata accessor for Date(0);
  v67 = *(_QWORD *)(v66 - 8);
  v68 = *(_DWORD *)(v67 + 80) & 0xF8;
  v69 = v68 + 16;
  v70 = v68 + 16 + v62;
  v71 = ~v68 & 0xFFFFFFFFFFFFFFF8;
  v72 = v70 & v71;
  v73 = (v69 + v63) & v71;
  if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v67 + 48))(v73, 1, v66))
  {
    v74 = *(_DWORD *)(v67 + 84);
    v75 = *(_QWORD *)(v67 + 64);
    if (v74)
      v76 = v75;
    else
      v76 = v75 + 1;
    memcpy((void *)v72, (const void *)v73, v76);
  }
  else
  {
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v67 + 16))(v72, v73, v66);
    (*(void (**)(unint64_t, _QWORD, uint64_t, uint64_t))(v67 + 56))(v72, 0, 1, v66);
    v74 = *(_DWORD *)(v67 + 84);
    v75 = *(_QWORD *)(v67 + 64);
  }
  if (v74)
    v77 = v75;
  else
    v77 = v75 + 1;
  v78 = (uint64_t *)(((v73 | 7) + v77) & 0xFFFFFFFFFFFFF8);
  v79 = *v78;
  *(_QWORD *)(((v72 | 7) + v77) & 0xFFFFFFFFFFFFF8) = *v78;
  v80 = (v77 + 7) & 0xFFFFFFFFFFFFFFF8;
  v81 = type metadata accessor for Logger(0);
  v82 = *(_QWORD *)(v81 - 8);
  v83 = *(unsigned __int8 *)(v82 + 80);
  v84 = v80 + v83 + 8;
  v85 = (v84 + v72) & ~v83;
  v86 = (v84 + v73) & ~v83;
  v87 = *(void (**)(unint64_t, unint64_t, uint64_t))(v82 + 16);
  swift_retain(v79);
  v87(v85, v86, v81);
  return a1;
}

_QWORD *sub_65C94(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  __n128 v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  __n128 v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  __n128 v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  uint64_t v61;
  __n128 v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  __int128 v73;
  __int128 v74;
  unint64_t v75;
  unint64_t v76;
  id v77;
  char v78;
  void *v79;
  char v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t (*v89)(unint64_t, uint64_t, uint64_t);
  int v90;
  size_t v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;

  *a1 = *a2;
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = (_QWORD *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
  v9 = (unint64_t *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
  v10 = *v9;
  if (*v8 < 0xFFFFFFFFuLL)
  {
    if (v10 >= 0xFFFFFFFF)
    {
      v14 = v9[1];
      *v8 = v10;
      v8[1] = v14;
      swift_retain(v14);
      goto LABEL_8;
    }
  }
  else
  {
    if (v10 >= 0xFFFFFFFF)
    {
      v11 = v9[1];
      v12 = v8[1];
      *v8 = v10;
      v8[1] = v11;
      swift_retain(v11);
      v13 = swift_release(v12);
      goto LABEL_8;
    }
    swift_release(v8[1]);
  }
  v13 = *(__n128 *)v9;
  *(_OWORD *)v8 = *(_OWORD *)v9;
LABEL_8:
  v15 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v16 = *(unsigned __int8 *)(v15 + 80);
  v17 = ((unint64_t)v8 + v16 + 16) & ~v16;
  v18 = ((unint64_t)v9 + v16 + 16) & ~v16;
  (*(void (**)(uint64_t, uint64_t, __n128))(v15 + 24))(v17, v18, v13);
  v19 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v20 = *(unsigned __int8 *)(v19 + 80);
  v21 = *(_QWORD *)(v15 + 64) + v20;
  v22 = (v21 + v17) & ~v20;
  v23 = (v21 + v18) & ~v20;
  (*(void (**)(uint64_t, uint64_t))(v19 + 24))(v22, v23);
  v24 = *(_QWORD *)(v19 + 64);
  v25 = type metadata accessor for ColorScheme(0);
  v26 = *(_QWORD *)(v25 - 8);
  v27 = *(_DWORD *)(v26 + 80) & 0xF8 | 7;
  v28 = (uint64_t *)((v24 + v27 + v22) & ~v27);
  v29 = (uint64_t *)((v24 + v27 + v23) & ~v27);
  if (*(_QWORD *)(v26 + 64) <= 8uLL)
    v30 = 8;
  else
    v30 = *(_QWORD *)(v26 + 64);
  if (v28 != v29)
  {
    v31 = v25;
    v32 = *((unsigned __int8 *)v28 + v30);
    if (v32 >= 2)
    {
      if (v30 <= 3)
        v33 = v30;
      else
        v33 = 4;
      __asm { BR              X12 }
    }
    if (v32 == 1)
      (*(void (**)(uint64_t *, uint64_t))(v26 + 8))(v28, v25);
    else
      v34 = swift_release(*v28);
    v35 = *((unsigned __int8 *)v29 + v30);
    if (v35 >= 2)
    {
      if (v30 <= 3)
        v36 = v30;
      else
        v36 = 4;
      __asm { BR              X12 }
    }
    if (v35 == 1)
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t, __n128))(v26 + 16))(v28, v29, v31, v34);
      *((_BYTE *)v28 + v30) = 1;
    }
    else
    {
      v37 = *v29;
      *v28 = *v29;
      *((_BYTE *)v28 + v30) = 0;
      swift_retain(v37);
    }
  }
  v38 = type metadata accessor for DataStack(0);
  v39 = *(_QWORD *)(v38 - 8);
  v40 = *(_DWORD *)(v39 + 80) & 0xF8 | 7;
  v41 = v30 + v40 + 1;
  v42 = (uint64_t *)(((unint64_t)v28 + v41) & ~v40);
  v43 = (uint64_t *)(((unint64_t)v29 + v41) & ~v40);
  if (*(_QWORD *)(v39 + 64) <= 8uLL)
    v44 = 8;
  else
    v44 = *(_QWORD *)(v39 + 64);
  if (v42 != v43)
  {
    v45 = v38;
    v46 = *((unsigned __int8 *)v42 + v44);
    if (v46 >= 2)
    {
      if (v44 <= 3)
        v47 = v44;
      else
        v47 = 4;
      __asm { BR              X12 }
    }
    if (v46 == 1)
      (*(void (**)(uint64_t *, uint64_t))(v39 + 8))(v42, v38);
    else
      v48 = swift_release(*v42);
    v49 = *((unsigned __int8 *)v43 + v44);
    if (v49 >= 2)
    {
      if (v44 <= 3)
        v50 = v44;
      else
        v50 = 4;
      __asm { BR              X12 }
    }
    if (v49 == 1)
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t, __n128))(v39 + 16))(v42, v43, v45, v48);
      *((_BYTE *)v42 + v44) = 1;
    }
    else
    {
      v51 = *v43;
      *v42 = *v43;
      *((_BYTE *)v42 + v44) = 0;
      swift_retain(v51);
    }
  }
  v52 = type metadata accessor for OpaqueMetricsFieldsContext(0);
  v53 = *(_QWORD *)(v52 - 8);
  v54 = *(_DWORD *)(v53 + 80) & 0xF8 | 7;
  v55 = v44 + v54 + 1;
  v56 = (uint64_t *)(((unint64_t)v42 + v55) & ~v54);
  v57 = (uint64_t *)(((unint64_t)v43 + v55) & ~v54);
  if (*(_QWORD *)(v53 + 64) <= 8uLL)
    v58 = 8;
  else
    v58 = *(_QWORD *)(v53 + 64);
  if (v56 != v57)
  {
    v59 = v52;
    v60 = *((unsigned __int8 *)v56 + v58);
    if (v60 >= 2)
    {
      if (v58 <= 3)
        v61 = v58;
      else
        v61 = 4;
      __asm { BR              X12 }
    }
    if (v60 == 1)
      (*(void (**)(uint64_t *, uint64_t))(v53 + 8))(v56, v52);
    else
      v62 = swift_release(*v56);
    v63 = *((unsigned __int8 *)v57 + v58);
    if (v63 >= 2)
    {
      if (v58 <= 3)
        v64 = v58;
      else
        v64 = 4;
      __asm { BR              X12 }
    }
    if (v63 == 1)
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t, __n128))(v53 + 16))(v56, v57, v59, v62);
      *((_BYTE *)v56 + v58) = 1;
    }
    else
    {
      v65 = *v57;
      *v56 = *v57;
      *((_BYTE *)v56 + v58) = 0;
      swift_retain(v65);
    }
  }
  v66 = v58 + 1;
  v67 = (char *)v56 + v58 + 1;
  v68 = (char *)v57 + v66;
  v69 = (unint64_t)(v67 + 7) & 0xFFFFFFFFFFFFFFF8;
  v70 = ((unint64_t)v57 + v66 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (v69 != v70)
  {
    sub_B414((unint64_t)(v67 + 7) & 0xFFFFFFFFFFFFFFF8, &qword_25FAE8);
    if ((*(_BYTE *)(v70 + 40) & 1) != 0)
    {
      v71 = *(_QWORD *)(v70 + 24);
      if (v71)
      {
        *(_QWORD *)(v69 + 24) = v71;
        *(_QWORD *)(v69 + 32) = *(_QWORD *)(v70 + 32);
        (**(void (***)(unint64_t, unint64_t))(v71 - 8))((unint64_t)(v67 + 7) & 0xFFFFFFFFFFFFFFF8, v70);
      }
      else
      {
        v73 = *(_OWORD *)v70;
        v74 = *(_OWORD *)(v70 + 16);
        *(_QWORD *)(v69 + 32) = *(_QWORD *)(v70 + 32);
        *(_OWORD *)v69 = v73;
        *(_OWORD *)(v69 + 16) = v74;
      }
      *(_BYTE *)(v69 + 40) = 1;
    }
    else
    {
      v72 = *(_QWORD *)v70;
      *(_QWORD *)v69 = *(_QWORD *)v70;
      *(_BYTE *)(v69 + 40) = 0;
      swift_retain(v72);
    }
  }
  v75 = (unint64_t)(v67 + 55) & 0xFFFFFFFFFFFFFFF8;
  v76 = (unint64_t)(v68 + 55) & 0xFFFFFFFFFFFFFFF8;
  v77 = *(id *)v76;
  v78 = *(_BYTE *)(v76 + 8);
  sub_18EF0(*(id *)v76, v78);
  v79 = *(void **)v75;
  v80 = *(_BYTE *)(v75 + 8);
  *(_QWORD *)v75 = v77;
  *(_BYTE *)(v75 + 8) = v78;
  sub_19034(v79, v80);
  v81 = type metadata accessor for Date(0);
  v82 = *(_QWORD *)(v81 - 8);
  v83 = *(_DWORD *)(v82 + 80) & 0xF8;
  v84 = v83 + 16;
  v85 = v83 + 16 + v75;
  v86 = ~v83 & 0xFFFFFFFFFFFFFFF8;
  v87 = v85 & v86;
  v88 = (v84 + v76) & v86;
  v89 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v82 + 48);
  LODWORD(v75) = v89(v85 & v86, 1, v81);
  v90 = v89(v88, 1, v81);
  if ((_DWORD)v75)
  {
    if (!v90)
    {
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v82 + 16))(v87, v88, v81);
      (*(void (**)(unint64_t, _QWORD, uint64_t, uint64_t))(v82 + 56))(v87, 0, 1, v81);
      goto LABEL_84;
    }
  }
  else
  {
    if (!v90)
    {
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v82 + 24))(v87, v88, v81);
      goto LABEL_84;
    }
    (*(void (**)(unint64_t, uint64_t))(v82 + 8))(v87, v81);
  }
  if (*(_DWORD *)(v82 + 84))
    v91 = *(_QWORD *)(v82 + 64);
  else
    v91 = *(_QWORD *)(v82 + 64) + 1;
  memcpy((void *)v87, (const void *)v88, v91);
LABEL_84:
  if (*(_DWORD *)(v82 + 84))
    v92 = *(_QWORD *)(v82 + 64);
  else
    v92 = *(_QWORD *)(v82 + 64) + 1;
  v93 = (uint64_t *)(((v87 | 7) + v92) & 0xFFFFFFFFFFFFFFF8);
  v94 = (uint64_t *)(((v88 | 7) + v92) & 0xFFFFFFFFFFFFF8);
  v95 = *v94;
  v96 = *v93;
  *v93 = *v94;
  swift_retain(v95);
  swift_release(v96);
  v97 = type metadata accessor for Logger(0);
  v98 = *(_QWORD *)(v97 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v98 + 24))((((v92 + 7) & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(v98 + 80) + 8 + v87) & ~(unint64_t)*(unsigned __int8 *)(v98 + 80), (((v92 + 7) & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(v98 + 80) + 8 + v88) & ~(unint64_t)*(unsigned __int8 *)(v98 + 80), v97);
  return a1;
}

_OWORD *sub_66538(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  char v47;
  char *v48;
  char *v49;
  _OWORD *v50;
  __int128 *v51;
  __int128 v52;
  __int128 v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  int v65;
  size_t v66;
  size_t v67;
  size_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;

  *a1 = *a2;
  v5 = ((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8;
  v6 = ((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)v6 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)v5 = *(_OWORD *)v6;
  }
  else
  {
    v7 = *(_QWORD *)(v6 + 8);
    *(_QWORD *)v5 = *(_QWORD *)v6;
    *(_QWORD *)(v5 + 8) = v7;
  }
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (v5 + v9 + 16) & ~v9;
  v11 = (v6 + v9 + 16) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v8 + 32))(v10, v11);
  v12 = *(_QWORD *)(v8 + 64);
  v13 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v14 = *(unsigned __int8 *)(v13 + 80);
  v15 = v12 + v14;
  v16 = (v15 + v10) & ~v14;
  v17 = (v15 + v11) & ~v14;
  (*(void (**)(uint64_t, uint64_t))(v13 + 32))(v16, v17);
  v18 = *(_QWORD *)(v13 + 64);
  v19 = type metadata accessor for ColorScheme(0);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = *(_DWORD *)(v20 + 80) & 0xF8 | 7;
  v22 = (_QWORD *)((v18 + v21 + v16) & ~v21);
  v23 = (_QWORD *)((v18 + v21 + v17) & ~v21);
  if (*(_QWORD *)(v20 + 64) <= 8uLL)
    v24 = 8;
  else
    v24 = *(_QWORD *)(v20 + 64);
  v25 = *((unsigned __int8 *)v23 + v24);
  if (v25 >= 2)
  {
    if (v24 <= 3)
      v26 = v24;
    else
      v26 = 4;
    __asm { BR              X13 }
  }
  if (v25 == 1)
  {
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v20 + 32))(v22, v23, v19);
    v27 = 1;
  }
  else
  {
    v27 = 0;
    *v22 = *v23;
  }
  *((_BYTE *)v22 + v24) = v27;
  v28 = v24 + 1;
  v29 = type metadata accessor for DataStack(0);
  v30 = *(_QWORD *)(v29 - 8);
  v31 = *(_DWORD *)(v30 + 80) & 0xF8 | 7;
  v32 = (_QWORD *)(((unint64_t)v22 + v28 + v31) & ~v31);
  v33 = (_QWORD *)(((unint64_t)v23 + v28 + v31) & ~v31);
  if (*(_QWORD *)(v30 + 64) <= 8uLL)
    v34 = 8;
  else
    v34 = *(_QWORD *)(v30 + 64);
  v35 = *((unsigned __int8 *)v33 + v34);
  if (v35 >= 2)
  {
    if (v34 <= 3)
      v36 = v34;
    else
      v36 = 4;
    __asm { BR              X13 }
  }
  if (v35 == 1)
  {
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v30 + 32))(v32, v33, v29);
    v37 = 1;
  }
  else
  {
    v37 = 0;
    *v32 = *v33;
  }
  *((_BYTE *)v32 + v34) = v37;
  v38 = v34 + 1;
  v39 = type metadata accessor for OpaqueMetricsFieldsContext(0);
  v40 = *(_QWORD *)(v39 - 8);
  v41 = *(_DWORD *)(v40 + 80) & 0xF8 | 7;
  v42 = (_QWORD *)(((unint64_t)v32 + v38 + v41) & ~v41);
  v43 = (_QWORD *)(((unint64_t)v33 + v38 + v41) & ~v41);
  if (*(_QWORD *)(v40 + 64) <= 8uLL)
    v44 = 8;
  else
    v44 = *(_QWORD *)(v40 + 64);
  v45 = *((unsigned __int8 *)v43 + v44);
  if (v45 >= 2)
  {
    if (v44 <= 3)
      v46 = v44;
    else
      v46 = 4;
    __asm { BR              X13 }
  }
  if (v45 == 1)
  {
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v40 + 32))(v42, v43, v39);
    v47 = 1;
  }
  else
  {
    v47 = 0;
    *v42 = *v43;
  }
  *((_BYTE *)v42 + v44) = v47;
  v48 = (char *)v42 + v44 + 1;
  v49 = (char *)v43 + v44 + 1;
  v50 = (_OWORD *)((unint64_t)(v48 + 7) & 0xFFFFFFFFFFFFFFF8);
  v51 = (__int128 *)((unint64_t)(v49 + 7) & 0xFFFFFFFFFFFFFFF8);
  v52 = *v51;
  v53 = v51[1];
  *(_OWORD *)((char *)v50 + 25) = *(__int128 *)((char *)v51 + 25);
  *v50 = v52;
  v50[1] = v53;
  v54 = (unint64_t)(v48 + 55) & 0xFFFFFFFFFFFFFFF8;
  v55 = (unint64_t)(v49 + 55) & 0xFFFFFFFFFFFFFFF8;
  v56 = *(_QWORD *)v55;
  *(_BYTE *)(v54 + 8) = *(_BYTE *)(v55 + 8);
  *(_QWORD *)v54 = v56;
  v57 = type metadata accessor for Date(0);
  v58 = *(_QWORD *)(v57 - 8);
  v59 = *(_DWORD *)(v58 + 80) & 0xF8;
  v60 = v59 + 16;
  v61 = v59 + 16 + v54;
  v62 = ~v59 & 0xFFFFFFFFFFFFFFF8;
  v63 = v61 & v62;
  v64 = (v60 + v55) & v62;
  if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v58 + 48))(v64, 1, v57))
  {
    v65 = *(_DWORD *)(v58 + 84);
    v66 = *(_QWORD *)(v58 + 64);
    if (v65)
      v67 = v66;
    else
      v67 = v66 + 1;
    memcpy((void *)v63, (const void *)v64, v67);
  }
  else
  {
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v58 + 32))(v63, v64, v57);
    (*(void (**)(unint64_t, _QWORD, uint64_t, uint64_t))(v58 + 56))(v63, 0, 1, v57);
    v65 = *(_DWORD *)(v58 + 84);
    v66 = *(_QWORD *)(v58 + 64);
  }
  if (v65)
    v68 = v66;
  else
    v68 = v66 + 1;
  *(_QWORD *)(((v63 | 7) + v68) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((v64 | 7) + v68) & 0xFFFFFFFFFFFFF8);
  v69 = (v68 + 7) & 0xFFFFFFFFFFFFFFF8;
  v70 = type metadata accessor for Logger(0);
  v71 = *(_QWORD *)(v70 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v71 + 32))((v69 + *(unsigned __int8 *)(v71 + 80) + 8 + v63) & ~(unint64_t)*(unsigned __int8 *)(v71 + 80), (v69 + *(unsigned __int8 *)(v71 + 80) + 8 + v64) & ~(unint64_t)*(unsigned __int8 *)(v71 + 80), v70);
  return a1;
}

_QWORD *sub_66A60(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  _QWORD *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  __n128 v36;
  unsigned int v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  __n128 v50;
  unsigned int v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v62;
  uint64_t v63;
  __n128 v64;
  unsigned int v65;
  uint64_t v66;
  char v67;
  char *v68;
  char *v69;
  _OWORD *v70;
  _OWORD *v71;
  __int128 v72;
  __int128 v73;
  unint64_t v74;
  unint64_t v75;
  char v76;
  void *v77;
  char v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t (*v87)(unint64_t, uint64_t, uint64_t);
  int v88;
  int v89;
  size_t v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;

  v6 = a2[1];
  v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  v9 = (_QWORD *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
  v10 = (unint64_t *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
  v11 = *v10;
  if (*v9 < 0xFFFFFFFFuLL)
  {
    if (v11 >= 0xFFFFFFFF)
    {
      v14 = v10[1];
      *v9 = v11;
      v9[1] = v14;
      goto LABEL_8;
    }
  }
  else
  {
    if (v11 >= 0xFFFFFFFF)
    {
      v12 = v10[1];
      v13 = v9[1];
      *v9 = v11;
      v9[1] = v12;
      v8 = swift_release(v13);
      goto LABEL_8;
    }
    swift_release(v9[1]);
  }
  v8 = *(__n128 *)v10;
  *(_OWORD *)v9 = *(_OWORD *)v10;
LABEL_8:
  v15 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v16 = *(unsigned __int8 *)(v15 + 80);
  v17 = (char *)v10 + v16;
  v18 = ((unint64_t)v9 + v16 + 16) & ~v16;
  v19 = (unint64_t)(v17 + 16) & ~v16;
  (*(void (**)(uint64_t, uint64_t, __n128))(v15 + 40))(v18, v19, v8);
  v20 = *(_QWORD *)(v15 + 64);
  v21 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v22 = *(unsigned __int8 *)(v21 + 80);
  v23 = v20 + v22;
  v24 = (v23 + v18) & ~v22;
  v25 = (v23 + v19) & ~v22;
  (*(void (**)(uint64_t, uint64_t))(v21 + 40))(v24, v25);
  v26 = *(_QWORD *)(v21 + 64);
  v27 = type metadata accessor for ColorScheme(0);
  v28 = *(_QWORD *)(v27 - 8);
  v29 = *(_DWORD *)(v28 + 80) & 0xF8 | 7;
  v30 = (_QWORD *)((v26 + v29 + v24) & ~v29);
  v31 = (_QWORD *)((v26 + v29 + v25) & ~v29);
  if (*(_QWORD *)(v28 + 64) <= 8uLL)
    v32 = 8;
  else
    v32 = *(_QWORD *)(v28 + 64);
  if (v30 != v31)
  {
    v33 = v27;
    v34 = *((unsigned __int8 *)v30 + v32);
    if (v34 >= 2)
    {
      if (v32 <= 3)
        v35 = v32;
      else
        v35 = 4;
      __asm { BR              X12 }
    }
    if (v34 == 1)
      (*(void (**)(_QWORD *, uint64_t))(v28 + 8))(v30, v27);
    else
      v36 = swift_release(*v30);
    v37 = *((unsigned __int8 *)v31 + v32);
    if (v37 >= 2)
    {
      if (v32 <= 3)
        v38 = v32;
      else
        v38 = 4;
      __asm { BR              X12 }
    }
    if (v37 == 1)
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t, __n128))(v28 + 32))(v30, v31, v33, v36);
      v39 = 1;
    }
    else
    {
      v39 = 0;
      *v30 = *v31;
    }
    *((_BYTE *)v30 + v32) = v39;
  }
  v40 = type metadata accessor for DataStack(0);
  v41 = *(_QWORD *)(v40 - 8);
  v42 = *(_DWORD *)(v41 + 80) & 0xF8 | 7;
  v43 = v32 + v42 + 1;
  v44 = (_QWORD *)(((unint64_t)v30 + v43) & ~v42);
  v45 = (_QWORD *)(((unint64_t)v31 + v43) & ~v42);
  if (*(_QWORD *)(v41 + 64) <= 8uLL)
    v46 = 8;
  else
    v46 = *(_QWORD *)(v41 + 64);
  if (v44 != v45)
  {
    v47 = v40;
    v48 = *((unsigned __int8 *)v44 + v46);
    if (v48 >= 2)
    {
      if (v46 <= 3)
        v49 = v46;
      else
        v49 = 4;
      __asm { BR              X12 }
    }
    if (v48 == 1)
      (*(void (**)(_QWORD *, uint64_t))(v41 + 8))(v44, v40);
    else
      v50 = swift_release(*v44);
    v51 = *((unsigned __int8 *)v45 + v46);
    if (v51 >= 2)
    {
      if (v46 <= 3)
        v52 = v46;
      else
        v52 = 4;
      __asm { BR              X12 }
    }
    if (v51 == 1)
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t, __n128))(v41 + 32))(v44, v45, v47, v50);
      v53 = 1;
    }
    else
    {
      v53 = 0;
      *v44 = *v45;
    }
    *((_BYTE *)v44 + v46) = v53;
  }
  v54 = type metadata accessor for OpaqueMetricsFieldsContext(0);
  v55 = *(_QWORD *)(v54 - 8);
  v56 = *(_DWORD *)(v55 + 80) & 0xF8 | 7;
  v57 = v46 + v56 + 1;
  v58 = (_QWORD *)(((unint64_t)v44 + v57) & ~v56);
  v59 = (_QWORD *)(((unint64_t)v45 + v57) & ~v56);
  if (*(_QWORD *)(v55 + 64) <= 8uLL)
    v60 = 8;
  else
    v60 = *(_QWORD *)(v55 + 64);
  if (v58 != v59)
  {
    v61 = v54;
    v62 = *((unsigned __int8 *)v58 + v60);
    if (v62 >= 2)
    {
      if (v60 <= 3)
        v63 = v60;
      else
        v63 = 4;
      __asm { BR              X12 }
    }
    if (v62 == 1)
      (*(void (**)(_QWORD *, uint64_t))(v55 + 8))(v58, v54);
    else
      v64 = swift_release(*v58);
    v65 = *((unsigned __int8 *)v59 + v60);
    if (v65 >= 2)
    {
      if (v60 <= 3)
        v66 = v60;
      else
        v66 = 4;
      __asm { BR              X12 }
    }
    if (v65 == 1)
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t, __n128))(v55 + 32))(v58, v59, v61, v64);
      v67 = 1;
    }
    else
    {
      v67 = 0;
      *v58 = *v59;
    }
    *((_BYTE *)v58 + v60) = v67;
  }
  v68 = (char *)v58 + v60 + 1;
  v69 = (char *)v59 + v60 + 1;
  v70 = (_OWORD *)((unint64_t)(v68 + 7) & 0xFFFFFFFFFFFFFFF8);
  v71 = (_OWORD *)((unint64_t)(v69 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v70 != v71)
  {
    sub_B414((unint64_t)(v68 + 7) & 0xFFFFFFFFFFFFFFF8, &qword_25FAE8);
    v72 = *(_OWORD *)((char *)v71 + 25);
    v73 = v71[1];
    *v70 = *v71;
    v70[1] = v73;
    *(_OWORD *)((char *)v70 + 25) = v72;
  }
  v74 = (unint64_t)(v68 + 55) & 0xFFFFFFFFFFFFFFF8;
  v75 = (unint64_t)(v69 + 55) & 0xFFFFFFFFFFFFFFF8;
  v76 = *(_BYTE *)(v75 + 8);
  v77 = *(void **)v74;
  v78 = *(_BYTE *)(v74 + 8);
  *(_QWORD *)v74 = *(_QWORD *)v75;
  *(_BYTE *)(v74 + 8) = v76;
  sub_19034(v77, v78);
  v79 = type metadata accessor for Date(0);
  v80 = *(_QWORD *)(v79 - 8);
  v81 = *(_DWORD *)(v80 + 80) & 0xF8;
  v82 = v81 + 16;
  v83 = v81 + 16 + v74;
  v84 = ~v81 & 0xFFFFFFFFFFFFFFF8;
  v85 = v83 & v84;
  v86 = (v82 + v75) & v84;
  v87 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v80 + 48);
  v88 = v87(v83 & v84, 1, v79);
  v89 = v87(v86, 1, v79);
  if (v88)
  {
    if (!v89)
    {
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v80 + 32))(v85, v86, v79);
      (*(void (**)(unint64_t, _QWORD, uint64_t, uint64_t))(v80 + 56))(v85, 0, 1, v79);
      goto LABEL_82;
    }
  }
  else
  {
    if (!v89)
    {
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v80 + 40))(v85, v86, v79);
      goto LABEL_82;
    }
    (*(void (**)(unint64_t, uint64_t))(v80 + 8))(v85, v79);
  }
  if (*(_DWORD *)(v80 + 84))
    v90 = *(_QWORD *)(v80 + 64);
  else
    v90 = *(_QWORD *)(v80 + 64) + 1;
  memcpy((void *)v85, (const void *)v86, v90);
LABEL_82:
  if (*(_DWORD *)(v80 + 84))
    v91 = *(_QWORD *)(v80 + 64);
  else
    v91 = *(_QWORD *)(v80 + 64) + 1;
  v92 = (uint64_t *)(((v85 | 7) + v91) & 0xFFFFFFFFFFFFFFF8);
  v93 = *v92;
  *v92 = *(_QWORD *)(((v86 | 7) + v91) & 0xFFFFFFFFFFFFF8);
  swift_release(v93);
  v94 = type metadata accessor for Logger(0);
  v95 = *(_QWORD *)(v94 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v95 + 40))((((v91 + 7) & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(v95 + 80) + 8 + v85) & ~(unint64_t)*(unsigned __int8 *)(v95 + 80), (((v91 + 7) & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(v95 + 80) + 8 + v86) & ~(unint64_t)*(unsigned __int8 *)(v95 + 80), v94);
  return a1;
}

uint64_t sub_67278(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  BOOL v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char v45;
  int v46;
  unsigned int v48;
  int v49;
  int v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unsigned int v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  unsigned int v61;
  unint64_t v62;
  unint64_t v63;

  v58 = *(_QWORD *)(a3 + 24);
  v59 = *(_QWORD *)(a3 + 16);
  v4 = *(_QWORD *)(v59 - 8);
  v5 = *(_QWORD *)(v58 - 8);
  v60 = *(_DWORD *)(v5 + 84);
  v61 = *(_DWORD *)(v4 + 84);
  if (v61 <= v60)
    v6 = *(_DWORD *)(v5 + 84);
  else
    v6 = *(_DWORD *)(v4 + 84);
  v7 = *(_QWORD *)(type metadata accessor for ColorScheme(0) - 8);
  v8 = *(_QWORD *)(v7 + 64);
  if (v8 <= 8)
    v8 = 8;
  v63 = v8;
  v9 = *(_QWORD *)(type metadata accessor for DataStack(0) - 8);
  v10 = *(_QWORD *)(v9 + 64);
  if (v10 <= 8)
    v10 = 8;
  v62 = v10;
  v11 = *(_QWORD *)(type metadata accessor for OpaqueMetricsFieldsContext(0) - 8);
  if (*(_QWORD *)(v11 + 64) <= 8uLL)
    v12 = 8;
  else
    v12 = *(_QWORD *)(v11 + 64);
  v56 = type metadata accessor for Date(0);
  v13 = *(_QWORD *)(v56 - 8);
  v14 = *(unsigned int *)(v13 + 84);
  v15 = v14 - 1;
  if (!(_DWORD)v14)
    v15 = 0;
  if (v15 <= 0x7FFFFFFE)
    v15 = 2147483646;
  v57 = v15;
  if (v6 <= v15)
    v6 = v15;
  v16 = type metadata accessor for Logger(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(unsigned int *)(v17 + 84);
  if (v6 <= v18)
    v19 = *(_DWORD *)(v17 + 84);
  else
    v19 = v6;
  if (v19 <= 0x7FFFFFFF)
    v20 = 0x7FFFFFFF;
  else
    v20 = v19;
  if ((_DWORD)v14)
    v21 = 7;
  else
    v21 = 8;
  if (!a2)
    return 0;
  v22 = v16;
  v23 = v14;
  v24 = *(unsigned __int8 *)(v4 + 80);
  v25 = *(_QWORD *)(v4 + 64);
  v26 = *(unsigned __int8 *)(v5 + 80);
  v27 = *(_QWORD *)(v5 + 64);
  v28 = *(_DWORD *)(v7 + 80) & 0xF8 | 7;
  v29 = *(_DWORD *)(v9 + 80) & 0xF8 | 7;
  v30 = v63 + v29 + 1;
  v31 = *(_DWORD *)(v11 + 80) & 0xF8 | 7;
  v32 = v62 + v31 + 1;
  v33 = v12 + 56;
  v34 = *(_DWORD *)(v13 + 80) & 0xF8;
  v35 = ~v34 & 0xFFFFFFFFFFFFFFF8;
  v36 = v34 + 16;
  v37 = (v21 + *(_QWORD *)(v13 + 64)) & 0xFFFFFFFFFFFFFFF8;
  v38 = *(unsigned __int8 *)(v17 + 80);
  v39 = v37 + v38 + 8;
  v41 = a2 - v20;
  v40 = a2 > v20;
  v42 = v4;
  v43 = v13;
  if (!v40)
    goto LABEL_47;
  v44 = ((v39
        + ((v36
          + ((v33 + ((v32 + ((v30 + ((v27 + v28 + ((v25 + v26 + ((v24 + 32) & ~v24)) & ~v26)) & ~v28)) & ~v29)) & ~v31)) & 0xFFFFFFFFFFFFFFF8)) & v35)) & ~v38)
      + *(_QWORD *)(v17 + 64);
  v45 = 8 * v44;
  if (v44 <= 3)
  {
    v48 = ((v41 + ~(-1 << v45)) >> v45) + 1;
    if (HIWORD(v48))
    {
      v46 = *(_DWORD *)(a1 + v44);
      if (!v46)
        goto LABEL_47;
      goto LABEL_38;
    }
    if (v48 > 0xFF)
    {
      v46 = *(unsigned __int16 *)(a1 + v44);
      if (!*(_WORD *)(a1 + v44))
        goto LABEL_47;
      goto LABEL_38;
    }
    if (v48 < 2)
    {
LABEL_47:
      if ((v19 & 0x80000000) != 0)
      {
        v52 = (((a1 + 23) & 0xFFFFFFFFFFFFFFF8) + v24 + 16) & ~v24;
        if (v61 == v20)
        {
          return (*(uint64_t (**)(unint64_t, _QWORD, uint64_t))(v42 + 48))(v52, v61, v59);
        }
        else
        {
          v53 = (v52 + v25 + v26) & ~v26;
          if (v60 == v20)
          {
            return (*(uint64_t (**)(unint64_t, _QWORD, uint64_t))(v5 + 48))(v53, v60, v58);
          }
          else
          {
            v54 = (v36 + ((v33 + ((v32 + ((v30 + ((v53 + v27 + v28) & ~v28)) & ~v29)) & ~v31)) & 0xFFFFFFFFFFFFFFF8)) & v35;
            if (v57 == v20)
            {
              v55 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v43 + 48))(v54, v23, v56);
              if (v55 >= 2)
                return v55 - 1;
              else
                return 0;
            }
            else
            {
              return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v17 + 48))((v39 + v54) & ~v38, v18, v22);
            }
          }
        }
      }
      else
      {
        v51 = *(_QWORD *)(a1 + 8);
        if (v51 >= 0xFFFFFFFF)
          LODWORD(v51) = -1;
        return (v51 + 1);
      }
    }
  }
  v46 = *(unsigned __int8 *)(a1 + v44);
  if (!*(_BYTE *)(a1 + v44))
    goto LABEL_47;
LABEL_38:
  v49 = (v46 - 1) << v45;
  if (v44 > 3)
    v49 = 0;
  if ((_DWORD)v44)
  {
    if (v44 <= 3)
      v50 = v44;
    else
      v50 = 4;
    __asm { BR              X12 }
  }
  return v20 + v49 + 1;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> sub_67670(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  size_t v25;
  int v26;
  unsigned int v27;
  int v28;
  int v29;
  unint64_t v30;
  _BYTE *v32;
  int v33;

  v4 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v4 + 84) <= *(_DWORD *)(v5 + 84))
    v6 = *(_DWORD *)(v5 + 84);
  else
    v6 = *(_DWORD *)(v4 + 84);
  v7 = *(_QWORD *)(type metadata accessor for ColorScheme(0) - 8);
  v8 = *(_QWORD *)(v7 + 64);
  if (v8 <= 8)
    v8 = 8;
  v30 = v8;
  v9 = *(_QWORD *)(type metadata accessor for DataStack(0) - 8);
  if (*(_QWORD *)(v9 + 64) <= 8uLL)
    v10 = 8;
  else
    v10 = *(_QWORD *)(v9 + 64);
  v11 = *(_QWORD *)(type metadata accessor for OpaqueMetricsFieldsContext(0) - 8);
  if (*(_QWORD *)(v11 + 64) <= 8uLL)
    v12 = 8;
  else
    v12 = *(_QWORD *)(v11 + 64);
  v13 = *(_QWORD *)(type metadata accessor for Date(0) - 8);
  v14 = *(_DWORD *)(v13 + 84);
  if (v14)
    v15 = v14 - 1;
  else
    v15 = 0;
  if (v15 <= 0x7FFFFFFE)
    v16 = 2147483646;
  else
    v16 = v15;
  if (v6 <= v16)
    v6 = v16;
  v33 = 0;
  v17 = *(_QWORD *)(type metadata accessor for Logger(0) - 8);
  if (v6 <= *(_DWORD *)(v17 + 84))
    v18 = *(_DWORD *)(v17 + 84);
  else
    v18 = v6;
  if (v18 <= 0x7FFFFFFF)
    v19 = 0x7FFFFFFF;
  else
    v19 = v18;
  v24 = *(_QWORD *)(v13 + 64);
  if (!v14)
    ++v24;
  v21 = *(_DWORD *)(v9 + 80) & 0xF8 | 7;
  v23 = *(_DWORD *)(v13 + 80) & 0xF8;
  v20 = *(_DWORD *)(v7 + 80) & 0xF8 | 7;
  v22 = *(_DWORD *)(v11 + 80) & 0xF8 | 7;
  v25 = ((((v24 + 7) & 0xFFFFFFFFFFFFFFF8)
        + *(unsigned __int8 *)(v17 + 80)
        + 8
        + ((v23
          + 16
          + ((v12
            + 56
            + ((v10
              + v22
              + 1
              + ((v30
                + v21
                + 1
                + ((*(_QWORD *)(v5 + 64)
                  + v20
                  + ((*(_QWORD *)(v4 + 64)
                    + *(unsigned __int8 *)(v5 + 80)
                    + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))) & ~v20)) & ~v21)) & ~v22)) & 0xFFFFFFFFFFFFFFF8)) & ~v23 & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80))
      + *(_QWORD *)(v17 + 64);
  if (a3 > v19)
  {
    if (v25 <= 3)
    {
      v27 = ((a3 - v19 + ~(-1 << (8 * v25))) >> (8 * v25)) + 1;
      if (HIWORD(v27))
      {
        v26 = 4;
      }
      else
      {
        v26 = v27 > 1;
        if (v27 >= 0x100)
          v26 = 2;
      }
    }
    else
    {
      v26 = 1;
    }
    v33 = v26;
  }
  if (v19 < a2)
  {
    v28 = ~v19 + a2;
    if (v25 < 4)
    {
      if ((_DWORD)v25)
      {
        v29 = v28 & ~(-1 << (8 * v25));
        bzero(v32, v25);
        if ((_DWORD)v25 == 3)
        {
          *(_WORD *)v32 = v29;
          v32[2] = BYTE2(v29);
        }
        else if ((_DWORD)v25 == 2)
        {
          *(_WORD *)v32 = v29;
        }
        else
        {
          *v32 = v29;
        }
      }
    }
    else
    {
      bzero(v32, v25);
      *(_DWORD *)v32 = v28;
    }
    __asm { BR              X10 }
  }
}

void sub_67A48()
{
  char v0;
  uint64_t v1;
  uint64_t v2;

  *(_BYTE *)(v1 + v2) = v0;
}

void sub_67A50()
{
  __int16 v0;
  uint64_t v1;
  uint64_t v2;

  *(_WORD *)(v1 + v2) = v0;
}

void sub_67B18()
{
  char v0;
  _BYTE *v1;

  *v1 = v0;
}

void sub_67B70()
{
  __int16 v0;
  _WORD *v1;

  *v1 = v0;
}

void sub_67B78()
{
  int v0;
  uint64_t v1;

  *(_WORD *)v1 = v0;
  *(_BYTE *)(v1 + 2) = BYTE2(v0);
}

void sub_67B88()
{
  int v0;
  _DWORD *v1;

  *v1 = v0;
}

void sub_67B94(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_261800)
  {
    v2 = sub_7EF8(&qword_261768);
    v3 = type metadata accessor for State(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_261800);
  }
}

uint64_t sub_67BEC(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t WitnessTable;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;

  v1 = *a1;
  v2 = a1[1];
  v3 = a1[2];
  v4 = a1[3];
  v5 = sub_7EF8(&qword_25EE58);
  v6 = type metadata accessor for ModifiedContent(255, v1, v5);
  v14 = v3;
  v15 = sub_64664();
  v10 = v6;
  v11 = v2;
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v6);
  v13 = v4;
  v7 = type metadata accessor for Menu(255, &v10);
  v8 = swift_getWitnessTable(&protocol conformance descriptor for Menu<A, B>, v7);
  v10 = v7;
  v11 = v8;
  return swift_getOpaqueTypeConformance2(&v10, &opaque type descriptor for <<opaque return type of View.systemColorScheme()>>, 1);
}

uint64_t sub_67C98(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_5440(&qword_261768);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

__n128 sub_67CE0@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t KeyPath;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  __n128 result;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;

  KeyPath = swift_getKeyPath(&unk_1E4E48);
  type metadata accessor for CGSize(0);
  v10 = v9;
  v17 = 0;
  v18 = 0;
  State.init(wrappedValue:)(&v19, &v17, v9);
  v11 = v19;
  v12 = v20;
  v17 = 0;
  v13 = sub_5440(&qword_25E158);
  State.init(wrappedValue:)(&v19, &v17, v13);
  v14 = v19;
  v17 = 0;
  v18 = 0;
  State.init(wrappedValue:)(&v19, &v17, v10);
  v15 = v20;
  result = v19;
  *(_QWORD *)a4 = a2;
  *(_QWORD *)(a4 + 8) = a1;
  *(_BYTE *)(a4 + 16) = a3;
  *(_QWORD *)(a4 + 24) = KeyPath;
  *(_BYTE *)(a4 + 32) = 0;
  *(__n128 *)(a4 + 40) = v11;
  *(_QWORD *)(a4 + 56) = v12;
  *(__n128 *)(a4 + 64) = v14;
  *(__n128 *)(a4 + 80) = result;
  *(_QWORD *)(a4 + 96) = v15;
  return result;
}

uint64_t sub_67DD8()
{
  uint64_t v0;
  uint64_t v1;
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  char v9;
  double v10;
  __int16 v12;
  char v13;
  _QWORD v14[2];
  char v15;
  _QWORD v16[2];
  unsigned __int8 v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD v20[4];
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  _OWORD v28[10];
  uint64_t v29;
  unsigned __int8 v30;

  sub_B3D0(v0, (uint64_t)v28, &qword_261850);
  if (v30 != 255)
  {
    if ((v30 & 1) != 0)
      return *(_QWORD *)&v28[0];
    v25 = v28[8];
    v26 = v28[9];
    v27 = v29;
    v21 = v28[4];
    v22 = v28[5];
    v23 = v28[6];
    v24 = v28[7];
    v20[0] = v28[0];
    v20[1] = v28[1];
    v20[2] = v28[2];
    v20[3] = v28[3];
    CoverViewModel.source.getter((uint64_t)v16);
    v2 = v17;
    if (v17 != 255)
    {
      v4 = v16[0];
      v3 = v16[1];
      sub_315E0((uint64_t)v16);
      v5 = v18;
      v6 = v19;
      sub_5480(v16, v18);
      v14[0] = v4;
      v14[1] = v3;
      v15 = v2 & 1;
      v7 = v21;
      v8 = *(_QWORD *)(v0 + 240);
      v9 = *(_BYTE *)(v0 + 248);
      sub_F9E4(v8, v9);
      v10 = sub_30784(v8, v9);
      sub_BE0C(v8, v9);
      v13 = -2;
      v12 = -772;
      v1 = (*(uint64_t (**)(_QWORD *, __int16 *, uint64_t, uint64_t, double, double, double))(v6 + 16))(v14, &v12, v5, v6, *(double *)&v7, *((double *)&v7 + 1), v10);
      sub_22488((uint64_t)v20);
      sub_224BC(v4, v3, v2);
      _s7BooksUI13AnyPagedFrameVwxx_0(v16);
      return v1;
    }
    sub_22488((uint64_t)v20);
  }
  return 0;
}

uint64_t sub_67F78@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v27[4];
  char v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;

  v4 = _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0();
  v23 = v5;
  v24 = v4;
  v22 = a2 + *(int *)(sub_5440(&qword_261860) + 36);
  v6 = sub_67DD8();
  v7 = *(_QWORD *)(v2 + 176);
  v8 = *(_BYTE *)(v2 + 184);
  swift_retain(v7);
  sub_67CE0(v6, v7, v8, (uint64_t)v27);
  v9 = v27[0];
  v10 = v27[1];
  v11 = v27[3];
  v12 = v28;
  v13 = v29;
  v14 = v30;
  v15 = v31;
  v21 = v32;
  v16 = sub_5440(&qword_25EE98);
  v17 = sub_7FD8(&qword_25EE90, &qword_25EE98, (uint64_t)&protocol conformance descriptor for BackdropView<A>);
  View.accessibilityHidden(_:)(1, v16, v17);
  swift_release(v9);
  swift_unknownObjectRelease(v10);
  sub_BE0C(v11, v12);
  swift_release(v13);

  swift_release(v15);
  swift_release(v21);
  v18 = (uint64_t *)(v22 + *(int *)(sub_5440(&qword_261868) + 36));
  *v18 = v24;
  v18[1] = v23;
  v19 = sub_5440(&qword_261870);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(a2, a1, v19);
}

uint64_t View.mediaBackdrop(for:placeholderColor:useSnapshot:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  char v21;
  _OWORD v22[6];
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t KeyPath;
  char v31;
  uint64_t v32;
  char v33;

  sub_B3D0(a1, (uint64_t)v22, &qword_260AF0);
  if (*((_QWORD *)&v23 + 1))
  {
    v18 = v25;
    v19 = v26;
    v20 = v27;
    v14 = v22[4];
    v15 = v22[5];
    v16 = v23;
    v17 = v24;
    v10 = v22[0];
    v11 = v22[1];
    v12 = v22[2];
    v13 = v22[3];
    v21 = 0;
  }
  else
  {
    sub_B414((uint64_t)v22, &qword_260AF0);
    v10 = 0u;
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v15 = 0u;
    v16 = 0u;
    v17 = 0u;
    v18 = 0u;
    v19 = 0u;
    v20 = 0;
    v21 = -1;
  }
  sub_68278((uint64_t)&v10, (uint64_t)v22);
  v28 = a2;
  v29 = a3 & 1;
  KeyPath = swift_getKeyPath(&unk_1E4E20);
  v31 = 0;
  v32 = swift_getKeyPath(&unk_1E4E48);
  v33 = 0;
  swift_retain(a2);
  View.modifier<A>(_:)(v22, a4, &type metadata for MediaBackdropViewModifier, a5);
  return sub_683E8((uint64_t)v22);
}

{
  uint64_t v10;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  char v23;
  _BYTE v24[176];
  uint64_t v25;
  char v26;
  uint64_t KeyPath;
  char v28;
  uint64_t v29;
  char v30;

  if (a1)
  {
    v23 = 1;
    v10 = a1;
  }
  else
  {
    v10 = 0;
    v22 = 0u;
    v21 = 0u;
    v23 = -1;
    v20 = 0u;
    v19 = 0u;
    v18 = 0u;
    v17 = 0u;
    v16 = 0u;
    v15 = 0u;
    v14 = 0u;
    v13 = 0u;
  }
  v12 = v10;
  sub_68278((uint64_t)&v12, (uint64_t)v24);
  v25 = a2;
  v26 = a3 & 1;
  KeyPath = swift_getKeyPath(&unk_1E4E20);
  v28 = 0;
  v29 = swift_getKeyPath(&unk_1E4E48);
  v30 = 0;
  swift_unknownObjectRetain(a1);
  swift_retain(a2);
  View.modifier<A>(_:)(v24, a4, &type metadata for MediaBackdropViewModifier, a5);
  return sub_683E8((uint64_t)v24);
}

uint64_t sub_68278(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_5440(&qword_261850);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_683E8(uint64_t a1)
{
  destroy for MediaBackdropViewModifier(a1);
  return a1;
}

uint64_t sub_68414(_QWORD *a1)
{
  uint64_t v1;

  v1 = type metadata accessor for ModifiedContent(255, *a1, &type metadata for MediaBackdropViewModifier);
  sub_68468();
  return swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
}

unint64_t sub_68468()
{
  unint64_t result;

  result = qword_261858;
  if (!qword_261858)
  {
    result = swift_getWitnessTable(&unk_1E4ED8, &type metadata for MediaBackdropViewModifier);
    atomic_store(result, (unint64_t *)&qword_261858);
  }
  return result;
}

uint64_t destroy for MediaBackdropViewModifier(uint64_t a1)
{
  int v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = *(unsigned __int8 *)(a1 + 168);
  if (v2 != 255)
  {
    if ((v2 & 1) != 0)
    {
      swift_unknownObjectRelease(*(_QWORD *)a1);
    }
    else
    {
      if (!*(_BYTE *)(a1 + 56))
        _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)a1);
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 104));
      v3 = *(_QWORD *)(a1 + 120);
      if (v3)
      {
        swift_bridgeObjectRelease(v3);
        swift_bridgeObjectRelease(*(_QWORD *)(a1 + 136));
        swift_bridgeObjectRelease(*(_QWORD *)(a1 + 160));
      }
    }
  }
  swift_release(*(_QWORD *)(a1 + 176));
  v4 = (_QWORD *)(a1 + 192);
  if ((*(_BYTE *)(a1 + 232) & 1) != 0)
    _s7BooksUI13AnyPagedFrameVwxx_0(v4);
  else
    swift_release(*v4);
  return sub_BE0C(*(_QWORD *)(a1 + 240), *(_BYTE *)(a1 + 248));
}

uint64_t initializeWithCopy for MediaBackdropViewModifier(uint64_t a1, uint64_t *a2)
{
  int v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t *v19;
  char v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  char v24;

  v4 = *((unsigned __int8 *)a2 + 168);
  if (v4 == 255)
  {
    v5 = *((_OWORD *)a2 + 9);
    *(_OWORD *)(a1 + 128) = *((_OWORD *)a2 + 8);
    *(_OWORD *)(a1 + 144) = v5;
    *(_OWORD *)(a1 + 153) = *(_OWORD *)((char *)a2 + 153);
    v6 = *((_OWORD *)a2 + 5);
    *(_OWORD *)(a1 + 64) = *((_OWORD *)a2 + 4);
    *(_OWORD *)(a1 + 80) = v6;
    v7 = *((_OWORD *)a2 + 7);
    *(_OWORD *)(a1 + 96) = *((_OWORD *)a2 + 6);
    *(_OWORD *)(a1 + 112) = v7;
    v8 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v8;
    v9 = *((_OWORD *)a2 + 3);
    *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
    *(_OWORD *)(a1 + 48) = v9;
  }
  else if ((v4 & 1) != 0)
  {
    v11 = *a2;
    *(_QWORD *)a1 = *a2;
    *(_BYTE *)(a1 + 168) = 1;
    swift_unknownObjectRetain(v11);
  }
  else
  {
    if (*((_BYTE *)a2 + 56))
    {
      v10 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v10;
      *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
      *(_OWORD *)(a1 + 41) = *(_OWORD *)((char *)a2 + 41);
    }
    else
    {
      v12 = *(_OWORD *)(a2 + 3);
      *(_OWORD *)(a1 + 24) = v12;
      (**(void (***)(uint64_t, uint64_t *))(v12 - 8))(a1, a2);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 5);
      *(_BYTE *)(a1 + 56) = 0;
    }
    *(_OWORD *)(a1 + 64) = *((_OWORD *)a2 + 4);
    *(_BYTE *)(a1 + 80) = *((_BYTE *)a2 + 80);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 11);
    v13 = a2[13];
    *(_QWORD *)(a1 + 104) = v13;
    v14 = a2[15];
    swift_bridgeObjectRetain(v13);
    if (v14)
    {
      *(_QWORD *)(a1 + 112) = a2[14];
      *(_QWORD *)(a1 + 120) = v14;
      v15 = a2[17];
      *(_QWORD *)(a1 + 128) = a2[16];
      *(_QWORD *)(a1 + 136) = v15;
      *(_BYTE *)(a1 + 144) = *((_BYTE *)a2 + 144);
      v16 = a2[20];
      *(_QWORD *)(a1 + 152) = a2[19];
      *(_QWORD *)(a1 + 160) = v16;
      swift_bridgeObjectRetain(v14);
      swift_bridgeObjectRetain(v15);
      swift_bridgeObjectRetain(v16);
    }
    else
    {
      v17 = *((_OWORD *)a2 + 8);
      *(_OWORD *)(a1 + 112) = *((_OWORD *)a2 + 7);
      *(_OWORD *)(a1 + 128) = v17;
      *(_OWORD *)(a1 + 144) = *((_OWORD *)a2 + 9);
      *(_QWORD *)(a1 + 160) = a2[20];
    }
    *(_BYTE *)(a1 + 168) = 0;
  }
  v18 = a2[22];
  *(_QWORD *)(a1 + 176) = v18;
  *(_BYTE *)(a1 + 184) = *((_BYTE *)a2 + 184);
  v19 = a2 + 24;
  v20 = *((_BYTE *)a2 + 232);
  swift_retain(v18);
  if ((v20 & 1) != 0)
  {
    v21 = *(_OWORD *)(a2 + 27);
    *(_OWORD *)(a1 + 216) = v21;
    (**(void (***)(uint64_t, uint64_t))(v21 - 8))(a1 + 192, (uint64_t)(a2 + 24));
  }
  else
  {
    v22 = *v19;
    *(_QWORD *)(a1 + 192) = *v19;
    swift_retain(v22);
  }
  *(_BYTE *)(a1 + 232) = v20;
  v23 = a2[30];
  v24 = *((_BYTE *)a2 + 248);
  sub_F9E4(v23, v24);
  *(_QWORD *)(a1 + 240) = v23;
  *(_BYTE *)(a1 + 248) = v24;
  return a1;
}

uint64_t assignWithCopy for MediaBackdropViewModifier(uint64_t a1, __int128 *a2)
{
  int v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  char v42;

  v4 = *((unsigned __int8 *)a2 + 168);
  if (*(unsigned __int8 *)(a1 + 168) == 255)
  {
    if (v4 == 255)
    {
      v13 = *a2;
      v14 = a2[2];
      *(_OWORD *)(a1 + 16) = a2[1];
      *(_OWORD *)(a1 + 32) = v14;
      *(_OWORD *)a1 = v13;
      v15 = a2[3];
      v16 = a2[4];
      v17 = a2[6];
      *(_OWORD *)(a1 + 80) = a2[5];
      *(_OWORD *)(a1 + 96) = v17;
      *(_OWORD *)(a1 + 48) = v15;
      *(_OWORD *)(a1 + 64) = v16;
      v18 = a2[7];
      v19 = a2[8];
      v20 = a2[9];
      *(_OWORD *)(a1 + 153) = *(__int128 *)((char *)a2 + 153);
      *(_OWORD *)(a1 + 128) = v19;
      *(_OWORD *)(a1 + 144) = v20;
      *(_OWORD *)(a1 + 112) = v18;
      goto LABEL_17;
    }
    if ((v4 & 1) != 0)
      goto LABEL_8;
    goto LABEL_10;
  }
  if (v4 == 255)
  {
    sub_689D0(a1);
    v6 = a2[1];
    v5 = a2[2];
    *(_OWORD *)a1 = *a2;
    *(_OWORD *)(a1 + 16) = v6;
    *(_OWORD *)(a1 + 32) = v5;
    v7 = a2[6];
    v9 = a2[3];
    v8 = a2[4];
    *(_OWORD *)(a1 + 80) = a2[5];
    *(_OWORD *)(a1 + 96) = v7;
    *(_OWORD *)(a1 + 48) = v9;
    *(_OWORD *)(a1 + 64) = v8;
    v11 = a2[8];
    v10 = a2[9];
    v12 = a2[7];
    *(_OWORD *)(a1 + 153) = *(__int128 *)((char *)a2 + 153);
    *(_OWORD *)(a1 + 128) = v11;
    *(_OWORD *)(a1 + 144) = v10;
    *(_OWORD *)(a1 + 112) = v12;
    goto LABEL_17;
  }
  if ((__int128 *)a1 != a2)
  {
    sub_689D0(a1);
    if ((*((_BYTE *)a2 + 168) & 1) != 0)
    {
LABEL_8:
      v21 = *(_QWORD *)a2;
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_BYTE *)(a1 + 168) = 1;
      swift_unknownObjectRetain(v21);
      goto LABEL_17;
    }
LABEL_10:
    if (*((_BYTE *)a2 + 56))
    {
      v22 = *a2;
      v23 = a2[1];
      v24 = a2[2];
      *(_OWORD *)(a1 + 41) = *(__int128 *)((char *)a2 + 41);
      *(_OWORD *)(a1 + 16) = v23;
      *(_OWORD *)(a1 + 32) = v24;
      *(_OWORD *)a1 = v22;
    }
    else
    {
      v25 = *((_QWORD *)a2 + 3);
      *(_QWORD *)(a1 + 24) = v25;
      *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
      (**(void (***)(uint64_t, __int128 *))(v25 - 8))(a1, a2);
      *(_OWORD *)(a1 + 40) = *(__int128 *)((char *)a2 + 40);
      *(_BYTE *)(a1 + 56) = 0;
    }
    *(_OWORD *)(a1 + 64) = a2[4];
    *(_BYTE *)(a1 + 80) = *((_BYTE *)a2 + 80);
    *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 11);
    *(_QWORD *)(a1 + 96) = *((_QWORD *)a2 + 12);
    v26 = *((_QWORD *)a2 + 13);
    *(_QWORD *)(a1 + 104) = v26;
    v27 = *((_QWORD *)a2 + 15);
    swift_bridgeObjectRetain(v26);
    if (v27)
    {
      *(_QWORD *)(a1 + 112) = *((_QWORD *)a2 + 14);
      v28 = *((_QWORD *)a2 + 15);
      *(_QWORD *)(a1 + 120) = v28;
      *(_QWORD *)(a1 + 128) = *((_QWORD *)a2 + 16);
      v29 = *((_QWORD *)a2 + 17);
      *(_QWORD *)(a1 + 136) = v29;
      *(_BYTE *)(a1 + 144) = *((_BYTE *)a2 + 144);
      *(_QWORD *)(a1 + 152) = *((_QWORD *)a2 + 19);
      v30 = *((_QWORD *)a2 + 20);
      *(_QWORD *)(a1 + 160) = v30;
      swift_bridgeObjectRetain(v28);
      swift_bridgeObjectRetain(v29);
      swift_bridgeObjectRetain(v30);
    }
    else
    {
      v31 = a2[7];
      v32 = a2[8];
      v33 = a2[9];
      *(_QWORD *)(a1 + 160) = *((_QWORD *)a2 + 20);
      *(_OWORD *)(a1 + 128) = v32;
      *(_OWORD *)(a1 + 144) = v33;
      *(_OWORD *)(a1 + 112) = v31;
    }
    *(_BYTE *)(a1 + 168) = 0;
  }
LABEL_17:
  v34 = *((_QWORD *)a2 + 22);
  v35 = *(_QWORD *)(a1 + 176);
  *(_QWORD *)(a1 + 176) = v34;
  swift_retain(v34);
  swift_release(v35);
  *(_BYTE *)(a1 + 184) = *((_BYTE *)a2 + 184);
  if ((__int128 *)a1 != a2)
  {
    v36 = (uint64_t *)(a2 + 12);
    sub_B414(a1 + 192, &qword_25EAE0);
    if ((*((_BYTE *)a2 + 232) & 1) != 0)
    {
      v37 = *((_QWORD *)a2 + 27);
      *(_QWORD *)(a1 + 216) = v37;
      *(_QWORD *)(a1 + 224) = *((_QWORD *)a2 + 28);
      (**(void (***)(uint64_t, uint64_t))(v37 - 8))(a1 + 192, (uint64_t)(a2 + 12));
      *(_BYTE *)(a1 + 232) = 1;
    }
    else
    {
      v38 = *v36;
      *(_QWORD *)(a1 + 192) = *v36;
      *(_BYTE *)(a1 + 232) = 0;
      swift_retain(v38);
    }
  }
  v39 = *((_QWORD *)a2 + 30);
  v40 = *((_BYTE *)a2 + 248);
  sub_F9E4(v39, v40);
  v41 = *(_QWORD *)(a1 + 240);
  v42 = *(_BYTE *)(a1 + 248);
  *(_QWORD *)(a1 + 240) = v39;
  *(_BYTE *)(a1 + 248) = v40;
  sub_BE0C(v41, v42);
  return a1;
}

uint64_t sub_689D0(uint64_t a1)
{
  destroy for MediaBackdropViewModifier.Source(a1);
  return a1;
}

__n128 initializeWithTake for MediaBackdropViewModifier(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __n128 result;
  __int128 v12;
  __int128 v13;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  v5 = a2[4];
  v6 = a2[5];
  v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  v8 = a2[8];
  v9 = a2[9];
  v10 = a2[11];
  *(_OWORD *)(a1 + 160) = a2[10];
  *(_OWORD *)(a1 + 176) = v10;
  *(_OWORD *)(a1 + 128) = v8;
  *(_OWORD *)(a1 + 144) = v9;
  result = (__n128)a2[12];
  v12 = a2[13];
  v13 = a2[14];
  *(_OWORD *)(a1 + 233) = *(__int128 *)((char *)a2 + 233);
  *(_OWORD *)(a1 + 208) = v12;
  *(_OWORD *)(a1 + 224) = v13;
  *(__n128 *)(a1 + 192) = result;
  return result;
}

uint64_t assignWithTake for MediaBackdropViewModifier(uint64_t a1, uint64_t a2)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  char v12;
  uint64_t v13;
  char v14;

  if (*(unsigned __int8 *)(a1 + 168) != 255)
  {
    if (*(unsigned __int8 *)(a2 + 168) != 255 && a1 == a2)
      goto LABEL_8;
    sub_689D0(a1);
  }
  v5 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v5;
  *(_OWORD *)(a1 + 153) = *(_OWORD *)(a2 + 153);
  v6 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v6;
  v7 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v7;
  v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v8;
  v9 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v9;
LABEL_8:
  v10 = *(_QWORD *)(a1 + 176);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  swift_release(v10);
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  if (a1 != a2)
  {
    sub_B414(a1 + 192, &qword_25EAE0);
    v11 = *(_OWORD *)(a2 + 208);
    *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
    *(_OWORD *)(a1 + 208) = v11;
    *(_OWORD *)(a1 + 217) = *(_OWORD *)(a2 + 217);
  }
  v12 = *(_BYTE *)(a2 + 248);
  v13 = *(_QWORD *)(a1 + 240);
  v14 = *(_BYTE *)(a1 + 248);
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  *(_BYTE *)(a1 + 248) = v12;
  sub_BE0C(v13, v14);
  return a1;
}

uint64_t getEnumTagSinglePayload for MediaBackdropViewModifier(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 249))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 176);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MediaBackdropViewModifier(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 248) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 249) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 176) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 249) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for MediaBackdropViewModifier()
{
  return &type metadata for MediaBackdropViewModifier;
}

uint64_t destroy for MediaBackdropViewModifier.Source(uint64_t a1)
{
  unsigned int v2;
  uint64_t result;

  v2 = *(unsigned __int8 *)(a1 + 168);
  if (v2 >= 2)
  {
    if (*(_DWORD *)a1 == -1)
      return swift_unknownObjectRelease(*(_QWORD *)a1);
  }
  else if (v2 == 1)
  {
    return swift_unknownObjectRelease(*(_QWORD *)a1);
  }
  if (!*(_BYTE *)(a1 + 56))
    _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)a1);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 104));
  result = *(_QWORD *)(a1 + 120);
  if (result)
  {
    swift_bridgeObjectRelease(result);
    swift_bridgeObjectRelease(*(_QWORD *)(a1 + 136));
    return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 160));
  }
  return result;
}

uint64_t initializeWithCopy for MediaBackdropViewModifier.Source(uint64_t a1, uint64_t *a2)
{
  unsigned int v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;

  v4 = *((unsigned __int8 *)a2 + 168);
  if (v4 < 2)
  {
    if (v4 != 1)
      goto LABEL_3;
LABEL_6:
    v6 = *a2;
    *(_QWORD *)a1 = *a2;
    *(_BYTE *)(a1 + 168) = v4;
    swift_unknownObjectRetain(v6);
    return a1;
  }
  v4 = *(_DWORD *)a2 + 2;
  if (*(_DWORD *)a2 == -1)
    goto LABEL_6;
LABEL_3:
  if (*((_BYTE *)a2 + 56))
  {
    v5 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
    *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
    *(_OWORD *)(a1 + 41) = *(_OWORD *)((char *)a2 + 41);
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 3);
    *(_OWORD *)(a1 + 24) = v7;
    (**(void (***)(uint64_t, uint64_t *))(v7 - 8))(a1, a2);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 5);
    *(_BYTE *)(a1 + 56) = 0;
  }
  *(_OWORD *)(a1 + 64) = *((_OWORD *)a2 + 4);
  *(_BYTE *)(a1 + 80) = *((_BYTE *)a2 + 80);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 11);
  v8 = a2[13];
  *(_QWORD *)(a1 + 104) = v8;
  v9 = a2[15];
  swift_bridgeObjectRetain(v8);
  if (v9)
  {
    *(_QWORD *)(a1 + 112) = a2[14];
    *(_QWORD *)(a1 + 120) = v9;
    v10 = a2[17];
    *(_QWORD *)(a1 + 128) = a2[16];
    *(_QWORD *)(a1 + 136) = v10;
    *(_BYTE *)(a1 + 144) = *((_BYTE *)a2 + 144);
    v11 = a2[19];
    v12 = a2[20];
    *(_QWORD *)(a1 + 152) = v11;
    *(_QWORD *)(a1 + 160) = v12;
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v10);
    swift_bridgeObjectRetain(v12);
  }
  else
  {
    v13 = *((_OWORD *)a2 + 8);
    *(_OWORD *)(a1 + 112) = *((_OWORD *)a2 + 7);
    *(_OWORD *)(a1 + 128) = v13;
    *(_OWORD *)(a1 + 144) = *((_OWORD *)a2 + 9);
    *(_QWORD *)(a1 + 160) = a2[20];
  }
  *(_BYTE *)(a1 + 168) = 0;
  return a1;
}

uint64_t assignWithCopy for MediaBackdropViewModifier.Source(uint64_t a1, uint64_t *a2)
{
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;

  if ((uint64_t *)a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 168);
    if (v4 >= 2)
      v4 = *(_DWORD *)a1 + 2;
    if (v4 == 1)
    {
      swift_unknownObjectRelease(*(_QWORD *)a1);
    }
    else
    {
      if (!*(_BYTE *)(a1 + 56))
        _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)a1);
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 104));
      v5 = *(_QWORD *)(a1 + 120);
      if (v5)
      {
        swift_bridgeObjectRelease(v5);
        swift_bridgeObjectRelease(*(_QWORD *)(a1 + 136));
        swift_bridgeObjectRelease(*(_QWORD *)(a1 + 160));
      }
    }
    v6 = *((unsigned __int8 *)a2 + 168);
    if (v6 >= 2)
      v6 = *(_DWORD *)a2 + 2;
    if (v6 == 1)
    {
      v7 = *a2;
      *(_QWORD *)a1 = *a2;
      *(_BYTE *)(a1 + 168) = 1;
      swift_unknownObjectRetain(v7);
    }
    else
    {
      if (*((_BYTE *)a2 + 56))
      {
        v8 = *(_OWORD *)a2;
        v9 = *((_OWORD *)a2 + 1);
        v10 = *((_OWORD *)a2 + 2);
        *(_OWORD *)(a1 + 41) = *(_OWORD *)((char *)a2 + 41);
        *(_OWORD *)(a1 + 16) = v9;
        *(_OWORD *)(a1 + 32) = v10;
        *(_OWORD *)a1 = v8;
      }
      else
      {
        v11 = a2[3];
        *(_QWORD *)(a1 + 24) = v11;
        *(_QWORD *)(a1 + 32) = a2[4];
        (**(void (***)(uint64_t, uint64_t *))(v11 - 8))(a1, a2);
        *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 5);
        *(_BYTE *)(a1 + 56) = 0;
      }
      *(_OWORD *)(a1 + 64) = *((_OWORD *)a2 + 4);
      *(_BYTE *)(a1 + 80) = *((_BYTE *)a2 + 80);
      *(_QWORD *)(a1 + 88) = a2[11];
      *(_QWORD *)(a1 + 96) = a2[12];
      v12 = a2[13];
      *(_QWORD *)(a1 + 104) = v12;
      v13 = a2[15];
      swift_bridgeObjectRetain(v12);
      if (v13)
      {
        *(_QWORD *)(a1 + 112) = a2[14];
        v14 = a2[15];
        *(_QWORD *)(a1 + 120) = v14;
        *(_QWORD *)(a1 + 128) = a2[16];
        v15 = a2[17];
        *(_QWORD *)(a1 + 136) = v15;
        *(_BYTE *)(a1 + 144) = *((_BYTE *)a2 + 144);
        *(_QWORD *)(a1 + 152) = a2[19];
        v16 = a2[20];
        *(_QWORD *)(a1 + 160) = v16;
        swift_bridgeObjectRetain(v14);
        swift_bridgeObjectRetain(v15);
        swift_bridgeObjectRetain(v16);
      }
      else
      {
        v17 = *((_OWORD *)a2 + 7);
        v18 = *((_OWORD *)a2 + 8);
        v19 = *((_OWORD *)a2 + 9);
        *(_QWORD *)(a1 + 160) = a2[20];
        *(_OWORD *)(a1 + 128) = v18;
        *(_OWORD *)(a1 + 144) = v19;
        *(_OWORD *)(a1 + 112) = v17;
      }
      *(_BYTE *)(a1 + 168) = 0;
    }
  }
  return a1;
}

__n128 initializeWithTake for MediaBackdropViewModifier.Source(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __n128 result;
  __int128 v8;
  __int128 v9;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  v4 = a2[3];
  v5 = a2[4];
  v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  result = (__n128)a2[7];
  v8 = a2[8];
  v9 = a2[9];
  *(_OWORD *)(a1 + 153) = *(__int128 *)((char *)a2 + 153);
  *(_OWORD *)(a1 + 128) = v8;
  *(_OWORD *)(a1 + 144) = v9;
  *(__n128 *)(a1 + 112) = result;
  return result;
}

uint64_t assignWithTake for MediaBackdropViewModifier.Source(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  char v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  if (a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 168);
    if (v4 >= 2)
      v4 = *(_DWORD *)a1 + 2;
    if (v4 == 1)
    {
      swift_unknownObjectRelease(*(_QWORD *)a1);
    }
    else
    {
      if (!*(_BYTE *)(a1 + 56))
        _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)a1);
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 104));
      v5 = *(_QWORD *)(a1 + 120);
      if (v5)
      {
        swift_bridgeObjectRelease(v5);
        swift_bridgeObjectRelease(*(_QWORD *)(a1 + 136));
        swift_bridgeObjectRelease(*(_QWORD *)(a1 + 160));
      }
    }
    v6 = *(unsigned __int8 *)(a2 + 168);
    if (v6 >= 2)
      v6 = *(_DWORD *)a2 + 2;
    if (v6 == 1)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v7 = 1;
    }
    else
    {
      v7 = 0;
      *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
      v8 = *(_OWORD *)(a2 + 144);
      *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 144) = v8;
      v9 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 80) = v9;
      v10 = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 112) = v10;
      v11 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v11;
      v12 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 48) = v12;
    }
    *(_BYTE *)(a1 + 168) = v7;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for MediaBackdropViewModifier.Source(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 169))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 168);
  if (v3 >= 2)
    return (v3 ^ 0xFF) + 1;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for MediaBackdropViewModifier.Source(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 153) = 0u;
    *(_OWORD *)(result + 128) = 0u;
    *(_OWORD *)(result + 144) = 0u;
    *(_OWORD *)(result + 96) = 0u;
    *(_OWORD *)(result + 112) = 0u;
    *(_OWORD *)(result + 64) = 0u;
    *(_OWORD *)(result + 80) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 169) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 169) = 0;
    if (a2)
      *(_BYTE *)(result + 168) = -(char)a2;
  }
  return result;
}

uint64_t sub_6913C(uint64_t a1)
{
  uint64_t result;

  result = *(unsigned __int8 *)(a1 + 168);
  if (result >= 2)
    return (*(_DWORD *)a1 + 2);
  return result;
}

uint64_t sub_69158(uint64_t result, unsigned int a2)
{
  if (a2 > 1)
  {
    *(_QWORD *)(result + 160) = 0;
    *(_OWORD *)(result + 128) = 0u;
    *(_OWORD *)(result + 144) = 0u;
    *(_OWORD *)(result + 96) = 0u;
    *(_OWORD *)(result + 112) = 0u;
    *(_OWORD *)(result + 64) = 0u;
    *(_OWORD *)(result + 80) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 2;
    LOBYTE(a2) = 2;
  }
  *(_BYTE *)(result + 168) = a2;
  return result;
}

ValueMetadata *type metadata accessor for MediaBackdropViewModifier.Source()
{
  return &type metadata for MediaBackdropViewModifier.Source;
}

uint64_t sub_691A0(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_22B98C, 1);
}

uint64_t sub_691B0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  _OWORD v7[10];
  uint64_t v8;
  _OWORD v9[10];
  uint64_t v10;
  _OWORD v11[6];
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17[21];
  char v18;
  _OWORD v19[6];
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  char v25;

  sub_69324(a1, (uint64_t)v17);
  sub_69324(a2, (uint64_t)v19);
  if ((v18 & 1) != 0)
  {
    sub_69324(v17, (uint64_t)v11);
    v3 = *(_QWORD *)&v11[0];
    if (v25 == 1)
    {
      v4 = *(_QWORD *)&v19[0];
      swift_unknownObjectRelease(*(_QWORD *)&v11[0]);
      swift_unknownObjectRelease(v4);
      v5 = v3 == v4;
LABEL_12:
      sub_689D0((uint64_t)v17);
      return v5 & 1;
    }
    swift_unknownObjectRelease(*(_QWORD *)&v11[0]);
  }
  else
  {
    sub_69324(v17, (uint64_t)v11);
    if ((v25 & 1) == 0)
    {
      v9[8] = v14;
      v9[9] = v15;
      v10 = v16;
      v9[4] = v11[4];
      v9[5] = v11[5];
      v9[6] = v12;
      v9[7] = v13;
      v9[0] = v11[0];
      v9[1] = v11[1];
      v9[2] = v11[2];
      v9[3] = v11[3];
      v7[8] = v22;
      v7[9] = v23;
      v8 = v24;
      v7[4] = v19[4];
      v7[5] = v19[5];
      v7[6] = v20;
      v7[7] = v21;
      v7[0] = v19[0];
      v7[1] = v19[1];
      v7[2] = v19[2];
      v7[3] = v19[3];
      if (v12 == v20)
        v5 = 1;
      else
        v5 = _stringCompareWithSmolCheck(_:_:expecting:)(v12, *((_QWORD *)&v12 + 1), v20, *((_QWORD *)&v20 + 1), 0);
      sub_22488((uint64_t)v7);
      sub_22488((uint64_t)v9);
      goto LABEL_12;
    }
    sub_22488((uint64_t)v11);
  }
  sub_B414((uint64_t)v17, &qword_261878);
  v5 = 0;
  return v5 & 1;
}

uint64_t sub_69324(uint64_t *a1, uint64_t a2)
{
  initializeWithCopy for MediaBackdropViewModifier.Source(a2, a1);
  return a2;
}

unint64_t sub_6935C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_261880;
  if (!qword_261880)
  {
    v1 = sub_7EF8(&qword_261860);
    sub_7FD8(&qword_261888, &qword_261870, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
    sub_7FD8(&qword_261890, &qword_261868, (uint64_t)&protocol conformance descriptor for _BackgroundModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_261880);
  }
  return result;
}

uint64_t ListItemAccessoryBuyButtonView.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  __int16 v32;
  uint64_t v33;
  _OWORD *v34;
  uint64_t v35;
  void (*v36)(char *, uint64_t, uint64_t);
  char *v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t (*v49)(uint64_t);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  __int128 v88[2];
  uint64_t v89;
  uint64_t v90;
  _OWORD v91[3];
  _BYTE v92[19];

  v2 = v1;
  v85 = a1;
  v77 = type metadata accessor for Font.TextStyle(0);
  v73 = *(_QWORD *)(v77 - 8);
  __chkstk_darwin(v77);
  v76 = (char *)&v70 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v72 = type metadata accessor for ButtonViewModel.ActionKind(0);
  __chkstk_darwin(v72);
  v74 = (char *)&v70 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v71 = type metadata accessor for ButtonViewModel.Content(0);
  __chkstk_darwin(v71);
  v82 = (uint64_t)&v70 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = (int *)type metadata accessor for ButtonViewModel(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v70 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v84 = type metadata accessor for ButtonView(0);
  v9 = __chkstk_darwin(v84);
  v75 = (char *)&v70 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v78 = (uint64_t)&v70 - v11;
  v87 = sub_5440(&qword_261898);
  __chkstk_darwin(v87);
  v83 = (uint64_t)&v70 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (int *)type metadata accessor for BuyButtonExternals(0);
  v14 = __chkstk_darwin(v13);
  v16 = (uint64_t *)((char *)&v70 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v14);
  v81 = (uint64_t)&v70 - v17;
  v18 = sub_5440(&qword_2618A0);
  __chkstk_darwin(v18);
  v80 = (uint64_t)&v70 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v86 = type metadata accessor for BuyButton(0);
  v20 = __chkstk_darwin(v86);
  v79 = (uint64_t)&v70 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v23 = (char *)&v70 - v22;
  v24 = *(_OWORD *)(v1 + 48);
  v91[2] = *(_OWORD *)(v1 + 32);
  *(_OWORD *)v92 = v24;
  *(_DWORD *)&v92[15] = *(_DWORD *)(v1 + 63);
  v25 = *(_OWORD *)(v1 + 16);
  v91[0] = *(_OWORD *)v1;
  v91[1] = v25;
  sub_34820((uint64_t)v91, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))sub_3480C);
  sub_316C0((uint64_t)&v89);
  sub_34820((uint64_t)v91, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))sub_BDF8);
  v26 = v90;
  swift_bridgeObjectRelease(v90);
  v27 = *(_QWORD *)(v1 + 72);
  v28 = *(_BYTE *)(v1 + 80);
  sub_F9E4(*(_QWORD *)(v2 + 72), *(_BYTE *)(v2 + 80));
  v29 = sub_30DB4(v27, v28);
  sub_BE0C(v27, v28);
  if (v26)
  {
    v30 = v83;
    v31 = v84;
    if ((v29 & 1) != 0)
      v32 = 2;
    else
      v32 = (*(_BYTE *)(v2 + 128) & 1) == 0;
    v55 = *(_DWORD *)&v32 | 0xFFFF8000;
    sub_BD00(v2 + 88, (uint64_t)&v89);
    sub_BD00((uint64_t)&v89, (uint64_t)v88);
    *v16 = swift_getKeyPath(&unk_1E4F30);
    v56 = sub_5440(&qword_25F1E8);
    swift_storeEnumTagMultiPayload(v16, v56, 0);
    v57 = (_QWORD *)((char *)v16 + v13[5]);
    v58 = type metadata accessor for ProfileRestrictions(0);
    v59 = sub_6FD0((unint64_t *)&qword_26AF00, type metadata accessor for ProfileRestrictions, (uint64_t)&protocol conformance descriptor for ProfileRestrictions);
    *v57 = EnvironmentObject.init()(v58, v59);
    v57[1] = v60;
    v61 = (_QWORD *)((char *)v16 + v13[6]);
    *v61 = swift_getKeyPath(&unk_1E4F90);
    v62 = sub_5440(&qword_25F758);
    swift_storeEnumTagMultiPayload(v61, v62, 0);
    v63 = (char *)v16 + v13[7];
    *(_QWORD *)v63 = swift_getKeyPath(&unk_1E4FB8);
    *(_OWORD *)(v63 + 8) = 0u;
    *(_OWORD *)(v63 + 24) = 0u;
    *(_OWORD *)(v63 + 40) = 0u;
    *(_OWORD *)(v63 + 51) = 0u;
    v64 = v81;
    sub_21C88((uint64_t)v16, v81, type metadata accessor for BuyButtonExternals);
    v65 = v80;
    sub_69CD4(v55, 2, v88, v64, v80);
    _s7BooksUI13AnyPagedFrameVwxx_0(&v89);
    v66 = v79;
    sub_69F08(v65, v79);
    v49 = type metadata accessor for BuyButton;
    sub_21C88(v66, (uint64_t)v23, type metadata accessor for BuyButton);
    sub_1E428((uint64_t)v23, v30, type metadata accessor for BuyButton);
    swift_storeEnumTagMultiPayload(v30, v87, 0);
    v67 = sub_6FD0(&qword_2618A8, type metadata accessor for BuyButton, (uint64_t)&protocol conformance descriptor for BuyButton);
    v68 = sub_6FD0(&qword_2618B0, type metadata accessor for ButtonView, (uint64_t)&protocol conformance descriptor for ButtonView);
    _ConditionalContent<>.init(storage:)(v30, v86, v31, v67, v68);
    v54 = (uint64_t)v23;
  }
  else
  {
    v33 = 1;
    if ((v29 & 1) != 0)
      v33 = 2;
    v81 = v33;
    swift_storeEnumTagMultiPayload(v82, v71, 8);
    v34 = v74;
    *((_QWORD *)v74 + 4) = 0;
    *v34 = 0u;
    v34[1] = 0u;
    swift_storeEnumTagMultiPayload(v34, v72, 0);
    v89 = 0x403C000000000000;
    v35 = enum case for Font.TextStyle.subheadline(_:);
    v36 = *(void (**)(char *, uint64_t, uint64_t))(v73 + 104);
    v37 = v76;
    v38 = v77;
    v36(v76, enum case for Font.TextStyle.subheadline(_:), v77);
    v39 = sub_3CB54();
    ScaledMetric.init(wrappedValue:relativeTo:)(&v89, v37, &type metadata for Double, v39);
    v89 = 0x4008000000000000;
    v36(v37, v35, v38);
    ScaledMetric.init(wrappedValue:relativeTo:)(&v89, v37, &type metadata for Double, v39);
    v40 = &v8[v6[6]];
    *(_QWORD *)v40 = swift_getKeyPath(&unk_1E4F30);
    v41 = sub_5440(&qword_25F1E8);
    swift_storeEnumTagMultiPayload(v40, v41, 0);
    v42 = &v8[v6[14]];
    v43 = type metadata accessor for LocalizerRequest(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 56))(v42, 1, 1, v43);
    v8[v6[7]] = 2;
    v8[v6[8]] = 0;
    v8[v6[9]] = 0;
    v44 = &v8[v6[10]];
    *(_QWORD *)v44 = v81;
    *((_QWORD *)v44 + 1) = 0;
    *((_QWORD *)v44 + 2) = 0;
    *((_QWORD *)v44 + 3) = 0;
    sub_21C88(v82, (uint64_t)&v8[v6[11]], type metadata accessor for ButtonViewModel.Content);
    v8[v6[12]] = 0;
    sub_21C88((uint64_t)v34, (uint64_t)&v8[v6[13]], type metadata accessor for ButtonViewModel.ActionKind);
    v89 = 0x4020000000000000;
    v36(v37, v35, v38);
    v45 = (uint64_t)v75;
    ScaledMetric.init(wrappedValue:relativeTo:)(&v89, v37, &type metadata for Double, v39);
    v46 = v84;
    v89 = 0x3FF8000000000000;
    v36(v37, v35, v38);
    ScaledMetric.init(wrappedValue:relativeTo:)(&v89, v37, &type metadata for Double, v39);
    v47 = (_QWORD *)(v45 + *(int *)(v46 + 24));
    *v47 = swift_getKeyPath(&unk_1E4F58);
    v48 = sub_5440(&qword_25FB20);
    swift_storeEnumTagMultiPayload(v47, v48, 0);
    sub_21C88((uint64_t)v8, v45 + *(int *)(v46 + 28), type metadata accessor for ButtonViewModel);
    v49 = type metadata accessor for ButtonView;
    v50 = v78;
    sub_21C88(v45, v78, type metadata accessor for ButtonView);
    v51 = v83;
    sub_1E428(v50, v83, type metadata accessor for ButtonView);
    swift_storeEnumTagMultiPayload(v51, v87, 1);
    v52 = sub_6FD0(&qword_2618A8, type metadata accessor for BuyButton, (uint64_t)&protocol conformance descriptor for BuyButton);
    v53 = sub_6FD0(&qword_2618B0, type metadata accessor for ButtonView, (uint64_t)&protocol conformance descriptor for ButtonView);
    _ConditionalContent<>.init(storage:)(v51, v86, v46, v52, v53);
    v54 = v50;
  }
  return sub_224DC(v54, v49);
}

uint64_t sub_69CD4@<X0>(uint64_t a1@<X0>, char a2@<W1>, __int128 *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int *v16;
  unsigned int v17;
  uint64_t v19;
  uint64_t v20;
  __int128 v21[2];
  _OWORD v22[2];
  BOOL v23;
  unsigned __int8 v24;
  char v25;

  v20 = a4;
  v9 = (__int16)a1;
  v10 = type metadata accessor for ButtonViewModel.ActionKind(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for ButtonViewModel.Content(0);
  __chkstk_darwin(v13);
  v15 = (char *)&v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = (int *)sub_5440(&qword_2618A0);
  *(_WORD *)(a5 + v16[9]) = a1;
  v17 = (a1 >> 8) & 1;
  if (v9 < 0)
    LOBYTE(v17) = 2;
  v25 = v17;
  v24 = 0;
  v23 = (a1 & 0x8080) == 128;
  sub_69E84(a1, (uint64_t)v22);
  v21[0] = v22[0];
  v21[1] = v22[1];
  static LocalizerRequest.verbatim(_:)(0, 0xE000000000000000);
  swift_storeEnumTagMultiPayload(v15, v13, 0);
  *((_QWORD *)v12 + 4) = 0;
  *(_OWORD *)v12 = 0u;
  *((_OWORD *)v12 + 1) = 0u;
  swift_storeEnumTagMultiPayload(v12, v10, 0);
  ButtonViewModel.init(size:shape:kind:style:content:isEnabled:action:)(&v25, &v24, (unsigned __int8 *)&v23, v21, (uint64_t)v15, 1, (uint64_t)v12, a5);
  *(_BYTE *)(a5 + v16[10]) = a2;
  sub_AC68(a3, a5 + v16[11]);
  return sub_21C88(v20, a5 + v16[12], type metadata accessor for BuyButtonExternals);
}

uint64_t sub_69E84@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  if ((result & 0x8000) == 0)
  {
    if ((result & 0x80) == 0)
    {
      if (result != 1)
      {
        if ((_BYTE)result)
          goto LABEL_11;
LABEL_10:
        *(_OWORD *)a2 = 0u;
        *(_OWORD *)(a2 + 16) = 0u;
        return result;
      }
      goto LABEL_8;
    }
    if ((result & 1) == 0)
      goto LABEL_10;
LABEL_11:
    v2 = 2;
    goto LABEL_12;
  }
  if (!(_BYTE)result)
    goto LABEL_10;
  if (result != 1)
    goto LABEL_11;
LABEL_8:
  v2 = 1;
LABEL_12:
  *(_QWORD *)a2 = v2;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  return result;
}

uint64_t sub_69EDC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1E428(a1, a2, type metadata accessor for FontConstants.Environment);
}

uint64_t sub_69F08(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_5440(&qword_2618A0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_69F50(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &opaque type descriptor for <<opaque return type of ListItemAccessoryBuyButtonView.body>>, 1);
}

uint64_t destroy for ListItemAccessoryBuyButtonView(uint64_t a1)
{
  sub_BDF8(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_WORD *)(a1 + 64), *(_BYTE *)(a1 + 66));
  sub_BE0C(*(_QWORD *)(a1 + 72), *(_BYTE *)(a1 + 80));
  return _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)(a1 + 88));
}

uint64_t initializeWithCopy for ListItemAccessoryBuyButtonView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int16 v15;
  char v16;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a2 + 56);
  v15 = *(_WORD *)(a2 + 64);
  v16 = *(_BYTE *)(a2 + 66);
  sub_3480C(*(_QWORD *)a2, v5, v6, v7, v8, v9, v10, v11, v15, v16);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 40) = v9;
  *(_QWORD *)(a1 + 48) = v10;
  *(_QWORD *)(a1 + 56) = v11;
  *(_WORD *)(a1 + 64) = v15;
  *(_BYTE *)(a1 + 66) = v16;
  v12 = *(_QWORD *)(a2 + 72);
  LOBYTE(v5) = *(_BYTE *)(a2 + 80);
  sub_F9E4(v12, v5);
  *(_QWORD *)(a1 + 72) = v12;
  *(_BYTE *)(a1 + 80) = v5;
  v13 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 112) = v13;
  (**(void (***)(uint64_t, uint64_t))(v13 - 8))(a1 + 88, a2 + 88);
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  return a1;
}

uint64_t assignWithCopy for ListItemAccessoryBuyButtonView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int16 v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  __int16 v26;
  char v27;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a2 + 56);
  v26 = *(_WORD *)(a2 + 64);
  v27 = *(_BYTE *)(a2 + 66);
  sub_3480C(*(_QWORD *)a2, v5, v6, v7, v8, v9, v10, v11, v26, v27);
  v12 = *(_QWORD *)a1;
  v13 = *(_QWORD *)(a1 + 8);
  v14 = *(_QWORD *)(a1 + 16);
  v15 = *(_QWORD *)(a1 + 24);
  v16 = *(_QWORD *)(a1 + 32);
  v17 = *(_QWORD *)(a1 + 40);
  v18 = *(_QWORD *)(a1 + 48);
  v19 = *(_QWORD *)(a1 + 56);
  v20 = *(_WORD *)(a1 + 64);
  v21 = *(_BYTE *)(a1 + 66);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 40) = v9;
  *(_QWORD *)(a1 + 48) = v10;
  *(_QWORD *)(a1 + 56) = v11;
  *(_WORD *)(a1 + 64) = v26;
  *(_BYTE *)(a1 + 66) = v27;
  sub_BDF8(v12, v13, v14, v15, v16, v17, v18, v19, v20, v21);
  v22 = *(_QWORD *)(a2 + 72);
  LOBYTE(v5) = *(_BYTE *)(a2 + 80);
  sub_F9E4(v22, v5);
  v23 = *(_QWORD *)(a1 + 72);
  v24 = *(_BYTE *)(a1 + 80);
  *(_QWORD *)(a1 + 72) = v22;
  *(_BYTE *)(a1 + 80) = v5;
  sub_BE0C(v23, v24);
  sub_142F8((_QWORD *)(a1 + 88), (_QWORD *)(a2 + 88));
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  return a1;
}

__n128 initializeWithTake for ListItemAccessoryBuyButtonView(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v2 = *(_OWORD *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  result = *(__n128 *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 80) = result;
  return result;
}

uint64_t assignWithTake for ListItemAccessoryBuyButtonView(uint64_t a1, uint64_t a2)
{
  __int16 v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int16 v14;
  char v15;
  __int128 v16;
  __int128 v17;
  char v18;
  uint64_t v19;
  char v20;

  v4 = *(_WORD *)(a2 + 64);
  v5 = *(_BYTE *)(a2 + 66);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_QWORD *)(a1 + 24);
  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(_QWORD *)(a1 + 40);
  v12 = *(_QWORD *)(a1 + 48);
  v13 = *(_QWORD *)(a1 + 56);
  v14 = *(_WORD *)(a1 + 64);
  v15 = *(_BYTE *)(a1 + 66);
  v16 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v16;
  v17 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v17;
  *(_WORD *)(a1 + 64) = v4;
  *(_BYTE *)(a1 + 66) = v5;
  sub_BDF8(v6, v7, v8, v9, v10, v11, v12, v13, v14, v15);
  v18 = *(_BYTE *)(a2 + 80);
  v19 = *(_QWORD *)(a1 + 72);
  v20 = *(_BYTE *)(a1 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = v18;
  sub_BE0C(v19, v20);
  _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)(a1 + 88));
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  return a1;
}

uint64_t getEnumTagSinglePayload for ListItemAccessoryBuyButtonView(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 129))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 112);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ListItemAccessoryBuyButtonView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 120) = 0;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 128) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 129) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 112) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 129) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ListItemAccessoryBuyButtonView()
{
  return &type metadata for ListItemAccessoryBuyButtonView;
}

unint64_t sub_6A374()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2618B8;
  if (!qword_2618B8)
  {
    v1 = sub_7EF8(&qword_2618C0);
    sub_6FD0(&qword_2618A8, type metadata accessor for BuyButton, (uint64_t)&protocol conformance descriptor for BuyButton);
    sub_6FD0(&qword_2618B0, type metadata accessor for ButtonView, (uint64_t)&protocol conformance descriptor for ButtonView);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_2618B8);
  }
  return result;
}

uint64_t ListItemMetadata.eyebrow.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_B3D0(v1, a1, &qword_25E0E8);
}

uint64_t ListItemMetadata.eyebrow.setter(uint64_t a1)
{
  uint64_t v1;

  return sub_C378(a1, v1, &qword_25E0E8);
}

uint64_t ListItemMetadata.titleLockup.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_B3D0(v1 + 40, a1, &qword_25E0F0);
}

uint64_t ListItemMetadata.titleLockup.setter(uint64_t a1)
{
  uint64_t v1;

  return sub_C378(a1, v1 + 40, &qword_25E0F0);
}

uint64_t (*ListItemMetadata.titleLockup.modify())()
{
  return KeyedEncodingContainer.encode<A>(_:forKey:);
}

uint64_t ListItemMetadata.formatAndDescriptor.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_B3D0(v1 + 80, a1, &qword_25E0F8);
}

uint64_t ListItemMetadata.formatAndDescriptor.setter(uint64_t a1)
{
  uint64_t v1;

  return sub_C378(a1, v1 + 80, &qword_25E0F8);
}

uint64_t (*Metrics.Location.kind.modify())()
{
  return KeyedEncodingContainer.encode<A>(_:forKey:);
}

uint64_t ListItemMetadata.descriptors.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_B3D0(v1 + 120, a1, &qword_25E0F8);
}

uint64_t ListItemMetadata.descriptors.setter(uint64_t a1)
{
  uint64_t v1;

  return sub_C378(a1, v1 + 120, &qword_25E0F8);
}

uint64_t (*Metrics.Impression.narratorType.modify())()
{
  return KeyedEncodingContainer.encode<A>(_:forKey:);
}

uint64_t ListItemMetadata.finePrint.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_B3D0(v1 + 160, a1, &qword_25E100);
}

uint64_t ListItemMetadata.finePrint.setter(uint64_t a1)
{
  uint64_t v1;

  return sub_C378(a1, v1 + 160, &qword_25E100);
}

uint64_t (*Metrics.Location.narratorType.modify())()
{
  return KeyedEncodingContainer.encode<A>(_:forKey:);
}

uint64_t ListItemMetadata.sharedWithYou.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_B3D0(v1 + 200, a1, &qword_25E108);
}

uint64_t ListItemMetadata.sharedWithYou.setter(uint64_t a1)
{
  uint64_t v1;

  return sub_C378(a1, v1 + 200, &qword_25E108);
}

uint64_t (*ListItemMetadata.sharedWithYou.modify())()
{
  return KeyedEncodingContainer.encode<A>(_:forKey:);
}

uint64_t ListItemMetadata.creatorDescription.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_B3D0(v1 + 240, a1, &qword_25E110);
}

uint64_t ListItemMetadata.creatorDescription.setter(uint64_t a1)
{
  uint64_t v1;

  return sub_C378(a1, v1 + 240, &qword_25E110);
}

uint64_t (*ListItemMetadata.creatorDescription.modify())()
{
  return KeyedEncodingContainer.encode<A>(_:forKey:);
}

_QWORD *destroy for ListItemMetadata(_QWORD *result)
{
  _QWORD *v1;

  v1 = result;
  if (result[3])
    result = (_QWORD *)_s7BooksUI13AnyPagedFrameVwxx_0(result);
  if (v1[8])
    result = (_QWORD *)_s7BooksUI13AnyPagedFrameVwxx_0(v1 + 5);
  if (v1[13])
    result = (_QWORD *)_s7BooksUI13AnyPagedFrameVwxx_0(v1 + 10);
  if (v1[18])
    result = (_QWORD *)_s7BooksUI13AnyPagedFrameVwxx_0(v1 + 15);
  if (v1[23])
    result = (_QWORD *)_s7BooksUI13AnyPagedFrameVwxx_0(v1 + 20);
  if (v1[28])
    result = (_QWORD *)_s7BooksUI13AnyPagedFrameVwxx_0(v1 + 25);
  if (v1[33])
    return (_QWORD *)_s7BooksUI13AnyPagedFrameVwxx_0(v1 + 30);
  return result;
}

uint64_t initializeWithCopy for ListItemMetadata(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  _OWORD *v7;
  _OWORD *v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  _OWORD *v17;
  _OWORD *v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  _OWORD *v22;
  _OWORD *v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  _OWORD *v27;
  _OWORD *v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  _OWORD *v32;
  _OWORD *v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;

  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    v5 = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 24) = v4;
    *(_QWORD *)(a1 + 32) = v5;
    (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1, a2);
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v6;
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  }
  v7 = (_OWORD *)(a1 + 40);
  v8 = (_OWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 64);
  if (v9)
  {
    v10 = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 64) = v9;
    *(_QWORD *)(a1 + 72) = v10;
    (**(void (***)(_OWORD *, _OWORD *))(v9 - 8))(v7, v8);
  }
  else
  {
    v11 = *(_OWORD *)(a2 + 56);
    *v7 = *v8;
    *(_OWORD *)(a1 + 56) = v11;
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  }
  v12 = (_OWORD *)(a1 + 80);
  v13 = (_OWORD *)(a2 + 80);
  v14 = *(_QWORD *)(a2 + 104);
  if (v14)
  {
    v15 = *(_QWORD *)(a2 + 112);
    *(_QWORD *)(a1 + 104) = v14;
    *(_QWORD *)(a1 + 112) = v15;
    (**(void (***)(_OWORD *, _OWORD *))(v14 - 8))(v12, v13);
  }
  else
  {
    v16 = *(_OWORD *)(a2 + 96);
    *v12 = *v13;
    *(_OWORD *)(a1 + 96) = v16;
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  }
  v17 = (_OWORD *)(a1 + 120);
  v18 = (_OWORD *)(a2 + 120);
  v19 = *(_QWORD *)(a2 + 144);
  if (v19)
  {
    v20 = *(_QWORD *)(a2 + 152);
    *(_QWORD *)(a1 + 144) = v19;
    *(_QWORD *)(a1 + 152) = v20;
    (**(void (***)(_OWORD *, _OWORD *))(v19 - 8))(v17, v18);
  }
  else
  {
    v21 = *(_OWORD *)(a2 + 136);
    *v17 = *v18;
    *(_OWORD *)(a1 + 136) = v21;
    *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  }
  v22 = (_OWORD *)(a1 + 160);
  v23 = (_OWORD *)(a2 + 160);
  v24 = *(_QWORD *)(a2 + 184);
  if (v24)
  {
    v25 = *(_QWORD *)(a2 + 192);
    *(_QWORD *)(a1 + 184) = v24;
    *(_QWORD *)(a1 + 192) = v25;
    (**(void (***)(_OWORD *, _OWORD *))(v24 - 8))(v22, v23);
  }
  else
  {
    v26 = *(_OWORD *)(a2 + 176);
    *v22 = *v23;
    *(_OWORD *)(a1 + 176) = v26;
    *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  }
  v27 = (_OWORD *)(a1 + 200);
  v28 = (_OWORD *)(a2 + 200);
  v29 = *(_QWORD *)(a2 + 224);
  if (v29)
  {
    v30 = *(_QWORD *)(a2 + 232);
    *(_QWORD *)(a1 + 224) = v29;
    *(_QWORD *)(a1 + 232) = v30;
    (**(void (***)(_OWORD *, _OWORD *))(v29 - 8))(v27, v28);
  }
  else
  {
    v31 = *(_OWORD *)(a2 + 216);
    *v27 = *v28;
    *(_OWORD *)(a1 + 216) = v31;
    *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  }
  v32 = (_OWORD *)(a1 + 240);
  v33 = (_OWORD *)(a2 + 240);
  v34 = *(_QWORD *)(a2 + 264);
  if (v34)
  {
    v35 = *(_QWORD *)(a2 + 272);
    *(_QWORD *)(a1 + 264) = v34;
    *(_QWORD *)(a1 + 272) = v35;
    (**(void (***)(_OWORD *, _OWORD *))(v34 - 8))(v32, v33);
  }
  else
  {
    v36 = *(_OWORD *)(a2 + 256);
    *v32 = *v33;
    *(_OWORD *)(a1 + 256) = v36;
    *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
  }
  return a1;
}

uint64_t assignWithCopy for ListItemMetadata(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;

  v4 = *((_QWORD *)a2 + 3);
  if (*(_QWORD *)(a1 + 24))
  {
    if (v4)
    {
      sub_142F8((_QWORD *)a1, a2);
      goto LABEL_8;
    }
    _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)a1);
  }
  else if (v4)
  {
    *(_QWORD *)(a1 + 24) = v4;
    *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
    (**(void (***)(uint64_t, __int128 *))(v4 - 8))(a1, a2);
    goto LABEL_8;
  }
  v5 = *a2;
  v6 = a2[1];
  *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
  *(_OWORD *)a1 = v5;
  *(_OWORD *)(a1 + 16) = v6;
LABEL_8:
  v7 = *((_QWORD *)a2 + 8);
  if (*(_QWORD *)(a1 + 64))
  {
    if (v7)
    {
      sub_142F8((_QWORD *)(a1 + 40), (_QWORD *)a2 + 5);
      goto LABEL_15;
    }
    _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)(a1 + 40));
  }
  else if (v7)
  {
    *(_QWORD *)(a1 + 64) = v7;
    *(_QWORD *)(a1 + 72) = *((_QWORD *)a2 + 9);
    (**(void (***)(uint64_t, uint64_t))(v7 - 8))(a1 + 40, (uint64_t)a2 + 40);
    goto LABEL_15;
  }
  v8 = *(__int128 *)((char *)a2 + 40);
  v9 = *(__int128 *)((char *)a2 + 56);
  *(_QWORD *)(a1 + 72) = *((_QWORD *)a2 + 9);
  *(_OWORD *)(a1 + 40) = v8;
  *(_OWORD *)(a1 + 56) = v9;
LABEL_15:
  v10 = *((_QWORD *)a2 + 13);
  if (*(_QWORD *)(a1 + 104))
  {
    if (v10)
    {
      sub_142F8((_QWORD *)(a1 + 80), (_QWORD *)a2 + 10);
      goto LABEL_22;
    }
    _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)(a1 + 80));
  }
  else if (v10)
  {
    *(_QWORD *)(a1 + 104) = v10;
    *(_QWORD *)(a1 + 112) = *((_QWORD *)a2 + 14);
    (**(void (***)(uint64_t, uint64_t))(v10 - 8))(a1 + 80, (uint64_t)(a2 + 5));
    goto LABEL_22;
  }
  v11 = a2[5];
  v12 = a2[6];
  *(_QWORD *)(a1 + 112) = *((_QWORD *)a2 + 14);
  *(_OWORD *)(a1 + 80) = v11;
  *(_OWORD *)(a1 + 96) = v12;
LABEL_22:
  v13 = *((_QWORD *)a2 + 18);
  if (*(_QWORD *)(a1 + 144))
  {
    if (v13)
    {
      sub_142F8((_QWORD *)(a1 + 120), (_QWORD *)a2 + 15);
      goto LABEL_29;
    }
    _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)(a1 + 120));
  }
  else if (v13)
  {
    *(_QWORD *)(a1 + 144) = v13;
    *(_QWORD *)(a1 + 152) = *((_QWORD *)a2 + 19);
    (**(void (***)(uint64_t, uint64_t))(v13 - 8))(a1 + 120, (uint64_t)a2 + 120);
    goto LABEL_29;
  }
  v14 = *(__int128 *)((char *)a2 + 120);
  v15 = *(__int128 *)((char *)a2 + 136);
  *(_QWORD *)(a1 + 152) = *((_QWORD *)a2 + 19);
  *(_OWORD *)(a1 + 120) = v14;
  *(_OWORD *)(a1 + 136) = v15;
LABEL_29:
  v16 = *((_QWORD *)a2 + 23);
  if (*(_QWORD *)(a1 + 184))
  {
    if (v16)
    {
      sub_142F8((_QWORD *)(a1 + 160), (_QWORD *)a2 + 20);
      goto LABEL_36;
    }
    _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)(a1 + 160));
  }
  else if (v16)
  {
    *(_QWORD *)(a1 + 184) = v16;
    *(_QWORD *)(a1 + 192) = *((_QWORD *)a2 + 24);
    (**(void (***)(uint64_t, uint64_t))(v16 - 8))(a1 + 160, (uint64_t)(a2 + 10));
    goto LABEL_36;
  }
  v17 = a2[10];
  v18 = a2[11];
  *(_QWORD *)(a1 + 192) = *((_QWORD *)a2 + 24);
  *(_OWORD *)(a1 + 160) = v17;
  *(_OWORD *)(a1 + 176) = v18;
LABEL_36:
  v19 = *((_QWORD *)a2 + 28);
  if (*(_QWORD *)(a1 + 224))
  {
    if (v19)
    {
      sub_142F8((_QWORD *)(a1 + 200), (_QWORD *)a2 + 25);
      goto LABEL_43;
    }
    _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)(a1 + 200));
  }
  else if (v19)
  {
    *(_QWORD *)(a1 + 224) = v19;
    *(_QWORD *)(a1 + 232) = *((_QWORD *)a2 + 29);
    (**(void (***)(uint64_t, uint64_t))(v19 - 8))(a1 + 200, (uint64_t)a2 + 200);
    goto LABEL_43;
  }
  v20 = *(__int128 *)((char *)a2 + 200);
  v21 = *(__int128 *)((char *)a2 + 216);
  *(_QWORD *)(a1 + 232) = *((_QWORD *)a2 + 29);
  *(_OWORD *)(a1 + 200) = v20;
  *(_OWORD *)(a1 + 216) = v21;
LABEL_43:
  v22 = *((_QWORD *)a2 + 33);
  if (!*(_QWORD *)(a1 + 264))
  {
    if (v22)
    {
      *(_QWORD *)(a1 + 264) = v22;
      *(_QWORD *)(a1 + 272) = *((_QWORD *)a2 + 34);
      (**(void (***)(uint64_t, uint64_t))(v22 - 8))(a1 + 240, (uint64_t)(a2 + 15));
      return a1;
    }
LABEL_49:
    v23 = a2[15];
    v24 = a2[16];
    *(_QWORD *)(a1 + 272) = *((_QWORD *)a2 + 34);
    *(_OWORD *)(a1 + 240) = v23;
    *(_OWORD *)(a1 + 256) = v24;
    return a1;
  }
  if (!v22)
  {
    _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)(a1 + 240));
    goto LABEL_49;
  }
  sub_142F8((_QWORD *)(a1 + 240), (_QWORD *)a2 + 30);
  return a1;
}

void *initializeWithTake for ListItemMetadata(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x118uLL);
}

uint64_t assignWithTake for ListItemMetadata(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;

  if (*(_QWORD *)(a1 + 24))
    _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  if (*(_QWORD *)(a1 + 64))
    _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)(a1 + 40));
  v5 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = v5;
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  if (*(_QWORD *)(a1 + 104))
    _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)(a1 + 80));
  v6 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v6;
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  if (*(_QWORD *)(a1 + 144))
    _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)(a1 + 120));
  v7 = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = v7;
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  if (*(_QWORD *)(a1 + 184))
    _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)(a1 + 160));
  v8 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = v8;
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  if (*(_QWORD *)(a1 + 224))
    _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)(a1 + 200));
  v9 = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 216) = v9;
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  if (*(_QWORD *)(a1 + 264))
    _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)(a1 + 240));
  v10 = *(_OWORD *)(a2 + 256);
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
  *(_OWORD *)(a1 + 256) = v10;
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
  return a1;
}

uint64_t getEnumTagSinglePayload for ListItemMetadata(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 280))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 24);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ListItemMetadata(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 280) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 280) = 0;
    if (a2)
      *(_QWORD *)(result + 24) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for ListItemMetadata()
{
  return &type metadata for ListItemMetadata;
}

uint64_t static ListItemViewModel.seriesPage(seriesID:assetInfo:cardInfo:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t AssociatedTypeWitness;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t AssociatedConformanceWitness;
  char v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  char *v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42[2];
  _BYTE v43[40];
  _BYTE v44[280];
  __int128 v45[4];
  __int16 v46;
  _QWORD v47[3];
  ValueMetadata *v48;
  unint64_t v49;
  _QWORD v50[6];
  char v51;
  uint64_t v52;
  __int16 v53;

  v36 = a4;
  v39 = a1;
  v40 = a2;
  v41 = a5;
  v38 = type metadata accessor for ListItemViewModel(0);
  __chkstk_darwin(v38);
  v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_5440(&qword_2618C8);
  __chkstk_darwin(v8);
  v37 = (uint64_t)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_BD00((uint64_t)a3, (uint64_t)v50);
  v50[5] = 0;
  v51 = 1;
  v52 = 0;
  v53 = 255;
  v11 = a3[3];
  v10 = a3[4];
  sub_5480(a3, v11);
  v35 = v10;
  v12 = *(_QWORD *)(v10 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v12, v11, &protocol requirements base descriptor for ContentInfo, &associated type descriptor for ContentInfo.LibraryType);
  v14 = type metadata accessor for Optional(0, AssociatedTypeWitness);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v35 - v16;
  ContentInfo.libraryData.getter(v11, v12);
  v18 = *(_QWORD *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v17, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
LABEL_5:
    sub_BD00((uint64_t)a3, (uint64_t)v45);
    v48 = &type metadata for ListItemAccessoryBuyButton;
    v49 = sub_6B1DC();
    v21 = swift_allocObject(&unk_24DF78, 72, 7);
    v47[0] = v21;
    *(_QWORD *)v44 = swift_getKeyPath(&unk_1E50F0);
    v44[8] = 0;
    sub_AC68(v45, (uint64_t)&v44[16]);
    v22 = *(_OWORD *)&v44[16];
    *(_OWORD *)(v21 + 16) = *(_OWORD *)v44;
    *(_OWORD *)(v21 + 32) = v22;
    *(_OWORD *)(v21 + 48) = *(_OWORD *)&v44[32];
    *(_QWORD *)(v21 + 64) = *(_QWORD *)&v44[48];
    goto LABEL_6;
  }
  *(_QWORD *)&v44[24] = AssociatedTypeWitness;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v35, v11, AssociatedTypeWitness, &protocol requirements base descriptor for AssetInfo, &associated conformance descriptor for AssetInfo.ContentInfo.LibraryType: LibraryAssetInfo);
  *(_QWORD *)&v44[32] = AssociatedConformanceWitness;
  sub_C404(v44);
  (*(void (**)(void))(v18 + 32))();
  v20 = dispatch thunk of LibraryAssetInfo.isPurchased.getter(AssociatedTypeWitness, AssociatedConformanceWitness);
  _s7BooksUI13AnyPagedFrameVwxx_0(v44);
  if ((v20 & 1) == 0)
    goto LABEL_5;
  v48 = &type metadata for ListItemAccessoryMoreButton;
  v49 = sub_6B3A8();
  v47[0] = swift_allocObject(&unk_24DFA0, 56, 7);
  sub_BD00((uint64_t)a3, v47[0] + 16);
LABEL_6:
  v23 = a3[3];
  v24 = a3[4];
  sub_5480(a3, v23);
  v25 = ContentInfo.id.getter(v23, *(_QWORD *)(v24 + 8));
  v27 = v26;
  sub_2F4C8((uint64_t)v50, (uint64_t)v45);
  v28 = v40;
  swift_bridgeObjectRetain(v40);
  static ListItemMetadata.seriesPage(assetInfo:)(a3, v44);
  sub_BD00((uint64_t)v47, (uint64_t)v43);
  sub_BD00((uint64_t)a3, (uint64_t)v42);
  v29 = v37;
  sub_6B258(v36, v37);
  v30 = v45[0];
  *(_OWORD *)(v7 + 40) = v45[1];
  v31 = v45[3];
  *(_OWORD *)(v7 + 56) = v45[2];
  *v7 = 0;
  *((_QWORD *)v7 + 1) = 0;
  *(_OWORD *)(v7 + 72) = v31;
  *(_OWORD *)(v7 + 376) = 0u;
  *(_OWORD *)(v7 + 392) = 0u;
  *((_QWORD *)v7 + 51) = 0;
  v7[16] = 1;
  *((_WORD *)v7 + 44) = v46;
  *(_OWORD *)(v7 + 24) = v30;
  memcpy(v7 + 96, v44, 0x118uLL);
  sub_6B2A0((uint64_t)v43, (uint64_t)(v7 + 376));
  sub_AC68(v42, (uint64_t)(v7 + 416));
  v32 = v38;
  sub_6B2E8(v29, (uint64_t)&v7[*(int *)(v38 + 40)]);
  v33 = &v7[*(int *)(v32 + 44)];
  *(_OWORD *)v33 = xmmword_1E50D0;
  *((_QWORD *)v33 + 2) = 0;
  *((_QWORD *)v33 + 3) = 0;
  *((_QWORD *)v33 + 4) = v39;
  *((_QWORD *)v33 + 5) = v28;
  *((_OWORD *)v33 + 3) = 0u;
  *((_OWORD *)v33 + 4) = 0u;
  *((_OWORD *)v33 + 5) = 0u;
  *((_OWORD *)v33 + 6) = 0u;
  *((_OWORD *)v33 + 7) = 0u;
  *((_QWORD *)v33 + 16) = v25;
  *((_QWORD *)v33 + 17) = v27;
  v33[144] = 2;
  sub_6B330((uint64_t)v7, v41);
  sub_6B374(v50);
  return _s7BooksUI13AnyPagedFrameVwxx_0(v47);
}

unint64_t sub_6B1DC()
{
  unint64_t result;

  result = qword_2618D0;
  if (!qword_2618D0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ListItemAccessoryBuyButton, &type metadata for ListItemAccessoryBuyButton);
    atomic_store(result, (unint64_t *)&qword_2618D0);
  }
  return result;
}

uint64_t sub_6B220()
{
  uint64_t v0;

  sub_BE0C(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
  _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 72, 7);
}

uint64_t sub_6B258(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_5440(&qword_2618C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_6B2A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_5440(&qword_2618D8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_6B2E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_5440(&qword_2618C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_6B330(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ListItemViewModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

_QWORD *sub_6B374(_QWORD *a1)
{
  destroy for AnyPagedFrame(a1);
  return a1;
}

unint64_t sub_6B3A8()
{
  unint64_t result;

  result = qword_2618E0;
  if (!qword_2618E0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ListItemAccessoryMoreButton, &type metadata for ListItemAccessoryMoreButton);
    atomic_store(result, (unint64_t *)&qword_2618E0);
  }
  return result;
}

uint64_t sub_6B3EC()
{
  uint64_t v0;

  _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 56, 7);
}

_QWORD *static ListItemViewModel.seriesHeaderQuickActionButton(assetInfo:cardInfo:eyebrowText:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  char *v22;
  uint64_t v24;
  __int128 v25;
  _OWORD v26[2];
  uint64_t v27;
  __int128 v28[2];
  _QWORD v29[5];
  _BYTE v30[280];
  _OWORD v31[4];
  __int16 v32;
  _QWORD v33[6];
  char v34;
  uint64_t v35;
  __int16 v36;

  v24 = a4;
  v7 = type metadata accessor for ListItemViewModel(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_5440(&qword_2618C8);
  __chkstk_darwin(v10);
  v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_BD00((uint64_t)a1, (uint64_t)v33);
  v33[5] = 1;
  v34 = 4;
  v35 = 0;
  v36 = 255;
  v13 = a1[3];
  v14 = a1[4];
  sub_5480(a1, v13);
  v15 = ContentInfo.id.getter(v13, *(_QWORD *)(v14 + 8));
  v17 = v16;
  sub_2F4C8((uint64_t)v33, (uint64_t)v31);
  static ListItemMetadata.seriesHeaderQuickActionButton(assetInfo:eyebrowText:)(a1, a3, (uint64_t)v30);
  sub_BD00((uint64_t)a1, (uint64_t)v28);
  v29[3] = &type metadata for ListItemAccessoryBuyButton;
  v29[4] = sub_6B1DC();
  v18 = swift_allocObject(&unk_24DF78, 72, 7);
  v29[0] = v18;
  *(_QWORD *)&v25 = swift_getKeyPath(&unk_1E50F0);
  BYTE8(v25) = 0;
  sub_AC68(v28, (uint64_t)v26);
  v19 = v26[0];
  *(_OWORD *)(v18 + 16) = v25;
  *(_OWORD *)(v18 + 32) = v19;
  *(_OWORD *)(v18 + 48) = v26[1];
  *(_QWORD *)(v18 + 64) = v27;
  sub_BD00((uint64_t)a1, (uint64_t)&v25);
  sub_6B258(a2, (uint64_t)v12);
  v20 = v31[0];
  *(_OWORD *)(v9 + 40) = v31[1];
  v21 = v31[3];
  *(_OWORD *)(v9 + 56) = v31[2];
  *(_OWORD *)(v9 + 72) = v21;
  *(_OWORD *)(v9 + 376) = 0u;
  *(_OWORD *)(v9 + 392) = 0u;
  *((_QWORD *)v9 + 51) = 0;
  *v9 = 1;
  *((_QWORD *)v9 + 1) = 0;
  v9[16] = 1;
  *((_WORD *)v9 + 44) = v32;
  *(_OWORD *)(v9 + 24) = v20;
  memcpy(v9 + 96, v30, 0x118uLL);
  sub_6B2A0((uint64_t)v29, (uint64_t)(v9 + 376));
  sub_AC68(&v25, (uint64_t)(v9 + 416));
  sub_6B2E8((uint64_t)v12, (uint64_t)&v9[*(int *)(v7 + 40)]);
  v22 = &v9[*(int *)(v7 + 44)];
  *(_OWORD *)v22 = xmmword_1E50E0;
  *((_OWORD *)v22 + 1) = 0u;
  *((_OWORD *)v22 + 2) = 0u;
  *((_OWORD *)v22 + 3) = 0u;
  *((_OWORD *)v22 + 4) = 0u;
  *((_OWORD *)v22 + 5) = 0u;
  *((_OWORD *)v22 + 6) = 0u;
  *((_OWORD *)v22 + 7) = 0u;
  *((_QWORD *)v22 + 16) = v15;
  *((_QWORD *)v22 + 17) = v17;
  v22[144] = 2;
  sub_6B330((uint64_t)v9, v24);
  return sub_6B374(v33);
}

void sub_6B698(double a1, double a2)
{
  void *v2;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  id v10;
  double *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  id v15;
  _QWORD v16[5];
  uint64_t v17;

  objc_msgSend(v2, "size");
  v7 = CGSize.scaledToFit(in:times:horizontally:)(1, 1, a1, a2, v5, v6);
  v9 = v8;
  v10 = objc_msgSend(objc_allocWithZone((Class)UIGraphicsImageRenderer), "initWithSize:", v7, v8);
  v11 = (double *)swift_allocObject(&unk_24DFC8, 40, 7);
  *((_QWORD *)v11 + 2) = v2;
  v11[3] = v7;
  v11[4] = v9;
  v12 = swift_allocObject(&unk_24DFF0, 32, 7);
  *(_QWORD *)(v12 + 16) = sub_6B868;
  *(_QWORD *)(v12 + 24) = v11;
  v16[4] = sub_6B894;
  v17 = v12;
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 1107296256;
  v16[2] = sub_191A74;
  v16[3] = &unk_24E008;
  v13 = _Block_copy(v16);
  v14 = v17;
  v15 = v2;
  swift_retain(v12);
  objc_msgSend(v10, "imageWithActions:", v13, swift_release(v14).n128_f64[0]);

  _Block_release(v13);
  LOBYTE(v10) = swift_isEscapingClosureAtFileLocation(v12, "", 102, 15, 39, 1);
  swift_release(v11);
  swift_release(v12);
  if ((v10 & 1) != 0)
    __break(1u);
}

uint64_t sub_6B844()
{
  uint64_t v0;

  return swift_deallocObject(v0, 40, 7);
}

id sub_6B868()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + 16), "drawInRect:", 0.0, 0.0, *(double *)(v0 + 24), *(double *)(v0 + 32));
}

uint64_t sub_6B884()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_6B894(uint64_t a1)
{
  uint64_t v1;

  return sub_191A54(a1, *(uint64_t (**)(void))(v1 + 16));
}

uint64_t sub_6B89C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_6B8AC(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t ProgressiveBlurMaterial.init(blurRadius:saturationAmount:fillColor:start:end:fadeOffset:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>, double a7@<D4>, double a8@<D5>, double a9@<D6>)
{
  *(double *)a2 = a3;
  *(double *)(a2 + 8) = a4;
  *(_QWORD *)(a2 + 16) = result;
  *(double *)(a2 + 24) = a5;
  *(double *)(a2 + 32) = a6;
  *(double *)(a2 + 40) = a7;
  *(double *)(a2 + 48) = a8;
  *(double *)(a2 + 56) = a9;
  return result;
}

double ProgressiveBlurMaterial.body.getter@<D0>(uint64_t a1@<X8>)
{
  _OWORD *v1;
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  double result;
  __int128 v12;
  _OWORD v13[4];
  _OWORD v14[9];
  uint64_t v15;

  v3 = v1[1];
  v13[0] = *v1;
  v13[1] = v3;
  v4 = v1[3];
  v13[2] = v1[2];
  v13[3] = v4;
  v5 = _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0();
  v7 = v6;
  sub_6B96C((uint64_t)v13, (uint64_t)v14);
  *(_QWORD *)a1 = v5;
  *(_QWORD *)(a1 + 8) = v7;
  v8 = v14[7];
  *(_OWORD *)(a1 + 112) = v14[6];
  *(_OWORD *)(a1 + 128) = v8;
  *(_OWORD *)(a1 + 144) = v14[8];
  *(_QWORD *)(a1 + 160) = v15;
  v9 = v14[3];
  *(_OWORD *)(a1 + 48) = v14[2];
  *(_OWORD *)(a1 + 64) = v9;
  v10 = v14[5];
  *(_OWORD *)(a1 + 80) = v14[4];
  *(_OWORD *)(a1 + 96) = v10;
  result = *(double *)v14;
  v12 = v14[1];
  *(_OWORD *)(a1 + 16) = v14[0];
  *(_OWORD *)(a1 + 32) = v12;
  *(_BYTE *)(a1 + 168) = 0;
  return result;
}

_QWORD *sub_6B96C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *result;
  double v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;

  v4 = *(_QWORD *)a1;
  v5 = *(double *)(a1 + 24);
  v6 = *(double *)(a1 + 32);
  v7 = *(double *)(a1 + 40);
  v8 = *(double *)(a1 + 48);
  v9 = *(double *)(a1 + 56);
  v10 = sub_5440(&qword_260828);
  v11 = swift_allocObject(v10, 64, 7);
  *(_OWORD *)(v11 + 16) = xmmword_1E1CE0;
  v12 = *(_QWORD *)(a1 + 16);
  sub_6CC68(a1);
  *(_QWORD *)(v11 + 32) = Gradient.Stop.init(color:location:)(v12, v9);
  *(_QWORD *)(v11 + 40) = v13;
  v14 = Color.opacity(_:)(0.0);
  *(_QWORD *)(v11 + 48) = Gradient.Stop.init(color:location:)(v14, 1.0);
  *(_QWORD *)(v11 + 56) = v15;
  Gradient.init(stops:)(v11);
  result = LinearGradient.init(gradient:startPoint:endPoint:)(&v32, v5, v6, v7, v8);
  v17 = *(double *)(a1 + 8);
  if (v17 == 1.0)
  {
    v18 = 0.0;
    v19 = 0;
    v20 = 0;
    v21 = 0;
    v22 = 0uLL;
    v23 = 0uLL;
  }
  else
  {
    v19 = _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0();
    v20 = v24;
    v25 = swift_allocObject(v10, 64, 7);
    *(_OWORD *)(v25 + 16) = xmmword_1E1CE0;
    v26 = static Color.black.getter(v25);
    v27 = Gradient.Stop.init(color:location:)(v26, v9);
    *(_QWORD *)(v25 + 32) = v27;
    *(_QWORD *)(v25 + 40) = v28;
    v29 = static Color.clear.getter(v27);
    *(_QWORD *)(v25 + 48) = Gradient.Stop.init(color:location:)(v29, 1.0);
    *(_QWORD *)(v25 + 56) = v30;
    Gradient.init(stops:)(v25);
    result = LinearGradient.init(gradient:startPoint:endPoint:)(&v35, v5, v6, v7, v8);
    v21 = v35;
    v22 = v36;
    v23 = v37;
    v18 = v17;
  }
  v31 = v32;
  *(_QWORD *)a2 = v4;
  *(double *)(a2 + 8) = v5;
  *(double *)(a2 + 16) = v6;
  *(double *)(a2 + 24) = v7;
  *(double *)(a2 + 32) = v8;
  *(double *)(a2 + 40) = v9;
  *(_QWORD *)(a2 + 48) = v31;
  *(_OWORD *)(a2 + 56) = v33;
  *(_OWORD *)(a2 + 72) = v34;
  *(double *)(a2 + 88) = v18;
  *(_QWORD *)(a2 + 96) = v19;
  *(_QWORD *)(a2 + 104) = v20;
  *(_QWORD *)(a2 + 112) = v21;
  *(_OWORD *)(a2 + 120) = v22;
  *(_OWORD *)(a2 + 136) = v23;
  return result;
}

uint64_t sub_6BB3C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &opaque type descriptor for <<opaque return type of ProgressiveBlurMaterial.body>>, 1);
}

uint64_t destroy for ProgressiveBlurMaterial(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 16));
}

uint64_t initializeWithCopy for ProgressiveBlurMaterial(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_retain(v3);
  return a1;
}

_QWORD *assignWithCopy for ProgressiveBlurMaterial(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  *a1 = *a2;
  a1[1] = a2[1];
  v4 = a2[2];
  v5 = a1[2];
  a1[2] = v4;
  swift_retain(v4);
  swift_release(v5);
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  a1[6] = a2[6];
  a1[7] = a2[7];
  return a1;
}

__n128 initializeWithTake for ProgressiveBlurMaterial(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for ProgressiveBlurMaterial(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_release(v4);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  return a1;
}

uint64_t getEnumTagSinglePayload for ProgressiveBlurMaterial(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 64))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ProgressiveBlurMaterial(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 64) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ProgressiveBlurMaterial()
{
  return &type metadata for ProgressiveBlurMaterial;
}

id sub_6BE28()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for BackdropLayerView();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for BackdropLayerView()
{
  return objc_opt_self(_TtC7BooksUIP33_F34AF1168BE2E2E994641C4890A808CD17BackdropLayerView);
}

unint64_t sub_6BE80()
{
  unint64_t result;
  uint64_t v1;

  result = qword_261910;
  if (!qword_261910)
  {
    v1 = sub_7EF8(&qword_261918);
    sub_6BEEC();
    sub_6BF38();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_261910);
  }
  return result;
}

unint64_t sub_6BEEC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_261920;
  if (!qword_261920)
  {
    v1 = sub_7EF8(&qword_261928);
    result = swift_getWitnessTable(&protocol conformance descriptor for ZStack<A>, v1);
    atomic_store(result, (unint64_t *)&qword_261920);
  }
  return result;
}

unint64_t sub_6BF38()
{
  unint64_t result;

  result = qword_261930;
  if (!qword_261930)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for _AllowsHitTestingModifier, &type metadata for _AllowsHitTestingModifier);
    atomic_store(result, (unint64_t *)&qword_261930);
  }
  return result;
}

ValueMetadata *type metadata accessor for SaturationBackdropFilter()
{
  return &type metadata for SaturationBackdropFilter;
}

uint64_t getEnumTagSinglePayload for ProgressiveBlur(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 48))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for ProgressiveBlur(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 48) = v3;
  return result;
}

ValueMetadata *type metadata accessor for ProgressiveBlur()
{
  return &type metadata for ProgressiveBlur;
}

void sub_6BFF4(void *a1)
{
  id v2;
  Class isa;
  NSString v4;
  id v5;
  void *v6;
  void *v7;
  NSString v8;

  v2 = objc_msgSend(a1, "layer");
  isa = CGFloat._bridgeToObjectiveC()().super.super.isa;
  v4 = String._bridgeToObjectiveC()();
  objc_msgSend(v2, "setValue:forKeyPath:", isa, v4);

  v5 = objc_msgSend(a1, "layer");
  sub_6C104();
  v7 = v6;
  v8 = String._bridgeToObjectiveC()();
  objc_msgSend(v5, "setValue:forKeyPath:", v7, v8);

}

void sub_6C104()
{
  __int128 *v0;
  id v1;
  id v2;
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  id v10;
  double v11;
  _QWORD v12[5];
  uint64_t v13;

  v1 = objc_msgSend(objc_allocWithZone((Class)UIGraphicsImageRendererFormat), "init");
  objc_msgSend(v1, "setScale:", 1.0);
  objc_msgSend(v1, "setPreferredRange:", 0x7FFFLL);
  v2 = objc_msgSend(objc_allocWithZone((Class)UIGraphicsImageRenderer), "initWithBounds:format:", v1, 0.0, 0.0, 100.0, 100.0);
  v3 = swift_allocObject(&unk_24E180, 96, 7);
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + 24) = 0;
  v4 = *v0;
  v5 = v0[1];
  *(int64x2_t *)(v3 + 32) = vdupq_n_s64(0x4059000000000000uLL);
  *(_OWORD *)(v3 + 48) = v4;
  v6 = v0[2];
  *(_OWORD *)(v3 + 64) = v5;
  *(_OWORD *)(v3 + 80) = v6;
  v7 = swift_allocObject(&unk_24E1A8, 32, 7);
  *(_QWORD *)(v7 + 16) = sub_6CBEC;
  *(_QWORD *)(v7 + 24) = v3;
  v12[4] = sub_6B894;
  v13 = v7;
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 1107296256;
  v12[2] = sub_191A74;
  v12[3] = &unk_24E1C0;
  v8 = _Block_copy(v12);
  v9 = v13;
  swift_retain(v7);
  v10 = objc_msgSend(v2, "imageWithActions:", v8, swift_release(v9).n128_f64[0]);

  _Block_release(v8);
  LOBYTE(v2) = swift_isEscapingClosureAtFileLocation(v7, "", 106, 199, 83, 1);
  *(_QWORD *)&v11 = swift_release(v7).n128_u64[0];
  if ((v2 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    objc_msgSend(v10, "CGImage", v11);
    swift_release(v3);

  }
}

void sub_6C2E4(void *a1, double *a2, double a3, double a4, double a5, double a6)
{
  id v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  id v21;
  Class isa;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  Class v26;
  id v27;

  v12 = objc_msgSend(objc_allocWithZone((Class)CAGradientLayer), "init");
  objc_msgSend(v12, "setBounds:", a3, a4, a5, a6);
  v13 = sub_5440(&qword_261948);
  v14 = swift_allocObject(v13, 96, 7);
  *(_OWORD *)(v14 + 16) = xmmword_1E1CE0;
  v15 = (void *)objc_opt_self(UIColor);
  v16 = objc_msgSend(v15, "blackColor");
  v17 = objc_msgSend(v16, "CGColor");

  type metadata accessor for CGColor(0);
  v19 = v18;
  *(_QWORD *)(v14 + 56) = v18;
  *(_QWORD *)(v14 + 32) = v17;
  v20 = objc_msgSend(v15, "clearColor");
  v21 = objc_msgSend(v20, "CGColor");

  *(_QWORD *)(v14 + 88) = v19;
  *(_QWORD *)(v14 + 64) = v21;
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v14);
  objc_msgSend(v12, "setColors:", isa);

  v23 = sub_5440(&qword_261960);
  v24 = swift_allocObject(v23, 48, 7);
  *(_OWORD *)(v24 + 16) = xmmword_1E5120;
  *(NSNumber *)(v24 + 32) = Double._bridgeToObjectiveC()();
  sub_10BBC(0, &qword_261968, NSNumber_ptr);
  *(NSNumber *)(v24 + 40) = NSNumber.init(floatLiteral:)(1.0);
  specialized Array._endMutation()();
  v25 = v24;
  v26 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v25);
  objc_msgSend(v12, "setLocations:", v26);

  objc_msgSend(v12, "setStartPoint:", a2[1], a2[2]);
  objc_msgSend(v12, "setEndPoint:", a2[3], a2[4]);
  v27 = objc_msgSend(a1, "CGContext");
  objc_msgSend(v12, "renderInContext:", v27);

}

void sub_6C574(void *a1)
{
  sub_6BFF4(a1);
}

uint64_t sub_6C5BC(uint64_t a1, char a2)
{
  return UIViewRepresentable.sizeThatFits(_:uiView:context:)(a1, a2 & 1);
}

uint64_t sub_6C5FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_6CC24();
  return static UIViewRepresentable._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_6C64C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_6CC24();
  return static UIViewRepresentable._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

void sub_6C69C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_6CC24();
  UIViewRepresentable.body.getter(a1, v2);
  __break(1u);
}

unint64_t sub_6C6C4()
{
  unint64_t result;

  result = qword_261938;
  if (!qword_261938)
  {
    result = swift_getWitnessTable(&unk_1E51FC, &type metadata for ProgressiveBlur);
    atomic_store(result, (unint64_t *)&qword_261938);
  }
  return result;
}

void sub_6C70C(void *a1)
{
  id v1;
  Class isa;
  NSString v3;

  v1 = objc_msgSend(a1, "layer");
  isa = Double._bridgeToObjectiveC()().super.super.isa;
  v3 = String._bridgeToObjectiveC()();
  objc_msgSend(v1, "setValue:forKeyPath:", isa, v3);

}

uint64_t sub_6C7A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_6CB98();
  return static UIViewRepresentable._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_6C7F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_6CB98();
  return static UIViewRepresentable._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

void sub_6C840(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_6CB98();
  UIViewRepresentable.body.getter(a1, v2);
  __break(1u);
}

unint64_t sub_6C868()
{
  unint64_t result;

  result = qword_261940;
  if (!qword_261940)
  {
    result = swift_getWitnessTable(&unk_1E52DC, &type metadata for SaturationBackdropFilter);
    atomic_store(result, (unint64_t *)&qword_261940);
  }
  return result;
}

id sub_6C8AC()
{
  id v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  NSString v4;
  id v5;
  Class isa;
  NSString v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  Class v12;

  v0 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for BackdropLayerView()), "init");
  static String._unconditionallyBridgeFromObjectiveC(_:)(kCAFilterVariableBlur);
  v2 = v1;
  v3 = objc_allocWithZone((Class)CAFilter);
  v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v2);
  v5 = objc_msgSend(v3, "initWithType:", v4);

  isa = Bool._bridgeToObjectiveC()().super.super.isa;
  v7 = String._bridgeToObjectiveC()();
  objc_msgSend(v5, "setValue:forKey:", isa, v7);

  v8 = objc_msgSend(v0, "layer");
  v9 = sub_5440(&qword_261948);
  v10 = swift_allocObject(v9, 64, 7);
  *(_OWORD *)(v10 + 16) = xmmword_1E0B70;
  *(_QWORD *)(v10 + 56) = sub_10BBC(0, &qword_261950, CAFilter_ptr);
  *(_QWORD *)(v10 + 32) = v5;
  v11 = v5;
  v12 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v10);
  objc_msgSend(v8, "setFilters:", v12);

  return v0;
}

id sub_6CA48()
{
  id v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  NSString v4;
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  Class isa;

  v0 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for BackdropLayerView()), "init");
  static String._unconditionallyBridgeFromObjectiveC(_:)(kCAFilterColorSaturate);
  v2 = v1;
  v3 = objc_allocWithZone((Class)CAFilter);
  v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v2);
  v5 = objc_msgSend(v3, "initWithType:", v4);

  v6 = objc_msgSend(v0, "layer");
  v7 = sub_5440(&qword_261948);
  v8 = swift_allocObject(v7, 64, 7);
  *(_OWORD *)(v8 + 16) = xmmword_1E0B70;
  *(_QWORD *)(v8 + 56) = sub_10BBC(0, &qword_261950, CAFilter_ptr);
  *(_QWORD *)(v8 + 32) = v5;
  v9 = v5;
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v8);
  objc_msgSend(v6, "setFilters:", isa);

  return v0;
}

unint64_t sub_6CB98()
{
  unint64_t result;

  result = qword_261958;
  if (!qword_261958)
  {
    result = swift_getWitnessTable(&unk_1E532C, &type metadata for SaturationBackdropFilter);
    atomic_store(result, (unint64_t *)&qword_261958);
  }
  return result;
}

uint64_t sub_6CBDC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 96, 7);
}

void sub_6CBEC(void *a1)
{
  double *v1;

  sub_6C2E4(a1, v1 + 6, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_6CBFC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_6CC0C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_6CC1C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

unint64_t sub_6CC24()
{
  unint64_t result;

  result = qword_261970;
  if (!qword_261970)
  {
    result = swift_getWitnessTable(&unk_1E524C, &type metadata for ProgressiveBlur);
    atomic_store(result, (unint64_t *)&qword_261970);
  }
  return result;
}

uint64_t sub_6CC68(uint64_t a1)
{
  swift_retain(*(_QWORD *)(a1 + 16));
  return a1;
}

uint64_t dispatch thunk of SynchronousNativeIntentDispatching.withNext(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of ListItemMetadata.EyebrowModel.shorterText(localizer:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t BooksFailureView.init<>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (**a3)@<X0>(uint64_t a1@<X8>)@<X8>)
{
  uint64_t result;

  result = swift_allocObject(&unk_24E2B0, 32, 7);
  *(_QWORD *)(result + 16) = a1;
  *(_QWORD *)(result + 24) = a2;
  *a3 = sub_18B10;
  a3[1] = (uint64_t (*)@<X0>(uint64_t@<X8>))result;
  return result;
}

uint64_t SharedWithYouView.init(for:horizontalAlignment:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

uint64_t sub_6CCF8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5;
  uint64_t result;
  uint64_t v7;
  char v8;
  uint64_t v9;
  _QWORD v10[2];

  v10[0] = a1;
  v10[1] = a2;
  v5 = sub_C57C();
  swift_bridgeObjectRetain(a2);
  result = Text.init<A>(_:)(v10, &type metadata for String, v5);
  *(_QWORD *)a3 = result;
  *(_QWORD *)(a3 + 8) = v7;
  *(_BYTE *)(a3 + 16) = v8 & 1;
  *(_QWORD *)(a3 + 24) = v9;
  return result;
}

uint64_t sub_6CD60()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t BooksFailureView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t WitnessTable;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t OpaqueTypeMetadata2;
  uint64_t v22;
  uint64_t v23;
  uint64_t OpaqueTypeConformance2;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __n128 v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  void *v49;
  __n128 v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  void (*v62)(uint64_t, uint64_t);
  uint64_t v63;
  void (*v64)(char *, uint64_t);
  uint64_t v66;
  uint64_t v67;
  char *v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  __int128 v88;
  uint64_t v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  void *v99;
  uint64_t v100;
  void *v101;

  v89 = a2;
  v3 = type metadata accessor for EnabledTextSelectability(0);
  v79 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v86 = (char *)&v66 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for TitleAndIconLabelStyle(0);
  v84 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v83 = (char *)&v66 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(a1 + 24);
  v75 = *(_QWORD *)(a1 + 16);
  v98 = v75;
  v99 = &type metadata for Image;
  v76 = v7;
  v100 = v7;
  v101 = &protocol witness table for Image;
  v8 = type metadata accessor for Label(0, &v98);
  v81 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v77 = (char *)&v66 - v9;
  v10 = sub_7EF8(&qword_25FD90);
  v11 = type metadata accessor for ModifiedContent(0, v8, v10);
  v78 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v13 = (char *)&v66 - v12;
  v14 = type metadata accessor for ModifiedContent(0, v11, v10);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v80 = (char *)&v66 - v16;
  v82 = v8;
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for Label<A, B>, v8);
  v18 = sub_6D49C();
  v66 = WitnessTable;
  v96 = WitnessTable;
  v97 = v18;
  v74 = v11;
  v67 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v11);
  v94 = v67;
  v95 = v18;
  v19 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v14);
  v20 = sub_6D4E8();
  v98 = v14;
  v99 = (void *)v5;
  v100 = v19;
  v101 = (void *)v20;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(0, &v98, &opaque type descriptor for <<opaque return type of View.labelStyle<A>(_:)>>, 0);
  v73 = *(_QWORD *)(OpaqueTypeMetadata2 - 8);
  __chkstk_darwin(OpaqueTypeMetadata2);
  v72 = (char *)&v66 - v22;
  v98 = v14;
  v99 = (void *)v5;
  v85 = v5;
  v70 = v19;
  v100 = v19;
  v101 = (void *)v20;
  v69 = v20;
  v23 = 1;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v98, &opaque type descriptor for <<opaque return type of View.labelStyle<A>(_:)>>, 1);
  v92 = OpaqueTypeMetadata2;
  v98 = OpaqueTypeMetadata2;
  v99 = (void *)v3;
  v90 = (void *)v3;
  v91 = OpaqueTypeConformance2;
  v100 = OpaqueTypeConformance2;
  v101 = &protocol witness table for EnabledTextSelectability;
  v25 = swift_getOpaqueTypeMetadata2(0, &v98, &opaque type descriptor for <<opaque return type of View.textSelection<A>(_:)>>, 0);
  v26 = *(_QWORD *)(v25 - 8);
  v27 = __chkstk_darwin(v25);
  v68 = (char *)&v66 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27);
  v71 = (uint64_t)&v66 - v29;
  v30 = type metadata accessor for Optional(0, v25);
  v87 = *(_QWORD *)(v30 - 8);
  v31 = __chkstk_darwin(v30);
  v33 = (char *)&v66 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = __chkstk_darwin(v31);
  v36 = (char *)&v66 - v35;
  v88 = *(_OWORD *)v88;
  v37 = static Capabilities.isInternalBuild.getter(v34);
  if ((v37 & 1) != 0)
  {
    __chkstk_darwin(v37);
    v38 = v76;
    *(&v66 - 4) = v75;
    *(&v66 - 3) = v38;
    *((_OWORD *)&v66 - 1) = v88;
    *(_QWORD *)&v88 = v36;
    v39 = v77;
    v40 = Label.init(title:icon:)(sub_6D608);
    v41 = static Color.red.getter(v40);
    v75 = v15;
    v42 = v41;
    v76 = v26;
    v43 = v82;
    View.tint(_:)(v41, v82, v66);
    v44 = swift_release(v42);
    v45 = (*(uint64_t (**)(char *, uint64_t, __n128))(v81 + 8))(v39, v43, v44);
    v46 = static Color.red.getter(v45);
    v47 = v80;
    v48 = v74;
    View.foregroundColor(_:)(v46, v74, v67);
    v49 = v90;
    v50 = swift_release(v46);
    v51 = (*(uint64_t (**)(char *, uint64_t, __n128))(v78 + 8))(v13, v48, v50);
    v52 = v83;
    TitleAndIconLabelStyle.init()(v51);
    v82 = v25;
    v53 = v72;
    v54 = v85;
    View.labelStyle<A>(_:)(v52, v14, v85, v70, v69);
    (*(void (**)(char *, uint64_t))(v84 + 8))(v52, v54);
    v55 = (*(uint64_t (**)(char *, uint64_t))(v75 + 8))(v47, v14);
    v56 = v86;
    EnabledTextSelectability.init()(v55);
    v57 = (uint64_t)v68;
    v59 = v91;
    v58 = v92;
    View.textSelection<A>(_:)(v56, v92, v49, v91, &protocol witness table for EnabledTextSelectability);
    (*(void (**)(char *, void *))(v79 + 8))(v56, v49);
    v60 = v53;
    v25 = v82;
    (*(void (**)(char *, uint64_t))(v73 + 8))(v60, v58);
    v98 = v58;
    v99 = v49;
    v36 = (char *)v88;
    v100 = v59;
    v101 = &protocol witness table for EnabledTextSelectability;
    swift_getOpaqueTypeConformance2(&v98, &opaque type descriptor for <<opaque return type of View.textSelection<A>(_:)>>, 1);
    v61 = v71;
    sub_10F80(v57, v25, v71);
    v26 = v76;
    v62 = *(void (**)(uint64_t, uint64_t))(v76 + 8);
    v62(v57, v25);
    sub_C5C0(v61, v25, (uint64_t)v33);
    v62(v61, v25);
    v23 = 0;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v26 + 56))(v33, v23, 1, v25);
  v63 = v87;
  (*(void (**)(char *, char *, uint64_t))(v87 + 16))(v36, v33, v30);
  v64 = *(void (**)(char *, uint64_t))(v63 + 8);
  v64(v33, v30);
  v98 = v92;
  v99 = v90;
  v100 = v91;
  v101 = &protocol witness table for EnabledTextSelectability;
  v93 = swift_getOpaqueTypeConformance2(&v98, &opaque type descriptor for <<opaque return type of View.textSelection<A>(_:)>>, 1);
  swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v30);
  sub_C5C0((uint64_t)v36, v30, v89);
  return ((uint64_t (*)(char *, uint64_t))v64)(v36, v30);
}

unint64_t sub_6D49C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25FD88;
  if (!qword_25FD88)
  {
    v1 = sub_7EF8(&qword_25FD90);
    result = swift_getWitnessTable(&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>, v1);
    atomic_store(result, (unint64_t *)&qword_25FD88);
  }
  return result;
}

unint64_t sub_6D4E8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_261980[0];
  if (!qword_261980[0])
  {
    v1 = type metadata accessor for TitleAndIconLabelStyle(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for TitleAndIconLabelStyle, v1);
    atomic_store(result, qword_261980);
  }
  return result;
}

uint64_t sub_6D530@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void (*v9)(void);
  uint64_t v10;
  char *v11;
  void (*v12)(char *, uint64_t);
  uint64_t v14;

  v5 = *(_QWORD *)(a2 - 8);
  v6 = __chkstk_darwin(a1);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (void (*)(void))__chkstk_darwin(v6);
  v11 = (char *)&v14 - v10;
  v9();
  sub_10F80((uint64_t)v8, a2, (uint64_t)v11);
  v12 = *(void (**)(char *, uint64_t))(v5 + 8);
  v12(v8, a2);
  sub_C5C0((uint64_t)v11, a2, a3);
  return ((uint64_t (*)(char *, uint64_t))v12)(v11, a2);
}

uint64_t sub_6D608@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_6D530(*(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_6D614@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = Image.init(systemName:)(0xD000000000000016, 0x80000000001FB230);
  *a1 = result;
  return result;
}

uint64_t sub_6D650(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  return swift_getOpaqueTypeConformance2(&v3, &opaque type descriptor for <<opaque return type of BooksFailureView.body>>, 1);
}

_QWORD *sub_6D688(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain(v3);
  return a1;
}

_QWORD *sub_6D6B4(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  v4 = a1[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain(v3);
  swift_release(v4);
  return a1;
}

uint64_t sub_6D6EC(uint64_t a1, _OWORD *a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *a2;
  swift_release(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for SharedWithYouContentView(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SharedWithYouContentView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t type metadata accessor for BooksFailureView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10E40(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for BooksFailureView);
}

uint64_t sub_6D7AC(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t WitnessTable;
  unint64_t v8;
  uint64_t OpaqueTypeMetadata2;
  uint64_t v10;
  uint64_t OpaqueTypeConformance2;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  void *v18;

  v1 = a1[1];
  v15 = *a1;
  v16 = &type metadata for Image;
  v17 = v1;
  v18 = &protocol witness table for Image;
  v2 = type metadata accessor for Label(255, &v15);
  v3 = sub_7EF8(&qword_25FD90);
  v4 = type metadata accessor for ModifiedContent(255, v2, v3);
  v5 = type metadata accessor for ModifiedContent(255, v4, v3);
  v6 = type metadata accessor for TitleAndIconLabelStyle(255);
  swift_getWitnessTable(&protocol conformance descriptor for Label<A, B>, v2);
  sub_6D49C();
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v4);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v5);
  v8 = sub_6D4E8();
  v15 = v5;
  v16 = (void *)v6;
  v17 = WitnessTable;
  v18 = (void *)v8;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(255, &v15, &opaque type descriptor for <<opaque return type of View.labelStyle<A>(_:)>>, 0);
  v10 = type metadata accessor for EnabledTextSelectability(255);
  v15 = v5;
  v16 = (void *)v6;
  v17 = WitnessTable;
  v18 = (void *)v8;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v15, &opaque type descriptor for <<opaque return type of View.labelStyle<A>(_:)>>, 1);
  v15 = OpaqueTypeMetadata2;
  v16 = (void *)v10;
  v17 = OpaqueTypeConformance2;
  v18 = &protocol witness table for EnabledTextSelectability;
  v12 = swift_getOpaqueTypeMetadata2(255, &v15, &opaque type descriptor for <<opaque return type of View.textSelection<A>(_:)>>, 0);
  v13 = type metadata accessor for Optional(255, v12);
  v15 = OpaqueTypeMetadata2;
  v16 = (void *)v10;
  v17 = OpaqueTypeConformance2;
  v18 = &protocol witness table for EnabledTextSelectability;
  swift_getOpaqueTypeConformance2(&v15, &opaque type descriptor for <<opaque return type of View.textSelection<A>(_:)>>, 1);
  return swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v13);
}

uint64_t sub_6D96C(uint64_t a1, void (*a2)(uint64_t), uint64_t a3, uint64_t *a4, uint64_t (*a5)(uint64_t))
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;

  v9 = sub_5440(a4);
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v19 - v13;
  a2(a1);
  v15 = sub_B3D0((uint64_t)v14, (uint64_t)v12, a4);
  v16 = a5(v15);
  v17 = AnyView.init<A>(_:)(v12, v9, v16);
  sub_B414((uint64_t)v14, a4);
  return v17;
}

uint64_t sub_6DA4C(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t OpaqueTypeConformance2;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  ValueMetadata *v22;
  uint64_t v23;
  unint64_t v24;

  v4 = sub_5440(&qword_261E70);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v21 - v9;
  a2(a1);
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v8, v10, v4);
  v11 = sub_7EF8(&qword_261E78);
  v12 = type metadata accessor for AutomaticHoverEffect(255);
  v13 = sub_7EF8(&qword_261E80);
  v14 = sub_7FD8(&qword_261E88, &qword_261E80, (uint64_t)&protocol conformance descriptor for Button<A>);
  v15 = sub_7AF08();
  v21 = v13;
  v22 = &type metadata for PressedButtonStyle;
  v23 = v14;
  v24 = v15;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v21, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
  v17 = sub_6FD0((unint64_t *)&qword_25FDF0, (uint64_t (*)(uint64_t))&type metadata accessor for AutomaticHoverEffect, (uint64_t)&protocol conformance descriptor for AutomaticHoverEffect);
  v21 = v11;
  v22 = (ValueMetadata *)v12;
  v23 = OpaqueTypeConformance2;
  v24 = v17;
  v18 = swift_getOpaqueTypeConformance2(&v21, &opaque type descriptor for <<opaque return type of View.hoverEffect<A>(_:isEnabled:)>>, 1);
  v19 = AnyView.init<A>(_:)(v8, v4, v18);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
  return v19;
}

uint64_t TopLockupMetadataView.init(preheader:title:subtitle:author:authorAction:authorImpressionMetrics:narrator:footer:isVibrant:highlightAttributionViewLoader:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, char a10, uint64_t a11)
{
  int *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t result;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v37;
  _QWORD v38[2];

  *(_QWORD *)a9 = swift_getKeyPath(&unk_1E5470);
  *(_BYTE *)(a9 + 8) = 0;
  v18 = (int *)type metadata accessor for TopLockupMetadataView(0);
  v19 = (_QWORD *)(a9 + v18[5]);
  *v19 = swift_getKeyPath(&unk_1E5498);
  v20 = sub_5440(&qword_25F548);
  swift_storeEnumTagMultiPayload(v19, v20, 0);
  v21 = (_QWORD *)(a9 + v18[6]);
  *v21 = swift_getKeyPath(&unk_1E54C0);
  v22 = sub_5440(&qword_25F1E8);
  swift_storeEnumTagMultiPayload(v21, v22, 0);
  v23 = (_QWORD *)(a9 + v18[7]);
  *v23 = swift_getKeyPath(&unk_1E54E8);
  v24 = sub_5440(&qword_25FAA0);
  swift_storeEnumTagMultiPayload(v23, v24, 0);
  v25 = (_QWORD *)(a9 + v18[8]);
  *v25 = swift_getKeyPath(&unk_1E5510);
  v26 = sub_5440(&qword_25F208);
  swift_storeEnumTagMultiPayload(v25, v26, 0);
  v27 = a9 + v18[9];
  *(_QWORD *)v27 = swift_getKeyPath(&unk_1E5538);
  *(_BYTE *)(v27 + 8) = 0;
  sub_B3D0(a1, a9 + v18[11], &qword_261048);
  sub_B3D0(a2, a9 + v18[12], &qword_261048);
  sub_B3D0(a3, a9 + v18[13], &qword_261048);
  sub_B3D0(a4, a9 + v18[14], &qword_261048);
  sub_B3D0(a5, a9 + v18[15], &qword_25E840);
  sub_B3D0(a6, a9 + v18[16], &qword_25FE30);
  sub_B3D0(a7, a9 + v18[17], &qword_261A08);
  sub_B3D0(a8, a9 + v18[18], &qword_261A10);
  *(_BYTE *)(a9 + v18[19]) = a10;
  v37 = a11;
  v28 = type metadata accessor for HighlightAttributionViewLoader(0);
  State.init(wrappedValue:)(v38, &v37, v28);
  sub_B414(a8, &qword_261A10);
  sub_B414(a7, &qword_261A08);
  sub_B414(a6, &qword_25FE30);
  sub_B414(a5, &qword_25E840);
  sub_B414(a4, &qword_261048);
  sub_B414(a3, &qword_261048);
  sub_B414(a2, &qword_261048);
  result = sub_B414(a1, &qword_261048);
  v30 = v38[1];
  v31 = (_QWORD *)(a9 + v18[10]);
  *v31 = v38[0];
  v31[1] = v30;
  return result;
}

uint64_t TopLockupMetadataView.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t KeyPath;
  char *v20;
  uint64_t v21;
  char v22;
  char v23;
  uint64_t v24;
  char *v25;
  uint64_t v27;

  v2 = v1;
  v4 = sub_5440(&qword_261A18);
  __chkstk_darwin(v4);
  v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_5440(&qword_261A20);
  __chkstk_darwin(v7);
  v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_5440(&qword_261A28);
  __chkstk_darwin(v10);
  v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)v2;
  v14 = *(_BYTE *)(v2 + 8);
  sub_F9E4(*(_QWORD *)v2, v14);
  v15 = sub_30DB4(v13, v14);
  v16 = sub_BE0C(v13, v14);
  if ((v15 & 1) != 0)
    v17 = static HorizontalAlignment.center.getter(v16);
  else
    v17 = static HorizontalAlignment.leading.getter(v16);
  *(_QWORD *)v6 = v17;
  *((_QWORD *)v6 + 1) = 0;
  v6[16] = 0;
  v18 = sub_5440(&qword_261A30);
  sub_6E108(v2, (uint64_t)&v6[*(int *)(v18 + 44)]);
  KeyPath = swift_getKeyPath(&unk_1E5560);
  sub_B3D0((uint64_t)v6, (uint64_t)v9, &qword_261A18);
  v20 = &v9[*(int *)(v7 + 36)];
  *(_QWORD *)v20 = KeyPath;
  *((_QWORD *)v20 + 1) = 6;
  v20[16] = 0;
  sub_B414((uint64_t)v6, &qword_261A18);
  v21 = *(_QWORD *)v2;
  v22 = *(_BYTE *)(v2 + 8);
  sub_F9E4(v21, v22);
  v23 = sub_30DB4(v21, v22);
  sub_BE0C(v21, v22);
  v24 = swift_getKeyPath(&unk_1E5590);
  sub_B3D0((uint64_t)v9, (uint64_t)v12, &qword_261A20);
  v25 = &v12[*(int *)(v10 + 36)];
  *(_QWORD *)v25 = v24;
  v25[8] = v23 & 1;
  sub_B414((uint64_t)v9, &qword_261A20);
  return sub_167A4((uint64_t)v12, a1, &qword_261A28);
}

uint64_t sub_6E108@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t (**v108)(uint64_t);
  uint64_t v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  char *v113;
  _QWORD *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  double v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  void (*v124)(char *, _QWORD *);
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t KeyPath;
  uint64_t *v129;
  int *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t *v138;
  BOOL v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  int *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  char v148;
  double v149;
  double v150;
  double v151;
  double v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t (**v161)(uint64_t);
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t *v173;
  int *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t (**v178)(uint64_t);
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t (**v198)(uint64_t);
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t *v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  char v221;
  uint64_t v222;
  char v223;
  char v224;
  uint64_t v225;
  double v226;
  double v227;
  double v228;
  double v229;
  uint64_t v230;
  uint64_t v231;
  double v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t (**v245)(uint64_t);
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t *v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t *v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  char v266;
  uint64_t v267;
  char v268;
  uint64_t v269;
  double v270;
  double v271;
  double v272;
  uint64_t v273;
  uint64_t v274;
  double v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t (**v291)(uint64_t);
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t *v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t *v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  char v311;
  uint64_t v312;
  char v313;
  char v314;
  uint64_t v315;
  double v316;
  double v317;
  double v318;
  double v319;
  uint64_t v320;
  uint64_t v321;
  double v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t *v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  void *v338;
  char *v339;
  uint64_t v340;
  char v341;
  char v342;
  uint64_t v343;
  char *v344;
  unsigned __int8 v345;
  char v346;
  uint64_t v347;
  double v348;
  double v349;
  double v350;
  double v351;
  uint64_t v352;
  uint64_t v353;
  double v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  int *v372;
  uint64_t v373;
  uint64_t v374;
  char *v375;
  uint64_t v377;
  char *v378;
  char *v379;
  uint64_t v380;
  char *v381;
  char *v382;
  char *v383;
  uint64_t v384;
  char *v385;
  uint64_t v386;
  char *v387;
  char *v388;
  uint64_t v389;
  uint64_t v390;
  char *v391;
  char *v392;
  uint64_t v393;
  char *v394;
  uint64_t v395;
  uint64_t v396;
  char *v397;
  char *v398;
  uint64_t v399;
  char *v400;
  uint64_t v401;
  char *v402;
  char *v403;
  char *v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  char *v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  _QWORD *v453;
  char *v454;
  uint64_t v455;
  uint64_t v456;
  char *v457;
  unint64_t v458;
  _QWORD v459[2];
  uint64_t v460;

  v425 = a2;
  v3 = sub_5440(&qword_261A10);
  __chkstk_darwin(v3);
  v413 = (uint64_t)&v377 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v415 = sub_5440(&qword_261C00);
  v5 = __chkstk_darwin(v415);
  v414 = (uint64_t)&v377 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v418 = (uint64_t)&v377 - v7;
  v416 = sub_5440(&qword_261C08);
  __chkstk_darwin(v416);
  v438 = (uint64_t)&v377 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v419 = sub_5440(&qword_261C10);
  __chkstk_darwin(v419);
  v397 = (char *)&v377 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v396 = sub_5440(&qword_261C18);
  __chkstk_darwin(v396);
  v398 = (char *)&v377 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v422 = sub_5440(&qword_261C20);
  v11 = __chkstk_darwin(v422);
  v424 = (uint64_t)&v377 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v11);
  v421 = (uint64_t)&v377 - v14;
  __chkstk_darwin(v13);
  v429 = (uint64_t)&v377 - v15;
  v16 = sub_5440(&qword_261A08);
  __chkstk_darwin(v16);
  v406 = (uint64_t)&v377 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v408 = sub_5440(&qword_261C28);
  v18 = __chkstk_darwin(v408);
  v407 = (uint64_t)&v377 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v391 = (char *)&v377 - v20;
  v409 = sub_5440(&qword_261C30);
  __chkstk_darwin(v409);
  v392 = (char *)&v377 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v410 = sub_5440(&qword_261C38);
  __chkstk_darwin(v410);
  v435 = (uint64_t)&v377 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v393 = sub_5440(&qword_261C40);
  __chkstk_darwin(v393);
  v394 = (char *)&v377 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v412 = sub_5440(&qword_261C48);
  v24 = __chkstk_darwin(v412);
  v423 = (uint64_t)&v377 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = __chkstk_darwin(v24);
  v411 = (uint64_t)&v377 - v27;
  __chkstk_darwin(v26);
  v428 = (uint64_t)&v377 - v28;
  v29 = type metadata accessor for SizeConstants.Spacing(0);
  __chkstk_darwin(v29);
  v427 = (uint64_t)&v377 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = type metadata accessor for SizeConstants(0);
  __chkstk_darwin(v31);
  v426 = (uint64_t)&v377 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v456 = type metadata accessor for BlendMode(0);
  v448 = *(_QWORD *)(v456 - 8);
  v33 = __chkstk_darwin(v456);
  v395 = (uint64_t)&v377 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = __chkstk_darwin(v33);
  v390 = (uint64_t)&v377 - v36;
  v37 = __chkstk_darwin(v35);
  v389 = (uint64_t)&v377 - v38;
  v39 = __chkstk_darwin(v37);
  v386 = (uint64_t)&v377 - v40;
  v41 = __chkstk_darwin(v39);
  v384 = (uint64_t)&v377 - v42;
  __chkstk_darwin(v41);
  v380 = (uint64_t)&v377 - v43;
  v44 = type metadata accessor for ColorConstants(0);
  __chkstk_darwin(v44);
  v449 = (uint64_t)&v377 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = sub_5440(&qword_25FE08);
  __chkstk_darwin(v46);
  v454 = (char *)&v377 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  v453 = (_QWORD *)type metadata accessor for Font.TextStyle(0);
  v430 = *(v453 - 1);
  __chkstk_darwin(v453);
  v402 = (char *)&v377 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = type metadata accessor for FontConstants(0);
  __chkstk_darwin(v49);
  v457 = (char *)&v377 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = type metadata accessor for TopLockupMetadataView(0);
  v52 = *(_QWORD *)(v51 - 8);
  v53 = (int *)v51;
  v54 = *(_QWORD *)(v52 + 64);
  __chkstk_darwin(v51);
  v55 = (char *)&v377 - ((v54 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = sub_5440(&qword_261048);
  __chkstk_darwin(v56);
  v58 = (char *)&v377 - ((v57 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = sub_5440(&qword_261050);
  v60 = __chkstk_darwin(v59);
  v62 = (char *)&v377 - ((v61 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v60);
  v399 = (uint64_t)&v377 - v63;
  v450 = sub_5440(&qword_261C50);
  v64 = __chkstk_darwin(v450);
  v405 = (uint64_t)&v377 - ((v65 + 15) & 0xFFFFFFFFFFFFFFF0);
  v66 = __chkstk_darwin(v64);
  v432 = (uint64_t)&v377 - v67;
  v68 = __chkstk_darwin(v66);
  v431 = (uint64_t)&v377 - v69;
  __chkstk_darwin(v68);
  v400 = (char *)&v377 - v70;
  v451 = sub_5440(&qword_261C58);
  v71 = __chkstk_darwin(v451);
  v434 = (uint64_t)&v377 - ((v72 + 15) & 0xFFFFFFFFFFFFFFF0);
  v73 = __chkstk_darwin(v71);
  v383 = (char *)&v377 - v74;
  v75 = __chkstk_darwin(v73);
  v381 = (char *)&v377 - v76;
  __chkstk_darwin(v75);
  v379 = (char *)&v377 - v77;
  v452 = sub_5440(&qword_261C60);
  v78 = __chkstk_darwin(v452);
  v420 = (uint64_t)&v377 - ((v79 + 15) & 0xFFFFFFFFFFFFFFF0);
  v80 = __chkstk_darwin(v78);
  v439 = (uint64_t)&v377 - v81;
  v82 = __chkstk_darwin(v80);
  v388 = (char *)&v377 - v83;
  v84 = __chkstk_darwin(v82);
  v382 = (char *)&v377 - v85;
  v86 = __chkstk_darwin(v84);
  v447 = (uint64_t)&v377 - v87;
  v88 = __chkstk_darwin(v86);
  v403 = (char *)&v377 - v89;
  v90 = __chkstk_darwin(v88);
  v446 = (uint64_t)&v377 - v91;
  __chkstk_darwin(v90);
  v378 = (char *)&v377 - v92;
  v433 = sub_5440(&qword_261C68);
  v93 = __chkstk_darwin(v433);
  v417 = (uint64_t)&v377 - ((v94 + 15) & 0xFFFFFFFFFFFFFFF0);
  v95 = __chkstk_darwin(v93);
  v437 = (uint64_t)&v377 - v96;
  v97 = __chkstk_darwin(v95);
  v387 = (char *)&v377 - v98;
  v99 = __chkstk_darwin(v97);
  v436 = (uint64_t)&v377 - v100;
  v101 = __chkstk_darwin(v99);
  v401 = (uint64_t)&v377 - v102;
  __chkstk_darwin(v101);
  v445 = (uint64_t)&v377 - v103;
  v458 = (unint64_t)v53;
  sub_B3D0(a1 + v53[11], (uint64_t)v58, &qword_261048);
  sub_1E428(a1, (uint64_t)v55, type metadata accessor for TopLockupMetadataView);
  v104 = *(unsigned __int8 *)(v52 + 80);
  v105 = (v104 + 16) & ~v104;
  v442 = v105 + v54;
  v441 = v104 | 7;
  v106 = swift_allocObject(&unk_24E368, v105 + v54, v104 | 7);
  v443 = v105;
  v444 = v55;
  sub_79CC8((uint64_t)v55, v106 + v105);
  v404 = v58;
  sub_167A4((uint64_t)v58, (uint64_t)v62, &qword_261048);
  v107 = swift_allocObject(&unk_24E390, 32, 7);
  *(_QWORD *)(v107 + 16) = sub_79D0C;
  *(_QWORD *)(v107 + 24) = v106;
  v440 = v59;
  v108 = (uint64_t (**)(uint64_t))&v62[*(int *)(v59 + 28)];
  *v108 = sub_79D3C;
  v108[1] = (uint64_t (*)(uint64_t))v107;
  v385 = v62;
  v109 = v399;
  sub_167A4((uint64_t)v62, v399, &qword_261050);
  v110 = a1;
  v111 = v457;
  v455 = a1 + v53[7];
  sub_32164((uint64_t)v457);
  v112 = v430;
  v113 = v402;
  v114 = v453;
  (*(void (**)(char *, _QWORD, _QWORD *))(v430 + 104))(v402, enum case for Font.TextStyle.caption(_:), v453);
  v115 = enum case for Font.Design.rounded(_:);
  v116 = type metadata accessor for Font.Design(0);
  v117 = *(_QWORD *)(v116 - 8);
  v118 = (uint64_t)v454;
  (*(void (**)(char *, uint64_t, uint64_t))(v117 + 104))(v454, v115, v116);
  v119 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v117 + 56))(v118, 0, 1, v116);
  v120 = static Font.Weight.semibold.getter(v119);
  v121 = v113;
  v122 = v110;
  v123 = static Font.system(_:design:weight:)(v121, v118, *(_QWORD *)&v120, 0);
  sub_B414(v118, &qword_25FE08);
  v124 = *(void (**)(char *, _QWORD *))(v112 + 8);
  v125 = (uint64_t)v400;
  v124(v121, v114);
  v126 = (uint64_t)v111;
  v127 = v109;
  sub_224DC(v126, type metadata accessor for FontConstants);
  KeyPath = swift_getKeyPath(&unk_1E56A0);
  sub_B3D0(v109, v125, &qword_261050);
  v129 = (uint64_t *)(v125 + *(int *)(v450 + 36));
  *v129 = KeyPath;
  v129[1] = v123;
  v130 = (int *)v458;
  sub_B414(v109, &qword_261050);
  v131 = v130[19];
  v132 = v449;
  if (*(_BYTE *)(v110 + v131) == 1)
  {
    _s7BooksUI18BuyButtonExternalsV6colorsAA14ColorConstantsVvg_0(v449);
    v133 = _s7BooksUI14ColorConstantsV14vibrantPrimary05SwiftB00C0Vvg_0();
    sub_224DC(v132, type metadata accessor for ColorConstants);
  }
  else
  {
    v133 = _s7BooksUI14ColorConstantsV14vibrantPrimary05SwiftB00C0Vvg_0();
  }
  v134 = (uint64_t)v381;
  v135 = (uint64_t)v379;
  v136 = (uint64_t)v378;
  v137 = swift_getKeyPath(&unk_1E56D0);
  sub_B3D0(v125, v135, &qword_261C50);
  v138 = (uint64_t *)(v135 + *(int *)(v451 + 36));
  *v138 = v137;
  v138[1] = v133;
  sub_B414(v125, &qword_261C50);
  v139 = *(_BYTE *)(v122 + v131) == 1;
  v430 = v131;
  if (v139)
  {
    v144 = (int *)v458;
    v140 = v380;
    sub_31660(v380);
    v142 = v140;
    v143 = v456;
    v141 = v448;
  }
  else
  {
    v141 = v448;
    v142 = v380;
    v143 = v456;
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v448 + 104))(v380, enum case for BlendMode.normal(_:), v456);
    v144 = (int *)v458;
  }
  v145 = v136 + *(int *)(v452 + 36);
  v454 = *(char **)(v141 + 16);
  ((void (*)(uint64_t, uint64_t, uint64_t))v454)(v145, v142, v143);
  sub_B3D0(v135, v136, &qword_261C58);
  v453 = *(_QWORD **)(v141 + 8);
  ((void (*)(uint64_t, uint64_t))v453)(v142, v143);
  v146 = sub_B414(v135, &qword_261C58);
  v147 = static Edge.Set.bottom.getter(v146);
  v148 = v147;
  v152 = EdgeInsets.init(_all:)(v147, 14.0, v149, v150, v151);
  v154 = v153;
  v156 = v155;
  v158 = v157;
  v159 = v401;
  sub_B3D0(v136, v401, &qword_261C60);
  v160 = v159 + *(int *)(v433 + 36);
  *(_BYTE *)v160 = v148;
  *(double *)(v160 + 8) = v152;
  *(_QWORD *)(v160 + 16) = v154;
  *(_QWORD *)(v160 + 24) = v156;
  *(_QWORD *)(v160 + 32) = v158;
  *(_BYTE *)(v160 + 40) = 0;
  sub_B414(v136, &qword_261C60);
  sub_167A4(v159, v445, &qword_261C68);
  sub_B3D0(v122 + v144[12], v127, &qword_261048);
  v161 = (uint64_t (**)(uint64_t))(v127 + *(int *)(v440 + 28));
  *v161 = sub_5A554;
  v161[1] = 0;
  v162 = (uint64_t)v457;
  sub_32164((uint64_t)v457);
  v163 = sub_70DC8((unsigned int *)&enum case for Font.TextStyle.title2(_:), (unsigned int *)&enum case for Font.TextStyle.title(_:), (double (*)(uint64_t))&static Font.Weight.bold.getter);
  sub_224DC(v162, type metadata accessor for FontConstants);
  v164 = swift_getKeyPath(&unk_1E56A0);
  v165 = v431;
  sub_B3D0(v127, v431, &qword_261050);
  v166 = (uint64_t *)(v165 + *(int *)(v450 + 36));
  *v166 = v164;
  v166[1] = v163;
  sub_B414(v127, &qword_261050);
  v167 = v430;
  if (*(_BYTE *)(v122 + v430) == 1)
  {
    v168 = v449;
    _s7BooksUI18BuyButtonExternalsV6colorsAA14ColorConstantsVvg_0(v449);
    v169 = _s7BooksUI14ColorConstantsV14vibrantPrimary05SwiftB00C0Vvg_0();
    sub_224DC(v168, type metadata accessor for ColorConstants);
  }
  else
  {
    v169 = _s7BooksUI14ColorConstantsV14vibrantPrimary05SwiftB00C0Vvg_0();
  }
  v170 = (uint64_t)v383;
  v171 = swift_getKeyPath(&unk_1E56D0);
  v172 = v431;
  sub_B3D0(v431, v134, &qword_261C50);
  v173 = (uint64_t *)(v134 + *(int *)(v451 + 36));
  *v173 = v171;
  v173[1] = v169;
  sub_B414(v172, &qword_261C50);
  if (*(_BYTE *)(v122 + v167) == 1)
  {
    v174 = (int *)v458;
    v175 = v384;
    sub_31660(v384);
    v176 = v456;
  }
  else
  {
    v175 = v384;
    v176 = v456;
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v448 + 104))(v384, enum case for BlendMode.normal(_:), v456);
    v174 = (int *)v458;
  }
  v177 = (uint64_t)v403;
  ((void (*)(char *, uint64_t, uint64_t))v454)(&v403[*(int *)(v452 + 36)], v175, v176);
  sub_B3D0(v134, v177, &qword_261C58);
  ((void (*)(uint64_t, uint64_t))v453)(v175, v176);
  sub_B414(v134, &qword_261C58);
  sub_167A4(v177, v446, &qword_261C60);
  sub_B3D0(v122 + v174[13], v127, &qword_261048);
  v178 = (uint64_t (**)(uint64_t))(v127 + *(int *)(v440 + 28));
  *v178 = sub_5A554;
  v178[1] = 0;
  v179 = (uint64_t)v457;
  sub_32164((uint64_t)v457);
  v180 = sub_70DC8((unsigned int *)&enum case for Font.TextStyle.body(_:), (unsigned int *)&enum case for Font.TextStyle.title2(_:), (double (*)(uint64_t))&static Font.Weight.semibold.getter);
  sub_224DC(v179, type metadata accessor for FontConstants);
  v181 = swift_getKeyPath(&unk_1E56A0);
  v182 = v432;
  sub_B3D0(v127, v432, &qword_261050);
  v183 = (uint64_t *)(v182 + *(int *)(v450 + 36));
  *v183 = v181;
  v183[1] = v180;
  sub_B414(v127, &qword_261050);
  v184 = v430;
  if (*(_BYTE *)(v122 + v430) == 1)
  {
    v185 = v449;
    _s7BooksUI18BuyButtonExternalsV6colorsAA14ColorConstantsVvg_0(v449);
    v186 = _s7BooksUI14ColorConstantsV14vibrantPrimary05SwiftB00C0Vvg_0();
    sub_224DC(v185, type metadata accessor for ColorConstants);
  }
  else
  {
    v186 = _s7BooksUI14ColorConstantsV14vibrantPrimary05SwiftB00C0Vvg_0();
  }
  v187 = (uint64_t)v385;
  v188 = swift_getKeyPath(&unk_1E56D0);
  v189 = v432;
  sub_B3D0(v432, v170, &qword_261C50);
  v190 = (uint64_t *)(v170 + *(int *)(v451 + 36));
  *v190 = v188;
  v190[1] = v186;
  sub_B414(v189, &qword_261C50);
  v191 = v386;
  if (*(_BYTE *)(v122 + v184) == 1)
  {
    sub_31660(v386);
    v192 = (uint64_t)v382;
    v193 = v456;
  }
  else
  {
    v193 = v456;
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v448 + 104))(v386, enum case for BlendMode.normal(_:), v456);
    v192 = (uint64_t)v382;
  }
  ((void (*)(uint64_t, uint64_t, uint64_t))v454)(v192 + *(int *)(v452 + 36), v191, v193);
  sub_B3D0(v170, v192, &qword_261C58);
  ((void (*)(uint64_t, uint64_t))v453)(v191, v193);
  sub_B414(v170, &qword_261C58);
  sub_167A4(v192, v447, &qword_261C60);
  v194 = (uint64_t)v404;
  sub_B3D0(v122 + v174[14], (uint64_t)v404, &qword_261048);
  v195 = (uint64_t)v444;
  sub_1E428(v122, (uint64_t)v444, type metadata accessor for TopLockupMetadataView);
  v196 = swift_allocObject(&unk_24E3B8, v442, v441);
  sub_79CC8(v195, v196 + v443);
  sub_167A4(v194, v187, &qword_261048);
  v197 = swift_allocObject(&unk_24E3E0, 32, 7);
  *(_QWORD *)(v197 + 16) = sub_7A198;
  *(_QWORD *)(v197 + 24) = v196;
  v198 = (uint64_t (**)(uint64_t))(v187 + *(int *)(v440 + 28));
  *v198 = sub_7A200;
  v198[1] = (uint64_t (*)(uint64_t))v197;
  sub_167A4(v187, v127, &qword_261050);
  v199 = (uint64_t)v457;
  sub_32164((uint64_t)v457);
  v200 = sub_71C80();
  sub_224DC(v199, type metadata accessor for FontConstants);
  v201 = swift_getKeyPath(&unk_1E56A0);
  v202 = v405;
  sub_B3D0(v127, v405, &qword_261050);
  v203 = (uint64_t *)(v202 + *(int *)(v450 + 36));
  *v203 = v201;
  v203[1] = v200;
  sub_B414(v127, &qword_261050);
  v204 = v184;
  if (*(_BYTE *)(v122 + v184) == 1)
  {
    v205 = v449;
    _s7BooksUI18BuyButtonExternalsV6colorsAA14ColorConstantsVvg_0(v449);
    v206 = _s7BooksUI14ColorConstantsV14vibrantPrimary05SwiftB00C0Vvg_0();
    sub_224DC(v205, type metadata accessor for ColorConstants);
  }
  else
  {
    v206 = _s7BooksUI14ColorConstantsV14vibrantPrimary05SwiftB00C0Vvg_0();
  }
  v207 = (uint64_t)v392;
  v208 = (uint64_t)v388;
  v209 = swift_getKeyPath(&unk_1E56D0);
  v210 = v202;
  v211 = v202;
  v212 = v434;
  sub_B3D0(v210, v434, &qword_261C50);
  v213 = (uint64_t *)(v212 + *(int *)(v451 + 36));
  *v213 = v209;
  v213[1] = v206;
  sub_B414(v211, &qword_261C50);
  v214 = v204;
  v215 = v389;
  if (*(_BYTE *)(v122 + v204) == 1)
  {
    sub_31660(v389);
    v216 = (uint64_t)v387;
    v217 = (uint64_t)v391;
    v218 = v456;
  }
  else
  {
    v218 = v456;
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v448 + 104))(v389, enum case for BlendMode.normal(_:), v456);
    v216 = (uint64_t)v387;
    v217 = (uint64_t)v391;
  }
  ((void (*)(uint64_t, uint64_t, uint64_t))v454)(v208 + *(int *)(v452 + 36), v215, v218);
  v219 = v434;
  sub_B3D0(v434, v208, &qword_261C58);
  ((void (*)(uint64_t, uint64_t))v453)(v215, v218);
  v220 = sub_B414(v219, &qword_261C58);
  v221 = static Edge.Set.top.getter(v220);
  v222 = *(_QWORD *)v122;
  v223 = *(_BYTE *)(v122 + 8);
  sub_F9E4(*(_QWORD *)v122, v223);
  v224 = sub_30DB4(v222, v223);
  v225 = sub_BE0C(v222, v223);
  v229 = 10.0;
  if ((v224 & 1) != 0)
  {
    v230 = v426;
    sub_3168C(v426);
    v231 = v427;
    sub_1E428(v230, v427, type metadata accessor for SizeConstants.Environment);
    sub_224DC(v230, type metadata accessor for SizeConstants);
    v225 = sub_224DC(v231, type metadata accessor for SizeConstants.Spacing);
    v229 = 8.0;
  }
  v232 = EdgeInsets.init(_all:)(v225, v229, v226, v227, v228);
  v234 = v233;
  v236 = v235;
  v238 = v237;
  sub_B3D0(v208, v216, &qword_261C60);
  v239 = v216 + *(int *)(v433 + 36);
  *(_BYTE *)v239 = v221;
  *(double *)(v239 + 8) = v232;
  *(_QWORD *)(v239 + 16) = v234;
  *(_QWORD *)(v239 + 24) = v236;
  *(_QWORD *)(v239 + 32) = v238;
  *(_BYTE *)(v239 + 40) = 0;
  sub_B414(v208, &qword_261C60);
  sub_167A4(v216, v436, &qword_261C68);
  v240 = v406;
  sub_B3D0(v122 + *(int *)(v458 + 68), v406, &qword_261A08);
  v241 = (uint64_t)v444;
  sub_1E428(v122, (uint64_t)v444, type metadata accessor for TopLockupMetadataView);
  v242 = swift_allocObject(&unk_24E408, v442, v441);
  sub_79CC8(v241, v242 + v443);
  v243 = v407;
  sub_167A4(v240, v407, &qword_261A08);
  v244 = swift_allocObject(&unk_24E430, 32, 7);
  *(_QWORD *)(v244 + 16) = sub_7A22C;
  *(_QWORD *)(v244 + 24) = v242;
  v245 = (uint64_t (**)(uint64_t))(v243 + *(int *)(v408 + 28));
  *v245 = sub_7A238;
  v245[1] = (uint64_t (*)(uint64_t))v244;
  sub_167A4(v243, v217, &qword_261C28);
  v246 = (uint64_t)v457;
  sub_32164((uint64_t)v457);
  v247 = sub_71C80();
  sub_224DC(v246, type metadata accessor for FontConstants);
  v248 = swift_getKeyPath(&unk_1E56A0);
  sub_B3D0(v217, v207, &qword_261C28);
  v249 = (uint64_t *)(v207 + *(int *)(v409 + 36));
  *v249 = v248;
  v249[1] = v247;
  sub_B414(v217, &qword_261C28);
  if (*(_BYTE *)(v122 + v214) == 1)
  {
    v250 = v449;
    _s7BooksUI18BuyButtonExternalsV6colorsAA14ColorConstantsVvg_0(v449);
    v251 = _s7BooksUI14ColorConstantsV19booksSecondaryLabel05SwiftB00C0Vvg_0();
    v252 = Color.opacity(_:)(0.8);
    swift_release(v251);
    sub_224DC(v250, type metadata accessor for ColorConstants);
  }
  else
  {
    v252 = _s7BooksUI14ColorConstantsV19booksSecondaryLabel05SwiftB00C0Vvg_0();
  }
  v253 = swift_getKeyPath(&unk_1E56D0);
  v254 = v207;
  v255 = v207;
  v256 = v435;
  sub_B3D0(v254, v435, &qword_261C30);
  v257 = (uint64_t *)(v256 + *(int *)(v410 + 36));
  *v257 = v253;
  v257[1] = v252;
  sub_B414(v255, &qword_261C30);
  v258 = v390;
  if (*(_BYTE *)(v122 + v214) == 1)
  {
    sub_31660(v390);
    v259 = (uint64_t)v394;
    v260 = v393;
    v261 = (uint64_t)v398;
    v262 = v428;
    v263 = v456;
  }
  else
  {
    v263 = v456;
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v448 + 104))(v390, enum case for BlendMode.normal(_:), v456);
    v259 = (uint64_t)v394;
    v260 = v393;
    v261 = (uint64_t)v398;
    v262 = v428;
  }
  ((void (*)(uint64_t, uint64_t, uint64_t))v454)(v259 + *(int *)(v260 + 36), v258, v263);
  v264 = v435;
  sub_B3D0(v435, v259, &qword_261C38);
  ((void (*)(uint64_t, uint64_t))v453)(v258, v263);
  v265 = sub_B414(v264, &qword_261C38);
  v266 = static Edge.Set.top.getter(v265);
  v267 = *(_QWORD *)v122;
  LOBYTE(v264) = *(_BYTE *)(v122 + 8);
  sub_F9E4(*(_QWORD *)v122, v264);
  v268 = sub_30DB4(v267, v264);
  v269 = sub_BE0C(v267, v264);
  if ((v268 & 1) == 0)
  {
    v273 = v426;
    sub_3168C(v426);
    v274 = v427;
    sub_1E428(v273, v427, type metadata accessor for SizeConstants.Environment);
    sub_224DC(v273, type metadata accessor for SizeConstants);
    v269 = sub_224DC(v274, type metadata accessor for SizeConstants.Spacing);
  }
  v275 = EdgeInsets.init(_all:)(v269, 2.0, v270, v271, v272);
  v277 = v276;
  v279 = v278;
  v281 = v280;
  v282 = v411;
  sub_B3D0(v259, v411, &qword_261C40);
  v283 = v282 + *(int *)(v412 + 36);
  *(_BYTE *)v283 = v266;
  *(double *)(v283 + 8) = v275;
  *(_QWORD *)(v283 + 16) = v277;
  *(_QWORD *)(v283 + 24) = v279;
  *(_QWORD *)(v283 + 32) = v281;
  *(_BYTE *)(v283 + 40) = 0;
  sub_B414(v259, &qword_261C40);
  v284 = v262;
  sub_167A4(v282, v262, &qword_261C48);
  v285 = v413;
  sub_B3D0(v122 + *(int *)(v458 + 72), v413, &qword_261A10);
  v286 = (uint64_t)v444;
  sub_1E428(v122, (uint64_t)v444, type metadata accessor for TopLockupMetadataView);
  v287 = swift_allocObject(&unk_24E458, v442, v441);
  sub_79CC8(v286, v287 + v443);
  v288 = v285;
  v289 = v414;
  sub_167A4(v288, v414, &qword_261A10);
  v290 = swift_allocObject(&unk_24E480, 32, 7);
  *(_QWORD *)(v290 + 16) = sub_7A264;
  *(_QWORD *)(v290 + 24) = v287;
  v291 = (uint64_t (**)(uint64_t))(v289 + *(int *)(v415 + 28));
  *v291 = sub_7A270;
  v291[1] = (uint64_t (*)(uint64_t))v290;
  v292 = v418;
  sub_167A4(v289, v418, &qword_261C00);
  v293 = (uint64_t)v457;
  sub_32164((uint64_t)v457);
  v294 = sub_71C80();
  sub_224DC(v293, type metadata accessor for FontConstants);
  v295 = swift_getKeyPath(&unk_1E56A0);
  v296 = v438;
  sub_B3D0(v292, v438, &qword_261C00);
  v297 = (uint64_t *)(v296 + *(int *)(v416 + 36));
  *v297 = v295;
  v297[1] = v294;
  sub_B414(v292, &qword_261C00);
  if (*(_BYTE *)(v122 + v214) == 1)
  {
    v298 = v449;
    _s7BooksUI18BuyButtonExternalsV6colorsAA14ColorConstantsVvg_0(v449);
    v299 = _s7BooksUI14ColorConstantsV19booksSecondaryLabel05SwiftB00C0Vvg_0();
    v300 = Color.opacity(_:)(0.8);
    swift_release(v299);
    sub_224DC(v298, type metadata accessor for ColorConstants);
  }
  else
  {
    v300 = _s7BooksUI14ColorConstantsV19booksSecondaryLabel05SwiftB00C0Vvg_0();
  }
  v301 = (uint64_t)v397;
  v302 = v284;
  v303 = swift_getKeyPath(&unk_1E56D0);
  v304 = v438;
  sub_B3D0(v438, v301, &qword_261C08);
  v305 = (uint64_t *)(v301 + *(int *)(v419 + 36));
  *v305 = v303;
  v305[1] = v300;
  sub_B414(v304, &qword_261C08);
  v306 = v395;
  if (*(_BYTE *)(v122 + v214) == 1)
  {
    sub_31660(v395);
    v307 = v396;
    v308 = v456;
  }
  else
  {
    v308 = v456;
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v448 + 104))(v395, enum case for BlendMode.normal(_:), v456);
    v307 = v396;
  }
  v309 = v429;
  ((void (*)(uint64_t, uint64_t, uint64_t))v454)(v261 + *(int *)(v307 + 36), v306, v308);
  sub_B3D0(v301, v261, &qword_261C10);
  ((void (*)(uint64_t, uint64_t))v453)(v306, v308);
  v310 = sub_B414(v301, &qword_261C10);
  v311 = static Edge.Set.top.getter(v310);
  v312 = *(_QWORD *)v122;
  v313 = *(_BYTE *)(v122 + 8);
  sub_F9E4(*(_QWORD *)v122, v313);
  v314 = sub_30DB4(v312, v313);
  v315 = sub_BE0C(v312, v313);
  v319 = 10.0;
  if ((v314 & 1) != 0)
  {
    v320 = v426;
    sub_3168C(v426);
    v321 = v427;
    sub_1E428(v320, v427, type metadata accessor for SizeConstants.Environment);
    sub_224DC(v320, type metadata accessor for SizeConstants);
    v315 = sub_224DC(v321, type metadata accessor for SizeConstants.Spacing);
    v319 = 8.0;
  }
  v322 = EdgeInsets.init(_all:)(v315, v319, v316, v317, v318);
  v324 = v323;
  v326 = v325;
  v328 = v327;
  v329 = v421;
  sub_B3D0(v261, v421, &qword_261C18);
  v330 = v329 + *(int *)(v422 + 36);
  *(_BYTE *)v330 = v311;
  *(double *)(v330 + 8) = v322;
  *(_QWORD *)(v330 + 16) = v324;
  *(_QWORD *)(v330 + 24) = v326;
  *(_QWORD *)(v330 + 32) = v328;
  *(_BYTE *)(v330 + 40) = 0;
  sub_B414(v261, &qword_261C18);
  sub_167A4(v329, v309, &qword_261C20);
  v331 = (uint64_t *)(v122 + *(int *)(v458 + 40));
  v333 = *v331;
  v332 = v331[1];
  v459[0] = v333;
  v459[1] = v332;
  v334 = sub_5440(&qword_261C70);
  State.wrappedValue.getter(&v460, v334);
  v335 = v460;
  v336 = swift_getKeyPath(&unk_1E5700);
  v459[0] = v335;
  v337 = sub_6FD0((unint64_t *)&qword_261C78, type metadata accessor for HighlightAttributionViewLoader, (uint64_t)&protocol conformance descriptor for HighlightAttributionViewLoader);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v459, v336, v337);
  swift_release(v336);
  v338 = *(void **)(v335 + 16);
  v339 = v338;
  swift_release(v335);
  v456 = (uint64_t)v338;
  v457 = v339;
  if (v338)
  {
    v340 = *(_QWORD *)v122;
    v341 = *(_BYTE *)(v122 + 8);
    sub_F9E4(*(_QWORD *)v122, v341);
    v342 = sub_30DB4(v340, v341);
    sub_BE0C(v340, v341);
    if ((v342 & 1) != 0)
      v343 = 2;
    else
      v343 = 1;
    v344 = v339;
    v345 = static Edge.Set.top.getter(v344);
    sub_F9E4(v340, v341);
    v346 = sub_30DB4(v340, v341);
    v347 = sub_BE0C(v340, v341);
    v351 = 10.0;
    if ((v346 & 1) != 0)
    {
      v352 = v426;
      sub_3168C(v426);
      v353 = v427;
      sub_1E428(v352, v427, type metadata accessor for SizeConstants.Environment);
      sub_224DC(v352, type metadata accessor for SizeConstants);
      v347 = sub_224DC(v353, type metadata accessor for SizeConstants.Spacing);
      v351 = 8.0;
    }
    v354 = EdgeInsets.init(_all:)(v347, v351, v348, v349, v350);
    v356 = v355;
    v358 = v357;
    v360 = v359;

    v458 = v345;
    v455 = v343;
  }
  else
  {
    v455 = 0;
    v458 = 0;
    v354 = 0.0;
    v356 = 0;
    v358 = 0;
    v360 = 0;
  }
  v361 = v437;
  sub_B3D0(v445, v437, &qword_261C68);
  v362 = v439;
  sub_B3D0(v446, v439, &qword_261C60);
  v363 = v420;
  sub_B3D0(v447, v420, &qword_261C60);
  v364 = v436;
  v365 = v417;
  sub_B3D0(v436, v417, &qword_261C68);
  v366 = v302;
  v367 = v423;
  sub_B3D0(v366, v423, &qword_261C48);
  v368 = v309;
  v369 = v424;
  sub_B3D0(v368, v424, &qword_261C20);
  v370 = v361;
  v371 = v425;
  sub_B3D0(v370, v425, &qword_261C68);
  v372 = (int *)sub_5440(&qword_261C80);
  sub_B3D0(v362, v371 + v372[12], &qword_261C60);
  sub_B3D0(v363, v371 + v372[16], &qword_261C60);
  sub_B3D0(v365, v371 + v372[20], &qword_261C68);
  sub_B3D0(v367, v371 + v372[24], &qword_261C48);
  sub_B3D0(v369, v371 + v372[28], &qword_261C20);
  v373 = v371 + v372[32];
  v374 = v455;
  *(_QWORD *)v373 = v456;
  *(_QWORD *)(v373 + 8) = v374;
  *(_QWORD *)(v373 + 16) = v458;
  *(double *)(v373 + 24) = v354;
  *(_QWORD *)(v373 + 32) = v356;
  *(_QWORD *)(v373 + 40) = v358;
  *(_QWORD *)(v373 + 48) = v360;
  *(_BYTE *)(v373 + 56) = 0;
  v375 = v457;
  sub_B414(v429, &qword_261C20);
  sub_B414(v428, &qword_261C48);
  sub_B414(v364, &qword_261C68);
  sub_B414(v447, &qword_261C60);
  sub_B414(v446, &qword_261C60);
  sub_B414(v445, &qword_261C68);

  sub_B414(v369, &qword_261C20);
  sub_B414(v367, &qword_261C48);
  sub_B414(v365, &qword_261C68);
  sub_B414(v363, &qword_261C60);
  sub_B414(v439, &qword_261C60);
  return sub_B414(v437, &qword_261C68);
}

uint64_t sub_70470@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t OpaqueTypeConformance2;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE v35[16];
  uint64_t v36;
  uint64_t v37;
  _QWORD v38[4];

  v30 = a1;
  v33 = a3;
  v32 = type metadata accessor for AutomaticHoverEffect(0);
  v34 = *(_QWORD *)(v32 - 8);
  __chkstk_darwin(v32);
  v5 = (char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for TopLockupMetadataView(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  __chkstk_darwin(v6);
  v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_5440(&qword_261E80);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_5440(&qword_261E78);
  v31 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v16 = (char *)&v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1E428(a2, (uint64_t)v9, type metadata accessor for TopLockupMetadataView);
  v17 = *(unsigned __int8 *)(v7 + 80);
  v18 = (v17 + 16) & ~v17;
  v19 = swift_allocObject(&unk_24E520, v18 + v8, v17 | 7);
  sub_79CC8((uint64_t)v9, v19 + v18);
  v36 = a2;
  v37 = v30;
  v20 = sub_5440(&qword_261E90);
  v21 = sub_7B10C();
  Button.init(action:label:)(sub_7B0FC, v19, sub_7B104, v35, v20, v21);
  v22 = sub_7FD8(&qword_261E88, &qword_261E80, (uint64_t)&protocol conformance descriptor for Button<A>);
  v23 = sub_7AF08();
  View.buttonStyle<A>(_:)(v23, v10, &type metadata for PressedButtonStyle, v22);
  v24 = (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  static CustomHoverEffect<>.automatic.getter(v24);
  v38[0] = v10;
  v38[1] = &type metadata for PressedButtonStyle;
  v38[2] = v22;
  v38[3] = v23;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v38, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
  v26 = sub_6FD0((unint64_t *)&qword_25FDF0, (uint64_t (*)(uint64_t))&type metadata accessor for AutomaticHoverEffect, (uint64_t)&protocol conformance descriptor for AutomaticHoverEffect);
  v27 = v32;
  View.hoverEffect<A>(_:isEnabled:)(v5, 1, v14, v32, OpaqueTypeConformance2, v26);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v5, v27);
  return (*(uint64_t (**)(char *, uint64_t))(v31 + 8))(v16, v14);
}

uint64_t sub_7071C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v12;

  v6 = sub_5440(&qword_261EA8);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v9 = static HorizontalAlignment.center.getter(v7);
  *((_QWORD *)v9 + 1) = 0;
  v9[16] = 1;
  v10 = sub_5440(&qword_261EB0);
  sub_707F0(a1, a2, (uint64_t)&v9[*(int *)(v10 + 44)]);
  sub_B3D0((uint64_t)v9, a3, &qword_261EA8);
  *(_WORD *)(a3 + *(int *)(sub_5440(&qword_261E90) + 36)) = 1;
  return sub_B414((uint64_t)v9, &qword_261EA8);
}

uint64_t sub_707F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, _QWORD, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t KeyPath;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _OWORD *v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  _OWORD v97[10];
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char v101;
  uint64_t v102;
  char v103;
  __int128 v104;
  uint64_t v105;
  char v106;
  uint64_t v107;
  char v108;
  __int128 v109;

  v72 = a2;
  v66 = a1;
  v75 = a3;
  v3 = sub_5440(&qword_261D70);
  __chkstk_darwin(v3);
  v5 = (char *)&v64 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for ColorConstants(0);
  __chkstk_darwin(v6);
  v65 = (uint64_t)&v64 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_5440(&qword_25FE08);
  __chkstk_darwin(v8);
  v10 = (char *)&v64 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Font.TextStyle(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v64 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for FontConstants(0);
  __chkstk_darwin(v15);
  v17 = (char *)&v64 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v67 = v17;
  v69 = sub_5440(&qword_261D58);
  __chkstk_darwin(v69);
  v68 = (uint64_t)&v64 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v71 = sub_5440(&qword_261EB8);
  v19 = __chkstk_darwin(v71);
  v74 = (uint64_t)&v64 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __chkstk_darwin(v19);
  v70 = (uint64_t)&v64 - v22;
  __chkstk_darwin(v21);
  v73 = (uint64_t)&v64 - v23;
  v24 = type metadata accessor for TopLockupMetadataView(0);
  sub_32164((uint64_t)v17);
  v25 = *(void (**)(char *, _QWORD, uint64_t))(v12 + 104);
  v26 = v12;
  v27 = v11;
  v25(v14, enum case for Font.TextStyle.caption(_:), v11);
  v28 = enum case for Font.Design.rounded(_:);
  v29 = type metadata accessor for Font.Design(0);
  v30 = *(_QWORD *)(v29 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v30 + 104))(v10, v28, v29);
  v31 = (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v10, 0, 1, v29);
  v32 = static Font.Weight.semibold.getter(v31);
  v33 = static Font.system(_:design:weight:)(v14, v10, *(_QWORD *)&v32, 0);
  sub_B414((uint64_t)v10, &qword_25FE08);
  v34 = v14;
  v35 = v66;
  (*(void (**)(char *, uint64_t))(v26 + 8))(v34, v27);
  sub_224DC((uint64_t)v67, type metadata accessor for FontConstants);
  if (*(_BYTE *)(v35 + *(int *)(v24 + 76)) == 1)
  {
    v36 = v65;
    _s7BooksUI18BuyButtonExternalsV6colorsAA14ColorConstantsVvg_0(v65);
    v37 = _s7BooksUI14ColorConstantsV14vibrantPrimary05SwiftB00C0Vvg_0();
    v38 = sub_224DC(v36, type metadata accessor for ColorConstants);
  }
  else
  {
    v38 = _s7BooksUI14ColorConstantsV14vibrantPrimary05SwiftB00C0Vvg_0();
    v37 = v38;
  }
  *(_QWORD *)v5 = static HorizontalAlignment.center.getter(v38);
  *((_QWORD *)v5 + 1) = 0;
  v5[16] = 1;
  v39 = sub_5440(&qword_261D78);
  sub_7417C(0, v72, v33, v37, v35, (uint64_t)&v5[*(int *)(v39 + 44)]);
  v40 = v68;
  sub_B3D0((uint64_t)v5, v68, &qword_261D70);
  *(_WORD *)(v40 + *(int *)(v69 + 36)) = 256;
  sub_B414((uint64_t)v5, &qword_261D70);
  swift_release(v33);
  swift_release(v37);
  KeyPath = swift_getKeyPath(&unk_1E5560);
  v42 = v70;
  sub_B3D0(v40, v70, &qword_261D58);
  v43 = v42 + *(int *)(v71 + 36);
  *(_QWORD *)v43 = KeyPath;
  *(_QWORD *)(v43 + 8) = 1;
  *(_BYTE *)(v43 + 16) = 0;
  sub_B414(v40, &qword_261D58);
  v44 = v73;
  sub_167A4(v42, v73, &qword_261EB8);
  v45 = _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0();
  _FrameLayout.init(width:height:alignment:)(&v100, 0, 1, 0x4000000000000000, 0, v45, v46);
  v105 = v100;
  v106 = v101;
  v107 = v102;
  v108 = v103;
  v109 = v104;
  v47 = _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0();
  sub_87974(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)&v76, 0.0, 1, 0.0, 1, v47, v48);
  v49 = _s7BooksUI14ColorConstantsV19booksSecondaryLabel05SwiftB00C0Vvg_0();
  v50 = swift_getKeyPath(&unk_1E56D0);
  v51 = v74;
  sub_B3D0(v44, v74, &qword_261EB8);
  v52 = v75;
  sub_B3D0(v51, v75, &qword_261EB8);
  v53 = (_OWORD *)(v52 + *(int *)(sub_5440(&qword_261EC0) + 48));
  v92 = v82;
  v93 = v83;
  v94 = v84;
  v95 = v85;
  v90 = v80;
  v91 = v81;
  v54 = v78;
  v88 = v78;
  v89 = v79;
  v86 = v76;
  v87 = v77;
  *(_QWORD *)&v96 = v50;
  *((_QWORD *)&v96 + 1) = v49;
  v55 = v83;
  v56 = v85;
  v57 = v96;
  v53[8] = v84;
  v53[9] = v56;
  v58 = v89;
  v59 = v90;
  v53[2] = v54;
  v53[3] = v58;
  v60 = v91;
  v61 = v92;
  v53[4] = v59;
  v53[5] = v60;
  v53[6] = v61;
  v53[7] = v55;
  v62 = v87;
  *v53 = v86;
  v53[1] = v62;
  v53[10] = v57;
  sub_7B190((uint64_t)&v86);
  sub_B414(v44, &qword_261EB8);
  v97[6] = v82;
  v97[7] = v83;
  v97[8] = v84;
  v97[9] = v85;
  v97[2] = v78;
  v97[3] = v79;
  v97[4] = v80;
  v97[5] = v81;
  v97[0] = v76;
  v97[1] = v77;
  v98 = v50;
  v99 = v49;
  sub_7B1C0((uint64_t)v97);
  return sub_B414(v51, &qword_261EB8);
}

uint64_t sub_70DC8(unsigned int *a1, unsigned int *a2, double (*a3)(uint64_t))
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;
  int v18;
  uint64_t (*v19)(_QWORD);
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  uint64_t v29;

  v7 = v3;
  v8 = sub_5440(&qword_25FE08);
  __chkstk_darwin(v8);
  v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Font.TextStyle(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for FontConstants(0);
  __chkstk_darwin(v15);
  v17 = (unsigned __int8 *)&v29 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = *(unsigned __int8 *)(v7 + 1);
  sub_1E428(v7, (uint64_t)v17, v19);
  if (v18 == 1)
  {
    sub_224DC((uint64_t)v17, type metadata accessor for FontConstants);
    v20 = *a1;
  }
  else
  {
    v21 = *v17;
    sub_224DC((uint64_t)v17, type metadata accessor for FontConstants);
    if (v21 == 1)
      v20 = *a1;
    else
      v20 = *a2;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 104))(v14, v20, v11);
  v22 = enum case for Font.Design.serif (_:);
  v23 = type metadata accessor for Font.Design(0);
  v24 = *(_QWORD *)(v23 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v24 + 104))(v10, v22, v23);
  v25 = (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v10, 0, 1, v23);
  v26 = a3(v25);
  v27 = static Font.system(_:design:weight:)(v14, v10, *(_QWORD *)&v26, 0);
  sub_B414((uint64_t)v10, &qword_25FE08);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  return v27;
}

uint64_t sub_70FB0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  int *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char v41;
  char v42;
  unsigned __int8 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  void (*v59)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  int *v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t (**v77)@<X0>(uint64_t@<X8>);
  uint64_t v78;
  unint64_t v79;
  char *v80;
  uint64_t v81;
  char *v82;
  uint64_t OpaqueTypeConformance2;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  unint64_t v105;
  char *v106;
  uint64_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  char *v121;
  char *v122;
  char *v123;
  uint64_t v124;
  char *v125;
  char *v126;
  uint64_t v127;
  char *v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  __int128 v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t v153;
  uint64_t v154;
  ValueMetadata *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;

  v135 = a1;
  v147 = a3;
  v149 = sub_5440(&qword_261E58);
  v134 = *(_QWORD *)(v149 - 8);
  v4 = __chkstk_darwin(v149);
  v132 = (char *)&v117 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v133 = (char *)&v117 - v6;
  v145 = sub_5440(&qword_261E60);
  __chkstk_darwin(v145);
  v146 = (char *)&v117 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for ImpressionsCalculator.Configuration(0);
  v140 = *(_QWORD *)(v8 - 8);
  v141 = v8;
  __chkstk_darwin(v8);
  v139 = (char *)&v117 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v143 = type metadata accessor for AutomaticHoverEffect(0);
  v130 = *(_QWORD *)(v143 - 8);
  __chkstk_darwin(v143);
  v128 = (char *)&v117 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DataStackID(0);
  __chkstk_darwin(v11);
  v120 = (char *)&v117 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_5440(qword_25E3E8);
  __chkstk_darwin(v13);
  v121 = (char *)&v117 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v136 = sub_5440(&qword_261E40);
  __chkstk_darwin(v136);
  v122 = (char *)&v117 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v137 = sub_5440(&qword_261E38);
  v124 = *(_QWORD *)(v137 - 8);
  __chkstk_darwin(v137);
  v123 = (char *)&v117 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v142 = sub_5440(&qword_261E30);
  v127 = *(_QWORD *)(v142 - 8);
  __chkstk_darwin(v142);
  v126 = (char *)&v117 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v144 = sub_5440(&qword_261E68);
  v131 = *(_QWORD *)(v144 - 8);
  v18 = __chkstk_darwin(v144);
  v125 = (char *)&v117 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v129 = (char *)&v117 - v20;
  v21 = sub_5440(&qword_261D70);
  __chkstk_darwin(v21);
  v23 = (char *)&v117 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = type metadata accessor for ColorConstants(0);
  __chkstk_darwin(v24);
  v26 = (char *)&v117 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = type metadata accessor for FontConstants(0);
  __chkstk_darwin(v27);
  v29 = (char *)&v117 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = (int *)type metadata accessor for TopLockupMetadataView(0);
  __chkstk_darwin(v30);
  v32 = (char *)&v117 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v148 = sub_5440(&qword_261D58);
  v117 = *(_QWORD *)(v148 - 8);
  v33 = __chkstk_darwin(v148);
  v119 = (uint64_t)&v117 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v118 = v34;
  __chkstk_darwin(v33);
  v138 = (uint64_t)&v117 - v35;
  v36 = a2 + v30[15];
  sub_B3D0(v36, (uint64_t)&v154, &qword_25E840);
  v37 = v157;
  sub_B414((uint64_t)&v154, &qword_25E840);
  v38 = a2;
  sub_1E428(a2, (uint64_t)v32, type metadata accessor for TopLockupMetadataView);
  if (v37)
  {
    v39 = &v32[v30[9]];
    v40 = *(_QWORD *)v39;
    v41 = v39[8];
    sub_F9E4(*(_QWORD *)v39, v41);
    v42 = sub_30DB4(v40, v41);
    sub_BE0C(v40, v41);
    sub_224DC((uint64_t)v32, type metadata accessor for TopLockupMetadataView);
    if ((v42 & 1) != 0)
    {
      v43 = 0;
      goto LABEL_6;
    }
  }
  else
  {
    sub_224DC((uint64_t)v32, type metadata accessor for TopLockupMetadataView);
  }
  v43 = 2;
LABEL_6:
  v44 = v38;
  sub_32164((uint64_t)v29);
  v45 = sub_71C80();
  sub_224DC((uint64_t)v29, type metadata accessor for FontConstants);
  if (*(_BYTE *)(v38 + v30[19]) == 1)
  {
    _s7BooksUI18BuyButtonExternalsV6colorsAA14ColorConstantsVvg_0((uint64_t)v26);
    v46 = _s7BooksUI14ColorConstantsV14vibrantPrimary05SwiftB00C0Vvg_0();
    v47 = sub_224DC((uint64_t)v26, type metadata accessor for ColorConstants);
  }
  else
  {
    v47 = _s7BooksUI14ColorConstantsV14vibrantPrimary05SwiftB00C0Vvg_0();
    v46 = v47;
  }
  v48 = v148;
  v49 = v149;
  v50 = v135;
  *(_QWORD *)v23 = static HorizontalAlignment.center.getter(v47);
  *((_QWORD *)v23 + 1) = 0;
  v23[16] = 1;
  v51 = sub_5440(&qword_261D78);
  sub_7417C(v43, v50, v45, v46, v44, (uint64_t)&v23[*(int *)(v51 + 44)]);
  v52 = v138;
  sub_B3D0((uint64_t)v23, v138, &qword_261D70);
  *(_WORD *)(v52 + *(int *)(v48 + 36)) = 256;
  sub_B414((uint64_t)v23, &qword_261D70);
  swift_release(v45);
  swift_release(v46);
  sub_B3D0(v36, (uint64_t)&v150, &qword_25E840);
  if (v152)
  {
    sub_AC68(&v150, (uint64_t)&v154);
    v53 = v44 + v30[9];
    v54 = *(_QWORD *)v53;
    v55 = *(_BYTE *)(v53 + 8);
    sub_F9E4(*(_QWORD *)v53, v55);
    v56 = v44;
    v57 = sub_30DB4(v54, v55);
    sub_BE0C(v54, v55);
    if ((v57 & 1) != 0)
    {
      v58 = type metadata accessor for ButtonRole(0);
      v59 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v58 - 8) + 56);
      v135 = v56;
      v60 = (uint64_t)v121;
      v59(v121, 1, 1, v58);
      v61 = v157;
      v62 = v158;
      v63 = sub_5480(&v154, v157);
      v152 = v61;
      v153 = *(_QWORD *)(v62 + 8);
      v64 = sub_C404(&v150);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v61 - 8) + 16))(v64, v63, v61);
      v65 = v119;
      sub_B3D0(v52, v119, &qword_261D58);
      v66 = *(unsigned __int8 *)(v117 + 80);
      v67 = (v66 + 16) & ~v66;
      v68 = swift_allocObject(&unk_24E4F8, v67 + v118, v66 | 7);
      v69 = sub_167A4(v65, v68 + v67, &qword_261D58);
      v70 = v120;
      static DataStackID.additionalEventData.getter(v69);
      v71 = (uint64_t)v122;
      AppAnalyticsData.init(_:)(v70);
      v72 = (int *)v136;
      v73 = v71 + *(int *)(v136 + 36);
      *(_QWORD *)v73 = swift_getKeyPath(&unk_1E5758);
      *(_BYTE *)(v73 + 8) = 0;
      v74 = (_QWORD *)(v71 + v72[10]);
      *v74 = swift_getKeyPath(&unk_1E5788);
      v75 = sub_5440(&qword_25E818);
      swift_storeEnumTagMultiPayload(v74, v75, 0);
      v76 = v71 + v72[11];
      *(_QWORD *)v76 = swift_getKeyPath(&unk_1E57B8);
      *(_BYTE *)(v76 + 40) = 0;
      sub_167A4(v60, v71 + v72[12], qword_25E3E8);
      sub_167A4((uint64_t)&v150, v71 + v72[13], &qword_25E820);
      v77 = (uint64_t (**)@<X0>(uint64_t@<X8>))(v71 + v72[14]);
      *v77 = sub_7B08C;
      v77[1] = (uint64_t (*)@<X0>(uint64_t@<X8>))v68;
      v78 = sub_7FD8(&qword_261E48, &qword_261E40, (uint64_t)&protocol conformance descriptor for BooksActionButton<A>);
      v79 = sub_7AF08();
      v80 = v123;
      View.buttonStyle<A>(_:)(v79, v72, &type metadata for PressedButtonStyle, v78);
      v81 = sub_B414(v71, &qword_261E40);
      v82 = v128;
      static CustomHoverEffect<>.automatic.getter(v81);
      *(_QWORD *)&v150 = v72;
      *((_QWORD *)&v150 + 1) = &type metadata for PressedButtonStyle;
      v151 = v78;
      v152 = v79;
      OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v150, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
      v84 = sub_6FD0((unint64_t *)&qword_25FDF0, (uint64_t (*)(uint64_t))&type metadata accessor for AutomaticHoverEffect, (uint64_t)&protocol conformance descriptor for AutomaticHoverEffect);
      v85 = v126;
      v86 = v137;
      v87 = v143;
      View.hoverEffect<A>(_:isEnabled:)(v82, 1, v137, v143, OpaqueTypeConformance2, v84);
      (*(void (**)(char *, uint64_t))(v130 + 8))(v82, v87);
      v88 = (*(uint64_t (**)(char *, uint64_t))(v124 + 8))(v80, v86);
      v89 = v135 + v30[16];
      v90 = v139;
      static ImpressionsCalculator.Configuration.half.getter(v88);
      *(_QWORD *)&v150 = v86;
      *((_QWORD *)&v150 + 1) = v87;
      v151 = OpaqueTypeConformance2;
      v152 = v84;
      v91 = swift_getOpaqueTypeConformance2(&v150, &opaque type descriptor for <<opaque return type of View.hoverEffect<A>(_:isEnabled:)>>, 1);
      v92 = v125;
      v93 = v142;
      View.impressionable(_:configuration:position:definesParentContext:)(v89, v90, 0, 1, 0, v142, v91);
      (*(void (**)(char *, uint64_t))(v140 + 8))(v90, v141);
      (*(void (**)(char *, uint64_t))(v127 + 8))(v85, v93);
      v94 = v131;
      v95 = v129;
      v96 = v144;
      (*(void (**)(char *, char *, uint64_t))(v131 + 32))(v129, v92, v144);
      v97 = v146;
      (*(void (**)(char *, char *, uint64_t))(v94 + 16))(v146, v95, v96);
      swift_storeEnumTagMultiPayload(v97, v145, 0);
      *(_QWORD *)&v150 = v93;
      *((_QWORD *)&v150 + 1) = v91;
      v98 = swift_getOpaqueTypeConformance2(&v150, &opaque type descriptor for <<opaque return type of View.impressionable(_:configuration:position:definesParentContext:)>>, 1);
      v99 = sub_7A36C();
      *(_QWORD *)&v150 = v148;
      *((_QWORD *)&v150 + 1) = v99;
      v100 = swift_getOpaqueTypeConformance2(&v150, &opaque type descriptor for <<opaque return type of View.impressionable(_:configuration:position:definesParentContext:)>>, 1);
      _ConditionalContent<>.init(storage:)(v97, v96, v149, v98, v100);
      (*(void (**)(char *, uint64_t))(v94 + 8))(v95, v96);
      sub_B414(v52, &qword_261D58);
      return _s7BooksUI13AnyPagedFrameVwxx_0(&v154);
    }
    v102 = _s7BooksUI13AnyPagedFrameVwxx_0(&v154);
    v44 = v56;
  }
  else
  {
    v102 = sub_B414((uint64_t)&v150, &qword_25E840);
  }
  v103 = v44 + v30[16];
  v104 = v139;
  static ImpressionsCalculator.Configuration.half.getter(v102);
  v105 = sub_7A36C();
  v106 = v132;
  View.impressionable(_:configuration:position:definesParentContext:)(v103, v104, 0, 1, 0, v48, v105);
  (*(void (**)(char *, uint64_t))(v140 + 8))(v104, v141);
  v107 = v134;
  v108 = v133;
  (*(void (**)(char *, char *, uint64_t))(v134 + 32))(v133, v106, v49);
  v109 = v146;
  (*(void (**)(char *, char *, uint64_t))(v107 + 16))(v146, v108, v49);
  swift_storeEnumTagMultiPayload(v109, v145, 1);
  v110 = sub_7FD8(&qword_261E48, &qword_261E40, (uint64_t)&protocol conformance descriptor for BooksActionButton<A>);
  v111 = sub_7AF08();
  v154 = v136;
  v155 = &type metadata for PressedButtonStyle;
  v156 = v110;
  v157 = v111;
  v112 = swift_getOpaqueTypeConformance2(&v154, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
  v113 = sub_6FD0((unint64_t *)&qword_25FDF0, (uint64_t (*)(uint64_t))&type metadata accessor for AutomaticHoverEffect, (uint64_t)&protocol conformance descriptor for AutomaticHoverEffect);
  v154 = v137;
  v155 = (ValueMetadata *)v143;
  v156 = v112;
  v157 = v113;
  v114 = swift_getOpaqueTypeConformance2(&v154, &opaque type descriptor for <<opaque return type of View.hoverEffect<A>(_:isEnabled:)>>, 1);
  v154 = v142;
  v155 = (ValueMetadata *)v114;
  v115 = swift_getOpaqueTypeConformance2(&v154, &opaque type descriptor for <<opaque return type of View.impressionable(_:configuration:position:definesParentContext:)>>, 1);
  v154 = v48;
  v155 = (ValueMetadata *)v105;
  v116 = swift_getOpaqueTypeConformance2(&v154, &opaque type descriptor for <<opaque return type of View.impressionable(_:configuration:position:definesParentContext:)>>, 1);
  _ConditionalContent<>.init(storage:)(v109, v144, v49, v115, v116);
  (*(void (**)(char *, uint64_t))(v107 + 8))(v108, v49);
  return sub_B414(v52, &qword_261D58);
}

uint64_t sub_71C80()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  int v12;
  uint64_t (*v13)(_QWORD);
  unsigned int *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  uint64_t v21;

  v1 = v0;
  v2 = sub_5440(&qword_25FE08);
  __chkstk_darwin(v2);
  v4 = (char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Font.TextStyle(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for FontConstants(0);
  __chkstk_darwin(v9);
  v11 = (unsigned __int8 *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(unsigned __int8 *)(v1 + 1);
  sub_1E428(v1, (uint64_t)v11, v13);
  if (v12 == 1)
  {
    sub_224DC((uint64_t)v11, type metadata accessor for FontConstants);
    v14 = (unsigned int *)&enum case for Font.TextStyle.subheadline(_:);
  }
  else
  {
    v15 = *v11;
    sub_224DC((uint64_t)v11, type metadata accessor for FontConstants);
    v14 = (unsigned int *)&enum case for Font.TextStyle.title3(_:);
    if (v15)
      v14 = (unsigned int *)&enum case for Font.TextStyle.subheadline(_:);
  }
  (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v8, *v14, v5);
  v16 = type metadata accessor for Font.Design(0);
  v17 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v4, 1, 1, v16);
  v18 = static Font.Weight.medium.getter(v17);
  v19 = static Font.system(_:design:weight:)(v8, v4, *(_QWORD *)&v18, 0);
  sub_B414((uint64_t)v4, &qword_25FE08);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return v19;
}

uint64_t sub_71E3C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int8 v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v34 = a3;
  v5 = sub_5440(&qword_261D70);
  __chkstk_darwin(v5);
  v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for ColorConstants(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for FontConstants(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_5440(&qword_261A38);
  __chkstk_darwin(v14);
  v16 = (char *)&v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = sub_5440(&qword_261D58);
  __chkstk_darwin(v32);
  v18 = (char *)&v31 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = *(int *)(v14 + 48);
  v20 = type metadata accessor for LocalizerRequest(0);
  v21 = *(_QWORD *)(v20 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v16, a1, v20);
  v33 = a1;
  v22 = *(unsigned __int8 *)(a1 + v19);
  v16[v19] = v22;
  (*(void (**)(char *, uint64_t))(v21 + 8))(v16, v20);
  v23 = type metadata accessor for TopLockupMetadataView(0);
  sub_32164((uint64_t)v13);
  v24 = sub_71C80();
  sub_224DC((uint64_t)v13, type metadata accessor for FontConstants);
  if (*(_BYTE *)(a2 + *(int *)(v23 + 76)) == 1)
  {
    _s7BooksUI18BuyButtonExternalsV6colorsAA14ColorConstantsVvg_0((uint64_t)v10);
    v25 = _s7BooksUI14ColorConstantsV19booksSecondaryLabel05SwiftB00C0Vvg_0();
    v26 = Color.opacity(_:)(0.8);
    swift_release(v25);
    v27 = sub_224DC((uint64_t)v10, type metadata accessor for ColorConstants);
  }
  else
  {
    v27 = _s7BooksUI14ColorConstantsV19booksSecondaryLabel05SwiftB00C0Vvg_0();
    v26 = v27;
  }
  *(_QWORD *)v7 = static HorizontalAlignment.center.getter(v27);
  *((_QWORD *)v7 + 1) = 0;
  v7[16] = 1;
  v28 = (uint64_t)&v7[*(int *)(sub_5440(&qword_261D78) + 44)];
  if (v22)
    v29 = 1;
  else
    v29 = 2;
  sub_7417C(v29, v33, v24, v26, a2, v28);
  sub_B3D0((uint64_t)v7, (uint64_t)v18, &qword_261D70);
  *(_WORD *)&v18[*(int *)(v32 + 36)] = 256;
  sub_B414((uint64_t)v7, &qword_261D70);
  swift_release(v24);
  swift_release(v26);
  return sub_167A4((uint64_t)v18, v34, &qword_261D58);
}

uint64_t sub_72110@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char v27;
  char v28;
  uint64_t KeyPath;
  uint64_t v30;
  char *v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v33 = a1;
  v38 = a3;
  v4 = type metadata accessor for AccessibilityChildBehavior(0);
  v35 = *(_QWORD *)(v4 - 8);
  v36 = v4;
  __chkstk_darwin(v4);
  v6 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_5440(&qword_261C98);
  __chkstk_darwin(v7);
  v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = sub_5440(&qword_261CA8);
  v10 = *(_QWORD *)(v37 - 8);
  __chkstk_darwin(v37);
  v12 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = sub_5440(&qword_261C88);
  v13 = __chkstk_darwin(v34);
  v15 = (char *)&v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = static Axis.Set.horizontal.getter(v13);
  v17 = v16;
  v18 = static Axis.Set.vertical.getter(v16);
  v19 = Axis.Set.init(rawValue:)(0);
  v20 = Axis.Set.init(rawValue:)(v19);
  if (Axis.Set.init(rawValue:)(v20 & v17) != v17)
    v19 = Axis.Set.init(rawValue:)(v19 | v17);
  v21 = Axis.Set.init(rawValue:)(v19);
  if (Axis.Set.init(rawValue:)(v21 & v18) != v18)
    LOBYTE(v19) = Axis.Set.init(rawValue:)(v19 | v18);
  *v9 = v19;
  v22 = sub_5440(&qword_261CB0);
  v23 = sub_723C4(a2, v33, (uint64_t)&v9[*(int *)(v22 + 44)]);
  static AccessibilityChildBehavior.combine.getter(v23);
  v24 = sub_7FD8(&qword_261CA0, &qword_261C98, (uint64_t)&protocol conformance descriptor for ViewThatFits<A>);
  View.accessibilityElement(children:)(v6, v7, v24);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v6, v36);
  sub_B414((uint64_t)v9, &qword_261C98);
  v25 = *(_QWORD *)a2;
  v26 = *(_BYTE *)(a2 + 8);
  sub_F9E4(*(_QWORD *)a2, v26);
  v27 = sub_30DB4(v25, v26);
  sub_BE0C(v25, v26);
  v28 = v27 & 1;
  KeyPath = swift_getKeyPath(&unk_1E5590);
  v30 = v37;
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v15, v12, v37);
  v31 = &v15[*(int *)(v34 + 36)];
  *(_QWORD *)v31 = KeyPath;
  v31[8] = v28;
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v30);
  return sub_167A4((uint64_t)v15, v38, &qword_261C88);
}

uint64_t sub_723C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;

  v61 = a2;
  v68 = a3;
  v4 = sub_5440(&qword_261CB8);
  v5 = __chkstk_darwin(v4);
  v69 = (uint64_t)&v60 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v5);
  v63 = (uint64_t *)((char *)&v60 - v8);
  __chkstk_darwin(v7);
  v67 = (uint64_t)&v60 - v9;
  v10 = sub_5440(&qword_261CC0);
  __chkstk_darwin(v10);
  v12 = (char *)&v60 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v62 = sub_5440(&qword_261CC8);
  v13 = __chkstk_darwin(v62);
  v66 = (uint64_t)&v60 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v60 - v16;
  __chkstk_darwin(v15);
  v65 = (uint64_t)&v60 - v18;
  v19 = type metadata accessor for SizeConstants.Spacing(0);
  __chkstk_darwin(v19);
  v21 = (char *)&v60 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for SizeConstants(0);
  __chkstk_darwin(v22);
  v24 = (char *)&v60 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = sub_5440(&qword_261CD0);
  __chkstk_darwin(v25);
  v27 = (char *)&v60 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = sub_5440(&qword_261CD8);
  v29 = __chkstk_darwin(v28);
  v64 = (uint64_t)&v60 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = __chkstk_darwin(v29);
  v33 = (char *)&v60 - v32;
  __chkstk_darwin(v31);
  v35 = (char *)&v60 - v34;
  type metadata accessor for TopLockupMetadataView(0);
  sub_3168C((uint64_t)v24);
  sub_1E428((uint64_t)v24, (uint64_t)v21, type metadata accessor for SizeConstants.Environment);
  sub_224DC((uint64_t)v24, type metadata accessor for SizeConstants);
  v36 = (uint64_t)v21;
  v37 = v61;
  v38 = sub_224DC(v36, type metadata accessor for SizeConstants.Spacing);
  *(_QWORD *)v27 = static VerticalAlignment.center.getter(v38);
  *((_QWORD *)v27 + 1) = 0x4010000000000000;
  v27[16] = 0;
  v39 = sub_5440(&qword_261CE0);
  sub_72944(v37, &v27[*(int *)(v39 + 44)]);
  sub_B3D0((uint64_t)v27, (uint64_t)v33, &qword_261CD0);
  *(_WORD *)&v33[*(int *)(v28 + 36)] = 1;
  sub_B414((uint64_t)v27, &qword_261CD0);
  sub_167A4((uint64_t)v33, (uint64_t)v35, &qword_261CD8);
  v40 = *(_QWORD *)a1;
  LOBYTE(v24) = *(_BYTE *)(a1 + 8);
  sub_F9E4(*(_QWORD *)a1, (char)v24);
  LOBYTE(v28) = sub_30DB4(v40, (char)v24);
  v41 = sub_BE0C(v40, (char)v24);
  if ((v28 & 1) != 0)
    v42 = static HorizontalAlignment.center.getter(v41);
  else
    v42 = static HorizontalAlignment.leading.getter(v41);
  *(_QWORD *)v12 = v42;
  *((_QWORD *)v12 + 1) = 0;
  v12[16] = 1;
  v43 = sub_5440(&qword_261CE8);
  sub_732A8(v37, (uint64_t)&v12[*(int *)(v43 + 44)]);
  sub_B3D0((uint64_t)v12, (uint64_t)v17, &qword_261CC0);
  *(_WORD *)&v17[*(int *)(v62 + 36)] = 1;
  sub_B414((uint64_t)v12, &qword_261CC0);
  v44 = v65;
  sub_167A4((uint64_t)v17, v65, &qword_261CC8);
  v45 = *(_QWORD *)a1;
  v46 = *(_BYTE *)(a1 + 8);
  sub_F9E4(*(_QWORD *)a1, v46);
  v47 = sub_30DB4(v45, v46);
  v48 = sub_BE0C(v45, v46);
  if ((v47 & 1) != 0)
    v49 = static HorizontalAlignment.center.getter(v48);
  else
    v49 = static HorizontalAlignment.leading.getter(v48);
  v50 = (uint64_t)v63;
  *v63 = v49;
  *(_QWORD *)(v50 + 8) = 0;
  *(_BYTE *)(v50 + 16) = 1;
  v51 = sub_5440(&qword_261CF0);
  sub_73CA4(v37, (char *)(v50 + *(int *)(v51 + 44)));
  v52 = v67;
  sub_167A4(v50, v67, &qword_261CB8);
  v53 = (uint64_t)v35;
  v54 = v64;
  sub_B3D0((uint64_t)v35, v64, &qword_261CD8);
  v55 = v66;
  sub_B3D0(v44, v66, &qword_261CC8);
  v56 = v69;
  sub_B3D0(v52, v69, &qword_261CB8);
  v57 = v68;
  sub_B3D0(v54, v68, &qword_261CD8);
  v58 = sub_5440(&qword_261CF8);
  sub_B3D0(v55, v57 + *(int *)(v58 + 48), &qword_261CC8);
  sub_B3D0(v56, v57 + *(int *)(v58 + 64), &qword_261CB8);
  sub_B414(v52, &qword_261CB8);
  sub_B414(v44, &qword_261CC8);
  sub_B414(v53, &qword_261CD8);
  sub_B414(v56, &qword_261CB8);
  sub_B414(v55, &qword_261CC8);
  return sub_B414(v54, &qword_261CD8);
}

uint64_t sub_72944@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  int *v44;
  uint64_t (*v45)(char *, uint64_t, uint64_t);
  int v46;
  void (*v47)(char *, char *, uint64_t);
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  void (*v52)(char *, char *, uint64_t);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(char *, char *, uint64_t);
  char *v59;
  uint64_t v60;
  void (*v61)(char *, uint64_t);
  void (*v62)(char *, uint64_t);
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void (*v70)(char *, uint64_t, uint64_t);
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void (*v76)(char *, char *, uint64_t);
  char *v77;
  void (*v78)(char *, char *, uint64_t);
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  char *v85;
  char *v86;
  void (*v87)(char *, uint64_t);
  uint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  void (*v95)(char *, uint64_t);
  void (*v97)(char *, uint64_t);
  char *v98;
  void (*v99)(char *, uint64_t, uint64_t);
  char *v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  char *v114;
  _QWORD *v115;
  uint64_t v116;
  uint64_t v117;

  v112 = a2;
  v3 = sub_5440(&qword_261D28);
  v4 = __chkstk_darwin(v3);
  v104 = (uint64_t)&v97 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v103 = (uint64_t)&v97 - v6;
  v7 = sub_5440(&qword_25E0C8);
  v8 = __chkstk_darwin(v7);
  v101 = (uint64_t)&v97 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v8);
  v105 = (uint64_t)&v97 - v11;
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v97 - v13;
  __chkstk_darwin(v12);
  v16 = (char *)&v97 - v15;
  v17 = sub_5440(&qword_261D30);
  v18 = __chkstk_darwin(v17);
  v111 = (uint64_t)&v97 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __chkstk_darwin(v18);
  v109 = (uint64_t)&v97 - v21;
  v22 = __chkstk_darwin(v20);
  v110 = (uint64_t)&v97 - v23;
  __chkstk_darwin(v22);
  v116 = (uint64_t)&v97 - v24;
  v25 = type metadata accessor for LocalizerRequest(0);
  v26 = *(_QWORD **)(v25 - 8);
  v27 = __chkstk_darwin(v25);
  v102 = (char *)&v97 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = __chkstk_darwin(v27);
  v107 = (char *)&v97 - v30;
  v31 = __chkstk_darwin(v29);
  v98 = (char *)&v97 - v32;
  v33 = __chkstk_darwin(v31);
  v114 = (char *)&v97 - v34;
  __chkstk_darwin(v33);
  v36 = (char *)&v97 - v35;
  v113 = type metadata accessor for LocalizedText(0);
  v117 = *(_QWORD *)(v113 - 8);
  v37 = __chkstk_darwin(v113);
  v100 = (char *)&v97 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = __chkstk_darwin(v37);
  v41 = (char *)&v97 - v40;
  __chkstk_darwin(v39);
  v43 = (char *)&v97 - v42;
  v99 = (void (*)(char *, uint64_t, uint64_t))v26[2];
  v99(v36, a1, v25);
  v108 = v43;
  LocalizedText.init(_:)(v36);
  v44 = (int *)type metadata accessor for TopLockupMetadataView.Footer(0);
  sub_B3D0(a1 + v44[5], (uint64_t)v16, &qword_25E0C8);
  v45 = (uint64_t (*)(char *, uint64_t, uint64_t))v26[6];
  v46 = v45(v16, 1, v25);
  v115 = v26;
  v106 = a1;
  if (v46 == 1)
  {
    v14 = v16;
LABEL_5:
    v48 = v110;
    sub_B414((uint64_t)v14, &qword_25E0C8);
    v49 = sub_5440(&qword_261D38);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 56))(v116, 1, 1, v49);
    goto LABEL_7;
  }
  v47 = (void (*)(char *, char *, uint64_t))v26[4];
  v47(v114, v16, v25);
  sub_B3D0(a1 + v44[7], (uint64_t)v14, &qword_25E0C8);
  if (v45(v14, 1, v25) == 1)
  {
    ((void (*)(char *, uint64_t))v115[1])(v114, v25);
    goto LABEL_5;
  }
  v50 = v98;
  v47(v98, v14, v25);
  v51 = v50;
  v52 = (void (*)(char *, char *, uint64_t))v99;
  v99(v36, (uint64_t)v51, v25);
  LocalizedText.init(_:)(v36);
  v53 = sub_6FD0((unint64_t *)&qword_25FEA8, (uint64_t (*)(uint64_t))&type metadata accessor for LocalizedText, (uint64_t)&protocol conformance descriptor for LocalizedText);
  v54 = v104;
  v55 = v113;
  View.accessibilityHidden(_:)(1, v113, v53);
  v56 = v117;
  v97 = *(void (**)(char *, uint64_t))(v117 + 8);
  v97(v41, v55);
  v57 = v103;
  sub_167A4(v54, v103, &qword_261D28);
  v52(v36, v114, v25);
  LocalizedText.init(_:)(v36);
  sub_B3D0(v57, v54, &qword_261D28);
  v58 = *(void (**)(char *, char *, uint64_t))(v56 + 16);
  v59 = v100;
  v58(v100, v41, v55);
  v48 = v110;
  sub_B3D0(v54, v110, &qword_261D28);
  v60 = sub_5440(&qword_261D48);
  v58((char *)(v48 + *(int *)(v60 + 48)), v59, v55);
  v61 = v97;
  v97(v41, v55);
  sub_B414(v103, &qword_261D28);
  v62 = (void (*)(char *, uint64_t))v115[1];
  v62(v98, v25);
  v62(v114, v25);
  v61(v59, v55);
  sub_B414(v104, &qword_261D28);
  v63 = sub_5440(&qword_261D38);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v63 - 8) + 56))(v48, 0, 1, v63);
  sub_167A4(v48, v116, &qword_261D30);
LABEL_7:
  v64 = v106;
  v65 = v107;
  v66 = v105;
  sub_B3D0(v106 + v44[6], v105, &qword_25E0C8);
  if (v45((char *)v66, 1, v25) == 1)
  {
    v67 = v113;
    v68 = v66;
  }
  else
  {
    v69 = v66;
    v70 = (void (*)(char *, uint64_t, uint64_t))v115[4];
    v70(v65, v69, v25);
    v71 = v64 + v44[7];
    v68 = v101;
    sub_B3D0(v71, v101, &qword_25E0C8);
    if (v45((char *)v68, 1, v25) != 1)
    {
      v77 = v102;
      v70(v102, v68, v25);
      v78 = (void (*)(char *, char *, uint64_t))v99;
      v99(v36, (uint64_t)v77, v25);
      LocalizedText.init(_:)(v36);
      v79 = sub_6FD0((unint64_t *)&qword_25FEA8, (uint64_t (*)(uint64_t))&type metadata accessor for LocalizedText, (uint64_t)&protocol conformance descriptor for LocalizedText);
      v80 = v104;
      v81 = v113;
      View.accessibilityHidden(_:)(1, v113, v79);
      v114 = *(char **)(v117 + 8);
      ((void (*)(char *, uint64_t))v114)(v41, v81);
      v82 = v103;
      sub_167A4(v80, v103, &qword_261D28);
      v78(v36, v65, v25);
      LocalizedText.init(_:)(v36);
      sub_B3D0(v82, v80, &qword_261D28);
      v76 = *(void (**)(char *, char *, uint64_t))(v117 + 16);
      v83 = v100;
      v76(v100, v41, v81);
      sub_B3D0(v80, v48, &qword_261D28);
      v84 = sub_5440(&qword_261D48);
      v76((char *)(v48 + *(int *)(v84 + 48)), v83, v81);
      v85 = v65;
      v86 = v114;
      ((void (*)(char *, uint64_t))v114)(v41, v81);
      sub_B414(v82, &qword_261D28);
      v87 = (void (*)(char *, uint64_t))v115[1];
      v87(v102, v25);
      v87(v85, v25);
      v67 = v81;
      ((void (*)(char *, uint64_t))v86)(v83, v81);
      sub_B414(v80, &qword_261D28);
      v88 = sub_5440(&qword_261D38);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v88 - 8) + 56))(v48, 0, 1, v88);
      v73 = v48;
      v75 = v109;
      sub_167A4(v48, v109, &qword_261D30);
      goto LABEL_13;
    }
    v67 = v113;
    ((void (*)(char *, uint64_t))v115[1])(v65, v25);
  }
  v72 = v117;
  v73 = v48;
  sub_B414(v68, &qword_25E0C8);
  v74 = sub_5440(&qword_261D38);
  v75 = v109;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v74 - 8) + 56))(v109, 1, 1, v74);
  v76 = *(void (**)(char *, char *, uint64_t))(v72 + 16);
LABEL_13:
  v89 = v108;
  v76(v41, v108, v67);
  v90 = v41;
  v91 = v116;
  sub_B3D0(v116, v73, &qword_261D30);
  v92 = v111;
  sub_B3D0(v75, v111, &qword_261D30);
  v93 = v112;
  v76(v112, v90, v67);
  v94 = sub_5440(&qword_261D50);
  sub_B3D0(v73, (uint64_t)&v93[*(int *)(v94 + 48)], &qword_261D30);
  sub_B3D0(v92, (uint64_t)&v93[*(int *)(v94 + 64)], &qword_261D30);
  sub_B414(v75, &qword_261D30);
  sub_B414(v91, &qword_261D30);
  v95 = *(void (**)(char *, uint64_t))(v117 + 8);
  v95(v89, v67);
  sub_B414(v92, &qword_261D30);
  sub_B414(v73, &qword_261D30);
  return ((uint64_t (*)(char *, uint64_t))v95)(v90, v67);
}

uint64_t sub_732A8@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v52 = a1;
  v56 = a2;
  v2 = type metadata accessor for LocalizedText(0);
  v54 = *(_QWORD *)(v2 - 8);
  v55 = v2;
  __chkstk_darwin(v2);
  v51 = (char *)&v49 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_5440(&qword_25E0C8);
  __chkstk_darwin(v4);
  v6 = (char *)&v49 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for LocalizerRequest(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v50 = (char *)&v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v49 = (char *)&v49 - v11;
  v12 = sub_5440(&qword_261D00);
  v13 = __chkstk_darwin(v12);
  v53 = (uint64_t)&v49 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v16 = (char *)&v49 - v15;
  v17 = type metadata accessor for SizeConstants.Spacing(0);
  __chkstk_darwin(v17);
  v19 = (char *)&v49 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for SizeConstants(0);
  __chkstk_darwin(v20);
  v22 = (char *)&v49 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = sub_5440(&qword_261D10);
  v24 = __chkstk_darwin(v23);
  v26 = (char *)&v49 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __chkstk_darwin(v24);
  v29 = (char *)&v49 - v28;
  __chkstk_darwin(v27);
  v31 = (char *)&v49 - v30;
  type metadata accessor for TopLockupMetadataView(0);
  sub_3168C((uint64_t)v22);
  sub_1E428((uint64_t)v22, (uint64_t)v19, type metadata accessor for SizeConstants.Environment);
  sub_224DC((uint64_t)v22, type metadata accessor for SizeConstants);
  v32 = sub_224DC((uint64_t)v19, type metadata accessor for SizeConstants.Spacing);
  *(_QWORD *)v29 = static VerticalAlignment.center.getter(v32);
  *((_QWORD *)v29 + 1) = 0x4010000000000000;
  v29[16] = 0;
  v33 = sub_5440(&qword_261D18);
  v34 = v52;
  sub_736FC(v52, &v29[*(int *)(v33 + 44)]);
  sub_167A4((uint64_t)v29, (uint64_t)v31, &qword_261D10);
  v35 = type metadata accessor for TopLockupMetadataView.Footer(0);
  sub_B3D0(v34 + *(int *)(v35 + 24), (uint64_t)v6, &qword_25E0C8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    sub_B414((uint64_t)v6, &qword_25E0C8);
    v36 = 1;
    v38 = v54;
    v37 = v55;
  }
  else
  {
    v39 = v49;
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v49, v6, v7);
    v40 = v50;
    (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v50, v39, v7);
    v41 = v51;
    LocalizedText.init(_:)(v40);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v39, v7);
    v42 = v54;
    v43 = v41;
    v44 = v55;
    (*(void (**)(char *, char *, uint64_t))(v54 + 32))(v16, v43, v55);
    v36 = 0;
    v37 = v44;
    v38 = v42;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v38 + 56))(v16, v36, 1, v37);
  sub_B3D0((uint64_t)v31, (uint64_t)v26, &qword_261D10);
  v45 = v53;
  sub_B3D0((uint64_t)v16, v53, &qword_261D00);
  v46 = v56;
  sub_B3D0((uint64_t)v26, v56, &qword_261D10);
  v47 = sub_5440(&qword_261D20);
  sub_B3D0(v45, v46 + *(int *)(v47 + 48), &qword_261D00);
  sub_B414((uint64_t)v16, &qword_261D00);
  sub_B414((uint64_t)v31, &qword_261D10);
  sub_B414(v45, &qword_261D00);
  return sub_B414((uint64_t)v26, &qword_261D10);
}

uint64_t sub_736FC@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int (*v35)(char *, uint64_t, uint64_t);
  void (*v36)(char *, char *, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(char *, char *, uint64_t);
  char *v42;
  void (*v43)(char *, char *, uint64_t);
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  void (*v51)(char *, uint64_t);
  void (*v52)(char *, uint64_t);
  uint64_t v53;
  char *v54;
  char *v55;
  char *v56;
  uint64_t v57;
  void (*v58)(char *, uint64_t);
  uint64_t v60;
  void (*v61)(char *, uint64_t);
  char *v62;
  void (*v63)(char *, uint64_t, uint64_t);
  char *v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  char *v73;

  v71 = a2;
  v3 = sub_5440(&qword_261D28);
  v4 = __chkstk_darwin(v3);
  v6 = (char *)&v60 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v65 = (uint64_t)&v60 - v7;
  v8 = sub_5440(&qword_25E0C8);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v60 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v60 - v12;
  v14 = sub_5440(&qword_261D30);
  v15 = __chkstk_darwin(v14);
  v70 = (uint64_t)&v60 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v69 = (uint64_t)&v60 - v17;
  v18 = type metadata accessor for LocalizerRequest(0);
  v19 = *(_QWORD **)(v18 - 8);
  v20 = __chkstk_darwin(v18);
  v66 = (char *)&v60 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __chkstk_darwin(v20);
  v73 = (char *)&v60 - v23;
  __chkstk_darwin(v22);
  v25 = (char *)&v60 - v24;
  v26 = type metadata accessor for LocalizedText(0);
  v68 = *(_QWORD *)(v26 - 8);
  v27 = __chkstk_darwin(v26);
  v64 = (char *)&v60 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = __chkstk_darwin(v27);
  v72 = (char *)&v60 - v30;
  __chkstk_darwin(v29);
  v32 = (char *)&v60 - v31;
  v63 = (void (*)(char *, uint64_t, uint64_t))v19[2];
  v63(v25, a1, v18);
  v67 = v32;
  LocalizedText.init(_:)(v25);
  v33 = type metadata accessor for TopLockupMetadataView.Footer(0);
  v34 = a1;
  sub_B3D0(a1 + *(int *)(v33 + 20), (uint64_t)v13, &qword_25E0C8);
  v35 = (unsigned int (*)(char *, uint64_t, uint64_t))v19[6];
  if (v35(v13, 1, v18) == 1)
  {
    v11 = v13;
  }
  else
  {
    v62 = v6;
    v36 = (void (*)(char *, char *, uint64_t))v19[4];
    v36(v73, v13, v18);
    sub_B3D0(v34 + *(int *)(v33 + 28), (uint64_t)v11, &qword_25E0C8);
    if (v35(v11, 1, v18) != 1)
    {
      v42 = v66;
      v36(v66, v11, v18);
      v43 = (void (*)(char *, char *, uint64_t))v63;
      v63(v25, (uint64_t)v42, v18);
      v44 = v72;
      LocalizedText.init(_:)(v25);
      v45 = sub_6FD0((unint64_t *)&qword_25FEA8, (uint64_t (*)(uint64_t))&type metadata accessor for LocalizedText, (uint64_t)&protocol conformance descriptor for LocalizedText);
      v46 = (uint64_t)v62;
      View.accessibilityHidden(_:)(1, v26, v45);
      v40 = v68;
      v61 = *(void (**)(char *, uint64_t))(v68 + 8);
      v61(v44, v26);
      v47 = v65;
      sub_167A4(v46, v65, &qword_261D28);
      v43(v25, v73, v18);
      LocalizedText.init(_:)(v25);
      sub_B3D0(v47, v46, &qword_261D28);
      v41 = *(void (**)(char *, char *, uint64_t))(v40 + 16);
      v48 = v64;
      v41(v64, v44, v26);
      v37 = v70;
      sub_B3D0(v46, v70, &qword_261D28);
      v49 = sub_5440(&qword_261D48);
      v41((char *)(v37 + *(int *)(v49 + 48)), v48, v26);
      v50 = v44;
      v51 = v61;
      v61(v50, v26);
      sub_B414(v47, &qword_261D28);
      v52 = (void (*)(char *, uint64_t))v19[1];
      v52(v66, v18);
      v52(v73, v18);
      v51(v48, v26);
      sub_B414(v46, &qword_261D28);
      v53 = sub_5440(&qword_261D38);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v53 - 8) + 56))(v37, 0, 1, v53);
      v39 = v69;
      sub_167A4(v37, v69, &qword_261D30);
      goto LABEL_7;
    }
    ((void (*)(char *, uint64_t))v19[1])(v73, v18);
  }
  v37 = v70;
  sub_B414((uint64_t)v11, &qword_25E0C8);
  v38 = sub_5440(&qword_261D38);
  v39 = v69;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 56))(v69, 1, 1, v38);
  v40 = v68;
  v41 = *(void (**)(char *, char *, uint64_t))(v68 + 16);
LABEL_7:
  v54 = v72;
  v55 = v67;
  v41(v72, v67, v26);
  sub_B3D0(v39, v37, &qword_261D30);
  v56 = v71;
  v41(v71, v54, v26);
  v57 = sub_5440(&qword_261D40);
  sub_B3D0(v37, (uint64_t)&v56[*(int *)(v57 + 48)], &qword_261D30);
  sub_B414(v39, &qword_261D30);
  v58 = *(void (**)(char *, uint64_t))(v40 + 8);
  v58(v55, v26);
  sub_B414(v37, &qword_261D30);
  return ((uint64_t (*)(char *, uint64_t))v58)(v54, v26);
}

uint64_t sub_73CA4@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  void (*v31)(char *, uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  int v36;
  void (*v37)(uint64_t, uint64_t, uint64_t, uint64_t);
  void (*v38)(char *, char *, uint64_t);
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  void (*v50)(char *, char *, uint64_t);
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  void (*v57)(char *, uint64_t);
  uint64_t v59;
  char *v60;
  void (*v61)(char *, char *, uint64_t);
  char *v62;
  uint64_t v63;
  uint64_t (*v64)(char *, uint64_t, uint64_t);
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;

  v71 = a2;
  v3 = sub_5440(&qword_25E0C8);
  v4 = __chkstk_darwin(v3);
  v66 = (uint64_t)&v59 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v7 = (char *)&v59 - v6;
  v8 = sub_5440(&qword_261D00);
  v9 = __chkstk_darwin(v8);
  v70 = (uint64_t)&v59 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v9);
  v69 = (uint64_t)&v59 - v12;
  v13 = __chkstk_darwin(v11);
  v68 = (char *)&v59 - v14;
  __chkstk_darwin(v13);
  v72 = (uint64_t)&v59 - v15;
  v16 = type metadata accessor for LocalizerRequest(0);
  v17 = *(_QWORD **)(v16 - 8);
  v18 = __chkstk_darwin(v16);
  v62 = (char *)&v59 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __chkstk_darwin(v18);
  v60 = (char *)&v59 - v21;
  __chkstk_darwin(v20);
  v23 = (char *)&v59 - v22;
  v24 = type metadata accessor for LocalizedText(0);
  v25 = *(_QWORD *)(v24 - 8);
  v26 = __chkstk_darwin(v24);
  v28 = (char *)&v59 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  v30 = (char *)&v59 - v29;
  v31 = (void (*)(char *, uint64_t, uint64_t))v17[2];
  v31(v23, a1, v16);
  v67 = v30;
  LocalizedText.init(_:)(v23);
  v32 = type metadata accessor for TopLockupMetadataView.Footer(0);
  v33 = *(int *)(v32 + 20);
  v34 = a1;
  v35 = v17;
  v65 = v34;
  sub_B3D0(v34 + v33, (uint64_t)v7, &qword_25E0C8);
  v64 = (uint64_t (*)(char *, uint64_t, uint64_t))v17[6];
  v36 = v64(v7, 1, v16);
  v61 = (void (*)(char *, char *, uint64_t))v31;
  if (v36 == 1)
  {
    sub_B414((uint64_t)v7, &qword_25E0C8);
    v37 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v25 + 56);
    v37(v72, 1, 1, v24);
  }
  else
  {
    v38 = (void (*)(char *, char *, uint64_t))v17[4];
    v39 = v60;
    v38(v60, v7, v16);
    v31(v23, (uint64_t)v39, v16);
    LocalizedText.init(_:)(v23);
    ((void (*)(char *, uint64_t))v35[1])(v39, v16);
    v40 = v72;
    (*(void (**)(uint64_t, char *, uint64_t))(v25 + 32))(v72, v28, v24);
    v37 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v25 + 56);
    v37(v40, 0, 1, v24);
  }
  v41 = v25;
  v42 = v28;
  v43 = *(int *)(v32 + 24);
  v44 = v66;
  sub_B3D0(v65 + v43, v66, &qword_25E0C8);
  if (v64((char *)v44, 1, v16) == 1)
  {
    sub_B414(v44, &qword_25E0C8);
    v45 = 1;
    v46 = (uint64_t)v68;
  }
  else
  {
    v47 = v41;
    v48 = v62;
    ((void (*)(char *, uint64_t, uint64_t))v35[4])(v62, v44, v16);
    v61(v23, v48, v16);
    LocalizedText.init(_:)(v23);
    v49 = v48;
    v41 = v47;
    ((void (*)(char *, uint64_t))v35[1])(v49, v16);
    v46 = (uint64_t)v68;
    (*(void (**)(char *, char *, uint64_t))(v47 + 32))(v68, v42, v24);
    v45 = 0;
  }
  v63 = v41;
  v37(v46, v45, 1, v24);
  v50 = *(void (**)(char *, char *, uint64_t))(v41 + 16);
  v51 = v67;
  v50(v42, v67, v24);
  v52 = v72;
  v53 = v69;
  sub_B3D0(v72, v69, &qword_261D00);
  v54 = v70;
  sub_B3D0(v46, v70, &qword_261D00);
  v55 = v71;
  v50(v71, v42, v24);
  v56 = sub_5440(&qword_261D08);
  sub_B3D0(v53, (uint64_t)&v55[*(int *)(v56 + 48)], &qword_261D00);
  sub_B3D0(v54, (uint64_t)&v55[*(int *)(v56 + 64)], &qword_261D00);
  sub_B414(v46, &qword_261D00);
  sub_B414(v52, &qword_261D00);
  v57 = *(void (**)(char *, uint64_t))(v63 + 8);
  v57(v51, v24);
  sub_B414(v54, &qword_261D00);
  sub_B414(v53, &qword_261D00);
  return ((uint64_t (*)(char *, uint64_t))v57)(v42, v24);
}

uint64_t sub_7417C@<X0>(unsigned __int8 a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t KeyPath;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  void (*v38)(char *, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;

  v101 = a5;
  v115 = a3;
  v116 = a4;
  v114 = a2;
  v119 = a6;
  v6 = a1;
  v7 = type metadata accessor for LocalizedText(0);
  v107 = *(_QWORD *)(v7 - 8);
  v108 = (char *)v7;
  __chkstk_darwin(v7);
  v106 = (char *)&v100 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v104 = sub_5440(&qword_25FE10);
  __chkstk_darwin(v104);
  v10 = (char *)&v100 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v120 = sub_5440(&qword_25FE18);
  v11 = __chkstk_darwin(v120);
  v105 = (uint64_t)&v100 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v109 = (uint64_t)&v100 - v13;
  v113 = sub_5440(&qword_261D80);
  v103 = *(_QWORD *)(v113 - 8);
  __chkstk_darwin(v113);
  v102 = (char *)&v100 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v117 = sub_5440(&qword_261D88);
  __chkstk_darwin(v117);
  v16 = (char *)&v100 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v110 = sub_5440(&qword_261D90);
  __chkstk_darwin(v110);
  v111 = (char *)&v100 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v118 = sub_5440(&qword_261D98);
  __chkstk_darwin(v118);
  v112 = (char *)&v100 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for TopLockupMetadataView(0);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = *(_QWORD *)(v20 + 64);
  __chkstk_darwin(v19);
  v22 = (char *)&v100 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for LocalizerRequest(0);
  v24 = *(_QWORD *)(v23 - 8);
  v25 = *(_QWORD *)(v24 + 64);
  __chkstk_darwin(v23);
  v26 = (char *)&v100 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = sub_5440(&qword_261DA0);
  v28 = __chkstk_darwin(v27);
  v31 = (char *)&v100 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v6 == 2)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v24 + 16))((char *)&v100 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0), v114, v23);
    v32 = v106;
    LocalizedText.init(_:)(v26);
    KeyPath = swift_getKeyPath(&unk_1E56A0);
    v35 = v107;
    v34 = (uint64_t)v108;
    (*(void (**)(char *, char *, char *))(v107 + 16))(v10, v32, v108);
    v36 = (uint64_t *)&v10[*(int *)(v104 + 36)];
    v37 = v115;
    *v36 = KeyPath;
    v36[1] = v37;
    v38 = *(void (**)(char *, uint64_t))(v35 + 8);
    swift_retain(v37);
    v38(v32, v34);
    v39 = swift_getKeyPath(&unk_1E56D0);
    v40 = v105;
    sub_B3D0((uint64_t)v10, v105, &qword_25FE10);
    v41 = v120;
    v42 = (uint64_t *)(v40 + *(int *)(v120 + 36));
    v43 = v116;
    *v42 = v39;
    v42[1] = v43;
    swift_retain(v43);
    sub_B414((uint64_t)v10, &qword_25FE10);
    v44 = v40;
    v45 = v109;
    sub_167A4(v44, v109, &qword_25FE18);
    sub_B3D0(v45, (uint64_t)v16, &qword_25FE18);
    swift_storeEnumTagMultiPayload(v16, v117, 1);
    v46 = sub_7A3F0();
    v47 = sub_7A494();
    _ConditionalContent<>.init(storage:)(v16, v118, v41, v46, v47);
    return sub_B414(v45, &qword_25FE18);
  }
  else
  {
    v106 = v31;
    v107 = v29;
    v108 = v16;
    v109 = v28;
    (*(void (**)(char *, uint64_t, uint64_t))(v24 + 16))((char *)&v100 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0), v114, v23);
    v49 = v25 + 7;
    if ((v6 & 1) != 0)
    {
      v75 = *(unsigned __int8 *)(v24 + 80);
      v76 = (v75 + 16) & ~v75;
      v77 = (v49 + v76) & 0xFFFFFFFFFFFFFFF8;
      v78 = (v77 + 15) & 0xFFFFFFFFFFFFFFF8;
      v79 = swift_allocObject(&unk_24E4A8, v78 + 8, v75 | 7);
      (*(void (**)(uint64_t, char *, uint64_t))(v24 + 32))(v79 + v76, v26, v23);
      v80 = v115;
      v81 = v116;
      *(_QWORD *)(v79 + v77) = v115;
      *(_QWORD *)(v79 + v78) = v81;
      swift_retain(v80);
      swift_retain(v81);
      v82 = sub_5440(&qword_261DD0);
      v83 = type metadata accessor for _JetLocalizeDefaultWorking(0);
      v84 = type metadata accessor for _JetLocalizeDefaultFailed(0);
      v85 = sub_7A6AC();
      v86 = sub_6FD0(&qword_25FEE0, (uint64_t (*)(uint64_t))&type metadata accessor for _JetLocalizeDefaultWorking, (uint64_t)&protocol conformance descriptor for _JetLocalizeDefaultWorking);
      v87 = sub_6FD0(&qword_25FEE8, (uint64_t (*)(uint64_t))&type metadata accessor for _JetLocalizeDefaultFailed, (uint64_t)&protocol conformance descriptor for _JetLocalizeDefaultFailed);
      v99 = v85;
      v88 = v102;
      JetLocalize.init(working:failed:content:)(&j___s18_JetEngine_SwiftUI01_A22LocalizeDefaultWorkingVACycfC, 0, sub_4ED68, 0, sub_7A640, v79, v82, v83, v84, v99, v86, v87);
      v89 = v103;
      v90 = v111;
      v91 = v113;
      (*(void (**)(char *, char *, uint64_t))(v103 + 16))(v111, v88, v113);
      swift_storeEnumTagMultiPayload(v90, v110, 1);
      v92 = sub_7FD8(&qword_261DB0, &qword_261DA0, (uint64_t)&protocol conformance descriptor for JetLocalize<A, B, C>);
      v93 = sub_7FD8(&qword_261DB8, &qword_261D80, (uint64_t)&protocol conformance descriptor for JetLocalize<A, B, C>);
      v94 = (uint64_t)v112;
      _ConditionalContent<>.init(storage:)(v90, v109, v91, v92, v93);
      v95 = (uint64_t)v108;
      sub_B3D0(v94, (uint64_t)v108, &qword_261D98);
      swift_storeEnumTagMultiPayload(v95, v117, 0);
      v96 = sub_7A3F0();
      v97 = sub_7A494();
      _ConditionalContent<>.init(storage:)(v95, v118, v120, v96, v97);
      sub_B414(v94, &qword_261D98);
      return (*(uint64_t (**)(char *, uint64_t))(v89 + 8))(v88, v91);
    }
    else
    {
      sub_1E428(v101, (uint64_t)&v100 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for TopLockupMetadataView);
      v50 = *(unsigned __int8 *)(v24 + 80);
      v51 = (v50 + 16) & ~v50;
      v52 = (v49 + v51) & 0xFFFFFFFFFFFFFFF8;
      v53 = (v52 + 15) & 0xFFFFFFFFFFFFFFF8;
      v54 = *(unsigned __int8 *)(v20 + 80);
      v55 = (v54 + v53 + 8) & ~v54;
      v56 = swift_allocObject(&unk_24E4D0, v55 + v21, v50 | v54 | 7);
      (*(void (**)(uint64_t, char *, uint64_t))(v24 + 32))(v56 + v51, v26, v23);
      v58 = v115;
      v57 = v116;
      *(_QWORD *)(v56 + v52) = v115;
      *(_QWORD *)(v56 + v53) = v57;
      sub_79CC8((uint64_t)v22, v56 + v55);
      swift_retain(v58);
      swift_retain(v57);
      v59 = sub_5440(&qword_261DF0);
      v60 = type metadata accessor for _JetLocalizeDefaultWorking(0);
      v61 = type metadata accessor for _JetLocalizeDefaultFailed(0);
      v62 = sub_7AC74();
      v63 = sub_6FD0(&qword_25FEE0, (uint64_t (*)(uint64_t))&type metadata accessor for _JetLocalizeDefaultWorking, (uint64_t)&protocol conformance descriptor for _JetLocalizeDefaultWorking);
      v64 = sub_6FD0(&qword_25FEE8, (uint64_t (*)(uint64_t))&type metadata accessor for _JetLocalizeDefaultFailed, (uint64_t)&protocol conformance descriptor for _JetLocalizeDefaultFailed);
      v98 = v62;
      v65 = v106;
      JetLocalize.init(working:failed:content:)(&j___s18_JetEngine_SwiftUI01_A22LocalizeDefaultWorkingVACycfC, 0, sub_4ED68, 0, sub_7ABE0, v56, v59, v60, v61, v98, v63, v64);
      v66 = v107;
      v67 = v111;
      v68 = v109;
      (*(void (**)(char *, char *, uint64_t))(v107 + 16))(v111, v65, v109);
      swift_storeEnumTagMultiPayload(v67, v110, 0);
      v69 = sub_7FD8(&qword_261DB0, &qword_261DA0, (uint64_t)&protocol conformance descriptor for JetLocalize<A, B, C>);
      v70 = sub_7FD8(&qword_261DB8, &qword_261D80, (uint64_t)&protocol conformance descriptor for JetLocalize<A, B, C>);
      v71 = (uint64_t)v112;
      _ConditionalContent<>.init(storage:)(v67, v68, v113, v69, v70);
      v72 = (uint64_t)v108;
      sub_B3D0(v71, (uint64_t)v108, &qword_261D98);
      swift_storeEnumTagMultiPayload(v72, v117, 0);
      v73 = sub_7A3F0();
      v74 = sub_7A494();
      _ConditionalContent<>.init(storage:)(v72, v118, v120, v73, v74);
      sub_B414(v71, &qword_261D98);
      return (*(uint64_t (**)(char *, uint64_t))(v66 + 8))(v65, v68);
    }
  }
}

uint64_t sub_74A0C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v50;
  uint64_t KeyPath;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t *v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69[2];
  char v70;
  uint64_t v71;

  v58 = a2;
  v67 = a6;
  v11 = type metadata accessor for LocalizerRequest(0);
  v65 = *(_QWORD *)(v11 - 8);
  v66 = v11;
  __chkstk_darwin(v11);
  v64 = (char *)&v50 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = sub_5440(&qword_261E18);
  __chkstk_darwin(v63);
  v62 = (uint64_t *)((char *)&v50 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = type metadata accessor for Locale.Language(0);
  v59 = *(_QWORD *)(v14 - 8);
  v60 = v14;
  __chkstk_darwin(v14);
  v16 = (char *)&v50 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = type metadata accessor for Locale(0);
  v53 = *(_QWORD *)(v55 - 8);
  __chkstk_darwin(v55);
  v18 = (char *)&v50 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v57 = type metadata accessor for LayoutDirection(0);
  v54 = *(_QWORD *)(v57 - 8);
  __chkstk_darwin(v57);
  v52 = (char *)&v50 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v68 = sub_5440(&qword_261E08);
  __chkstk_darwin(v68);
  v21 = (char *)&v50 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_5440(&qword_261DF0);
  __chkstk_darwin(v22);
  v61 = (char *)&v50 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_74E50(a2, a1, a3, a4, a5, v69);
  v25 = v69[0];
  v24 = v69[1];
  v26 = v70;
  v27 = v71;
  KeyPath = swift_getKeyPath(&unk_1E5728);
  v28 = (_QWORD *)a1;
  v56 = a1;
  v29 = *(_QWORD *)(a1 + 24);
  v30 = v28[4];
  sub_5480(v28, v29);
  v31 = dispatch thunk of Localizer.locale.getter(v29, v30);
  Locale.language.getter(v31);
  v32 = (*(uint64_t (**)(char *, uint64_t))(v53 + 8))(v18, v55);
  v33 = Locale.Language.characterDirection.getter(v32);
  (*(void (**)(char *, uint64_t))(v59 + 8))(v16, v60);
  v34 = (unsigned int *)&enum case for LayoutDirection.rightToLeft(_:);
  v35 = v54;
  if (v33 != 2)
    v34 = (unsigned int *)&enum case for LayoutDirection.leftToRight(_:);
  v36 = v52;
  v37 = v57;
  (*(void (**)(char *, _QWORD, uint64_t))(v54 + 104))(v52, *v34, v57);
  v38 = v62;
  (*(void (**)(char *, char *, uint64_t))(v35 + 16))((char *)v62 + *(int *)(v63 + 28), v36, v37);
  *v38 = KeyPath;
  sub_B3D0((uint64_t)v38, (uint64_t)&v21[*(int *)(v68 + 36)], &qword_261E18);
  *(_QWORD *)v21 = v25;
  *((_QWORD *)v21 + 1) = v24;
  v21[16] = v26;
  *((_QWORD *)v21 + 3) = v27;
  sub_34B1C(v25, v24, v26);
  swift_bridgeObjectRetain(v27);
  sub_B414((uint64_t)v38, &qword_261E18);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v36, v37);
  sub_2B574(v25, v24, v26);
  swift_bridgeObjectRelease(v27);
  v39 = v64;
  (*(void (**)(char *, uint64_t, uint64_t))(v65 + 16))(v64, v58, v66);
  sub_BD00(v56, (uint64_t)v69);
  v40 = Text.init(_:localizer:)(v39, v69);
  v42 = v41;
  v44 = v43;
  v46 = v45 & 1;
  v47 = sub_7ACF8();
  v48 = (uint64_t)v61;
  View.accessibilityLabel(_:)(v40, v42, v46, v44, v68, v47);
  sub_2B574(v40, v42, v46);
  swift_bridgeObjectRelease(v44);
  sub_B414((uint64_t)v21, &qword_261E08);
  return sub_167A4(v48, v67, &qword_261DF0);
}

uint64_t sub_74E50@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  uint64_t result;
  uint64_t *v73;
  uint64_t v74;
  unsigned int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  _BYTE v80[48];

  v78 = a5;
  v79 = a6;
  v74 = a3;
  v10 = type metadata accessor for ColorConstants(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v74 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for LocalizerRequest(0);
  __chkstk_darwin(v13);
  v15 = (char *)&v74 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v16 + 16))(v15, a1);
  sub_BD00(a2, (uint64_t)v80);
  v17 = Text.init(_:localizer:)(v15, v80);
  v19 = v18;
  v21 = v20;
  v23 = v22 & 1;
  v24 = Text.font(_:)(a3, v17, v18, v23, v20);
  v26 = v25;
  v28 = v27;
  v30 = v29 & 1;
  sub_2B574(v17, v19, v23);
  swift_bridgeObjectRelease(v21);
  v31 = Text.foregroundColor(_:)(a4, v24, v26, v30, v28);
  v33 = v32;
  v35 = v34;
  v37 = v36 & 1;
  sub_2B574(v24, v26, v30);
  swift_bridgeObjectRelease(v28);
  v38 = static Text.+ infix(_:_:)(v31, v33, v37, v35, 41154, 0xA200000000000000, 0, &_swiftEmptyArrayStorage);
  v76 = v39;
  v77 = v40;
  v75 = v41 & 1;
  sub_2B574(v31, v33, v37);
  swift_bridgeObjectRelease(v35);
  v42 = Image.init(systemName:)(0x2E6E6F7276656863, 0xEF64726177726F66);
  v43 = Text.init(_:)(v42);
  v45 = v44;
  v47 = v46;
  v49 = v48 & 1;
  v50 = Text.font(_:)(v74, v43, v44, v49, v46);
  v52 = v51;
  v54 = v53;
  v56 = v55 & 1;
  sub_2B574(v43, v45, v49);
  swift_bridgeObjectRelease(v47);
  type metadata accessor for TopLockupMetadataView(0);
  _s7BooksUI18BuyButtonExternalsV6colorsAA14ColorConstantsVvg_0((uint64_t)v12);
  v57 = objc_msgSend((id)objc_opt_self(UIColor), "tertiaryLabelColor");
  v58 = Color.init(_:)(v57);
  sub_224DC((uint64_t)v12, type metadata accessor for ColorConstants);
  v59 = Text.foregroundColor(_:)(v58, v50, v52, v56, v54);
  v61 = v60;
  v63 = v62;
  v65 = v64 & 1;
  sub_2B574(v50, v52, v56);
  swift_release(v58);
  swift_bridgeObjectRelease(v54);
  v66 = v76;
  v67 = v77;
  LOBYTE(v56) = v75;
  v74 = static Text.+ infix(_:_:)(v38, v76, v75, v77, v59, v61, v65, v63);
  v69 = v68;
  LOBYTE(v52) = v70;
  v78 = v71;
  sub_2B574(v59, v61, v65);
  swift_bridgeObjectRelease(v63);
  sub_2B574(v38, v66, v56);
  result = swift_bridgeObjectRelease(v67);
  v73 = v79;
  *v79 = v74;
  v73[1] = v69;
  *((_BYTE *)v73 + 16) = v52 & 1;
  v73[3] = v78;
  return result;
}

uint64_t sub_751B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _QWORD v27[3];
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;

  v27[1] = a5;
  v9 = type metadata accessor for LocalizerRequest(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_75318(a2, a1, a3, a4, &v28);
  v13 = v28;
  v14 = v29;
  v15 = v30;
  v16 = v31;
  v32 = v28;
  v33 = v29;
  v34 = v30;
  v35 = v31;
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a2, v9);
  sub_BD00(a1, (uint64_t)&v28);
  v17 = Text.init(_:localizer:)(v12, &v28);
  v19 = v18;
  v21 = v20;
  v23 = v22 & 1;
  v24 = sub_5440(&qword_261DE8);
  v25 = sub_7A730();
  View.accessibilityLabel(_:)(v17, v19, v23, v21, v24, v25);
  sub_2B574(v17, v19, v23);
  swift_bridgeObjectRelease(v21);
  sub_2B574(v13, v14, v15);
  return swift_bridgeObjectRelease(v16);
}

uint64_t sub_75318@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  uint64_t result;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  _BYTE v77[48];

  v74 = a3;
  v75 = a4;
  v76 = a5;
  v9 = type metadata accessor for LocalizerRequest(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v71 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v12 + 16))(v11, a1);
  sub_BD00(a2, (uint64_t)v77);
  v13 = Text.init(_:localizer:)(v11, v77);
  v15 = v14;
  v17 = v16;
  v19 = v18 & 1;
  v20 = Text.font(_:)(a3, v13, v14, v19, v16);
  v22 = v21;
  v24 = v23;
  v26 = v25 & 1;
  sub_2B574(v13, v15, v19);
  swift_bridgeObjectRelease(v17);
  v27 = Text.foregroundColor(_:)(a4, v20, v22, v26, v24);
  v29 = v28;
  v31 = v30;
  v33 = v32 & 1;
  sub_2B574(v20, v22, v26);
  swift_bridgeObjectRelease(v24);
  v34 = static Text.+ infix(_:_:)(v27, v29, v33, v31, 41154, 0xA200000000000000, 0, &_swiftEmptyArrayStorage);
  v71 = v34;
  v72 = v35;
  v73 = v36;
  v38 = v37 & 1;
  sub_2B574(v27, v29, v33);
  swift_bridgeObjectRelease(v31);
  v39 = Image.init(systemName:)(0x7269632E6F666E69, 0xEB00000000656C63);
  v40 = Text.init(_:)(v39);
  v42 = v41;
  v44 = v43;
  v46 = v45 & 1;
  v47 = Text.font(_:)(v74, v40, v41, v46, v43);
  v49 = v48;
  v51 = v50;
  v53 = v52 & 1;
  sub_2B574(v40, v42, v46);
  swift_bridgeObjectRelease(v44);
  v54 = Text.foregroundColor(_:)(v75, v47, v49, v53, v51);
  v56 = v55;
  v58 = v57;
  v60 = v59 & 1;
  sub_2B574(v47, v49, v53);
  swift_bridgeObjectRelease(v51);
  v61 = v34;
  v62 = v72;
  v63 = v73;
  v64 = static Text.+ infix(_:_:)(v61, v73, v38, v72, v54, v56, v60, v58);
  v66 = v65;
  LOBYTE(v47) = v67;
  v75 = v68;
  sub_2B574(v54, v56, v60);
  swift_bridgeObjectRelease(v58);
  sub_2B574(v71, v63, v38);
  result = swift_bridgeObjectRelease(v62);
  v70 = v76;
  *v76 = v64;
  v70[1] = v66;
  *((_BYTE *)v70 + 16) = v47 & 1;
  v70[3] = v75;
  return result;
}

uint64_t TopLockupMetadataView.Footer.init(leadingText:centerText:trailingText:separator:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  int *v11;

  v10 = type metadata accessor for LocalizerRequest(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(a5, a1, v10);
  v11 = (int *)type metadata accessor for TopLockupMetadataView.Footer(0);
  sub_167A4(a2, a5 + v11[5], &qword_25E0C8);
  sub_167A4(a3, a5 + v11[6], &qword_25E0C8);
  return sub_167A4(a4, a5 + v11[7], &qword_25E0C8);
}

uint64_t sub_75694@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  double v11;
  uint64_t v13;

  v2 = type metadata accessor for ButtonStyleConfiguration.Label(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_5440(&qword_261EC8);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = ButtonStyleConfiguration.label.getter(v7);
  if ((ButtonStyleConfiguration.isPressed.getter(v10) & 1) != 0)
    v11 = 0.6;
  else
    v11 = 1.0;
  (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v9, v5, v2);
  *(double *)&v9[*(int *)(v6 + 36)] = v11;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return sub_167A4((uint64_t)v9, a1, &qword_261EC8);
}

uint64_t sub_757B0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char v10;
  void (*v11)(char *, uint64_t);
  uint64_t v12;
  unsigned int *v13;
  uint64_t v15;

  v2 = type metadata accessor for ColorScheme(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v4);
  v9 = (char *)&v15 - v8;
  EnvironmentValues.colorScheme.getter(v7);
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v6, enum case for ColorScheme.light(_:), v2);
  v10 = static ColorScheme.== infix(_:_:)(v9, v6);
  v11 = *(void (**)(char *, uint64_t))(v3 + 8);
  v11(v6, v2);
  v11(v9, v2);
  v12 = type metadata accessor for BlendMode(0);
  v13 = (unsigned int *)&enum case for BlendMode.plusDarker(_:);
  if ((v10 & 1) == 0)
    v13 = (unsigned int *)&enum case for BlendMode.plusLighter(_:);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v12 - 8) + 104))(a1, *v13, v12);
}

uint64_t type metadata accessor for TopLockupMetadataView(uint64_t a1)
{
  return sub_1FE90(a1, (uint64_t *)&unk_261AA0, (uint64_t)&nominal type descriptor for TopLockupMetadataView);
}

uint64_t sub_758F0@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;

  result = EnvironmentValues.lineLimit.getter();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_75920@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;

  result = EnvironmentValues.lineLimit.getter();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_75950(uint64_t a1)
{
  return EnvironmentValues.lineLimit.setter(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8));
}

uint64_t sub_7597C(uint64_t a1)
{
  return EnvironmentValues.lineLimit.setter(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8));
}

uint64_t sub_759A8@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.multilineTextAlignment.getter();
  *a1 = result;
  return result;
}

uint64_t sub_759D0@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.multilineTextAlignment.getter();
  *a1 = result;
  return result;
}

uint64_t sub_759F8(unsigned __int8 *a1)
{
  return EnvironmentValues.multilineTextAlignment.setter(*a1);
}

uint64_t sub_75A1C(unsigned __int8 *a1)
{
  return EnvironmentValues.multilineTextAlignment.setter(*a1);
}

uint64_t type metadata accessor for TopLockupMetadataView.Footer(uint64_t a1)
{
  return sub_1FE90(a1, (uint64_t *)&unk_261B90, (uint64_t)&nominal type descriptor for TopLockupMetadataView.Footer);
}

uint64_t sub_75A54(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &opaque type descriptor for <<opaque return type of TopLockupMetadataView.body>>, 1);
}

unint64_t initializeBufferWithCopyOfBuffer for TopLockupMetadataView(unint64_t a1, uint64_t a2, int *a3)
{
  int v5;
  uint64_t v7;
  char v8;
  uint64_t v9;
  _WORD *v10;
  _WORD *v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _WORD *v32;
  _WORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  const void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  const void *v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  const void *v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  const void *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  __int128 v81;
  uint64_t v82;
  void *v83;
  const void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  void *v89;
  const void *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  void (*v100)(char *, char *, uint64_t);
  uint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  char *v112;
  uint64_t v113;
  int *v115;
  uint64_t v116;
  unsigned int (*v117)(char *, uint64_t, uint64_t);

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v22 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = v22 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain(v22);
  }
  else
  {
    v7 = *(_QWORD *)a2;
    v8 = *(_BYTE *)(a2 + 8);
    sub_F9E4(*(_QWORD *)a2, v8);
    *(_QWORD *)a1 = v7;
    *(_BYTE *)(a1 + 8) = v8;
    v9 = a3[5];
    v10 = (_WORD *)(a1 + v9);
    v11 = (_WORD *)(a2 + v9);
    v12 = sub_5440(&qword_25F548);
    if (swift_getEnumCaseMultiPayload(v11, v12) == 1)
    {
      *v10 = *v11;
      v13 = (int *)type metadata accessor for SizeConstants.Environment(0);
      v14 = v13[6];
      v15 = (char *)v10 + v14;
      v16 = (char *)v11 + v14;
      v17 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v15, v16, v17);
      *(_QWORD *)((char *)v10 + v13[7]) = *(_QWORD *)((char *)v11 + v13[7]);
      v18 = v13[8];
      v19 = (char *)v10 + v18;
      v20 = (char *)v11 + v18;
      v19[2] = v20[2];
      *(_WORD *)v19 = *(_WORD *)v20;
      v21 = 1;
    }
    else
    {
      v23 = *(_QWORD *)v11;
      *(_QWORD *)v10 = *(_QWORD *)v11;
      swift_retain(v23);
      v21 = 0;
    }
    swift_storeEnumTagMultiPayload(v10, v12, v21);
    v24 = a3[6];
    v25 = (uint64_t *)(a1 + v24);
    v26 = (uint64_t *)(a2 + v24);
    v27 = sub_5440(&qword_25F1E8);
    if (swift_getEnumCaseMultiPayload(v26, v27) == 1)
    {
      v28 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v28 - 8) + 16))(v25, v26, v28);
      v29 = 1;
    }
    else
    {
      v30 = *v26;
      *v25 = *v26;
      swift_retain(v30);
      v29 = 0;
    }
    swift_storeEnumTagMultiPayload(v25, v27, v29);
    v31 = a3[7];
    v32 = (_WORD *)(a1 + v31);
    v33 = (_WORD *)(a2 + v31);
    v34 = sub_5440(&qword_25FAA0);
    if (swift_getEnumCaseMultiPayload(v33, v34) == 1)
    {
      *v32 = *v33;
      v35 = type metadata accessor for FontConstants.Environment(0);
      v36 = *(int *)(v35 + 24);
      v37 = (char *)v32 + v36;
      v38 = (char *)v33 + v36;
      v39 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v39 - 8) + 16))(v37, v38, v39);
      *(_QWORD *)((char *)v32 + *(int *)(v35 + 28)) = *(_QWORD *)((char *)v33 + *(int *)(v35 + 28));
      v40 = 1;
    }
    else
    {
      v41 = *(_QWORD *)v33;
      *(_QWORD *)v32 = *(_QWORD *)v33;
      swift_retain(v41);
      v40 = 0;
    }
    swift_storeEnumTagMultiPayload(v32, v34, v40);
    v42 = a3[8];
    v43 = (uint64_t *)(a1 + v42);
    v44 = (uint64_t *)(a2 + v42);
    v45 = sub_5440(&qword_25F208);
    if (swift_getEnumCaseMultiPayload(v44, v45) == 1)
    {
      v46 = type metadata accessor for BlendMode(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v46 - 8) + 16))(v43, v44, v46);
      v47 = 1;
    }
    else
    {
      v48 = *v44;
      *v43 = *v44;
      swift_retain(v48);
      v47 = 0;
    }
    swift_storeEnumTagMultiPayload(v43, v45, v47);
    v49 = a3[9];
    v50 = a1 + v49;
    v51 = a2 + v49;
    v52 = *(_QWORD *)v51;
    v53 = *(_BYTE *)(v51 + 8);
    sub_F9E4(*(_QWORD *)v51, v53);
    *(_QWORD *)v50 = v52;
    *(_BYTE *)(v50 + 8) = v53;
    v54 = a3[10];
    v55 = a3[11];
    v56 = (uint64_t *)(a1 + v54);
    v57 = (uint64_t *)(a2 + v54);
    v58 = *v57;
    v59 = v57[1];
    *v56 = *v57;
    v56[1] = v59;
    v60 = (void *)(a1 + v55);
    v61 = (const void *)(a2 + v55);
    swift_retain(v58);
    swift_retain(v59);
    v62 = sub_5440(&qword_261048);
    if (swift_getEnumCaseMultiPayload(v61, v62))
    {
      memcpy(v60, v61, *(_QWORD *)(*(_QWORD *)(v62 - 8) + 64));
    }
    else
    {
      v63 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v63 - 8) + 16))(v60, v61, v63);
      swift_storeEnumTagMultiPayload(v60, v62, 0);
    }
    v64 = a3[12];
    v65 = (void *)(a1 + v64);
    v66 = (const void *)(a2 + v64);
    if (swift_getEnumCaseMultiPayload(a2 + v64, v62))
    {
      memcpy(v65, v66, *(_QWORD *)(*(_QWORD *)(v62 - 8) + 64));
    }
    else
    {
      v67 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v67 - 8) + 16))(v65, v66, v67);
      swift_storeEnumTagMultiPayload(v65, v62, 0);
    }
    v68 = a3[13];
    v69 = (void *)(a1 + v68);
    v70 = (const void *)(a2 + v68);
    if (swift_getEnumCaseMultiPayload(a2 + v68, v62))
    {
      memcpy(v69, v70, *(_QWORD *)(*(_QWORD *)(v62 - 8) + 64));
    }
    else
    {
      v71 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v71 - 8) + 16))(v69, v70, v71);
      swift_storeEnumTagMultiPayload(v69, v62, 0);
    }
    v72 = a3[14];
    v73 = (void *)(a1 + v72);
    v74 = (const void *)(a2 + v72);
    if (swift_getEnumCaseMultiPayload(a2 + v72, v62))
    {
      memcpy(v73, v74, *(_QWORD *)(*(_QWORD *)(v62 - 8) + 64));
    }
    else
    {
      v75 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v75 - 8) + 16))(v73, v74, v75);
      swift_storeEnumTagMultiPayload(v73, v62, 0);
    }
    v76 = a3[15];
    v77 = a1 + v76;
    v78 = a2 + v76;
    v79 = *(_QWORD *)(a2 + v76 + 24);
    if (v79)
    {
      v80 = *(_QWORD *)(v78 + 32);
      *(_QWORD *)(v77 + 24) = v79;
      *(_QWORD *)(v77 + 32) = v80;
      (**(void (***)(void))(v79 - 8))();
    }
    else
    {
      v81 = *(_OWORD *)(v78 + 16);
      *(_OWORD *)v77 = *(_OWORD *)v78;
      *(_OWORD *)(v77 + 16) = v81;
      *(_QWORD *)(v77 + 32) = *(_QWORD *)(v78 + 32);
    }
    v82 = a3[16];
    v83 = (void *)(a1 + v82);
    v84 = (const void *)(a2 + v82);
    v85 = type metadata accessor for ImpressionMetrics(0);
    v86 = *(_QWORD *)(v85 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v86 + 48))(v84, 1, v85))
    {
      v87 = sub_5440(&qword_25FE30);
      memcpy(v83, v84, *(_QWORD *)(*(_QWORD *)(v87 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v86 + 16))(v83, v84, v85);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v86 + 56))(v83, 0, 1, v85);
    }
    v88 = a3[17];
    v89 = (void *)(a1 + v88);
    v90 = (const void *)(a2 + v88);
    v91 = sub_5440(&qword_261A08);
    if (swift_getEnumCaseMultiPayload(v90, v91))
    {
      memcpy(v89, v90, *(_QWORD *)(*(_QWORD *)(v91 - 8) + 64));
    }
    else
    {
      v92 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v92 - 8) + 16))(v89, v90, v92);
      v93 = sub_5440(&qword_261A38);
      *((_BYTE *)v89 + *(int *)(v93 + 48)) = *((_BYTE *)v90 + *(int *)(v93 + 48));
      swift_storeEnumTagMultiPayload(v89, v91, 0);
    }
    v94 = a3[18];
    v95 = (char *)(a1 + v94);
    v96 = (char *)(a2 + v94);
    v97 = sub_5440(&qword_261A10);
    if (swift_getEnumCaseMultiPayload(v96, v97))
    {
      memcpy(v95, v96, *(_QWORD *)(*(_QWORD *)(v97 - 8) + 64));
    }
    else
    {
      v116 = v97;
      v98 = type metadata accessor for LocalizerRequest(0);
      v99 = *(_QWORD *)(v98 - 8);
      v100 = *(void (**)(char *, char *, uint64_t))(v99 + 16);
      v100(v95, v96, v98);
      v115 = (int *)type metadata accessor for TopLockupMetadataView.Footer(0);
      v101 = v115[5];
      v102 = &v95[v101];
      v103 = &v96[v101];
      v117 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v99 + 48);
      if (v117(&v96[v101], 1, v98))
      {
        v104 = sub_5440(&qword_25E0C8);
        memcpy(v102, v103, *(_QWORD *)(*(_QWORD *)(v104 - 8) + 64));
      }
      else
      {
        v100(v102, v103, v98);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v99 + 56))(v102, 0, 1, v98);
      }
      v105 = v115[6];
      v106 = &v95[v105];
      v107 = &v96[v105];
      if (v117(&v96[v105], 1, v98))
      {
        v108 = sub_5440(&qword_25E0C8);
        memcpy(v106, v107, *(_QWORD *)(*(_QWORD *)(v108 - 8) + 64));
        v109 = v99;
      }
      else
      {
        v100(v106, v107, v98);
        v109 = v99;
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v99 + 56))(v106, 0, 1, v98);
      }
      v110 = v115[7];
      v111 = &v95[v110];
      v112 = &v96[v110];
      if (v117(v112, 1, v98))
      {
        v113 = sub_5440(&qword_25E0C8);
        memcpy(v111, v112, *(_QWORD *)(*(_QWORD *)(v113 - 8) + 64));
      }
      else
      {
        v100(v111, v112, v98);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v109 + 56))(v111, 0, 1, v98);
      }
      swift_storeEnumTagMultiPayload(v95, v116, 0);
    }
    *(_BYTE *)(a1 + a3[19]) = *(_BYTE *)(a2 + a3[19]);
  }
  return a1;
}

uint64_t destroy for TopLockupMetadataView(uint64_t a1, int *a2)
{
  _QWORD *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t result;
  uint64_t v38;
  uint64_t v39;
  int *v40;
  uint64_t v41;
  unsigned int (*v42)(uint64_t, uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  void (*v45)(uint64_t, uint64_t);

  sub_BE0C(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
  v4 = (_QWORD *)(a1 + a2[5]);
  v5 = sub_5440(&qword_25F548);
  if (swift_getEnumCaseMultiPayload(v4, v5) == 1)
  {
    v6 = (char *)v4 + *(int *)(type metadata accessor for SizeConstants.Environment(0) + 24);
    v7 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  }
  else
  {
    swift_release(*v4);
  }
  v8 = (_QWORD *)(a1 + a2[6]);
  v9 = sub_5440(&qword_25F1E8);
  if (swift_getEnumCaseMultiPayload(v8, v9) == 1)
  {
    v10 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v8, v10);
  }
  else
  {
    swift_release(*v8);
  }
  v11 = (_QWORD *)(a1 + a2[7]);
  v12 = sub_5440(&qword_25FAA0);
  if (swift_getEnumCaseMultiPayload(v11, v12) == 1)
  {
    v13 = (char *)v11 + *(int *)(type metadata accessor for FontConstants.Environment(0) + 24);
    v14 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
  }
  else
  {
    swift_release(*v11);
  }
  v15 = (_QWORD *)(a1 + a2[8]);
  v16 = sub_5440(&qword_25F208);
  if (swift_getEnumCaseMultiPayload(v15, v16) == 1)
  {
    v17 = type metadata accessor for BlendMode(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(v15, v17);
  }
  else
  {
    swift_release(*v15);
  }
  sub_BE0C(*(_QWORD *)(a1 + a2[9]), *(_BYTE *)(a1 + a2[9] + 8));
  v18 = (_QWORD *)(a1 + a2[10]);
  swift_release(*v18);
  swift_release(v18[1]);
  v19 = a1 + a2[11];
  v20 = sub_5440(&qword_261048);
  if (!swift_getEnumCaseMultiPayload(v19, v20))
  {
    v21 = type metadata accessor for LocalizerRequest(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 8))(v19, v21);
  }
  v22 = a1 + a2[12];
  if (!swift_getEnumCaseMultiPayload(v22, v20))
  {
    v23 = type metadata accessor for LocalizerRequest(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 8))(v22, v23);
  }
  v24 = a1 + a2[13];
  if (!swift_getEnumCaseMultiPayload(v24, v20))
  {
    v25 = type metadata accessor for LocalizerRequest(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 8))(v24, v25);
  }
  v26 = a1 + a2[14];
  if (!swift_getEnumCaseMultiPayload(v26, v20))
  {
    v27 = type metadata accessor for LocalizerRequest(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 8))(v26, v27);
  }
  v28 = (_QWORD *)(a1 + a2[15]);
  if (v28[3])
    _s7BooksUI13AnyPagedFrameVwxx_0(v28);
  v29 = a1 + a2[16];
  v30 = type metadata accessor for ImpressionMetrics(0);
  v31 = *(_QWORD *)(v30 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30))
    (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v29, v30);
  v32 = a1 + a2[17];
  v33 = sub_5440(&qword_261A08);
  if (!swift_getEnumCaseMultiPayload(v32, v33))
  {
    v34 = type metadata accessor for LocalizerRequest(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 8))(v32, v34);
  }
  v35 = a1 + a2[18];
  v36 = sub_5440(&qword_261A10);
  result = swift_getEnumCaseMultiPayload(v35, v36);
  if (!(_DWORD)result)
  {
    v38 = type metadata accessor for LocalizerRequest(0);
    v39 = *(_QWORD *)(v38 - 8);
    v45 = *(void (**)(uint64_t, uint64_t))(v39 + 8);
    v45(v35, v38);
    v40 = (int *)type metadata accessor for TopLockupMetadataView.Footer(0);
    v41 = v35 + v40[5];
    v42 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48);
    if (!v42(v41, 1, v38))
      v45(v41, v38);
    v43 = v35 + v40[6];
    if (!v42(v43, 1, v38))
      v45(v43, v38);
    v44 = v35 + v40[7];
    result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v42)(v44, 1, v38);
    if (!(_DWORD)result)
      return ((uint64_t (*)(uint64_t, uint64_t))v45)(v44, v38);
  }
  return result;
}

uint64_t initializeWithCopy for TopLockupMetadataView(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  _WORD *v9;
  _WORD *v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _WORD *v30;
  _WORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  const void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  const void *v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  const void *v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  const void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  __int128 v79;
  uint64_t v80;
  void *v81;
  const void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void *v87;
  const void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  void (*v98)(char *, char *, uint64_t);
  uint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  char *v110;
  uint64_t v111;
  int *v113;
  uint64_t v114;
  unsigned int (*v115)(char *, uint64_t, uint64_t);

  v6 = *(_QWORD *)a2;
  v7 = *(_BYTE *)(a2 + 8);
  sub_F9E4(*(_QWORD *)a2, v7);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  v8 = a3[5];
  v9 = (_WORD *)(a1 + v8);
  v10 = (_WORD *)(a2 + v8);
  v11 = sub_5440(&qword_25F548);
  if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
  {
    *v9 = *v10;
    v12 = (int *)type metadata accessor for SizeConstants.Environment(0);
    v13 = v12[6];
    v14 = (char *)v9 + v13;
    v15 = (char *)v10 + v13;
    v16 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v14, v15, v16);
    *(_QWORD *)((char *)v9 + v12[7]) = *(_QWORD *)((char *)v10 + v12[7]);
    v17 = v12[8];
    v18 = (char *)v9 + v17;
    v19 = (char *)v10 + v17;
    v18[2] = v19[2];
    *(_WORD *)v18 = *(_WORD *)v19;
    v20 = 1;
  }
  else
  {
    v21 = *(_QWORD *)v10;
    *(_QWORD *)v9 = *(_QWORD *)v10;
    swift_retain(v21);
    v20 = 0;
  }
  swift_storeEnumTagMultiPayload(v9, v11, v20);
  v22 = a3[6];
  v23 = (uint64_t *)(a1 + v22);
  v24 = (uint64_t *)(a2 + v22);
  v25 = sub_5440(&qword_25F1E8);
  if (swift_getEnumCaseMultiPayload(v24, v25) == 1)
  {
    v26 = type metadata accessor for ColorScheme(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v26 - 8) + 16))(v23, v24, v26);
    v27 = 1;
  }
  else
  {
    v28 = *v24;
    *v23 = *v24;
    swift_retain(v28);
    v27 = 0;
  }
  swift_storeEnumTagMultiPayload(v23, v25, v27);
  v29 = a3[7];
  v30 = (_WORD *)(a1 + v29);
  v31 = (_WORD *)(a2 + v29);
  v32 = sub_5440(&qword_25FAA0);
  if (swift_getEnumCaseMultiPayload(v31, v32) == 1)
  {
    *v30 = *v31;
    v33 = type metadata accessor for FontConstants.Environment(0);
    v34 = *(int *)(v33 + 24);
    v35 = (char *)v30 + v34;
    v36 = (char *)v31 + v34;
    v37 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v37 - 8) + 16))(v35, v36, v37);
    *(_QWORD *)((char *)v30 + *(int *)(v33 + 28)) = *(_QWORD *)((char *)v31 + *(int *)(v33 + 28));
    v38 = 1;
  }
  else
  {
    v39 = *(_QWORD *)v31;
    *(_QWORD *)v30 = *(_QWORD *)v31;
    swift_retain(v39);
    v38 = 0;
  }
  swift_storeEnumTagMultiPayload(v30, v32, v38);
  v40 = a3[8];
  v41 = (uint64_t *)(a1 + v40);
  v42 = (uint64_t *)(a2 + v40);
  v43 = sub_5440(&qword_25F208);
  if (swift_getEnumCaseMultiPayload(v42, v43) == 1)
  {
    v44 = type metadata accessor for BlendMode(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v44 - 8) + 16))(v41, v42, v44);
    v45 = 1;
  }
  else
  {
    v46 = *v42;
    *v41 = *v42;
    swift_retain(v46);
    v45 = 0;
  }
  swift_storeEnumTagMultiPayload(v41, v43, v45);
  v47 = a3[9];
  v48 = a1 + v47;
  v49 = a2 + v47;
  v50 = *(_QWORD *)v49;
  v51 = *(_BYTE *)(v49 + 8);
  sub_F9E4(*(_QWORD *)v49, v51);
  *(_QWORD *)v48 = v50;
  *(_BYTE *)(v48 + 8) = v51;
  v52 = a3[10];
  v53 = a3[11];
  v54 = (uint64_t *)(a1 + v52);
  v55 = (uint64_t *)(a2 + v52);
  v56 = *v55;
  v57 = v55[1];
  *v54 = *v55;
  v54[1] = v57;
  v58 = (void *)(a1 + v53);
  v59 = (const void *)(a2 + v53);
  swift_retain(v56);
  swift_retain(v57);
  v60 = sub_5440(&qword_261048);
  if (swift_getEnumCaseMultiPayload(v59, v60))
  {
    memcpy(v58, v59, *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64));
  }
  else
  {
    v61 = type metadata accessor for LocalizerRequest(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v61 - 8) + 16))(v58, v59, v61);
    swift_storeEnumTagMultiPayload(v58, v60, 0);
  }
  v62 = a3[12];
  v63 = (void *)(a1 + v62);
  v64 = (const void *)(a2 + v62);
  if (swift_getEnumCaseMultiPayload(a2 + v62, v60))
  {
    memcpy(v63, v64, *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64));
  }
  else
  {
    v65 = type metadata accessor for LocalizerRequest(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v65 - 8) + 16))(v63, v64, v65);
    swift_storeEnumTagMultiPayload(v63, v60, 0);
  }
  v66 = a3[13];
  v67 = (void *)(a1 + v66);
  v68 = (const void *)(a2 + v66);
  if (swift_getEnumCaseMultiPayload(a2 + v66, v60))
  {
    memcpy(v67, v68, *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64));
  }
  else
  {
    v69 = type metadata accessor for LocalizerRequest(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v69 - 8) + 16))(v67, v68, v69);
    swift_storeEnumTagMultiPayload(v67, v60, 0);
  }
  v70 = a3[14];
  v71 = (void *)(a1 + v70);
  v72 = (const void *)(a2 + v70);
  if (swift_getEnumCaseMultiPayload(a2 + v70, v60))
  {
    memcpy(v71, v72, *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64));
  }
  else
  {
    v73 = type metadata accessor for LocalizerRequest(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v73 - 8) + 16))(v71, v72, v73);
    swift_storeEnumTagMultiPayload(v71, v60, 0);
  }
  v74 = a3[15];
  v75 = a1 + v74;
  v76 = a2 + v74;
  v77 = *(_QWORD *)(a2 + v74 + 24);
  if (v77)
  {
    v78 = *(_QWORD *)(v76 + 32);
    *(_QWORD *)(v75 + 24) = v77;
    *(_QWORD *)(v75 + 32) = v78;
    (**(void (***)(void))(v77 - 8))();
  }
  else
  {
    v79 = *(_OWORD *)(v76 + 16);
    *(_OWORD *)v75 = *(_OWORD *)v76;
    *(_OWORD *)(v75 + 16) = v79;
    *(_QWORD *)(v75 + 32) = *(_QWORD *)(v76 + 32);
  }
  v80 = a3[16];
  v81 = (void *)(a1 + v80);
  v82 = (const void *)(a2 + v80);
  v83 = type metadata accessor for ImpressionMetrics(0);
  v84 = *(_QWORD *)(v83 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v84 + 48))(v82, 1, v83))
  {
    v85 = sub_5440(&qword_25FE30);
    memcpy(v81, v82, *(_QWORD *)(*(_QWORD *)(v85 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v84 + 16))(v81, v82, v83);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v84 + 56))(v81, 0, 1, v83);
  }
  v86 = a3[17];
  v87 = (void *)(a1 + v86);
  v88 = (const void *)(a2 + v86);
  v89 = sub_5440(&qword_261A08);
  if (swift_getEnumCaseMultiPayload(v88, v89))
  {
    memcpy(v87, v88, *(_QWORD *)(*(_QWORD *)(v89 - 8) + 64));
  }
  else
  {
    v90 = type metadata accessor for LocalizerRequest(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v90 - 8) + 16))(v87, v88, v90);
    v91 = sub_5440(&qword_261A38);
    *((_BYTE *)v87 + *(int *)(v91 + 48)) = *((_BYTE *)v88 + *(int *)(v91 + 48));
    swift_storeEnumTagMultiPayload(v87, v89, 0);
  }
  v92 = a3[18];
  v93 = (char *)(a1 + v92);
  v94 = (char *)(a2 + v92);
  v95 = sub_5440(&qword_261A10);
  if (swift_getEnumCaseMultiPayload(v94, v95))
  {
    memcpy(v93, v94, *(_QWORD *)(*(_QWORD *)(v95 - 8) + 64));
  }
  else
  {
    v114 = v95;
    v96 = type metadata accessor for LocalizerRequest(0);
    v97 = *(_QWORD *)(v96 - 8);
    v98 = *(void (**)(char *, char *, uint64_t))(v97 + 16);
    v98(v93, v94, v96);
    v113 = (int *)type metadata accessor for TopLockupMetadataView.Footer(0);
    v99 = v113[5];
    v100 = &v93[v99];
    v101 = &v94[v99];
    v115 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v97 + 48);
    if (v115(&v94[v99], 1, v96))
    {
      v102 = sub_5440(&qword_25E0C8);
      memcpy(v100, v101, *(_QWORD *)(*(_QWORD *)(v102 - 8) + 64));
    }
    else
    {
      v98(v100, v101, v96);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v97 + 56))(v100, 0, 1, v96);
    }
    v103 = v113[6];
    v104 = &v93[v103];
    v105 = &v94[v103];
    if (v115(&v94[v103], 1, v96))
    {
      v106 = sub_5440(&qword_25E0C8);
      memcpy(v104, v105, *(_QWORD *)(*(_QWORD *)(v106 - 8) + 64));
      v107 = v97;
    }
    else
    {
      v98(v104, v105, v96);
      v107 = v97;
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v97 + 56))(v104, 0, 1, v96);
    }
    v108 = v113[7];
    v109 = &v93[v108];
    v110 = &v94[v108];
    if (v115(v110, 1, v96))
    {
      v111 = sub_5440(&qword_25E0C8);
      memcpy(v109, v110, *(_QWORD *)(*(_QWORD *)(v111 - 8) + 64));
    }
    else
    {
      v98(v109, v110, v96);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v107 + 56))(v109, 0, 1, v96);
    }
    swift_storeEnumTagMultiPayload(v93, v114, 0);
  }
  *(_BYTE *)(a1 + a3[19]) = *(_BYTE *)(a2 + a3[19]);
  return a1;
}

uint64_t assignWithCopy for TopLockupMetadataView(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  _BYTE *v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  _BYTE *v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE *v33;
  _BYTE *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE *v38;
  _BYTE *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  const void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  const void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  const void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  const void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  __int128 *v86;
  uint64_t v87;
  __int128 v88;
  __int128 v89;
  uint64_t v90;
  void *v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t (*v95)(void *, uint64_t, uint64_t);
  int v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  void *v100;
  const void *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  void (*v111)(char *, char *, uint64_t);
  uint64_t v112;
  char *v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  char *v123;
  uint64_t v124;
  int *v126;
  uint64_t v127;
  unsigned int (*v128)(char *, uint64_t, uint64_t);

  v6 = *(_QWORD *)a2;
  v7 = *(_BYTE *)(a2 + 8);
  sub_F9E4(*(_QWORD *)a2, v7);
  v8 = *(_QWORD *)a1;
  v9 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  sub_BE0C(v8, v9);
  if (a1 != a2)
  {
    v10 = a3[5];
    v11 = (_BYTE *)(a1 + v10);
    v12 = (_BYTE *)(a2 + v10);
    sub_B414(a1 + v10, &qword_25F548);
    v13 = sub_5440(&qword_25F548);
    if (swift_getEnumCaseMultiPayload(v12, v13) == 1)
    {
      *v11 = *v12;
      v11[1] = v12[1];
      v14 = (int *)type metadata accessor for SizeConstants.Environment(0);
      v15 = v14[6];
      v16 = &v11[v15];
      v17 = &v12[v15];
      v18 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
      *(_QWORD *)&v11[v14[7]] = *(_QWORD *)&v12[v14[7]];
      v19 = v14[8];
      v20 = &v11[v19];
      v21 = &v12[v19];
      v22 = v21[2];
      *(_WORD *)v20 = *(_WORD *)v21;
      v20[2] = v22;
      v23 = 1;
    }
    else
    {
      v24 = *(_QWORD *)v12;
      *(_QWORD *)v11 = *(_QWORD *)v12;
      swift_retain(v24);
      v23 = 0;
    }
    swift_storeEnumTagMultiPayload(v11, v13, v23);
    v25 = a3[6];
    v26 = (uint64_t *)(a1 + v25);
    v27 = (uint64_t *)(a2 + v25);
    sub_B414(a1 + v25, &qword_25F1E8);
    v28 = sub_5440(&qword_25F1E8);
    if (swift_getEnumCaseMultiPayload(v27, v28) == 1)
    {
      v29 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v29 - 8) + 16))(v26, v27, v29);
      v30 = 1;
    }
    else
    {
      v31 = *v27;
      *v26 = *v27;
      swift_retain(v31);
      v30 = 0;
    }
    swift_storeEnumTagMultiPayload(v26, v28, v30);
    v32 = a3[7];
    v33 = (_BYTE *)(a1 + v32);
    v34 = (_BYTE *)(a2 + v32);
    sub_B414(a1 + v32, &qword_25FAA0);
    v35 = sub_5440(&qword_25FAA0);
    if (swift_getEnumCaseMultiPayload(v34, v35) == 1)
    {
      *v33 = *v34;
      v33[1] = v34[1];
      v36 = type metadata accessor for FontConstants.Environment(0);
      v37 = *(int *)(v36 + 24);
      v38 = &v33[v37];
      v39 = &v34[v37];
      v40 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v40 - 8) + 16))(v38, v39, v40);
      *(_QWORD *)&v33[*(int *)(v36 + 28)] = *(_QWORD *)&v34[*(int *)(v36 + 28)];
      v41 = 1;
    }
    else
    {
      v42 = *(_QWORD *)v34;
      *(_QWORD *)v33 = *(_QWORD *)v34;
      swift_retain(v42);
      v41 = 0;
    }
    swift_storeEnumTagMultiPayload(v33, v35, v41);
    v43 = a3[8];
    v44 = (uint64_t *)(a1 + v43);
    v45 = (uint64_t *)(a2 + v43);
    sub_B414(a1 + v43, &qword_25F208);
    v46 = sub_5440(&qword_25F208);
    if (swift_getEnumCaseMultiPayload(v45, v46) == 1)
    {
      v47 = type metadata accessor for BlendMode(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v47 - 8) + 16))(v44, v45, v47);
      v48 = 1;
    }
    else
    {
      v49 = *v45;
      *v44 = *v45;
      swift_retain(v49);
      v48 = 0;
    }
    swift_storeEnumTagMultiPayload(v44, v46, v48);
  }
  v50 = a3[9];
  v51 = a1 + v50;
  v52 = a2 + v50;
  v53 = *(_QWORD *)v52;
  v54 = *(_BYTE *)(v52 + 8);
  sub_F9E4(*(_QWORD *)v52, v54);
  v55 = *(_QWORD *)v51;
  v56 = *(_BYTE *)(v51 + 8);
  *(_QWORD *)v51 = v53;
  *(_BYTE *)(v51 + 8) = v54;
  sub_BE0C(v55, v56);
  v57 = a3[10];
  v58 = a1 + v57;
  v59 = a2 + v57;
  v60 = *(_QWORD *)(a2 + v57);
  v61 = *(_QWORD *)(a1 + v57);
  *(_QWORD *)(a1 + v57) = v60;
  swift_retain(v60);
  swift_release(v61);
  v62 = *(_QWORD *)(v58 + 8);
  v63 = *(_QWORD *)(v59 + 8);
  *(_QWORD *)(v58 + 8) = v63;
  swift_retain(v63);
  swift_release(v62);
  if (a1 != a2)
  {
    v64 = a3[11];
    v65 = (void *)(a1 + v64);
    v66 = (const void *)(a2 + v64);
    sub_B414(a1 + v64, &qword_261048);
    v67 = sub_5440(&qword_261048);
    if (swift_getEnumCaseMultiPayload(v66, v67))
    {
      memcpy(v65, v66, *(_QWORD *)(*(_QWORD *)(v67 - 8) + 64));
    }
    else
    {
      v68 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v68 - 8) + 16))(v65, v66, v68);
      swift_storeEnumTagMultiPayload(v65, v67, 0);
    }
    v69 = a3[12];
    v70 = (void *)(a1 + v69);
    v71 = (const void *)(a2 + v69);
    sub_B414(a1 + v69, &qword_261048);
    v72 = sub_5440(&qword_261048);
    if (swift_getEnumCaseMultiPayload(v71, v72))
    {
      memcpy(v70, v71, *(_QWORD *)(*(_QWORD *)(v72 - 8) + 64));
    }
    else
    {
      v73 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v73 - 8) + 16))(v70, v71, v73);
      swift_storeEnumTagMultiPayload(v70, v72, 0);
    }
    v74 = a3[13];
    v75 = (void *)(a1 + v74);
    v76 = (const void *)(a2 + v74);
    sub_B414(a1 + v74, &qword_261048);
    v77 = sub_5440(&qword_261048);
    if (swift_getEnumCaseMultiPayload(v76, v77))
    {
      memcpy(v75, v76, *(_QWORD *)(*(_QWORD *)(v77 - 8) + 64));
    }
    else
    {
      v78 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v78 - 8) + 16))(v75, v76, v78);
      swift_storeEnumTagMultiPayload(v75, v77, 0);
    }
    v79 = a3[14];
    v80 = (void *)(a1 + v79);
    v81 = (const void *)(a2 + v79);
    sub_B414(a1 + v79, &qword_261048);
    v82 = sub_5440(&qword_261048);
    if (swift_getEnumCaseMultiPayload(v81, v82))
    {
      memcpy(v80, v81, *(_QWORD *)(*(_QWORD *)(v82 - 8) + 64));
    }
    else
    {
      v83 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v83 - 8) + 16))(v80, v81, v83);
      swift_storeEnumTagMultiPayload(v80, v82, 0);
    }
  }
  v84 = a3[15];
  v85 = a1 + v84;
  v86 = (__int128 *)(a2 + v84);
  v87 = *(_QWORD *)(a2 + v84 + 24);
  if (*(_QWORD *)(a1 + v84 + 24))
  {
    if (v87)
    {
      sub_142F8((_QWORD *)v85, v86);
      goto LABEL_35;
    }
    _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)v85);
  }
  else if (v87)
  {
    *(_QWORD *)(v85 + 24) = v87;
    *(_QWORD *)(v85 + 32) = *((_QWORD *)v86 + 4);
    (**(void (***)(uint64_t, __int128 *))(v87 - 8))(v85, v86);
    goto LABEL_35;
  }
  v88 = *v86;
  v89 = v86[1];
  *(_QWORD *)(v85 + 32) = *((_QWORD *)v86 + 4);
  *(_OWORD *)v85 = v88;
  *(_OWORD *)(v85 + 16) = v89;
LABEL_35:
  v90 = a3[16];
  v91 = (void *)(a1 + v90);
  v92 = (void *)(a2 + v90);
  v93 = type metadata accessor for ImpressionMetrics(0);
  v94 = *(_QWORD *)(v93 - 8);
  v95 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v94 + 48);
  v96 = v95(v91, 1, v93);
  v97 = v95(v92, 1, v93);
  if (v96)
  {
    if (!v97)
    {
      (*(void (**)(void *, void *, uint64_t))(v94 + 16))(v91, v92, v93);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v94 + 56))(v91, 0, 1, v93);
      if (a1 == a2)
        goto LABEL_59;
      goto LABEL_42;
    }
LABEL_41:
    v98 = sub_5440(&qword_25FE30);
    memcpy(v91, v92, *(_QWORD *)(*(_QWORD *)(v98 - 8) + 64));
    if (a1 == a2)
      goto LABEL_59;
    goto LABEL_42;
  }
  if (v97)
  {
    (*(void (**)(void *, uint64_t))(v94 + 8))(v91, v93);
    goto LABEL_41;
  }
  (*(void (**)(void *, void *, uint64_t))(v94 + 24))(v91, v92, v93);
  if (a1 == a2)
    goto LABEL_59;
LABEL_42:
  v99 = a3[17];
  v100 = (void *)(a1 + v99);
  v101 = (const void *)(a2 + v99);
  sub_B414(a1 + v99, &qword_261A08);
  v102 = sub_5440(&qword_261A08);
  if (swift_getEnumCaseMultiPayload(v101, v102))
  {
    memcpy(v100, v101, *(_QWORD *)(*(_QWORD *)(v102 - 8) + 64));
  }
  else
  {
    v103 = type metadata accessor for LocalizerRequest(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v103 - 8) + 16))(v100, v101, v103);
    v104 = sub_5440(&qword_261A38);
    *((_BYTE *)v100 + *(int *)(v104 + 48)) = *((_BYTE *)v101 + *(int *)(v104 + 48));
    swift_storeEnumTagMultiPayload(v100, v102, 0);
  }
  v105 = a3[18];
  v106 = (char *)(a1 + v105);
  v107 = (char *)(a2 + v105);
  sub_B414(a1 + v105, &qword_261A10);
  v108 = sub_5440(&qword_261A10);
  if (swift_getEnumCaseMultiPayload(v107, v108))
  {
    memcpy(v106, v107, *(_QWORD *)(*(_QWORD *)(v108 - 8) + 64));
  }
  else
  {
    v127 = v108;
    v109 = type metadata accessor for LocalizerRequest(0);
    v110 = *(_QWORD *)(v109 - 8);
    v111 = *(void (**)(char *, char *, uint64_t))(v110 + 16);
    v111(v106, v107, v109);
    v126 = (int *)type metadata accessor for TopLockupMetadataView.Footer(0);
    v112 = v126[5];
    v113 = &v106[v112];
    v114 = &v107[v112];
    v128 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v110 + 48);
    if (v128(&v107[v112], 1, v109))
    {
      v115 = sub_5440(&qword_25E0C8);
      memcpy(v113, v114, *(_QWORD *)(*(_QWORD *)(v115 - 8) + 64));
    }
    else
    {
      v111(v113, v114, v109);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v110 + 56))(v113, 0, 1, v109);
    }
    v116 = v126[6];
    v117 = &v106[v116];
    v118 = &v107[v116];
    if (v128(&v107[v116], 1, v109))
    {
      v119 = sub_5440(&qword_25E0C8);
      memcpy(v117, v118, *(_QWORD *)(*(_QWORD *)(v119 - 8) + 64));
      v120 = v110;
    }
    else
    {
      v111(v117, v118, v109);
      v120 = v110;
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v110 + 56))(v117, 0, 1, v109);
    }
    v121 = v126[7];
    v122 = &v106[v121];
    v123 = &v107[v121];
    if (v128(v123, 1, v109))
    {
      v124 = sub_5440(&qword_25E0C8);
      memcpy(v122, v123, *(_QWORD *)(*(_QWORD *)(v124 - 8) + 64));
    }
    else
    {
      v111(v122, v123, v109);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v120 + 56))(v122, 0, 1, v109);
    }
    swift_storeEnumTagMultiPayload(v106, v127, 0);
  }
LABEL_59:
  *(_BYTE *)(a1 + a3[19]) = *(_BYTE *)(a2 + a3[19]);
  return a1;
}

uint64_t initializeWithTake for TopLockupMetadataView(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  _WORD *v7;
  _WORD *v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  void *v19;
  const void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _WORD *v24;
  _WORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  const void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  void *v43;
  const void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  const void *v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  const void *v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  const void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  __int128 v63;
  void *v64;
  const void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  const void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void (*v81)(char *, char *, uint64_t);
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  int *v96;
  uint64_t v97;
  unsigned int (*v98)(char *, uint64_t, uint64_t);

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = a3[5];
  v7 = (_WORD *)(a1 + v6);
  v8 = (_WORD *)(a2 + v6);
  v9 = sub_5440(&qword_25F548);
  if (swift_getEnumCaseMultiPayload(v8, v9) == 1)
  {
    *v7 = *v8;
    v10 = (int *)type metadata accessor for SizeConstants.Environment(0);
    v11 = v10[6];
    v12 = (char *)v7 + v11;
    v13 = (char *)v8 + v11;
    v14 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
    *(_QWORD *)((char *)v7 + v10[7]) = *(_QWORD *)((char *)v8 + v10[7]);
    v15 = v10[8];
    v16 = (char *)v7 + v15;
    v17 = (char *)v8 + v15;
    v16[2] = v17[2];
    *(_WORD *)v16 = *(_WORD *)v17;
    swift_storeEnumTagMultiPayload(v7, v9, 1);
  }
  else
  {
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  v18 = a3[6];
  v19 = (void *)(a1 + v18);
  v20 = (const void *)(a2 + v18);
  v21 = sub_5440(&qword_25F1E8);
  if (swift_getEnumCaseMultiPayload(v20, v21) == 1)
  {
    v22 = type metadata accessor for ColorScheme(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v19, v20, v22);
    swift_storeEnumTagMultiPayload(v19, v21, 1);
  }
  else
  {
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
  }
  v23 = a3[7];
  v24 = (_WORD *)(a1 + v23);
  v25 = (_WORD *)(a2 + v23);
  v26 = sub_5440(&qword_25FAA0);
  if (swift_getEnumCaseMultiPayload(v25, v26) == 1)
  {
    *v24 = *v25;
    v27 = type metadata accessor for FontConstants.Environment(0);
    v28 = *(int *)(v27 + 24);
    v29 = (char *)v24 + v28;
    v30 = (char *)v25 + v28;
    v31 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v31 - 8) + 32))(v29, v30, v31);
    *(_QWORD *)((char *)v24 + *(int *)(v27 + 28)) = *(_QWORD *)((char *)v25 + *(int *)(v27 + 28));
    swift_storeEnumTagMultiPayload(v24, v26, 1);
  }
  else
  {
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
  }
  v32 = a3[8];
  v33 = (void *)(a1 + v32);
  v34 = (const void *)(a2 + v32);
  v35 = sub_5440(&qword_25F208);
  if (swift_getEnumCaseMultiPayload(v34, v35) == 1)
  {
    v36 = type metadata accessor for BlendMode(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v36 - 8) + 32))(v33, v34, v36);
    swift_storeEnumTagMultiPayload(v33, v35, 1);
  }
  else
  {
    memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
  }
  v37 = a3[9];
  v38 = a3[10];
  v39 = a1 + v37;
  v40 = a2 + v37;
  *(_QWORD *)v39 = *(_QWORD *)v40;
  v41 = *(_OWORD *)(a2 + v38);
  *(_BYTE *)(v39 + 8) = *(_BYTE *)(v40 + 8);
  *(_OWORD *)(a1 + v38) = v41;
  v42 = a3[11];
  v43 = (void *)(a1 + v42);
  v44 = (const void *)(a2 + v42);
  v45 = sub_5440(&qword_261048);
  if (swift_getEnumCaseMultiPayload(v44, v45))
  {
    memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
  }
  else
  {
    v46 = type metadata accessor for LocalizerRequest(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v46 - 8) + 32))(v43, v44, v46);
    swift_storeEnumTagMultiPayload(v43, v45, 0);
  }
  v47 = a3[12];
  v48 = (void *)(a1 + v47);
  v49 = (const void *)(a2 + v47);
  if (swift_getEnumCaseMultiPayload(a2 + v47, v45))
  {
    memcpy(v48, v49, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
  }
  else
  {
    v50 = type metadata accessor for LocalizerRequest(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v50 - 8) + 32))(v48, v49, v50);
    swift_storeEnumTagMultiPayload(v48, v45, 0);
  }
  v51 = a3[13];
  v52 = (void *)(a1 + v51);
  v53 = (const void *)(a2 + v51);
  if (swift_getEnumCaseMultiPayload(a2 + v51, v45))
  {
    memcpy(v52, v53, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
  }
  else
  {
    v54 = type metadata accessor for LocalizerRequest(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v54 - 8) + 32))(v52, v53, v54);
    swift_storeEnumTagMultiPayload(v52, v45, 0);
  }
  v55 = a3[14];
  v56 = (void *)(a1 + v55);
  v57 = (const void *)(a2 + v55);
  if (swift_getEnumCaseMultiPayload(a2 + v55, v45))
  {
    memcpy(v56, v57, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
  }
  else
  {
    v58 = type metadata accessor for LocalizerRequest(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v58 - 8) + 32))(v56, v57, v58);
    swift_storeEnumTagMultiPayload(v56, v45, 0);
  }
  v59 = a3[15];
  v60 = a3[16];
  v61 = a1 + v59;
  v62 = a2 + v59;
  v63 = *(_OWORD *)(v62 + 16);
  *(_OWORD *)v61 = *(_OWORD *)v62;
  *(_OWORD *)(v61 + 16) = v63;
  *(_QWORD *)(v61 + 32) = *(_QWORD *)(v62 + 32);
  v64 = (void *)(a1 + v60);
  v65 = (const void *)(a2 + v60);
  v66 = type metadata accessor for ImpressionMetrics(0);
  v67 = *(_QWORD *)(v66 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v67 + 48))(v65, 1, v66))
  {
    v68 = sub_5440(&qword_25FE30);
    memcpy(v64, v65, *(_QWORD *)(*(_QWORD *)(v68 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v67 + 32))(v64, v65, v66);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v67 + 56))(v64, 0, 1, v66);
  }
  v69 = a3[17];
  v70 = (void *)(a1 + v69);
  v71 = (const void *)(a2 + v69);
  v72 = sub_5440(&qword_261A08);
  if (swift_getEnumCaseMultiPayload(v71, v72))
  {
    memcpy(v70, v71, *(_QWORD *)(*(_QWORD *)(v72 - 8) + 64));
  }
  else
  {
    v73 = type metadata accessor for LocalizerRequest(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v73 - 8) + 32))(v70, v71, v73);
    v74 = sub_5440(&qword_261A38);
    *((_BYTE *)v70 + *(int *)(v74 + 48)) = *((_BYTE *)v71 + *(int *)(v74 + 48));
    swift_storeEnumTagMultiPayload(v70, v72, 0);
  }
  v75 = a3[18];
  v76 = (char *)(a1 + v75);
  v77 = (char *)(a2 + v75);
  v78 = sub_5440(&qword_261A10);
  if (swift_getEnumCaseMultiPayload(v77, v78))
  {
    memcpy(v76, v77, *(_QWORD *)(*(_QWORD *)(v78 - 8) + 64));
  }
  else
  {
    v97 = v78;
    v79 = type metadata accessor for LocalizerRequest(0);
    v80 = *(_QWORD *)(v79 - 8);
    v81 = *(void (**)(char *, char *, uint64_t))(v80 + 32);
    v81(v76, v77, v79);
    v96 = (int *)type metadata accessor for TopLockupMetadataView.Footer(0);
    v82 = v96[5];
    v83 = &v76[v82];
    v84 = &v77[v82];
    v98 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v80 + 48);
    if (v98(&v77[v82], 1, v79))
    {
      v85 = sub_5440(&qword_25E0C8);
      memcpy(v83, v84, *(_QWORD *)(*(_QWORD *)(v85 - 8) + 64));
    }
    else
    {
      v81(v83, v84, v79);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v80 + 56))(v83, 0, 1, v79);
    }
    v86 = v96[6];
    v87 = &v76[v86];
    v88 = &v77[v86];
    if (v98(&v77[v86], 1, v79))
    {
      v89 = sub_5440(&qword_25E0C8);
      memcpy(v87, v88, *(_QWORD *)(*(_QWORD *)(v89 - 8) + 64));
      v90 = v80;
    }
    else
    {
      v81(v87, v88, v79);
      v90 = v80;
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v80 + 56))(v87, 0, 1, v79);
    }
    v91 = v96[7];
    v92 = &v76[v91];
    v93 = &v77[v91];
    if (v98(v93, 1, v79))
    {
      v94 = sub_5440(&qword_25E0C8);
      memcpy(v92, v93, *(_QWORD *)(*(_QWORD *)(v94 - 8) + 64));
    }
    else
    {
      v81(v92, v93, v79);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v90 + 56))(v92, 0, 1, v79);
    }
    swift_storeEnumTagMultiPayload(v76, v97, 0);
  }
  *(_BYTE *)(a1 + a3[19]) = *(_BYTE *)(a2 + a3[19]);
  return a1;
}

uint64_t assignWithTake for TopLockupMetadataView(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  _WORD *v11;
  _WORD *v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  void *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _WORD *v28;
  _WORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  __int128 v75;
  uint64_t v76;
  void *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t (*v81)(void *, uint64_t, uint64_t);
  int v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  void (*v97)(char *, char *, uint64_t);
  uint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  int *v112;
  uint64_t v113;
  unsigned int (*v114)(char *, uint64_t, uint64_t);

  v6 = *a2;
  v7 = *((_BYTE *)a2 + 8);
  v8 = *(_QWORD *)a1;
  v9 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  sub_BE0C(v8, v9);
  if ((uint64_t *)a1 != a2)
  {
    v10 = a3[5];
    v11 = (_WORD *)(a1 + v10);
    v12 = (_WORD *)((char *)a2 + v10);
    sub_B414(a1 + v10, &qword_25F548);
    v13 = sub_5440(&qword_25F548);
    if (swift_getEnumCaseMultiPayload(v12, v13) == 1)
    {
      *v11 = *v12;
      v14 = (int *)type metadata accessor for SizeConstants.Environment(0);
      v15 = v14[6];
      v16 = (char *)v11 + v15;
      v17 = (char *)v12 + v15;
      v18 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v16, v17, v18);
      *(_QWORD *)((char *)v11 + v14[7]) = *(_QWORD *)((char *)v12 + v14[7]);
      v19 = v14[8];
      v20 = (char *)v11 + v19;
      v21 = (char *)v12 + v19;
      v20[2] = v21[2];
      *(_WORD *)v20 = *(_WORD *)v21;
      swift_storeEnumTagMultiPayload(v11, v13, 1);
    }
    else
    {
      memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
    v22 = a3[6];
    v23 = (void *)(a1 + v22);
    v24 = (char *)a2 + v22;
    sub_B414(a1 + v22, &qword_25F1E8);
    v25 = sub_5440(&qword_25F1E8);
    if (swift_getEnumCaseMultiPayload(v24, v25) == 1)
    {
      v26 = type metadata accessor for ColorScheme(0);
      (*(void (**)(void *, char *, uint64_t))(*(_QWORD *)(v26 - 8) + 32))(v23, v24, v26);
      swift_storeEnumTagMultiPayload(v23, v25, 1);
    }
    else
    {
      memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    }
    v27 = a3[7];
    v28 = (_WORD *)(a1 + v27);
    v29 = (_WORD *)((char *)a2 + v27);
    sub_B414(a1 + v27, &qword_25FAA0);
    v30 = sub_5440(&qword_25FAA0);
    if (swift_getEnumCaseMultiPayload(v29, v30) == 1)
    {
      *v28 = *v29;
      v31 = type metadata accessor for FontConstants.Environment(0);
      v32 = *(int *)(v31 + 24);
      v33 = (char *)v28 + v32;
      v34 = (char *)v29 + v32;
      v35 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v35 - 8) + 32))(v33, v34, v35);
      *(_QWORD *)((char *)v28 + *(int *)(v31 + 28)) = *(_QWORD *)((char *)v29 + *(int *)(v31 + 28));
      swift_storeEnumTagMultiPayload(v28, v30, 1);
    }
    else
    {
      memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    }
    v36 = a3[8];
    v37 = (void *)(a1 + v36);
    v38 = (char *)a2 + v36;
    sub_B414(a1 + v36, &qword_25F208);
    v39 = sub_5440(&qword_25F208);
    if (swift_getEnumCaseMultiPayload(v38, v39) == 1)
    {
      v40 = type metadata accessor for BlendMode(0);
      (*(void (**)(void *, char *, uint64_t))(*(_QWORD *)(v40 - 8) + 32))(v37, v38, v40);
      swift_storeEnumTagMultiPayload(v37, v39, 1);
    }
    else
    {
      memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
    }
  }
  v41 = a3[9];
  v42 = a1 + v41;
  v43 = (uint64_t *)((char *)a2 + v41);
  v44 = *v43;
  LOBYTE(v43) = *((_BYTE *)v43 + 8);
  v45 = *(_QWORD *)v42;
  v46 = *(_BYTE *)(v42 + 8);
  *(_QWORD *)v42 = v44;
  *(_BYTE *)(v42 + 8) = (_BYTE)v43;
  sub_BE0C(v45, v46);
  v47 = a3[10];
  v48 = a1 + v47;
  v49 = (uint64_t)a2 + v47;
  v50 = *(_QWORD *)(a1 + v47);
  *(_QWORD *)(a1 + v47) = *(uint64_t *)((char *)a2 + v47);
  swift_release(v50);
  v51 = *(_QWORD *)(v48 + 8);
  *(_QWORD *)(v48 + 8) = *(_QWORD *)(v49 + 8);
  swift_release(v51);
  if ((uint64_t *)a1 != a2)
  {
    v52 = a3[11];
    v53 = (void *)(a1 + v52);
    v54 = (char *)a2 + v52;
    sub_B414(a1 + v52, &qword_261048);
    v55 = sub_5440(&qword_261048);
    if (swift_getEnumCaseMultiPayload(v54, v55))
    {
      memcpy(v53, v54, *(_QWORD *)(*(_QWORD *)(v55 - 8) + 64));
    }
    else
    {
      v56 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(void *, char *, uint64_t))(*(_QWORD *)(v56 - 8) + 32))(v53, v54, v56);
      swift_storeEnumTagMultiPayload(v53, v55, 0);
    }
    v57 = a3[12];
    v58 = (void *)(a1 + v57);
    v59 = (char *)a2 + v57;
    sub_B414(a1 + v57, &qword_261048);
    v60 = sub_5440(&qword_261048);
    if (swift_getEnumCaseMultiPayload(v59, v60))
    {
      memcpy(v58, v59, *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64));
    }
    else
    {
      v61 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(void *, char *, uint64_t))(*(_QWORD *)(v61 - 8) + 32))(v58, v59, v61);
      swift_storeEnumTagMultiPayload(v58, v60, 0);
    }
    v62 = a3[13];
    v63 = (void *)(a1 + v62);
    v64 = (char *)a2 + v62;
    sub_B414(a1 + v62, &qword_261048);
    v65 = sub_5440(&qword_261048);
    if (swift_getEnumCaseMultiPayload(v64, v65))
    {
      memcpy(v63, v64, *(_QWORD *)(*(_QWORD *)(v65 - 8) + 64));
    }
    else
    {
      v66 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(void *, char *, uint64_t))(*(_QWORD *)(v66 - 8) + 32))(v63, v64, v66);
      swift_storeEnumTagMultiPayload(v63, v65, 0);
    }
    v67 = a3[14];
    v68 = (void *)(a1 + v67);
    v69 = (char *)a2 + v67;
    sub_B414(a1 + v67, &qword_261048);
    v70 = sub_5440(&qword_261048);
    if (swift_getEnumCaseMultiPayload(v69, v70))
    {
      memcpy(v68, v69, *(_QWORD *)(*(_QWORD *)(v70 - 8) + 64));
    }
    else
    {
      v71 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(void *, char *, uint64_t))(*(_QWORD *)(v71 - 8) + 32))(v68, v69, v71);
      swift_storeEnumTagMultiPayload(v68, v70, 0);
    }
  }
  v72 = a3[15];
  v73 = a1 + v72;
  v74 = (uint64_t)a2 + v72;
  if (*(_QWORD *)(a1 + v72 + 24))
    _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)v73);
  v75 = *(_OWORD *)(v74 + 16);
  *(_OWORD *)v73 = *(_OWORD *)v74;
  *(_OWORD *)(v73 + 16) = v75;
  *(_QWORD *)(v73 + 32) = *(_QWORD *)(v74 + 32);
  v76 = a3[16];
  v77 = (void *)(a1 + v76);
  v78 = (char *)a2 + v76;
  v79 = type metadata accessor for ImpressionMetrics(0);
  v80 = *(_QWORD *)(v79 - 8);
  v81 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v80 + 48);
  v82 = v81(v77, 1, v79);
  v83 = v81(v78, 1, v79);
  if (v82)
  {
    if (!v83)
    {
      (*(void (**)(void *, char *, uint64_t))(v80 + 32))(v77, v78, v79);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v80 + 56))(v77, 0, 1, v79);
      if ((uint64_t *)a1 == a2)
        goto LABEL_53;
      goto LABEL_36;
    }
LABEL_35:
    v84 = sub_5440(&qword_25FE30);
    memcpy(v77, v78, *(_QWORD *)(*(_QWORD *)(v84 - 8) + 64));
    if ((uint64_t *)a1 == a2)
      goto LABEL_53;
    goto LABEL_36;
  }
  if (v83)
  {
    (*(void (**)(void *, uint64_t))(v80 + 8))(v77, v79);
    goto LABEL_35;
  }
  (*(void (**)(void *, char *, uint64_t))(v80 + 40))(v77, v78, v79);
  if ((uint64_t *)a1 == a2)
    goto LABEL_53;
LABEL_36:
  v85 = a3[17];
  v86 = (void *)(a1 + v85);
  v87 = (char *)a2 + v85;
  sub_B414(a1 + v85, &qword_261A08);
  v88 = sub_5440(&qword_261A08);
  if (swift_getEnumCaseMultiPayload(v87, v88))
  {
    memcpy(v86, v87, *(_QWORD *)(*(_QWORD *)(v88 - 8) + 64));
  }
  else
  {
    v89 = type metadata accessor for LocalizerRequest(0);
    (*(void (**)(void *, char *, uint64_t))(*(_QWORD *)(v89 - 8) + 32))(v86, v87, v89);
    v90 = sub_5440(&qword_261A38);
    *((_BYTE *)v86 + *(int *)(v90 + 48)) = v87[*(int *)(v90 + 48)];
    swift_storeEnumTagMultiPayload(v86, v88, 0);
  }
  v91 = a3[18];
  v92 = (char *)(a1 + v91);
  v93 = (char *)a2 + v91;
  sub_B414(a1 + v91, &qword_261A10);
  v94 = sub_5440(&qword_261A10);
  if (swift_getEnumCaseMultiPayload(v93, v94))
  {
    memcpy(v92, v93, *(_QWORD *)(*(_QWORD *)(v94 - 8) + 64));
  }
  else
  {
    v113 = v94;
    v95 = type metadata accessor for LocalizerRequest(0);
    v96 = *(_QWORD *)(v95 - 8);
    v97 = *(void (**)(char *, char *, uint64_t))(v96 + 32);
    v97(v92, v93, v95);
    v112 = (int *)type metadata accessor for TopLockupMetadataView.Footer(0);
    v98 = v112[5];
    v99 = &v92[v98];
    v100 = &v93[v98];
    v114 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v96 + 48);
    if (v114(&v93[v98], 1, v95))
    {
      v101 = sub_5440(&qword_25E0C8);
      memcpy(v99, v100, *(_QWORD *)(*(_QWORD *)(v101 - 8) + 64));
    }
    else
    {
      v97(v99, v100, v95);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v96 + 56))(v99, 0, 1, v95);
    }
    v102 = v112[6];
    v103 = &v92[v102];
    v104 = &v93[v102];
    if (v114(&v93[v102], 1, v95))
    {
      v105 = sub_5440(&qword_25E0C8);
      memcpy(v103, v104, *(_QWORD *)(*(_QWORD *)(v105 - 8) + 64));
      v106 = v96;
    }
    else
    {
      v97(v103, v104, v95);
      v106 = v96;
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v96 + 56))(v103, 0, 1, v95);
    }
    v107 = v112[7];
    v108 = &v92[v107];
    v109 = &v93[v107];
    if (v114(v109, 1, v95))
    {
      v110 = sub_5440(&qword_25E0C8);
      memcpy(v108, v109, *(_QWORD *)(*(_QWORD *)(v110 - 8) + 64));
    }
    else
    {
      v97(v108, v109, v95);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v106 + 56))(v108, 0, 1, v95);
    }
    swift_storeEnumTagMultiPayload(v92, v113, 0);
  }
LABEL_53:
  *(_BYTE *)(a1 + a3[19]) = *((_BYTE *)a2 + a3[19]);
  return a1;
}

uint64_t getEnumTagSinglePayload for TopLockupMetadataView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_78914);
}

uint64_t sub_78914(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v6 = sub_5440(&qword_25F558);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = a3[5];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v10 = sub_5440(&qword_25F210);
  v7 = *(_QWORD *)(v10 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v10;
    v9 = a3[6];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v11 = sub_5440(&qword_261A40);
  v7 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v9 = a3[7];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v12 = sub_5440(&qword_25F228);
  v7 = *(_QWORD *)(v12 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v12;
    v9 = a3[8];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v15 = sub_5440(&qword_261048);
    v7 = *(_QWORD *)(v15 - 8);
    if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    {
      v8 = v15;
      v9 = a3[11];
    }
    else
    {
      v16 = sub_5440(&qword_25FE30);
      v7 = *(_QWORD *)(v16 - 8);
      if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
      {
        v8 = v16;
        v9 = a3[16];
      }
      else
      {
        v17 = sub_5440(&qword_261A08);
        v7 = *(_QWORD *)(v17 - 8);
        if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
        {
          v8 = v17;
          v9 = a3[17];
        }
        else
        {
          v8 = sub_5440(&qword_261A10);
          v7 = *(_QWORD *)(v8 - 8);
          v9 = a3[18];
        }
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v13 = *(_QWORD *)(a1 + a3[10]);
  if (v13 >= 0xFFFFFFFF)
    LODWORD(v13) = -1;
  return (v13 + 1);
}

uint64_t storeEnumTagSinglePayload for TopLockupMetadataView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_78ABC);
}

uint64_t sub_78ABC(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v8 = sub_5440(&qword_25F558);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = a4[5];
  }
  else
  {
    v12 = sub_5440(&qword_25F210);
    v9 = *(_QWORD *)(v12 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v12;
      v11 = a4[6];
    }
    else
    {
      v13 = sub_5440(&qword_261A40);
      v9 = *(_QWORD *)(v13 - 8);
      if (*(_DWORD *)(v9 + 84) == a3)
      {
        v10 = v13;
        v11 = a4[7];
      }
      else
      {
        result = sub_5440(&qword_25F228);
        v9 = *(_QWORD *)(result - 8);
        if (*(_DWORD *)(v9 + 84) == a3)
        {
          v10 = result;
          v11 = a4[8];
        }
        else
        {
          if (a3 == 0x7FFFFFFF)
          {
            *(_QWORD *)(a1 + a4[10]) = (a2 - 1);
            return result;
          }
          v15 = sub_5440(&qword_261048);
          v9 = *(_QWORD *)(v15 - 8);
          if (*(_DWORD *)(v9 + 84) == a3)
          {
            v10 = v15;
            v11 = a4[11];
          }
          else
          {
            v16 = sub_5440(&qword_25FE30);
            v9 = *(_QWORD *)(v16 - 8);
            if (*(_DWORD *)(v9 + 84) == a3)
            {
              v10 = v16;
              v11 = a4[16];
            }
            else
            {
              v17 = sub_5440(&qword_261A08);
              v9 = *(_QWORD *)(v17 - 8);
              if (*(_DWORD *)(v9 + 84) == a3)
              {
                v10 = v17;
                v11 = a4[17];
              }
              else
              {
                v10 = sub_5440(&qword_261A10);
                v9 = *(_QWORD *)(v10 - 8);
                v11 = a4[18];
              }
            }
          }
        }
      }
    }
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
}

void sub_78C54(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD v18[7];
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;

  v18[0] = "\t";
  sub_19B38(319, (unint64_t *)&qword_25F5C8, type metadata accessor for SizeConstants, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  if (v3 <= 0x3F)
  {
    v18[1] = *(_QWORD *)(v2 - 8) + 64;
    sub_19B38(319, (unint64_t *)&qword_25F298, type metadata accessor for ColorConstants, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
    if (v5 <= 0x3F)
    {
      v18[2] = *(_QWORD *)(v4 - 8) + 64;
      sub_19B38(319, &qword_261AB0, type metadata accessor for FontConstants, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
      if (v7 <= 0x3F)
      {
        v18[3] = *(_QWORD *)(v6 - 8) + 64;
        sub_19B38(319, (unint64_t *)&qword_25F2B0, (uint64_t (*)(uint64_t))&type metadata accessor for BlendMode, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
        if (v9 <= 0x3F)
        {
          v18[4] = *(_QWORD *)(v8 - 8) + 64;
          v18[5] = "\t";
          v18[6] = &unk_1E5650;
          sub_19B38(319, &qword_261AB8, (uint64_t (*)(uint64_t))&type metadata accessor for LocalizerRequest, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for PlaceholderTextView.ContentType);
          if (v11 <= 0x3F)
          {
            v19 = *(_QWORD *)(v10 - 8) + 64;
            v20 = v19;
            v21 = v19;
            v22 = v19;
            v23 = &unk_1E5668;
            sub_19B38(319, &qword_261AC0, (uint64_t (*)(uint64_t))&type metadata accessor for ImpressionMetrics, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
            if (v13 <= 0x3F)
            {
              v24 = *(_QWORD *)(v12 - 8) + 64;
              sub_78E58(319);
              if (v15 <= 0x3F)
              {
                v25 = *(_QWORD *)(v14 - 8) + 64;
                sub_19B38(319, (unint64_t *)&unk_261AD0, type metadata accessor for TopLockupMetadataView.Footer, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for PlaceholderTextView.ContentType);
                if (v17 <= 0x3F)
                {
                  v26 = *(_QWORD *)(v16 - 8) + 64;
                  v27 = &unk_1E5680;
                  swift_initStructMetadata(a1, 256, 16, v18, a1 + 16);
                }
              }
            }
          }
        }
      }
    }
  }
}

void sub_78E58(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!qword_261AC8)
  {
    v2 = sub_7EF8(&qword_261A38);
    v5 = type metadata accessor for PlaceholderTextView.ContentType(a1, v2, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_261AC8);
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for TopLockupMetadataView.Footer(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v10;
  char *v11;
  char *v12;
  unsigned int (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v15);
  }
  else
  {
    v7 = type metadata accessor for LocalizerRequest(0);
    v8 = *(_QWORD *)(v7 - 8);
    v9 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16);
    v9(a1, a2, v7);
    v10 = a3[5];
    v11 = (char *)a1 + v10;
    v12 = (char *)a2 + v10;
    v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48);
    if (v13((char *)a2 + v10, 1, v7))
    {
      v14 = sub_5440(&qword_25E0C8);
      memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      v9((uint64_t *)v11, (uint64_t *)v12, v7);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v11, 0, 1, v7);
    }
    v16 = a3[6];
    v17 = (char *)a1 + v16;
    v18 = (char *)a2 + v16;
    if (v13((char *)a2 + v16, 1, v7))
    {
      v19 = sub_5440(&qword_25E0C8);
      memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    }
    else
    {
      v9((uint64_t *)v17, (uint64_t *)v18, v7);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v17, 0, 1, v7);
    }
    v20 = a3[7];
    v21 = (char *)a1 + v20;
    v22 = (char *)a2 + v20;
    if (v13(v22, 1, v7))
    {
      v23 = sub_5440(&qword_25E0C8);
      memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    }
    else
    {
      v9((uint64_t *)v21, (uint64_t *)v22, v7);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v21, 0, 1, v7);
    }
  }
  return a1;
}

uint64_t destroy for TopLockupMetadataView.Footer(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  void (*v11)(uint64_t, uint64_t);

  v4 = type metadata accessor for LocalizerRequest(0);
  v5 = *(_QWORD *)(v4 - 8);
  v11 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v11(a1, v4);
  v6 = a1 + a2[5];
  v7 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (!v7(v6, 1, v4))
    v11(v6, v4);
  v8 = a1 + a2[6];
  if (!v7(v8, 1, v4))
    v11(v8, v4);
  v9 = a1 + a2[7];
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v7)(v9, 1, v4);
  if (!(_DWORD)result)
    return ((uint64_t (*)(uint64_t, uint64_t))v11)(v9, v4);
  return result;
}

char *initializeWithCopy for TopLockupMetadataView.Footer(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void *, const void *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  unsigned int (*v12)(const void *, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;

  v6 = type metadata accessor for LocalizerRequest(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 16);
  v8(a1, a2, v6);
  v9 = a3[5];
  v10 = &a1[v9];
  v11 = &a2[v9];
  v12 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48);
  if (v12(&a2[v9], 1, v6))
  {
    v13 = sub_5440(&qword_25E0C8);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v8(v10, v11, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v10, 0, 1, v6);
  }
  v14 = a3[6];
  v15 = &a1[v14];
  v16 = &a2[v14];
  if (v12(&a2[v14], 1, v6))
  {
    v17 = sub_5440(&qword_25E0C8);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    v8(v15, v16, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v15, 0, 1, v6);
  }
  v18 = a3[7];
  v19 = &a1[v18];
  v20 = &a2[v18];
  if (v12(v20, 1, v6))
  {
    v21 = sub_5440(&qword_25E0C8);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
  }
  else
  {
    v8(v19, v20, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v19, 0, 1, v6);
  }
  return a1;
}

char *assignWithCopy for TopLockupMetadataView.Footer(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void *, const void *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t (*v12)(const void *, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  int v25;
  int v26;
  uint64_t v27;

  v6 = type metadata accessor for LocalizerRequest(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 24);
  v8(a1, a2, v6);
  v9 = a3[5];
  v10 = &a1[v9];
  v11 = &a2[v9];
  v12 = *(uint64_t (**)(const void *, uint64_t, uint64_t))(v7 + 48);
  v13 = v12(&a1[v9], 1, v6);
  v14 = v12(v11, 1, v6);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v10, v11, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v10, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
LABEL_6:
    v15 = sub_5440(&qword_25E0C8);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  v8(v10, v11, v6);
LABEL_7:
  v16 = a3[6];
  v17 = &a1[v16];
  v18 = &a2[v16];
  v19 = v12(&a1[v16], 1, v6);
  v20 = v12(v18, 1, v6);
  if (v19)
  {
    if (!v20)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v17, v18, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v17, 0, 1, v6);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v20)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v17, v6);
LABEL_12:
    v21 = sub_5440(&qword_25E0C8);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    goto LABEL_13;
  }
  v8(v17, v18, v6);
LABEL_13:
  v22 = a3[7];
  v23 = &a1[v22];
  v24 = &a2[v22];
  v25 = v12(&a1[v22], 1, v6);
  v26 = v12(v24, 1, v6);
  if (!v25)
  {
    if (!v26)
    {
      v8(v23, v24, v6);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v23, v6);
    goto LABEL_18;
  }
  if (v26)
  {
LABEL_18:
    v27 = sub_5440(&qword_25E0C8);
    memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v23, v24, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v23, 0, 1, v6);
  return a1;
}

char *initializeWithTake for TopLockupMetadataView.Footer(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void *, const void *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  unsigned int (*v12)(const void *, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;

  v6 = type metadata accessor for LocalizerRequest(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 32);
  v8(a1, a2, v6);
  v9 = a3[5];
  v10 = &a1[v9];
  v11 = &a2[v9];
  v12 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48);
  if (v12(&a2[v9], 1, v6))
  {
    v13 = sub_5440(&qword_25E0C8);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v8(v10, v11, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v10, 0, 1, v6);
  }
  v14 = a3[6];
  v15 = &a1[v14];
  v16 = &a2[v14];
  if (v12(&a2[v14], 1, v6))
  {
    v17 = sub_5440(&qword_25E0C8);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    v8(v15, v16, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v15, 0, 1, v6);
  }
  v18 = a3[7];
  v19 = &a1[v18];
  v20 = &a2[v18];
  if (v12(v20, 1, v6))
  {
    v21 = sub_5440(&qword_25E0C8);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
  }
  else
  {
    v8(v19, v20, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v19, 0, 1, v6);
  }
  return a1;
}

char *assignWithTake for TopLockupMetadataView.Footer(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void *, const void *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t (*v12)(const void *, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  int v25;
  int v26;
  uint64_t v27;

  v6 = type metadata accessor for LocalizerRequest(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 40);
  v8(a1, a2, v6);
  v9 = a3[5];
  v10 = &a1[v9];
  v11 = &a2[v9];
  v12 = *(uint64_t (**)(const void *, uint64_t, uint64_t))(v7 + 48);
  v13 = v12(&a1[v9], 1, v6);
  v14 = v12(v11, 1, v6);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v10, v11, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v10, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
LABEL_6:
    v15 = sub_5440(&qword_25E0C8);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  v8(v10, v11, v6);
LABEL_7:
  v16 = a3[6];
  v17 = &a1[v16];
  v18 = &a2[v16];
  v19 = v12(&a1[v16], 1, v6);
  v20 = v12(v18, 1, v6);
  if (v19)
  {
    if (!v20)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v17, v18, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v17, 0, 1, v6);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v20)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v17, v6);
LABEL_12:
    v21 = sub_5440(&qword_25E0C8);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    goto LABEL_13;
  }
  v8(v17, v18, v6);
LABEL_13:
  v22 = a3[7];
  v23 = &a1[v22];
  v24 = &a2[v22];
  v25 = v12(&a1[v22], 1, v6);
  v26 = v12(v24, 1, v6);
  if (!v25)
  {
    if (!v26)
    {
      v8(v23, v24, v6);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v23, v6);
    goto LABEL_18;
  }
  if (v26)
  {
LABEL_18:
    v27 = sub_5440(&qword_25E0C8);
    memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v23, v24, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v23, 0, 1, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for TopLockupMetadataView.Footer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_799FC);
}

uint64_t sub_799FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v6 = type metadata accessor for LocalizerRequest(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v8 = sub_5440(&qword_25E0C8);
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for TopLockupMetadataView.Footer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_79A80);
}

uint64_t sub_79A80(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v8 = type metadata accessor for LocalizerRequest(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v10 = sub_5440(&qword_25E0C8);
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_79B00(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = type metadata accessor for LocalizerRequest(319);
  if (v3 <= 0x3F)
  {
    v6 = *(_QWORD *)(v2 - 8) + 64;
    sub_19B38(319, (unint64_t *)&qword_261BA0, (uint64_t (*)(uint64_t))&type metadata accessor for LocalizerRequest, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    if (v5 <= 0x3F)
    {
      v7 = *(_QWORD *)(v4 - 8) + 64;
      v8 = v7;
      v9 = v7;
      swift_initStructMetadata(a1, 256, 4, &v6, a1 + 16);
    }
  }
}

unint64_t sub_79BA4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_261BD8;
  if (!qword_261BD8)
  {
    v1 = sub_7EF8(&qword_261A28);
    sub_79C28();
    sub_7FD8((unint64_t *)&qword_261BF0, &qword_261BF8, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_261BD8);
  }
  return result;
}

unint64_t sub_79C28()
{
  unint64_t result;
  uint64_t v1;

  result = qword_261BE0;
  if (!qword_261BE0)
  {
    v1 = sub_7EF8(&qword_261A20);
    sub_7FD8(&qword_261BE8, &qword_261A18, (uint64_t)&protocol conformance descriptor for VStack<A>);
    sub_7FD8(&qword_260960, &qword_260968, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_261BE0);
  }
  return result;
}

uint64_t sub_79CC8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TopLockupMetadataView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_79D0C(uint64_t a1)
{
  return sub_7A1A4(a1, (uint64_t (*)(uint64_t, uint64_t))sub_70470);
}

uint64_t sub_79D18()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_79D3C(uint64_t a1)
{
  uint64_t v1;

  return sub_6DA4C(a1, *(void (**)(uint64_t))(v1 + 16));
}

uint64_t sub_79D58()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(uint64_t, uint64_t);
  int *v43;
  uint64_t v44;
  unsigned int (*v45)(uint64_t, uint64_t, uint64_t);
  uint64_t v46;
  uint64_t v47;

  v1 = (int *)type metadata accessor for TopLockupMetadataView(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v0 + v4;
  sub_BE0C(*(_QWORD *)(v0 + v4), *(_BYTE *)(v0 + v4 + 8));
  v7 = (_QWORD *)(v0 + v4 + v1[5]);
  v8 = sub_5440(&qword_25F548);
  if (swift_getEnumCaseMultiPayload(v7, v8) == 1)
  {
    v9 = (char *)v7 + *(int *)(type metadata accessor for SizeConstants.Environment(0) + 24);
    v10 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  }
  else
  {
    swift_release(*v7);
  }
  v11 = (_QWORD *)(v6 + v1[6]);
  v12 = sub_5440(&qword_25F1E8);
  if (swift_getEnumCaseMultiPayload(v11, v12) == 1)
  {
    v13 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v11, v13);
  }
  else
  {
    swift_release(*v11);
  }
  v14 = (_QWORD *)(v6 + v1[7]);
  v15 = sub_5440(&qword_25FAA0);
  if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
  {
    v16 = (char *)v14 + *(int *)(type metadata accessor for FontConstants.Environment(0) + 24);
    v17 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(v16, v17);
  }
  else
  {
    swift_release(*v14);
  }
  v18 = (_QWORD *)(v6 + v1[8]);
  v19 = sub_5440(&qword_25F208);
  if (swift_getEnumCaseMultiPayload(v18, v19) == 1)
  {
    v20 = type metadata accessor for BlendMode(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(v18, v20);
  }
  else
  {
    swift_release(*v18);
  }
  sub_BE0C(*(_QWORD *)(v6 + v1[9]), *(_BYTE *)(v6 + v1[9] + 8));
  v21 = (_QWORD *)(v6 + v1[10]);
  swift_release(*v21);
  swift_release(v21[1]);
  v22 = v6 + v1[11];
  v23 = sub_5440(&qword_261048);
  if (!swift_getEnumCaseMultiPayload(v22, v23))
  {
    v24 = type metadata accessor for LocalizerRequest(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 8))(v22, v24);
  }
  v25 = v6 + v1[12];
  if (!swift_getEnumCaseMultiPayload(v25, v23))
  {
    v26 = type metadata accessor for LocalizerRequest(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 8))(v25, v26);
  }
  v27 = v6 + v1[13];
  if (!swift_getEnumCaseMultiPayload(v27, v23))
  {
    v28 = type metadata accessor for LocalizerRequest(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 8))(v27, v28);
  }
  v29 = v6 + v1[14];
  if (!swift_getEnumCaseMultiPayload(v29, v23))
  {
    v30 = type metadata accessor for LocalizerRequest(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 8))(v29, v30);
  }
  v31 = (_QWORD *)(v6 + v1[15]);
  if (v31[3])
    _s7BooksUI13AnyPagedFrameVwxx_0(v31);
  v32 = v6 + v1[16];
  v33 = type metadata accessor for ImpressionMetrics(0);
  v34 = *(_QWORD *)(v33 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v34 + 48))(v32, 1, v33))
    (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v32, v33);
  v35 = v6 + v1[17];
  v36 = sub_5440(&qword_261A08);
  if (!swift_getEnumCaseMultiPayload(v35, v36))
  {
    v37 = type metadata accessor for LocalizerRequest(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 8))(v35, v37);
  }
  v38 = v6 + v1[18];
  v39 = sub_5440(&qword_261A10);
  if (!swift_getEnumCaseMultiPayload(v38, v39))
  {
    v40 = type metadata accessor for LocalizerRequest(0);
    v41 = *(_QWORD *)(v40 - 8);
    v42 = *(void (**)(uint64_t, uint64_t))(v41 + 8);
    v42(v38, v40);
    v43 = (int *)type metadata accessor for TopLockupMetadataView.Footer(0);
    v44 = v38 + v43[5];
    v45 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v41 + 48);
    if (!v45(v44, 1, v40))
      v42(v44, v40);
    v46 = v38 + v43[6];
    if (!v45(v46, 1, v40))
      v42(v46, v40);
    v47 = v38 + v43[7];
    if (!v45(v47, 1, v40))
      v42(v47, v40);
  }
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_7A198(uint64_t a1)
{
  return sub_7A1A4(a1, (uint64_t (*)(uint64_t, uint64_t))sub_70FB0);
}

uint64_t sub_7A1A4(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t))
{
  uint64_t v2;
  uint64_t v4;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for TopLockupMetadataView(0) - 8) + 80);
  return a2(a1, v2 + ((v4 + 16) & ~v4));
}

uint64_t sub_7A200(uint64_t a1)
{
  uint64_t v1;

  return sub_6D96C(a1, *(void (**)(uint64_t))(v1 + 16), *(_QWORD *)(v1 + 24), &qword_261E20, (uint64_t (*)(uint64_t))sub_7AD84);
}

uint64_t sub_7A22C(uint64_t a1)
{
  return sub_7A1A4(a1, (uint64_t (*)(uint64_t, uint64_t))sub_71E3C);
}

uint64_t sub_7A238(uint64_t a1)
{
  uint64_t v1;

  return sub_6D96C(a1, *(void (**)(uint64_t))(v1 + 16), *(_QWORD *)(v1 + 24), &qword_261D58, (uint64_t (*)(uint64_t))sub_7A36C);
}

uint64_t sub_7A264(uint64_t a1)
{
  return sub_7A1A4(a1, (uint64_t (*)(uint64_t, uint64_t))sub_72110);
}

uint64_t sub_7A270(uint64_t a1)
{
  uint64_t v1;

  return sub_6D96C(a1, *(void (**)(uint64_t))(v1 + 16), *(_QWORD *)(v1 + 24), &qword_261C88, (uint64_t (*)(uint64_t))sub_7A2A0);
}

unint64_t sub_7A2A0()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_261C90;
  if (!qword_261C90)
  {
    v1 = sub_7EF8(&qword_261C88);
    v2[0] = sub_7EF8(&qword_261C98);
    v2[1] = sub_7FD8(&qword_261CA0, &qword_261C98, (uint64_t)&protocol conformance descriptor for ViewThatFits<A>);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
    sub_7FD8((unint64_t *)&qword_261BF0, &qword_261BF8, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_261C90);
  }
  return result;
}

unint64_t sub_7A36C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_261D60;
  if (!qword_261D60)
  {
    v1 = sub_7EF8(&qword_261D58);
    sub_7FD8(&qword_261D68, &qword_261D70, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_261D60);
  }
  return result;
}

unint64_t sub_7A3F0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_261DA8;
  if (!qword_261DA8)
  {
    v1 = sub_7EF8(&qword_261D98);
    sub_7FD8(&qword_261DB0, &qword_261DA0, (uint64_t)&protocol conformance descriptor for JetLocalize<A, B, C>);
    sub_7FD8(&qword_261DB8, &qword_261D80, (uint64_t)&protocol conformance descriptor for JetLocalize<A, B, C>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_261DA8);
  }
  return result;
}

unint64_t sub_7A494()
{
  unint64_t result;
  uint64_t v1;

  result = qword_261DC0;
  if (!qword_261DC0)
  {
    v1 = sub_7EF8(&qword_25FE18);
    sub_7A518();
    sub_7FD8((unint64_t *)&qword_25FD88, &qword_25FD90, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_261DC0);
  }
  return result;
}

unint64_t sub_7A518()
{
  unint64_t result;
  uint64_t v1;

  result = qword_261DC8;
  if (!qword_261DC8)
  {
    v1 = sub_7EF8(&qword_25FE10);
    sub_6FD0((unint64_t *)&qword_25FEA8, (uint64_t (*)(uint64_t))&type metadata accessor for LocalizedText, (uint64_t)&protocol conformance descriptor for LocalizedText);
    sub_7FD8((unint64_t *)&qword_2600A8, &qword_2600B0, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_261DC8);
  }
  return result;
}

uint64_t sub_7A5B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v1 = type metadata accessor for LocalizerRequest(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(_QWORD *)(v0 + v6));
  swift_release(*(_QWORD *)(v0 + v7));
  return swift_deallocObject(v0, v7 + 8, v5);
}

uint64_t sub_7A640@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v5 = *(_QWORD *)(type metadata accessor for LocalizerRequest(0) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = (*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_751B8(a1, v2 + v6, *(_QWORD *)(v2 + v7), *(_QWORD *)(v2 + ((v7 + 15) & 0xFFFFFFFFFFFFF8)), a2);
}

unint64_t sub_7A6AC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_261DD8;
  if (!qword_261DD8)
  {
    v1 = sub_7EF8(&qword_261DD0);
    sub_7A730();
    sub_6FD0((unint64_t *)&qword_25EEA0, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_261DD8);
  }
  return result;
}

unint64_t sub_7A730()
{
  unint64_t result;
  uint64_t v1;

  result = qword_261DE0;
  if (!qword_261DE0)
  {
    v1 = sub_7EF8(&qword_261DE8);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> Group<A>, v1);
    atomic_store(result, (unint64_t *)&qword_261DE0);
  }
  return result;
}

uint64_t sub_7A78C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int *v39;
  uint64_t v40;
  unsigned int (*v41)(uint64_t, uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v1 = type metadata accessor for LocalizerRequest(0);
  v2 = *(_QWORD *)(v1 - 8);
  v47 = *(unsigned __int8 *)(v2 + 80);
  v3 = (v47 + 16) & ~v47;
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  v5 = (v4 + 15) & 0xFFFFFFFFFFFFFFF8;
  v6 = (int *)type metadata accessor for TopLockupMetadataView(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v45 = *(_QWORD *)(v7 + 64);
  v9 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v9(v0 + v3, v1);
  swift_release(*(_QWORD *)(v0 + v4));
  swift_release(*(_QWORD *)(v0 + v5));
  v46 = (v8 + v5 + 8) & ~v8;
  v10 = v0 + v46;
  sub_BE0C(*(_QWORD *)v10, *(_BYTE *)(v10 + 8));
  v11 = (_QWORD *)(v0 + v46 + v6[5]);
  v12 = sub_5440(&qword_25F548);
  if (swift_getEnumCaseMultiPayload(v11, v12) == 1)
  {
    v13 = (char *)v11 + *(int *)(type metadata accessor for SizeConstants.Environment(0) + 24);
    v14 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
  }
  else
  {
    swift_release(*v11);
  }
  v15 = (_QWORD *)(v10 + v6[6]);
  v16 = sub_5440(&qword_25F1E8);
  if (swift_getEnumCaseMultiPayload(v15, v16) == 1)
  {
    v17 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(v15, v17);
  }
  else
  {
    swift_release(*v15);
  }
  v18 = (_QWORD *)(v10 + v6[7]);
  v19 = sub_5440(&qword_25FAA0);
  if (swift_getEnumCaseMultiPayload(v18, v19) == 1)
  {
    v20 = (char *)v18 + *(int *)(type metadata accessor for FontConstants.Environment(0) + 24);
    v21 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v21 - 8) + 8))(v20, v21);
  }
  else
  {
    swift_release(*v18);
  }
  v22 = (_QWORD *)(v10 + v6[8]);
  v23 = sub_5440(&qword_25F208);
  if (swift_getEnumCaseMultiPayload(v22, v23) == 1)
  {
    v24 = type metadata accessor for BlendMode(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v24 - 8) + 8))(v22, v24);
  }
  else
  {
    swift_release(*v22);
  }
  sub_BE0C(*(_QWORD *)(v10 + v6[9]), *(_BYTE *)(v10 + v6[9] + 8));
  v25 = (_QWORD *)(v10 + v6[10]);
  swift_release(*v25);
  swift_release(v25[1]);
  v26 = v10 + v6[11];
  v27 = sub_5440(&qword_261048);
  if (!swift_getEnumCaseMultiPayload(v26, v27))
    v9(v26, v1);
  v28 = v10 + v6[12];
  if (!swift_getEnumCaseMultiPayload(v28, v27))
    v9(v28, v1);
  v29 = v10 + v6[13];
  if (!swift_getEnumCaseMultiPayload(v29, v27))
    v9(v29, v1);
  v30 = v10 + v6[14];
  if (!swift_getEnumCaseMultiPayload(v30, v27))
    v9(v30, v1);
  v31 = (_QWORD *)(v10 + v6[15]);
  if (v31[3])
    _s7BooksUI13AnyPagedFrameVwxx_0(v31);
  v32 = v10 + v6[16];
  v33 = type metadata accessor for ImpressionMetrics(0);
  v34 = *(_QWORD *)(v33 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v34 + 48))(v32, 1, v33))
    (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v32, v33);
  v35 = v10 + v6[17];
  v36 = sub_5440(&qword_261A08);
  if (!swift_getEnumCaseMultiPayload(v35, v36))
    v9(v35, v1);
  v37 = v10 + v6[18];
  v38 = sub_5440(&qword_261A10);
  if (!swift_getEnumCaseMultiPayload(v37, v38))
  {
    v9(v37, v1);
    v39 = (int *)type metadata accessor for TopLockupMetadataView.Footer(0);
    v40 = v37 + v39[5];
    v41 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48);
    if (!v41(v40, 1, v1))
      v9(v40, v1);
    v42 = v37 + v39[6];
    if (!v41(v42, 1, v1))
      v9(v42, v1);
    v43 = v37 + v39[7];
    if (!v41(v43, 1, v1))
      v9(v43, v1);
  }
  return swift_deallocObject(v0, v46 + v45, v47 | v8 | 7);
}

uint64_t sub_7ABE0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  v5 = *(_QWORD *)(type metadata accessor for LocalizerRequest(0) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = (*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  v8 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for TopLockupMetadataView(0) - 8) + 80);
  return sub_74A0C(a1, v2 + v6, *(_QWORD *)(v2 + v7), *(_QWORD *)(v2 + ((v7 + 15) & 0xFFFFFFFFFFFFFFF8)), v2 + ((v8 + ((v7 + 15) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v8), a2);
}

unint64_t sub_7AC74()
{
  unint64_t result;
  uint64_t v1;

  result = qword_261DF8;
  if (!qword_261DF8)
  {
    v1 = sub_7EF8(&qword_261DF0);
    sub_7ACF8();
    sub_6FD0((unint64_t *)&qword_25EEA0, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_261DF8);
  }
  return result;
}

unint64_t sub_7ACF8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_261E00;
  if (!qword_261E00)
  {
    v1 = sub_7EF8(&qword_261E08);
    sub_7A730();
    sub_7FD8(&qword_261E10, &qword_261E18, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_261E00);
  }
  return result;
}

unint64_t sub_7AD84()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t OpaqueTypeConformance2;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  ValueMetadata *v11;
  uint64_t v12;
  unint64_t v13;

  result = qword_261E28;
  if (!qword_261E28)
  {
    v1 = sub_7EF8(&qword_261E20);
    v2 = sub_7EF8(&qword_261E30);
    v3 = sub_7EF8(&qword_261E38);
    v4 = type metadata accessor for AutomaticHoverEffect(255);
    v10 = sub_7EF8(&qword_261E40);
    v11 = &type metadata for PressedButtonStyle;
    v12 = sub_7FD8(&qword_261E48, &qword_261E40, (uint64_t)&protocol conformance descriptor for BooksActionButton<A>);
    v13 = sub_7AF08();
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v10, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
    v6 = sub_6FD0((unint64_t *)&qword_25FDF0, (uint64_t (*)(uint64_t))&type metadata accessor for AutomaticHoverEffect, (uint64_t)&protocol conformance descriptor for AutomaticHoverEffect);
    v10 = v3;
    v11 = (ValueMetadata *)v4;
    v12 = OpaqueTypeConformance2;
    v13 = v6;
    v7 = swift_getOpaqueTypeConformance2(&v10, &opaque type descriptor for <<opaque return type of View.hoverEffect<A>(_:isEnabled:)>>, 1);
    v10 = v2;
    v11 = (ValueMetadata *)v7;
    swift_getOpaqueTypeConformance2(&v10, &opaque type descriptor for <<opaque return type of View.impressionable(_:configuration:position:definesParentContext:)>>, 1);
    v8 = sub_7EF8(&qword_261D58);
    v9 = sub_7A36C();
    v10 = v8;
    v11 = (ValueMetadata *)v9;
    swift_getOpaqueTypeConformance2(&v10, &opaque type descriptor for <<opaque return type of View.impressionable(_:configuration:position:definesParentContext:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_261E28);
  }
  return result;
}

unint64_t sub_7AF08()
{
  unint64_t result;

  result = qword_261E50;
  if (!qword_261E50)
  {
    result = swift_getWitnessTable(&unk_1E5804, &type metadata for PressedButtonStyle);
    atomic_store(result, (unint64_t *)&qword_261E50);
  }
  return result;
}

uint64_t sub_7AF4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;

  v1 = *(_QWORD *)(sub_5440(&qword_261D58) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 16) & ~v2;
  v4 = *(_QWORD *)(v1 + 64);
  v5 = v0 + *(int *)(sub_5440(&qword_261D78) + 44) + v3;
  v6 = sub_5440(&qword_261D88);
  if (swift_getEnumCaseMultiPayload(v5, v6) == 1)
  {
    v7 = type metadata accessor for LocalizedText(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v5, v7);
    v8 = (_QWORD *)(v5 + *(int *)(sub_5440(&qword_25FE10) + 36));
    swift_release(*v8);
    swift_release(v8[1]);
    v9 = (_QWORD *)(v5 + *(int *)(sub_5440(&qword_25FE18) + 36));
    swift_release(*v9);
    swift_release(v9[1]);
  }
  else
  {
    v10 = sub_5440(&qword_261D90);
    if (swift_getEnumCaseMultiPayload(v5, v10) == 1)
      v11 = &qword_261D80;
    else
      v11 = &qword_261DA0;
    v12 = sub_5440(v11);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v5, v12);
  }
  return swift_deallocObject(v0, v3 + v4, v2 | 7);
}

uint64_t sub_7B08C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(sub_5440(&qword_261D58) - 8) + 80);
  return sub_B3D0(v1 + ((v3 + 16) & ~v3), a1, &qword_261D58);
}

uint64_t sub_7B0FC()
{
  return type metadata accessor for TopLockupMetadataView(0);
}

uint64_t sub_7B104@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_7071C(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

unint64_t sub_7B10C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_261E98;
  if (!qword_261E98)
  {
    v1 = sub_7EF8(&qword_261E90);
    sub_7FD8(&qword_261EA0, &qword_261EA8, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_261E98);
  }
  return result;
}

uint64_t sub_7B190(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 160);
  swift_retain(*(_QWORD *)(a1 + 168));
  swift_retain(v2);
  return a1;
}

uint64_t sub_7B1C0(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 168);
  swift_release(*(_QWORD *)(a1 + 160));
  swift_release(v2);
  return a1;
}

ValueMetadata *type metadata accessor for PressedButtonStyle()
{
  return &type metadata for PressedButtonStyle;
}

uint64_t sub_7B204(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_22BC5C, 1);
}

unint64_t sub_7B218()
{
  unint64_t result;
  uint64_t v1;

  result = qword_261ED0;
  if (!qword_261ED0)
  {
    v1 = sub_7EF8(&qword_261EC8);
    sub_6FD0((unint64_t *)&qword_25FD80, (uint64_t (*)(uint64_t))&type metadata accessor for ButtonStyleConfiguration.Label, (uint64_t)&protocol conformance descriptor for ButtonStyleConfiguration.Label);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_261ED0);
  }
  return result;
}

uint64_t ToolbarActionShareLinkMenuItem.title.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ToolbarActionShareLinkMenuItem(0) + 20);
  v4 = type metadata accessor for LocalizerRequest(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for ToolbarActionShareLinkMenuItem(uint64_t a1)
{
  uint64_t result;

  result = qword_261F50;
  if (!qword_261F50)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ToolbarActionShareLinkMenuItem);
  return result;
}

uint64_t ToolbarActionShareLinkMenuItem.isEnabled.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for ToolbarActionShareLinkMenuItem(0) + 24));
}

uint64_t ToolbarActionShareLinkMenuItem.isExplicit.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for ToolbarActionShareLinkMenuItem(0) + 28));
}

uint64_t ToolbarActionShareLinkMenuItem.url.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ToolbarActionShareLinkMenuItem(0) + 32);
  v4 = type metadata accessor for URL(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t ToolbarActionShareLinkMenuItem.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t KeyPath;
  uint64_t v16;
  uint64_t *v17;
  _BYTE v19[16];
  uint64_t v20;

  v3 = type metadata accessor for URL(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = &v19[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = sub_5440(&qword_261ED8);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = &v19[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = type metadata accessor for ToolbarActionShareLinkMenuItem(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v4 + 16))(v6, v1 + *(int *)(v11 + 32), v3);
  v20 = v1;
  v12 = sub_5440(&qword_261EE0);
  v13 = sub_7FD8(&qword_261EE8, &qword_261EE0, (uint64_t)&protocol conformance descriptor for Label<A, B>);
  ShareLink<>.init<>(item:subject:message:label:)(v6, 0, 0, 0, 0, 0, 0, 0, 0, sub_7B604, v19, v12, v13);
  v14 = sub_7B6E0();
  KeyPath = swift_getKeyPath(&unk_1E5840);
  v16 = swift_allocObject(&unk_24E600, 17, 7);
  *(_BYTE *)(v16 + 16) = v14 & 1;
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v8 + 16))(a1, v10, v7);
  v17 = (uint64_t *)(a1 + *(int *)(sub_5440(&qword_261EF0) + 36));
  *v17 = KeyPath;
  v17[1] = (uint64_t)sub_7BAB4;
  v17[2] = v16;
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t sub_7B57C()
{
  type metadata accessor for LocalizedText(0);
  sub_6FD0((unint64_t *)&qword_25FEA8, (uint64_t (*)(uint64_t))&type metadata accessor for LocalizedText, (uint64_t)&protocol conformance descriptor for LocalizedText);
  return Label.init(title:icon:)(sub_7C258);
}

uint64_t sub_7B604()
{
  return sub_7B57C();
}

uint64_t sub_7B60C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v8;

  v2 = type metadata accessor for LocalizerRequest(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for ToolbarActionShareLinkMenuItem(0);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, a1 + *(int *)(v6 + 20), v2);
  return LocalizedText.init(_:)(v5);
}

uint64_t sub_7B6A4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = Image.init(systemName:)(0xD000000000000013, 0x80000000001F9710);
  *a1 = result;
  return result;
}

uint64_t sub_7B6E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void **v4;
  int v5;
  void *v6;
  uint64_t KeyPath;
  uint64_t v8;
  id v9;
  char v10;
  uint64_t result;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = type metadata accessor for ToolbarActionShareLinkMenuItem(0);
  v2 = __chkstk_darwin(v1);
  v4 = (void **)((char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (*(_BYTE *)(v0 + *(int *)(v2 + 24)) != 1)
  {
    v10 = 1;
    return v10 & 1;
  }
  v5 = *(unsigned __int8 *)(v0 + *(int *)(v2 + 28));
  sub_7C1D0(v0, (uint64_t)v4);
  if (v5 != 1)
  {
    v10 = 0;
    goto LABEL_7;
  }
  v6 = *v4;
  if (*v4)
  {
    KeyPath = swift_getKeyPath(&unk_1E5940);
    v8 = swift_getKeyPath(&unk_1E5968);
    v9 = v6;
    static Published.subscript.getter(&v16, v9, KeyPath, v8);

    swift_release(KeyPath);
    swift_release(v8);
    v10 = v16 ^ 1;
LABEL_7:
    sub_7C214((uint64_t)v4);
    return v10 & 1;
  }
  v12 = v4[1];
  v13 = type metadata accessor for ProfileRestrictions(0);
  v14 = sub_6FD0((unint64_t *)&qword_26AF00, type metadata accessor for ProfileRestrictions, (uint64_t)&protocol conformance descriptor for ProfileRestrictions);
  result = EnvironmentObject.error()(0, v12, v13, v14);
  __break(1u);
  return result;
}

uint64_t sub_7B824@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t KeyPath;
  uint64_t v17;
  uint64_t *v18;
  _BYTE v20[16];
  uint64_t v21;

  v5 = type metadata accessor for URL(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v20[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = sub_5440(&qword_261ED8);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = &v20[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v6 + 16))(v8, v2 + *(int *)(a1 + 32), v5);
  v21 = v2;
  v13 = sub_5440(&qword_261EE0);
  v14 = sub_7FD8(&qword_261EE8, &qword_261EE0, (uint64_t)&protocol conformance descriptor for Label<A, B>);
  ShareLink<>.init<>(item:subject:message:label:)(v8, 0, 0, 0, 0, 0, 0, 0, 0, sub_7C260, v20, v13, v14);
  v15 = sub_7B6E0();
  KeyPath = swift_getKeyPath(&unk_1E5840);
  v17 = swift_allocObject(&unk_24E628, 17, 7);
  *(_BYTE *)(v17 + 16) = v15 & 1;
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v10 + 16))(a2, v12, v9);
  v18 = (uint64_t *)(a2 + *(int *)(sub_5440(&qword_261EF0) + 36));
  *v18 = KeyPath;
  v18[1] = (uint64_t)sub_7C264;
  v18[2] = v17;
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t sub_7B9F0@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.isEnabled.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_7BA1C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.isEnabled.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_7BA48(unsigned __int8 *a1)
{
  return EnvironmentValues.isEnabled.setter(*a1);
}

uint64_t sub_7BA6C(unsigned __int8 *a1)
{
  return EnvironmentValues.isEnabled.setter(*a1);
}

_BYTE *sub_7BA90(_BYTE *result, char a2)
{
  *result &= a2 ^ 1;
  return result;
}

uint64_t sub_7BAA4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

_BYTE *sub_7BAB4(_BYTE *result)
{
  uint64_t v1;

  *result &= ~*(_BYTE *)(v1 + 16) & 1;
  return result;
}

uint64_t sub_7BACC(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &opaque type descriptor for <<opaque return type of ToolbarActionShareLinkMenuItem.body>>, 1);
}

char *initializeBufferWithCopyOfBuffer for ToolbarActionShareLinkMenuItem(char *a1, char **a2, int *a3)
{
  int v3;
  char *v4;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(char *, uint64_t, uint64_t);
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;

  v3 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = &v4[(v3 + 16) & ~(unint64_t)v3];
    swift_retain(v4);
  }
  else
  {
    v7 = a1;
    *((_QWORD *)a1 + 1) = a2[1];
    v8 = a3[5];
    v9 = &a1[v8];
    v10 = (uint64_t)a2 + v8;
    v11 = type metadata accessor for LocalizerRequest(0);
    v12 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    v13 = v4;
    v12(v9, v10, v11);
    v14 = a3[7];
    v7[a3[6]] = *((_BYTE *)a2 + a3[6]);
    v7[v14] = *((_BYTE *)a2 + v14);
    v15 = a3[8];
    v16 = &v7[v15];
    v17 = (uint64_t)a2 + v15;
    v18 = type metadata accessor for URL(0);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
  }
  return v7;
}

uint64_t destroy for ToolbarActionShareLinkMenuItem(id *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;

  v4 = (char *)a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for LocalizerRequest(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v6 = (char *)a1 + *(int *)(a2 + 32);
  v7 = type metadata accessor for URL(0);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
}

_QWORD *initializeWithCopy for ToolbarActionShareLinkMenuItem(_QWORD *a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(char *, uint64_t, uint64_t);
  id v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;

  v7 = *(void **)a2;
  v6 = *(_QWORD *)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v6;
  v8 = a3[5];
  v9 = (char *)a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for LocalizerRequest(0);
  v12 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
  v13 = v7;
  v12(v9, v10, v11);
  v14 = a3[7];
  *((_BYTE *)a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  *((_BYTE *)a1 + v14) = *(_BYTE *)(a2 + v14);
  v15 = a3[8];
  v16 = (char *)a1 + v15;
  v17 = a2 + v15;
  v18 = type metadata accessor for URL(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
  return a1;
}

uint64_t assignWithCopy for ToolbarActionShareLinkMenuItem(uint64_t a1, uint64_t a2, int *a3)
{
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = *(void **)a1;
  v7 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v8 = v7;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v9 = a3[5];
  v10 = a1 + v9;
  v11 = a2 + v9;
  v12 = type metadata accessor for LocalizerRequest(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 24))(v10, v11, v12);
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  v13 = a3[8];
  v14 = a1 + v13;
  v15 = a2 + v13;
  v16 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 24))(v14, v15, v16);
  return a1;
}

_OWORD *initializeWithTake for ToolbarActionShareLinkMenuItem(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for LocalizerRequest(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = a3[7];
  *((_BYTE *)a1 + a3[6]) = *((_BYTE *)a2 + a3[6]);
  *((_BYTE *)a1 + v10) = *((_BYTE *)a2 + v10);
  v11 = a3[8];
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  v14 = type metadata accessor for URL(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  return a1;
}

uint64_t assignWithTake for ToolbarActionShareLinkMenuItem(uint64_t a1, _QWORD *a2, int *a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;

  v6 = *(void **)a1;
  *(_QWORD *)a1 = *a2;

  *(_QWORD *)(a1 + 8) = a2[1];
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for LocalizerRequest(0);
  (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = a3[7];
  *(_BYTE *)(a1 + a3[6]) = *((_BYTE *)a2 + a3[6]);
  *(_BYTE *)(a1 + v11) = *((_BYTE *)a2 + v11);
  v12 = a3[8];
  v13 = a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 40))(v13, v14, v15);
  return a1;
}

uint64_t getEnumTagSinglePayload for ToolbarActionShareLinkMenuItem(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_7BF30);
}

uint64_t sub_7BF30(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if ((_DWORD)a2 == 2147483646)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    v5 = v4 - 1;
    if (v5 < 0)
      v5 = -1;
    return (v5 + 1);
  }
  else
  {
    v9 = type metadata accessor for LocalizerRequest(0);
    v10 = *(_QWORD *)(v9 - 8);
    if (*(_DWORD *)(v10 + 84) == (_DWORD)a2)
    {
      v11 = v9;
      v12 = *(int *)(a3 + 20);
    }
    else
    {
      v11 = type metadata accessor for URL(0);
      v10 = *(_QWORD *)(v11 - 8);
      v12 = *(int *)(a3 + 32);
    }
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48))(&a1[v12], a2, v11);
  }
}

uint64_t storeEnumTagSinglePayload for ToolbarActionShareLinkMenuItem(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_7BFE8);
}

char *sub_7BFE8(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 2147483646)
  {
    *(_QWORD *)result = a2;
  }
  else
  {
    v8 = type metadata accessor for LocalizerRequest(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 20);
    }
    else
    {
      v10 = type metadata accessor for URL(0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 32);
    }
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(&v5[v11], a2, a2, v10);
  }
  return result;
}

uint64_t sub_7C084(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[5];

  v5[0] = &unk_1E5910;
  result = type metadata accessor for LocalizerRequest(319);
  if (v3 <= 0x3F)
  {
    v5[1] = *(_QWORD *)(result - 8) + 64;
    v5[2] = &unk_1E5928;
    v5[3] = &unk_1E5928;
    result = type metadata accessor for URL(319);
    if (v4 <= 0x3F)
    {
      v5[4] = *(_QWORD *)(result - 8) + 64;
      swift_initStructMetadata(a1, 256, 5, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

unint64_t sub_7C124()
{
  unint64_t result;
  uint64_t v1;

  result = qword_261F98;
  if (!qword_261F98)
  {
    v1 = sub_7EF8(&qword_261EF0);
    sub_7FD8(&qword_261FA0, &qword_261ED8, (uint64_t)&protocol conformance descriptor for ShareLink<A, B, C, D>);
    sub_7FD8(&qword_25FE80, &qword_25FE88, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyTransformModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_261F98);
  }
  return result;
}

uint64_t sub_7C1C0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_7C1D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ToolbarActionShareLinkMenuItem(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_7C214(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ToolbarActionShareLinkMenuItem(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_7C258()
{
  uint64_t v0;

  return sub_7B60C(*(_QWORD *)(v0 + 16));
}

uint64_t static Font.Design.serifIfSupported.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if ((_s7BooksUI16FallBackFontSpecV03usecdE0SbyFZ_0() & 1) != 0)
  {
    v2 = type metadata accessor for Font.Design(0);
    v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56);
    v4 = a1;
    v5 = 1;
  }
  else
  {
    v6 = enum case for Font.Design.serif (_:);
    v7 = type metadata accessor for Font.Design(0);
    v8 = *(_QWORD *)(v7 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 104))(a1, v6, v7);
    v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56);
    v4 = a1;
    v5 = 0;
    v2 = v7;
  }
  return v3(v4, v5, 1, v2);
}

uint64_t sub_7C300(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Swift::Int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t result;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  BOOL v19;
  _QWORD v20[9];

  if (*(_QWORD *)(a3 + 16))
  {
    Hasher.init(_seed:)(v20, *(_QWORD *)(a3 + 40));
    String.hash(into:)(v20, a1, a2);
    v6 = Hasher._finalize()();
    v7 = -1 << *(_BYTE *)(a3 + 32);
    v8 = v6 & ~v7;
    v9 = a3 + 56;
    if (((*(_QWORD *)(a3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0)
    {
      v10 = *(_QWORD *)(a3 + 48);
      v11 = (_QWORD *)(v10 + 16 * v8);
      v12 = v11[1];
      v13 = *v11 == a1 && v12 == a2;
      if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v11, v12, a1, a2, 0) & 1) != 0)
        return 1;
      v15 = ~v7;
      v16 = (v8 + 1) & v15;
      if (((*(_QWORD *)(v9 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) != 0)
      {
        while (1)
        {
          v17 = (_QWORD *)(v10 + 16 * v16);
          v18 = v17[1];
          v19 = *v17 == a1 && v18 == a2;
          if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v17, v18, a1, a2, 0) & 1) != 0)
            break;
          result = 0;
          v16 = (v16 + 1) & v15;
          if (((*(_QWORD *)(v9 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) == 0)
            return result;
        }
        return 1;
      }
    }
  }
  return 0;
}

uint64_t sub_7C434()
{
  uint64_t result;

  result = sub_7C450();
  qword_261FA8 = result;
  return result;
}

uint64_t sub_7C450()
{
  uint64_t v0;
  uint64_t inited;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  const __CFDictionary *isa;
  const __CTFontDescriptor *v11;
  const __CTFont *v12;
  CFArrayRef v13;
  void *v14;
  uint64_t v15;
  void *v16;
  _BYTE v17[56];
  _BYTE v18[64];

  v0 = sub_5440(&qword_261FB8);
  inited = swift_initStackObject(v0, v18);
  *(_OWORD *)(inited + 16) = xmmword_1E0B70;
  result = kCTFontUIFontDesignTrait;
  if (!kCTFontUIFontDesignTrait)
  {
    __break(1u);
    goto LABEL_8;
  }
  *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(kCTFontUIFontDesignTrait);
  *(_QWORD *)(inited + 40) = v3;
  result = kCTFontUIFontDesignSerif;
  if (!kCTFontUIFontDesignSerif)
  {
LABEL_8:
    __break(1u);
    return result;
  }
  *(_QWORD *)(inited + 48) = static String._unconditionallyBridgeFromObjectiveC(_:)(kCTFontUIFontDesignSerif);
  *(_QWORD *)(inited + 56) = v4;
  v5 = sub_965C(inited);
  v6 = sub_5440(&qword_261FC0);
  v7 = swift_initStackObject(v6, v17);
  *(_OWORD *)(v7 + 16) = xmmword_1E0B70;
  *(_QWORD *)(v7 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(kCTFontTraitsAttribute);
  *(_QWORD *)(v7 + 40) = v8;
  *(_QWORD *)(v7 + 48) = v5;
  v9 = sub_977C(v7);
  sub_5440(&qword_261FC8);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v9);
  v11 = CTFontDescriptorCreateWithAttributes(isa);

  v12 = CTFontCreateWithFontDescriptor(v11, 14.0, 0);
  v13 = CTFontCopySupportedLanguages(v12);
  v16 = 0;
  static Array._conditionallyBridgeFromObjectiveC(_:result:)(v13, &v16, &type metadata for String);

  if (v16)
    v14 = v16;
  else
    v14 = &_swiftEmptyArrayStorage;
  v15 = sub_EE94C((uint64_t)v14);

  swift_bridgeObjectRelease(v14);
  return v15;
}

uint64_t static Font.Design.defaultIfUnsupported.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if ((_s7BooksUI16FallBackFontSpecV03usecdE0SbyFZ_0() & 1) != 0)
  {
    v2 = enum case for Font.Design.default(_:);
    v3 = type metadata accessor for Font.Design(0);
    v4 = *(_QWORD *)(v3 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 104))(a1, v2, v3);
    v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56);
    v6 = a1;
    v7 = 0;
    v8 = v3;
  }
  else
  {
    v8 = type metadata accessor for Font.Design(0);
    v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56);
    v6 = a1;
    v7 = 1;
  }
  return v5(v6, v7, 1, v8);
}

uint64_t _s7BooksUI16FallBackFontSpecV03usecdE0SbyFZ_0()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  NSString v13;
  unsigned __int8 v14;
  char v15;
  id v16;
  id v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;

  v0 = sub_5440(&qword_261FB0);
  __chkstk_darwin(v0);
  v2 = (char *)&v30 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = type metadata accessor for Locale.Language.Components(0);
  v3 = *(_QWORD *)(v32 - 8);
  __chkstk_darwin(v32);
  v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Locale.Components(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = type metadata accessor for Locale.LanguageCode(0);
  v10 = *(_QWORD *)(v33 - 8);
  __chkstk_darwin(v33);
  v31 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v13 = String._bridgeToObjectiveC()();
  v14 = objc_msgSend(v12, "BOOLForKey:", v13);

  if ((v14 & 1) != 0)
  {
    v15 = 1;
  }
  else
  {
    v16 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v17 = objc_msgSend(v16, "preferredLocalizations");

    v18 = (_QWORD *)static Array._unconditionallyBridgeFromObjectiveC(_:)(v17, &type metadata for String);
    if (v18[2])
    {
      v19 = v18[4];
      v20 = v18[5];
      swift_bridgeObjectRetain(v20);
      swift_bridgeObjectRelease(v18);
      v21 = Locale.Components.init(identifier:)(v19, v20);
      Locale.Components.languageComponents.getter(v21);
      v22 = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      Locale.Language.Components.languageCode.getter(v22);
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v32);
      v23 = v33;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v2, 1, v33) == 1)
      {
        sub_7C984((uint64_t)v2);
        v15 = 1;
      }
      else
      {
        v24 = v31;
        (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v31, v2, v23);
        if (qword_25DBD8 != -1)
          swift_once(&qword_25DBD8, sub_7C434);
        v25 = qword_261FA8;
        v26 = Locale.LanguageCode.identifier.getter();
        v28 = v27;
        LOBYTE(v25) = sub_7C300(v26, v27, v25);
        swift_bridgeObjectRelease(v28);
        (*(void (**)(char *, uint64_t))(v10 + 8))(v24, v23);
        v15 = v25 ^ 1;
      }
    }
    else
    {
      swift_bridgeObjectRelease(v18);
      v15 = 1;
    }
  }
  return v15 & 1;
}

ValueMetadata *type metadata accessor for FallBackFontSpec()
{
  return &type metadata for FallBackFontSpec;
}

uint64_t sub_7C984(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_5440(&qword_261FB0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_7C9C4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  v2 = type metadata accessor for UUID(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(a1, 1, 1, v2);
}

uint64_t sub_7CA00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8;

  v8 = sub_7CBF4();
  return static EnvironmentKey<>._valuesEqual(_:_:)(a1, a2, a3, a4, v8);
}

_QWORD *EnvironmentValues.referenceId.getter@<X0>(_QWORD *a1@<X8>)
{
  unint64_t v2;

  v2 = sub_7CA84();
  return EnvironmentValues.subscript.getter(a1, &type metadata for ReferenceIdKey, &type metadata for ReferenceIdKey, v2);
}

unint64_t sub_7CA84()
{
  unint64_t result;

  result = qword_261FD0;
  if (!qword_261FD0)
  {
    result = swift_getWitnessTable(&unk_1E59E0, &type metadata for ReferenceIdKey);
    atomic_store(result, (unint64_t *)&qword_261FD0);
  }
  return result;
}

uint64_t View.referenceId(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t KeyPath;

  KeyPath = swift_getKeyPath(&unk_1E59A8);
  View.environment<A>(_:_:)(KeyPath, a1, a2, a3);
  return swift_release(KeyPath);
}

uint64_t sub_7CB38(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *a1;
  v2 = sub_7EF8(&qword_261FD8);
  v3 = type metadata accessor for ModifiedContent(255, v1, v2);
  sub_7CB98();
  return swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v3);
}

unint64_t sub_7CB98()
{
  unint64_t result;
  uint64_t v1;

  result = qword_261FE0;
  if (!qword_261FE0)
  {
    v1 = sub_7EF8(&qword_261FD8);
    result = swift_getWitnessTable(&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>, v1);
    atomic_store(result, (unint64_t *)&qword_261FE0);
  }
  return result;
}

ValueMetadata *type metadata accessor for ReferenceIdKey()
{
  return &type metadata for ReferenceIdKey;
}

unint64_t sub_7CBF4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_261FE8;
  if (!qword_261FE8)
  {
    v1 = sub_7EF8(&qword_25FAC0);
    sub_7CC58();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_261FE8);
  }
  return result;
}

unint64_t sub_7CC58()
{
  unint64_t result;
  uint64_t v1;

  result = qword_261FF0;
  if (!qword_261FF0)
  {
    v1 = type metadata accessor for UUID(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for UUID, v1);
    atomic_store(result, (unint64_t *)&qword_261FF0);
  }
  return result;
}

uint64_t Metrics.Location.adamId.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease(v2[1]);
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t Metrics.Location.artistName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease(*(_QWORD *)(v2 + 24));
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return result;
}

uint64_t (*Metrics.Location.artistName.modify())()
{
  return KeyedEncodingContainer.encode<A>(_:forKey:);
}

uint64_t Metrics.Location.fcKind.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease(*(_QWORD *)(v2 + 40));
  *(_QWORD *)(v2 + 32) = a1;
  *(_QWORD *)(v2 + 40) = a2;
  return result;
}

uint64_t (*Metrics.Location.fcKind.modify())()
{
  return KeyedEncodingContainer.encode<A>(_:forKey:);
}

uint64_t Metrics.Location.id.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease(*(_QWORD *)(v2 + 56));
  *(_QWORD *)(v2 + 48) = a1;
  *(_QWORD *)(v2 + 56) = a2;
  return result;
}

uint64_t (*Metrics.Location.id.modify())()
{
  return KeyedEncodingContainer.encode<A>(_:forKey:);
}

uint64_t Metrics.Location.idType.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease(*(_QWORD *)(v2 + 72));
  *(_QWORD *)(v2 + 64) = a1;
  *(_QWORD *)(v2 + 72) = a2;
  return result;
}

uint64_t (*Metrics.Location.idType.modify())()
{
  return KeyedEncodingContainer.encode<A>(_:forKey:);
}

uint64_t Metrics.Location.kind.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease(*(_QWORD *)(v2 + 88));
  *(_QWORD *)(v2 + 80) = a1;
  *(_QWORD *)(v2 + 88) = a2;
  return result;
}

uint64_t Metrics.Location.locationPosition.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 96);
}

uint64_t Metrics.Location.locationPosition.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 96) = result;
  *(_BYTE *)(v2 + 104) = a2 & 1;
  return result;
}

uint64_t (*Metrics.Location.locationPosition.modify())()
{
  return KeyedEncodingContainer.encode<A>(_:forKey:);
}

uint64_t Metrics.Location.locationType.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease(*(_QWORD *)(v2 + 120));
  *(_QWORD *)(v2 + 112) = a1;
  *(_QWORD *)(v2 + 120) = a2;
  return result;
}

uint64_t (*Metrics.Location.locationType.modify())()
{
  return KeyedEncodingContainer.encode<A>(_:forKey:);
}

uint64_t Metrics.Location.name.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease(*(_QWORD *)(v2 + 136));
  *(_QWORD *)(v2 + 128) = a1;
  *(_QWORD *)(v2 + 136) = a2;
  return result;
}

uint64_t (*Metrics.Location.name.modify())()
{
  return KeyedEncodingContainer.encode<A>(_:forKey:);
}

uint64_t Metrics.Location.narratorName.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 144);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 152));
  return v1;
}

uint64_t Metrics.Location.narratorName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease(*(_QWORD *)(v2 + 152));
  *(_QWORD *)(v2 + 144) = a1;
  *(_QWORD *)(v2 + 152) = a2;
  return result;
}

uint64_t (*Metrics.Location.narratorName.modify())()
{
  return KeyedEncodingContainer.encode<A>(_:forKey:);
}

uint64_t Metrics.Location.narratorType.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 160);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 168));
  return v1;
}

uint64_t Metrics.Location.narratorType.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease(*(_QWORD *)(v2 + 168));
  *(_QWORD *)(v2 + 160) = a1;
  *(_QWORD *)(v2 + 168) = a2;
  return result;
}

void Metrics.Location.init(adamId:artistName:fcKind:id:idType:isSG:kind:locationPosition:locationType:name:narratorName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  __asm { BR              X23 }
}

int8x16_t sub_7CFF4@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, int8x16_t *a9@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  BOOL v21;
  uint64_t v22;
  unint64_t v23;
  int32x2_t v24;
  int64x2_t v25;
  int8x16_t v26;
  int32x2_t v27;
  int8x16_t result;

  v19 = v18 == 2;
  v20 = (v18 & 1) == 0;
  v21 = (v17 & 1) == 0;
  v22 = 0x696F56736B6F6F42;
  if (v21)
    v22 = 0;
  v23 = 0xEB00000000736563;
  if (v21)
    v23 = 0;
  a9->i64[0] = a1;
  a9->i64[1] = a2;
  a9[1].i64[0] = a3;
  a9[1].i64[1] = a4;
  v24 = vdup_n_s32(v20);
  a9[2].i64[0] = a5;
  a9[2].i64[1] = a6;
  v25.i64[0] = v24.u32[0];
  v25.i64[1] = v24.u32[1];
  v26 = vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v25, 0x3FuLL)), (int8x16_t)xmmword_1E5A30, (int8x16_t)xmmword_1E5A20);
  v27 = vdup_n_s32(v19);
  a9[3].i64[0] = a7;
  a9[3].i64[1] = a8;
  v25.i64[0] = v27.u32[0];
  v25.i64[1] = v27.u32[1];
  result = vandq_s8(v26, (int8x16_t)vcgezq_s64(vshlq_n_s64(v25, 0x3FuLL)));
  a9[4] = result;
  a9[5].i64[0] = v14;
  a9[5].i64[1] = v13;
  a9[6].i64[0] = v15;
  a9[6].i8[8] = 0;
  a9[7].i64[0] = 0x6E6D756C6F63;
  a9[7].i64[1] = v16;
  a9[8].i64[0] = v12;
  a9[8].i64[1] = v11;
  a9[9].i64[0] = v10;
  a9[9].i64[1] = v9;
  a9[10].i64[0] = v22;
  a9[10].i64[1] = v23;
  return result;
}

uint64_t Metrics.LocationType.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_7D144 + 4 * byte_1E5A47[*v0]))(0x6E6F74747562, 0xE600000000000000);
}

uint64_t sub_7D144()
{
  return 0x6E6D756C6F63;
}

uint64_t sub_7D154()
{
  return 0x7265746C6966;
}

uint64_t sub_7D164()
{
  return 0x70756B636F6CLL;
}

uint64_t sub_7D174()
{
  return 0x77656976657270;
}

uint64_t sub_7D18C()
{
  return 0x6E6F6974636573;
}

uint64_t sub_7D1A4()
{
  return 0x68736F6F7773;
}

uint64_t sub_7D1B4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t (*v25)(_BYTE *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  unint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  BOOL v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _BYTE v45[4];
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _BYTE v54[42];

  v51 = a4;
  v52 = a2;
  v53 = a3;
  v7 = sub_5440(&qword_262038);
  v8 = __chkstk_darwin(v7);
  v10 = &v45[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v8);
  v12 = &v45[-v11];
  v13 = a1[3];
  v14 = a1[4];
  sub_5480(a1, v13);
  v15 = AssetInfo.author.getter(v13, v14);
  v49 = v16;
  v50 = v15;
  v17 = a1[3];
  v18 = a1[4];
  sub_5480(a1, v17);
  v19 = ContentInfo.id.getter(v17, *(_QWORD *)(v18 + 8));
  v47 = v20;
  v48 = v19;
  sub_BD00((uint64_t)a1, (uint64_t)v54);
  v21 = sub_5440(&qword_262040);
  v22 = type metadata accessor for AudiobookInfo(0);
  v23 = swift_dynamicCast(v12, v54, v21, v22, 6);
  v24 = *(_QWORD *)(v22 - 8);
  v25 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v24 + 56);
  if ((v23 & 1) != 0)
  {
    v26 = v25(v12, 0, 1, v22);
    v46 = AudiobookInfo.isSG.getter(v26);
    (*(void (**)(_BYTE *, uint64_t))(v24 + 8))(v12, v22);
  }
  else
  {
    v25(v12, 1, 1, v22);
    sub_7F410((uint64_t)v12);
    v46 = 0;
  }
  v27 = a1[3];
  v28 = a1[4];
  sub_5480(a1, v27);
  v29 = dispatch thunk of AssetInfo.assetType.getter(v27, v28);
  v30 = static AssetType.== infix(_:_:)(v29, 0);
  sub_BD00((uint64_t)a1, (uint64_t)v54);
  if ((swift_dynamicCast(v10, v54, v21, v22, 6) & 1) != 0)
  {
    v25(v10, 0, 1, v22);
    v31 = sub_7F450();
    v32 = (void *)ContentInfo.storeData.getter(v22, v31);
    v33 = (*(uint64_t (**)(_BYTE *, uint64_t))(v24 + 8))(v10, v22);
    if (v32)
    {
      v34 = MAudiobook.narrator.getter(v33);
      v36 = v35;

      goto LABEL_9;
    }
  }
  else
  {
    v25(v10, 1, 1, v22);
    sub_7F410((uint64_t)v10);
  }
  v34 = 0;
  v36 = 0;
LABEL_9:
  *(_DWORD *)(a5 + 105) = *(_DWORD *)v54;
  if ((v30 & 1) != 0)
    v37 = 0xE90000000000006BLL;
  else
    v37 = 0xE500000000000000;
  v38 = 0x6B6F6F6265;
  if ((v30 & 1) != 0)
    v38 = 0x6F6F626F69647561;
  *(_DWORD *)(a5 + 108) = *(_DWORD *)&v54[3];
  v39 = (v46 & 1) == 0;
  v40 = 0x696F56736B6F6F42;
  if ((v46 & 1) == 0)
    v40 = 0;
  v41 = 0xEB00000000736563;
  *(_QWORD *)a5 = 0;
  *(_QWORD *)(a5 + 8) = 0;
  if (v39)
    v41 = 0;
  v42 = v49;
  *(_QWORD *)(a5 + 16) = v50;
  *(_QWORD *)(a5 + 24) = v42;
  *(_QWORD *)(a5 + 32) = 0;
  *(_QWORD *)(a5 + 40) = 0;
  v43 = v47;
  *(_QWORD *)(a5 + 48) = v48;
  *(_QWORD *)(a5 + 56) = v43;
  *(_OWORD *)(a5 + 64) = xmmword_1E5A30;
  *(_QWORD *)(a5 + 80) = v38;
  *(_QWORD *)(a5 + 88) = v37;
  *(_QWORD *)(a5 + 96) = v51;
  *(_BYTE *)(a5 + 104) = 0;
  *(_QWORD *)(a5 + 112) = 0x70756B636F6CLL;
  *(_QWORD *)(a5 + 120) = 0xE600000000000000;
  *(_QWORD *)(a5 + 128) = v52;
  *(_QWORD *)(a5 + 136) = v53;
  *(_QWORD *)(a5 + 144) = v34;
  *(_QWORD *)(a5 + 152) = v36;
  *(_QWORD *)(a5 + 160) = v40;
  *(_QWORD *)(a5 + 168) = v41;
  return _s7BooksUI13AnyPagedFrameVwxx_0(a1);
}

double static Metrics.Location.genericButton.getter@<D0>(uint64_t a1@<X8>)
{
  return sub_7D524(0x6E6F74747562, 0xE600000000000000, a1);
}

double static Metrics.Location.genericSection.getter@<D0>(uint64_t a1@<X8>)
{
  return sub_7D524(0x6E6F6974636573, 0xE700000000000000, a1);
}

double sub_7D524@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  double result;

  result = 0.0;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_QWORD *)(a3 + 96) = 0;
  *(_BYTE *)(a3 + 104) = 0;
  *(_QWORD *)(a3 + 112) = a1;
  *(_QWORD *)(a3 + 120) = a2;
  *(_OWORD *)(a3 + 128) = 0u;
  *(_OWORD *)(a3 + 144) = 0u;
  *(_OWORD *)(a3 + 160) = 0u;
  return result;
}

uint64_t static Metrics.Location.lockup(for:locationPosition:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[5];

  sub_BD00((uint64_t)a1, (uint64_t)v11);
  v6 = a1[3];
  v7 = a1[4];
  sub_5480(a1, v6);
  v8 = AssetInfo.title.getter(v6, v7);
  return sub_7D1B4(v11, v8, v9, a2, a3);
}

uint64_t static Metrics.Location.buyButton(for:locationPosition:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD v6[5];

  sub_BD00(a1, (uint64_t)v6);
  return sub_7D1B4(v6, 0x6C6C6950797562, 0xE700000000000000, a2, a3);
}

uint64_t sub_7D630(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_7D660 + 4 * byte_1E5A4E[a1]))(0x64496D616461, 0xE600000000000000);
}

uint64_t sub_7D660()
{
  return 0x614E747369747261;
}

uint64_t sub_7D67C()
{
  return 0x646E694B6366;
}

uint64_t sub_7D68C()
{
  return 25705;
}

uint64_t sub_7D698()
{
  return 0x657079546469;
}

uint64_t sub_7D6A8()
{
  return 1684957547;
}

unint64_t sub_7D6B8()
{
  return 0xD000000000000010;
}

uint64_t sub_7D6D4()
{
  return 0x6E6F697461636F6CLL;
}

uint64_t sub_7D728()
{
  return 1701667182;
}

uint64_t sub_7D738()
{
  unsigned __int8 *v0;

  return sub_7D630(*v0);
}

uint64_t sub_7D740@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_7EFB4(a1, a2);
  *a3 = result;
  return result;
}

void sub_7D764(_BYTE *a1@<X8>)
{
  *a1 = 11;
}

uint64_t sub_7D770(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_7DAC8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_7D798(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_7DAC8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t Metrics.Location.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  char v53;
  char v54[9];
  char v55;
  char v56;
  char v57;
  char v58;
  char v59;
  char v60;
  char v61;
  char v62;

  v3 = sub_5440(&qword_261FF8);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = v1[1];
  v9 = v1[2];
  v49 = v1[3];
  v50 = v9;
  v10 = v1[4];
  v47 = v1[5];
  v48 = v10;
  v11 = v1[6];
  v45 = v1[7];
  v46 = v11;
  v12 = v1[8];
  v43 = v1[9];
  v44 = v12;
  v13 = v1[10];
  v41 = v1[11];
  v42 = v13;
  v14 = v1[12];
  v40 = *((unsigned __int8 *)v1 + 104);
  v38 = v1[14];
  v39 = v14;
  v15 = v1[15];
  v36 = v1[16];
  v37 = v15;
  v16 = v1[17];
  v34 = v1[18];
  v35 = v16;
  v17 = v1[19];
  v32 = v1[20];
  v33 = v17;
  v31 = v1[21];
  v18 = a1[3];
  v19 = a1[4];
  sub_5480(a1, v18);
  v20 = sub_7DAC8();
  v21 = v18;
  v22 = v3;
  dispatch thunk of Encoder.container<A>(keyedBy:)(&_s8LocationV10CodingKeysON, &_s8LocationV10CodingKeysON, v20, v21, v19);
  v62 = 0;
  v23 = v51;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v7, v8, &v62, v3);
  if (!v23)
  {
    v24 = v47;
    v25 = v48;
    v26 = v45;
    v27 = v46;
    v28 = v44;
    v61 = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v50, v49, &v61, v22);
    v60 = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v25, v24, &v60, v22);
    v59 = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v27, v26, &v59, v22);
    v58 = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v28, v43, &v58, v22);
    v57 = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v42, v41, &v57, v22);
    v56 = 6;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v39, v40, &v56, v22);
    v55 = 7;
    KeyedEncodingContainer.encode(_:forKey:)(v38, v37, &v55, v22);
    v54[0] = 8;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v36, v35, v54, v22);
    v53 = 9;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v34, v33, &v53, v22);
    v52 = 10;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v32, v31, &v52, v22);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v22);
}

unint64_t sub_7DAC8()
{
  unint64_t result;

  result = qword_262000;
  if (!qword_262000)
  {
    result = swift_getWitnessTable(&unk_1E5CB0, &_s8LocationV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_262000);
  }
  return result;
}

_QWORD *Metrics.Location.init(from:)@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  _OWORD *v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _OWORD *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  _QWORD v98[13];
  char v99;
  _BYTE v100[7];
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char v109;
  _BYTE v110[7];
  char v111;
  uint64_t v112;

  v84 = sub_5440(&qword_262008);
  v5 = *(_QWORD *)(v84 - 8);
  __chkstk_darwin(v84);
  v7 = (char *)&v62 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v111 = 1;
  v8 = a1[3];
  v9 = a1[4];
  sub_5480(a1, v8);
  v10 = sub_7DAC8();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&_s8LocationV10CodingKeysON, &_s8LocationV10CodingKeysON, v10, v8, v9);
  v85 = a1;
  if (v2)
  {
    v112 = v2;
    v12 = 0;
    v86 = 0;
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v17 = 0;
    v18 = 0;
    v19 = 0;
  }
  else
  {
    v83 = v5;
    v81 = a2;
    LOBYTE(v98[0]) = 0;
    v11 = v84;
    v21 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v98, v84);
    v23 = v22;
    LOBYTE(v98[0]) = 1;
    swift_bridgeObjectRetain(v22);
    v79 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v98, v11);
    v80 = v23;
    LOBYTE(v98[0]) = 2;
    v25 = v24;
    swift_bridgeObjectRetain(v24);
    v26 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v98, v11);
    v28 = v27;
    v77 = v26;
    v78 = v25;
    LOBYTE(v98[0]) = 3;
    swift_bridgeObjectRetain(v27);
    v76 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v98, v11);
    LOBYTE(v98[0]) = 4;
    v30 = v29;
    swift_bridgeObjectRetain(v29);
    v74 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v98, v11);
    v75 = v30;
    LOBYTE(v98[0]) = 5;
    v32 = v31;
    swift_bridgeObjectRetain(v31);
    v72 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v98, v11);
    v73 = v21;
    LOBYTE(v98[0]) = 6;
    v13 = v33;
    swift_bridgeObjectRetain(v33);
    v71 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v98, v11);
    v70 = v34;
    v111 = v34 & 1;
    LOBYTE(v98[0]) = 7;
    v69 = KeyedDecodingContainer.decode(_:forKey:)(v98, v11);
    LOBYTE(v98[0]) = 8;
    v36 = v35;
    swift_bridgeObjectRetain(v35);
    v68 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v98, v11);
    v112 = 0;
    v82 = v36;
    v67 = v32;
    LOBYTE(v98[0]) = 9;
    v86 = v37;
    swift_bridgeObjectRetain(v37);
    v38 = v112;
    v39 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v98, v11);
    v112 = v38;
    if (v38)
    {
      (*(void (**)(char *, uint64_t))(v83 + 8))(v7, v84);
      v18 = v80;
      swift_bridgeObjectRelease(v80);
      v17 = v78;
      swift_bridgeObjectRelease(v78);
      v16 = v28;
      swift_bridgeObjectRelease(v28);
      v15 = v75;
      swift_bridgeObjectRelease(v75);
      v14 = v67;
      swift_bridgeObjectRelease(v67);
      swift_bridgeObjectRelease(v13);
      swift_bridgeObjectRelease(v82);
      swift_bridgeObjectRelease(v86);
      v12 = 0;
    }
    else
    {
      v41 = v39;
      v12 = v40;
      v109 = 10;
      swift_bridgeObjectRetain(v40);
      v42 = v112;
      v43 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v109, v84);
      v112 = v42;
      if (!v42)
      {
        v45 = v43;
        v46 = v44;
        (*(void (**)(char *, uint64_t))(v83 + 8))(v7, v84);
        v62 = v46;
        swift_bridgeObjectRetain(v46);
        swift_bridgeObjectRelease(0);
        v47 = v80;
        *(_QWORD *)&v87 = v73;
        *((_QWORD *)&v87 + 1) = v80;
        *(_QWORD *)&v88 = v79;
        *((_QWORD *)&v88 + 1) = v78;
        *(_QWORD *)&v89 = v77;
        *((_QWORD *)&v89 + 1) = v28;
        v63 = v13;
        v64 = v28;
        v48 = v75;
        *(_QWORD *)&v90 = v76;
        *((_QWORD *)&v90 + 1) = v75;
        *(_QWORD *)&v91 = v74;
        *((_QWORD *)&v91 + 1) = v67;
        *(_QWORD *)&v92 = v72;
        *((_QWORD *)&v92 + 1) = v13;
        *(_QWORD *)&v93 = v71;
        BYTE8(v93) = v70 & 1;
        v49 = v82;
        *(_QWORD *)&v94 = v69;
        *((_QWORD *)&v94 + 1) = v82;
        *(_QWORD *)&v95 = v68;
        *((_QWORD *)&v95 + 1) = v86;
        v65 = v45;
        v66 = v41;
        *(_QWORD *)&v96 = v41;
        *((_QWORD *)&v96 + 1) = v12;
        v50 = v12;
        v51 = v62;
        *(_QWORD *)&v97 = v45;
        *((_QWORD *)&v97 + 1) = v62;
        sub_7E3E4(&v87);
        swift_bridgeObjectRelease(v47);
        v52 = v78;
        swift_bridgeObjectRelease(v78);
        swift_bridgeObjectRelease(v28);
        swift_bridgeObjectRelease(v48);
        v53 = v67;
        swift_bridgeObjectRelease(v67);
        v54 = v63;
        swift_bridgeObjectRelease(v63);
        swift_bridgeObjectRelease(v49);
        swift_bridgeObjectRelease(v86);
        v55 = v50;
        swift_bridgeObjectRelease(v50);
        swift_bridgeObjectRelease(v51);
        v56 = v96;
        v57 = v81;
        v81[8] = v95;
        v57[9] = v56;
        v57[10] = v97;
        v58 = v92;
        v57[4] = v91;
        v57[5] = v58;
        v59 = v94;
        v57[6] = v93;
        v57[7] = v59;
        v60 = v88;
        *v57 = v87;
        v57[1] = v60;
        v61 = v90;
        v57[2] = v89;
        v57[3] = v61;
        _s7BooksUI13AnyPagedFrameVwxx_0(v85);
        v98[0] = v73;
        v98[1] = v80;
        v98[2] = v79;
        v98[3] = v52;
        v98[4] = v77;
        v98[5] = v64;
        v98[6] = v76;
        v98[7] = v48;
        v98[8] = v74;
        v98[9] = v53;
        v98[10] = v72;
        v98[11] = v54;
        v98[12] = v71;
        v99 = v111;
        *(_DWORD *)v100 = *(_DWORD *)v110;
        *(_DWORD *)&v100[3] = *(_DWORD *)&v110[3];
        v101 = v69;
        v102 = v49;
        v103 = v68;
        v104 = v86;
        v105 = v66;
        v106 = v55;
        v107 = v65;
        v108 = v51;
        return sub_7E498(v98);
      }
      (*(void (**)(char *, uint64_t))(v83 + 8))(v7, v84);
      v18 = v80;
      swift_bridgeObjectRelease(v80);
      v17 = v78;
      swift_bridgeObjectRelease(v78);
      v16 = v28;
      swift_bridgeObjectRelease(v28);
      v15 = v75;
      swift_bridgeObjectRelease(v75);
      v14 = v67;
      swift_bridgeObjectRelease(v67);
      swift_bridgeObjectRelease(v13);
      swift_bridgeObjectRelease(v82);
      swift_bridgeObjectRelease(v86);
      swift_bridgeObjectRelease(v12);
    }
    v19 = 1;
  }
  _s7BooksUI13AnyPagedFrameVwxx_0(v85);
  swift_bridgeObjectRelease(v18);
  swift_bridgeObjectRelease(v17);
  swift_bridgeObjectRelease(v16);
  swift_bridgeObjectRelease(v15);
  swift_bridgeObjectRelease(v14);
  swift_bridgeObjectRelease(v13);
  if (v19)
    swift_bridgeObjectRelease(v82);
  swift_bridgeObjectRelease(0);
  swift_bridgeObjectRelease(v12);
  return (_QWORD *)swift_bridgeObjectRelease(v86);
}

_QWORD *sub_7E3E4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = a1[1];
  v3 = a1[3];
  v4 = a1[5];
  v5 = a1[7];
  v6 = a1[9];
  v7 = a1[11];
  v8 = a1[15];
  v9 = a1[17];
  v10 = a1[19];
  swift_bridgeObjectRetain(a1[21]);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  return a1;
}

_QWORD *sub_7E498(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = a1[1];
  v3 = a1[3];
  v4 = a1[5];
  v5 = a1[7];
  v6 = a1[9];
  v7 = a1[11];
  v8 = a1[17];
  v9 = a1[19];
  v10 = a1[21];
  swift_bridgeObjectRelease(a1[15]);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease(v8);
  swift_bridgeObjectRelease(v9);
  swift_bridgeObjectRelease(v10);
  return a1;
}

_QWORD *sub_7E54C@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  return Metrics.Location.init(from:)(a1, a2);
}

uint64_t sub_7E560(_QWORD *a1)
{
  return Metrics.Location.encode(to:)(a1);
}

uint64_t Metrics.LocationType.init(rawValue:)@<X0>(Swift::String string@<0:X0, 8:X1>, char *a2@<X8>)
{
  void *object;
  Swift::String v3;
  unint64_t v5;
  uint64_t result;
  char v7;

  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_249690, v3);
  result = swift_bridgeObjectRelease(object);
  v7 = 7;
  if (v5 < 7)
    v7 = v5;
  *a2 = v7;
  return result;
}

unint64_t sub_7E5CC(uint64_t a1)
{
  unint64_t result;

  result = sub_7E5F0();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_7E5F0()
{
  unint64_t result;

  result = qword_262010;
  if (!qword_262010)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Metrics.Location, &type metadata for Metrics.Location);
    atomic_store(result, (unint64_t *)&qword_262010);
  }
  return result;
}

void sub_7E634(char *a1)
{
  sub_C618C(*a1);
}

unint64_t sub_7E644()
{
  unint64_t result;

  result = qword_262018;
  if (!qword_262018)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Metrics.LocationType, &type metadata for Metrics.LocationType);
    atomic_store(result, (unint64_t *)&qword_262018);
  }
  return result;
}

void sub_7E688()
{
  char *v0;

  sub_125F1C(0, *v0);
}

void sub_7E694()
{
  __asm { BR              X10 }
}

uint64_t sub_7E6CC(uint64_t a1)
{
  uint64_t v1;

  String.hash(into:)(a1, 0x6E6D756C6F63, v1);
  return swift_bridgeObjectRelease(v1);
}

void sub_7E750(uint64_t a1)
{
  char *v1;

  sub_125F1C(a1, *v1);
}

uint64_t sub_7E758@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  return Metrics.LocationType.init(rawValue:)(*a1, a2);
}

uint64_t sub_7E764()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_7E790 + 4 * byte_1E5A60[*v0]))();
}

void sub_7E790(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = 0x6E6D756C6F63;
  a1[1] = v1;
}

void sub_7E7A4(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = 0x7265746C6966;
  a1[1] = v1;
}

void sub_7E7B8(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = 0x70756B636F6CLL;
  a1[1] = v1;
}

void sub_7E7CC(_QWORD *a1@<X8>)
{
  *a1 = 0x77656976657270;
  a1[1] = 0xE700000000000000;
}

void sub_7E7E8(_QWORD *a1@<X8>)
{
  *a1 = 0x6E6F6974636573;
  a1[1] = 0xE700000000000000;
}

void sub_7E804(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = 0x68736F6F7773;
  a1[1] = v1;
}

uint64_t _s8LocationVwxx(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[5]);
  swift_bridgeObjectRelease(a1[7]);
  swift_bridgeObjectRelease(a1[9]);
  swift_bridgeObjectRelease(a1[11]);
  swift_bridgeObjectRelease(a1[15]);
  swift_bridgeObjectRelease(a1[17]);
  swift_bridgeObjectRelease(a1[19]);
  return swift_bridgeObjectRelease(a1[21]);
}

uint64_t _s8LocationVwcp(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  v6 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v6;
  v7 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v7;
  v8 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v8;
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  v9 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v9;
  v10 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = v10;
  v11 = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = v11;
  v12 = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = v12;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v12);
  return a1;
}

uint64_t _s8LocationVwca(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v12 = *(_QWORD *)(a2 + 72);
  v13 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  v14 = *(_QWORD *)(a2 + 88);
  v15 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  v16 = *(_QWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = v16;
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  v17 = *(_QWORD *)(a2 + 120);
  v18 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 120) = v17;
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRelease(v18);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  v19 = *(_QWORD *)(a2 + 136);
  v20 = *(_QWORD *)(a1 + 136);
  *(_QWORD *)(a1 + 136) = v19;
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRelease(v20);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  v21 = *(_QWORD *)(a2 + 152);
  v22 = *(_QWORD *)(a1 + 152);
  *(_QWORD *)(a1 + 152) = v21;
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRelease(v22);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  v23 = *(_QWORD *)(a2 + 168);
  v24 = *(_QWORD *)(a1 + 168);
  *(_QWORD *)(a1 + 168) = v23;
  swift_bridgeObjectRetain(v23);
  swift_bridgeObjectRelease(v24);
  return a1;
}

__n128 _s8LocationVwtk(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __n128 result;
  __int128 v8;
  __int128 v9;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  v4 = a2[3];
  v5 = a2[4];
  v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  result = (__n128)a2[7];
  v8 = a2[8];
  v9 = a2[10];
  *(_OWORD *)(a1 + 144) = a2[9];
  *(_OWORD *)(a1 + 160) = v9;
  *(__n128 *)(a1 + 112) = result;
  *(_OWORD *)(a1 + 128) = v8;
  return result;
}

uint64_t _s8LocationVwta(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v8;
  swift_bridgeObjectRelease(v9);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v10;
  swift_bridgeObjectRelease(v11);
  v12 = *(_QWORD *)(a2 + 72);
  v13 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v12;
  swift_bridgeObjectRelease(v13);
  v14 = *(_QWORD *)(a2 + 88);
  v15 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v14;
  swift_bridgeObjectRelease(v15);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  v16 = *(_QWORD *)(a2 + 120);
  v17 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v16;
  swift_bridgeObjectRelease(v17);
  v18 = *(_QWORD *)(a2 + 136);
  v19 = *(_QWORD *)(a1 + 136);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = v18;
  swift_bridgeObjectRelease(v19);
  v20 = *(_QWORD *)(a2 + 152);
  v21 = *(_QWORD *)(a1 + 152);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = v20;
  swift_bridgeObjectRelease(v21);
  v22 = *(_QWORD *)(a2 + 168);
  v23 = *(_QWORD *)(a1 + 168);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = v22;
  swift_bridgeObjectRelease(v23);
  return a1;
}

uint64_t _s8LocationVwet(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 176))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 120);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t _s8LocationVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 168) = 0;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 176) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 120) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 176) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for Metrics.Location()
{
  return &type metadata for Metrics.Location;
}

uint64_t _s12LocationTypeOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_7ED00 + 4 * byte_1E5A6C[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_7ED34 + 4 * byte_1E5A67[v4]))();
}

uint64_t sub_7ED34(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_7ED3C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x7ED44);
  return result;
}

uint64_t sub_7ED50(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x7ED58);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_7ED5C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_7ED64(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Metrics.LocationType()
{
  return &type metadata for Metrics.LocationType;
}

uint64_t _s8LocationV10CodingKeysOwet(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF6)
    goto LABEL_17;
  if (a2 + 10 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 10) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 10;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 10;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 10;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xB;
  v8 = v6 - 11;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s8LocationV10CodingKeysOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 10 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 10) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF6)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF5)
    return ((uint64_t (*)(void))((char *)&loc_7EE5C + 4 * byte_1E5A76[v4]))();
  *a1 = a2 + 10;
  return ((uint64_t (*)(void))((char *)sub_7EE90 + 4 * byte_1E5A71[v4]))();
}

uint64_t sub_7EE90(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_7EE98(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x7EEA0);
  return result;
}

uint64_t sub_7EEAC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x7EEB4);
  *(_BYTE *)result = a2 + 10;
  return result;
}

uint64_t sub_7EEB8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_7EEC0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s8LocationV10CodingKeysOMa()
{
  return &_s8LocationV10CodingKeysON;
}

unint64_t sub_7EEE0()
{
  unint64_t result;

  result = qword_262020;
  if (!qword_262020)
  {
    result = swift_getWitnessTable(&unk_1E5C88, &_s8LocationV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_262020);
  }
  return result;
}

unint64_t sub_7EF28()
{
  unint64_t result;

  result = qword_262028;
  if (!qword_262028)
  {
    result = swift_getWitnessTable(&unk_1E5BF8, &_s8LocationV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_262028);
  }
  return result;
}

unint64_t sub_7EF70()
{
  unint64_t result;

  result = qword_262030;
  if (!qword_262030)
  {
    result = swift_getWitnessTable(&unk_1E5C20, &_s8LocationV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_262030);
  }
  return result;
}

uint64_t sub_7EFB4(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char v16;

  if (a1 == 0x64496D616461 && a2 == 0xE600000000000000)
  {
    v5 = 0xE600000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x64496D616461, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x614E747369747261 && a2 == 0xEA0000000000656DLL)
  {
    v7 = 0xEA0000000000656DLL;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x614E747369747261, 0xEA0000000000656DLL, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x646E694B6366 && a2 == 0xE600000000000000)
  {
    v8 = 0xE600000000000000;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x646E694B6366, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 25705 && a2 == 0xE200000000000000)
  {
    v9 = 0xE200000000000000;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(25705, 0xE200000000000000, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_26;
  }
  if (a1 == 0x657079546469 && a2 == 0xE600000000000000)
  {
    v10 = 0xE600000000000000;
LABEL_32:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x657079546469, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_32;
  }
  if (a1 == 1684957547 && a2 == 0xE400000000000000)
  {
    v11 = 0xE400000000000000;
LABEL_38:
    swift_bridgeObjectRelease(v11);
    return 5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1684957547, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
    goto LABEL_38;
  }
  if (a1 == 0xD000000000000010)
  {
    v12 = 0x80000000001F9F30;
    if (a2 == 0x80000000001F9F30)
      goto LABEL_43;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x80000000001F9F30, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
LABEL_43:
    swift_bridgeObjectRelease(v12);
    return 6;
  }
  if (a1 == 0x6E6F697461636F6CLL && a2 == 0xEC00000065707954)
  {
    v13 = 0xEC00000065707954;
LABEL_49:
    swift_bridgeObjectRelease(v13);
    return 7;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F697461636F6CLL, 0xEC00000065707954, a1, a2, 0) & 1) != 0)
  {
    v13 = a2;
    goto LABEL_49;
  }
  if (a1 == 1701667182 && a2 == 0xE400000000000000)
  {
    v14 = 0xE400000000000000;
LABEL_55:
    swift_bridgeObjectRelease(v14);
    return 8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1701667182, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v14 = a2;
    goto LABEL_55;
  }
  if (a1 == 0x726F74617272616ELL && a2 == 0xEC000000656D614ELL)
  {
    v15 = 0xEC000000656D614ELL;
LABEL_61:
    swift_bridgeObjectRelease(v15);
    return 9;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x726F74617272616ELL, 0xEC000000656D614ELL, a1, a2, 0) & 1) != 0)
  {
    v15 = a2;
    goto LABEL_61;
  }
  if (a1 == 0x726F74617272616ELL && a2 == 0xEC00000065707954)
  {
    swift_bridgeObjectRelease(0xEC00000065707954);
    return 10;
  }
  else
  {
    v16 = _stringCompareWithSmolCheck(_:_:expecting:)(0x726F74617272616ELL, 0xEC00000065707954, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v16 & 1) != 0)
      return 10;
    else
      return 11;
  }
}

uint64_t sub_7F410(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_5440(&qword_262038);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_7F450()
{
  unint64_t result;
  uint64_t v1;

  result = qword_262048;
  if (!qword_262048)
  {
    v1 = type metadata accessor for AudiobookInfo(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for AudiobookInfo, v1);
    atomic_store(result, (unint64_t *)&qword_262048);
  }
  return result;
}

uint64_t ToolbarButtonStyle.init()@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;

  *a1 = swift_getKeyPath(&unk_1E5D00);
  v2 = sub_5440(&qword_25E948);
  return swift_storeEnumTagMultiPayload(a1, v2, 0);
}

uint64_t ToolbarButtonStyle.makeBody(configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  void (*v33)(char *, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t KeyPath;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  int v43;
  uint64_t v44;
  _DWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  _DWORD *v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;

  v101 = a1;
  v106 = a2;
  v2 = type metadata accessor for Material(0);
  v95 = *(_QWORD *)(v2 - 8);
  v96 = v2;
  __chkstk_darwin(v2);
  v93 = (char *)&v80 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v90 = sub_5440(&qword_262050);
  __chkstk_darwin(v90);
  v97 = (char *)&v80 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for BlendMode(0);
  v88 = *(_QWORD *)(v5 - 8);
  v89 = v5;
  __chkstk_darwin(v5);
  v87 = (char *)&v80 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v85 = sub_5440(&qword_262058);
  __chkstk_darwin(v85);
  v91 = (char *)&v80 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v86 = sub_5440(&qword_262060);
  __chkstk_darwin(v86);
  v94 = (char *)&v80 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v105 = sub_5440(&qword_262068);
  v9 = __chkstk_darwin(v105);
  v92 = (uint64_t)&v80 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v98 = (uint64_t)&v80 - v11;
  v103 = sub_5440(&qword_262070);
  __chkstk_darwin(v103);
  v104 = (uint64_t)&v80 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_5440(&qword_262078);
  __chkstk_darwin(v13);
  v15 = (char *)&v80 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for ButtonStyleConfiguration.Label(0);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v19 = (char *)&v80 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v100 = sub_5440(&qword_262080);
  __chkstk_darwin(v100);
  v21 = (char *)&v80 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v81 = sub_5440(&qword_262088);
  __chkstk_darwin(v81);
  v83 = (uint64_t)&v80 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v102 = sub_5440(&qword_262090);
  v23 = __chkstk_darwin(v102);
  v82 = (uint64_t)&v80 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  v84 = (uint64_t)&v80 - v25;
  v26 = type metadata accessor for ColorScheme(0);
  v27 = *(_QWORD *)(v26 - 8);
  v28 = __chkstk_darwin(v26);
  v30 = (char *)&v80 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28);
  v32 = (char *)&v80 - v31;
  sub_31378((uint64_t)&v80 - v31);
  (*(void (**)(char *, _QWORD, uint64_t))(v27 + 104))(v30, enum case for ColorScheme.light(_:), v26);
  v99 = static ColorScheme.== infix(_:_:)(v32, v30);
  v33 = *(void (**)(char *, uint64_t))(v27 + 8);
  v34 = (uint64_t)v21;
  v33(v30, v26);
  v35 = ((uint64_t (*)(char *, uint64_t))v33)(v32, v26);
  v36 = ButtonStyleConfiguration.label.getter(v35);
  static SymbolRenderingMode.palette.getter(v36);
  v37 = type metadata accessor for SymbolRenderingMode(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 56))(v15, 0, 1, v37);
  KeyPath = swift_getKeyPath(&unk_1E5D30);
  v39 = (uint64_t *)&v21[*(int *)(v100 + 36)];
  v40 = sub_5440(&qword_262098);
  sub_B3D0((uint64_t)v15, (uint64_t)v39 + *(int *)(v40 + 28), &qword_262078);
  *v39 = KeyPath;
  (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v21, v19, v16);
  sub_B414((uint64_t)v15, &qword_262078);
  v41 = (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v19, v16);
  v42 = static HierarchicalShapeStyle.primary.getter(v41);
  if ((v99 & 1) != 0)
  {
    v43 = static HierarchicalShapeStyle.quaternary.getter();
    v44 = v83;
    sub_B3D0((uint64_t)v21, v83, &qword_262080);
    v45 = (_DWORD *)(v44 + *(int *)(v81 + 36));
    *v45 = v42;
    v45[1] = 1055286886;
    v45[2] = v43;
    v45[3] = 1051931443;
    v46 = sub_B414((uint64_t)v21, &qword_262080);
    v47 = static Font.title2.getter(v46);
    v48 = swift_getKeyPath(&unk_1E5D60);
    v49 = v82;
    sub_B3D0(v44, v82, &qword_262088);
    v50 = v102;
    v51 = (uint64_t *)(v49 + *(int *)(v102 + 36));
    *v51 = v48;
    v51[1] = v47;
    sub_B414(v44, &qword_262088);
    v52 = &qword_262090;
    v53 = v84;
    sub_167A4(v49, v84, &qword_262090);
    v54 = v104;
    sub_B3D0(v53, v104, &qword_262090);
    swift_storeEnumTagMultiPayload(v54, v103, 0);
    v55 = sub_7FFD0(&qword_2620A8, &qword_262090, (void (*)(void))sub_7FE80);
    v56 = sub_7FFD0(&qword_2620D8, &qword_262068, (void (*)(void))sub_80054);
    v57 = v105;
    v58 = v54;
    v59 = v50;
  }
  else
  {
    v61 = v87;
    v60 = v88;
    v62 = v89;
    (*(void (**)(char *, _QWORD, uint64_t))(v88 + 104))(v87, enum case for BlendMode.lighten(_:), v89);
    v63 = v91;
    (*(void (**)(char *, char *, uint64_t))(v60 + 16))(&v91[*(int *)(v85 + 36)], v61, v62);
    *v63 = v42;
    v63[1] = 1061997773;
    v64 = (*(uint64_t (**)(char *, uint64_t))(v60 + 8))(v61, v62);
    v65 = v93;
    static Material.ultraThin.getter(v64);
    v67 = v95;
    v66 = v96;
    v68 = (uint64_t)v97;
    (*(void (**)(char *, char *, uint64_t))(v95 + 16))(v97, v65, v96);
    *(_DWORD *)(v68 + *(int *)(v90 + 36)) = 1058642330;
    (*(void (**)(char *, uint64_t))(v67 + 8))(v65, v66);
    v69 = (uint64_t)v94;
    v70 = (uint64_t)&v94[*(int *)(v86 + 36)];
    sub_B3D0((uint64_t)v63, v70, &qword_262058);
    v71 = sub_5440(&qword_2620A0);
    sub_B3D0(v68, v70 + *(int *)(v71 + 52), &qword_262050);
    sub_B3D0(v34, v69, &qword_262080);
    sub_B414(v68, &qword_262050);
    sub_B414((uint64_t)v63, &qword_262058);
    v72 = sub_B414(v34, &qword_262080);
    v73 = static Font.title2.getter(v72);
    v74 = swift_getKeyPath(&unk_1E5D60);
    v75 = v92;
    sub_B3D0(v69, v92, &qword_262060);
    v76 = v105;
    v77 = (uint64_t *)(v75 + *(int *)(v105 + 36));
    *v77 = v74;
    v77[1] = v73;
    sub_B414(v69, &qword_262060);
    v52 = &qword_262068;
    v53 = v98;
    sub_167A4(v75, v98, &qword_262068);
    v78 = v104;
    sub_B3D0(v53, v104, &qword_262068);
    swift_storeEnumTagMultiPayload(v78, v103, 1);
    v55 = sub_7FFD0(&qword_2620A8, &qword_262090, (void (*)(void))sub_7FE80);
    v56 = sub_7FFD0(&qword_2620D8, &qword_262068, (void (*)(void))sub_80054);
    v58 = v78;
    v59 = v102;
    v57 = v76;
  }
  _ConditionalContent<>.init(storage:)(v58, v59, v57, v55, v56);
  return sub_B414(v53, v52);
}

uint64_t sub_7FD3C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.font.getter();
  *a1 = result;
  return result;
}

uint64_t sub_7FD64(_QWORD *a1)
{
  uint64_t v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.font.setter(v1);
}

uint64_t sub_7FD8C()
{
  return EnvironmentValues.symbolRenderingMode.getter();
}

uint64_t sub_7FDAC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v6;

  v2 = sub_5440(&qword_262078);
  __chkstk_darwin(v2);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_B3D0(a1, (uint64_t)v4, &qword_262078);
  return EnvironmentValues.symbolRenderingMode.setter(v4);
}

uint64_t sub_7FE30@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.font.getter();
  *a1 = result;
  return result;
}

uint64_t sub_7FE58(_QWORD *a1)
{
  uint64_t v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.font.setter(v1);
}

unint64_t sub_7FE80()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2620B0;
  if (!qword_2620B0)
  {
    v1 = sub_7EF8(&qword_262088);
    sub_7FF04();
    sub_7FD8(&qword_2620C8, &qword_2620D0, (uint64_t)&protocol conformance descriptor for _ForegroundStyleModifier2<A, B>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_2620B0);
  }
  return result;
}

unint64_t sub_7FF04()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2620B8;
  if (!qword_2620B8)
  {
    v1 = sub_7EF8(&qword_262080);
    sub_7FF88();
    sub_7FD8(&qword_2620C0, &qword_262098, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_2620B8);
  }
  return result;
}

unint64_t sub_7FF88()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25FD80;
  if (!qword_25FD80)
  {
    v1 = type metadata accessor for ButtonStyleConfiguration.Label(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for ButtonStyleConfiguration.Label, v1);
    atomic_store(result, (unint64_t *)&qword_25FD80);
  }
  return result;
}

uint64_t sub_7FFD0(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_7EF8(a2);
    a3();
    sub_7FD8((unint64_t *)&qword_2600A8, &qword_2600B0, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v6);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_80054()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2620E0;
  if (!qword_2620E0)
  {
    v1 = sub_7EF8(&qword_262060);
    sub_7FF04();
    sub_7FD8(&qword_2620E8, &qword_2620A0, (uint64_t)&protocol conformance descriptor for _ForegroundStyleModifier2<A, B>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_2620E0);
  }
  return result;
}

uint64_t sub_800D8(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &opaque type descriptor for <<opaque return type of ToolbarButtonStyle.makeBody(configuration:)>>, 1);
}

uint64_t *initializeBufferWithCopyOfBuffer for ToolbarButtonStyle(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = sub_5440(&qword_25E948);
  v5 = *(_DWORD *)(*(_QWORD *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v11);
  }
  else
  {
    v6 = v4;
    if (swift_getEnumCaseMultiPayload(a2, v4) == 1)
    {
      v7 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = v6;
      v10 = 1;
    }
    else
    {
      v12 = *a2;
      *a1 = *a2;
      swift_retain(v12);
      v8 = a1;
      v9 = v6;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
  }
  return a1;
}

double destroy for ToolbarButtonStyle(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  double result;

  v2 = sub_5440(&qword_25E948);
  if (swift_getEnumCaseMultiPayload(a1, v2) == 1)
  {
    v3 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  }
  else
  {
    *(_QWORD *)&result = swift_release(*a1).n128_u64[0];
  }
  return result;
}

uint64_t *initializeWithCopy for ToolbarButtonStyle(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = sub_5440(&qword_25E948);
  if (swift_getEnumCaseMultiPayload(a2, v4) == 1)
  {
    v5 = type metadata accessor for ColorScheme(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a1, a2, v5);
    v6 = a1;
    v7 = v4;
    v8 = 1;
  }
  else
  {
    v9 = *a2;
    *a1 = *a2;
    swift_retain(v9);
    v6 = a1;
    v7 = v4;
    v8 = 0;
  }
  swift_storeEnumTagMultiPayload(v6, v7, v8);
  return a1;
}

uint64_t *assignWithCopy for ToolbarButtonStyle(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (a1 != a2)
  {
    sub_B414((uint64_t)a1, &qword_25E948);
    v4 = sub_5440(&qword_25E948);
    if (swift_getEnumCaseMultiPayload(a2, v4) == 1)
    {
      v5 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a1, a2, v5);
      v6 = a1;
      v7 = v4;
      v8 = 1;
    }
    else
    {
      v9 = *a2;
      *a1 = *a2;
      swift_retain(v9);
      v6 = a1;
      v7 = v4;
      v8 = 0;
    }
    swift_storeEnumTagMultiPayload(v6, v7, v8);
  }
  return a1;
}

void *initializeWithTake for ToolbarButtonStyle(void *a1, const void *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = sub_5440(&qword_25E948);
  if (swift_getEnumCaseMultiPayload(a2, v4) == 1)
  {
    v5 = type metadata accessor for ColorScheme(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a1, a2, v5);
    swift_storeEnumTagMultiPayload(a1, v4, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  }
  return a1;
}

void *assignWithTake for ToolbarButtonStyle(void *a1, const void *a2)
{
  uint64_t v4;
  uint64_t v5;

  if (a1 != a2)
  {
    sub_B414((uint64_t)a1, &qword_25E948);
    v4 = sub_5440(&qword_25E948);
    if (swift_getEnumCaseMultiPayload(a2, v4) == 1)
    {
      v5 = type metadata accessor for ColorScheme(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a1, a2, v5);
      swift_storeEnumTagMultiPayload(a1, v4, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for ToolbarButtonStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_804B8);
}

uint64_t sub_804B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_5440(&qword_25EAE8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for ToolbarButtonStyle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_80504);
}

uint64_t sub_80504(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_5440(&qword_25EAE8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for ToolbarButtonStyle(uint64_t a1)
{
  uint64_t result;

  result = qword_262148;
  if (!qword_262148)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ToolbarButtonStyle);
  return result;
}

void sub_80584(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  sub_40964(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(v2 - 8) + 64;
    swift_initStructMetadata(a1, 256, 1, &v4, a1 + 16);
  }
}

unint64_t sub_805F0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_262180;
  if (!qword_262180)
  {
    v1 = sub_7EF8(&qword_262188);
    sub_7FFD0(&qword_2620A8, &qword_262090, (void (*)(void))sub_7FE80);
    sub_7FFD0(&qword_2620D8, &qword_262068, (void (*)(void))sub_80054);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_262180);
  }
  return result;
}

uint64_t sub_8068C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v12 = a6 + *(int *)(sub_5440(qword_2621C8) + 48);
  sub_21C88(a1, a6, type metadata accessor for ButtonViewModel.Content);
  sub_21C88(a2, v12, type metadata accessor for ButtonViewModel.ActionKind);
  v14 = type metadata accessor for ModalActionSheet.Buttons(0, a4, a5, v13);
  return sub_167A4(a3, a6 + *(int *)(v14 + 36), &qword_262190);
}

uint64_t ModalActionSheet.init(buttons:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  _QWORD *v19;

  v12 = type metadata accessor for ModalActionSheet.Buttons(0, a4, a5, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(a6, 1, 1, v12);
  v14 = type metadata accessor for ModalActionSheet(0, a4, a5, v13);
  v15 = (_QWORD *)(a6 + *(int *)(v14 + 40));
  *v15 = swift_getKeyPath(&unk_1E5E50);
  v16 = sub_5440(&qword_25F548);
  swift_storeEnumTagMultiPayload(v15, v16, 0);
  v17 = type metadata accessor for Optional(0, v12);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 40))(a6, a1, v17);
  v19 = (_QWORD *)(a6 + *(int *)(v14 + 36));
  *v19 = a2;
  v19[1] = a3;
  return result;
}

uint64_t type metadata accessor for ModalActionSheet.Buttons(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10E40(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ModalActionSheet.Buttons);
}

uint64_t type metadata accessor for ModalActionSheet(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10E40(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ModalActionSheet);
}

uint64_t ModalActionSheet.init(buttonContent:buttonAction:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v27 = a3;
  v28 = a4;
  v12 = sub_5440(&qword_262190);
  __chkstk_darwin(v12);
  v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for ModalActionSheet.Buttons(0, a5, a6, v15);
  v17 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56);
  v17(a7, 1, 1, v16);
  v19 = type metadata accessor for ModalActionSheet(0, a5, a6, v18);
  v20 = (_QWORD *)(a7 + *(int *)(v19 + 40));
  *v20 = swift_getKeyPath(&unk_1E5E50);
  v21 = sub_5440(&qword_25F548);
  swift_storeEnumTagMultiPayload(v20, v21, 0);
  v22 = type metadata accessor for Optional(0, v16);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 8))(a7, v22);
  v23 = sub_5440(&qword_262198);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v14, 1, 1, v23);
  sub_8068C(a1, a2, (uint64_t)v14, a5, a6, a7);
  result = ((uint64_t (*)(uint64_t, _QWORD, uint64_t, uint64_t))v17)(a7, 0, 1, v16);
  v25 = (_QWORD *)(a7 + *(int *)(v19 + 36));
  v26 = v28;
  *v25 = v27;
  v25[1] = v26;
  return result;
}

uint64_t ModalActionSheet.init<A>(buttonTitle:buttonActionModel:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, char *a9@<X8>)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  void (*v24)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t result;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  void (*v44)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;

  v49 = a8;
  v50 = a2;
  v52 = a3;
  v53 = a4;
  v46 = a1;
  v13 = sub_5440(&qword_262190);
  __chkstk_darwin(v13);
  v51 = (char *)&v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = type metadata accessor for ButtonViewModel.ActionKind(0);
  __chkstk_darwin(v48);
  v16 = (uint64_t *)((char *)&v40 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  v17 = type metadata accessor for ButtonViewModel.Content(0);
  __chkstk_darwin(v17);
  v19 = (char *)&v40 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = a5;
  v42 = a7;
  v21 = type metadata accessor for ModalActionSheet.Buttons(255, a5, a7, v20);
  v47 = type metadata accessor for Optional(0, v21);
  v45 = *(_QWORD *)(v47 - 8);
  __chkstk_darwin(v47);
  v23 = (char *)&v40 - v22;
  v24 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56);
  v43 = a9;
  v44 = v24;
  v24(a9, 1, 1, v21);
  v26 = type metadata accessor for ModalActionSheet(0, a5, a7, v25);
  v27 = &a9[*(int *)(v26 + 40)];
  *(_QWORD *)v27 = swift_getKeyPath(&unk_1E5E50);
  v28 = sub_5440(&qword_25F548);
  swift_storeEnumTagMultiPayload(v27, v28, 0);
  v29 = type metadata accessor for LocalizerRequest(0);
  v30 = *(_QWORD *)(v29 - 8);
  v31 = v46;
  (*(void (**)(char *, uint64_t, uint64_t))(v30 + 16))(v19, v46, v29);
  swift_storeEnumTagMultiPayload(v19, v17, 0);
  v32 = v49;
  v16[3] = a6;
  v16[4] = v32;
  v33 = sub_C404(v16);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(a6 - 8) + 32))(v33, v50, a6);
  (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v31, v29);
  swift_storeEnumTagMultiPayload(v16, v48, 0);
  v34 = sub_5440(&qword_262198);
  v35 = (uint64_t)v51;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v51, 1, 1, v34);
  sub_8068C((uint64_t)v19, (uint64_t)v16, v35, v41, v42, (uint64_t)v23);
  v44(v23, 0, 1, v21);
  v36 = v43;
  result = (*(uint64_t (**)(char *, char *, uint64_t))(v45 + 40))(v43, v23, v47);
  v38 = &v36[*(int *)(v26 + 36)];
  v39 = v53;
  *(_QWORD *)v38 = v52;
  *((_QWORD *)v38 + 1) = v39;
  return result;
}

uint64_t ModalActionSheet.init<A, B>(firstButtonTitle:firstButtonActionModel:secondButtonTitle:secondButtonActionModel:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  void (*v46)(uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t result;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void (*v61)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;

  v71 = a6;
  v72 = a8;
  v69 = a4;
  v70 = a5;
  v63 = a2;
  v53 = a1;
  v67 = a3;
  v68 = a13;
  v59 = a12;
  v66 = a10;
  v16 = sub_5440(&qword_262190);
  __chkstk_darwin(v16);
  v18 = (char *)&v52 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for ButtonViewModel.ActionKind(0);
  __chkstk_darwin(v19);
  v21 = (uint64_t *)((char *)&v52 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  v22 = type metadata accessor for ButtonViewModel.Content(0);
  __chkstk_darwin(v22);
  v24 = (char *)&v52 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = a11;
  v56 = a7;
  v26 = type metadata accessor for ModalActionSheet.Buttons(255, a7, a11, v25);
  v27 = type metadata accessor for Optional(0, v26);
  v64 = *(_QWORD *)(v27 - 8);
  v65 = v27;
  __chkstk_darwin(v27);
  v57 = a9;
  v58 = (uint64_t)&v52 - v28;
  v61 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56);
  v62 = v26;
  v61(a9, 1, 1, v26);
  v60 = type metadata accessor for ModalActionSheet(0, a7, a11, v29);
  v30 = (_QWORD *)(a9 + *(int *)(v60 + 40));
  *v30 = swift_getKeyPath(&unk_1E5E50);
  v31 = sub_5440(&qword_25F548);
  swift_storeEnumTagMultiPayload(v30, v31, 0);
  v32 = type metadata accessor for LocalizerRequest(0);
  v33 = *(_QWORD *)(v32 - 8);
  v34 = *(void (**)(char *, uint64_t, uint64_t))(v33 + 16);
  v54 = v24;
  v34(v24, a1, v32);
  swift_storeEnumTagMultiPayload(v24, v22, 0);
  v35 = v72;
  v36 = v59;
  v21[3] = v72;
  v21[4] = v36;
  v37 = sub_C404(v21);
  v38 = *(_QWORD *)(v35 - 8);
  v39 = v63;
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(v38 + 16))(v37, v63, v35);
  swift_storeEnumTagMultiPayload(v21, v19, 0);
  v40 = sub_5440(&qword_262198);
  v41 = &v18[*(int *)(v40 + 48)];
  v42 = v67;
  v34(v18, v67, v32);
  v43 = v66;
  v44 = v68;
  *((_QWORD *)v41 + 3) = v66;
  *((_QWORD *)v41 + 4) = v44;
  v45 = sub_C404(v41);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 32))(v45, v69, v43);
  v46 = *(void (**)(uint64_t, uint64_t))(v33 + 8);
  v46(v42, v32);
  (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v39, v72);
  v46(v53, v32);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 56))(v18, 0, 1, v40);
  v47 = v58;
  sub_8068C((uint64_t)v54, (uint64_t)v21, (uint64_t)v18, v56, v55, v58);
  v61(v47, 0, 1, v62);
  v48 = v57;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v64 + 40))(v57, v47, v65);
  v50 = (_QWORD *)(v48 + *(int *)(v60 + 36));
  v51 = v71;
  *v50 = v70;
  v50[1] = v51;
  return result;
}

uint64_t ModalActionSheet.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t TupleTypeMetadata3;
  uint64_t v11;
  uint64_t WitnessTable;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(char *, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _BYTE v47[16];
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;

  v46 = a2;
  v4 = type metadata accessor for SizeConstants.Spacing(0);
  __chkstk_darwin(v4);
  v45 = (uint64_t)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for SizeConstants(0);
  __chkstk_darwin(v6);
  v42 = (uint64_t)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(a1 + 16);
  v9 = sub_7EF8(&qword_2621A0);
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3(255, v8, v9, &type metadata for Spacer, 0, 0);
  v11 = type metadata accessor for TupleView(255, TupleTypeMetadata3);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v11);
  v13 = type metadata accessor for VStack(0, v11, WitnessTable);
  v40 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v15 = (char *)&v39 - v14;
  v16 = type metadata accessor for ModifiedContent(0, v13, &type metadata for _PaddingLayout);
  v41 = *(_QWORD *)(v16 - 8);
  v17 = __chkstk_darwin(v16);
  v19 = (char *)&v39 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __chkstk_darwin(v17);
  v22 = (char *)&v39 - v21;
  v43 = a1;
  v44 = v2;
  v23 = *(_QWORD *)(a1 + 24);
  v48 = v8;
  v49 = v23;
  v50 = v2;
  v24 = static HorizontalAlignment.center.getter(v20);
  v25 = VStack.init(alignment:spacing:content:)(v24, 0, 0, sub_82F48, v47, v11, WitnessTable);
  v26 = static Edge.Set.leading.getter(v25);
  v27 = static Edge.Set.trailing.getter();
  v28 = v27;
  v29 = static Edge.Set.top.getter(v27);
  v30 = Edge.Set.init(rawValue:)(0);
  v31 = Edge.Set.init(rawValue:)(v30);
  if (Edge.Set.init(rawValue:)(v31 & v26) != v26)
    v30 = Edge.Set.init(rawValue:)(v30 | v26);
  v32 = Edge.Set.init(rawValue:)(v30);
  if (Edge.Set.init(rawValue:)(v32 & v28) != v28)
    v30 = Edge.Set.init(rawValue:)(v30 | v28);
  v33 = Edge.Set.init(rawValue:)(v30);
  if (Edge.Set.init(rawValue:)(v33 & v29) != v29)
    v30 = Edge.Set.init(rawValue:)(v30 | v29);
  v34 = v42;
  sub_3168C(v42);
  v35 = v45;
  sub_1E428(v34, v45, type metadata accessor for SizeConstants.Environment);
  sub_224DC(v34, type metadata accessor for SizeConstants);
  sub_224DC(v35, type metadata accessor for SizeConstants.Spacing);
  v36 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v13);
  View.padding(_:_:)(v30, 0x4040000000000000, 0, v13, v36);
  (*(void (**)(char *, uint64_t))(v40 + 8))(v15, v13);
  v51 = v36;
  v52 = &protocol witness table for _PaddingLayout;
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v16);
  sub_10F80((uint64_t)v19, v16, (uint64_t)v22);
  v37 = *(void (**)(char *, uint64_t))(v41 + 8);
  v37(v19, v16);
  sub_C5C0((uint64_t)v22, v16, v46);
  return ((uint64_t (*)(char *, uint64_t))v37)(v22, v16);
}

uint64_t sub_81370@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t (*v48)(uint64_t, uint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(uint64_t, char *, uint64_t);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(char *, uint64_t, uint64_t);
  char *v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  int *v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _OWORD *v84;
  __int128 v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  __int128 *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  char *v113;
  uint64_t (*v114)(uint64_t, uint64_t);
  uint64_t v116;
  char *v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t (*v145)(uint64_t, uint64_t);
  char *v146;
  uint64_t v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  void *v158;
  _QWORD v159[3];
  uint64_t v160;
  char v161;
  uint64_t v162[3];
  _OWORD v163[3];

  v154 = a4;
  v140 = sub_5440(&qword_2622D8);
  v7 = __chkstk_darwin(v140);
  v121 = (uint64_t *)((char *)&v116 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v7);
  v124 = (uint64_t)&v116 - v9;
  v138 = sub_5440(&qword_2622E0);
  __chkstk_darwin(v138);
  v139 = (uint64_t)&v116 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v129 = type metadata accessor for Font.TextStyle(0);
  v120 = *(_QWORD *)(v129 - 8);
  __chkstk_darwin(v129);
  v128 = (char *)&v116 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v119 = sub_5440(qword_2621C8);
  v12 = __chkstk_darwin(v119);
  v135 = (uint64_t)&v116 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v123 = (uint64_t)&v116 - v14;
  v122 = type metadata accessor for ButtonViewModel(0);
  __chkstk_darwin(v122);
  v126 = (char *)&v116 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v125 = type metadata accessor for ButtonView(0);
  __chkstk_darwin(v125);
  v130 = (char *)&v116 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v137 = sub_5440(&qword_2622E8);
  v17 = __chkstk_darwin(v137);
  v127 = (uint64_t)&v116 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v131 = (uint64_t)&v116 - v19;
  v20 = sub_5440(&qword_262190);
  __chkstk_darwin(v20);
  v134 = (uint64_t)&v116 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v133 = sub_5440(&qword_262198);
  v132 = *(_QWORD *)(v133 - 8);
  v22 = __chkstk_darwin(v133);
  v117 = (char *)&v116 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v118 = (char *)&v116 - v24;
  v143 = sub_5440(&qword_2622F0);
  v149 = *(_QWORD *)(v143 - 8);
  __chkstk_darwin(v143);
  v136 = (char *)&v116 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = type metadata accessor for ModalActionSheet.Buttons(255, a2, a3, v26);
  v142 = type metadata accessor for Optional(0, v27);
  v141 = *(_QWORD *)(v142 - 8);
  v28 = __chkstk_darwin(v142);
  v30 = (char *)&v116 - v29;
  v31 = *(_QWORD *)(v27 - 8);
  __chkstk_darwin(v28);
  v155 = (uint64_t)&v116 - v32;
  v147 = sub_5440(&qword_2621A0);
  v33 = __chkstk_darwin(v147);
  v152 = (uint64_t)&v116 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = __chkstk_darwin(v33);
  v150 = (uint64_t)&v116 - v36;
  v37 = *(_QWORD *)(a2 - 8);
  v38 = __chkstk_darwin(v35);
  v40 = (char *)&v116 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v38);
  v42 = (char *)&v116 - v41;
  v44 = type metadata accessor for ModalActionSheet(0, a2, a3, v43);
  (*(void (**)(void))(a1 + *(int *)(v44 + 36)))();
  v45 = v31;
  v46 = v27;
  v47 = v141;
  v146 = v42;
  v153 = a3;
  sub_10F80((uint64_t)v40, a2, (uint64_t)v42);
  v144 = v37;
  v48 = *(uint64_t (**)(uint64_t, uint64_t))(v37 + 8);
  v148 = v40;
  v49 = v142;
  v151 = a2;
  v145 = v48;
  v48((uint64_t)v40, a2);
  (*(void (**)(char *, uint64_t, uint64_t))(v47 + 16))(v30, a1, v49);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v45 + 48))(v30, 1, v46) == 1)
  {
    (*(void (**)(char *, uint64_t))(v47 + 8))(v30, v49);
    v50 = v150;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v149 + 56))(v150, 1, 1, v143);
    v51 = v153;
    v52 = v151;
  }
  else
  {
    v142 = v45;
    v53 = *(void (**)(uint64_t, char *, uint64_t))(v45 + 32);
    v54 = v155;
    v53(v155, v30, v46);
    v55 = v134;
    sub_B3D0(v54 + *(int *)(v46 + 36), v134, &qword_262190);
    v56 = v133;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v132 + 48))(v55, 1, v133) == 1)
    {
      sub_B414(v55, &qword_262190);
      v57 = v119;
      v58 = *(int *)(v119 + 48);
      v59 = v155;
      v60 = v155 + v58;
      v61 = v123;
      v62 = v123 + v58;
      v134 = v123 + v58;
      sub_1E428(v155, v123, type metadata accessor for ButtonViewModel.Content);
      sub_1E428(v60, v62, type metadata accessor for ButtonViewModel.ActionKind);
      v63 = v135 + *(int *)(v57 + 48);
      v133 = v63;
      sub_1E428(v59, v135, type metadata accessor for ButtonViewModel.Content);
      sub_1E428(v60, v63, type metadata accessor for ButtonViewModel.ActionKind);
      *(_QWORD *)&v163[0] = 0x403C000000000000;
      v64 = enum case for Font.TextStyle.subheadline(_:);
      v65 = *(void (**)(char *, _QWORD, uint64_t))(v120 + 104);
      v141 = v46;
      v66 = v128;
      v67 = v129;
      v65(v128, enum case for Font.TextStyle.subheadline(_:), v129);
      v68 = sub_3CB54();
      v69 = (uint64_t)v126;
      ScaledMetric.init(wrappedValue:relativeTo:)(v163, v66, &type metadata for Double, v68);
      v70 = (int *)v122;
      *(_QWORD *)&v163[0] = 0x4008000000000000;
      v65(v66, v64, v67);
      ScaledMetric.init(wrappedValue:relativeTo:)(v163, v66, &type metadata for Double, v68);
      v71 = (_QWORD *)(v69 + v70[6]);
      *v71 = swift_getKeyPath(&unk_1E5F10);
      v72 = sub_5440(&qword_25F1E8);
      swift_storeEnumTagMultiPayload(v71, v72, 0);
      v73 = v69 + v70[14];
      v74 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v74 - 8) + 56))(v73, 1, 1, v74);
      *(_BYTE *)(v69 + v70[7]) = 1;
      *(_BYTE *)(v69 + v70[8]) = 1;
      *(_BYTE *)(v69 + v70[9]) = 0;
      v75 = (_QWORD *)(v69 + v70[10]);
      *v75 = 1;
      v75[1] = 0;
      v75[2] = 0;
      v75[3] = 0;
      sub_21C88(v61, v69 + v70[11], type metadata accessor for ButtonViewModel.Content);
      *(_BYTE *)(v69 + v70[12]) = 1;
      sub_21C88(v133, v69 + v70[13], type metadata accessor for ButtonViewModel.ActionKind);
      sub_224DC(v135, type metadata accessor for ButtonViewModel.Content);
      sub_224DC(v134, type metadata accessor for ButtonViewModel.ActionKind);
      *(_QWORD *)&v163[0] = 0x4020000000000000;
      v65(v66, v64, v67);
      v76 = (uint64_t)v130;
      ScaledMetric.init(wrappedValue:relativeTo:)(v163, v66, &type metadata for Double, v68);
      v77 = v125;
      *(_QWORD *)&v163[0] = 0x3FF8000000000000;
      v65(v66, v64, v67);
      ScaledMetric.init(wrappedValue:relativeTo:)(v163, v66, &type metadata for Double, v68);
      v78 = (_QWORD *)(v76 + *(int *)(v77 + 24));
      *v78 = swift_getKeyPath(&unk_1E5F38);
      v79 = sub_5440(&qword_25FB20);
      swift_storeEnumTagMultiPayload(v78, v79, 0);
      sub_21C88(v69, v76 + *(int *)(v77 + 28), type metadata accessor for ButtonViewModel);
      v80 = _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0();
      _FrameLayout.init(width:height:alignment:)(v163, 0, 1, 0, 1, v80, v81);
      v82 = v127;
      sub_1E428(v76, v127, type metadata accessor for ButtonView);
      v83 = v137;
      v84 = (_OWORD *)(v82 + *(int *)(v137 + 36));
      v85 = v163[1];
      *v84 = v163[0];
      v84[1] = v85;
      v84[2] = v163[2];
      sub_224DC(v76, type metadata accessor for ButtonView);
      v86 = v82;
      v46 = v141;
      v87 = v131;
      sub_167A4(v86, v131, &qword_2622E8);
      v88 = v139;
      sub_B3D0(v87, v139, &qword_2622E8);
      swift_storeEnumTagMultiPayload(v88, v138, 1);
      v89 = sub_7FD8(&qword_262308, &qword_2622D8, (uint64_t)&protocol conformance descriptor for VStack<A>);
      v90 = sub_86D9C();
      v91 = (uint64_t)v136;
      _ConditionalContent<>.init(storage:)(v88, v140, v83, v89, v90);
      sub_B414(v87, &qword_2622E8);
      v51 = v153;
      v92 = v143;
      v52 = v151;
    }
    else
    {
      v93 = *(int *)(v56 + 48);
      v94 = (uint64_t)v118;
      v95 = (uint64_t)&v118[v93];
      v96 = (__int128 *)(v55 + v93);
      v97 = type metadata accessor for LocalizerRequest(0);
      v98 = *(_QWORD *)(v97 - 8);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v98 + 32))(v94, v55, v97);
      sub_AC68(v96, v95);
      v99 = (uint64_t)v117;
      v100 = (uint64_t)&v117[*(int *)(v56 + 48)];
      (*(void (**)(char *, uint64_t, uint64_t))(v98 + 16))(v117, v94, v97);
      v101 = sub_BD00(v95, v100);
      v102 = static HorizontalAlignment.center.getter(v101);
      v103 = (uint64_t)v121;
      *v121 = v102;
      *(_QWORD *)(v103 + 8) = 0x4014000000000000;
      *(_BYTE *)(v103 + 16) = 0;
      v104 = sub_5440(&qword_262318);
      v52 = v151;
      v51 = v153;
      sub_820D8(v155, v99, v103 + *(int *)(v104 + 44));
      sub_B414(v99, &qword_262198);
      v105 = v124;
      sub_167A4(v103, v124, &qword_2622D8);
      v106 = v139;
      sub_B3D0(v105, v139, &qword_2622D8);
      swift_storeEnumTagMultiPayload(v106, v138, 0);
      v107 = sub_7FD8(&qword_262308, &qword_2622D8, (uint64_t)&protocol conformance descriptor for VStack<A>);
      v108 = sub_86D9C();
      v91 = (uint64_t)v136;
      _ConditionalContent<>.init(storage:)(v106, v140, v137, v107, v108);
      sub_B414(v105, &qword_2622D8);
      sub_B414(v94, &qword_262198);
      v92 = v143;
    }
    v109 = v149;
    v50 = v150;
    sub_167A4(v91, v150, &qword_2622F0);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v109 + 56))(v50, 0, 1, v92);
    (*(void (**)(uint64_t, uint64_t))(v142 + 8))(v155, v46);
  }
  v110 = (uint64_t)v148;
  v111 = v146;
  (*(void (**)(char *, char *, uint64_t))(v144 + 16))(v148, v146, v52);
  v162[0] = v110;
  v112 = v152;
  sub_B3D0(v50, v152, &qword_2621A0);
  v160 = 0;
  v161 = 1;
  v162[1] = v112;
  v162[2] = (uint64_t)&v160;
  v159[0] = v52;
  v159[1] = v147;
  v159[2] = &type metadata for Spacer;
  v156 = v51;
  v157 = sub_86CB4();
  v158 = &protocol witness table for Spacer;
  sub_DAC78(v162, 3uLL, (uint64_t)v159);
  sub_B414(v50, &qword_2621A0);
  v113 = v111;
  v114 = v145;
  v145((uint64_t)v113, v52);
  sub_B414(v112, &qword_2621A0);
  return v114(v110, v52);
}

uint64_t sub_820D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  int *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, uint64_t, uint64_t);
  uint64_t v39;
  unint64_t v40;
  char *v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _OWORD *v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  int *v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t (**v75)();
  int *v76;
  _BYTE *v77;
  char *v78;
  _QWORD *v79;
  _QWORD *v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  _BYTE *v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _OWORD *v94;
  __int128 v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v101;
  char *v102;
  char *v103;
  char *v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  char *v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  char *v121;
  uint64_t v122;
  char *v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  _OWORD v132[3];
  __int128 v133;
  __int128 v134;
  __int128 v135;

  v119 = a2;
  v129 = a3;
  v122 = type metadata accessor for BooksBorderlessButtonStyle(0);
  __chkstk_darwin(v122);
  v121 = (char *)&v101 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DataStackID(0);
  __chkstk_darwin(v5);
  v120 = (char *)&v101 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v113 = sub_5440(&qword_262198);
  v117 = *(_QWORD *)(v113 - 8);
  v118 = *(_QWORD *)(v117 + 64);
  __chkstk_darwin(v113);
  v114 = (char *)&v101 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_5440(qword_25E3E8);
  __chkstk_darwin(v8);
  v112 = (char *)&v101 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v116 = sub_5440(&qword_262320);
  __chkstk_darwin(v116);
  v115 = (char *)&v101 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_5440(&qword_262328);
  v127 = *(_QWORD *)(v11 - 8);
  v128 = v11;
  __chkstk_darwin(v11);
  v123 = (char *)&v101 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v126 = sub_5440(&qword_262330);
  v13 = __chkstk_darwin(v126);
  v124 = (char *)&v101 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v125 = (uint64_t)&v101 - v15;
  v130 = type metadata accessor for Font.TextStyle(0);
  v111 = *(_QWORD *)(v130 - 8);
  __chkstk_darwin(v130);
  v17 = (char *)&v101 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_5440(qword_2621C8);
  v19 = __chkstk_darwin(v18);
  v21 = (char *)&v101 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v23 = (char *)&v101 - v22;
  v24 = (int *)type metadata accessor for ButtonViewModel(0);
  __chkstk_darwin(v24);
  v26 = (char *)&v101 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v108 = type metadata accessor for ButtonView(0);
  __chkstk_darwin(v108);
  v28 = (char *)&v101 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v110 = sub_5440(&qword_2622E8);
  v29 = __chkstk_darwin(v110);
  v109 = (uint64_t)&v101 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v29);
  v131 = (uint64_t)&v101 - v31;
  v32 = *(int *)(v18 + 48);
  v103 = v23;
  v33 = (uint64_t)&v23[v32];
  v105 = &v23[v32];
  v34 = a1 + v32;
  sub_1E428(a1, (uint64_t)v23, type metadata accessor for ButtonViewModel.Content);
  sub_1E428(v34, v33, type metadata accessor for ButtonViewModel.ActionKind);
  v35 = *(int *)(v18 + 48);
  v104 = v21;
  v36 = (uint64_t)&v21[v35];
  v102 = &v21[v35];
  sub_1E428(a1, (uint64_t)v21, type metadata accessor for ButtonViewModel.Content);
  sub_1E428(v34, v36, type metadata accessor for ButtonViewModel.ActionKind);
  *(_QWORD *)&v133 = 0x403C000000000000;
  v37 = enum case for Font.TextStyle.subheadline(_:);
  v38 = *(void (**)(char *, uint64_t, uint64_t))(v111 + 104);
  v39 = v130;
  v38(v17, enum case for Font.TextStyle.subheadline(_:), v130);
  v40 = sub_3CB54();
  ScaledMetric.init(wrappedValue:relativeTo:)(&v133, v17, &type metadata for Double, v40);
  *(_QWORD *)&v133 = 0x4008000000000000;
  v38(v17, v37, v39);
  ScaledMetric.init(wrappedValue:relativeTo:)(&v133, v17, &type metadata for Double, v40);
  v41 = &v26[v24[6]];
  *(_QWORD *)v41 = swift_getKeyPath(&unk_1E5F10);
  v111 = sub_5440(&qword_25F1E8);
  swift_storeEnumTagMultiPayload(v41, v111, 0);
  v42 = &v26[v24[14]];
  v106 = type metadata accessor for LocalizerRequest(0);
  v107 = *(_QWORD *)(v106 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v107 + 56))(v42, 1, 1, v106);
  v26[v24[7]] = 1;
  v26[v24[8]] = 1;
  v26[v24[9]] = 0;
  v43 = &v26[v24[10]];
  *(_OWORD *)v43 = 0u;
  *((_OWORD *)v43 + 1) = 0u;
  sub_21C88((uint64_t)v103, (uint64_t)&v26[v24[11]], type metadata accessor for ButtonViewModel.Content);
  v26[v24[12]] = 1;
  sub_21C88((uint64_t)v102, (uint64_t)&v26[v24[13]], type metadata accessor for ButtonViewModel.ActionKind);
  sub_224DC((uint64_t)v104, type metadata accessor for ButtonViewModel.Content);
  sub_224DC((uint64_t)v105, type metadata accessor for ButtonViewModel.ActionKind);
  *(_QWORD *)&v133 = 0x4020000000000000;
  v44 = v130;
  v38(v17, v37, v130);
  ScaledMetric.init(wrappedValue:relativeTo:)(&v133, v17, &type metadata for Double, v40);
  v45 = v108;
  *(_QWORD *)&v133 = 0x3FF8000000000000;
  v38(v17, v37, v44);
  ScaledMetric.init(wrappedValue:relativeTo:)(&v133, v17, &type metadata for Double, v40);
  v46 = &v28[*(int *)(v45 + 24)];
  *(_QWORD *)v46 = swift_getKeyPath(&unk_1E5F38);
  v47 = sub_5440(&qword_25FB20);
  swift_storeEnumTagMultiPayload(v46, v47, 0);
  sub_21C88((uint64_t)v26, (uint64_t)&v28[*(int *)(v45 + 28)], type metadata accessor for ButtonViewModel);
  v48 = _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0();
  _FrameLayout.init(width:height:alignment:)(v132, 0, 1, 0, 1, v48, v49);
  v50 = v109;
  sub_1E428((uint64_t)v28, v109, type metadata accessor for ButtonView);
  v51 = (_OWORD *)(v50 + *(int *)(v110 + 36));
  v52 = v132[1];
  *v51 = v132[0];
  v51[1] = v52;
  v51[2] = v132[2];
  sub_224DC((uint64_t)v28, type metadata accessor for ButtonView);
  sub_167A4(v50, v131, &qword_2622E8);
  v53 = type metadata accessor for ButtonRole(0);
  v54 = (uint64_t)v112;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v53 - 8) + 56))(v112, 1, 1, v53);
  v55 = v113;
  v56 = v119;
  v57 = (_QWORD *)(v119 + *(int *)(v113 + 48));
  v58 = v57[3];
  v59 = v57[4];
  v60 = sub_5480(v57, v58);
  *((_QWORD *)&v134 + 1) = v58;
  *(_QWORD *)&v135 = *(_QWORD *)(v59 + 8);
  v61 = sub_C404(&v133);
  (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v58 - 8) + 16))(v61, v60, v58);
  v62 = (uint64_t)v114;
  v63 = (uint64_t)&v114[*(int *)(v55 + 48)];
  (*(void (**)(char *, uint64_t, uint64_t))(v107 + 16))(v114, v56, v106);
  sub_BD00((uint64_t)v57, v63);
  v64 = *(unsigned __int8 *)(v117 + 80);
  v65 = (v64 + 16) & ~v64;
  v66 = swift_allocObject(&unk_24EAB8, v65 + v118, v64 | 7);
  v67 = sub_167A4(v62, v66 + v65, &qword_262198);
  v68 = v120;
  static DataStackID.additionalEventData.getter(v67);
  v69 = (uint64_t)v115;
  AppAnalyticsData.init(_:)(v68);
  v70 = (int *)v116;
  v71 = v69 + *(int *)(v116 + 36);
  *(_QWORD *)v71 = swift_getKeyPath(&unk_1E5F70);
  *(_BYTE *)(v71 + 8) = 0;
  v72 = (_QWORD *)(v69 + v70[10]);
  *v72 = swift_getKeyPath(&unk_1E5FA0);
  v73 = sub_5440(&qword_25E818);
  swift_storeEnumTagMultiPayload(v72, v73, 0);
  v74 = v69 + v70[11];
  *(_QWORD *)v74 = swift_getKeyPath(&unk_1E5FD0);
  *(_BYTE *)(v74 + 40) = 0;
  sub_167A4(v54, v69 + v70[12], qword_25E3E8);
  sub_167A4((uint64_t)&v133, v69 + v70[13], &qword_25E820);
  v75 = (uint64_t (**)())(v69 + v70[14]);
  *v75 = sub_86E30;
  v75[1] = (uint64_t (*)())v66;
  v76 = (int *)v122;
  v77 = v121;
  v78 = &v121[*(int *)(v122 + 20)];
  *(_QWORD *)v78 = swift_getKeyPath(&unk_1E5F38);
  swift_storeEnumTagMultiPayload(v78, v47, 0);
  v79 = &v77[v76[6]];
  *v79 = swift_getKeyPath(&unk_1E5F10);
  swift_storeEnumTagMultiPayload(v79, v111, 0);
  v80 = &v77[v76[7]];
  *v80 = swift_getKeyPath(&unk_1E5E50);
  v81 = sub_5440(&qword_25F548);
  swift_storeEnumTagMultiPayload(v80, v81, 0);
  v82 = &v77[v76[8]];
  *v82 = swift_getKeyPath(&unk_1E6000);
  v83 = sub_5440(&qword_25E948);
  swift_storeEnumTagMultiPayload(v82, v83, 0);
  v84 = &v77[v76[9]];
  *(_QWORD *)v84 = swift_getKeyPath(&unk_1E6030);
  v84[8] = 0;
  v85 = &v77[v76[10]];
  *v85 = swift_getKeyPath(&unk_1E6060);
  v86 = sub_5440(&qword_25F208);
  swift_storeEnumTagMultiPayload(v85, v86, 0);
  *v77 = 1;
  v87 = sub_7FD8(&qword_262338, &qword_262320, (uint64_t)&protocol conformance descriptor for BooksActionButton<A>);
  sub_6FD0(&qword_262340, type metadata accessor for BooksBorderlessButtonStyle, (uint64_t)&protocol conformance descriptor for BooksBorderlessButtonStyle);
  v88 = v123;
  View.buttonStyle<A>(_:)(v77, v70, v76, v87);
  sub_224DC((uint64_t)v77, type metadata accessor for BooksBorderlessButtonStyle);
  sub_B414(v69, &qword_262320);
  v89 = _s7BooksUI10PagedFramePAAE9alignment05SwiftB09AlignmentVvg_0();
  _FrameLayout.init(width:height:alignment:)(&v133, 0, 1, 0, 1, v89, v90);
  v92 = v127;
  v91 = v128;
  v93 = (uint64_t)v124;
  (*(void (**)(char *, char *, uint64_t))(v127 + 16))(v124, v88, v128);
  v94 = (_OWORD *)(v93 + *(int *)(v126 + 36));
  v95 = v134;
  *v94 = v133;
  v94[1] = v95;
  v94[2] = v135;
  (*(void (**)(char *, uint64_t))(v92 + 8))(v88, v91);
  v96 = v125;
  sub_167A4(v93, v125, &qword_262330);
  v97 = v131;
  sub_B3D0(v131, v50, &qword_2622E8);
  sub_B3D0(v96, v93, &qword_262330);
  v98 = v129;
  sub_B3D0(v50, v129, &qword_2622E8);
  v99 = sub_5440(&qword_262348);
  sub_B3D0(v93, v98 + *(int *)(v99 + 48), &qword_262330);
  sub_B414(v96, &qword_262330);
  sub_B414(v97, &qword_2622E8);
  sub_B414(v93, &qword_262330);
  return sub_B414(v50, &qword_2622E8);
}

uint64_t sub_82CC0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v2 = sub_5440(&qword_262198);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  v5 = *(int *)(__chkstk_darwin(v2) + 48);
  v6 = (char *)&v17 + v5 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1 + v5;
  v8 = type metadata accessor for LocalizerRequest(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))((char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v8);
  sub_BD00(v7, (uint64_t)v6);
  v9 = *(unsigned __int8 *)(v3 + 80);
  v10 = (v9 + 16) & ~v9;
  v11 = swift_allocObject(&unk_24EAE0, v10 + v4, v9 | 7);
  sub_167A4((uint64_t)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v11 + v10, &qword_262198);
  v12 = type metadata accessor for _JetLocalizeDefaultWorking(0);
  v13 = type metadata accessor for _JetLocalizeDefaultFailed(0);
  v14 = sub_6FD0(&qword_25FEE0, (uint64_t (*)(uint64_t))&type metadata accessor for _JetLocalizeDefaultWorking, (uint64_t)&protocol conformance descriptor for _JetLocalizeDefaultWorking);
  v15 = sub_6FD0(&qword_25FEE8, (uint64_t (*)(uint64_t))&type metadata accessor for _JetLocalizeDefaultFailed, (uint64_t)&protocol conformance descriptor for _JetLocalizeDefaultFailed);
  return JetLocalize.init(working:failed:content:)(&j___s18_JetEngine_SwiftUI01_A22LocalizeDefaultWorkingVACycfC, 0, sub_4ED68, 0, sub_86F2C, v11, &type metadata for Text, v12, v13, &protocol witness table for Text, v14, v15);
}

uint64_t sub_82E54@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  _BYTE v22[40];

  v6 = sub_5440(&qword_262198);
  v7 = __chkstk_darwin(v6);
  v9 = &v22[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v10 = *(int *)(v7 + 48);
  v11 = &v9[v10];
  v12 = a2 + v10;
  v13 = type metadata accessor for LocalizerRequest(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v9, a2, v13);
  sub_BD00(v12, (uint64_t)v11);
  sub_BD00(a1, (uint64_t)v22);
  v14 = Text.init(_:localizer:)(v9, v22);
  v16 = v15;
  LOBYTE(v9) = v17;
  v19 = v18;
  result = _s7BooksUI13AnyPagedFrameVwxx_0(v11);
  *(_QWORD *)a3 = v14;
  *(_QWORD *)(a3 + 8) = v16;
  *(_BYTE *)(a3 + 16) = v9 & 1;
  *(_QWORD *)(a3 + 24) = v19;
  return result;
}

uint64_t sub_82F48@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_81370(v1[4], v1[2], v1[3], a1);
}

uint64_t sub_82F54(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  return swift_getOpaqueTypeConformance2(&v3, &opaque type descriptor for <<opaque return type of ModalActionSheet.body>>, 1);
}

void sub_82F88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD v10[3];

  v5 = type metadata accessor for ModalActionSheet.Buttons(255, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  v6 = type metadata accessor for Optional(319, v5);
  if (v7 <= 0x3F)
  {
    v10[0] = *(_QWORD *)(v6 - 8) + 64;
    v10[1] = (char *)&value witness table for () + 64;
    sub_2F448(319);
    if (v9 <= 0x3F)
    {
      v10[2] = *(_QWORD *)(v8 - 8) + 64;
      swift_initStructMetadata(a1, 0, 3, v10, a1 + 32);
    }
  }
}

uint64_t *sub_83028(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  int v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  id v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  uint64_t v62;
  _WORD *v63;
  _WORD *v64;
  uint64_t v65;
  int *v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  _WORD *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;

  v6 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v6 & 0x20000) != 0)
  {
    v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain(v11);
  }
  else
  {
    v8 = type metadata accessor for ModalActionSheet.Buttons(0, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), a4);
    v9 = *(_QWORD *)(v8 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v9 + 48))(a2, 1, v8))
    {
      v10 = type metadata accessor for Optional(0, v8);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    }
    else
    {
      v12 = type metadata accessor for ButtonViewModel.Content(0);
      switch(swift_getEnumCaseMultiPayload(a2, v12))
      {
        case 0u:
          v13 = type metadata accessor for LocalizerRequest(0);
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(a1, a2, v13);
          v14 = a1;
          v15 = v12;
          v16 = 0;
          goto LABEL_13;
        case 1u:
          v17 = a2[1];
          *a1 = *a2;
          a1[1] = v17;
          swift_bridgeObjectRetain(v17);
          v14 = a1;
          v15 = v12;
          v16 = 1;
          goto LABEL_13;
        case 2u:
          v18 = a2[1];
          *a1 = *a2;
          a1[1] = v18;
          v19 = (void *)a2[2];
          a1[2] = (uint64_t)v19;
          swift_bridgeObjectRetain(v18);
          v20 = v19;
          v21 = *(int *)(sub_5440(&qword_2621A8) + 64);
          v22 = (char *)a1 + v21;
          v23 = (char *)a2 + v21;
          v24 = type metadata accessor for LocalizerRequest(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 16))(v22, v23, v24);
          v14 = a1;
          v15 = v12;
          v16 = 2;
          goto LABEL_13;
        case 3u:
          v25 = a2[1];
          *a1 = *a2;
          a1[1] = v25;
          swift_bridgeObjectRetain(v25);
          v26 = *(int *)(sub_5440(&qword_2621B0) + 48);
          v27 = (char *)a1 + v26;
          v28 = (char *)a2 + v26;
          v29 = type metadata accessor for LocalizerRequest(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v29 - 8) + 16))(v27, v28, v29);
          v14 = a1;
          v15 = v12;
          v16 = 3;
          goto LABEL_13;
        case 4u:
          v30 = type metadata accessor for LocalizerRequest(0);
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v30 - 8) + 16))(a1, a2, v30);
          v31 = *(int *)(sub_5440(&qword_2621B8) + 48);
          v32 = (uint64_t *)((char *)a1 + v31);
          v33 = (uint64_t *)((char *)a2 + v31);
          v34 = v33[1];
          *v32 = *v33;
          v32[1] = v34;
          swift_bridgeObjectRetain(v34);
          v14 = a1;
          v15 = v12;
          v16 = 4;
          goto LABEL_13;
        case 5u:
          v35 = type metadata accessor for LocalizerRequest(0);
          v36 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v35 - 8) + 16);
          v36(a1, a2, v35);
          v37 = sub_5440(&qword_2621C0);
          v36((uint64_t *)((char *)a1 + *(int *)(v37 + 48)), (uint64_t *)((char *)a2 + *(int *)(v37 + 48)), v35);
          v14 = a1;
          v15 = v12;
          v16 = 5;
LABEL_13:
          swift_storeEnumTagMultiPayload(v14, v15, v16);
          break;
        default:
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
          break;
      }
      v38 = *(int *)(sub_5440(qword_2621C8) + 48);
      v39 = (char *)a1 + v38;
      v40 = (char *)a2 + v38;
      v41 = type metadata accessor for ButtonViewModel.ActionKind(0);
      if (swift_getEnumCaseMultiPayload(v40, v41) == 1)
      {
        v42 = type metadata accessor for URL(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v42 - 8) + 16))(v39, v40, v42);
        v43 = v39;
        v44 = v41;
        v45 = 1;
      }
      else
      {
        v46 = *((_QWORD *)v40 + 3);
        if (v46)
        {
          v47 = *((_QWORD *)v40 + 4);
          *((_QWORD *)v39 + 3) = v46;
          *((_QWORD *)v39 + 4) = v47;
          (**(void (***)(char *, char *))(v46 - 8))(v39, v40);
        }
        else
        {
          v48 = *((_OWORD *)v40 + 1);
          *(_OWORD *)v39 = *(_OWORD *)v40;
          *((_OWORD *)v39 + 1) = v48;
          *((_QWORD *)v39 + 4) = *((_QWORD *)v40 + 4);
        }
        v43 = v39;
        v44 = v41;
        v45 = 0;
      }
      swift_storeEnumTagMultiPayload(v43, v44, v45);
      v49 = *(int *)(v8 + 36);
      v50 = (char *)a1 + v49;
      v51 = (char *)a2 + v49;
      v52 = sub_5440(&qword_262198);
      v53 = *(_QWORD *)(v52 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v53 + 48))(v51, 1, v52))
      {
        v54 = sub_5440(&qword_262190);
        memcpy(v50, v51, *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64));
      }
      else
      {
        v55 = type metadata accessor for LocalizerRequest(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v55 - 8) + 16))(v50, v51, v55);
        v56 = *(int *)(v52 + 48);
        v57 = *(_OWORD *)&v51[v56 + 24];
        *(_OWORD *)&v50[v56 + 24] = v57;
        (**(void (***)(void))(v57 - 8))();
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v53 + 56))(v50, 0, 1, v52);
      }
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v9 + 56))(a1, 0, 1, v8);
    }
    v58 = *(int *)(a3 + 36);
    v59 = *(int *)(a3 + 40);
    v60 = (uint64_t *)((char *)a1 + v58);
    v61 = (uint64_t *)((char *)a2 + v58);
    v62 = v61[1];
    *v60 = *v61;
    v60[1] = v62;
    v63 = (_WORD *)((char *)a1 + v59);
    v64 = (_WORD *)((char *)a2 + v59);
    swift_retain(v62);
    v65 = sub_5440(&qword_25F548);
    if (swift_getEnumCaseMultiPayload(v64, v65) == 1)
    {
      *v63 = *v64;
      v66 = (int *)type metadata accessor for SizeConstants.Environment(0);
      v67 = v66[6];
      v68 = (char *)v63 + v67;
      v69 = (char *)v64 + v67;
      v70 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v70 - 8) + 16))(v68, v69, v70);
      *(_QWORD *)((char *)v63 + v66[7]) = *(_QWORD *)((char *)v64 + v66[7]);
      v71 = v66[8];
      v72 = (char *)v63 + v71;
      v73 = (char *)v64 + v71;
      v72[2] = v73[2];
      *(_WORD *)v72 = *(_WORD *)v73;
      v74 = v63;
      v75 = v65;
      v76 = 1;
    }
    else
    {
      v77 = *(_QWORD *)v64;
      *(_QWORD *)v63 = *(_QWORD *)v64;
      swift_retain(v77);
      v74 = v63;
      v75 = v65;
      v76 = 0;
    }
    swift_storeEnumTagMultiPayload(v74, v75, v76);
  }
  return a1;
}

double sub_83540(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  double result;

  v6 = type metadata accessor for ModalActionSheet.Buttons(0, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a4);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(a1, 1, v6))
  {
    v7 = type metadata accessor for ButtonViewModel.Content(0);
    switch(swift_getEnumCaseMultiPayload(a1, v7))
    {
      case 0u:
        v8 = type metadata accessor for LocalizerRequest(0);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(a1, v8);
        break;
      case 1u:
        swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
        break;
      case 2u:
        swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));

        v9 = *(int *)(sub_5440(&qword_2621A8) + 64);
        goto LABEL_7;
      case 3u:
        swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
        v9 = *(int *)(sub_5440(&qword_2621B0) + 48);
LABEL_7:
        v10 = a1 + v9;
        v11 = type metadata accessor for LocalizerRequest(0);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
        break;
      case 4u:
        v12 = type metadata accessor for LocalizerRequest(0);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(a1, v12);
        v13 = sub_5440(&qword_2621B8);
        swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(v13 + 48) + 8));
        break;
      case 5u:
        v14 = type metadata accessor for LocalizerRequest(0);
        v15 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8);
        v15(a1, v14);
        v16 = sub_5440(&qword_2621C0);
        v15(a1 + *(int *)(v16 + 48), v14);
        break;
      default:
        break;
    }
    v17 = (_QWORD *)(a1 + *(int *)(sub_5440(qword_2621C8) + 48));
    v18 = type metadata accessor for ButtonViewModel.ActionKind(0);
    if (swift_getEnumCaseMultiPayload(v17, v18) == 1)
    {
      v19 = type metadata accessor for URL(0);
      (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(v17, v19);
    }
    else if (v17[3])
    {
      _s7BooksUI13AnyPagedFrameVwxx_0(v17);
    }
    v20 = a1 + *(int *)(v6 + 36);
    v21 = sub_5440(&qword_262198);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 48))(v20, 1, v21))
    {
      v22 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 8))(v20, v22);
      _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)(v20 + *(int *)(v21 + 48)));
    }
  }
  swift_release(*(_QWORD *)(a1 + *(int *)(a2 + 36) + 8));
  v23 = (_QWORD *)(a1 + *(int *)(a2 + 40));
  v24 = sub_5440(&qword_25F548);
  if (swift_getEnumCaseMultiPayload(v23, v24) == 1)
  {
    v25 = (char *)v23 + *(int *)(type metadata accessor for SizeConstants.Environment(0) + 24);
    v26 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v26 - 8) + 8))(v25, v26);
  }
  else
  {
    *(_QWORD *)&result = swift_release(*v23).n128_u64[0];
  }
  return result;
}

_QWORD *sub_83810(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  id v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(_QWORD *, _QWORD *, uint64_t);
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  uint64_t v60;
  _WORD *v61;
  _WORD *v62;
  uint64_t v63;
  int *v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;

  v7 = type metadata accessor for ModalActionSheet.Buttons(0, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), a4);
  v8 = *(_QWORD *)(v7 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
  {
    v9 = type metadata accessor for Optional(0, v7);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  else
  {
    v10 = type metadata accessor for ButtonViewModel.Content(0);
    switch(swift_getEnumCaseMultiPayload(a2, v10))
    {
      case 0u:
        v11 = type metadata accessor for LocalizerRequest(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a1, a2, v11);
        v12 = a1;
        v13 = v10;
        v14 = 0;
        goto LABEL_11;
      case 1u:
        v15 = a2[1];
        *a1 = *a2;
        a1[1] = v15;
        swift_bridgeObjectRetain(v15);
        v12 = a1;
        v13 = v10;
        v14 = 1;
        goto LABEL_11;
      case 2u:
        v16 = a2[1];
        *a1 = *a2;
        a1[1] = v16;
        v17 = (void *)a2[2];
        a1[2] = v17;
        swift_bridgeObjectRetain(v16);
        v18 = v17;
        v19 = *(int *)(sub_5440(&qword_2621A8) + 64);
        v20 = (char *)a1 + v19;
        v21 = (char *)a2 + v19;
        v22 = type metadata accessor for LocalizerRequest(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v20, v21, v22);
        v12 = a1;
        v13 = v10;
        v14 = 2;
        goto LABEL_11;
      case 3u:
        v23 = a2[1];
        *a1 = *a2;
        a1[1] = v23;
        swift_bridgeObjectRetain(v23);
        v24 = *(int *)(sub_5440(&qword_2621B0) + 48);
        v25 = (char *)a1 + v24;
        v26 = (char *)a2 + v24;
        v27 = type metadata accessor for LocalizerRequest(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 16))(v25, v26, v27);
        v12 = a1;
        v13 = v10;
        v14 = 3;
        goto LABEL_11;
      case 4u:
        v28 = type metadata accessor for LocalizerRequest(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v28 - 8) + 16))(a1, a2, v28);
        v29 = *(int *)(sub_5440(&qword_2621B8) + 48);
        v30 = (_QWORD *)((char *)a1 + v29);
        v31 = (_QWORD *)((char *)a2 + v29);
        v32 = v31[1];
        *v30 = *v31;
        v30[1] = v32;
        swift_bridgeObjectRetain(v32);
        v12 = a1;
        v13 = v10;
        v14 = 4;
        goto LABEL_11;
      case 5u:
        v33 = type metadata accessor for LocalizerRequest(0);
        v34 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v33 - 8) + 16);
        v34(a1, a2, v33);
        v35 = sub_5440(&qword_2621C0);
        v34((_QWORD *)((char *)a1 + *(int *)(v35 + 48)), (_QWORD *)((char *)a2 + *(int *)(v35 + 48)), v33);
        v12 = a1;
        v13 = v10;
        v14 = 5;
LABEL_11:
        swift_storeEnumTagMultiPayload(v12, v13, v14);
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
        break;
    }
    v36 = *(int *)(sub_5440(qword_2621C8) + 48);
    v37 = (char *)a1 + v36;
    v38 = (char *)a2 + v36;
    v39 = type metadata accessor for ButtonViewModel.ActionKind(0);
    if (swift_getEnumCaseMultiPayload(v38, v39) == 1)
    {
      v40 = type metadata accessor for URL(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v40 - 8) + 16))(v37, v38, v40);
      v41 = v37;
      v42 = v39;
      v43 = 1;
    }
    else
    {
      v44 = *((_QWORD *)v38 + 3);
      if (v44)
      {
        v45 = *((_QWORD *)v38 + 4);
        *((_QWORD *)v37 + 3) = v44;
        *((_QWORD *)v37 + 4) = v45;
        (**(void (***)(char *, char *))(v44 - 8))(v37, v38);
      }
      else
      {
        v46 = *((_OWORD *)v38 + 1);
        *(_OWORD *)v37 = *(_OWORD *)v38;
        *((_OWORD *)v37 + 1) = v46;
        *((_QWORD *)v37 + 4) = *((_QWORD *)v38 + 4);
      }
      v41 = v37;
      v42 = v39;
      v43 = 0;
    }
    swift_storeEnumTagMultiPayload(v41, v42, v43);
    v47 = *(int *)(v7 + 36);
    v48 = (char *)a1 + v47;
    v49 = (char *)a2 + v47;
    v50 = sub_5440(&qword_262198);
    v51 = *(_QWORD *)(v50 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v51 + 48))(v49, 1, v50))
    {
      v52 = sub_5440(&qword_262190);
      memcpy(v48, v49, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
    }
    else
    {
      v53 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v53 - 8) + 16))(v48, v49, v53);
      v54 = *(int *)(v50 + 48);
      v55 = *(_OWORD *)&v49[v54 + 24];
      *(_OWORD *)&v48[v54 + 24] = v55;
      (**(void (***)(void))(v55 - 8))();
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v51 + 56))(v48, 0, 1, v50);
    }
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
  }
  v56 = *(int *)(a3 + 36);
  v57 = *(int *)(a3 + 40);
  v58 = (_QWORD *)((char *)a1 + v56);
  v59 = (_QWORD *)((char *)a2 + v56);
  v60 = v59[1];
  *v58 = *v59;
  v58[1] = v60;
  v61 = (_WORD *)((char *)a1 + v57);
  v62 = (_WORD *)((char *)a2 + v57);
  swift_retain(v60);
  v63 = sub_5440(&qword_25F548);
  if (swift_getEnumCaseMultiPayload(v62, v63) == 1)
  {
    *v61 = *v62;
    v64 = (int *)type metadata accessor for SizeConstants.Environment(0);
    v65 = v64[6];
    v66 = (char *)v61 + v65;
    v67 = (char *)v62 + v65;
    v68 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v68 - 8) + 16))(v66, v67, v68);
    *(_QWORD *)((char *)v61 + v64[7]) = *(_QWORD *)((char *)v62 + v64[7]);
    v69 = v64[8];
    v70 = (char *)v61 + v69;
    v71 = (char *)v62 + v69;
    v70[2] = v71[2];
    *(_WORD *)v70 = *(_WORD *)v71;
    v72 = 1;
  }
  else
  {
    v73 = *(_QWORD *)v62;
    *(_QWORD *)v61 = *(_QWORD *)v62;
    swift_retain(v73);
    v72 = 0;
  }
  swift_storeEnumTagMultiPayload(v61, v63, v72);
  return a1;
}

_QWORD *sub_83CF4(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(_QWORD *, uint64_t, uint64_t);
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  size_t v17;
  void *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  id v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(_QWORD *, _QWORD *, uint64_t);
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _BYTE *v73;
  _BYTE *v74;
  uint64_t v75;
  int *v76;
  uint64_t v77;
  _BYTE *v78;
  _BYTE *v79;
  uint64_t v80;
  uint64_t v81;
  _BYTE *v82;
  _BYTE *v83;
  char v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v88;
  uint64_t v89;
  void *v90;
  id v91;
  uint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  void (*v107)(_QWORD *, _QWORD *, uint64_t);
  uint64_t v108;
  uint64_t v109;
  char *v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  __int128 v118;
  __int128 v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t (*v125)(uint64_t, uint64_t, uint64_t);
  int v126;
  int v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;

  v7 = type metadata accessor for ModalActionSheet.Buttons(0, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), a4);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v8 + 48);
  v10 = v9(a1, 1, v7);
  v11 = v9(a2, 1, v7);
  if (!v10)
  {
    if (!v11)
    {
      if (a1 != a2)
      {
        sub_224DC((uint64_t)a1, type metadata accessor for ButtonViewModel.Content);
        v20 = type metadata accessor for ButtonViewModel.Content(0);
        switch(swift_getEnumCaseMultiPayload(a2, v20))
        {
          case 0u:
            v21 = type metadata accessor for LocalizerRequest(0);
            (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(a1, a2, v21);
            v22 = a1;
            v23 = v20;
            v24 = 0;
            goto LABEL_41;
          case 1u:
            *a1 = *a2;
            v88 = a2[1];
            a1[1] = v88;
            swift_bridgeObjectRetain(v88);
            v22 = a1;
            v23 = v20;
            v24 = 1;
            goto LABEL_41;
          case 2u:
            *a1 = *a2;
            v89 = a2[1];
            a1[1] = v89;
            v90 = (void *)a2[2];
            a1[2] = v90;
            swift_bridgeObjectRetain(v89);
            v91 = v90;
            v92 = *(int *)(sub_5440(&qword_2621A8) + 64);
            v93 = (char *)a1 + v92;
            v94 = (char *)a2 + v92;
            v95 = type metadata accessor for LocalizerRequest(0);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v95 - 8) + 16))(v93, v94, v95);
            v22 = a1;
            v23 = v20;
            v24 = 2;
            goto LABEL_41;
          case 3u:
            *a1 = *a2;
            v96 = a2[1];
            a1[1] = v96;
            swift_bridgeObjectRetain(v96);
            v97 = *(int *)(sub_5440(&qword_2621B0) + 48);
            v98 = (char *)a1 + v97;
            v99 = (char *)a2 + v97;
            v100 = type metadata accessor for LocalizerRequest(0);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v100 - 8) + 16))(v98, v99, v100);
            v22 = a1;
            v23 = v20;
            v24 = 3;
            goto LABEL_41;
          case 4u:
            v101 = type metadata accessor for LocalizerRequest(0);
            (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v101 - 8) + 16))(a1, a2, v101);
            v102 = *(int *)(sub_5440(&qword_2621B8) + 48);
            v103 = (_QWORD *)((char *)a1 + v102);
            v104 = (_QWORD *)((char *)a2 + v102);
            *v103 = *v104;
            v105 = v104[1];
            v103[1] = v105;
            swift_bridgeObjectRetain(v105);
            v22 = a1;
            v23 = v20;
            v24 = 4;
            goto LABEL_41;
          case 5u:
            v106 = type metadata accessor for LocalizerRequest(0);
            v107 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v106 - 8) + 16);
            v107(a1, a2, v106);
            v108 = sub_5440(&qword_2621C0);
            v107((_QWORD *)((char *)a1 + *(int *)(v108 + 48)), (_QWORD *)((char *)a2 + *(int *)(v108 + 48)), v106);
            v22 = a1;
            v23 = v20;
            v24 = 5;
LABEL_41:
            swift_storeEnumTagMultiPayload(v22, v23, v24);
            break;
          default:
            memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
            break;
        }
        v109 = *(int *)(sub_5440(qword_2621C8) + 48);
        v110 = (char *)a1 + v109;
        v111 = (char *)a2 + v109;
        sub_224DC((uint64_t)a1 + v109, type metadata accessor for ButtonViewModel.ActionKind);
        v112 = type metadata accessor for ButtonViewModel.ActionKind(0);
        if (swift_getEnumCaseMultiPayload(v111, v112) == 1)
        {
          v113 = type metadata accessor for URL(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v113 - 8) + 16))(v110, v111, v113);
          v114 = v110;
          v115 = v112;
          v116 = 1;
        }
        else
        {
          v117 = *((_QWORD *)v111 + 3);
          if (v117)
          {
            *((_QWORD *)v110 + 3) = v117;
            *((_QWORD *)v110 + 4) = *((_QWORD *)v111 + 4);
            (**(void (***)(char *, char *))(v117 - 8))(v110, v111);
          }
          else
          {
            v118 = *(_OWORD *)v111;
            v119 = *((_OWORD *)v111 + 1);
            *((_QWORD *)v110 + 4) = *((_QWORD *)v111 + 4);
            *(_OWORD *)v110 = v118;
            *((_OWORD *)v110 + 1) = v119;
          }
          v114 = v110;
          v115 = v112;
          v116 = 0;
        }
        swift_storeEnumTagMultiPayload(v114, v115, v116);
      }
      v120 = *(int *)(v7 + 36);
      v121 = (uint64_t)a1 + v120;
      v122 = (char *)a2 + v120;
      v123 = sub_5440(&qword_262198);
      v124 = *(_QWORD *)(v123 - 8);
      v125 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v124 + 48);
      v126 = v125(v121, 1, v123);
      v127 = v125((uint64_t)v122, 1, v123);
      if (v126)
      {
        if (!v127)
        {
          v128 = type metadata accessor for LocalizerRequest(0);
          (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v128 - 8) + 16))(v121, v122, v128);
          v129 = *(int *)(v123 + 48);
          v130 = v121 + v129;
          v131 = *(_QWORD *)&v122[v129 + 24];
          *(_QWORD *)(v130 + 24) = v131;
          *(_QWORD *)(v130 + 32) = *(_QWORD *)&v122[v129 + 32];
          (**(void (***)(void))(v131 - 8))();
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v124 + 56))(v121, 0, 1, v123);
          goto LABEL_29;
        }
      }
      else
      {
        if (!v127)
        {
          v132 = type metadata accessor for LocalizerRequest(0);
          (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v132 - 8) + 24))(v121, v122, v132);
          sub_142F8((_QWORD *)(v121 + *(int *)(v123 + 48)), &v122[*(int *)(v123 + 48)]);
          goto LABEL_29;
        }
        sub_B414(v121, &qword_262198);
      }
      v17 = *(_QWORD *)(*(_QWORD *)(sub_5440(&qword_262190) - 8) + 64);
      v18 = (void *)v121;
      v19 = v122;
LABEL_8:
      memcpy(v18, v19, v17);
      goto LABEL_29;
    }
    (*(void (**)(_QWORD *, uint64_t))(v8 + 8))(a1, v7);
LABEL_7:
    v17 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for Optional(0, v7) - 8) + 64);
    v18 = a1;
    v19 = (char *)a2;
    goto LABEL_8;
  }
  if (v11)
    goto LABEL_7;
  v12 = type metadata accessor for ButtonViewModel.Content(0);
  switch(swift_getEnumCaseMultiPayload(a2, v12))
  {
    case 0u:
      v13 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(a1, a2, v13);
      v14 = a1;
      v15 = v12;
      v16 = 0;
      goto LABEL_18;
    case 1u:
      *a1 = *a2;
      v25 = a2[1];
      a1[1] = v25;
      swift_bridgeObjectRetain(v25);
      v14 = a1;
      v15 = v12;
      v16 = 1;
      goto LABEL_18;
    case 2u:
      *a1 = *a2;
      v26 = a2[1];
      a1[1] = v26;
      v27 = (void *)a2[2];
      a1[2] = v27;
      swift_bridgeObjectRetain(v26);
      v28 = v27;
      v29 = *(int *)(sub_5440(&qword_2621A8) + 64);
      v30 = (char *)a1 + v29;
      v31 = (char *)a2 + v29;
      v32 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v32 - 8) + 16))(v30, v31, v32);
      v14 = a1;
      v15 = v12;
      v16 = 2;
      goto LABEL_18;
    case 3u:
      *a1 = *a2;
      v33 = a2[1];
      a1[1] = v33;
      swift_bridgeObjectRetain(v33);
      v34 = *(int *)(sub_5440(&qword_2621B0) + 48);
      v35 = (char *)a1 + v34;
      v36 = (char *)a2 + v34;
      v37 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v37 - 8) + 16))(v35, v36, v37);
      v14 = a1;
      v15 = v12;
      v16 = 3;
      goto LABEL_18;
    case 4u:
      v38 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v38 - 8) + 16))(a1, a2, v38);
      v39 = *(int *)(sub_5440(&qword_2621B8) + 48);
      v40 = (_QWORD *)((char *)a1 + v39);
      v41 = (_QWORD *)((char *)a2 + v39);
      *v40 = *v41;
      v42 = v41[1];
      v40[1] = v42;
      swift_bridgeObjectRetain(v42);
      v14 = a1;
      v15 = v12;
      v16 = 4;
      goto LABEL_18;
    case 5u:
      v43 = type metadata accessor for LocalizerRequest(0);
      v44 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v43 - 8) + 16);
      v44(a1, a2, v43);
      v45 = sub_5440(&qword_2621C0);
      v44((_QWORD *)((char *)a1 + *(int *)(v45 + 48)), (_QWORD *)((char *)a2 + *(int *)(v45 + 48)), v43);
      v14 = a1;
      v15 = v12;
      v16 = 5;
LABEL_18:
      swift_storeEnumTagMultiPayload(v14, v15, v16);
      break;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
      break;
  }
  v46 = *(int *)(sub_5440(qword_2621C8) + 48);
  v47 = (char *)a1 + v46;
  v48 = (char *)a2 + v46;
  v49 = type metadata accessor for ButtonViewModel.ActionKind(0);
  if (swift_getEnumCaseMultiPayload(v48, v49) == 1)
  {
    v50 = type metadata accessor for URL(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v50 - 8) + 16))(v47, v48, v50);
    v51 = v47;
    v52 = v49;
    v53 = 1;
  }
  else
  {
    v54 = *((_QWORD *)v48 + 3);
    if (v54)
    {
      *((_QWORD *)v47 + 3) = v54;
      *((_QWORD *)v47 + 4) = *((_QWORD *)v48 + 4);
      (**(void (***)(char *, char *))(v54 - 8))(v47, v48);
    }
    else
    {
      v55 = *(_OWORD *)v48;
      v56 = *((_OWORD *)v48 + 1);
      *((_QWORD *)v47 + 4) = *((_QWORD *)v48 + 4);
      *(_OWORD *)v47 = v55;
      *((_OWORD *)v47 + 1) = v56;
    }
    v51 = v47;
    v52 = v49;
    v53 = 0;
  }
  swift_storeEnumTagMultiPayload(v51, v52, v53);
  v57 = *(int *)(v7 + 36);
  v58 = (char *)a1 + v57;
  v59 = (char *)a2 + v57;
  v60 = sub_5440(&qword_262198);
  v61 = *(_QWORD *)(v60 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v61 + 48))(v59, 1, v60))
  {
    v62 = sub_5440(&qword_262190);
    memcpy(v58, v59, *(_QWORD *)(*(_QWORD *)(v62 - 8) + 64));
  }
  else
  {
    v63 = type metadata accessor for LocalizerRequest(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v63 - 8) + 16))(v58, v59, v63);
    v64 = *(int *)(v60 + 48);
    v65 = &v58[v64];
    v66 = *(_QWORD *)&v59[v64 + 24];
    *((_QWORD *)v65 + 3) = v66;
    *((_QWORD *)v65 + 4) = *(_QWORD *)&v59[v64 + 32];
    (**(void (***)(void))(v66 - 8))();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v61 + 56))(v58, 0, 1, v60);
  }
  (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
LABEL_29:
  v67 = *(int *)(a3 + 36);
  v68 = (_QWORD *)((char *)a1 + v67);
  v69 = (_QWORD *)((char *)a2 + v67);
  v70 = v69[1];
  v71 = v68[1];
  *v68 = *v69;
  v68[1] = v70;
  swift_retain(v70);
  swift_release(v71);
  if (a1 != a2)
  {
    v72 = *(int *)(a3 + 40);
    v73 = (char *)a1 + v72;
    v74 = (char *)a2 + v72;
    sub_B414((uint64_t)a1 + v72, &qword_25F548);
    v75 = sub_5440(&qword_25F548);
    if (swift_getEnumCaseMultiPayload(v74, v75) == 1)
    {
      *v73 = *v74;
      v73[1] = v74[1];
      v76 = (int *)type metadata accessor for SizeConstants.Environment(0);
      v77 = v76[6];
      v78 = &v73[v77];
      v79 = &v74[v77];
      v80 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v80 - 8) + 16))(v78, v79, v80);
      *(_QWORD *)&v73[v76[7]] = *(_QWORD *)&v74[v76[7]];
      v81 = v76[8];
      v82 = &v73[v81];
      v83 = &v74[v81];
      v84 = v83[2];
      *(_WORD *)v82 = *(_WORD *)v83;
      v82[2] = v84;
      v85 = 1;
    }
    else
    {
      v86 = *(_QWORD *)v74;
      *(_QWORD *)v73 = *(_QWORD *)v74;
      swift_retain(v86);
      v85 = 0;
    }
    swift_storeEnumTagMultiPayload(v73, v75, v85);
  }
  return a1;
}

_QWORD *sub_8466C(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(_QWORD *, _QWORD *, uint64_t);
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  __int128 v43;
  uint64_t v44;
  _WORD *v45;
  _WORD *v46;
  uint64_t v47;
  int *v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;

  v7 = type metadata accessor for ModalActionSheet.Buttons(0, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), a4);
  v8 = *(_QWORD *)(v7 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
  {
    v9 = type metadata accessor for Optional(0, v7);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  else
  {
    v10 = type metadata accessor for ButtonViewModel.Content(0);
    switch(swift_getEnumCaseMultiPayload(a2, v10))
    {
      case 0u:
        v11 = type metadata accessor for LocalizerRequest(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(a1, a2, v11);
        v12 = a1;
        v13 = v10;
        v14 = 0;
        goto LABEL_10;
      case 2u:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        a1[2] = a2[2];
        v15 = *(int *)(sub_5440(&qword_2621A8) + 64);
        v16 = (char *)a1 + v15;
        v17 = (char *)a2 + v15;
        v18 = type metadata accessor for LocalizerRequest(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v16, v17, v18);
        v12 = a1;
        v13 = v10;
        v14 = 2;
        goto LABEL_10;
      case 3u:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        v19 = *(int *)(sub_5440(&qword_2621B0) + 48);
        v20 = (char *)a1 + v19;
        v21 = (char *)a2 + v19;
        v22 = type metadata accessor for LocalizerRequest(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v20, v21, v22);
        v12 = a1;
        v13 = v10;
        v14 = 3;
        goto LABEL_10;
      case 4u:
        v23 = type metadata accessor for LocalizerRequest(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v23 - 8) + 32))(a1, a2, v23);
        v24 = sub_5440(&qword_2621B8);
        *(_OWORD *)((char *)a1 + *(int *)(v24 + 48)) = *(_OWORD *)((char *)a2 + *(int *)(v24 + 48));
        v12 = a1;
        v13 = v10;
        v14 = 4;
        goto LABEL_10;
      case 5u:
        v25 = type metadata accessor for LocalizerRequest(0);
        v26 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v25 - 8) + 32);
        v26(a1, a2, v25);
        v27 = sub_5440(&qword_2621C0);
        v26((_QWORD *)((char *)a1 + *(int *)(v27 + 48)), (_QWORD *)((char *)a2 + *(int *)(v27 + 48)), v25);
        v12 = a1;
        v13 = v10;
        v14 = 5;
LABEL_10:
        swift_storeEnumTagMultiPayload(v12, v13, v14);
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
        break;
    }
    v28 = *(int *)(sub_5440(qword_2621C8) + 48);
    v29 = (char *)a1 + v28;
    v30 = (char *)a2 + v28;
    v31 = type metadata accessor for ButtonViewModel.ActionKind(0);
    if (swift_getEnumCaseMultiPayload(v30, v31) == 1)
    {
      v32 = type metadata accessor for URL(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v32 - 8) + 32))(v29, v30, v32);
      swift_storeEnumTagMultiPayload(v29, v31, 1);
    }
    else
    {
      memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
    }
    v33 = *(int *)(v7 + 36);
    v34 = (char *)a1 + v33;
    v35 = (char *)a2 + v33;
    v36 = sub_5440(&qword_262198);
    v37 = *(_QWORD *)(v36 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48))(v35, 1, v36))
    {
      v38 = sub_5440(&qword_262190);
      memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
    }
    else
    {
      v39 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v39 - 8) + 32))(v34, v35, v39);
      v40 = *(int *)(v36 + 48);
      v41 = &v34[v40];
      v42 = &v35[v40];
      v43 = *((_OWORD *)v42 + 1);
      *(_OWORD *)v41 = *(_OWORD *)v42;
      *((_OWORD *)v41 + 1) = v43;
      *((_QWORD *)v41 + 4) = *((_QWORD *)v42 + 4);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v37 + 56))(v34, 0, 1, v36);
    }
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
  }
  v44 = *(int *)(a3 + 40);
  *(_OWORD *)((char *)a1 + *(int *)(a3 + 36)) = *(_OWORD *)((char *)a2 + *(int *)(a3 + 36));
  v45 = (_WORD *)((char *)a1 + v44);
  v46 = (_WORD *)((char *)a2 + v44);
  v47 = sub_5440(&qword_25F548);
  if (swift_getEnumCaseMultiPayload(v46, v47) == 1)
  {
    *v45 = *v46;
    v48 = (int *)type metadata accessor for SizeConstants.Environment(0);
    v49 = v48[6];
    v50 = (char *)v45 + v49;
    v51 = (char *)v46 + v49;
    v52 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v52 - 8) + 32))(v50, v51, v52);
    *(_QWORD *)((char *)v45 + v48[7]) = *(_QWORD *)((char *)v46 + v48[7]);
    v53 = v48[8];
    v54 = (char *)v45 + v53;
    v55 = (char *)v46 + v53;
    v54[2] = v55[2];
    *(_WORD *)v54 = *(_WORD *)v55;
    swift_storeEnumTagMultiPayload(v45, v47, 1);
  }
  else
  {
    memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
  }
  return a1;
}

_QWORD *sub_84ADC(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(_QWORD *, uint64_t, uint64_t);
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  size_t v17;
  void *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(_QWORD *, _QWORD *, uint64_t);
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _WORD *v57;
  _WORD *v58;
  uint64_t v59;
  int *v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void (*v80)(_QWORD *, _QWORD *, uint64_t);
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t (*v92)(uint64_t, uint64_t, uint64_t);
  int v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  __int128 v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  __int128 v104;

  v7 = type metadata accessor for ModalActionSheet.Buttons(0, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), a4);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v8 + 48);
  v10 = v9(a1, 1, v7);
  v11 = v9(a2, 1, v7);
  if (!v10)
  {
    if (!v11)
    {
      if (a1 != a2)
      {
        sub_224DC((uint64_t)a1, type metadata accessor for ButtonViewModel.Content);
        v20 = type metadata accessor for ButtonViewModel.Content(0);
        switch(swift_getEnumCaseMultiPayload(a2, v20))
        {
          case 0u:
            v21 = type metadata accessor for LocalizerRequest(0);
            (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(a1, a2, v21);
            v22 = a1;
            v23 = v20;
            v24 = 0;
            goto LABEL_35;
          case 2u:
            *(_OWORD *)a1 = *(_OWORD *)a2;
            a1[2] = a2[2];
            v69 = *(int *)(sub_5440(&qword_2621A8) + 64);
            v70 = (char *)a1 + v69;
            v71 = (char *)a2 + v69;
            v72 = type metadata accessor for LocalizerRequest(0);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v72 - 8) + 32))(v70, v71, v72);
            v22 = a1;
            v23 = v20;
            v24 = 2;
            goto LABEL_35;
          case 3u:
            *(_OWORD *)a1 = *(_OWORD *)a2;
            v73 = *(int *)(sub_5440(&qword_2621B0) + 48);
            v74 = (char *)a1 + v73;
            v75 = (char *)a2 + v73;
            v76 = type metadata accessor for LocalizerRequest(0);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v76 - 8) + 32))(v74, v75, v76);
            v22 = a1;
            v23 = v20;
            v24 = 3;
            goto LABEL_35;
          case 4u:
            v77 = type metadata accessor for LocalizerRequest(0);
            (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v77 - 8) + 32))(a1, a2, v77);
            v78 = sub_5440(&qword_2621B8);
            *(_OWORD *)((char *)a1 + *(int *)(v78 + 48)) = *(_OWORD *)((char *)a2 + *(int *)(v78 + 48));
            v22 = a1;
            v23 = v20;
            v24 = 4;
            goto LABEL_35;
          case 5u:
            v79 = type metadata accessor for LocalizerRequest(0);
            v80 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v79 - 8) + 32);
            v80(a1, a2, v79);
            v81 = sub_5440(&qword_2621C0);
            v80((_QWORD *)((char *)a1 + *(int *)(v81 + 48)), (_QWORD *)((char *)a2 + *(int *)(v81 + 48)), v79);
            v22 = a1;
            v23 = v20;
            v24 = 5;
LABEL_35:
            swift_storeEnumTagMultiPayload(v22, v23, v24);
            break;
          default:
            memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
            break;
        }
        v82 = *(int *)(sub_5440(qword_2621C8) + 48);
        v83 = (char *)a1 + v82;
        v84 = (char *)a2 + v82;
        sub_224DC((uint64_t)a1 + v82, type metadata accessor for ButtonViewModel.ActionKind);
        v85 = type metadata accessor for ButtonViewModel.ActionKind(0);
        if (swift_getEnumCaseMultiPayload(v84, v85) == 1)
        {
          v86 = type metadata accessor for URL(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v86 - 8) + 32))(v83, v84, v86);
          swift_storeEnumTagMultiPayload(v83, v85, 1);
        }
        else
        {
          memcpy(v83, v84, *(_QWORD *)(*(_QWORD *)(v85 - 8) + 64));
        }
      }
      v87 = *(int *)(v7 + 36);
      v88 = (uint64_t)a1 + v87;
      v89 = (char *)a2 + v87;
      v90 = sub_5440(&qword_262198);
      v91 = *(_QWORD *)(v90 - 8);
      v92 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v91 + 48);
      v93 = v92(v88, 1, v90);
      v94 = v92((uint64_t)v89, 1, v90);
      if (v93)
      {
        if (!v94)
        {
          v95 = type metadata accessor for LocalizerRequest(0);
          (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v95 - 8) + 32))(v88, v89, v95);
          v96 = *(int *)(v90 + 48);
          v97 = v88 + v96;
          v98 = &v89[v96];
          v99 = *((_OWORD *)v98 + 1);
          *(_OWORD *)v97 = *(_OWORD *)v98;
          *(_OWORD *)(v97 + 16) = v99;
          *(_QWORD *)(v97 + 32) = *((_QWORD *)v98 + 4);
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v91 + 56))(v88, 0, 1, v90);
          goto LABEL_25;
        }
      }
      else
      {
        if (!v94)
        {
          v100 = type metadata accessor for LocalizerRequest(0);
          (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v100 - 8) + 40))(v88, v89, v100);
          v101 = *(int *)(v90 + 48);
          v102 = v88 + v101;
          v103 = &v89[v101];
          _s7BooksUI13AnyPagedFrameVwxx_0((_QWORD *)v102);
          v104 = *((_OWORD *)v103 + 1);
          *(_OWORD *)v102 = *(_OWORD *)v103;
          *(_OWORD *)(v102 + 16) = v104;
          *(_QWORD *)(v102 + 32) = *((_QWORD *)v103 + 4);
          goto LABEL_25;
        }
        sub_B414(v88, &qword_262198);
      }
      v17 = *(_QWORD *)(*(_QWORD *)(sub_5440(&qword_262190) - 8) + 64);
      v18 = (void *)v88;
      v19 = v89;
LABEL_8:
      memcpy(v18, v19, v17);
      goto LABEL_25;
    }
    (*(void (**)(_QWORD *, uint64_t))(v8 + 8))(a1, v7);
LABEL_7:
    v17 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for Optional(0, v7) - 8) + 64);
    v18 = a1;
    v19 = (char *)a2;
    goto LABEL_8;
  }
  if (v11)
    goto LABEL_7;
  v12 = type metadata accessor for ButtonViewModel.Content(0);
  switch(swift_getEnumCaseMultiPayload(a2, v12))
  {
    case 0u:
      v13 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(a1, a2, v13);
      v14 = a1;
      v15 = v12;
      v16 = 0;
      goto LABEL_17;
    case 2u:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      a1[2] = a2[2];
      v25 = *(int *)(sub_5440(&qword_2621A8) + 64);
      v26 = (char *)a1 + v25;
      v27 = (char *)a2 + v25;
      v28 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v28 - 8) + 32))(v26, v27, v28);
      v14 = a1;
      v15 = v12;
      v16 = 2;
      goto LABEL_17;
    case 3u:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      v29 = *(int *)(sub_5440(&qword_2621B0) + 48);
      v30 = (char *)a1 + v29;
      v31 = (char *)a2 + v29;
      v32 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v32 - 8) + 32))(v30, v31, v32);
      v14 = a1;
      v15 = v12;
      v16 = 3;
      goto LABEL_17;
    case 4u:
      v33 = type metadata accessor for LocalizerRequest(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v33 - 8) + 32))(a1, a2, v33);
      v34 = sub_5440(&qword_2621B8);
      *(_OWORD *)((char *)a1 + *(int *)(v34 + 48)) = *(_OWORD *)((char *)a2 + *(int *)(v34 + 48));
      v14 = a1;
      v15 = v12;
      v16 = 4;
      goto LABEL_17;
    case 5u:
      v35 = type metadata accessor for LocalizerRequest(0);
      v36 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v35 - 8) + 32);
      v36(a1, a2, v35);
      v37 = sub_5440(&qword_2621C0);
      v36((_QWORD *)((char *)a1 + *(int *)(v37 + 48)), (_QWORD *)((char *)a2 + *(int *)(v37 + 48)), v35);
      v14 = a1;
      v15 = v12;
      v16 = 5;
LABEL_17:
      swift_storeEnumTagMultiPayload(v14, v15, v16);
      break;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
      break;
  }
  v38 = *(int *)(sub_5440(qword_2621C8) + 48);
  v39 = (char *)a1 + v38;
  v40 = (char *)a2 + v38;
  v41 = type metadata accessor for ButtonViewModel.ActionKind(0);
  if (swift_getEnumCaseMultiPayload(v40, v41) == 1)
  {
    v42 = type metadata accessor for URL(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v42 - 8) + 32))(v39, v40, v42);
    swift_storeEnumTagMultiPayload(v39, v41, 1);
  }
  else
  {
    memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
  }
  v43 = *(int *)(v7 + 36);
  v44 = (char *)a1 + v43;
  v45 = (char *)a2 + v43;
  v46 = sub_5440(&qword_262198);
  v47 = *(_QWORD *)(v46 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v47 + 48))(v45, 1, v46))
  {
    v48 = sub_5440(&qword_262190);
    memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
  }
  else
  {
    v49 = type metadata accessor for LocalizerRequest(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v49 - 8) + 32))(v44, v45, v49);
    v50 = *(int *)(v46 + 48);
    v51 = &v44[v50];
    v52 = &v45[v50];
    v53 = *((_OWORD *)v52 + 1);
    *(_OWORD *)v51 = *(_OWORD *)v52;
    *((_OWORD *)v51 + 1) = v53;
    *((_QWORD *)v51 + 4) = *((_QWORD *)v52 + 4);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v47 + 56))(v44, 0, 1, v46);
  }
  (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
LABEL_25:
  v54 = *(int *)(a3 + 36);
  v55 = *(_QWORD *)((char *)a1 + v54 + 8);
  *(_OWORD *)((char *)a1 + v54) = *(_OWORD *)((char *)a2 + v54);
  swift_release(v55);
  if (a1 != a2)
  {
    v56 = *(int *)(a3 + 40);
    v57 = (_WORD *)((char *)a1 + v56);
    v58 = (_WORD *)((char *)a2 + v56);
    sub_B414((uint64_t)a1 + v56, &qword_25F548);
    v59 = sub_5440(&qword_25F548);
    if (swift_getEnumCaseMultiPayload(v58, v59) == 1)
    {
      *v57 = *v58;
      v60 = (int *)type metadata accessor for SizeConstants.Environment(0);
      v61 = v60[6];
      v62 = (char *)v57 + v61;
      v63 = (char *)v58 + v61;
      v64 = type metadata accessor for DynamicTypeSize(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v64 - 8) + 32))(v62, v63, v64);
      *(_QWORD *)((char *)v57 + v60[7]) = *(_QWORD *)((char *)v58 + v60[7]);
      v65 = v60[8];
      v66 = (char *)v57 + v65;
      v67 = (char *)v58 + v65;
      v66[2] = v67[2];
      *(_WORD *)v66 = *(_WORD *)v67;
      swift_storeEnumTagMultiPayload(v57, v59, 1);
    }
    else
    {
      memcpy(v57, v58, *(_QWORD *)(*(_QWORD *)(v59 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_85330(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_8533C);
}

uint64_t sub_8533C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  unint64_t v13;

  v7 = type metadata accessor for ModalActionSheet.Buttons(255, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), a4);
  v8 = type metadata accessor for Optional(0, v7);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
    v12 = a1;
    return v11(v12, a2, v10);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v10 = sub_5440(&qword_25F558);
    v12 = a1 + *(int *)(a3 + 40);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48);
    return v11(v12, a2, v10);
  }
  v13 = *(_QWORD *)(a1 + *(int *)(a3 + 36));
  if (v13 >= 0xFFFFFFFF)
    LODWORD(v13) = -1;
  return (v13 + 1);
}

uint64_t sub_853F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_85404);
}

uint64_t sub_85404(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v13;

  v8 = type metadata accessor for ModalActionSheet.Buttons(255, *(_QWORD *)(a4 + 16), *(_QWORD *)(a4 + 24), a4);
  result = type metadata accessor for Optional(0, v8);
  v10 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v10 + 84) == a3)
  {
    v11 = result;
    v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
    v13 = a1;
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(_QWORD *)(a1 + *(int *)(a4 + 36)) = (a2 - 1);
      return result;
    }
    v11 = sub_5440(&qword_25F558);
    v13 = a1 + *(int *)(a4 + 40);
    v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56);
  }
  return v12(v13, a2, a2, v11);
}

